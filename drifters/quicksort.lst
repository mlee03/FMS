Page 1           Source Listing                  QKSRT_PARTITION
2021-06-01 08:54                                 /tmp/ifortNZ8rn0.i90

      1 # 1 "quicksort.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 
     22 
     23 ! Written by Magnus Lie Hetland
     24 
     25 function qksrt_partition(n, list, start, end) result(top)
     26   implicit none
     27   integer, intent(in) :: n
     28   integer, intent(inout) :: list(n)
     29      integer, intent(in) :: start, end
     30 
     31      integer pivot, bottom, top
     32      logical done
     33 
     34      pivot = list(end)                          ! Partition around the last value
     35      bottom = start-1                           ! Start outside the area to be partitioned
     36      top = end                                  ! Ditto
     37 
     38      done = .false.
     39      do while (.not. done)                      ! Until all elements are partitioned...
     40 
     41         do while (.not. done)                  ! Until we find an out of place element...
     42            bottom = bottom+1                  ! ... move the bottom up.
     43 
     44            if(bottom == top) then             ! If we hit the top...
     45               done = .true.                  ! ... we are done.
     46               exit
     47            endif
     48 
     49            if(list(bottom) > pivot) then           ! Is the bottom out of place?
     50               list(top) = list(bottom)       ! Then put it at the top...
     51               exit                          ! ... and start searching from the top.
     52            endif
     53         enddo
     54 
     55         do while (.not. done)                        ! Until we find an out of place element...
     56            top = top-1                        ! ... move the top down.
     57 

Page 2           Source Listing                  QKSRT_PARTITION
2021-06-01 08:54                                 quicksort.F90

     58            if(top == bottom) then                  ! If we hit the bottom...
     59               done = .true.                      ! ... we are done.
     60               exit
     61            endif
     62 
     63            if(list(top) < pivot) then              ! Is the top out of place?
     64               list(bottom) = list(top)       ! Then put it at the bottom...
     65               exit                          ! ...and start searching from the bottom.
     66            endif
     67         enddo
     68      enddo
     69 
     70      list(top) = pivot                          ! Put the pivot in its place.
     71 ! Return the split point
     72 
     73 end function qksrt_partition


ENTRY POINTS

  Name                        
                              
 qksrt_partition_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BOTTOM                     Local  31       I(4)            4           scalar                    35,42,44,49,50,58,64              
 DONE                       Local  32       L(4)            4           scalar                    38,39,41,45,55,59                 
 END                        Dummy  25       I(4)            4           scalar   ARG,IN           34,36                             
 LIST                       Dummy  25       I(4)            4     1     0        ARG,INOUT        34,49,50,63,64,70                 
 N                          Dummy  25       I(4)            4           scalar   ARG,IN           28                                
 PIVOT                      Local  31       I(4)            4           scalar                    34,49,63,70                       
 QKSRT_PARTITION            Func   25       I(4)            4           scalar                                                      
 START                      Dummy  25       I(4)            4           scalar   ARG,IN           35                                
 TOP                        Local  31       I(4)            4           scalar                    36,44,50,56,58,63,64,70           

Page 3           Source Listing                  QKSRT_PARTITION
2021-06-01 08:54                                 quicksort.F90

     74 
     75 recursive subroutine qksrt_quicksort(n, list, start, end)
     76      implicit none
     77      integer, intent(in) :: n
     78      integer, intent(inout) :: list(n)
     79      integer, intent(in) :: start, end
     80      integer :: split, qksrt_partition
     81      external :: qksrt_partition
     82      if(start < end) then                            ! If there are two or more elements...
     83         split = qksrt_partition(n, list, start, end)    ! ... partition the sublist...
     84         call qksrt_quicksort(n, list,  start, split-1)        ! ... and sort both halves.
     85         call qksrt_quicksort(n, list, split+1, end)
     86      endif
     87 end subroutine qksrt_quicksort


ENTRY POINTS

  Name                        
                              
 qksrt_quicksort_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 END                        Dummy  75       I(4)            4           scalar   ARG,IN           82,83,85                          
 LIST                       Dummy  75       I(4)            4     1     0        ARG,INOUT        83,84,85                          
 N                          Dummy  75       I(4)            4           scalar   ARG,IN           78,83,84,85                       
 QKSRT_PARTITION            Func   80       I(4)            4           scalar                    83                                
 QKSRT_QUICKSORT            Subr   75                                                             84,85                             
 SPLIT                      Local  80       I(4)            4           scalar                    83,84,85                          
 START                      Dummy  75       I(4)            4           scalar   ARG,IN           82,83,84                          

Page 4           Source Listing                  QKSRT_QUICKSORT
2021-06-01 08:54 Subprograms/Common Blocks       quicksort.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 QKSRT_PARTITION            Func   25       I(4)            4           scalar                                                      
 QKSRT_QUICKSORT            Subr   75                                                             84,85                             

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__

Page 5           Source Listing                  QKSRT_QUICKSORT
2021-06-01 08:54                                 quicksort.F90

       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg

Page 6           Source Listing                  QKSRT_QUICKSORT
2021-06-01 08:54                                 quicksort.F90

       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : quicksort.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
