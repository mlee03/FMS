Page 1           Source Listing                  FM_UTIL_SET_CALLER
2021-06-01 08:55                                 /tmp/ifortoLe2t2.i90

      1 # 1 "fm_util.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 module fm_util_mod  !{
     22 !
     23 !<CONTACT EMAIL="Richard.Slater@noaa.gov"> Richard D. Slater
     24 !</CONTACT>
     25 !
     26 !<REVIEWER EMAIL="John.Dunne@noaa.gov"> John P. Dunne
     27 !</REVIEWER>
     28 !
     29 !<OVERVIEW>
     30 ! Utility routines for the field manager
     31 !</OVERVIEW>
     32 !
     33 !<DESCRIPTION>
     34 ! This module provides utility routines for the field manager.
     35 ! Basically, it provides for error catching, reporting and
     36 ! termination while interfacing with the field manager.
     37 !</DESCRIPTION>
     38 !
     39 ! <INFO>
     40 ! </INFO>
     41 !
     42 
     43 use field_manager_mod, only: fm_string_len, fm_path_name_len, fm_field_name_len, fm_type_name_len
     44 use field_manager_mod, only: fm_get_type, fm_get_index, fm_get_length
     45 use field_manager_mod, only: fm_get_current_list, fm_new_list, fm_change_list, fm_loop_over_list
     46 use field_manager_mod, only: fm_new_value, fm_get_value
     47 use field_manager_mod, only: fm_exists, fm_dump_list
     48 use fms_mod,           only: FATAL, stdout
     49 use mpp_mod,           only: mpp_error
     50 
     51 implicit none
     52 
     53 private
     54 
     55 public  fm_util_start_namelist
     56 public  fm_util_end_namelist
     57 public  fm_util_check_for_bad_fields

Page 2           Source Listing                  FM_UTIL_SET_CALLER
2021-06-01 08:55                                 fm_util.F90

     58 public  fm_util_set_caller
     59 public  fm_util_reset_caller
     60 public  fm_util_set_no_overwrite
     61 public  fm_util_reset_no_overwrite
     62 public  fm_util_set_good_name_list
     63 public  fm_util_reset_good_name_list
     64 public  fm_util_get_length
     65 public  fm_util_get_integer
     66 public  fm_util_get_logical
     67 public  fm_util_get_real
     68 public  fm_util_get_string
     69 public  fm_util_get_integer_array
     70 public  fm_util_get_logical_array
     71 public  fm_util_get_real_array
     72 public  fm_util_get_string_array
     73 public  fm_util_set_value
     74 public  fm_util_set_value_integer_array
     75 public  fm_util_set_value_logical_array
     76 public  fm_util_set_value_real_array
     77 public  fm_util_set_value_string_array
     78 public  fm_util_set_value_integer
     79 public  fm_util_set_value_logical
     80 public  fm_util_set_value_real
     81 public  fm_util_set_value_string
     82 !public  fm_util_get_index
     83 public  fm_util_get_index_list
     84 public  fm_util_get_index_string
     85 
     86 !
     87 !       Public variables
     88 !
     89 
     90 character(len=128), public      :: fm_util_default_caller = ' '
     91 
     92 !
     93 !       private parameters
     94 !
     95 
     96 character(len=48), parameter    :: mod_name = 'fm_util_mod'
     97 
     98 !
     99 !       Private variables
    100 !
    101 
    102 character(len=128)              :: save_default_caller = ' '
    103 character(len=128)              :: default_good_name_list = ' '
    104 character(len=128)              :: save_default_good_name_list = ' '
    105 logical                         :: default_no_overwrite = .false.
    106 logical                         :: save_default_no_overwrite = .false.
    107 character(len=fm_path_name_len) :: save_current_list
    108 character(len=fm_path_name_len) :: save_path
    109 character(len=fm_path_name_len) :: save_name
    110 ! Include variable "version" to be written to log file.
    111 # 1 "../include/file_version.h" 1 
    112 ! -*-f90-*-
    113 !***********************************************************************
    114 !*                   GNU Lesser General Public License

Page 3           Source Listing                  FM_UTIL_SET_CALLER
2021-06-01 08:55                                 ../include/file_version.h

    115 !*
    116 !* This file is part of the GFDL Flexible Modeling System (FMS).
    117 !*
    118 !* FMS is free software: you can redistribute it and/or modify it under
    119 !* the terms of the GNU Lesser General Public License as published by
    120 !* the Free Software Foundation, either version 3 of the License, or (at
    121 !* your option) any later version.
    122 !*
    123 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    124 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    125 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    126 !* for more details.
    127 !*
    128 !* You should have received a copy of the GNU Lesser General Public
    129 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    130 !***********************************************************************
    131 
    132 # 23
    133 
    134   character(len=*), parameter :: version = 'unknown'
    135 
    136 # 111 "fm_util.F90" 2 
    137 
    138 !
    139 !        Interface definitions for overloaded routines
    140 !
    141 
    142 !interface  fm_util_get_value  !{
    143 !module procedure  fm_util_get_value_integer
    144 !module procedure  fm_util_get_value_logical
    145 !module procedure  fm_util_get_value_real
    146 !module procedure  fm_util_get_value_string
    147 !module procedure  fm_util_get_value_integer_array
    148 !module procedure  fm_util_get_value_logical_array
    149 !module procedure  fm_util_get_value_real_array
    150 !module procedure  fm_util_get_value_string_array
    151 !end interface  !}
    152 
    153 interface  fm_util_set_value  !{
    154   module procedure  fm_util_set_value_integer_array
    155   module procedure  fm_util_set_value_logical_array
    156   module procedure  fm_util_set_value_real_array
    157   module procedure  fm_util_set_value_string_array
    158   module procedure  fm_util_set_value_integer
    159   module procedure  fm_util_set_value_logical
    160   module procedure  fm_util_set_value_real
    161   module procedure  fm_util_set_value_string
    162 end interface  !}
    163 
    164 !interface  fm_util_get_index  !{
    165 !module procedure  fm_util_get_index_list
    166 !module procedure  fm_util_get_index_string
    167 !end interface  !}
    168 
    169 
    170 contains
    171 

Page 4           Source Listing                  FM_UTIL_SET_CALLER
2021-06-01 08:55                                 fm_util.F90

    172 
    173 !#######################################################################
    174 ! <SUBROUTINE NAME="fm_util_set_caller">
    175 !
    176 ! <DESCRIPTION>
    177 ! Set the default value for the optional "caller" variable used in many of these
    178 ! subroutines. If the argument is blank, then set the default to blank, otherwise
    179 ! the deault will have brackets placed around the argument.
    180 !
    181 ! </DESCRIPTION>
    182 !
    183 
    184 subroutine fm_util_set_caller(caller)  !{
    185 
    186 implicit none
    187 
    188 !
    189 !       arguments
    190 !
    191 
    192 character(len=*), intent(in)          :: caller
    193 
    194 !
    195 !       Local variables
    196 !
    197 
    198 !
    199 !       save the default caller string
    200 !
    201 
    202 save_default_caller = fm_util_default_caller
    203 
    204 !
    205 !       set the default caller string
    206 !
    207 
    208 if (caller .eq. ' ') then  !{
    209   fm_util_default_caller = ' '
    210 else  !}{
    211   fm_util_default_caller = '[' // trim(caller) // ']'
    212 endif  !}
    213 
    214 return
    215 
    216 end subroutine fm_util_set_caller  !}

Page 5           Source Listing                  FM_UTIL_SET_CALLER
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                          
                                                
 fm_util_mod_mp_fm_util_set_caller_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALLER                     Dummy  184      CHAR                        scalar   ARG,IN           208,211                           
 FM_UTIL_DEFAULT_CALLER     Local  202      CHAR            128         scalar                    90,202,209,211,246,463,621,707,812
                                                                                                  ,907,1005,1103,1201,1299,1418,1538
                                                                                                  ,1662,1780,1944,2108,2272,2439,261
                                                                                                  7,2795,2973,3144,3311             
 FM_UTIL_SET_CALLER         Subr   184                                                                                              
 SAVE_DEFAULT_CALLER        Local  202      CHAR            128         scalar                    102,202,246,247                   
 TRIM                       Func   211                                  scalar                    211                               

Page 6           Source Listing                  FM_UTIL_SET_CALLER
2021-06-01 08:55                                 fm_util.F90

    217 ! </SUBROUTINE> NAME="fm_util_set_caller"
    218 
    219 
    220 !#######################################################################
    221 ! <SUBROUTINE NAME="fm_util_reset_caller">
    222 !
    223 ! <DESCRIPTION>
    224 ! Reset the default value for the optional "caller" variable used in many of these
    225 ! subroutines to blank.
    226 !
    227 ! </DESCRIPTION>
    228 !
    229 
    230 subroutine fm_util_reset_caller  !{
    231 
    232 implicit none
    233 
    234 !
    235 !       arguments
    236 !
    237 
    238 !
    239 !       Local variables
    240 !
    241 
    242 !
    243 !       reset the default caller string
    244 !
    245 
    246 fm_util_default_caller = save_default_caller
    247 save_default_caller = ' '
    248 
    249 return
    250 
    251 end subroutine fm_util_reset_caller  !}

Page 7           Source Listing                  FM_UTIL_RESET_CALLER
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                            
                                                  
 fm_util_mod_mp_fm_util_reset_caller_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FM_UTIL_RESET_CALLER       Subr   230                                                                                              

Page 8           Source Listing                  FM_UTIL_RESET_CALLER
2021-06-01 08:55                                 fm_util.F90

    252 ! </SUBROUTINE> NAME="fm_util_reset_caller"
    253 
    254 
    255 !#######################################################################
    256 ! <SUBROUTINE NAME="fm_util_set_good_name_list">
    257 !
    258 ! <DESCRIPTION>
    259 ! Set the default value for the optional "good_name_list" variable used in many of these
    260 ! subroutines.
    261 !
    262 ! </DESCRIPTION>
    263 !
    264 
    265 subroutine fm_util_set_good_name_list(good_name_list)  !{
    266 
    267 implicit none
    268 
    269 !
    270 !       arguments
    271 !
    272 
    273 character(len=*), intent(in)          :: good_name_list
    274 
    275 !
    276 !       Local variables
    277 !
    278 
    279 !
    280 !       save the default good_name_list string
    281 !
    282 
    283 save_default_good_name_list = default_good_name_list
    284 
    285 !
    286 !       set the default good_name_list string
    287 !
    288 
    289 default_good_name_list = good_name_list
    290 
    291 return
    292 
    293 end subroutine fm_util_set_good_name_list  !}

Page 9           Source Listing                  FM_UTIL_SET_GOOD_NAME_LIST
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                  
                                                        
 fm_util_mod_mp_fm_util_set_good_name_list_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DEFAULT_GOOD_NAME_LIST     Local  283      CHAR            128         scalar                    103,283,289,323,1823,1987,2151,231
                                                                                                  5,2482,2660,2838,3016             
 FM_UTIL_SET_GOOD_NAME_LIST Subr   265                                                                                              
 GOOD_NAME_LIST             Dummy  265      CHAR                        scalar   ARG,IN           289                               
 SAVE_DEFAULT_GOOD_NAME_LIS                                                                                                         
 T                          Local  283      CHAR            128         scalar                    104,283,323,324                   

Page 10          Source Listing                  FM_UTIL_SET_GOOD_NAME_LIST
2021-06-01 08:55                                 fm_util.F90

    294 ! </SUBROUTINE> NAME="fm_util_set_good_name_list"
    295 
    296 
    297 !#######################################################################
    298 ! <SUBROUTINE NAME="fm_util_reset_good_name_list">
    299 !
    300 ! <DESCRIPTION>
    301 ! Reset the default value for the optional "good_name_list" variable used in many of these
    302 ! subroutines to the saved value.
    303 !
    304 ! </DESCRIPTION>
    305 !
    306 
    307 subroutine fm_util_reset_good_name_list  !{
    308 
    309 implicit none
    310 
    311 !
    312 !       arguments
    313 !
    314 
    315 !
    316 !       Local variables
    317 !
    318 
    319 !
    320 !       reset the default good_name_list string
    321 !
    322 
    323 default_good_name_list = save_default_good_name_list
    324 save_default_good_name_list = ' '
    325 
    326 return
    327 
    328 end subroutine fm_util_reset_good_name_list  !}

Page 11          Source Listing                  FM_UTIL_RESET_GOOD_NAME_LIST
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                    
                                                          
 fm_util_mod_mp_fm_util_reset_good_name_list_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FM_UTIL_RESET_GOOD_NAME_LI                                                                                                         
 ST                         Subr   307                                                                                              

Page 12          Source Listing                  FM_UTIL_RESET_GOOD_NAME_LIST
2021-06-01 08:55                                 fm_util.F90

    329 ! </SUBROUTINE> NAME="fm_util_reset_good_name_list"
    330 
    331 
    332 !#######################################################################
    333 ! <SUBROUTINE NAME="fm_util_set_no_overwrite">
    334 !
    335 ! <DESCRIPTION>
    336 ! Set the default value for the optional "no_overwrite" variable used in some of these
    337 ! subroutines.
    338 !
    339 ! </DESCRIPTION>
    340 !
    341 
    342 subroutine fm_util_set_no_overwrite(no_overwrite)  !{
    343 
    344 implicit none
    345 
    346 !
    347 !       arguments
    348 !
    349 
    350 logical, intent(in)          :: no_overwrite
    351 
    352 !
    353 !       Local variables
    354 !
    355 
    356 !
    357 !       save the default no_overwrite string
    358 !
    359 
    360 save_default_no_overwrite = default_no_overwrite
    361 
    362 !
    363 !       set the default no_overwrite value
    364 !
    365 
    366 default_no_overwrite = no_overwrite
    367 
    368 return
    369 
    370 end subroutine fm_util_set_no_overwrite  !}

Page 13          Source Listing                  FM_UTIL_SET_NO_OVERWRITE
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                
                                                      
 fm_util_mod_mp_fm_util_set_no_overwrite_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DEFAULT_NO_OVERWRITE       Local  360      L(4)            4           scalar                    105,360,366,400,1813,1977,2141,230
                                                                                                  5,2472,2650,2828,3006             
 FM_UTIL_SET_NO_OVERWRITE   Subr   342                                                                                              
 NO_OVERWRITE               Dummy  342      L(4)            4           scalar   ARG,IN           366                               
 SAVE_DEFAULT_NO_OVERWRITE  Local  360      L(4)            4           scalar                    106,360,400,401                   

Page 14          Source Listing                  FM_UTIL_SET_NO_OVERWRITE
2021-06-01 08:55                                 fm_util.F90

    371 ! </SUBROUTINE> NAME="fm_util_set_no_overwrite"
    372 
    373 
    374 !#######################################################################
    375 ! <SUBROUTINE NAME="fm_util_reset_no_overwrite">
    376 !
    377 ! <DESCRIPTION>
    378 ! Reset the default value for the optional "no_overwrite" variable used in some of these
    379 ! subroutines to false.
    380 !
    381 ! </DESCRIPTION>
    382 !
    383 
    384 subroutine fm_util_reset_no_overwrite  !{
    385 
    386 implicit none
    387 
    388 !
    389 !       arguments
    390 !
    391 
    392 !
    393 !       Local variables
    394 !
    395 
    396 !
    397 !       reset the default no_overwrite value
    398 !
    399 
    400 default_no_overwrite = save_default_no_overwrite
    401 save_default_no_overwrite = .false.
    402 
    403 return
    404 
    405 end subroutine fm_util_reset_no_overwrite  !}

Page 15          Source Listing                  FM_UTIL_RESET_NO_OVERWRITE
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                  
                                                        
 fm_util_mod_mp_fm_util_reset_no_overwrite_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FM_UTIL_RESET_NO_OVERWRITE Subr   384                                                                                              

Page 16          Source Listing                  FM_UTIL_RESET_NO_OVERWRITE
2021-06-01 08:55                                 fm_util.F90

    406 ! </SUBROUTINE> NAME="fm_util_reset_no_overwrite"
    407 
    408 
    409 !#######################################################################
    410 ! <SUBROUTINE NAME="fm_util_check_for_bad_fields">
    411 !
    412 ! <DESCRIPTION>
    413 ! Check for unrecognized fields in a list
    414 !
    415 ! </DESCRIPTION>
    416 !
    417 
    418 subroutine fm_util_check_for_bad_fields(list, good_fields, caller)  !{
    419 
    420 implicit none
    421 
    422 !
    423 !       arguments
    424 !
    425 
    426 character(len=*), intent(in)                    :: list
    427 character(len=*), intent(in), dimension(:)      :: good_fields
    428 character(len=*), intent(in), optional          :: caller
    429 
    430 !
    431 !       Local parameters
    432 !
    433 
    434 character(len=48), parameter  :: sub_name = 'fm_util_check_for_bad_fields'
    435 
    436 !
    437 !       Local variables
    438 !
    439 
    440 logical                                 :: fm_success
    441 integer                                 :: i
    442 integer                                 :: ind
    443 integer                                 :: list_length
    444 integer                                 :: good_length
    445 character(len=fm_type_name_len)         :: typ
    446 character(len=fm_field_name_len)        :: name
    447 logical                                 :: found
    448 character(len=256)                      :: error_header
    449 character(len=256)                      :: warn_header
    450 character(len=256)                      :: note_header
    451 character(len=128)                      :: caller_str
    452 integer                         :: out_unit
    453 
    454 out_unit = stdout()
    455 
    456 !
    457 !       set the caller string and headers
    458 !
    459 
    460 if (present(caller)) then  !{
    461   caller_str = '[' // trim(caller) // ']'
    462 else  !}{

Page 17          Source Listing                  FM_UTIL_CHECK_FOR_BAD_FIELDS
2021-06-01 08:55                                 fm_util.F90

    463   caller_str = fm_util_default_caller
    464 endif  !}
    465 
    466 error_header = '==>Error from ' // trim(mod_name) //   &
    467                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    468 warn_header = '==>Warning from ' // trim(mod_name) //  &
    469               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    470 note_header = '==>Note from ' // trim(mod_name) //     &
    471               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    472 
    473 !
    474 !       check that a list is given (fatal if not)
    475 !
    476 
    477 if (list .eq. ' ') then  !{
    478   write (out_unit,*) trim(error_header) // ' Empty list given'
    479   call mpp_error(FATAL, trim(error_header) // ' Empty list given')
    480 endif  !}
    481 
    482 !
    483 !       Check that we have been given a list
    484 !
    485 
    486 if (fm_get_type(list) .ne. 'list') then  !{
    487   write (out_unit,*) trim(error_header) // ' Not given a list: ' // trim(list)
    488   call mpp_error(FATAL, trim(error_header) // ' Not given a list: ' // trim(list))
    489 endif  !}
    490 
    491 !
    492 !       Get the list length
    493 !
    494 
    495 list_length = fm_get_length(list)
    496 if (list_length .lt. 0) then  !{
    497   call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(list))
    498 endif  !}
    499 
    500 !
    501 !       Get the number of good fields
    502 !
    503 
    504 good_length = size(good_fields)
    505 
    506 if (list_length .lt. good_length) then  !{
    507 
    508 !
    509 !       If the list length is less than the number of good fields this is an error
    510 !       as the list should be fully populated and we'll check which extra fields
    511 !       are given in good_fields
    512 !
    513 
    514   write (out_unit,*) trim(error_header), ' List length < number of good fields (',       &
    515        list_length, ' < ', good_length, ') in list ', trim(list)
    516 
    517   write (out_unit,*)
    518   write (out_unit,*) 'The list contains the following fields:'
    519   fm_success= fm_dump_list(list, .false.)

Page 18          Source Listing                  FM_UTIL_CHECK_FOR_BAD_FIELDS
2021-06-01 08:55                                 fm_util.F90

    520   write (out_unit,*)
    521   write (out_unit,*) 'The supposed list of good fields is:'
    522   do i = 1, good_length  !{
    523     if (fm_exists(trim(list) // '/' // good_fields(i))) then  !{
    524       write (out_unit,*) 'List field: "', trim(good_fields(i)), '"'
    525     else  !}{
    526       write (out_unit,*) 'EXTRA good field: "', trim(good_fields(i)), '"'
    527     endif  !}
    528   enddo  !} i
    529   write (out_unit,*)
    530 
    531   call mpp_error(FATAL, trim(error_header) //                                           &
    532        ' List length < number of good fields for list: ' // trim(list))
    533 
    534 elseif (list_length .gt. good_length) then  !}{
    535 
    536 !
    537 !       If the list length is greater than the number of good fields this is an error
    538 !       as the there should not be any more fields than those given in the good fields list
    539 !       and we'll check which extra fields are given in the list
    540 !
    541 
    542   write (out_unit,*) trim(warn_header), 'List length > number of good fields (',        &
    543        list_length, ' > ', good_length, ') in list ', trim(list)
    544 
    545   write (out_unit,*) trim(error_header), ' Start of list of fields'
    546   do while (fm_loop_over_list(list, name, typ, ind))  !{
    547     found = .false.
    548     do i = 1, good_length  !{
    549       found = found .or. (name .eq. good_fields(i))
    550     enddo  !} i
    551     if (found) then  !{
    552       write (out_unit,*) 'Good list field: "', trim(name), '"'
    553     else  !}{
    554       write (out_unit,*) 'EXTRA list field: "', trim(name), '"'
    555     endif  !}
    556   enddo  !}
    557   write (out_unit,*) trim(error_header), ' End of list of fields'
    558 
    559   call mpp_error(FATAL, trim(error_header) //                                           &
    560        ' List length > number of good fields for list: ' // trim(list))
    561 
    562 endif  !}
    563 
    564 !
    565 !       If the list length equals the number of good fields then all is good
    566 !
    567 
    568 return
    569 
    570 end subroutine fm_util_check_for_bad_fields  !}

Page 19          Source Listing                  FM_UTIL_CHECK_FOR_BAD_FIELDS
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                    
                                                          
 fm_util_mod_mp_fm_util_check_for_bad_fields_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALLER                     Dummy  418      CHAR                        scalar   ARG,IN           460,461                           
 CALLER_STR                 Local  451      CHAR            128         scalar                    461,463,467,469,471               
 ERROR_HEADER               Local  448      CHAR            256         scalar                    466,478,479,487,488,497,514,531,54
                                                                                                  5,557,559                         
 FATAL                      Param  479      I(4)            4           scalar   PRIV             48,479,488,497,531,559,636,645,722
                                                                                                  ,734,740,749,751,827,839,842,844,9
                                                                                                  22,929,936,941,943,1020,1027,1034,
                                                                                                  1039,1041,1118,1125,1132,1137,1139
                                                                                                  ,1216,1223,1230,1235,1237,1314,132
                                                                                                  6,1328,1340,1349,1354,1356,1433,14
                                                                                                  45,1447,1459,1468,1473,1475,1553,1
                                                                                                  565,1567,1579,1588,1592,1598,1600,
                                                                                                  1677,1689,1691,1703,1712,1717,1719
                                                                                                  ,1795,1803,1835,1842,1848,1854,186
                                                                                                  0,1880,1959,1967,1999,2006,2012,20
                                                                                                  18,2024,2044,2123,2131,2163,2170,2
                                                                                                  176,2182,2188,2208,2287,2295,2327,
                                                                                                  2334,2340,2346,2352,2372,2454,2462
                                                                                                  ,2488,2498,2504,2511,2518,2525,253
                                                                                                  1,2550,2632,2640,2666,2676,2682,26
                                                                                                  89,2696,2703,2709,2728,2810,2818,2
                                                                                                  844,2854,2860,2867,2874,2881,2887,
                                                                                                  2906,2988,2996,3022,3032,3038,3045
                                                                                                  ,3052,3059,3065,3084,3159,3232,324
                                                                                                  4,3254,3258,3326,3335,3337,3367,33
                                                                                                  78                                
 FM_DUMP_LIST               Func   519      L(4)            4           scalar   PRIV             47,519                            
 FM_EXISTS                  Func   523      L(4)            4           scalar   PRIV             47,523,1831,1839,1872,1878,1995,20
                                                                                                  03,2036,2042,2159,2167,2200,2206,2
                                                                                                  323,2331,2364,2370,2495,2521,2542,
                                                                                                  2548,2673,2699,2720,2726,2851,2877
                                                                                                  ,2898,2904,3029,3055,3076,3082    
 FM_FIELD_NAME_LEN          Param  446      I(4)            4           scalar   PRIV             43,446                            
 FM_GET_LENGTH              Func   495      I(4)            4           scalar   PRIV             44,495,643,732,927,1025,1123,1221,
                                                                                                  1324,1443,1563,1687,1840,2004,2168
                                                                                                  ,2332,2496,2674,2852,3030         
 FM_GET_TYPE                Func   486      CHAR            8           scalar   PRIV             44,486,730,835,925,1023,1121,1219,
                                                                                                  1346,1465,1585,1709               
 FM_LOOP_OVER_LIST          Local  546                                  scalar   PRIV             45,546                            
 FM_LOOP_OVER_LIST_OLD      Func   546      L(4)            4           scalar   PRIV             546                               
 FM_SUCCESS                 Local  440      L(4)            4           scalar                    519                               
 FM_TYPE_NAME_LEN           Param  445      I(4)            4           scalar   PRIV             43,445,695,803,894,992,1090,1188,1
                                                                                                  289,1408,1527,1652                
 FM_UTIL_CHECK_FOR_BAD_FIEL                                                                                                         

Page 20          Source Listing                  FM_UTIL_CHECK_FOR_BAD_FIELDS
2021-06-01 08:55 Symbol Table                    fm_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DS                         Subr   418                                                                                              
 FOUND                      Local  447      L(4)            4           scalar                    547,549,551                       
 GOOD_FIELDS                Dummy  418      CHAR                  1     1        ARG,IN           504,523,524,526,549               
 GOOD_LENGTH                Local  444      I(4)            4           scalar                    504,506,515,522,534,543,548       
 I                          Local  441      I(4)            4           scalar                    522,523,524,526,548,549           
 IND                        Local  442      I(4)            4           scalar                    546                               
 LIST                       Dummy  418      CHAR                        scalar   ARG,IN           477,486,487,488,495,497,515,519,52
                                                                                                  3,532,543,546,560                 
 LIST_LENGTH                Local  443      I(4)            4           scalar                    495,496,506,515,534,543           
 MOD_NAME                   Param  466      CHAR            48          scalar                    466,468,470,624,626,628,710,712,71
                                                                                                  4,815,817,819,910,912,914,1008,101
                                                                                                  0,1012,1106,1108,1110,1204,1206,12
                                                                                                  08,1302,1304,1306,1421,1423,1425,1
                                                                                                  541,1543,1545,1665,1667,1669,1783,
                                                                                                  1785,1787,1947,1949,1951,2111,2113
                                                                                                  ,2115,2275,2277,2279,2442,2444,244
                                                                                                  6,2620,2622,2624,2798,2800,2802,29
                                                                                                  76,2978,2980,3147,3149,3151,3314,3
                                                                                                  316,3318,3359,3362                
 MPP_ERROR                  Local  479                                  scalar   PRIV             49,479,488,497,531,559,636,645,722
                                                                                                  ,734,740,749,751,827,839,842,844,9
                                                                                                  22,929,936,941,943,1020,1027,1034,
                                                                                                  1039,1041,1118,1125,1132,1137,1139
                                                                                                  ,1216,1223,1230,1235,1237,1314,132
                                                                                                  6,1328,1340,1349,1354,1356,1433,14
                                                                                                  45,1447,1459,1468,1473,1475,1553,1
                                                                                                  565,1567,1579,1588,1592,1598,1600,
                                                                                                  1677,1689,1691,1703,1712,1717,1719
                                                                                                  ,1795,1803,1835,1842,1848,1854,186
                                                                                                  0,1880,1959,1967,1999,2006,2012,20
                                                                                                  18,2024,2044,2123,2131,2163,2170,2
                                                                                                  176,2182,2188,2208,2287,2295,2327,
                                                                                                  2334,2340,2346,2352,2372,2454,2462
                                                                                                  ,2488,2498,2504,2511,2518,2525,253
                                                                                                  1,2550,2632,2640,2666,2676,2682,26
                                                                                                  89,2696,2703,2709,2728,2810,2818,2
                                                                                                  844,2854,2860,2867,2874,2881,2887,
                                                                                                  2906,2988,2996,3022,3032,3038,3045
                                                                                                  ,3052,3059,3065,3084,3159,3232,324
                                                                                                  4,3254,3258,3326,3335,3337,3367,33
                                                                                                  78                                
 MPP_ERROR_BASIC            Subr   479                                           PRIV             479,488,497,531,559,636,645,722,73
                                                                                                  4,740,749,751,827,839,842,844,922,
                                                                                                  929,936,941,943,1020,1027,1034,103
                                                                                                  9,1041,1118,1125,1132,1137,1139,12
                                                                                                  16,1223,1230,1235,1237,1314,1326,1
                                                                                                  328,1340,1349,1354,1356,1433,1445,
                                                                                                  1447,1459,1468,1473,1475,1553,1565
                                                                                                  ,1567,1579,1588,1592,1598,1600,167
                                                                                                  7,1689,1691,1703,1712,1717,1719,17
                                                                                                  95,1803,1835,1842,1848,1854,1860,1
                                                                                                  880,1959,1967,1999,2006,2012,2018,
                                                                                                  2024,2044,2123,2131,2163,2170,2176
                                                                                                  ,2182,2188,2208,2287,2295,2327,233
                                                                                                  4,2340,2346,2352,2372,2454,2462,24

Page 21          Source Listing                  FM_UTIL_CHECK_FOR_BAD_FIELDS
2021-06-01 08:55 Symbol Table                    fm_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  88,2498,2504,2511,2518,2525,2531,2
                                                                                                  550,2632,2640,2666,2676,2682,2689,
                                                                                                  2696,2703,2709,2728,2810,2818,2844
                                                                                                  ,2854,2860,2867,2874,2881,2887,290
                                                                                                  6,2988,2996,3022,3032,3038,3045,30
                                                                                                  52,3059,3065,3084,3159,3232,3244,3
                                                                                                  254,3258,3326,3335,3337,3367,3378 
 NAME                       Local  446      CHAR            48          scalar                    546,549,552,554                   
 NOTE_HEADER                Local  450      CHAR            256         scalar                    470                               
 OUT_UNIT                   Local  452      I(4)            4           scalar                    454,478,487,514,517,518,520,521,52
                                                                                                  4,526,529,542,545,552,554,557     
 PRESENT                    Func   460                                  scalar                    460                               
 SIZE                       Func   504                                  scalar                    504                               
 STDOUT                     Func   454      I(4)            4           scalar   PRIV             48,454,3135                       
 SUB_NAME                   Param  434      CHAR            48          scalar                    467,469,471                       
 TRIM                       Func   461                                  scalar                    461,466,467,468,469,470,471,478,47
                                                                                                  9,487,488,497,514,515,523,524,526,
                                                                                                  531,532,542,543,545,552,554,557,55
                                                                                                  9,560                             
 TYP                        Local  445      CHAR            8           scalar                    546                               
 WARN_HEADER                Local  449      CHAR            256         scalar                    468,542                           

Page 22          Source Listing                  FM_UTIL_CHECK_FOR_BAD_FIELDS
2021-06-01 08:55                                 fm_util.F90

    571 ! </SUBROUTINE> NAME="fm_util_check_for_bad_fields"
    572 
    573 
    574 !#######################################################################
    575 ! <FUNCTION NAME="fm_util_get_length">
    576 !
    577 ! <DESCRIPTION>
    578 ! Get the length of an element of the Field Manager tree
    579 ! </DESCRIPTION>
    580 !
    581 function fm_util_get_length(name, caller)       &
    582          result (field_length)  !{
    583 
    584 implicit none
    585 
    586 !
    587 !       Return type
    588 !
    589 
    590 integer :: field_length
    591 
    592 !
    593 !       arguments
    594 !
    595 
    596 character(len=*), intent(in)            :: name
    597 character(len=*), intent(in), optional  :: caller
    598 
    599 !
    600 !       Local parameters
    601 !
    602 
    603 character(len=48), parameter  :: sub_name = 'fm_util_get_length'
    604 
    605 !
    606 !       Local variables
    607 !
    608 
    609 character(len=256)              :: error_header
    610 character(len=256)              :: warn_header
    611 character(len=256)              :: note_header
    612 character(len=128)              :: caller_str
    613 
    614 !
    615 !       set the caller string and headers
    616 !
    617 
    618 if (present(caller)) then  !{
    619   caller_str = '[' // trim(caller) // ']'
    620 else  !}{
    621   caller_str = fm_util_default_caller
    622 endif  !}
    623 
    624 error_header = '==>Error from ' // trim(mod_name) //   &
    625                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    626 warn_header = '==>Warning from ' // trim(mod_name) //  &
    627               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'

Page 23          Source Listing                  FM_UTIL_GET_LENGTH
2021-06-01 08:55                                 fm_util.F90

    628 note_header = '==>Note from ' // trim(mod_name) //     &
    629               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    630 
    631 !
    632 !       check that a name is given (fatal if not)
    633 !
    634 
    635 if (name .eq. ' ') then  !{
    636   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
    637 endif  !}
    638 
    639 !
    640 !       Get the field's length
    641 !
    642 
    643 field_length = fm_get_length(name)
    644 if (field_length .lt. 0) then  !{
    645   call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
    646 endif  !}
    647 
    648 return
    649 
    650 end function fm_util_get_length  !}


ENTRY POINTS

  Name                                          
                                                
 fm_util_mod_mp_fm_util_get_length_             

Page 24          Source Listing                  FM_UTIL_GET_LENGTH
2021-06-01 08:55 Symbol Table                    fm_util.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALLER                     Dummy  581      CHAR                        scalar   ARG,IN           618,619                           
 CALLER_STR                 Local  612      CHAR            128         scalar                    619,621,625,627,629               
 ERROR_HEADER               Local  609      CHAR            256         scalar                    624,636,645                       
 FIELD_LENGTH               Local  590      I(4)            4           scalar                    643,644                           
 FM_UTIL_GET_LENGTH         Func   581      I(4)            4           scalar                                                      
 NAME                       Dummy  581      CHAR                        scalar   ARG,IN           635,643,645                       
 NOTE_HEADER                Local  611      CHAR            256         scalar                    628                               
 PRESENT                    Func   618                                  scalar                    618                               
 SUB_NAME                   Param  603      CHAR            48          scalar                    625,627,629                       
 TRIM                       Func   619                                  scalar                    619,624,625,626,627,628,629,636,64
                                                                                                  5                                 
 WARN_HEADER                Local  610      CHAR            256         scalar                    626                               

Page 25          Source Listing                  FM_UTIL_GET_LENGTH
2021-06-01 08:55                                 fm_util.F90

    651 ! </FUNCTION> NAME="fm_util_get_length"
    652 
    653 
    654 !#######################################################################
    655 ! <FUNCTION NAME="fm_util_get_index_string">
    656 !
    657 ! <DESCRIPTION>
    658 ! Get the index of an element of a string in the Field Manager tree
    659 ! </DESCRIPTION>
    660 !
    661 function fm_util_get_index_string(name, string, caller)       &
    662          result (fm_index)  !{
    663 
    664 implicit none
    665 
    666 !
    667 !       Return type
    668 !
    669 
    670 integer :: fm_index
    671 
    672 !
    673 !       arguments
    674 !
    675 
    676 character(len=*), intent(in)            :: name
    677 character(len=*), intent(in)            :: string
    678 character(len=*), intent(in), optional  :: caller
    679 
    680 !
    681 !       Local parameters
    682 !
    683 
    684 character(len=48), parameter  :: sub_name = 'fm_util_get_index_string'
    685 
    686 !
    687 !       Local variables
    688 !
    689 
    690 character(len=256)              :: error_header
    691 character(len=256)              :: warn_header
    692 character(len=256)              :: note_header
    693 character(len=128)              :: caller_str
    694 character(len=32)               :: index_str
    695 character(len=fm_type_name_len) :: fm_type
    696 character(len=fm_string_len)    :: fm_string
    697 integer                         :: i
    698 integer                         :: length
    699 
    700 !
    701 !       set the caller string and headers
    702 !
    703 
    704 if (present(caller)) then  !{
    705   caller_str = '[' // trim(caller) // ']'
    706 else  !}{
    707   caller_str = fm_util_default_caller

Page 26          Source Listing                  FM_UTIL_GET_INDEX_STRING
2021-06-01 08:55                                 fm_util.F90

    708 endif  !}
    709 
    710 error_header = '==>Error from ' // trim(mod_name) //   &
    711                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    712 warn_header = '==>Warning from ' // trim(mod_name) //  &
    713               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    714 note_header = '==>Note from ' // trim(mod_name) //     &
    715               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    716 
    717 !
    718 !       check that a name is given (fatal if not)
    719 !
    720 
    721 if (name .eq. ' ') then  !{
    722   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
    723 endif  !}
    724 
    725 !
    726 !       Check the field's type and get the index
    727 !
    728 
    729 fm_index = 0
    730 fm_type = fm_get_type(name)
    731 if (fm_type .eq. 'string') then  !{
    732   length = fm_get_length(name)
    733   if (length .lt. 0) then  !{
    734     call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
    735   endif  !}
    736   if (length .gt. 0) then  !{
    737     do i = 1, length  !{
    738       if (.not. fm_get_value(name, fm_string, index = i)) then  !{
    739         write (index_str,*) '(', i, ')'
    740         call mpp_error(FATAL, trim(error_header) // ' Problem getting ' // trim(name) // trim(index_str))
    741       endif  !}
    742       if (fm_string .eq. string) then  !{
    743         fm_index = i
    744         exit
    745       endif  !}
    746     enddo  !} i
    747   endif  !}
    748 elseif (fm_type .eq. ' ') then  !}{
    749   call mpp_error(FATAL, trim(error_header) // ' Array does not exist: ' // trim(name))
    750 else  !}{
    751  call mpp_error(FATAL, trim(error_header) // ' Wrong type for ' // trim(name) // ', found (' // trim(fm_type) // ')')
    752 endif  !}
    753 
    754 !if (fm_index .eq. 0) then  !{
    755 !call mpp_error(FATAL, trim(error_header) // ' "' // trim(string) // '" does not exist in ' // trim(name))
    756 !endif  !}
    757 
    758 return
    759 
    760 end function fm_util_get_index_string  !}

Page 27          Source Listing                  FM_UTIL_GET_INDEX_STRING
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                
                                                      
 fm_util_mod_mp_fm_util_get_index_string_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALLER                     Dummy  661      CHAR                        scalar   ARG,IN           704,705                           
 CALLER_STR                 Local  693      CHAR            128         scalar                    705,707,711,713,715               
 ERROR_HEADER               Local  690      CHAR            256         scalar                    710,722,734,740,749,751           
 FM_GET_VALUE               Local  738                                  scalar   PRIV             46,738,934,1032,1130,1228,1348,146
                                                                                                  7,1587,1591,1711                  
 FM_GET_VALUE_STRING        Func   738      L(4)            4           scalar   PRIV             738,1228,1711                     
 FM_INDEX                   Local  670      I(4)            4           scalar                    729,743                           
 FM_STRING                  Local  696      CHAR            128         scalar                    738,742                           
 FM_STRING_LEN              Param  696      I(4)            4           scalar   PRIV             43,696,1164,1625,3297             
 FM_TYPE                    Local  695      CHAR            8           scalar                    730,731,748,751                   
 FM_UTIL_GET_INDEX_STRING   Func   661      I(4)            4           scalar                                                      
 I                          Local  697      I(4)            4           scalar                    737,738,739,743                   
 INDEX_STR                  Local  694      CHAR            32          scalar                    739,740                           
 LENGTH                     Local  698      I(4)            4           scalar                    732,733,736,737                   
 NAME                       Dummy  661      CHAR                        scalar   ARG,IN           721,730,732,734,738,740,749,751   
 NOTE_HEADER                Local  692      CHAR            256         scalar                    714                               
 PRESENT                    Func   704                                  scalar                    704                               
 STRING                     Dummy  661      CHAR                        scalar   ARG,IN           742                               
 SUB_NAME                   Param  684      CHAR            48          scalar                    711,713,715                       
 TRIM                       Func   705                                  scalar                    705,710,711,712,713,714,715,722,73
                                                                                                  4,740,749,751                     
 WARN_HEADER                Local  691      CHAR            256         scalar                    712                               

Page 28          Source Listing                  FM_UTIL_GET_INDEX_STRING
2021-06-01 08:55                                 fm_util.F90

    761 ! </FUNCTION> NAME="fm_util_get_index_string"
    762 
    763 
    764 !#######################################################################
    765 ! <FUNCTION NAME="fm_util_get_index_list">
    766 !
    767 ! <DESCRIPTION>
    768 ! Get the length of an element of the Field Manager tree
    769 ! </DESCRIPTION>
    770 !
    771 function fm_util_get_index_list(name, caller)       &
    772          result (fm_index)  !{
    773 
    774 implicit none
    775 
    776 !
    777 !       Return type
    778 !
    779 
    780 integer :: fm_index
    781 
    782 !
    783 !       arguments
    784 !
    785 
    786 character(len=*), intent(in)            :: name
    787 character(len=*), intent(in), optional  :: caller
    788 
    789 !
    790 !       Local parameters
    791 !
    792 
    793 character(len=48), parameter  :: sub_name = 'fm_util_get_index_list'
    794 
    795 !
    796 !       Local variables
    797 !
    798 
    799 character(len=256)              :: error_header
    800 character(len=256)              :: warn_header
    801 character(len=256)              :: note_header
    802 character(len=128)              :: caller_str
    803 character(len=fm_type_name_len) :: fm_type
    804 
    805 !
    806 !       set the caller string and headers
    807 !
    808 
    809 if (present(caller)) then  !{
    810   caller_str = '[' // trim(caller) // ']'
    811 else  !}{
    812   caller_str = fm_util_default_caller
    813 endif  !}
    814 
    815 error_header = '==>Error from ' // trim(mod_name) //   &
    816                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    817 warn_header = '==>Warning from ' // trim(mod_name) //  &

Page 29          Source Listing                  FM_UTIL_GET_INDEX_LIST
2021-06-01 08:55                                 fm_util.F90

    818               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    819 note_header = '==>Note from ' // trim(mod_name) //     &
    820               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    821 
    822 !
    823 !       check that a name is given (fatal if not)
    824 !
    825 
    826 if (name .eq. ' ') then  !{
    827   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
    828 endif  !}
    829 
    830 !
    831 !       Check the field's type and get the index
    832 !
    833 
    834 fm_index = 0
    835 fm_type = fm_get_type(name)
    836 if (fm_type .eq. 'list') then  !{
    837   fm_index = fm_get_index(name)
    838   if (fm_index .le. 0) then  !{
    839     call mpp_error(FATAL, trim(error_header) // ' List does not exist: ' // trim(name))
    840   endif  !}
    841 elseif (fm_type .eq. ' ') then  !}{
    842   call mpp_error(FATAL, trim(error_header) // ' List does not exist: ' // trim(name))
    843 else  !}{
    844  call mpp_error(FATAL, trim(error_header) // ' Wrong type for ' // trim(name) // ', found (' // trim(fm_type) // ')')
    845 endif  !}
    846 
    847 
    848 return
    849 
    850 end function fm_util_get_index_list  !}

Page 30          Source Listing                  FM_UTIL_GET_INDEX_LIST
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                              
                                                    
 fm_util_mod_mp_fm_util_get_index_list_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALLER                     Dummy  771      CHAR                        scalar   ARG,IN           809,810                           
 CALLER_STR                 Local  802      CHAR            128         scalar                    810,812,816,818,820               
 ERROR_HEADER               Local  799      CHAR            256         scalar                    815,827,839,842,844               
 FM_GET_INDEX               Func   837      I(4)            4           scalar   PRIV             44,837,3219                       
 FM_INDEX                   Local  780      I(4)            4           scalar                    834,837,838                       
 FM_TYPE                    Local  803      CHAR            8           scalar                    835,836,841,844                   
 FM_UTIL_GET_INDEX_LIST     Func   771      I(4)            4           scalar                                                      
 NAME                       Dummy  771      CHAR                        scalar   ARG,IN           826,835,837,839,842,844           
 NOTE_HEADER                Local  801      CHAR            256         scalar                    819                               
 PRESENT                    Func   809                                  scalar                    809                               
 SUB_NAME                   Param  793      CHAR            48          scalar                    816,818,820                       
 TRIM                       Func   810                                  scalar                    810,815,816,817,818,819,820,827,83
                                                                                                  9,842,844                         
 WARN_HEADER                Local  800      CHAR            256         scalar                    817                               

Page 31          Source Listing                  FM_UTIL_GET_INDEX_LIST
2021-06-01 08:55                                 fm_util.F90

    851 ! </FUNCTION> NAME="fm_util_get_index_list"
    852 
    853 
    854 !#######################################################################
    855 ! <FUNCTION NAME="fm_util_get_integer_array">
    856 !
    857 ! <DESCRIPTION>
    858 ! Get an integer value from the Field Manager tree.
    859 ! </DESCRIPTION>
    860 !
    861 function fm_util_get_integer_array(name, caller)            &
    862          result (array)  !{
    863 
    864 implicit none
    865 
    866 !
    867 !       Return type
    868 !
    869 
    870 integer, pointer, dimension(:) :: array
    871 
    872 !
    873 !       arguments
    874 !
    875 
    876 character(len=*), intent(in)            :: name
    877 character(len=*), intent(in), optional  :: caller
    878 
    879 !
    880 !       Local parameters
    881 !
    882 
    883 character(len=48), parameter  :: sub_name = 'fm_util_get_integer_array'
    884 
    885 !
    886 !       Local variables
    887 !
    888 
    889 character(len=256)              :: error_header
    890 character(len=256)              :: warn_header
    891 character(len=256)              :: note_header
    892 character(len=128)              :: caller_str
    893 character(len=32)               :: index_str
    894 character(len=fm_type_name_len) :: fm_type
    895 integer                         :: i
    896 integer                         :: length
    897 
    898 nullify(array)
    899 
    900 !
    901 !       set the caller string and headers
    902 !
    903 
    904 if (present(caller)) then  !{
    905   caller_str = '[' // trim(caller) // ']'
    906 else  !}{
    907   caller_str = fm_util_default_caller

Page 32          Source Listing                  FM_UTIL_GET_INTEGER_ARRAY
2021-06-01 08:55                                 fm_util.F90

    908 endif  !}
    909 
    910 error_header = '==>Error from ' // trim(mod_name) //   &
    911                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    912 warn_header = '==>Warning from ' // trim(mod_name) //  &
    913               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    914 note_header = '==>Note from ' // trim(mod_name) //     &
    915               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    916 
    917 !
    918 !       check that a name is given (fatal if not)
    919 !
    920 
    921 if (name .eq. ' ') then  !{
    922   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
    923 endif  !}
    924 
    925 fm_type = fm_get_type(name)
    926 if (fm_type .eq. 'integer') then  !{
    927   length = fm_get_length(name)
    928   if (length .lt. 0) then  !{
    929     call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
    930   endif  !}
    931   if (length .gt. 0) then  !{
    932     allocate(array(length))
    933     do i = 1, length  !{
    934       if (.not. fm_get_value(name, array(i), index = i)) then  !{
    935         write (index_str,*) '(', i, ')'
    936         call mpp_error(FATAL, trim(error_header) // ' Problem getting ' // trim(name) // trim(index_str))
    937       endif  !}
    938     enddo  !} i
    939   endif  !}
    940 elseif (fm_type .eq. ' ') then  !}{
    941   call mpp_error(FATAL, trim(error_header) // ' Array does not exist: ' // trim(name))
    942 else  !}{
    943  call mpp_error(FATAL, trim(error_header) // ' Wrong type for ' // trim(name) // ', found (' // trim(fm_type) // ')')
    944 endif  !}
    945 
    946 return
    947 
    948 end function fm_util_get_integer_array  !}

Page 33          Source Listing                  FM_UTIL_GET_INTEGER_ARRAY
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                 
                                                       
 fm_util_mod_mp_fm_util_get_integer_array_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Local  870      I(4)            4     1     1        PTR              898,932,934                       
 CALLER                     Dummy  861      CHAR                        scalar   ARG,IN           904,905                           
 CALLER_STR                 Local  892      CHAR            128         scalar                    905,907,911,913,915               
 ERROR_HEADER               Local  889      CHAR            256         scalar                    910,922,929,936,941,943           
 FM_GET_VALUE_INTEGER       Func   934      L(4)            4           scalar   PRIV             934,1348,1591                     
 FM_TYPE                    Local  894      CHAR            8           scalar                    925,926,940,943                   
 FM_UTIL_GET_INTEGER_ARRAY  Func   861      I(4)            4     1     1        PTR                                                
 I                          Local  895      I(4)            4           scalar                    933,934,935                       
 INDEX_STR                  Local  893      CHAR            32          scalar                    935,936                           
 LENGTH                     Local  896      I(4)            4           scalar                    927,928,931,932,933               
 NAME                       Dummy  861      CHAR                        scalar   ARG,IN           921,925,927,929,934,936,941,943   
 NOTE_HEADER                Local  891      CHAR            256         scalar                    914                               
 PRESENT                    Func   904                                  scalar                    904                               
 SUB_NAME                   Param  883      CHAR            48          scalar                    911,913,915                       
 TRIM                       Func   905                                  scalar                    905,910,911,912,913,914,915,922,92
                                                                                                  9,936,941,943                     
 WARN_HEADER                Local  890      CHAR            256         scalar                    912                               

Page 34          Source Listing                  FM_UTIL_GET_INTEGER_ARRAY
2021-06-01 08:55                                 fm_util.F90

    949 ! </FUNCTION> NAME="fm_util_get_integer_array"
    950 
    951 
    952 !#######################################################################
    953 ! <FUNCTION NAME="fm_util_get_logical_array">
    954 !
    955 ! <DESCRIPTION>
    956 ! Get a logical value from the Field Manager tree.
    957 ! </DESCRIPTION>
    958 !
    959 function fm_util_get_logical_array(name, caller)            &
    960          result (array)  !{
    961 
    962 implicit none
    963 
    964 !
    965 !       Return type
    966 !
    967 
    968 logical, pointer, dimension(:) :: array
    969 
    970 !
    971 !       arguments
    972 !
    973 
    974 character(len=*), intent(in)            :: name
    975 character(len=*), intent(in), optional  :: caller
    976 
    977 !
    978 !       Local parameters
    979 !
    980 
    981 character(len=48), parameter  :: sub_name = 'fm_util_get_logical_array'
    982 
    983 !
    984 !       Local variables
    985 !
    986 
    987 character(len=256)              :: error_header
    988 character(len=256)              :: warn_header
    989 character(len=256)              :: note_header
    990 character(len=128)              :: caller_str
    991 character(len=32)               :: index_str
    992 character(len=fm_type_name_len) :: fm_type
    993 integer                         :: i
    994 integer                         :: length
    995 
    996 nullify(array)
    997 
    998 !
    999 !       set the caller string and headers
   1000 !
   1001 
   1002 if (present(caller)) then  !{
   1003   caller_str = '[' // trim(caller) // ']'
   1004 else  !}{
   1005   caller_str = fm_util_default_caller

Page 35          Source Listing                  FM_UTIL_GET_LOGICAL_ARRAY
2021-06-01 08:55                                 fm_util.F90

   1006 endif  !}
   1007 
   1008 error_header = '==>Error from ' // trim(mod_name) //   &
   1009                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1010 warn_header = '==>Warning from ' // trim(mod_name) //  &
   1011               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1012 note_header = '==>Note from ' // trim(mod_name) //     &
   1013               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1014 
   1015 !
   1016 !       check that a name is given (fatal if not)
   1017 !
   1018 
   1019 if (name .eq. ' ') then  !{
   1020   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   1021 endif  !}
   1022 
   1023 fm_type = fm_get_type(name)
   1024 if (fm_type .eq. 'logical') then  !{
   1025   length = fm_get_length(name)
   1026   if (length .lt. 0) then  !{
   1027     call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   1028   endif  !}
   1029   if (length .gt. 0) then  !{
   1030     allocate(array(length))
   1031     do i = 1, length  !{
   1032       if (.not. fm_get_value(name, array(i), index = i)) then  !{
   1033         write (index_str,*) '(', i, ')'
   1034         call mpp_error(FATAL, trim(error_header) // ' Problem getting ' // trim(name) // trim(index_str))
   1035       endif  !}
   1036     enddo  !} i
   1037   endif  !}
   1038 elseif (fm_type .eq. ' ') then  !}{
   1039   call mpp_error(FATAL, trim(error_header) // ' Array does not exist: ' // trim(name))
   1040 else  !}{
   1041  call mpp_error(FATAL, trim(error_header) // ' Wrong type for ' // trim(name) // ', found (' // trim(fm_type) // ')')
   1042 endif  !}
   1043 
   1044 return
   1045 
   1046 end function fm_util_get_logical_array  !}

Page 36          Source Listing                  FM_UTIL_GET_LOGICAL_ARRAY
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                 
                                                       
 fm_util_mod_mp_fm_util_get_logical_array_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Local  968      L(4)            4     1     1        PTR              996,1030,1032                     
 CALLER                     Dummy  959      CHAR                        scalar   ARG,IN           1002,1003                         
 CALLER_STR                 Local  990      CHAR            128         scalar                    1003,1005,1009,1011,1013          
 ERROR_HEADER               Local  987      CHAR            256         scalar                    1008,1020,1027,1034,1039,1041     
 FM_GET_VALUE_LOGICAL       Func   1032     L(4)            4           scalar   PRIV             1032,1467                         
 FM_TYPE                    Local  992      CHAR            8           scalar                    1023,1024,1038,1041               
 FM_UTIL_GET_LOGICAL_ARRAY  Func   959      L(4)            4     1     1        PTR                                                
 I                          Local  993      I(4)            4           scalar                    1031,1032,1033                    
 INDEX_STR                  Local  991      CHAR            32          scalar                    1033,1034                         
 LENGTH                     Local  994      I(4)            4           scalar                    1025,1026,1029,1030,1031          
 NAME                       Dummy  959      CHAR                        scalar   ARG,IN           1019,1023,1025,1027,1032,1034,1039
                                                                                                  ,1041                             
 NOTE_HEADER                Local  989      CHAR            256         scalar                    1012                              
 PRESENT                    Func   1002                                 scalar                    1002                              
 SUB_NAME                   Param  981      CHAR            48          scalar                    1009,1011,1013                    
 TRIM                       Func   1003                                 scalar                    1003,1008,1009,1010,1011,1012,1013
                                                                                                  ,1020,1027,1034,1039,1041         
 WARN_HEADER                Local  988      CHAR            256         scalar                    1010                              

Page 37          Source Listing                  FM_UTIL_GET_LOGICAL_ARRAY
2021-06-01 08:55                                 fm_util.F90

   1047 ! </FUNCTION> NAME="fm_util_get_logical_array"
   1048 
   1049 
   1050 !#######################################################################
   1051 ! <FUNCTION NAME="fm_util_get_real_array">
   1052 !
   1053 ! <DESCRIPTION>
   1054 ! Get a real value from the Field Manager tree.
   1055 ! </DESCRIPTION>
   1056 !
   1057 function fm_util_get_real_array(name, caller)            &
   1058          result (array)  !{
   1059 
   1060 implicit none
   1061 
   1062 !
   1063 !       Return type
   1064 !
   1065 
   1066 real, pointer, dimension(:) :: array
   1067 
   1068 !
   1069 !       arguments
   1070 !
   1071 
   1072 character(len=*), intent(in)            :: name
   1073 character(len=*), intent(in), optional  :: caller
   1074 
   1075 !
   1076 !       Local parameters
   1077 !
   1078 
   1079 character(len=48), parameter  :: sub_name = 'fm_util_get_real_array'
   1080 
   1081 !
   1082 !       Local variables
   1083 !
   1084 
   1085 character(len=256)              :: error_header
   1086 character(len=256)              :: warn_header
   1087 character(len=256)              :: note_header
   1088 character(len=128)              :: caller_str
   1089 character(len=32)               :: index_str
   1090 character(len=fm_type_name_len) :: fm_type
   1091 integer                         :: i
   1092 integer                         :: length
   1093 
   1094 nullify(array)
   1095 
   1096 !
   1097 !       set the caller string and headers
   1098 !
   1099 
   1100 if (present(caller)) then  !{
   1101   caller_str = '[' // trim(caller) // ']'
   1102 else  !}{
   1103   caller_str = fm_util_default_caller

Page 38          Source Listing                  FM_UTIL_GET_REAL_ARRAY
2021-06-01 08:55                                 fm_util.F90

   1104 endif  !}
   1105 
   1106 error_header = '==>Error from ' // trim(mod_name) //   &
   1107                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1108 warn_header = '==>Warning from ' // trim(mod_name) //  &
   1109               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1110 note_header = '==>Note from ' // trim(mod_name) //     &
   1111               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1112 
   1113 !
   1114 !       check that a name is given (fatal if not)
   1115 !
   1116 
   1117 if (name .eq. ' ') then  !{
   1118   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   1119 endif  !}
   1120 
   1121 fm_type = fm_get_type(name)
   1122 if (fm_type .eq. 'real') then  !{
   1123   length = fm_get_length(name)
   1124   if (length .lt. 0) then  !{
   1125     call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   1126   endif  !}
   1127   if (length .gt. 0) then  !{
   1128     allocate(array(length))
   1129     do i = 1, length  !{
   1130       if (.not. fm_get_value(name, array(i), index = i)) then  !{
   1131         write (index_str,*) '(', i, ')'
   1132         call mpp_error(FATAL, trim(error_header) // ' Problem getting ' // trim(name) // trim(index_str))
   1133       endif  !}
   1134     enddo  !} i
   1135   endif  !}
   1136 elseif (fm_type .eq. ' ') then  !}{
   1137   call mpp_error(FATAL, trim(error_header) // ' Array does not exist: ' // trim(name))
   1138 else  !}{
   1139  call mpp_error(FATAL, trim(error_header) // ' Wrong type for ' // trim(name) // ', found (' // trim(fm_type) // ')')
   1140 endif  !}
   1141 
   1142 return
   1143 
   1144 end function fm_util_get_real_array  !}

Page 39          Source Listing                  FM_UTIL_GET_REAL_ARRAY
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                              
                                                    
 fm_util_mod_mp_fm_util_get_real_array_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Local  1066     R(8)            8     1     1        PTR              1094,1128,1130                    
 CALLER                     Dummy  1057     CHAR                        scalar   ARG,IN           1100,1101                         
 CALLER_STR                 Local  1088     CHAR            128         scalar                    1101,1103,1107,1109,1111          
 ERROR_HEADER               Local  1085     CHAR            256         scalar                    1106,1118,1125,1132,1137,1139     
 FM_GET_VALUE_REAL          Func   1130     L(4)            4           scalar   PRIV             1130,1587                         
 FM_TYPE                    Local  1090     CHAR            8           scalar                    1121,1122,1136,1139               
 FM_UTIL_GET_REAL_ARRAY     Func   1057     R(8)            8     1     1        PTR                                                
 I                          Local  1091     I(4)            4           scalar                    1129,1130,1131                    
 INDEX_STR                  Local  1089     CHAR            32          scalar                    1131,1132                         
 LENGTH                     Local  1092     I(4)            4           scalar                    1123,1124,1127,1128,1129          
 NAME                       Dummy  1057     CHAR                        scalar   ARG,IN           1117,1121,1123,1125,1130,1132,1137
                                                                                                  ,1139                             
 NOTE_HEADER                Local  1087     CHAR            256         scalar                    1110                              
 PRESENT                    Func   1100                                 scalar                    1100                              
 SUB_NAME                   Param  1079     CHAR            48          scalar                    1107,1109,1111                    
 TRIM                       Func   1101                                 scalar                    1101,1106,1107,1108,1109,1110,1111
                                                                                                  ,1118,1125,1132,1137,1139         
 WARN_HEADER                Local  1086     CHAR            256         scalar                    1108                              

Page 40          Source Listing                  FM_UTIL_GET_REAL_ARRAY
2021-06-01 08:55                                 fm_util.F90

   1145 ! </FUNCTION> NAME="fm_util_get_real_array"
   1146 
   1147 
   1148 !#######################################################################
   1149 ! <FUNCTION NAME="fm_util_get_string_array">
   1150 !
   1151 ! <DESCRIPTION>
   1152 ! Get a string value from the Field Manager tree.
   1153 ! </DESCRIPTION>
   1154 !
   1155 function fm_util_get_string_array(name, caller)            &
   1156          result (array)  !{
   1157 
   1158 implicit none
   1159 
   1160 !
   1161 !       Return type
   1162 !
   1163 
   1164 character(len=fm_string_len), pointer, dimension(:) :: array
   1165 
   1166 !
   1167 !       arguments
   1168 !
   1169 
   1170 character(len=*), intent(in)            :: name
   1171 character(len=*), intent(in), optional  :: caller
   1172 
   1173 !
   1174 !       Local parameters
   1175 !
   1176 
   1177 character(len=48), parameter  :: sub_name = 'fm_util_get_string_array'
   1178 
   1179 !
   1180 !       Local variables
   1181 !
   1182 
   1183 character(len=256)              :: error_header
   1184 character(len=256)              :: warn_header
   1185 character(len=256)              :: note_header
   1186 character(len=128)              :: caller_str
   1187 character(len=32)               :: index_str
   1188 character(len=fm_type_name_len) :: fm_type
   1189 integer                         :: i
   1190 integer                         :: length
   1191 
   1192 nullify(array)
   1193 
   1194 !
   1195 !       set the caller string and headers
   1196 !
   1197 
   1198 if (present(caller)) then  !{
   1199   caller_str = '[' // trim(caller) // ']'
   1200 else  !}{
   1201   caller_str = fm_util_default_caller

Page 41          Source Listing                  FM_UTIL_GET_STRING_ARRAY
2021-06-01 08:55                                 fm_util.F90

   1202 endif  !}
   1203 
   1204 error_header = '==>Error from ' // trim(mod_name) //   &
   1205                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1206 warn_header = '==>Warning from ' // trim(mod_name) //  &
   1207               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1208 note_header = '==>Note from ' // trim(mod_name) //     &
   1209               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1210 
   1211 !
   1212 !       check that a name is given (fatal if not)
   1213 !
   1214 
   1215 if (name .eq. ' ') then  !{
   1216   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   1217 endif  !}
   1218 
   1219 fm_type = fm_get_type(name)
   1220 if (fm_type .eq. 'string') then  !{
   1221   length = fm_get_length(name)
   1222   if (length .lt. 0) then  !{
   1223     call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   1224   endif  !}
   1225   if (length .gt. 0) then  !{
   1226     allocate(array(length))
   1227     do i = 1, length  !{
   1228       if (.not. fm_get_value(name, array(i), index = i)) then  !{
   1229         write (index_str,*) '(', i, ')'
   1230         call mpp_error(FATAL, trim(error_header) // ' Problem getting ' // trim(name) // trim(index_str))
   1231       endif  !}
   1232     enddo  !} i
   1233   endif  !}
   1234 elseif (fm_type .eq. ' ') then  !}{
   1235   call mpp_error(FATAL, trim(error_header) // ' Array does not exist: ' // trim(name))
   1236 else  !}{
   1237  call mpp_error(FATAL, trim(error_header) // ' Wrong type for ' // trim(name) // ', found (' // trim(fm_type) // ')')
   1238 endif  !}
   1239 
   1240 return
   1241 
   1242 end function fm_util_get_string_array  !}

Page 42          Source Listing                  FM_UTIL_GET_STRING_ARRAY
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                
                                                      
 fm_util_mod_mp_fm_util_get_string_array_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Local  1164     CHAR            128   1     1        PTR              1192,1226,1228                    
 CALLER                     Dummy  1155     CHAR                        scalar   ARG,IN           1198,1199                         
 CALLER_STR                 Local  1186     CHAR            128         scalar                    1199,1201,1205,1207,1209          
 ERROR_HEADER               Local  1183     CHAR            256         scalar                    1204,1216,1223,1230,1235,1237     
 FM_TYPE                    Local  1188     CHAR            8           scalar                    1219,1220,1234,1237               
 FM_UTIL_GET_STRING_ARRAY   Func   1155     CHAR            128   1     1        PTR                                                
 I                          Local  1189     I(4)            4           scalar                    1227,1228,1229                    
 INDEX_STR                  Local  1187     CHAR            32          scalar                    1229,1230                         
 LENGTH                     Local  1190     I(4)            4           scalar                    1221,1222,1225,1226,1227          
 NAME                       Dummy  1155     CHAR                        scalar   ARG,IN           1215,1219,1221,1223,1228,1230,1235
                                                                                                  ,1237                             
 NOTE_HEADER                Local  1185     CHAR            256         scalar                    1208                              
 PRESENT                    Func   1198                                 scalar                    1198                              
 SUB_NAME                   Param  1177     CHAR            48          scalar                    1205,1207,1209                    
 TRIM                       Func   1199                                 scalar                    1199,1204,1205,1206,1207,1208,1209
                                                                                                  ,1216,1223,1230,1235,1237         
 WARN_HEADER                Local  1184     CHAR            256         scalar                    1206                              

Page 43          Source Listing                  FM_UTIL_GET_STRING_ARRAY
2021-06-01 08:55                                 fm_util.F90

   1243 ! </FUNCTION> NAME="fm_util_get_string_array"
   1244 
   1245 
   1246 !#######################################################################
   1247 ! <FUNCTION NAME="fm_util_get_integer">
   1248 !
   1249 ! <DESCRIPTION>
   1250 ! Get an integer value from the Field Manager tree.
   1251 ! </DESCRIPTION>
   1252 !
   1253 function fm_util_get_integer(name, caller, index, default_value, scalar)            &
   1254          result (value)  !{
   1255 
   1256 implicit none
   1257 
   1258 !
   1259 !       Return type
   1260 !
   1261 
   1262 integer :: value
   1263 
   1264 !
   1265 !       arguments
   1266 !
   1267 
   1268 character(len=*), intent(in)            :: name
   1269 character(len=*), intent(in), optional  :: caller
   1270 integer, intent(in), optional           :: index
   1271 integer, intent(in), optional           :: default_value
   1272 logical, intent(in), optional           :: scalar
   1273 
   1274 !
   1275 !       Local parameters
   1276 !
   1277 
   1278 character(len=48), parameter  :: sub_name = 'fm_util_get_integer'
   1279 
   1280 !
   1281 !       Local variables
   1282 !
   1283 
   1284 character(len=256)              :: error_header
   1285 character(len=256)              :: warn_header
   1286 character(len=256)              :: note_header
   1287 character(len=128)              :: caller_str
   1288 integer                         :: index_t
   1289 character(len=fm_type_name_len) :: fm_type
   1290 integer                         :: field_length
   1291 
   1292 !
   1293 !       set the caller string and headers
   1294 !
   1295 
   1296 if (present(caller)) then  !{
   1297   caller_str = '[' // trim(caller) // ']'
   1298 else  !}{
   1299   caller_str = fm_util_default_caller

Page 44          Source Listing                  FM_UTIL_GET_INTEGER
2021-06-01 08:55                                 fm_util.F90

   1300 endif  !}
   1301 
   1302 error_header = '==>Error from ' // trim(mod_name) //   &
   1303                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1304 warn_header = '==>Warning from ' // trim(mod_name) //  &
   1305               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1306 note_header = '==>Note from ' // trim(mod_name) //     &
   1307               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1308 
   1309 !
   1310 !       check that a name is given (fatal if not)
   1311 !
   1312 
   1313 if (name .eq. ' ') then  !{
   1314   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   1315 endif  !}
   1316 
   1317 !
   1318 !       Check whether we require a scalar (length=1) and return
   1319 !       an error if we do, and it isn't
   1320 !
   1321 
   1322 if (present(scalar)) then  !{
   1323   if (scalar) then  !{
   1324     field_length = fm_get_length(name)
   1325     if (field_length .lt. 0) then  !{
   1326       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   1327     elseif (field_length .gt. 1) then  !}{
   1328       call mpp_error(FATAL, trim(error_header) // trim(name) // ' not scalar')
   1329     endif  !}
   1330   endif  !}
   1331 endif  !}
   1332 
   1333 !
   1334 !       set the index
   1335 !
   1336 
   1337 if (present(index)) then  !{
   1338   index_t = index
   1339   if (index .le. 0) then  !{
   1340     call mpp_error(FATAL, trim(error_header) // ' Index not positive')
   1341   endif  !}
   1342 else  !}{
   1343   index_t = 1
   1344 endif  !}
   1345 
   1346 fm_type = fm_get_type(name)
   1347 if (fm_type .eq. 'integer') then  !{
   1348   if (.not. fm_get_value(name, value, index = index_t)) then  !{
   1349     call mpp_error(FATAL, trim(error_header) // ' Problem getting ' // trim(name))
   1350   endif  !}
   1351 elseif (fm_type .eq. ' ' .and. present(default_value)) then  !}{
   1352   value = default_value
   1353 elseif (fm_type .eq. ' ') then  !}{
   1354   call mpp_error(FATAL, trim(error_header) // ' Field does not exist: ' // trim(name))
   1355 else  !}{
   1356  call mpp_error(FATAL, trim(error_header) // ' Wrong type for ' // trim(name) // ', found (' // trim(fm_type) // ')')

Page 45          Source Listing                  FM_UTIL_GET_INTEGER
2021-06-01 08:55                                 fm_util.F90

   1357 endif  !}
   1358 
   1359 return
   1360 
   1361 end function fm_util_get_integer  !}


ENTRY POINTS

  Name                                           
                                                 
 fm_util_mod_mp_fm_util_get_integer_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALLER                     Dummy  1253     CHAR                        scalar   ARG,IN           1296,1297                         
 CALLER_STR                 Local  1287     CHAR            128         scalar                    1297,1299,1303,1305,1307          
 DEFAULT_VALUE              Dummy  1253     I(4)            4           scalar   ARG,IN           1351,1352                         
 ERROR_HEADER               Local  1284     CHAR            256         scalar                    1302,1314,1326,1328,1340,1349,1354
                                                                                                  ,1356                             
 FIELD_LENGTH               Local  1290     I(4)            4           scalar                    1324,1325,1327                    
 FM_TYPE                    Local  1289     CHAR            8           scalar                    1346,1347,1351,1353,1356          
 FM_UTIL_GET_INTEGER        Func   1253     I(4)            4           scalar                                                      
 INDEX                      Dummy  1253     I(4)            4           scalar   ARG,IN           1337,1338,1339                    
 INDEX_T                    Local  1288     I(4)            4           scalar                    1338,1343,1348                    
 NAME                       Dummy  1253     CHAR                        scalar   ARG,IN           1313,1324,1326,1328,1346,1348,1349
                                                                                                  ,1354,1356                        
 NOTE_HEADER                Local  1286     CHAR            256         scalar                    1306                              
 PRESENT                    Func   1296                                 scalar                    1296,1322,1337,1351               
 SCALAR                     Dummy  1253     L(4)            4           scalar   ARG,IN           1322,1323                         
 SUB_NAME                   Param  1278     CHAR            48          scalar                    1303,1305,1307                    
 TRIM                       Func   1297                                 scalar                    1297,1302,1303,1304,1305,1306,1307
                                                                                                  ,1314,1326,1328,1340,1349,1354,135
                                                                                                  6                                 
 VALUE                      Local  1262     I(4)            4           scalar                    1348,1352                         
 WARN_HEADER                Local  1285     CHAR            256         scalar                    1304                              

Page 46          Source Listing                  FM_UTIL_GET_INTEGER
2021-06-01 08:55                                 fm_util.F90

   1362 ! </FUNCTION> NAME="fm_util_get_integer"
   1363 
   1364 
   1365 !#######################################################################
   1366 ! <FUNCTION NAME="fm_util_get_logical">
   1367 !
   1368 ! <DESCRIPTION>
   1369 ! Get a logical value from the Field Manager tree.
   1370 ! </DESCRIPTION>
   1371 !
   1372 function fm_util_get_logical(name, caller, index, default_value, scalar)            &
   1373          result (value)  !{
   1374 
   1375 implicit none
   1376 
   1377 !
   1378 !       Return type
   1379 !
   1380 
   1381 logical :: value
   1382 
   1383 !
   1384 !       arguments
   1385 !
   1386 
   1387 character(len=*), intent(in)            :: name
   1388 character(len=*), intent(in), optional  :: caller
   1389 integer, intent(in), optional           :: index
   1390 logical, intent(in), optional           :: default_value
   1391 logical, intent(in), optional           :: scalar
   1392 
   1393 !
   1394 !       Local parameters
   1395 !
   1396 
   1397 character(len=48), parameter  :: sub_name = 'fm_util_get_logical'
   1398 
   1399 !
   1400 !       Local variables
   1401 !
   1402 
   1403 character(len=256)              :: error_header
   1404 character(len=256)              :: warn_header
   1405 character(len=256)              :: note_header
   1406 character(len=128)              :: caller_str
   1407 integer                         :: index_t
   1408 character(len=fm_type_name_len) :: fm_type
   1409 integer                         :: field_length
   1410 
   1411 !
   1412 !       set the caller string and headers
   1413 !
   1414 
   1415 if (present(caller)) then  !{
   1416   caller_str = '[' // trim(caller) // ']'
   1417 else  !}{
   1418   caller_str = fm_util_default_caller

Page 47          Source Listing                  FM_UTIL_GET_LOGICAL
2021-06-01 08:55                                 fm_util.F90

   1419 endif  !}
   1420 
   1421 error_header = '==>Error from ' // trim(mod_name) //   &
   1422                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1423 warn_header = '==>Warning from ' // trim(mod_name) //  &
   1424               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1425 note_header = '==>Note from ' // trim(mod_name) //     &
   1426               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1427 
   1428 !
   1429 !       check that a name is given (fatal if not)
   1430 !
   1431 
   1432 if (name .eq. ' ') then  !{
   1433   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   1434 endif  !}
   1435 
   1436 !
   1437 !       Check whether we require a scalar (length=1) and return
   1438 !       an error if we do, and it isn't
   1439 !
   1440 
   1441 if (present(scalar)) then  !{
   1442   if (scalar) then  !{
   1443     field_length = fm_get_length(name)
   1444     if (field_length .lt. 0) then  !{
   1445       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   1446     elseif (field_length .gt. 1) then  !}{
   1447       call mpp_error(FATAL, trim(error_header) // trim(name) // ' not scalar')
   1448     endif  !}
   1449   endif  !}
   1450 endif  !}
   1451 
   1452 !
   1453 !       set the index
   1454 !
   1455 
   1456 if (present(index)) then  !{
   1457   index_t = index
   1458   if (index .le. 0) then  !{
   1459     call mpp_error(FATAL, trim(error_header) // ' Index not positive')
   1460   endif  !}
   1461 else  !}{
   1462   index_t = 1
   1463 endif  !}
   1464 
   1465 fm_type = fm_get_type(name)
   1466 if (fm_type .eq. 'logical') then  !{
   1467   if (.not. fm_get_value(name, value, index = index_t)) then  !{
   1468     call mpp_error(FATAL, trim(error_header) // ' Problem getting ' // trim(name))
   1469   endif  !}
   1470 elseif (fm_type .eq. ' ' .and. present(default_value)) then  !}{
   1471   value = default_value
   1472 elseif (fm_type .eq. ' ') then  !}{
   1473   call mpp_error(FATAL, trim(error_header) // ' Field does not exist: ' // trim(name))
   1474 else  !}{
   1475  call mpp_error(FATAL, trim(error_header) // ' Wrong type for ' // trim(name) // ', found (' // trim(fm_type) // ')')

Page 48          Source Listing                  FM_UTIL_GET_LOGICAL
2021-06-01 08:55                                 fm_util.F90

   1476 endif  !}
   1477 
   1478 return
   1479 
   1480 end function fm_util_get_logical  !}


ENTRY POINTS

  Name                                           
                                                 
 fm_util_mod_mp_fm_util_get_logical_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALLER                     Dummy  1372     CHAR                        scalar   ARG,IN           1415,1416                         
 CALLER_STR                 Local  1406     CHAR            128         scalar                    1416,1418,1422,1424,1426          
 DEFAULT_VALUE              Dummy  1372     L(4)            4           scalar   ARG,IN           1470,1471                         
 ERROR_HEADER               Local  1403     CHAR            256         scalar                    1421,1433,1445,1447,1459,1468,1473
                                                                                                  ,1475                             
 FIELD_LENGTH               Local  1409     I(4)            4           scalar                    1443,1444,1446                    
 FM_TYPE                    Local  1408     CHAR            8           scalar                    1465,1466,1470,1472,1475          
 FM_UTIL_GET_LOGICAL        Func   1372     L(4)            4           scalar                                                      
 INDEX                      Dummy  1372     I(4)            4           scalar   ARG,IN           1456,1457,1458                    
 INDEX_T                    Local  1407     I(4)            4           scalar                    1457,1462,1467                    
 NAME                       Dummy  1372     CHAR                        scalar   ARG,IN           1432,1443,1445,1447,1465,1467,1468
                                                                                                  ,1473,1475                        
 NOTE_HEADER                Local  1405     CHAR            256         scalar                    1425                              
 PRESENT                    Func   1415                                 scalar                    1415,1441,1456,1470               
 SCALAR                     Dummy  1372     L(4)            4           scalar   ARG,IN           1441,1442                         
 SUB_NAME                   Param  1397     CHAR            48          scalar                    1422,1424,1426                    
 TRIM                       Func   1416                                 scalar                    1416,1421,1422,1423,1424,1425,1426
                                                                                                  ,1433,1445,1447,1459,1468,1473,147
                                                                                                  5                                 
 VALUE                      Local  1381     L(4)            4           scalar                    1467,1471                         
 WARN_HEADER                Local  1404     CHAR            256         scalar                    1423                              

Page 49          Source Listing                  FM_UTIL_GET_LOGICAL
2021-06-01 08:55                                 fm_util.F90

   1481 ! </FUNCTION> NAME="fm_util_get_logical"
   1482 
   1483 
   1484 !#######################################################################
   1485 ! <FUNCTION NAME="fm_util_get_real">
   1486 !
   1487 ! <DESCRIPTION>
   1488 ! Get a real value from the Field Manager tree.
   1489 ! </DESCRIPTION>
   1490 !
   1491 function fm_util_get_real(name, caller, index, default_value, scalar)            &
   1492          result (value)  !{
   1493 
   1494 implicit none
   1495 
   1496 !
   1497 !       Return type
   1498 !
   1499 
   1500 real :: value
   1501 
   1502 !
   1503 !       arguments
   1504 !
   1505 
   1506 character(len=*), intent(in)            :: name
   1507 character(len=*), intent(in), optional  :: caller
   1508 integer, intent(in), optional           :: index
   1509 real, intent(in), optional              :: default_value
   1510 logical, intent(in), optional           :: scalar
   1511 
   1512 !
   1513 !       Local parameters
   1514 !
   1515 
   1516 character(len=48), parameter  :: sub_name = 'fm_util_get_real'
   1517 
   1518 !
   1519 !       Local variables
   1520 !
   1521 
   1522 character(len=256)              :: error_header
   1523 character(len=256)              :: warn_header
   1524 character(len=256)              :: note_header
   1525 character(len=128)              :: caller_str
   1526 integer                         :: index_t
   1527 character(len=fm_type_name_len) :: fm_type
   1528 integer                         :: field_length
   1529 integer :: ivalue
   1530 
   1531 !
   1532 !       set the caller string and headers
   1533 !
   1534 
   1535 if (present(caller)) then  !{
   1536   caller_str = '[' // trim(caller) // ']'
   1537 else  !}{

Page 50          Source Listing                  FM_UTIL_GET_REAL
2021-06-01 08:55                                 fm_util.F90

   1538   caller_str = fm_util_default_caller
   1539 endif  !}
   1540 
   1541 error_header = '==>Error from ' // trim(mod_name) //   &
   1542                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1543 warn_header = '==>Warning from ' // trim(mod_name) //  &
   1544               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1545 note_header = '==>Note from ' // trim(mod_name) //     &
   1546               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1547 
   1548 !
   1549 !       check that a name is given (fatal if not)
   1550 !
   1551 
   1552 if (name .eq. ' ') then  !{
   1553   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   1554 endif  !}
   1555 
   1556 !
   1557 !       Check whether we require a scalar (length=1) and return
   1558 !       an error if we do, and it isn't
   1559 !
   1560 
   1561 if (present(scalar)) then  !{
   1562   if (scalar) then  !{
   1563     field_length = fm_get_length(name)
   1564     if (field_length .lt. 0) then  !{
   1565       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   1566     elseif (field_length .gt. 1) then  !}{
   1567       call mpp_error(FATAL, trim(error_header) // trim(name) // ' not scalar')
   1568     endif  !}
   1569   endif  !}
   1570 endif  !}
   1571 
   1572 !
   1573 !       set the index
   1574 !
   1575 
   1576 if (present(index)) then  !{
   1577   index_t = index
   1578   if (index .le. 0) then  !{
   1579     call mpp_error(FATAL, trim(error_header) // ' Index not positive')
   1580   endif  !}
   1581 else  !}{
   1582   index_t = 1
   1583 endif  !}
   1584 
   1585 fm_type = fm_get_type(name)
   1586 if (fm_type .eq. 'real') then  !{
   1587   if (.not. fm_get_value(name, value, index = index_t)) then  !{
   1588     call mpp_error(FATAL, trim(error_header) // ' Problem getting ' // trim(name))
   1589   endif  !}
   1590 else if (fm_type .eq. 'integer') then
   1591   if (.not. fm_get_value(name, ivalue, index = index_t)) then
   1592     call mpp_error(FATAL, trim(error_header) // ' Problem getting ' // trim(name))
   1593   endif
   1594   value = ivalue

Page 51          Source Listing                  FM_UTIL_GET_REAL
2021-06-01 08:55                                 fm_util.F90

   1595 elseif (fm_type .eq. ' ' .and. present(default_value)) then  !}{
   1596   value = default_value
   1597 elseif (fm_type .eq. ' ') then  !}{
   1598   call mpp_error(FATAL, trim(error_header) // ' Field does not exist: ' // trim(name))
   1599 else  !}{
   1600  call mpp_error(FATAL, trim(error_header) // ' Wrong type for ' // trim(name) // ', found (' // trim(fm_type) // ')')
   1601 endif  !}
   1602 
   1603 return
   1604 
   1605 end function fm_util_get_real  !}


ENTRY POINTS

  Name                                        
                                              
 fm_util_mod_mp_fm_util_get_real_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALLER                     Dummy  1491     CHAR                        scalar   ARG,IN           1535,1536                         
 CALLER_STR                 Local  1525     CHAR            128         scalar                    1536,1538,1542,1544,1546          
 DEFAULT_VALUE              Dummy  1491     R(8)            8           scalar   ARG,IN           1595,1596                         
 ERROR_HEADER               Local  1522     CHAR            256         scalar                    1541,1553,1565,1567,1579,1588,1592
                                                                                                  ,1598,1600                        
 FIELD_LENGTH               Local  1528     I(4)            4           scalar                    1563,1564,1566                    
 FM_TYPE                    Local  1527     CHAR            8           scalar                    1585,1586,1590,1595,1597,1600     
 FM_UTIL_GET_REAL           Func   1491     R(8)            8           scalar                                                      
 INDEX                      Dummy  1491     I(4)            4           scalar   ARG,IN           1576,1577,1578                    
 INDEX_T                    Local  1526     I(4)            4           scalar                    1577,1582,1587,1591               
 IVALUE                     Local  1529     I(4)            4           scalar                    1591,1594                         
 NAME                       Dummy  1491     CHAR                        scalar   ARG,IN           1552,1563,1565,1567,1585,1587,1588
                                                                                                  ,1591,1592,1598,1600              
 NOTE_HEADER                Local  1524     CHAR            256         scalar                    1545                              
 PRESENT                    Func   1535                                 scalar                    1535,1561,1576,1595               
 SCALAR                     Dummy  1491     L(4)            4           scalar   ARG,IN           1561,1562                         
 SUB_NAME                   Param  1516     CHAR            48          scalar                    1542,1544,1546                    
 TRIM                       Func   1536                                 scalar                    1536,1541,1542,1543,1544,1545,1546
                                                                                                  ,1553,1565,1567,1579,1588,1592,159
                                                                                                  8,1600                            
 VALUE                      Local  1500     R(8)            8           scalar                    1587,1594,1596                    
 WARN_HEADER                Local  1523     CHAR            256         scalar                    1543                              

Page 52          Source Listing                  FM_UTIL_GET_REAL
2021-06-01 08:55                                 fm_util.F90

   1606 ! </FUNCTION> NAME="fm_util_get_real"
   1607 
   1608 
   1609 !#######################################################################
   1610 ! <FUNCTION NAME="fm_util_get_string">
   1611 !
   1612 ! <DESCRIPTION>
   1613 ! Get a string value from the Field Manager tree.
   1614 ! </DESCRIPTION>
   1615 !
   1616 function fm_util_get_string(name, caller, index, default_value, scalar)            &
   1617          result (value)  !{
   1618 
   1619 implicit none
   1620 
   1621 !
   1622 !       Return type
   1623 !
   1624 
   1625 character(len=fm_string_len) :: value
   1626 
   1627 !
   1628 !       arguments
   1629 !
   1630 
   1631 character(len=*), intent(in)            :: name
   1632 character(len=*), intent(in), optional  :: caller
   1633 integer, intent(in), optional           :: index
   1634 character(len=*), intent(in), optional  :: default_value
   1635 logical, intent(in), optional           :: scalar
   1636 
   1637 !
   1638 !       Local parameters
   1639 !
   1640 
   1641 character(len=48), parameter  :: sub_name = 'fm_util_get_string'
   1642 
   1643 !
   1644 !       Local variables
   1645 !
   1646 
   1647 character(len=256)              :: error_header
   1648 character(len=256)              :: warn_header
   1649 character(len=256)              :: note_header
   1650 character(len=128)              :: caller_str
   1651 integer                         :: index_t
   1652 character(len=fm_type_name_len) :: fm_type
   1653 integer                         :: field_length
   1654 
   1655 !
   1656 !       set the caller string and headers
   1657 !
   1658 
   1659 if (present(caller)) then  !{
   1660   caller_str = '[' // trim(caller) // ']'
   1661 else  !}{
   1662   caller_str = fm_util_default_caller

Page 53          Source Listing                  FM_UTIL_GET_STRING
2021-06-01 08:55                                 fm_util.F90

   1663 endif  !}
   1664 
   1665 error_header = '==>Error from ' // trim(mod_name) //   &
   1666                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1667 warn_header = '==>Warning from ' // trim(mod_name) //  &
   1668               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1669 note_header = '==>Note from ' // trim(mod_name) //     &
   1670               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1671 
   1672 !
   1673 !       check that a name is given (fatal if not)
   1674 !
   1675 
   1676 if (name .eq. ' ') then  !{
   1677   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   1678 endif  !}
   1679 
   1680 !
   1681 !       Check whether we require a scalar (length=1) and return
   1682 !       an error if we do, and it isn't
   1683 !
   1684 
   1685 if (present(scalar)) then  !{
   1686   if (scalar) then  !{
   1687     field_length = fm_get_length(name)
   1688     if (field_length .lt. 0) then  !{
   1689       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   1690     elseif (field_length .gt. 1) then  !}{
   1691       call mpp_error(FATAL, trim(error_header) // trim(name) // ' not scalar')
   1692     endif  !}
   1693   endif  !}
   1694 endif  !}
   1695 
   1696 !
   1697 !       set the index
   1698 !
   1699 
   1700 if (present(index)) then  !{
   1701   index_t = index
   1702   if (index .le. 0) then  !{
   1703     call mpp_error(FATAL, trim(error_header) // ' Index not positive')
   1704   endif  !}
   1705 else  !}{
   1706   index_t = 1
   1707 endif  !}
   1708 
   1709 fm_type = fm_get_type(name)
   1710 if (fm_type .eq. 'string') then  !{
   1711   if (.not. fm_get_value(name, value, index = index_t)) then  !{
   1712     call mpp_error(FATAL, trim(error_header) // ' Problem getting ' // trim(name))
   1713   endif  !}
   1714 elseif (fm_type .eq. ' ' .and. present(default_value)) then  !}{
   1715   value = default_value
   1716 elseif (fm_type .eq. ' ') then  !}{
   1717   call mpp_error(FATAL, trim(error_header) // ' Field does not exist: ' // trim(name))
   1718 else  !}{
   1719  call mpp_error(FATAL, trim(error_header) // ' Wrong type for ' // trim(name) // ', found (' // trim(fm_type) // ')')

Page 54          Source Listing                  FM_UTIL_GET_STRING
2021-06-01 08:55                                 fm_util.F90

   1720 endif  !}
   1721 
   1722 return
   1723 
   1724 end function fm_util_get_string  !}


ENTRY POINTS

  Name                                          
                                                
 fm_util_mod_mp_fm_util_get_string_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALLER                     Dummy  1616     CHAR                        scalar   ARG,IN           1659,1660                         
 CALLER_STR                 Local  1650     CHAR            128         scalar                    1660,1662,1666,1668,1670          
 DEFAULT_VALUE              Dummy  1616     CHAR                        scalar   ARG,IN           1714,1715                         
 ERROR_HEADER               Local  1647     CHAR            256         scalar                    1665,1677,1689,1691,1703,1712,1717
                                                                                                  ,1719                             
 FIELD_LENGTH               Local  1653     I(4)            4           scalar                    1687,1688,1690                    
 FM_TYPE                    Local  1652     CHAR            8           scalar                    1709,1710,1714,1716,1719          
 FM_UTIL_GET_STRING         Func   1616     CHAR            128         scalar                                                      
 INDEX                      Dummy  1616     I(4)            4           scalar   ARG,IN           1700,1701,1702                    
 INDEX_T                    Local  1651     I(4)            4           scalar                    1701,1706,1711                    
 NAME                       Dummy  1616     CHAR                        scalar   ARG,IN           1676,1687,1689,1691,1709,1711,1712
                                                                                                  ,1717,1719                        
 NOTE_HEADER                Local  1649     CHAR            256         scalar                    1669                              
 PRESENT                    Func   1659                                 scalar                    1659,1685,1700,1714               
 SCALAR                     Dummy  1616     L(4)            4           scalar   ARG,IN           1685,1686                         
 SUB_NAME                   Param  1641     CHAR            48          scalar                    1666,1668,1670                    
 TRIM                       Func   1660                                 scalar                    1660,1665,1666,1667,1668,1669,1670
                                                                                                  ,1677,1689,1691,1703,1712,1717,171
                                                                                                  9                                 
 VALUE                      Local  1625     CHAR            128         scalar                    1711,1715                         
 WARN_HEADER                Local  1648     CHAR            256         scalar                    1667                              

Page 55          Source Listing                  FM_UTIL_GET_STRING
2021-06-01 08:55                                 fm_util.F90

   1725 ! </FUNCTION> NAME="fm_util_get_string"
   1726 
   1727 
   1728 !#######################################################################
   1729 ! <SUBROUTINE NAME="fm_util_set_value_integer_array">
   1730 !
   1731 ! <DESCRIPTION>
   1732 ! Set an integer array in the Field Manager tree.
   1733 ! </DESCRIPTION>
   1734 !
   1735 
   1736 subroutine fm_util_set_value_integer_array(name, value, length, caller, no_overwrite, good_name_list)  !{
   1737 
   1738 implicit none
   1739 
   1740 !
   1741 !       arguments
   1742 !
   1743 
   1744 character(len=*), intent(in)                            :: name
   1745 integer, intent(in)                                     :: length
   1746 integer, intent(in)                                     :: value(length)
   1747 character(len=*), intent(in), optional                  :: caller
   1748 logical, intent(in), optional                           :: no_overwrite
   1749 character(len=fm_path_name_len), intent(in), optional   :: good_name_list
   1750 
   1751 !
   1752 !       Local parameters
   1753 !
   1754 
   1755 character(len=48), parameter    :: sub_name = 'fm_util_set_value_integer_array'
   1756 
   1757 !
   1758 !       Local variables
   1759 !
   1760 
   1761 character(len=256)              :: error_header
   1762 character(len=256)              :: warn_header
   1763 character(len=256)              :: note_header
   1764 character(len=128)              :: caller_str
   1765 character(len=32)               :: str_error
   1766 integer                         :: field_index
   1767 integer                         :: field_length
   1768 integer                         :: n
   1769 logical                         :: no_overwrite_use
   1770 character(len=fm_path_name_len) :: good_name_list_use
   1771 logical                         :: add_name
   1772 
   1773 !
   1774 !       set the caller string and headers
   1775 !
   1776 
   1777 if (present(caller)) then  !{
   1778   caller_str = '[' // trim(caller) // ']'
   1779 else  !}{
   1780   caller_str = fm_util_default_caller
   1781 endif  !}

Page 56          Source Listing                  FM_UTIL_SET_VALUE_INTEGER_ARRAY
2021-06-01 08:55                                 fm_util.F90

   1782 
   1783 error_header = '==>Error from ' // trim(mod_name) //   &
   1784                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1785 warn_header = '==>Warning from ' // trim(mod_name) //  &
   1786               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1787 note_header = '==>Note from ' // trim(mod_name) //     &
   1788               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1789 
   1790 !
   1791 !       check that a name is given (fatal if not)
   1792 !
   1793 
   1794 if (name .eq. ' ') then  !{
   1795   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   1796 endif  !}
   1797 
   1798 !
   1799 !       check that the length is non-negative
   1800 !
   1801 
   1802 if (length .lt. 0) then  !{
   1803   call mpp_error(FATAL, trim(error_header) // ' Negative array length')
   1804 endif  !}
   1805 
   1806 !
   1807 !       check for whether to overwrite existing values
   1808 !
   1809 
   1810 if (present(no_overwrite)) then  !{
   1811   no_overwrite_use = no_overwrite
   1812 else  !}{
   1813   no_overwrite_use = default_no_overwrite
   1814 endif  !}
   1815 
   1816 !
   1817 !       check for whether to save the name in a list
   1818 !
   1819 
   1820 if (present(good_name_list)) then  !{
   1821   good_name_list_use = good_name_list
   1822 else  !}{
   1823   good_name_list_use = default_good_name_list
   1824 endif  !}
   1825 
   1826 !
   1827 !       write the data array
   1828 !
   1829 
   1830 if (length .eq. 0) then  !{
   1831   if (.not. (no_overwrite_use .and. fm_exists(name))) then  !{
   1832     field_index = fm_new_value(name, 0, index = 0)
   1833     if (field_index .le. 0) then  !{
   1834       write (str_error,*) ' with length = ', length
   1835       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   1836     endif  !}
   1837   endif  !}
   1838 else  !}{

Page 57          Source Listing                  FM_UTIL_SET_VALUE_INTEGER_ARRAY
2021-06-01 08:55                                 fm_util.F90

   1839   if (no_overwrite_use .and. fm_exists(name)) then  !{
   1840     field_length = fm_get_length(name)
   1841     if (field_length .lt. 0) then  !{
   1842       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   1843     endif  !}
   1844     do n = field_length + 1, length  !{
   1845       field_index = fm_new_value(name, value(n), index = n)
   1846       if (field_index .le. 0) then  !{
   1847         write (str_error,*) ' with index = ', n
   1848         call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   1849       endif  !}
   1850     enddo  !} n
   1851   else  !}{
   1852     field_index = fm_new_value(name, value(1))
   1853     if (field_index .le. 0) then  !{
   1854       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name))
   1855     endif  !}
   1856     do n = 2, length  !{
   1857       field_index = fm_new_value(name, value(n), index = n)
   1858       if (field_index .le. 0) then  !{
   1859         write (str_error,*) ' with index = ', n
   1860         call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   1861       endif  !}
   1862     enddo  !} n
   1863   endif  !}
   1864 endif  !}
   1865 
   1866 !
   1867 !       Add the variable name to the list of good names, to be used
   1868 !       later for a consistency check
   1869 !
   1870 
   1871 if (good_name_list_use .ne. ' ') then  !{
   1872   if (fm_exists(good_name_list_use)) then  !{
   1873     add_name = fm_util_get_index_string(good_name_list_use, name,               &
   1874        caller = caller_str) .le. 0              ! true if name does not exist in string array
   1875   else  !}{
   1876     add_name = .true.                           ! always add to new list
   1877   endif  !}
   1878   if (add_name .and. fm_exists(name)) then  !{
   1879     if (fm_new_value(good_name_list_use, name, append = .true., create = .true.) .le. 0) then  !{
   1880       call mpp_error(FATAL, trim(error_header) //                               &
   1881            ' Could not add ' // trim(name) // ' to "' // trim(good_name_list_use) // '" list')
   1882     endif  !}
   1883   endif  !}
   1884 endif  !}
   1885 
   1886 return
   1887 
   1888 end subroutine fm_util_set_value_integer_array  !}

Page 58          Source Listing                  FM_UTIL_SET_VALUE_INTEGER_ARRAY
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                       
                                                             
 fm_util_mod_mp_fm_util_set_value_integer_array_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD_NAME                   Local  1771     L(4)            4           scalar                    1873,1876,1878                    
 CALLER                     Dummy  1736     CHAR                        scalar   ARG,IN           1777,1778                         
 CALLER_STR                 Local  1764     CHAR            128         scalar                    1778,1780,1784,1786,1788,1874     
 ERROR_HEADER               Local  1761     CHAR            256         scalar                    1783,1795,1803,1835,1842,1848,1854
                                                                                                  ,1860,1880                        
 FIELD_INDEX                Local  1766     I(4)            4           scalar                    1832,1833,1845,1846,1852,1853,1857
                                                                                                  ,1858                             
 FIELD_LENGTH               Local  1767     I(4)            4           scalar                    1840,1841,1844                    
 FM_NEW_VALUE               Local  1832                                 scalar   PRIV             46,1832,1845,1852,1857,1879,1996,2
                                                                                                  009,2016,2021,2043,2160,2173,2180,
                                                                                                  2185,2207,2324,2337,2344,2349,2371
                                                                                                  ,2501,2508,2515,2523,2529,2549,267
                                                                                                  9,2686,2693,2701,2707,2727,2857,28
                                                                                                  64,2871,2879,2885,2905,3035,3042,3
                                                                                                  049,3057,3063,3083,3242           
 FM_NEW_VALUE_INTEGER       Func   1832     I(4)            4           scalar   PRIV             1832,1845,1852,1857,2501,2508,2515
                                                                                                  ,2523,2529                        
 FM_NEW_VALUE_STRING        Func   1879     I(4)            4           scalar   PRIV             1879,2043,2207,2324,2337,2344,2349
                                                                                                  ,2371,2549,2727,2905,3035,3042,304
                                                                                                  9,3057,3063,3083,3242             
 FM_PATH_NAME_LEN           Param  1749     I(4)            4           scalar   PRIV             43,107,108,109,1749,1770,1913,1934
                                                                                                  ,2077,2098,2241,2262,2428,2606,278
                                                                                                  4,2962,3128,3298                  
 FM_UTIL_GET_INDEX_STRING   Func   1873     I(4)            4           scalar                    84,1873,2037,2201,2365,2543,2721,2
                                                                                                  899,3077                          
 FM_UTIL_SET_VALUE_INTEGER_                                                                                                         
 ARRAY                      Subr   1736                                                                                             
 GOOD_NAME_LIST             Dummy  1736     CHAR            512         scalar   ARG,IN           1820,1821                         
 GOOD_NAME_LIST_USE         Local  1770     CHAR            512         scalar                    1821,1823,1871,1872,1873,1879,1881
 LENGTH                     Dummy  1736     I(4)            4           scalar   ARG,IN           1746,1802,1830,1834,1844,1856     
 N                          Local  1768     I(4)            4           scalar                    1844,1845,1847,1856,1857,1859     
 NAME                       Dummy  1736     CHAR                        scalar   ARG,IN           1794,1831,1832,1835,1839,1840,1842
                                                                                                  ,1845,1848,1852,1854,1857,1860,187
                                                                                                  3,1878,1879,1881                  
 NOTE_HEADER                Local  1763     CHAR            256         scalar                    1787                              
 NO_OVERWRITE               Dummy  1736     L(4)            4           scalar   ARG,IN           1810,1811                         
 NO_OVERWRITE_USE           Local  1769     L(4)            4           scalar                    1811,1813,1831,1839               
 PRESENT                    Func   1777                                 scalar                    1777,1810,1820                    
 STR_ERROR                  Local  1765     CHAR            32          scalar                    1834,1835,1847,1848,1859,1860     
 SUB_NAME                   Param  1755     CHAR            48          scalar                    1784,1786,1788                    
 TRIM                       Func   1778                                 scalar                    1778,1783,1784,1785,1786,1787,1788
                                                                                                  ,1795,1803,1835,1842,1848,1854,186
                                                                                                  0,1880,1881                       
 VALUE                      Dummy  1736     I(4)            4     1     0        ARG,IN           1845,1852,1857                    

Page 59          Source Listing                  FM_UTIL_SET_VALUE_INTEGER_ARRAY
2021-06-01 08:55 Symbol Table                    fm_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 WARN_HEADER                Local  1762     CHAR            256         scalar                    1785                              

Page 60          Source Listing                  FM_UTIL_SET_VALUE_INTEGER_ARRAY
2021-06-01 08:55                                 fm_util.F90

   1889 ! </SUBROUTINE> NAME="fm_util_set_value_integer_array"
   1890 
   1891 
   1892 !#######################################################################
   1893 ! <SUBROUTINE NAME="fm_util_set_value_logical_array">
   1894 !
   1895 ! <DESCRIPTION>
   1896 ! Set a logical array in the Field Manager tree.
   1897 ! </DESCRIPTION>
   1898 !
   1899 
   1900 subroutine fm_util_set_value_logical_array(name, value, length, caller, no_overwrite, good_name_list)  !{
   1901 
   1902 implicit none
   1903 
   1904 !
   1905 !       arguments
   1906 !
   1907 
   1908 character(len=*), intent(in)                            :: name
   1909 integer, intent(in)                                     :: length
   1910 logical, intent(in)                                     :: value(length)
   1911 character(len=*), intent(in), optional                  :: caller
   1912 logical, intent(in), optional                           :: no_overwrite
   1913 character(len=fm_path_name_len), intent(in), optional   :: good_name_list
   1914 
   1915 !
   1916 !       Local parameters
   1917 !
   1918 
   1919 character(len=48), parameter    :: sub_name = 'fm_util_set_value_logical_array'
   1920 
   1921 !
   1922 !       Local variables
   1923 !
   1924 
   1925 character(len=256)              :: error_header
   1926 character(len=256)              :: warn_header
   1927 character(len=256)              :: note_header
   1928 character(len=128)              :: caller_str
   1929 character(len=32)               :: str_error
   1930 integer                         :: field_index
   1931 integer                         :: field_length
   1932 integer                         :: n
   1933 logical                         :: no_overwrite_use
   1934 character(len=fm_path_name_len) :: good_name_list_use
   1935 logical                         :: add_name
   1936 
   1937 !
   1938 !       set the caller string and headers
   1939 !
   1940 
   1941 if (present(caller)) then  !{
   1942   caller_str = '[' // trim(caller) // ']'
   1943 else  !}{
   1944   caller_str = fm_util_default_caller
   1945 endif  !}

Page 61          Source Listing                  FM_UTIL_SET_VALUE_LOGICAL_ARRAY
2021-06-01 08:55                                 fm_util.F90

   1946 
   1947 error_header = '==>Error from ' // trim(mod_name) //   &
   1948                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1949 warn_header = '==>Warning from ' // trim(mod_name) //  &
   1950               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1951 note_header = '==>Note from ' // trim(mod_name) //     &
   1952               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   1953 
   1954 !
   1955 !       check that a name is given (fatal if not)
   1956 !
   1957 
   1958 if (name .eq. ' ') then  !{
   1959   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   1960 endif  !}
   1961 
   1962 !
   1963 !       check that the length is non-negative
   1964 !
   1965 
   1966 if (length .lt. 0) then  !{
   1967   call mpp_error(FATAL, trim(error_header) // ' Negative array length')
   1968 endif  !}
   1969 
   1970 !
   1971 !       check for whether to overwrite existing values
   1972 !
   1973 
   1974 if (present(no_overwrite)) then  !{
   1975   no_overwrite_use = no_overwrite
   1976 else  !}{
   1977   no_overwrite_use = default_no_overwrite
   1978 endif  !}
   1979 
   1980 !
   1981 !       check for whether to save the name in a list
   1982 !
   1983 
   1984 if (present(good_name_list)) then  !{
   1985   good_name_list_use = good_name_list
   1986 else  !}{
   1987   good_name_list_use = default_good_name_list
   1988 endif  !}
   1989 
   1990 !
   1991 !       write the data array
   1992 !
   1993 
   1994 if (length .eq. 0) then  !{
   1995   if (.not. (no_overwrite_use .and. fm_exists(name))) then  !{
   1996     field_index = fm_new_value(name, .false., index = 0)
   1997     if (field_index .le. 0) then  !{
   1998       write (str_error,*) ' with length = ', length
   1999       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2000     endif  !}
   2001   endif  !}
   2002 else  !}{

Page 62          Source Listing                  FM_UTIL_SET_VALUE_LOGICAL_ARRAY
2021-06-01 08:55                                 fm_util.F90

   2003   if (no_overwrite_use .and. fm_exists(name)) then  !{
   2004     field_length = fm_get_length(name)
   2005     if (field_length .lt. 0) then  !{
   2006       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   2007     endif  !}
   2008     do n = field_length + 1, length  !{
   2009       field_index = fm_new_value(name, value(n), index = n)
   2010       if (field_index .le. 0) then  !{
   2011         write (str_error,*) ' with index = ', n
   2012         call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2013       endif  !}
   2014     enddo  !} n
   2015   else  !}{
   2016     field_index = fm_new_value(name, value(1))
   2017     if (field_index .le. 0) then  !{
   2018       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name))
   2019     endif  !}
   2020     do n = 2, length  !{
   2021       field_index = fm_new_value(name, value(n), index = n)
   2022       if (field_index .le. 0) then  !{
   2023         write (str_error,*) ' with index = ', n
   2024         call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2025       endif  !}
   2026     enddo  !} n
   2027   endif  !}
   2028 endif  !}
   2029 
   2030 !
   2031 !       Add the variable name to the list of good names, to be used
   2032 !       later for a consistency check
   2033 !
   2034 
   2035 if (good_name_list_use .ne. ' ') then  !{
   2036   if (fm_exists(good_name_list_use)) then  !{
   2037     add_name = fm_util_get_index_string(good_name_list_use, name,               &
   2038        caller = caller_str) .le. 0              ! true if name does not exist in string array
   2039   else  !}{
   2040     add_name = .true.                           ! always add to new list
   2041   endif  !}
   2042   if (add_name .and. fm_exists(name)) then  !{
   2043     if (fm_new_value(good_name_list_use, name, append = .true., create = .true.) .le. 0) then  !{
   2044       call mpp_error(FATAL, trim(error_header) //                               &
   2045            ' Could not add ' // trim(name) // ' to "' // trim(good_name_list_use) // '" list')
   2046     endif  !}
   2047   endif  !}
   2048 endif  !}
   2049 
   2050 return
   2051 
   2052 end subroutine fm_util_set_value_logical_array  !}

Page 63          Source Listing                  FM_UTIL_SET_VALUE_LOGICAL_ARRAY
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                       
                                                             
 fm_util_mod_mp_fm_util_set_value_logical_array_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD_NAME                   Local  1935     L(4)            4           scalar                    2037,2040,2042                    
 CALLER                     Dummy  1900     CHAR                        scalar   ARG,IN           1941,1942                         
 CALLER_STR                 Local  1928     CHAR            128         scalar                    1942,1944,1948,1950,1952,2038     
 ERROR_HEADER               Local  1925     CHAR            256         scalar                    1947,1959,1967,1999,2006,2012,2018
                                                                                                  ,2024,2044                        
 FIELD_INDEX                Local  1930     I(4)            4           scalar                    1996,1997,2009,2010,2016,2017,2021
                                                                                                  ,2022                             
 FIELD_LENGTH               Local  1931     I(4)            4           scalar                    2004,2005,2008                    
 FM_NEW_VALUE_LOGICAL       Func   1996     I(4)            4           scalar   PRIV             1996,2009,2016,2021,2679,2686,2693
                                                                                                  ,2701,2707                        
 FM_UTIL_SET_VALUE_LOGICAL_                                                                                                         
 ARRAY                      Subr   1900                                                                                             
 GOOD_NAME_LIST             Dummy  1900     CHAR            512         scalar   ARG,IN           1984,1985                         
 GOOD_NAME_LIST_USE         Local  1934     CHAR            512         scalar                    1985,1987,2035,2036,2037,2043,2045
 LENGTH                     Dummy  1900     I(4)            4           scalar   ARG,IN           1910,1966,1994,1998,2008,2020     
 N                          Local  1932     I(4)            4           scalar                    2008,2009,2011,2020,2021,2023     
 NAME                       Dummy  1900     CHAR                        scalar   ARG,IN           1958,1995,1996,1999,2003,2004,2006
                                                                                                  ,2009,2012,2016,2018,2021,2024,203
                                                                                                  7,2042,2043,2045                  
 NOTE_HEADER                Local  1927     CHAR            256         scalar                    1951                              
 NO_OVERWRITE               Dummy  1900     L(4)            4           scalar   ARG,IN           1974,1975                         
 NO_OVERWRITE_USE           Local  1933     L(4)            4           scalar                    1975,1977,1995,2003               
 PRESENT                    Func   1941                                 scalar                    1941,1974,1984                    
 STR_ERROR                  Local  1929     CHAR            32          scalar                    1998,1999,2011,2012,2023,2024     
 SUB_NAME                   Param  1919     CHAR            48          scalar                    1948,1950,1952                    
 TRIM                       Func   1942                                 scalar                    1942,1947,1948,1949,1950,1951,1952
                                                                                                  ,1959,1967,1999,2006,2012,2018,202
                                                                                                  4,2044,2045                       
 VALUE                      Dummy  1900     L(4)            4     1     0        ARG,IN           2009,2016,2021                    
 WARN_HEADER                Local  1926     CHAR            256         scalar                    1949                              

Page 64          Source Listing                  FM_UTIL_SET_VALUE_LOGICAL_ARRAY
2021-06-01 08:55                                 fm_util.F90

   2053 ! </SUBROUTINE> NAME="fm_util_set_value_logical_array"
   2054 
   2055 
   2056 !#######################################################################
   2057 ! <SUBROUTINE NAME="fm_util_set_value_real_array">
   2058 !
   2059 ! <DESCRIPTION>
   2060 ! Set a real array in the Field Manager tree.
   2061 ! </DESCRIPTION>
   2062 !
   2063 
   2064 subroutine fm_util_set_value_real_array(name, value, length, caller, no_overwrite, good_name_list)  !{
   2065 
   2066 implicit none
   2067 
   2068 !
   2069 !       arguments
   2070 !
   2071 
   2072 character(len=*), intent(in)                            :: name
   2073 integer, intent(in)                                     :: length
   2074 real, intent(in)                                        :: value(length)
   2075 character(len=*), intent(in), optional                  :: caller
   2076 logical, intent(in), optional                           :: no_overwrite
   2077 character(len=fm_path_name_len), intent(in), optional   :: good_name_list
   2078 
   2079 !
   2080 !       Local parameters
   2081 !
   2082 
   2083 character(len=48), parameter    :: sub_name = 'fm_util_set_value_real_array'
   2084 
   2085 !
   2086 !       Local variables
   2087 !
   2088 
   2089 character(len=256)              :: error_header
   2090 character(len=256)              :: warn_header
   2091 character(len=256)              :: note_header
   2092 character(len=128)              :: caller_str
   2093 character(len=32)               :: str_error
   2094 integer                         :: field_index
   2095 integer                         :: field_length
   2096 integer                         :: n
   2097 logical                         :: no_overwrite_use
   2098 character(len=fm_path_name_len) :: good_name_list_use
   2099 logical                         :: add_name
   2100 
   2101 !
   2102 !       set the caller string and headers
   2103 !
   2104 
   2105 if (present(caller)) then  !{
   2106   caller_str = '[' // trim(caller) // ']'
   2107 else  !}{
   2108   caller_str = fm_util_default_caller
   2109 endif  !}

Page 65          Source Listing                  FM_UTIL_SET_VALUE_REAL_ARRAY
2021-06-01 08:55                                 fm_util.F90

   2110 
   2111 error_header = '==>Error from ' // trim(mod_name) //   &
   2112                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2113 warn_header = '==>Warning from ' // trim(mod_name) //  &
   2114               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2115 note_header = '==>Note from ' // trim(mod_name) //     &
   2116               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2117 
   2118 !
   2119 !       check that a name is given (fatal if not)
   2120 !
   2121 
   2122 if (name .eq. ' ') then  !{
   2123   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   2124 endif  !}
   2125 
   2126 !
   2127 !       check that the length is non-negative
   2128 !
   2129 
   2130 if (length .lt. 0) then  !{
   2131   call mpp_error(FATAL, trim(error_header) // ' Negative array length')
   2132 endif  !}
   2133 
   2134 !
   2135 !       check for whether to overwrite existing values
   2136 !
   2137 
   2138 if (present(no_overwrite)) then  !{
   2139   no_overwrite_use = no_overwrite
   2140 else  !}{
   2141   no_overwrite_use = default_no_overwrite
   2142 endif  !}
   2143 
   2144 !
   2145 !       check for whether to save the name in a list
   2146 !
   2147 
   2148 if (present(good_name_list)) then  !{
   2149   good_name_list_use = good_name_list
   2150 else  !}{
   2151   good_name_list_use = default_good_name_list
   2152 endif  !}
   2153 
   2154 !
   2155 !       write the data array
   2156 !
   2157 
   2158 if (length .eq. 0) then  !{
   2159   if (.not. (no_overwrite_use .and. fm_exists(name))) then  !{
   2160     field_index = fm_new_value(name, 0.0, index = 0)
   2161     if (field_index .le. 0) then  !{
   2162       write (str_error,*) ' with length = ', length
   2163       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2164     endif  !}
   2165   endif  !}
   2166 else  !}{

Page 66          Source Listing                  FM_UTIL_SET_VALUE_REAL_ARRAY
2021-06-01 08:55                                 fm_util.F90

   2167   if (no_overwrite_use .and. fm_exists(name)) then  !{
   2168     field_length = fm_get_length(name)
   2169     if (field_length .lt. 0) then  !{
   2170       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   2171     endif  !}
   2172     do n = field_length + 1, length  !{
   2173       field_index = fm_new_value(name, value(n), index = n)
   2174       if (field_index .le. 0) then  !{
   2175         write (str_error,*) ' with index = ', n
   2176         call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2177       endif  !}
   2178     enddo  !} n
   2179   else  !}{
   2180     field_index = fm_new_value(name, value(1))
   2181     if (field_index .le. 0) then  !{
   2182       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name))
   2183     endif  !}
   2184     do n = 2, length  !{
   2185       field_index = fm_new_value(name, value(n), index = n)
   2186       if (field_index .le. 0) then  !{
   2187         write (str_error,*) ' with index = ', n
   2188         call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2189       endif  !}
   2190     enddo  !} n
   2191   endif  !}
   2192 endif  !}
   2193 
   2194 !
   2195 !       Add the variable name to the list of good names, to be used
   2196 !       later for a consistency check
   2197 !
   2198 
   2199 if (good_name_list_use .ne. ' ') then  !{
   2200   if (fm_exists(good_name_list_use)) then  !{
   2201     add_name = fm_util_get_index_string(good_name_list_use, name,               &
   2202        caller = caller_str) .le. 0              ! true if name does not exist in string array
   2203   else  !}{
   2204     add_name = .true.                           ! always add to new list
   2205   endif  !}
   2206   if (add_name .and. fm_exists(name)) then  !{
   2207     if (fm_new_value(good_name_list_use, name, append = .true., create = .true.) .le. 0) then  !{
   2208       call mpp_error(FATAL, trim(error_header) //                               &
   2209            ' Could not add ' // trim(name) // ' to "' // trim(good_name_list_use) // '" list')
   2210     endif  !}
   2211   endif  !}
   2212 endif  !}
   2213 
   2214 return
   2215 
   2216 end subroutine fm_util_set_value_real_array  !}

Page 67          Source Listing                  FM_UTIL_SET_VALUE_REAL_ARRAY
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                    
                                                          
 fm_util_mod_mp_fm_util_set_value_real_array_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD_NAME                   Local  2099     L(4)            4           scalar                    2201,2204,2206                    
 CALLER                     Dummy  2064     CHAR                        scalar   ARG,IN           2105,2106                         
 CALLER_STR                 Local  2092     CHAR            128         scalar                    2106,2108,2112,2114,2116,2202     
 ERROR_HEADER               Local  2089     CHAR            256         scalar                    2111,2123,2131,2163,2170,2176,2182
                                                                                                  ,2188,2208                        
 FIELD_INDEX                Local  2094     I(4)            4           scalar                    2160,2161,2173,2174,2180,2181,2185
                                                                                                  ,2186                             
 FIELD_LENGTH               Local  2095     I(4)            4           scalar                    2168,2169,2172                    
 FM_NEW_VALUE_REAL          Func   2160     I(4)            4           scalar   PRIV             2160,2173,2180,2185,2857,2864,2871
                                                                                                  ,2879,2885                        
 FM_UTIL_SET_VALUE_REAL_ARR                                                                                                         
 AY                         Subr   2064                                                                                             
 GOOD_NAME_LIST             Dummy  2064     CHAR            512         scalar   ARG,IN           2148,2149                         
 GOOD_NAME_LIST_USE         Local  2098     CHAR            512         scalar                    2149,2151,2199,2200,2201,2207,2209
 LENGTH                     Dummy  2064     I(4)            4           scalar   ARG,IN           2074,2130,2158,2162,2172,2184     
 N                          Local  2096     I(4)            4           scalar                    2172,2173,2175,2184,2185,2187     
 NAME                       Dummy  2064     CHAR                        scalar   ARG,IN           2122,2159,2160,2163,2167,2168,2170
                                                                                                  ,2173,2176,2180,2182,2185,2188,220
                                                                                                  1,2206,2207,2209                  
 NOTE_HEADER                Local  2091     CHAR            256         scalar                    2115                              
 NO_OVERWRITE               Dummy  2064     L(4)            4           scalar   ARG,IN           2138,2139                         
 NO_OVERWRITE_USE           Local  2097     L(4)            4           scalar                    2139,2141,2159,2167               
 PRESENT                    Func   2105                                 scalar                    2105,2138,2148                    
 STR_ERROR                  Local  2093     CHAR            32          scalar                    2162,2163,2175,2176,2187,2188     
 SUB_NAME                   Param  2083     CHAR            48          scalar                    2112,2114,2116                    
 TRIM                       Func   2106                                 scalar                    2106,2111,2112,2113,2114,2115,2116
                                                                                                  ,2123,2131,2163,2170,2176,2182,218
                                                                                                  8,2208,2209                       
 VALUE                      Dummy  2064     R(8)            8     1     0        ARG,IN           2173,2180,2185                    
 WARN_HEADER                Local  2090     CHAR            256         scalar                    2113                              

Page 68          Source Listing                  FM_UTIL_SET_VALUE_REAL_ARRAY
2021-06-01 08:55                                 fm_util.F90

   2217 ! </SUBROUTINE> NAME="fm_util_set_value_real_array"
   2218 
   2219 
   2220 !#######################################################################
   2221 ! <SUBROUTINE NAME="fm_util_set_value_string_array">
   2222 !
   2223 ! <DESCRIPTION>
   2224 ! Set a string array in the Field Manager tree.
   2225 ! </DESCRIPTION>
   2226 !
   2227 
   2228 subroutine fm_util_set_value_string_array(name, value, length, caller, no_overwrite, good_name_list)  !{
   2229 
   2230 implicit none
   2231 
   2232 !
   2233 !       arguments
   2234 !
   2235 
   2236 character(len=*), intent(in)                            :: name
   2237 integer, intent(in)                                     :: length
   2238 character(len=*), intent(in)                            :: value(length)
   2239 character(len=*), intent(in), optional                  :: caller
   2240 logical, intent(in), optional                           :: no_overwrite
   2241 character(len=fm_path_name_len), intent(in), optional   :: good_name_list
   2242 
   2243 !
   2244 !       Local parameters
   2245 !
   2246 
   2247 character(len=48), parameter    :: sub_name = 'fm_util_set_value_string_array'
   2248 
   2249 !
   2250 !       Local variables
   2251 !
   2252 
   2253 character(len=256)              :: error_header
   2254 character(len=256)              :: warn_header
   2255 character(len=256)              :: note_header
   2256 character(len=128)              :: caller_str
   2257 character(len=32)               :: str_error
   2258 integer                         :: field_index
   2259 integer                         :: field_length
   2260 integer                         :: n
   2261 logical                         :: no_overwrite_use
   2262 character(len=fm_path_name_len) :: good_name_list_use
   2263 logical                         :: add_name
   2264 
   2265 !
   2266 !       set the caller string and headers
   2267 !
   2268 
   2269 if (present(caller)) then  !{
   2270   caller_str = '[' // trim(caller) // ']'
   2271 else  !}{
   2272   caller_str = fm_util_default_caller
   2273 endif  !}

Page 69          Source Listing                  FM_UTIL_SET_VALUE_STRING_ARRAY
2021-06-01 08:55                                 fm_util.F90

   2274 
   2275 error_header = '==>Error from ' // trim(mod_name) //   &
   2276                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2277 warn_header = '==>Warning from ' // trim(mod_name) //  &
   2278               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2279 note_header = '==>Note from ' // trim(mod_name) //     &
   2280               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2281 
   2282 !
   2283 !       check that a name is given (fatal if not)
   2284 !
   2285 
   2286 if (name .eq. ' ') then  !{
   2287   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   2288 endif  !}
   2289 
   2290 !
   2291 !       check that the length is non-negative
   2292 !
   2293 
   2294 if (length .lt. 0) then  !{
   2295   call mpp_error(FATAL, trim(error_header) // ' Negative array length')
   2296 endif  !}
   2297 
   2298 !
   2299 !       check for whether to overwrite existing values
   2300 !
   2301 
   2302 if (present(no_overwrite)) then  !{
   2303   no_overwrite_use = no_overwrite
   2304 else  !}{
   2305   no_overwrite_use = default_no_overwrite
   2306 endif  !}
   2307 
   2308 !
   2309 !       check for whether to save the name in a list
   2310 !
   2311 
   2312 if (present(good_name_list)) then  !{
   2313   good_name_list_use = good_name_list
   2314 else  !}{
   2315   good_name_list_use = default_good_name_list
   2316 endif  !}
   2317 
   2318 !
   2319 !       write the data array
   2320 !
   2321 
   2322 if (length .eq. 0) then  !{
   2323   if (.not. (no_overwrite_use .and. fm_exists(name))) then  !{
   2324     field_index = fm_new_value(name, ' ', index = 0)
   2325     if (field_index .le. 0) then  !{
   2326       write (str_error,*) ' with length = ', length
   2327       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2328     endif  !}
   2329   endif  !}
   2330 else  !}{

Page 70          Source Listing                  FM_UTIL_SET_VALUE_STRING_ARRAY
2021-06-01 08:55                                 fm_util.F90

   2331   if (no_overwrite_use .and. fm_exists(name)) then  !{
   2332     field_length = fm_get_length(name)
   2333     if (field_length .lt. 0) then  !{
   2334       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   2335     endif  !}
   2336     do n = field_length + 1, length  !{
   2337       field_index = fm_new_value(name, value(n), index = n)
   2338       if (field_index .le. 0) then  !{
   2339         write (str_error,*) ' with index = ', n
   2340         call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2341       endif  !}
   2342     enddo  !} n
   2343   else  !}{
   2344     field_index = fm_new_value(name, value(1))
   2345     if (field_index .le. 0) then  !{
   2346       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name))
   2347     endif  !}
   2348     do n = 2, length  !{
   2349       field_index = fm_new_value(name, value(n), index = n)
   2350       if (field_index .le. 0) then  !{
   2351         write (str_error,*) ' with index = ', n
   2352         call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2353       endif  !}
   2354     enddo  !} n
   2355   endif  !}
   2356 endif  !}
   2357 
   2358 !
   2359 !       Add the variable name to the list of good names, to be used
   2360 !       later for a consistency check
   2361 !
   2362 
   2363 if (good_name_list_use .ne. ' ') then  !{
   2364   if (fm_exists(good_name_list_use)) then  !{
   2365     add_name = fm_util_get_index_string(good_name_list_use, name,               &
   2366        caller = caller_str) .le. 0              ! true if name does not exist in string array
   2367   else  !}{
   2368     add_name = .true.                           ! always add to new list
   2369   endif  !}
   2370   if (add_name .and. fm_exists(name)) then  !{
   2371     if (fm_new_value(good_name_list_use, name, append = .true., create = .true.) .le. 0) then  !{
   2372       call mpp_error(FATAL, trim(error_header) //                               &
   2373            ' Could not add ' // trim(name) // ' to "' // trim(good_name_list_use) // '" list')
   2374     endif  !}
   2375   endif  !}
   2376 endif  !}
   2377 
   2378 return
   2379 
   2380 end subroutine fm_util_set_value_string_array  !}

Page 71          Source Listing                  FM_UTIL_SET_VALUE_STRING_ARRAY
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                                      
                                                            
 fm_util_mod_mp_fm_util_set_value_string_array_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD_NAME                   Local  2263     L(4)            4           scalar                    2365,2368,2370                    
 CALLER                     Dummy  2228     CHAR                        scalar   ARG,IN           2269,2270                         
 CALLER_STR                 Local  2256     CHAR            128         scalar                    2270,2272,2276,2278,2280,2366     
 ERROR_HEADER               Local  2253     CHAR            256         scalar                    2275,2287,2295,2327,2334,2340,2346
                                                                                                  ,2352,2372                        
 FIELD_INDEX                Local  2258     I(4)            4           scalar                    2324,2325,2337,2338,2344,2345,2349
                                                                                                  ,2350                             
 FIELD_LENGTH               Local  2259     I(4)            4           scalar                    2332,2333,2336                    
 FM_UTIL_SET_VALUE_STRING_A                                                                                                         
 RRAY                       Subr   2228                                                                                             
 GOOD_NAME_LIST             Dummy  2228     CHAR            512         scalar   ARG,IN           2312,2313                         
 GOOD_NAME_LIST_USE         Local  2262     CHAR            512         scalar                    2313,2315,2363,2364,2365,2371,2373
 LENGTH                     Dummy  2228     I(4)            4           scalar   ARG,IN           2238,2294,2322,2326,2336,2348     
 N                          Local  2260     I(4)            4           scalar                    2336,2337,2339,2348,2349,2351     
 NAME                       Dummy  2228     CHAR                        scalar   ARG,IN           2286,2323,2324,2327,2331,2332,2334
                                                                                                  ,2337,2340,2344,2346,2349,2352,236
                                                                                                  5,2370,2371,2373                  
 NOTE_HEADER                Local  2255     CHAR            256         scalar                    2279                              
 NO_OVERWRITE               Dummy  2228     L(4)            4           scalar   ARG,IN           2302,2303                         
 NO_OVERWRITE_USE           Local  2261     L(4)            4           scalar                    2303,2305,2323,2331               
 PRESENT                    Func   2269                                 scalar                    2269,2302,2312                    
 STR_ERROR                  Local  2257     CHAR            32          scalar                    2326,2327,2339,2340,2351,2352     
 SUB_NAME                   Param  2247     CHAR            48          scalar                    2276,2278,2280                    
 TRIM                       Func   2270                                 scalar                    2270,2275,2276,2277,2278,2279,2280
                                                                                                  ,2287,2295,2327,2334,2340,2346,235
                                                                                                  2,2372,2373                       
 VALUE                      Dummy  2228     CHAR                  1     0        ARG,IN           2337,2344,2349                    
 WARN_HEADER                Local  2254     CHAR            256         scalar                    2277                              

Page 72          Source Listing                  FM_UTIL_SET_VALUE_STRING_ARRAY
2021-06-01 08:55                                 fm_util.F90

   2381 ! </SUBROUTINE> NAME="fm_util_set_value_string_array"
   2382 
   2383 
   2384 !#######################################################################
   2385 ! <SUBROUTINE NAME="fm_util_set_value_integer">
   2386 !
   2387 ! <DESCRIPTION>
   2388 ! Set an integer value in the Field Manager tree.
   2389 ! </DESCRIPTION>
   2390 !
   2391 
   2392 subroutine fm_util_set_value_integer(name, value, caller, index, append, no_create,        &
   2393      no_overwrite, good_name_list)  !{
   2394 
   2395 implicit none
   2396 
   2397 !
   2398 !       arguments
   2399 !
   2400 
   2401 character(len=*), intent(in)            :: name
   2402 integer, intent(in)                     :: value
   2403 character(len=*), intent(in), optional  :: caller
   2404 integer, intent(in), optional           :: index
   2405 logical, intent(in), optional           :: append
   2406 logical, intent(in), optional           :: no_create
   2407 logical, intent(in), optional           :: no_overwrite
   2408 character(len=*), intent(in), optional  :: good_name_list
   2409 
   2410 !
   2411 !       Local parameters
   2412 !
   2413 
   2414 character(len=48), parameter    :: sub_name = 'fm_util_set_value_integer'
   2415 
   2416 !
   2417 !       Local variables
   2418 !
   2419 
   2420 character(len=256)              :: error_header
   2421 character(len=256)              :: warn_header
   2422 character(len=256)              :: note_header
   2423 character(len=128)              :: caller_str
   2424 character(len=32)               :: str_error
   2425 integer                         :: field_index
   2426 logical                         :: no_overwrite_use
   2427 integer                         :: field_length
   2428 character(len=fm_path_name_len) :: good_name_list_use
   2429 logical                         :: create
   2430 logical                         :: add_name
   2431 
   2432 !
   2433 !       set the caller string and headers
   2434 !
   2435 
   2436 if (present(caller)) then  !{
   2437   caller_str = '[' // trim(caller) // ']'

Page 73          Source Listing                  FM_UTIL_SET_VALUE_INTEGER
2021-06-01 08:55                                 fm_util.F90

   2438 else  !}{
   2439   caller_str = fm_util_default_caller
   2440 endif  !}
   2441 
   2442 error_header = '==>Error from ' // trim(mod_name) //   &
   2443                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2444 warn_header = '==>Warning from ' // trim(mod_name) //  &
   2445               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2446 note_header = '==>Note from ' // trim(mod_name) //     &
   2447               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2448 
   2449 !
   2450 !       check that a name is given (fatal if not)
   2451 !
   2452 
   2453 if (name .eq. ' ') then  !{
   2454   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   2455 endif  !}
   2456 
   2457 !
   2458 !       check that append and index are not both given
   2459 !
   2460 
   2461 if (present(index) .and. present(append)) then  !{
   2462   call mpp_error(FATAL, trim(error_header) // ' Append and index both given as arguments')
   2463 endif  !}
   2464 
   2465 !
   2466 !       check for whether to overwrite existing values
   2467 !
   2468 
   2469 if (present(no_overwrite)) then  !{
   2470   no_overwrite_use = no_overwrite
   2471 else  !}{
   2472   no_overwrite_use = default_no_overwrite
   2473 endif  !}
   2474 
   2475 !
   2476 !       check for whether to save the name in a list
   2477 !
   2478 
   2479 if (present(good_name_list)) then  !{
   2480   good_name_list_use = good_name_list
   2481 else  !}{
   2482   good_name_list_use = default_good_name_list
   2483 endif  !}
   2484 
   2485 if (present(no_create)) then  !{
   2486   create = .not. no_create
   2487   if (no_create .and. (present(append) .or. present(index))) then  !{
   2488     call mpp_error(FATAL, trim(error_header) // ' append or index are present when no_create is true for ' // trim(name))
   2489   endif  !}
   2490 else  !}{
   2491   create = .true.
   2492 endif  !}
   2493 
   2494 if (present(index)) then  !{

Page 74          Source Listing                  FM_UTIL_SET_VALUE_INTEGER
2021-06-01 08:55                                 fm_util.F90

   2495   if (fm_exists(name)) then  !{
   2496     field_length = fm_get_length(name)
   2497     if (field_length .lt. 0) then  !{
   2498       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   2499     endif  !}
   2500     if (.not. (no_overwrite_use .and. field_length .ge. index)) then  !{
   2501       field_index = fm_new_value(name, value, index = index)
   2502       if (field_index .le. 0) then  !{
   2503         write (str_error,*) ' with index = ', index
   2504         call mpp_error(FATAL, trim(error_header) // ' Problem overwriting ' // trim(name) // trim(str_error))
   2505       endif  !}
   2506     endif  !}
   2507   else  !}{
   2508     field_index = fm_new_value(name, value, index = index)
   2509     if (field_index .le. 0) then  !{
   2510       write (str_error,*) ' with index = ', index
   2511       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2512     endif  !}
   2513   endif  !}
   2514 elseif (present(append)) then  !}{
   2515   field_index = fm_new_value(name, value, append = append)
   2516   if (field_index .le. 0) then  !{
   2517     write (str_error,*) ' with append = ', append
   2518     call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2519   endif  !}
   2520 else  !}{
   2521   if (fm_exists(name)) then  !{
   2522     if (.not. no_overwrite_use) then  !{
   2523       field_index = fm_new_value(name, value)
   2524       if (field_index .le. 0) then  !{
   2525         call mpp_error(FATAL, trim(error_header) // ' Problem overwriting ' // trim(name))
   2526       endif  !}
   2527     endif  !}
   2528   elseif (create) then  !}{
   2529     field_index = fm_new_value(name, value)
   2530     if (field_index .le. 0) then  !{
   2531       call mpp_error(FATAL, trim(error_header) // ' Problem creating ' // trim(name))
   2532     endif  !}
   2533   endif  !}
   2534 endif  !}
   2535 
   2536 !
   2537 !       Add the variable name to the list of good names, to be used
   2538 !       later for a consistency check, unless the field did not exist and we did not create it
   2539 !
   2540 
   2541 if (good_name_list_use .ne. ' ') then  !{
   2542   if (fm_exists(good_name_list_use)) then  !{
   2543     add_name = fm_util_get_index_string(good_name_list_use, name,               &
   2544        caller = caller_str) .le. 0              ! true if name does not exist in string array
   2545   else  !}{
   2546     add_name = .true.                           ! always add to new list
   2547   endif  !}
   2548   if (add_name .and. fm_exists(name)) then  !{
   2549     if (fm_new_value(good_name_list_use, name, append = .true., create = .true.) .le. 0) then  !{
   2550       call mpp_error(FATAL, trim(error_header) //                               &
   2551            ' Could not add ' // trim(name) // ' to "' // trim(good_name_list_use) // '" list')

Page 75          Source Listing                  FM_UTIL_SET_VALUE_INTEGER
2021-06-01 08:55                                 fm_util.F90

   2552     endif  !}
   2553   endif  !}
   2554 endif  !}
   2555 
   2556 return
   2557 
   2558 end subroutine fm_util_set_value_integer  !}


ENTRY POINTS

  Name                                                 
                                                       
 fm_util_mod_mp_fm_util_set_value_integer_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD_NAME                   Local  2430     L(4)            4           scalar                    2543,2546,2548                    
 APPEND                     Dummy  2392     L(4)            4           scalar   ARG,IN           2461,2487,2514,2515,2517          
 CALLER                     Dummy  2392     CHAR                        scalar   ARG,IN           2436,2437                         
 CALLER_STR                 Local  2423     CHAR            128         scalar                    2437,2439,2443,2445,2447,2544     
 CREATE                     Local  2429     L(4)            4           scalar                    2486,2491,2528                    
 ERROR_HEADER               Local  2420     CHAR            256         scalar                    2442,2454,2462,2488,2498,2504,2511
                                                                                                  ,2518,2525,2531,2550              
 FIELD_INDEX                Local  2425     I(4)            4           scalar                    2501,2502,2508,2509,2515,2516,2523
                                                                                                  ,2524,2529,2530                   
 FIELD_LENGTH               Local  2427     I(4)            4           scalar                    2496,2497,2500                    
 FM_UTIL_SET_VALUE_INTEGER  Subr   2392                                                                                             
 GOOD_NAME_LIST             Dummy  2393     CHAR                        scalar   ARG,IN           2479,2480                         
 GOOD_NAME_LIST_USE         Local  2428     CHAR            512         scalar                    2480,2482,2541,2542,2543,2549,2551
 INDEX                      Dummy  2392     I(4)            4           scalar   ARG,IN           2461,2487,2494,2500,2501,2503,2508
                                                                                                  ,2510                             
 NAME                       Dummy  2392     CHAR                        scalar   ARG,IN           2453,2488,2495,2496,2498,2501,2504
                                                                                                  ,2508,2511,2515,2518,2521,2523,252
                                                                                                  5,2529,2531,2543,2548,2549,2551   
 NOTE_HEADER                Local  2422     CHAR            256         scalar                    2446                              
 NO_CREATE                  Dummy  2392     L(4)            4           scalar   ARG,IN           2485,2486,2487                    
 NO_OVERWRITE               Dummy  2393     L(4)            4           scalar   ARG,IN           2469,2470                         
 NO_OVERWRITE_USE           Local  2426     L(4)            4           scalar                    2470,2472,2500,2522               
 PRESENT                    Func   2436                                 scalar                    2436,2461,2469,2479,2485,2487,2494
                                                                                                  ,2514                             
 STR_ERROR                  Local  2424     CHAR            32          scalar                    2503,2504,2510,2511,2517,2518     
 SUB_NAME                   Param  2414     CHAR            48          scalar                    2443,2445,2447                    
 TRIM                       Func   2437                                 scalar                    2437,2442,2443,2444,2445,2446,2447
                                                                                                  ,2454,2462,2488,2498,2504,2511,251
                                                                                                  8,2525,2531,2550,2551             
 VALUE                      Dummy  2392     I(4)            4           scalar   ARG,IN           2501,2508,2515,2523,2529          
 WARN_HEADER                Local  2421     CHAR            256         scalar                    2444                              

Page 76          Source Listing                  FM_UTIL_SET_VALUE_INTEGER
2021-06-01 08:55                                 fm_util.F90

   2559 ! </SUBROUTINE> NAME="fm_util_set_value_integer"
   2560 
   2561 
   2562 !#######################################################################
   2563 ! <SUBROUTINE NAME="fm_util_set_value_logical">
   2564 !
   2565 ! <DESCRIPTION>
   2566 ! Set a logical value in the Field Manager tree.
   2567 ! </DESCRIPTION>
   2568 !
   2569 
   2570 subroutine fm_util_set_value_logical(name, value, caller, index, append, no_create,        &
   2571      no_overwrite, good_name_list)  !{
   2572 
   2573 implicit none
   2574 
   2575 !
   2576 !       arguments
   2577 !
   2578 
   2579 character(len=*), intent(in)            :: name
   2580 logical, intent(in)                     :: value
   2581 character(len=*), intent(in), optional  :: caller
   2582 integer, intent(in), optional           :: index
   2583 logical, intent(in), optional           :: append
   2584 logical, intent(in), optional           :: no_create
   2585 logical, intent(in), optional           :: no_overwrite
   2586 character(len=*), intent(in), optional  :: good_name_list
   2587 
   2588 !
   2589 !       Local parameters
   2590 !
   2591 
   2592 character(len=48), parameter    :: sub_name = 'fm_util_set_value_logical'
   2593 
   2594 !
   2595 !       Local variables
   2596 !
   2597 
   2598 character(len=256)              :: error_header
   2599 character(len=256)              :: warn_header
   2600 character(len=256)              :: note_header
   2601 character(len=128)              :: caller_str
   2602 character(len=32)               :: str_error
   2603 integer                         :: field_index
   2604 logical                         :: no_overwrite_use
   2605 integer                         :: field_length
   2606 character(len=fm_path_name_len) :: good_name_list_use
   2607 logical                         :: create
   2608 logical                         :: add_name
   2609 
   2610 !
   2611 !       set the caller string and headers
   2612 !
   2613 
   2614 if (present(caller)) then  !{
   2615   caller_str = '[' // trim(caller) // ']'

Page 77          Source Listing                  FM_UTIL_SET_VALUE_LOGICAL
2021-06-01 08:55                                 fm_util.F90

   2616 else  !}{
   2617   caller_str = fm_util_default_caller
   2618 endif  !}
   2619 
   2620 error_header = '==>Error from ' // trim(mod_name) //   &
   2621                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2622 warn_header = '==>Warning from ' // trim(mod_name) //  &
   2623               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2624 note_header = '==>Note from ' // trim(mod_name) //     &
   2625               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2626 
   2627 !
   2628 !       check that a name is given (fatal if not)
   2629 !
   2630 
   2631 if (name .eq. ' ') then  !{
   2632   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   2633 endif  !}
   2634 
   2635 !
   2636 !       check that append and index are not both given
   2637 !
   2638 
   2639 if (present(index) .and. present(append)) then  !{
   2640   call mpp_error(FATAL, trim(error_header) // ' Append and index both given as arguments')
   2641 endif  !}
   2642 
   2643 !
   2644 !       check for whether to overwrite existing values
   2645 !
   2646 
   2647 if (present(no_overwrite)) then  !{
   2648   no_overwrite_use = no_overwrite
   2649 else  !}{
   2650   no_overwrite_use = default_no_overwrite
   2651 endif  !}
   2652 
   2653 !
   2654 !       check for whether to save the name in a list
   2655 !
   2656 
   2657 if (present(good_name_list)) then  !{
   2658   good_name_list_use = good_name_list
   2659 else  !}{
   2660   good_name_list_use = default_good_name_list
   2661 endif  !}
   2662 
   2663 if (present(no_create)) then  !{
   2664   create = .not. no_create
   2665   if (no_create .and. (present(append) .or. present(index))) then  !{
   2666     call mpp_error(FATAL, trim(error_header) // ' append or index are present when no_create is true for ' // trim(name))
   2667   endif  !}
   2668 else  !}{
   2669   create = .true.
   2670 endif  !}
   2671 
   2672 if (present(index)) then  !{

Page 78          Source Listing                  FM_UTIL_SET_VALUE_LOGICAL
2021-06-01 08:55                                 fm_util.F90

   2673   if (fm_exists(name)) then  !{
   2674     field_length = fm_get_length(name)
   2675     if (field_length .lt. 0) then  !{
   2676       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   2677     endif  !}
   2678     if (.not. (no_overwrite_use .and. field_length .ge. index)) then  !{
   2679       field_index = fm_new_value(name, value, index = index)
   2680       if (field_index .le. 0) then  !{
   2681         write (str_error,*) ' with index = ', index
   2682         call mpp_error(FATAL, trim(error_header) // ' Problem overwriting ' // trim(name) // trim(str_error))
   2683       endif  !}
   2684     endif  !}
   2685   else  !}{
   2686     field_index = fm_new_value(name, value, index = index)
   2687     if (field_index .le. 0) then  !{
   2688       write (str_error,*) ' with index = ', index
   2689       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2690     endif  !}
   2691   endif  !}
   2692 elseif (present(append)) then  !}{
   2693   field_index = fm_new_value(name, value, append = append)
   2694   if (field_index .le. 0) then  !{
   2695     write (str_error,*) ' with append = ', append
   2696     call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2697   endif  !}
   2698 else  !}{
   2699   if (fm_exists(name)) then  !{
   2700     if (.not. no_overwrite_use) then  !{
   2701       field_index = fm_new_value(name, value)
   2702       if (field_index .le. 0) then  !{
   2703         call mpp_error(FATAL, trim(error_header) // ' Problem overwriting ' // trim(name))
   2704       endif  !}
   2705     endif  !}
   2706   elseif (create) then  !}{
   2707     field_index = fm_new_value(name, value)
   2708     if (field_index .le. 0) then  !{
   2709       call mpp_error(FATAL, trim(error_header) // ' Problem creating ' // trim(name))
   2710     endif  !}
   2711   endif  !}
   2712 endif  !}
   2713 
   2714 !
   2715 !       Add the variable name to the list of good names, to be used
   2716 !       later for a consistency check, unless the field did not exist and we did not create it
   2717 !
   2718 
   2719 if (good_name_list_use .ne. ' ') then  !{
   2720   if (fm_exists(good_name_list_use)) then  !{
   2721     add_name = fm_util_get_index_string(good_name_list_use, name,               &
   2722        caller = caller_str) .le. 0              ! true if name does not exist in string array
   2723   else  !}{
   2724     add_name = .true.                           ! always add to new list
   2725   endif  !}
   2726   if (add_name .and. fm_exists(name)) then  !{
   2727     if (fm_new_value(good_name_list_use, name, append = .true., create = .true.) .le. 0) then  !{
   2728       call mpp_error(FATAL, trim(error_header) //                               &
   2729            ' Could not add ' // trim(name) // ' to "' // trim(good_name_list_use) // '" list')

Page 79          Source Listing                  FM_UTIL_SET_VALUE_LOGICAL
2021-06-01 08:55                                 fm_util.F90

   2730     endif  !}
   2731   endif  !}
   2732 endif  !}
   2733 
   2734 return
   2735 
   2736 end subroutine fm_util_set_value_logical  !}


ENTRY POINTS

  Name                                                 
                                                       
 fm_util_mod_mp_fm_util_set_value_logical_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD_NAME                   Local  2608     L(4)            4           scalar                    2721,2724,2726                    
 APPEND                     Dummy  2570     L(4)            4           scalar   ARG,IN           2639,2665,2692,2693,2695          
 CALLER                     Dummy  2570     CHAR                        scalar   ARG,IN           2614,2615                         
 CALLER_STR                 Local  2601     CHAR            128         scalar                    2615,2617,2621,2623,2625,2722     
 CREATE                     Local  2607     L(4)            4           scalar                    2664,2669,2706                    
 ERROR_HEADER               Local  2598     CHAR            256         scalar                    2620,2632,2640,2666,2676,2682,2689
                                                                                                  ,2696,2703,2709,2728              
 FIELD_INDEX                Local  2603     I(4)            4           scalar                    2679,2680,2686,2687,2693,2694,2701
                                                                                                  ,2702,2707,2708                   
 FIELD_LENGTH               Local  2605     I(4)            4           scalar                    2674,2675,2678                    
 FM_UTIL_SET_VALUE_LOGICAL  Subr   2570                                                                                             
 GOOD_NAME_LIST             Dummy  2571     CHAR                        scalar   ARG,IN           2657,2658                         
 GOOD_NAME_LIST_USE         Local  2606     CHAR            512         scalar                    2658,2660,2719,2720,2721,2727,2729
 INDEX                      Dummy  2570     I(4)            4           scalar   ARG,IN           2639,2665,2672,2678,2679,2681,2686
                                                                                                  ,2688                             
 NAME                       Dummy  2570     CHAR                        scalar   ARG,IN           2631,2666,2673,2674,2676,2679,2682
                                                                                                  ,2686,2689,2693,2696,2699,2701,270
                                                                                                  3,2707,2709,2721,2726,2727,2729   
 NOTE_HEADER                Local  2600     CHAR            256         scalar                    2624                              
 NO_CREATE                  Dummy  2570     L(4)            4           scalar   ARG,IN           2663,2664,2665                    
 NO_OVERWRITE               Dummy  2571     L(4)            4           scalar   ARG,IN           2647,2648                         
 NO_OVERWRITE_USE           Local  2604     L(4)            4           scalar                    2648,2650,2678,2700               
 PRESENT                    Func   2614                                 scalar                    2614,2639,2647,2657,2663,2665,2672
                                                                                                  ,2692                             
 STR_ERROR                  Local  2602     CHAR            32          scalar                    2681,2682,2688,2689,2695,2696     
 SUB_NAME                   Param  2592     CHAR            48          scalar                    2621,2623,2625                    
 TRIM                       Func   2615                                 scalar                    2615,2620,2621,2622,2623,2624,2625
                                                                                                  ,2632,2640,2666,2676,2682,2689,269
                                                                                                  6,2703,2709,2728,2729             
 VALUE                      Dummy  2570     L(4)            4           scalar   ARG,IN           2679,2686,2693,2701,2707          
 WARN_HEADER                Local  2599     CHAR            256         scalar                    2622                              

Page 80          Source Listing                  FM_UTIL_SET_VALUE_LOGICAL
2021-06-01 08:55                                 fm_util.F90

   2737 ! </SUBROUTINE> NAME="fm_util_set_value_logical"
   2738 
   2739 
   2740 !#######################################################################
   2741 ! <SUBROUTINE NAME="fm_util_set_value_real">
   2742 !
   2743 ! <DESCRIPTION>
   2744 ! Set a real value in the Field Manager tree.
   2745 ! </DESCRIPTION>
   2746 !
   2747 
   2748 subroutine fm_util_set_value_real(name, value, caller, index, append, no_create,        &
   2749      no_overwrite, good_name_list)  !{
   2750 
   2751 implicit none
   2752 
   2753 !
   2754 !       arguments
   2755 !
   2756 
   2757 character(len=*), intent(in)            :: name
   2758 real, intent(in)                        :: value
   2759 character(len=*), intent(in), optional  :: caller
   2760 integer, intent(in), optional           :: index
   2761 logical, intent(in), optional           :: append
   2762 logical, intent(in), optional           :: no_create
   2763 logical, intent(in), optional           :: no_overwrite
   2764 character(len=*), intent(in), optional  :: good_name_list
   2765 
   2766 !
   2767 !       Local parameters
   2768 !
   2769 
   2770 character(len=48), parameter    :: sub_name = 'fm_util_set_value_real'
   2771 
   2772 !
   2773 !       Local variables
   2774 !
   2775 
   2776 character(len=256)              :: error_header
   2777 character(len=256)              :: warn_header
   2778 character(len=256)              :: note_header
   2779 character(len=128)              :: caller_str
   2780 character(len=32)               :: str_error
   2781 integer                         :: field_index
   2782 logical                         :: no_overwrite_use
   2783 integer                         :: field_length
   2784 character(len=fm_path_name_len) :: good_name_list_use
   2785 logical                         :: create
   2786 logical                         :: add_name
   2787 
   2788 !
   2789 !       set the caller string and headers
   2790 !
   2791 
   2792 if (present(caller)) then  !{
   2793   caller_str = '[' // trim(caller) // ']'

Page 81          Source Listing                  FM_UTIL_SET_VALUE_REAL
2021-06-01 08:55                                 fm_util.F90

   2794 else  !}{
   2795   caller_str = fm_util_default_caller
   2796 endif  !}
   2797 
   2798 error_header = '==>Error from ' // trim(mod_name) //   &
   2799                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2800 warn_header = '==>Warning from ' // trim(mod_name) //  &
   2801               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2802 note_header = '==>Note from ' // trim(mod_name) //     &
   2803               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2804 
   2805 !
   2806 !       check that a name is given (fatal if not)
   2807 !
   2808 
   2809 if (name .eq. ' ') then  !{
   2810   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   2811 endif  !}
   2812 
   2813 !
   2814 !       check that append and index are not both given
   2815 !
   2816 
   2817 if (present(index) .and. present(append)) then  !{
   2818   call mpp_error(FATAL, trim(error_header) // ' Append and index both given as arguments')
   2819 endif  !}
   2820 
   2821 !
   2822 !       check for whether to overwrite existing values
   2823 !
   2824 
   2825 if (present(no_overwrite)) then  !{
   2826   no_overwrite_use = no_overwrite
   2827 else  !}{
   2828   no_overwrite_use = default_no_overwrite
   2829 endif  !}
   2830 
   2831 !
   2832 !       check for whether to save the name in a list
   2833 !
   2834 
   2835 if (present(good_name_list)) then  !{
   2836   good_name_list_use = good_name_list
   2837 else  !}{
   2838   good_name_list_use = default_good_name_list
   2839 endif  !}
   2840 
   2841 if (present(no_create)) then  !{
   2842   create = .not. no_create
   2843   if (no_create .and. (present(append) .or. present(index))) then  !{
   2844     call mpp_error(FATAL, trim(error_header) // ' append or index are present when no_create is true for ' // trim(name))
   2845   endif  !}
   2846 else  !}{
   2847   create = .true.
   2848 endif  !}
   2849 
   2850 if (present(index)) then  !{

Page 82          Source Listing                  FM_UTIL_SET_VALUE_REAL
2021-06-01 08:55                                 fm_util.F90

   2851   if (fm_exists(name)) then  !{
   2852     field_length = fm_get_length(name)
   2853     if (field_length .lt. 0) then  !{
   2854       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   2855     endif  !}
   2856     if (.not. (no_overwrite_use .and. field_length .ge. index)) then  !{
   2857       field_index = fm_new_value(name, value, index = index)
   2858       if (field_index .le. 0) then  !{
   2859         write (str_error,*) ' with index = ', index
   2860         call mpp_error(FATAL, trim(error_header) // ' Problem overwriting ' // trim(name) // trim(str_error))
   2861       endif  !}
   2862     endif  !}
   2863   else  !}{
   2864     field_index = fm_new_value(name, value, index = index)
   2865     if (field_index .le. 0) then  !{
   2866       write (str_error,*) ' with index = ', index
   2867       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2868     endif  !}
   2869   endif  !}
   2870 elseif (present(append)) then  !}{
   2871   field_index = fm_new_value(name, value, append = append)
   2872   if (field_index .le. 0) then  !{
   2873     write (str_error,*) ' with append = ', append
   2874     call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   2875   endif  !}
   2876 else  !}{
   2877   if (fm_exists(name)) then  !{
   2878     if (.not. no_overwrite_use) then  !{
   2879       field_index = fm_new_value(name, value)
   2880       if (field_index .le. 0) then  !{
   2881         call mpp_error(FATAL, trim(error_header) // ' Problem overwriting ' // trim(name))
   2882       endif  !}
   2883     endif  !}
   2884   elseif (create) then  !}{
   2885     field_index = fm_new_value(name, value)
   2886     if (field_index .le. 0) then  !{
   2887       call mpp_error(FATAL, trim(error_header) // ' Problem creating ' // trim(name))
   2888     endif  !}
   2889   endif  !}
   2890 endif  !}
   2891 
   2892 !
   2893 !       Add the variable name to the list of good names, to be used
   2894 !       later for a consistency check, unless the field did not exist and we did not create it
   2895 !
   2896 
   2897 if (good_name_list_use .ne. ' ') then  !{
   2898   if (fm_exists(good_name_list_use)) then  !{
   2899     add_name = fm_util_get_index_string(good_name_list_use, name,               &
   2900        caller = caller_str) .le. 0              ! true if name does not exist in string array
   2901   else  !}{
   2902     add_name = .true.                           ! always add to new list
   2903   endif  !}
   2904   if (add_name .and. fm_exists(name)) then  !{
   2905     if (fm_new_value(good_name_list_use, name, append = .true., create = .true.) .le. 0) then  !{
   2906       call mpp_error(FATAL, trim(error_header) //                               &
   2907            ' Could not add ' // trim(name) // ' to "' // trim(good_name_list_use) // '" list')

Page 83          Source Listing                  FM_UTIL_SET_VALUE_REAL
2021-06-01 08:55                                 fm_util.F90

   2908     endif  !}
   2909   endif  !}
   2910 endif  !}
   2911 
   2912 return
   2913 
   2914 end subroutine fm_util_set_value_real  !}


ENTRY POINTS

  Name                                              
                                                    
 fm_util_mod_mp_fm_util_set_value_real_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD_NAME                   Local  2786     L(4)            4           scalar                    2899,2902,2904                    
 APPEND                     Dummy  2748     L(4)            4           scalar   ARG,IN           2817,2843,2870,2871,2873          
 CALLER                     Dummy  2748     CHAR                        scalar   ARG,IN           2792,2793                         
 CALLER_STR                 Local  2779     CHAR            128         scalar                    2793,2795,2799,2801,2803,2900     
 CREATE                     Local  2785     L(4)            4           scalar                    2842,2847,2884                    
 ERROR_HEADER               Local  2776     CHAR            256         scalar                    2798,2810,2818,2844,2854,2860,2867
                                                                                                  ,2874,2881,2887,2906              
 FIELD_INDEX                Local  2781     I(4)            4           scalar                    2857,2858,2864,2865,2871,2872,2879
                                                                                                  ,2880,2885,2886                   
 FIELD_LENGTH               Local  2783     I(4)            4           scalar                    2852,2853,2856                    
 FM_UTIL_SET_VALUE_REAL     Subr   2748                                                                                             
 GOOD_NAME_LIST             Dummy  2749     CHAR                        scalar   ARG,IN           2835,2836                         
 GOOD_NAME_LIST_USE         Local  2784     CHAR            512         scalar                    2836,2838,2897,2898,2899,2905,2907
 INDEX                      Dummy  2748     I(4)            4           scalar   ARG,IN           2817,2843,2850,2856,2857,2859,2864
                                                                                                  ,2866                             
 NAME                       Dummy  2748     CHAR                        scalar   ARG,IN           2809,2844,2851,2852,2854,2857,2860
                                                                                                  ,2864,2867,2871,2874,2877,2879,288
                                                                                                  1,2885,2887,2899,2904,2905,2907   
 NOTE_HEADER                Local  2778     CHAR            256         scalar                    2802                              
 NO_CREATE                  Dummy  2748     L(4)            4           scalar   ARG,IN           2841,2842,2843                    
 NO_OVERWRITE               Dummy  2749     L(4)            4           scalar   ARG,IN           2825,2826                         
 NO_OVERWRITE_USE           Local  2782     L(4)            4           scalar                    2826,2828,2856,2878               
 PRESENT                    Func   2792                                 scalar                    2792,2817,2825,2835,2841,2843,2850
                                                                                                  ,2870                             
 STR_ERROR                  Local  2780     CHAR            32          scalar                    2859,2860,2866,2867,2873,2874     
 SUB_NAME                   Param  2770     CHAR            48          scalar                    2799,2801,2803                    
 TRIM                       Func   2793                                 scalar                    2793,2798,2799,2800,2801,2802,2803
                                                                                                  ,2810,2818,2844,2854,2860,2867,287
                                                                                                  4,2881,2887,2906,2907             
 VALUE                      Dummy  2748     R(8)            8           scalar   ARG,IN           2857,2864,2871,2879,2885          
 WARN_HEADER                Local  2777     CHAR            256         scalar                    2800                              

Page 84          Source Listing                  FM_UTIL_SET_VALUE_REAL
2021-06-01 08:55                                 fm_util.F90

   2915 ! </SUBROUTINE> NAME="fm_util_set_value_real"
   2916 
   2917 
   2918 !#######################################################################
   2919 ! <SUBROUTINE NAME="fm_util_set_value_string">
   2920 !
   2921 ! <DESCRIPTION>
   2922 ! Set a string value in the Field Manager tree.
   2923 ! </DESCRIPTION>
   2924 !
   2925 
   2926 subroutine fm_util_set_value_string(name, value, caller, index, append, no_create,        &
   2927      no_overwrite, good_name_list)  !{
   2928 
   2929 implicit none
   2930 
   2931 !
   2932 !       arguments
   2933 !
   2934 
   2935 character(len=*), intent(in)            :: name
   2936 character(len=*), intent(in)            :: value
   2937 character(len=*), intent(in), optional  :: caller
   2938 integer, intent(in), optional           :: index
   2939 logical, intent(in), optional           :: append
   2940 logical, intent(in), optional           :: no_create
   2941 logical, intent(in), optional           :: no_overwrite
   2942 character(len=*), intent(in), optional  :: good_name_list
   2943 
   2944 !
   2945 !       Local parameters
   2946 !
   2947 
   2948 character(len=48), parameter    :: sub_name = 'fm_util_set_value_string'
   2949 
   2950 !
   2951 !       Local variables
   2952 !
   2953 
   2954 character(len=256)              :: error_header
   2955 character(len=256)              :: warn_header
   2956 character(len=256)              :: note_header
   2957 character(len=128)              :: caller_str
   2958 character(len=32)               :: str_error
   2959 integer                         :: field_index
   2960 logical                         :: no_overwrite_use
   2961 integer                         :: field_length
   2962 character(len=fm_path_name_len) :: good_name_list_use
   2963 logical                         :: create
   2964 logical                         :: add_name
   2965 
   2966 !
   2967 !       set the caller string and headers
   2968 !
   2969 
   2970 if (present(caller)) then  !{
   2971   caller_str = '[' // trim(caller) // ']'

Page 85          Source Listing                  FM_UTIL_SET_VALUE_STRING
2021-06-01 08:55                                 fm_util.F90

   2972 else  !}{
   2973   caller_str = fm_util_default_caller
   2974 endif  !}
   2975 
   2976 error_header = '==>Error from ' // trim(mod_name) //   &
   2977                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2978 warn_header = '==>Warning from ' // trim(mod_name) //  &
   2979               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2980 note_header = '==>Note from ' // trim(mod_name) //     &
   2981               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   2982 
   2983 !
   2984 !       check that a name is given (fatal if not)
   2985 !
   2986 
   2987 if (name .eq. ' ') then  !{
   2988   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   2989 endif  !}
   2990 
   2991 !
   2992 !       check that append and index are not both given
   2993 !
   2994 
   2995 if (present(index) .and. present(append)) then  !{
   2996   call mpp_error(FATAL, trim(error_header) // ' Append and index both given as arguments')
   2997 endif  !}
   2998 
   2999 !
   3000 !       check for whether to overwrite existing values
   3001 !
   3002 
   3003 if (present(no_overwrite)) then  !{
   3004   no_overwrite_use = no_overwrite
   3005 else  !}{
   3006   no_overwrite_use = default_no_overwrite
   3007 endif  !}
   3008 
   3009 !
   3010 !       check for whether to save the name in a list
   3011 !
   3012 
   3013 if (present(good_name_list)) then  !{
   3014   good_name_list_use = good_name_list
   3015 else  !}{
   3016   good_name_list_use = default_good_name_list
   3017 endif  !}
   3018 
   3019 if (present(no_create)) then  !{
   3020   create = .not. no_create
   3021   if (no_create .and. (present(append) .or. present(index))) then  !{
   3022     call mpp_error(FATAL, trim(error_header) // ' append or index are present when no_create is true for ' // trim(name))
   3023   endif  !}
   3024 else  !}{
   3025   create = .true.
   3026 endif  !}
   3027 
   3028 if (present(index)) then  !{

Page 86          Source Listing                  FM_UTIL_SET_VALUE_STRING
2021-06-01 08:55                                 fm_util.F90

   3029   if (fm_exists(name)) then  !{
   3030     field_length = fm_get_length(name)
   3031     if (field_length .lt. 0) then  !{
   3032       call mpp_error(FATAL, trim(error_header) // ' Problem getting length of ' // trim(name))
   3033     endif  !}
   3034     if (.not. (no_overwrite_use .and. field_length .ge. index)) then  !{
   3035       field_index = fm_new_value(name, value, index = index)
   3036       if (field_index .le. 0) then  !{
   3037         write (str_error,*) ' with index = ', index
   3038         call mpp_error(FATAL, trim(error_header) // ' Problem overwriting ' // trim(name) // trim(str_error))
   3039       endif  !}
   3040     endif  !}
   3041   else  !}{
   3042     field_index = fm_new_value(name, value, index = index)
   3043     if (field_index .le. 0) then  !{
   3044       write (str_error,*) ' with index = ', index
   3045       call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   3046     endif  !}
   3047   endif  !}
   3048 elseif (present(append)) then  !}{
   3049   field_index = fm_new_value(name, value, append = append)
   3050   if (field_index .le. 0) then  !{
   3051     write (str_error,*) ' with append = ', append
   3052     call mpp_error(FATAL, trim(error_header) // ' Problem setting ' // trim(name) // trim(str_error))
   3053   endif  !}
   3054 else  !}{
   3055   if (fm_exists(name)) then  !{
   3056     if (.not. no_overwrite_use) then  !{
   3057       field_index = fm_new_value(name, value)
   3058       if (field_index .le. 0) then  !{
   3059         call mpp_error(FATAL, trim(error_header) // ' Problem overwriting ' // trim(name))
   3060       endif  !}
   3061     endif  !}
   3062   elseif (create) then  !}{
   3063     field_index = fm_new_value(name, value)
   3064     if (field_index .le. 0) then  !{
   3065       call mpp_error(FATAL, trim(error_header) // ' Problem creating ' // trim(name))
   3066     endif  !}
   3067   endif  !}
   3068 endif  !}
   3069 
   3070 !
   3071 !       Add the variable name to the list of good names, to be used
   3072 !       later for a consistency check, unless the field did not exist and we did not create it
   3073 !
   3074 
   3075 if (good_name_list_use .ne. ' ') then  !{
   3076   if (fm_exists(good_name_list_use)) then  !{
   3077     add_name = fm_util_get_index_string(good_name_list_use, name,               &
   3078        caller = caller_str) .le. 0              ! true if name does not exist in string array
   3079   else  !}{
   3080     add_name = .true.                           ! always add to new list
   3081   endif  !}
   3082   if (add_name .and. fm_exists(name)) then  !{
   3083     if (fm_new_value(good_name_list_use, name, append = .true., create = .true.) .le. 0) then  !{
   3084       call mpp_error(FATAL, trim(error_header) //                               &
   3085            ' Could not add ' // trim(name) // ' to "' // trim(good_name_list_use) // '" list')

Page 87          Source Listing                  FM_UTIL_SET_VALUE_STRING
2021-06-01 08:55                                 fm_util.F90

   3086     endif  !}
   3087   endif  !}
   3088 endif  !}
   3089 
   3090 return
   3091 
   3092 end subroutine fm_util_set_value_string  !}


ENTRY POINTS

  Name                                                
                                                      
 fm_util_mod_mp_fm_util_set_value_string_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD_NAME                   Local  2964     L(4)            4           scalar                    3077,3080,3082                    
 APPEND                     Dummy  2926     L(4)            4           scalar   ARG,IN           2995,3021,3048,3049,3051          
 CALLER                     Dummy  2926     CHAR                        scalar   ARG,IN           2970,2971                         
 CALLER_STR                 Local  2957     CHAR            128         scalar                    2971,2973,2977,2979,2981,3078     
 CREATE                     Local  2963     L(4)            4           scalar                    3020,3025,3062                    
 ERROR_HEADER               Local  2954     CHAR            256         scalar                    2976,2988,2996,3022,3032,3038,3045
                                                                                                  ,3052,3059,3065,3084              
 FIELD_INDEX                Local  2959     I(4)            4           scalar                    3035,3036,3042,3043,3049,3050,3057
                                                                                                  ,3058,3063,3064                   
 FIELD_LENGTH               Local  2961     I(4)            4           scalar                    3030,3031,3034                    
 FM_UTIL_SET_VALUE_STRING   Subr   2926                                                                                             
 GOOD_NAME_LIST             Dummy  2927     CHAR                        scalar   ARG,IN           3013,3014                         
 GOOD_NAME_LIST_USE         Local  2962     CHAR            512         scalar                    3014,3016,3075,3076,3077,3083,3085
 INDEX                      Dummy  2926     I(4)            4           scalar   ARG,IN           2995,3021,3028,3034,3035,3037,3042
                                                                                                  ,3044                             
 NAME                       Dummy  2926     CHAR                        scalar   ARG,IN           2987,3022,3029,3030,3032,3035,3038
                                                                                                  ,3042,3045,3049,3052,3055,3057,305
                                                                                                  9,3063,3065,3077,3082,3083,3085   
 NOTE_HEADER                Local  2956     CHAR            256         scalar                    2980                              
 NO_CREATE                  Dummy  2926     L(4)            4           scalar   ARG,IN           3019,3020,3021                    
 NO_OVERWRITE               Dummy  2927     L(4)            4           scalar   ARG,IN           3003,3004                         
 NO_OVERWRITE_USE           Local  2960     L(4)            4           scalar                    3004,3006,3034,3056               
 PRESENT                    Func   2970                                 scalar                    2970,2995,3003,3013,3019,3021,3028
                                                                                                  ,3048                             
 STR_ERROR                  Local  2958     CHAR            32          scalar                    3037,3038,3044,3045,3051,3052     
 SUB_NAME                   Param  2948     CHAR            48          scalar                    2977,2979,2981                    
 TRIM                       Func   2971                                 scalar                    2971,2976,2977,2978,2979,2980,2981
                                                                                                  ,2988,2996,3022,3032,3038,3045,305
                                                                                                  2,3059,3065,3084,3085             
 VALUE                      Dummy  2926     CHAR                        scalar   ARG,IN           3035,3042,3049,3057,3063          
 WARN_HEADER                Local  2955     CHAR            256         scalar                    2978                              

Page 88          Source Listing                  FM_UTIL_SET_VALUE_STRING
2021-06-01 08:55                                 fm_util.F90

   3093 ! </SUBROUTINE> NAME="fm_util_set_value_string"
   3094 
   3095 
   3096 !#######################################################################
   3097 ! <SUBROUTINE NAME="fm_util_start_namelist">
   3098 !
   3099 ! <DESCRIPTION>
   3100 ! Start processing a namelist
   3101 ! </DESCRIPTION>
   3102 !
   3103 subroutine fm_util_start_namelist(path, name, caller, no_overwrite, check)  !{
   3104 
   3105 implicit none
   3106 
   3107 !
   3108 !       arguments
   3109 !
   3110 
   3111 character(len=*), intent(in)            :: path
   3112 character(len=*), intent(in)            :: name
   3113 character(len=*), intent(in), optional  :: caller
   3114 logical,          intent(in), optional  :: no_overwrite
   3115 logical,          intent(in), optional  :: check
   3116 
   3117 !
   3118 !       Local parameters
   3119 !
   3120 
   3121 character(len=48), parameter  :: sub_name = 'fm_util_start_namelist'
   3122 
   3123 !
   3124 !       Local variables
   3125 !
   3126 
   3127 integer                         :: namelist_index
   3128 character(len=fm_path_name_len) :: path_name
   3129 character(len=256)              :: error_header
   3130 character(len=256)              :: warn_header
   3131 character(len=256)              :: note_header
   3132 character(len=128)              :: caller_str
   3133 integer                         :: out_unit
   3134 
   3135 out_unit = stdout()
   3136 
   3137 !
   3138 !       set the caller string and headers
   3139 !
   3140 
   3141 if (present(caller)) then  !{
   3142   caller_str = '[' // trim(caller) // ']'
   3143 else  !}{
   3144   caller_str = fm_util_default_caller
   3145 endif  !}
   3146 
   3147 error_header = '==>Error from ' // trim(mod_name) //   &
   3148                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   3149 warn_header = '==>Warning from ' // trim(mod_name) //  &

Page 89          Source Listing                  FM_UTIL_START_NAMELIST
2021-06-01 08:55                                 fm_util.F90

   3150               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   3151 note_header = '==>Note from ' // trim(mod_name) //     &
   3152               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   3153 
   3154 !
   3155 !       check that a name is given (fatal if not)
   3156 !
   3157 
   3158 if (name .eq. ' ') then  !{
   3159   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   3160 endif  !}
   3161 
   3162 !
   3163 !       Concatenate the path and name
   3164 !
   3165 
   3166 if (path .eq. ' ') then  !{
   3167   path_name = name
   3168 else  !}{
   3169   path_name = trim(path) // '/' // name
   3170 endif  !}
   3171 save_path = path
   3172 save_name = name
   3173 
   3174 !
   3175 !       set the default caller string, if desired
   3176 !
   3177 
   3178 if (present(caller)) then  !{
   3179   call fm_util_set_caller(caller)
   3180 else  !}{
   3181   call fm_util_reset_caller
   3182 endif  !}
   3183 
   3184 !
   3185 !       set the default no_overwrite flag, if desired
   3186 !
   3187 
   3188 if (present(no_overwrite)) then  !{
   3189   call fm_util_set_no_overwrite(no_overwrite)
   3190 else  !}{
   3191   call fm_util_reset_no_overwrite
   3192 endif  !}
   3193 
   3194 !
   3195 !       set the default good_name_list string, if desired
   3196 !
   3197 
   3198 if (present(check)) then  !{
   3199   if (check) then  !{
   3200     call fm_util_set_good_name_list('/ocean_mod/GOOD/namelists/' // trim(path_name) // '/good_list')
   3201   else  !}{
   3202     call fm_util_reset_good_name_list
   3203   endif  !}
   3204 else  !}{
   3205   call fm_util_reset_good_name_list
   3206 endif  !}

Page 90          Source Listing                  FM_UTIL_START_NAMELIST
2021-06-01 08:55                                 fm_util.F90

   3207 
   3208 !
   3209 !       Process the namelist
   3210 !
   3211 
   3212 write (out_unit,*)
   3213 write (out_unit,*) trim(note_header), ' Processing namelist ', trim(path_name)
   3214 
   3215 !
   3216 !       Check whether the namelist already exists. If so, then use that one
   3217 !
   3218 
   3219 namelist_index = fm_get_index('/ocean_mod/namelists/' // trim(path_name))
   3220 if (namelist_index .gt. 0) then  !{
   3221 
   3222 !write (out_unit,*) trim(note_header), ' Namelist already set with index ', namelist_index
   3223 
   3224 else  !}{
   3225 
   3226 !
   3227 !       Set a new namelist and get its index
   3228 !
   3229 
   3230   namelist_index = fm_new_list('/ocean_mod/namelists/' // trim(path_name), create = .true.)
   3231   if (namelist_index .le. 0) then  !{
   3232     call mpp_error(FATAL, trim(error_header) // ' Could not set namelist ' // trim(path_name))
   3233   endif  !}
   3234 
   3235 endif  !}
   3236 
   3237 !
   3238 !       Add the namelist name to the list of good namelists, to be used
   3239 !       later for a consistency check
   3240 !
   3241 
   3242 if (fm_new_value('/ocean_mod/GOOD/namelists/' // trim(path) // '/good_values',    &
   3243                  name, append = .true., create = .true.) .le. 0) then  !{
   3244   call mpp_error(FATAL, trim(error_header) //                           &
   3245        ' Could not add ' // trim(name) // ' to "' // trim(path) // '/good_values" list')
   3246 endif  !}
   3247 
   3248 !
   3249 !       Change to the new namelist, first saving the current list
   3250 !
   3251 
   3252 save_current_list = fm_get_current_list()
   3253 if (save_current_list .eq. ' ') then  !{
   3254   call mpp_error(FATAL, trim(error_header) // ' Could not get the current list')
   3255 endif  !}
   3256 
   3257 if (.not. fm_change_list('/ocean_mod/namelists/' // trim(path_name))) then  !{
   3258   call mpp_error(FATAL, trim(error_header) // ' Could not change to the namelist ' // trim(path_name))
   3259 endif  !}
   3260 
   3261 return
   3262 
   3263 end subroutine fm_util_start_namelist  !}

Page 91          Source Listing                  FM_UTIL_START_NAMELIST
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                              
                                                    
 fm_util_mod_mp_fm_util_start_namelist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALLER                     Dummy  3103     CHAR                        scalar   ARG,IN           3141,3142,3178,3179               
 CALLER_STR                 Local  3132     CHAR            128         scalar                    3142,3144,3148,3150,3152          
 CHECK                      Dummy  3103     L(4)            4           scalar   ARG,IN           3198,3199                         
 ERROR_HEADER               Local  3129     CHAR            256         scalar                    3147,3159,3232,3244,3254,3258     
 FM_CHANGE_LIST             Func   3257     L(4)            4           scalar   PRIV             45,3257,3377                      
 FM_GET_CURRENT_LIST        Func   3252     CHAR            512         scalar   PRIV             45,3252                           
 FM_NEW_LIST                Func   3230     I(4)            4           scalar   PRIV             45,3230                           
 FM_UTIL_RESET_CALLER       Subr   3181                                                           59,3181,3387                      
 FM_UTIL_RESET_GOOD_NAME_LI                                                                                                         
 ST                         Subr   3202                                                           63,3202,3205,3399                 
 FM_UTIL_RESET_NO_OVERWRITE Subr   3191                                                           61,3191,3393                      
 FM_UTIL_SET_CALLER         Subr   3179                                                           58,3179                           
 FM_UTIL_SET_GOOD_NAME_LIST Subr   3200                                                           62,3200                           
 FM_UTIL_SET_NO_OVERWRITE   Subr   3189                                                           60,3189                           
 FM_UTIL_START_NAMELIST     Subr   3103                                                                                             
 NAME                       Dummy  3103     CHAR                        scalar   ARG,IN           3158,3167,3169,3172,3243,3245     
 NAMELIST_INDEX             Local  3127     I(4)            4           scalar                    3219,3220,3230,3231               
 NOTE_HEADER                Local  3131     CHAR            256         scalar                    3151,3213                         
 NO_OVERWRITE               Dummy  3103     L(4)            4           scalar   ARG,IN           3188,3189                         
 OUT_UNIT                   Local  3133     I(4)            4           scalar                    3135,3212,3213                    
 PATH                       Dummy  3103     CHAR                        scalar   ARG,IN           3166,3169,3171,3242,3245          
 PATH_NAME                  Local  3128     CHAR            512         scalar                    3167,3169,3200,3213,3219,3230,3232
                                                                                                  ,3257,3258                        
 PRESENT                    Func   3141                                 scalar                    3141,3178,3188,3198               
 SAVE_CURRENT_LIST          Local  3252     CHAR            512         scalar                    3252,3253,3376,3377,3378,3381     
 SAVE_NAME                  Local  3172     CHAR            512         scalar                    3172,3336,3337,3350               
 SAVE_PATH                  Local  3171     CHAR            512         scalar                    3171,3334,3335,3349               
 SUB_NAME                   Param  3121     CHAR            48          scalar                    3148,3150,3152                    
 TRIM                       Func   3142                                 scalar                    3142,3147,3148,3149,3150,3151,3152
                                                                                                  ,3159,3169,3200,3213,3219,3230,323
                                                                                                  2,3242,3244,3245,3254,3257,3258   
 WARN_HEADER                Local  3130     CHAR            256         scalar                    3149                              

Page 92          Source Listing                  FM_UTIL_START_NAMELIST
2021-06-01 08:55                                 fm_util.F90

   3264 ! </SUBROUTINE> NAME="fm_util_start_namelist"
   3265 
   3266 
   3267 !#######################################################################
   3268 ! <SUBROUTINE NAME="fm_util_end_namelist">
   3269 !
   3270 ! <DESCRIPTION>
   3271 ! Finish up processing a namelist
   3272 ! </DESCRIPTION>
   3273 !
   3274 subroutine fm_util_end_namelist(path, name, caller, check)  !{
   3275 
   3276 implicit none
   3277 
   3278 !
   3279 !       arguments
   3280 !
   3281 
   3282 character(len=*), intent(in)            :: path
   3283 character(len=*), intent(in)            :: name
   3284 character(len=*), intent(in), optional  :: caller
   3285 logical,          intent(in), optional  :: check
   3286 
   3287 !
   3288 !       Local parameters
   3289 !
   3290 
   3291 character(len=48), parameter  :: sub_name = 'fm_util_end_namelist'
   3292 
   3293 !
   3294 !       Local variables
   3295 !
   3296 
   3297 character(len=fm_string_len), pointer, dimension(:)     :: good_list => NULL()
   3298 character(len=fm_path_name_len)                         :: path_name
   3299 character(len=256)                                      :: error_header
   3300 character(len=256)                                      :: warn_header
   3301 character(len=256)                                      :: note_header
   3302 character(len=128)                                      :: caller_str
   3303 
   3304 !
   3305 !       set the caller string and headers
   3306 !
   3307 
   3308 if (present(caller)) then  !{
   3309   caller_str = '[' // trim(caller) // ']'
   3310 else  !}{
   3311   caller_str = fm_util_default_caller
   3312 endif  !}
   3313 
   3314 error_header = '==>Error from ' // trim(mod_name) //   &
   3315                '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   3316 warn_header = '==>Warning from ' // trim(mod_name) //  &
   3317               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   3318 note_header = '==>Note from ' // trim(mod_name) //     &
   3319               '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
   3320 

Page 93          Source Listing                  FM_UTIL_END_NAMELIST
2021-06-01 08:55                                 fm_util.F90

   3321 !
   3322 !       check that a path is given (fatal if not)
   3323 !
   3324 
   3325 if (name .eq. ' ') then  !{
   3326   call mpp_error(FATAL, trim(error_header) // ' Empty name given')
   3327 endif  !}
   3328 
   3329 !
   3330 !       Check that the path ane name match the preceding call to
   3331 !       fm_util_start_namelist
   3332 !
   3333 
   3334 if (path .ne. save_path) then  !{
   3335   call mpp_error(FATAL, trim(error_header) // ' Path "' // trim(path) // '" does not match saved path "' // trim(save_path) 
   3335 // '"')
   3336 elseif (name .ne. save_name) then  !}{
   3337   call mpp_error(FATAL, trim(error_header) // ' Name "' // trim(name) // '" does not match saved name "' // trim(save_name) 
   3337 // '"')
   3338 endif  !}
   3339 
   3340 !
   3341 !       Concatenate the path and name
   3342 !
   3343 
   3344 if (path .eq. ' ') then  !{
   3345   path_name = name
   3346 else  !}{
   3347   path_name = trim(path) // '/' // name
   3348 endif  !}
   3349 save_path = ' '
   3350 save_name = ' '
   3351 
   3352 !
   3353 !       Check for any errors in the number of fields in this list
   3354 !
   3355 
   3356 if (present(check)) then  !{
   3357   if (check) then  !{
   3358     if (caller_str .eq. ' ') then  !{
   3359       caller_str = trim(mod_name) // '(' // trim(sub_name) // ')'
   3360     endif  !}
   3361     good_list => fm_util_get_string_array('/ocean_mod/GOOD/namelists/' // trim(path_name) // '/good_list',            &
   3362          caller = trim(mod_name) // '(' // trim(sub_name) // ')')
   3363     if (associated(good_list)) then  !{
   3364       call fm_util_check_for_bad_fields('/ocean_mod/namelists/' // trim(path_name), good_list, caller = caller_str)
   3365       deallocate(good_list)
   3366     else  !}{
   3367       call mpp_error(FATAL, trim(error_header) // ' Empty "' // trim(path_name) // '" list')
   3368     endif  !}
   3369   endif  !}
   3370 endif  !}
   3371 
   3372 !
   3373 !       Change back to the saved list
   3374 !
   3375 

Page 94          Source Listing                  FM_UTIL_END_NAMELIST
2021-06-01 08:55                                 fm_util.F90

   3376 if (save_current_list .ne. ' ') then  !{
   3377   if (.not. fm_change_list(save_current_list)) then  !{
   3378     call mpp_error(FATAL, trim(error_header) // ' Could not change to the saved list: ' // trim(save_current_list))
   3379   endif  !}
   3380 endif  !}
   3381 save_current_list = ' '
   3382 
   3383 !
   3384 !       reset the default caller string
   3385 !
   3386 
   3387 call fm_util_reset_caller
   3388 
   3389 !
   3390 !       reset the default no_overwrite string
   3391 !
   3392 
   3393 call fm_util_reset_no_overwrite
   3394 
   3395 !
   3396 !       reset the default good_name_list string
   3397 !
   3398 
   3399 call fm_util_reset_good_name_list
   3400 
   3401 return
   3402 
   3403 end subroutine fm_util_end_namelist  !}

Page 95          Source Listing                  FM_UTIL_END_NAMELIST
2021-06-01 08:55 Entry Points                    fm_util.F90



ENTRY POINTS

  Name                                            
                                                  
 fm_util_mod_mp_fm_util_end_namelist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   3363                                 scalar                    3363                              
 CALLER                     Dummy  3274     CHAR                        scalar   ARG,IN           3308,3309                         
 CALLER_STR                 Local  3302     CHAR            128         scalar                    3309,3311,3315,3317,3319,3358,3359
                                                                                                  ,3364                             
 CHECK                      Dummy  3274     L(4)            4           scalar   ARG,IN           3356,3357                         
 ERROR_HEADER               Local  3299     CHAR            256         scalar                    3314,3326,3335,3337,3367,3378     
 FM_UTIL_CHECK_FOR_BAD_FIEL                                                                                                         
 DS                         Subr   3364                                                           57,3364                           
 FM_UTIL_END_NAMELIST       Subr   3274                                                                                             
 FM_UTIL_GET_STRING_ARRAY   Func   3361     CHAR            128   1     1        PTR              72,3361                           
 GOOD_LIST                  Local  3297     CHAR            128   1     1        PTR              3297,3361,3363,3364,3365          
 NAME                       Dummy  3274     CHAR                        scalar   ARG,IN           3325,3336,3337,3345,3347          
 NOTE_HEADER                Local  3301     CHAR            256         scalar                    3318                              
 NULL                       Func   3297                                 scalar   PTR              3297                              
 PATH                       Dummy  3274     CHAR                        scalar   ARG,IN           3334,3335,3344,3347               
 PATH_NAME                  Local  3298     CHAR            512         scalar                    3345,3347,3361,3364,3367          
 PRESENT                    Func   3308                                 scalar                    3308,3356                         
 SUB_NAME                   Param  3291     CHAR            48          scalar                    3315,3317,3319,3359,3362          
 TRIM                       Func   3309                                 scalar                    3309,3314,3315,3316,3317,3318,3319
                                                                                                  ,3326,3335,3337,3347,3359,3361,336
                                                                                                  2,3364,3367,3378                  
 WARN_HEADER                Local  3300     CHAR            256         scalar                    3316                              

Page 96          Source Listing                  FM_UTIL_END_NAMELIST
2021-06-01 08:55                                 fm_util.F90

   3404 ! </SUBROUTINE> NAME="fm_util_end_namelist"
   3405 
   3406 
   3407 end module fm_util_mod  !}


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIELD_MANAGER_MOD          Module 43                                                             43,44,45,46,47                    
 FMS_MOD                    Module 48                                                             48                                
 FM_UTIL_END_NAMELIST       Subr   56                                                             56                                
 FM_UTIL_MOD                Module 21                                                                                               
 FM_UTIL_SET_VALUE          Local  153                                  scalar                    73                                
 FM_UTIL_SET_VALUE_INTEGER  Subr   158                                                            78                                
 FM_UTIL_SET_VALUE_INTEGER_                                                                                                         
 ARRAY                      Subr   154                                                            74                                
 FM_UTIL_SET_VALUE_LOGICAL  Subr   159                                                            79                                
 FM_UTIL_SET_VALUE_LOGICAL_                                                                                                         
 ARRAY                      Subr   155                                                            75                                
 FM_UTIL_SET_VALUE_REAL     Subr   160                                                            80                                
 FM_UTIL_SET_VALUE_REAL_ARR                                                                                                         
 AY                         Subr   156                                                            76                                
 FM_UTIL_SET_VALUE_STRING   Subr   161                                                            81                                
 FM_UTIL_SET_VALUE_STRING_A                                                                                                         
 RRAY                       Subr   157                                                            77                                
 FM_UTIL_START_NAMELIST     Subr   55                                                             55                                
 MPP_MOD                    Module 49                                                             49                                
 VERSION                    Param  134      CHAR            7           scalar                                                      

Page 97          Source Listing                  FM_UTIL_END_NAMELIST
2021-06-01 08:55 Subprograms/Common Blocks       fm_util.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FM_UTIL_CHECK_FOR_BAD_FIEL                                                                                                         
 DS                         Subr   418                                                                                              
 FM_UTIL_END_NAMELIST       Subr   3274                                                                                             
 FM_UTIL_GET_INDEX_LIST     Func   771      I(4)            4           scalar                                                      
 FM_UTIL_GET_INDEX_STRING   Func   661      I(4)            4           scalar                                                      
 FM_UTIL_GET_INTEGER        Func   1253     I(4)            4           scalar                                                      
 FM_UTIL_GET_INTEGER_ARRAY  Func   861      I(4)            4     1     1        PTR                                                
 FM_UTIL_GET_LENGTH         Func   581      I(4)            4           scalar                                                      
 FM_UTIL_GET_LOGICAL        Func   1372     L(4)            4           scalar                                                      
 FM_UTIL_GET_LOGICAL_ARRAY  Func   959      L(4)            4     1     1        PTR                                                
 FM_UTIL_GET_REAL           Func   1491     R(8)            8           scalar                                                      
 FM_UTIL_GET_REAL_ARRAY     Func   1057     R(8)            8     1     1        PTR                                                
 FM_UTIL_GET_STRING         Func   1616     CHAR            128         scalar                                                      
 FM_UTIL_GET_STRING_ARRAY   Func   1155     CHAR            128   1     1        PTR                                                
 FM_UTIL_MOD                Module 21                                                                                               
 FM_UTIL_RESET_CALLER       Subr   230                                                                                              
 FM_UTIL_RESET_GOOD_NAME_LI                                                                                                         
 ST                         Subr   307                                                                                              
 FM_UTIL_RESET_NO_OVERWRITE Subr   384                                                                                              
 FM_UTIL_SET_CALLER         Subr   184                                                                                              
 FM_UTIL_SET_GOOD_NAME_LIST Subr   265                                                                                              
 FM_UTIL_SET_NO_OVERWRITE   Subr   342                                                                                              
 FM_UTIL_SET_VALUE_INTEGER  Subr   2392                                                                                             
 FM_UTIL_SET_VALUE_INTEGER_                                                                                                         
 ARRAY                      Subr   1736                                                                                             
 FM_UTIL_SET_VALUE_LOGICAL  Subr   2570                                                                                             
 FM_UTIL_SET_VALUE_LOGICAL_                                                                                                         
 ARRAY                      Subr   1900                                                                                             
 FM_UTIL_SET_VALUE_REAL     Subr   2748                                                                                             
 FM_UTIL_SET_VALUE_REAL_ARR                                                                                                         
 AY                         Subr   2064                                                                                             
 FM_UTIL_SET_VALUE_STRING   Subr   2926                                                                                             
 FM_UTIL_SET_VALUE_STRING_A                                                                                                         
 RRAY                       Subr   2228                                                                                             
 FM_UTIL_START_NAMELIST     Subr   3103                                                                                             

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout

Page 98          Source Listing                  FM_UTIL_END_NAMELIST
2021-06-01 08:55                                 fm_util.F90

       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl

Page 99          Source Listing                  FM_UTIL_END_NAMELIST
2021-06-01 08:55                                 fm_util.F90

  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,

Page 100         Source Listing                  FM_UTIL_END_NAMELIST
2021-06-01 08:55                                 fm_util.F90

           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : fm_util.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
