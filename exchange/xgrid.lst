Page 1           Source Listing                  IN_BOX
2021-06-01 08:56                                 /tmp/ifortI1N6L8.i90

      1 # 1 "xgrid.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     22 !
     23 !                                    Michael Winton (Michael.Winton@noaa.gov) Oct 2001
     24 !
     25 !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     26 !> @file
     27 !! @brief <TT>xgrid_mod</TT> implements exchange grids for coupled models running on
     28 !!     multiple processors.  An exchange grid is formed from the union of
     29 !!     the bounding lines of the two (logically rectangular) participating
     30 !!     grids.  The exchange grid is therefore the coarsest grid that is a
     31 !!     refinement of both participating grids.  Exchange grids are used for
     32 !!     two purposes by coupled models:  (1) conservative interpolation of fields
     33 !!     between models uses the exchange grid cell areas as weights and
     34 !!     (2) the surface flux calculation takes place on the exchange grid thereby
     35 !!     using the finest scale data available.  <TT>xgrid_mod</TT> uses a NetCDF grid
     36 !!     specification file containing the grid cell overlaps in combination with
     37 !!     the <LINK SRC="ftp://ftp.gfdl.gov/pub/vb/mpp/mpp_domains.F90">
     38 !!     <TT>mpp_domains</TT></LINK> domain decomposition information to determine
     39 !!     the grid and processor connectivities.
     40 !! @author Michael Winton, Zhi Liang
     41 !! @email gfdl.climate.model.info@noaa.gov
     42 !!
     43 !! xgrid_mod - implements exchange grids.  An exchange grid is the grid whose
     44 !!             boundary set is the union of the boundaries of the participating
     45 !!             grids.  The exchange grid is the coarsest grid that is a
     46 !!             refinement of each of the participating grids.  Every exchange
     47 !!             grid cell is a subarea of one and only one cell in each of the
     48 !!             participating grids.  The exchange grid has two purposes:
     49 !!
     50 !!               (1) The exchange cell areas are used as weights for
     51 !!                   conservative interpolation between model grids.
     52 !!
     53 !!               (2) Computation of surface fluxes takes place on it,
     54 !!                   thereby using the finest scale data obtainable.
     55 !!
     56 !!             The exchange cells are the 2D intersections between cells of the
     57 !!             participating grids.  They are computed elsewhere and are

Page 2           Source Listing                  IN_BOX
2021-06-01 08:56                                 xgrid.F90

     58 !!             read here from a NetCDF grid file as a sequence of quintuples
     59 !!             (i and j on each of two grids and the cell area).
     60 !!
     61 !!             Each processing element (PE) computes a subdomain of each of the
     62 !!             participating grids as well as a subset of the exchange cells.
     63 !!             The geographic regions corresponding to these subdomains will,
     64 !!             in general, not be the same so communication must occur between
     65 !!             the PEs.  The scheme for doing this is as follows.  A distinction
     66 !!             is drawn between the participating grids.  There is a single
     67 !!             "side 1" grid and it does not have partitions (sub-grid surface
     68 !!             types).  There are one or more "side 2" grids and they may have
     69 !!             more than 1 partition.  In standard usage, the atmosphere grid is
     70 !!             on side 1 and the land and sea ice grids are on side 2.  The set
     71 !!             of exchange cells computed on a PE corresponds to its side 2
     72 !!             geographic region(s).  Communication between the PEs takes place
     73 !!             on the side 1 grid.  Note:  this scheme does not generally allow
     74 !!             reproduction of answers across varying PE counts.  This is
     75 !!             because, in the side 1 "get", exchange cells are first summed
     76 !!             locally onto a side 1 grid, then these side 1 contributions are
     77 !!             further summed after they have been communicated to their target
     78 !!             PE.  For the make_exchange_reproduce option, a special side 1 get
     79 !!             is used.  This get communicates individual exchange cells.  The
     80 !!             cells are summed in the order they appear in the grid spec. file.
     81 module xgrid_mod
     82 ! <CONTACT EMAIL="Michael.Winton@noaa.gov">
     83 !   Michael Winton
     84 ! </CONTACT>
     85 ! <CONTACT EMAIL="Zhi.Liang@noaa.gov">
     86 !   Zhi Liang
     87 ! </CONTACT>
     88 
     89 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/"/>
     90 
     91 ! <OVERVIEW>
     92 !    <TT>xgrid_mod</TT> implements exchange grids for coupled models running on
     93 !     multiple processors.  An exchange grid is formed from the union of
     94 !     the bounding lines of the two (logically rectangular) participating
     95 !     grids.  The exchange grid is therefore the coarsest grid that is a
     96 !     refinement of both participating grids.  Exchange grids are used for
     97 !     two purposes by coupled models:  (1) conservative interpolation of fields
     98 !     between models uses the exchange grid cell areas as weights and
     99 !     (2) the surface flux calculation takes place on the exchange grid thereby
    100 !     using the finest scale data available.  <TT>xgrid_mod</TT> uses a NetCDF grid
    101 !     specification file containing the grid cell overlaps in combination with
    102 !     the <LINK SRC="ftp://ftp.gfdl.gov/pub/vb/mpp/mpp_domains.F90">
    103 !     <TT>mpp_domains</TT></LINK> domain decomposition information to determine
    104 !     the grid and processor connectivities.
    105 ! </OVERVIEW>
    106 
    107 ! <DESCRIPTION>
    108 !     <TT>xgrid_mod</TT> is initialized with a list of model identifiers (three characters
    109 !     each), a list of <TT>mpp_domains</TT> domain data structures, and a grid specification
    110 !     file name.  The first element in the lists refers to the "side one" grid.
    111 !     The remaining elements are on "side two".  Thus, there may only be a single
    112 !     side one grid and it is further restricted to have no partitions (sub-grid
    113 !     areal divisions).  In standard usage, the atmosphere model is on side one
    114 !     and the land and sea ice models are on side two.  <TT>xgrid_mod</TT> performs

Page 3           Source Listing                  IN_BOX
2021-06-01 08:56                                 xgrid.F90

    115 !     interprocessor communication on the side one grid.  Exchange grid variables
    116 !     contain no data for zero sized partitions.  The size and format of exchange
    117 !     grid variables change every time the partition sizes or number of partitions
    118 !     are modified with a <TT>set_frac_area</TT> call on a participating side two grid.
    119 !     Existing exchange grid variables cannot be properly interpreted after
    120 !     that time; new ones must be allocated and assigned with the <TT>put_to_xgrid</TT>
    121 !     call.
    122 ! </DESCRIPTION>
    123 
    124 ! <DATA NAME="xmap_type"  TYPE=""  >
    125 !   The fields of xmap_type are all private.
    126 ! </DATA>
    127 
    128 ! <DATASET NAME="">
    129 !     <TT>xgrid_mod</TT> reads a NetCDF grid specification file to determine the
    130 !     grid and processor connectivities.  The exchange grids are defined
    131 !     by a sequence of quintuples:  the <TT>i/j</TT> indices of the intersecting
    132 !     cells of the two participating grids and their areal overlap.
    133 !     The names of the five fields are generated automatically from the
    134 !     three character ids of the participating grids.  For example, if
    135 !     the side one grid id is "ATM" and the side two grid id is "OCN",
    136 !     <TT>xgrid_mod</TT> expects to find the following five fields in the grid
    137 !     specification file:  <TT>I_ATM_ATMxOCN, J_ATM_ATMxOCN, I_OCN_ATMxOCN,
    138 !     J_OCN_ATMxOCN, and AREA_ATMxOCN</TT>.  These fields may be generated
    139 !     by the <TT>make_xgrids</TT> utility.
    140 ! </DATASET>
    141 
    142 # 1 "../include/fms_platform.h" 1 
    143 ! -*-f90-*-*
    144 !***********************************************************************
    145 !*                   GNU Lesser General Public License
    146 !*
    147 !* This file is part of the GFDL Flexible Modeling System (FMS).
    148 !*
    149 !* FMS is free software: you can redistribute it and/or modify it under
    150 !* the terms of the GNU Lesser General Public License as published by
    151 !* the Free Software Foundation, either version 3 of the License, or (at
    152 !* your option) any later version.
    153 !*
    154 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    155 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    156 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    157 !* for more details.
    158 !*
    159 !* You should have received a copy of the GNU Lesser General Public
    160 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    161 !***********************************************************************
    162 
    163 
    164 
    165 
    166 
    167 !Set type kinds.
    168 # 37
    169 
    170 !These values are not necessarily portable.
    171 

Page 4           Source Listing                  IN_BOX
2021-06-01 08:56                                 ../include/fms_platform.h

    172 
    173 
    174 
    175 
    176 
    177 
    178 !DEC$ MESSAGE:'Using 8-byte addressing'
    179 
    180 
    181 
    182 !Control "pure" functions.
    183 # 54
    184 
    185 
    186 !DEC$ MESSAGE:'Using pure routines.'
    187 
    188 
    189 
    190 !Control array members of derived types.
    191 # 66
    192 
    193 
    194 
    195 
    196 !DEC$ MESSAGE:'Using allocatable derived type array members.'
    197 
    198 
    199 
    200 !Control use of cray pointers.
    201 # 78
    202 
    203 
    204 !DEC$ MESSAGE:'Using cray pointers.'
    205 
    206 
    207 
    208 !Control size of integers that will hold address values.
    209 !Appears for legacy reasons, but seems rather dangerous.
    210 # 89
    211 
    212 
    213 
    214 !If you do not want to use 64-bit integers.
    215 # 95
    216 
    217 
    218 
    219 !If you do not want to use 32-bit floats.
    220 # 106
    221 
    222 
    223 
    224 !If you want to use quad-precision.
    225 ! The NO_QUAD_PRECISION macro will be deprecated and removed at some future time.
    226 ! Model code will rely solely upon the ENABLE_QUAD_PRECISION macro thereafer.
    227 # 114
    228 

Page 5           Source Listing                  IN_BOX
2021-06-01 08:56                                 ../include/fms_platform.h

    229 
    230 
    231 
    232 
    233 
    234 
    235 
    236 # 142 "xgrid.F90" 2 
    237 
    238 use       fms_mod,   only: check_nml_error,  &
    239                            error_mesg, FATAL, NOTE, stdlog,      &
    240                            WARNING, & !!! use_mpp_io removal
    241                            write_version_number, lowercase, string
    242 use mpp_mod,         only: mpp_npes, mpp_pe, mpp_root_pe, mpp_send, mpp_recv, &
    243                            mpp_sync_self, stdout, mpp_max, EVENT_RECV,        &
    244                            mpp_get_current_pelist, mpp_clock_id, mpp_min,     &
    245                            mpp_alltoall,                                      &
    246                            mpp_clock_begin, mpp_clock_end, MPP_CLOCK_SYNC,    &
    247                            COMM_TAG_1, COMM_TAG_2, COMM_TAG_3, COMM_TAG_4,    &
    248                            COMM_TAG_5, COMM_TAG_6, COMM_TAG_7, COMM_TAG_8,    &
    249                            COMM_TAG_9, COMM_TAG_10
    250 use mpp_mod,         only: input_nml_file, mpp_set_current_pelist, mpp_sum, mpp_sync
    251 use mpp_domains_mod, only: mpp_get_compute_domain, mpp_get_compute_domains, &
    252                            Domain2d, mpp_global_sum, mpp_update_domains,    &
    253                            mpp_modify_domain, mpp_get_data_domain, XUPDATE, &
    254                            YUPDATE, mpp_get_current_ntile, mpp_get_tile_id, &
    255                            mpp_get_ntile_count, mpp_get_tile_list,          &
    256                            mpp_get_global_domain, Domain1d,                 &
    257                            mpp_deallocate_domain, mpp_define_domains,       &
    258                            mpp_get_domain_npes, mpp_get_domain_root_pe,     &
    259                            mpp_domain_is_initialized, mpp_broadcast_domain, &
    260                            mpp_get_domain_pelist, mpp_compute_extent,       &
    261                            domainUG, mpp_get_ug_compute_domains,            &
    262                            mpp_get_ug_domains_index, mpp_get_ug_domain_grid_index, &
    263                            mpp_get_ug_domain_tile_list, mpp_pass_sg_to_ug
    264 use constants_mod,   only: PI, RADIUS
    265 use mosaic2_mod,          only: get_mosaic_xgrid, get_mosaic_xgrid_size, &
    266                                get_mosaic_ntiles, get_mosaic_ncontacts, &
    267                                get_mosaic_contact, get_mosaic_grid_sizes, &
    268                                get_mosaic_tile_grid
    269 use stock_constants_mod, only: ISTOCK_TOP, ISTOCK_BOTTOM, ISTOCK_SIDE, STOCK_NAMES, &
    270                                STOCK_UNITS, NELEMS, stocks_file, stock_type
    271 use gradient_mod,        only: gradient_cubic
    272 use fms2_io_mod,         only: FmsNetcdfFile_t, open_file, variable_exists, close_file
    273 use fms2_io_mod,         only: FmsNetcdfDomainFile_t, read_data, get_dimension_size
    274 use fms2_io_mod,         only: get_variable_units, dimension_exists
    275 
    276 use mpp_io_mod,          only: mpp_open, MPP_MULTI, MPP_SINGLE, MPP_OVERWR !< use_mpp_io
    277 use fms_mod,             only: read_data, file_exist, field_exist, field_size, & !<use_mpp_io
    278                                close_file_use_mpp_io => close_file !< use_mpp_io
    279 use fms_io_mod,          only: get_var_att_value, & !< use_mpp_io
    280                                get_mosaic_tile_grid_use_mpp_io => get_mosaic_tile_grid !< use_mpp_io
    281 !< Needed for use_mpp_io
    282 use mosaic_mod,          only: get_mosaic_xgrid_use_mpp_io => get_mosaic_xgrid,&
    283                                get_mosaic_xgrid_size_use_mpp_io => get_mosaic_xgrid_size, &
    284                                get_mosaic_ntiles_use_mpp_io => get_mosaic_ntiles, &
    285                                get_mosaic_ncontacts_use_mpp_io => get_mosaic_ncontacts, &

Page 6           Source Listing                  IN_BOX
2021-06-01 08:56                                 xgrid.F90

    286                                get_mosaic_contact_use_mpp_io => get_mosaic_contact, &
    287                                get_mosaic_grid_sizes_use_mpp_io => get_mosaic_grid_sizes
    288 !< \needed for use_mpp_io
    289 
    290 
    291 implicit none
    292 private
    293 
    294 public xmap_type, setup_xmap, set_frac_area, put_to_xgrid, get_from_xgrid, &
    295        xgrid_count, some, conservation_check, xgrid_init, &
    296 !       AREA_ATM_SPHERE, AREA_LND_SPHERE, AREA_OCN_SPHERE, &
    297 !       AREA_ATM_MODEL, AREA_LND_MODEL, AREA_OCN_MODEL, &
    298        AREA_ATM_SPHERE, AREA_OCN_SPHERE, &
    299        AREA_ATM_MODEL, AREA_OCN_MODEL, &
    300        get_ocean_model_area_elements, grid_box_type,   &
    301        get_xmap_grid_area, put_to_xgrid_ug, get_from_xgrid_ug, &
    302        set_frac_area_ug
    303 
    304 !--- paramters that determine the remapping method
    305 integer, parameter :: FIRST_ORDER        = 1
    306 integer, parameter :: SECOND_ORDER       = 2
    307 integer, parameter :: VERSION1           = 1 !< grid spec file
    308 integer, parameter :: VERSION2           = 2 !< mosaic grid file
    309 integer, parameter :: MAX_FIELDS         = 80
    310 
    311 ! <NAMELIST NAME="xgrid_nml">
    312 !   <DATA NAME="make_exchange_reproduce" TYPE="logical"  DEFAULT=".false.">
    313 !     Set to .true. to make <TT>xgrid_mod</TT> reproduce answers on different
    314 !     numbers of PEs.  This option has a considerable performance impact.
    315 !   </DATA>
    316 !   <DATA NAME="interp_method" TYPE="character(len=64)"  DEFAULT=" 'first_order' ">
    317 !     exchange grid interpolation method. It has two options:
    318 !     "first_order", "second_order".
    319 !   </DATA>
    320 !   <DATA NAME="nsubset" TYPE="integer" DEFAULT="0">
    321 !     number of processors to read exchange grid information. Those processors that read
    322 !     the exchange grid information will send data to other processors to prepare for flux exchange.
    323 !     Default value is 0. When nsubset is 0, each processor will read part of the exchange grid
    324 !     information. The purpose of this namelist is to improve performance of setup_xmap when running
    325 !     on highr processor count and solve receiving size mismatch issue on high processor count.
    326 !     Try to set nsubset = mpp_npes/MPI_rank_per_node.
    327 !   </DATA>
    328 logical :: make_exchange_reproduce = .false. !< exactly same on different # PEs
    329 logical :: xgrid_log = .false.
    330 character(len=64) :: interp_method = 'first_order'
    331 logical :: debug_stocks = .false.
    332 logical :: xgrid_clocks_on = .false.
    333 logical :: monotonic_exchange = .false.
    334 integer :: nsubset = 0 !< 0 means mpp_npes()
    335 logical :: do_alltoall = .true.
    336 logical :: do_alltoallv = .false.
    337 logical :: use_mpp_io = .false.!< use_mpp_io Default = .false. When true, uses mpp_io for IO.
    338 !< When false, uses fms2_io for IO.
    339 namelist /xgrid_nml/ make_exchange_reproduce, interp_method, debug_stocks, xgrid_clocks_on, &
    340     monotonic_exchange, nsubset, do_alltoall, do_alltoallv, &
    341     use_mpp_io
    342 ! </NAMELIST>

Page 7           Source Listing                  IN_BOX
2021-06-01 08:56                                 xgrid.F90

    343 logical :: init = .true.
    344 integer :: remapping_method
    345 
    346 ! Area elements used inside each model
    347 real, allocatable, dimension(:,:) :: AREA_ATM_MODEL, AREA_LND_MODEL, AREA_OCN_MODEL
    348 ! Area elements based on a the spherical model used by the ICE layer
    349 real, allocatable, dimension(:,:) :: AREA_ATM_SPHERE, AREA_LND_SPHERE, AREA_OCN_SPHERE
    350 
    351 ! <INTERFACE NAME="put_to_xgrid">
    352 
    353 !   <OVERVIEW>
    354 !     Scatters data from model grid onto exchange grid.
    355 !   </OVERVIEW>
    356 !   <DESCRIPTION>
    357 !     Scatters data from model grid onto exchange grid.
    358 !   </DESCRIPTION>
    359 !   <TEMPLATE>
    360 !     call put_to_xgrid(d, grid_id, x, xmap, remap_order)
    361 !   </TEMPLATE>
    362 !   <IN NAME="d"  TYPE="real"  > </IN>
    363 !   <IN NAME="grid_id"  TYPE=" character(len=3)"  > </IN>
    364 !   <INOUT NAME="x"  TYPE="real"  > </INOUT>
    365 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
    366 !   <IN NAME="remap_method" TYPE="integer,optional">
    367 !     exchange grid interpolation method. It has four possible values:
    368 !     FIRST_ORDER (=1), SECOND_ORDER(=2). Default value is FIRST_ORDER.
    369 !   </IN>
    370 !> @brief Scatters data from model grid onto exchange grid.
    371 interface put_to_xgrid
    372   module procedure put_side1_to_xgrid
    373   module procedure put_side2_to_xgrid
    374 end interface
    375 ! </INTERFACE>
    376 
    377 ! <INTERFACE NAME="get_from_xgrid">
    378 
    379 !   <OVERVIEW>
    380 !     Sums data from exchange grid to model grid.
    381 !   </OVERVIEW>
    382 !   <DESCRIPTION>
    383 !     Sums data from exchange grid to model grid.
    384 !   </DESCRIPTION>
    385 !   <TEMPLATE>
    386 !     call get_from_xgrid(d, grid_id, x, xmap)
    387 !   </TEMPLATE>
    388 !   <IN NAME="x"  TYPE="real"  > </IN>
    389 !   <IN NAME="grid_id"  TYPE=" character(len=3)"  > </IN>
    390 !   <OUT NAME="d"  TYPE="real"  > </OUT>
    391 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
    392 !> @brief Sums data from exchange grid to model grid.
    393 interface get_from_xgrid
    394   module procedure get_side1_from_xgrid
    395   module procedure get_side2_from_xgrid
    396 end interface
    397 ! </INTERFACE>
    398 
    399 interface put_to_xgrid_ug

Page 8           Source Listing                  IN_BOX
2021-06-01 08:56                                 xgrid.F90

    400   module procedure put_side1_to_xgrid_ug
    401   module procedure put_side2_to_xgrid_ug
    402 end interface
    403 
    404 interface get_from_xgrid_ug
    405   module procedure get_side2_from_xgrid_ug
    406   module procedure get_side1_from_xgrid_ug
    407 end interface
    408 
    409 interface set_frac_area
    410   module procedure set_frac_area_sg
    411   module procedure set_frac_area_ug
    412 end interface
    413 
    414 ! <INTERFACE NAME="conservation_check">
    415 
    416 !   <OVERVIEW>
    417 !     Returns three numbers which are the global sum of a variable.
    418 !   </OVERVIEW>
    419 !   <DESCRIPTION>
    420 !     Returns three numbers which are the global sum of a
    421 !     variable (1) on its home model grid, (2) after interpolation to the other
    422 !     side grid(s), and (3) after re_interpolation back onto its home side grid(s).
    423 !     Conservation_check must be called by all PEs to work properly.
    424 !   </DESCRIPTION>
    425 !   <TEMPLATE>
    426 !     call conservation_check(d, grid_id, xmap,remap_order)
    427 !   </TEMPLATE>
    428 !   <IN NAME="d"  TYPE="real" DIM="(:,:)" > </IN>
    429 !   <IN NAME="grid_id"  TYPE="character(len=3)"  > </IN>
    430 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
    431 !   <OUT NAME="" TYPE="real" DIM="3">The global sum of a variable.</OUT>
    432 !   <IN NAME="remap_method" TYPE="integer,optional">
    433 !   </IN>
    434 !> @brief Returns three numbers which are the global sum of a variable.
    435 !! @details Returns three numbers which are the global sum of a
    436 !!     variable (1) on its home model grid, (2) after interpolation to the other
    437 !!     side grid(s), and (3) after re_interpolation back onto its home side grid(s).
    438 !!     Conservation_check must be called by all PEs to work properly.
    439 interface conservation_check
    440   module procedure conservation_check_side1
    441   module procedure conservation_check_side2
    442 end interface
    443 ! </INTERFACE>
    444 interface conservation_check_ug
    445   module procedure conservation_check_ug_side1
    446   module procedure conservation_check_ug_side2
    447 end interface
    448 
    449 
    450 type xcell_type
    451   integer :: i1 !< indices of cell in model arrays on both sides
    452   integer :: j1 !< indices of cell in model arrays on both sides
    453   integer :: i2 !< indices of cell in model arrays on both sides
    454   integer :: j2 !< indices of cell in model arrays on both sides
    455   integer :: l1, l2
    456   integer :: recv_pos       !< position in the receive buffer.

Page 9           Source Listing                  IN_BOX
2021-06-01 08:56                                 xgrid.F90

    457   integer :: pe             !< other side pe that has this cell
    458   integer :: tile           !< tile index of side 1 mosaic.
    459   real    :: area           !< geographic area of exchange cell
    460 !  real    :: area1_ratio     !(= x_area/grid1_area), will be added in the future to improve efficiency
    461 !  real    :: area2_ratio     !(= x_area/grid2_area), will be added in the future to improve efficiency
    462   real    :: di !< Weight for the gradient of flux
    463   real    :: dj !< Weight for the gradient of flux
    464   real    :: scale
    465 end type xcell_type
    466 
    467 type grid_box_type
    468    real, dimension(:,:),   pointer :: dx     => NULL()
    469    real, dimension(:,:),   pointer :: dy     => NULL()
    470    real, dimension(:,:),   pointer :: area   => NULL()
    471    real, dimension(:),     pointer :: edge_w => NULL()
    472    real, dimension(:),     pointer :: edge_e => NULL()
    473    real, dimension(:),     pointer :: edge_s => NULL()
    474    real, dimension(:),     pointer :: edge_n => NULL()
    475    real, dimension(:,:,:), pointer :: en1    => NULL()
    476    real, dimension(:,:,:), pointer :: en2    => NULL()
    477    real, dimension(:,:,:), pointer :: vlon   => NULL()
    478    real, dimension(:,:,:), pointer :: vlat   => NULL()
    479 end type grid_box_type
    480 
    481 type grid_type
    482   character(len=3)                :: id                               !< grid identifier
    483   integer                         :: npes                             !< number of processor on this grid.
    484   logical                         :: on_this_pe                       !< indicate the domain is defined on this pe
    485   integer                         :: root_pe                          !< indicate the root pe of the domain
    486   integer, pointer, dimension(:)  :: pelist                           !< pelist of the domain
    487   integer                         :: ntile                            !< number of tiles in mosaic
    488   integer                         :: ni !< max of global size of all the tiles
    489   integer                         :: nj !< max of global size of all the tiles
    490   integer, pointer, dimension(:)  :: tile =>NULL()                    !< tile id ( pe index )
    491   integer, pointer, dimension(:)  :: is =>NULL() !< domain - i-range (pe index)
    492   integer, pointer, dimension(:)  :: ie =>NULL() !< domain - i-range (pe index)
    493   integer, pointer, dimension(:)  :: js =>NULL() !< domain - j-range (pe index)
    494   integer, pointer, dimension(:)  :: je =>NULL() !< domain - j-range (pe index)
    495   integer, pointer                :: is_me =>NULL() !< my domain - i-range
    496   integer, pointer                :: ie_me =>NULL() !< my domain - i-range
    497   integer, pointer                :: js_me =>NULL() !< my domain - j-range
    498   integer, pointer                :: je_me =>NULL() !< my domain - j-range
    499   integer                         :: isd_me                   !< my data domain - i-range
    500   integer                         :: ied_me                   !< my data domain - i-range
    501   integer                         :: jsd_me                   !< my data domain - j-range
    502   integer                         :: jed_me                   !< my data domain - j-range
    503   integer                         :: nxd_me                   !< data domain size
    504   integer                         :: nyd_me                   !< data domain size
    505   integer                         :: nxc_me                   !< compute domain size
    506   integer                         :: nyc_me                   !< compute domain size
    507   integer, pointer                :: tile_me                          !< my tile id
    508   integer                         :: im                     !< global domain range
    509   integer                         :: jm                     !< global domain range
    510   integer                         :: km                     !< global domain range
    511   real, pointer, dimension(:)     :: lon =>NULL()       !< center of global grids
    512   real, pointer, dimension(:)     :: lat =>NULL()       !< center of global grids
    513   real, pointer, dimension(:,:)   :: geolon=>NULL()   !< geographical grid center

Page 10          Source Listing                  IN_BOX
2021-06-01 08:56                                 xgrid.F90

    514   real, pointer, dimension(:,:)   :: geolat=>NULL()   !< geographical grid center
    515   real, pointer, dimension(:,:,:) :: frac_area =>NULL()               !< partition fractions
    516   real, pointer, dimension(:,:)   :: area =>NULL()                    !< cell area
    517   real, pointer, dimension(:,:)   :: area_inv =>NULL()                !< 1 / area for normalization
    518   integer                         :: first                      !< xgrid index range
    519   integer                         :: last                       !< xgrid index range
    520   integer                         :: first_get              !< xgrid index range for get_2_from_xgrid
    521   integer                         :: last_get               !< xgrid index range for get_2_from_xgrid
    522   integer                         :: size                             !< # xcell patterns
    523   type(xcell_type), pointer       :: x(:) =>NULL()                    !< xcell patterns
    524   integer                         :: size_repro                       !< # side 1 patterns for repro
    525   type(xcell_type), pointer       :: x_repro(:) =>NULL()              !< side 1 patterns for repro
    526   type(Domain2d)                  :: domain                           !< used for conservation checks
    527   type(Domain2d)                  :: domain_with_halo                 !< used for second order remapping
    528   logical                         :: is_latlon                        !< indicate if the grid is lat-lon grid or not.
    529   type(grid_box_type)             :: box                              !< used for second order remapping.
    530 !--- The following is for land unstruct domain
    531   logical                         :: is_ug
    532   integer                         :: nxl_me
    533   integer, pointer                :: ls_me =>NULL()  !< unstruct domain
    534   integer, pointer                :: le_me =>NULL()  !< unstruct domain
    535   integer, pointer, dimension(:)  :: ls =>NULL(), le =>NULL()
    536   integer, pointer                :: gs_me =>NULL(),  ge_me =>NULL()
    537   integer, pointer, dimension(:)  :: gs =>NULL(), ge =>NULL()
    538   integer, pointer, dimension(:)  :: l_index =>NULL()
    539   type(DomainUG)                  :: ug_domain
    540 
    541 end type grid_type
    542 
    543 type x1_type
    544   integer :: i, j
    545   real    :: area   !< (= geographic area * frac_area)
    546 !  real    :: area_ratio !(= x1_area/grid1_area) ! will be added in the future to improve efficiency
    547   real    :: di !< weight for the gradient of flux
    548   real    :: dj !< weight for the gradient of flux
    549   integer :: tile           !< tile index of side 1 mosaic.
    550   integer :: pos
    551 end type x1_type
    552 
    553 type x2_type
    554   integer :: i, j, l, k, pos
    555   real    :: area   !< geographic area of exchange cell
    556 !  real    :: area_ratio !(=x2_area/grid2_area )  ! will be added in the future to improve efficiency
    557 end type x2_type
    558 
    559 type overlap_type
    560    integer          :: count
    561    integer          :: pe
    562    integer          :: buffer_pos
    563    integer, allocatable :: i(:)
    564    integer, allocatable :: j(:)
    565    integer, allocatable :: g(:)
    566    integer, allocatable :: xLoc(:)
    567    integer, allocatable :: tile(:)
    568    real,    allocatable :: di(:)
    569    real,    allocatable :: dj(:)
    570 end type overlap_type

Page 11          Source Listing                  IN_BOX
2021-06-01 08:56                                 xgrid.F90

    571 
    572 type comm_type
    573   integer                         :: nsend, nrecv
    574   integer                         :: sendsize, recvsize
    575   integer,            pointer, dimension(:) :: unpack_ind=>NULL()
    576   type(overlap_type), pointer, dimension(:) :: send=>NULL()
    577   type(overlap_type), pointer, dimension(:) :: recv=>NULL()
    578 end type comm_type
    579 
    580 type xmap_type
    581   private
    582   integer :: size            !< # of exchange grid cells with area > 0 on this pe
    583   integer :: size_put1       !< # of exchange grid cells for put_1_to_xgrid
    584   integer :: size_get2       !< # of exchange grid cells for get_2_to_xgrid
    585   integer :: me, npes, root_pe
    586   logical, pointer, dimension(:) :: your1my2  =>NULL()!< true if side 1 domain on
    587 !! indexed pe overlaps side 2
    588 !! domain on this pe
    589   logical, pointer, dimension(:) :: your2my1 =>NULL() !< true if a side 2 domain on
    590 !! indexed pe overlaps side 1
    591 !! domain on this pe
    592   integer, pointer, dimension(:) :: your2my1_size=>NULL() !< number of exchange grid of
    593 !! a side 2 domain on
    594 !! indexed pe overlaps side 1
    595 !! domain on this pe
    596 
    597   type (grid_type), pointer, dimension(:) :: grids =>NULL() !< 1st grid is side 1;
    598 !! rest on side 2
    599 !
    600 ! Description of the individual exchange grid cells (index is cell #)
    601 !
    602   type(x1_type), pointer, dimension(:) :: x1 =>NULL() !< side 1 info
    603   type(x1_type), pointer, dimension(:) :: x1_put =>NULL() !< side 1 info
    604   type(x2_type), pointer, dimension(:) :: x2 =>NULL() !< side 2 info
    605   type(x2_type), pointer, dimension(:) :: x2_get =>NULL() !< side 2 info
    606 
    607   integer, pointer, dimension(:) :: send_count_repro =>NULL()
    608   integer, pointer, dimension(:) :: recv_count_repro  =>NULL()
    609   integer                        :: send_count_repro_tot !< sum(send_count_repro)
    610   integer                        :: recv_count_repro_tot !< sum(recv_count_repro)
    611   integer :: version                                  !< version of xgrids. version="2021.02.0"! is for grid_spec file
    612 !! and version=VERSION2 is for mosaic grid.
    613   integer, pointer, dimension(:) :: ind_get1 =>NULL() !< indx for side1 get and side2 put.
    614   integer, pointer, dimension(:) :: ind_put1 =>NULL() !< indx for side1 put and side 2get.
    615   type(comm_type), pointer       :: put1 =>NULL()      !< for put_1_to_xgrid
    616   type(comm_type), pointer       :: get1 =>NULL()      !< for get_1_from_xgrid
    617   type(comm_type), pointer       :: get1_repro =>NULL()!< for get_1_from_xgrid_repro
    618 end type xmap_type
    619 
    620 !-----------------------------------------------------------------------
    621 ! Include variable "version" to be written to log file.
    622 # 1 "../include/file_version.h" 1 
    623 ! -*-f90-*-
    624 !***********************************************************************
    625 !*                   GNU Lesser General Public License
    626 !*
    627 !* This file is part of the GFDL Flexible Modeling System (FMS).

Page 12          Source Listing                  IN_BOX
2021-06-01 08:56                                 ../include/file_version.h

    628 !*
    629 !* FMS is free software: you can redistribute it and/or modify it under
    630 !* the terms of the GNU Lesser General Public License as published by
    631 !* the Free Software Foundation, either version 3 of the License, or (at
    632 !* your option) any later version.
    633 !*
    634 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    635 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    636 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    637 !* for more details.
    638 !*
    639 !* You should have received a copy of the GNU Lesser General Public
    640 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    641 !***********************************************************************
    642 
    643 # 23
    644 
    645   character(len=*), parameter :: version = 'unknown'
    646 
    647 # 528 "xgrid.F90" 2 
    648 
    649  real, parameter                              :: EPS = 1.0e-10
    650  real, parameter                              :: LARGE_NUMBER = 1.e20
    651  logical :: module_is_initialized = .FALSE.
    652  integer :: id_put_1_to_xgrid_order_1 = 0
    653  integer :: id_put_1_to_xgrid_order_2 = 0
    654  integer :: id_get_1_from_xgrid = 0
    655  integer :: id_get_1_from_xgrid_repro = 0
    656  integer :: id_get_2_from_xgrid = 0
    657  integer :: id_put_2_to_xgrid = 0
    658  integer :: id_setup_xmap = 0
    659  integer :: id_load_xgrid1, id_load_xgrid2, id_load_xgrid3
    660  integer :: id_load_xgrid4, id_load_xgrid5
    661  integer :: id_load_xgrid, id_set_comm, id_regen, id_conservation_check
    662 
    663 
    664 ! The following is for nested model
    665  integer :: nnest=0, tile_nest, tile_parent
    666  integer :: is_nest=0, ie_nest=0, js_nest=0, je_nest=0
    667  integer :: is_parent=0, ie_parent=0, js_parent=0, je_parent=0
    668 
    669 ! The following is required to compute stocks of water, heat, ...
    670 
    671   interface stock_move
    672      module procedure stock_move_3d, stock_move_2d
    673   end interface
    674 
    675   interface stock_move_ug
    676      module procedure stock_move_ug_3d
    677   end interface
    678 
    679   public stock_move, stock_type, stock_print, get_index_range, stock_integrate_2d
    680   public FIRST_ORDER, SECOND_ORDER, stock_move_ug
    681 
    682   interface get_area_elements !< for use with use_mpp_io
    683      module procedure get_area_elements_fms2_io
    684      module procedure get_area_elements_use_mpp_io

Page 13          Source Listing                  IN_BOX
2021-06-01 08:56                                 xgrid.F90

    685   end interface
    686   interface get_nest_contact
    687      module procedure get_nest_contact_fms2_io
    688      module procedure get_nest_contact_use_mpp_io
    689   end interface
    690 !< Set up private subroutines for use_mpp_io
    691 !! these routines are called if use_mpp_io is set to true
    692   private load_xgrid_use_mpp_io, get_grid, get_ocean_model_area_elements_use_mpp_io
    693 
    694 contains
    695 
    696 !#######################################################################
    697 !> @return logical in_box
    698 logical function in_box(i, j, is, ie, js, je)
    699   integer, intent(in) :: i, j, is, ie, js, je
    700 
    701   in_box = (i>=is) .and. (i<=ie) .and. (j>=js) .and. (j<=je)
    702 end function in_box


ENTRY POINTS

  Name                            
                                  
 xgrid_mod_mp_in_box_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Dummy  698      I(4)            4           scalar   ARG,IN           701                               
 IE                         Dummy  698      I(4)            4           scalar   ARG,IN           701                               
 IN_BOX                     Func   698      L(4)            4           scalar                    701,1274,2887,3233,6207           
 IS                         Dummy  698      I(4)            4           scalar   ARG,IN           701                               
 J                          Dummy  698      I(4)            4           scalar   ARG,IN           701                               
 JE                         Dummy  698      I(4)            4           scalar   ARG,IN           701                               
 JS                         Dummy  698      I(4)            4           scalar   ARG,IN           701                               

Page 14          Source Listing                  IN_BOX
2021-06-01 08:56                                 xgrid.F90

    703 
    704 !#######################################################################
    705 
    706 ! <SUBROUTINE NAME="xgrid_init">
    707 
    708 !   <OVERVIEW>
    709 !     Initialize the xgrid_mod.
    710 !   </OVERVIEW>
    711 !   <DESCRIPTION>
    712 !     Initialization routine for the xgrid module. It reads the xgrid_nml,
    713 !     writes the version information and xgrid_nml to the log file.
    714 !   </DESCRIPTION>
    715 !   <TEMPLATE>
    716 !     call xgrid_init ( )
    717 !   </TEMPLATE>
    718 !   <OUT NAME="remap_method" TYPE="integer">
    719 !     exchange grid interpolation method. It has four possible values:
    720 !     FIRST_ORDER (=1), SECOND_ORDER(=2).
    721 !   </OUT>
    722 !> @brief Initialize the xgrid_mod.
    723 !! @details Initialization routine for the xgrid module. It reads the xgrid_nml,
    724 !!     writes the version information and xgrid_nml to the log file.
    725 subroutine xgrid_init(remap_method)
    726   integer, intent(out) :: remap_method !< exchange grid interpolation method. It has four possible values:
    727 !! FIRST_ORDER (=1), SECOND_ORDER(=2).
    728 
    729   integer :: unit, ierr, io, out_unit
    730 
    731   if (module_is_initialized) return
    732   module_is_initialized = .TRUE.
    733 
    734   read (input_nml_file, xgrid_nml, iostat=io)
    735   ierr = check_nml_error ( io, 'xgrid_nml' )
    736 
    737 !--------- write version number and namelist ------------------
    738   call write_version_number("XGRID_MOD", version)
    739 
    740   unit = stdlog ( )
    741   out_unit = stdout()
    742   if ( mpp_pe() == mpp_root_pe() ) write (unit,nml=xgrid_nml)
    743 
    744   if (use_mpp_io) then
    745 ! Tell user which IO they are using
    746         call error_mesg('xgrid_init', "Using mpp_io in xgrid_mod",NOTE)
    747         call error_mesg('xgrid_init', &
    748              'MPP_IO is no longer supported.  Please remove from namelist',&
    749               WARNING)
    750        if ( mpp_pe() == mpp_root_pe() ) write (unit,'(a)')"Using mpp_io in xgrid_mod"
    751   else
    752         call error_mesg('xgrid_init',"Using fms2_io in xgrid_mod",NOTE)
    753         if ( mpp_pe() == mpp_root_pe() ) write (unit,'(a)')"Using fms2_io in xgrid_mod"
    754   endif
    755 !--------- check interp_method has suitable value
    756 !--- when monotonic_exchange is true, interp_method must be second order.
    757 
    758   select case(trim(interp_method))
    759   case('first_order')

Page 15          Source Listing                  XGRID_INIT
2021-06-01 08:56                                 xgrid.F90

    760      remap_method = FIRST_ORDER
    761      if( monotonic_exchange ) call error_mesg('xgrid_mod', &
    762          'xgrid_nml monotonic_exchange must be .false. when interp_method = first_order', FATAL)
    763      write(out_unit,*)"NOTE from xgrid_mod: use first_order conservative exchange"
    764   case('second_order')
    765      if(monotonic_exchange) then
    766         write(out_unit,*)"NOTE from xgrid_mod: use monotonic second_order conservative exchange"
    767      else
    768         write(out_unit,*)"NOTE from xgrid_mod: use second_order conservative exchange"
    769      endif
    770      remap_method = SECOND_ORDER
    771   case default
    772      call error_mesg('xgrid_mod', ' nml interp_method = ' //trim(interp_method)// &
    773       ' is not a valid namelist option', FATAL)
    774   end select
    775 
    776   if(xgrid_clocks_on) then
    777      id_put_1_to_xgrid_order_1 = mpp_clock_id("put_1_to_xgrid_order_1", flags=MPP_CLOCK_SYNC)
    778      id_put_1_to_xgrid_order_2 = mpp_clock_id("put_1_to_xgrid_order_2", flags=MPP_CLOCK_SYNC)
    779      id_get_1_from_xgrid       = mpp_clock_id("get_1_from_xgrid", flags=MPP_CLOCK_SYNC)
    780      id_get_1_from_xgrid_repro = mpp_clock_id("get_1_from_xgrid_repro", flags=MPP_CLOCK_SYNC)
    781      id_get_2_from_xgrid       = mpp_clock_id("get_2_from_xgrid", flags=MPP_CLOCK_SYNC)
    782      id_put_2_to_xgrid         = mpp_clock_id("put_2_to_xgrid", flags=MPP_CLOCK_SYNC)
    783      id_setup_xmap             = mpp_clock_id("setup_xmap", flags=MPP_CLOCK_SYNC)
    784      id_set_comm               = mpp_clock_id("set_comm")
    785      id_regen                  = mpp_clock_id("regen")
    786      id_conservation_check     = mpp_clock_id("conservation_check")
    787      id_load_xgrid             = mpp_clock_id("load_xgrid")
    788      id_load_xgrid1            = mpp_clock_id("load_xgrid1")
    789      id_load_xgrid2            = mpp_clock_id("load_xgrid2")
    790      id_load_xgrid3            = mpp_clock_id("load_xgrid3")
    791      id_load_xgrid4            = mpp_clock_id("load_xgrid4")
    792      id_load_xgrid5            = mpp_clock_id("load_xgrid5")
    793   endif
    794 
    795   remapping_method = remap_method
    796 
    797 end subroutine xgrid_init

Page 16          Source Listing                  XGRID_INIT
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                
                                      
 xgrid_mod_mp_xgrid_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_NML_ERROR            Func   735      I(4)            4           scalar   PRIV             238,735                           
 ERROR_MESG                 Subr   746                                           PRIV             239,746,747,752,761,772,862,876,99
                                                                                                  5,1536,1610,1619,1621,1625,1690,17
                                                                                                  43,1827,1837,1842,1844,1880,1886,1
                                                                                                  929,1948,1997,2019,2025,2028,2033,
                                                                                                  2038,2040,2042,2044,2046,2048,2050
                                                                                                  ,2052,2054,2104,2117,2129,2135,215
                                                                                                  0,2158,2160,2178,2180,2380,2385,25
                                                                                                  07,2585,3349,3366,3398,3400,3416,3
                                                                                                  485,3505,3516,3536,3540,3562,3572,
                                                                                                  3609,3627,3650,3654,3676,3686,3730
                                                                                                  ,3740,4661,4668,4699,4704,4737,515
                                                                                                  5,5171,5193,5197,5234,5250,5268,52
                                                                                                  72,5294,5304,5326,5336,5815,5930,6
                                                                                                  509,6511,6515,6580,6704,6708,6710,
                                                                                                  6749,6792,6811,6860,6881,6887,6890
                                                                                                  ,6895,6900,6902,6904,6906,6908,691
                                                                                                  0,6912,6914,6916,6966,6976,6997,70
                                                                                                  05,7007,7024,7026,7234,7239       
 FATAL                      Param  762      I(4)            4           scalar   PRIV             239,762,773,862,876,996,1536,1610,
                                                                                                  1620,1622,1626,1743,1827,1837,1880
                                                                                                  ,1886,1930,1949,1997,2019,2026,202
                                                                                                  9,2034,2038,2040,2042,2044,2046,20
                                                                                                  48,2050,2052,2054,2104,2117,2129,2
                                                                                                  135,2150,2159,2161,2179,2181,2380,
                                                                                                  2385,2508,2585,3350,3366,3399,3401
                                                                                                  ,3416,3485,3505,3518,3537,3540,356
                                                                                                  3,3572,3609,3627,3651,3654,3677,36
                                                                                                  86,3730,3740,4661,4668,4699,4704,4
                                                                                                  737,5155,5171,5194,5197,5234,5250,
                                                                                                  5269,5272,5295,5304,5327,5336,5815
                                                                                                  ,5931,6510,6512,6516,6704,6749,679
                                                                                                  3,6812,6860,6881,6888,6891,6896,69
                                                                                                  00,6902,6904,6906,6908,6910,6912,6
                                                                                                  914,6916,6966,6976,6998,7006,7008,
                                                                                                  7025,7027,7234,7239               
 FIRST_ORDER                Param  760      I(4)            4           scalar                    680,760,3478,3513                 
 ID_CONSERVATION_CHECK      Local  786      I(4)            4           scalar                    786,2255,2312,7110,7167           
 ID_GET_1_FROM_XGRID        Local  779      I(4)            4           scalar                    654,779,4144,4248,5472,5574       
 ID_GET_1_FROM_XGRID_REPRO  Local  780      I(4)            4           scalar                    655,780,4275,4346,5600,5670       
 ID_GET_2_FROM_XGRID        Local  781      I(4)            4           scalar                    656,781,3775,3789,5684,5698       
 ID_LOAD_XGRID              Local  787      I(4)            4           scalar                    787,1855,2199,6721,7042           
 ID_LOAD_XGRID1             Local  788      I(4)            4           scalar                    788,937,1068,5874,6001            
 ID_LOAD_XGRID2             Local  789      I(4)            4           scalar                    789,1078,1121,6011,6054           

Page 17          Source Listing                  XGRID_INIT
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ID_LOAD_XGRID3             Local  790      I(4)            4           scalar                    790,1124,1155,6057,6088           
 ID_LOAD_XGRID4             Local  791      I(4)            4           scalar                    791,1156,1195,6089,6128           
 ID_LOAD_XGRID5             Local  792      I(4)            4           scalar                    792,1263,1504,6196,6437           
 ID_PUT_1_TO_XGRID_ORDER_1  Local  777      I(4)            4           scalar                    652,777,3814,3877,5364,5426       
 ID_PUT_1_TO_XGRID_ORDER_2  Local  778      I(4)            4           scalar                    653,778,3911,4115                 
 ID_PUT_2_TO_XGRID          Local  782      I(4)            4           scalar                    657,782,3755,3761,5439,5445       
 ID_REGEN                   Local  785      I(4)            4           scalar                    785,2251,2253,7106,7108           
 ID_SETUP_XMAP              Local  783      I(4)            4           scalar                    658,783,1809,2314,6681,7169       
 ID_SET_COMM                Local  784      I(4)            4           scalar                    784,2238,2249,7093,7104           
 IERR                       Local  729      I(4)            4           scalar                    735                               
 INPUT_NML_FILE             Local  734      CHAR                  1     1        ALC,TGT,PRIV     250,734                           
 INTERP_METHOD              Local  758      CHAR            64          scalar                    330,339,758,772,1811,2295,6683,715
                                                                                                  0                                 
 IO                         Local  729      I(4)            4           scalar                    734,735                           
 MODULE_IS_INITIALIZED      Local  731      L(4)            4           scalar                    651,731,732                       
 MONOTONIC_EXCHANGE         Local  761      L(4)            4           scalar                    333,340,761,765,1437,2601,2632,263
                                                                                                  8,2695,2722,2766,2777,2788,2907,29
                                                                                                  38,2944,3020,3047,3084,3092,3511,3
                                                                                                  956,3965,3989,4052,6370           
 MPP_CLOCK_ID               Func   777      I(4)            4           scalar   PRIV             244,777,778,779,780,781,782,783,78
                                                                                                  4,785,786,787,788,789,790,791,792 
 MPP_CLOCK_SYNC             Param  777      I(4)            4           scalar   PRIV             246,777,778,779,780,781,782,783   
 MPP_PE                     Func   742      I(4)            4           scalar   PRIV             242,742,750,753,869,870,898,1814,2
                                                                                                  434,2459,2663,2973,3291,4816,4879,
                                                                                                  4942,5808,5809,5835,6686          
 MPP_ROOT_PE                Func   742      I(4)            4           scalar   PRIV             242,742,750,753,870,898,1816,2434,
                                                                                                  2459,2663,2973,3291,4816,4879,4942
                                                                                                  ,5809,5835,6688                   
 NOTE                       Param  746      I(4)            4           scalar   PRIV             239,746,752,1691,1842,1844,6581,67
                                                                                                  08,6710                           
 OUT_UNIT                   Local  729      I(4)            4           scalar                    741,763,766,768                   
 REMAPPING_METHOD           Local  795      I(4)            4           scalar                    795,2290,2292,2304,2306,7145,7147,
                                                                                                  7159,7161                         
 REMAP_METHOD               Dummy  725      I(4)            4           scalar   ARG,OUT          760,770,795                       
 SECOND_ORDER               Param  770      I(4)            4           scalar                    680,770                           
 STDLOG                     Func   740      I(4)            4           scalar   PRIV             239,740                           
 STDOUT                     Func   741      I(4)            4           scalar   PRIV             243,741,867,1813,5806,6685        
 TRIM                       Func   758                                  scalar                    758,772                           
 UNIT                       Local  729      I(4)            4           scalar                    740,742,750,753                   
 USE_MPP_IO                 Local  744      L(4)            4           scalar                    337,341,744,856,1729              
 VERSION                    Param  738      CHAR            7           scalar                    738                               
 WARNING                    Param  749      I(4)            4           scalar   PRIV             240,749                           
 WRITE_VERSION_NUMBER       Subr   738                                           PRIV             241,738                           
 XGRID_CLOCKS_ON            Local  776      L(4)            4           scalar                    332,339,776                       
 XGRID_INIT                 Subr   725                                                                                              
 XGRID_NML                  Local  734                                  scalar                    734,742                           

Page 18          Source Listing                  XGRID_INIT
2021-06-01 08:56                                 xgrid.F90

    798 ! </SUBROUTINE>
    799 
    800 !#######################################################################
    801 
    802 subroutine load_xgrid (xmap, grid, grid_file, grid1_id, grid_id, tile1, tile2, use_higher_order)
    803 type(xmap_type), intent(inout)         :: xmap
    804 type(grid_type), intent(inout)         :: grid
    805 character(len=*), intent(in)           :: grid_file
    806 character(len=3), intent(in)           :: grid1_id, grid_id
    807 integer,          intent(in)           :: tile1, tile2
    808 logical,        intent(in)             :: use_higher_order
    809 
    810   integer, pointer,       dimension(:)   :: i1=>NULL(), j1=>NULL()
    811   integer, pointer,       dimension(:)   :: i2=>NULL(), j2=>NULL()
    812   real,    pointer,       dimension(:)   :: di=>NULL(), dj=>NULL()
    813   real,    pointer,       dimension(:)   :: area =>NULL()
    814   integer, pointer,       dimension(:)   :: i1_tmp=>NULL(), j1_tmp=>NULL()
    815   integer, pointer,       dimension(:)   :: i2_tmp=>NULL(), j2_tmp=>NULL()
    816   real,    pointer,       dimension(:)   :: di_tmp=>NULL(), dj_tmp=>NULL()
    817   real,    pointer,       dimension(:)   :: area_tmp =>NULL()
    818   integer, pointer,       dimension(:)   :: i1_side1=>NULL(), j1_side1=>NULL()
    819   integer, pointer,       dimension(:)   :: i2_side1=>NULL(), j2_side1=>NULL()
    820   real,    pointer,       dimension(:)   :: di_side1=>NULL(), dj_side1=>NULL()
    821   real,    pointer,       dimension(:)   :: area_side1 =>NULL()
    822 
    823   real,    allocatable, dimension(:,:) :: tmp
    824   real,    allocatable, dimension(:)   :: send_buffer, recv_buffer
    825   type (grid_type),   pointer, save    :: grid1 =>NULL()
    826   integer                              :: l, ll, ll_repro, p, siz(4), nxgrid, size_prev
    827   type(xcell_type),   allocatable      :: x_local(:)
    828   integer                              :: size_repro, out_unit
    829   logical                              :: scale_exist = .false.
    830   logical                              :: is_distribute = .false.
    831   real,    allocatable,   dimension(:) :: scale
    832   real                                 :: garea
    833   integer                              :: npes, isc, iec, nxgrid_local, pe, nxgrid_local_orig
    834   integer                              :: nxgrid1, nxgrid2, nset1, nset2, ndivs, cur_ind
    835   integer                              :: pos, nsend, nrecv, l1, l2, n, mypos, m
    836   integer                              :: start(4), nread(4)
    837   logical                              :: found
    838   character(len=128)                   :: attvalue
    839   integer, dimension(0:xmap%npes-1)    :: pelist
    840   logical, dimension(0:xmap%npes-1)    :: subset_rootpe
    841   integer, dimension(0:xmap%npes-1)    :: nsend1, nsend2, nrecv1, nrecv2
    842   integer, dimension(0:xmap%npes-1)    :: send_cnt, recv_cnt
    843   integer, dimension(0:xmap%npes-1)    :: send_buffer_pos, recv_buffer_pos
    844   integer, dimension(0:xmap%npes-1)    :: ibegin, iend, pebegin, peend
    845   integer, dimension(2*xmap%npes)      :: ibuf1, ibuf2
    846   integer, dimension(0:xmap%npes-1)    :: pos_x, y2m1_size
    847   integer, allocatable,   dimension(:) :: y2m1_pe
    848   integer, pointer, save               :: iarray(:), jarray(:)
    849   integer, allocatable, save           :: pos_s(:)
    850   integer, pointer,       dimension(:) :: iarray2(:)=>NULL(), jarray2(:)=>NULL()
    851   logical                              :: last_grid
    852   integer                              :: nxgrid1_old
    853   integer                              :: lll
    854   type(FmsNetcdfFile_t)                :: fileobj

Page 19          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

    855 
    856   if (use_mpp_io) then
    857         call load_xgrid_use_mpp_io (xmap, grid, grid_file, grid1_id, grid_id, tile1, tile2, use_higher_order)
    858         return
    859   endif
    860 
    861   if(.not. open_file(fileobj, grid_file, 'read' )) then
    862      call error_mesg('xgrid_mod(load_xgrid)', 'Error in opening file '//trim(grid_file), FATAL)
    863   endif
    864 
    865   scale_exist = .false.
    866   grid1 => xmap%grids(1)
    867   out_unit = stdout()
    868   npes     = xmap%npes
    869   pe       = mpp_pe()
    870   mypos = mpp_pe()-mpp_root_pe()
    871 
    872   call mpp_get_current_pelist(pelist)
    873 !--- make sure npes = pelist(npes-1) - pelist(0) + 1
    874   if( npes .NE. pelist(npes-1) - pelist(0) + 1 ) then
    875      print*, "npes =", npes, ", pelist(npes-1)=", pelist(npes-1), ", pelist(0)=", pelist(0)
    876      call error_mesg('xgrid_mod', 'npes .NE. pelist(npes-1) - pelist(0)', FATAL)
    877   endif
    878 
    879   select case(xmap%version)
    880   case(VERSION1)
    881      nxgrid = 0
    882      if (dimension_exists(fileobj, 'i_'//lowercase(grid1_id)//'X'//lowercase(grid_id))) then
    883          call get_dimension_size(fileobj, 'i_'//lowercase(grid1_id)//'X'//lowercase(grid_id), nxgrid)
    884      endif
    885      if(nxgrid .LE. 0) return
    886   case(VERSION2)
    887 !--- max_size is the exchange grid size between super grid.
    888      nxgrid = get_mosaic_xgrid_size(fileobj)
    889      if(nxgrid .LE. 0) return
    890   end select
    891 
    892 !--- define a domain to read exchange grid.
    893   if(nxgrid > npes) then
    894      ndivs = npes
    895      if(nsubset >0 .AND. nsubset < npes) ndivs = nsubset
    896      call mpp_compute_extent( 1, nxgrid, ndivs, ibegin, iend)
    897      if(npes == ndivs) then
    898         p = mpp_pe()-mpp_root_pe()
    899         isc = ibegin(p)
    900         iec = iend(p)
    901         subset_rootpe(:) = .true.
    902      else
    903         isc = 0; iec = -1
    904         call mpp_compute_extent(pelist(0), pelist(npes-1), ndivs, pebegin, peend)
    905         do n = 0, ndivs-1
    906            if(pe == pebegin(n)) then
    907               isc = ibegin(n)
    908               iec = iend(n)
    909               exit
    910            endif
    911         enddo

Page 20          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

    912         cur_ind = 0
    913         subset_rootpe(:) = .false.
    914 
    915         do n = 0, npes-1
    916            if(pelist(n) == pebegin(cur_ind)) then
    917               subset_rootpe(n) = .true.
    918               cur_ind = cur_ind+1
    919               if(cur_ind == ndivs) exit
    920            endif
    921         enddo
    922      endif
    923      is_distribute = .true.
    924   else
    925      is_distribute = .false.
    926      isc = 1; iec = nxgrid
    927   endif
    928 
    929   nset1 = 5
    930   nset2 = 5
    931   if(use_higher_order) then
    932      nset1 = nset1 + 2
    933      nset2 = nset2 + 2
    934   end if
    935   if(scale_exist) nset2 = nset1 + 1
    936 
    937   call mpp_clock_begin(id_load_xgrid1)
    938   if(iec .GE. isc) then
    939      nxgrid_local = iec - isc + 1
    940      allocate(i1_tmp(isc:iec), j1_tmp(isc:iec), i2_tmp(isc:iec), j2_tmp(isc:iec), area_tmp(isc:iec) )
    941      if(use_higher_order) allocate(di_tmp(isc:iec), dj_tmp(isc:iec))
    942 
    943      start = 1; nread = 1
    944 
    945      select case(xmap%version)
    946      case(VERSION1)
    947         start(1) = isc; nread(1) = nxgrid_local
    948         allocate(tmp(nxgrid_local,1))
    949         call read_data(fileobj, 'I_'//grid1_id//'_'//grid1_id//'x'//grid_id, tmp, corner=start, edge_lengths=nread)
    950         i1_tmp = tmp(:,1)
    951         call read_data(fileobj, 'J_'//grid1_id//'_'//grid1_id//'x'//grid_id, tmp, corner=start, edge_lengths=nread)
    952         j1_tmp = tmp(:,1)
    953         call read_data(fileobj, 'I_'//grid_id//'_'//grid1_id//'x'//grid_id, tmp, corner=start, edge_lengths=nread)
    954         i2_tmp = tmp(:,1)
    955         call read_data(fileobj, 'J_'//grid_id//'_'//grid1_id//'x'//grid_id, tmp, corner=start, edge_lengths=nread)
    956         j2_tmp = tmp(:,1)
    957         call read_data(fileobj, 'AREA_'//grid1_id//'x'//grid_id, tmp, corner=start, edge_lengths=nread)
    958         area_tmp = tmp(:,1)
    959         if(use_higher_order) then
    960            call read_data(fileobj, 'DI_'//grid1_id//'x'//grid_id, tmp, corner=start, edge_lengths=nread)
    961            di_tmp = tmp(:,1)
    962            call read_data(fileobj, 'DJ_'//grid1_id//'x'//grid_id, tmp, corner=start, edge_lengths=nread)
    963            dj_tmp = tmp(:,1)
    964         end if
    965         deallocate(tmp)
    966      case(VERSION2)
    967         nread(1) = 2; start(2) = isc; nread(2) = nxgrid_local
    968         allocate(tmp(2, isc:iec))

Page 21          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

    969         call read_data(fileobj, "tile1_cell", tmp, corner=start, edge_lengths=nread)
    970         i1_tmp(isc:iec) = tmp(1, isc:iec)
    971         j1_tmp(isc:iec) = tmp(2, isc:iec)
    972         call read_data(fileobj, "tile2_cell", tmp, corner=start, edge_lengths=nread)
    973         i2_tmp(isc:iec) = tmp(1, isc:iec)
    974         j2_tmp(isc:iec) = tmp(2, isc:iec)
    975         if(use_higher_order) then
    976            call read_data(fileobj, "tile1_distance", tmp, corner=start, edge_lengths=nread)
    977            di_tmp(isc:iec) = tmp(1, isc:iec)
    978            dj_tmp(isc:iec) = tmp(2, isc:iec)
    979         end if
    980         start = 1; nread = 1
    981         start(1) = isc; nread(1) = nxgrid_local
    982         deallocate(tmp)
    983         allocate(tmp(isc:iec,1) )
    984 
    985         call read_data(fileobj, "xgrid_area", tmp(:,1:1), corner=start, edge_lengths=nread)
    986 ! check the units of "xgrid_area
    987         call get_variable_units(fileobj, "xgrid_area", attvalue)
    988 
    989         if( trim(attvalue) == 'm2' ) then
    990            garea = 4.0*PI*RADIUS*RADIUS;
    991            area_tmp = tmp(:,1)/garea
    992         else if( trim(attvalue) == 'none' ) then
    993            area_tmp = tmp(:,1)
    994         else
    995            call error_mesg('xgrid_mod', 'In file '//trim(grid_file)//', xgrid_area units = '// &
    996                 trim(attvalue)//' should be "m2" or "none"', FATAL)
    997         endif
    998 
    999 !--- if field "scale" exist, read this field. Normally this
   1000 !--- field only exist in landXocean exchange grid cell.
   1001         if(grid1_id == 'LND' .AND. grid_id == 'OCN') then
   1002            if(variable_exists(fileobj, "scale")) then
   1003               allocate(scale(isc:iec))
   1004               write(out_unit, *)"NOTE from load_xgrid(xgrid_mod): field 'scale' exist in the file "// &
   1005                    trim(grid_file)//", this field will be read and the exchange grid cell area will be multiplied by scale"
   1006               call read_data(fileobj, "scale", tmp, corner=start, edge_lengths=nread)
   1007               scale = tmp(:,1)
   1008               scale_exist = .true.
   1009            endif
   1010         endif
   1011         deallocate(tmp)
   1012      end select
   1013 
   1014 !---z1l: The following change is for the situation that some processor is masked out.
   1015 !---loop through all the pe to see if side 1 and side of each exchange grid is on some processor
   1016      nxgrid_local_orig = nxgrid_local
   1017      allocate(i1(isc:iec), j1(isc:iec), i2(isc:iec), j2(isc:iec), area(isc:iec) )
   1018      if(use_higher_order) allocate(di(isc:iec), dj(isc:iec))
   1019      pos = isc-1
   1020      do l = isc, iec
   1021         found = .false.
   1022 !--- first check if the exchange grid is on one of side 1 processor
   1023         do p = 0, npes - 1
   1024            if(grid1%tile(p) == tile1) then
   1025               if(in_box_nbr(i1_tmp(l), j1_tmp(l), grid1, p)) then

Page 22          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

   1026                  found = .true.
   1027                  exit
   1028               endif
   1029            endif
   1030         enddo
   1031 !--- Then check if the exchange grid is on one of side 2 processor
   1032         if( found ) then
   1033            do p = 0, npes - 1
   1034               if(grid%tile(p) == tile2) then
   1035                  if (in_box_nbr(i2_tmp(l), j2_tmp(l), grid, p)) then
   1036                     pos = pos+1
   1037                     i1(pos) = i1_tmp(l)
   1038                     j1(pos) = j1_tmp(l)
   1039                     i2(pos) = i2_tmp(l)
   1040                     j2(pos) = j2_tmp(l)
   1041                     area(pos) = area_tmp(l)
   1042                     if(use_higher_order) then
   1043                        di(pos) = di_tmp(l)
   1044                        dj(pos) = dj_tmp(l)
   1045                     endif
   1046                     exit
   1047                  endif
   1048               endif
   1049            enddo
   1050         endif
   1051      enddo
   1052 
   1053      deallocate(i1_tmp, i2_tmp, j1_tmp, j2_tmp, area_tmp)
   1054      if(use_higher_order) deallocate( di_tmp, dj_tmp)
   1055      iec = pos
   1056      if(iec .GE. isc) then
   1057         nxgrid_local = iec - isc + 1
   1058      else
   1059         nxgrid_local = 0
   1060      endif
   1061   else
   1062      nxgrid_local = 0
   1063      nxgrid_local_orig = 0
   1064   endif
   1065 
   1066   call close_file(fileobj)
   1067 
   1068   call mpp_clock_end(id_load_xgrid1)
   1069 
   1070   if(is_distribute) then
   1071 !--- Since the xgrid is distributed according to side 2 grid. Send all the xgrid to its own side 2.
   1072 !--- Also need to send the xgrid to its own side 1 for the reproducing ability between processor count.
   1073 !--- first find out number of points need to send to other pe and fill the send buffer.
   1074      nsend1(:) = 0; nrecv1(:) = 0
   1075      nsend2(:) = 0; nrecv2(:) = 0
   1076      ibuf1(:)= 0; ibuf2(:)= 0
   1077 
   1078      call mpp_clock_begin(id_load_xgrid2)
   1079      if(nxgrid_local>0) then
   1080         allocate( send_buffer(nxgrid_local * (nset1+nset2)) )
   1081         pos = 0
   1082         do p = 0, npes - 1

Page 23          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

   1083            send_buffer_pos(p) = pos
   1084            if(grid%tile(p) == tile2) then
   1085               do l = isc, iec
   1086                  if(in_box_nbr(i2(l), j2(l), grid, p) ) then
   1087                     nsend2(p) = nsend2(p) + 1
   1088                     send_buffer(pos+1) = i1(l)
   1089                     send_buffer(pos+2) = j1(l)
   1090                     send_buffer(pos+3) = i2(l)
   1091                     send_buffer(pos+4) = j2(l)
   1092                     send_buffer(pos+5) = area(l)
   1093                     if(use_higher_order) then
   1094                        send_buffer(pos+6) = di(l)
   1095                        send_buffer(pos+7) = dj(l)
   1096                     endif
   1097                     if(scale_exist) send_buffer(pos+nset2) = scale(l)
   1098                     pos = pos + nset2
   1099                  endif
   1100               enddo
   1101            endif
   1102            if(grid1%tile(p) == tile1) then
   1103               do l = isc, iec
   1104                  if(in_box_nbr(i1(l), j1(l), grid1, p)) then
   1105                     nsend1(p) = nsend1(p) + 1
   1106                     send_buffer(pos+1) = i1(l)
   1107                     send_buffer(pos+2) = j1(l)
   1108                     send_buffer(pos+3) = i2(l)
   1109                     send_buffer(pos+4) = j2(l)
   1110                     send_buffer(pos+5) = area(l)
   1111                     if(use_higher_order) then
   1112                        send_buffer(pos+6) = di(l)
   1113                        send_buffer(pos+7) = dj(l)
   1114                     endif
   1115                     pos = pos + nset1
   1116                  endif
   1117               enddo
   1118            endif
   1119         enddo
   1120      endif
   1121      call mpp_clock_end(id_load_xgrid2)
   1122 
   1123 !--- send the size of the data on side 1 to be sent over.
   1124      call mpp_clock_begin(id_load_xgrid3)
   1125 
   1126      if (do_alltoall) then
   1127         do p = 0, npes-1
   1128            ibuf1(2*p+1) = nsend1(p)
   1129            ibuf1(2*p+2) = nsend2(p)
   1130         enddo
   1131         call mpp_alltoall(ibuf1, 2, ibuf2, 2)
   1132      else
   1133         do n = 0, npes-1
   1134            p = mod(mypos+npes-n, npes)
   1135            if(.not. subset_rootpe(p)) cycle
   1136            call mpp_recv( ibuf2(2*p+1), glen=2, from_pe=pelist(p), block=.FALSE., tag=COMM_TAG_1)
   1137         enddo
   1138 
   1139         if(nxgrid_local_orig>0) then

Page 24          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

   1140            do n = 0, npes-1
   1141               p = mod(mypos+n, npes)
   1142               ibuf1(2*p+1) = nsend1(p)
   1143               ibuf1(2*p+2) = nsend2(p)
   1144               call mpp_send( ibuf1(2*p+1), plen=2, to_pe=pelist(p), tag=COMM_TAG_1)
   1145            enddo
   1146         endif
   1147         call mpp_sync_self(check=EVENT_RECV)
   1148      endif
   1149      do p = 0, npes-1
   1150         nrecv1(p) = ibuf2(2*p+1)
   1151         nrecv2(p) = ibuf2(2*p+2)
   1152      enddo
   1153 
   1154      if(.not. do_alltoall) call mpp_sync_self()
   1155      call mpp_clock_end(id_load_xgrid3)
   1156      call mpp_clock_begin(id_load_xgrid4)
   1157      pos = 0
   1158      do p = 0, npes - 1
   1159         recv_buffer_pos(p) = pos
   1160         pos = pos + nrecv1(p) * nset1 + nrecv2(p) * nset2
   1161      end do
   1162 
   1163 !--- now get the data
   1164      nxgrid1 = sum(nrecv1)
   1165      nxgrid2 = sum(nrecv2)
   1166      if(nxgrid1>0 .OR. nxgrid2>0) allocate(recv_buffer(nxgrid1*nset1+nxgrid2*nset2))
   1167 
   1168      if (do_alltoallv) then
   1169 ! Construct the send and receive counters
   1170         send_cnt(:) = nset1 * nsend1(:) + nset2 * nsend2(:)
   1171         recv_cnt(:) = nset1 * nrecv1(:) + nset2 * nrecv2(:)
   1172 
   1173         call mpp_alltoall(send_buffer, send_cnt, send_buffer_pos, &
   1174                           recv_buffer, recv_cnt, recv_buffer_pos)
   1175      else
   1176         do n = 0, npes-1
   1177            p = mod(mypos+npes-n, npes)
   1178            nrecv = nrecv1(p)*nset1+nrecv2(p)*nset2
   1179            if(nrecv==0) cycle
   1180            pos = recv_buffer_pos(p)
   1181            call mpp_recv(recv_buffer(pos+1), glen=nrecv, from_pe=pelist(p), &
   1182                          block=.FALSE., tag=COMM_TAG_2)
   1183         end do
   1184 
   1185         do n = 0, npes-1
   1186            p = mod(mypos+n, npes)
   1187            nsend = nsend1(p)*nset1 + nsend2(p)*nset2
   1188            if(nsend==0) cycle
   1189            pos = send_buffer_pos(p)
   1190            call mpp_send(send_buffer(pos+1), plen=nsend, to_pe=pelist(p), &
   1191                          tag=COMM_TAG_2)
   1192         end do
   1193         call mpp_sync_self(check=EVENT_RECV)
   1194      end if
   1195      call mpp_clock_end(id_load_xgrid4)
   1196 !--- unpack buffer.

Page 25          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

   1197      if( nxgrid_local>0) then
   1198         deallocate(i1,j1,i2,j2,area)
   1199      endif
   1200 
   1201      allocate(i1(nxgrid2), j1(nxgrid2))
   1202      allocate(i2(nxgrid2), j2(nxgrid2))
   1203      allocate(area(nxgrid2))
   1204      allocate(i1_side1(nxgrid1), j1_side1(nxgrid1))
   1205      allocate(i2_side1(nxgrid1), j2_side1(nxgrid1))
   1206      allocate(area_side1(nxgrid1))
   1207      if(use_higher_order) then
   1208         if(nxgrid_local>0) deallocate(di,dj)
   1209         allocate(di      (nxgrid2), dj      (nxgrid2))
   1210         allocate(di_side1(nxgrid1), dj_side1(nxgrid1))
   1211      endif
   1212      if(scale_exist) then
   1213         if(nxgrid_local>0)deallocate(scale)
   1214         allocate(scale(nxgrid2))
   1215      endif
   1216      pos = 0
   1217      l1 = 0; l2 = 0
   1218      do p = 0,npes-1
   1219         do n = 1, nrecv2(p)
   1220            l2 = l2+1
   1221            i1(l2) = recv_buffer(pos+1)
   1222            j1(l2) = recv_buffer(pos+2)
   1223            i2(l2) = recv_buffer(pos+3)
   1224            j2(l2) = recv_buffer(pos+4)
   1225            area(l2) = recv_buffer(pos+5)
   1226            if(use_higher_order) then
   1227               di(l2) = recv_buffer(pos+6)
   1228               dj(l2) = recv_buffer(pos+7)
   1229            endif
   1230            if(scale_exist)scale(l2) = recv_buffer(pos+nset2)
   1231            pos = pos + nset2
   1232         enddo
   1233         do n = 1, nrecv1(p)
   1234            l1 = l1+1
   1235            i1_side1(l1) = recv_buffer(pos+1)
   1236            j1_side1(l1) = recv_buffer(pos+2)
   1237            i2_side1(l1) = recv_buffer(pos+3)
   1238            j2_side1(l1) = recv_buffer(pos+4)
   1239            area_side1(l1) = recv_buffer(pos+5)
   1240            if(use_higher_order) then
   1241               di_side1(l1) = recv_buffer(pos+6)
   1242               dj_side1(l1) = recv_buffer(pos+7)
   1243            endif
   1244            pos = pos + nset1
   1245         enddo
   1246      enddo
   1247      call mpp_sync_self()
   1248      if(allocated(send_buffer)) deallocate(send_buffer)
   1249      if(allocated(recv_buffer)) deallocate(recv_buffer)
   1250 
   1251   else
   1252      nxgrid1 = nxgrid
   1253      nxgrid2 = nxgrid

Page 26          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

   1254      i1_side1 => i1; j1_side1 => j1
   1255      i2_side1 => i2; j2_side1 => j2
   1256      area_side1 => area
   1257      if(use_higher_order) then
   1258         di_side1 => di
   1259         dj_side1 => dj
   1260      endif
   1261   endif
   1262 
   1263   call mpp_clock_begin(id_load_xgrid5)
   1264 
   1265 
   1266   size_prev = grid%size
   1267 
   1268   if(grid%tile_me == tile2) then
   1269      do l=1,nxgrid2
   1270         if (in_box_me(i2(l), j2(l), grid) ) then
   1271            grid%size = grid%size + 1
   1272 ! exclude the area overlapped with parent grid
   1273            if( grid1_id .NE. "ATM" .OR. tile1 .NE. tile_parent .OR.  &
   1274                 .NOT. in_box(i1(l), j1(l), is_parent, ie_parent, js_parent, je_parent) ) then
   1275               if(grid%is_ug) then
   1276                  lll = grid%l_index((j2(l)-1)*grid%im+i2(l))
   1277                  grid%area(lll,1) = grid%area(lll,1)+area(l)
   1278               else
   1279                  grid%area(i2(l),j2(l)) = grid%area(i2(l),j2(l))+area(l)
   1280               endif
   1281            endif
   1282            do p=0,xmap%npes-1
   1283               if(grid1%tile(p) == tile1) then
   1284                  if (in_box_nbr(i1(l), j1(l), grid1, p)) then
   1285                     xmap%your1my2(p) = .true.
   1286                  end if
   1287               end if
   1288            end do
   1289         end if
   1290      end do
   1291    end if
   1292 
   1293   if(grid%size > size_prev) then
   1294      if(size_prev > 0) then ! need to extend data
   1295         allocate(x_local(size_prev))
   1296         x_local = grid%x
   1297         if(ASSOCIATED(grid%x)) deallocate(grid%x)
   1298         allocate( grid%x( grid%size ) )
   1299         grid%x(1:size_prev) = x_local
   1300         deallocate(x_local)
   1301      else
   1302         allocate( grid%x( grid%size ) )
   1303         grid%x%di = 0.0; grid%x%dj = 0.0
   1304      end if
   1305   end if
   1306 
   1307   ll = size_prev
   1308   if( grid%tile_me == tile2 ) then ! me is tile2
   1309      do l=1,nxgrid2
   1310         if (in_box_me(i2(l), j2(l), grid)) then

Page 27          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

   1311 ! insert in this grids cell pattern list and add area to side 2 area
   1312            ll = ll + 1
   1313            grid%x(ll)%i1   = i1(l); grid%x(ll)%i2   = i2(l)
   1314            grid%x(ll)%j1   = j1(l); grid%x(ll)%j2   = j2(l)
   1315            if(grid%is_ug) then
   1316               grid%x(ll)%l2   = grid%l_index((j2(l)-1)*grid%im + i2(l))
   1317            endif
   1318 !           if(grid1%is_ug) then
   1319 !              grid1%x(ll)%l1   = grid1%l_index((j1(l)-1)*grid1%im + i1(l))
   1320 !           endif
   1321            grid%x(ll)%tile = tile1
   1322            grid%x(ll)%area = area(l)
   1323            if(scale_exist) then
   1324               grid%x(ll)%scale = scale(l)
   1325            else
   1326               grid%x(ll)%scale = 1.0
   1327            endif
   1328            if(use_higher_order) then
   1329               grid%x(ll)%di  = di(l)
   1330               grid%x(ll)%dj  = dj(l)
   1331            end if
   1332 
   1333            if (make_exchange_reproduce) then
   1334               do p=0,xmap%npes-1
   1335                  if(grid1%tile(p) == tile1) then
   1336                     if (in_box_nbr(i1(l), j1(l), grid1, p)) then
   1337                        grid%x(ll)%pe = p + xmap%root_pe
   1338                     end if
   1339                  end if
   1340               end do
   1341            end if ! make_exchange reproduce
   1342         end if
   1343      end do
   1344   end if
   1345 
   1346   if(grid%id == xmap%grids(size(xmap%grids(:)))%id) then
   1347      last_grid = .true.
   1348   else
   1349      last_grid = .false.
   1350   endif
   1351 
   1352   size_repro = 0
   1353   if(grid1%tile_me == tile1) then
   1354      if(associated(iarray)) then
   1355         nxgrid1_old = size(iarray(:))
   1356      else
   1357         nxgrid1_old = 0
   1358      endif
   1359 
   1360      allocate(y2m1_pe(nxgrid1))
   1361      if(.not. last_grid ) allocate(pos_s(0:xmap%npes-1))
   1362      y2m1_pe = -1
   1363      if(nxgrid1_old > 0) then
   1364         do p=0,xmap%npes-1
   1365            y2m1_size(p) = xmap%your2my1_size(p)
   1366         enddo
   1367      else

Page 28          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

   1368         y2m1_size = 0
   1369      endif
   1370 
   1371      do l=1,nxgrid1
   1372         if (in_box_me(i1_side1(l), j1_side1(l), grid1) ) then
   1373            if(grid1%is_ug) then
   1374               lll = grid1%l_index((j1_side1(l)-1)*grid1%im+i1_side1(l))
   1375               grid1%area(lll,1) = grid1%area(lll,1) + area_side1(l)
   1376            else
   1377               grid1%area(i1_side1(l),j1_side1(l)) = grid1%area(i1_side1(l),j1_side1(l))+area_side1(l)
   1378            endif
   1379            do p=0,xmap%npes-1
   1380               if (grid%tile(p) == tile2) then
   1381                  if (in_box_nbr(i2_side1(l), j2_side1(l), grid, p))  then
   1382                     xmap%your2my1(p) = .true.
   1383                     y2m1_pe(l) = p
   1384                     y2m1_size(p) = y2m1_size(p) + 1
   1385                  endif
   1386               endif
   1387            enddo
   1388            size_repro = size_repro + 1
   1389         endif
   1390      enddo
   1391      pos_x = 0
   1392      do p = 1, npes-1
   1393         pos_x(p) = pos_x(p-1) + y2m1_size(p-1)
   1394      enddo
   1395 
   1396      if(.not. last_grid) pos_s(:) = pos_x(:)
   1397 
   1398      if(nxgrid1_old > 0) then
   1399         y2m1_size(:) = xmap%your2my1_size(:)
   1400         iarray2 => iarray
   1401         jarray2 => jarray
   1402         allocate(iarray(nxgrid1+nxgrid1_old), jarray(nxgrid1+nxgrid1_old))
   1403 ! copy the i-j index
   1404         do p=0,xmap%npes-1
   1405            do n = 1, xmap%your2my1_size(p)
   1406               iarray(pos_x(p)+n) = iarray2(pos_s(p)+n)
   1407               jarray(pos_x(p)+n) = jarray2(pos_s(p)+n)
   1408            enddo
   1409         enddo
   1410         deallocate(iarray2, jarray2)
   1411      else
   1412         allocate(iarray(nxgrid1), jarray(nxgrid1))
   1413         iarray(:) = 0
   1414         jarray(:) = 0
   1415         y2m1_size(:) = 0
   1416      endif
   1417 
   1418      do l=1,nxgrid1
   1419         p = y2m1_pe(l)
   1420         if(p<0) cycle
   1421         found = .false.
   1422         if(y2m1_size(p) > 0) then
   1423            pos = pos_x(p)+y2m1_size(p)
   1424            if( i1_side1(l) == iarray(pos) .AND. j1_side1(l) == jarray(pos) ) then

Page 29          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

   1425               found = .true.
   1426            else
   1427 !---may need to replace with a fast search algorithm
   1428               do n = 1, y2m1_size(p)
   1429                  pos = pos_x(p)+n
   1430                  if(i1_side1(l) == iarray(pos) .AND. j1_side1(l) == jarray(pos)) then
   1431                     found = .true.
   1432                     exit
   1433                  endif
   1434               enddo
   1435            endif
   1436         endif
   1437         if( (.NOT. found) .OR. monotonic_exchange ) then
   1438            y2m1_size(p) = y2m1_size(p)+1
   1439            pos = pos_x(p)+y2m1_size(p)
   1440            iarray(pos) = i1_side1(l)
   1441            jarray(pos) = j1_side1(l)
   1442         endif
   1443      end do
   1444      xmap%your2my1_size(:) =  y2m1_size(:)
   1445      deallocate(y2m1_pe)
   1446      if(last_grid) then
   1447         deallocate(iarray, jarray)
   1448         if(allocated(pos_s)) deallocate(pos_s)
   1449      end if
   1450   end if
   1451 
   1452   if (grid1%tile_me == tile1 .and. size_repro > 0) then
   1453      ll_repro = grid%size_repro
   1454      grid%size_repro = ll_repro + size_repro
   1455      if(ll_repro > 0) then  ! extend data
   1456         allocate(x_local(ll_repro))
   1457         x_local = grid%x_repro
   1458         if(ASSOCIATED(grid%x_repro)) deallocate(grid%x_repro)
   1459         allocate( grid%x_repro(grid%size_repro ) )
   1460         grid%x_repro(1:ll_repro) = x_local
   1461         deallocate(x_local)
   1462      else
   1463         allocate( grid%x_repro( grid%size_repro ) )
   1464         grid%x_repro%di = 0.0; grid%x_repro%dj = 0.0
   1465      end if
   1466      do l=1,nxgrid1
   1467         if (in_box_me(i1_side1(l),j1_side1(l), grid1) ) then
   1468            ll_repro = ll_repro + 1
   1469            grid%x_repro(ll_repro)%i1   = i1_side1(l); grid%x_repro(ll_repro)%i2   = i2_side1(l)
   1470            grid%x_repro(ll_repro)%j1   = j1_side1(l); grid%x_repro(ll_repro)%j2   = j2_side1(l)
   1471            if(grid1%is_ug) then
   1472               grid%x_repro(ll_repro)%l1 = grid1%l_index((j1_side1(l)-1)*grid1%im+i1_side1(l))
   1473            endif
   1474            if(grid%is_ug) then
   1475 !              grid%x_repro(ll_repro)%l2 = grid%l_index((j2_side1(l)-1)*grid%im+i2_side1(l))
   1476            endif
   1477            grid%x_repro(ll_repro)%tile = tile1
   1478            grid%x_repro(ll_repro)%area = area_side1(l)
   1479            if(use_higher_order) then
   1480               grid%x_repro(ll_repro)%di  = di_side1(l)
   1481               grid%x_repro(ll_repro)%dj  = dj_side1(l)

Page 30          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

   1482            end if
   1483 
   1484            do p=0,xmap%npes-1
   1485               if(grid%tile(p) == tile2) then
   1486                  if (in_box_nbr(i2_side1(l), j2_side1(l), grid, p)) then
   1487                     grid%x_repro(ll_repro)%pe = p + xmap%root_pe
   1488                  end if
   1489               end if
   1490            end do
   1491         end if ! make_exchange_reproduce
   1492      end do
   1493   end if
   1494 
   1495   deallocate(i1, j1, i2, j2, area)
   1496   if(use_higher_order) deallocate(di, dj)
   1497   if(scale_exist) deallocate(scale)
   1498   if(is_distribute) then
   1499      deallocate(i1_side1, j1_side1, i2_side1, j2_side1, area_side1)
   1500      if(use_higher_order) deallocate(di_side1, dj_side1)
   1501   endif
   1502 
   1503   i1=>NULL(); j1=>NULL(); i2=>NULL(); j2=>NULL()
   1504   call mpp_clock_end(id_load_xgrid5)
   1505 
   1506 
   1507 
   1508 end subroutine load_xgrid


ENTRY POINTS

  Name                                
                                      
 xgrid_mod_mp_load_xgrid_             

Page 31          Source Listing                  LOAD_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1248                                 scalar                    1248,1249,1448                    
 AREA                       Local  813      R(8)            8     1     1        PTR              813,1017,1041,1092,1110,1198,1203,
                                                                                                  1225,1256,1277,1279,1322,1495     
 AREA_SIDE1                 Local  821      R(8)            8     1     1        PTR              821,1206,1239,1256,1375,1377,1478,
                                                                                                  1499                              
 AREA_TMP                   Local  817      R(8)            8     1     1        PTR              817,940,958,991,993,1041,1053     
 ASSOCIATED                 Func   1297                                 scalar                    1297,1354,1458                    
 ATTVALUE                   Local  838      CHAR            128         scalar                    987,989,992,996                   
 CLOSE_FILE                 Local  1066                                 scalar   PRIV             272,1066,1578,1674,1751,1832,2080,
                                                                                                  2132,2138,2182,2197               
 COMM_TAG_1                 Param  1136     I(4)            4           scalar   PRIV             247,1136,1144,6069,6077           
 COMM_TAG_2                 Param  1182     I(4)            4           scalar   PRIV             247,1182,1191,6115,6124           
 COMPRESSED_READ_2D         Subr   949                                           PRIV             949,951,953,955,957,960,962,969,97
                                                                                                  2,976,985,1006,1636,1637,1643,1650
                                                                                                  ,1747                             
 CUR_IND                    Local  834      I(4)            4           scalar                    912,916,918,919                   
 DI                         Local  812      R(8)            8     1     1        PTR              812,1018,1043,1094,1112,1208,1209,
                                                                                                  1227,1258,1329,1496               
 DIMENSION_EXISTS           Func   882      L(4)            4           scalar   PRIV             274,882                           
 DI_SIDE1                   Local  820      R(8)            8     1     1        PTR              820,1210,1241,1258,1480,1500      
 DI_TMP                     Local  816      R(8)            8     1     1        PTR              816,941,961,977,1043,1054         
 DJ                         Local  812      R(8)            8     1     1        PTR              812,1018,1044,1095,1113,1208,1209,
                                                                                                  1228,1259,1330,1496               
 DJ_SIDE1                   Local  820      R(8)            8     1     1        PTR              820,1210,1242,1259,1481,1500      
 DJ_TMP                     Local  816      R(8)            8     1     1        PTR              816,941,963,978,1044,1054         
 DO_ALLTOALL                Local  1126     L(4)            4           scalar                    335,340,1126,1154,2975,6059,6087  
 DO_ALLTOALLV               Local  1168     L(4)            4           scalar                    336,340,1168,6101                 
 EVENT_RECV                 Param  1147     I(4)            4           scalar   PRIV             243,1147,1193,2739,2989,3064,3844,
                                                                                                  4049,4187,4324,5393,5515,5649,6080
                                                                                                  ,6126                             
 FILEOBJ                    Local  854      FMSNETCDFFILE_T 872         scalar                    861,882,883,888,949,951,953,955,95
                                                                                                  7,960,962,969,972,976,985,987,1002
                                                                                                  ,1006,1066                        
 FMSNETCDFFILE_T            Type   854                                  scalar                    272,854,1607,1727,1807,2326       
 FOUND                      Local  837      L(4)            4           scalar                    1021,1026,1032,1421,1425,1431,1437
 GAREA                      Local  832      R(8)            8           scalar                    990,991                           
 GET_DIMENSION_SIZE         Subr   883                                           PRIV             273,883,1617,1618,1882,2141       
 GET_MOSAIC_XGRID_SIZE      Func   888      I(4)            4           scalar   PRIV             265,888                           
 GET_VARIABLE_UNITS         Subr   987                                           PRIV             274,987                           
 GRID                       Dummy  802      GRID_TYPE       4888        scalar   ARG,INOUT        857,1034,1035,1084,1086,1266,1268,
                                                                                                  1270,1271,1275,1276,1277,1279,1293
                                                                                                  ,1296,1297,1298,1299,1302,1303,130
                                                                                                  8,1310,1313,1314,1315,1316,1321,13
                                                                                                  22,1324,1326,1329,1330,1337,1346,1
                                                                                                  380,1381,1453,1454,1457,1458,1459,
                                                                                                  1460,1463,1464,1469,1470,1472,1474
                                                                                                  ,1477,1478,1480,1481,1485,1486,148
                                                                                                  7                                 
 GRID1                      Local  825      GRID_TYPE       4888        scalar   PTR,SAVE         825,866,1024,1025,1102,1104,1283,1
                                                                                                  284,1335,1336,1353,1372,1373,1374,
                                                                                                  1375,1377,1452,1467,1471,1472     

Page 32          Source Listing                  LOAD_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GRID1_ID                   Dummy  802      CHAR            3           scalar   ARG,IN           857,882,883,949,951,953,955,957,96
                                                                                                  0,962,1001,1273                   
 GRID_FILE                  Dummy  802      CHAR                        scalar   ARG,IN           857,861,862,995,1005              
 GRID_ID                    Dummy  802      CHAR            3           scalar   ARG,IN           857,882,883,949,951,953,955,957,96
                                                                                                  0,962,1001                        
 GRID_TYPE                  Type   804                      4888        scalar   PRIV             541,597,804,825,1521,1597,1791,252
                                                                                                  9,2828,3347,3396,3748,3767,3898,41
                                                                                                  32,4262,4374,4432,4500,4582,5433,5
                                                                                                  460,5588,5677,5706,5722,5753,5774,
                                                                                                  6452,6664                         
 I1                         Local  810      I(4)            4     1     1        PTR              810,1017,1037,1088,1104,1106,1198,
                                                                                                  1201,1221,1254,1274,1284,1313,1336
                                                                                                  ,1495,1503                        
 I1_SIDE1                   Local  818      I(4)            4     1     1        PTR              818,1204,1235,1254,1372,1374,1377,
                                                                                                  1424,1430,1440,1467,1469,1472,1499
 I1_TMP                     Local  814      I(4)            4     1     1        PTR              814,940,950,970,1025,1037,1053    
 I2                         Local  811      I(4)            4     1     1        PTR              811,1017,1039,1086,1090,1108,1198,
                                                                                                  1202,1223,1255,1270,1276,1279,1310
                                                                                                  ,1313,1316,1495,1503              
 I2_SIDE1                   Local  819      I(4)            4     1     1        PTR              819,1205,1237,1255,1381,1469,1486,
                                                                                                  1499                              
 I2_TMP                     Local  815      I(4)            4     1     1        PTR              815,940,954,973,1035,1039,1053    
 IARRAY                     Local  848      I(4)            4     1     1        PTR,SAVE         1354,1355,1400,1402,1406,1412,1413
                                                                                                  ,1424,1430,1440,1447              
 IARRAY2                    Local  850      I(4)            4     1     1        PTR              850,1400,1406,1410                
 IBEGIN                     Local  844      I(4)            4     1     0                         896,899,907                       
 IBUF1                      Local  845      I(4)            4     1     0                         1076,1128,1129,1131,1142,1143,1144
 IBUF2                      Local  845      I(4)            4     1     0                         1076,1131,1136,1150,1151          
 IEC                        Local  833      I(4)            4           scalar                    900,903,908,926,938,939,940,941,96
                                                                                                  8,970,971,973,974,977,978,983,1003
                                                                                                  ,1017,1018,1020,1055,1056,1057,108
                                                                                                  5,1103                            
 IEND                       Local  844      I(4)            4     1     0                         896,900,908                       
 IE_PARENT                  Local  1274     I(4)            4           scalar                    667,1274,2013,3233,6207,6876      
 IN_BOX_ME@0                Local  1270     L(4)            4           scalar                                                      
 IN_BOX_NBR@0               Local  1025     L(4)            4           scalar                                                      
 ISC                        Local  833      I(4)            4           scalar                    899,903,907,926,938,939,940,941,94
                                                                                                  7,967,968,970,971,973,974,977,978,
                                                                                                  981,983,1003,1017,1018,1019,1020,1
                                                                                                  056,1057,1085,1103                
 IS_DISTRIBUTE              Local  830      L(4)            4           scalar                    830,923,925,1070,1498             
 IS_PARENT                  Local  1274     I(4)            4           scalar                    667,1274,2013,3233,6207,6876      
 J1                         Local  810      I(4)            4     1     1        PTR              810,1017,1038,1089,1104,1107,1198,
                                                                                                  1201,1222,1254,1274,1284,1314,1336
                                                                                                  ,1495,1503                        
 J1_SIDE1                   Local  818      I(4)            4     1     1        PTR              818,1204,1236,1254,1372,1374,1377,
                                                                                                  1424,1430,1441,1467,1470,1472,1499
 J1_TMP                     Local  814      I(4)            4     1     1        PTR              814,940,952,971,1025,1038,1053    
 J2                         Local  811      I(4)            4     1     1        PTR              811,1017,1040,1086,1091,1109,1198,
                                                                                                  1202,1224,1255,1270,1276,1279,1310
                                                                                                  ,1314,1316,1495,1503              
 J2_SIDE1                   Local  819      I(4)            4     1     1        PTR              819,1205,1238,1255,1381,1470,1486,
                                                                                                  1499                              
 J2_TMP                     Local  815      I(4)            4     1     1        PTR              815,940,956,974,1035,1040,1053    
 JARRAY                     Local  848      I(4)            4     1     1        PTR,SAVE         1401,1402,1407,1412,1414,1424,1430

Page 33          Source Listing                  LOAD_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,1441,1447                        
 JARRAY2                    Local  850      I(4)            4     1     1        PTR              850,1401,1407,1410                
 JE_PARENT                  Local  1274     I(4)            4           scalar                    667,1274,2013,3233,6207,6876      
 JS_PARENT                  Local  1274     I(4)            4           scalar                    667,1274,2013,3233,6207,6876      
 L                          Local  826      I(4)            4           scalar                    1020,1025,1035,1037,1038,1039,1040
                                                                                                  ,1041,1043,1044,1085,1086,1088,108
                                                                                                  9,1090,1091,1092,1094,1095,1097,11
                                                                                                  03,1104,1106,1107,1108,1109,1110,1
                                                                                                  112,1113,1269,1270,1274,1276,1277,
                                                                                                  1279,1284,1309,1310,1313,1314,1316
                                                                                                  ,1322,1324,1329,1330,1336,1371,137
                                                                                                  2,1374,1375,1377,1381,1383,1418,14
                                                                                                  19,1424,1430,1440,1441,1466,1467,1
                                                                                                  469,1470,1472,1478,1480,1481,1486 
 L1                         Local  835      I(4)            4           scalar                    1217,1234,1235,1236,1237,1238,1239
                                                                                                  ,1241,1242                        
 L2                         Local  835      I(4)            4           scalar                    1217,1220,1221,1222,1223,1224,1225
                                                                                                  ,1227,1228,1230                   
 LAST_GRID                  Local  851      L(4)            4           scalar                    1347,1349,1361,1396,1446          
 LL                         Local  826      I(4)            4           scalar                    1307,1312,1313,1314,1316,1321,1322
                                                                                                  ,1324,1326,1329,1330,1337         
 LLL                        Local  853      I(4)            4           scalar                    1276,1277,1374,1375               
 LL_REPRO                   Local  826      I(4)            4           scalar                    1453,1454,1455,1456,1460,1468,1469
                                                                                                  ,1470,1472,1477,1478,1480,1481,148
                                                                                                  7                                 
 LOAD_XGRID                 Subr   802                                                            2094,2183,6956,7029               
 LOAD_XGRID_USE_MPP_IO      Subr   857                                           PRIV             692,857                           
 LOWERCASE                  Func   882      CHAR                        scalar   TGT,PRIV         241,882,883,1878,2121,2122,6744,69
                                                                                                  79,6980                           
 M                          Local  835      I(4)            4           scalar                                                      
 MAKE_EXCHANGE_REPRODUCE    Local  1333     L(4)            4           scalar                    328,339,1333,2209,2244,3286,3632,5
                                                                                                  176,6266,7052,7099                
 MOD                        Func   1134                                 scalar                    1134,1141,1177,1186               
 MPP_ALLTOALL               Local  1131                                 scalar   PRIV             245,1131,1173,2976,6064,6106      
 MPP_ALLTOALL_INT4          Subr   1131                                          PRIV             1131,2976,6064                    
 MPP_ALLTOALL_REAL8_V       Subr   1173                                          PRIV             1173,6106                         
 MPP_CLOCK_BEGIN            Subr   937                                           PRIV             246,937,1078,1124,1156,1263,1809,1
                                                                                                  855,2238,2251,2255,3755,3775,3814,
                                                                                                  3911,4144,4275,5364,5439,5472,5600
                                                                                                  ,5684,5874,6011,6057,6089,6196,668
                                                                                                  1,6721,7093,7106,7110             
 MPP_CLOCK_END              Subr   1068                                          PRIV             246,1068,1121,1155,1195,1504,2199,
                                                                                                  2249,2253,2312,2314,3761,3789,3877
                                                                                                  ,4115,4248,4346,5426,5445,5574,567
                                                                                                  0,5698,6001,6054,6088,6128,6437,70
                                                                                                  42,7104,7108,7167,7169            
 MPP_COMPUTE_EXTENT         Subr   896                                           PRIV             260,896,904,5833,5841             
 MPP_GET_CURRENT_PELIST     Subr   872                                           PRIV             244,872,2002,2556,2865,5811,6865  
 MPP_RECV                   Local  1136                                 scalar   PRIV             242,1136,1181,2706,2980,3031,3822,
                                                                                                  3961,4153,4282,5372,5481,5607,6069
                                                                                                  ,6114                             
 MPP_RECV_INT4_SCALAR       Subr   1136                                          PRIV             1136,2980,6069                    
 MPP_RECV_REAL8_SCALAR      Subr   1181                                          PRIV             1181,2706,3031,3822,3961,4153,4282
                                                                                                  ,5372,5481,5607,6114              
 MPP_SEND                   Local  1144                                 scalar   PRIV             242,1144,1190,2735,2986,3060,3840,

Page 34          Source Listing                  LOAD_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  4025,4044,4182,4316,5389,5510,5641
                                                                                                  ,6077,6123                        
 MPP_SEND_INT4_SCALAR       Subr   1144                                          PRIV             1144,2986,6077                    
 MPP_SEND_REAL8_SCALAR      Subr   1190                                          PRIV             1190,2735,3060,3840,4025,4044,4182
                                                                                                  ,4316,5389,5510,5641,6123         
 MPP_SYNC_SELF              Subr   1147                                          PRIV             243,1147,1154,1193,1247,2739,2811,
                                                                                                  2989,2990,3064,3102,3844,3875,4049
                                                                                                  ,4114,4187,4247,4324,4344,5393,542
                                                                                                  4,5515,5573,5649,5668,6080,6087,61
                                                                                                  26,6180                           
 MYPOS                      Local  835      I(4)            4           scalar                    870,1134,1141,1177,1186           
 N                          Local  835      I(4)            4           scalar                    905,906,907,908,915,916,917,1133,1
                                                                                                  134,1140,1141,1176,1177,1185,1186,
                                                                                                  1219,1233,1405,1406,1407,1428,1429
 NDIVS                      Local  834      I(4)            4           scalar                    894,895,896,897,904,905,919       
 NETCDF_FILE_CLOSE_WRAP     Subr   1066                                          PRIV             1066,1674,1751,1832,2080,2132,2138
                                                                                                  ,2182,2197                        
 NETCDF_FILE_OPEN_WRAP      Func   861      L(4)            4           scalar   PRIV             861,1609,1742,1826,1879,2128,2134,
                                                                                                  2149                              
 NPES                       Local  833      I(4)            4           scalar                    868,874,875,893,894,895,897,904,91
                                                                                                  5,1023,1033,1082,1127,1133,1134,11
                                                                                                  40,1141,1149,1158,1176,1177,1185,1
                                                                                                  186,1218,1392                     
 NREAD                      Local  836      I(4)            4     1     4        TGT              943,947,949,951,953,955,957,960,96
                                                                                                  2,967,969,972,976,980,981,985,1006
 NRECV                      Local  835      I(4)            4           scalar                    1178,1179,1181                    
 NRECV1                     Local  841      I(4)            4     1     0                         1074,1150,1160,1164,1171,1178,1233
 NRECV2                     Local  841      I(4)            4     1     0                         1075,1151,1160,1165,1171,1178,1219
 NSEND                      Local  835      I(4)            4           scalar                    1187,1188,1190                    
 NSEND1                     Local  841      I(4)            4     1     0                         1074,1105,1128,1142,1170,1187     
 NSEND2                     Local  841      I(4)            4     1     0                         1075,1087,1129,1143,1170,1187     
 NSET1                      Local  834      I(4)            4           scalar                    929,932,935,1080,1115,1160,1166,11
                                                                                                  70,1171,1178,1187,1244            
 NSET2                      Local  834      I(4)            4           scalar                    930,933,935,1080,1097,1098,1160,11
                                                                                                  66,1170,1171,1178,1187,1230,1231  
 NSUBSET                    Local  895      I(4)            4           scalar                    334,340,895,5832                  
 NULL                       Func   810                                  scalar   PTR              468,469,470,471,472,473,474,475,47
                                                                                                  6,477,478,490,491,492,493,494,495,
                                                                                                  496,497,498,511,512,513,514,515,51
                                                                                                  6,517,523,525,533,534,535,536,537,
                                                                                                  538,575,576,577,586,589,592,597,60
                                                                                                  2,603,604,605,607,608,613,614,615,
                                                                                                  616,617,810,811,812,813,814,815,81
                                                                                                  6,817,818,819,820,821,825,850,1503
                                                                                                  ,1791,2428,2529,2542,2828,2841,334
                                                                                                  7,3396,3804,3898,3899,4131,4132,41
                                                                                                  33,4134,4135,4262,4263,4264,4265,4
                                                                                                  374,4432,4500,4582,5353,5459,5460,
                                                                                                  5461,5462,5463,5588,5589,5590,5591
                                                                                                  ,5759,5760,5761,5762,5763,5764,576
                                                                                                  5,5766,5767,5768,5769,5770,5774,57
                                                                                                  99,6436,6664                      
 NXGRID                     Local  826      I(4)            4           scalar                    881,883,885,888,889,893,896,926,12
                                                                                                  52,1253                           
 NXGRID1                    Local  834      I(4)            4           scalar                    1164,1166,1204,1205,1206,1210,1252

Page 35          Source Listing                  LOAD_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,1360,1371,1402,1412,1418,1466    
 NXGRID1_OLD                Local  852      I(4)            4           scalar                    1355,1357,1363,1398,1402          
 NXGRID2                    Local  834      I(4)            4           scalar                    1165,1166,1201,1202,1203,1209,1214
                                                                                                  ,1253,1269,1309                   
 NXGRID_LOCAL               Local  833      I(4)            4           scalar                    939,947,948,967,981,1016,1057,1059
                                                                                                  ,1062,1079,1080,1197,1208,1213    
 NXGRID_LOCAL_ORIG          Local  833      I(4)            4           scalar                    1016,1063,1139                    
 OPEN_FILE                  Local  861                                  scalar   PRIV             272,861,1535,1609,1742,1826,1879,2
                                                                                                  128,2134,2149                     
 OUT_UNIT                   Local  828      I(4)            4           scalar                    867,1004                          
 P                          Local  826      I(4)            4           scalar                    898,899,900,1023,1024,1025,1033,10
                                                                                                  34,1035,1082,1083,1084,1086,1087,1
                                                                                                  102,1104,1105,1127,1128,1129,1134,
                                                                                                  1135,1136,1141,1142,1143,1144,1149
                                                                                                  ,1150,1151,1158,1159,1160,1177,117
                                                                                                  8,1180,1181,1186,1187,1189,1190,12
                                                                                                  18,1219,1233,1282,1283,1284,1285,1
                                                                                                  334,1335,1336,1337,1364,1365,1379,
                                                                                                  1380,1381,1382,1383,1384,1392,1393
                                                                                                  ,1404,1405,1406,1407,1419,1420,142
                                                                                                  2,1423,1428,1429,1438,1439,1484,14
                                                                                                  85,1486,1487                      
 PE                         Local  833      I(4)            4           scalar                    869,906                           
 PEBEGIN                    Local  844      I(4)            4     1     0                         904,906,916                       
 PEEND                      Local  844      I(4)            4     1     0                         904                               
 PELIST                     Local  839      I(4)            4     1     0                         872,874,875,904,916,1136,1144,1181
                                                                                                  ,1190                             
 PI                         Param  990      R(8)            8           scalar   PRIV             264,990,1533,1613,4700,4701,4803,4
                                                                                                  814,4815,4860,4877,4878,4929,4940,
                                                                                                  4941,4974,5025,5925,6464          
 POS                        Local  835      I(4)            4           scalar                    1019,1036,1037,1038,1039,1040,1041
                                                                                                  ,1043,1044,1055,1081,1083,1088,108
                                                                                                  9,1090,1091,1092,1094,1095,1097,10
                                                                                                  98,1106,1107,1108,1109,1110,1112,1
                                                                                                  113,1115,1157,1159,1160,1180,1181,
                                                                                                  1189,1190,1216,1221,1222,1223,1224
                                                                                                  ,1225,1227,1228,1230,1231,1235,123
                                                                                                  6,1237,1238,1239,1241,1242,1244,14
                                                                                                  23,1424,1429,1430,1439,1440,1441  
 POS_S                      Local  849      I(4)            4     1     1        ALC,SAVE         1361,1396,1406,1407,1448          
 POS_X                      Local  846      I(4)            4     1     0                         1391,1393,1396,1406,1407,1423,1429
                                                                                                  ,1439                             
 RADIUS                     Param  990      R(8)            8           scalar   PRIV             264,990,5925                      
 READ_DATA                  Local  949                                  scalar   PRIV             273,949,951,953,955,957,960,962,96
                                                                                                  9,972,976,985,1006,1543,1544,1555,
                                                                                                  1556,1636,1637,1643,1650,1688,1747
                                                                                                  ,1878,2121,2122,2131,2137,2144,215
                                                                                                  4,5886,5888,5890,5892,5894,5897,58
                                                                                                  99,5906,5909,5913,5921,5941,6472,6
                                                                                                  473,6484,6485,6526,6527,6533,6540,
                                                                                                  6578,6623,6744,6979,6980,6985,6988
                                                                                                  ,6995,7001                        
 RECV_BUFFER                Local  824      R(8)            8     1     1        ALC              1166,1174,1181,1221,1222,1223,1224
                                                                                                  ,1225,1227,1228,1230,1235,1236,123
                                                                                                  7,1238,1239,1241,1242,1249        

Page 36          Source Listing                  LOAD_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 RECV_BUFFER_POS            Local  843      I(4)            4     1     0                         1159,1174,1180                    
 RECV_CNT                   Local  842      I(4)            4     1     0                         1171,1174                         
 SCALE                      Local  831      R(8)            8     1     1        ALC              1003,1007,1097,1213,1214,1230,1324
                                                                                                  ,1497                             
 SCALE_EXIST                Local  829      L(4)            4           scalar                    829,865,935,1008,1097,1212,1230,13
                                                                                                  23,1497                           
 SEND_BUFFER                Local  824      R(8)            8     1     1        ALC              1080,1088,1089,1090,1091,1092,1094
                                                                                                  ,1095,1097,1106,1107,1108,1109,111
                                                                                                  0,1112,1113,1173,1190,1248        
 SEND_BUFFER_POS            Local  843      I(4)            4     1     0                         1083,1173,1189                    
 SEND_CNT                   Local  842      I(4)            4     1     0                         1170,1173                         
 SIZ                        Local  826      I(4)            4     1     4                                                           
 SIZE                       Func   1346                                 scalar                    1346,1355                         
 SIZE_PREV                  Local  826      I(4)            4           scalar                    1266,1293,1294,1295,1299,1307     
 SIZE_REPRO                 Local  828      I(4)            4           scalar                    1352,1388,1452,1454               
 START                      Local  836      I(4)            4     1     4        TGT              943,947,949,951,953,955,957,960,96
                                                                                                  2,967,969,972,976,980,981,985,1006
 SUBSET_ROOTPE              Local  840      L(4)            4     1     0                         901,913,917,1135                  
 SUM                        Func   1164                                 scalar                    1164,1165                         
 TILE1                      Dummy  802      I(4)            4           scalar   ARG,IN           857,1024,1102,1273,1283,1321,1335,
                                                                                                  1353,1452,1477                    
 TILE2                      Dummy  802      I(4)            4           scalar   ARG,IN           857,1034,1084,1268,1308,1380,1485 
 TILE_PARENT                Local  1273     I(4)            4           scalar                    1273,2012,3232,6206,6875          
 TMP                        Local  823      R(8)            8     2     1        ALC              948,949,950,951,952,953,954,955,95
                                                                                                  6,957,958,960,961,962,963,965,968,
                                                                                                  969,970,971,972,973,974,976,977,97
                                                                                                  8,982,983,985,991,993,1006,1007,10
                                                                                                  11                                
 TRIM                       Func   862                                  scalar                    862,989,992,995,996,1005          
 USE_HIGHER_ORDER           Dummy  802      L(4)            4           scalar   ARG,IN           857,931,941,959,975,1018,1042,1054
                                                                                                  ,1093,1111,1207,1226,1240,1257,132
                                                                                                  8,1479,1496,1500                  
 VARIABLE_EXISTS            Func   1002     L(4)            4           scalar   PRIV             272,1002,1687,1746,1831,1834,2140 
 VERSION1                   Param  880      I(4)            4           scalar                    880,946,1833,1841,1875,1948,1995,2
                                                                                                  093,5819,5883,6469,6700,6707,6741,
                                                                                                  6811,6858,6955                    
 VERSION2                   Param  886      I(4)            4           scalar                    886,966,1835,1877,2000,2080,2095,2
                                                                                                  197,5823,5903,6506,6702,6743,6863,
                                                                                                  6957                              
 XCELL_TYPE                 Type   827                      72          scalar   PRIV             465,523,525,827,5776              
 XMAP                       Dummy  802      XMAP_TYPE       928         scalar   ARG,INOUT        839,840,857,866,868,879,945,1282,1
                                                                                                  285,1334,1337,1346,1361,1364,1365,
                                                                                                  1379,1382,1399,1404,1405,1444,1484
                                                                                                  ,1487                             
 XMAP_TYPE                  Type   803                      928         scalar                    294,618,803,1781,2423,2528,2827,31
                                                                                                  18,3344,3393,3443,3461,3557,3589,3
                                                                                                  671,3713,3752,3771,3798,3887,4124,
                                                                                                  4257,4365,4423,4489,4573,4652,4750
                                                                                                  ,4781,4840,4905,4960,5136,5215,528
                                                                                                  9,5321,5347,5436,5452,5583,5680,57
                                                                                                  52,6654                           
 X_LOCAL                    Local  827      RECORD          72    1     1        ALC              1295,1296,1299,1300,1456,1457,1460
                                                                                                  ,1461                             
 Y2M1_PE                    Local  847      I(4)            4     1     1        ALC              1360,1362,1383,1419,1445          
 Y2M1_SIZE                  Local  846      I(4)            4     1     0                         1365,1368,1384,1393,1399,1415,1422

Page 37          Source Listing                  LOAD_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,1423,1428,1438,1439,1444         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 GRID_TYPE.AREA             R(8)            8     1008     2     1        PTR              1277,1279,1375,1377,1978,1980,1985 
                                                                                           ,1987,2192,2202,2203,2258,2285,437 
                                                                                           8,4390,4396,4440,4448,4450,4462,45 
                                                                                           09,4512,4525,4535,4543,4546,4593,4 
                                                                                           595,4613,4619,4639,4660,4662,4803, 
                                                                                           4860,4929,4974,6210,6212,6308,6310 
                                                                                           ,6841,6843,6848,6850,7037,7045,704 
                                                                                           6,7113,7140                        
 GRID_TYPE.ID               CHAR            3     0              scalar                    1346,1859,2018,2258,2262,2266,2270 
                                                                                           ,2271,2278,2279,2284,2290,2292,229 
                                                                                           6,2304,2306,2308,2845,3232,3349,33 
                                                                                           53,3398,3404,3477,3535,3561,3566,3 
                                                                                           603,3649,3675,3680,3729,3733,4382, 
                                                                                           4388,4392,4395,4438,4444,4449,4451 
                                                                                           ,4461,4510,4513,4522,4527,4533,453 
                                                                                           7,4545,4588,4606,4608,4615,4617,46 
                                                                                           21,4623,4635,4637,4659,5149,5192,5 
                                                                                           228,5267,5293,5298,5325,5330,6279, 
                                                                                           6725,6880,7078,7113,7117,7121,7125 
                                                                                           ,7126,7133,7134,7139,7145,7147,715 
                                                                                           1,7159,7161,7163                   
 GRID_TYPE.IM               I(4)            4     536            scalar                    1276,1316,1374,1472,1525,1541,1601 
                                                                                           ,1625,1644,1645,1933,2487,2774,316 
                                                                                           2,3236,3936,6209,6249,6307,6405,64 
                                                                                           57,6470,6515,6534,6535,6796        
 GRID_TYPE.IS_UG            L(4)            4     3944           scalar                    1275,1315,1373,1471,1474,1945,1950 
                                                                                           ,1993,2083,2495,2770,3160,3234,330 
                                                                                           7,4506,4517,4541,4590,4598,4605,46 
                                                                                           14,4620,4634,5709,5725,6208,6248,6 
                                                                                           306,6404,6407,6808,6813,6856,6945  
 GRID_TYPE.L_INDEX          I(4)            4     4272     1     1        PTR              1276,1316,1374,1472,1968,1972,1974 
                                                                                           ,2496,2774,3162,3236,6209,6249,630 
                                                                                           7,6405,6831,6835,6837              
 GRID_TYPE.SIZE             I(4)            4     1216           scalar                    1266,1271,1293,1298,1302,1981,1988 
                                                                                           ,2216,2231,2232,2233,2234,2488,254 
                                                                                           7,2572,2609,2655,2858,2881,2915,29 
                                                                                           61,3132,3153,3224,3301,6199,6204,6 
                                                                                           226,6231,6235,6844,6851,7059,7079, 
                                                                                           7086,7087,7088,7089                
 GRID_TYPE.SIZE_REPRO       I(4)            4     1296           scalar                    1453,1454,1459,1463,1982,1989,2219 
                                                                                           ,2515,4332,5657,6386,6387,6392,639 
                                                                                           6,6845,6852,7062                   
 GRID_TYPE.TILE             I(4)            4     104      1     1        PTR,TGT          1024,1034,1084,1102,1283,1335,1380 
                                                                                           ,1485,1864,1872,1908,1912,1920,192 
                                                                                           1,1929,1942,1963,1966,2577,2886,59 
                                                                                           59,5969,6017,6035,6216,6268,6313,6 
                                                                                           418,6730,6738,6771,6775,6783,6784, 
                                                                                           6792,6805,6826,6829                

Page 38          Source Listing                  LOAD_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 GRID_TYPE.TILE_ME          I(4)            4     528            scalar   PTR              1268,1308,1353,1452,1942,1966,4378 
                                                                                           ,4396,4450,4509,4512,4543,4546,461 
                                                                                           9,6201,6241,6286,6385,6805,6829    
 GRID_TYPE.X                RECORD          72    1224     1     1        PTR              1296,1297,1298,1299,1302,1303,1313 
                                                                                           ,1314,1316,1321,1322,1324,1326,132 
                                                                                           9,1330,1337,2218,2489,2493,2494,24 
                                                                                           99,2500,2573,2574,2575,2610,2611,2 
                                                                                           612,2639,2640,2882,2883,2884,2916, 
                                                                                           2917,2918,2945,2946,2962,2963,2964 
                                                                                           ,3154,3155,3156,3157,3158,3166,316 
                                                                                           7,3168,3169,3171,3172,3173,3174,31 
                                                                                           77,3185,3186,3187,3188,3190,3191,3 
                                                                                           192,3193,3195,3225,3226,3227,3228, 
                                                                                           3229,3240,3241,3242,3243,3245,3246 
                                                                                           ,3249,3250,3253,3263,3264,3265,326 
                                                                                           6,3268,3269,3272,3273,3275,3302,33 
                                                                                           08,3311,3312,6229,6230,6231,6232,6 
                                                                                           235,6236,6246,6247,6249,6254,6255, 
                                                                                           6257,6259,6262,6263,6270,7061      
 GRID_TYPE.X_REPRO          RECORD          72    1304     1     1        PTR              1457,1458,1459,1460,1463,1464,1469 
                                                                                           ,1470,1472,1477,1478,1480,1481,148 
                                                                                           7,2221,2516,2517,4333,4334,4335,43 
                                                                                           36,5658,5659,5660,6390,6391,6392,6 
                                                                                           393,6396,6397,6402,6403,6405,6410, 
                                                                                           6411,6413,6414,6420,7064           
 XCELL_TYPE.AREA            R(8)            8     40             scalar                    1322,1478,3169,3177,3188,3195,3243 
                                                                                           ,3253,3266,3275,6255,6411          
 XCELL_TYPE.DI              R(8)            8     48             scalar                    1303,1329,1464,1480,2639,2945,3171 
                                                                                           ,3190,3245,3268,6236,6262,6397,641 
                                                                                           3                                  
 XCELL_TYPE.DJ              R(8)            8     56             scalar                    1303,1330,1464,1481,2640,2946,3172 
                                                                                           ,3191,3246,3269,6236,6263,6397,641 
                                                                                           4                                  
 XCELL_TYPE.I1              I(4)            4     0              scalar                    1313,1469,2573,2610,2882,2916,2962 
                                                                                           ,3154,3166,3185,3225,3240,3263,433 
                                                                                           3,6246,6402                        
 XCELL_TYPE.I2              I(4)            4     8              scalar                    1313,1469,2493,2499,3156,3173,3192 
                                                                                           ,3227,3249,3272,3311,6246,6402     
 XCELL_TYPE.J1              I(4)            4     4              scalar                    1314,1470,2574,2611,2883,2917,2963 
                                                                                           ,3155,3167,3186,3226,3241,3264,433 
                                                                                           4,6247,6403                        
 XCELL_TYPE.J2              I(4)            4     12             scalar                    1314,1470,2494,2500,3157,3174,3193 
                                                                                           ,3228,3250,3273,3312,6247,6403     
 XCELL_TYPE.L1              I(4)            4     16             scalar                    1472,5658,6405                     
 XCELL_TYPE.L2              I(4)            4     20             scalar                    1316,3308,6249                     
 XCELL_TYPE.PE              I(4)            4     28             scalar                    1337,1487,2218,2221,2489,2516,3302 
                                                                                           ,4335,5659,6270,6420,7061,7064     
 XCELL_TYPE.SCALE           R(8)            8     64             scalar                    1324,1326,3177,3195,3253,3275,6257 
                                                                                           ,6259                              
 XCELL_TYPE.TILE            I(4)            4     32             scalar                    1321,1477,2575,2612,2884,2918,2964 
                                                                                           ,3158,3168,3187,3229,3242,3265,625 
                                                                                           4,6410                             
 XMAP_TYPE.GRIDS            RECORD          4888  240      1     1        PTR,TGT,PRIV     866,1346,1818,1857,1858,2214,2216, 
                                                                                           2218,2219,2221,2231,2232,2233,2234 
                                                                                           ,2266,2269,2270,2271,2274,2275,227 

Page 39          Source Listing                  LOAD_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           8,2279,2296,2299,2300,2301,2304,23 
                                                                                           06,2308,2486,2487,2488,2489,2493,2 
                                                                                           494,2495,2496,2499,2500,2514,2515, 
                                                                                           2516,2517,2546,2547,2550,2571,2572 
                                                                                           ,2573,2574,2575,2608,2609,2610,261 
                                                                                           1,2612,2639,2640,2654,2655,2845,28 
                                                                                           57,2858,2860,2880,2881,2882,2883,2 
                                                                                           884,2914,2915,2916,2917,2918,2945, 
                                                                                           2946,2960,2961,2962,2963,2964,3131 
                                                                                           ,3132,3143,3144,3145,3150,3151,315 
                                                                                           3,3154,3155,3156,3157,3158,3160,31 
                                                                                           61,3162,3163,3166,3167,3168,3169,3 
                                                                                           170,3171,3172,3173,3174,3177,3181, 
                                                                                           3182,3185,3186,3187,3188,3189,3190 
                                                                                           ,3191,3192,3193,3195,3200,3213,321 
                                                                                           4,3215,3221,3222,3224,3225,3226,32 
                                                                                           27,3228,3229,3232,3234,3235,3236,3 
                                                                                           237,3240,3241,3242,3243,3244,3245, 
                                                                                           3246,3249,3250,3253,3259,3260,3263 
                                                                                           ,3264,3265,3266,3267,3268,3269,327 
                                                                                           2,3273,3275,3282,3300,3301,3302,33 
                                                                                           07,3308,3309,3311,3312,3313,3349,3 
                                                                                           351,3352,3398,3402,3403,3477,3534, 
                                                                                           3535,3561,3565,3566,3567,3603,3648 
                                                                                           ,3649,3675,3679,3680,3681,3729,373 
                                                                                           2,3733,3735,3912,4147,4269,4270,43 
                                                                                           03,4304,4330,4331,4341,4376,4383,4 
                                                                                           384,4434,4436,4437,4455,4456,4502, 
                                                                                           4515,4516,4584,4586,4587,4628,4629 
                                                                                           ,4658,4659,4660,4662,4754,4755,475 
                                                                                           6,4757,4758,4798,4803,4804,4852,48 
                                                                                           60,4923,4928,4929,4969,4974,5149,5 
                                                                                           191,5192,5228,5266,5267,5293,5297, 
                                                                                           5298,5299,5325,5329,5330,5331,5475 
                                                                                           ,5595,5628,5629,5655,5656,5665,580 
                                                                                           5,6279,6690,6723,6724,7057,7059,70 
                                                                                           61,7062,7064,7078,7079,7086,7087,7 
                                                                                           088,7089,7121,7124,7125,7126,7129, 
                                                                                           7130,7133,7134,7151,7154,7155,7156 
                                                                                           ,7159,7161,7163                    
 XMAP_TYPE.NPES             I(4)            4     16             scalar   PRIV             839,840,868,1282,1334,1361,1364,13 
                                                                                           79,1404,1484,1815,1820,1821,1862,1 
                                                                                           863,1864,1889,1891,1909,1910,1911, 
                                                                                           1912,1915,1918,1919,1921,1923,1927 
                                                                                           ,1952,1953,1958,1996,2001,2210,221 
                                                                                           1,2215,2431,2460,2540,2541,2553,28 
                                                                                           40,2863,3127,3290,5788,5789,5807,6 
                                                                                           215,6267,6294,6297,6312,6337,6417, 
                                                                                           6687,6692,6693,6728,6729,6730,6752 
                                                                                           ,6754,6772,6773,6774,6775,6778,678 
                                                                                           1,6782,6784,6786,6790,6815,6816,68 
                                                                                           21,6859,6864,7053,7054,7058,7081,7 
                                                                                           082                                
 XMAP_TYPE.ROOT_PE          I(4)            4     20             scalar   PRIV             1337,1487,1816,1905,1938,1939,1942 
                                                                                           ,1964,1965,1966,2206,2207,2218,222 

Page 40          Source Listing                  LOAD_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           1,2450,2477,2489,2516,3302,4283,43 
                                                                                           35,5608,5659,6270,6420,6688,6768,6 
                                                                                           801,6802,6805,6827,6828,6829,7049, 
                                                                                           7050,7061,7064,7081,7082           
 XMAP_TYPE.VERSION          I(4)            4     752            scalar   PRIV             879,945,1833,1835,1841,1874,1948,1 
                                                                                           994,2080,2092,2197,5818,5882,6700, 
                                                                                           6702,6707,6740,6811,6857,6862,6869 
                                                                                           ,6954                              
 XMAP_TYPE.YOUR1MY2         L(4)            4     24       1     1        PTR,PRIV         1285,1820,1823,2206,6218,6692,6695 
                                                                                           ,7049,7080,7081                    
 XMAP_TYPE.YOUR2MY1         L(4)            4     96       1     1        PTR,PRIV         1382,1820,1823,2207,6315,6692,6695 
                                                                                           ,7050,7080,7082                    
 XMAP_TYPE.YOUR2MY1_SIZE    I(4)            4     168      1     1        PTR,PRIV         1365,1399,1405,1444,1821,1824,2666 
                                                                                           ,6298,6332,6338,6377,6693,6696     

Page 41          Source Listing                  LOAD_XGRID
2021-06-01 08:56                                 xgrid.F90

   1509 
   1510 !#######################################################################
   1511 !
   1512 ! get_grid - read the center point of the grid from version 1 grid file.
   1513 !          - only the grid at the side 1 is needed, so we only read
   1514 !          - atm and land grid
   1515 !
   1516 
   1517 !> @brief read the center point of the grid from version 1 grid file.
   1518 !!   only the grid at the side 1 is needed, so we only read
   1519 !!   atm and land grid
   1520 subroutine get_grid_version1(grid, grid_id, grid_file)
   1521   type(grid_type), intent(inout)          :: grid
   1522   character(len=3), intent(in)            :: grid_id
   1523   character(len=*), intent(in)            :: grid_file
   1524 
   1525   real, dimension(grid%im) :: lonb
   1526   real, dimension(grid%jm) :: latb
   1527   real, allocatable        :: tmpx(:,:), tmpy(:,:)
   1528   real                     :: d2r
   1529   integer                  :: is, ie, js, je, nlon, nlat, i, j
   1530   integer                  :: start(4), nread(4), isc2, iec2, jsc2, jec2
   1531   type(FmsNetcdfDomainFile_t) :: fileobj
   1532 
   1533   d2r = PI/180.0
   1534 
   1535   if(.not. open_file(fileobj, grid_file, 'read', grid%domain) ) then
   1536      call error_mesg('xgrid_mod(get_grid_version1)', 'Error in opening file '//trim(grid_file), FATAL)
   1537   endif
   1538 
   1539   call mpp_get_compute_domain(grid%domain, is, ie, js, je)
   1540 
   1541   allocate(grid%lon(grid%im), grid%lat(grid%jm))
   1542   if(grid_id == 'ATM') then
   1543      call read_data(fileobj, 'xta', lonb)
   1544      call read_data(fileobj, 'yta', latb)
   1545 
   1546      if(.not. allocated(AREA_ATM_MODEL)) then
   1547         allocate(AREA_ATM_MODEL(is:ie, js:je))
   1548         call get_area_elements(fileobj, 'AREA_ATM_MODEL', AREA_ATM_MODEL)
   1549      endif
   1550      if(.not. allocated(AREA_ATM_SPHERE)) then
   1551         allocate(AREA_ATM_SPHERE(is:ie, js:je))
   1552         call get_area_elements(fileobj, 'AREA_ATM', AREA_ATM_SPHERE)
   1553      endif
   1554   else if(grid_id == 'LND') then
   1555      call read_data(fileobj, 'xtl', lonb)
   1556      call read_data(fileobj, 'ytl', latb)
   1557      if(.not. allocated(AREA_LND_MODEL)) then
   1558         allocate(AREA_LND_MODEL(is:ie, js:je))
   1559         call get_area_elements(fileobj, 'AREA_LND_MODEL', AREA_LND_MODEL)
   1560      endif
   1561      if(.not. allocated(AREA_LND_SPHERE)) then
   1562         allocate(AREA_LND_SPHERE(is:ie, js:je))
   1563         call get_area_elements(fileobj, 'AREA_LND', AREA_LND_SPHERE)
   1564      endif
   1565   else if(grid_id == 'OCN' ) then

Page 42          Source Listing                  GET_GRID_VERSION1
2021-06-01 08:56                                 xgrid.F90

   1566      if(.not. allocated(AREA_OCN_SPHERE)) then
   1567         allocate(AREA_OCN_SPHERE(is:ie, js:je))
   1568         call get_area_elements(fileobj, 'AREA_OCN', AREA_OCN_SPHERE)
   1569      endif
   1570   endif
   1571 !--- second order remapping suppose second order
   1572   if(grid_id == 'LND' .or. grid_id == 'ATM') then
   1573      grid%lon   = lonb * d2r
   1574      grid%lat   = latb * d2r
   1575   endif
   1576   grid%is_latlon = .true.
   1577 
   1578   call close_file(fileobj)
   1579 
   1580   return
   1581 
   1582 end subroutine get_grid_version1


ENTRY POINTS

  Name                                       
                                             
 xgrid_mod_mp_get_grid_version1_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1546                                 scalar                    1546,1550,1557,1561,1566          
 AREA_ATM_MODEL             Local  1546     R(8)            8     2     1        ALC              299,1546,1547,1548,6475,6476,6477 
 AREA_ATM_SPHERE            Local  1550     R(8)            8     2     1        ALC              298,1550,1551,1552,6479,6480,6481 
 AREA_LND_MODEL             Local  1557     R(8)            8     2     1        ALC              1557,1558,1559,6486,6487,6488     
 AREA_LND_SPHERE            Local  1561     R(8)            8     2     1        ALC              1561,1562,1563,6490,6491,6492     
 AREA_OCN_SPHERE            Local  1566     R(8)            8     2     1        ALC              298,1566,1567,1568,6495,6496,6497 
 CLOSE_DOMAIN_FILE          Subr   1578                                          PRIV             1578                              
 D2R                        Local  1528     R(8)            8           scalar                    1533,1573,1574                    
 DOMAIN_READ_1D             Subr   1543                                          PRIV             1543,1544,1555,1556               
 FILEOBJ                    Local  1531     FMSNETCDFDOMAINFILE_T                                                                   
                                                            2040        scalar                    1535,1543,1544,1548,1552,1555,1556
                                                                                                  ,1559,1563,1568,1578              
 FMSNETCDFDOMAINFILE_T      Type   1531                                 scalar                    273,1531,1683                     
 GET_AREA_ELEMENTS          Local  1548                                 scalar                    1548,1552,1559,1563,1568,6477,6481
                                                                                                  ,6488,6492,6497                   
 GET_GRID_VERSION1          Subr   1520                                                           1999                              
 GRID                       Dummy  1520     GRID_TYPE       4888        scalar   ARG,INOUT        1525,1526,1535,1539,1541,1573,1574
                                                                                                  ,1576                             
 GRID_FILE                  Dummy  1520     CHAR                        scalar   ARG,IN           1535,1536                         
 GRID_ID                    Dummy  1520     CHAR            3           scalar   ARG,IN           1542,1554,1565,1572               
 I                          Local  1529     I(4)            4           scalar                                                      
 IE                         Local  1529     I(4)            4           scalar                    1539,1547,1551,1558,1562,1567     
 IEC2                       Local  1530     I(4)            4           scalar                                                      
 IS                         Local  1529     I(4)            4           scalar                    1539,1547,1551,1558,1562,1567     
 ISC2                       Local  1530     I(4)            4           scalar                                                      
 J                          Local  1529     I(4)            4           scalar                                                      
 JE                         Local  1529     I(4)            4           scalar                    1539,1547,1551,1558,1562,1567     

Page 43          Source Listing                  GET_GRID_VERSION1
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 JEC2                       Local  1530     I(4)            4           scalar                                                      
 JS                         Local  1529     I(4)            4           scalar                    1539,1547,1551,1558,1562,1567     
 JSC2                       Local  1530     I(4)            4           scalar                                                      
 LATB                       Local  1526     R(8)            8     1     0                         1544,1556,1574                    
 LONB                       Local  1525     R(8)            8     1     0                         1543,1555,1573                    
 MPP_GET_COMPUTE_DOMAIN     Local  1539                                 scalar   PRIV             251,1539,1615,1736,6466,6615      
 MPP_GET_COMPUTE_DOMAIN2D   Subr   1539                                          PRIV             1539,1615,1736,6466,6615          
 NLAT                       Local  1529     I(4)            4           scalar                                                      
 NLON                       Local  1529     I(4)            4           scalar                                                      
 NREAD                      Local  1530     I(4)            4     1     4                                                           
 OPEN_DOMAIN_FILE           Func   1535     L(4)            4           scalar   PRIV             1535                              
 START                      Local  1530     I(4)            4     1     4                                                           
 TMPX                       Local  1527     R(8)            8     2     1        ALC                                                
 TMPY                       Local  1527     R(8)            8     2     1        ALC                                                
 TRIM                       Func   1536                                 scalar                    1536                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 GRID_TYPE.DOMAIN           DOMAIN2D        752   1376           scalar                    1535,1539,1615,1667,1668,1860,1888 
                                                                                           ,1890,1892,1893,1898,1899,1901,190 
                                                                                           3,1906,1908,1918,1921,2005,2021,39 
                                                                                           34,6466,6477,6481,6488,6492,6497,6 
                                                                                           557,6558,6726,6751,6753,6755,6756, 
                                                                                           6761,6762,6764,6766,6769,6771,6781 
                                                                                           ,6784,6868,6883                    
 GRID_TYPE.IS_LATLON        L(4)            4     2880           scalar                    1576,1654,1669,2020,3926,6505,6544 
                                                                                           ,6559,6882                         
 GRID_TYPE.JM               I(4)            4     540            scalar                    1526,1541,1602,1625,1644,1651,1934 
                                                                                           ,3938,6458,6470,6515,6534,6541,679 
                                                                                           7                                  
 GRID_TYPE.LAT              R(8)            8     624      1     1        PTR              1541,1574,1644,1652,3930,3931,6470 
                                                                                           ,6503,6534,6542                    
 GRID_TYPE.LON              R(8)            8     552      1     1        PTR              1541,1573,1644,1646,3931,6470,6502 
                                                                                           ,6534,6536                         

Page 44          Source Listing                  GET_GRID_VERSION1
2021-06-01 08:56                                 xgrid.F90

   1583 
   1584 
   1585 !#######################################################################
   1586 !
   1587 ! get_grid - read the center point of the grid from version 2 grid file.
   1588 !          - only the grid at the side 1 is needed, so we only read
   1589 !          - atm and land grid
   1590 !
   1591 !
   1592 
   1593 !> @brief read the center point of the grid from version 1 grid file.
   1594 !!   only the grid at the side 1 is needed, so we only read
   1595 !!   atm and land grid
   1596 subroutine get_grid_version2(grid, grid_id, grid_file)
   1597   type(grid_type), intent(inout)          :: grid
   1598   character(len=3), intent(in)            :: grid_id
   1599   character(len=*), intent(in)            :: grid_file
   1600 
   1601   real, dimension(grid%im) :: lonb
   1602   real, dimension(grid%jm) :: latb
   1603   real, allocatable        :: tmpx(:,:), tmpy(:,:)
   1604   real                     :: d2r
   1605   integer                  :: is, ie, js, je, nlon, nlat, i, j
   1606   integer                  :: start(4), nread(4), isc2, iec2, jsc2, jec2
   1607   type(FmsNetcdfFile_t) :: fileobj
   1608 
   1609   if(.not. open_file(fileobj, grid_file, 'read') ) then
   1610      call error_mesg('xgrid_mod(get_grid_version2)', 'Error in opening file '//trim(grid_file), FATAL)
   1611   endif
   1612 
   1613   d2r = PI/180.0
   1614 
   1615   call mpp_get_compute_domain(grid%domain, is, ie, js, je)
   1616 
   1617   call get_dimension_size(fileobj, "nx", nlon)
   1618   call get_dimension_size(fileobj, "ny", nlat)
   1619   if( mod(nlon,2) .NE. 0) call error_mesg('xgrid_mod',  &
   1620        'flux_exchange_mod: atmos supergrid longitude size can not be divided by 2', FATAL)
   1621   if( mod(nlat,2) .NE. 0) call error_mesg('xgrid_mod',  &
   1622        'flux_exchange_mod: atmos supergrid latitude size can not be divided by 2', FATAL)
   1623   nlon = nlon/2
   1624   nlat = nlat/2
   1625   if(nlon .NE. grid%im .OR. nlat .NE. grid%jm) call error_mesg('xgrid_mod', &
   1626        'grid size in tile_file does not match the global grid size', FATAL)
   1627 
   1628   if( grid_id == 'LND' .or. grid_id == 'ATM'  .or. grid_id == 'WAV' ) then
   1629      isc2 = 2*grid%is_me-1; iec2 = 2*grid%ie_me+1
   1630      jsc2 = 2*grid%js_me-1; jec2 = 2*grid%je_me+1
   1631      allocate(tmpx(isc2:iec2, jsc2:jec2) )
   1632      allocate(tmpy(isc2:iec2, jsc2:jec2) )
   1633      start = 1; nread = 1
   1634      start(1) = isc2; nread(1) = iec2 - isc2 + 1
   1635      start(2) = jsc2; nread(2) = jec2 - jsc2 + 1
   1636      call read_data(fileobj, 'x', tmpx, corner=start, edge_lengths=nread)
   1637      call read_data(fileobj, 'y', tmpy, corner=start, edge_lengths=nread)
   1638      if(is_lat_lon(tmpx, tmpy) ) then
   1639         deallocate(tmpx, tmpy)

Page 45          Source Listing                  GET_GRID_VERSION2
2021-06-01 08:56                                 xgrid.F90

   1640         start = 1; nread = 1
   1641         start(2) = 2; nread(1) = nlon*2+1
   1642         allocate(tmpx(nlon*2+1, 1), tmpy(1, nlat*2+1))
   1643         call read_data(fileobj, "x", tmpx, corner=start, edge_lengths=nread)
   1644         allocate(grid%lon(grid%im), grid%lat(grid%jm))
   1645         do i = 1, grid%im
   1646            grid%lon(i) = tmpx(2*i,1) * d2r
   1647         end do
   1648         start = 1; nread = 1
   1649         start(1) = 2; nread(2) = nlat*2+1
   1650         call read_data(fileobj, "y", tmpy, corner=start, edge_lengths=nread)
   1651         do j = 1, grid%jm
   1652            grid%lat(j) = tmpy(1, 2*j) * d2r
   1653         end do
   1654         grid%is_latlon = .true.
   1655      else
   1656         allocate(grid%geolon(grid%isd_me:grid%ied_me, grid%jsd_me:grid%jed_me))
   1657         allocate(grid%geolat(grid%isd_me:grid%ied_me, grid%jsd_me:grid%jed_me))
   1658         grid%geolon = 1e10
   1659         grid%geolat = 1e10
   1660 !--- area_ocn_sphere, area_lnd_sphere, area_atm_sphere is not been defined.
   1661         do j = grid%js_me,grid%je_me
   1662            do i = grid%is_me,grid%ie_me
   1663               grid%geolon(i, j) = tmpx(i*2,j*2)*d2r
   1664               grid%geolat(i, j) = tmpy(i*2,j*2)*d2r
   1665            end do
   1666         end do
   1667         call mpp_update_domains(grid%geolon, grid%domain)
   1668         call mpp_update_domains(grid%geolat, grid%domain)
   1669         grid%is_latlon = .false.
   1670      end if
   1671      deallocate(tmpx, tmpy)
   1672   end if
   1673 
   1674   call close_file(fileobj)
   1675 
   1676 return
   1677 
   1678 end subroutine get_grid_version2

Page 46          Source Listing                  GET_GRID_VERSION2
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                       
                                             
 xgrid_mod_mp_get_grid_version2_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D2R                        Local  1604     R(8)            8           scalar                    1613,1646,1652,1663,1664          
 FILEOBJ                    Local  1607     FMSNETCDFFILE_T 872         scalar                    1609,1617,1618,1636,1637,1643,1650
                                                                                                  ,1674                             
 GET_GRID_VERSION2          Subr   1596                                                           2006                              
 GRID                       Dummy  1596     GRID_TYPE       4888        scalar   ARG,INOUT        1601,1602,1615,1625,1629,1630,1644
                                                                                                  ,1645,1646,1651,1652,1654,1656,165
                                                                                                  7,1658,1659,1661,1662,1663,1664,16
                                                                                                  67,1668,1669                      
 GRID_FILE                  Dummy  1596     CHAR                        scalar   ARG,IN           1609,1610                         
 GRID_ID                    Dummy  1596     CHAR            3           scalar   ARG,IN           1628                              
 I                          Local  1605     I(4)            4           scalar                    1645,1646,1662,1663,1664          
 IE                         Local  1605     I(4)            4           scalar                    1615                              
 IEC2                       Local  1606     I(4)            4           scalar                    1629,1631,1632,1634               
 IS                         Local  1605     I(4)            4           scalar                    1615                              
 ISC2                       Local  1606     I(4)            4           scalar                    1629,1631,1632,1634               
 IS_LAT_LON@0               Local  1638     L(4)            4           scalar                                                      
 J                          Local  1605     I(4)            4           scalar                    1651,1652,1661,1663,1664          
 JE                         Local  1605     I(4)            4           scalar                    1615                              
 JEC2                       Local  1606     I(4)            4           scalar                    1630,1631,1632,1635               
 JS                         Local  1605     I(4)            4           scalar                    1615                              
 JSC2                       Local  1606     I(4)            4           scalar                    1630,1631,1632,1635               
 LATB                       Local  1602     R(8)            8     1     0                                                           
 LONB                       Local  1601     R(8)            8     1     0                                                           
 MOD                        Func   1619                                 scalar                    1619,1621                         
 MPP_UPDATE_DOMAIN2D_R8_2D  Subr   1667                                          PRIV             1667,1668,6557,6558               
 MPP_UPDATE_DOMAINS         Local  1667                                 scalar   PRIV             252,1667,1668,3927,3934,6557,6558 
 NLAT                       Local  1605     I(4)            4           scalar                    1618,1621,1624,1625,1642,1649     
 NLON                       Local  1605     I(4)            4           scalar                    1617,1619,1623,1625,1641,1642     
 NREAD                      Local  1606     I(4)            4     1     4        TGT              1633,1634,1635,1636,1637,1640,1641
                                                                                                  ,1643,1648,1649,1650              
 START                      Local  1606     I(4)            4     1     4        TGT              1633,1634,1635,1636,1637,1640,1641
                                                                                                  ,1643,1648,1649,1650              
 TMPX                       Local  1603     R(8)            8     2     1        ALC              1631,1636,1638,1639,1642,1643,1646
                                                                                                  ,1663,1671                        
 TMPY                       Local  1603     R(8)            8     2     1        ALC              1632,1637,1638,1639,1642,1650,1652
                                                                                                  ,1664,1671                        
 TRIM                       Func   1610                                 scalar                    1610                              



Page 47          Source Listing                  GET_GRID_VERSION2
2021-06-01 08:56 Symbol Table                    xgrid.F90

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 GRID_TYPE.GEOLAT           R(8)            8     792      2     1        PTR              1657,1659,1664,1668,6547,6549,6554 
                                                                                           ,6558                              
 GRID_TYPE.GEOLON           R(8)            8     696      2     1        PTR              1656,1658,1663,1667,6546,6548,6553 
                                                                                           ,6557                              
 GRID_TYPE.IED_ME           I(4)            4     500            scalar                    1656,1657,1901,2022,2027,6546,6547 
                                                                                           ,6764,6884,6889                    
 GRID_TYPE.IE_ME            I(4)            4     472            scalar   PTR              1629,1662,1938,1940,1985,1986,2027 
                                                                                           ,2035,2055,2056,2057,2060,2061,206 
                                                                                           2,2063,2064,2065,2086,2260,2276,23 
                                                                                           00,3357,3749,3768,3914,4269,4386,4 
                                                                                           531,4755,5713,6519,6552,6801,6803, 
                                                                                           6848,6849,6889,6897,6917,6918,6919 
                                                                                           ,6922,6923,6924,6925,6926,6927,694 
                                                                                           8,7115,7131,7155                   
 GRID_TYPE.ISD_ME           I(4)            4     496            scalar                    1656,1657,1901,2022,2027,3916,6546 
                                                                                           ,6547,6764,6884,6889               
 GRID_TYPE.IS_ME            I(4)            4     464            scalar   PTR              1629,1662,1938,1940,1985,1986,2027 
                                                                                           ,2035,2055,2056,2057,2060,2061,206 
                                                                                           2,2063,2064,2065,2086,2260,2276,23 
                                                                                           00,2785,3089,3357,3749,3768,3914,4 
                                                                                           269,4386,4531,4754,5713,6519,6552, 
                                                                                           6801,6803,6848,6849,6889,6897,6917 
                                                                                           ,6918,6919,6922,6923,6924,6925,692 
                                                                                           6,6927,6948,7115,7131,7155         
 GRID_TYPE.JED_ME           I(4)            4     508            scalar                    1656,1657,1901,2022,2028,6546,6547 
                                                                                           ,6764,6884,6890                    
 GRID_TYPE.JE_ME            I(4)            4     488            scalar   PTR              1630,1661,1939,1941,1985,1986,2028 
                                                                                           ,2036,2055,2056,2057,2058,2059,206 
                                                                                           2,2063,2064,2065,2086,2260,2276,23 
                                                                                           01,3357,3750,3769,3915,4270,4386,4 
                                                                                           531,4757,5713,6520,6551,6802,6804, 
                                                                                           6848,6849,6890,6898,6917,6918,6919 
                                                                                           ,6920,6921,6924,6925,6926,6927,694 
                                                                                           8,7115,7131,7156                   
 GRID_TYPE.JSD_ME           I(4)            4     504            scalar                    1656,1657,1901,2022,2028,3917,6546 
                                                                                           ,6547,6764,6884,6890               
 GRID_TYPE.JS_ME            I(4)            4     480            scalar   PTR              1630,1661,1939,1941,1985,1986,2028 
                                                                                           ,2036,2055,2056,2057,2058,2059,206 
                                                                                           2,2063,2064,2065,2086,2260,2276,23 
                                                                                           01,2786,3090,3357,3750,3769,3915,4 
                                                                                           270,4386,4531,4756,5713,6520,6551, 
                                                                                           6802,6804,6848,6849,6890,6898,6917 
                                                                                           ,6918,6919,6920,6921,6924,6925,692 
                                                                                           6,6927,6948,7115,7131,7156         

Page 48          Source Listing                  GET_GRID_VERSION2
2021-06-01 08:56                                 xgrid.F90

   1679 
   1680 !#######################################################################
   1681 !> @brief Read the area elements from NetCDF file
   1682 subroutine get_area_elements_fms2_io(fileobj, name, data)
   1683   type(FmsNetcdfDomainFile_t), intent(in) :: fileobj
   1684   character(len=*), intent(in) :: name
   1685   real, intent(out)            :: data(:,:)
   1686 
   1687   if(variable_exists(fileobj, name)) then
   1688      call read_data(fileobj, name, data)
   1689   else
   1690      call error_mesg('xgrid_mod', 'no field named '//trim(name)//' in grid file '//trim(fileobj%path)// &
   1691                      ' Will set data to negative values...', NOTE)
   1692 ! area elements no present in grid_spec file, set to negative values....
   1693      data = -1.0
   1694   endif
   1695 
   1696 end subroutine get_area_elements_fms2_io


ENTRY POINTS

  Name                                               
                                                     
 xgrid_mod_mp_get_area_elements_fms2_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1682     R(8)            8     2     1        ARG,OUT          1688,1693                         
 DOMAIN_READ_2D             Subr   1688                                          PRIV             1688                              
 FILEOBJ                    Dummy  1682     FMSNETCDFDOMAINFILE_T                                                                   
                                                            2040        scalar   ARG,IN           1687,1688,1690                    
 GET_AREA_ELEMENTS_FMS2_IO  Subr   1682                                                           1548,1552,1559,1563,1568          
 NAME                       Dummy  1682     CHAR                        scalar   ARG,IN           1687,1688,1690                    
 TRIM                       Func   1690                                 scalar                    1690                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FMSNETCDFFILE_T.PATH       CHAR            256   0              scalar                    1690                               

Page 49          Source Listing                  GET_AREA_ELEMENTS_FMS2_IO
2021-06-01 08:56                                 xgrid.F90

   1697 
   1698 !#######################################################################
   1699 ! Read the OCN model area elements from NetCDF file
   1700 ! <SUBROUTINE NAME="get_ocean_model_area_elements">
   1701 
   1702 !   <OVERVIEW>
   1703 !      Read Ocean area element data.
   1704 !   </OVERVIEW>
   1705 !   <DESCRIPTION>
   1706 !      If available in the NetCDF file, this routine will read the
   1707 !      AREA_OCN_MODEL field and load the data into global AREA_OCN_MODEL.
   1708 !      If not available, then the array AREA_OCN_MODEL will be left
   1709 !      unallocated. Must be called by all PEs.
   1710 !   </DESCRIPTION>
   1711 !   <TEMPLATE>
   1712 !     call get_ocean_model_area_elements(ocean_domain, grid_file)
   1713 !   </TEMPLATE>
   1714 
   1715 !   <IN NAME="ocean_domain" TYPE="type(Domain2d)"> </IN>
   1716 !   <IN NAME="grid_file" TYPE="character(len=*)" > </IN>
   1717 !> @brief Read Ocean area element data.
   1718 !! @details If available in the NetCDF file, this routine will read the
   1719 !!      AREA_OCN_MODEL field and load the data into global AREA_OCN_MODEL.
   1720 !!      If not available, then the array AREA_OCN_MODEL will be left
   1721 !!      unallocated. Must be called by all PEs.
   1722 subroutine get_ocean_model_area_elements(domain, grid_file)
   1723 
   1724   type(Domain2d), intent(in) :: domain
   1725   character(len=*), intent(in) :: grid_file
   1726   integer :: is, ie, js, je
   1727   type(FmsNetcdfFile_t) :: fileobj
   1728 
   1729   if (use_mpp_io) then
   1730         call get_ocean_model_area_elements_use_mpp_io(domain, grid_file)
   1731         return
   1732   endif
   1733 
   1734   if(allocated(AREA_OCN_MODEL)) return
   1735 
   1736   call mpp_get_compute_domain(domain, is, ie, js, je)
   1737 ! allocate even if ie<is, ... in which case the array will have zero size
   1738 ! but will still return .T. for allocated(...)
   1739   allocate(AREA_OCN_MODEL(is:ie, js:je))
   1740   if(ie < is .or. je < js ) return
   1741 
   1742   if(.not. open_file(fileobj, grid_file, 'read') ) then
   1743      call error_mesg('xgrid_mod(get_ocean_model_area_elements)', 'Error in opening file '//trim(grid_file), FATAL)
   1744   endif
   1745 
   1746   if(variable_exists(fileobj, 'AREA_OCN_MODEL') )then
   1747      call read_data(fileobj, 'AREA_OCN_MODEL', AREA_OCN_MODEL)
   1748   else
   1749      deallocate(AREA_OCN_MODEL)
   1750   endif
   1751   call close_file(fileobj)
   1752 
   1753 

Page 50          Source Listing                  GET_OCEAN_MODEL_AREA_ELEMENTS
2021-06-01 08:56                                 xgrid.F90

   1754 end subroutine get_ocean_model_area_elements


ENTRY POINTS

  Name                                                   
                                                         
 xgrid_mod_mp_get_ocean_model_area_elements_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1734                                 scalar                    1734                              
 AREA_OCN_MODEL             Local  1734     R(8)            8     2     1        ALC              299,1734,1739,1747,1749,6613,6618,
                                                                                                  6623,6625                         
 DOMAIN                     Dummy  1722     DOMAIN2D        752         scalar   ARG,IN           1730,1736                         
 DOMAIN2D                   Type   1724                                 scalar                    252,526,527,1724,1783,1803,6574,66
                                                                                                  09,6656,6676                      
 FILEOBJ                    Local  1727     FMSNETCDFFILE_T 872         scalar                    1742,1746,1747,1751               
 GET_OCEAN_MODEL_AREA_ELEME                                                                                                         
 NTS                        Subr   1722                                                                                             
 GET_OCEAN_MODEL_AREA_ELEME                                                                                                         
 NTS_USE_MPP_IO             Subr   1730                                          PRIV             692,1730                          
 GRID_FILE                  Dummy  1722     CHAR                        scalar   ARG,IN           1730,1742,1743                    
 IE                         Local  1726     I(4)            4           scalar                    1736,1739,1740                    
 IS                         Local  1726     I(4)            4           scalar                    1736,1739,1740                    
 JE                         Local  1726     I(4)            4           scalar                    1736,1739,1740                    
 JS                         Local  1726     I(4)            4           scalar                    1736,1739,1740                    
 TRIM                       Func   1743                                 scalar                    1743                              

Page 51          Source Listing                  GET_OCEAN_MODEL_AREA_ELEMENTS
2021-06-01 08:56                                 xgrid.F90

   1755 ! </SUBROUTINE>
   1756 !#######################################################################
   1757 
   1758 ! <SUBROUTINE NAME="setup_xmap">
   1759 
   1760 !   <OVERVIEW>
   1761 !      Sets up exchange grid connectivity using grid specification file and
   1762 !      processor domain decomposition.
   1763 !   </OVERVIEW>
   1764 !   <DESCRIPTION>
   1765 !      Sets up exchange grid connectivity using grid specification file and
   1766 !      processor domain decomposition. Initializes xmap.
   1767 !   </DESCRIPTION>
   1768 !   <TEMPLATE>
   1769 !     call setup_xmap(xmap, grid_ids, grid_domains, grid_file, atm_grid)
   1770 !   </TEMPLATE>
   1771 
   1772 !   <IN NAME="grid_ids" TYPE="character(len=3)" DIM="(:)"> </IN>
   1773 !   <IN NAME="grid_domains" TYPE="type(Domain2d)" DIM="(:)"> </IN>
   1774 !   <IN NAME="grid_file" TYPE="character(len=*)" > </IN>
   1775 !   <IN NAME="atmos_grid" TYPE="type(grid_box_type),optional" > </IN>
   1776 !   <OUT NAME="xmap" TYPE="xmap_type"  > </OUT>
   1777 
   1778 !> @brief Sets up exchange grid connectivity using grid specification file and
   1779 !!      processor domain decomposition.
   1780 subroutine setup_xmap(xmap, grid_ids, grid_domains, grid_file, atm_grid, lnd_ug_domain)
   1781   type (xmap_type),                        intent(inout) :: xmap
   1782   character(len=3), dimension(:),            intent(in ) :: grid_ids
   1783   type(Domain2d), dimension(:),              intent(in ) :: grid_domains
   1784   character(len=*),                          intent(in ) :: grid_file
   1785   type(grid_box_type), optional,             intent(in ) :: atm_grid
   1786   type(domainUG), optional,                  intent(in ) :: lnd_ug_domain
   1787 
   1788   integer :: g, p, i
   1789   integer :: unit, nxgrid_file, i1, i2, i3, tile1, tile2, j
   1790   integer :: nxc, nyc, out_unit
   1791   type (grid_type), pointer, save :: grid =>NULL(), grid1 =>NULL()
   1792   real, dimension(3) :: xxx
   1793   real, dimension(:,:), allocatable   :: check_data
   1794   real, dimension(:,:,:), allocatable :: check_data_3D
   1795   real,                 allocatable   :: tmp_2d(:,:), tmp_3d(:,:,:)
   1796   character(len=256)                  :: xgrid_file, xgrid_name, xgrid_dimname
   1797   character(len=256)                  :: tile_file, mosaic_file
   1798   character(len=256)                  :: mosaic1, mosaic2, contact
   1799   character(len=256)                  :: tile1_name, tile2_name
   1800   character(len=256),     allocatable :: tile1_list(:), tile2_list(:), xgrid_filelist(:)
   1801   integer                             :: npes, npes2
   1802   integer,                allocatable :: pelist(:)
   1803   type(domain2d), save                :: domain2
   1804   logical :: use_higher_order = .false.
   1805   integer :: lnd_ug_id, l
   1806   integer, allocatable :: grid_index(:)
   1807   type(FmsNetcdfFile_t) :: gridfileobj, mosaicfileobj, fileobj
   1808 
   1809   call mpp_clock_begin(id_setup_xmap)
   1810 
   1811   if(interp_method .ne. 'first_order')  use_higher_order = .true.

Page 52          Source Listing                  SETUP_XMAP
2021-06-01 08:56                                 xgrid.F90

   1812 
   1813   out_unit = stdout()
   1814   xmap%me   = mpp_pe  ()
   1815   xmap%npes = mpp_npes()
   1816   xmap%root_pe = mpp_root_pe()
   1817 
   1818   allocate( xmap%grids(1:size(grid_ids(:))) )
   1819 
   1820   allocate ( xmap%your1my2(0:xmap%npes-1), xmap%your2my1(0:xmap%npes-1) )
   1821   allocate ( xmap%your2my1_size(0:xmap%npes-1) )
   1822 
   1823   xmap%your1my2 = .false.; xmap%your2my1 = .false.;
   1824   xmap%your2my1_size = 0
   1825 
   1826   if(.not. open_file(gridfileobj,trim(grid_file), "read")) then
   1827      call error_mesg('xgrid_mod', 'Error when opening file'//trim(grid_file), FATAL)
   1828   endif
   1829 
   1830 !  check the exchange grid file version to be used by checking the field in the file
   1831   if(variable_exists(gridfileobj, "AREA_ATMxOCN" ) ) then
   1832      call close_file(gridfileobj)
   1833      xmap%version = VERSION1
   1834   else if(variable_exists(gridfileobj, "ocn_mosaic_file" ) ) then
   1835      xmap%version = VERSION2
   1836   else
   1837      call error_mesg('xgrid_mod', 'both AREA_ATMxOCN and ocn_mosaic_file does not exist in '//trim(grid_file), FATAL)
   1838   end if
   1839 
   1840 
   1841   if(xmap%version==VERSION1) then
   1842      call error_mesg('xgrid_mod', 'reading exchange grid information from grid spec file', NOTE)
   1843   else
   1844      call error_mesg('xgrid_mod', 'reading exchange grid information from mosaic grid file', NOTE)
   1845   end if
   1846 
   1847 ! check to see the id of lnd.
   1848   lnd_ug_id = 0
   1849   if(present(lnd_ug_domain)) then
   1850      do g=1,size(grid_ids(:))
   1851         if(grid_ids(g) == 'LND') lnd_ug_id = g
   1852      enddo
   1853   endif
   1854 
   1855   call mpp_clock_begin(id_load_xgrid)
   1856   do g=1,size(grid_ids(:))
   1857      grid => xmap%grids(g)
   1858      if (g==1) grid1 => xmap%grids(g)
   1859      grid%id     = grid_ids    (g)
   1860      grid%domain = grid_domains(g)
   1861      grid%on_this_pe = mpp_domain_is_initialized(grid_domains(g))
   1862      allocate ( grid%is(0:xmap%npes-1), grid%ie(0:xmap%npes-1) )
   1863      allocate ( grid%js(0:xmap%npes-1), grid%je(0:xmap%npes-1) )
   1864      allocate ( grid%tile(0:xmap%npes-1) )
   1865      grid%npes   = 0
   1866      grid%ni = 0
   1867      grid%nj = 0
   1868      grid%is = 0

Page 53          Source Listing                  SETUP_XMAP
2021-06-01 08:56                                 xgrid.F90

   1869      grid%ie = -1
   1870      grid%js = 0
   1871      grid%je = -1
   1872      grid%tile = -1
   1873 
   1874      select case(xmap%version)
   1875      case(VERSION1)
   1876         grid%ntile = 1
   1877      case(VERSION2)
   1878         call read_data(gridfileobj, lowercase(grid_ids(g))//'_mosaic_file', mosaic_file)
   1879         if(.not. open_file(mosaicfileobj,'INPUT/'//trim(mosaic_file), "read")) then
   1880            call error_mesg('xgrid_mod', 'Error when opening solo mosaic file INPUT/'//trim(mosaic_file), FATAL)
   1881         endif
   1882         call get_dimension_size(mosaicfileobj, 'ntiles', grid%ntile)
   1883      end select
   1884 
   1885      if( g == 1 .AND. grid_ids(1) == 'ATM' ) then
   1886         if( .NOT. grid%on_this_pe ) call error_mesg('xgrid_mod', 'ATM domain is not defined on some processor' ,FATAL)
   1887      endif
   1888      grid%npes =  mpp_get_domain_npes(grid%domain)
   1889      if( xmap%npes > grid%npes .AND. g == 1 .AND. grid_ids(1) == 'ATM' ) then
   1890         call mpp_broadcast_domain(grid%domain, domain2)
   1891      else if(xmap%npes > grid%npes) then
   1892         call mpp_broadcast_domain(grid%domain)
   1893         grid%npes =  mpp_get_domain_npes(grid%domain)
   1894      endif
   1895 
   1896      npes = grid%npes
   1897      allocate(grid%pelist(0:npes-1))
   1898      call mpp_get_domain_pelist(grid%domain, grid%pelist)
   1899      grid%root_pe = mpp_get_domain_root_pe(grid%domain)
   1900 
   1901      call mpp_get_data_domain(grid%domain, grid%isd_me, grid%ied_me, grid%jsd_me, grid%jed_me, &
   1902                               xsize=grid%nxd_me, ysize=grid%nyd_me)
   1903      call mpp_get_global_domain(grid%domain, xsize=grid%ni, ysize=grid%nj)
   1904 
   1905      if( grid%root_pe == xmap%root_pe ) then
   1906         call mpp_get_compute_domains(grid%domain,  xbegin=grid%is(0:npes-1), xend=grid%ie(0:npes-1), &
   1907                                      ybegin=grid%js(0:npes-1), yend=grid%je(0:npes-1) )
   1908         call mpp_get_tile_list(grid%domain, grid%tile(0:npes-1))
   1909         if( xmap%npes > npes .AND. g == 1 .AND. grid_ids(1) == 'ATM' ) then
   1910            call mpp_get_compute_domains(domain2, xbegin=grid%is(npes:xmap%npes-1), xend=grid%ie(npes:xmap%npes-1), &
   1911                                         ybegin=grid%js(npes:xmap%npes-1), yend=grid%je(npes:xmap%npes-1) )
   1912            call mpp_get_tile_list(domain2, grid%tile(npes:xmap%npes-1))
   1913         endif
   1914      else
   1915         npes2 = xmap%npes-npes
   1916         call mpp_get_compute_domains(domain2,  xbegin=grid%is(0:npes2-1), xend=grid%ie(0:npes2-1), &
   1917                                      ybegin=grid%js(0:npes2-1), yend=grid%je(0:npes2-1) )
   1918         call mpp_get_compute_domains(grid%domain, xbegin=grid%is(npes2:xmap%npes-1), xend=grid%ie(npes2:xmap%npes-1), &
   1919                                      ybegin=grid%js(npes2:xmap%npes-1), yend=grid%je(npes2:xmap%npes-1) )
   1920         call mpp_get_tile_list(domain2, grid%tile(0:npes2-1))
   1921         call mpp_get_tile_list(grid%domain, grid%tile(npes2:xmap%npes-1))
   1922      endif
   1923      if( xmap%npes > grid%npes .AND. g == 1 .AND. grid_ids(1) == 'ATM' ) then
   1924         call mpp_deallocate_domain(domain2)
   1925      endif

Page 54          Source Listing                  SETUP_XMAP
2021-06-01 08:56                                 xgrid.F90

   1926      npes = grid%npes
   1927      if(  g == 1 .AND. grid_ids(1) == 'ATM' ) npes = xmap%npes
   1928      do p = 0, npes-1
   1929         if(grid%tile(p) > grid%ntile .or. grid%tile(p) < 1) call error_mesg('xgrid_mod', &
   1930                  'tile id should between 1 and ntile', FATAL)
   1931      end do
   1932 
   1933      grid%im = grid%ni
   1934      grid%jm = grid%nj
   1935      call mpp_max(grid%ni)
   1936      call mpp_max(grid%nj)
   1937 
   1938      grid%is_me => grid%is(xmap%me-xmap%root_pe); grid%ie_me => grid%ie(xmap%me-xmap%root_pe)
   1939      grid%js_me => grid%js(xmap%me-xmap%root_pe); grid%je_me => grid%je(xmap%me-xmap%root_pe)
   1940      grid%nxc_me = grid%ie_me - grid%is_me + 1
   1941      grid%nyc_me = grid%je_me - grid%js_me + 1
   1942      grid%tile_me => grid%tile(xmap%me-xmap%root_pe)
   1943 
   1944      grid%km = 1
   1945      grid%is_ug = .false.
   1946 !--- setup for land unstructure grid
   1947      if( g == lnd_ug_id ) then
   1948         if(xmap%version == VERSION1) call error_mesg('xgrid_mod', &
   1949                                      'does not support unstructured grid for VERSION1 grid' ,FATAL)
   1950         grid%is_ug     = .true.
   1951         grid%ug_domain = lnd_ug_domain
   1952         allocate ( grid%ls(0:xmap%npes-1), grid%le(0:xmap%npes-1) )
   1953         allocate ( grid%gs(0:xmap%npes-1), grid%ge(0:xmap%npes-1) )
   1954         grid%ls = 0
   1955         grid%le = -1
   1956         grid%gs = 0
   1957         grid%ge = -1
   1958         if(xmap%npes > grid%npes) then
   1959            call mpp_broadcast_domain(grid%ug_domain)
   1960         endif
   1961         call mpp_get_ug_compute_domains(grid%ug_domain,  begin=grid%ls(0:npes-1), end=grid%le(0:npes-1) )
   1962         call mpp_get_ug_domains_index(grid%ug_domain,  grid%gs(0:npes-1), grid%ge(0:npes-1) )
   1963         call mpp_get_ug_domain_tile_list(grid%ug_domain, grid%tile(0:npes-1))
   1964         grid%ls_me => grid%ls(xmap%me-xmap%root_pe); grid%le_me => grid%le(xmap%me-xmap%root_pe)
   1965         grid%gs_me => grid%gs(xmap%me-xmap%root_pe); grid%ge_me => grid%ge(xmap%me-xmap%root_pe)
   1966         grid%tile_me => grid%tile(xmap%me-xmap%root_pe)
   1967         grid%nxl_me = grid%le_me - grid%ls_me + 1
   1968         allocate(grid%l_index(grid%gs_me:grid%ge_me))
   1969         allocate(grid_index(grid%ls_me:grid%le_me))
   1970         call mpp_get_UG_domain_grid_index(grid%ug_domain, grid_index)
   1971 
   1972         grid%l_index = 0
   1973         do l = grid%ls_me,grid%le_me
   1974            grid%l_index(grid_index(l)) = l
   1975         enddo
   1976 
   1977         if( grid%on_this_pe ) then
   1978            allocate( grid%area    (grid%ls_me:grid%le_me,1) )
   1979            allocate( grid%area_inv(grid%ls_me:grid%le_me,1) )
   1980            grid%area       = 0.0
   1981            grid%size       = 0
   1982            grid%size_repro = 0

Page 55          Source Listing                  SETUP_XMAP
2021-06-01 08:56                                 xgrid.F90

   1983         endif
   1984      else if( grid%on_this_pe ) then
   1985         allocate( grid%area    (grid%is_me:grid%ie_me, grid%js_me:grid%je_me) )
   1986         allocate( grid%area_inv(grid%is_me:grid%ie_me, grid%js_me:grid%je_me) )
   1987         grid%area       = 0.0
   1988         grid%size       = 0
   1989         grid%size_repro = 0
   1990      endif
   1991 
   1992 ! get the center point of the grid box
   1993      if(.not. grid%is_ug) then
   1994         select case(xmap%version)
   1995         case(VERSION1)
   1996            if( grid%npes .NE. xmap%npes ) then
   1997               call error_mesg('xgrid_mod', ' grid%npes .NE. xmap%npes ', FATAL)
   1998            endif
   1999            call get_grid_version1(grid, grid_ids(g), grid_file)
   2000         case(VERSION2)
   2001            allocate(pelist(0:xmap%npes-1))
   2002            call mpp_get_current_pelist(pelist)
   2003            if( grid%on_this_pe ) then
   2004               call mpp_set_current_pelist(grid%pelist)
   2005               call get_mosaic_tile_grid(tile_file, mosaicfileobj, grid%domain)
   2006               call get_grid_version2(grid, grid_ids(g), tile_file)
   2007            endif
   2008            call mpp_set_current_pelist(pelist)
   2009            deallocate(pelist)
   2010 ! read the contact information from mosaic_file to check if atmosphere is nested model
   2011            if( g == 1 .AND. grid_ids(1) == 'ATM' ) then
   2012               nnest = get_nest_contact(mosaicfileobj, tile_nest, tile_parent, is_nest, &
   2013                    ie_nest, js_nest, je_nest, is_parent, ie_parent, js_parent, je_parent)
   2014 
   2015            endif
   2016         end select
   2017 
   2018         if( use_higher_order .AND. grid%id == 'ATM') then
   2019            if( nnest > 0 ) call error_mesg('xgrid_mod', 'second_order is not supported for nested coupler', FATAL)
   2020            if( grid%is_latlon ) then
   2021               call mpp_modify_domain(grid%domain, grid%domain_with_halo, whalo=1, ehalo=1, shalo=1, nhalo=1)
   2022               call mpp_get_data_domain(grid%domain_with_halo, grid%isd_me, grid%ied_me, grid%jsd_me, grid%jed_me, &
   2023                    xsize=grid%nxd_me, ysize=grid%nyd_me)
   2024            else
   2025               if(.NOT. present(atm_grid)) call error_mesg('xgrid_mod', &
   2026                                           'when first grid is "ATM", atm_grid should be present', FATAL)
   2027               if(grid%is_me-grid%isd_me .NE. 1 .or. grid%ied_me-grid%ie_me .NE. 1 .or.               &
   2028                    grid%js_me-grid%jsd_me .NE. 1 .or. grid%jed_me-grid%je_me .NE. 1 ) call error_mesg( &
   2029                    'xgrid_mod', 'for non-latlon grid (cubic grid), the halo size should be 1 in all four direction', FATAL)
   2030               if(.NOT.( ASSOCIATED(atm_grid%dx) .AND. ASSOCIATED(atm_grid%dy) .AND. ASSOCIATED(atm_grid%edge_w) .AND.    &
   2031                    ASSOCIATED(atm_grid%edge_e) .AND. ASSOCIATED(atm_grid%edge_s) .AND. ASSOCIATED(atm_grid%edge_n) .AND. &
   2032                    ASSOCIATED(atm_grid%en1) .AND. ASSOCIATED(atm_grid%en2) .AND. ASSOCIATED(atm_grid%vlon) .AND.         &
   2033                    ASSOCIATED(atm_grid%vlat) ) )  call error_mesg( 'xgrid_mod', &
   2034                    'for non-latlon grid (cubic grid), all the fields in atm_grid data type should be allocated', FATAL)
   2035               nxc = grid%ie_me  - grid%is_me  + 1
   2036               nyc = grid%je_me  - grid%js_me  + 1
   2037               if(size(atm_grid%dx,1) .NE. nxc .OR. size(atm_grid%dx,2) .NE. nyc+1)               &
   2038                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%dx', FATAL)
   2039               if(size(atm_grid%dy,1) .NE. nxc+1 .OR. size(atm_grid%dy,2) .NE. nyc)               &

Page 56          Source Listing                  SETUP_XMAP
2021-06-01 08:56                                 xgrid.F90

   2040                    call error_mesg('xgrid_mod', 'incorrect dimension sizeof atm_grid%dy', FATAL)
   2041               if(size(atm_grid%area,1) .NE. nxc .OR. size(atm_grid%area,2) .NE. nyc)             &
   2042                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%area', FATAL)
   2043               if(size(atm_grid%edge_w(:)) .NE. nyc+1 .OR. size(atm_grid%edge_e(:)) .NE. nyc+1)    &
   2044                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%edge_w/edge_e', FATAL)
   2045               if(size(atm_grid%edge_s(:)) .NE. nxc+1 .OR. size(atm_grid%edge_n(:)) .NE. nxc+1)    &
   2046                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%edge_s/edge_n', FATAL)
   2047               if(size(atm_grid%en1,1) .NE. 3 .OR. size(atm_grid%en1,2) .NE. nxc .OR. size(atm_grid%en1,3) .NE. nyc+1) &
   2048                    call error_mesg( 'xgrid_mod', 'incorrect dimension size of atm_grid%en1', FATAL)
   2049               if(size(atm_grid%en2,1) .NE. 3 .OR. size(atm_grid%en2,2) .NE. nxc+1 .OR. size(atm_grid%en2,3) .NE. nyc) &
   2050                    call error_mesg( 'xgrid_mod', 'incorrect dimension size of atm_grid%en2', FATAL)
   2051               if(size(atm_grid%vlon,1) .NE. 3 .OR. size(atm_grid%vlon,2) .NE. nxc .OR. size(atm_grid%vlon,3) .NE. nyc)   &
   2052                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%vlon', FATAL)
   2053               if(size(atm_grid%vlat,1) .NE. 3 .OR. size(atm_grid%vlat,2) .NE. nxc .OR. size(atm_grid%vlat,3) .NE. nyc)   &
   2054                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%vlat', FATAL)
   2055               allocate(grid%box%dx    (grid%is_me:grid%ie_me,   grid%js_me:grid%je_me+1 ))
   2056               allocate(grid%box%dy    (grid%is_me:grid%ie_me+1, grid%js_me:grid%je_me   ))
   2057               allocate(grid%box%area  (grid%is_me:grid%ie_me,   grid%js_me:grid%je_me   ))
   2058               allocate(grid%box%edge_w(grid%js_me:grid%je_me+1))
   2059               allocate(grid%box%edge_e(grid%js_me:grid%je_me+1))
   2060               allocate(grid%box%edge_s(grid%is_me:grid%ie_me+1))
   2061               allocate(grid%box%edge_n(grid%is_me:grid%ie_me+1))
   2062               allocate(grid%box%en1   (3, grid%is_me:grid%ie_me,   grid%js_me:grid%je_me+1 ))
   2063               allocate(grid%box%en2   (3, grid%is_me:grid%ie_me+1, grid%js_me:grid%je_me   ))
   2064               allocate(grid%box%vlon  (3, grid%is_me:grid%ie_me,   grid%js_me:grid%je_me   ))
   2065               allocate(grid%box%vlat  (3, grid%is_me:grid%ie_me,   grid%js_me:grid%je_me   ))
   2066               grid%box%dx     = atm_grid%dx
   2067               grid%box%dy     = atm_grid%dy
   2068               grid%box%area   = atm_grid%area
   2069               grid%box%edge_w = atm_grid%edge_w
   2070               grid%box%edge_e = atm_grid%edge_e
   2071               grid%box%edge_s = atm_grid%edge_s
   2072               grid%box%edge_n = atm_grid%edge_n
   2073               grid%box%en1    = atm_grid%en1
   2074               grid%box%en2    = atm_grid%en2
   2075               grid%box%vlon   = atm_grid%vlon
   2076               grid%box%vlat   = atm_grid%vlat
   2077            end if
   2078         end if
   2079      end if
   2080      if(xmap%version==VERSION2) call close_file(mosaicfileobj)
   2081      if (g>1) then
   2082         if(grid%on_this_pe) then
   2083            if(grid%is_ug) then
   2084               allocate( grid%frac_area(grid%ls_me:grid%le_me, 1, grid%km) )
   2085            else
   2086               allocate( grid%frac_area(grid%is_me:grid%ie_me, grid%js_me:grid%je_me, grid%km) )
   2087            endif
   2088            grid%frac_area = 1.0
   2089         endif
   2090 
   2091 ! load exchange cells, sum grid cell areas, set your1my2/your2my1
   2092         select case(xmap%version)
   2093         case(VERSION1)
   2094            call load_xgrid (xmap, grid, grid_file, grid_ids(1), grid_ids(g), 1, 1, use_higher_order)
   2095         case(VERSION2)
   2096            select case(grid_ids(1))

Page 57          Source Listing                  SETUP_XMAP
2021-06-01 08:56                                 xgrid.F90

   2097            case( 'ATM' )
   2098               xgrid_name = 'a'
   2099            case( 'LND' )
   2100               xgrid_name = 'l'
   2101            case( 'WAV' )
   2102               xgrid_name = 'w'
   2103            case default
   2104               call error_mesg('xgrid_mod', 'grid_ids(1) should be ATM, LND or WAV', FATAL)
   2105            end select
   2106            select case(grid_ids(g))
   2107            case( 'LND' )
   2108               xgrid_dimname = 'nfile_'//trim(xgrid_name)//'Xl'
   2109               xgrid_name = trim(xgrid_name)//'Xl_file'
   2110            case( 'OCN' )
   2111               xgrid_dimname = 'nfile_'//trim(xgrid_name)//'Xo'
   2112               xgrid_name = trim(xgrid_name)//'Xo_file'
   2113            case( 'WAV' )
   2114               xgrid_dimname = 'nfile_'//trim(xgrid_name)//'Xw'
   2115               xgrid_name = trim(xgrid_name)//'Xw_file'
   2116            case default
   2117               call error_mesg('xgrid_mod', 'grid_ids(g) should be LND, OCN or WAV', FATAL)
   2118            end select
   2119 ! get the tile list for each mosaic
   2120 
   2121            call read_data(gridfileobj, lowercase(grid_ids(1))//'_mosaic_file', mosaic1)
   2122            call read_data(gridfileobj, lowercase(grid_ids(g))//'_mosaic_file', mosaic2)
   2123 
   2124            mosaic1 = 'INPUT/'//trim(mosaic1)
   2125            mosaic2 = 'INPUT/'//trim(mosaic2)
   2126 
   2127            allocate(tile1_list(grid1%ntile), tile2_list(grid%ntile) )
   2128            if(.not. open_file(fileobj,mosaic1, "read")) then
   2129               call error_mesg('xgrid_mod(setup_xmap)', 'Error when opening mosaic1 file '//trim(mosaic1), FATAL)
   2130            endif
   2131            call read_data(fileobj, 'gridtiles', tile1_list)
   2132            call close_file(fileobj)
   2133 
   2134            if(.not. open_file(fileobj,mosaic2, "read")) then
   2135               call error_mesg('xgrid_mod(setup_xmap)', 'Error when opening mosaic2 file '//trim(mosaic2), FATAL)
   2136            endif
   2137            call read_data(fileobj, 'gridtiles', tile2_list)
   2138            call close_file(fileobj)
   2139 
   2140            if(variable_exists(gridfileobj, xgrid_name)) then
   2141               call get_dimension_size(gridfileobj, xgrid_dimname, nxgrid_file)
   2142               if(nxgrid_file>0) then
   2143                  allocate(xgrid_filelist(nxgrid_file))
   2144                  call read_data(gridfileobj, xgrid_name, xgrid_filelist)
   2145               endif
   2146 ! loop through all the exchange grid file
   2147               do i = 1, nxgrid_file
   2148                  xgrid_file = 'INPUT/'//trim(xgrid_filelist(i))
   2149                  if(.not. open_file(fileobj,xgrid_file, "read")) then
   2150                      call error_mesg('xgrid_mod(setup_xmap)', 'Error when opening xgrid file '//trim(xgrid_file), FATAL)
   2151                  endif
   2152 
   2153 ! find the tile number of side 1 and side 2 mosaic, which is contained in field contact

Page 58          Source Listing                  SETUP_XMAP
2021-06-01 08:56                                 xgrid.F90

   2154                  call read_data(fileobj, "contact", contact)
   2155                  i1 = index(contact, ":")
   2156                  i2 = index(contact, "::")
   2157                  i3 = index(contact, ":", back=.true. )
   2158                  if(i1 == 0 .OR. i2 == 0) call error_mesg('xgrid_mod', &
   2159                       'field contact in file '//trim(xgrid_file)//' should contains ":" and "::" ', FATAL)
   2160                  if(i1 == i3) call error_mesg('xgrid_mod', &
   2161                       'field contact in file '//trim(xgrid_file)//' should contains two ":"', FATAL)
   2162                  tile1_name = contact(i1+1:i2-1)
   2163                  tile2_name = contact(i3+1:len_trim(contact))
   2164                  tile1 = 0; tile2 = 0
   2165                  do j = 1, grid1%ntile
   2166                     if( trim(tile1_name) == trim(tile1_list(j)) ) then
   2167                        tile1 = j
   2168                        exit
   2169                     end if
   2170                  end do
   2171                  do j = 1, grid%ntile
   2172                     if( tile2_name == tile2_list(j) ) then
   2173                        tile2 = j
   2174                        exit
   2175                     end if
   2176                  end do
   2177 
   2178                  if(tile1 == 0) call error_mesg('xgrid_mod', &
   2179                       trim(tile1_name)//' is not a tile of mosaic '//trim(mosaic1), FATAL)
   2180                  if(tile2 == 0) call error_mesg('xgrid_mod', &
   2181                       trim(tile2_name)//' is not a tile of mosaic '//trim(mosaic2), FATAL)
   2182                  call close_file(fileobj)
   2183                  call load_xgrid (xmap, grid, xgrid_file, grid_ids(1), grid_ids(g), tile1, tile2, &
   2184                                   use_higher_order)
   2185               end do
   2186               deallocate(xgrid_filelist)
   2187            endif
   2188            deallocate(tile1_list, tile2_list)
   2189         end select
   2190         if(grid%on_this_pe) then
   2191            grid%area_inv = 0.0;
   2192            where (grid%area>0.0) grid%area_inv = 1.0/grid%area
   2193         endif
   2194      end if
   2195   end do
   2196 
   2197   if(xmap%version == VERSION2) call close_file(gridfileobj)
   2198 
   2199   call mpp_clock_end(id_load_xgrid)
   2200 
   2201   grid1%area_inv = 0.0;
   2202   where (grid1%area>0.0)
   2203      grid1%area_inv = 1.0/grid1%area
   2204   end where
   2205 
   2206   xmap%your1my2(xmap%me-xmap%root_pe) = .false. ! this is not necessarily true but keeps
   2207   xmap%your2my1(xmap%me-xmap%root_pe) = .false. ! a PE from communicating with itself
   2208 
   2209   if (make_exchange_reproduce) then
   2210      allocate( xmap%send_count_repro(0:xmap%npes-1) )

Page 59          Source Listing                  SETUP_XMAP
2021-06-01 08:56                                 xgrid.F90

   2211      allocate( xmap%recv_count_repro(0:xmap%npes-1) )
   2212      xmap%send_count_repro = 0
   2213      xmap%recv_count_repro = 0
   2214      do g=2,size(xmap%grids(:))
   2215         do p=0,xmap%npes-1
   2216            if(xmap%grids(g)%size >0) &
   2217                 xmap%send_count_repro(p) = xmap%send_count_repro(p) &
   2218                 +count(xmap%grids(g)%x      (:)%pe==p+xmap%root_pe)
   2219            if(xmap%grids(g)%size_repro >0) &
   2220                 xmap%recv_count_repro(p) = xmap%recv_count_repro(p) &
   2221                 +count(xmap%grids(g)%x_repro(:)%pe==p+xmap%root_pe)
   2222         end do
   2223      end do
   2224      xmap%send_count_repro_tot = sum(xmap%send_count_repro)
   2225      xmap%recv_count_repro_tot = sum(xmap%recv_count_repro)
   2226   else
   2227      xmap%send_count_repro_tot = 0
   2228      xmap%recv_count_repro_tot = 0
   2229   end if
   2230 
   2231   allocate( xmap%x1(1:sum(xmap%grids(2:size(xmap%grids(:)))%size)) )
   2232   allocate( xmap%x2(1:sum(xmap%grids(2:size(xmap%grids(:)))%size)) )
   2233   allocate( xmap%x1_put(1:sum(xmap%grids(2:size(xmap%grids(:)))%size)) )
   2234   allocate( xmap%x2_get(1:sum(xmap%grids(2:size(xmap%grids(:)))%size)) )
   2235 
   2236 !--- The following will setup indx to be used in regen
   2237   allocate(xmap%get1, xmap%put1)
   2238   call mpp_clock_begin(id_set_comm)
   2239 
   2240   call set_comm_get1(xmap)
   2241 
   2242   call set_comm_put1(xmap)
   2243 
   2244   if(make_exchange_reproduce) then
   2245     allocate(xmap%get1_repro)
   2246     call set_comm_get1_repro(xmap)
   2247   endif
   2248 
   2249   call mpp_clock_end(id_set_comm)
   2250 
   2251   call mpp_clock_begin(id_regen)
   2252   call regen(xmap)
   2253   call mpp_clock_end(id_regen)
   2254 
   2255   call mpp_clock_begin(id_conservation_check)
   2256 
   2257   if(lnd_ug_id ==0) then
   2258      xxx = conservation_check(grid1%area*0.0+1.0, grid1%id, xmap)
   2259   else
   2260      allocate(tmp_2d(grid1%is_me:grid1%ie_me, grid1%js_me:grid1%je_me))
   2261      tmp_2d = 1.0
   2262      xxx = conservation_check_ug(tmp_2d, grid1%id, xmap)
   2263      deallocate(tmp_2d)
   2264   endif
   2265   write(out_unit,* )"Checked data is array of constant 1"
   2266   write(out_unit,* )grid1%id,'(',xmap%grids(:)%id,')=', xxx
   2267 

Page 60          Source Listing                  SETUP_XMAP
2021-06-01 08:56                                 xgrid.F90

   2268   if(lnd_ug_id == 0) then
   2269      do g=2,size(xmap%grids(:))
   2270         xxx = conservation_check(xmap%grids(g)%frac_area*0.0+1.0, xmap%grids(g)%id, xmap )
   2271         write( out_unit,* )xmap%grids(g)%id,'(',xmap%grids(:)%id,')=', xxx
   2272      enddo
   2273   else
   2274      do g=2,size(xmap%grids(:))
   2275         grid => xmap%grids(g)
   2276         allocate(tmp_3d(grid%is_me:grid%ie_me, grid%js_me:grid%je_me,grid%km))
   2277         tmp_3d = 1.0
   2278         xxx = conservation_check_ug(tmp_3d, xmap%grids(g)%id, xmap )
   2279         write( out_unit,* )xmap%grids(g)%id,'(',xmap%grids(:)%id,')=', xxx
   2280         deallocate(tmp_3d)
   2281      enddo
   2282   endif
   2283 ! create an random number 2d array
   2284   if(grid1%id == "ATM") then
   2285      allocate(check_data(size(grid1%area,1), size(grid1%area,2)))
   2286      call random_number(check_data)
   2287 
   2288 !--- second order along both zonal and meridinal direction
   2289      if(lnd_ug_id ==0) then
   2290         xxx = conservation_check(check_data, grid1%id, xmap,  remap_method = remapping_method )
   2291      else
   2292         xxx = conservation_check_ug(check_data, grid1%id, xmap,  remap_method = remapping_method )
   2293      endif
   2294      write( out_unit,* ) &
   2295           "Checked data is array of random number between 0 and 1 using "//trim(interp_method)
   2296      write( out_unit,* )grid1%id,'(',xmap%grids(:)%id,')=', xxx
   2297 
   2298      deallocate(check_data)
   2299      do g=2,size(xmap%grids(:))
   2300         allocate(check_data_3d(xmap%grids(g)%is_me:xmap%grids(g)%ie_me, &
   2301                  xmap%grids(g)%js_me:xmap%grids(g)%je_me, grid1%km))
   2302         call random_number(check_data_3d)
   2303         if(lnd_ug_id ==0) then
   2304            xxx = conservation_check(check_data_3d, xmap%grids(g)%id, xmap,  remap_method = remapping_method )
   2305         else
   2306            xxx = conservation_check_ug(check_data_3d, xmap%grids(g)%id, xmap,  remap_method = remapping_method )
   2307         endif
   2308         write( out_unit,* )xmap%grids(g)%id,'(',xmap%grids(:)%id,')=', xxx
   2309         deallocate( check_data_3d)
   2310      end do
   2311   endif
   2312   call mpp_clock_end(id_conservation_check)
   2313 
   2314   call mpp_clock_end(id_setup_xmap)
   2315 
   2316 end subroutine setup_xmap

Page 61          Source Listing                  SETUP_XMAP
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                
                                      
 xgrid_mod_mp_setup_xmap_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   2030                                 scalar                    2030,2031,2032,2033               
 ATM_GRID                   Dummy  1780     GRID_BOX_TYPE   1056        scalar   ARG,IN           2025,2030,2031,2032,2033,2037,2039
                                                                                                  ,2041,2043,2045,2047,2049,2051,205
                                                                                                  3,2066,2067,2068,2069,2070,2071,20
                                                                                                  72,2073,2074,2075,2076            
 CHECK_DATA                 Local  1793     R(8)            8     2     1        ALC              2285,2286,2290,2292,2298          
 CHECK_DATA_3D              Local  1794     R(8)            8     3     1        ALC              2300,2302,2304,2306,2309          
 COMPRESSED_READ_0D         Subr   1878                                          PRIV             1878,2121,2122,2154               
 COMPRESSED_READ_1D         Subr   2131                                          PRIV             2131,2137,2144                    
 CONSERVATION_CHECK         Local  2258                                 scalar                    295,2258,2270,2290,2304,7113,7125,
                                                                                                  7145,7159                         
 CONSERVATION_CHECK_SIDE1@0 Local  2258     R(8)            8     1     3                                                           
 CONSERVATION_CHECK_SIDE2@0 Local  2270     R(8)            8     1     3                                                           
 CONSERVATION_CHECK_UG      Local  2262                                 scalar                    2262,2278,2292,2306,7117,7133,7147
                                                                                                  ,7161                             
 CONSERVATION_CHECK_UG_SIDE                                                                                                         
 1@0                        Local  2262     R(8)            8     1     3                                                           
 CONSERVATION_CHECK_UG_SIDE                                                                                                         
 2@0                        Local  2278     R(8)            8     1     3                                                           
 CONTACT                    Local  1798     CHAR            256         scalar                    2154,2155,2156,2157,2162,2163     
 COUNT                      Func   2218                                 scalar                    2218,2221                         
 DOMAIN2                    Local  1803     DOMAIN2D        752         scalar   SAVE             1890,1910,1912,1916,1920,1924     
 DOMAINUG                   Type   1786                                 scalar                    261,539,1786,6659                 
 FILEOBJ                    Local  1807     FMSNETCDFFILE_T 872         scalar                    2128,2131,2132,2134,2137,2138,2149
                                                                                                  ,2154,2182                        
 G                          Local  1788     I(4)            4           scalar                    1850,1851,1856,1857,1858,1859,1860
                                                                                                  ,1861,1878,1885,1889,1909,1923,192
                                                                                                  7,1947,1999,2006,2011,2081,2094,21
                                                                                                  06,2122,2183,2214,2216,2218,2219,2
                                                                                                  221,2269,2270,2271,2274,2275,2278,
                                                                                                  2279,2299,2300,2301,2304,2306,2308
 GET_MOSAIC_TILE_GRID       Subr   2005                                          PRIV             268,2005                          
 GET_NEST_CONTACT           Local  2012                                 scalar                    2012,6875                         
 GRID                       Local  1791     GRID_TYPE       4888        scalar   PTR,SAVE         1791,1857,1859,1860,1861,1862,1863
                                                                                                  ,1864,1865,1866,1867,1868,1869,187
                                                                                                  0,1871,1872,1876,1882,1886,1888,18
                                                                                                  89,1890,1891,1892,1893,1896,1897,1
                                                                                                  898,1899,1901,1902,1903,1905,1906,
                                                                                                  1907,1908,1910,1911,1912,1916,1917
                                                                                                  ,1918,1919,1920,1921,1923,1926,192
                                                                                                  9,1933,1934,1935,1936,1938,1939,19
                                                                                                  40,1941,1942,1944,1945,1950,1951,1
                                                                                                  952,1953,1954,1955,1956,1957,1958,
                                                                                                  1959,1961,1962,1963,1964,1965,1966

Page 62          Source Listing                  SETUP_XMAP
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,1967,1968,1969,1970,1972,1973,197
                                                                                                  4,1977,1978,1979,1980,1981,1982,19
                                                                                                  84,1985,1986,1987,1988,1989,1993,1
                                                                                                  996,1999,2003,2004,2005,2006,2018,
                                                                                                  2020,2021,2022,2023,2027,2028,2035
                                                                                                  ,2036,2055,2056,2057,2058,2059,206
                                                                                                  0,2061,2062,2063,2064,2065,2066,20
                                                                                                  67,2068,2069,2070,2071,2072,2073,2
                                                                                                  074,2075,2076,2082,2083,2084,2086,
                                                                                                  2088,2094,2127,2171,2183,2190,2191
                                                                                                  ,2192,2275,2276                   
 GRID1                      Local  1791     GRID_TYPE       4888        scalar   PTR,SAVE         1791,1858,2127,2165,2201,2202,2203
                                                                                                  ,2258,2260,2262,2266,2284,2285,229
                                                                                                  0,2292,2296,2301                  
 GRIDFILEOBJ                Local  1807     FMSNETCDFFILE_T 872         scalar                    1826,1831,1832,1834,1878,2121,2122
                                                                                                  ,2140,2141,2144,2197              
 GRID_BOX_TYPE              Type   1785                     1056        scalar                    300,479,529,1785,6658             
 GRID_DOMAINS               Dummy  1780     RECORD          752   1     1        ARG,IN           1860,1861                         
 GRID_FILE                  Dummy  1780     CHAR                        scalar   ARG,IN           1826,1827,1837,1999,2094          
 GRID_IDS                   Dummy  1780     CHAR            3     1     1        ARG,IN           1818,1850,1851,1856,1859,1878,1885
                                                                                                  ,1889,1909,1923,1927,1999,2006,201
                                                                                                  1,2094,2096,2106,2121,2122,2183   
 GRID_INDEX                 Local  1806     I(4)            4     1     1        ALC              1969,1970,1974                    
 I                          Local  1788     I(4)            4           scalar                    2147,2148                         
 I1                         Local  1789     I(4)            4           scalar                    2155,2158,2160,2162               
 I2                         Local  1789     I(4)            4           scalar                    2156,2158,2162                    
 I3                         Local  1789     I(4)            4           scalar                    2157,2160,2163                    
 IE_NEST                    Local  2013     I(4)            4           scalar                    666,2013,6876                     
 INDEX                      Func   2155                                 scalar                    2155,2156,2157                    
 IS_NEST                    Local  2012     I(4)            4           scalar                    666,2012,6875                     
 J                          Local  1789     I(4)            4           scalar                    2165,2166,2167,2171,2172,2173     
 JE_NEST                    Local  2013     I(4)            4           scalar                    666,2013,6876                     
 JS_NEST                    Local  2013     I(4)            4           scalar                    666,2013,6876                     
 L                          Local  1805     I(4)            4           scalar                    1973,1974                         
 LEN_TRIM                   Func   2163                                 scalar                    2163                              
 LND_UG_DOMAIN              Dummy  1780     DOMAINUG        544         scalar   ARG,IN           1849,1951                         
 LND_UG_ID                  Local  1805     I(4)            4           scalar                    1848,1851,1947,2257,2268,2289,2303
 MOSAIC1                    Local  1798     CHAR            256         scalar                    2121,2124,2128,2129,2179          
 MOSAIC2                    Local  1798     CHAR            256         scalar                    2122,2125,2134,2135,2181          
 MOSAICFILEOBJ              Local  1807     FMSNETCDFFILE_T 872         scalar                    1879,1882,2005,2012,2080          
 MOSAIC_FILE                Local  1797     CHAR            256         scalar                    1878,1879,1880                    
 MPP_BROADCAST_DOMAIN       Local  1890                                 scalar   PRIV             259,1890,1892,1959,6753,6755,6822 
 MPP_BROADCAST_DOMAIN_1     Subr   1892                                          PRIV             1892,6755                         
 MPP_BROADCAST_DOMAIN_2     Subr   1890                                          PRIV             1890,6753                         
 MPP_BROADCAST_DOMAIN_UG    Subr   1959                                          PRIV             1959,6822                         
 MPP_DEALLOCATE_DOMAIN      Local  1924                                 scalar   PRIV             257,1924,6787                     
 MPP_DEALLOCATE_DOMAIN2D    Subr   1924                                          PRIV             1924,6787                         
 MPP_DOMAIN_IS_INITIALIZED  Func   1861     L(4)            4           scalar   PRIV             259,1861,6727                     
 MPP_GET_COMPUTE_DOMAINS    Local  1906                                 scalar   PRIV             251,1906,1910,1916,1918,6769,6773,
                                                                                                  6779,6781                         
 MPP_GET_COMPUTE_DOMAINS2D  Subr   1906                                          PRIV             1906,1910,1916,1918,6769,6773,6779
                                                                                                  ,6781                             
 MPP_GET_DATA_DOMAIN        Local  1901                                 scalar   PRIV             253,1901,2022,6764,6884           
 MPP_GET_DATA_DOMAIN2D      Subr   1901                                          PRIV             1901,2022,6764,6884               
 MPP_GET_DOMAIN_NPES        Func   1888     I(4)            4           scalar   PRIV             258,1888,1893,6751,6756           

Page 63          Source Listing                  SETUP_XMAP
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_GET_DOMAIN_PELIST      Subr   1898                                          PRIV             260,1898,6761                     
 MPP_GET_DOMAIN_ROOT_PE     Func   1899     I(4)            4           scalar   PRIV             258,1899,6762                     
 MPP_GET_GLOBAL_DOMAIN      Local  1903                                 scalar   PRIV             256,1903,6766                     
 MPP_GET_GLOBAL_DOMAIN2D    Subr   1903                                          PRIV             1903,6766                         
 MPP_GET_TILE_LIST          Subr   1908                                          PRIV             255,1908,1912,1920,1921,6771,6775,
                                                                                                  6783,6784                         
 MPP_GET_UG_COMPUTE_DOMAINS Subr   1961                                          PRIV             261,1961,6824                     
 MPP_GET_UG_DOMAINS_INDEX   Subr   1962                                          PRIV             262,1962,6825                     
 MPP_GET_UG_DOMAIN_GRID_IND                                                                                                         
 EX                         Subr   1970                                          PRIV             262,1970,6833                     
 MPP_GET_UG_DOMAIN_TILE_LIS                                                                                                         
 T                          Subr   1963                                          PRIV             263,1963,6826                     
 MPP_MAX                    Local  1935                                 scalar   PRIV             243,1935,1936,6798,6799           
 MPP_MAX_INT4_0D            Subr   1935                                          PRIV             1935,1936,6798,6799               
 MPP_MODIFY_DOMAIN          Local  2021                                 scalar   PRIV             253,2021,6883                     
 MPP_MODIFY_DOMAIN2D        Subr   2021                                          PRIV             2021,6883                         
 MPP_NPES                   Func   1815     I(4)            4           scalar   PRIV             242,1815,6687                     
 MPP_SET_CURRENT_PELIST     Subr   2004                                          PRIV             250,2004,2008,6867,6871           
 NNEST                      Local  2012     I(4)            4           scalar                    665,2012,2019,2845,6875,6881      
 NPES                       Local  1801     I(4)            4           scalar                    1896,1897,1906,1907,1908,1909,1910
                                                                                                  ,1911,1912,1915,1926,1927,1928,196
                                                                                                  1,1962,1963                       
 NPES2                      Local  1801     I(4)            4           scalar                    1915,1916,1917,1918,1919,1920,1921
 NXC                        Local  1790     I(4)            4           scalar                    2035,2037,2039,2041,2045,2047,2049
                                                                                                  ,2051,2053                        
 NXGRID_FILE                Local  1789     I(4)            4           scalar                    2141,2142,2143,2147               
 NYC                        Local  1790     I(4)            4           scalar                    2036,2037,2039,2041,2043,2047,2049
                                                                                                  ,2051,2053                        
 OUT_UNIT                   Local  1790     I(4)            4           scalar                    1813,2265,2266,2271,2279,2294,2296
                                                                                                  ,2308                             
 P                          Local  1788     I(4)            4           scalar                    1928,1929,2215,2217,2218,2220,2221
 PELIST                     Local  1802     I(4)            4     1     1        ALC              2001,2002,2008,2009               
 PRESENT                    Func   1849                                 scalar                    1849,2025                         
 RANDOM_NUMBER              Intrin 2286                                                           2286,2302                         
 SETUP_XMAP                 Subr   1780                                                                                             
 SIZE                       Func   1818                                 scalar                    1818,1850,1856,2037,2039,2041,2043
                                                                                                  ,2045,2047,2049,2051,2053,2214,223
                                                                                                  1,2232,2233,2234,2269,2274,2285,22
                                                                                                  99                                
 SUM                        Func   2224                                 scalar                    2224,2225,2231,2232,2233,2234     
 TILE1                      Local  1789     I(4)            4           scalar                    2164,2167,2178,2183               
 TILE1_LIST                 Local  1800     CHAR            256   1     1        ALC              2127,2131,2166,2188               
 TILE1_NAME                 Local  1799     CHAR            256         scalar                    2162,2166,2179                    
 TILE2                      Local  1789     I(4)            4           scalar                    2164,2173,2180,2183               
 TILE2_LIST                 Local  1800     CHAR            256   1     1        ALC              2127,2137,2172,2188               
 TILE2_NAME                 Local  1799     CHAR            256         scalar                    2163,2172,2181                    
 TILE_FILE                  Local  1797     CHAR            256         scalar                    2005,2006                         
 TILE_NEST                  Local  2012     I(4)            4           scalar                    2012,4378,4396,4450,4509,4512,4543
                                                                                                  ,4546,4619,6875                   
 TMP_2D                     Local  1795     R(8)            8     2     1        ALC              2260,2261,2262,2263               
 TMP_3D                     Local  1795     R(8)            8     3     1        ALC              2276,2277,2278,2280               
 TRIM                       Func   1826                                 scalar                    1826,1827,1837,1879,1880,2108,2109
                                                                                                  ,2111,2112,2114,2115,2124,2125,212
                                                                                                  9,2135,2148,2150,2159,2161,2166,21
                                                                                                  79,2181,2295                      

Page 64          Source Listing                  SETUP_XMAP
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 UNIT                       Local  1789     I(4)            4           scalar                                                      
 USE_HIGHER_ORDER           Local  1804     L(4)            4           scalar                    1804,1811,2018,2094,2184          
 XGRID_DIMNAME              Local  1796     CHAR            256         scalar                    2108,2111,2114,2141               
 XGRID_FILE                 Local  1796     CHAR            256         scalar                    2148,2149,2150,2159,2161,2183     
 XGRID_FILELIST             Local  1800     CHAR            256   1     1        ALC              2143,2144,2148,2186               
 XGRID_NAME                 Local  1796     CHAR            256         scalar                    2098,2100,2102,2108,2109,2111,2112
                                                                                                  ,2114,2115,2140,2144              
 XMAP                       Dummy  1780     XMAP_TYPE       928         scalar   ARG,INOUT        1814,1815,1816,1818,1820,1821,1823
                                                                                                  ,1824,1833,1835,1841,1857,1858,186
                                                                                                  2,1863,1864,1874,1889,1891,1905,19
                                                                                                  09,1910,1911,1912,1915,1918,1919,1
                                                                                                  921,1923,1927,1938,1939,1942,1948,
                                                                                                  1952,1953,1958,1964,1965,1966,1994
                                                                                                  ,1996,2001,2080,2092,2094,2183,219
                                                                                                  7,2206,2207,2210,2211,2212,2213,22
                                                                                                  14,2215,2216,2217,2218,2219,2220,2
                                                                                                  221,2224,2225,2227,2228,2231,2232,
                                                                                                  2233,2234,2237,2240,2242,2245,2246
                                                                                                  ,2252,2258,2262,2266,2269,2270,227
                                                                                                  1,2274,2275,2278,2279,2290,2292,22
                                                                                                  96,2299,2300,2301,2304,2306,2308  
 XXX                        Local  1792     R(8)            8     1     3                         2258,2262,2266,2270,2271,2278,2279
                                                                                                  ,2290,2292,2296,2304,2306,2308    


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 GRID_BOX_TYPE.AREA         R(8)            8     192      2     1        PTR              2041,2057,2068,3942,6903,6919,6930 
 GRID_BOX_TYPE.DX           R(8)            8     0        2     1        PTR              2030,2037,2055,2066,3942,6892,6899 
                                                                                           ,6917,6928                         
 GRID_BOX_TYPE.DY           R(8)            8     96       2     1        PTR              2030,2039,2056,2067,3942,6892,6901 
                                                                                           ,6918,6929                         
 GRID_BOX_TYPE.EDGE_E       R(8)            8     360      1     1        PTR              2031,2043,2059,2070,3943,6893,6905 
                                                                                           ,6921,6932                         
 GRID_BOX_TYPE.EDGE_N       R(8)            8     504      1     1        PTR              2031,2045,2061,2072,3944,6893,6907 
                                                                                           ,6923,6934                         
 GRID_BOX_TYPE.EDGE_S       R(8)            8     432      1     1        PTR              2031,2045,2060,2071,3943,6893,6907 
                                                                                           ,6922,6933                         
 GRID_BOX_TYPE.EDGE_W       R(8)            8     288      1     1        PTR              2030,2043,2058,2069,3943,6892,6905 
                                                                                           ,6920,6931                         
 GRID_BOX_TYPE.EN1          R(8)            8     576      3     1        PTR              2032,2047,2062,2073,3944,6894,6909 
                                                                                           ,6924,6935                         
 GRID_BOX_TYPE.EN2          R(8)            8     696      3     1        PTR              2032,2049,2063,2074,3944,6894,6911 
                                                                                           ,6925,6936                         
 GRID_BOX_TYPE.VLAT         R(8)            8     936      3     1        PTR              2033,2053,2065,2076,3945,6895,6915 
                                                                                           ,6927,6938                         
 GRID_BOX_TYPE.VLON         R(8)            8     816      3     1        PTR              2032,2051,2064,2075,3945,6894,6913 
                                                                                           ,6926,6937                         
 GRID_TYPE.AREA_INV         R(8)            8     1104     2     1        PTR              1979,1986,2191,2192,2201,2203,3786 
                                                                                           ,4245,4341,5571,5665,5695,6842,684 
                                                                                           9,7036,7037,7044,7046              
 GRID_TYPE.BOX              GRID_BOX_TYPE   1056  2888           scalar                    2055,2056,2057,2058,2059,2060,2061 
                                                                                           ,2062,2063,2064,2065,2066,2067,206 

Page 65          Source Listing                  SETUP_XMAP
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           8,2069,2070,2071,2072,2073,2074,20 
                                                                                           75,2076,3942,3943,3944,3945,6917,6 
                                                                                           918,6919,6920,6921,6922,6923,6924, 
                                                                                           6925,6926,6927,6928,6929,6930,6931 
                                                                                           ,6932,6933,6934,6935,6936,6937,693 
                                                                                           8                                  
 GRID_TYPE.DOMAIN_WITH_HALO DOMAIN2D        752   2128           scalar                    2021,2022,3927,6883,6884           
 GRID_TYPE.FRAC_AREA        R(8)            8     888      3     1        PTR              2084,2086,2088,2270,3163,3170,3182 
                                                                                           ,3189,3237,3244,3260,3267,3309,331 
                                                                                           3,3354,3355,3357,3360,3405,3406,34 
                                                                                           08,3410,4304,4390,4440,4444,4458,4 
                                                                                           459,4462,4525,4535,4593,4595,4606, 
                                                                                           4608,4631,4632,4639,4804,4928,5629 
                                                                                           ,6946,6948,6950,7125               
 GRID_TYPE.GE               I(4)            4     4200     1     1        PTR,TGT          1953,1957,1962,1965,5727,6816,6820 
                                                                                           ,6825,6828                         
 GRID_TYPE.GE_ME            I(4)            4     4120           scalar   PTR              1965,1968,5711,6828,6831           
 GRID_TYPE.GS               I(4)            4     4128     1     1        PTR,TGT          1953,1956,1962,1965,5727,6816,6819 
                                                                                           ,6825,6828                         
 GRID_TYPE.GS_ME            I(4)            4     4112           scalar   PTR              1965,1968,5711,6828,6831           
 GRID_TYPE.IE               I(4)            4     248      1     1        PTR,TGT          1862,1869,1906,1910,1916,1918,1938 
                                                                                           ,2887,5729,6728,6735,6769,6773,677 
                                                                                           9,6781,6801                        
 GRID_TYPE.IS               I(4)            4     176      1     1        PTR,TGT          1862,1868,1906,1910,1916,1918,1938 
                                                                                           ,2887,5729,6728,6734,6769,6773,677 
                                                                                           9,6781,6801                        
 GRID_TYPE.JE               I(4)            4     392      1     1        PTR,TGT          1863,1871,1907,1911,1917,1919,1939 
                                                                                           ,2887,5729,6729,6737,6770,6774,678 
                                                                                           0,6782,6802                        
 GRID_TYPE.JS               I(4)            4     320      1     1        PTR,TGT          1863,1870,1907,1911,1917,1919,1939 
                                                                                           ,2887,5729,6729,6736,6770,6774,678 
                                                                                           0,6782,6802                        
 GRID_TYPE.KM               I(4)            4     544            scalar                    1944,2084,2086,2276,2301,3132,3161 
                                                                                           ,3181,3235,3259,3356,3358,3407,340 
                                                                                           8,3750,3769,4303,4386,4519,4531,45 
                                                                                           91,4758,5434,5628,5678,6807,6946,6 
                                                                                           948,7131,7156                      
 GRID_TYPE.LE               I(4)            4     4040     1     1        PTR,TGT          1952,1955,1961,1964,6815,6818,6824 
                                                                                           ,6827                              
 GRID_TYPE.LE_ME            I(4)            4     3960           scalar   PTR              1964,1967,1969,1973,1978,1979,2084 
                                                                                           ,3408,4507,4519,4591,5434,5595,567 
                                                                                           8,6827,6830,6832,6836,6841,6842,69 
                                                                                           46                                 
 GRID_TYPE.LS               I(4)            4     3968     1     1        PTR,TGT          1952,1954,1961,1964,6815,6817,6824 
                                                                                           ,6827                              
 GRID_TYPE.LS_ME            I(4)            4     3952           scalar   PTR              1964,1967,1969,1973,1978,1979,2084 
                                                                                           ,3408,4507,4519,4591,5434,5595,567 
                                                                                           8,6827,6830,6832,6836,6841,6842,69 
                                                                                           46                                 
 GRID_TYPE.NI               I(4)            4     92             scalar                    1866,1903,1933,1935,5710,5726,6732 
                                                                                           ,6766,6796,6798                    
 GRID_TYPE.NJ               I(4)            4     96             scalar                    1867,1903,1934,1936,6733,6766,6797 
                                                                                           ,6799                              
 GRID_TYPE.NPES             I(4)            4     4              scalar                    1865,1888,1889,1891,1893,1896,1923 
                                                                                           ,1926,1958,1996,6731,6751,6752,675 

Page 66          Source Listing                  SETUP_XMAP
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           4,6756,6759,6786,6789,6821,6859    
 GRID_TYPE.NTILE            I(4)            4     88             scalar                    1876,1882,1929,2127,2165,2171,6742 
                                                                                           ,6745,6792,6983,6984,6987,7012,701 
                                                                                           8                                  
 GRID_TYPE.NXC_ME           I(4)            4     520            scalar                    1940,6803                          
 GRID_TYPE.NXD_ME           I(4)            4     512            scalar                    1902,2023,6765,6885                
 GRID_TYPE.NXL_ME           I(4)            4     3948           scalar                    1967,6830                          
 GRID_TYPE.NYC_ME           I(4)            4     524            scalar                    1941,6804                          
 GRID_TYPE.NYD_ME           I(4)            4     516            scalar                    1902,2023,6765,6885                
 GRID_TYPE.ON_THIS_PE       L(4)            4     8              scalar                    1861,1886,1977,1984,2003,2082,2190 
                                                                                           ,4385,4389,4439,4457,4518,4523,453 
                                                                                           0,4534,4589,4630,6727,6749,6840,68 
                                                                                           47,6866,6944,7035                  
 GRID_TYPE.PELIST           I(4)            4     16       1     1        PTR              1897,1898,2004,6760,6761,6867      
 GRID_TYPE.ROOT_PE          I(4)            4     12             scalar                    1899,1905,6762,6768                
 GRID_TYPE.UG_DOMAIN        DOMAINUG        544   4344           scalar                    1951,1959,1961,1962,1963,1970,4508 
                                                                                           ,4592,6814,6822,6824,6825,6826,683 
                                                                                           3                                  
 XMAP_TYPE.GET1             COMM_TYPE       232   912            scalar   PTR,TGT,PRIV     2237,2549,2846,2847,2848,2849,2850 
                                                                                           ,2851,3125,4136,4137,4138,4146,546 
                                                                                           4,5465,5466,5474,7092              
 XMAP_TYPE.GET1_REPRO       COMM_TYPE       232   920            scalar   PTR,TGT,PRIV     2245,2430,3287,3306,4276,5601,7100 
 XMAP_TYPE.ME               I(4)            4     12             scalar   PRIV             1814,1938,1939,1942,1964,1965,1966 
                                                                                           ,2206,2207,4200,4221,5528,5548,668 
                                                                                           6,6801,6802,6805,6827,6828,6829,70 
                                                                                           49,7050,7078                       
 XMAP_TYPE.PUT1             COMM_TYPE       232   904            scalar   PTR,TGT,PRIV     2237,2844,3805,3806,3807,3817,3902 
                                                                                           ,3903,3904,3952,5354,5355,5356,536 
                                                                                           7,7092                             
 XMAP_TYPE.RECV_COUNT_REPRO I(4)            4     672      1     1        PTR,PRIV         2211,2213,2220,2225,2437,2449,7054 
                                                                                           ,7056,7063,7068                    
 XMAP_TYPE.RECV_COUNT_REPRO_TOT                                                                                            ...
                            I(4)            4     748            scalar   PRIV             2225,2228,4267,5593,7068,7071      
 XMAP_TYPE.SEND_COUNT_REPRO I(4)            4     600      1     1        PTR,PRIV         2210,2212,2217,2224,2462,2476,3295 
                                                                                           ,7053,7055,7060,7067               
 XMAP_TYPE.SEND_COUNT_REPRO_TOT                                                                                            ...
                            I(4)            4     744            scalar   PRIV             2224,2227,4268,5594,7067,7070      
 XMAP_TYPE.X1               RECORD          40    312      1     1        PTR,PRIV         2231,3135,3136,3138,3165,3166,3167 
                                                                                           ,3168,3169,3171,3172,3184,3185,318 
                                                                                           6,3187,3188,3190,3191,4161,4162,43 
                                                                                           06,5489,5490,5631,7086             
 XMAP_TYPE.X1_PUT           RECORD          40    384      1     1        PTR,PRIV         2233,3204,3205,3206,3239,3240,3241 
                                                                                           ,3242,3243,3245,3246,3262,3263,326 
                                                                                           4,3265,3266,3268,3269,3850,3870,40 
                                                                                           56,4075,4085,4086,4107,4108,5399,5 
                                                                                           419,7088                           
 XMAP_TYPE.X2               RECORD          32    456      1     1        PTR,PRIV         2232,3137,3139,3173,3174,3175,3176 
                                                                                           ,3177,3192,3193,3194,3195,3758,544 
                                                                                           2,7087                             
 XMAP_TYPE.X2_GET           RECORD          32    528      1     1        PTR,PRIV         2234,3208,3209,3210,3249,3250,3251 
                                                                                           ,3252,3253,3254,3272,3273,3274,327 
                                                                                           5,3276,3779,3780,5688,5689,7089    

Page 67          Source Listing                  SETUP_XMAP
2021-06-01 08:56                                 xgrid.F90

   2317 ! </SUBROUTINE>
   2318 
   2319 !----------------------------------------------------------------------------
   2320 !> @brief currently we are assuming there is only one nest region
   2321 !! @return integer get_nest_contact
   2322 function get_nest_contact_fms2_io(fileobj, tile_nest_out, tile_parent_out, is_nest_out, &
   2323                           ie_nest_out, js_nest_out, je_nest_out, is_parent_out, &
   2324                           ie_parent_out, js_parent_out, je_parent_out) &
   2325                         result(get_nest_contact) !< This is needed for use_mpp_io
   2326 type(FmsNetcdfFile_t), intent(in) :: fileobj
   2327 integer,         intent(out) :: tile_nest_out, tile_parent_out
   2328 integer,         intent(out) :: is_nest_out, ie_nest_out
   2329 integer,         intent(out) :: js_nest_out, je_nest_out
   2330 integer,         intent(out) :: is_parent_out, ie_parent_out
   2331 integer,         intent(out) :: js_parent_out, je_parent_out
   2332 integer                      :: get_nest_contact
   2333 !--- local variables
   2334 integer                            :: ntiles, ncontacts, n, t1, t2
   2335 integer                            :: nx1_contact, ny1_contact
   2336 integer                            :: nx2_contact, ny2_contact
   2337 integer, allocatable, dimension(:) :: nx, ny
   2338 integer, allocatable, dimension(:) :: tile1, tile2
   2339 integer, allocatable, dimension(:) :: istart1, iend1, jstart1, jend1
   2340 integer, allocatable, dimension(:) :: istart2, iend2, jstart2, jend2
   2341 
   2342   tile_nest_out = 0; tile_parent_out = 0
   2343   is_nest_out   = 0; ie_nest_out     = 0
   2344   js_nest_out   = 0; je_nest_out     = 0
   2345   is_parent_out = 0; ie_parent_out   = 0
   2346   js_parent_out = 0; je_parent_out   = 0
   2347   get_nest_contact = 0
   2348 
   2349 ! first read the contact information
   2350   ntiles = get_mosaic_ntiles(fileobj)
   2351   if( ntiles == 1 ) return
   2352 
   2353   allocate(nx(ntiles), ny(ntiles))
   2354   call get_mosaic_grid_sizes(fileobj, nx, ny)
   2355 
   2356   ncontacts = get_mosaic_ncontacts(fileobj)
   2357   if(ncontacts == 0) return
   2358   allocate(tile1(ncontacts), tile2(ncontacts))
   2359   allocate(istart1(ncontacts), iend1(ncontacts))
   2360   allocate(jstart1(ncontacts), jend1(ncontacts))
   2361   allocate(istart2(ncontacts), iend2(ncontacts))
   2362   allocate(jstart2(ncontacts), jend2(ncontacts))
   2363 
   2364   call get_mosaic_contact( fileobj, tile1, tile2, istart1, iend1, jstart1, jend1, &
   2365                            istart2, iend2, jstart2, jend2)
   2366 
   2367   do n = 1, ncontacts
   2368     if( tile1(n) == tile2(n) ) cycle ! same tile could not be nested
   2369 
   2370     nx1_contact = iend1(n)-istart1(n)+1
   2371     ny1_contact = jend1(n)-jstart1(n)+1
   2372     nx2_contact = iend2(n)-istart2(n)+1
   2373     ny2_contact = jend2(n)-jstart2(n)+1

Page 68          Source Listing                  GET_NEST_CONTACT_FMS2_IO
2021-06-01 08:56                                 xgrid.F90

   2374     t1 = tile1(n);
   2375     t2 = tile2(n);
   2376 ! For nesting, the contact index of one tile must match its global domain
   2377     if( (nx(t1) .NE. nx1_contact .OR. ny(t1) .NE. ny1_contact ) .AND. &
   2378         (nx(t2) .NE. nx2_contact .OR. ny(t2) .NE. ny2_contact ) ) cycle
   2379     if(nx1_contact == nx2_contact .AND. ny1_contact == ny2_contact) then
   2380       call error_mesg('xgrid_mod', 'There is no refinement for the overlapping region', FATAL)
   2381     endif
   2382 
   2383     get_nest_contact = get_nest_contact + 1
   2384     if(get_nest_contact>1) then
   2385        call error_mesg('xgrid_mod', 'only support one nest region, contact developer' ,FATAL)
   2386     endif
   2387     if(nx2_contact*ny2_contact > nx1_contact*ny1_contact) then
   2388       is_nest_out     = istart2(n);
   2389       ie_nest_out     = iend2  (n);
   2390       js_nest_out     = jstart2(n);
   2391       je_nest_out     = jend2  (n);
   2392       tile_nest_out   = tile2  (n);
   2393       is_parent_out   = istart1(n);
   2394       ie_parent_out   = iend1  (n);
   2395       js_parent_out   = jstart1(n);
   2396       je_parent_out   = jend1  (n);
   2397       tile_parent_out = tile1  (n);
   2398     else
   2399       is_nest_out     = istart1(n);
   2400       ie_nest_out     = iend1  (n);
   2401       js_nest_out     = jstart1(n);
   2402       je_nest_out     = jend1  (n);
   2403       tile_nest_out   = tile1  (n);
   2404       is_parent_out   = istart2(n);
   2405       ie_parent_out   = iend2  (n);
   2406       js_parent_out   = jstart2(n);
   2407       je_parent_out   = jend2  (n);
   2408       tile_parent_out = tile2  (n);
   2409     endif
   2410   enddo
   2411 
   2412   deallocate(nx, ny, tile1, tile2)
   2413   deallocate(istart1, iend1, jstart1, jend1)
   2414   deallocate(istart2, iend2, jstart2, jend2)
   2415 
   2416 
   2417   return
   2418 
   2419 end function get_nest_contact_fms2_io

Page 69          Source Listing                  GET_NEST_CONTACT_FMS2_IO
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                              
                                                    
 xgrid_mod_mp_get_nest_contact_fms2_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILEOBJ                    Dummy  2322     FMSNETCDFFILE_T 872         scalar   ARG,IN           2350,2354,2356,2364               
 GET_MOSAIC_CONTACT         Subr   2364                                          PRIV             267,2364                          
 GET_MOSAIC_GRID_SIZES      Subr   2354                                          PRIV             267,2354                          
 GET_MOSAIC_NCONTACTS       Func   2356     I(4)            4           scalar   PRIV             266,2356                          
 GET_MOSAIC_NTILES          Func   2350     I(4)            4           scalar   PRIV             266,2350                          
 GET_NEST_CONTACT           Local  2332     I(4)            4           scalar                    2347,2383,2384                    
 GET_NEST_CONTACT_FMS2_IO   Func   2322     I(4)            4           scalar                    2012                              
 IEND1                      Local  2339     I(4)            4     1     1        ALC              2359,2364,2370,2394,2400,2413     
 IEND2                      Local  2340     I(4)            4     1     1        ALC              2361,2365,2372,2389,2405,2414     
 IE_NEST_OUT                Dummy  2323     I(4)            4           scalar   ARG,OUT          2343,2389,2400                    
 IE_PARENT_OUT              Dummy  2324     I(4)            4           scalar   ARG,OUT          2345,2394,2405                    
 ISTART1                    Local  2339     I(4)            4     1     1        ALC              2359,2364,2370,2393,2399,2413     
 ISTART2                    Local  2340     I(4)            4     1     1        ALC              2361,2365,2372,2388,2404,2414     
 IS_NEST_OUT                Dummy  2322     I(4)            4           scalar   ARG,OUT          2343,2388,2399                    
 IS_PARENT_OUT              Dummy  2323     I(4)            4           scalar   ARG,OUT          2345,2393,2404                    
 JEND1                      Local  2339     I(4)            4     1     1        ALC              2360,2364,2371,2396,2402,2413     
 JEND2                      Local  2340     I(4)            4     1     1        ALC              2362,2365,2373,2391,2407,2414     
 JE_NEST_OUT                Dummy  2323     I(4)            4           scalar   ARG,OUT          2344,2391,2402                    
 JE_PARENT_OUT              Dummy  2324     I(4)            4           scalar   ARG,OUT          2346,2396,2407                    
 JSTART1                    Local  2339     I(4)            4     1     1        ALC              2360,2364,2371,2395,2401,2413     
 JSTART2                    Local  2340     I(4)            4     1     1        ALC              2362,2365,2373,2390,2406,2414     
 JS_NEST_OUT                Dummy  2323     I(4)            4           scalar   ARG,OUT          2344,2390,2401                    
 JS_PARENT_OUT              Dummy  2324     I(4)            4           scalar   ARG,OUT          2346,2395,2406                    
 N                          Local  2334     I(4)            4           scalar                    2367,2368,2370,2371,2372,2373,2374
                                                                                                  ,2375,2388,2389,2390,2391,2392,239
                                                                                                  3,2394,2395,2396,2397,2399,2400,24
                                                                                                  01,2402,2403,2404,2405,2406,2407,2
                                                                                                  408                               
 NCONTACTS                  Local  2334     I(4)            4           scalar                    2356,2357,2358,2359,2360,2361,2362
                                                                                                  ,2367                             
 NTILES                     Local  2334     I(4)            4           scalar                    2350,2351,2353                    
 NX                         Local  2337     I(4)            4     1     1        ALC              2353,2354,2377,2378,2412          
 NX1_CONTACT                Local  2335     I(4)            4           scalar                    2370,2377,2379,2387               
 NX2_CONTACT                Local  2336     I(4)            4           scalar                    2372,2378,2379,2387               
 NY                         Local  2337     I(4)            4     1     1        ALC              2353,2354,2377,2378,2412          
 NY1_CONTACT                Local  2335     I(4)            4           scalar                    2371,2377,2379,2387               
 NY2_CONTACT                Local  2336     I(4)            4           scalar                    2373,2378,2379,2387               
 T1                         Local  2334     I(4)            4           scalar                    2374,2377                         
 T2                         Local  2334     I(4)            4           scalar                    2375,2378                         
 TILE1                      Local  2338     I(4)            4     1     1        ALC              2358,2364,2368,2374,2397,2403,2412
 TILE2                      Local  2338     I(4)            4     1     1        ALC              2358,2364,2368,2375,2392,2408,2412
 TILE_NEST_OUT              Dummy  2322     I(4)            4           scalar   ARG,OUT          2342,2392,2403                    
 TILE_PARENT_OUT            Dummy  2322     I(4)            4           scalar   ARG,OUT          2342,2397,2408                    

Page 70          Source Listing                  GET_NEST_CONTACT_FMS2_IO
2021-06-01 08:56                                 xgrid.F90

   2420 
   2421 !#######################################################################
   2422 subroutine set_comm_get1_repro(xmap)
   2423   type (xmap_type), intent(inout) :: xmap
   2424   integer, dimension(xmap%npes) :: pe_ind, cnt
   2425   integer, dimension(0:xmap%npes-1) :: send_ind, recv_ind, pl
   2426   integer :: npes, nsend, nrecv, mypos
   2427   integer :: m, p, pos, n, g, l, im, i, j
   2428   type(comm_type), pointer, save :: comm => NULL()
   2429 
   2430   comm => xmap%get1_repro
   2431   npes = xmap%npes
   2432 
   2433   nrecv = 0
   2434   mypos = mpp_pe() - mpp_root_pe()
   2435   do m=0,npes-1
   2436     p = mod(mypos+npes-m, npes)
   2437     if( xmap%recv_count_repro(p) > 0 ) then
   2438       nrecv = nrecv + 1
   2439       pe_ind(nrecv) = p
   2440     endif
   2441   enddo
   2442 
   2443   comm%nrecv = nrecv
   2444   if( nrecv > 0 ) then
   2445     allocate(comm%recv(nrecv))
   2446     pos = 0
   2447     do n = 1, nrecv
   2448       p = pe_ind(n)
   2449       comm%recv(n)%count = xmap%recv_count_repro(p)
   2450       comm%recv(n)%pe = p + xmap%root_pe
   2451       comm%recv(n)%buffer_pos = pos
   2452       pos = pos + comm%recv(n)%count
   2453     enddo
   2454   endif
   2455 
   2456 
   2457 ! send information
   2458   nsend = 0
   2459   mypos = mpp_pe() - mpp_root_pe()
   2460   do m=0,xmap%npes-1
   2461     p = mod(mypos+m, npes)
   2462     if( xmap%send_count_repro(p) > 0 ) then
   2463       nsend = nsend + 1
   2464       pe_ind(nsend) = p
   2465       send_ind(p) = nsend
   2466     endif
   2467   enddo
   2468 
   2469   comm%nsend = nsend
   2470   if( nsend > 0 ) then
   2471      allocate(comm%send(nsend))
   2472      pos = 0
   2473      cnt(:) = 0
   2474      do n = 1, nsend
   2475         p = pe_ind(n)
   2476         comm%send(n)%count = xmap%send_count_repro(p)

Page 71          Source Listing                  SET_COMM_GET1_REPRO
2021-06-01 08:56                                 xgrid.F90

   2477         comm%send(n)%pe = p + xmap%root_pe
   2478         comm%send(n)%buffer_pos = pos
   2479         pos = pos + comm%send(n)%count
   2480         allocate(comm%send(n)%i(comm%send(n)%count))
   2481         allocate(comm%send(n)%j(comm%send(n)%count))
   2482         allocate(comm%send(n)%g(comm%send(n)%count))
   2483         allocate(comm%send(n)%xLoc(comm%send(n)%count))
   2484      enddo
   2485 
   2486      do g=2,size(xmap%grids(:))
   2487         im = xmap%grids(g)%im
   2488         do l=1,xmap%grids(g)%size ! index into this side 2 grid's patterns
   2489            p = xmap%grids(g)%x(l)%pe-xmap%root_pe
   2490            n = send_ind(p)
   2491            cnt(n) = cnt(n) + 1
   2492            pos = cnt(n)
   2493            i = xmap%grids(g)%x(l)%i2
   2494            j = xmap%grids(g)%x(l)%j2
   2495            if(xmap%grids(g)%is_ug) then
   2496               comm%send(n)%i(pos) = xmap%grids(g)%l_index((j-1)*im+i)
   2497               comm%send(n)%j(pos) = 1
   2498            else
   2499               comm%send(n)%i(pos) = xmap%grids(g)%x(l)%i2
   2500               comm%send(n)%j(pos) = xmap%grids(g)%x(l)%j2
   2501            endif
   2502            comm%send(n)%g(pos) = g
   2503         enddo
   2504      enddo
   2505 !--- make sure the count is correct
   2506      do n = 1, nsend
   2507         if( comm%send(n)%count .NE. cnt(n) ) call error_mesg('xgrid_mod', &
   2508              'comm%send(n)%count .NE. cnt(n)', FATAL)
   2509      enddo
   2510    endif
   2511 
   2512 !--- set up the recv_pos for unpack the data.
   2513    pl(:) = 1
   2514    do g=2,size(xmap%grids(:))
   2515       do l=1,xmap%grids(g)%size_repro ! index into side1 grid's patterns
   2516          p = xmap%grids(g)%x_repro(l)%pe-xmap%root_pe
   2517          xmap%grids(g)%x_repro(l)%recv_pos = pl(p)
   2518          pl(p) = pl(p) + 1
   2519       end do
   2520    end do
   2521 
   2522 
   2523 
   2524 end subroutine set_comm_get1_repro

Page 72          Source Listing                  SET_COMM_GET1_REPRO
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                         
                                               
 xgrid_mod_mp_set_comm_get1_repro_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CNT                        Local  2424     I(4)            4     1     0                         2473,2491,2492,2507               
 COMM                       Local  2428     COMM_TYPE       232         scalar   PTR,SAVE         2428,2430,2443,2445,2449,2450,2451
                                                                                                  ,2452,2469,2471,2476,2477,2478,247
                                                                                                  9,2480,2481,2482,2483,2496,2497,24
                                                                                                  99,2500,2502,2507                 
 COMM_TYPE                  Type   2428                     232         scalar   PRIV             578,615,616,617,2428,2542,2841,380
                                                                                                  4,3899,4133,4263,5353,5461,5589   
 G                          Local  2427     I(4)            4           scalar                    2486,2487,2488,2489,2493,2494,2495
                                                                                                  ,2496,2499,2500,2502,2514,2515,251
                                                                                                  6,2517                            
 I                          Local  2427     I(4)            4           scalar                    2493,2496                         
 IM                         Local  2427     I(4)            4           scalar                    2487,2496                         
 J                          Local  2427     I(4)            4           scalar                    2494,2496                         
 L                          Local  2427     I(4)            4           scalar                    2488,2489,2493,2494,2499,2500,2515
                                                                                                  ,2516,2517                        
 M                          Local  2427     I(4)            4           scalar                    2435,2436,2460,2461               
 MOD                        Func   2436                                 scalar                    2436,2461                         
 MYPOS                      Local  2426     I(4)            4           scalar                    2434,2436,2459,2461               
 N                          Local  2427     I(4)            4           scalar                    2447,2448,2449,2450,2451,2452,2474
                                                                                                  ,2475,2476,2477,2478,2479,2480,248
                                                                                                  1,2482,2483,2490,2491,2492,2496,24
                                                                                                  97,2499,2500,2502,2506,2507       
 NPES                       Local  2426     I(4)            4           scalar                    2431,2435,2436,2461               
 NRECV                      Local  2426     I(4)            4           scalar                    2433,2438,2439,2443,2444,2445,2447
 NSEND                      Local  2426     I(4)            4           scalar                    2458,2463,2464,2465,2469,2470,2471
                                                                                                  ,2474,2506                        
 P                          Local  2427     I(4)            4           scalar                    2436,2437,2439,2448,2449,2450,2461
                                                                                                  ,2462,2464,2465,2475,2476,2477,248
                                                                                                  9,2490,2516,2517,2518             
 PE_IND                     Local  2424     I(4)            4     1     0                         2439,2448,2464,2475               
 PL                         Local  2425     I(4)            4     1     0                         2513,2517,2518                    
 POS                        Local  2427     I(4)            4           scalar                    2446,2451,2452,2472,2478,2479,2492
                                                                                                  ,2496,2497,2499,2500,2502         
 RECV_IND                   Local  2425     I(4)            4     1     0                                                           
 SEND_IND                   Local  2425     I(4)            4     1     0                         2465,2490                         
 SET_COMM_GET1_REPRO        Subr   2422                                                           2246,7101                         
 SIZE                       Func   2486                                 scalar                    2486,2514                         
 XMAP                       Dummy  2422     XMAP_TYPE       928         scalar   ARG,INOUT        2430,2431,2437,2449,2450,2460,2462
                                                                                                  ,2476,2477,2486,2487,2488,2489,249
                                                                                                  3,2494,2495,2496,2499,2500,2514,25
                                                                                                  15,2516,2517                      



Page 73          Source Listing                  SET_COMM_GET1_REPRO
2021-06-01 08:56 Symbol Table                    xgrid.F90

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 COMM_TYPE.NRECV            I(4)            4     4              scalar                    2443,2552,2741,2846,2847,2862,2994 
                                                                                           ,3818,3858,3953,4095,4149,4196,421 
                                                                                           8,4278,5368,5407,5477,5524,5545,56 
                                                                                           03                                 
 COMM_TYPE.NSEND            I(4)            4     0              scalar                    2469,2551,2668,2846,2847,2861,3066 
                                                                                           ,3125,3287,3827,3991,4007,4029,406 
                                                                                           3,4170,4292,4313,5377,5498,5617,56 
                                                                                           38                                 
 COMM_TYPE.RECV             RECORD          520   160      1     1        PTR,TGT          2445,2449,2450,2451,2452,2745,2746 
                                                                                           ,2759,2760,2761,2762,2763,2764,276 
                                                                                           7,2768,2774,2775,2776,2778,2779,27 
                                                                                           85,2786,2787,2789,2790,2803,2850,2 
                                                                                           851,2996,2997,3011,3012,3013,3014, 
                                                                                           3819,3820,3821,3859,3860,3863,3954 
                                                                                           ,3955,3960,4065,4068,4096,4097,410 
                                                                                           0,4150,4197,4220,4279,5369,5370,53 
                                                                                           71,5408,5409,5412,5478,5525,5547,5 
                                                                                           604                                
 COMM_TYPE.SEND             RECORD          520   88       1     1        PTR,TGT          2471,2476,2477,2478,2479,2480,2481 
                                                                                           ,2482,2483,2496,2497,2499,2500,250 
                                                                                           2,2507,2670,2671,2686,2687,2688,26 
                                                                                           89,2850,2851,3070,3071,3078,3079,3 
                                                                                           080,3081,3082,3085,3086,3089,3090, 
                                                                                           3091,3093,3094,3306,3828,3829,3833 
                                                                                           ,3835,3836,3992,3993,3996,3998,399 
                                                                                           9,4000,4008,4009,4013,4015,4016,40 
                                                                                           30,4031,4035,4037,4038,4064,4171,4 
                                                                                           293,4294,4314,4315,4316,5378,5379, 
                                                                                           5383,5385,5499,5618,5619,5639,5640 
                                                                                           ,5641                              
 OVERLAP_TYPE.BUFFER_POS    I(4)            4     8              scalar                    2451,2478,2687,2762,3012,3821,3860 
                                                                                           ,3863,3955,4065,4068,4097,4100,415 
                                                                                           2,4174,4199,4224,4281,4293,4314,53 
                                                                                           71,5409,5412,5480,5502,5527,5551,5 
                                                                                           606,5618,5639                      
 OVERLAP_TYPE.COUNT         I(4)            4     0              scalar                    2449,2452,2476,2479,2480,2481,2482 
                                                                                           ,2483,2507,2671,2688,2746,2764,299 
                                                                                           7,3013,3071,3082,3819,3828,3833,38 
                                                                                           59,3954,3992,3996,4008,4013,4030,4 
                                                                                           035,4064,4096,4151,4172,4175,4198, 
                                                                                           4228,4230,4280,4285,4297,4315,5369 
                                                                                           ,5378,5383,5408,5479,5500,5503,552 
                                                                                           6,5555,5557,5605,5610,5622,5640    
 OVERLAP_TYPE.G             I(4)            4     160      1     1        ALC              2482,2502,4300,5625                
 OVERLAP_TYPE.I             I(4)            4     16       1     1        ALC              2480,2496,2499,2686,2759,2774,2785 
                                                                                           ,3011,3078,3089,3835,3998,4015,403 
                                                                                           7,4207,4231,4298,5385,5535,5558,56 
                                                                                           23                                 
 OVERLAP_TYPE.J             I(4)            4     88       1     1        ALC              2481,2497,2500,2760,2775,2786,3079 
                                                                                           ,3090,3836,3999,4016,4038,4208,423 
                                                                                           2,4299,5624                        
 OVERLAP_TYPE.PE            I(4)            4     4              scalar                    2450,2477,2689,2763,2803,3014,3081 
                                                                                           ,3820,3829,3960,3993,4009,4031,415 

Page 74          Source Listing                  SET_COMM_GET1_REPRO
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           3,4182,4200,4221,4282,4283,4316,53 
                                                                                           70,5379,5481,5510,5528,5548,5607,5 
                                                                                           608,5641                           
 OVERLAP_TYPE.XLOC          I(4)            4     232      1     1        ALC              2483,3306,4301,5626                
 XCELL_TYPE.RECV_POS        I(4)            4     24             scalar                    2517,4336,5660                     

Page 75          Source Listing                  SET_COMM_GET1_REPRO
2021-06-01 08:56                                 xgrid.F90

   2525 
   2526 !#######################################################################
   2527 subroutine set_comm_get1(xmap)
   2528   type (xmap_type), intent(inout) :: xmap
   2529   type (grid_type), pointer, save :: grid1 =>NULL()
   2530   integer, allocatable :: send_size(:)
   2531   integer, allocatable :: recv_size(:)
   2532   integer              :: max_size, g, npes, l, ll, nset, m
   2533   integer              :: i1, j1, tile1, p, n, pos, buffer_pos, mypos
   2534   integer              :: nsend, nrecv, rbuf_size, sbuf_size, msgsize
   2535   logical              :: found
   2536   real,    allocatable :: recv_buf(:), send_buf(:)
   2537   real,    allocatable :: diarray(:), djarray(:)
   2538   integer, allocatable :: iarray(:), jarray(:), tarray(:)
   2539   integer, allocatable :: pos_x(:), pelist(:), size_pe(:), pe_side1(:)
   2540   integer              :: recv_buffer_pos(0:xmap%npes)
   2541   integer              :: send_buffer_pos(0:xmap%npes)
   2542   type(comm_type), pointer, save :: comm => NULL()
   2543   integer :: i, j
   2544 
   2545   max_size = 0
   2546   do g=2,size(xmap%grids(:))
   2547     max_size = max_size + xmap%grids(g)%size
   2548   enddo
   2549   comm => xmap%get1
   2550   grid1 => xmap%grids(1)
   2551   comm%nsend = 0
   2552   comm%nrecv = 0
   2553   npes = xmap%npes
   2554 
   2555   allocate(pelist(0:npes-1))
   2556   call mpp_get_current_pelist(pelist)
   2557   allocate(send_size(0:npes-1))
   2558   allocate(recv_size(0:npes-1))
   2559   allocate(size_pe(0:npes-1))
   2560   allocate(pos_x(0:npes-1))
   2561   size_pe = 0
   2562   send_size = 0
   2563   recv_size = 0
   2564 
   2565   if(max_size > 0) then
   2566      allocate(pe_side1(max_size))
   2567      allocate(xmap%ind_get1(max_size))
   2568 
   2569 !--- find the recv_indx
   2570      ll = 0
   2571      do g=2,size(xmap%grids(:))
   2572         do l=1,xmap%grids(g)%size
   2573            i1 = xmap%grids(g)%x(l)%i1
   2574            j1 = xmap%grids(g)%x(l)%j1
   2575            tile1 = xmap%grids(g)%x(l)%tile
   2576            do p=0,npes-1
   2577               if(grid1%tile(p) == tile1) then
   2578                  if(in_box_nbr(i1, j1, grid1, p)) then
   2579                     size_pe(p) = size_pe(p) + 1
   2580                     exit
   2581                  endif

Page 76          Source Listing                  SET_COMM_GET1
2021-06-01 08:56                                 xgrid.F90

   2582               endif
   2583            enddo
   2584            if( p == npes ) then
   2585               call error_mesg('xgrid_mod', 'tile is not in grid1%tile(:)', FATAL)
   2586            endif
   2587            ll = ll + 1
   2588            pe_side1(ll) = p
   2589         enddo
   2590      enddo
   2591 
   2592      pos_x = 0
   2593      do p = 1, npes-1
   2594         pos_x(p) = pos_x(p-1) + size_pe(p-1)
   2595      enddo
   2596 
   2597 !---find the send size for get_1_from_xgrid
   2598      allocate(iarray(max_size))
   2599      allocate(jarray(max_size))
   2600      allocate(tarray(max_size))
   2601      if(monotonic_exchange) then
   2602         allocate(diarray(max_size))
   2603         allocate(djarray(max_size))
   2604      endif
   2605 
   2606      ll = 0
   2607 
   2608      do g=2,size(xmap%grids(:))
   2609         do l=1,xmap%grids(g)%size
   2610            i1 = xmap%grids(g)%x(l)%i1
   2611            j1 = xmap%grids(g)%x(l)%j1
   2612            tile1 = xmap%grids(g)%x(l)%tile
   2613            ll = ll + 1
   2614            p = pe_side1(ll)
   2615 
   2616            found = .false.
   2617            if(send_size(p) > 0) then
   2618               if( i1 == iarray(pos_x(p)+send_size(p)) .AND. j1 == jarray(pos_x(p)+send_size(p)) &
   2619                    .AND. tile1 == tarray(pos_x(p)+send_size(p))) then
   2620                  found = .true.
   2621                  n = send_size(p)
   2622               else
   2623 !---may need to replace with a fast search algorithm
   2624                  do n = 1, send_size(p)
   2625                     if(i1 == iarray(pos_x(p)+n) .AND. j1 == jarray(pos_x(p)+n) .AND. tile1 == tarray(pos_x(p)+n)) then
   2626                        found = .true.
   2627                        exit
   2628                     endif
   2629                  enddo
   2630               endif
   2631            endif
   2632            if( (.NOT. found) .OR. monotonic_exchange ) then
   2633               send_size(p) = send_size(p)+1
   2634               pos = pos_x(p)+send_size(p)
   2635               iarray(pos) = i1
   2636               jarray(pos) = j1
   2637               tarray(pos) = tile1
   2638               if(monotonic_exchange) then

Page 77          Source Listing                  SET_COMM_GET1
2021-06-01 08:56                                 xgrid.F90

   2639                  diarray(pos) = xmap%grids(g)%x(l)%di
   2640                  djarray(pos) = xmap%grids(g)%x(l)%dj
   2641               endif
   2642               n = send_size(p)
   2643            endif
   2644            xmap%ind_get1(ll) = n
   2645         enddo
   2646      enddo
   2647 
   2648      pos_x = 0
   2649      do p = 1, npes-1
   2650         pos_x(p) = pos_x(p-1) + send_size(p-1)
   2651      enddo
   2652 
   2653      ll = 0
   2654      do g=2,size(xmap%grids(:))
   2655         do l=1,xmap%grids(g)%size
   2656            ll = ll + 1
   2657            p = pe_side1(ll)
   2658            xmap%ind_get1(ll) = pos_x(p) + xmap%ind_get1(ll)
   2659         enddo
   2660      enddo
   2661   endif
   2662 
   2663   mypos = mpp_pe()-mpp_root_pe()
   2664 
   2665 ! send/recv for get_1_from_xgrid_recv
   2666   recv_size(:) = xmap%your2my1_size(:)
   2667   nsend = count( send_size> 0)
   2668   comm%nsend = nsend
   2669   if(nsend>0) then
   2670      allocate(comm%send(nsend))
   2671      comm%send(:)%count = 0
   2672   endif
   2673 
   2674   pos = 0
   2675   do p = 0, npes-1
   2676      send_buffer_pos(p) = pos
   2677      pos = pos + send_size(p)
   2678   enddo
   2679 
   2680   pos = 0
   2681   comm%sendsize = 0
   2682   do n = 0, npes-1
   2683      p = mod(mypos+n, npes)
   2684      if(send_size(p)>0) then
   2685         pos = pos + 1
   2686         allocate(comm%send(pos)%i(send_size(p)))
   2687         comm%send(pos)%buffer_pos = send_buffer_pos(p)
   2688         comm%send(pos)%count = send_size(p)
   2689         comm%send(pos)%pe = pelist(p)
   2690         comm%sendsize = comm%sendsize + send_size(p)
   2691      endif
   2692   enddo
   2693 
   2694   nset = 3
   2695   if(monotonic_exchange) nset = 5

Page 78          Source Listing                  SET_COMM_GET1
2021-06-01 08:56                                 xgrid.F90

   2696   rbuf_size = sum(recv_size)*nset
   2697   sbuf_size = sum(send_size)*nset
   2698   if(rbuf_size>0) allocate(recv_buf(rbuf_size))
   2699   if(sbuf_size>0) allocate(send_buf(sbuf_size))
   2700 
   2701   pos = 0
   2702   do n = 0, npes-1
   2703      p = mod(mypos+npes-n, npes)
   2704      if(recv_size(p) ==0) cycle
   2705      msgsize = recv_size(p)*nset
   2706      call mpp_recv(recv_buf(pos+1), glen=msgsize, from_pe=pelist(p), block=.false., tag=COMM_TAG_4)
   2707      pos = pos + msgsize
   2708   enddo
   2709 
   2710   pos_x = 0
   2711   do p = 1, npes-1
   2712      pos_x(p) = pos_x(p-1) + size_pe(p-1)
   2713   enddo
   2714   ll = 0
   2715   pos = 0
   2716   do n = 0, npes-1
   2717      p = mod(mypos+n, npes)
   2718      do l = 1, send_size(p)
   2719         send_buf(pos+1) = iarray(pos_x(p)+l)
   2720         send_buf(pos+2) = jarray(pos_x(p)+l)
   2721         send_buf(pos+3) = tarray(pos_x(p)+l)
   2722         if(monotonic_exchange) then
   2723            send_buf(pos+4) = diarray(pos_x(p)+l)
   2724            send_buf(pos+5) = djarray(pos_x(p)+l)
   2725         endif
   2726         pos = pos + nset
   2727      enddo
   2728   enddo
   2729 
   2730   pos = 0
   2731   do n = 0, npes-1
   2732      p = mod(mypos+n, npes)
   2733      if(send_size(p) ==0) cycle
   2734      msgsize = send_size(p)*nset
   2735      call mpp_send(send_buf(pos+1), plen=msgsize, to_pe=pelist(p), tag=COMM_TAG_4 )
   2736      pos = pos + msgsize
   2737   enddo
   2738 
   2739   call mpp_sync_self(check=EVENT_RECV)
   2740   nrecv = count(recv_size>0)
   2741   comm%nrecv = nrecv
   2742   comm%recvsize = 0
   2743 
   2744   if(nrecv >0) then
   2745      allocate(comm%recv(nrecv))
   2746      comm%recv(:)%count = 0
   2747 !--- set up the buffer pos for each receiving
   2748      buffer_pos = 0
   2749      do p = 0, npes-1
   2750         recv_buffer_pos(p) = buffer_pos
   2751         buffer_pos = buffer_pos +  recv_size(p)
   2752      enddo

Page 79          Source Listing                  SET_COMM_GET1
2021-06-01 08:56                                 xgrid.F90

   2753      pos = 0
   2754      buffer_pos = 0
   2755      do m=0,npes-1
   2756         p = mod(mypos+npes-m, npes)
   2757         if(recv_size(p)>0) then
   2758            pos = pos + 1
   2759            allocate(comm%recv(pos)%i(recv_size(p)))
   2760            allocate(comm%recv(pos)%j(recv_size(p)))
   2761            allocate(comm%recv(pos)%tile(recv_size(p)))
   2762            comm%recv(pos)%buffer_pos = recv_buffer_pos(p)
   2763            comm%recv(pos)%pe = pelist(p)
   2764            comm%recv(pos)%count = recv_size(p)
   2765            comm%recvsize = comm%recvsize + recv_size(p)
   2766            if(monotonic_exchange) then
   2767               allocate(comm%recv(pos)%di(recv_size(p)))
   2768               allocate(comm%recv(pos)%dj(recv_size(p)))
   2769            endif
   2770            if(grid1%is_ug) then
   2771               do n = 1, recv_size(p)
   2772                  i = recv_buf(buffer_pos+1)
   2773                  j = recv_buf(buffer_pos+2)
   2774                  comm%recv(pos)%i(n) = grid1%l_index((j-1)*grid1%im+i)
   2775                  comm%recv(pos)%j(n) = 1
   2776                  comm%recv(pos)%tile(n) = recv_buf(buffer_pos+3)
   2777                  if(monotonic_exchange) then
   2778                     comm%recv(pos)%di(n) = recv_buf(buffer_pos+4)
   2779                     comm%recv(pos)%dj(n) = recv_buf(buffer_pos+5)
   2780                  endif
   2781                  buffer_pos = buffer_pos + nset
   2782               enddo
   2783            else
   2784               do n = 1, recv_size(p)
   2785                  comm%recv(pos)%i(n) = recv_buf(buffer_pos+1) - grid1%is_me + 1
   2786                  comm%recv(pos)%j(n) = recv_buf(buffer_pos+2) - grid1%js_me + 1
   2787                  comm%recv(pos)%tile(n) = recv_buf(buffer_pos+3)
   2788                  if(monotonic_exchange) then
   2789                     comm%recv(pos)%di(n) = recv_buf(buffer_pos+4)
   2790                     comm%recv(pos)%dj(n) = recv_buf(buffer_pos+5)
   2791                  endif
   2792                  buffer_pos = buffer_pos + nset
   2793               enddo
   2794            endif
   2795         endif
   2796      enddo
   2797      allocate(comm%unpack_ind(nrecv))
   2798      pos = 0
   2799      do p = 0, npes-1
   2800         if(recv_size(p)>0) then
   2801            pos = pos + 1
   2802            do m = 1, nrecv
   2803               if(comm%recv(m)%pe == pelist(p)) then
   2804                  comm%unpack_ind(pos) = m
   2805                  exit
   2806               endif
   2807            enddo
   2808         endif
   2809      enddo

Page 80          Source Listing                  SET_COMM_GET1
2021-06-01 08:56                                 xgrid.F90

   2810   endif
   2811   call mpp_sync_self()
   2812 
   2813   if(allocated(send_buf) ) deallocate(send_buf)
   2814   if(allocated(recv_buf) ) deallocate(recv_buf)
   2815   if(allocated(pelist)   ) deallocate(pelist)
   2816   if(allocated(pos_x)    ) deallocate(pos_x)
   2817   if(allocated(pelist)   ) deallocate(pelist)
   2818   if(allocated(iarray)   ) deallocate(iarray)
   2819   if(allocated(jarray)   ) deallocate(jarray)
   2820   if(allocated(tarray)   ) deallocate(tarray)
   2821   if(allocated(size_pe)  ) deallocate(size_pe)
   2822 
   2823 end subroutine set_comm_get1


ENTRY POINTS

  Name                                   
                                         
 xgrid_mod_mp_set_comm_get1_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   2813                                 scalar                    2813,2814,2815,2816,2817,2818,2819
                                                                                                  ,2820,2821                        
 BUFFER_POS                 Local  2533     I(4)            4           scalar                    2748,2750,2751,2754,2772,2773,2776
                                                                                                  ,2778,2779,2781,2785,2786,2787,278
                                                                                                  9,2790,2792                       
 COMM                       Local  2542     COMM_TYPE       232         scalar   PTR,SAVE         2542,2549,2551,2552,2668,2670,2671
                                                                                                  ,2681,2686,2687,2688,2689,2690,274
                                                                                                  1,2742,2745,2746,2759,2760,2761,27
                                                                                                  62,2763,2764,2765,2767,2768,2774,2
                                                                                                  775,2776,2778,2779,2785,2786,2787,
                                                                                                  2789,2790,2797,2803,2804          
 COMM_TAG_4                 Param  2706     I(4)            4           scalar   PRIV             247,2706,2735                     
 COUNT                      Func   2667                                 scalar                    2667,2740                         
 DIARRAY                    Local  2537     R(8)            8     1     1        ALC              2602,2639,2723                    
 DJARRAY                    Local  2537     R(8)            8     1     1        ALC              2603,2640,2724                    
 FOUND                      Local  2535     L(4)            4           scalar                    2616,2620,2626,2632               
 G                          Local  2532     I(4)            4           scalar                    2546,2547,2571,2572,2573,2574,2575
                                                                                                  ,2608,2609,2610,2611,2612,2639,264
                                                                                                  0,2654,2655                       
 GRID1                      Local  2529     GRID_TYPE       4888        scalar   PTR,SAVE         2529,2550,2577,2578,2770,2774,2785
                                                                                                  ,2786                             
 I                          Local  2543     I(4)            4           scalar                    2772,2774                         
 I1                         Local  2533     I(4)            4           scalar                    2573,2578,2610,2618,2625,2635     
 IARRAY                     Local  2538     I(4)            4     1     1        ALC              2598,2618,2625,2635,2719,2818     
 J                          Local  2543     I(4)            4           scalar                    2773,2774                         
 J1                         Local  2533     I(4)            4           scalar                    2574,2578,2611,2618,2625,2636     
 JARRAY                     Local  2538     I(4)            4     1     1        ALC              2599,2618,2625,2636,2720,2819     
 L                          Local  2532     I(4)            4           scalar                    2572,2573,2574,2575,2609,2610,2611
                                                                                                  ,2612,2639,2640,2655,2718,2719,272
                                                                                                  0,2721,2723,2724                  

Page 81          Source Listing                  SET_COMM_GET1
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LL                         Local  2532     I(4)            4           scalar                    2570,2587,2588,2606,2613,2614,2644
                                                                                                  ,2653,2656,2657,2658,2714         
 M                          Local  2532     I(4)            4           scalar                    2755,2756,2802,2803,2804          
 MAX_SIZE                   Local  2532     I(4)            4           scalar                    2545,2547,2565,2566,2567,2598,2599
                                                                                                  ,2600,2602,2603                   
 MOD                        Func   2683                                 scalar                    2683,2703,2717,2732,2756          
 MSGSIZE                    Local  2534     I(4)            4           scalar                    2705,2706,2707,2734,2735,2736     
 MYPOS                      Local  2533     I(4)            4           scalar                    2663,2683,2703,2717,2732,2756     
 N                          Local  2533     I(4)            4           scalar                    2621,2624,2625,2642,2644,2682,2683
                                                                                                  ,2702,2703,2716,2717,2731,2732,277
                                                                                                  1,2774,2775,2776,2778,2779,2784,27
                                                                                                  85,2786,2787,2789,2790            
 NPES                       Local  2532     I(4)            4           scalar                    2553,2555,2557,2558,2559,2560,2576
                                                                                                  ,2584,2593,2649,2675,2682,2683,270
                                                                                                  2,2703,2711,2716,2717,2731,2732,27
                                                                                                  49,2755,2756,2799                 
 NRECV                      Local  2534     I(4)            4           scalar                    2740,2741,2744,2745,2797,2802     
 NSEND                      Local  2534     I(4)            4           scalar                    2667,2668,2669,2670               
 NSET                       Local  2532     I(4)            4           scalar                    2694,2695,2696,2697,2705,2726,2734
                                                                                                  ,2781,2792                        
 P                          Local  2533     I(4)            4           scalar                    2576,2577,2578,2579,2584,2588,2593
                                                                                                  ,2594,2614,2617,2618,2619,2621,262
                                                                                                  4,2625,2633,2634,2642,2649,2650,26
                                                                                                  57,2658,2675,2676,2677,2683,2684,2
                                                                                                  686,2687,2688,2689,2690,2703,2704,
                                                                                                  2705,2706,2711,2712,2717,2718,2719
                                                                                                  ,2720,2721,2723,2724,2732,2733,273
                                                                                                  4,2735,2749,2750,2751,2756,2757,27
                                                                                                  59,2760,2761,2762,2763,2764,2765,2
                                                                                                  767,2768,2771,2784,2799,2800,2803 
 PELIST                     Local  2539     I(4)            4     1     1        ALC              2555,2556,2689,2706,2735,2763,2803
                                                                                                  ,2815,2817                        
 PE_SIDE1                   Local  2539     I(4)            4     1     1        ALC              2566,2588,2614,2657               
 POS                        Local  2533     I(4)            4           scalar                    2634,2635,2636,2637,2639,2640,2674
                                                                                                  ,2676,2677,2680,2685,2686,2687,268
                                                                                                  8,2689,2701,2706,2707,2715,2719,27
                                                                                                  20,2721,2723,2724,2726,2730,2735,2
                                                                                                  736,2753,2758,2759,2760,2761,2762,
                                                                                                  2763,2764,2767,2768,2774,2775,2776
                                                                                                  ,2778,2779,2785,2786,2787,2789,279
                                                                                                  0,2798,2801,2804                  
 POS_X                      Local  2539     I(4)            4     1     1        ALC              2560,2592,2594,2618,2619,2625,2634
                                                                                                  ,2648,2650,2658,2710,2712,2719,272
                                                                                                  0,2721,2723,2724,2816             
 RBUF_SIZE                  Local  2534     I(4)            4           scalar                    2696,2698                         
 RECV_BUF                   Local  2536     R(8)            8     1     1        ALC              2698,2706,2772,2773,2776,2778,2779
                                                                                                  ,2785,2786,2787,2789,2790,2814    
 RECV_BUFFER_POS            Local  2540     I(4)            4     1     0                         2750,2762                         
 RECV_SIZE                  Local  2531     I(4)            4     1     1        ALC              2558,2563,2666,2696,2704,2705,2740
                                                                                                  ,2751,2757,2759,2760,2761,2764,276
                                                                                                  5,2767,2768,2771,2784,2800        
 SBUF_SIZE                  Local  2534     I(4)            4           scalar                    2697,2699                         
 SEND_BUF                   Local  2536     R(8)            8     1     1        ALC              2699,2719,2720,2721,2723,2724,2735
                                                                                                  ,2813                             
 SEND_BUFFER_POS            Local  2541     I(4)            4     1     0                         2676,2687                         

Page 82          Source Listing                  SET_COMM_GET1
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 SEND_SIZE                  Local  2530     I(4)            4     1     1        ALC              2557,2562,2617,2618,2619,2621,2624
                                                                                                  ,2633,2634,2642,2650,2667,2677,268
                                                                                                  4,2686,2688,2690,2697,2718,2733,27
                                                                                                  34                                
 SET_COMM_GET1              Subr   2527                                                           2240,7095                         
 SIZE                       Func   2546                                 scalar                    2546,2571,2608,2654               
 SIZE_PE                    Local  2539     I(4)            4     1     1        ALC              2559,2561,2579,2594,2712,2821     
 SUM                        Func   2696                                 scalar                    2696,2697                         
 TARRAY                     Local  2538     I(4)            4     1     1        ALC              2600,2619,2625,2637,2721,2820     
 TILE1                      Local  2533     I(4)            4           scalar                    2575,2577,2612,2619,2625,2637     
 XMAP                       Dummy  2527     XMAP_TYPE       928         scalar   ARG,INOUT        2540,2541,2546,2547,2549,2550,2553
                                                                                                  ,2567,2571,2572,2573,2574,2575,260
                                                                                                  8,2609,2610,2611,2612,2639,2640,26
                                                                                                  44,2654,2655,2658,2666            


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 COMM_TYPE.RECVSIZE         I(4)            4     12             scalar                    2742,2765,2848,2849,3000,3015,3805 
                                                                                           ,3807,3902,3904,4136,4138,5354,535 
                                                                                           6,5464,5466                        
 COMM_TYPE.SENDSIZE         I(4)            4     8              scalar                    2681,2690,2848,2849,3067,3083,3806 
                                                                                           ,3903,4137,5355,5465               
 COMM_TYPE.UNPACK_IND       I(4)            4     16       1     1        PTR              2797,2804,4219,5546                
 OVERLAP_TYPE.DI            R(8)            8     376      1     1        ALC              2767,2778,2789,3085,3093,4000      
 OVERLAP_TYPE.DJ            R(8)            8     448      1     1        ALC              2768,2779,2790,3086,3094,4000      
 OVERLAP_TYPE.TILE          I(4)            4     304      1     1        ALC              2761,2776,2787,3080,3091           
 XMAP_TYPE.IND_GET1         I(4)            4     760      1     1        PTR,PRIV         2567,2644,2658,2852,3165,3184      

Page 83          Source Listing                  SET_COMM_GET1
2021-06-01 08:56                                 xgrid.F90

   2824 
   2825 !###############################################################################
   2826 subroutine set_comm_put1(xmap)
   2827   type (xmap_type), intent(inout) :: xmap
   2828   type (grid_type), pointer, save :: grid1 =>NULL()
   2829   integer, allocatable :: send_size(:)
   2830   integer, allocatable :: recv_size(:)
   2831   integer              :: max_size, g, npes, l, ll, m, mypos
   2832   integer              :: i1, j1, tile1, p, n, pos, buffer_pos
   2833   integer              :: nsend, nrecv, msgsize, nset, rbuf_size, sbuf_size
   2834   logical              :: found
   2835   real,    allocatable :: recv_buf(:), send_buf(:)
   2836   real,    allocatable :: diarray(:), djarray(:)
   2837   integer, allocatable :: iarray(:), jarray(:), tarray(:)
   2838   integer, allocatable :: pos_x(:), pelist(:), size_pe(:), pe_put1(:)
   2839   integer              :: root_pe, recvsize, sendsize
   2840   integer              :: recv_buffer_pos(0:xmap%npes)
   2841   type(comm_type), pointer, save :: comm => NULL()
   2842 
   2843 
   2844   comm => xmap%put1
   2845   if(nnest == 0 .OR. xmap%grids(1)%id .NE. 'ATM' ) then
   2846      comm%nsend    = xmap%get1%nrecv
   2847      comm%nrecv    = xmap%get1%nsend
   2848      comm%sendsize = xmap%get1%recvsize
   2849      comm%recvsize = xmap%get1%sendsize
   2850      comm%send     => xmap%get1%recv
   2851      comm%recv     => xmap%get1%send
   2852      xmap%ind_put1 => xmap%ind_get1
   2853     return
   2854   endif
   2855 
   2856   max_size = 0
   2857   do g=2,size(xmap%grids(:))
   2858      max_size = max_size + xmap%grids(g)%size
   2859   enddo
   2860   grid1 => xmap%grids(1)
   2861   comm%nsend = 0
   2862   comm%nrecv = 0
   2863   npes = xmap%npes
   2864   allocate(pelist(0:npes-1))
   2865   call mpp_get_current_pelist(pelist)
   2866   allocate(send_size(0:npes-1))
   2867   allocate(recv_size(0:npes-1))
   2868   allocate(size_pe(0:npes-1))
   2869   allocate(pos_x(0:npes-1))
   2870   size_pe = 0
   2871   send_size = 0
   2872   recv_size = 0
   2873 
   2874   if(max_size > 0) then
   2875      allocate(pe_put1(max_size))
   2876      allocate(xmap%ind_put1(max_size))
   2877 
   2878 !--- find the recv_indx
   2879      ll = 0
   2880      do g=2,size(xmap%grids(:))

Page 84          Source Listing                  SET_COMM_PUT1
2021-06-01 08:56                                 xgrid.F90

   2881         do l=1,xmap%grids(g)%size
   2882            i1 = xmap%grids(g)%x(l)%i1
   2883            j1 = xmap%grids(g)%x(l)%j1
   2884            tile1 = xmap%grids(g)%x(l)%tile
   2885            do p=0,npes-1
   2886               if(grid1%tile(p) == tile1) then
   2887                  if(in_box(i1, j1, grid1%is(p), grid1%ie(p), grid1%js(p), grid1%je(p))) then
   2888                     size_pe(p) = size_pe(p) + 1
   2889                     exit
   2890                  endif
   2891               endif
   2892            enddo
   2893            ll = ll + 1
   2894            pe_put1(ll) = p
   2895         enddo
   2896      enddo
   2897 
   2898      pos_x = 0
   2899      do p = 1, npes-1
   2900         pos_x(p) = pos_x(p-1) + size_pe(p-1)
   2901      enddo
   2902 
   2903 !---find the send size for get_1_from_xgrid
   2904      allocate(iarray(max_size))
   2905      allocate(jarray(max_size))
   2906      allocate(tarray(max_size))
   2907      if(monotonic_exchange) then
   2908         allocate(diarray(max_size))
   2909         allocate(djarray(max_size))
   2910      endif
   2911 
   2912      ll = 0
   2913 
   2914      do g=2,size(xmap%grids(:))
   2915         do l=1,xmap%grids(g)%size
   2916            i1 = xmap%grids(g)%x(l)%i1
   2917            j1 = xmap%grids(g)%x(l)%j1
   2918            tile1 = xmap%grids(g)%x(l)%tile
   2919            ll = ll + 1
   2920            p = pe_put1(ll)
   2921 
   2922            found = .false.
   2923            if(send_size(p) > 0) then
   2924               if( i1 == iarray(pos_x(p)+send_size(p)) .AND. j1 == jarray(pos_x(p)+send_size(p)) &
   2925                    .AND. tile1 == tarray(pos_x(p)+send_size(p))) then
   2926                  found = .true.
   2927                  n = send_size(p)
   2928               else
   2929 !---may need to replace with a fast search algorithm
   2930                  do n = 1, send_size(p)
   2931                     if(i1 == iarray(pos_x(p)+n) .AND. j1 == jarray(pos_x(p)+n) .AND. tile1 == tarray(pos_x(p)+n)) then
   2932                        found = .true.
   2933                        exit
   2934                     endif
   2935                  enddo
   2936               endif
   2937            endif

Page 85          Source Listing                  SET_COMM_PUT1
2021-06-01 08:56                                 xgrid.F90

   2938            if( (.NOT. found) .OR. monotonic_exchange ) then
   2939               send_size(p) = send_size(p)+1
   2940               pos = pos_x(p)+send_size(p)
   2941               iarray(pos) = i1
   2942               jarray(pos) = j1
   2943               tarray(pos) = tile1
   2944               if(monotonic_exchange) then
   2945                  diarray(pos) = xmap%grids(g)%x(l)%di
   2946                  djarray(pos) = xmap%grids(g)%x(l)%dj
   2947               endif
   2948               n = send_size(p)
   2949            endif
   2950            xmap%ind_put1(ll) = n
   2951         enddo
   2952      enddo
   2953 
   2954      pos_x = 0
   2955      do p = 1, npes-1
   2956         pos_x(p) = pos_x(p-1) + send_size(p-1)
   2957      enddo
   2958 
   2959      ll = 0
   2960      do g=2,size(xmap%grids(:))
   2961         do l=1,xmap%grids(g)%size
   2962            i1 = xmap%grids(g)%x(l)%i1
   2963            j1 = xmap%grids(g)%x(l)%j1
   2964            tile1 = xmap%grids(g)%x(l)%tile
   2965            ll = ll + 1
   2966            p = pe_put1(ll)
   2967            xmap%ind_put1(ll) = pos_x(p) + xmap%ind_put1(ll)
   2968         enddo
   2969      enddo
   2970   endif
   2971 
   2972 
   2973   mypos = mpp_pe()-mpp_root_pe()
   2974 
   2975   if (do_alltoall) then
   2976      call mpp_alltoall(send_size, 1, recv_size, 1)
   2977   else
   2978      do n = 0, npes-1
   2979         p = mod(mypos+npes-n, npes)
   2980         call mpp_recv(recv_size(p), glen=1, from_pe=pelist(p), block=.false., tag=COMM_TAG_5)
   2981      enddo
   2982 
   2983 !--- send data
   2984      do n = 0, npes-1
   2985         p = mod(mypos+n, npes)
   2986         call mpp_send(send_size(p), plen=1, to_pe=pelist(p), tag=COMM_TAG_5)
   2987      enddo
   2988 
   2989      call mpp_sync_self(check=EVENT_RECV)
   2990      call mpp_sync_self()
   2991   endif
   2992 !--- recv for put_1_to_xgrid
   2993   nrecv = count( send_size> 0)
   2994   comm%nrecv = nrecv

Page 86          Source Listing                  SET_COMM_PUT1
2021-06-01 08:56                                 xgrid.F90

   2995   if(nrecv>0) then
   2996      allocate(comm%recv(nrecv))
   2997      comm%recv(:)%count = 0
   2998   endif
   2999   pos = 0
   3000   comm%recvsize = 0
   3001   do p = 0, npes-1
   3002      recv_buffer_pos(p) = pos
   3003      pos = pos + send_size(p)
   3004   enddo
   3005 
   3006   pos = 0
   3007   do n = 0, npes-1
   3008      p = mod(mypos+npes-n, npes)
   3009      if(send_size(p)>0) then
   3010         pos = pos + 1
   3011         allocate(comm%recv(pos)%i(send_size(p)))
   3012         comm%recv(pos)%buffer_pos = recv_buffer_pos(p)
   3013         comm%recv(pos)%count = send_size(p)
   3014         comm%recv(pos)%pe = pelist(p)
   3015         comm%recvsize = comm%recvsize + send_size(p)
   3016      endif
   3017   enddo
   3018 
   3019   nset = 3
   3020   if(monotonic_exchange) nset = 5
   3021   rbuf_size = sum(recv_size)*nset
   3022   sbuf_size = sum(send_size)*nset
   3023   if(rbuf_size>0) allocate(recv_buf(rbuf_size))
   3024   if(sbuf_size>0) allocate(send_buf(sbuf_size))
   3025 
   3026   pos = 0
   3027   do n = 0, npes-1
   3028      p = mod(mypos+npes-n, npes)
   3029      if(recv_size(p) ==0) cycle
   3030      msgsize = recv_size(p)*nset
   3031      call mpp_recv(recv_buf(pos+1), glen=msgsize, from_pe=pelist(p), block=.false., tag=COMM_TAG_6)
   3032      pos = pos + msgsize
   3033   enddo
   3034 
   3035   pos_x = 0
   3036   do p = 1, npes-1
   3037      pos_x(p) = pos_x(p-1) + size_pe(p-1)
   3038   enddo
   3039   ll = 0
   3040   pos = 0
   3041   do n = 0, npes-1
   3042      p = mod(mypos+n, npes)
   3043      do l = 1, send_size(p)
   3044         send_buf(pos+1) = iarray(pos_x(p)+l)
   3045         send_buf(pos+2) = jarray(pos_x(p)+l)
   3046         send_buf(pos+3) = tarray(pos_x(p)+l)
   3047         if(monotonic_exchange) then
   3048            send_buf(pos+4) = diarray(pos_x(p)+l)
   3049            send_buf(pos+5) = djarray(pos_x(p)+l)
   3050         endif
   3051         pos = pos + nset

Page 87          Source Listing                  SET_COMM_PUT1
2021-06-01 08:56                                 xgrid.F90

   3052      enddo
   3053   enddo
   3054 
   3055   pos = 0
   3056   do n = 0, npes-1
   3057      p = mod(mypos+n, npes)
   3058      if(send_size(p) ==0) cycle
   3059      msgsize = send_size(p)*nset
   3060      call mpp_send(send_buf(pos+1), plen=msgsize, to_pe=pelist(p), tag=COMM_TAG_6 )
   3061      pos = pos + msgsize
   3062   enddo
   3063 
   3064   call mpp_sync_self(check=EVENT_RECV)
   3065   nsend = count(recv_size>0)
   3066   comm%nsend = nsend
   3067   comm%sendsize = 0
   3068 
   3069   if(nsend >0) then
   3070      allocate(comm%send(nsend))
   3071      comm%send(:)%count = 0
   3072      pos = 0
   3073      buffer_pos = 0
   3074      do m=0,npes-1
   3075         p = mod(mypos+npes-m, npes)
   3076         if(recv_size(p)>0) then
   3077            pos = pos + 1
   3078            allocate(comm%send(pos)%i(recv_size(p)))
   3079            allocate(comm%send(pos)%j(recv_size(p)))
   3080            allocate(comm%send(pos)%tile(recv_size(p)))
   3081            comm%send(pos)%pe = pelist(p)
   3082            comm%send(pos)%count = recv_size(p)
   3083            comm%sendsize = comm%sendsize + recv_size(p)
   3084            if(monotonic_exchange) then
   3085               allocate(comm%send(pos)%di(recv_size(p)))
   3086               allocate(comm%send(pos)%dj(recv_size(p)))
   3087            endif
   3088            do n = 1, recv_size(p)
   3089               comm%send(pos)%i(n) = recv_buf(buffer_pos+1) - grid1%is_me + 1
   3090               comm%send(pos)%j(n) = recv_buf(buffer_pos+2) - grid1%js_me + 1
   3091               comm%send(pos)%tile(n) = recv_buf(buffer_pos+3)
   3092               if(monotonic_exchange) then
   3093                  comm%send(pos)%di(n) = recv_buf(buffer_pos+4)
   3094                  comm%send(pos)%dj(n) = recv_buf(buffer_pos+5)
   3095               endif
   3096               buffer_pos = buffer_pos + nset
   3097            enddo
   3098         endif
   3099      enddo
   3100   endif
   3101 
   3102   call mpp_sync_self()
   3103   if(allocated(send_buf) ) deallocate(send_buf)
   3104   if(allocated(recv_buf) ) deallocate(recv_buf)
   3105   if(allocated(pelist)   ) deallocate(pelist)
   3106   if(allocated(pos_x)    ) deallocate(pos_x)
   3107   if(allocated(pelist)   ) deallocate(pelist)
   3108   if(allocated(iarray)   ) deallocate(iarray)

Page 88          Source Listing                  SET_COMM_PUT1
2021-06-01 08:56                                 xgrid.F90

   3109   if(allocated(jarray)   ) deallocate(jarray)
   3110   if(allocated(tarray)   ) deallocate(tarray)
   3111   if(allocated(size_pe)  ) deallocate(size_pe)
   3112 
   3113 end subroutine set_comm_put1


ENTRY POINTS

  Name                                   
                                         
 xgrid_mod_mp_set_comm_put1_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   3103                                 scalar                    3103,3104,3105,3106,3107,3108,3109
                                                                                                  ,3110,3111                        
 BUFFER_POS                 Local  2832     I(4)            4           scalar                    3073,3089,3090,3091,3093,3094,3096
 COMM                       Local  2841     COMM_TYPE       232         scalar   PTR,SAVE         2841,2844,2846,2847,2848,2849,2850
                                                                                                  ,2851,2861,2862,2994,2996,2997,300
                                                                                                  0,3011,3012,3013,3014,3015,3066,30
                                                                                                  67,3070,3071,3078,3079,3080,3081,3
                                                                                                  082,3083,3085,3086,3089,3090,3091,
                                                                                                  3093,3094                         
 COMM_TAG_5                 Param  2980     I(4)            4           scalar   PRIV             248,2980,2986                     
 COMM_TAG_6                 Param  3031     I(4)            4           scalar   PRIV             248,3031,3060                     
 COUNT                      Func   2993                                 scalar                    2993,3065                         
 DIARRAY                    Local  2836     R(8)            8     1     1        ALC              2908,2945,3048                    
 DJARRAY                    Local  2836     R(8)            8     1     1        ALC              2909,2946,3049                    
 FOUND                      Local  2834     L(4)            4           scalar                    2922,2926,2932,2938               
 G                          Local  2831     I(4)            4           scalar                    2857,2858,2880,2881,2882,2883,2884
                                                                                                  ,2914,2915,2916,2917,2918,2945,294
                                                                                                  6,2960,2961,2962,2963,2964        
 GRID1                      Local  2828     GRID_TYPE       4888        scalar   PTR,SAVE         2828,2860,2886,2887,3089,3090     
 I1                         Local  2832     I(4)            4           scalar                    2882,2887,2916,2924,2931,2941,2962
 IARRAY                     Local  2837     I(4)            4     1     1        ALC              2904,2924,2931,2941,3044,3108     
 J1                         Local  2832     I(4)            4           scalar                    2883,2887,2917,2924,2931,2942,2963
 JARRAY                     Local  2837     I(4)            4     1     1        ALC              2905,2924,2931,2942,3045,3109     
 L                          Local  2831     I(4)            4           scalar                    2881,2882,2883,2884,2915,2916,2917
                                                                                                  ,2918,2945,2946,2961,2962,2963,296
                                                                                                  4,3043,3044,3045,3046,3048,3049   
 LL                         Local  2831     I(4)            4           scalar                    2879,2893,2894,2912,2919,2920,2950
                                                                                                  ,2959,2965,2966,2967,3039         
 M                          Local  2831     I(4)            4           scalar                    3074,3075                         
 MAX_SIZE                   Local  2831     I(4)            4           scalar                    2856,2858,2874,2875,2876,2904,2905
                                                                                                  ,2906,2908,2909                   
 MOD                        Func   2979                                 scalar                    2979,2985,3008,3028,3042,3057,3075
 MSGSIZE                    Local  2833     I(4)            4           scalar                    3030,3031,3032,3059,3060,3061     
 MYPOS                      Local  2831     I(4)            4           scalar                    2973,2979,2985,3008,3028,3042,3057
                                                                                                  ,3075                             
 N                          Local  2832     I(4)            4           scalar                    2927,2930,2931,2948,2950,2978,2979
                                                                                                  ,2984,2985,3007,3008,3027,3028,304
                                                                                                  1,3042,3056,3057,3088,3089,3090,30
                                                                                                  91,3093,3094                      

Page 89          Source Listing                  SET_COMM_PUT1
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NPES                       Local  2831     I(4)            4           scalar                    2863,2864,2866,2867,2868,2869,2885
                                                                                                  ,2899,2955,2978,2979,2984,2985,300
                                                                                                  1,3007,3008,3027,3028,3036,3041,30
                                                                                                  42,3056,3057,3074,3075            
 NRECV                      Local  2833     I(4)            4           scalar                    2993,2994,2995,2996               
 NSEND                      Local  2833     I(4)            4           scalar                    3065,3066,3069,3070               
 NSET                       Local  2833     I(4)            4           scalar                    3019,3020,3021,3022,3030,3051,3059
                                                                                                  ,3096                             
 P                          Local  2832     I(4)            4           scalar                    2885,2886,2887,2888,2894,2899,2900
                                                                                                  ,2920,2923,2924,2925,2927,2930,293
                                                                                                  1,2939,2940,2948,2955,2956,2966,29
                                                                                                  67,2979,2980,2985,2986,3001,3002,3
                                                                                                  003,3008,3009,3011,3012,3013,3014,
                                                                                                  3015,3028,3029,3030,3031,3036,3037
                                                                                                  ,3042,3043,3044,3045,3046,3048,304
                                                                                                  9,3057,3058,3059,3060,3075,3076,30
                                                                                                  78,3079,3080,3081,3082,3083,3085,3
                                                                                                  086,3088                          
 PELIST                     Local  2838     I(4)            4     1     1        ALC              2864,2865,2980,2986,3014,3031,3060
                                                                                                  ,3081,3105,3107                   
 PE_PUT1                    Local  2838     I(4)            4     1     1        ALC              2875,2894,2920,2966               
 POS                        Local  2832     I(4)            4           scalar                    2940,2941,2942,2943,2945,2946,2999
                                                                                                  ,3002,3003,3006,3010,3011,3012,301
                                                                                                  3,3014,3026,3031,3032,3040,3044,30
                                                                                                  45,3046,3048,3049,3051,3055,3060,3
                                                                                                  061,3072,3077,3078,3079,3080,3081,
                                                                                                  3082,3085,3086,3089,3090,3091,3093
                                                                                                  ,3094                             
 POS_X                      Local  2838     I(4)            4     1     1        ALC              2869,2898,2900,2924,2925,2931,2940
                                                                                                  ,2954,2956,2967,3035,3037,3044,304
                                                                                                  5,3046,3048,3049,3106             
 RBUF_SIZE                  Local  2833     I(4)            4           scalar                    3021,3023                         
 RECVSIZE                   Local  2839     I(4)            4           scalar                                                      
 RECV_BUF                   Local  2835     R(8)            8     1     1        ALC              3023,3031,3089,3090,3091,3093,3094
                                                                                                  ,3104                             
 RECV_BUFFER_POS            Local  2840     I(4)            4     1     0                         3002,3012                         
 RECV_SIZE                  Local  2830     I(4)            4     1     1        ALC              2867,2872,2976,2980,3021,3029,3030
                                                                                                  ,3065,3076,3078,3079,3080,3082,308
                                                                                                  3,3085,3086,3088                  
 ROOT_PE                    Local  2839     I(4)            4           scalar                                                      
 SBUF_SIZE                  Local  2833     I(4)            4           scalar                    3022,3024                         
 SENDSIZE                   Local  2839     I(4)            4           scalar                                                      
 SEND_BUF                   Local  2835     R(8)            8     1     1        ALC              3024,3044,3045,3046,3048,3049,3060
                                                                                                  ,3103                             
 SEND_SIZE                  Local  2829     I(4)            4     1     1        ALC              2866,2871,2923,2924,2925,2927,2930
                                                                                                  ,2939,2940,2948,2956,2976,2986,299
                                                                                                  3,3003,3009,3011,3013,3015,3022,30
                                                                                                  43,3058,3059                      
 SET_COMM_PUT1              Subr   2826                                                           2242,7097                         
 SIZE                       Func   2857                                 scalar                    2857,2880,2914,2960               
 SIZE_PE                    Local  2838     I(4)            4     1     1        ALC              2868,2870,2888,2900,3037,3111     
 SUM                        Func   3021                                 scalar                    3021,3022                         
 TARRAY                     Local  2837     I(4)            4     1     1        ALC              2906,2925,2931,2943,3046,3110     
 TILE1                      Local  2832     I(4)            4           scalar                    2884,2886,2918,2925,2931,2943,2964
 XMAP                       Dummy  2826     XMAP_TYPE       928         scalar   ARG,INOUT        2840,2844,2845,2846,2847,2848,2849

Page 90          Source Listing                  SET_COMM_PUT1
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,2850,2851,2852,2857,2858,2860,286
                                                                                                  3,2876,2880,2881,2882,2883,2884,29
                                                                                                  14,2915,2916,2917,2918,2945,2946,2
                                                                                                  950,2960,2961,2962,2963,2964,2967 


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 XMAP_TYPE.IND_PUT1         I(4)            4     832      1     1        PTR,PRIV         2852,2876,2950,2967,3239,3262      

Page 91          Source Listing                  SET_COMM_PUT1
2021-06-01 08:56                                 xgrid.F90

   3114 
   3115 
   3116 !###############################################################################
   3117 subroutine regen(xmap)
   3118 type (xmap_type), intent(inout) :: xmap
   3119 
   3120   integer              :: g, l, k, max_size
   3121   integer              :: i1, j1, i2, j2, p
   3122   integer              :: tile1
   3123   integer              :: ll, lll
   3124   logical              :: overlap_with_nest
   3125   integer              :: cnt(xmap%get1%nsend)
   3126   integer              :: i,j,n,xloc,pos,nsend,m,npes, mypos
   3127   integer              :: send_ind(0:xmap%npes-1)
   3128 
   3129   max_size = 0
   3130 
   3131   do g=2,size(xmap%grids(:))
   3132     max_size = max_size + xmap%grids(g)%size * xmap%grids(g)%km
   3133   end do
   3134 
   3135   if (max_size>size(xmap%x1(:))) then
   3136     deallocate(xmap%x1)
   3137     deallocate(xmap%x2)
   3138     allocate( xmap%x1(1:max_size) )
   3139     allocate( xmap%x2(1:max_size) )
   3140   endif
   3141 
   3142 
   3143   do g=2,size(xmap%grids(:))
   3144     xmap%grids(g)%first = 1
   3145     xmap%grids(g)%last  = 0
   3146   end do
   3147 
   3148   xmap%size = 0
   3149   ll = 0
   3150   do g=2,size(xmap%grids(:))
   3151      xmap%grids(g)%first = xmap%size + 1;
   3152 
   3153      do l=1,xmap%grids(g)%size
   3154         i1 = xmap%grids(g)%x(l)%i1
   3155         j1 = xmap%grids(g)%x(l)%j1
   3156         i2 = xmap%grids(g)%x(l)%i2
   3157         j2 = xmap%grids(g)%x(l)%j2
   3158         tile1 = xmap%grids(g)%x(l)%tile
   3159         ll = ll + 1
   3160         if(xmap%grids(g)%is_ug) then
   3161            do k=1,xmap%grids(g)%km
   3162               lll = xmap%grids(g)%l_index((j2-1)*xmap%grids(g)%im+i2)
   3163               if (xmap%grids(g)%frac_area(lll,1,k)/=0.0) then
   3164               xmap%size = xmap%size+1
   3165               xmap%x1(xmap%size)%pos  = xmap%ind_get1(ll)
   3166               xmap%x1(xmap%size)%i    = xmap%grids(g)%x(l)%i1
   3167               xmap%x1(xmap%size)%j    = xmap%grids(g)%x(l)%j1
   3168               xmap%x1(xmap%size)%tile = xmap%grids(g)%x(l)%tile
   3169               xmap%x1(xmap%size)%area = xmap%grids(g)%x(l)%area &
   3170                    *xmap%grids(g)%frac_area(lll,1,k)

Page 92          Source Listing                  REGEN
2021-06-01 08:56                                 xgrid.F90

   3171               xmap%x1(xmap%size)%di   = xmap%grids(g)%x(l)%di
   3172               xmap%x1(xmap%size)%dj   = xmap%grids(g)%x(l)%dj
   3173               xmap%x2(xmap%size)%i    = xmap%grids(g)%x(l)%i2
   3174               xmap%x2(xmap%size)%j    = xmap%grids(g)%x(l)%j2
   3175               xmap%x2(xmap%size)%l    = lll
   3176               xmap%x2(xmap%size)%k    = k
   3177               xmap%x2(xmap%size)%area = xmap%grids(g)%x(l)%area * xmap%grids(g)%x(l)%scale
   3178               endif
   3179            enddo
   3180         else
   3181            do k=1,xmap%grids(g)%km
   3182               if (xmap%grids(g)%frac_area(i2,j2,k)/=0.0) then
   3183               xmap%size = xmap%size+1
   3184               xmap%x1(xmap%size)%pos  = xmap%ind_get1(ll)
   3185               xmap%x1(xmap%size)%i    = xmap%grids(g)%x(l)%i1
   3186               xmap%x1(xmap%size)%j    = xmap%grids(g)%x(l)%j1
   3187               xmap%x1(xmap%size)%tile = xmap%grids(g)%x(l)%tile
   3188               xmap%x1(xmap%size)%area = xmap%grids(g)%x(l)%area &
   3189                    *xmap%grids(g)%frac_area(i2,j2,k)
   3190               xmap%x1(xmap%size)%di   = xmap%grids(g)%x(l)%di
   3191               xmap%x1(xmap%size)%dj   = xmap%grids(g)%x(l)%dj
   3192               xmap%x2(xmap%size)%i    = xmap%grids(g)%x(l)%i2
   3193               xmap%x2(xmap%size)%j    = xmap%grids(g)%x(l)%j2
   3194               xmap%x2(xmap%size)%k    = k
   3195               xmap%x2(xmap%size)%area = xmap%grids(g)%x(l)%area * xmap%grids(g)%x(l)%scale
   3196               end if
   3197            enddo
   3198         end if
   3199      end do
   3200      xmap%grids(g)%last = xmap%size
   3201   end do
   3202 
   3203 
   3204   if (max_size>size(xmap%x1_put(:))) then
   3205     deallocate(xmap%x1_put)
   3206     allocate( xmap%x1_put(1:max_size) )
   3207   endif
   3208   if (max_size>size(xmap%x2_get(:))) then
   3209     deallocate(xmap%x2_get)
   3210     allocate( xmap%x2_get(1:max_size) )
   3211   endif
   3212 
   3213   do g=2,size(xmap%grids(:))
   3214     xmap%grids(g)%first_get = 1
   3215     xmap%grids(g)%last_get  = 0
   3216   end do
   3217 
   3218   xmap%size_put1 = 0
   3219   xmap%size_get2 = 0
   3220   ll = 0
   3221   do g=2,size(xmap%grids(:))
   3222      xmap%grids(g)%first_get = xmap%size_get2 + 1;
   3223 
   3224      do l=1,xmap%grids(g)%size
   3225         i1 = xmap%grids(g)%x(l)%i1
   3226         j1 = xmap%grids(g)%x(l)%j1
   3227         i2 = xmap%grids(g)%x(l)%i2

Page 93          Source Listing                  REGEN
2021-06-01 08:56                                 xgrid.F90

   3228         j2 = xmap%grids(g)%x(l)%j2
   3229         tile1 = xmap%grids(g)%x(l)%tile
   3230         ll = ll + 1
   3231         overlap_with_nest = .false.
   3232         if(  xmap%grids(1)%id == "ATM" .AND. tile1 == tile_parent .AND. &
   3233              in_box(i1, j1, is_parent, ie_parent, js_parent, je_parent) ) overlap_with_nest = .true.
   3234         if(xmap%grids(g)%is_ug) then
   3235         do k=1,xmap%grids(g)%km
   3236            lll = xmap%grids(g)%l_index((j2-1)*xmap%grids(g)%im+i2)
   3237            if (xmap%grids(g)%frac_area(lll,1,k)/=0.0) then
   3238               xmap%size_put1 = xmap%size_put1+1
   3239               xmap%x1_put(xmap%size_put1)%pos  = xmap%ind_put1(ll)
   3240               xmap%x1_put(xmap%size_put1)%i    = xmap%grids(g)%x(l)%i1
   3241               xmap%x1_put(xmap%size_put1)%j    = xmap%grids(g)%x(l)%j1
   3242               xmap%x1_put(xmap%size_put1)%tile = xmap%grids(g)%x(l)%tile
   3243               xmap%x1_put(xmap%size_put1)%area = xmap%grids(g)%x(l)%area &
   3244                    *xmap%grids(g)%frac_area(lll,1,k)
   3245               xmap%x1_put(xmap%size_put1)%di   = xmap%grids(g)%x(l)%di
   3246               xmap%x1_put(xmap%size_put1)%dj   = xmap%grids(g)%x(l)%dj
   3247               if( .not. overlap_with_nest) then
   3248                  xmap%size_get2 = xmap%size_get2+1
   3249                  xmap%x2_get(xmap%size_get2)%i    = xmap%grids(g)%x(l)%i2
   3250                  xmap%x2_get(xmap%size_get2)%j    = xmap%grids(g)%x(l)%j2
   3251                  xmap%x2_get(xmap%size_get2)%l    = lll
   3252                  xmap%x2_get(xmap%size_get2)%k    = k
   3253                  xmap%x2_get(xmap%size_get2)%area = xmap%grids(g)%x(l)%area * xmap%grids(g)%x(l)%scale
   3254                  xmap%x2_get(xmap%size_get2)%pos  = xmap%size_put1
   3255               endif
   3256            end if
   3257         end do
   3258         else
   3259         do k=1,xmap%grids(g)%km
   3260            if (xmap%grids(g)%frac_area(i2,j2,k)/=0.0) then
   3261               xmap%size_put1 = xmap%size_put1+1
   3262               xmap%x1_put(xmap%size_put1)%pos  = xmap%ind_put1(ll)
   3263               xmap%x1_put(xmap%size_put1)%i    = xmap%grids(g)%x(l)%i1
   3264               xmap%x1_put(xmap%size_put1)%j    = xmap%grids(g)%x(l)%j1
   3265               xmap%x1_put(xmap%size_put1)%tile = xmap%grids(g)%x(l)%tile
   3266               xmap%x1_put(xmap%size_put1)%area = xmap%grids(g)%x(l)%area &
   3267                    *xmap%grids(g)%frac_area(i2,j2,k)
   3268               xmap%x1_put(xmap%size_put1)%di   = xmap%grids(g)%x(l)%di
   3269               xmap%x1_put(xmap%size_put1)%dj   = xmap%grids(g)%x(l)%dj
   3270               if( .not. overlap_with_nest) then
   3271                  xmap%size_get2 = xmap%size_get2+1
   3272                  xmap%x2_get(xmap%size_get2)%i    = xmap%grids(g)%x(l)%i2
   3273                  xmap%x2_get(xmap%size_get2)%j    = xmap%grids(g)%x(l)%j2
   3274                  xmap%x2_get(xmap%size_get2)%k    = k
   3275                  xmap%x2_get(xmap%size_get2)%area = xmap%grids(g)%x(l)%area * xmap%grids(g)%x(l)%scale
   3276                  xmap%x2_get(xmap%size_get2)%pos  = xmap%size_put1
   3277               endif
   3278            end if
   3279         end do
   3280         endif
   3281      end do
   3282      xmap%grids(g)%last_get = xmap%size_get2
   3283   end do
   3284 

Page 94          Source Listing                  REGEN
2021-06-01 08:56                                 xgrid.F90

   3285 !---set up information for get_1_from_xgrid_repro
   3286   if (make_exchange_reproduce) then
   3287   if (xmap%get1_repro%nsend > 0) then
   3288      xloc = 0
   3289      nsend = 0
   3290      npes = xmap%npes
   3291      mypos = mpp_pe() - mpp_root_pe()
   3292      cnt(:) = 0
   3293      do m=0,npes-1
   3294         p = mod(mypos+m, npes)
   3295         if( xmap%send_count_repro(p) > 0 ) then
   3296           nsend = nsend + 1
   3297           send_ind(p) = nsend
   3298         endif
   3299      enddo
   3300      do g=2,size(xmap%grids(:))
   3301         do l=1,xmap%grids(g)%size ! index into this side 2 grid's patterns
   3302            p = xmap%grids(g)%x(l)%pe-xmap%root_pe
   3303            n = send_ind(p)
   3304            cnt(n) = cnt(n) + 1
   3305            pos = cnt(n)
   3306            xmap%get1_repro%send(n)%xLoc(pos) = xloc
   3307            if( xmap%grids(g)%is_ug ) then
   3308              i = xmap%grids(g)%x(l)%l2
   3309              xloc = xloc + count(xmap%grids(g)%frac_area(i,1,:)/=0.0)
   3310            else
   3311              i = xmap%grids(g)%x(l)%i2
   3312              j = xmap%grids(g)%x(l)%j2
   3313              xloc = xloc + count(xmap%grids(g)%frac_area(i,j,:)/=0.0)
   3314            endif
   3315         enddo
   3316      enddo
   3317   endif
   3318   endif
   3319 
   3320 end subroutine regen

Page 95          Source Listing                  REGEN
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                           
                                 
 xgrid_mod_mp_regen_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CNT                        Local  3125     I(4)            4     1     0                         3292,3304,3305                    
 COUNT                      Func   3309                                 scalar                    3309,3313                         
 G                          Local  3120     I(4)            4           scalar                    3131,3132,3143,3144,3145,3150,3151
                                                                                                  ,3153,3154,3155,3156,3157,3158,316
                                                                                                  0,3161,3162,3163,3166,3167,3168,31
                                                                                                  69,3170,3171,3172,3173,3174,3177,3
                                                                                                  181,3182,3185,3186,3187,3188,3189,
                                                                                                  3190,3191,3192,3193,3195,3200,3213
                                                                                                  ,3214,3215,3221,3222,3224,3225,322
                                                                                                  6,3227,3228,3229,3234,3235,3236,32
                                                                                                  37,3240,3241,3242,3243,3244,3245,3
                                                                                                  246,3249,3250,3253,3259,3260,3263,
                                                                                                  3264,3265,3266,3267,3268,3269,3272
                                                                                                  ,3273,3275,3282,3300,3301,3302,330
                                                                                                  7,3308,3309,3311,3312,3313        
 I                          Local  3126     I(4)            4           scalar                    3308,3309,3311,3313               
 I1                         Local  3121     I(4)            4           scalar                    3154,3225,3233                    
 I2                         Local  3121     I(4)            4           scalar                    3156,3162,3182,3189,3227,3236,3260
                                                                                                  ,3267                             
 J                          Local  3126     I(4)            4           scalar                    3312,3313                         
 J1                         Local  3121     I(4)            4           scalar                    3155,3226,3233                    
 J2                         Local  3121     I(4)            4           scalar                    3157,3162,3182,3189,3228,3236,3260
                                                                                                  ,3267                             
 K                          Local  3120     I(4)            4           scalar                    3161,3163,3170,3176,3181,3182,3189
                                                                                                  ,3194,3235,3237,3244,3252,3259,326
                                                                                                  0,3267,3274                       
 L                          Local  3120     I(4)            4           scalar                    3153,3154,3155,3156,3157,3158,3166
                                                                                                  ,3167,3168,3169,3171,3172,3173,317
                                                                                                  4,3177,3185,3186,3187,3188,3190,31
                                                                                                  91,3192,3193,3195,3224,3225,3226,3
                                                                                                  227,3228,3229,3240,3241,3242,3243,
                                                                                                  3245,3246,3249,3250,3253,3263,3264
                                                                                                  ,3265,3266,3268,3269,3272,3273,327
                                                                                                  5,3301,3302,3308,3311,3312        
 LL                         Local  3123     I(4)            4           scalar                    3149,3159,3165,3184,3220,3230,3239
                                                                                                  ,3262                             
 LLL                        Local  3123     I(4)            4           scalar                    3162,3163,3170,3175,3236,3237,3244
                                                                                                  ,3251                             
 M                          Local  3126     I(4)            4           scalar                    3293,3294                         
 MAX_SIZE                   Local  3120     I(4)            4           scalar                    3129,3132,3135,3138,3139,3204,3206
                                                                                                  ,3208,3210                        
 MOD                        Func   3294                                 scalar                    3294                              
 MYPOS                      Local  3126     I(4)            4           scalar                    3291,3294                         
 N                          Local  3126     I(4)            4           scalar                    3303,3304,3305,3306               

Page 96          Source Listing                  REGEN
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NPES                       Local  3126     I(4)            4           scalar                    3290,3293,3294                    
 NSEND                      Local  3126     I(4)            4           scalar                    3289,3296,3297                    
 OVERLAP_WITH_NEST          Local  3124     L(4)            4           scalar                    3231,3233,3247,3270               
 P                          Local  3121     I(4)            4           scalar                    3294,3295,3297,3302,3303          
 POS                        Local  3126     I(4)            4           scalar                    3305,3306                         
 REGEN                      Subr   3117                                                           2252,3361,3411,7107               
 SEND_IND                   Local  3127     I(4)            4     1     0                         3297,3303                         
 SIZE                       Func   3131                                 scalar                    3131,3135,3143,3150,3204,3208,3213
                                                                                                  ,3221,3300                        
 TILE1                      Local  3122     I(4)            4           scalar                    3158,3229,3232                    
 XLOC                       Local  3126     I(4)            4           scalar                    3288,3306,3309,3313               
 XMAP                       Dummy  3117     XMAP_TYPE       928         scalar   ARG,INOUT        3125,3127,3131,3132,3135,3136,3137
                                                                                                  ,3138,3139,3143,3144,3145,3148,315
                                                                                                  0,3151,3153,3154,3155,3156,3157,31
                                                                                                  58,3160,3161,3162,3163,3164,3165,3
                                                                                                  166,3167,3168,3169,3170,3171,3172,
                                                                                                  3173,3174,3175,3176,3177,3181,3182
                                                                                                  ,3183,3184,3185,3186,3187,3188,318
                                                                                                  9,3190,3191,3192,3193,3194,3195,32
                                                                                                  00,3204,3205,3206,3208,3209,3210,3
                                                                                                  213,3214,3215,3218,3219,3221,3222,
                                                                                                  3224,3225,3226,3227,3228,3229,3232
                                                                                                  ,3234,3235,3236,3237,3238,3239,324
                                                                                                  0,3241,3242,3243,3244,3245,3246,32
                                                                                                  48,3249,3250,3251,3252,3253,3254,3
                                                                                                  259,3260,3261,3262,3263,3264,3265,
                                                                                                  3266,3267,3268,3269,3271,3272,3273
                                                                                                  ,3274,3275,3276,3282,3287,3290,329
                                                                                                  5,3300,3301,3302,3306,3307,3308,33
                                                                                                  09,3311,3312,3313                 


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 GRID_TYPE.FIRST            I(4)            4     1200           scalar                    3144,3151,3735,3757,5441           
 GRID_TYPE.FIRST_GET        I(4)            4     1208           scalar                    3214,3222,3778,5687                
 GRID_TYPE.LAST             I(4)            4     1204           scalar                    3145,3200,3735,3757,5441           
 GRID_TYPE.LAST_GET         I(4)            4     1212           scalar                    3215,3282,3778,5687                
 X1_TYPE.AREA               R(8)            8     8              scalar                    3169,3188,3243,3266,4162,4306,5490 
                                                                                           ,5631                              
 X1_TYPE.DI                 R(8)            8     16             scalar                    3171,3190,3245,3268,4086,4108      
 X1_TYPE.DJ                 R(8)            8     24             scalar                    3172,3191,3246,3269,4086,4108      
 X1_TYPE.I                  I(4)            4     0              scalar                    3166,3185,3240,3263                
 X1_TYPE.J                  I(4)            4     4              scalar                    3167,3186,3241,3264                
 X1_TYPE.POS                I(4)            4     36             scalar                    3165,3184,3239,3262,3850,3870,4056 
                                                                                           ,4075,4085,4107,4161,5399,5419,548 
                                                                                           9                                  
 X1_TYPE.TILE               I(4)            4     32             scalar                    3168,3187,3242,3265                
 X2_TYPE.AREA               R(8)            8     24             scalar                    3177,3195,3253,3275,3780,5689      
 X2_TYPE.I                  I(4)            4     0              scalar                    3173,3192,3249,3272,3758,3779,3780 
 X2_TYPE.J                  I(4)            4     4              scalar                    3174,3193,3250,3273,3758,3779,3780 
 X2_TYPE.K                  I(4)            4     12             scalar                    3176,3194,3252,3274,3758,3779,3780 
                                                                                           ,5442,5688,5689                    

Page 97          Source Listing                  REGEN
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 X2_TYPE.L                  I(4)            4     8              scalar                    3175,3251,5442,5688,5689           
 X2_TYPE.POS                I(4)            4     16             scalar                    3254,3276,3780,5689                
 XMAP_TYPE.SIZE             I(4)            4     0              scalar   PRIV             3148,3151,3164,3165,3166,3167,3168 
                                                                                           ,3169,3171,3172,3173,3174,3175,317 
                                                                                           6,3177,3183,3184,3185,3186,3187,31 
                                                                                           88,3190,3191,3192,3193,3194,3195,3 
                                                                                           200,3445,3721,4127,4160,5455,5488  
 XMAP_TYPE.SIZE_GET2        I(4)            4     8              scalar   PRIV             3219,3222,3248,3249,3250,3251,3252 
                                                                                           ,3253,3254,3271,3272,3273,3274,327 
                                                                                           5,3276,3282                        
 XMAP_TYPE.SIZE_PUT1        I(4)            4     4              scalar   PRIV             3218,3238,3239,3240,3241,3242,3243 
                                                                                           ,3245,3246,3254,3261,3262,3263,326 
                                                                                           4,3265,3266,3268,3269,3276,3849,38 
                                                                                           69,4055,4074,4084,4106,5398,5418   

Page 98          Source Listing                  REGEN
2021-06-01 08:56                                 xgrid.F90

   3321 
   3322 !#######################################################################
   3323 
   3324 ! <SUBROUTINE NAME="set_frac_area">
   3325 
   3326 !   <OVERVIEW>
   3327 !     Changes sub-grid portion areas and/or number.
   3328 !   </OVERVIEW>
   3329 !   <DESCRIPTION>
   3330 !     Changes sub-grid portion areas and/or number.
   3331 !   </DESCRIPTION>
   3332 !   <TEMPLATE>
   3333 !     call set_frac_area(f, grid_id, xmap)
   3334 !   </TEMPLATE>
   3335 
   3336 !   <IN NAME="f" TYPE="real" DIM="(:,:,:)"> </IN>
   3337 !   <IN NAME="grid_id" TYPE="character(len=3)" > </IN>
   3338 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   3339 
   3340 !> @brief Changes sub-grid portion areas and/or number.
   3341 subroutine set_frac_area_sg(f, grid_id, xmap)
   3342 real, dimension(:,:,:), intent(in   ) :: f
   3343 character(len=3),       intent(in   ) :: grid_id
   3344 type (xmap_type),       intent(inout) :: xmap
   3345 
   3346   integer :: g
   3347   type(grid_type), pointer, save :: grid =>NULL()
   3348 
   3349   if (grid_id==xmap%grids(1)%id) call error_mesg ('xgrid_mod',  &
   3350                                    'set_frac_area called on side 1 grid', FATAL)
   3351   do g=2,size(xmap%grids(:))
   3352     grid => xmap%grids(g)
   3353     if (grid_id==grid%id) then
   3354       if (size(f,3)/=size(grid%frac_area,3)) then
   3355         deallocate (grid%frac_area)
   3356         grid%km = size(f,3);
   3357         allocate( grid%frac_area(grid%is_me:grid%ie_me, grid%js_me:grid%je_me, &
   3358                                                                       grid%km) )
   3359       end if
   3360       grid%frac_area = f;
   3361       call regen(xmap)
   3362       return;
   3363     end if
   3364   end do
   3365 
   3366   call error_mesg ('xgrid_mod', 'set_frac_area: could not find grid id', FATAL)
   3367 
   3368 end subroutine  set_frac_area_sg

Page 99          Source Listing                  SET_FRAC_AREA_SG
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                      
                                            
 xgrid_mod_mp_set_frac_area_sg_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 F                          Dummy  3341     R(8)            8     3     1        ARG,IN           3354,3356,3360                    
 G                          Local  3346     I(4)            4           scalar                    3351,3352                         
 GRID                       Local  3347     GRID_TYPE       4888        scalar   PTR,SAVE         3347,3352,3353,3354,3355,3356,3357
                                                                                                  ,3358,3360                        
 GRID_ID                    Dummy  3341     CHAR            3           scalar   ARG,IN           3349,3353                         
 SET_FRAC_AREA_SG           Subr   3341                                          PRIV                                               
 SIZE                       Func   3351                                 scalar                    3351,3354,3356                    
 XMAP                       Dummy  3341     XMAP_TYPE       928         scalar   ARG,INOUT        3349,3351,3352,3361               

Page 100         Source Listing                  SET_FRAC_AREA_SG
2021-06-01 08:56                                 xgrid.F90

   3369 ! </SUBROUTINE>
   3370 
   3371 !#######################################################################
   3372 
   3373 ! <SUBROUTINE NAME="set_frac_area_ug">
   3374 
   3375 !   <OVERVIEW>
   3376 !     Changes sub-grid portion areas and/or number.
   3377 !   </OVERVIEW>
   3378 !   <DESCRIPTION>
   3379 !     Changes sub-grid portion areas and/or number.
   3380 !   </DESCRIPTION>
   3381 !   <TEMPLATE>
   3382 !     call set_frac_area_ug(f, grid_id, xmap)
   3383 !   </TEMPLATE>
   3384 
   3385 !   <IN NAME="f" TYPE="real" DIM="(:,:,:)"> </IN>
   3386 !   <IN NAME="grid_id" TYPE="character(len=3)" > </IN>
   3387 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   3388 
   3389 !> @brief Changes sub-grid portion areas and/or number.
   3390 subroutine set_frac_area_ug(f, grid_id, xmap)
   3391 real, dimension(:,:),   intent(in   ) :: f
   3392 character(len=3),       intent(in   ) :: grid_id
   3393 type (xmap_type),       intent(inout) :: xmap
   3394 
   3395   integer :: g
   3396   type(grid_type), pointer, save :: grid =>NULL()
   3397 
   3398   if (grid_id==xmap%grids(1)%id) call error_mesg ('xgrid_mod',  &
   3399                                    'set_frac_area_ug called on side 1 grid', FATAL)
   3400   if (grid_id .NE. 'LND' ) call error_mesg ('xgrid_mod',  &
   3401                                    'set_frac_area_ug called for grid_id .NE. LND', FATAL)
   3402   do g=2,size(xmap%grids(:))
   3403     grid => xmap%grids(g)
   3404     if (grid_id==grid%id) then
   3405       if (size(f,2)/=size(grid%frac_area,3)) then
   3406         deallocate (grid%frac_area)
   3407         grid%km = size(f,2);
   3408         allocate( grid%frac_area(grid%ls_me:grid%le_me, 1, grid%km) )
   3409       end if
   3410       grid%frac_area(:,1,:) = f(:,:);
   3411       call regen(xmap)
   3412       return;
   3413     end if
   3414   end do
   3415 
   3416   call error_mesg ('xgrid_mod', 'set_frac_area_ug: could not find grid id', FATAL)
   3417 
   3418 end subroutine  set_frac_area_ug

Page 101         Source Listing                  SET_FRAC_AREA_UG
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                      
                                            
 xgrid_mod_mp_set_frac_area_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 F                          Dummy  3390     R(8)            8     2     1        ARG,IN           3405,3407,3410                    
 G                          Local  3395     I(4)            4           scalar                    3402,3403                         
 GRID                       Local  3396     GRID_TYPE       4888        scalar   PTR,SAVE         3396,3403,3404,3405,3406,3407,3408
                                                                                                  ,3410                             
 GRID_ID                    Dummy  3390     CHAR            3           scalar   ARG,IN           3398,3400,3404                    
 SET_FRAC_AREA_UG           Subr   3390                                                                                             
 SIZE                       Func   3402                                 scalar                    3402,3405,3407                    
 XMAP                       Dummy  3390     XMAP_TYPE       928         scalar   ARG,INOUT        3398,3402,3403,3411               

Page 102         Source Listing                  SET_FRAC_AREA_UG
2021-06-01 08:56                                 xgrid.F90

   3419 ! </SUBROUTINE>
   3420 
   3421 
   3422 
   3423 !#######################################################################
   3424 
   3425 ! <FUNCTION NAME="xgrid_count">
   3426 
   3427 !   <OVERVIEW>
   3428 !     Returns current size of exchange grid variables.
   3429 !   </OVERVIEW>
   3430 !   <DESCRIPTION>
   3431 !     Returns current size of exchange grid variables.
   3432 !   </DESCRIPTION>
   3433 !   <TEMPLATE>
   3434 !     xgrid_count(xmap)
   3435 !   </TEMPLATE>
   3436 
   3437 !   <IN NAME="xmap" TYPE="xmap_type" > </IN>
   3438 !   <OUT NAME="xgrid_count"  TYPE="integer"  > </OUT>
   3439 
   3440 !> @brief Returns current size of exchange grid variables.
   3441 !! @return integer xgrid_count
   3442 integer function xgrid_count(xmap)
   3443 type (xmap_type), intent(inout) :: xmap
   3444 
   3445   xgrid_count = xmap%size
   3446 end function xgrid_count

Page 103         Source Listing                  XGRID_COUNT
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                 
                                       
 xgrid_mod_mp_xgrid_count_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 XGRID_COUNT                Func   3442     I(4)            4           scalar                                                      
 XMAP                       Dummy  3442     XMAP_TYPE       928         scalar   ARG,INOUT        3445                              

Page 104         Source Listing                  XGRID_COUNT
2021-06-01 08:56                                 xgrid.F90

   3447 ! </FUNCTION>
   3448 
   3449 !#######################################################################
   3450 
   3451 ! <SUBROUTINE NAME="put_side1_to_xgrid" INTERFACE="put_to_xgrid">
   3452 !   <IN NAME="d"  TYPE="real" DIM="(:,:)" > </IN>
   3453 !   <IN NAME="grid_id"  TYPE=" character(len=3)"  > </IN>
   3454 !   <INOUT NAME="x"  TYPE="real" DIM="(:)" > </INOUT>
   3455 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   3456 !   <IN NAME="remap_method" TYPE="integer,optional"></IN>
   3457 subroutine put_side1_to_xgrid(d, grid_id, x, xmap, remap_method, complete)
   3458   real, dimension(:,:), intent(in   )    :: d
   3459   character(len=3),     intent(in   )    :: grid_id
   3460   real, dimension(:),   intent(inout)    :: x
   3461   type (xmap_type),     intent(inout)    :: xmap
   3462   integer, intent(in), optional          :: remap_method
   3463   logical, intent(in), optional          :: complete
   3464 
   3465   logical                                         :: is_complete, set_mismatch
   3466   integer                                         :: g, method
   3467   character(len=2)                                :: text
   3468   integer,                                   save :: isize=0
   3469   integer,                                   save :: jsize=0
   3470   integer,                                   save :: lsize=0
   3471   integer,                                   save :: xsize=0
   3472   integer,                                   save :: method_saved=0
   3473   character(len=3),                          save :: grid_id_saved=""
   3474   integer(8), dimension(MAX_FIELDS), save :: d_addrs=-9999
   3475   integer(8), dimension(MAX_FIELDS), save :: x_addrs=-9999
   3476 
   3477   if (grid_id==xmap%grids(1)%id) then
   3478      method = FIRST_ORDER      ! default
   3479      if(present(remap_method)) method = remap_method
   3480      is_complete = .true.
   3481      if(present(complete)) is_complete=complete
   3482      lsize = lsize + 1
   3483      if( lsize > MAX_FIELDS ) then
   3484         write( text,'(i2)' ) MAX_FIELDS
   3485         call error_mesg ('xgrid_mod',  'MAX_FIELDS='//trim(text)//' exceeded for group put_side1_to_xgrid', FATAL)
   3486      endif
   3487      d_addrs(lsize) = LOC(d)
   3488      x_addrs(lsize) = LOC(x)
   3489 
   3490      if(lsize == 1) then
   3491         isize = size(d,1)
   3492         jsize = size(d,2)
   3493         xsize = size(x(:))
   3494         method_saved = method
   3495         grid_id_saved = grid_id
   3496      else
   3497         set_mismatch = .false.
   3498         set_mismatch = set_mismatch .OR. (isize /= size(d,1))
   3499         set_mismatch = set_mismatch .OR. (jsize /= size(d,2))
   3500         set_mismatch = set_mismatch .OR. (xsize /= size(x(:)))
   3501         set_mismatch = set_mismatch .OR. (method_saved /= method)
   3502         set_mismatch = set_mismatch .OR. (grid_id_saved /= grid_id)
   3503         if(set_mismatch)then

Page 105         Source Listing                  PUT_SIDE1_TO_XGRID
2021-06-01 08:56                                 xgrid.F90

   3504            write( text,'(i2)' ) lsize
   3505            call error_mesg ('xgrid_mod', 'Incompatible field at count '//text//' for group put_side1_to_xgrid', FATAL )
   3506         endif
   3507      endif
   3508 
   3509      if(is_complete) then
   3510 !--- when exchange_monotonic is true and the side 1 ia atm, will always use monotonic second order conservative.
   3511         if(monotonic_exchange .AND. grid_id == 'ATM') then
   3512            call put_1_to_xgrid_order_2(d_addrs, x_addrs, xmap, isize, jsize, xsize, lsize)
   3513         else if(method == FIRST_ORDER) then
   3514            call put_1_to_xgrid_order_1(d_addrs, x_addrs, xmap, isize, jsize, xsize, lsize)
   3515         else
   3516            if(grid_id .NE. 'ATM') call error_mesg ('xgrid_mod',  &
   3517                 "second order put_to_xgrid should only be applied to 'ATM' model, "//&
   3518                 "contact developer", FATAL)
   3519            call put_1_to_xgrid_order_2(d_addrs, x_addrs, xmap, isize, jsize, xsize, lsize)
   3520         endif
   3521 
   3522         d_addrs = -9999
   3523         x_addrs = -9999
   3524         isize   = 0
   3525         jsize   = 0
   3526         xsize   = 0
   3527         lsize   = 0
   3528         method_saved = 0
   3529         grid_id_saved = ""
   3530      endif
   3531      return
   3532   end if
   3533 
   3534   do g=2,size(xmap%grids(:))
   3535     if (grid_id==xmap%grids(g)%id)    &
   3536       call error_mesg ('xgrid_mod',  &
   3537                        'put_to_xgrid expects a 3D side 2 grid', FATAL)
   3538   end do
   3539 
   3540   call error_mesg ('xgrid_mod', 'put_to_xgrid: could not find grid id', FATAL)
   3541 
   3542 end subroutine put_side1_to_xgrid

Page 106         Source Listing                  PUT_SIDE1_TO_XGRID
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                        
                                              
 xgrid_mod_mp_put_side1_to_xgrid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPLETE                   Dummy  3457     L(4)            4           scalar   ARG,IN           3481                              
 D                          Dummy  3457     R(8)            8     2     1        ARG,IN           3487,3491,3492,3498,3499          
 D_ADDRS                    Local  3474     I(8)            8     1     80       TGT,SAVE         3474,3487,3512,3514,3519,3522     
 G                          Local  3466     I(4)            4           scalar                    3534,3535                         
 GRID_ID                    Dummy  3457     CHAR            3           scalar   ARG,IN           3477,3495,3502,3511,3516,3535     
 GRID_ID_SAVED              Local  3473     CHAR            3           scalar   SAVE             3473,3495,3502,3529               
 ISIZE                      Local  3468     I(4)            4           scalar   SAVE             3468,3491,3498,3512,3514,3519,3524
 IS_COMPLETE                Local  3465     L(4)            4           scalar                    3480,3481,3509                    
 JSIZE                      Local  3469     I(4)            4           scalar   SAVE             3469,3492,3499,3512,3514,3519,3525
 LOC                        Func   3487                                 scalar                    3487,3488                         
 LSIZE                      Local  3470     I(4)            4           scalar   SAVE             3470,3482,3483,3487,3488,3490,3504
                                                                                                  ,3512,3514,3519,3527              
 MAX_FIELDS                 Param  3474     I(4)            4           scalar                    3474,3475,3483,3484,3600,3601,3607
                                                                                                  ,3608,5146,5147,5153,5154,5225,522
                                                                                                  6,5232,5233                       
 METHOD                     Local  3466     I(4)            4           scalar                    3478,3479,3494,3501,3513          
 METHOD_SAVED               Local  3472     I(4)            4           scalar   SAVE             3472,3494,3501,3528               
 PRESENT                    Func   3479                                 scalar                    3479,3481                         
 PUT_SIDE1_TO_XGRID         Subr   3457                                          PRIV             4382,4451,4513,4623               
 REMAP_METHOD               Dummy  3457     I(4)            4           scalar   ARG,IN           3479                              
 SET_MISMATCH               Local  3465     L(4)            4           scalar                    3497,3498,3499,3500,3501,3502,3503
 SIZE                       Func   3491                                 scalar                    3491,3492,3493,3498,3499,3500,3534
 TEXT                       Local  3467     CHAR            2           scalar                    3484,3485,3504,3505               
 TRIM                       Func   3485                                 scalar                    3485                              
 X                          Dummy  3457     R(8)            8     1     1        ARG,INOUT        3488,3493,3500                    
 XMAP                       Dummy  3457     XMAP_TYPE       928         scalar   ARG,INOUT        3477,3512,3514,3519,3534,3535     
 XSIZE                      Local  3471     I(4)            4           scalar   SAVE             3471,3493,3500,3512,3514,3519,3526
 X_ADDRS                    Local  3475     I(8)            8     1     80       TGT,SAVE         3475,3488,3512,3514,3519,3523     

Page 107         Source Listing                  PUT_SIDE1_TO_XGRID
2021-06-01 08:56                                 xgrid.F90

   3543 ! </SUBROUTINE>
   3544 
   3545 !#######################################################################
   3546 
   3547 ! <SUBROUTINE NAME="put_side2_to_xgrid" INTERFACE="put_to_xgrid">
   3548 !   <IN NAME="d"  TYPE="real" DIM="(:,:,:)" > </IN>
   3549 !   <IN NAME="grid_id"  TYPE=" character(len=3)"  > </IN>
   3550 !   <INOUT NAME="x"  TYPE="real" DIM="(:)" > </INOUT>
   3551 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   3552 
   3553 subroutine put_side2_to_xgrid(d, grid_id, x, xmap)
   3554 real, dimension(:,:,:), intent(in   ) :: d
   3555 character(len=3),       intent(in   ) :: grid_id
   3556 real, dimension(:),     intent(inout) :: x
   3557 type (xmap_type),       intent(inout) :: xmap
   3558 
   3559   integer :: g
   3560 
   3561   if (grid_id==xmap%grids(1)%id) &
   3562     call error_mesg ('xgrid_mod',  &
   3563                      'put_to_xgrid expects a 2D side 1 grid', FATAL)
   3564 
   3565   do g=2,size(xmap%grids(:))
   3566     if (grid_id==xmap%grids(g)%id) then
   3567          call put_2_to_xgrid(d, xmap%grids(g), x, xmap)
   3568       return;
   3569     end if
   3570   end do
   3571 
   3572   call error_mesg ('xgrid_mod', 'put_to_xgrid: could not find grid id', FATAL)
   3573 
   3574 end subroutine put_side2_to_xgrid

Page 108         Source Listing                  PUT_SIDE2_TO_XGRID
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                        
                                              
 xgrid_mod_mp_put_side2_to_xgrid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D                          Dummy  3553     R(8)            8     3     1        ARG,IN           3567                              
 G                          Local  3559     I(4)            4           scalar                    3565,3566,3567                    
 GRID_ID                    Dummy  3553     CHAR            3           scalar   ARG,IN           3561,3566                         
 PUT_SIDE2_TO_XGRID         Subr   3553                                          PRIV             4392,4442,4444,4537,4601,4608     
 SIZE                       Func   3565                                 scalar                    3565                              
 X                          Dummy  3553     R(8)            8     1     1        ARG,INOUT        3567                              
 XMAP                       Dummy  3553     XMAP_TYPE       928         scalar   ARG,INOUT        3561,3565,3566,3567               

Page 109         Source Listing                  PUT_SIDE2_TO_XGRID
2021-06-01 08:56                                 xgrid.F90

   3575 ! </SUBROUTINE>
   3576 
   3577 !#######################################################################
   3578 
   3579 ! <SUBROUTINE NAME="get_side1_from_xgrid" INTERFACE="get_from_xgrid">
   3580 !   <IN NAME="x"  TYPE="real" DIM="(:)" > </IN>
   3581 !   <IN NAME="grid_id"  TYPE=" character(len=3)"  > </IN>
   3582 !   <OUT NAME="d"  TYPE="real" DIM="(:,:)" > </OUT>
   3583 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   3584 
   3585 subroutine get_side1_from_xgrid(d, grid_id, x, xmap, complete)
   3586   real, dimension(:,:), intent(  out) :: d
   3587   character(len=3),     intent(in   ) :: grid_id
   3588   real, dimension(:),   intent(in   ) :: x
   3589   type (xmap_type),     intent(inout) :: xmap
   3590   logical, intent(in), optional     :: complete
   3591 
   3592   logical                                         :: is_complete, set_mismatch
   3593   integer                                         :: g
   3594   character(len=2)                                :: text
   3595   integer,                                   save :: isize=0
   3596   integer,                                   save :: jsize=0
   3597   integer,                                   save :: lsize=0
   3598   integer,                                   save :: xsize=0
   3599   character(len=3),                          save :: grid_id_saved=""
   3600   integer(8), dimension(MAX_FIELDS), save :: d_addrs=-9999
   3601   integer(8), dimension(MAX_FIELDS), save :: x_addrs=-9999
   3602 
   3603   if (grid_id==xmap%grids(1)%id) then
   3604      is_complete = .true.
   3605      if(present(complete)) is_complete=complete
   3606      lsize = lsize + 1
   3607      if( lsize > MAX_FIELDS ) then
   3608         write( text,'(i2)' ) MAX_FIELDS
   3609         call error_mesg ('xgrid_mod',  'MAX_FIELDS='//trim(text)//' exceeded for group get_side1_from_xgrid', FATAL)
   3610      endif
   3611      d_addrs(lsize) = LOC(d)
   3612      x_addrs(lsize) = LOC(x)
   3613 
   3614      if(lsize == 1) then
   3615         isize = size(d,1)
   3616         jsize = size(d,2)
   3617         xsize = size(x(:))
   3618         grid_id_saved = grid_id
   3619      else
   3620         set_mismatch = .false.
   3621         set_mismatch = set_mismatch .OR. (isize /= size(d,1))
   3622         set_mismatch = set_mismatch .OR. (jsize /= size(d,2))
   3623         set_mismatch = set_mismatch .OR. (xsize /= size(x(:)))
   3624         set_mismatch = set_mismatch .OR. (grid_id_saved /= grid_id)
   3625         if(set_mismatch)then
   3626            write( text,'(i2)' ) lsize
   3627            call error_mesg ('xgrid_mod', 'Incompatible field at count '//text//' for group get_side1_from_xgrid', FATAL )
   3628         endif
   3629      endif
   3630 
   3631      if(is_complete) then

Page 110         Source Listing                  GET_SIDE1_FROM_XGRID
2021-06-01 08:56                                 xgrid.F90

   3632         if (make_exchange_reproduce) then
   3633            call get_1_from_xgrid_repro(d_addrs, x_addrs, xmap, xsize, lsize)
   3634         else
   3635            call get_1_from_xgrid(d_addrs, x_addrs, xmap, isize, jsize, xsize, lsize)
   3636         end if
   3637         d_addrs(1:lsize) = -9999
   3638         x_addrs(1:lsize) = -9999
   3639         isize   = 0
   3640         jsize   = 0
   3641         xsize   = 0
   3642         lsize   = 0
   3643         grid_id_saved = ""
   3644      endif
   3645      return;
   3646   end if
   3647 
   3648   do g=2,size(xmap%grids(:))
   3649     if (grid_id==xmap%grids(g)%id) &
   3650       call error_mesg ('xgrid_mod',  &
   3651                        'get_from_xgrid expects a 3D side 2 grid', FATAL)
   3652   end do
   3653 
   3654   call error_mesg ('xgrid_mod', 'get_from_xgrid: could not find grid id', FATAL)
   3655 
   3656 end subroutine get_side1_from_xgrid


ENTRY POINTS

  Name                                          
                                                
 xgrid_mod_mp_get_side1_from_xgrid_             

Page 111         Source Listing                  GET_SIDE1_FROM_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPLETE                   Dummy  3585     L(4)            4           scalar   ARG,IN           3605                              
 D                          Dummy  3585     R(8)            8     2     1        ARG,OUT          3611,3615,3616,3621,3622          
 D_ADDRS                    Local  3600     I(8)            8     1     80       TGT,SAVE         3600,3611,3633,3635,3637          
 G                          Local  3593     I(4)            4           scalar                    3648,3649                         
 GET_SIDE1_FROM_XGRID       Subr   3585                                          PRIV             4395,4449,4545,4617               
 GRID_ID                    Dummy  3585     CHAR            3           scalar   ARG,IN           3603,3618,3624,3649               
 GRID_ID_SAVED              Local  3599     CHAR            3           scalar   SAVE             3599,3618,3624,3643               
 ISIZE                      Local  3595     I(4)            4           scalar   SAVE             3595,3615,3621,3635,3639          
 IS_COMPLETE                Local  3592     L(4)            4           scalar                    3604,3605,3631                    
 JSIZE                      Local  3596     I(4)            4           scalar   SAVE             3596,3616,3622,3635,3640          
 LOC                        Func   3611                                 scalar                    3611,3612                         
 LSIZE                      Local  3597     I(4)            4           scalar   SAVE             3597,3606,3607,3611,3612,3614,3626
                                                                                                  ,3633,3635,3637,3638,3642         
 PRESENT                    Func   3605                                 scalar                    3605                              
 SET_MISMATCH               Local  3592     L(4)            4           scalar                    3620,3621,3622,3623,3624,3625     
 SIZE                       Func   3615                                 scalar                    3615,3616,3617,3621,3622,3623,3648
 TEXT                       Local  3594     CHAR            2           scalar                    3608,3609,3626,3627               
 TRIM                       Func   3609                                 scalar                    3609                              
 X                          Dummy  3585     R(8)            8     1     1        ARG,IN           3612,3617,3623                    
 XMAP                       Dummy  3585     XMAP_TYPE       928         scalar   ARG,INOUT        3603,3633,3635,3648,3649          
 XSIZE                      Local  3598     I(4)            4           scalar   SAVE             3598,3617,3623,3633,3635,3641     
 X_ADDRS                    Local  3601     I(8)            8     1     80       TGT,SAVE         3601,3612,3633,3635,3638          

Page 112         Source Listing                  GET_SIDE1_FROM_XGRID
2021-06-01 08:56                                 xgrid.F90

   3657 ! </SUBROUTINE>
   3658 
   3659 !#######################################################################
   3660 
   3661 ! <SUBROUTINE NAME="get_side2_from_xgrid" INTERFACE="get_from_xgrid">
   3662 !   <IN NAME="x"  TYPE="real" DIM="(:)" > </IN>
   3663 !   <IN NAME="grid_id"  TYPE=" character(len=3)"  > </IN>
   3664 !   <OUT NAME="d"  TYPE="real" DIM="(:,:,:)" > </OUT>
   3665 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   3666 
   3667 subroutine get_side2_from_xgrid(d, grid_id, x, xmap)
   3668 real, dimension(:,:,:), intent(  out) :: d
   3669 character(len=3),       intent(in   ) :: grid_id
   3670 real, dimension(:),     intent(in   ) :: x
   3671 type (xmap_type),       intent(in   ) :: xmap
   3672 
   3673   integer :: g
   3674 
   3675   if (grid_id==xmap%grids(1)%id) &
   3676     call error_mesg ('xgrid_mod',  &
   3677                      'get_from_xgrid expects a 2D side 1 grid', FATAL)
   3678 
   3679   do g=2,size(xmap%grids(:))
   3680     if (grid_id==xmap%grids(g)%id) then
   3681       call get_2_from_xgrid(d, xmap%grids(g), x, xmap)
   3682       return;
   3683     end if
   3684   end do
   3685 
   3686   call error_mesg ('xgrid_mod', 'get_from_xgrid: could not find grid id', FATAL)
   3687 
   3688 end subroutine get_side2_from_xgrid

Page 113         Source Listing                  GET_SIDE2_FROM_XGRID
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                          
                                                
 xgrid_mod_mp_get_side2_from_xgrid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D                          Dummy  3667     R(8)            8     3     1        ARG,OUT          3681                              
 G                          Local  3673     I(4)            4           scalar                    3679,3680,3681                    
 GET_SIDE2_FROM_XGRID       Subr   3667                                          PRIV             4388,4461,4533,4637               
 GRID_ID                    Dummy  3667     CHAR            3           scalar   ARG,IN           3675,3680                         
 SIZE                       Func   3679                                 scalar                    3679                              
 X                          Dummy  3667     R(8)            8     1     1        ARG,IN           3681                              
 XMAP                       Dummy  3667     XMAP_TYPE       928         scalar   ARG,IN           3675,3679,3680,3681               

Page 114         Source Listing                  GET_SIDE2_FROM_XGRID
2021-06-01 08:56                                 xgrid.F90

   3689 ! </SUBROUTINE>
   3690 
   3691 !#######################################################################
   3692 
   3693 ! <SUBROUTINE NAME="some">
   3694 
   3695 !   <OVERVIEW>
   3696 !     Returns logical associating exchange grid cells with given side two grid.
   3697 !   </OVERVIEW>
   3698 !   <DESCRIPTION>
   3699 !     Returns logical associating exchange grid cells with given side two grid.
   3700 !   </DESCRIPTION>
   3701 !   <TEMPLATE>
   3702 !     call some(xmap, some_arr, grid_id)
   3703 !   </TEMPLATE>
   3704 
   3705 !   <IN NAME="xmap"  TYPE="xmap_type"  ></IN>
   3706 !   <IN NAME="grid_id"  TYPE="character(len=3)"  ></IN>
   3707 !   <OUT NAME="some_arr"  TYPE="logical" DIM="(xmap%size)" >
   3708 !     logical associating exchange grid cells with given side 2 grid.
   3709 !   </OUT>
   3710 
   3711 !> @brief Returns logical associating exchange grid cells with given side two grid.
   3712 subroutine some(xmap, some_arr, grid_id)
   3713 type (xmap_type),           intent(in) :: xmap
   3714 character(len=3), optional, intent(in) :: grid_id
   3715 logical, dimension(:), intent(out) :: some_arr !< logical associating exchange grid cells with given side 2 grid.
   3716 
   3717   integer :: g
   3718 
   3719   if (.not.present(grid_id)) then
   3720 
   3721     if(xmap%size > 0) then
   3722        some_arr = .true.
   3723     else
   3724        some_arr = .false.
   3725     end if
   3726     return;
   3727   end if
   3728 
   3729   if (grid_id==xmap%grids(1)%id) &
   3730     call error_mesg ('xgrid_mod', 'some expects a side 2 grid id', FATAL)
   3731 
   3732   do g=2,size(xmap%grids(:))
   3733     if (grid_id==xmap%grids(g)%id) then
   3734       some_arr = .false.
   3735       some_arr(xmap%grids(g)%first:xmap%grids(g)%last) = .true.;
   3736       return;
   3737     end if
   3738   end do
   3739 
   3740   call error_mesg ('xgrid_mod', 'some could not find grid id', FATAL)
   3741 
   3742 end subroutine some

Page 115         Source Listing                  SOME
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                          
                                
 xgrid_mod_mp_some_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 G                          Local  3717     I(4)            4           scalar                    3732,3733,3735                    
 GRID_ID                    Dummy  3712     CHAR            3           scalar   ARG,IN           3719,3729,3733                    
 PRESENT                    Func   3719                                 scalar                    3719                              
 SIZE                       Func   3732                                 scalar                    3732                              
 SOME                       Subr   3712                                                                                             
 SOME_ARR                   Dummy  3712     L(4)            4     1     1        ARG,OUT          3722,3724,3734,3735               
 XMAP                       Dummy  3712     XMAP_TYPE       928         scalar   ARG,IN           3721,3729,3732,3733,3735          

Page 116         Source Listing                  SOME
2021-06-01 08:56                                 xgrid.F90

   3743 ! </SUBROUTINE>
   3744 
   3745 !#######################################################################
   3746 
   3747 subroutine put_2_to_xgrid(d, grid, x, xmap)
   3748 type (grid_type),                                intent(in) :: grid
   3749 real, dimension(grid%is_me:grid%ie_me, &
   3750                 grid%js_me:grid%je_me, grid%km), intent(in) :: d
   3751 real, dimension(:    ), intent(inout) :: x
   3752 type (xmap_type),       intent(in   ) :: xmap
   3753 
   3754   integer                 ::   l
   3755   call mpp_clock_begin(id_put_2_to_xgrid)
   3756 
   3757   do l=grid%first,grid%last
   3758     x(l) = d(xmap%x2(l)%i,xmap%x2(l)%j,xmap%x2(l)%k)
   3759   end do
   3760 
   3761   call mpp_clock_end(id_put_2_to_xgrid)
   3762 end subroutine put_2_to_xgrid


ENTRY POINTS

  Name                                    
                                          
 xgrid_mod_mp_put_2_to_xgrid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D                          Dummy  3747     R(8)            8     3     0        ARG,IN           3758                              
 GRID                       Dummy  3747     GRID_TYPE       4888        scalar   ARG,IN           3749,3750,3757                    
 L                          Local  3754     I(4)            4           scalar                    3757,3758                         
 PUT_2_TO_XGRID             Subr   3747                                                           3567                              
 X                          Dummy  3747     R(8)            8     1     1        ARG,INOUT        3758                              
 XMAP                       Dummy  3747     XMAP_TYPE       928         scalar   ARG,IN           3758                              

Page 117         Source Listing                  PUT_2_TO_XGRID
2021-06-01 08:56                                 xgrid.F90

   3763 
   3764 !#######################################################################
   3765 
   3766 subroutine get_2_from_xgrid(d, grid, x, xmap)
   3767 type (grid_type),                                intent(in ) :: grid
   3768 real, dimension(grid%is_me:grid%ie_me, &
   3769                 grid%js_me:grid%je_me, grid%km), intent(out) :: d
   3770 real, dimension(:),     intent(in   ) :: x
   3771 type (xmap_type),       intent(in   ) :: xmap
   3772 
   3773   integer                 :: l, k
   3774 
   3775   call mpp_clock_begin(id_get_2_from_xgrid)
   3776 
   3777   d = 0.0
   3778   do l=grid%first_get,grid%last_get
   3779     d(xmap%x2_get(l)%i,xmap%x2_get(l)%j,xmap%x2_get(l)%k) = &
   3780             d(xmap%x2_get(l)%i,xmap%x2_get(l)%j,xmap%x2_get(l)%k) + xmap%x2_get(l)%area*x(xmap%x2_get(l)%pos)
   3781   end do
   3782 !
   3783 !  normalize with side 2 grid cell areas
   3784 !
   3785   do k=1,size(d,3)
   3786     d(:,:,k) = d(:,:,k) * grid%area_inv
   3787   end do
   3788 
   3789   call mpp_clock_end(id_get_2_from_xgrid)
   3790 
   3791 end subroutine get_2_from_xgrid

Page 118         Source Listing                  GET_2_FROM_XGRID
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                      
                                            
 xgrid_mod_mp_get_2_from_xgrid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D                          Dummy  3766     R(8)            8     3     0        ARG,OUT          3777,3779,3780,3785,3786          
 GET_2_FROM_XGRID           Subr   3766                                                           3681                              
 GRID                       Dummy  3766     GRID_TYPE       4888        scalar   ARG,IN           3768,3769,3778,3786               
 K                          Local  3773     I(4)            4           scalar                    3785,3786                         
 L                          Local  3773     I(4)            4           scalar                    3778,3779,3780                    
 SIZE                       Func   3785                                 scalar                    3785                              
 X                          Dummy  3766     R(8)            8     1     1        ARG,IN           3780                              
 XMAP                       Dummy  3766     XMAP_TYPE       928         scalar   ARG,IN           3779,3780                         

Page 119         Source Listing                  GET_2_FROM_XGRID
2021-06-01 08:56                                 xgrid.F90

   3792 
   3793 !#######################################################################
   3794 
   3795 subroutine put_1_to_xgrid_order_1(d_addrs, x_addrs, xmap, isize, jsize, xsize, lsize)
   3796   integer(8), dimension(:), intent(in) :: d_addrs
   3797   integer(8), dimension(:), intent(in) :: x_addrs
   3798   type (xmap_type),              intent(inout) :: xmap
   3799   integer,                          intent(in) :: isize, jsize, xsize, lsize
   3800 
   3801   integer                         :: i, j, p, buffer_pos, msgsize
   3802   integer                         :: from_pe, to_pe, pos, n, l, count
   3803   integer                         :: ibegin, istart, iend, start_pos
   3804   type (comm_type), pointer, save :: comm =>NULL()
   3805   real                            :: recv_buffer(xmap%put1%recvsize*lsize)
   3806   real                            :: send_buffer(xmap%put1%sendsize*lsize)
   3807   real                            :: unpack_buffer(xmap%put1%recvsize)
   3808 
   3809   real, dimension(isize, jsize)   :: d
   3810   real, dimension(xsize)          :: x
   3811   pointer(ptr_d, d)
   3812   pointer(ptr_x, x)
   3813 
   3814   call mpp_clock_begin(id_put_1_to_xgrid_order_1)
   3815 
   3816 !--- pre-post receiving
   3817   comm => xmap%put1
   3818   do p = 1, comm%nrecv
   3819      msgsize = comm%recv(p)%count*lsize
   3820      from_pe = comm%recv(p)%pe
   3821      buffer_pos = comm%recv(p)%buffer_pos*lsize
   3822      call mpp_recv(recv_buffer(buffer_pos+1), glen=msgsize, from_pe = from_pe, block=.false., tag=COMM_TAG_7)
   3823   enddo
   3824 
   3825 !--- send the data
   3826   buffer_pos = 0
   3827   do p = 1, comm%nsend
   3828      msgsize = comm%send(p)%count*lsize
   3829      to_pe = comm%send(p)%pe
   3830      pos = buffer_pos
   3831      do l = 1, lsize
   3832         ptr_d = d_addrs(l)
   3833         do n = 1, comm%send(p)%count
   3834            pos = pos + 1
   3835            i = comm%send(p)%i(n)
   3836            j = comm%send(p)%j(n)
   3837            send_buffer(pos) = d(i,j)
   3838         enddo
   3839      enddo
   3840      call mpp_send(send_buffer(buffer_pos+1), plen=msgsize, to_pe = to_pe, tag=COMM_TAG_7 )
   3841      buffer_pos = buffer_pos + msgsize
   3842   enddo
   3843 
   3844   call mpp_sync_self(check=EVENT_RECV)
   3845 
   3846 !--- unpack the buffer
   3847   if( lsize == 1) then
   3848      ptr_x = x_addrs(1)

Page 120         Source Listing                  PUT_1_TO_XGRID_ORDER_1
2021-06-01 08:56                                 xgrid.F90

   3849      do l=1,xmap%size_put1
   3850         x(l) =  recv_buffer(xmap%x1_put(l)%pos)
   3851      end do
   3852   else
   3853      start_pos = 0
   3854 !$OMP parallel do default(none) shared(lsize,x_addrs,comm,recv_buffer,xmap) &
   3855 !$OMP                          private(ptr_x,count,ibegin,istart,iend,pos,unpack_buffer)
   3856      do l = 1, lsize
   3857         ptr_x = x_addrs(l)
   3858         do p = 1, comm%nrecv
   3859            count = comm%recv(p)%count
   3860            ibegin = comm%recv(p)%buffer_pos*lsize + 1
   3861            istart = ibegin + (l-1)*count
   3862            iend = istart + count - 1
   3863            pos = comm%recv(p)%buffer_pos
   3864            do n = istart, iend
   3865               pos = pos + 1
   3866               unpack_buffer(pos) = recv_buffer(n)
   3867            enddo
   3868         enddo
   3869         do i=1,xmap%size_put1
   3870            x(i) =  unpack_buffer(xmap%x1_put(i)%pos)
   3871         end do
   3872      enddo
   3873   endif
   3874 
   3875   call mpp_sync_self()
   3876 
   3877   call mpp_clock_end(id_put_1_to_xgrid_order_1)
   3878 
   3879 end subroutine put_1_to_xgrid_order_1

Page 121         Source Listing                  PUT_1_TO_XGRID_ORDER_1
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                            
                                                  
 xgrid_mod_mp_put_1_to_xgrid_order_1_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BUFFER_POS                 Local  3801     I(4)            4           scalar                    3821,3822,3826,3830,3840,3841     
 COMM                       Local  3804     COMM_TYPE       232         scalar   PTR,SAVE         3804,3817,3818,3819,3820,3821,3827
                                                                                                  ,3828,3829,3833,3835,3836,3854,385
                                                                                                  8,3859,3860,3863                  
 COMM_TAG_7                 Param  3822     I(4)            4           scalar   PRIV             248,3822,3840,5372,5389           
 COUNT                      Local  3802     I(4)            4           scalar                    3855,3859,3861,3862               
 D                          Local  3809     R(8)            8     2     0                         3837                              
 D_ADDRS                    Dummy  3795     I(8)            8     1     1        ARG,IN           3832                              
 FROM_PE                    Local  3802     I(4)            4           scalar                    3820,3822                         
 I                          Local  3801     I(4)            4           scalar                    3835,3837,3869,3870               
 IBEGIN                     Local  3803     I(4)            4           scalar                    3855,3860,3861                    
 IEND                       Local  3803     I(4)            4           scalar                    3855,3862,3864                    
 ISIZE                      Dummy  3795     I(4)            4           scalar   ARG,IN           3809                              
 ISTART                     Local  3803     I(4)            4           scalar                    3855,3861,3862,3864               
 J                          Local  3801     I(4)            4           scalar                    3836,3837                         
 JSIZE                      Dummy  3795     I(4)            4           scalar   ARG,IN           3809                              
 L                          Local  3802     I(4)            4           scalar                    3831,3832,3849,3850,3856,3857,3861
 LSIZE                      Dummy  3795     I(4)            4           scalar   ARG,IN           3805,3806,3819,3821,3828,3831,3847
                                                                                                  ,3854,3856,3860                   
 MSGSIZE                    Local  3801     I(4)            4           scalar                    3819,3822,3828,3840,3841          
 N                          Local  3802     I(4)            4           scalar                    3833,3835,3836,3864,3866          
 P                          Local  3801     I(4)            4           scalar                    3818,3819,3820,3821,3827,3828,3829
                                                                                                  ,3833,3835,3836,3858,3859,3860,386
                                                                                                  3                                 
 POS                        Local  3802     I(4)            4           scalar                    3830,3834,3837,3855,3863,3865,3866
 PTR_D                      Local  3811     I(8)            8           scalar   PTR              3832                              
 PTR_X                      Local  3812     I(8)            8           scalar   PTR              3848,3855,3857                    
 PUT_1_TO_XGRID_ORDER_1     Subr   3795                                                           3514                              
 RECV_BUFFER                Local  3805     R(8)            8     1     0                         3822,3850,3854,3866               
 SEND_BUFFER                Local  3806     R(8)            8     1     0                         3837,3840                         
 START_POS                  Local  3803     I(4)            4           scalar                    3853                              
 TO_PE                      Local  3802     I(4)            4           scalar                    3829,3840                         
 UNPACK_BUFFER              Local  3807     R(8)            8     1     0                         3855,3866,3870                    
 X                          Local  3810     R(8)            8     1     0                         3850,3870                         
 XMAP                       Dummy  3795     XMAP_TYPE       928         scalar   ARG,INOUT        3805,3806,3807,3817,3849,3850,3854
                                                                                                  ,3869,3870                        
 XSIZE                      Dummy  3795     I(4)            4           scalar   ARG,IN           3810                              
 X_ADDRS                    Dummy  3795     I(8)            8     1     1        ARG,IN           3848,3854,3857                    

Page 122         Source Listing                  PUT_1_TO_XGRID_ORDER_1
2021-06-01 08:56                                 xgrid.F90

   3880 
   3881 !#######################################################################
   3882 
   3883 
   3884 subroutine put_1_to_xgrid_order_2(d_addrs, x_addrs, xmap, isize, jsize, xsize, lsize)
   3885   integer(8), dimension(:), intent(in) :: d_addrs
   3886   integer(8), dimension(:), intent(in) :: x_addrs
   3887   type (xmap_type),              intent(inout) :: xmap
   3888   integer,                          intent(in) :: isize, jsize, xsize, lsize
   3889 
   3890 !: NOTE: halo size is assumed to be 1 in setup_xmap
   3891   real, dimension(0:isize+1, 0:jsize+1, lsize) :: tmp
   3892   real, dimension(isize,     jsize,     lsize) :: tmpx, tmpy
   3893   real, dimension(isize,     jsize,     lsize) :: d_bar_max, d_bar_min
   3894   real, dimension(isize,     jsize,     lsize) :: d_max, d_min
   3895   real                            :: d_bar
   3896   integer                         :: i, is, ie, im, j, js, je, jm, ii, jj
   3897   integer                         :: p, l, ioff, joff, isd, jsd
   3898   type (grid_type), pointer, save :: grid1 =>NULL()
   3899   type (comm_type), pointer, save :: comm  =>NULL()
   3900   integer                         :: buffer_pos, msgsize, from_pe, to_pe, pos, n
   3901   integer                         :: ibegin, count, istart, iend
   3902   real                            :: recv_buffer(xmap%put1%recvsize*lsize*3)
   3903   real                            :: send_buffer(xmap%put1%sendsize*lsize*3)
   3904   real                            :: unpack_buffer(xmap%put1%recvsize*3)
   3905   logical                         :: on_west_edge, on_east_edge, on_south_edge, on_north_edge
   3906   real, dimension(isize, jsize)   :: d
   3907   real, dimension(xsize)          :: x
   3908   pointer(ptr_d, d)
   3909   pointer(ptr_x, x)
   3910 
   3911   call mpp_clock_begin(id_put_1_to_xgrid_order_2)
   3912   grid1 => xmap%grids(1)
   3913 
   3914   is = grid1%is_me;   ie = grid1%ie_me
   3915   js = grid1%js_me;   je = grid1%je_me
   3916   isd = grid1%isd_me
   3917   jsd = grid1%jsd_me
   3918 
   3919 !$OMP parallel do default(none) shared(lsize,tmp,d_addrs,isize,jsize) private(ptr_d)
   3920   do l = 1, lsize
   3921      tmp(:,:,l) = LARGE_NUMBER
   3922      ptr_d = d_addrs(l)
   3923      tmp(1:isize,1:jsize,l) = d(:,:)
   3924   enddo
   3925 
   3926   if(grid1%is_latlon) then
   3927      call mpp_update_domains(tmp,grid1%domain_with_halo)
   3928 !$OMP parallel do default(none) shared(lsize,tmp,grid1,is,ie,js,je,isd,jsd,tmpx,tmpy)
   3929      do l = 1, lsize
   3930         tmpy(:,:,l) = grad_merid_latlon(tmp(:,:,l), grid1%lat, is, ie, js, je, isd, jsd)
   3931         tmpx(:,:,l) = grad_zonal_latlon(tmp(:,:,l), grid1%lon, grid1%lat, is, ie, js, je, isd, jsd)
   3932      enddo
   3933   else
   3934      call mpp_update_domains(tmp,grid1%domain)
   3935      on_west_edge  = (is==1)
   3936      on_east_edge  = (ie==grid1%im)

Page 123         Source Listing                  PUT_1_TO_XGRID_ORDER_2
2021-06-01 08:56                                 xgrid.F90

   3937      on_south_edge = (js==1)
   3938      on_north_edge = (je==grid1%jm)
   3939 !$OMP parallel do default(none) shared(lsize,tmp,grid1,tmpx,tmpy, &
   3940 !$OMP                                  on_west_edge,on_east_edge,on_south_edge,on_north_edge)
   3941      do l = 1, lsize
   3942         call gradient_cubic(tmp(:,:,l), grid1%box%dx, grid1%box%dy, grid1%box%area,   &
   3943                             grid1%box%edge_w, grid1%box%edge_e, grid1%box%edge_s,     &
   3944                             grid1%box%edge_n, grid1%box%en1, grid1%box%en2,           &
   3945                             grid1%box%vlon, grid1%box%vlat, tmpx(:,:,l), tmpy(:,:,l), &
   3946                             on_west_edge, on_east_edge, on_south_edge, on_north_edge)
   3947      enddo
   3948   end if
   3949 
   3950 !--- pre-post receiving
   3951   buffer_pos = 0
   3952   comm => xmap%put1
   3953   do p = 1, comm%nrecv
   3954      msgsize = comm%recv(p)%count*lsize
   3955      buffer_pos = comm%recv(p)%buffer_pos*lsize
   3956      if(.NOT. monotonic_exchange) then
   3957         msgsize = msgsize*3
   3958         buffer_pos = buffer_pos*3
   3959      endif
   3960      from_pe = comm%recv(p)%pe
   3961      call mpp_recv(recv_buffer(buffer_pos+1), glen=msgsize, from_pe = from_pe, block=.false., tag=COMM_TAG_8)
   3962   enddo
   3963 
   3964 !--- compute d_bar_max and d_bar_min.
   3965   if(monotonic_exchange) then
   3966 !$OMP parallel do default(none) shared(lsize,isize,jsize,d_bar_max,d_bar_min,d_max,d_min,tmp)
   3967      do l = 1, lsize
   3968         do j = 1, jsize
   3969            do i = 1, isize
   3970               d_bar_max(i,j,l) = -LARGE_NUMBER
   3971               d_bar_min(i,j,l) =  LARGE_NUMBER
   3972               d_max    (i,j,l) = -LARGE_NUMBER
   3973               d_min    (i,j,l) =  LARGE_NUMBER
   3974               do jj = j-1, j+1
   3975                  do ii = i-1, i+1
   3976                     if(tmp(i,j,l) .NE. LARGE_NUMBER) then
   3977                        if(tmp(i,j,l) > d_bar_max(i,j,l)) d_bar_max(i,j,l) = tmp(i,j,l)
   3978                        if(tmp(i,j,l) < d_bar_min(i,j,l)) d_bar_min(i,j,l) = tmp(i,j,l)
   3979                     endif
   3980                  enddo
   3981               enddo
   3982            enddo
   3983         enddo
   3984      enddo
   3985   endif
   3986 
   3987 !--- send the data
   3988   buffer_pos = 0
   3989   if(monotonic_exchange) then
   3990      pos = 0
   3991      do p = 1, comm%nsend
   3992         msgsize = comm%send(p)%count*lsize
   3993         to_pe = comm%send(p)%pe

Page 124         Source Listing                  PUT_1_TO_XGRID_ORDER_2
2021-06-01 08:56                                 xgrid.F90

   3994         do l = 1, lsize
   3995            ptr_d = d_addrs(l)
   3996            do n = 1, comm%send(p)%count
   3997               pos = pos + 1
   3998               i = comm%send(p)%i(n)
   3999               j = comm%send(p)%j(n)
   4000               send_buffer(pos) = d(i,j) + tmpy(i,j,l)*comm%send(p)%dj(n) + tmpx(i,j,l)*comm%send(p)%di(n)
   4001               if(send_buffer(pos) > d_max(i,j,l)) d_max(i,j,l) = send_buffer(pos)
   4002               if(send_buffer(pos) < d_min(i,j,l)) d_min(i,j,l) = send_buffer(pos)
   4003            enddo
   4004         enddo
   4005      enddo
   4006 
   4007      do p = 1, comm%nsend
   4008         msgsize = comm%send(p)%count*lsize
   4009         to_pe = comm%send(p)%pe
   4010         pos = buffer_pos
   4011         do l = 1, lsize
   4012            ptr_d = d_addrs(l)
   4013            do n = 1, comm%send(p)%count
   4014               pos = pos + 1
   4015               i = comm%send(p)%i(n)
   4016               j = comm%send(p)%j(n)
   4017               d_bar = d(i,j)
   4018               if( d_max(i,j,l) > d_bar_max(i,j,l) ) then
   4019                  send_buffer(pos) = d_bar + ((send_buffer(pos)-d_bar)/(d_max(i,j,l)-d_bar)) * (d_bar_max(i,j,l)-d_bar)
   4020               else if( d_min(i,j,l) < d_bar_min(i,j,l) ) then
   4021                  send_buffer(pos) = d_bar + ((send_buffer(pos)-d_bar)/(d_min(i,j,l)-d_bar)) * (d_bar_min(i,j,l)-d_bar)
   4022               endif
   4023            enddo
   4024         enddo
   4025         call mpp_send(send_buffer(buffer_pos+1), plen=msgsize, to_pe = to_pe, tag=COMM_TAG_8 )
   4026         buffer_pos = buffer_pos + msgsize
   4027      enddo
   4028   else
   4029      do p = 1, comm%nsend
   4030         msgsize = comm%send(p)%count*lsize*3
   4031         to_pe = comm%send(p)%pe
   4032         pos = buffer_pos
   4033         do l = 1, lsize
   4034            ptr_d = d_addrs(l)
   4035            do n = 1, comm%send(p)%count
   4036               pos = pos + 3
   4037               i = comm%send(p)%i(n)
   4038               j = comm%send(p)%j(n)
   4039               send_buffer(pos-2) = d(i,j)
   4040               send_buffer(pos-1) = tmpy(i,j,l)
   4041               send_buffer(pos  ) = tmpx(i,j,l)
   4042            enddo
   4043         enddo
   4044         call mpp_send(send_buffer(buffer_pos+1), plen=msgsize, to_pe = to_pe, tag=COMM_TAG_8 )
   4045         buffer_pos = buffer_pos + msgsize
   4046      enddo
   4047   endif
   4048 
   4049   call mpp_sync_self(check=EVENT_RECV)
   4050 

Page 125         Source Listing                  PUT_1_TO_XGRID_ORDER_2
2021-06-01 08:56                                 xgrid.F90

   4051 !--- unpack the buffer
   4052   if(monotonic_exchange) then
   4053      if( lsize == 1) then
   4054         ptr_x = x_addrs(1)
   4055         do l=1,xmap%size_put1
   4056            pos = xmap%x1_put(l)%pos
   4057            x(l) =  recv_buffer(pos)
   4058         end do
   4059      else
   4060         do l = 1, lsize
   4061            ptr_x = x_addrs(l)
   4062            pos = 0
   4063            do p = 1, comm%nsend
   4064               count = comm%send(p)%count
   4065               ibegin = comm%recv(p)%buffer_pos*lsize + 1
   4066               istart = ibegin + (l-1)*count
   4067               iend = istart + count - 1
   4068               pos = comm%recv(p)%buffer_pos
   4069               do n = istart, iend
   4070                  pos = pos + 1
   4071                  unpack_buffer(pos) = recv_buffer(n)
   4072               enddo
   4073            enddo
   4074            do i=1,xmap%size_put1
   4075               pos = xmap%x1_put(i)%pos
   4076               x(i) =  unpack_buffer(pos)
   4077            end do
   4078         enddo
   4079      endif
   4080   else
   4081      if( lsize == 1) then
   4082         ptr_x = x_addrs(1)
   4083 !$OMP parallel do default(none) shared(xmap,recv_buffer,ptr_x) private(pos)
   4084         do l=1,xmap%size_put1
   4085            pos = xmap%x1_put(l)%pos
   4086            x(l) = recv_buffer(3*pos-2) + recv_buffer(3*pos-1)*xmap%x1_put(l)%dj + recv_buffer(3*pos)*xmap%x1_put(l)%di
   4087         end do
   4088      else
   4089 !$OMP parallel do default(none) shared(lsize,comm,xmap,recv_buffer,x_addrs) &
   4090 !$OMP                          private(ptr_x,pos,ibegin,istart,iend,count,unpack_buffer)
   4091         do l = 1, lsize
   4092            ptr_x = x_addrs(l)
   4093            pos = 0
   4094            ibegin = 1
   4095            do p = 1, comm%nrecv
   4096               count = comm%recv(p)%count*3
   4097               ibegin = comm%recv(p)%buffer_pos*lsize*3 + 1
   4098               istart = ibegin + (l-1)*count
   4099               iend = istart + count - 1
   4100               pos =  comm%recv(p)%buffer_pos*3
   4101               do n = istart, iend
   4102                  pos = pos + 1
   4103                  unpack_buffer(pos) = recv_buffer(n)
   4104               enddo
   4105            enddo
   4106            do i=1,xmap%size_put1
   4107               pos = xmap%x1_put(i)%pos

Page 126         Source Listing                  PUT_1_TO_XGRID_ORDER_2
2021-06-01 08:56                                 xgrid.F90

   4108               x(i) = unpack_buffer(3*pos-2) + unpack_buffer(3*pos-1)*xmap%x1_put(i)%dj + unpack_buffer(3*pos)*xmap%x1_put(i)
   4108 %di
   4109            end do
   4110         enddo
   4111      endif
   4112   endif
   4113 
   4114   call mpp_sync_self()
   4115   call mpp_clock_end(id_put_1_to_xgrid_order_2)
   4116 
   4117 end subroutine put_1_to_xgrid_order_2


ENTRY POINTS

  Name                                            
                                                  
 xgrid_mod_mp_put_1_to_xgrid_order_2_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BUFFER_POS                 Local  3900     I(4)            4           scalar                    3951,3955,3958,3961,3988,4010,4025
                                                                                                  ,4026,4032,4044,4045              
 COMM                       Local  3899     COMM_TYPE       232         scalar   PTR,SAVE         3899,3952,3953,3954,3955,3960,3991
                                                                                                  ,3992,3993,3996,3998,3999,4000,400
                                                                                                  7,4008,4009,4013,4015,4016,4029,40
                                                                                                  30,4031,4035,4037,4038,4063,4064,4
                                                                                                  065,4068,4089,4095,4096,4097,4100 
 COMM_TAG_8                 Param  3961     I(4)            4           scalar   PRIV             248,3961,4025,4044                
 COUNT                      Local  3901     I(4)            4           scalar                    4064,4066,4067,4090,4096,4098,4099
 D                          Local  3906     R(8)            8     2     0                         3923,4000,4017,4039               
 D_ADDRS                    Dummy  3884     I(8)            8     1     1        ARG,IN           3919,3922,3995,4012,4034          
 D_BAR                      Local  3895     R(8)            8           scalar                    4017,4019,4021                    
 D_BAR_MAX                  Local  3893     R(8)            8     3     0                         3966,3970,3977,4018,4019          
 D_BAR_MIN                  Local  3893     R(8)            8     3     0                         3966,3971,3978,4020,4021          
 D_MAX                      Local  3894     R(8)            8     3     0                         3966,3972,4001,4018,4019          
 D_MIN                      Local  3894     R(8)            8     3     0                         3966,3973,4002,4020,4021          
 FROM_PE                    Local  3900     I(4)            4           scalar                    3960,3961                         
 GRADIENT_CUBIC             Subr   3942                                          PRIV             271,3942                          
 GRAD_MERID_LATLON@0        Local  3930     R(8)            8     2     0                                                           
 GRAD_ZONAL_LATLON@0        Local  3931     R(8)            8     2     0                                                           
 GRID1                      Local  3898     GRID_TYPE       4888        scalar   PTR,SAVE         3898,3912,3914,3915,3916,3917,3926
                                                                                                  ,3927,3928,3930,3931,3934,3936,393
                                                                                                  8,3939,3942,3943,3944,3945        
 I                          Local  3896     I(4)            4           scalar                    3969,3970,3971,3972,3973,3975,3976
                                                                                                  ,3977,3978,3998,4000,4001,4002,401
                                                                                                  5,4017,4018,4019,4020,4021,4037,40
                                                                                                  39,4040,4041,4074,4075,4076,4106,4
                                                                                                  107,4108                          
 IBEGIN                     Local  3901     I(4)            4           scalar                    4065,4066,4090,4094,4097,4098     
 IE                         Local  3896     I(4)            4           scalar                    3914,3928,3930,3931,3936          
 IEND                       Local  3901     I(4)            4           scalar                    4067,4069,4090,4099,4101          
 II                         Local  3896     I(4)            4           scalar                    3975                              
 IM                         Local  3896     I(4)            4           scalar                                                      

Page 127         Source Listing                  PUT_1_TO_XGRID_ORDER_2
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IOFF                       Local  3897     I(4)            4           scalar                                                      
 IS                         Local  3896     I(4)            4           scalar                    3914,3928,3930,3931,3935          
 ISD                        Local  3897     I(4)            4           scalar                    3916,3928,3930,3931               
 ISIZE                      Dummy  3884     I(4)            4           scalar   ARG,IN           3891,3892,3893,3894,3906,3919,3923
                                                                                                  ,3966,3969                        
 ISTART                     Local  3901     I(4)            4           scalar                    4066,4067,4069,4090,4098,4099,4101
 J                          Local  3896     I(4)            4           scalar                    3968,3970,3971,3972,3973,3974,3976
                                                                                                  ,3977,3978,3999,4000,4001,4002,401
                                                                                                  6,4017,4018,4019,4020,4021,4038,40
                                                                                                  39,4040,4041                      
 JE                         Local  3896     I(4)            4           scalar                    3915,3928,3930,3931,3938          
 JJ                         Local  3896     I(4)            4           scalar                    3974                              
 JM                         Local  3896     I(4)            4           scalar                                                      
 JOFF                       Local  3897     I(4)            4           scalar                                                      
 JS                         Local  3896     I(4)            4           scalar                    3915,3928,3930,3931,3937          
 JSD                        Local  3897     I(4)            4           scalar                    3917,3928,3930,3931               
 JSIZE                      Dummy  3884     I(4)            4           scalar   ARG,IN           3891,3892,3893,3894,3906,3919,3923
                                                                                                  ,3966,3968                        
 L                          Local  3897     I(4)            4           scalar                    3920,3921,3922,3923,3929,3930,3931
                                                                                                  ,3941,3942,3945,3967,3970,3971,397
                                                                                                  2,3973,3976,3977,3978,3994,3995,40
                                                                                                  00,4001,4002,4011,4012,4018,4019,4
                                                                                                  020,4021,4033,4034,4040,4041,4055,
                                                                                                  4056,4057,4060,4061,4066,4084,4085
                                                                                                  ,4086,4091,4092,4098              
 LARGE_NUMBER               Param  3921     R(8)            8           scalar                    3921,3970,3971,3972,3973,3976     
 LSIZE                      Dummy  3884     I(4)            4           scalar   ARG,IN           3891,3892,3893,3894,3902,3903,3919
                                                                                                  ,3920,3928,3929,3939,3941,3954,395
                                                                                                  5,3966,3967,3992,3994,4008,4011,40
                                                                                                  30,4033,4053,4060,4065,4081,4089,4
                                                                                                  091,4097                          
 MPP_UPDATE_DOMAIN2D_R8_3D  Subr   3927                                          PRIV             3927,3934                         
 MSGSIZE                    Local  3900     I(4)            4           scalar                    3954,3957,3961,3992,4008,4025,4026
                                                                                                  ,4030,4044,4045                   
 N                          Local  3900     I(4)            4           scalar                    3996,3998,3999,4000,4013,4015,4016
                                                                                                  ,4035,4037,4038,4069,4071,4101,410
                                                                                                  3                                 
 ON_EAST_EDGE               Local  3905     L(4)            4           scalar                    3936,3940,3946                    
 ON_NORTH_EDGE              Local  3905     L(4)            4           scalar                    3938,3940,3946                    
 ON_SOUTH_EDGE              Local  3905     L(4)            4           scalar                    3937,3940,3946                    
 ON_WEST_EDGE               Local  3905     L(4)            4           scalar                    3935,3940,3946                    
 P                          Local  3897     I(4)            4           scalar                    3953,3954,3955,3960,3991,3992,3993
                                                                                                  ,3996,3998,3999,4000,4007,4008,400
                                                                                                  9,4013,4015,4016,4029,4030,4031,40
                                                                                                  35,4037,4038,4063,4064,4065,4068,4
                                                                                                  095,4096,4097,4100                
 POS                        Local  3900     I(4)            4           scalar                    3990,3997,4000,4001,4002,4010,4014
                                                                                                  ,4019,4021,4032,4036,4039,4040,404
                                                                                                  1,4056,4057,4062,4068,4070,4071,40
                                                                                                  75,4076,4083,4085,4086,4090,4093,4
                                                                                                  100,4102,4103,4107,4108           
 PTR_D                      Local  3908     I(8)            8           scalar   PTR              3919,3922,3995,4012,4034          
 PTR_X                      Local  3909     I(8)            8           scalar   PTR              4054,4061,4082,4083,4090,4092     
 PUT_1_TO_XGRID_ORDER_2     Subr   3884                                                           3512,3519                         
 RECV_BUFFER                Local  3902     R(8)            8     1     0                         3961,4057,4071,4083,4086,4089,4103

Page 128         Source Listing                  PUT_1_TO_XGRID_ORDER_2
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 SEND_BUFFER                Local  3903     R(8)            8     1     0                         4000,4001,4002,4019,4021,4025,4039
                                                                                                  ,4040,4041,4044                   
 TMP                        Local  3891     R(8)            8     3     0                         3919,3921,3923,3927,3928,3930,3931
                                                                                                  ,3934,3939,3942,3966,3976,3977,397
                                                                                                  8                                 
 TMPX                       Local  3892     R(8)            8     3     0                         3928,3931,3939,3945,4000,4041     
 TMPY                       Local  3892     R(8)            8     3     0                         3928,3930,3939,3945,4000,4040     
 TO_PE                      Local  3900     I(4)            4           scalar                    3993,4009,4025,4031,4044          
 UNPACK_BUFFER              Local  3904     R(8)            8     1     0                         4071,4076,4090,4103,4108          
 X                          Local  3907     R(8)            8     1     0                         4057,4076,4086,4108               
 XMAP                       Dummy  3884     XMAP_TYPE       928         scalar   ARG,INOUT        3902,3903,3904,3912,3952,4055,4056
                                                                                                  ,4074,4075,4083,4084,4085,4086,408
                                                                                                  9,4106,4107,4108                  
 XSIZE                      Dummy  3884     I(4)            4           scalar   ARG,IN           3907                              
 X_ADDRS                    Dummy  3884     I(8)            8     1     1        ARG,IN           4054,4061,4082,4089,4092          

Page 129         Source Listing                  PUT_1_TO_XGRID_ORDER_2
2021-06-01 08:56                                 xgrid.F90

   4118 
   4119 !#######################################################################
   4120 
   4121 subroutine get_1_from_xgrid(d_addrs, x_addrs, xmap, isize, jsize, xsize, lsize)
   4122   integer(8), dimension(:), intent(in) :: d_addrs
   4123   integer(8), dimension(:), intent(in) :: x_addrs
   4124   type (xmap_type),              intent(inout) :: xmap
   4125   integer,                          intent(in) :: isize, jsize, xsize, lsize
   4126 
   4127   real, dimension(xmap%size), target :: dg(xmap%size, lsize)
   4128   integer                            :: i, j, l, p, n, m
   4129   integer                            :: msgsize, buffer_pos, pos
   4130   integer                            :: istart, iend, count
   4131   real              , pointer, save  :: dgp =>NULL()
   4132   type  (grid_type) , pointer, save  :: grid1 =>NULL()
   4133   type  (comm_type) , pointer, save  :: comm  =>NULL()
   4134   type(overlap_type), pointer, save  :: send => NULL()
   4135   type(overlap_type), pointer, save  :: recv => NULL()
   4136   real                               :: recv_buffer(xmap%get1%recvsize*lsize*3)
   4137   real                               :: send_buffer(xmap%get1%sendsize*lsize*3)
   4138   real                               :: unpack_buffer(xmap%get1%recvsize*3)
   4139   real                               :: d(isize,jsize)
   4140   real, dimension(xsize)             :: x
   4141   pointer(ptr_d, d)
   4142   pointer(ptr_x, x)
   4143 
   4144   call mpp_clock_begin(id_get_1_from_xgrid)
   4145 
   4146   comm => xmap%get1
   4147   grid1 => xmap%grids(1)
   4148 
   4149   do p = 1, comm%nrecv
   4150      recv => comm%recv(p)
   4151      msgsize = recv%count*lsize
   4152      buffer_pos = recv%buffer_pos*lsize
   4153      call mpp_recv(recv_buffer(buffer_pos+1), glen=msgsize, from_pe = recv%pe, block=.false., tag=COMM_TAG_9)
   4154   enddo
   4155 
   4156   dg = 0.0;
   4157 !$OMP parallel do default(none) shared(lsize,xmap,dg,x_addrs) private(dgp,ptr_x)
   4158   do l = 1, lsize
   4159      ptr_x = x_addrs(l)
   4160      do i=1,xmap%size
   4161         dgp => dg(xmap%x1(i)%pos,l)
   4162         dgp =  dgp + xmap%x1(i)%area*x(i)
   4163      enddo
   4164   enddo
   4165 
   4166 
   4167 !--- send the data
   4168   buffer_pos = 0
   4169   istart = 1
   4170   do p = 1, comm%nsend
   4171      send => comm%send(p)
   4172      msgsize = send%count*lsize
   4173      pos = buffer_pos
   4174      istart = send%buffer_pos+1

Page 130         Source Listing                  GET_1_FROM_XGRID
2021-06-01 08:56                                 xgrid.F90

   4175      iend = istart + send%count - 1
   4176      do l = 1, lsize
   4177         do n = istart, iend
   4178            pos = pos + 1
   4179            send_buffer(pos) = dg(n,l)
   4180         enddo
   4181      enddo
   4182      call mpp_send(send_buffer(buffer_pos+1), plen=msgsize, to_pe = send%pe, tag=COMM_TAG_9 )
   4183      buffer_pos = buffer_pos + msgsize
   4184      istart = iend + 1
   4185   enddo
   4186 
   4187   call mpp_sync_self(check=EVENT_RECV)
   4188 
   4189 !--- unpack the buffer
   4190   do l = 1, lsize
   4191      ptr_d = d_addrs(l)
   4192      d = 0.0
   4193   enddo
   4194 !--- To bitwise reproduce old results, first copy the data onto its own pe.
   4195 
   4196   do p = 1, comm%nrecv
   4197      recv => comm%recv(p)
   4198      count = recv%count
   4199      buffer_pos = recv%buffer_pos*lsize
   4200      if( recv%pe == xmap%me ) then
   4201 !$OMP parallel do default(none) shared(lsize,recv,recv_buffer,buffer_pos,d_addrs,count) &
   4202 !$OMP                          private(ptr_d,i,j,pos)
   4203         do l = 1, lsize
   4204            pos = buffer_pos + (l-1)*count
   4205            ptr_d = d_addrs(l)
   4206            do n = 1,count
   4207               i = recv%i(n)
   4208               j = recv%j(n)
   4209               pos = pos + 1
   4210               d(i,j) = recv_buffer(pos)
   4211            enddo
   4212         enddo
   4213         exit
   4214      endif
   4215   enddo
   4216 
   4217   pos = 0
   4218   do m = 1, comm%nrecv
   4219      p = comm%unpack_ind(m)
   4220      recv => comm%recv(p)
   4221      if( recv%pe == xmap%me ) then
   4222         cycle
   4223      endif
   4224      buffer_pos = recv%buffer_pos*lsize
   4225 !$OMP parallel do default(none) shared(lsize,recv,recv_buffer,buffer_pos,d_addrs) &
   4226 !$OMP                          private(ptr_d,i,j,pos)
   4227      do l = 1, lsize
   4228         pos = buffer_pos + (l-1)*recv%count
   4229         ptr_d = d_addrs(l)
   4230         do n = 1, recv%count
   4231            i = recv%i(n)

Page 131         Source Listing                  GET_1_FROM_XGRID
2021-06-01 08:56                                 xgrid.F90

   4232            j = recv%j(n)
   4233            pos = pos + 1
   4234            d(i,j) = d(i,j) + recv_buffer(pos)
   4235         enddo
   4236      enddo
   4237   enddo
   4238 
   4239 !
   4240 ! normalize with side 1 grid cell areas
   4241 !
   4242 !$OMP parallel do default(none) shared(lsize,d_addrs,grid1) private(ptr_d)
   4243   do l = 1, lsize
   4244      ptr_d = d_addrs(l)
   4245      d = d * grid1%area_inv
   4246   enddo
   4247   call mpp_sync_self()
   4248   call mpp_clock_end(id_get_1_from_xgrid)
   4249 
   4250 end subroutine get_1_from_xgrid


ENTRY POINTS

  Name                                      
                                            
 xgrid_mod_mp_get_1_from_xgrid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BUFFER_POS                 Local  4129     I(4)            4           scalar                    4152,4153,4168,4173,4182,4183,4199
                                                                                                  ,4201,4204,4224,4225,4228         
 COMM                       Local  4133     COMM_TYPE       232         scalar   PTR,SAVE         4133,4146,4149,4150,4170,4171,4196
                                                                                                  ,4197,4218,4219,4220              
 COMM_TAG_9                 Param  4153     I(4)            4           scalar   PRIV             249,4153,4182,5481,5510           
 COUNT                      Local  4130     I(4)            4           scalar                    4198,4201,4204,4206               
 D                          Local  4139     R(8)            8     2     0                         4192,4210,4234,4245               
 DG                         Local  4127     R(8)            8     2     0        TGT              4156,4157,4161,4179               
 DGP                        Local  4131     R(8)            8           scalar   PTR,SAVE         4131,4157,4161,4162               
 D_ADDRS                    Dummy  4121     I(8)            8     1     1        ARG,IN           4191,4201,4205,4225,4229,4242,4244
 GET_1_FROM_XGRID           Subr   4121                                                           3635                              
 GRID1                      Local  4132     GRID_TYPE       4888        scalar   PTR,SAVE         4132,4147,4242,4245               
 I                          Local  4128     I(4)            4           scalar                    4160,4161,4162,4202,4207,4210,4226
                                                                                                  ,4231,4234                        
 IEND                       Local  4130     I(4)            4           scalar                    4175,4177,4184                    
 ISIZE                      Dummy  4121     I(4)            4           scalar   ARG,IN           4139                              
 ISTART                     Local  4130     I(4)            4           scalar                    4169,4174,4175,4177,4184          
 J                          Local  4128     I(4)            4           scalar                    4202,4208,4210,4226,4232,4234     
 JSIZE                      Dummy  4121     I(4)            4           scalar   ARG,IN           4139                              
 L                          Local  4128     I(4)            4           scalar                    4158,4159,4161,4176,4179,4190,4191
                                                                                                  ,4203,4204,4205,4227,4228,4229,424
                                                                                                  3,4244                            
 LSIZE                      Dummy  4121     I(4)            4           scalar   ARG,IN           4127,4136,4137,4151,4152,4157,4158
                                                                                                  ,4172,4176,4190,4199,4201,4203,422
                                                                                                  4,4225,4227,4242,4243             

Page 132         Source Listing                  GET_1_FROM_XGRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 M                          Local  4128     I(4)            4           scalar                    4218,4219                         
 MSGSIZE                    Local  4129     I(4)            4           scalar                    4151,4153,4172,4182,4183          
 N                          Local  4128     I(4)            4           scalar                    4177,4179,4206,4207,4208,4230,4231
                                                                                                  ,4232                             
 OVERLAP_TYPE               Type   4134                     520         scalar   PRIV             570,576,577,4134,4135,4264,4265,54
                                                                                                  62,5463,5590,5591                 
 P                          Local  4128     I(4)            4           scalar                    4149,4150,4170,4171,4196,4197,4219
                                                                                                  ,4220                             
 POS                        Local  4129     I(4)            4           scalar                    4173,4178,4179,4202,4204,4209,4210
                                                                                                  ,4217,4226,4228,4233,4234         
 PTR_D                      Local  4141     I(8)            8           scalar   PTR              4191,4202,4205,4226,4229,4242,4244
 PTR_X                      Local  4142     I(8)            8           scalar   PTR              4157,4159                         
 RECV                       Local  4135     OVERLAP_TYPE    520         scalar   PTR,SAVE         4135,4150,4151,4152,4153,4197,4198
                                                                                                  ,4199,4200,4201,4207,4208,4220,422
                                                                                                  1,4224,4225,4228,4230,4231,4232   
 RECV_BUFFER                Local  4136     R(8)            8     1     0                         4153,4201,4210,4225,4234          
 SEND                       Local  4134     OVERLAP_TYPE    520         scalar   PTR,SAVE         4134,4171,4172,4174,4175,4182     
 SEND_BUFFER                Local  4137     R(8)            8     1     0                         4179,4182                         
 UNPACK_BUFFER              Local  4138     R(8)            8     1     0                                                           
 X                          Local  4140     R(8)            8     1     0                         4162                              
 XMAP                       Dummy  4121     XMAP_TYPE       928         scalar   ARG,INOUT        4127,4136,4137,4138,4146,4147,4157
                                                                                                  ,4160,4161,4162,4200,4221         
 XSIZE                      Dummy  4121     I(4)            4           scalar   ARG,IN           4140                              
 X_ADDRS                    Dummy  4121     I(8)            8     1     1        ARG,IN           4157,4159                         

Page 133         Source Listing                  GET_1_FROM_XGRID
2021-06-01 08:56                                 xgrid.F90

   4251 
   4252 !#######################################################################
   4253 
   4254 subroutine get_1_from_xgrid_repro(d_addrs, x_addrs, xmap, xsize, lsize)
   4255   integer(8), dimension(:), intent(in) :: d_addrs
   4256   integer(8), dimension(:), intent(in) :: x_addrs
   4257   type (xmap_type),              intent(inout) :: xmap
   4258   integer,                          intent(in) :: xsize, lsize
   4259 
   4260   integer                            :: g, i, j, k, p, l, n, l2, m, l3
   4261   integer                            :: msgsize, buffer_pos, pos
   4262   type (grid_type), pointer, save :: grid =>NULL()
   4263   type(comm_type),  pointer, save :: comm => NULL()
   4264   type(overlap_type), pointer, save  :: send => NULL()
   4265   type(overlap_type), pointer, save  :: recv => NULL()
   4266     integer,  dimension(0:xmap%npes-1) :: pl, ml
   4267   real                               :: recv_buffer(xmap%recv_count_repro_tot*lsize)
   4268   real                               :: send_buffer(xmap%send_count_repro_tot*lsize)
   4269   real                               :: d(xmap%grids(1)%is_me:xmap%grids(1)%ie_me, &
   4270                                           xmap%grids(1)%js_me:xmap%grids(1)%je_me)
   4271   real, dimension(xsize)             :: x
   4272   pointer(ptr_d, d)
   4273   pointer(ptr_x, x)
   4274 
   4275   call mpp_clock_begin(id_get_1_from_xgrid_repro)
   4276   comm => xmap%get1_repro
   4277 !--- pre-post receiving
   4278   do p = 1, comm%nrecv
   4279      recv => comm%recv(p)
   4280      msgsize = recv%count*lsize
   4281      buffer_pos = recv%buffer_pos*lsize
   4282      call mpp_recv(recv_buffer(buffer_pos+1), glen=msgsize, from_pe = recv%pe, block=.false., tag=COMM_TAG_10)
   4283      n = recv%pe -xmap%root_pe
   4284      pl(n) = buffer_pos
   4285      ml(n) = recv%count
   4286   enddo
   4287 
   4288 !pack the data
   4289   send_buffer(:) = 0.0
   4290 !$OMP parallel do default(none) shared(lsize,x_addrs,comm,xmap,send_buffer) &
   4291 !$OMP                          private(ptr_x,i,j,g,l2,pos,send)
   4292   do p = 1, comm%nsend
   4293      pos = comm%send(p)%buffer_pos*lsize
   4294      send => comm%send(p)
   4295      do l = 1,lsize
   4296         ptr_x = x_addrs(l)
   4297         do n = 1, send%count
   4298            i = send%i(n)
   4299            j = send%j(n)
   4300            g = send%g(n)
   4301            l2 = send%xloc(n)
   4302            pos = pos + 1
   4303            do k =1, xmap%grids(g)%km
   4304              if(xmap%grids(g)%frac_area(i,j,k)/=0.0) then
   4305               l2 = l2+1
   4306               send_buffer(pos) = send_buffer(pos) + xmap%x1(l2)%area *x(l2)
   4307              endif

Page 134         Source Listing                  GET_1_FROM_XGRID_REPRO
2021-06-01 08:56                                 xgrid.F90

   4308            enddo
   4309          enddo
   4310       enddo
   4311    enddo
   4312 
   4313   do p =1, comm%nsend
   4314      buffer_pos = comm%send(p)%buffer_pos*lsize
   4315      msgsize = comm%send(p)%count*lsize
   4316      call mpp_send(send_buffer(buffer_pos+1), plen=msgsize, to_pe=comm%send(p)%pe, tag=COMM_TAG_10)
   4317   enddo
   4318 
   4319   do l = 1, lsize
   4320      ptr_d = d_addrs(l)
   4321      d = 0
   4322   enddo
   4323 
   4324   call mpp_sync_self(check=EVENT_RECV)
   4325 
   4326 !$OMP parallel do default(none) shared(lsize,d_addrs,xmap,recv_buffer,pl,ml) &
   4327 !$OMP                          private(ptr_d,grid,i,j,p,pos)
   4328   do l = 1, lsize
   4329      ptr_d = d_addrs(l)
   4330      do g=2,size(xmap%grids(:))
   4331         grid => xmap%grids(g)
   4332         do l3=1,grid%size_repro ! index into side1 grid's patterns
   4333            i = grid%x_repro(l3)%i1
   4334            j = grid%x_repro(l3)%j1
   4335            p = grid%x_repro(l3)%pe-xmap%root_pe
   4336            pos = pl(p) + (l-1)*ml(p) + grid%x_repro(l3)%recv_pos
   4337            d(i,j) = d(i,j) + recv_buffer(pos)
   4338         end do
   4339      end do
   4340 ! normalize with side 1 grid cell areas
   4341      d = d * xmap%grids(1)%area_inv
   4342   enddo
   4343 
   4344   call mpp_sync_self()
   4345 
   4346   call mpp_clock_end(id_get_1_from_xgrid_repro)
   4347 
   4348 end subroutine get_1_from_xgrid_repro

Page 135         Source Listing                  GET_1_FROM_XGRID_REPRO
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                            
                                                  
 xgrid_mod_mp_get_1_from_xgrid_repro_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BUFFER_POS                 Local  4261     I(4)            4           scalar                    4281,4282,4284,4314,4316          
 COMM                       Local  4263     COMM_TYPE       232         scalar   PTR,SAVE         4263,4276,4278,4279,4290,4292,4293
                                                                                                  ,4294,4313,4314,4315,4316         
 COMM_TAG_10                Param  4282     I(4)            4           scalar   PRIV             249,4282,4316,5607,5641           
 D                          Local  4269     R(8)            8     2     0                         4321,4337,4341                    
 D_ADDRS                    Dummy  4254     I(8)            8     1     1        ARG,IN           4320,4326,4329                    
 G                          Local  4260     I(4)            4           scalar                    4291,4300,4303,4304,4330,4331     
 GET_1_FROM_XGRID_REPRO     Subr   4254                                                           3633                              
 GRID                       Local  4262     GRID_TYPE       4888        scalar   PTR,SAVE         4262,4327,4331,4332,4333,4334,4335
                                                                                                  ,4336                             
 I                          Local  4260     I(4)            4           scalar                    4291,4298,4304,4327,4333,4337     
 J                          Local  4260     I(4)            4           scalar                    4291,4299,4304,4327,4334,4337     
 K                          Local  4260     I(4)            4           scalar                    4303,4304                         
 L                          Local  4260     I(4)            4           scalar                    4295,4296,4319,4320,4328,4329,4336
 L2                         Local  4260     I(4)            4           scalar                    4291,4301,4305,4306               
 L3                         Local  4260     I(4)            4           scalar                    4332,4333,4334,4335,4336          
 LSIZE                      Dummy  4254     I(4)            4           scalar   ARG,IN           4267,4268,4280,4281,4290,4293,4295
                                                                                                  ,4314,4315,4319,4326,4328         
 M                          Local  4260     I(4)            4           scalar                                                      
 ML                         Local  4266     I(4)            4     1     0                         4285,4326,4336                    
 MSGSIZE                    Local  4261     I(4)            4           scalar                    4280,4282,4315,4316               
 N                          Local  4260     I(4)            4           scalar                    4283,4284,4285,4297,4298,4299,4300
                                                                                                  ,4301                             
 P                          Local  4260     I(4)            4           scalar                    4278,4279,4292,4293,4294,4313,4314
                                                                                                  ,4315,4316,4327,4335,4336         
 PL                         Local  4266     I(4)            4     1     0                         4284,4326,4336                    
 POS                        Local  4261     I(4)            4           scalar                    4291,4293,4302,4306,4327,4336,4337
 PTR_D                      Local  4272     I(8)            8           scalar   PTR              4320,4327,4329                    
 PTR_X                      Local  4273     I(8)            8           scalar   PTR              4291,4296                         
 RECV                       Local  4265     OVERLAP_TYPE    520         scalar   PTR,SAVE         4265,4279,4280,4281,4282,4283,4285
 RECV_BUFFER                Local  4267     R(8)            8     1     0                         4282,4326,4337                    
 SEND                       Local  4264     OVERLAP_TYPE    520         scalar   PTR,SAVE         4264,4291,4294,4297,4298,4299,4300
                                                                                                  ,4301                             
 SEND_BUFFER                Local  4268     R(8)            8     1     0                         4289,4290,4306,4316               
 SIZE                       Func   4330                                 scalar                    4330                              
 X                          Local  4271     R(8)            8     1     0                         4306                              
 XMAP                       Dummy  4254     XMAP_TYPE       928         scalar   ARG,INOUT        4267,4268,4269,4270,4276,4283,4290
                                                                                                  ,4303,4304,4306,4326,4330,4331,433
                                                                                                  5,4341                            
 XSIZE                      Dummy  4254     I(4)            4           scalar   ARG,IN           4271                              
 X_ADDRS                    Dummy  4254     I(8)            8     1     1        ARG,IN           4290,4296                         

Page 136         Source Listing                  GET_1_FROM_XGRID_REPRO
2021-06-01 08:56                                 xgrid.F90

   4349 
   4350 !#######################################################################
   4351 
   4352 ! <FUNCTION NAME="conservation_check_side1" INTERFACE="conservation_check">
   4353 !   <IN NAME="d"  TYPE="real" DIM="(:,:)" > </IN>
   4354 !   <IN NAME="grid_id"  TYPE="character(len=3)"  > </IN>
   4355 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   4356 !   <OUT NAME="conservation_check_side1" TYPE="real" DIM="dimension(3)" > </OUT>
   4357 !   <IN NAME="remap_method" TYPE="integer,optional"></IN>
   4358 !> @brief conservation_check - returns three numbers which are the global sum of a
   4359 !!   variable (1) on its home model grid, (2) after interpolation to the other
   4360 !!   side grid(s), and (3) after re_interpolation back onto its home side grid(s).
   4361 !! @return real conservation_check_side1
   4362 function conservation_check_side1(d, grid_id, xmap,remap_method) ! this one for 1->2->1
   4363 real, dimension(:,:),    intent(in   ) :: d
   4364 character(len=3),        intent(in   ) :: grid_id
   4365 type (xmap_type),        intent(inout) :: xmap
   4366 real, dimension(3)                     :: conservation_check_side1
   4367 integer, intent(in), optional :: remap_method
   4368 
   4369 
   4370   real, dimension(xmap%size) :: x_over, x_back
   4371   real, dimension(size(d,1),size(d,2)) :: d1
   4372   real, dimension(:,:,:), allocatable  :: d2
   4373   integer                              :: g
   4374   type (grid_type), pointer, save      :: grid1 =>NULL(), grid2 =>NULL()
   4375 
   4376   grid1 => xmap%grids(1)
   4377   conservation_check_side1 = 0.0
   4378   if(grid1%tile_me .NE. tile_nest) conservation_check_side1(1) = sum(grid1%area*d)
   4379 !  if(grid1%tile_me .NE. tile_parent .OR. grid1%id .NE. "ATM") &
   4380 !      conservation_check_side1(1) = sum(grid1%area*d)
   4381 
   4382   call put_to_xgrid (d, grid1%id, x_over, xmap, remap_method)    ! put from side 1
   4383   do g=2,size(xmap%grids(:))
   4384     grid2 => xmap%grids(g)
   4385     if(grid2%on_this_pe) then
   4386       allocate (d2 (grid2%is_me:grid2%ie_me, grid2%js_me:grid2%je_me,  grid2%km) )
   4387     endif
   4388     call get_from_xgrid (d2, grid2%id, x_over, xmap) ! get onto side 2's
   4389     if(grid2%on_this_pe) then
   4390        conservation_check_side1(2) = conservation_check_side1(2) + sum( grid2%area * sum(grid2%frac_area*d2,DIM=3) )
   4391     endif
   4392     call put_to_xgrid (d2, grid2%id, x_back, xmap) ! put from side 2's
   4393     if(allocated(d2))deallocate (d2)
   4394   end do
   4395   call get_from_xgrid(d1, grid1%id, x_back, xmap)  ! get onto side 1
   4396   if(grid1%tile_me .NE. tile_nest) conservation_check_side1(3) = sum(grid1%area*d1)
   4397 !  if(grid1%tile_me .NE. tile_parent .OR. grid1%id .NE. "ATM") &
   4398 !     conservation_check_side1(3) = sum(grid1%area*d1)
   4399   call mpp_sum(conservation_check_side1,3)
   4400 
   4401 end function conservation_check_side1

Page 137         Source Listing                  CONSERVATION_CHECK_SIDE1
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                              
                                                    
 xgrid_mod_mp_conservation_check_side1_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   4393                                 scalar                    4393                              
 CONSERVATION_CHECK_SIDE1   Func   4362     R(8)            8     1     3        PRIV             2258,2290,4377,4378,4390,4396,4399
                                                                                                  ,7113,7145                        
 D                          Dummy  4362     R(8)            8     2     1        ARG,IN           4371,4378,4382                    
 D1                         Local  4371     R(8)            8     2     0                         4395,4396                         
 D2                         Local  4372     R(8)            8     3     1        ALC              4386,4388,4390,4392,4393          
 G                          Local  4373     I(4)            4           scalar                    4383,4384                         
 GET_FROM_XGRID             Local  4388                                 scalar                    294,4388,4395,4449,4461,4533,4545,
                                                                                                  4617,4637                         
 GRID1                      Local  4374     GRID_TYPE       4888        scalar   PTR,SAVE         4374,4376,4378,4382,4395,4396     
 GRID2                      Local  4374     GRID_TYPE       4888        scalar   PTR,SAVE         4374,4384,4385,4386,4388,4389,4390
                                                                                                  ,4392                             
 GRID_ID                    Dummy  4362     CHAR            3           scalar   ARG,IN                                             
 MPP_SUM                    Local  4399                                 scalar   PRIV             250,4399,4465,4549,4642           
 MPP_SUM_REAL8              Subr   4399                                          PRIV             4399,4465,4549,4642               
 PUT_TO_XGRID               Local  4382                                 scalar                    294,4382,4392,4442,4444,4451,4513,
                                                                                                  4537,4601,4608,4623               
 REMAP_METHOD               Dummy  4362     I(4)            4           scalar   ARG,IN           4382                              
 SIZE                       Func   4371                                 scalar                    4371,4383                         
 SUM                        Func   4378                                 scalar                    4378,4390,4396                    
 XMAP                       Dummy  4362     XMAP_TYPE       928         scalar   ARG,INOUT        4376,4382,4383,4384,4388,4392,4395
 X_BACK                     Local  4370     R(8)            8     1     0                         4392,4395                         
 X_OVER                     Local  4370     R(8)            8     1     0                         4382,4388                         

Page 138         Source Listing                  CONSERVATION_CHECK_SIDE1
2021-06-01 08:56                                 xgrid.F90

   4402 ! </FUNCTION>
   4403 
   4404 !#######################################################################
   4405 !
   4406 ! conservation_check - returns three numbers which are the global sum of a
   4407 ! variable (1) on its home model grid, (2) after interpolation to the other
   4408 ! side grid(s), and (3) after re_interpolation back onto its home side grid(s).
   4409 !
   4410 ! <FUNCTION NAME="conservation_check_side2" INTERFACE="conservation_check">
   4411 !   <IN NAME="d"  TYPE="real" DIM="(:,:,:)" > </IN>
   4412 !   <IN NAME="grid_id"  TYPE="character(len=3)"  > </IN>
   4413 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   4414 !   <OUT NAME="conservation_check_side2" TYPE="real" DIM="dimension(3)" > </OUT>
   4415 
   4416 !> @brief conservation_check - returns three numbers which are the global sum of a
   4417 !!   variable (1) on its home model grid, (2) after interpolation to the other
   4418 !!   side grid(s), and (3) after re_interpolation back onto its home side grid(s).
   4419 !! @return real conservation_check_side2
   4420 function conservation_check_side2(d, grid_id, xmap,remap_method) ! this one for 2->1->2
   4421 real, dimension(:,:,:), intent(in   )  :: d
   4422 character(len=3),       intent(in   )  :: grid_id
   4423 type (xmap_type),       intent(inout)  :: xmap
   4424 real, dimension(3)                     :: conservation_check_side2
   4425 integer, intent(in), optional :: remap_method
   4426 
   4427 
   4428   real, dimension(xmap%size) :: x_over, x_back
   4429   real, dimension(:,:  ), allocatable :: d1
   4430   real, dimension(:,:,:), allocatable :: d2
   4431   integer                             :: g
   4432   type (grid_type), pointer, save     :: grid1 =>NULL(), grid2 =>NULL()
   4433 
   4434   grid1 => xmap%grids(1)
   4435   conservation_check_side2 = 0.0
   4436   do g = 2,size(xmap%grids(:))
   4437     grid2 => xmap%grids(g)
   4438     if (grid_id==grid2%id) then
   4439       if(grid2%on_this_pe) then
   4440          conservation_check_side2(1) = sum( grid2%area * sum(grid2%frac_area*d,DIM=3) )
   4441       endif
   4442       call put_to_xgrid(d, grid_id, x_over, xmap)  ! put from this side 2
   4443     else
   4444       call put_to_xgrid(0.0 * grid2%frac_area, grid2%id, x_over, xmap) ! zero rest
   4445     end if
   4446   end do
   4447 
   4448   allocate ( d1(size(grid1%area,1),size(grid1%area,2)) )
   4449   call get_from_xgrid(d1, grid1%id, x_over, xmap)  ! get onto side 1
   4450   if(grid1%tile_me .NE. tile_nest)conservation_check_side2(2) = sum(grid1%area*d1)
   4451   call put_to_xgrid(d1,  grid1%id, x_back, xmap,remap_method)   ! put from side 1
   4452   deallocate ( d1 )
   4453 
   4454   conservation_check_side2(3) = 0.0;
   4455   do g = 2,size(xmap%grids(:))
   4456     grid2 => xmap%grids(g)
   4457     if(grid2%on_this_pe) then
   4458        allocate ( d2 ( size(grid2%frac_area, 1), size(grid2%frac_area, 2),  &

Page 139         Source Listing                  CONSERVATION_CHECK_SIDE2
2021-06-01 08:56                                 xgrid.F90

   4459                                                  size(grid2%frac_area, 3) ) )
   4460     endif
   4461     call get_from_xgrid(d2,  grid2%id, x_back, xmap) ! get onto side 2's
   4462     conservation_check_side2(3) = conservation_check_side2(3) + sum( grid2%area * sum(grid2%frac_area*d2,DIM=3) )
   4463     if(allocated(d2) )deallocate ( d2 )
   4464   end do
   4465   call mpp_sum(conservation_check_side2, 3)
   4466 
   4467 end function conservation_check_side2


ENTRY POINTS

  Name                                              
                                                    
 xgrid_mod_mp_conservation_check_side2_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   4463                                 scalar                    4463                              
 CONSERVATION_CHECK_SIDE2   Func   4420     R(8)            8     1     3        PRIV             2270,2304,4435,4440,4450,4454,4462
                                                                                                  ,4465,7125,7159                   
 D                          Dummy  4420     R(8)            8     3     1        ARG,IN           4440,4442                         
 D1                         Local  4429     R(8)            8     2     1        ALC              4448,4449,4450,4451,4452          
 D2                         Local  4430     R(8)            8     3     1        ALC              4458,4461,4462,4463               
 G                          Local  4431     I(4)            4           scalar                    4436,4437,4455,4456               
 GRID1                      Local  4432     GRID_TYPE       4888        scalar   PTR,SAVE         4432,4434,4448,4449,4450,4451     
 GRID2                      Local  4432     GRID_TYPE       4888        scalar   PTR,SAVE         4432,4437,4438,4439,4440,4444,4456
                                                                                                  ,4457,4458,4459,4461,4462         
 GRID_ID                    Dummy  4420     CHAR            3           scalar   ARG,IN           4438,4442                         
 REMAP_METHOD               Dummy  4420     I(4)            4           scalar   ARG,IN           4451                              
 SIZE                       Func   4436                                 scalar                    4436,4448,4455,4458,4459          
 SUM                        Func   4440                                 scalar                    4440,4450,4462                    
 XMAP                       Dummy  4420     XMAP_TYPE       928         scalar   ARG,INOUT        4434,4436,4437,4442,4444,4449,4451
                                                                                                  ,4455,4456,4461                   
 X_BACK                     Local  4428     R(8)            8     1     0                         4451,4461                         
 X_OVER                     Local  4428     R(8)            8     1     0                         4442,4444,4449                    

Page 140         Source Listing                  CONSERVATION_CHECK_SIDE2
2021-06-01 08:56                                 xgrid.F90

   4468 ! </FUNCTION>
   4469 
   4470 !#######################################################################
   4471 
   4472 ! <FUNCTION NAME="conservation_check_ug_side1" INTERFACE="conservation_check_ug">
   4473 !   <IN NAME="d"  TYPE="real" DIM="(:,:)" > </IN>
   4474 !   <IN NAME="grid_id"  TYPE="character(len=3)"  > </IN>
   4475 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   4476 !   <OUT NAME="conservation_check_ug_side1" TYPE="real" DIM="dimension(3)" > </OUT>
   4477 !   <IN NAME="remap_method" TYPE="integer,optional"></IN>
   4478 ! conservation_check_ug - returns three numbers which are the global sum of a
   4479 ! variable (1) on its home model grid, (2) after interpolation to the other
   4480 ! side grid(s), and (3) after re_interpolation back onto its home side grid(s).
   4481 !
   4482 !> @brief conservation_check_ug - returns three numbers which are the global sum of a
   4483 !!   variable (1) on its home model grid, (2) after interpolation to the other
   4484 !!   side grid(s), and (3) after re_interpolation back onto its home side grid(s).
   4485 !! @return real conservation_check_ug_side1
   4486 function conservation_check_ug_side1(d, grid_id, xmap,remap_method) ! this one for 1->2->1
   4487 real, dimension(:,:),    intent(in   ) :: d
   4488 character(len=3),        intent(in   ) :: grid_id
   4489 type (xmap_type),        intent(inout) :: xmap
   4490 real, dimension(3)                     :: conservation_check_ug_side1
   4491 integer, intent(in), optional :: remap_method
   4492 
   4493 
   4494   real, dimension(xmap%size) :: x_over, x_back
   4495   real, dimension(size(d,1),size(d,2)) :: d1
   4496   real, dimension(:,:,:), allocatable  :: d2
   4497   real, dimension(:    ), allocatable  :: d_ug
   4498   real, dimension(:,:),   allocatable  :: d2_ug
   4499   integer                              :: g
   4500   type (grid_type), pointer, save      :: grid1 =>NULL(), grid2 =>NULL()
   4501 
   4502   grid1 => xmap%grids(1)
   4503   conservation_check_ug_side1 = 0.0
   4504 
   4505 
   4506   if(grid1%is_ug) then
   4507      allocate(d_ug(grid1%ls_me:grid1%le_me))
   4508      call mpp_pass_sg_to_ug(grid1%ug_domain, d, d_ug)
   4509        if(grid1%tile_me .NE. tile_nest) conservation_check_ug_side1(1) = sum(grid1%area(:,1)*d_ug)
   4510      call put_to_xgrid_ug (d_ug, grid1%id, x_over, xmap)    ! put from side 1
   4511   else
   4512      if(grid1%tile_me .NE. tile_nest) conservation_check_ug_side1(1) = sum(grid1%area*d)
   4513      call put_to_xgrid (d, grid1%id, x_over, xmap, remap_method)    ! put from side 1
   4514   endif
   4515   do g=2,size(xmap%grids(:))
   4516     grid2 => xmap%grids(g)
   4517     if(grid2%is_ug) then
   4518       if(grid2%on_this_pe) then
   4519          allocate (d2_ug (grid2%ls_me:grid2%le_me, grid2%km) )
   4520          d2_ug = 0
   4521       endif
   4522       call get_from_xgrid_ug (d2_ug, grid2%id, x_over, xmap) ! get onto side 2's
   4523       if(grid2%on_this_pe) then
   4524          conservation_check_ug_side1(2) = conservation_check_ug_side1(2) + &

Page 141         Source Listing                  CONSERVATION_CHECK_UG_SIDE1
2021-06-01 08:56                                 xgrid.F90

   4525                                           sum( grid2%area(:,1) * sum(grid2%frac_area(:,1,:)*d2_ug,DIM=2) )
   4526       endif
   4527       call put_to_xgrid_ug (d2_ug, grid2%id, x_back, xmap) ! put from side 2's
   4528       if(allocated(d2_ug))deallocate (d2_ug)
   4529     else
   4530        if(grid2%on_this_pe) then
   4531           allocate (d2 (grid2%is_me:grid2%ie_me, grid2%js_me:grid2%je_me,  grid2%km) )
   4532        endif
   4533        call get_from_xgrid (d2, grid2%id, x_over, xmap) ! get onto side 2's
   4534        if(grid2%on_this_pe) then
   4535           conservation_check_ug_side1(2) = conservation_check_ug_side1(2) + sum( grid2%area * sum(grid2%frac_area*d2,DIM=3) 
   4535 )
   4536        endif
   4537        call put_to_xgrid (d2, grid2%id, x_back, xmap) ! put from side 2's
   4538        if(allocated(d2))deallocate (d2)
   4539      endif
   4540   end do
   4541   if(grid1%is_ug) then
   4542 !     call get_from_xgrid_ug(d_ug, grid1%id, x_back, xmap)  ! get onto side 1
   4543      if(grid1%tile_me .NE. tile_nest) conservation_check_ug_side1(3) = sum(grid1%area(:,1)*d_ug)
   4544   else
   4545      call get_from_xgrid(d1, grid1%id, x_back, xmap)  ! get onto side 1
   4546      if(grid1%tile_me .NE. tile_nest) conservation_check_ug_side1(3) = sum(grid1%area*d1)
   4547   endif
   4548   if(allocated(d_ug)) deallocate(d_ug)
   4549   call mpp_sum(conservation_check_ug_side1,3)
   4550 
   4551 end function conservation_check_ug_side1

Page 142         Source Listing                  CONSERVATION_CHECK_UG_SIDE1
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                                 
                                                       
 xgrid_mod_mp_conservation_check_ug_side1_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   4528                                 scalar                    4528,4538,4548                    
 CONSERVATION_CHECK_UG_SIDE                                                                                                         
 1                          Func   4486     R(8)            8     1     3                         2262,2292,4503,4509,4512,4524,4535
                                                                                                  ,4543,4546,4549,7117,7147         
 D                          Dummy  4486     R(8)            8     2     1        ARG,IN           4495,4508,4512,4513               
 D1                         Local  4495     R(8)            8     2     0                         4545,4546                         
 D2                         Local  4496     R(8)            8     3     1        ALC              4531,4533,4535,4537,4538          
 D2_UG                      Local  4498     R(8)            8     2     1        ALC              4519,4520,4522,4525,4527,4528     
 D_UG                       Local  4497     R(8)            8     1     1        ALC              4507,4508,4509,4510,4543,4548     
 G                          Local  4499     I(4)            4           scalar                    4515,4516                         
 GET_FROM_XGRID_UG          Local  4522                                 scalar                    301,4522,4615,4635                
 GRID1                      Local  4500     GRID_TYPE       4888        scalar   PTR,SAVE         4500,4502,4506,4507,4508,4509,4510
                                                                                                  ,4512,4513,4541,4543,4545,4546    
 GRID2                      Local  4500     GRID_TYPE       4888        scalar   PTR,SAVE         4500,4516,4517,4518,4519,4522,4523
                                                                                                  ,4525,4527,4530,4531,4533,4534,453
                                                                                                  5,4537                            
 GRID_ID                    Dummy  4486     CHAR            3           scalar   ARG,IN                                             
 MPP_PASS_SG_TO_UG          Local  4508                                 scalar   PRIV             263,4508,4592                     
 MPP_PASS_SG_TO_UG_R8_2D    Subr   4508                                          PRIV             4508                              
 PUT_TO_XGRID_UG            Local  4510                                 scalar                    301,4510,4527,4599,4606,4621      
 REMAP_METHOD               Dummy  4486     I(4)            4           scalar   ARG,IN           4513                              
 SIZE                       Func   4495                                 scalar                    4495,4515                         
 SUM                        Func   4509                                 scalar                    4509,4512,4525,4535,4543,4546     
 XMAP                       Dummy  4486     XMAP_TYPE       928         scalar   ARG,INOUT        4502,4510,4513,4515,4516,4522,4527
                                                                                                  ,4533,4537,4545                   
 X_BACK                     Local  4494     R(8)            8     1     0                         4527,4537,4545                    
 X_OVER                     Local  4494     R(8)            8     1     0                         4510,4513,4522,4533               

Page 143         Source Listing                  CONSERVATION_CHECK_UG_SIDE1
2021-06-01 08:56                                 xgrid.F90

   4552 ! </FUNCTION>
   4553 
   4554 !#######################################################################
   4555 !
   4556 ! conservation_check_ug - returns three numbers which are the global sum of a
   4557 ! variable (1) on its home model grid, (2) after interpolation to the other
   4558 ! side grid(s), and (3) after re_interpolation back onto its home side grid(s).
   4559 !
   4560 ! <FUNCTION NAME="conservation_check_ug_side2" INTERFACE="conservation_check_ug">
   4561 !   <IN NAME="d"  TYPE="real" DIM="(:,:,:)" > </IN>
   4562 !   <IN NAME="grid_id"  TYPE="character(len=3)"  > </IN>
   4563 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   4564 !   <OUT NAME="conservation_check_ug_side2" TYPE="real" DIM="dimension(3)" > </OUT>
   4565 
   4566 !> @brief conservation_check_ug - returns three numbers which are the global sum of a
   4567 !!   variable (1) on its home model grid, (2) after interpolation to the other
   4568 !!   side grid(s), and (3) after re_interpolation back onto its home side grid(s).
   4569 !! @return real conservation_check_ug_side2
   4570 function conservation_check_ug_side2(d, grid_id, xmap,remap_method) ! this one for 2->1->2
   4571 real, dimension(:,:,:), intent(in   )  :: d
   4572 character(len=3),       intent(in   )  :: grid_id
   4573 type (xmap_type),       intent(inout)  :: xmap
   4574 real, dimension(3)                     :: conservation_check_ug_side2
   4575 integer, intent(in),   optional :: remap_method
   4576 
   4577 
   4578   real, dimension(xmap%size) :: x_over, x_back
   4579   real, dimension(:,:  ), allocatable :: d1, d_ug
   4580   real, dimension(:,:,:), allocatable :: d2
   4581   integer                             :: g
   4582   type (grid_type), pointer, save     :: grid1 =>NULL(), grid2 =>NULL()
   4583 
   4584   grid1 => xmap%grids(1)
   4585   conservation_check_ug_side2 = 0.0
   4586   do g = 2,size(xmap%grids(:))
   4587     grid2 => xmap%grids(g)
   4588     if (grid_id==grid2%id) then
   4589        if(grid2%on_this_pe) then
   4590           if(grid2%is_ug) then
   4591              allocate(d_ug(grid2%ls_me:grid2%le_me,grid2%km))
   4592              call mpp_pass_sg_to_ug(grid2%ug_domain, d, d_ug)
   4593              conservation_check_ug_side2(1) = sum( grid2%area(:,1) * sum(grid2%frac_area(:,1,:)*d_ug,DIM=2) )
   4594           else
   4595              conservation_check_ug_side2(1) = sum( grid2%area(:,:) * sum(grid2%frac_area(:,:,:)*d,DIM=3) )
   4596           endif
   4597        endif
   4598        if(grid2%is_ug) then
   4599           call put_to_xgrid_ug(d_ug, grid_id, x_over, xmap)  ! put from this side 2
   4600        else
   4601           call put_to_xgrid(d, grid_id, x_over, xmap)  ! put from this side 2
   4602        endif
   4603        if(allocated(d_ug)) deallocate(d_ug)
   4604     else
   4605        if(grid2%is_ug) then
   4606           call put_to_xgrid_ug(0.0 * grid2%frac_area(:,1,:), grid2%id, x_over, xmap) ! zero rest
   4607        else
   4608           call put_to_xgrid(0.0 * grid2%frac_area, grid2%id, x_over, xmap) ! zero rest

Page 144         Source Listing                  CONSERVATION_CHECK_UG_SIDE2
2021-06-01 08:56                                 xgrid.F90

   4609        endif
   4610     end if
   4611   end do
   4612 
   4613   allocate ( d1(size(grid1%area,1),size(grid1%area,2)) )
   4614   if(grid1%is_ug) then
   4615     call get_from_xgrid_ug(d1(:,1), grid1%id, x_over, xmap)  ! get onto side 1
   4616   else
   4617     call get_from_xgrid(d1, grid1%id, x_over, xmap)  ! get onto side 1
   4618   endif
   4619   if(grid1%tile_me .NE. tile_nest)conservation_check_ug_side2(2) = sum(grid1%area*d1)
   4620   if(grid1%is_ug) then
   4621      call put_to_xgrid_ug(d1(:,1), grid1%id, x_back, xmap)   ! put from side 1
   4622   else
   4623      call put_to_xgrid(d1,  grid1%id, x_back, xmap,remap_method)   ! put from side 1
   4624   endif
   4625   deallocate ( d1 )
   4626 
   4627   conservation_check_ug_side2(3) = 0.0;
   4628   do g = 2,size(xmap%grids(:))
   4629     grid2 => xmap%grids(g)
   4630     if(grid2%on_this_pe) then
   4631        allocate ( d2 ( size(grid2%frac_area, 1), size(grid2%frac_area, 2),  &
   4632                                                  size(grid2%frac_area, 3) ) )
   4633     endif
   4634     if(grid2%is_ug) then
   4635        call get_from_xgrid_ug(d2(:,1,:),  grid2%id, x_back, xmap) ! get onto side 2's
   4636     else
   4637        call get_from_xgrid(d2,  grid2%id, x_back, xmap) ! get onto side 2's
   4638     endif
   4639     conservation_check_ug_side2(3) = conservation_check_ug_side2(3) + sum( grid2%area * sum(grid2%frac_area*d2,DIM=3) )
   4640     if(allocated(d2) )deallocate ( d2 )
   4641   end do
   4642   call mpp_sum(conservation_check_ug_side2, 3)
   4643 
   4644 end function conservation_check_ug_side2

Page 145         Source Listing                  CONSERVATION_CHECK_UG_SIDE2
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                                 
                                                       
 xgrid_mod_mp_conservation_check_ug_side2_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   4603                                 scalar                    4603,4640                         
 CONSERVATION_CHECK_UG_SIDE                                                                                                         
 2                          Func   4570     R(8)            8     1     3                         2278,2306,4585,4593,4595,4619,4627
                                                                                                  ,4639,4642,7133,7161              
 D                          Dummy  4570     R(8)            8     3     1        ARG,IN           4592,4595,4601                    
 D1                         Local  4579     R(8)            8     2     1        ALC              4613,4615,4617,4619,4621,4623,4625
 D2                         Local  4580     R(8)            8     3     1        ALC              4631,4635,4637,4639,4640          
 D_UG                       Local  4579     R(8)            8     2     1        ALC              4591,4592,4593,4599,4603          
 G                          Local  4581     I(4)            4           scalar                    4586,4587,4628,4629               
 GRID1                      Local  4582     GRID_TYPE       4888        scalar   PTR,SAVE         4582,4584,4613,4614,4615,4617,4619
                                                                                                  ,4620,4621,4623                   
 GRID2                      Local  4582     GRID_TYPE       4888        scalar   PTR,SAVE         4582,4587,4588,4589,4590,4591,4592
                                                                                                  ,4593,4595,4598,4605,4606,4608,462
                                                                                                  9,4630,4631,4632,4634,4635,4637,46
                                                                                                  39                                
 GRID_ID                    Dummy  4570     CHAR            3           scalar   ARG,IN           4588,4599,4601                    
 MPP_PASS_SG_TO_UG_R8_3D    Subr   4592                                          PRIV             4592                              
 REMAP_METHOD               Dummy  4570     I(4)            4           scalar   ARG,IN           4623                              
 SIZE                       Func   4586                                 scalar                    4586,4613,4628,4631,4632          
 SUM                        Func   4593                                 scalar                    4593,4595,4619,4639               
 XMAP                       Dummy  4570     XMAP_TYPE       928         scalar   ARG,INOUT        4584,4586,4587,4599,4601,4606,4608
                                                                                                  ,4615,4617,4621,4623,4628,4629,463
                                                                                                  5,4637                            
 X_BACK                     Local  4578     R(8)            8     1     0                         4621,4623,4635,4637               
 X_OVER                     Local  4578     R(8)            8     1     0                         4599,4601,4606,4608,4615,4617     

Page 146         Source Listing                  CONSERVATION_CHECK_UG_SIDE2
2021-06-01 08:56                                 xgrid.F90

   4645 ! </FUNCTION>
   4646 
   4647 
   4648 !******************************************************************************
   4649 !> @brief This routine is used to get the grid area of component model with id.
   4650 subroutine get_xmap_grid_area(id, xmap, area)
   4651   character(len=3),     intent(in   ) :: id
   4652   type (xmap_type),     intent(inout) :: xmap
   4653   real, dimension(:,:), intent(out  ) :: area
   4654   integer                             :: g
   4655   logical                             :: found
   4656 
   4657    found = .false.
   4658    do g = 1, size(xmap%grids(:))
   4659       if (id==xmap%grids(g)%id ) then
   4660          if(size(area,1) .NE. size(xmap%grids(g)%area,1) .OR. size(area,2) .NE. size(xmap%grids(g)%area,2) ) &
   4661            call error_mesg("xgrid_mod", "size mismatch between area and xmap%grids(g)%area", FATAL)
   4662          area = xmap%grids(g)%area
   4663          found = .true.
   4664          exit
   4665       end if
   4666    end do
   4667 
   4668    if(.not. found) call error_mesg("xgrid_mod", id//" is not found in xmap%grids id", FATAL)
   4669 
   4670 end subroutine get_xmap_grid_area


ENTRY POINTS

  Name                                        
                                              
 xgrid_mod_mp_get_xmap_grid_area_             

Page 147         Source Listing                  GET_XMAP_GRID_AREA
2021-06-01 08:56 Symbol Table                    xgrid.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AREA                       Dummy  4650     R(8)            8     2     1        ARG,OUT          4660,4662                         
 FOUND                      Local  4655     L(4)            4           scalar                    4657,4663,4668                    
 G                          Local  4654     I(4)            4           scalar                    4658,4659,4660,4662               
 GET_XMAP_GRID_AREA         Subr   4650                                                                                             
 ID                         Dummy  4650     CHAR            3           scalar   ARG,IN           4659,4668                         
 SIZE                       Func   4658                                 scalar                    4658,4660                         
 XMAP                       Dummy  4650     XMAP_TYPE       928         scalar   ARG,INOUT        4658,4659,4660,4662               

Page 148         Source Listing                  GET_XMAP_GRID_AREA
2021-06-01 08:56                                 xgrid.F90

   4671 
   4672 !#######################################################################
   4673 
   4674 !> @brief This function is used to calculate the gradient along zonal direction.
   4675 !!   Maybe need to setup a limit for the gradient. The grid is assumeed
   4676 !!   to be regular lat-lon grid
   4677 !! @return real grad_zonal_latlon
   4678 function grad_zonal_latlon(d, lon, lat, is, ie, js, je, isd, jsd)
   4679 
   4680   integer,                    intent(in) :: isd, jsd
   4681   real, dimension(isd:,jsd:), intent(in) :: d
   4682   real, dimension(:),         intent(in) :: lon
   4683   real, dimension(:),         intent(in) :: lat
   4684   integer,                    intent(in) :: is, ie, js, je
   4685   real, dimension(is:ie,js:je)           :: grad_zonal_latlon
   4686   real                                   :: dx, costheta
   4687   integer                                :: i, j, ip1, im1
   4688 
   4689 !  calculate the gradient of the data on each grid
   4690   do i = is, ie
   4691      if(i == 1) then
   4692         ip1 = i+1; im1 = i
   4693      else if(i==size(lon(:)) ) then
   4694         ip1 = i; im1 = i-1
   4695      else
   4696         ip1 = i+1; im1 = i-1
   4697      endif
   4698      dx = lon(ip1) - lon(im1)
   4699      if(abs(dx).lt.EPS )  call error_mesg('xgrids_mod(grad_zonal_latlon)', 'Improper grid size in lontitude', FATAL)
   4700      if(dx .gt. PI)  dx = dx - 2.0* PI
   4701      if(dx .lt. -PI) dx = dx + 2.0* PI
   4702      do j = js, je
   4703         costheta = cos(lat(j))
   4704         if(abs(costheta) .lt. EPS) call error_mesg('xgrids_mod(grad_zonal_latlon)', 'Improper latitude grid', FATAL)
   4705         grad_zonal_latlon(i,j) = (d(ip1,j)-d(im1,j))/(dx*costheta)
   4706      enddo
   4707   enddo
   4708 
   4709   return
   4710 
   4711 end function grad_zonal_latlon

Page 149         Source Listing                  GRAD_ZONAL_LATLON
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                       
                                             
 xgrid_mod_mp_grad_zonal_latlon_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   4699                                 scalar                    4699,4704                         
 COS                        Func   4703                                 scalar                    4703                              
 COSTHETA                   Local  4686     R(8)            8           scalar                    4703,4704,4705                    
 D                          Dummy  4678     R(8)            8     2     1        ARG,IN           4705                              
 DX                         Local  4686     R(8)            8           scalar                    4698,4699,4700,4701,4705          
 EPS                        Param  4699     R(8)            8           scalar                    4699,4704,4737                    
 GRAD_ZONAL_LATLON          Func   4678     R(8)            8     2     0                         3931,4705                         
 I                          Local  4687     I(4)            4           scalar                    4690,4691,4692,4693,4694,4696,4705
 IE                         Dummy  4678     I(4)            4           scalar   ARG,IN           4685,4690                         
 IM1                        Local  4687     I(4)            4           scalar                    4692,4694,4696,4698,4705          
 IP1                        Local  4687     I(4)            4           scalar                    4692,4694,4696,4698,4705          
 IS                         Dummy  4678     I(4)            4           scalar   ARG,IN           4685,4690                         
 ISD                        Dummy  4678     I(4)            4           scalar   ARG,IN           4681                              
 J                          Local  4687     I(4)            4           scalar                    4702,4703,4705                    
 JE                         Dummy  4678     I(4)            4           scalar   ARG,IN           4685,4702                         
 JS                         Dummy  4678     I(4)            4           scalar   ARG,IN           4685,4702                         
 JSD                        Dummy  4678     I(4)            4           scalar   ARG,IN           4681                              
 LAT                        Dummy  4678     R(8)            8     1     1        ARG,IN           4703                              
 LON                        Dummy  4678     R(8)            8     1     1        ARG,IN           4693,4698                         
 SIZE                       Func   4693                                 scalar                    4693                              

Page 150         Source Listing                  GRAD_ZONAL_LATLON
2021-06-01 08:56                                 xgrid.F90

   4712 
   4713 !#######################################################################
   4714 
   4715 !> @brief This function is used to calculate the gradient along meridinal direction.
   4716 !!   Maybe need to setup a limit for the gradient. regular lat-lon grid are assumed
   4717 !! @return grad_merid_latlon
   4718 function grad_merid_latlon(d, lat, is, ie, js, je, isd, jsd)
   4719   integer,                    intent(in) :: isd, jsd
   4720   real, dimension(isd:,jsd:), intent(in) :: d
   4721   real, dimension(:),         intent(in) :: lat
   4722   integer,                    intent(in) :: is, ie, js, je
   4723   real, dimension(is:ie,js:je)           :: grad_merid_latlon
   4724   real                                   :: dy
   4725   integer                                :: i, j, jp1, jm1
   4726 
   4727 !  calculate the gradient of the data on each grid
   4728   do j = js, je
   4729      if(j == 1) then
   4730         jp1 = j+1; jm1 = j
   4731      else if(j == size(lat(:)) ) then
   4732         jp1 = j;   jm1 = j-1
   4733      else
   4734         jp1 = j+1; jm1 = j-1
   4735      endif
   4736      dy = lat(jp1) - lat(jm1)
   4737      if(abs(dy).lt.EPS) call error_mesg('xgrids_mod(grad_merid_latlon)', 'Improper grid size in latitude', FATAL)
   4738 
   4739      do i = is, ie
   4740         grad_merid_latlon(i,j) = (d(i,jp1) - d(i,jm1))/dy
   4741      enddo
   4742   enddo
   4743 
   4744   return
   4745 end function grad_merid_latlon

Page 151         Source Listing                  GRAD_MERID_LATLON
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                       
                                             
 xgrid_mod_mp_grad_merid_latlon_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   4737                                 scalar                    4737                              
 D                          Dummy  4718     R(8)            8     2     1        ARG,IN           4740                              
 DY                         Local  4724     R(8)            8           scalar                    4736,4737,4740                    
 GRAD_MERID_LATLON          Func   4718     R(8)            8     2     0                         3930,4740                         
 I                          Local  4725     I(4)            4           scalar                    4739,4740                         
 IE                         Dummy  4718     I(4)            4           scalar   ARG,IN           4723,4739                         
 IS                         Dummy  4718     I(4)            4           scalar   ARG,IN           4723,4739                         
 ISD                        Dummy  4718     I(4)            4           scalar   ARG,IN           4720                              
 J                          Local  4725     I(4)            4           scalar                    4728,4729,4730,4731,4732,4734,4740
 JE                         Dummy  4718     I(4)            4           scalar   ARG,IN           4723,4728                         
 JM1                        Local  4725     I(4)            4           scalar                    4730,4732,4734,4736,4740          
 JP1                        Local  4725     I(4)            4           scalar                    4730,4732,4734,4736,4740          
 JS                         Dummy  4718     I(4)            4           scalar   ARG,IN           4723,4728                         
 JSD                        Dummy  4718     I(4)            4           scalar   ARG,IN           4720                              
 LAT                        Dummy  4718     R(8)            8     1     1        ARG,IN           4731,4736                         
 SIZE                       Func   4731                                 scalar                    4731                              

Page 152         Source Listing                  GRAD_MERID_LATLON
2021-06-01 08:56                                 xgrid.F90

   4746 
   4747 !#######################################################################
   4748 subroutine get_index_range(xmap, grid_index, is, ie, js, je, km)
   4749 
   4750   type(xmap_type), intent(in)     :: xmap
   4751   integer, intent(in)             :: grid_index
   4752   integer, intent(out)            :: is, ie, js, je, km
   4753 
   4754   is = xmap % grids(grid_index) % is_me
   4755   ie = xmap % grids(grid_index) % ie_me
   4756   js = xmap % grids(grid_index) % js_me
   4757   je = xmap % grids(grid_index) % je_me
   4758   km = xmap % grids(grid_index) % km
   4759 
   4760 end subroutine get_index_range


ENTRY POINTS

  Name                                     
                                           
 xgrid_mod_mp_get_index_range_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_INDEX_RANGE            Subr   4748                                                                                             
 GRID_INDEX                 Dummy  4748     I(4)            4           scalar   ARG,IN           4754,4755,4756,4757,4758          
 IE                         Dummy  4748     I(4)            4           scalar   ARG,OUT          4755                              
 IS                         Dummy  4748     I(4)            4           scalar   ARG,OUT          4754                              
 JE                         Dummy  4748     I(4)            4           scalar   ARG,OUT          4757                              
 JS                         Dummy  4748     I(4)            4           scalar   ARG,OUT          4756                              
 KM                         Dummy  4748     I(4)            4           scalar   ARG,OUT          4758                              
 XMAP                       Dummy  4748     XMAP_TYPE       928         scalar   ARG,IN           4754,4755,4756,4757,4758          

Page 153         Source Listing                  GET_INDEX_RANGE
2021-06-01 08:56                                 xgrid.F90

   4761 !#######################################################################
   4762 
   4763 !> @brief this version takes rank 3 data, it can be used to compute the flux on anything but the
   4764 !!   first grid, which typically is on the atmos side.
   4765 !!   note that "from" and "to" are optional, the stocks will be subtracted, resp. added, only
   4766 !!   if these are present.
   4767 subroutine stock_move_3d(from, to, grid_index, data, xmap, &
   4768      & delta_t, from_side, to_side, radius, verbose, ier)
   4769 
   4770 ! this version takes rank 3 data, it can be used to compute the flux on anything but the
   4771 ! first grid, which typically is on the atmos side.
   4772 ! note that "from" and "to" are optional, the stocks will be subtracted, resp. added, only
   4773 ! if these are present.
   4774 
   4775   use mpp_mod, only : mpp_sum
   4776   use mpp_domains_mod, only : domain2D, mpp_redistribute, mpp_get_compute_domain
   4777 
   4778   type(stock_type), intent(inout), optional :: from, to
   4779   integer, intent(in)             :: grid_index        !< grid index
   4780   real, intent(in)                :: data(:,:,:)  !< data array is 3d
   4781   type(xmap_type), intent(in)     :: xmap
   4782   real, intent(in)                :: delta_t
   4783   integer, intent(in)             :: from_side !< ISTOCK_TOP, ISTOCK_BOTTOM, or ISTOCK_SIDE
   4784   integer, intent(in)             :: to_side !< ISTOCK_TOP, ISTOCK_BOTTOM, or ISTOCK_SIDE
   4785   real, intent(in)                :: radius       !< earth radius
   4786   character(len=*), intent(in), optional      :: verbose
   4787   integer, intent(out)            :: ier
   4788 
   4789   real    :: from_dq, to_dq
   4790 
   4791   ier = 0
   4792   if(grid_index == 1) then
   4793 ! data has rank 3 so grid index must be > 1
   4794      ier = 1
   4795      return
   4796   endif
   4797 
   4798   if(.not. associated(xmap%grids) ) then
   4799      ier = 2
   4800      return
   4801   endif
   4802 
   4803      from_dq = delta_t * 4.0*PI*radius**2 * sum( sum(xmap%grids(grid_index)%area * &
   4804           & sum(xmap%grids(grid_index)%frac_area * data, DIM=3), DIM=1))
   4805      to_dq = from_dq
   4806 
   4807 ! update only if argument is present.
   4808   if(present(to  )) to   % dq(  to_side) = to   % dq(  to_side) + to_dq
   4809   if(present(from)) from % dq(from_side) = from % dq(from_side) - from_dq
   4810 
   4811   if(present(verbose).and.debug_stocks) then
   4812      call mpp_sum(from_dq)
   4813      call mpp_sum(to_dq)
   4814      from_dq = from_dq/(4.0*PI*radius**2)
   4815      to_dq   = to_dq  /(4.0*PI*radius**2)
   4816      if(mpp_pe()==mpp_root_pe()) then
   4817         write(stocks_file,'(a,es19.12,a,es19.12,a)') verbose, from_dq,' [*/m^2]'

Page 154         Source Listing                  STOCK_MOVE_3D
2021-06-01 08:56                                 xgrid.F90

   4818      endif
   4819   endif
   4820 
   4821 end subroutine stock_move_3d


ENTRY POINTS

  Name                                   
                                         
 xgrid_mod_mp_stock_move_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   4798                                 scalar                    4798                              
 DATA                       Dummy  4767     R(8)            8     3     1        ARG,IN           4804                              
 DEBUG_STOCKS               Local  4811     L(4)            4           scalar                    331,339,4811,4874,4937            
 DELTA_T                    Dummy  4768     R(8)            8           scalar   ARG,IN           4803                              
 DOMAIN2D                   Type   4776                                 scalar                    4776                              
 FROM                       Dummy  4767     STOCK_TYPE      64          scalar   ARG,INOUT        4809                              
 FROM_DQ                    Local  4789     R(8)            8           scalar                    4803,4805,4809,4812,4814,4817     
 FROM_SIDE                  Dummy  4768     I(4)            4           scalar   ARG,IN           4809                              
 GRID_INDEX                 Dummy  4767     I(4)            4           scalar   ARG,IN           4792,4803,4804                    
 IER                        Dummy  4768     I(4)            4           scalar   ARG,OUT          4791,4794,4799                    
 MPP_DOMAINS_MOD            Module 4776                                                           4776                              
 MPP_GET_COMPUTE_DOMAIN     Local  4776                                 scalar                    4776                              
 MPP_MOD                    Module 4775                                                           4775                              
 MPP_REDISTRIBUTE           Local  4776                                 scalar                    4776                              
 MPP_SUM                    Local  4775                                 scalar                    4775,4812,4813                    
 MPP_SUM_REAL8_SCALAR       Subr   4812                                          PRIV             4812,4813,4875,4876,4938,4939,5016
                                                                                                  ,5017,5019,5020                   
 PRESENT                    Func   4808                                 scalar                    4808,4809,4811                    
 RADIUS                     Dummy  4768     R(8)            8           scalar   ARG,IN           4803,4814,4815                    
 STOCKS_FILE                Local  4817     I(4)            4           scalar   PRIV             270,4817,4880,4943,5073           
 STOCK_MOVE_3D              Subr   4767                                          PRIV                                               
 STOCK_TYPE                 Type   4778                                 scalar                    270,679,4778,4837,4902,4989       
 SUM                        Func   4803                                 scalar                    4803,4804                         
 TO                         Dummy  4767     STOCK_TYPE      64          scalar   ARG,INOUT        4808                              
 TO_DQ                      Local  4789     R(8)            8           scalar                    4805,4808,4813,4815               
 TO_SIDE                    Dummy  4768     I(4)            4           scalar   ARG,IN           4808                              
 VERBOSE                    Dummy  4768     CHAR                        scalar   ARG,IN           4811,4817                         
 XMAP                       Dummy  4767     XMAP_TYPE       928         scalar   ARG,IN           4798,4803,4804                    


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 STOCK_TYPE.DQ              R(8)            8     16       1     3                         4808,4809,4871,4872,4934,4935,5013 

Page 155         Source Listing                  STOCK_MOVE_3D
2021-06-01 08:56                                 xgrid.F90

   4822 
   4823 !...................................................................
   4824 !> @brief this version takes rank 2 data, it can be used to compute the flux on the atmos side
   4825 !!   note that "from" and "to" are optional, the stocks will be subtracted, resp. added, only
   4826 !!   if these are present.
   4827 subroutine stock_move_2d(from, to, grid_index, data, xmap, &
   4828      & delta_t, from_side, to_side, radius, verbose, ier)
   4829 
   4830 ! this version takes rank 2 data, it can be used to compute the flux on the atmos side
   4831 ! note that "from" and "to" are optional, the stocks will be subtracted, resp. added, only
   4832 ! if these are present.
   4833 
   4834   use mpp_mod, only : mpp_sum
   4835   use mpp_domains_mod, only : domain2D, mpp_redistribute, mpp_get_compute_domain
   4836 
   4837   type(stock_type), intent(inout), optional :: from, to
   4838   integer, optional, intent(in)   :: grid_index
   4839   real, intent(in)                :: data(:,:)    !< data array is 2d
   4840   type(xmap_type), intent(in)     :: xmap
   4841   real, intent(in)                :: delta_t
   4842   integer, intent(in)             :: from_side !< ISTOCK_TOP, ISTOCK_BOTTOM, or ISTOCK_SIDE
   4843   integer, intent(in)             :: to_side !< ISTOCK_TOP, ISTOCK_BOTTOM, or ISTOCK_SIDE
   4844   real, intent(in)                :: radius       !< earth radius
   4845   character(len=*), intent(in)    :: verbose
   4846   integer, intent(out)            :: ier
   4847 
   4848   real    :: to_dq, from_dq
   4849 
   4850   ier = 0
   4851 
   4852   if(.not. associated(xmap%grids) ) then
   4853      ier = 3
   4854      return
   4855   endif
   4856 
   4857   if( .not. present(grid_index) .or. grid_index==1 ) then
   4858 
   4859 ! only makes sense if grid_index == 1
   4860      from_dq = delta_t * 4.0*PI*radius**2 * sum(sum(xmap%grids(1)%area * data, DIM=1))
   4861      to_dq = from_dq
   4862 
   4863   else
   4864 
   4865      ier = 4
   4866      return
   4867 
   4868   endif
   4869 
   4870 ! update only if argument is present.
   4871   if(present(to  )) to   % dq(  to_side) = to   % dq(  to_side) + to_dq
   4872   if(present(from)) from % dq(from_side) = from % dq(from_side) - from_dq
   4873 
   4874   if(debug_stocks) then
   4875      call mpp_sum(from_dq)
   4876      call mpp_sum(to_dq)
   4877      from_dq = from_dq/(4.0*PI*radius**2)
   4878      to_dq   = to_dq  /(4.0*PI*radius**2)

Page 156         Source Listing                  STOCK_MOVE_2D
2021-06-01 08:56                                 xgrid.F90

   4879      if(mpp_pe()==mpp_root_pe()) then
   4880         write(stocks_file,'(a,es19.12,a,es19.12,a)') verbose, from_dq,' [*/m^2]'
   4881      endif
   4882   endif
   4883 
   4884 end subroutine stock_move_2d


ENTRY POINTS

  Name                                   
                                         
 xgrid_mod_mp_stock_move_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   4852                                 scalar                    4852                              
 DATA                       Dummy  4827     R(8)            8     2     1        ARG,IN           4860                              
 DELTA_T                    Dummy  4828     R(8)            8           scalar   ARG,IN           4860                              
 DOMAIN2D                   Type   4835                                 scalar                    4835                              
 FROM                       Dummy  4827     STOCK_TYPE      64          scalar   ARG,INOUT        4872                              
 FROM_DQ                    Local  4848     R(8)            8           scalar                    4860,4861,4872,4875,4877,4880     
 FROM_SIDE                  Dummy  4828     I(4)            4           scalar   ARG,IN           4872                              
 GRID_INDEX                 Dummy  4827     I(4)            4           scalar   ARG,IN           4857                              
 IER                        Dummy  4828     I(4)            4           scalar   ARG,OUT          4850,4853,4865                    
 MPP_DOMAINS_MOD            Module 4835                                                           4835                              
 MPP_GET_COMPUTE_DOMAIN     Local  4835                                 scalar                    4835                              
 MPP_MOD                    Module 4834                                                           4834                              
 MPP_REDISTRIBUTE           Local  4835                                 scalar                    4835                              
 MPP_SUM                    Local  4834                                 scalar                    4834,4875,4876                    
 PRESENT                    Func   4857                                 scalar                    4857,4871,4872                    
 RADIUS                     Dummy  4828     R(8)            8           scalar   ARG,IN           4860,4877,4878                    
 STOCK_MOVE_2D              Subr   4827                                          PRIV                                               
 SUM                        Func   4860                                 scalar                    4860                              
 TO                         Dummy  4827     STOCK_TYPE      64          scalar   ARG,INOUT        4871                              
 TO_DQ                      Local  4848     R(8)            8           scalar                    4861,4871,4876,4878               
 TO_SIDE                    Dummy  4828     I(4)            4           scalar   ARG,IN           4871                              
 VERBOSE                    Dummy  4828     CHAR                        scalar   ARG,IN           4880                              
 XMAP                       Dummy  4827     XMAP_TYPE       928         scalar   ARG,IN           4852,4860                         

Page 157         Source Listing                  STOCK_MOVE_2D
2021-06-01 08:56                                 xgrid.F90

   4885 
   4886 !#######################################################################
   4887 !> @brief this version takes rank 3 data, it can be used to compute the flux on anything but the
   4888 !!   first grid, which typically is on the atmos side.
   4889 !!   note that "from" and "to" are optional, the stocks will be subtracted, resp. added, only
   4890 !!   if these are present.
   4891 subroutine stock_move_ug_3d(from, to, grid_index, data, xmap, &
   4892      & delta_t, from_side, to_side, radius, verbose, ier)
   4893 
   4894 ! this version takes rank 3 data, it can be used to compute the flux on anything but the
   4895 ! first grid, which typically is on the atmos side.
   4896 ! note that "from" and "to" are optional, the stocks will be subtracted, resp. added, only
   4897 ! if these are present.
   4898 
   4899   use mpp_mod, only : mpp_sum
   4900   use mpp_domains_mod, only : domain2D, mpp_redistribute, mpp_get_compute_domain
   4901 
   4902   type(stock_type), intent(inout), optional :: from, to
   4903   integer, intent(in)             :: grid_index        !< grid index
   4904   real, intent(in)                :: data(:,:)  !< data array is 3d
   4905   type(xmap_type), intent(in)     :: xmap
   4906   real, intent(in)                :: delta_t
   4907   integer, intent(in)             :: from_side !< ISTOCK_TOP, ISTOCK_BOTTOM, or ISTOCK_SIDE
   4908   integer, intent(in)             :: to_side !< ISTOCK_TOP, ISTOCK_BOTTOM, or ISTOCK_SIDE
   4909   real, intent(in)                :: radius       !< earth radius
   4910   character(len=*), intent(in), optional      :: verbose
   4911   integer, intent(out)            :: ier
   4912   real, dimension(size(data,1),size(data,2)) :: tmp
   4913 
   4914   real    :: from_dq, to_dq
   4915 
   4916   ier = 0
   4917   if(grid_index == 1) then
   4918 ! data has rank 3 so grid index must be > 1
   4919      ier = 1
   4920      return
   4921   endif
   4922 
   4923   if(.not. associated(xmap%grids) ) then
   4924      ier = 2
   4925      return
   4926   endif
   4927 
   4928      tmp = xmap%grids(grid_index)%frac_area(:,1,:) * data
   4929      from_dq = delta_t * 4.0*PI*radius**2 * sum( xmap%grids(grid_index)%area(:,1) * &
   4930           & sum(tmp, DIM=2))
   4931      to_dq = from_dq
   4932 
   4933 ! update only if argument is present.
   4934   if(present(to  )) to   % dq(  to_side) = to   % dq(  to_side) + to_dq
   4935   if(present(from)) from % dq(from_side) = from % dq(from_side) - from_dq
   4936 
   4937   if(present(verbose).and.debug_stocks) then
   4938      call mpp_sum(from_dq)
   4939      call mpp_sum(to_dq)
   4940      from_dq = from_dq/(4.0*PI*radius**2)
   4941      to_dq   = to_dq  /(4.0*PI*radius**2)

Page 158         Source Listing                  STOCK_MOVE_UG_3D
2021-06-01 08:56                                 xgrid.F90

   4942      if(mpp_pe()==mpp_root_pe()) then
   4943         write(stocks_file,'(a,es19.12,a,es19.12,a)') verbose, from_dq,' [*/m^2]'
   4944      endif
   4945   endif
   4946 
   4947 end subroutine stock_move_ug_3d


ENTRY POINTS

  Name                                      
                                            
 xgrid_mod_mp_stock_move_ug_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   4923                                 scalar                    4923                              
 DATA                       Dummy  4891     R(8)            8     2     1        ARG,IN           4912,4928                         
 DELTA_T                    Dummy  4892     R(8)            8           scalar   ARG,IN           4929                              
 DOMAIN2D                   Type   4900                                 scalar                    4900                              
 FROM                       Dummy  4891     STOCK_TYPE      64          scalar   ARG,INOUT        4935                              
 FROM_DQ                    Local  4914     R(8)            8           scalar                    4929,4931,4935,4938,4940,4943     
 FROM_SIDE                  Dummy  4892     I(4)            4           scalar   ARG,IN           4935                              
 GRID_INDEX                 Dummy  4891     I(4)            4           scalar   ARG,IN           4917,4928,4929                    
 IER                        Dummy  4892     I(4)            4           scalar   ARG,OUT          4916,4919,4924                    
 MPP_DOMAINS_MOD            Module 4900                                                           4900                              
 MPP_GET_COMPUTE_DOMAIN     Local  4900                                 scalar                    4900                              
 MPP_MOD                    Module 4899                                                           4899                              
 MPP_REDISTRIBUTE           Local  4900                                 scalar                    4900                              
 MPP_SUM                    Local  4899                                 scalar                    4899,4938,4939                    
 PRESENT                    Func   4934                                 scalar                    4934,4935,4937                    
 RADIUS                     Dummy  4892     R(8)            8           scalar   ARG,IN           4929,4940,4941                    
 SIZE                       Func   4912                                 scalar                    4912                              
 STOCK_MOVE_UG_3D           Subr   4891                                          PRIV                                               
 SUM                        Func   4929                                 scalar                    4929,4930                         
 TMP                        Local  4912     R(8)            8     2     0                         4928,4930                         
 TO                         Dummy  4891     STOCK_TYPE      64          scalar   ARG,INOUT        4934                              
 TO_DQ                      Local  4914     R(8)            8           scalar                    4931,4934,4939,4941               
 TO_SIDE                    Dummy  4892     I(4)            4           scalar   ARG,IN           4934                              
 VERBOSE                    Dummy  4892     CHAR                        scalar   ARG,IN           4937,4943                         
 XMAP                       Dummy  4891     XMAP_TYPE       928         scalar   ARG,IN           4923,4928,4929                    

Page 159         Source Listing                  STOCK_MOVE_UG_3D
2021-06-01 08:56                                 xgrid.F90

   4948 
   4949 
   4950 
   4951 !#######################################################################
   4952 !> @brief surface/time integral of a 2d array
   4953 subroutine stock_integrate_2d(data, xmap, delta_t, radius, res, ier)
   4954 
   4955 ! surface/time integral of a 2d array
   4956 
   4957   use mpp_mod, only : mpp_sum
   4958 
   4959   real, intent(in)                :: data(:,:)    !< data array is 2d
   4960   type(xmap_type), intent(in)     :: xmap
   4961   real, intent(in)                :: delta_t
   4962   real, intent(in)                :: radius       !< earth radius
   4963   real, intent(out)               :: res
   4964   integer, intent(out)            :: ier
   4965 
   4966   ier = 0
   4967   res = 0.0
   4968 
   4969   if(.not. associated(xmap%grids) ) then
   4970      ier = 6
   4971      return
   4972   endif
   4973 
   4974   res = delta_t * 4.0*PI*radius**2 * sum(sum(xmap%grids(1)%area * data, DIM=1))
   4975 
   4976 end subroutine stock_integrate_2d

Page 160         Source Listing                  STOCK_INTEGRATE_2D
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                        
                                              
 xgrid_mod_mp_stock_integrate_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   4969                                 scalar                    4969                              
 DATA                       Dummy  4953     R(8)            8     2     1        ARG,IN           4974                              
 DELTA_T                    Dummy  4953     R(8)            8           scalar   ARG,IN           4974                              
 IER                        Dummy  4953     I(4)            4           scalar   ARG,OUT          4966,4970                         
 MPP_MOD                    Module 4957                                                           4957                              
 MPP_SUM                    Local  4957                                 scalar                    4957                              
 RADIUS                     Dummy  4953     R(8)            8           scalar   ARG,IN           4974                              
 RES                        Dummy  4953     R(8)            8           scalar   ARG,OUT          4967,4974                         
 STOCK_INTEGRATE_2D         Subr   4953                                                                                             
 SUM                        Func   4974                                 scalar                    4974                              
 XMAP                       Dummy  4953     XMAP_TYPE       928         scalar   ARG,IN           4969,4974                         

Page 161         Source Listing                  STOCK_INTEGRATE_2D
2021-06-01 08:56                                 xgrid.F90

   4977 !#######################################################################
   4978 
   4979 !#######################################################################
   4980 
   4981 
   4982 
   4983 subroutine stock_print(stck, Time, comp_name, index, ref_value, radius, pelist)
   4984 
   4985   use mpp_mod, only : mpp_pe, mpp_root_pe, mpp_sum
   4986   use time_manager_mod, only : time_type, get_time
   4987   use diag_manager_mod, only : register_diag_field,send_data
   4988 
   4989   type(stock_type), intent(in)  :: stck
   4990   type(time_type), intent(in)   :: Time
   4991   character(len=*)              :: comp_name
   4992   integer, intent(in)           :: index     !< to map stock element (water, heat, ..) to a name
   4993   real, intent(in)              :: ref_value !< the stock value returned by the component per PE
   4994   real, intent(in)              :: radius
   4995   integer, intent(in), optional :: pelist(:)
   4996 
   4997   integer, parameter :: initID = -2 !< initial value for diag IDs. Must not be equal to the value
   4998 !! that register_diag_field returns when it can't register the filed -- otherwise the registration
   4999 !! is attempted every time this subroutine is called
   5000 
   5001   real :: f_value, c_value, planet_area
   5002   character(len=80) :: formatString
   5003   integer :: iday, isec, hours
   5004   integer :: diagID, compInd
   5005   integer, dimension(NELEMS,4), save :: f_valueDiagID = initID
   5006   integer, dimension(NELEMS,4), save :: c_valueDiagID = initID
   5007   integer, dimension(NELEMS,4), save :: fmc_valueDiagID = initID
   5008 
   5009   real :: diagField
   5010   logical :: used
   5011   character(len=30) :: field_name, units
   5012 
   5013   f_value = sum(stck % dq)
   5014   c_value = ref_value      - stck % q_start
   5015   if(present(pelist)) then
   5016      call mpp_sum(f_value, pelist=pelist)
   5017      call mpp_sum(c_value, pelist=pelist)
   5018   else
   5019      call mpp_sum(f_value)
   5020      call mpp_sum(c_value)
   5021   endif
   5022 
   5023   if(mpp_pe() == mpp_root_pe()) then
   5024 ! normalize to 1 earth m^2
   5025      planet_area = 4.0*PI*radius**2
   5026      f_value       = f_value     / planet_area
   5027      c_value       = c_value     / planet_area
   5028 
   5029      if(comp_name == 'ATM') compInd = 1
   5030      if(comp_name == 'LND') compInd = 2
   5031      if(comp_name == 'ICE') compInd = 3
   5032      if(comp_name == 'OCN') compInd = 4
   5033 

Page 162         Source Listing                  STOCK_PRINT
2021-06-01 08:56                                 xgrid.F90

   5034 
   5035      if(f_valueDiagID(index,compInd) == initID) then
   5036         field_name = trim(comp_name) // trim(STOCK_NAMES(index))
   5037         field_name  = trim(field_name) // 'StocksChange_Flux'
   5038         units = trim(STOCK_UNITS(index))
   5039         f_valueDiagID(index,compInd) = register_diag_field('stock_print', field_name, Time, &
   5040              units=units)
   5041      endif
   5042 
   5043      if(c_valueDiagID(index,compInd) == initID) then
   5044         field_name = trim(comp_name) // trim(STOCK_NAMES(index))
   5045         field_name = trim(field_name) // 'StocksChange_Comp'
   5046         units = trim(STOCK_UNITS(index))
   5047         c_valueDiagID(index,compInd) = register_diag_field('stock_print', field_name, Time, &
   5048              units=units)
   5049      endif
   5050 
   5051      if(fmc_valueDiagID(index,compInd) == initID) then
   5052         field_name = trim(comp_name) // trim(STOCK_NAMES(index))
   5053         field_name = trim(field_name) // 'StocksChange_Diff'
   5054         units = trim(STOCK_UNITS(index))
   5055         fmc_valueDiagID(index,compInd) = register_diag_field('stock_print', field_name, Time, &
   5056              units=units)
   5057      endif
   5058 
   5059      DiagID=f_valueDiagID(index,compInd)
   5060      diagField = f_value
   5061      if (DiagID > 0)  used = send_data(DiagID, diagField, Time)
   5062      DiagID=c_valueDiagID(index,compInd)
   5063      diagField = c_value
   5064      if (DiagID > 0)  used = send_data(DiagID, diagField, Time)
   5065      DiagID=fmc_valueDiagID(index,compInd)
   5066      diagField = f_value-c_value
   5067      if (DiagID > 0)  used = send_data(DiagID, diagField, Time)
   5068 
   5069 
   5070      call get_time(Time, isec, iday)
   5071      hours = iday*24 + isec/3600
   5072      formatString = '(a,a,a,i16,2x,es22.15,2x,es22.15,2x,es22.15)'
   5073      write(stocks_file,formatString) trim(comp_name),STOCK_NAMES(index),STOCK_UNITS(index) &
   5074           ,hours,f_value,c_value,f_value-c_value
   5075 
   5076   endif
   5077 
   5078 
   5079 end subroutine stock_print

Page 163         Source Listing                  STOCK_PRINT
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                 
                                       
 xgrid_mod_mp_stock_print_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPIND                    Local  5004     I(4)            4           scalar                    5029,5030,5031,5032,5035,5039,5043
                                                                                                  ,5047,5051,5055,5059,5062,5065    
 COMP_NAME                  Dummy  4983     CHAR                        scalar   ARG,INOUT        5029,5030,5031,5032,5036,5044,5052
                                                                                                  ,5073                             
 C_VALUE                    Local  5001     R(8)            8           scalar                    5014,5017,5020,5027,5063,5066,5074
 C_VALUEDIAGID              Local  5006     I(4)            4     2     12       SAVE             5006,5043,5047,5062               
 DIAGFIELD                  Local  5009     R(8)            8           scalar                    5060,5061,5063,5064,5066,5067     
 DIAGID                     Local  5004     I(4)            4           scalar                    5059,5061,5062,5064,5065,5067     
 DIAG_MANAGER_MOD           Module 4987                                                           4987                              
 FIELD_NAME                 Local  5011     CHAR            30          scalar                    5036,5037,5039,5044,5045,5047,5052
                                                                                                  ,5053,5055                        
 FMC_VALUEDIAGID            Local  5007     I(4)            4     2     12       SAVE             5007,5051,5055,5065               
 FORMATSTRING               Local  5002     CHAR            80          scalar                    5072,5073                         
 F_VALUE                    Local  5001     R(8)            8           scalar                    5013,5016,5019,5026,5060,5066,5074
 F_VALUEDIAGID              Local  5005     I(4)            4     2     12       SAVE             5005,5035,5039,5059               
 GET_TIME                   Subr   4986                                                           4986,5070                         
 HOURS                      Local  5003     I(4)            4           scalar                    5071,5074                         
 IDAY                       Local  5003     I(4)            4           scalar                    5070,5071                         
 INDEX                      Dummy  4983     I(4)            4           scalar   ARG,IN           5035,5036,5038,5039,5043,5044,5046
                                                                                                  ,5047,5051,5052,5054,5055,5059,506
                                                                                                  2,5065,5073                       
 INITID                     Param  4997     I(4)            4           scalar                    5005,5006,5007,5035,5043,5051     
 ISEC                       Local  5003     I(4)            4           scalar                    5070,5071                         
 MPP_MOD                    Module 4985                                                           4985                              
 MPP_PE                     Func   4985     I(4)            4           scalar                    4985,5023                         
 MPP_ROOT_PE                Func   4985     I(4)            4           scalar                    4985,5023                         
 MPP_SUM                    Local  4985                                 scalar                    4985,5016,5017,5019,5020          
 NELEMS                     Param  5005     I(4)            4           scalar   PRIV             270,5005,5006,5007                
 PELIST                     Dummy  4983     I(4)            4     1     1        ARG,IN           5015,5016,5017                    
 PLANET_AREA                Local  5001     R(8)            8           scalar                    5025,5026,5027                    
 PRESENT                    Func   5015                                 scalar                    5015                              
 RADIUS                     Dummy  4983     R(8)            8           scalar   ARG,IN           5025                              
 REF_VALUE                  Dummy  4983     R(8)            8           scalar   ARG,IN           5014                              
 REGISTER_DIAG_FIELD        Local  4987                                 scalar                    4987,5039,5047,5055               
 REGISTER_DIAG_FIELD_SCALAR Func   5039     I(4)            4           scalar   PRIV             5039,5047,5055                    
 SEND_DATA                  Local  4987                                 scalar                    4987,5061,5064,5067               
 SEND_DATA_0D               Func   5061     L(4)            4           scalar   PRIV             5061,5064,5067                    
 STCK                       Dummy  4983     STOCK_TYPE      64          scalar   ARG,IN           5013,5014                         
 STOCK_NAMES                Param  5036     CHAR            5     1     3        PRIV             269,5036,5044,5052,5073           
 STOCK_PRINT                Subr   4983                                                                                             
 STOCK_UNITS                Param  5038     CHAR            12    1     3        PRIV             270,5038,5046,5054,5073           
 SUM                        Func   5013                                 scalar                    5013                              
 TIME                       Dummy  4983     TIME_TYPE       16          scalar   ARG,IN           5039,5047,5055,5061,5064,5067,5070
 TIME_MANAGER_MOD           Module 4986                                                           4986                              

Page 164         Source Listing                  STOCK_PRINT
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME_TYPE                  Type   4986                                 scalar                    4986,4990                         
 TRIM                       Func   5036                                 scalar                    5036,5037,5038,5044,5045,5046,5052
                                                                                                  ,5053,5054,5073                   
 UNITS                      Local  5011     CHAR            30          scalar                    5038,5040,5046,5048,5054,5056     
 USED                       Local  5010     L(4)            4           scalar                    5061,5064,5067                    


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 STOCK_TYPE.Q_START         R(8)            8     0              scalar                    5014                               

Page 165         Source Listing                  STOCK_PRINT
2021-06-01 08:56                                 xgrid.F90

   5080 
   5081 
   5082 !###############################################################################
   5083 !> @return logical is_lat_lon
   5084  function is_lat_lon(lon, lat)
   5085     real, dimension(:,:), intent(in) :: lon, lat
   5086     logical                          :: is_lat_lon
   5087     integer                          :: i, j, nlon, nlat, num
   5088 
   5089     is_lat_lon = .true.
   5090     nlon = size(lon,1)
   5091     nlat = size(lon,2)
   5092     LOOP_LAT: do j = 1, nlat
   5093        do i = 2, nlon
   5094           if(lat(i,j) .NE. lat(1,j)) then
   5095              is_lat_lon = .false.
   5096              exit LOOP_LAT
   5097           end if
   5098        end do
   5099     end do LOOP_LAT
   5100 
   5101     if(is_lat_lon) then
   5102        LOOP_LON: do i = 1, nlon
   5103           do j = 2, nlat
   5104              if(lon(i,j) .NE. lon(i,1)) then
   5105                 is_lat_lon = .false.
   5106                 exit LOOP_LON
   5107              end if
   5108           end do
   5109        end do LOOP_LON
   5110     end if
   5111 
   5112     num = 0
   5113     if(is_lat_lon) num = 1
   5114     call mpp_min(num)
   5115     if(num == 1) then
   5116        is_lat_lon = .true.
   5117     else
   5118        is_lat_lon = .false.
   5119     end if
   5120 
   5121     return
   5122  end function is_lat_lon

Page 166         Source Listing                  IS_LAT_LON
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                
                                      
 xgrid_mod_mp_is_lat_lon_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  5087     I(4)            4           scalar                    5093,5094,5102,5104               
 IS_LAT_LON                 Func   5084     L(4)            4           scalar                    1638,5089,5095,5101,5105,5113,5116
                                                                                                  ,5118,6528                        
 J                          Local  5087     I(4)            4           scalar                    5092,5094,5103,5104               
 LAT                        Dummy  5084     R(8)            8     2     1        ARG,IN           5094                              
 LON                        Dummy  5084     R(8)            8     2     1        ARG,IN           5090,5091,5104                    
 LOOP_LAT                   Label  5092                                 scalar                    5096,5099                         
 LOOP_LON                   Label  5102                                 scalar                    5106,5109                         
 MPP_MIN                    Local  5114                                 scalar   PRIV             244,5114                          
 MPP_MIN_INT4_0D            Subr   5114                                          PRIV             5114                              
 NLAT                       Local  5087     I(4)            4           scalar                    5091,5092,5103                    
 NLON                       Local  5087     I(4)            4           scalar                    5090,5093,5102                    
 NUM                        Local  5087     I(4)            4           scalar                    5112,5113,5114,5115               
 SIZE                       Func   5090                                 scalar                    5090,5091                         

Page 167         Source Listing                  IS_LAT_LON
2021-06-01 08:56                                 xgrid.F90

   5123 
   5124 !#######################################################################
   5125 
   5126 ! <SUBROUTINE NAME="get_side1_from_xgrid_ug" INTERFACE="get_from_xgrid_ug">
   5127 !   <IN NAME="x"  TYPE="real" DIM="(:)" > </IN>
   5128 !   <IN NAME="grid_id"  TYPE=" character(len=3)"  > </IN>
   5129 !   <OUT NAME="d"  TYPE="real" DIM="(:,:)" > </OUT>
   5130 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   5131 
   5132 subroutine get_side1_from_xgrid_ug(d, grid_id, x, xmap, complete)
   5133   real, dimension(:),   intent(  out) :: d
   5134   character(len=3),     intent(in   ) :: grid_id
   5135   real, dimension(:),   intent(in   ) :: x
   5136   type (xmap_type),     intent(inout) :: xmap
   5137   logical, intent(in), optional     :: complete
   5138 
   5139   logical                                         :: is_complete, set_mismatch
   5140   integer                                         :: g
   5141   character(len=2)                                :: text
   5142   integer,                                   save :: isize=0
   5143   integer,                                   save :: lsize=0
   5144   integer,                                   save :: xsize=0
   5145   character(len=3),                          save :: grid_id_saved=""
   5146   integer(8), dimension(MAX_FIELDS), save :: d_addrs=-9999
   5147   integer(8), dimension(MAX_FIELDS), save :: x_addrs=-9999
   5148 
   5149   if (grid_id==xmap%grids(1)%id) then
   5150      is_complete = .true.
   5151      if(present(complete)) is_complete=complete
   5152      lsize = lsize + 1
   5153      if( lsize > MAX_FIELDS ) then
   5154         write( text,'(i2)' ) MAX_FIELDS
   5155         call error_mesg ('xgrid_mod',  'MAX_FIELDS='//trim(text)//' exceeded for group get_side1_from_xgrid_ug', FATAL)
   5156      endif
   5157      d_addrs(lsize) = LOC(d)
   5158      x_addrs(lsize) = LOC(x)
   5159 
   5160      if(lsize == 1) then
   5161         isize = size(d(:))
   5162         xsize = size(x(:))
   5163         grid_id_saved = grid_id
   5164      else
   5165         set_mismatch = .false.
   5166         set_mismatch = set_mismatch .OR. (isize /= size(d(:)))
   5167         set_mismatch = set_mismatch .OR. (xsize /= size(x(:)))
   5168         set_mismatch = set_mismatch .OR. (grid_id_saved /= grid_id)
   5169         if(set_mismatch)then
   5170            write( text,'(i2)' ) lsize
   5171            call error_mesg ('xgrid_mod', 'Incompatible field at count '//text//' for group get_side1_from_xgrid_ug', FATAL )
   5172         endif
   5173      endif
   5174 
   5175      if(is_complete) then
   5176         if (make_exchange_reproduce) then
   5177            call get_1_from_xgrid_ug_repro(d_addrs, x_addrs, xmap, xsize, lsize)
   5178         else
   5179            call get_1_from_xgrid_ug(d_addrs, x_addrs, xmap, isize, xsize, lsize)

Page 168         Source Listing                  GET_SIDE1_FROM_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5180         end if
   5181         d_addrs(1:lsize) = -9999
   5182         x_addrs(1:lsize) = -9999
   5183         isize   = 0
   5184         xsize   = 0
   5185         lsize   = 0
   5186         grid_id_saved = ""
   5187      endif
   5188      return;
   5189   end if
   5190 
   5191   do g=2,size(xmap%grids(:))
   5192     if (grid_id==xmap%grids(g)%id) &
   5193       call error_mesg ('xgrid_mod',  &
   5194                        'get_from_xgrid_ug expects a 3D side 2 grid', FATAL)
   5195   end do
   5196 
   5197   call error_mesg ('xgrid_mod', 'get_from_xgrid_ug: could not find grid id', FATAL)
   5198 
   5199 end subroutine get_side1_from_xgrid_ug


ENTRY POINTS

  Name                                             
                                                   
 xgrid_mod_mp_get_side1_from_xgrid_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPLETE                   Dummy  5132     L(4)            4           scalar   ARG,IN           5151                              
 D                          Dummy  5132     R(8)            8     1     1        ARG,OUT          5157,5161,5166                    
 D_ADDRS                    Local  5146     I(8)            8     1     80       TGT,SAVE         5146,5157,5177,5179,5181          
 G                          Local  5140     I(4)            4           scalar                    5191,5192                         
 GET_SIDE1_FROM_XGRID_UG    Subr   5132                                          PRIV             4615                              
 GRID_ID                    Dummy  5132     CHAR            3           scalar   ARG,IN           5149,5163,5168,5192               
 GRID_ID_SAVED              Local  5145     CHAR            3           scalar   SAVE             5145,5163,5168,5186               
 ISIZE                      Local  5142     I(4)            4           scalar   SAVE             5142,5161,5166,5179,5183          
 IS_COMPLETE                Local  5139     L(4)            4           scalar                    5150,5151,5175                    
 LOC                        Func   5157                                 scalar                    5157,5158                         
 LSIZE                      Local  5143     I(4)            4           scalar   SAVE             5143,5152,5153,5157,5158,5160,5170
                                                                                                  ,5177,5179,5181,5182,5185         
 PRESENT                    Func   5151                                 scalar                    5151                              
 SET_MISMATCH               Local  5139     L(4)            4           scalar                    5165,5166,5167,5168,5169          
 SIZE                       Func   5161                                 scalar                    5161,5162,5166,5167,5191          
 TEXT                       Local  5141     CHAR            2           scalar                    5154,5155,5170,5171               
 TRIM                       Func   5155                                 scalar                    5155                              
 X                          Dummy  5132     R(8)            8     1     1        ARG,IN           5158,5162,5167                    
 XMAP                       Dummy  5132     XMAP_TYPE       928         scalar   ARG,INOUT        5149,5177,5179,5191,5192          
 XSIZE                      Local  5144     I(4)            4           scalar   SAVE             5144,5162,5167,5177,5179,5184     
 X_ADDRS                    Local  5147     I(8)            8     1     80       TGT,SAVE         5147,5158,5177,5179,5182          

Page 169         Source Listing                  GET_SIDE1_FROM_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5200 ! </SUBROUTINE>
   5201 
   5202 !#######################################################################
   5203 
   5204 ! <SUBROUTINE NAME="put_side1_to_xgrid_ug" INTERFACE="put_to_xgrid_ug">
   5205 !   <IN NAME="d"  TYPE="real" DIM="(:,:)" > </IN>
   5206 !   <IN NAME="grid_id"  TYPE=" character(len=3)"  > </IN>
   5207 !   <INOUT NAME="x"  TYPE="real" DIM="(:)" > </INOUT>
   5208 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   5209 !   <IN NAME="remap_method" TYPE="integer,optional"></IN>
   5210 !> @brief Currently only support first order.
   5211 subroutine put_side1_to_xgrid_ug(d, grid_id, x, xmap, complete)
   5212   real, dimension(:),   intent(in   )    :: d
   5213   character(len=3),     intent(in   )    :: grid_id
   5214   real, dimension(:),   intent(inout)    :: x
   5215   type (xmap_type),     intent(inout)    :: xmap
   5216   logical, intent(in), optional          :: complete
   5217 
   5218   logical                                         :: is_complete, set_mismatch
   5219   integer                                         :: g
   5220   character(len=2)                                :: text
   5221   integer,                                   save :: dsize=0
   5222   integer,                                   save :: lsize=0
   5223   integer,                                   save :: xsize=0
   5224   character(len=3),                          save :: grid_id_saved=""
   5225   integer(8), dimension(MAX_FIELDS), save :: d_addrs=-9999
   5226   integer(8), dimension(MAX_FIELDS), save :: x_addrs=-9999
   5227 
   5228   if (grid_id==xmap%grids(1)%id) then
   5229      is_complete = .true.
   5230      if(present(complete)) is_complete=complete
   5231      lsize = lsize + 1
   5232      if( lsize > MAX_FIELDS ) then
   5233         write( text,'(i2)' ) MAX_FIELDS
   5234         call error_mesg ('xgrid_mod',  'MAX_FIELDS='//trim(text)//' exceeded for group put_side1_to_xgrid_ug', FATAL)
   5235      endif
   5236      d_addrs(lsize) = LOC(d)
   5237      x_addrs(lsize) = LOC(x)
   5238 
   5239      if(lsize == 1) then
   5240         dsize = size(d(:))
   5241         xsize = size(x(:))
   5242         grid_id_saved = grid_id
   5243      else
   5244         set_mismatch = .false.
   5245         set_mismatch = set_mismatch .OR. (dsize /= size(d(:)))
   5246         set_mismatch = set_mismatch .OR. (xsize /= size(x(:)))
   5247         set_mismatch = set_mismatch .OR. (grid_id_saved /= grid_id)
   5248         if(set_mismatch)then
   5249            write( text,'(i2)' ) lsize
   5250            call error_mesg ('xgrid_mod', 'Incompatible field at count '//text//' for group put_side1_to_xgrid_ug', FATAL )
   5251         endif
   5252      endif
   5253 
   5254      if(is_complete) then
   5255         call put_1_to_xgrid_ug_order_1(d_addrs, x_addrs, xmap, dsize, xsize, lsize)
   5256         d_addrs(1:lsize) = -9999

Page 170         Source Listing                  PUT_SIDE1_TO_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5257         x_addrs(1:lsize) = -9999
   5258         dsize   = 0
   5259         xsize   = 0
   5260         lsize   = 0
   5261         grid_id_saved = ""
   5262      endif
   5263      return
   5264   end if
   5265 
   5266   do g=2,size(xmap%grids(:))
   5267     if (grid_id==xmap%grids(g)%id)    &
   5268       call error_mesg ('xgrid_mod',  &
   5269                        'put_to_xgrid_ug expects a 2D side 2 grid', FATAL)
   5270   end do
   5271 
   5272   call error_mesg ('xgrid_mod', 'put_to_xgrid_ug: could not find grid id', FATAL)
   5273 
   5274 end subroutine put_side1_to_xgrid_ug


ENTRY POINTS

  Name                                           
                                                 
 xgrid_mod_mp_put_side1_to_xgrid_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPLETE                   Dummy  5211     L(4)            4           scalar   ARG,IN           5230                              
 D                          Dummy  5211     R(8)            8     1     1        ARG,IN           5236,5240,5245                    
 DSIZE                      Local  5221     I(4)            4           scalar   SAVE             5221,5240,5245,5255,5258          
 D_ADDRS                    Local  5225     I(8)            8     1     80       TGT,SAVE         5225,5236,5255,5256               
 G                          Local  5219     I(4)            4           scalar                    5266,5267                         
 GRID_ID                    Dummy  5211     CHAR            3           scalar   ARG,IN           5228,5242,5247,5267               
 GRID_ID_SAVED              Local  5224     CHAR            3           scalar   SAVE             5224,5242,5247,5261               
 IS_COMPLETE                Local  5218     L(4)            4           scalar                    5229,5230,5254                    
 LOC                        Func   5236                                 scalar                    5236,5237                         
 LSIZE                      Local  5222     I(4)            4           scalar   SAVE             5222,5231,5232,5236,5237,5239,5249
                                                                                                  ,5255,5256,5257,5260              
 PRESENT                    Func   5230                                 scalar                    5230                              
 PUT_SIDE1_TO_XGRID_UG      Subr   5211                                          PRIV             4510,4621                         
 SET_MISMATCH               Local  5218     L(4)            4           scalar                    5244,5245,5246,5247,5248          
 SIZE                       Func   5240                                 scalar                    5240,5241,5245,5246,5266          
 TEXT                       Local  5220     CHAR            2           scalar                    5233,5234,5249,5250               
 TRIM                       Func   5234                                 scalar                    5234                              
 X                          Dummy  5211     R(8)            8     1     1        ARG,INOUT        5237,5241,5246                    
 XMAP                       Dummy  5211     XMAP_TYPE       928         scalar   ARG,INOUT        5228,5255,5266,5267               
 XSIZE                      Local  5223     I(4)            4           scalar   SAVE             5223,5241,5246,5255,5259          
 X_ADDRS                    Local  5226     I(8)            8     1     80       TGT,SAVE         5226,5237,5255,5257               

Page 171         Source Listing                  PUT_SIDE1_TO_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5275 ! </SUBROUTINE>
   5276 
   5277 !#######################################################################
   5278 
   5279 ! <SUBROUTINE NAME="put_side2_to_xgrid_ug" INTERFACE="put_to_xgrid_ug">
   5280 !   <IN NAME="d"  TYPE="real" DIM="(:,:)" > </IN>
   5281 !   <IN NAME="grid_id"  TYPE=" character(len=3)"  > </IN>
   5282 !   <INOUT NAME="x"  TYPE="real" DIM="(:)" > </INOUT>
   5283 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   5284 
   5285 subroutine put_side2_to_xgrid_ug(d, grid_id, x, xmap)
   5286   real, dimension(:,:), intent(in   ) :: d
   5287   character(len=3),     intent(in   ) :: grid_id
   5288   real, dimension(:),   intent(inout) :: x
   5289   type (xmap_type),     intent(inout) :: xmap
   5290 
   5291   integer :: g
   5292 
   5293   if (grid_id==xmap%grids(1)%id) &
   5294     call error_mesg ('xgrid_mod',  &
   5295                      'put_to_xgrid_ug expects a 2D side 1 grid', FATAL)
   5296 
   5297   do g=2,size(xmap%grids(:))
   5298     if (grid_id==xmap%grids(g)%id) then
   5299          call put_2_to_xgrid_ug(d, xmap%grids(g), x, xmap)
   5300       return;
   5301     end if
   5302   end do
   5303 
   5304   call error_mesg ('xgrid_mod', 'put_to_xgrid_ug: could not find grid id', FATAL)
   5305 
   5306 end subroutine put_side2_to_xgrid_ug

Page 172         Source Listing                  PUT_SIDE2_TO_XGRID_UG
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                           
                                                 
 xgrid_mod_mp_put_side2_to_xgrid_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D                          Dummy  5285     R(8)            8     2     1        ARG,IN           5299                              
 G                          Local  5291     I(4)            4           scalar                    5297,5298,5299                    
 GRID_ID                    Dummy  5285     CHAR            3           scalar   ARG,IN           5293,5298                         
 PUT_SIDE2_TO_XGRID_UG      Subr   5285                                          PRIV             4527,4599,4606                    
 SIZE                       Func   5297                                 scalar                    5297                              
 X                          Dummy  5285     R(8)            8     1     1        ARG,INOUT        5299                              
 XMAP                       Dummy  5285     XMAP_TYPE       928         scalar   ARG,INOUT        5293,5297,5298,5299               

Page 173         Source Listing                  PUT_SIDE2_TO_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5307 ! </SUBROUTINE>
   5308 
   5309 !#######################################################################
   5310 
   5311 ! <SUBROUTINE NAME="get_side2_from_xgrid_ug" INTERFACE="get_from_xgrid_ug">
   5312 !   <IN NAME="x"  TYPE="real" DIM="(:)" > </IN>
   5313 !   <IN NAME="grid_id"  TYPE=" character(len=3)"  > </IN>
   5314 !   <OUT NAME="d"  TYPE="real" DIM="(:,:)" > </OUT>
   5315 !   <INOUT NAME="xmap"  TYPE="xmap_type"  > </INOUT>
   5316 
   5317 subroutine get_side2_from_xgrid_ug(d, grid_id, x, xmap)
   5318   real, dimension(:,:), intent(  out) :: d
   5319   character(len=3),     intent(in   ) :: grid_id
   5320   real, dimension(:),   intent(in   ) :: x
   5321   type (xmap_type),     intent(in   ) :: xmap
   5322 
   5323   integer :: g
   5324 
   5325   if (grid_id==xmap%grids(1)%id) &
   5326     call error_mesg ('xgrid_mod',  &
   5327                      'get_from_xgrid_ug expects a 2D side 1 grid', FATAL)
   5328 
   5329   do g=2,size(xmap%grids(:))
   5330     if (grid_id==xmap%grids(g)%id) then
   5331       call get_2_from_xgrid_ug(d, xmap%grids(g), x, xmap)
   5332       return;
   5333     end if
   5334   end do
   5335 
   5336   call error_mesg ('xgrid_mod', 'get_from_xgrid_ug: could not find grid id', FATAL)
   5337 
   5338 end subroutine get_side2_from_xgrid_ug

Page 174         Source Listing                  GET_SIDE2_FROM_XGRID_UG
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                             
                                                   
 xgrid_mod_mp_get_side2_from_xgrid_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D                          Dummy  5317     R(8)            8     2     1        ARG,OUT          5331                              
 G                          Local  5323     I(4)            4           scalar                    5329,5330,5331                    
 GET_SIDE2_FROM_XGRID_UG    Subr   5317                                          PRIV             4522,4635                         
 GRID_ID                    Dummy  5317     CHAR            3           scalar   ARG,IN           5325,5330                         
 SIZE                       Func   5329                                 scalar                    5329                              
 X                          Dummy  5317     R(8)            8     1     1        ARG,IN           5331                              
 XMAP                       Dummy  5317     XMAP_TYPE       928         scalar   ARG,IN           5325,5329,5330,5331               

Page 175         Source Listing                  GET_SIDE2_FROM_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5339 ! </SUBROUTINE>
   5340 
   5341 
   5342 !#######################################################################
   5343 
   5344 subroutine put_1_to_xgrid_ug_order_1(d_addrs, x_addrs, xmap, dsize, xsize, lsize)
   5345   integer(8), dimension(:), intent(in) :: d_addrs
   5346   integer(8), dimension(:), intent(in) :: x_addrs
   5347   type (xmap_type),              intent(inout) :: xmap
   5348   integer,                          intent(in) :: dsize, xsize, lsize
   5349 
   5350   integer                         :: i, j, p, buffer_pos, msgsize
   5351   integer                         :: from_pe, to_pe, pos, n, l, count
   5352   integer                         :: ibegin, istart, iend, start_pos
   5353   type (comm_type), pointer, save :: comm =>NULL()
   5354   real                            :: recv_buffer(xmap%put1%recvsize*lsize)
   5355   real                            :: send_buffer(xmap%put1%sendsize*lsize)
   5356   real                            :: unpack_buffer(xmap%put1%recvsize)
   5357 
   5358   real, dimension(dsize)   :: d
   5359   real, dimension(xsize)   :: x
   5360   pointer(ptr_d, d)
   5361   pointer(ptr_x, x)
   5362   integer :: lll
   5363 
   5364   call mpp_clock_begin(id_put_1_to_xgrid_order_1)
   5365 
   5366 !--- pre-post receiving
   5367   comm => xmap%put1
   5368   do p = 1, comm%nrecv
   5369      msgsize = comm%recv(p)%count*lsize
   5370      from_pe = comm%recv(p)%pe
   5371      buffer_pos = comm%recv(p)%buffer_pos*lsize
   5372      call mpp_recv(recv_buffer(buffer_pos+1), glen=msgsize, from_pe = from_pe, block=.false., tag=COMM_TAG_7)
   5373   enddo
   5374 
   5375 !--- send the data
   5376   buffer_pos = 0
   5377   do p = 1, comm%nsend
   5378      msgsize = comm%send(p)%count*lsize
   5379      to_pe = comm%send(p)%pe
   5380      pos = buffer_pos
   5381      do l = 1, lsize
   5382         ptr_d = d_addrs(l)
   5383         do n = 1, comm%send(p)%count
   5384            pos = pos + 1
   5385            lll = comm%send(p)%i(n)
   5386            send_buffer(pos) = d(lll)
   5387         enddo
   5388      enddo
   5389      call mpp_send(send_buffer(buffer_pos+1), plen=msgsize, to_pe = to_pe, tag=COMM_TAG_7 )
   5390      buffer_pos = buffer_pos + msgsize
   5391   enddo
   5392 
   5393   call mpp_sync_self(check=EVENT_RECV)
   5394 
   5395 !--- unpack the buffer

Page 176         Source Listing                  PUT_1_TO_XGRID_UG_ORDER_1
2021-06-01 08:56                                 xgrid.F90

   5396   if( lsize == 1) then
   5397      ptr_x = x_addrs(1)
   5398      do l=1,xmap%size_put1
   5399         x(l) =  recv_buffer(xmap%x1_put(l)%pos)
   5400      end do
   5401   else
   5402      start_pos = 0
   5403 !$OMP parallel do default(none) shared(lsize,x_addrs,comm,recv_buffer,xmap) &
   5404 !$OMP                          private(ptr_x,count,ibegin,istart,iend,pos,unpack_buffer)
   5405      do l = 1, lsize
   5406         ptr_x = x_addrs(l)
   5407         do p = 1, comm%nrecv
   5408            count = comm%recv(p)%count
   5409            ibegin = comm%recv(p)%buffer_pos*lsize + 1
   5410            istart = ibegin + (l-1)*count
   5411            iend = istart + count - 1
   5412            pos = comm%recv(p)%buffer_pos
   5413            do n = istart, iend
   5414               pos = pos + 1
   5415               unpack_buffer(pos) = recv_buffer(n)
   5416            enddo
   5417         enddo
   5418         do i=1,xmap%size_put1
   5419            x(i) =  unpack_buffer(xmap%x1_put(i)%pos)
   5420         end do
   5421      enddo
   5422   endif
   5423 
   5424   call mpp_sync_self()
   5425 
   5426   call mpp_clock_end(id_put_1_to_xgrid_order_1)
   5427 
   5428 end subroutine put_1_to_xgrid_ug_order_1

Page 177         Source Listing                  PUT_1_TO_XGRID_UG_ORDER_1
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                               
                                                     
 xgrid_mod_mp_put_1_to_xgrid_ug_order_1_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BUFFER_POS                 Local  5350     I(4)            4           scalar                    5371,5372,5376,5380,5389,5390     
 COMM                       Local  5353     COMM_TYPE       232         scalar   PTR,SAVE         5353,5367,5368,5369,5370,5371,5377
                                                                                                  ,5378,5379,5383,5385,5403,5407,540
                                                                                                  8,5409,5412                       
 COUNT                      Local  5351     I(4)            4           scalar                    5404,5408,5410,5411               
 D                          Local  5358     R(8)            8     1     0                         5386                              
 DSIZE                      Dummy  5344     I(4)            4           scalar   ARG,IN           5358                              
 D_ADDRS                    Dummy  5344     I(8)            8     1     1        ARG,IN           5382                              
 FROM_PE                    Local  5351     I(4)            4           scalar                    5370,5372                         
 I                          Local  5350     I(4)            4           scalar                    5418,5419                         
 IBEGIN                     Local  5352     I(4)            4           scalar                    5404,5409,5410                    
 IEND                       Local  5352     I(4)            4           scalar                    5404,5411,5413                    
 ISTART                     Local  5352     I(4)            4           scalar                    5404,5410,5411,5413               
 J                          Local  5350     I(4)            4           scalar                                                      
 L                          Local  5351     I(4)            4           scalar                    5381,5382,5398,5399,5405,5406,5410
 LLL                        Local  5362     I(4)            4           scalar                    5385,5386                         
 LSIZE                      Dummy  5344     I(4)            4           scalar   ARG,IN           5354,5355,5369,5371,5378,5381,5396
                                                                                                  ,5403,5405,5409                   
 MSGSIZE                    Local  5350     I(4)            4           scalar                    5369,5372,5378,5389,5390          
 N                          Local  5351     I(4)            4           scalar                    5383,5385,5413,5415               
 P                          Local  5350     I(4)            4           scalar                    5368,5369,5370,5371,5377,5378,5379
                                                                                                  ,5383,5385,5407,5408,5409,5412    
 POS                        Local  5351     I(4)            4           scalar                    5380,5384,5386,5404,5412,5414,5415
 PTR_D                      Local  5360     I(8)            8           scalar   PTR              5382                              
 PTR_X                      Local  5361     I(8)            8           scalar   PTR              5397,5404,5406                    
 PUT_1_TO_XGRID_UG_ORDER_1  Subr   5344                                                           5255                              
 RECV_BUFFER                Local  5354     R(8)            8     1     0                         5372,5399,5403,5415               
 SEND_BUFFER                Local  5355     R(8)            8     1     0                         5386,5389                         
 START_POS                  Local  5352     I(4)            4           scalar                    5402                              
 TO_PE                      Local  5351     I(4)            4           scalar                    5379,5389                         
 UNPACK_BUFFER              Local  5356     R(8)            8     1     0                         5404,5415,5419                    
 X                          Local  5359     R(8)            8     1     0                         5399,5419                         
 XMAP                       Dummy  5344     XMAP_TYPE       928         scalar   ARG,INOUT        5354,5355,5356,5367,5398,5399,5403
                                                                                                  ,5418,5419                        
 XSIZE                      Dummy  5344     I(4)            4           scalar   ARG,IN           5359                              
 X_ADDRS                    Dummy  5344     I(8)            8     1     1        ARG,IN           5397,5403,5406                    

Page 178         Source Listing                  PUT_1_TO_XGRID_UG_ORDER_1
2021-06-01 08:56                                 xgrid.F90

   5429 
   5430 !#######################################################################
   5431 
   5432 subroutine put_2_to_xgrid_ug(d, grid, x, xmap)
   5433 type (grid_type),                                intent(in) :: grid
   5434 real, dimension(grid%ls_me:grid%le_me, grid%km), intent(in) :: d
   5435 real, dimension(:    ), intent(inout) :: x
   5436 type (xmap_type),       intent(in   ) :: xmap
   5437 
   5438   integer                 ::   l
   5439   call mpp_clock_begin(id_put_2_to_xgrid)
   5440 
   5441   do l=grid%first,grid%last
   5442     x(l) = d(xmap%x2(l)%l,xmap%x2(l)%k)
   5443   end do
   5444 
   5445   call mpp_clock_end(id_put_2_to_xgrid)
   5446 end subroutine put_2_to_xgrid_ug


ENTRY POINTS

  Name                                       
                                             
 xgrid_mod_mp_put_2_to_xgrid_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D                          Dummy  5432     R(8)            8     2     0        ARG,IN           5442                              
 GRID                       Dummy  5432     GRID_TYPE       4888        scalar   ARG,IN           5434,5441                         
 L                          Local  5438     I(4)            4           scalar                    5441,5442                         
 PUT_2_TO_XGRID_UG          Subr   5432                                                           5299                              
 X                          Dummy  5432     R(8)            8     1     1        ARG,INOUT        5442                              
 XMAP                       Dummy  5432     XMAP_TYPE       928         scalar   ARG,IN           5442                              

Page 179         Source Listing                  PUT_2_TO_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5447 
   5448 
   5449 subroutine get_1_from_xgrid_ug(d_addrs, x_addrs, xmap, isize, xsize, lsize)
   5450   integer(8), dimension(:), intent(in) :: d_addrs
   5451   integer(8), dimension(:), intent(in) :: x_addrs
   5452   type (xmap_type),              intent(inout) :: xmap
   5453   integer,                          intent(in) :: isize, xsize, lsize
   5454 
   5455   real, dimension(xmap%size), target :: dg(xmap%size, lsize)
   5456   integer                            :: i, j, l, p, n, m
   5457   integer                            :: msgsize, buffer_pos, pos
   5458   integer                            :: istart, iend, count
   5459   real              , pointer, save  :: dgp =>NULL()
   5460   type  (grid_type) , pointer, save  :: grid1 =>NULL()
   5461   type  (comm_type) , pointer, save  :: comm  =>NULL()
   5462   type(overlap_type), pointer, save  :: send => NULL()
   5463   type(overlap_type), pointer, save  :: recv => NULL()
   5464   real                               :: recv_buffer(xmap%get1%recvsize*lsize*3)
   5465   real                               :: send_buffer(xmap%get1%sendsize*lsize*3)
   5466   real                               :: unpack_buffer(xmap%get1%recvsize*3)
   5467   real                               :: d(isize)
   5468   real, dimension(xsize)             :: x
   5469   pointer(ptr_d, d)
   5470   pointer(ptr_x, x)
   5471 
   5472   call mpp_clock_begin(id_get_1_from_xgrid)
   5473 
   5474   comm => xmap%get1
   5475   grid1 => xmap%grids(1)
   5476 
   5477   do p = 1, comm%nrecv
   5478      recv => comm%recv(p)
   5479      msgsize = recv%count*lsize
   5480      buffer_pos = recv%buffer_pos*lsize
   5481      call mpp_recv(recv_buffer(buffer_pos+1), glen=msgsize, from_pe = recv%pe, block=.false., tag=COMM_TAG_9)
   5482   enddo
   5483 
   5484   dg = 0.0;
   5485 !$OMP parallel do default(none) shared(lsize,xmap,dg,x_addrs) private(dgp,ptr_x)
   5486   do l = 1, lsize
   5487      ptr_x = x_addrs(l)
   5488      do i=1,xmap%size
   5489         dgp => dg(xmap%x1(i)%pos,l)
   5490         dgp =  dgp + xmap%x1(i)%area*x(i)
   5491      enddo
   5492   enddo
   5493 
   5494 
   5495 !--- send the data
   5496   buffer_pos = 0
   5497   istart = 1
   5498   do p = 1, comm%nsend
   5499      send => comm%send(p)
   5500      msgsize = send%count*lsize
   5501      pos = buffer_pos
   5502      istart = send%buffer_pos+1
   5503      iend = istart + send%count - 1

Page 180         Source Listing                  GET_1_FROM_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5504      do l = 1, lsize
   5505         do n = istart, iend
   5506            pos = pos + 1
   5507            send_buffer(pos) = dg(n,l)
   5508         enddo
   5509      enddo
   5510      call mpp_send(send_buffer(buffer_pos+1), plen=msgsize, to_pe = send%pe, tag=COMM_TAG_9 )
   5511      buffer_pos = buffer_pos + msgsize
   5512      istart = iend + 1
   5513   enddo
   5514 
   5515   call mpp_sync_self(check=EVENT_RECV)
   5516 
   5517 !--- unpack the buffer
   5518   do l = 1, lsize
   5519      ptr_d = d_addrs(l)
   5520      d = 0.0
   5521   enddo
   5522 !--- To bitwise reproduce old results, first copy the data onto its own pe.
   5523 
   5524   do p = 1, comm%nrecv
   5525      recv => comm%recv(p)
   5526      count = recv%count
   5527      buffer_pos = recv%buffer_pos*lsize
   5528      if( recv%pe == xmap%me ) then
   5529 !$OMP parallel do default(none) shared(lsize,recv,recv_buffer,buffer_pos,d_addrs,count) &
   5530 !$OMP                          private(ptr_d,i,pos)
   5531         do l = 1, lsize
   5532            pos = buffer_pos + (l-1)*count
   5533            ptr_d = d_addrs(l)
   5534            do n = 1,count
   5535               i = recv%i(n)
   5536               pos = pos + 1
   5537               d(i) = recv_buffer(pos)
   5538            enddo
   5539         enddo
   5540         exit
   5541      endif
   5542   enddo
   5543 
   5544   pos = 0
   5545   do m = 1, comm%nrecv
   5546      p = comm%unpack_ind(m)
   5547      recv => comm%recv(p)
   5548      if( recv%pe == xmap%me ) then
   5549         cycle
   5550      endif
   5551      buffer_pos = recv%buffer_pos*lsize
   5552 !$OMP parallel do default(none) shared(lsize,recv,recv_buffer,buffer_pos,d_addrs) &
   5553 !$OMP                          private(ptr_d,i,j,pos)
   5554      do l = 1, lsize
   5555         pos = buffer_pos + (l-1)*recv%count
   5556         ptr_d = d_addrs(l)
   5557         do n = 1, recv%count
   5558            i = recv%i(n)
   5559            pos = pos + 1
   5560            d(i) = d(i) + recv_buffer(pos)

Page 181         Source Listing                  GET_1_FROM_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5561         enddo
   5562      enddo
   5563   enddo
   5564 
   5565 !
   5566 ! normalize with side 1 grid cell areas
   5567 !
   5568 !$OMP parallel do default(none) shared(lsize,d_addrs,grid1) private(ptr_d)
   5569   do l = 1, lsize
   5570      ptr_d = d_addrs(l)
   5571      d = d * grid1%area_inv(:,1)
   5572   enddo
   5573   call mpp_sync_self()
   5574   call mpp_clock_end(id_get_1_from_xgrid)
   5575 
   5576 end subroutine get_1_from_xgrid_ug


ENTRY POINTS

  Name                                         
                                               
 xgrid_mod_mp_get_1_from_xgrid_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BUFFER_POS                 Local  5457     I(4)            4           scalar                    5480,5481,5496,5501,5510,5511,5527
                                                                                                  ,5529,5532,5551,5552,5555         
 COMM                       Local  5461     COMM_TYPE       232         scalar   PTR,SAVE         5461,5474,5477,5478,5498,5499,5524
                                                                                                  ,5525,5545,5546,5547              
 COUNT                      Local  5458     I(4)            4           scalar                    5526,5529,5532,5534               
 D                          Local  5467     R(8)            8     1     0                         5520,5537,5560,5571               
 DG                         Local  5455     R(8)            8     2     0        TGT              5484,5485,5489,5507               
 DGP                        Local  5459     R(8)            8           scalar   PTR,SAVE         5459,5485,5489,5490               
 D_ADDRS                    Dummy  5449     I(8)            8     1     1        ARG,IN           5519,5529,5533,5552,5556,5568,5570
 GET_1_FROM_XGRID_UG        Subr   5449                                                           5179                              
 GRID1                      Local  5460     GRID_TYPE       4888        scalar   PTR,SAVE         5460,5475,5568,5571               
 I                          Local  5456     I(4)            4           scalar                    5488,5489,5490,5530,5535,5537,5553
                                                                                                  ,5558,5560                        
 IEND                       Local  5458     I(4)            4           scalar                    5503,5505,5512                    
 ISIZE                      Dummy  5449     I(4)            4           scalar   ARG,IN           5467                              
 ISTART                     Local  5458     I(4)            4           scalar                    5497,5502,5503,5505,5512          
 J                          Local  5456     I(4)            4           scalar                    5553                              
 L                          Local  5456     I(4)            4           scalar                    5486,5487,5489,5504,5507,5518,5519
                                                                                                  ,5531,5532,5533,5554,5555,5556,556
                                                                                                  9,5570                            
 LSIZE                      Dummy  5449     I(4)            4           scalar   ARG,IN           5455,5464,5465,5479,5480,5485,5486
                                                                                                  ,5500,5504,5518,5527,5529,5531,555
                                                                                                  1,5552,5554,5568,5569             
 M                          Local  5456     I(4)            4           scalar                    5545,5546                         
 MSGSIZE                    Local  5457     I(4)            4           scalar                    5479,5481,5500,5510,5511          
 N                          Local  5456     I(4)            4           scalar                    5505,5507,5534,5535,5557,5558     
 P                          Local  5456     I(4)            4           scalar                    5477,5478,5498,5499,5524,5525,5546
                                                                                                  ,5547                             

Page 182         Source Listing                  GET_1_FROM_XGRID_UG
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 POS                        Local  5457     I(4)            4           scalar                    5501,5506,5507,5530,5532,5536,5537
                                                                                                  ,5544,5553,5555,5559,5560         
 PTR_D                      Local  5469     I(8)            8           scalar   PTR              5519,5530,5533,5553,5556,5568,5570
 PTR_X                      Local  5470     I(8)            8           scalar   PTR              5485,5487                         
 RECV                       Local  5463     OVERLAP_TYPE    520         scalar   PTR,SAVE         5463,5478,5479,5480,5481,5525,5526
                                                                                                  ,5527,5528,5529,5535,5547,5548,555
                                                                                                  1,5552,5555,5557,5558             
 RECV_BUFFER                Local  5464     R(8)            8     1     0                         5481,5529,5537,5552,5560          
 SEND                       Local  5462     OVERLAP_TYPE    520         scalar   PTR,SAVE         5462,5499,5500,5502,5503,5510     
 SEND_BUFFER                Local  5465     R(8)            8     1     0                         5507,5510                         
 UNPACK_BUFFER              Local  5466     R(8)            8     1     0                                                           
 X                          Local  5468     R(8)            8     1     0                         5490                              
 XMAP                       Dummy  5449     XMAP_TYPE       928         scalar   ARG,INOUT        5455,5464,5465,5466,5474,5475,5485
                                                                                                  ,5488,5489,5490,5528,5548         
 XSIZE                      Dummy  5449     I(4)            4           scalar   ARG,IN           5468                              
 X_ADDRS                    Dummy  5449     I(8)            8     1     1        ARG,IN           5485,5487                         

Page 183         Source Listing                  GET_1_FROM_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5577 
   5578 !#######################################################################
   5579 
   5580 subroutine get_1_from_xgrid_ug_repro(d_addrs, x_addrs, xmap, xsize, lsize)
   5581   integer(8), dimension(:), intent(in) :: d_addrs
   5582   integer(8), dimension(:), intent(in) :: x_addrs
   5583   type (xmap_type),              intent(inout) :: xmap
   5584   integer,                          intent(in) :: xsize, lsize
   5585 
   5586   integer                            :: g, i, j, k, p, l, n, l2, m, l3
   5587   integer                            :: msgsize, buffer_pos, pos
   5588   type (grid_type), pointer, save :: grid =>NULL()
   5589   type(comm_type),  pointer, save :: comm => NULL()
   5590   type(overlap_type), pointer, save  :: send => NULL()
   5591   type(overlap_type), pointer, save  :: recv => NULL()
   5592     integer,  dimension(0:xmap%npes-1) :: pl, ml
   5593   real                               :: recv_buffer(xmap%recv_count_repro_tot*lsize)
   5594   real                               :: send_buffer(xmap%send_count_repro_tot*lsize)
   5595   real                               :: d(xmap%grids(1)%ls_me:xmap%grids(1)%le_me)
   5596   real, dimension(xsize)             :: x
   5597   pointer(ptr_d, d)
   5598   pointer(ptr_x, x)
   5599 
   5600   call mpp_clock_begin(id_get_1_from_xgrid_repro)
   5601   comm => xmap%get1_repro
   5602 !--- pre-post receiving
   5603   do p = 1, comm%nrecv
   5604      recv => comm%recv(p)
   5605      msgsize = recv%count*lsize
   5606      buffer_pos = recv%buffer_pos*lsize
   5607      call mpp_recv(recv_buffer(buffer_pos+1), glen=msgsize, from_pe = recv%pe, block=.false., tag=COMM_TAG_10)
   5608      n = recv%pe -xmap%root_pe
   5609      pl(n) = buffer_pos
   5610      ml(n) = recv%count
   5611   enddo
   5612 
   5613 !pack the data
   5614   send_buffer(:) = 0.0
   5615 !$OMP parallel do default(none) shared(lsize,x_addrs,comm,xmap,send_buffer) &
   5616 !$OMP                          private(ptr_x,i,j,g,l2,pos,send)
   5617   do p = 1, comm%nsend
   5618      pos = comm%send(p)%buffer_pos*lsize
   5619      send => comm%send(p)
   5620      do l = 1,lsize
   5621         ptr_x = x_addrs(l)
   5622         do n = 1, send%count
   5623            i = send%i(n)
   5624            j = send%j(n)
   5625            g = send%g(n)
   5626            l2 = send%xloc(n)
   5627            pos = pos + 1
   5628            do k =1, xmap%grids(g)%km
   5629              if(xmap%grids(g)%frac_area(i,j,k)/=0.0) then
   5630               l2 = l2+1
   5631               send_buffer(pos) = send_buffer(pos) + xmap%x1(l2)%area *x(l2)
   5632              endif
   5633            enddo

Page 184         Source Listing                  GET_1_FROM_XGRID_UG_REPRO
2021-06-01 08:56                                 xgrid.F90

   5634          enddo
   5635       enddo
   5636    enddo
   5637 
   5638   do p =1, comm%nsend
   5639      buffer_pos = comm%send(p)%buffer_pos*lsize
   5640      msgsize = comm%send(p)%count*lsize
   5641      call mpp_send(send_buffer(buffer_pos+1), plen=msgsize, to_pe=comm%send(p)%pe, tag=COMM_TAG_10)
   5642   enddo
   5643 
   5644   do l = 1, lsize
   5645      ptr_d = d_addrs(l)
   5646      d = 0
   5647   enddo
   5648 
   5649   call mpp_sync_self(check=EVENT_RECV)
   5650 
   5651 !$OMP parallel do default(none) shared(lsize,d_addrs,xmap,recv_buffer,pl,ml) &
   5652 !$OMP                          private(ptr_d,grid,i,j,p,pos)
   5653   do l = 1, lsize
   5654      ptr_d = d_addrs(l)
   5655      do g=2,size(xmap%grids(:))
   5656         grid => xmap%grids(g)
   5657         do l3=1,grid%size_repro ! index into side1 grid's patterns
   5658            i = grid%x_repro(l3)%l1
   5659            p = grid%x_repro(l3)%pe-xmap%root_pe
   5660            pos = pl(p) + (l-1)*ml(p) + grid%x_repro(l3)%recv_pos
   5661            d(i) = d(i) + recv_buffer(pos)
   5662         end do
   5663      end do
   5664 ! normalize with side 1 grid cell areas
   5665      d = d * xmap%grids(1)%area_inv(:,1)
   5666   enddo
   5667 
   5668   call mpp_sync_self()
   5669 
   5670   call mpp_clock_end(id_get_1_from_xgrid_repro)
   5671 
   5672 end subroutine get_1_from_xgrid_ug_repro

Page 185         Source Listing                  GET_1_FROM_XGRID_UG_REPRO
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                               
                                                     
 xgrid_mod_mp_get_1_from_xgrid_ug_repro_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BUFFER_POS                 Local  5587     I(4)            4           scalar                    5606,5607,5609,5639,5641          
 COMM                       Local  5589     COMM_TYPE       232         scalar   PTR,SAVE         5589,5601,5603,5604,5615,5617,5618
                                                                                                  ,5619,5638,5639,5640,5641         
 D                          Local  5595     R(8)            8     1     0                         5646,5661,5665                    
 D_ADDRS                    Dummy  5580     I(8)            8     1     1        ARG,IN           5645,5651,5654                    
 G                          Local  5586     I(4)            4           scalar                    5616,5625,5628,5629,5655,5656     
 GET_1_FROM_XGRID_UG_REPRO  Subr   5580                                                           5177                              
 GRID                       Local  5588     GRID_TYPE       4888        scalar   PTR,SAVE         5588,5652,5656,5657,5658,5659,5660
 I                          Local  5586     I(4)            4           scalar                    5616,5623,5629,5652,5658,5661     
 J                          Local  5586     I(4)            4           scalar                    5616,5624,5629,5652               
 K                          Local  5586     I(4)            4           scalar                    5628,5629                         
 L                          Local  5586     I(4)            4           scalar                    5620,5621,5644,5645,5653,5654,5660
 L2                         Local  5586     I(4)            4           scalar                    5616,5626,5630,5631               
 L3                         Local  5586     I(4)            4           scalar                    5657,5658,5659,5660               
 LSIZE                      Dummy  5580     I(4)            4           scalar   ARG,IN           5593,5594,5605,5606,5615,5618,5620
                                                                                                  ,5639,5640,5644,5651,5653         
 M                          Local  5586     I(4)            4           scalar                                                      
 ML                         Local  5592     I(4)            4     1     0                         5610,5651,5660                    
 MSGSIZE                    Local  5587     I(4)            4           scalar                    5605,5607,5640,5641               
 N                          Local  5586     I(4)            4           scalar                    5608,5609,5610,5622,5623,5624,5625
                                                                                                  ,5626                             
 P                          Local  5586     I(4)            4           scalar                    5603,5604,5617,5618,5619,5638,5639
                                                                                                  ,5640,5641,5652,5659,5660         
 PL                         Local  5592     I(4)            4     1     0                         5609,5651,5660                    
 POS                        Local  5587     I(4)            4           scalar                    5616,5618,5627,5631,5652,5660,5661
 PTR_D                      Local  5597     I(8)            8           scalar   PTR              5645,5652,5654                    
 PTR_X                      Local  5598     I(8)            8           scalar   PTR              5616,5621                         
 RECV                       Local  5591     OVERLAP_TYPE    520         scalar   PTR,SAVE         5591,5604,5605,5606,5607,5608,5610
 RECV_BUFFER                Local  5593     R(8)            8     1     0                         5607,5651,5661                    
 SEND                       Local  5590     OVERLAP_TYPE    520         scalar   PTR,SAVE         5590,5616,5619,5622,5623,5624,5625
                                                                                                  ,5626                             
 SEND_BUFFER                Local  5594     R(8)            8     1     0                         5614,5615,5631,5641               
 SIZE                       Func   5655                                 scalar                    5655                              
 X                          Local  5596     R(8)            8     1     0                         5631                              
 XMAP                       Dummy  5580     XMAP_TYPE       928         scalar   ARG,INOUT        5593,5594,5595,5601,5608,5615,5628
                                                                                                  ,5629,5631,5651,5655,5656,5659,566
                                                                                                  5                                 
 XSIZE                      Dummy  5580     I(4)            4           scalar   ARG,IN           5596                              
 X_ADDRS                    Dummy  5580     I(8)            8     1     1        ARG,IN           5615,5621                         

Page 186         Source Listing                  GET_1_FROM_XGRID_UG_REPRO
2021-06-01 08:56                                 xgrid.F90

   5673 
   5674 !#######################################################################
   5675 
   5676 subroutine get_2_from_xgrid_ug(d, grid, x, xmap)
   5677 type (grid_type),                                intent(in ) :: grid
   5678 real, dimension(grid%ls_me:grid%le_me, grid%km), intent(out) :: d
   5679 real, dimension(:),     intent(in   ) :: x
   5680 type (xmap_type),       intent(in   ) :: xmap
   5681 
   5682   integer                 :: l, k
   5683 
   5684   call mpp_clock_begin(id_get_2_from_xgrid)
   5685 
   5686   d = 0.0
   5687   do l=grid%first_get,grid%last_get
   5688     d(xmap%x2_get(l)%l,xmap%x2_get(l)%k) = &
   5689             d(xmap%x2_get(l)%l,xmap%x2_get(l)%k) + xmap%x2_get(l)%area*x(xmap%x2_get(l)%pos)
   5690   end do
   5691 !
   5692 !  normalize with side 2 grid cell areas
   5693 !
   5694   do k=1,size(d,2)
   5695     d(:,k) = d(:,k) * grid%area_inv(:,1)
   5696   end do
   5697 
   5698   call mpp_clock_end(id_get_2_from_xgrid)
   5699 
   5700 end subroutine get_2_from_xgrid_ug

Page 187         Source Listing                  GET_2_FROM_XGRID_UG
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                         
                                               
 xgrid_mod_mp_get_2_from_xgrid_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D                          Dummy  5676     R(8)            8     2     0        ARG,OUT          5686,5688,5689,5694,5695          
 GET_2_FROM_XGRID_UG        Subr   5676                                                           5331                              
 GRID                       Dummy  5676     GRID_TYPE       4888        scalar   ARG,IN           5678,5687,5695                    
 K                          Local  5682     I(4)            4           scalar                    5694,5695                         
 L                          Local  5682     I(4)            4           scalar                    5687,5688,5689                    
 SIZE                       Func   5694                                 scalar                    5694                              
 X                          Dummy  5676     R(8)            8     1     1        ARG,IN           5689                              
 XMAP                       Dummy  5676     XMAP_TYPE       928         scalar   ARG,IN           5688,5689                         

Page 188         Source Listing                  GET_2_FROM_XGRID_UG
2021-06-01 08:56                                 xgrid.F90

   5701 
   5702 !######################################################################
   5703 !> @return logical in_box_me
   5704 logical function in_box_me(i, j, grid)
   5705   integer,          intent(in) :: i, j
   5706   type (grid_type), intent(in) :: grid
   5707   integer :: g
   5708 
   5709   if(grid%is_ug) then
   5710      g = (j-1)*grid%ni + i
   5711      in_box_me = (g>=grid%gs_me) .and. (g<=grid%ge_me)
   5712   else
   5713      in_box_me = (i>=grid%is_me) .and. (i<=grid%ie_me) .and. (j>=grid%js_me) .and. (j<=grid%je_me)
   5714   endif
   5715 
   5716 end function in_box_me


ENTRY POINTS

  Name                               
                                     
 xgrid_mod_mp_in_box_me_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 G                          Local  5707     I(4)            4           scalar                    5710,5711                         
 GRID                       Dummy  5704     GRID_TYPE       4888        scalar   ARG,IN           5709,5710,5711,5713               
 I                          Dummy  5704     I(4)            4           scalar   ARG,IN           5710,5713                         
 IN_BOX_ME                  Func   5704     L(4)            4           scalar                    1270,1310,1372,1467,5711,5713,6203
                                                                                                  ,6243,6305,6400                   
 J                          Dummy  5704     I(4)            4           scalar   ARG,IN           5710,5713                         

Page 189         Source Listing                  IN_BOX_ME
2021-06-01 08:56                                 xgrid.F90

   5717 
   5718 !######################################################################
   5719 !> @return logical in_box_nbr
   5720 logical function in_box_nbr(i, j, grid, p)
   5721   integer,          intent(in) :: i, j, p
   5722   type (grid_type), intent(in) :: grid
   5723   integer :: g
   5724 
   5725   if(grid%is_ug) then
   5726      g = (j-1)*grid%ni + i
   5727      in_box_nbr = (g>=grid%gs(p)) .and. (g<=grid%ge(p))
   5728   else
   5729      in_box_nbr = (i>=grid%is(p)) .and. (i<=grid%ie(p)) .and. (j>=grid%js(p)) .and. (j<=grid%je(p))
   5730   endif
   5731 
   5732 end function in_box_nbr


ENTRY POINTS

  Name                                
                                      
 xgrid_mod_mp_in_box_nbr_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 G                          Local  5723     I(4)            4           scalar                    5726,5727                         
 GRID                       Dummy  5720     GRID_TYPE       4888        scalar   ARG,IN           5725,5726,5727,5729               
 I                          Dummy  5720     I(4)            4           scalar   ARG,IN           5726,5729                         
 IN_BOX_NBR                 Func   5720     L(4)            4           scalar                    1025,1035,1086,1104,1284,1336,1381
                                                                                                  ,1486,2578,5727,5729,5960,5970,601
                                                                                                  9,6037,6217,6269,6314,6419        
 J                          Dummy  5720     I(4)            4           scalar   ARG,IN           5726,5729                         
 P                          Dummy  5720     I(4)            4           scalar   ARG,IN           5727,5729                         

Page 190         Source Listing                  IN_BOX_NBR
2021-06-01 08:56                                 xgrid.F90

   5733 
   5734 
   5735 !end module xgrid_mod
   5736 
   5737 
   5738 ! <INFO>
   5739 
   5740 !   <REFERENCE>
   5741 !      A <LINK SRC="http://www.gfdl.noaa.gov/~mw/docs/grid_coupling.html"> guide </LINK>to grid coupling in FMS.
   5742 !   </REFERENCE>
   5743 !   <REFERENCE>
   5744 !      A simple xgrid <LINK SRC="http://www.gfdl.gov/~mw/docs/xgrid_example.f90.txt"> example. </LINK>
   5745 !   </REFERENCE>
   5746 
   5747 ! </INFO>
   5748 
   5749 !#######################################################################
   5750 
   5751 subroutine load_xgrid_use_mpp_io (xmap, grid, grid_file, grid1_id, grid_id, tile1, tile2, use_higher_order)
   5752 type(xmap_type), intent(inout)         :: xmap
   5753 type(grid_type), intent(inout)         :: grid
   5754 character(len=*), intent(in)           :: grid_file
   5755 character(len=3), intent(in)           :: grid1_id, grid_id
   5756 integer,          intent(in)           :: tile1, tile2
   5757 logical,        intent(in)             :: use_higher_order
   5758 
   5759   integer, pointer,       dimension(:)   :: i1=>NULL(), j1=>NULL()
   5760   integer, pointer,       dimension(:)   :: i2=>NULL(), j2=>NULL()
   5761   real,    pointer,       dimension(:)   :: di=>NULL(), dj=>NULL()
   5762   real,    pointer,       dimension(:)   :: area =>NULL()
   5763   integer, pointer,       dimension(:)   :: i1_tmp=>NULL(), j1_tmp=>NULL()
   5764   integer, pointer,       dimension(:)   :: i2_tmp=>NULL(), j2_tmp=>NULL()
   5765   real,    pointer,       dimension(:)   :: di_tmp=>NULL(), dj_tmp=>NULL()
   5766   real,    pointer,       dimension(:)   :: area_tmp =>NULL()
   5767   integer, pointer,       dimension(:)   :: i1_side1=>NULL(), j1_side1=>NULL()
   5768   integer, pointer,       dimension(:)   :: i2_side1=>NULL(), j2_side1=>NULL()
   5769   real,    pointer,       dimension(:)   :: di_side1=>NULL(), dj_side1=>NULL()
   5770   real,    pointer,       dimension(:)   :: area_side1 =>NULL()
   5771 
   5772   real,    allocatable, dimension(:,:) :: tmp
   5773   real,    allocatable, dimension(:)   :: send_buffer, recv_buffer
   5774   type (grid_type),   pointer, save    :: grid1 =>NULL()
   5775   integer                              :: l, ll, ll_repro, p, siz(4), nxgrid, size_prev
   5776   type(xcell_type),   allocatable      :: x_local(:)
   5777   integer                              :: size_repro, out_unit
   5778   logical                              :: scale_exist = .false.
   5779   logical                              :: is_distribute = .false.
   5780   real,    allocatable,   dimension(:) :: scale
   5781   real                                 :: garea
   5782   integer                              :: npes, isc, iec, nxgrid_local, pe, nxgrid_local_orig
   5783   integer                              :: nxgrid1, nxgrid2, nset1, nset2, ndivs, cur_ind
   5784   integer                              :: pos, nsend, nrecv, l1, l2, n, mypos, m
   5785   integer                              :: start(4), nread(4)
   5786   logical                              :: found
   5787   character(len=128)                   :: attvalue
   5788   integer, dimension(0:xmap%npes-1)    :: pelist
   5789   logical, dimension(0:xmap%npes-1)    :: subset_rootpe

Page 191         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   5790   integer, dimension(0:xmap%npes-1)    :: nsend1, nsend2, nrecv1, nrecv2
   5791   integer, dimension(0:xmap%npes-1)    :: send_cnt, recv_cnt
   5792   integer, dimension(0:xmap%npes-1)    :: send_buffer_pos, recv_buffer_pos
   5793   integer, dimension(0:xmap%npes-1)    :: ibegin, iend, pebegin, peend
   5794   integer, dimension(2*xmap%npes)      :: ibuf1, ibuf2
   5795   integer, dimension(0:xmap%npes-1)    :: pos_x, y2m1_size
   5796   integer, allocatable,   dimension(:) :: y2m1_pe
   5797   integer, pointer, save               :: iarray(:), jarray(:)
   5798   integer, allocatable, save           :: pos_s(:)
   5799   integer, pointer,       dimension(:) :: iarray2(:)=>NULL(), jarray2(:)=>NULL()
   5800   logical                              :: last_grid
   5801   integer                              :: nxgrid1_old
   5802   integer                              :: lll
   5803 
   5804   scale_exist = .false.
   5805   grid1 => xmap%grids(1)
   5806   out_unit = stdout()
   5807   npes     = xmap%npes
   5808   pe       = mpp_pe()
   5809   mypos = mpp_pe()-mpp_root_pe()
   5810 
   5811   call mpp_get_current_pelist(pelist)
   5812 !--- make sure npes = pelist(npes-1) - pelist(0) + 1
   5813   if( npes .NE. pelist(npes-1) - pelist(0) + 1 ) then
   5814      print*, "npes =", npes, ", pelist(npes-1)=", pelist(npes-1), ", pelist(0)=", pelist(0)
   5815      call error_mesg('xgrid_mod', 'npes .NE. pelist(npes-1) - pelist(0)', FATAL)
   5816   endif
   5817 
   5818   select case(xmap%version)
   5819   case(VERSION1)
   5820      call field_size(grid_file, 'AREA_'//grid1_id//'x'//grid_id, siz)
   5821      nxgrid = siz(1);
   5822      if(nxgrid .LE. 0) return
   5823   case(VERSION2)
   5824 !--- max_size is the exchange grid size between super grid.
   5825      nxgrid = get_mosaic_xgrid_size_use_mpp_io(grid_file)
   5826      if(nxgrid .LE. 0) return
   5827   end select
   5828 
   5829 !--- define a domain to read exchange grid.
   5830   if(nxgrid > npes) then
   5831      ndivs = npes
   5832      if(nsubset >0 .AND. nsubset < npes) ndivs = nsubset
   5833      call mpp_compute_extent( 1, nxgrid, ndivs, ibegin, iend)
   5834      if(npes == ndivs) then
   5835         p = mpp_pe()-mpp_root_pe()
   5836         isc = ibegin(p)
   5837         iec = iend(p)
   5838         subset_rootpe(:) = .true.
   5839      else
   5840         isc = 0; iec = -1
   5841         call mpp_compute_extent(pelist(0), pelist(npes-1), ndivs, pebegin, peend)
   5842         do n = 0, ndivs-1
   5843            if(pe == pebegin(n)) then
   5844               isc = ibegin(n)
   5845               iec = iend(n)
   5846               exit

Page 192         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   5847            endif
   5848         enddo
   5849         cur_ind = 0
   5850         subset_rootpe(:) = .false.
   5851 
   5852         do n = 0, npes-1
   5853            if(pelist(n) == pebegin(cur_ind)) then
   5854               subset_rootpe(n) = .true.
   5855               cur_ind = cur_ind+1
   5856               if(cur_ind == ndivs) exit
   5857            endif
   5858         enddo
   5859      endif
   5860      is_distribute = .true.
   5861   else
   5862      is_distribute = .false.
   5863      isc = 1; iec = nxgrid
   5864   endif
   5865 
   5866   nset1 = 5
   5867   nset2 = 5
   5868   if(use_higher_order) then
   5869      nset1 = nset1 + 2
   5870      nset2 = nset2 + 2
   5871   end if
   5872   if(scale_exist) nset2 = nset1 + 1
   5873 
   5874   call mpp_clock_begin(id_load_xgrid1)
   5875   if(iec .GE. isc) then
   5876      nxgrid_local = iec - isc + 1
   5877      allocate(i1_tmp(isc:iec), j1_tmp(isc:iec), i2_tmp(isc:iec), j2_tmp(isc:iec), area_tmp(isc:iec) )
   5878      if(use_higher_order) allocate(di_tmp(isc:iec), dj_tmp(isc:iec))
   5879 
   5880      start = 1; nread = 1
   5881 
   5882      select case(xmap%version)
   5883      case(VERSION1)
   5884         start(1) = isc; nread(1) = nxgrid_local
   5885         allocate(tmp(nxgrid_local,1))
   5886         call read_data(grid_file, 'I_'//grid1_id//'_'//grid1_id//'x'//grid_id, tmp, start, nread, no_domain=.TRUE.)
   5887         i1_tmp = tmp(:,1)
   5888         call read_data(grid_file, 'J_'//grid1_id//'_'//grid1_id//'x'//grid_id, tmp, start, nread, no_domain=.TRUE.)
   5889         j1_tmp = tmp(:,1)
   5890         call read_data(grid_file, 'I_'//grid_id//'_'//grid1_id//'x'//grid_id, tmp, start, nread, no_domain=.TRUE.)
   5891         i2_tmp = tmp(:,1)
   5892         call read_data(grid_file, 'J_'//grid_id//'_'//grid1_id//'x'//grid_id, tmp, start, nread, no_domain=.TRUE.)
   5893         j2_tmp = tmp(:,1)
   5894         call read_data(grid_file, 'AREA_'//grid1_id//'x'//grid_id, tmp, start, nread, no_domain=.TRUE.)
   5895         area_tmp = tmp(:,1)
   5896         if(use_higher_order) then
   5897            call read_data(grid_file, 'DI_'//grid1_id//'x'//grid_id, tmp, start, nread, no_domain=.TRUE.)
   5898            di_tmp = tmp(:,1)
   5899            call read_data(grid_file, 'DJ_'//grid1_id//'x'//grid_id, tmp, start, nread, no_domain=.TRUE.)
   5900            dj_tmp = tmp(:,1)
   5901         end if
   5902         deallocate(tmp)
   5903      case(VERSION2)

Page 193         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   5904         nread(1) = 2; start(2) = isc; nread(2) = nxgrid_local
   5905         allocate(tmp(2, isc:iec))
   5906         call read_data(grid_file, "tile1_cell", tmp, start, nread, no_domain=.TRUE.)
   5907         i1_tmp(isc:iec) = tmp(1, isc:iec)
   5908         j1_tmp(isc:iec) = tmp(2, isc:iec)
   5909         call read_data(grid_file, "tile2_cell", tmp, start, nread, no_domain=.TRUE.)
   5910         i2_tmp(isc:iec) = tmp(1, isc:iec)
   5911         j2_tmp(isc:iec) = tmp(2, isc:iec)
   5912         if(use_higher_order) then
   5913            call read_data(grid_file, "tile1_distance", tmp, start, nread, no_domain=.TRUE.)
   5914            di_tmp(isc:iec) = tmp(1, isc:iec)
   5915            dj_tmp(isc:iec) = tmp(2, isc:iec)
   5916         end if
   5917         start = 1; nread = 1
   5918         start(1) = isc; nread(1) = nxgrid_local
   5919         deallocate(tmp)
   5920         allocate(tmp(isc:iec,1) )
   5921         call read_data(grid_file, "xgrid_area", tmp(:,1:1), start, nread, no_domain=.TRUE.)
   5922 ! check the units of "xgrid_area
   5923         call get_var_att_value(grid_file, "xgrid_area", "units", attvalue)
   5924         if( trim(attvalue) == 'm2' ) then
   5925            garea = 4.0*PI*RADIUS*RADIUS;
   5926            area_tmp = tmp(:,1)/garea
   5927         else if( trim(attvalue) == 'none' ) then
   5928            area_tmp = tmp(:,1)
   5929         else
   5930            call error_mesg('xgrid_mod', 'In file '//trim(grid_file)//', xgrid_area units = '// &
   5931                 trim(attvalue)//' should be "m2" or "none"', FATAL)
   5932         endif
   5933 
   5934 !--- if field "scale" exist, read this field. Normally this
   5935 !--- field only exist in landXocean exchange grid cell.
   5936         if(grid1_id == 'LND' .AND. grid_id == 'OCN') then
   5937            if(field_exist(grid_file, "scale")) then
   5938               allocate(scale(isc:iec))
   5939               write(out_unit, *)"NOTE from load_xgrid(xgrid_mod): field 'scale' exist in the file "// &
   5940                    trim(grid_file)//", this field will be read and the exchange grid cell area will be multiplied by scale"
   5941               call read_data(grid_file, "scale", tmp, start, nread, no_domain=.TRUE.)
   5942               scale = tmp(:,1)
   5943               scale_exist = .true.
   5944            endif
   5945         endif
   5946         deallocate(tmp)
   5947      end select
   5948 
   5949 !---z1l: The following change is for the situation that some processor is masked out.
   5950 !---loop through all the pe to see if side 1 and side of each exchange grid is on some processor
   5951      nxgrid_local_orig = nxgrid_local
   5952      allocate(i1(isc:iec), j1(isc:iec), i2(isc:iec), j2(isc:iec), area(isc:iec) )
   5953      if(use_higher_order) allocate(di(isc:iec), dj(isc:iec))
   5954      pos = isc-1
   5955      do l = isc, iec
   5956         found = .false.
   5957 !--- first check if the exchange grid is on one of side 1 processor
   5958         do p = 0, npes - 1
   5959            if(grid1%tile(p) == tile1) then
   5960               if(in_box_nbr(i1_tmp(l), j1_tmp(l), grid1, p)) then

Page 194         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   5961                  found = .true.
   5962                  exit
   5963               endif
   5964            endif
   5965         enddo
   5966 !--- Then check if the exchange grid is on one of side 2 processor
   5967         if( found ) then
   5968            do p = 0, npes - 1
   5969               if(grid%tile(p) == tile2) then
   5970                  if (in_box_nbr(i2_tmp(l), j2_tmp(l), grid, p)) then
   5971                     pos = pos+1
   5972                     i1(pos) = i1_tmp(l)
   5973                     j1(pos) = j1_tmp(l)
   5974                     i2(pos) = i2_tmp(l)
   5975                     j2(pos) = j2_tmp(l)
   5976                     area(pos) = area_tmp(l)
   5977                     if(use_higher_order) then
   5978                        di(pos) = di_tmp(l)
   5979                        dj(pos) = dj_tmp(l)
   5980                     endif
   5981                     exit
   5982                  endif
   5983               endif
   5984            enddo
   5985         endif
   5986      enddo
   5987 
   5988      deallocate(i1_tmp, i2_tmp, j1_tmp, j2_tmp, area_tmp)
   5989      if(use_higher_order) deallocate( di_tmp, dj_tmp)
   5990      iec = pos
   5991      if(iec .GE. isc) then
   5992         nxgrid_local = iec - isc + 1
   5993      else
   5994         nxgrid_local = 0
   5995      endif
   5996   else
   5997      nxgrid_local = 0
   5998      nxgrid_local_orig = 0
   5999   endif
   6000 
   6001   call mpp_clock_end(id_load_xgrid1)
   6002 
   6003   if(is_distribute) then
   6004 !--- Since the xgrid is distributed according to side 2 grid. Send all the xgrid to its own side 2.
   6005 !--- Also need to send the xgrid to its own side 1 for the reproducing ability between processor count.
   6006 !--- first find out number of points need to send to other pe and fill the send buffer.
   6007      nsend1(:) = 0; nrecv1(:) = 0
   6008      nsend2(:) = 0; nrecv2(:) = 0
   6009      ibuf1(:)= 0; ibuf2(:)= 0
   6010 
   6011      call mpp_clock_begin(id_load_xgrid2)
   6012      if(nxgrid_local>0) then
   6013         allocate( send_buffer(nxgrid_local * (nset1+nset2)) )
   6014         pos = 0
   6015         do p = 0, npes - 1
   6016            send_buffer_pos(p) = pos
   6017            if(grid%tile(p) == tile2) then

Page 195         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6018               do l = isc, iec
   6019                  if(in_box_nbr(i2(l), j2(l), grid, p) ) then
   6020                     nsend2(p) = nsend2(p) + 1
   6021                     send_buffer(pos+1) = i1(l)
   6022                     send_buffer(pos+2) = j1(l)
   6023                     send_buffer(pos+3) = i2(l)
   6024                     send_buffer(pos+4) = j2(l)
   6025                     send_buffer(pos+5) = area(l)
   6026                     if(use_higher_order) then
   6027                        send_buffer(pos+6) = di(l)
   6028                        send_buffer(pos+7) = dj(l)
   6029                     endif
   6030                     if(scale_exist) send_buffer(pos+nset2) = scale(l)
   6031                     pos = pos + nset2
   6032                  endif
   6033               enddo
   6034            endif
   6035            if(grid1%tile(p) == tile1) then
   6036               do l = isc, iec
   6037                  if(in_box_nbr(i1(l), j1(l), grid1, p)) then
   6038                     nsend1(p) = nsend1(p) + 1
   6039                     send_buffer(pos+1) = i1(l)
   6040                     send_buffer(pos+2) = j1(l)
   6041                     send_buffer(pos+3) = i2(l)
   6042                     send_buffer(pos+4) = j2(l)
   6043                     send_buffer(pos+5) = area(l)
   6044                     if(use_higher_order) then
   6045                        send_buffer(pos+6) = di(l)
   6046                        send_buffer(pos+7) = dj(l)
   6047                     endif
   6048                     pos = pos + nset1
   6049                  endif
   6050               enddo
   6051            endif
   6052         enddo
   6053      endif
   6054      call mpp_clock_end(id_load_xgrid2)
   6055 
   6056 !--- send the size of the data on side 1 to be sent over.
   6057      call mpp_clock_begin(id_load_xgrid3)
   6058 
   6059      if (do_alltoall) then
   6060         do p = 0, npes-1
   6061            ibuf1(2*p+1) = nsend1(p)
   6062            ibuf1(2*p+2) = nsend2(p)
   6063         enddo
   6064         call mpp_alltoall(ibuf1, 2, ibuf2, 2)
   6065      else
   6066         do n = 0, npes-1
   6067            p = mod(mypos+npes-n, npes)
   6068            if(.not. subset_rootpe(p)) cycle
   6069            call mpp_recv( ibuf2(2*p+1), glen=2, from_pe=pelist(p), block=.FALSE., tag=COMM_TAG_1)
   6070         enddo
   6071 
   6072         if(nxgrid_local_orig>0) then
   6073            do n = 0, npes-1
   6074               p = mod(mypos+n, npes)

Page 196         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6075               ibuf1(2*p+1) = nsend1(p)
   6076               ibuf1(2*p+2) = nsend2(p)
   6077               call mpp_send( ibuf1(2*p+1), plen=2, to_pe=pelist(p), tag=COMM_TAG_1)
   6078            enddo
   6079         endif
   6080         call mpp_sync_self(check=EVENT_RECV)
   6081      endif
   6082      do p = 0, npes-1
   6083         nrecv1(p) = ibuf2(2*p+1)
   6084         nrecv2(p) = ibuf2(2*p+2)
   6085      enddo
   6086 
   6087      if(.not. do_alltoall) call mpp_sync_self()
   6088      call mpp_clock_end(id_load_xgrid3)
   6089      call mpp_clock_begin(id_load_xgrid4)
   6090      pos = 0
   6091      do p = 0, npes - 1
   6092         recv_buffer_pos(p) = pos
   6093         pos = pos + nrecv1(p) * nset1 + nrecv2(p) * nset2
   6094      end do
   6095 
   6096 !--- now get the data
   6097      nxgrid1 = sum(nrecv1)
   6098      nxgrid2 = sum(nrecv2)
   6099      if(nxgrid1>0 .OR. nxgrid2>0) allocate(recv_buffer(nxgrid1*nset1+nxgrid2*nset2))
   6100 
   6101      if (do_alltoallv) then
   6102 ! Construct the send and receive counters
   6103         send_cnt(:) = nset1 * nsend1(:) + nset2 * nsend2(:)
   6104         recv_cnt(:) = nset1 * nrecv1(:) + nset2 * nrecv2(:)
   6105 
   6106         call mpp_alltoall(send_buffer, send_cnt, send_buffer_pos, &
   6107                           recv_buffer, recv_cnt, recv_buffer_pos)
   6108      else
   6109         do n = 0, npes-1
   6110            p = mod(mypos+npes-n, npes)
   6111            nrecv = nrecv1(p)*nset1+nrecv2(p)*nset2
   6112            if(nrecv==0) cycle
   6113            pos = recv_buffer_pos(p)
   6114            call mpp_recv(recv_buffer(pos+1), glen=nrecv, from_pe=pelist(p), &
   6115                          block=.FALSE., tag=COMM_TAG_2)
   6116         end do
   6117 
   6118         do n = 0, npes-1
   6119            p = mod(mypos+n, npes)
   6120            nsend = nsend1(p)*nset1 + nsend2(p)*nset2
   6121            if(nsend==0) cycle
   6122            pos = send_buffer_pos(p)
   6123            call mpp_send(send_buffer(pos+1), plen=nsend, to_pe=pelist(p), &
   6124                          tag=COMM_TAG_2)
   6125         end do
   6126         call mpp_sync_self(check=EVENT_RECV)
   6127      end if
   6128      call mpp_clock_end(id_load_xgrid4)
   6129 !--- unpack buffer.
   6130      if( nxgrid_local>0) then
   6131         deallocate(i1,j1,i2,j2,area)

Page 197         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6132      endif
   6133 
   6134      allocate(i1(nxgrid2), j1(nxgrid2))
   6135      allocate(i2(nxgrid2), j2(nxgrid2))
   6136      allocate(area(nxgrid2))
   6137      allocate(i1_side1(nxgrid1), j1_side1(nxgrid1))
   6138      allocate(i2_side1(nxgrid1), j2_side1(nxgrid1))
   6139      allocate(area_side1(nxgrid1))
   6140      if(use_higher_order) then
   6141         if(nxgrid_local>0) deallocate(di,dj)
   6142         allocate(di      (nxgrid2), dj      (nxgrid2))
   6143         allocate(di_side1(nxgrid1), dj_side1(nxgrid1))
   6144      endif
   6145      if(scale_exist) then
   6146         if(nxgrid_local>0)deallocate(scale)
   6147         allocate(scale(nxgrid2))
   6148      endif
   6149      pos = 0
   6150      l1 = 0; l2 = 0
   6151      do p = 0,npes-1
   6152         do n = 1, nrecv2(p)
   6153            l2 = l2+1
   6154            i1(l2) = recv_buffer(pos+1)
   6155            j1(l2) = recv_buffer(pos+2)
   6156            i2(l2) = recv_buffer(pos+3)
   6157            j2(l2) = recv_buffer(pos+4)
   6158            area(l2) = recv_buffer(pos+5)
   6159            if(use_higher_order) then
   6160               di(l2) = recv_buffer(pos+6)
   6161               dj(l2) = recv_buffer(pos+7)
   6162            endif
   6163            if(scale_exist)scale(l2) = recv_buffer(pos+nset2)
   6164            pos = pos + nset2
   6165         enddo
   6166         do n = 1, nrecv1(p)
   6167            l1 = l1+1
   6168            i1_side1(l1) = recv_buffer(pos+1)
   6169            j1_side1(l1) = recv_buffer(pos+2)
   6170            i2_side1(l1) = recv_buffer(pos+3)
   6171            j2_side1(l1) = recv_buffer(pos+4)
   6172            area_side1(l1) = recv_buffer(pos+5)
   6173            if(use_higher_order) then
   6174               di_side1(l1) = recv_buffer(pos+6)
   6175               dj_side1(l1) = recv_buffer(pos+7)
   6176            endif
   6177            pos = pos + nset1
   6178         enddo
   6179      enddo
   6180      call mpp_sync_self()
   6181      if(allocated(send_buffer)) deallocate(send_buffer)
   6182      if(allocated(recv_buffer)) deallocate(recv_buffer)
   6183 
   6184   else
   6185      nxgrid1 = nxgrid
   6186      nxgrid2 = nxgrid
   6187      i1_side1 => i1; j1_side1 => j1
   6188      i2_side1 => i2; j2_side1 => j2

Page 198         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6189      area_side1 => area
   6190      if(use_higher_order) then
   6191         di_side1 => di
   6192         dj_side1 => dj
   6193      endif
   6194   endif
   6195 
   6196   call mpp_clock_begin(id_load_xgrid5)
   6197 
   6198 
   6199   size_prev = grid%size
   6200 
   6201   if(grid%tile_me == tile2) then
   6202      do l=1,nxgrid2
   6203         if (in_box_me(i2(l), j2(l), grid) ) then
   6204            grid%size = grid%size + 1
   6205 ! exclude the area overlapped with parent grid
   6206            if( grid1_id .NE. "ATM" .OR. tile1 .NE. tile_parent .OR.  &
   6207                 .NOT. in_box(i1(l), j1(l), is_parent, ie_parent, js_parent, je_parent) ) then
   6208               if(grid%is_ug) then
   6209                  lll = grid%l_index((j2(l)-1)*grid%im+i2(l))
   6210                  grid%area(lll,1) = grid%area(lll,1)+area(l)
   6211               else
   6212                  grid%area(i2(l),j2(l)) = grid%area(i2(l),j2(l))+area(l)
   6213               endif
   6214            endif
   6215            do p=0,xmap%npes-1
   6216               if(grid1%tile(p) == tile1) then
   6217                  if (in_box_nbr(i1(l), j1(l), grid1, p)) then
   6218                     xmap%your1my2(p) = .true.
   6219                  end if
   6220               end if
   6221            end do
   6222         end if
   6223      end do
   6224    end if
   6225 
   6226   if(grid%size > size_prev) then
   6227      if(size_prev > 0) then ! need to extend data
   6228         allocate(x_local(size_prev))
   6229         x_local = grid%x
   6230         if(ASSOCIATED(grid%x)) deallocate(grid%x)
   6231         allocate( grid%x( grid%size ) )
   6232         grid%x(1:size_prev) = x_local
   6233         deallocate(x_local)
   6234      else
   6235         allocate( grid%x( grid%size ) )
   6236         grid%x%di = 0.0; grid%x%dj = 0.0
   6237      end if
   6238   end if
   6239 
   6240   ll = size_prev
   6241   if( grid%tile_me == tile2 ) then ! me is tile2
   6242      do l=1,nxgrid2
   6243         if (in_box_me(i2(l), j2(l), grid)) then
   6244 ! insert in this grids cell pattern list and add area to side 2 area
   6245            ll = ll + 1

Page 199         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6246            grid%x(ll)%i1   = i1(l); grid%x(ll)%i2   = i2(l)
   6247            grid%x(ll)%j1   = j1(l); grid%x(ll)%j2   = j2(l)
   6248            if(grid%is_ug) then
   6249               grid%x(ll)%l2   = grid%l_index((j2(l)-1)*grid%im + i2(l))
   6250            endif
   6251 !           if(grid1%is_ug) then
   6252 !              grid1%x(ll)%l1   = grid1%l_index((j1(l)-1)*grid1%im + i1(l))
   6253 !           endif
   6254            grid%x(ll)%tile = tile1
   6255            grid%x(ll)%area = area(l)
   6256            if(scale_exist) then
   6257               grid%x(ll)%scale = scale(l)
   6258            else
   6259               grid%x(ll)%scale = 1.0
   6260            endif
   6261            if(use_higher_order) then
   6262               grid%x(ll)%di  = di(l)
   6263               grid%x(ll)%dj  = dj(l)
   6264            end if
   6265 
   6266            if (make_exchange_reproduce) then
   6267               do p=0,xmap%npes-1
   6268                  if(grid1%tile(p) == tile1) then
   6269                     if (in_box_nbr(i1(l), j1(l), grid1, p)) then
   6270                        grid%x(ll)%pe = p + xmap%root_pe
   6271                     end if
   6272                  end if
   6273               end do
   6274            end if ! make_exchange reproduce
   6275         end if
   6276      end do
   6277   end if
   6278 
   6279   if(grid%id == xmap%grids(size(xmap%grids(:)))%id) then
   6280      last_grid = .true.
   6281   else
   6282      last_grid = .false.
   6283   endif
   6284 
   6285   size_repro = 0
   6286   if(grid1%tile_me == tile1) then
   6287      if(associated(iarray)) then
   6288         nxgrid1_old = size(iarray(:))
   6289      else
   6290         nxgrid1_old = 0
   6291      endif
   6292 
   6293      allocate(y2m1_pe(nxgrid1))
   6294      if(.not. last_grid ) allocate(pos_s(0:xmap%npes-1))
   6295      y2m1_pe = -1
   6296      if(nxgrid1_old > 0) then
   6297         do p=0,xmap%npes-1
   6298            y2m1_size(p) = xmap%your2my1_size(p)
   6299         enddo
   6300      else
   6301         y2m1_size = 0
   6302      endif

Page 200         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6303 
   6304      do l=1,nxgrid1
   6305         if (in_box_me(i1_side1(l), j1_side1(l), grid1) ) then
   6306            if(grid1%is_ug) then
   6307               lll = grid1%l_index((j1_side1(l)-1)*grid1%im+i1_side1(l))
   6308               grid1%area(lll,1) = grid1%area(lll,1) + area_side1(l)
   6309            else
   6310               grid1%area(i1_side1(l),j1_side1(l)) = grid1%area(i1_side1(l),j1_side1(l))+area_side1(l)
   6311            endif
   6312            do p=0,xmap%npes-1
   6313               if (grid%tile(p) == tile2) then
   6314                  if (in_box_nbr(i2_side1(l), j2_side1(l), grid, p))  then
   6315                     xmap%your2my1(p) = .true.
   6316                     y2m1_pe(l) = p
   6317                     y2m1_size(p) = y2m1_size(p) + 1
   6318                  endif
   6319               endif
   6320            enddo
   6321            size_repro = size_repro + 1
   6322         endif
   6323      enddo
   6324      pos_x = 0
   6325      do p = 1, npes-1
   6326         pos_x(p) = pos_x(p-1) + y2m1_size(p-1)
   6327      enddo
   6328 
   6329      if(.not. last_grid) pos_s(:) = pos_x(:)
   6330 
   6331      if(nxgrid1_old > 0) then
   6332         y2m1_size(:) = xmap%your2my1_size(:)
   6333         iarray2 => iarray
   6334         jarray2 => jarray
   6335         allocate(iarray(nxgrid1+nxgrid1_old), jarray(nxgrid1+nxgrid1_old))
   6336 ! copy the i-j index
   6337         do p=0,xmap%npes-1
   6338            do n = 1, xmap%your2my1_size(p)
   6339               iarray(pos_x(p)+n) = iarray2(pos_s(p)+n)
   6340               jarray(pos_x(p)+n) = jarray2(pos_s(p)+n)
   6341            enddo
   6342         enddo
   6343         deallocate(iarray2, jarray2)
   6344      else
   6345         allocate(iarray(nxgrid1), jarray(nxgrid1))
   6346         iarray(:) = 0
   6347         jarray(:) = 0
   6348         y2m1_size(:) = 0
   6349      endif
   6350 
   6351      do l=1,nxgrid1
   6352         p = y2m1_pe(l)
   6353         if(p<0) cycle
   6354         found = .false.
   6355         if(y2m1_size(p) > 0) then
   6356            pos = pos_x(p)+y2m1_size(p)
   6357            if( i1_side1(l) == iarray(pos) .AND. j1_side1(l) == jarray(pos) ) then
   6358               found = .true.
   6359            else

Page 201         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6360 !---may need to replace with a fast search algorithm
   6361               do n = 1, y2m1_size(p)
   6362                  pos = pos_x(p)+n
   6363                  if(i1_side1(l) == iarray(pos) .AND. j1_side1(l) == jarray(pos)) then
   6364                     found = .true.
   6365                     exit
   6366                  endif
   6367               enddo
   6368            endif
   6369         endif
   6370         if( (.NOT. found) .OR. monotonic_exchange ) then
   6371            y2m1_size(p) = y2m1_size(p)+1
   6372            pos = pos_x(p)+y2m1_size(p)
   6373            iarray(pos) = i1_side1(l)
   6374            jarray(pos) = j1_side1(l)
   6375         endif
   6376      end do
   6377      xmap%your2my1_size(:) =  y2m1_size(:)
   6378      deallocate(y2m1_pe)
   6379      if(last_grid) then
   6380         deallocate(iarray, jarray)
   6381         if(allocated(pos_s)) deallocate(pos_s)
   6382      end if
   6383   end if
   6384 
   6385   if (grid1%tile_me == tile1 .and. size_repro > 0) then
   6386      ll_repro = grid%size_repro
   6387      grid%size_repro = ll_repro + size_repro
   6388      if(ll_repro > 0) then  ! extend data
   6389         allocate(x_local(ll_repro))
   6390         x_local = grid%x_repro
   6391         if(ASSOCIATED(grid%x_repro)) deallocate(grid%x_repro)
   6392         allocate( grid%x_repro(grid%size_repro ) )
   6393         grid%x_repro(1:ll_repro) = x_local
   6394         deallocate(x_local)
   6395      else
   6396         allocate( grid%x_repro( grid%size_repro ) )
   6397         grid%x_repro%di = 0.0; grid%x_repro%dj = 0.0
   6398      end if
   6399      do l=1,nxgrid1
   6400         if (in_box_me(i1_side1(l),j1_side1(l), grid1) ) then
   6401            ll_repro = ll_repro + 1
   6402            grid%x_repro(ll_repro)%i1   = i1_side1(l); grid%x_repro(ll_repro)%i2   = i2_side1(l)
   6403            grid%x_repro(ll_repro)%j1   = j1_side1(l); grid%x_repro(ll_repro)%j2   = j2_side1(l)
   6404            if(grid1%is_ug) then
   6405               grid%x_repro(ll_repro)%l1 = grid1%l_index((j1_side1(l)-1)*grid1%im+i1_side1(l))
   6406            endif
   6407            if(grid%is_ug) then
   6408 !              grid%x_repro(ll_repro)%l2 = grid%l_index((j2_side1(l)-1)*grid%im+i2_side1(l))
   6409            endif
   6410            grid%x_repro(ll_repro)%tile = tile1
   6411            grid%x_repro(ll_repro)%area = area_side1(l)
   6412            if(use_higher_order) then
   6413               grid%x_repro(ll_repro)%di  = di_side1(l)
   6414               grid%x_repro(ll_repro)%dj  = dj_side1(l)
   6415            end if
   6416 

Page 202         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6417            do p=0,xmap%npes-1
   6418               if(grid%tile(p) == tile2) then
   6419                  if (in_box_nbr(i2_side1(l), j2_side1(l), grid, p)) then
   6420                     grid%x_repro(ll_repro)%pe = p + xmap%root_pe
   6421                  end if
   6422               end if
   6423            end do
   6424         end if ! make_exchange_reproduce
   6425      end do
   6426   end if
   6427 
   6428   deallocate(i1, j1, i2, j2, area)
   6429   if(use_higher_order) deallocate(di, dj)
   6430   if(scale_exist) deallocate(scale)
   6431   if(is_distribute) then
   6432      deallocate(i1_side1, j1_side1, i2_side1, j2_side1, area_side1)
   6433      if(use_higher_order) deallocate(di_side1, dj_side1)
   6434   endif
   6435 
   6436   i1=>NULL(); j1=>NULL(); i2=>NULL(); j2=>NULL()
   6437   call mpp_clock_end(id_load_xgrid5)
   6438 
   6439 
   6440 
   6441 end subroutine load_xgrid_use_mpp_io


ENTRY POINTS

  Name                                           
                                                 
 xgrid_mod_mp_load_xgrid_use_mpp_io_             

Page 203         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56 Symbol Table                    xgrid.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   6181                                 scalar                    6181,6182,6381                    
 AREA                       Local  5762     R(8)            8     1     1        PTR              5762,5952,5976,6025,6043,6131,6136
                                                                                                  ,6158,6189,6210,6212,6255,6428    
 AREA_SIDE1                 Local  5770     R(8)            8     1     1        PTR              5770,6139,6172,6189,6308,6310,6411
                                                                                                  ,6432                             
 AREA_TMP                   Local  5766     R(8)            8     1     1        PTR              5766,5877,5895,5926,5928,5976,5988
 ASSOCIATED                 Func   6230                                 scalar                    6230,6287,6391                    
 ATTVALUE                   Local  5787     CHAR            128         scalar                    5923,5924,5927,5931               
 CUR_IND                    Local  5783     I(4)            4           scalar                    5849,5853,5855,5856               
 DI                         Local  5761     R(8)            8     1     1        PTR              5761,5953,5978,6027,6045,6141,6142
                                                                                                  ,6160,6191,6262,6429              
 DI_SIDE1                   Local  5769     R(8)            8     1     1        PTR              5769,6143,6174,6191,6413,6433     
 DI_TMP                     Local  5765     R(8)            8     1     1        PTR              5765,5878,5898,5914,5978,5989     
 DJ                         Local  5761     R(8)            8     1     1        PTR              5761,5953,5979,6028,6046,6141,6142
                                                                                                  ,6161,6192,6263,6429              
 DJ_SIDE1                   Local  5769     R(8)            8     1     1        PTR              5769,6143,6175,6192,6414,6433     
 DJ_TMP                     Local  5765     R(8)            8     1     1        PTR              5765,5878,5900,5915,5979,5989     
 FIELD_EXIST                Func   5937     L(4)            4           scalar   PRIV             277,5937,6577,6622,6699,6701,6990 
 FIELD_SIZE                 Subr   5820                                          PRIV             277,5820,6507,6991                
 FOUND                      Local  5786     L(4)            4           scalar                    5956,5961,5967,6354,6358,6364,6370
 GAREA                      Local  5781     R(8)            8           scalar                    5925,5926                         
 GET_MOSAIC_XGRID_SIZE_USE_                                                                                                         
 MPP_IO                     Func   5825     I(4)            4           scalar   PRIV             5825                              
 GET_VAR_ATT_VALUE          Local  5923                                 scalar   PRIV             279,5923                          
 GET_VAR_ATT_VALUE_TEXT     Subr   5923                                          PRIV             5923                              
 GRID                       Dummy  5751     GRID_TYPE       4888        scalar   ARG,INOUT        5969,5970,6017,6019,6199,6201,6203
                                                                                                  ,6204,6208,6209,6210,6212,6226,622
                                                                                                  9,6230,6231,6232,6235,6236,6241,62
                                                                                                  43,6246,6247,6248,6249,6254,6255,6
                                                                                                  257,6259,6262,6263,6270,6279,6313,
                                                                                                  6314,6386,6387,6390,6391,6392,6393
                                                                                                  ,6396,6397,6402,6403,6405,6407,641
                                                                                                  0,6411,6413,6414,6418,6419,6420   
 GRID1                      Local  5774     GRID_TYPE       4888        scalar   PTR,SAVE         5774,5805,5959,5960,6035,6037,6216
                                                                                                  ,6217,6268,6269,6286,6305,6306,630
                                                                                                  7,6308,6310,6385,6400,6404,6405   
 GRID1_ID                   Dummy  5751     CHAR            3           scalar   ARG,IN           5820,5886,5888,5890,5892,5894,5897
                                                                                                  ,5899,5936,6206                   
 GRID_FILE                  Dummy  5751     CHAR                        scalar   ARG,IN           5820,5825,5886,5888,5890,5892,5894
                                                                                                  ,5897,5899,5906,5909,5913,5921,592
                                                                                                  3,5930,5937,5940,5941             
 GRID_ID                    Dummy  5751     CHAR            3           scalar   ARG,IN           5820,5886,5888,5890,5892,5894,5897
                                                                                                  ,5899,5936                        
 I1                         Local  5759     I(4)            4     1     1        PTR              5759,5952,5972,6021,6037,6039,6131
                                                                                                  ,6134,6154,6187,6207,6217,6246,626
                                                                                                  9,6428,6436                       
 I1_SIDE1                   Local  5767     I(4)            4     1     1        PTR              5767,6137,6168,6187,6305,6307,6310
                                                                                                  ,6357,6363,6373,6400,6402,6405,643
                                                                                                  2                                 
 I1_TMP                     Local  5763     I(4)            4     1     1        PTR              5763,5877,5887,5907,5960,5972,5988
 I2                         Local  5760     I(4)            4     1     1        PTR              5760,5952,5974,6019,6023,6041,6131

Page 204         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,6135,6156,6188,6203,6209,6212,624
                                                                                                  3,6246,6249,6428,6436             
 I2_SIDE1                   Local  5768     I(4)            4     1     1        PTR              5768,6138,6170,6188,6314,6402,6419
                                                                                                  ,6432                             
 I2_TMP                     Local  5764     I(4)            4     1     1        PTR              5764,5877,5891,5910,5970,5974,5988
 IARRAY                     Local  5797     I(4)            4     1     1        PTR,SAVE         6287,6288,6333,6335,6339,6345,6346
                                                                                                  ,6357,6363,6373,6380              
 IARRAY2                    Local  5799     I(4)            4     1     1        PTR              5799,6333,6339,6343               
 IBEGIN                     Local  5793     I(4)            4     1     0                         5833,5836,5844                    
 IBUF1                      Local  5794     I(4)            4     1     0                         6009,6061,6062,6064,6075,6076,6077
 IBUF2                      Local  5794     I(4)            4     1     0                         6009,6064,6069,6083,6084          
 IEC                        Local  5782     I(4)            4           scalar                    5837,5840,5845,5863,5875,5876,5877
                                                                                                  ,5878,5905,5907,5908,5910,5911,591
                                                                                                  4,5915,5920,5938,5952,5953,5955,59
                                                                                                  90,5991,5992,6018,6036            
 IEND                       Local  5793     I(4)            4     1     0                         5833,5837,5845                    
 ISC                        Local  5782     I(4)            4           scalar                    5836,5840,5844,5863,5875,5876,5877
                                                                                                  ,5878,5884,5904,5905,5907,5908,591
                                                                                                  0,5911,5914,5915,5918,5920,5938,59
                                                                                                  52,5953,5954,5955,5991,5992,6018,6
                                                                                                  036                               
 IS_DISTRIBUTE              Local  5779     L(4)            4           scalar                    5779,5860,5862,6003,6431          
 J1                         Local  5759     I(4)            4     1     1        PTR              5759,5952,5973,6022,6037,6040,6131
                                                                                                  ,6134,6155,6187,6207,6217,6247,626
                                                                                                  9,6428,6436                       
 J1_SIDE1                   Local  5767     I(4)            4     1     1        PTR              5767,6137,6169,6187,6305,6307,6310
                                                                                                  ,6357,6363,6374,6400,6403,6405,643
                                                                                                  2                                 
 J1_TMP                     Local  5763     I(4)            4     1     1        PTR              5763,5877,5889,5908,5960,5973,5988
 J2                         Local  5760     I(4)            4     1     1        PTR              5760,5952,5975,6019,6024,6042,6131
                                                                                                  ,6135,6157,6188,6203,6209,6212,624
                                                                                                  3,6247,6249,6428,6436             
 J2_SIDE1                   Local  5768     I(4)            4     1     1        PTR              5768,6138,6171,6188,6314,6403,6419
                                                                                                  ,6432                             
 J2_TMP                     Local  5764     I(4)            4     1     1        PTR              5764,5877,5893,5911,5970,5975,5988
 JARRAY                     Local  5797     I(4)            4     1     1        PTR,SAVE         6334,6335,6340,6345,6347,6357,6363
                                                                                                  ,6374,6380                        
 JARRAY2                    Local  5799     I(4)            4     1     1        PTR              5799,6334,6340,6343               
 L                          Local  5775     I(4)            4           scalar                    5955,5960,5970,5972,5973,5974,5975
                                                                                                  ,5976,5978,5979,6018,6019,6021,602
                                                                                                  2,6023,6024,6025,6027,6028,6030,60
                                                                                                  36,6037,6039,6040,6041,6042,6043,6
                                                                                                  045,6046,6202,6203,6207,6209,6210,
                                                                                                  6212,6217,6242,6243,6246,6247,6249
                                                                                                  ,6255,6257,6262,6263,6269,6304,630
                                                                                                  5,6307,6308,6310,6314,6316,6351,63
                                                                                                  52,6357,6363,6373,6374,6399,6400,6
                                                                                                  402,6403,6405,6411,6413,6414,6419 
 L1                         Local  5784     I(4)            4           scalar                    6150,6167,6168,6169,6170,6171,6172
                                                                                                  ,6174,6175                        
 L2                         Local  5784     I(4)            4           scalar                    6150,6153,6154,6155,6156,6157,6158
                                                                                                  ,6160,6161,6163                   
 LAST_GRID                  Local  5800     L(4)            4           scalar                    6280,6282,6294,6329,6379          
 LL                         Local  5775     I(4)            4           scalar                    6240,6245,6246,6247,6249,6254,6255
                                                                                                  ,6257,6259,6262,6263,6270         

Page 205         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LLL                        Local  5802     I(4)            4           scalar                    6209,6210,6307,6308               
 LL_REPRO                   Local  5775     I(4)            4           scalar                    6386,6387,6388,6389,6393,6401,6402
                                                                                                  ,6403,6405,6410,6411,6413,6414,642
                                                                                                  0                                 
 LOAD_XGRID_USE_MPP_IO      Subr   5751                                                                                             
 M                          Local  5784     I(4)            4           scalar                                                      
 MOD                        Func   6067                                 scalar                    6067,6074,6110,6119               
 MYPOS                      Local  5784     I(4)            4           scalar                    5809,6067,6074,6110,6119          
 N                          Local  5784     I(4)            4           scalar                    5842,5843,5844,5845,5852,5853,5854
                                                                                                  ,6066,6067,6073,6074,6109,6110,611
                                                                                                  8,6119,6152,6166,6338,6339,6340,63
                                                                                                  61,6362                           
 NDIVS                      Local  5783     I(4)            4           scalar                    5831,5832,5833,5834,5841,5842,5856
 NPES                       Local  5782     I(4)            4           scalar                    5807,5813,5814,5830,5831,5832,5834
                                                                                                  ,5841,5852,5958,5968,6015,6060,606
                                                                                                  6,6067,6073,6074,6082,6091,6109,61
                                                                                                  10,6118,6119,6151,6325            
 NREAD                      Local  5785     I(4)            4     1     4        TGT              5880,5884,5886,5888,5890,5892,5894
                                                                                                  ,5897,5899,5904,5906,5909,5913,591
                                                                                                  7,5918,5921,5941                  
 NRECV                      Local  5784     I(4)            4           scalar                    6111,6112,6114                    
 NRECV1                     Local  5790     I(4)            4     1     0                         6007,6083,6093,6097,6104,6111,6166
 NRECV2                     Local  5790     I(4)            4     1     0                         6008,6084,6093,6098,6104,6111,6152
 NSEND                      Local  5784     I(4)            4           scalar                    6120,6121,6123                    
 NSEND1                     Local  5790     I(4)            4     1     0                         6007,6038,6061,6075,6103,6120     
 NSEND2                     Local  5790     I(4)            4     1     0                         6008,6020,6062,6076,6103,6120     
 NSET1                      Local  5783     I(4)            4           scalar                    5866,5869,5872,6013,6048,6093,6099
                                                                                                  ,6103,6104,6111,6120,6177         
 NSET2                      Local  5783     I(4)            4           scalar                    5867,5870,5872,6013,6030,6031,6093
                                                                                                  ,6099,6103,6104,6111,6120,6163,616
                                                                                                  4                                 
 NXGRID                     Local  5775     I(4)            4           scalar                    5821,5822,5825,5826,5830,5833,5863
                                                                                                  ,6185,6186                        
 NXGRID1                    Local  5783     I(4)            4           scalar                    6097,6099,6137,6138,6139,6143,6185
                                                                                                  ,6293,6304,6335,6345,6351,6399    
 NXGRID1_OLD                Local  5801     I(4)            4           scalar                    6288,6290,6296,6331,6335          
 NXGRID2                    Local  5783     I(4)            4           scalar                    6098,6099,6134,6135,6136,6142,6147
                                                                                                  ,6186,6202,6242                   
 NXGRID_LOCAL               Local  5782     I(4)            4           scalar                    5876,5884,5885,5904,5918,5951,5992
                                                                                                  ,5994,5997,6012,6013,6130,6141,614
                                                                                                  6                                 
 NXGRID_LOCAL_ORIG          Local  5782     I(4)            4           scalar                    5951,5998,6072                    
 OUT_UNIT                   Local  5777     I(4)            4           scalar                    5806,5939                         
 P                          Local  5775     I(4)            4           scalar                    5835,5836,5837,5958,5959,5960,5968
                                                                                                  ,5969,5970,6015,6016,6017,6019,602
                                                                                                  0,6035,6037,6038,6060,6061,6062,60
                                                                                                  67,6068,6069,6074,6075,6076,6077,6
                                                                                                  082,6083,6084,6091,6092,6093,6110,
                                                                                                  6111,6113,6114,6119,6120,6122,6123
                                                                                                  ,6151,6152,6166,6215,6216,6217,621
                                                                                                  8,6267,6268,6269,6270,6297,6298,63
                                                                                                  12,6313,6314,6315,6316,6317,6325,6
                                                                                                  326,6337,6338,6339,6340,6352,6353,
                                                                                                  6355,6356,6361,6362,6371,6372,6417
                                                                                                  ,6418,6419,6420                   

Page 206         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PE                         Local  5782     I(4)            4           scalar                    5808,5843                         
 PEBEGIN                    Local  5793     I(4)            4     1     0                         5841,5843,5853                    
 PEEND                      Local  5793     I(4)            4     1     0                         5841                              
 PELIST                     Local  5788     I(4)            4     1     0                         5811,5813,5814,5841,5853,6069,6077
                                                                                                  ,6114,6123                        
 POS                        Local  5784     I(4)            4           scalar                    5954,5971,5972,5973,5974,5975,5976
                                                                                                  ,5978,5979,5990,6014,6016,6021,602
                                                                                                  2,6023,6024,6025,6027,6028,6030,60
                                                                                                  31,6039,6040,6041,6042,6043,6045,6
                                                                                                  046,6048,6090,6092,6093,6113,6114,
                                                                                                  6122,6123,6149,6154,6155,6156,6157
                                                                                                  ,6158,6160,6161,6163,6164,6168,616
                                                                                                  9,6170,6171,6172,6174,6175,6177,63
                                                                                                  56,6357,6362,6363,6372,6373,6374  
 POS_S                      Local  5798     I(4)            4     1     1        ALC,SAVE         6294,6329,6339,6340,6381          
 POS_X                      Local  5795     I(4)            4     1     0                         6324,6326,6329,6339,6340,6356,6362
                                                                                                  ,6372                             
 READ_DATA_2D_REGION        Subr   5886                                          PRIV             5886,5888,5890,5892,5894,5897,5899
                                                                                                  ,5906,5909,5913,5921,5941,6526,652
                                                                                                  7,6533,6540                       
 RECV_BUFFER                Local  5773     R(8)            8     1     1        ALC              6099,6107,6114,6154,6155,6156,6157
                                                                                                  ,6158,6160,6161,6163,6168,6169,617
                                                                                                  0,6171,6172,6174,6175,6182        
 RECV_BUFFER_POS            Local  5792     I(4)            4     1     0                         6092,6107,6113                    
 RECV_CNT                   Local  5791     I(4)            4     1     0                         6104,6107                         
 SCALE                      Local  5780     R(8)            8     1     1        ALC              5938,5942,6030,6146,6147,6163,6257
                                                                                                  ,6430                             
 SCALE_EXIST                Local  5778     L(4)            4           scalar                    5778,5804,5872,5943,6030,6145,6163
                                                                                                  ,6256,6430                        
 SEND_BUFFER                Local  5773     R(8)            8     1     1        ALC              6013,6021,6022,6023,6024,6025,6027
                                                                                                  ,6028,6030,6039,6040,6041,6042,604
                                                                                                  3,6045,6046,6106,6123,6181        
 SEND_BUFFER_POS            Local  5792     I(4)            4     1     0                         6016,6106,6122                    
 SEND_CNT                   Local  5791     I(4)            4     1     0                         6103,6106                         
 SIZ                        Local  5775     I(4)            4     1     4        TGT              5820,5821                         
 SIZE                       Func   6279                                 scalar                    6279,6288                         
 SIZE_PREV                  Local  5775     I(4)            4           scalar                    6199,6226,6227,6228,6232,6240     
 SIZE_REPRO                 Local  5777     I(4)            4           scalar                    6285,6321,6385,6387               
 START                      Local  5785     I(4)            4     1     4        TGT              5880,5884,5886,5888,5890,5892,5894
                                                                                                  ,5897,5899,5904,5906,5909,5913,591
                                                                                                  7,5918,5921,5941                  
 SUBSET_ROOTPE              Local  5789     L(4)            4     1     0                         5838,5850,5854,6068               
 SUM                        Func   6097                                 scalar                    6097,6098                         
 TILE1                      Dummy  5751     I(4)            4           scalar   ARG,IN           5959,6035,6206,6216,6254,6268,6286
                                                                                                  ,6385,6410                        
 TILE2                      Dummy  5751     I(4)            4           scalar   ARG,IN           5969,6017,6201,6241,6313,6418     
 TMP                        Local  5772     R(8)            8     2     1        ALC              5885,5886,5887,5888,5889,5890,5891
                                                                                                  ,5892,5893,5894,5895,5897,5898,589
                                                                                                  9,5900,5902,5905,5906,5907,5908,59
                                                                                                  09,5910,5911,5913,5914,5915,5919,5
                                                                                                  920,5921,5926,5928,5941,5942,5946 
 TRIM                       Func   5924                                 scalar                    5924,5927,5930,5931,5940          
 USE_HIGHER_ORDER           Dummy  5751     L(4)            4           scalar   ARG,IN           5868,5878,5896,5912,5953,5977,5989
                                                                                                  ,6026,6044,6140,6159,6173,6190,626
                                                                                                  1,6412,6429,6433                  

Page 207         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 XMAP                       Dummy  5751     XMAP_TYPE       928         scalar   ARG,INOUT        5788,5789,5805,5807,5818,5882,6215
                                                                                                  ,6218,6267,6270,6279,6294,6297,629
                                                                                                  8,6312,6315,6332,6337,6338,6377,64
                                                                                                  17,6420                           
 X_LOCAL                    Local  5776     RECORD          72    1     1        ALC              6228,6229,6232,6233,6389,6390,6393
                                                                                                  ,6394                             
 Y2M1_PE                    Local  5796     I(4)            4     1     1        ALC              6293,6295,6316,6352,6378          
 Y2M1_SIZE                  Local  5795     I(4)            4     1     0                         6298,6301,6317,6326,6332,6348,6355
                                                                                                  ,6356,6361,6371,6372,6377         

Page 208         Source Listing                  LOAD_XGRID_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6442 
   6443 !#######################################################################
   6444 !
   6445 ! get_grid - read the center point of the grid from grid_spec.nc.
   6446 !          - only the grid at the side 1 is needed, so we only read
   6447 !          - atm and land grid
   6448 !
   6449 !
   6450 
   6451 subroutine get_grid(grid, grid_id, grid_file, grid_version) !< use_mpp_io
   6452   type(grid_type), intent(inout) :: grid
   6453   character(len=3), intent(in)   :: grid_id
   6454   character(len=*), intent(in)   :: grid_file
   6455   integer,          intent(in)   :: grid_version
   6456 
   6457   real, dimension(grid%im) :: lonb
   6458   real, dimension(grid%jm) :: latb
   6459   real, allocatable        :: tmpx(:,:), tmpy(:,:)
   6460   real                     :: d2r
   6461   integer                  :: is, ie, js, je, nlon, nlat, siz(4), i, j
   6462   integer                  :: start(4), nread(4), isc2, iec2, jsc2, jec2
   6463 
   6464   d2r = PI/180.0
   6465 
   6466   call mpp_get_compute_domain(grid%domain, is, ie, js, je)
   6467 
   6468   select case(grid_version)
   6469   case(VERSION1)
   6470      allocate(grid%lon(grid%im), grid%lat(grid%jm))
   6471      if(grid_id == 'ATM') then
   6472         call read_data(grid_file, 'xta', lonb)
   6473         call read_data(grid_file, 'yta', latb)
   6474 
   6475         if(.not. allocated(AREA_ATM_MODEL)) then
   6476            allocate(AREA_ATM_MODEL(is:ie, js:je))
   6477            call get_area_elements(grid_file, 'AREA_ATM_MODEL', grid%domain, AREA_ATM_MODEL)
   6478         endif
   6479         if(.not. allocated(AREA_ATM_SPHERE)) then
   6480            allocate(AREA_ATM_SPHERE(is:ie, js:je))
   6481            call get_area_elements(grid_file, 'AREA_ATM', grid%domain, AREA_ATM_SPHERE)
   6482         endif
   6483      else if(grid_id == 'LND') then
   6484         call read_data(grid_file, 'xtl', lonb)
   6485         call read_data(grid_file, 'ytl', latb)
   6486         if(.not. allocated(AREA_LND_MODEL)) then
   6487            allocate(AREA_LND_MODEL(is:ie, js:je))
   6488            call get_area_elements(grid_file, 'AREA_LND_MODEL', grid%domain, AREA_LND_MODEL)
   6489         endif
   6490         if(.not. allocated(AREA_LND_SPHERE)) then
   6491            allocate(AREA_LND_SPHERE(is:ie, js:je))
   6492            call get_area_elements(grid_file, 'AREA_LND', grid%domain, AREA_LND_SPHERE)
   6493         endif
   6494      else if(grid_id == 'OCN' ) then
   6495         if(.not. allocated(AREA_OCN_SPHERE)) then
   6496            allocate(AREA_OCN_SPHERE(is:ie, js:je))
   6497            call get_area_elements(grid_file, 'AREA_OCN', grid%domain, AREA_OCN_SPHERE)
   6498         endif

Page 209         Source Listing                  GET_GRID
2021-06-01 08:56                                 xgrid.F90

   6499      endif
   6500 !--- second order remapping suppose second order
   6501      if(grid_id == 'LND' .or. grid_id == 'ATM') then
   6502         grid%lon   = lonb * d2r
   6503         grid%lat   = latb * d2r
   6504      endif
   6505      grid%is_latlon = .true.
   6506   case(VERSION2)
   6507      call field_size(grid_file, 'area', siz)
   6508      nlon = siz(1); nlat = siz(2)
   6509      if( mod(nlon,2) .NE. 0) call error_mesg('xgrid_mod',  &
   6510           'flux_exchange_mod: atmos supergrid longitude size can not be divided by 2', FATAL)
   6511      if( mod(nlat,2) .NE. 0) call error_mesg('xgrid_mod',  &
   6512           'flux_exchange_mod: atmos supergrid latitude size can not be divided by 2', FATAL)
   6513      nlon = nlon/2
   6514      nlat = nlat/2
   6515      if(nlon .NE. grid%im .OR. nlat .NE. grid%jm) call error_mesg('xgrid_mod', &
   6516          'grid size in tile_file does not match the global grid size', FATAL)
   6517 
   6518      if( grid_id == 'LND' .or. grid_id == 'ATM'  .or. grid_id == 'WAV' ) then
   6519         isc2 = 2*grid%is_me-1; iec2 = 2*grid%ie_me+1
   6520         jsc2 = 2*grid%js_me-1; jec2 = 2*grid%je_me+1
   6521         allocate(tmpx(isc2:iec2, jsc2:jec2) )
   6522         allocate(tmpy(isc2:iec2, jsc2:jec2) )
   6523         start = 1; nread = 1
   6524         start(1) = isc2; nread(1) = iec2 - isc2 + 1
   6525         start(2) = jsc2; nread(2) = jec2 - jsc2 + 1
   6526         call read_data(grid_file, 'x', tmpx, start, nread, no_domain=.TRUE.)
   6527         call read_data(grid_file, 'y', tmpy, start, nread, no_domain=.TRUE.)
   6528         if(is_lat_lon(tmpx, tmpy) ) then
   6529            deallocate(tmpx, tmpy)
   6530            start = 1; nread = 1
   6531            start(2) = 2; nread(1) = nlon*2+1
   6532            allocate(tmpx(nlon*2+1, 1), tmpy(1, nlat*2+1))
   6533            call read_data(grid_file, "x", tmpx, start, nread, no_domain=.TRUE.)
   6534            allocate(grid%lon(grid%im), grid%lat(grid%jm))
   6535            do i = 1, grid%im
   6536               grid%lon(i) = tmpx(2*i,1) * d2r
   6537            end do
   6538            start = 1; nread = 1
   6539            start(1) = 2; nread(2) = nlat*2+1
   6540            call read_data(grid_file, "y", tmpy, start, nread, no_domain=.TRUE.)
   6541            do j = 1, grid%jm
   6542               grid%lat(j) = tmpy(1, 2*j) * d2r
   6543            end do
   6544            grid%is_latlon = .true.
   6545         else
   6546            allocate(grid%geolon(grid%isd_me:grid%ied_me, grid%jsd_me:grid%jed_me))
   6547            allocate(grid%geolat(grid%isd_me:grid%ied_me, grid%jsd_me:grid%jed_me))
   6548            grid%geolon = 1e10
   6549            grid%geolat = 1e10
   6550 !--- area_ocn_sphere, area_lnd_sphere, area_atm_sphere is not been defined.
   6551            do j = grid%js_me,grid%je_me
   6552               do i = grid%is_me,grid%ie_me
   6553                  grid%geolon(i, j) = tmpx(i*2,j*2)*d2r
   6554                  grid%geolat(i, j) = tmpy(i*2,j*2)*d2r
   6555               end do

Page 210         Source Listing                  GET_GRID
2021-06-01 08:56                                 xgrid.F90

   6556            end do
   6557            call mpp_update_domains(grid%geolon, grid%domain)
   6558            call mpp_update_domains(grid%geolat, grid%domain)
   6559            grid%is_latlon = .false.
   6560         end if
   6561         deallocate(tmpx, tmpy)
   6562      end if
   6563   end select
   6564 
   6565   return
   6566 
   6567 end subroutine get_grid !< use_mpp_io


ENTRY POINTS

  Name                              
                                    
 xgrid_mod_mp_get_grid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   6475                                 scalar                    6475,6479,6486,6490,6495          
 D2R                        Local  6460     R(8)            8           scalar                    6464,6502,6503,6536,6542,6553,6554
 GET_GRID                   Subr   6451                                                                                             
 GRID                       Dummy  6451     GRID_TYPE       4888        scalar   ARG,INOUT        6457,6458,6466,6470,6477,6481,6488
                                                                                                  ,6492,6497,6502,6503,6505,6515,651
                                                                                                  9,6520,6534,6535,6536,6541,6542,65
                                                                                                  44,6546,6547,6548,6549,6551,6552,6
                                                                                                  553,6554,6557,6558,6559           
 GRID_FILE                  Dummy  6451     CHAR                        scalar   ARG,IN           6472,6473,6477,6481,6484,6485,6488
                                                                                                  ,6492,6497,6507,6526,6527,6533,654
                                                                                                  0                                 
 GRID_ID                    Dummy  6451     CHAR            3           scalar   ARG,IN           6471,6483,6494,6501,6518          
 GRID_VERSION               Dummy  6451     I(4)            4           scalar   ARG,IN           6468                              
 I                          Local  6461     I(4)            4           scalar                    6535,6536,6552,6553,6554          
 IE                         Local  6461     I(4)            4           scalar                    6466,6476,6480,6487,6491,6496     
 IEC2                       Local  6462     I(4)            4           scalar                    6519,6521,6522,6524               
 IS                         Local  6461     I(4)            4           scalar                    6466,6476,6480,6487,6491,6496     
 ISC2                       Local  6462     I(4)            4           scalar                    6519,6521,6522,6524               
 J                          Local  6461     I(4)            4           scalar                    6541,6542,6551,6553,6554          
 JE                         Local  6461     I(4)            4           scalar                    6466,6476,6480,6487,6491,6496     
 JEC2                       Local  6462     I(4)            4           scalar                    6520,6521,6522,6525               
 JS                         Local  6461     I(4)            4           scalar                    6466,6476,6480,6487,6491,6496     
 JSC2                       Local  6462     I(4)            4           scalar                    6520,6521,6522,6525               
 LATB                       Local  6458     R(8)            8     1     0                         6473,6485,6503                    
 LONB                       Local  6457     R(8)            8     1     0                         6472,6484,6502                    
 MOD                        Func   6509                                 scalar                    6509,6511                         
 NLAT                       Local  6461     I(4)            4           scalar                    6508,6511,6514,6515,6532,6539     
 NLON                       Local  6461     I(4)            4           scalar                    6508,6509,6513,6515,6531,6532     
 NREAD                      Local  6462     I(4)            4     1     4        TGT              6523,6524,6525,6526,6527,6530,6531
                                                                                                  ,6533,6538,6539,6540              
 READ_DATA_1D_NEW           Subr   6472                                          PRIV             6472,6473,6484,6485               
 SIZ                        Local  6461     I(4)            4     1     4        TGT              6507,6508                         

Page 211         Source Listing                  GET_GRID
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 START                      Local  6462     I(4)            4     1     4        TGT              6523,6524,6525,6526,6527,6530,6531
                                                                                                  ,6533,6538,6539,6540              
 TMPX                       Local  6459     R(8)            8     2     1        ALC              6521,6526,6528,6529,6532,6533,6536
                                                                                                  ,6553,6561                        
 TMPY                       Local  6459     R(8)            8     2     1        ALC              6522,6527,6528,6529,6532,6540,6542
                                                                                                  ,6554,6561                        

Page 212         Source Listing                  GET_GRID
2021-06-01 08:56                                 xgrid.F90

   6568 
   6569 !#######################################################################
   6570 ! Read the area elements from NetCDF file
   6571 subroutine get_area_elements_use_mpp_io(file, name, domain, data)
   6572   character(len=*), intent(in) :: file
   6573   character(len=*), intent(in) :: name
   6574   type(domain2d),   intent(in) :: domain
   6575   real, intent(out)            :: data(:,:)
   6576 
   6577   if(field_exist(file, name)) then
   6578      call read_data(file, name, data, domain)
   6579   else
   6580      call error_mesg('xgrid_mod', 'no field named '//trim(name)//' in grid file '//trim(file)// &
   6581                      ' Will set data to negative values...', NOTE)
   6582 ! area elements no present in grid_spec file, set to negative values....
   6583      data = -1.0
   6584   endif
   6585 
   6586 end subroutine get_area_elements_use_mpp_io


ENTRY POINTS

  Name                                                  
                                                        
 xgrid_mod_mp_get_area_elements_use_mpp_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  6571     R(8)            8     2     1        ARG,OUT          6578,6583                         
 DOMAIN                     Dummy  6571     DOMAIN2D        752         scalar   ARG,IN           6578                              
 FILE                       Dummy  6571     CHAR                        scalar   ARG,IN           6577,6578,6580                    
 GET_AREA_ELEMENTS_USE_MPP_                                                                                                         
 IO                         Subr   6571                                                           6477,6481,6488,6492,6497          
 NAME                       Dummy  6571     CHAR                        scalar   ARG,IN           6577,6578,6580                    
 READ_DATA_2D_NEW           Subr   6578                                          PRIV             6578,6623                         
 TRIM                       Func   6580                                 scalar                    6580                              

Page 213         Source Listing                  GET_AREA_ELEMENTS_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6587 
   6588 !#######################################################################
   6589 ! Read the OCN model area elements from NetCDF file
   6590 ! <SUBROUTINE NAME="get_ocean_model_area_elements">
   6591 
   6592 !   <OVERVIEW>
   6593 !      Read Ocean area element data.
   6594 !   </OVERVIEW>
   6595 !   <DESCRIPTION>
   6596 !      If available in the NetCDF file, this routine will read the
   6597 !      AREA_OCN_MODEL field and load the data into global AREA_OCN_MODEL.
   6598 !      If not available, then the array AREA_OCN_MODEL will be left
   6599 !      unallocated. Must be called by all PEs.
   6600 !   </DESCRIPTION>
   6601 !   <TEMPLATE>
   6602 !     call get_ocean_model_area_elements(ocean_domain, grid_file)
   6603 !   </TEMPLATE>
   6604 
   6605 !   <IN NAME="ocean_domain" TYPE="type(Domain2d)"> </IN>
   6606 !   <IN NAME="grid_file" TYPE="character(len=*)" > </IN>
   6607 subroutine get_ocean_model_area_elements_use_mpp_io(domain, grid_file)
   6608 
   6609   type(Domain2d), intent(in) :: domain
   6610   character(len=*), intent(in) :: grid_file
   6611   integer :: is, ie, js, je
   6612 
   6613   if(allocated(AREA_OCN_MODEL)) return
   6614 
   6615   call mpp_get_compute_domain(domain, is, ie, js, je)
   6616 ! allocate even if ie<is, ... in which case the array will have zero size
   6617 ! but will still return .T. for allocated(...)
   6618   allocate(AREA_OCN_MODEL(is:ie, js:je))
   6619   if(ie < is .or. je < js ) return
   6620 
   6621 
   6622   if(field_exist(grid_file, 'AREA_OCN_MODEL') )then
   6623      call read_data(grid_file, 'AREA_OCN_MODEL', AREA_OCN_MODEL, domain)
   6624   else
   6625      deallocate(AREA_OCN_MODEL)
   6626   endif
   6627 
   6628 
   6629 end subroutine get_ocean_model_area_elements_use_mpp_io

Page 214         Source Listing                  GET_OCEAN_MODEL_AREA_ELEMENTS_USE_MPP_IO
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                                              
                                                                    
 xgrid_mod_mp_get_ocean_model_area_elements_use_mpp_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   6613                                 scalar                    6613                              
 DOMAIN                     Dummy  6607     DOMAIN2D        752         scalar   ARG,IN           6615,6623                         
 GET_OCEAN_MODEL_AREA_ELEME                                                                                                         
 NTS_USE_MPP_IO             Subr   6607                                                                                             
 GRID_FILE                  Dummy  6607     CHAR                        scalar   ARG,IN           6622,6623                         
 IE                         Local  6611     I(4)            4           scalar                    6615,6618,6619                    
 IS                         Local  6611     I(4)            4           scalar                    6615,6618,6619                    
 JE                         Local  6611     I(4)            4           scalar                    6615,6618,6619                    
 JS                         Local  6611     I(4)            4           scalar                    6615,6618,6619                    

Page 215         Source Listing                  GET_OCEAN_MODEL_AREA_ELEMENTS_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6630 ! </SUBROUTINE>
   6631 !#######################################################################
   6632 
   6633 ! <SUBROUTINE NAME="setup_xmap">
   6634 
   6635 !   <OVERVIEW>
   6636 !      Sets up exchange grid connectivity using grid specification file and
   6637 !      processor domain decomposition.
   6638 !   </OVERVIEW>
   6639 !   <DESCRIPTION>
   6640 !      Sets up exchange grid connectivity using grid specification file and
   6641 !      processor domain decomposition. Initializes xmap.
   6642 !   </DESCRIPTION>
   6643 !   <TEMPLATE>
   6644 !     call setup_xmap(xmap, grid_ids, grid_domains, grid_file, atm_grid)
   6645 !   </TEMPLATE>
   6646 
   6647 !   <IN NAME="grid_ids" TYPE="character(len=3)" DIM="(:)"> </IN>
   6648 !   <IN NAME="grid_domains" TYPE="type(Domain2d)" DIM="(:)"> </IN>
   6649 !   <IN NAME="grid_file" TYPE="character(len=*)" > </IN>
   6650 !   <IN NAME="atmos_grid" TYPE="type(grid_box_type),optional" > </IN>
   6651 !   <OUT NAME="xmap" TYPE="xmap_type"  > </OUT>
   6652 
   6653 subroutine setup_xmap_use_mpp_io(xmap, grid_ids, grid_domains, grid_file, atm_grid, lnd_ug_domain)
   6654   type (xmap_type),                        intent(inout) :: xmap
   6655   character(len=3), dimension(:),            intent(in ) :: grid_ids
   6656   type(Domain2d), dimension(:),              intent(in ) :: grid_domains
   6657   character(len=*),                          intent(in ) :: grid_file
   6658   type(grid_box_type), optional,             intent(in ) :: atm_grid
   6659   type(domainUG), optional,                  intent(in ) :: lnd_ug_domain
   6660 
   6661   integer :: g,     p, send_size, recv_size, i, siz(4)
   6662   integer :: unit, nxgrid_file, i1, i2, i3, tile1, tile2, j
   6663   integer :: nxc, nyc, out_unit
   6664   type (grid_type), pointer, save :: grid =>NULL(), grid1 =>NULL()
   6665   real, dimension(3) :: xxx
   6666   real, dimension(:,:), allocatable   :: check_data
   6667   real, dimension(:,:,:), allocatable :: check_data_3D
   6668   real,                 allocatable   :: tmp_2d(:,:), tmp_3d(:,:,:)
   6669   character(len=256)                  :: xgrid_file, xgrid_name
   6670   character(len=256)                  :: tile_file, mosaic_file
   6671   character(len=256)                  :: mosaic1, mosaic2, contact
   6672   character(len=256)                  :: tile1_name, tile2_name
   6673   character(len=256),     allocatable :: tile1_list(:), tile2_list(:)
   6674   integer                             :: npes, npes2
   6675   integer,                allocatable :: pelist(:)
   6676   type(domain2d), save                :: domain2
   6677   logical :: use_higher_order = .false.
   6678   integer :: lnd_ug_id, l
   6679   integer, allocatable :: grid_index(:)
   6680 
   6681   call mpp_clock_begin(id_setup_xmap)
   6682 
   6683   if(interp_method .ne. 'first_order')  use_higher_order = .true.
   6684 
   6685   out_unit = stdout()
   6686   xmap%me   = mpp_pe  ()

Page 216         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6687   xmap%npes = mpp_npes()
   6688   xmap%root_pe = mpp_root_pe()
   6689 
   6690   allocate( xmap%grids(1:size(grid_ids(:))) )
   6691 
   6692   allocate ( xmap%your1my2(0:xmap%npes-1), xmap%your2my1(0:xmap%npes-1) )
   6693   allocate ( xmap%your2my1_size(0:xmap%npes-1) )
   6694 
   6695   xmap%your1my2 = .false.; xmap%your2my1 = .false.;
   6696   xmap%your2my1_size = 0
   6697 
   6698 !  check the exchange grid file version to be used by checking the field in the file
   6699   if(field_exist(grid_file, "AREA_ATMxOCN" ) ) then
   6700      xmap%version = VERSION1
   6701   else if(field_exist(grid_file, "ocn_mosaic_file" ) ) then
   6702      xmap%version = VERSION2
   6703   else
   6704      call error_mesg('xgrid_mod', 'both AREA_ATMxOCN and ocn_mosaic_file does not exist in '//trim(grid_file), FATAL)
   6705   end if
   6706 
   6707   if(xmap%version==VERSION1) then
   6708      call error_mesg('xgrid_mod', 'reading exchange grid information from grid spec file', NOTE)
   6709   else
   6710      call error_mesg('xgrid_mod', 'reading exchange grid information from mosaic grid file', NOTE)
   6711   end if
   6712 
   6713 ! check to see the id of lnd.
   6714   lnd_ug_id = 0
   6715   if(present(lnd_ug_domain)) then
   6716      do g=1,size(grid_ids(:))
   6717         if(grid_ids(g) == 'LND') lnd_ug_id = g
   6718      enddo
   6719   endif
   6720 
   6721   call mpp_clock_begin(id_load_xgrid)
   6722   do g=1,size(grid_ids(:))
   6723      grid => xmap%grids(g)
   6724      if (g==1) grid1 => xmap%grids(g)
   6725      grid%id     = grid_ids    (g)
   6726      grid%domain = grid_domains(g)
   6727      grid%on_this_pe = mpp_domain_is_initialized(grid_domains(g))
   6728      allocate ( grid%is(0:xmap%npes-1), grid%ie(0:xmap%npes-1) )
   6729      allocate ( grid%js(0:xmap%npes-1), grid%je(0:xmap%npes-1) )
   6730      allocate ( grid%tile(0:xmap%npes-1) )
   6731      grid%npes   = 0
   6732      grid%ni = 0
   6733      grid%nj = 0
   6734      grid%is = 0
   6735      grid%ie = -1
   6736      grid%js = 0
   6737      grid%je = -1
   6738      grid%tile = -1
   6739 
   6740      select case(xmap%version)
   6741      case(VERSION1)
   6742         grid%ntile = 1
   6743      case(VERSION2)

Page 217         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6744         call read_data(grid_file, lowercase(grid_ids(g))//'_mosaic_file', mosaic_file)
   6745         grid%ntile = get_mosaic_ntiles_use_mpp_io('INPUT/'//trim(mosaic_file))
   6746      end select
   6747 
   6748      if( g == 1 .AND. grid_ids(1) == 'ATM' ) then
   6749         if( .NOT. grid%on_this_pe ) call error_mesg('xgrid_mod', 'ATM domain is not defined on some processor' ,FATAL)
   6750      endif
   6751      grid%npes =  mpp_get_domain_npes(grid%domain)
   6752      if( xmap%npes > grid%npes .AND. g == 1 .AND. grid_ids(1) == 'ATM' ) then
   6753         call mpp_broadcast_domain(grid%domain, domain2)
   6754      else if(xmap%npes > grid%npes) then
   6755         call mpp_broadcast_domain(grid%domain)
   6756         grid%npes =  mpp_get_domain_npes(grid%domain)
   6757      endif
   6758 
   6759      npes = grid%npes
   6760      allocate(grid%pelist(0:npes-1))
   6761      call mpp_get_domain_pelist(grid%domain, grid%pelist)
   6762      grid%root_pe = mpp_get_domain_root_pe(grid%domain)
   6763 
   6764      call mpp_get_data_domain(grid%domain, grid%isd_me, grid%ied_me, grid%jsd_me, grid%jed_me, &
   6765                               xsize=grid%nxd_me, ysize=grid%nyd_me)
   6766      call mpp_get_global_domain(grid%domain, xsize=grid%ni, ysize=grid%nj)
   6767 
   6768      if( grid%root_pe == xmap%root_pe ) then
   6769         call mpp_get_compute_domains(grid%domain,  xbegin=grid%is(0:npes-1), xend=grid%ie(0:npes-1), &
   6770                                      ybegin=grid%js(0:npes-1), yend=grid%je(0:npes-1) )
   6771         call mpp_get_tile_list(grid%domain, grid%tile(0:npes-1))
   6772         if( xmap%npes > npes .AND. g == 1 .AND. grid_ids(1) == 'ATM' ) then
   6773            call mpp_get_compute_domains(domain2, xbegin=grid%is(npes:xmap%npes-1), xend=grid%ie(npes:xmap%npes-1), &
   6774                                         ybegin=grid%js(npes:xmap%npes-1), yend=grid%je(npes:xmap%npes-1) )
   6775            call mpp_get_tile_list(domain2, grid%tile(npes:xmap%npes-1))
   6776         endif
   6777      else
   6778         npes2 = xmap%npes-npes
   6779         call mpp_get_compute_domains(domain2,  xbegin=grid%is(0:npes2-1), xend=grid%ie(0:npes2-1), &
   6780                                      ybegin=grid%js(0:npes2-1), yend=grid%je(0:npes2-1) )
   6781         call mpp_get_compute_domains(grid%domain, xbegin=grid%is(npes2:xmap%npes-1), xend=grid%ie(npes2:xmap%npes-1), &
   6782                                      ybegin=grid%js(npes2:xmap%npes-1), yend=grid%je(npes2:xmap%npes-1) )
   6783         call mpp_get_tile_list(domain2, grid%tile(0:npes2-1))
   6784         call mpp_get_tile_list(grid%domain, grid%tile(npes2:xmap%npes-1))
   6785      endif
   6786      if( xmap%npes > grid%npes .AND. g == 1 .AND. grid_ids(1) == 'ATM' ) then
   6787         call mpp_deallocate_domain(domain2)
   6788      endif
   6789      npes = grid%npes
   6790      if(  g == 1 .AND. grid_ids(1) == 'ATM' ) npes = xmap%npes
   6791      do p = 0, npes-1
   6792         if(grid%tile(p) > grid%ntile .or. grid%tile(p) < 1) call error_mesg('xgrid_mod', &
   6793                  'tile id should between 1 and ntile', FATAL)
   6794      end do
   6795 
   6796      grid%im = grid%ni
   6797      grid%jm = grid%nj
   6798      call mpp_max(grid%ni)
   6799      call mpp_max(grid%nj)
   6800 

Page 218         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6801      grid%is_me => grid%is(xmap%me-xmap%root_pe); grid%ie_me => grid%ie(xmap%me-xmap%root_pe)
   6802      grid%js_me => grid%js(xmap%me-xmap%root_pe); grid%je_me => grid%je(xmap%me-xmap%root_pe)
   6803      grid%nxc_me = grid%ie_me - grid%is_me + 1
   6804      grid%nyc_me = grid%je_me - grid%js_me + 1
   6805      grid%tile_me => grid%tile(xmap%me-xmap%root_pe)
   6806 
   6807      grid%km = 1
   6808      grid%is_ug = .false.
   6809 !--- setup for land unstructure grid
   6810      if( g == lnd_ug_id ) then
   6811         if(xmap%version == VERSION1) call error_mesg('xgrid_mod', &
   6812                                      'does not support unstructured grid for VERSION1 grid' ,FATAL)
   6813         grid%is_ug     = .true.
   6814         grid%ug_domain = lnd_ug_domain
   6815         allocate ( grid%ls(0:xmap%npes-1), grid%le(0:xmap%npes-1) )
   6816         allocate ( grid%gs(0:xmap%npes-1), grid%ge(0:xmap%npes-1) )
   6817         grid%ls = 0
   6818         grid%le = -1
   6819         grid%gs = 0
   6820         grid%ge = -1
   6821         if(xmap%npes > grid%npes) then
   6822            call mpp_broadcast_domain(grid%ug_domain)
   6823         endif
   6824         call mpp_get_ug_compute_domains(grid%ug_domain,  begin=grid%ls(0:npes-1), end=grid%le(0:npes-1) )
   6825         call mpp_get_ug_domains_index(grid%ug_domain,  grid%gs(0:npes-1), grid%ge(0:npes-1) )
   6826         call mpp_get_ug_domain_tile_list(grid%ug_domain, grid%tile(0:npes-1))
   6827         grid%ls_me => grid%ls(xmap%me-xmap%root_pe); grid%le_me => grid%le(xmap%me-xmap%root_pe)
   6828         grid%gs_me => grid%gs(xmap%me-xmap%root_pe); grid%ge_me => grid%ge(xmap%me-xmap%root_pe)
   6829         grid%tile_me => grid%tile(xmap%me-xmap%root_pe)
   6830         grid%nxl_me = grid%le_me - grid%ls_me + 1
   6831         allocate(grid%l_index(grid%gs_me:grid%ge_me))
   6832         allocate(grid_index(grid%ls_me:grid%le_me))
   6833         call mpp_get_UG_domain_grid_index(grid%ug_domain, grid_index)
   6834 
   6835         grid%l_index = 0
   6836         do l = grid%ls_me,grid%le_me
   6837            grid%l_index(grid_index(l)) = l
   6838         enddo
   6839 
   6840         if( grid%on_this_pe ) then
   6841            allocate( grid%area    (grid%ls_me:grid%le_me,1) )
   6842            allocate( grid%area_inv(grid%ls_me:grid%le_me,1) )
   6843            grid%area       = 0.0
   6844            grid%size       = 0
   6845            grid%size_repro = 0
   6846         endif
   6847      else if( grid%on_this_pe ) then
   6848         allocate( grid%area    (grid%is_me:grid%ie_me, grid%js_me:grid%je_me) )
   6849         allocate( grid%area_inv(grid%is_me:grid%ie_me, grid%js_me:grid%je_me) )
   6850         grid%area       = 0.0
   6851         grid%size       = 0
   6852         grid%size_repro = 0
   6853      endif
   6854 
   6855 ! get the center point of the grid box
   6856      if(.not. grid%is_ug) then
   6857         select case(xmap%version)

Page 219         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6858         case(VERSION1)
   6859            if( grid%npes .NE. xmap%npes ) then
   6860               call error_mesg('xgrid_mod', ' grid%npes .NE. xmap%npes ', FATAL)
   6861            endif
   6862            call get_grid(grid, grid_ids(g), grid_file, xmap%version)
   6863         case(VERSION2)
   6864            allocate(pelist(0:xmap%npes-1))
   6865            call mpp_get_current_pelist(pelist)
   6866            if( grid%on_this_pe ) then
   6867               call mpp_set_current_pelist(grid%pelist)
   6868               call get_mosaic_tile_grid_use_mpp_io(tile_file, 'INPUT/'//trim(mosaic_file), grid%domain)
   6869               call get_grid(grid, grid_ids(g), tile_file, xmap%version)
   6870            endif
   6871            call mpp_set_current_pelist(pelist)
   6872            deallocate(pelist)
   6873 ! read the contact information from mosaic_file to check if atmosphere is nested model
   6874            if( g == 1 .AND. grid_ids(1) == 'ATM' ) then
   6875               nnest = get_nest_contact('INPUT/'//trim(mosaic_file), tile_nest, tile_parent, is_nest, &
   6876                    ie_nest, js_nest, je_nest, is_parent, ie_parent, js_parent, je_parent)
   6877            endif
   6878         end select
   6879 
   6880         if( use_higher_order .AND. grid%id == 'ATM') then
   6881            if( nnest > 0 ) call error_mesg('xgrid_mod', 'second_order is not supported for nested coupler', FATAL)
   6882            if( grid%is_latlon ) then
   6883               call mpp_modify_domain(grid%domain, grid%domain_with_halo, whalo=1, ehalo=1, shalo=1, nhalo=1)
   6884               call mpp_get_data_domain(grid%domain_with_halo, grid%isd_me, grid%ied_me, grid%jsd_me, grid%jed_me, &
   6885                    xsize=grid%nxd_me, ysize=grid%nyd_me)
   6886            else
   6887               if(.NOT. present(atm_grid)) call error_mesg('xgrid_mod', &
   6888                                           'when first grid is "ATM", atm_grid should be present', FATAL)
   6889               if(grid%is_me-grid%isd_me .NE. 1 .or. grid%ied_me-grid%ie_me .NE. 1 .or.               &
   6890                    grid%js_me-grid%jsd_me .NE. 1 .or. grid%jed_me-grid%je_me .NE. 1 ) call error_mesg( &
   6891                    'xgrid_mod', 'for non-latlon grid (cubic grid), the halo size should be 1 in all four direction', FATAL)
   6892               if(.NOT.( ASSOCIATED(atm_grid%dx) .AND. ASSOCIATED(atm_grid%dy) .AND. ASSOCIATED(atm_grid%edge_w) .AND.    &
   6893                    ASSOCIATED(atm_grid%edge_e) .AND. ASSOCIATED(atm_grid%edge_s) .AND. ASSOCIATED(atm_grid%edge_n) .AND. &
   6894                    ASSOCIATED(atm_grid%en1) .AND. ASSOCIATED(atm_grid%en2) .AND. ASSOCIATED(atm_grid%vlon) .AND.         &
   6895                    ASSOCIATED(atm_grid%vlat) ) )  call error_mesg( 'xgrid_mod', &
   6896                    'for non-latlon grid (cubic grid), all the fields in atm_grid data type should be allocated', FATAL)
   6897               nxc = grid%ie_me  - grid%is_me  + 1
   6898               nyc = grid%je_me  - grid%js_me  + 1
   6899               if(size(atm_grid%dx,1) .NE. nxc .OR. size(atm_grid%dx,2) .NE. nyc+1)               &
   6900                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%dx', FATAL)
   6901               if(size(atm_grid%dy,1) .NE. nxc+1 .OR. size(atm_grid%dy,2) .NE. nyc)               &
   6902                    call error_mesg('xgrid_mod', 'incorrect dimension sizeof atm_grid%dy', FATAL)
   6903               if(size(atm_grid%area,1) .NE. nxc .OR. size(atm_grid%area,2) .NE. nyc)             &
   6904                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%area', FATAL)
   6905               if(size(atm_grid%edge_w(:)) .NE. nyc+1 .OR. size(atm_grid%edge_e(:)) .NE. nyc+1)    &
   6906                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%edge_w/edge_e', FATAL)
   6907               if(size(atm_grid%edge_s(:)) .NE. nxc+1 .OR. size(atm_grid%edge_n(:)) .NE. nxc+1)    &
   6908                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%edge_s/edge_n', FATAL)
   6909               if(size(atm_grid%en1,1) .NE. 3 .OR. size(atm_grid%en1,2) .NE. nxc .OR. size(atm_grid%en1,3) .NE. nyc+1) &
   6910                    call error_mesg( 'xgrid_mod', 'incorrect dimension size of atm_grid%en1', FATAL)
   6911               if(size(atm_grid%en2,1) .NE. 3 .OR. size(atm_grid%en2,2) .NE. nxc+1 .OR. size(atm_grid%en2,3) .NE. nyc) &
   6912                    call error_mesg( 'xgrid_mod', 'incorrect dimension size of atm_grid%en2', FATAL)
   6913               if(size(atm_grid%vlon,1) .NE. 3 .OR. size(atm_grid%vlon,2) .NE. nxc .OR. size(atm_grid%vlon,3) .NE. nyc)   &
   6914                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%vlon', FATAL)

Page 220         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6915               if(size(atm_grid%vlat,1) .NE. 3 .OR. size(atm_grid%vlat,2) .NE. nxc .OR. size(atm_grid%vlat,3) .NE. nyc)   &
   6916                    call error_mesg('xgrid_mod', 'incorrect dimension size of atm_grid%vlat', FATAL)
   6917               allocate(grid%box%dx    (grid%is_me:grid%ie_me,   grid%js_me:grid%je_me+1 ))
   6918               allocate(grid%box%dy    (grid%is_me:grid%ie_me+1, grid%js_me:grid%je_me   ))
   6919               allocate(grid%box%area  (grid%is_me:grid%ie_me,   grid%js_me:grid%je_me   ))
   6920               allocate(grid%box%edge_w(grid%js_me:grid%je_me+1))
   6921               allocate(grid%box%edge_e(grid%js_me:grid%je_me+1))
   6922               allocate(grid%box%edge_s(grid%is_me:grid%ie_me+1))
   6923               allocate(grid%box%edge_n(grid%is_me:grid%ie_me+1))
   6924               allocate(grid%box%en1   (3, grid%is_me:grid%ie_me,   grid%js_me:grid%je_me+1 ))
   6925               allocate(grid%box%en2   (3, grid%is_me:grid%ie_me+1, grid%js_me:grid%je_me   ))
   6926               allocate(grid%box%vlon  (3, grid%is_me:grid%ie_me,   grid%js_me:grid%je_me   ))
   6927               allocate(grid%box%vlat  (3, grid%is_me:grid%ie_me,   grid%js_me:grid%je_me   ))
   6928               grid%box%dx     = atm_grid%dx
   6929               grid%box%dy     = atm_grid%dy
   6930               grid%box%area   = atm_grid%area
   6931               grid%box%edge_w = atm_grid%edge_w
   6932               grid%box%edge_e = atm_grid%edge_e
   6933               grid%box%edge_s = atm_grid%edge_s
   6934               grid%box%edge_n = atm_grid%edge_n
   6935               grid%box%en1    = atm_grid%en1
   6936               grid%box%en2    = atm_grid%en2
   6937               grid%box%vlon   = atm_grid%vlon
   6938               grid%box%vlat   = atm_grid%vlat
   6939            end if
   6940         end if
   6941      end if
   6942 
   6943      if (g>1) then
   6944         if(grid%on_this_pe) then
   6945            if(grid%is_ug) then
   6946               allocate( grid%frac_area(grid%ls_me:grid%le_me, 1, grid%km) )
   6947            else
   6948               allocate( grid%frac_area(grid%is_me:grid%ie_me, grid%js_me:grid%je_me, grid%km) )
   6949            endif
   6950            grid%frac_area = 1.0
   6951         endif
   6952 
   6953 ! load exchange cells, sum grid cell areas, set your1my2/your2my1
   6954         select case(xmap%version)
   6955         case(VERSION1)
   6956            call load_xgrid (xmap, grid, grid_file, grid_ids(1), grid_ids(g), 1, 1, use_higher_order)
   6957         case(VERSION2)
   6958            select case(grid_ids(1))
   6959            case( 'ATM' )
   6960               xgrid_name = 'a'
   6961            case( 'LND' )
   6962               xgrid_name = 'l'
   6963            case( 'WAV' )
   6964               xgrid_name = 'w'
   6965            case default
   6966               call error_mesg('xgrid_mod', 'grid_ids(1) should be ATM, LND or WAV', FATAL)
   6967            end select
   6968            select case(grid_ids(g))
   6969            case( 'LND' )
   6970               xgrid_name = trim(xgrid_name)//'Xl_file'
   6971            case( 'OCN' )

Page 221         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   6972               xgrid_name = trim(xgrid_name)//'Xo_file'
   6973            case( 'WAV' )
   6974               xgrid_name = trim(xgrid_name)//'Xw_file'
   6975            case default
   6976               call error_mesg('xgrid_mod', 'grid_ids(g) should be LND, OCN or WAV', FATAL)
   6977            end select
   6978 ! get the tile list for each mosaic
   6979            call read_data(grid_file, lowercase(grid_ids(1))//'_mosaic_file', mosaic1)
   6980            call read_data(grid_file, lowercase(grid_ids(g))//'_mosaic_file', mosaic2)
   6981            mosaic1 = 'INPUT/'//trim(mosaic1)
   6982            mosaic2 = 'INPUT/'//trim(mosaic2)
   6983            allocate(tile1_list(grid1%ntile), tile2_list(grid%ntile) )
   6984            do j = 1, grid1%ntile
   6985               call read_data(mosaic1, 'gridtiles', tile1_list(j), level=j)
   6986            end do
   6987            do j = 1, grid%ntile
   6988               call read_data(mosaic2, 'gridtiles', tile2_list(j), level=j)
   6989            end do
   6990            if(field_exist(grid_file, xgrid_name)) then
   6991               call field_size(grid_file, xgrid_name, siz)
   6992               nxgrid_file = siz(2)
   6993 ! loop through all the exchange grid file
   6994               do i = 1, nxgrid_file
   6995                  call read_data(grid_file, xgrid_name, xgrid_file, level = i)
   6996                  xgrid_file = 'INPUT/'//trim(xgrid_file)
   6997                  if( .NOT. file_exist(xgrid_file) )call error_mesg('xgrid_mod', &
   6998                       'file '//trim(xgrid_file)//' does not exist, check your xgrid file.', FATAL)
   6999 
   7000 ! find the tile number of side 1 and side 2 mosaic, which is contained in field contact
   7001                  call read_data(xgrid_file, "contact", contact)
   7002                  i1 = index(contact, ":")
   7003                  i2 = index(contact, "::")
   7004                  i3 = index(contact, ":", back=.true. )
   7005                  if(i1 == 0 .OR. i2 == 0) call error_mesg('xgrid_mod', &
   7006                       'field contact in file '//trim(xgrid_file)//' should contains ":" and "::" ', FATAL)
   7007                  if(i1 == i3) call error_mesg('xgrid_mod', &
   7008                       'field contact in file '//trim(xgrid_file)//' should contains two ":"', FATAL)
   7009                  tile1_name = contact(i1+1:i2-1)
   7010                  tile2_name = contact(i3+1:len_trim(contact))
   7011                  tile1 = 0; tile2 = 0
   7012                  do j = 1, grid1%ntile
   7013                     if( tile1_name == tile1_list(j) ) then
   7014                        tile1 = j
   7015                        exit
   7016                     end if
   7017                  end do
   7018                  do j = 1, grid%ntile
   7019                     if( tile2_name == tile2_list(j) ) then
   7020                        tile2 = j
   7021                        exit
   7022                     end if
   7023                  end do
   7024                  if(tile1 == 0) call error_mesg('xgrid_mod', &
   7025                       trim(tile1_name)//' is not a tile of mosaic '//trim(mosaic1), FATAL)
   7026                  if(tile2 == 0) call error_mesg('xgrid_mod', &
   7027                       trim(tile2_name)//' is not a tile of mosaic '//trim(mosaic2), FATAL)
   7028 

Page 222         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   7029                  call load_xgrid (xmap, grid, xgrid_file, grid_ids(1), grid_ids(g), tile1, tile2, &
   7030                                   use_higher_order)
   7031               end do
   7032            endif
   7033            deallocate(tile1_list, tile2_list)
   7034         end select
   7035         if(grid%on_this_pe) then
   7036            grid%area_inv = 0.0;
   7037            where (grid%area>0.0) grid%area_inv = 1.0/grid%area
   7038         endif
   7039      end if
   7040   end do
   7041 
   7042   call mpp_clock_end(id_load_xgrid)
   7043 
   7044   grid1%area_inv = 0.0;
   7045   where (grid1%area>0.0)
   7046      grid1%area_inv = 1.0/grid1%area
   7047   end where
   7048 
   7049   xmap%your1my2(xmap%me-xmap%root_pe) = .false. ! this is not necessarily true but keeps
   7050   xmap%your2my1(xmap%me-xmap%root_pe) = .false. ! a PE from communicating with itself
   7051 
   7052   if (make_exchange_reproduce) then
   7053      allocate( xmap%send_count_repro(0:xmap%npes-1) )
   7054      allocate( xmap%recv_count_repro(0:xmap%npes-1) )
   7055      xmap%send_count_repro = 0
   7056      xmap%recv_count_repro = 0
   7057      do g=2,size(xmap%grids(:))
   7058         do p=0,xmap%npes-1
   7059            if(xmap%grids(g)%size >0) &
   7060                 xmap%send_count_repro(p) = xmap%send_count_repro(p) &
   7061                 +count(xmap%grids(g)%x      (:)%pe==p+xmap%root_pe)
   7062            if(xmap%grids(g)%size_repro >0) &
   7063                 xmap%recv_count_repro(p) = xmap%recv_count_repro(p) &
   7064                 +count(xmap%grids(g)%x_repro(:)%pe==p+xmap%root_pe)
   7065         end do
   7066      end do
   7067      xmap%send_count_repro_tot = sum(xmap%send_count_repro)
   7068      xmap%recv_count_repro_tot = sum(xmap%recv_count_repro)
   7069   else
   7070      xmap%send_count_repro_tot = 0
   7071      xmap%recv_count_repro_tot = 0
   7072   end if
   7073 
   7074   if (xgrid_log) then
   7075     call mpp_open( unit, 'xgrid.out', action=MPP_OVERWR, threading=MPP_MULTI, &
   7076          fileset=MPP_MULTI, nohdrs=.TRUE. )
   7077 
   7078     write( unit,* )xmap%grids(:)%id, ' GRID: PE ', xmap%me, ' #XCELLS=', &
   7079        xmap%grids(2:size(xmap%grids(:)))%size, ' #COMM. PARTNERS=', &
   7080        count(xmap%your1my2), '/', count(xmap%your2my1), &
   7081        pack((/(p+xmap%root_pe,p=0,xmap%npes-1)/), xmap%your1my2),  &
   7082        '/', pack((/(p+xmap%root_pe,p=0,xmap%npes-1)/), xmap%your2my1)
   7083     call close_file_use_mpp_io (unit)
   7084   endif
   7085 

Page 223         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   7086   allocate( xmap%x1(1:sum(xmap%grids(2:size(xmap%grids(:)))%size)) )
   7087   allocate( xmap%x2(1:sum(xmap%grids(2:size(xmap%grids(:)))%size)) )
   7088   allocate( xmap%x1_put(1:sum(xmap%grids(2:size(xmap%grids(:)))%size)) )
   7089   allocate( xmap%x2_get(1:sum(xmap%grids(2:size(xmap%grids(:)))%size)) )
   7090 
   7091 !--- The following will setup indx to be used in regen
   7092   allocate(xmap%get1, xmap%put1)
   7093   call mpp_clock_begin(id_set_comm)
   7094 
   7095   call set_comm_get1(xmap)
   7096 
   7097   call set_comm_put1(xmap)
   7098 
   7099   if(make_exchange_reproduce) then
   7100     allocate(xmap%get1_repro)
   7101     call set_comm_get1_repro(xmap)
   7102   endif
   7103 
   7104   call mpp_clock_end(id_set_comm)
   7105 
   7106   call mpp_clock_begin(id_regen)
   7107   call regen(xmap)
   7108   call mpp_clock_end(id_regen)
   7109 
   7110   call mpp_clock_begin(id_conservation_check)
   7111 
   7112   if(lnd_ug_id ==0) then
   7113      xxx = conservation_check(grid1%area*0.0+1.0, grid1%id, xmap)
   7114   else
   7115      allocate(tmp_2d(grid1%is_me:grid1%ie_me, grid1%js_me:grid1%je_me))
   7116      tmp_2d = 1.0
   7117      xxx = conservation_check_ug(tmp_2d, grid1%id, xmap)
   7118      deallocate(tmp_2d)
   7119   endif
   7120   write(out_unit,* )"Checked data is array of constant 1"
   7121   write(out_unit,* )grid1%id,'(',xmap%grids(:)%id,')=', xxx
   7122 
   7123   if(lnd_ug_id == 0) then
   7124      do g=2,size(xmap%grids(:))
   7125         xxx = conservation_check(xmap%grids(g)%frac_area*0.0+1.0, xmap%grids(g)%id, xmap )
   7126         write( out_unit,* )xmap%grids(g)%id,'(',xmap%grids(:)%id,')=', xxx
   7127      enddo
   7128   else
   7129      do g=2,size(xmap%grids(:))
   7130         grid => xmap%grids(g)
   7131         allocate(tmp_3d(grid%is_me:grid%ie_me, grid%js_me:grid%je_me,grid%km))
   7132         tmp_3d = 1.0
   7133         xxx = conservation_check_ug(tmp_3d, xmap%grids(g)%id, xmap )
   7134         write( out_unit,* )xmap%grids(g)%id,'(',xmap%grids(:)%id,')=', xxx
   7135         deallocate(tmp_3d)
   7136      enddo
   7137   endif
   7138 ! create an random number 2d array
   7139   if(grid1%id == "ATM") then
   7140      allocate(check_data(size(grid1%area,1), size(grid1%area,2)))
   7141      call random_number(check_data)
   7142 

Page 224         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   7143 !--- second order along both zonal and meridinal direction
   7144      if(lnd_ug_id ==0) then
   7145         xxx = conservation_check(check_data, grid1%id, xmap,  remap_method = remapping_method )
   7146      else
   7147         xxx = conservation_check_ug(check_data, grid1%id, xmap,  remap_method = remapping_method )
   7148      endif
   7149      write( out_unit,* ) &
   7150           "Checked data is array of random number between 0 and 1 using "//trim(interp_method)
   7151      write( out_unit,* )grid1%id,'(',xmap%grids(:)%id,')=', xxx
   7152 
   7153      deallocate(check_data)
   7154      do g=2,size(xmap%grids(:))
   7155         allocate(check_data_3d(xmap%grids(g)%is_me:xmap%grids(g)%ie_me, &
   7156                  xmap%grids(g)%js_me:xmap%grids(g)%je_me, grid1%km))
   7157         call random_number(check_data_3d)
   7158         if(lnd_ug_id ==0) then
   7159            xxx = conservation_check(check_data_3d, xmap%grids(g)%id, xmap,  remap_method = remapping_method )
   7160         else
   7161            xxx = conservation_check_ug(check_data_3d, xmap%grids(g)%id, xmap,  remap_method = remapping_method )
   7162         endif
   7163         write( out_unit,* )xmap%grids(g)%id,'(',xmap%grids(:)%id,')=', xxx
   7164         deallocate( check_data_3d)
   7165      end do
   7166   endif
   7167   call mpp_clock_end(id_conservation_check)
   7168 
   7169   call mpp_clock_end(id_setup_xmap)
   7170 
   7171 end subroutine setup_xmap_use_mpp_io

Page 225         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                           
                                                 
 xgrid_mod_mp_setup_xmap_use_mpp_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6892                                 scalar                    6892,6893,6894,6895               
 ATM_GRID                   Dummy  6653     GRID_BOX_TYPE   1056        scalar   ARG,IN           6887,6892,6893,6894,6895,6899,6901
                                                                                                  ,6903,6905,6907,6909,6911,6913,691
                                                                                                  5,6928,6929,6930,6931,6932,6933,69
                                                                                                  34,6935,6936,6937,6938            
 CHECK_DATA                 Local  6666     R(8)            8     2     1        ALC              7140,7141,7145,7147,7153          
 CHECK_DATA_3D              Local  6667     R(8)            8     3     1        ALC              7155,7157,7159,7161,7164          
 CLOSE_FILE_USE_MPP_IO      Subr   7083                                          PRIV             7083                              
 CONTACT                    Local  6671     CHAR            256         scalar                    7001,7002,7003,7004,7009,7010     
 COUNT                      Func   7061                                 scalar                    7061,7064,7080                    
 DOMAIN2                    Local  6676     DOMAIN2D        752         scalar   SAVE             6753,6773,6775,6779,6783,6787     
 FILE_EXIST                 Func   6997     L(4)            4           scalar   PRIV             277,6997                          
 G                          Local  6661     I(4)            4           scalar                    6716,6717,6722,6723,6724,6725,6726
                                                                                                  ,6727,6744,6748,6752,6772,6786,679
                                                                                                  0,6810,6862,6869,6874,6943,6956,69
                                                                                                  68,6980,7029,7057,7059,7061,7062,7
                                                                                                  064,7124,7125,7126,7129,7130,7133,
                                                                                                  7134,7154,7155,7156,7159,7161,7163
 GET_GRID                   Subr   6862                                          PRIV             692,6862,6869                     
 GET_MOSAIC_NTILES_USE_MPP_                                                                                                         
 IO                         Func   6745     I(4)            4           scalar   PRIV             6745,7205                         
 GET_MOSAIC_TILE_GRID_USE_M                                                                                                         
 PP_IO                      Subr   6868                                          PRIV             6868                              
 GRID                       Local  6664     GRID_TYPE       4888        scalar   PTR,SAVE         6664,6723,6725,6726,6727,6728,6729
                                                                                                  ,6730,6731,6732,6733,6734,6735,673
                                                                                                  6,6737,6738,6742,6745,6749,6751,67
                                                                                                  52,6753,6754,6755,6756,6759,6760,6
                                                                                                  761,6762,6764,6765,6766,6768,6769,
                                                                                                  6770,6771,6773,6774,6775,6779,6780
                                                                                                  ,6781,6782,6783,6784,6786,6789,679
                                                                                                  2,6796,6797,6798,6799,6801,6802,68
                                                                                                  03,6804,6805,6807,6808,6813,6814,6
                                                                                                  815,6816,6817,6818,6819,6820,6821,
                                                                                                  6822,6824,6825,6826,6827,6828,6829
                                                                                                  ,6830,6831,6832,6833,6835,6836,683
                                                                                                  7,6840,6841,6842,6843,6844,6845,68
                                                                                                  47,6848,6849,6850,6851,6852,6856,6
                                                                                                  859,6862,6866,6867,6868,6869,6880,
                                                                                                  6882,6883,6884,6885,6889,6890,6897
                                                                                                  ,6898,6917,6918,6919,6920,6921,692
                                                                                                  2,6923,6924,6925,6926,6927,6928,69
                                                                                                  29,6930,6931,6932,6933,6934,6935,6
                                                                                                  936,6937,6938,6944,6945,6946,6948,
                                                                                                  6950,6956,6983,6987,7018,7029,7035

Page 226         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,7036,7037,7130,7131              
 GRID1                      Local  6664     GRID_TYPE       4888        scalar   PTR,SAVE         6664,6724,6983,6984,7012,7044,7045
                                                                                                  ,7046,7113,7115,7117,7121,7139,714
                                                                                                  0,7145,7147,7151,7156             
 GRID_DOMAINS               Dummy  6653     RECORD          752   1     1        ARG,IN           6726,6727                         
 GRID_FILE                  Dummy  6653     CHAR                        scalar   ARG,IN           6699,6701,6704,6744,6862,6956,6979
                                                                                                  ,6980,6990,6991,6995              
 GRID_IDS                   Dummy  6653     CHAR            3     1     1        ARG,IN           6690,6716,6717,6722,6725,6744,6748
                                                                                                  ,6752,6772,6786,6790,6862,6869,687
                                                                                                  4,6956,6958,6968,6979,6980,7029   
 GRID_INDEX                 Local  6679     I(4)            4     1     1        ALC              6832,6833,6837                    
 I                          Local  6661     I(4)            4           scalar                    6994,6995                         
 I1                         Local  6662     I(4)            4           scalar                    7002,7005,7007,7009               
 I2                         Local  6662     I(4)            4           scalar                    7003,7005,7009                    
 I3                         Local  6662     I(4)            4           scalar                    7004,7007,7010                    
 INDEX                      Func   7002                                 scalar                    7002,7003,7004                    
 J                          Local  6662     I(4)            4           scalar                    6984,6985,6987,6988,7012,7013,7014
                                                                                                  ,7018,7019,7020                   
 L                          Local  6678     I(4)            4           scalar                    6836,6837                         
 LEN_TRIM                   Func   7010                                 scalar                    7010                              
 LND_UG_DOMAIN              Dummy  6653     DOMAINUG        544         scalar   ARG,IN           6715,6814                         
 LND_UG_ID                  Local  6678     I(4)            4           scalar                    6714,6717,6810,7112,7123,7144,7158
 MOSAIC1                    Local  6671     CHAR            256         scalar                    6979,6981,6985,7025               
 MOSAIC2                    Local  6671     CHAR            256         scalar                    6980,6982,6988,7027               
 MOSAIC_FILE                Local  6670     CHAR            256         scalar                    6744,6745,6868,6875               
 MPP_MULTI                  Param  7075     I(4)            4           scalar   PRIV             276,7075,7076                     
 MPP_OPEN                   Subr   7075                                          PRIV             276,7075                          
 MPP_OVERWR                 Param  7075     I(4)            4           scalar   PRIV             276,7075                          
 NPES                       Local  6674     I(4)            4           scalar                    6759,6760,6769,6770,6771,6772,6773
                                                                                                  ,6774,6775,6778,6789,6790,6791,682
                                                                                                  4,6825,6826                       
 NPES2                      Local  6674     I(4)            4           scalar                    6778,6779,6780,6781,6782,6783,6784
 NXC                        Local  6663     I(4)            4           scalar                    6897,6899,6901,6903,6907,6909,6911
                                                                                                  ,6913,6915                        
 NXGRID_FILE                Local  6662     I(4)            4           scalar                    6992,6994                         
 NYC                        Local  6663     I(4)            4           scalar                    6898,6899,6901,6903,6905,6909,6911
                                                                                                  ,6913,6915                        
 OUT_UNIT                   Local  6663     I(4)            4           scalar                    6685,7120,7121,7126,7134,7149,7151
                                                                                                  ,7163                             
 P                          Local  6661     I(4)            4           scalar                    6791,6792,7058,7060,7061,7063,7064
 PACK                       Func   7081                                 scalar                    7081,7082                         
 PELIST                     Local  6675     I(4)            4     1     1        ALC              6864,6865,6871,6872               
 PRESENT                    Func   6715                                 scalar                    6715,6887                         
 RANDOM_NUMBER              Intrin 7141                                                           7141,7157                         
 READ_DATA_TEXT             Subr   6744                                          PRIV             6744,6979,6980,6985,6988,6995,7001
 RECV_SIZE                  Local  6661     I(4)            4           scalar                                                      
 SEND_SIZE                  Local  6661     I(4)            4           scalar                                                      
 SETUP_XMAP_USE_MPP_IO      Subr   6653                                                                                             
 SIZ                        Local  6661     I(4)            4     1     4        TGT              6991,6992                         
 SIZE                       Func   6690                                 scalar                    6690,6716,6722,6899,6901,6903,6905
                                                                                                  ,6907,6909,6911,6913,6915,7057,707
                                                                                                  9,7086,7087,7088,7089,7124,7129,71
                                                                                                  40,7154                           
 SUM                        Func   7067                                 scalar                    7067,7068,7086,7087,7088,7089     
 TILE1                      Local  6662     I(4)            4           scalar                    7011,7014,7024,7029               

Page 227         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TILE1_LIST                 Local  6673     CHAR            256   1     1        ALC              6983,6985,7013,7033               
 TILE1_NAME                 Local  6672     CHAR            256         scalar                    7009,7013,7025                    
 TILE2                      Local  6662     I(4)            4           scalar                    7011,7020,7026,7029               
 TILE2_LIST                 Local  6673     CHAR            256   1     1        ALC              6983,6988,7019,7033               
 TILE2_NAME                 Local  6672     CHAR            256         scalar                    7010,7019,7027                    
 TILE_FILE                  Local  6670     CHAR            256         scalar                    6868,6869                         
 TMP_2D                     Local  6668     R(8)            8     2     1        ALC              7115,7116,7117,7118               
 TMP_3D                     Local  6668     R(8)            8     3     1        ALC              7131,7132,7133,7135               
 TRIM                       Func   6704                                 scalar                    6704,6745,6868,6875,6970,6972,6974
                                                                                                  ,6981,6982,6996,6998,7006,7008,702
                                                                                                  5,7027,7150                       
 UNIT                       Local  6662     I(4)            4           scalar                    7075,7078,7083                    
 USE_HIGHER_ORDER           Local  6677     L(4)            4           scalar                    6677,6683,6880,6956,7030          
 XGRID_FILE                 Local  6669     CHAR            256         scalar                    6995,6996,6997,6998,7001,7006,7008
                                                                                                  ,7029                             
 XGRID_LOG                  Local  7074     L(4)            4           scalar                    329,7074                          
 XGRID_NAME                 Local  6669     CHAR            256         scalar                    6960,6962,6964,6970,6972,6974,6990
                                                                                                  ,6991,6995                        
 XMAP                       Dummy  6653     XMAP_TYPE       928         scalar   ARG,INOUT        6686,6687,6688,6690,6692,6693,6695
                                                                                                  ,6696,6700,6702,6707,6723,6724,672
                                                                                                  8,6729,6730,6740,6752,6754,6768,67
                                                                                                  72,6773,6774,6775,6778,6781,6782,6
                                                                                                  784,6786,6790,6801,6802,6805,6811,
                                                                                                  6815,6816,6821,6827,6828,6829,6857
                                                                                                  ,6859,6862,6864,6869,6954,6956,702
                                                                                                  9,7049,7050,7053,7054,7055,7056,70
                                                                                                  57,7058,7059,7060,7061,7062,7063,7
                                                                                                  064,7067,7068,7070,7071,7078,7079,
                                                                                                  7080,7081,7082,7086,7087,7088,7089
                                                                                                  ,7092,7095,7097,7100,7101,7107,711
                                                                                                  3,7117,7121,7124,7125,7126,7129,71
                                                                                                  30,7133,7134,7145,7147,7151,7154,7
                                                                                                  155,7156,7159,7161,7163           
 XXX                        Local  6665     R(8)            8     1     3                         7113,7117,7121,7125,7126,7133,7134
                                                                                                  ,7145,7147,7151,7159,7161,7163    

Page 228         Source Listing                  SETUP_XMAP_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   7172 ! </SUBROUTINE>
   7173 
   7174 !----------------------------------------------------------------------------
   7175 ! currently we are assuming there is only one nest region
   7176 function get_nest_contact_use_mpp_io(mosaic_file, tile_nest_out, tile_parent_out, is_nest_out, &
   7177                           ie_nest_out, js_nest_out, je_nest_out, is_parent_out, &
   7178                           ie_parent_out, js_parent_out, je_parent_out) &
   7179                         result(get_nest_contact) !< This is needed for use_mpp_io
   7180 
   7181 character(len=*), intent(in) :: mosaic_file
   7182 integer,         intent(out) :: tile_nest_out, tile_parent_out
   7183 integer,         intent(out) :: is_nest_out, ie_nest_out
   7184 integer,         intent(out) :: js_nest_out, je_nest_out
   7185 integer,         intent(out) :: is_parent_out, ie_parent_out
   7186 integer,         intent(out) :: js_parent_out, je_parent_out
   7187 integer                      :: get_nest_contact
   7188 !--- local variables
   7189 integer                            :: ntiles, ncontacts, n, t1, t2
   7190 integer                            :: nx1_contact, ny1_contact
   7191 integer                            :: nx2_contact, ny2_contact
   7192 integer, allocatable, dimension(:) :: nx, ny
   7193 integer, allocatable, dimension(:) :: tile1, tile2
   7194 integer, allocatable, dimension(:) :: istart1, iend1, jstart1, jend1
   7195 integer, allocatable, dimension(:) :: istart2, iend2, jstart2, jend2
   7196 
   7197   tile_nest_out = 0; tile_parent_out = 0
   7198   is_nest_out   = 0; ie_nest_out     = 0
   7199   js_nest_out   = 0; je_nest_out     = 0
   7200   is_parent_out = 0; ie_parent_out   = 0
   7201   js_parent_out = 0; je_parent_out   = 0
   7202   get_nest_contact = 0
   7203 
   7204 ! first read the contact information
   7205   ntiles = get_mosaic_ntiles_use_mpp_io(mosaic_file)
   7206   if( ntiles == 1 ) return
   7207   allocate(nx(ntiles), ny(ntiles))
   7208   call get_mosaic_grid_sizes_use_mpp_io(mosaic_file, nx, ny)
   7209 
   7210   ncontacts = get_mosaic_ncontacts_use_mpp_io(mosaic_file)
   7211   if(ncontacts == 0) return
   7212   allocate(tile1(ncontacts), tile2(ncontacts))
   7213   allocate(istart1(ncontacts), iend1(ncontacts))
   7214   allocate(jstart1(ncontacts), jend1(ncontacts))
   7215   allocate(istart2(ncontacts), iend2(ncontacts))
   7216   allocate(jstart2(ncontacts), jend2(ncontacts))
   7217 
   7218   call get_mosaic_contact_use_mpp_io( mosaic_file, tile1, tile2, istart1, iend1, jstart1, jend1, &
   7219                            istart2, iend2, jstart2, jend2)
   7220 
   7221   do n = 1, ncontacts
   7222     if( tile1(n) == tile2(n) ) cycle ! same tile could not be nested
   7223 
   7224     nx1_contact = iend1(n)-istart1(n)+1
   7225     ny1_contact = jend1(n)-jstart1(n)+1
   7226     nx2_contact = iend2(n)-istart2(n)+1
   7227     ny2_contact = jend2(n)-jstart2(n)+1
   7228     t1 = tile1(n);

Page 229         Source Listing                  GET_NEST_CONTACT_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   7229     t2 = tile2(n);
   7230 ! For nesting, the contact index of one tile must match its global domain
   7231     if( (nx(t1) .NE. nx1_contact .OR. ny(t1) .NE. ny1_contact ) .AND. &
   7232         (nx(t2) .NE. nx2_contact .OR. ny(t2) .NE. ny2_contact ) ) cycle
   7233     if(nx1_contact == nx2_contact .AND. ny1_contact == ny2_contact) then
   7234       call error_mesg('xgrid_mod', 'There is no refinement for the overlapping region', FATAL)
   7235     endif
   7236 
   7237     get_nest_contact = get_nest_contact + 1
   7238     if(get_nest_contact>1) then
   7239        call error_mesg('xgrid_mod', 'only support one nest region, contact developer' ,FATAL)
   7240     endif
   7241     if(nx2_contact*ny2_contact > nx1_contact*ny1_contact) then
   7242       is_nest_out     = istart2(n);
   7243       ie_nest_out     = iend2  (n);
   7244       js_nest_out     = jstart2(n);
   7245       je_nest_out     = jend2  (n);
   7246       tile_nest_out   = tile2  (n);
   7247       is_parent_out   = istart1(n);
   7248       ie_parent_out   = iend1  (n);
   7249       js_parent_out   = jstart1(n);
   7250       je_parent_out   = jend1  (n);
   7251       tile_parent_out = tile1  (n);
   7252     else
   7253       is_nest_out     = istart1(n);
   7254       ie_nest_out     = iend1  (n);
   7255       js_nest_out     = jstart1(n);
   7256       je_nest_out     = jend1  (n);
   7257       tile_nest_out   = tile1  (n);
   7258       is_parent_out   = istart2(n);
   7259       ie_parent_out   = iend2  (n);
   7260       js_parent_out   = jstart2(n);
   7261       je_parent_out   = jend2  (n);
   7262       tile_parent_out = tile2  (n);
   7263     endif
   7264   enddo
   7265 
   7266   deallocate(nx, ny, tile1, tile2)
   7267   deallocate(istart1, iend1, jstart1, jend1)
   7268   deallocate(istart2, iend2, jstart2, jend2)
   7269 
   7270 
   7271   return
   7272 
   7273 end function get_nest_contact_use_mpp_io

Page 230         Source Listing                  GET_NEST_CONTACT_USE_MPP_IO
2021-06-01 08:56 Entry Points                    xgrid.F90



ENTRY POINTS

  Name                                                 
                                                       
 xgrid_mod_mp_get_nest_contact_use_mpp_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_MOSAIC_CONTACT_USE_MPP                                                                                                         
 _IO                        Subr   7218                                          PRIV             7218                              
 GET_MOSAIC_GRID_SIZES_USE_                                                                                                         
 MPP_IO                     Subr   7208                                          PRIV             7208                              
 GET_MOSAIC_NCONTACTS_USE_M                                                                                                         
 PP_IO                      Func   7210     I(4)            4           scalar   PRIV             7210                              
 GET_NEST_CONTACT           Local  7187     I(4)            4           scalar                    7202,7237,7238                    
 GET_NEST_CONTACT_USE_MPP_I                                                                                                         
 O                          Func   7176     I(4)            4           scalar                    6875                              
 IEND1                      Local  7194     I(4)            4     1     1        ALC              7213,7218,7224,7248,7254,7267     
 IEND2                      Local  7195     I(4)            4     1     1        ALC              7215,7219,7226,7243,7259,7268     
 IE_NEST_OUT                Dummy  7177     I(4)            4           scalar   ARG,OUT          7198,7243,7254                    
 IE_PARENT_OUT              Dummy  7178     I(4)            4           scalar   ARG,OUT          7200,7248,7259                    
 ISTART1                    Local  7194     I(4)            4     1     1        ALC              7213,7218,7224,7247,7253,7267     
 ISTART2                    Local  7195     I(4)            4     1     1        ALC              7215,7219,7226,7242,7258,7268     
 IS_NEST_OUT                Dummy  7176     I(4)            4           scalar   ARG,OUT          7198,7242,7253                    
 IS_PARENT_OUT              Dummy  7177     I(4)            4           scalar   ARG,OUT          7200,7247,7258                    
 JEND1                      Local  7194     I(4)            4     1     1        ALC              7214,7218,7225,7250,7256,7267     
 JEND2                      Local  7195     I(4)            4     1     1        ALC              7216,7219,7227,7245,7261,7268     
 JE_NEST_OUT                Dummy  7177     I(4)            4           scalar   ARG,OUT          7199,7245,7256                    
 JE_PARENT_OUT              Dummy  7178     I(4)            4           scalar   ARG,OUT          7201,7250,7261                    
 JSTART1                    Local  7194     I(4)            4     1     1        ALC              7214,7218,7225,7249,7255,7267     
 JSTART2                    Local  7195     I(4)            4     1     1        ALC              7216,7219,7227,7244,7260,7268     
 JS_NEST_OUT                Dummy  7177     I(4)            4           scalar   ARG,OUT          7199,7244,7255                    
 JS_PARENT_OUT              Dummy  7178     I(4)            4           scalar   ARG,OUT          7201,7249,7260                    
 MOSAIC_FILE                Dummy  7176     CHAR                        scalar   ARG,IN           7205,7208,7210,7218               
 N                          Local  7189     I(4)            4           scalar                    7221,7222,7224,7225,7226,7227,7228
                                                                                                  ,7229,7242,7243,7244,7245,7246,724
                                                                                                  7,7248,7249,7250,7251,7253,7254,72
                                                                                                  55,7256,7257,7258,7259,7260,7261,7
                                                                                                  262                               
 NCONTACTS                  Local  7189     I(4)            4           scalar                    7210,7211,7212,7213,7214,7215,7216
                                                                                                  ,7221                             
 NTILES                     Local  7189     I(4)            4           scalar                    7205,7206,7207                    
 NX                         Local  7192     I(4)            4     1     1        ALC              7207,7208,7231,7232,7266          
 NX1_CONTACT                Local  7190     I(4)            4           scalar                    7224,7231,7233,7241               
 NX2_CONTACT                Local  7191     I(4)            4           scalar                    7226,7232,7233,7241               
 NY                         Local  7192     I(4)            4     1     1        ALC              7207,7208,7231,7232,7266          
 NY1_CONTACT                Local  7190     I(4)            4           scalar                    7225,7231,7233,7241               
 NY2_CONTACT                Local  7191     I(4)            4           scalar                    7227,7232,7233,7241               
 T1                         Local  7189     I(4)            4           scalar                    7228,7231                         
 T2                         Local  7189     I(4)            4           scalar                    7229,7232                         
 TILE1                      Local  7193     I(4)            4     1     1        ALC              7212,7218,7222,7228,7251,7257,7266
 TILE2                      Local  7193     I(4)            4     1     1        ALC              7212,7218,7222,7229,7246,7262,7266

Page 231         Source Listing                  GET_NEST_CONTACT_USE_MPP_IO
2021-06-01 08:56 Symbol Table                    xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TILE_NEST_OUT              Dummy  7176     I(4)            4           scalar   ARG,OUT          7197,7246,7257                    
 TILE_PARENT_OUT            Dummy  7176     I(4)            4           scalar   ARG,OUT          7197,7251,7262                    

Page 232         Source Listing                  GET_NEST_CONTACT_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

   7274 
   7275 end module xgrid_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMM_TAG_3                 Param  247      I(4)            4           scalar   PRIV             247                               
 CONSTANTS_MOD              Module 264                                                            264                               
 DOMAIN1D                   Type   256                                  scalar                    256                               
 FMS2_IO_MOD                Module 272                                                            272,273,274                       
 FMS_IO_MOD                 Module 279                                                            279                               
 FMS_MOD                    Module 238                                                            238,277                           
 GET_INDEX_RANGE            Subr   679                                                            679                               
 GET_MOSAIC_XGRID           Subr   265                                           PRIV             265                               
 GET_MOSAIC_XGRID_USE_MPP_I                                                                                                         
 O                          Subr   282                                           PRIV                                               
 GET_OCEAN_MODEL_AREA_ELEME                                                                                                         
 NTS                        Subr   300                                                            300                               
 GET_XMAP_GRID_AREA         Subr   301                                                            301                               
 GRADIENT_MOD               Module 271                                                            271                               
 INIT                       Local  343      L(4)            4           scalar                    343                               
 IN_BOX@0                   Local  698      L(4)            4           scalar                                                      
 ISTOCK_BOTTOM              Param  269      I(4)            4           scalar   PRIV             269                               
 ISTOCK_SIDE                Param  269      I(4)            4           scalar   PRIV             269                               
 ISTOCK_TOP                 Param  269      I(4)            4           scalar   PRIV             269                               
 MOSAIC2_MOD                Module 265                                                            265                               
 MOSAIC_MOD                 Module 282                                                            282                               
 MPP_DEFINE_DOMAINS         Local  257                                  scalar   PRIV             257                               
 MPP_DOMAINS_MOD            Module 251                                                            251                               
 MPP_GET_CURRENT_NTILE      Func   254      I(4)            4           scalar   PRIV             254                               
 MPP_GET_NTILE_COUNT        Func   255      I(4)            4           scalar   PRIV             255                               
 MPP_GET_TILE_ID            Func   254      I(4)            4     1     0        PRIV             254                               
 MPP_GLOBAL_SUM             Local  252                                  scalar   PRIV             252                               
 MPP_IO_MOD                 Module 276                                                            276                               
 MPP_MOD                    Module 242                                                            242,250                           
 MPP_SINGLE                 Param  276      I(4)            4           scalar   PRIV             276                               
 MPP_SYNC                   Subr   250                                           PRIV             250                               
 READ_DATA                  Local  277                                  scalar                    277                               
 SETUP_XMAP                 Subr   294                                                            294                               
 SET_FRAC_AREA              Local  409                                  scalar                    294                               
 SET_FRAC_AREA_UG           Subr   411                                                            302                               
 SOME                       Subr   295                                                            295                               
 STOCK_CONSTANTS_MOD        Module 269                                                            269                               
 STOCK_INTEGRATE_2D         Subr   679                                                            679                               
 STOCK_MOVE                 Local  671                                  scalar                    679                               
 STOCK_MOVE_UG              Local  675                                  scalar                    680                               
 STOCK_PRINT                Subr   679                                                            679                               
 STRING                     Local  241                                  scalar   PRIV             241                               
 X1_TYPE                    Type   543                      40          scalar   PRIV             551,602,603                       
 X2_TYPE                    Type   553                      32          scalar   PRIV             557,604,605                       
 XGRID_COUNT@0              Local  3442     I(4)            4           scalar                                                      
 XGRID_INIT                 Subr   295                                                            295                               
 XGRID_MOD                  Module 81                                                                                               
 XUPDATE                    Param  253      I(4)            4           scalar   PRIV             253                               
 YUPDATE                    Param  254      I(4)            4           scalar   PRIV             254                               

Page 233         Source Listing                  GET_NEST_CONTACT_USE_MPP_IO
2021-06-01 08:56 Subprograms/Common Blocks       xgrid.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONSERVATION_CHECK_SIDE1   Func   4362     R(8)            8     1     3        PRIV             2258,2290,4377,4378,4390,4396,4399
                                                                                                  ,7113,7145                        
 CONSERVATION_CHECK_SIDE2   Func   4420     R(8)            8     1     3        PRIV             2270,2304,4435,4440,4450,4454,4462
                                                                                                  ,4465,7125,7159                   
 CONSERVATION_CHECK_UG_SIDE                                                                                                         
 1                          Func   4486     R(8)            8     1     3                         2262,2292,4503,4509,4512,4524,4535
                                                                                                  ,4543,4546,4549,7117,7147         
 CONSERVATION_CHECK_UG_SIDE                                                                                                         
 2                          Func   4570     R(8)            8     1     3                         2278,2306,4585,4593,4595,4619,4627
                                                                                                  ,4639,4642,7133,7161              
 GET_1_FROM_XGRID           Subr   4121                                                           3635                              
 GET_1_FROM_XGRID_REPRO     Subr   4254                                                           3633                              
 GET_1_FROM_XGRID_UG        Subr   5449                                                           5179                              
 GET_1_FROM_XGRID_UG_REPRO  Subr   5580                                                           5177                              
 GET_2_FROM_XGRID           Subr   3766                                                           3681                              
 GET_2_FROM_XGRID_UG        Subr   5676                                                           5331                              
 GET_AREA_ELEMENTS_FMS2_IO  Subr   1682                                                           1548,1552,1559,1563,1568          
 GET_AREA_ELEMENTS_USE_MPP_                                                                                                         
 IO                         Subr   6571                                                           6477,6481,6488,6492,6497          
 GET_GRID                   Subr   6451                                                                                             
 GET_GRID_VERSION1          Subr   1520                                                           1999                              
 GET_GRID_VERSION2          Subr   1596                                                           2006                              
 GET_INDEX_RANGE            Subr   4748                                                                                             
 GET_NEST_CONTACT_FMS2_IO   Func   2322     I(4)            4           scalar                    2012                              
 GET_NEST_CONTACT_USE_MPP_I                                                                                                         
 O                          Func   7176     I(4)            4           scalar                    6875                              
 GET_OCEAN_MODEL_AREA_ELEME                                                                                                         
 NTS                        Subr   1722                                                                                             
 GET_OCEAN_MODEL_AREA_ELEME                                                                                                         
 NTS_USE_MPP_IO             Subr   6607                                                                                             
 GET_SIDE1_FROM_XGRID       Subr   3585                                          PRIV             4395,4449,4545,4617               
 GET_SIDE1_FROM_XGRID_UG    Subr   5132                                          PRIV             4615                              
 GET_SIDE2_FROM_XGRID       Subr   3667                                          PRIV             4388,4461,4533,4637               
 GET_SIDE2_FROM_XGRID_UG    Subr   5317                                          PRIV             4522,4635                         
 GET_XMAP_GRID_AREA         Subr   4650                                                                                             
 GRAD_MERID_LATLON          Func   4718     R(8)            8     2     0                         3930,4740                         
 GRAD_ZONAL_LATLON          Func   4678     R(8)            8     2     0                         3931,4705                         
 IN_BOX                     Func   698      L(4)            4           scalar                    701,1274,2887,3233,6207           
 IN_BOX_ME                  Func   5704     L(4)            4           scalar                    1270,1310,1372,1467,5711,5713,6203
                                                                                                  ,6243,6305,6400                   
 IN_BOX_NBR                 Func   5720     L(4)            4           scalar                    1025,1035,1086,1104,1284,1336,1381
                                                                                                  ,1486,2578,5727,5729,5960,5970,601
                                                                                                  9,6037,6217,6269,6314,6419        
 IS_LAT_LON                 Func   5084     L(4)            4           scalar                    1638,5089,5095,5101,5105,5113,5116
                                                                                                  ,5118,6528                        
 LOAD_XGRID                 Subr   802                                                            2094,2183,6956,7029               
 LOAD_XGRID_USE_MPP_IO      Subr   5751                                                                                             
 PUT_1_TO_XGRID_ORDER_1     Subr   3795                                                           3514                              
 PUT_1_TO_XGRID_ORDER_2     Subr   3884                                                           3512,3519                         
 PUT_1_TO_XGRID_UG_ORDER_1  Subr   5344                                                           5255                              
 PUT_2_TO_XGRID             Subr   3747                                                           3567                              

Page 234         Source Listing                  GET_NEST_CONTACT_USE_MPP_IO
2021-06-01 08:56 Subprograms/Common Blocks       xgrid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PUT_2_TO_XGRID_UG          Subr   5432                                                           5299                              
 PUT_SIDE1_TO_XGRID         Subr   3457                                          PRIV             4382,4451,4513,4623               
 PUT_SIDE1_TO_XGRID_UG      Subr   5211                                          PRIV             4510,4621                         
 PUT_SIDE2_TO_XGRID         Subr   3553                                          PRIV             4392,4442,4444,4537,4601,4608     
 PUT_SIDE2_TO_XGRID_UG      Subr   5285                                          PRIV             4527,4599,4606                    
 REGEN                      Subr   3117                                                           2252,3361,3411,7107               
 SETUP_XMAP                 Subr   1780                                                                                             
 SETUP_XMAP_USE_MPP_IO      Subr   6653                                                                                             
 SET_COMM_GET1              Subr   2527                                                           2240,7095                         
 SET_COMM_GET1_REPRO        Subr   2422                                                           2246,7101                         
 SET_COMM_PUT1              Subr   2826                                                           2242,7097                         
 SET_FRAC_AREA_SG           Subr   3341                                          PRIV                                               
 SET_FRAC_AREA_UG           Subr   3390                                                                                             
 SOME                       Subr   3712                                                                                             
 STOCK_INTEGRATE_2D         Subr   4953                                                                                             
 STOCK_MOVE_2D              Subr   4827                                          PRIV                                               
 STOCK_MOVE_3D              Subr   4767                                          PRIV                                               
 STOCK_MOVE_UG_3D           Subr   4891                                          PRIV                                               
 STOCK_PRINT                Subr   4983                                                                                             
 XGRID_COUNT                Func   3442     I(4)            4           scalar                                                      
 XGRID_INIT                 Subr   725                                                                                              
 XGRID_MOD                  Module 81                                                                                               

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar

Page 235         Source Listing                  GET_NEST_CONTACT_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares

Page 236         Source Listing                  GET_NEST_CONTACT_USE_MPP_IO
2021-06-01 08:56                                 xgrid.F90

       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : xgrid.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
