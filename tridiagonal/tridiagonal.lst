Page 1           Source Listing                  TRI_INVERT
2021-06-01 08:50                                 /tmp/iforth6KsB8.i90

      1 # 1 "tridiagonal.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 module tridiagonal_mod
     22 
     23 ! <CONTACT EMAIL="Isaac.Held@noaa.gov">
     24 !    Isaac Held
     25 ! </CONTACT>
     26 ! <CONTACT EMAIL="Bruce.Wyman@noaa.gov">
     27 !    Bruce Wyman
     28 ! </CONTACT>
     29 
     30 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/"/>
     31 
     32 ! <OVERVIEW>
     33 !   Solves the tridiagonal system of equations.
     34 ! </OVERVIEW>
     35 ! <DESCRIPTION>
     36 !     The following schematic represents the system of equations solved,
     37 !     where X is the solution.
     38 ! <PRE>
     39 !     | B(1)  A(1)   0     0                .......            0    |  |X(1)|   |D(1)|
     40 !     | C(2)  B(2)  A(2)   0                .......            0    |  |X(2)|   |D(2)|
     41 !     |  0    C(3)  B(3)  A(3)  0           .......            0    |  | .. |   | .. |
     42 !     |  ..........................................                 |  | .. | = | .. |
     43 !     |  ..........................................                 |  | .. |   | .. |
     44 !     |                                  C(N-2) B(N-2) A(N-2)  0    |  | .. |   | .. |
     45 !     |                                    0    C(N-1) B(N-1) A(N-1)|  | .. |   | .. |
     46 !     |                                    0      0    C(N)   B(N)  |  |X(N)|   |D(N)|
     47 !
     48 ! </PRE>
     49 !  To solve this system
     50 ! <PRE>
     51 !   call tri_invert(X,D,A,B,C)
     52 !
     53 !       real, intent(out), dimension(:,:,:) :: X
     54 !       real, intent(in),  dimension(:,:,:) :: D
     55 !       real, optional,    dimension(:,:,:) :: A,B,C
     56 ! </PRE>
     57 ! For simplicity (?), A and C are assumed to be dimensioned the same size

Page 2           Source Listing                  TRI_INVERT
2021-06-01 08:50                                 tridiagonal.F90

     58 ! as B, D, and X, although any input values for A(N) and C(1) are ignored.
     59 ! (some checks are needed here)
     60 !
     61 ! If A is not present, it is assumed that the matrix (A,B.C) has not been changed
     62 ! since the last call to tri_invert.
     63 !
     64 ! To release memory,
     65 ! <PRE>
     66 !    call close_tridiagonal
     67 ! </PRE>
     68 ! The following module variables are used to retain the relevant information
     69 ! if one recalls tri_invert without changing (A,B,C)
     70 
     71 
     72 ! </DESCRIPTION>
     73 
     74 !--------------------------------------------------------------------------
     75 real,    private, allocatable, dimension(:,:,:) :: e,g,cc
     76 real,    private, allocatable, dimension(:,:)   :: bb
     77 logical, private :: init_tridiagonal = .false.
     78 !--------------------------------------------------------------------------
     79 
     80 contains
     81 
     82 !--------------------------------------------------------------------------
     83 
     84 ! <SUBROUTINE NAME="tri_invert">
     85 
     86 !   <OVERVIEW>
     87 !     Sets up and solves the tridiagonal system of equations.
     88 !   </OVERVIEW>
     89 !   <DESCRIPTION>
     90 !     Sets up and solves the tridiagonal system of equations.
     91 !   </DESCRIPTION>
     92 !   <TEMPLATE>
     93 !     call tri_invert ( x,d,a,b,c)
     94 !   </TEMPLATE>
     95 
     96 !   <IN NAME="d" TYPE="real" DIM="(:,:,:)">
     97 !     The right-hand side term, see the schematic above.
     98 !   </IN>
     99 !   <OUT NAME="x" TYPE="real" DIM="(:,:,:)">
    100 !     The solution to the tridiagonal system of equations.
    101 !   </OUT>
    102 !   <INOUT NAME="a,b,c" TYPE="real" DIM="(:,:,:)">
    103 !     The left-hand-side terms (matrix), see the schematic above.
    104 !             If A is not present, it is assumed that the matrix (A,B.C)
    105 !             has not been changed since the last call to tri_invert.
    106 !   </INOUT>
    107 
    108 !   <NOTE>
    109 !      For simplicity, A and C are assumed to be dimensioned the same size
    110 !      as B, D, and X, although any input values for A(N) and C(1) are ignored.
    111 !      There are no checks to make sure the sizes agree.
    112 !   </NOTE>
    113 !   <NOTE>
    114 !      The value of A(N) is modified on output, and B and C are unchanged.

Page 3           Source Listing                  TRI_INVERT
2021-06-01 08:50                                 tridiagonal.F90

    115 !   </NOTE>
    116 
    117 subroutine tri_invert(x,d,a,b,c)
    118 
    119 implicit none
    120 
    121 real, intent(out), dimension(:,:,:) :: x
    122 real, intent(in),  dimension(:,:,:) :: d
    123 real, optional,    dimension(:,:,:) :: a,b,c
    124 
    125 real, dimension(size(x,1),size(x,2),size(x,3)) :: f
    126 integer :: k
    127 
    128 if(present(a)) then
    129   init_tridiagonal = .true.
    130 
    131   if(allocated(e))     deallocate(e)
    132   if(allocated(g))     deallocate(g)
    133   if(allocated(bb))    deallocate(bb)
    134   if(allocated(cc))    deallocate(cc)
    135   allocate(e (size(x,1),size(x,2),size(x,3)))
    136   allocate(g (size(x,1),size(x,2),size(x,3)))
    137   allocate(bb(size(x,1),size(x,2)))
    138   allocate(cc(size(x,1),size(x,2),size(x,3)))
    139 
    140   e(:,:,1) = - a(:,:,1)/b(:,:,1)
    141   a(:,:,size(x,3)) = 0.0
    142 
    143   do  k= 2,size(x,3)
    144     g(:,:,k) = 1.0/(b(:,:,k)+c(:,:,k)*e(:,:,k-1))
    145     e(:,:,k) = - a(:,:,k)*g(:,:,k)
    146   end do
    147   cc = c
    148   bb = 1.0/b(:,:,1)
    149 
    150 end if
    151 
    152 ! if(.not.init_tridiagonal) error
    153 
    154 f(:,:,1) =  d(:,:,1)*bb
    155 do k= 2, size(x,3)
    156   f(:,:,k) = (d(:,:,k) - cc(:,:,k)*f(:,:,k-1))*g(:,:,k)
    157 end do
    158 
    159 x(:,:,size(x,3)) = f(:,:,size(x,3))
    160 do k = size(x,3)-1,1,-1
    161   x(:,:,k) = e(:,:,k)*x(:,:,k+1)+f(:,:,k)
    162 end do
    163 
    164 return
    165 end subroutine tri_invert

Page 4           Source Listing                  TRI_INVERT
2021-06-01 08:50 Entry Points                    tridiagonal.F90



ENTRY POINTS

  Name                                      
                                            
 tridiagonal_mod_mp_tri_invert_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  117      R(8)            8     3     1        ARG,INOUT        128,140,141,145                   
 ALLOCATED                  Func   131                                  scalar                    131,132,133,134                   
 B                          Dummy  117      R(8)            8     3     1        ARG,INOUT        140,144,148                       
 BB                         Local  133      R(8)            8     2     1        ALC,PRIV         76,133,137,148,154,192            
 C                          Dummy  117      R(8)            8     3     1        ARG,INOUT        144,147                           
 CC                         Local  134      R(8)            8     3     1        ALC,PRIV         75,134,138,147,156,193            
 D                          Dummy  117      R(8)            8     3     1        ARG,IN           154,156                           
 E                          Local  131      R(8)            8     3     1        ALC,PRIV         75,131,135,140,144,145,161,190    
 F                          Local  125      R(8)            8     3     0                         154,156,159,161                   
 G                          Local  132      R(8)            8     3     1        ALC,PRIV         75,132,136,144,145,156,191        
 INIT_TRIDIAGONAL           Local  129      L(4)            4           scalar   PRIV             77,129                            
 K                          Local  126      I(4)            4           scalar                    143,144,145,155,156,160,161       
 PRESENT                    Func   128                                  scalar                    128                               
 SIZE                       Func   125                                  scalar                    125,135,136,137,138,141,143,155,15
                                                                                                  9,160                             
 TRI_INVERT                 Subr   117                                                                                              
 X                          Dummy  117      R(8)            8     3     1        ARG,OUT          125,135,136,137,138,141,143,155,15
                                                                                                  9,160,161                         

Page 5           Source Listing                  TRI_INVERT
2021-06-01 08:50                                 tridiagonal.F90

    166 ! </SUBROUTINE>
    167 
    168 !-----------------------------------------------------------------
    169 
    170 ! <SUBROUTINE NAME="close_tridiagonal">
    171 
    172 !   <OVERVIEW>
    173 !     Releases memory used by the solver.
    174 !   </OVERVIEW>
    175 !   <DESCRIPTION>
    176 !     Releases memory used by the solver.
    177 !   </DESCRIPTION>
    178 !   <TEMPLATE>
    179 !     call close_tridiagonal
    180 !   </TEMPLATE>
    181 
    182 !   <NOTE>
    183 !     There are no arguments to this routine.
    184 !   </NOTE>
    185 
    186 subroutine close_tridiagonal
    187 
    188 implicit none
    189 
    190 deallocate(e)
    191 deallocate(g)
    192 deallocate(bb)
    193 deallocate(cc)
    194 
    195 return
    196 end subroutine close_tridiagonal

Page 6           Source Listing                  CLOSE_TRIDIAGONAL
2021-06-01 08:50 Entry Points                    tridiagonal.F90



ENTRY POINTS

  Name                                             
                                                   
 tridiagonal_mod_mp_close_tridiagonal_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOSE_TRIDIAGONAL          Subr   186                                                                                              

Page 7           Source Listing                  CLOSE_TRIDIAGONAL
2021-06-01 08:50                                 tridiagonal.F90

    197 ! </SUBROUTINE>
    198 
    199 !----------------------------------------------------------------
    200 
    201 
    202 
    203 end module tridiagonal_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TRIDIAGONAL_MOD            Module 21                                                                                               

Page 8           Source Listing                  CLOSE_TRIDIAGONAL
2021-06-01 08:50                                 tridiagonal.F90

    204 
    205 ! <INFO>
    206 
    207 !   <BUG>
    208 !     Optional arguments A,B,C have no intent declaration,
    209 !     so the default intent is inout. The value of A(N) is modified
    210 !     on output, and B and C are unchanged.
    211 !   </BUG>
    212 !   <NOTE>
    213 !       The following private allocatable arrays save the relevant information
    214 !  if one recalls tri_invert without changing (A,B,C):
    215 !  <PRE>
    216 !        allocate ( e  (size(x,1), size(x,2), size(x,3)) )
    217 !        allocate ( g  (size(x,1), size(x,2), size(x,3)) )
    218 !        allocate ( cc (size(x,1), size(x,2), size(x,3)) )
    219 !        allocate ( bb (size(x,1), size(x,2)) )
    220 ! </PRE>
    221 !  This storage is deallocated when close_tridiagonal is called.
    222 !   </NOTE>
    223 !   <FUTURE>
    224 !     Maybe a cleaner version?
    225 !   </FUTURE>
    226 
    227 ! </INFO>

Page 9           Source Listing                  CLOSE_TRIDIAGONAL
2021-06-01 08:50 Subprograms/Common Blocks       tridiagonal.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOSE_TRIDIAGONAL          Subr   186                                                                                              
 TRIDIAGONAL_MOD            Module 21                                                                                               
 TRI_INVERT                 Subr   117                                                                                              

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__

Page 10          Source Listing                  CLOSE_TRIDIAGONAL
2021-06-01 08:50                                 tridiagonal.F90

       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant

Page 11          Source Listing                  CLOSE_TRIDIAGONAL
2021-06-01 08:50                                 tridiagonal.F90

       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : tridiagonal.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
