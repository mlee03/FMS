Page 1           Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 /tmp/ifortUAvfLw.i90

      1 # 1 "mpp.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 !-----------------------------------------------------------------------
     21 !                 Communication for message-passing codes
     22 !
     23 ! AUTHOR: V. Balaji (V.Balaji@noaa.gov)
     24 !         SGI/GFDL Princeton University
     25 !
     26 !-----------------------------------------------------------------------
     27 module mpp_mod
     28 !a generalized communication package for use with shmem and MPI
     29 !will add: co_array_fortran, MPI2
     30 !Balaji (V.Balaji@noaa.gov) 11 May 1998
     31 
     32 ! <CONTACT EMAIL="V.Balaji@noaa.gov">
     33 !   V. Balaji
     34 ! </CONTACT>
     35 
     36 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/"/>
     37 ! <RCSLOG SRC="http://www.gfdl.noaa.gov/~vb/changes_mpp.html"/>
     38 
     39 ! <OVERVIEW>
     40 !   <TT>mpp_mod</TT>, is a set of simple calls to provide a uniform interface
     41 !   to different message-passing libraries. It currently can be
     42 !   implemented either in the SGI/Cray native SHMEM library or in the MPI
     43 !   standard. Other libraries (e.g MPI-2, Co-Array Fortran) can be
     44 !   incorporated as the need arises.
     45 ! </OVERVIEW>
     46 
     47 ! <DESCRIPTION>
     48 !   The data transfer between a processor and its own memory is based
     49 !   on <TT>load</TT> and <TT>store</TT> operations upon
     50 !   memory. Shared-memory systems (including distributed shared memory
     51 !   systems) have a single address space and any processor can acquire any
     52 !   data within the memory by <TT>load</TT> and
     53 !   <TT>store</TT>. The situation is different for distributed
     54 !   parallel systems. Specialized MPP systems such as the T3E can simulate
     55 !   shared-memory by direct data acquisition from remote memory. But if
     56 !   the parallel code is distributed across a cluster, or across the Net,
     57 !   messages must be sent and received using the protocols for

Page 2           Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

     58 !   long-distance communication, such as TCP/IP. This requires a
     59 !   ``handshaking'' between nodes of the distributed system. One can think
     60 !   of the two different methods as involving <TT>put</TT>s or
     61 !   <TT>get</TT>s (e.g the SHMEM library), or in the case of
     62 !   negotiated communication (e.g MPI), <TT>send</TT>s and
     63 !   <TT>recv</TT>s.
     64 !
     65 !   The difference between SHMEM and MPI is that SHMEM uses one-sided
     66 !   communication, which can have very low-latency high-bandwidth
     67 !   implementations on tightly coupled systems. MPI is a standard
     68 !   developed for distributed computing across loosely-coupled systems,
     69 !   and therefore incurs a software penalty for negotiating the
     70 !   communication. It is however an open industry standard whereas SHMEM
     71 !   is a proprietary interface. Besides, the <TT>put</TT>s or
     72 !   <TT>get</TT>s on which it is based cannot currently be implemented in
     73 !   a cluster environment (there are recent announcements from Compaq that
     74 !   occasion hope).
     75 !
     76 !   The message-passing requirements of climate and weather codes can be
     77 !   reduced to a fairly simple minimal set, which is easily implemented in
     78 !   any message-passing API. <TT>mpp_mod</TT> provides this API.
     79 !
     80 !    Features of <TT>mpp_mod</TT> include:
     81 !
     82 !    1) Simple, minimal API, with free access to underlying API for
     83 !       more complicated stuff.<BR/>
     84 !    2) Design toward typical use in climate/weather CFD codes.<BR/>
     85 !    3) Performance to be not significantly lower than any native API.
     86 !
     87 !   This module is used to develop higher-level calls for <LINK
     88 !   SRC="mpp_domains.html">domain decomposition</LINK> and <LINK
     89 !   SRC="mpp_io.html">parallel I/O</LINK>.
     90 !
     91 !   Parallel computing is initially daunting, but it soon becomes
     92 !   second nature, much the way many of us can now write vector code
     93 !   without much effort. The key insight required while reading and
     94 !   writing parallel code is in arriving at a mental grasp of several
     95 !   independent parallel execution streams through the same code (the SPMD
     96 !   model). Each variable you examine may have different values for each
     97 !   stream, the processor ID being an obvious example. Subroutines and
     98 !   function calls are particularly subtle, since it is not always obvious
     99 !   from looking at a call what synchronization between execution streams
    100 !   it implies. An example of erroneous code would be a global barrier
    101 !   call (see <LINK SRC="#mpp_sync">mpp_sync</LINK> below) placed
    102 !   within a code block that not all PEs will execute, e.g:
    103 !
    104 !   <PRE>
    105 !   if( pe.EQ.0 )call mpp_sync()
    106 !   </PRE>
    107 !
    108 !   Here only PE 0 reaches the barrier, where it will wait
    109 !   indefinitely. While this is a particularly egregious example to
    110 !   illustrate the coding flaw, more subtle versions of the same are
    111 !   among the most common errors in parallel code.
    112 !
    113 !   It is therefore important to be conscious of the context of a
    114 !   subroutine or function call, and the implied synchronization. There

Page 3           Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    115 !   are certain calls here (e.g <TT>mpp_declare_pelist, mpp_init,
    116 !   mpp_set_stack_size</TT>) which must be called by all
    117 !   PEs. There are others which must be called by a subset of PEs (here
    118 !   called a <TT>pelist</TT>) which must be called by all the PEs in the
    119 !   <TT>pelist</TT> (e.g <TT>mpp_max, mpp_sum, mpp_sync</TT>). Still
    120 !   others imply no synchronization at all. I will make every effort to
    121 !   highlight the context of each call in the MPP modules, so that the
    122 !   implicit synchronization is spelt out.
    123 !
    124 !   For performance it is necessary to keep synchronization as limited
    125 !   as the algorithm being implemented will allow. For instance, a single
    126 !   message between two PEs should only imply synchronization across the
    127 !   PEs in question. A <I>global</I> synchronization (or <I>barrier</I>)
    128 !   is likely to be slow, and is best avoided. But codes first
    129 !   parallelized on a Cray T3E tend to have many global syncs, as very
    130 !   fast barriers were implemented there in hardware.
    131 !
    132 !   Another reason to use pelists is to run a single program in MPMD
    133 !   mode, where different PE subsets work on different portions of the
    134 !   code. A typical example is to assign an ocean model and atmosphere
    135 !   model to different PE subsets, and couple them concurrently instead of
    136 !   running them serially. The MPP module provides the notion of a
    137 !   <I>current pelist</I>, which is set when a group of PEs branch off
    138 !   into a subset. Subsequent calls that omit the <TT>pelist</TT> optional
    139 !   argument (seen below in many of the individual calls) assume that the
    140 !   implied synchronization is across the current pelist. The calls
    141 !   <TT>mpp_root_pe</TT> and <TT>mpp_npes</TT> also return the values
    142 !   appropriate to the current pelist. The <TT>mpp_set_current_pelist</TT>
    143 !   call is provided to set the current pelist.
    144 
    145 ! </DESCRIPTION>
    146 ! <PUBLIC>
    147 !  F90 is a strictly-typed language, and the syntax pass of the
    148 !  compiler requires matching of type, kind and rank (TKR). Most calls
    149 !  listed here use a generic type, shown here as <TT>MPP_TYPE_</TT>. This
    150 !  is resolved in the pre-processor stage to any of a variety of
    151 !  types. In general the MPP operations work on 4-byte and 8-byte
    152 !  variants of <TT>integer, real, complex, logical</TT> variables, of
    153 !  rank 0 to 5, leading to 48 specific module procedures under the same
    154 !  generic interface. Any of the variables below shown as
    155 !  <TT>MPP_TYPE_</TT> is treated in this way.
    156 ! </PUBLIC>
    157 
    158 ! Define rank(X) for PGI compiler
    159 # 160
    160 
    161 
    162 
    163 
    164   use mpi
    165 
    166 
    167   use iso_fortran_env,   only : INPUT_UNIT, OUTPUT_UNIT, ERROR_UNIT
    168   use mpp_parameter_mod, only : MPP_VERBOSE, MPP_DEBUG, ALL_PES, ANY_PE, NULL_PE
    169   use mpp_parameter_mod, only : NOTE, WARNING, FATAL, MPP_CLOCK_DETAILED,MPP_CLOCK_SYNC
    170   use mpp_parameter_mod, only : CLOCK_COMPONENT, CLOCK_SUBCOMPONENT, CLOCK_MODULE_DRIVER
    171   use mpp_parameter_mod, only : CLOCK_MODULE, CLOCK_ROUTINE, CLOCK_LOOP, CLOCK_INFRA

Page 4           Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    172   use mpp_parameter_mod, only : MAX_EVENTS, MAX_BINS, MAX_EVENT_TYPES, MAX_CLOCKS
    173   use mpp_parameter_mod, only : MAXPES, EVENT_WAIT, EVENT_ALLREDUCE, EVENT_BROADCAST
    174   use mpp_parameter_mod, only : EVENT_ALLTOALL
    175   use mpp_parameter_mod, only : EVENT_TYPE_CREATE, EVENT_TYPE_FREE
    176   use mpp_parameter_mod, only : EVENT_RECV, EVENT_SEND, MPP_READY, MPP_WAIT
    177   use mpp_parameter_mod, only : mpp_parameter_version=>version
    178   use mpp_parameter_mod, only : DEFAULT_TAG
    179   use mpp_parameter_mod, only : COMM_TAG_1,  COMM_TAG_2,  COMM_TAG_3,  COMM_TAG_4
    180   use mpp_parameter_mod, only : COMM_TAG_5,  COMM_TAG_6,  COMM_TAG_7,  COMM_TAG_8
    181   use mpp_parameter_mod, only : COMM_TAG_9,  COMM_TAG_10, COMM_TAG_11, COMM_TAG_12
    182   use mpp_parameter_mod, only : COMM_TAG_13, COMM_TAG_14, COMM_TAG_15, COMM_TAG_16
    183   use mpp_parameter_mod, only : COMM_TAG_17, COMM_TAG_18, COMM_TAG_19, COMM_TAG_20
    184   use mpp_parameter_mod, only : MPP_FILL_INT,MPP_FILL_DOUBLE
    185   use mpp_data_mod,      only : stat, mpp_stack, ptr_stack, status, ptr_status, sync, ptr_sync
    186   use mpp_data_mod,      only : mpp_from_pe, ptr_from, remote_data_loc, ptr_remote
    187   use mpp_data_mod,      only : mpp_data_version=>version
    188   use platform_mod
    189 
    190 implicit none
    191 private
    192 
    193 !--- public paramters  -----------------------------------------------
    194   public :: MPP_VERBOSE, MPP_DEBUG, ALL_PES, ANY_PE, NULL_PE, NOTE, WARNING, FATAL
    195   public :: MPP_CLOCK_SYNC, MPP_CLOCK_DETAILED, CLOCK_COMPONENT, CLOCK_SUBCOMPONENT
    196   public :: CLOCK_MODULE_DRIVER, CLOCK_MODULE, CLOCK_ROUTINE, CLOCK_LOOP, CLOCK_INFRA
    197   public :: MAXPES, EVENT_RECV, EVENT_SEND, INPUT_STR_LENGTH
    198   public :: COMM_TAG_1,  COMM_TAG_2,  COMM_TAG_3,  COMM_TAG_4
    199   public :: COMM_TAG_5,  COMM_TAG_6,  COMM_TAG_7,  COMM_TAG_8
    200   public :: COMM_TAG_9,  COMM_TAG_10, COMM_TAG_11, COMM_TAG_12
    201   public :: COMM_TAG_13, COMM_TAG_14, COMM_TAG_15, COMM_TAG_16
    202   public :: COMM_TAG_17, COMM_TAG_18, COMM_TAG_19, COMM_TAG_20
    203   public :: MPP_FILL_INT,MPP_FILL_DOUBLE
    204   public :: mpp_init_test_full_init, mpp_init_test_init_true_only, mpp_init_test_peset_allocated
    205   public :: mpp_init_test_clocks_init, mpp_init_test_datatype_list_init, mpp_init_test_logfile_init
    206   public :: mpp_init_test_read_namelist, mpp_init_test_etc_unit, mpp_init_test_requests_allocated
    207 
    208 !--- public data from mpp_data_mod ------------------------------
    209 !  public :: request
    210 
    211 !--- public interface from mpp_util.h ------------------------------
    212   public :: stdin, stdout, stderr, stdlog, lowercase, uppercase, mpp_error, mpp_error_state
    213   public :: mpp_set_warn_level, mpp_sync, mpp_sync_self, mpp_set_stack_size, mpp_pe
    214   public :: mpp_npes, mpp_root_pe, mpp_set_root_pe, mpp_declare_pelist
    215   public :: mpp_get_current_pelist, mpp_set_current_pelist, mpp_get_current_pelist_name
    216   public :: mpp_clock_id, mpp_clock_set_grain, mpp_record_timing_data, get_unit
    217   public :: read_ascii_file, read_input_nml, mpp_clock_begin, mpp_clock_end
    218   public :: get_ascii_file_num_lines, get_ascii_file_num_lines_and_length
    219   public :: mpp_record_time_start, mpp_record_time_end
    220 
    221 !--- public interface from mpp_comm.h ------------------------------
    222   public :: mpp_chksum, mpp_max, mpp_min, mpp_sum, mpp_transmit, mpp_send, mpp_recv
    223   public :: mpp_sum_ad
    224   public :: mpp_broadcast, mpp_init, mpp_exit
    225   public :: mpp_gather, mpp_scatter, mpp_alltoall
    226   public :: mpp_type, mpp_byte, mpp_type_create, mpp_type_free
    227 
    228 !*********************************************************************

Page 5           Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    229 !
    230 !    public data type
    231 !
    232 !*********************************************************************
    233 !peset hold communicators as SHMEM-compatible triads (start, log2(stride), num)
    234   type :: communicator
    235      private
    236      character(len=32) :: name
    237      integer, pointer  :: list(:) =>NULL()
    238      integer           :: count
    239      integer           :: start, log2stride ! dummy variables when libMPI is defined.
    240      integer           :: id, group         ! MPI communicator and group id for this PE set.
    241   end type communicator
    242 
    243   type :: event
    244      private
    245      character(len=16)                         :: name
    246      integer(i8_kind), dimension(MAX_EVENTS)   :: ticks, bytes
    247      integer                                   :: calls
    248   end type event
    249 
    250 !a clock contains an array of event profiles for a region
    251   type :: clock
    252      private
    253      character(len=32)    :: name
    254      integer(i8_kind)     :: hits
    255      integer(i8_kind)     :: tick
    256      integer(i8_kind)     :: total_ticks
    257      integer              :: peset_num
    258      logical              :: sync_on_begin, detailed
    259      integer              :: grain
    260      type(event), pointer :: events(:) =>NULL() !if needed, allocate to MAX_EVENT_TYPES
    261      logical              :: is_on              !initialize to false. set true when calling mpp_clock_begin
    262 ! set false when calling mpp_clock_end
    263   end type clock
    264 
    265   type :: Clock_Data_Summary
    266      private
    267      character(len=16)  :: name
    268      real(r8_kind)      :: msg_size_sums(MAX_BINS)
    269      real(r8_kind)      :: msg_time_sums(MAX_BINS)
    270      real(r8_kind)      :: total_data
    271      real(r8_kind)      :: total_time
    272      integer(i8_kind)   :: msg_size_cnts(MAX_BINS)
    273      integer(i8_kind)   :: total_cnts
    274   end type Clock_Data_Summary
    275 
    276   type :: Summary_Struct
    277      private
    278      character(len=16)         :: name
    279      type (Clock_Data_Summary) :: event(MAX_EVENT_TYPES)
    280   end type Summary_Struct
    281 
    282 ! Data types for generalized data transfer (e.g. MPI_Type)
    283   type :: mpp_type
    284      private
    285      integer :: counter ! Number of instances of this type

Page 6           Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    286      integer :: ndims
    287      integer, allocatable :: sizes(:)
    288      integer, allocatable :: subsizes(:)
    289      integer, allocatable :: starts(:)
    290      integer :: etype   ! Elementary data type (e.g. MPI_BYTE)
    291      integer :: id      ! Identifier within message passing library (e.g. MPI)
    292 
    293      type(mpp_type), pointer :: prev => null()
    294      type(mpp_type), pointer :: next => null()
    295   end type mpp_type
    296 
    297 ! Persisent elements for linked list interaction
    298   type :: mpp_type_list
    299       private
    300       type(mpp_type), pointer :: head => null()
    301       type(mpp_type), pointer :: tail => null()
    302       integer :: length
    303   end type mpp_type_list
    304 
    305 !***********************************************************************
    306 !
    307 !     public interface from mpp_util.h
    308 !
    309 !***********************************************************************
    310 ! <INTERFACE NAME="mpp_error">
    311 !  <OVERVIEW>
    312 !    Error handler.
    313 !  </OVERVIEW>
    314 !  <DESCRIPTION>
    315 !    It is strongly recommended that all error exits pass through
    316 !    <TT>mpp_error</TT> to assure the program fails cleanly. An individual
    317 !    PE encountering a <TT>STOP</TT> statement, for instance, can cause the
    318 !    program to hang. The use of the <TT>STOP</TT> statement is strongly
    319 !    discouraged.
    320 !
    321 !    Calling mpp_error with no arguments produces an immediate error
    322 !    exit, i.e:
    323 !    <PRE>
    324 !    call mpp_error
    325 !    call mpp_error()
    326 !    </PRE>
    327 !    are equivalent.
    328 !
    329 !    The argument order
    330 !    <PRE>
    331 !    call mpp_error( routine, errormsg, errortype )
    332 !    </PRE>
    333 !    is also provided to support legacy code. In this version of the
    334 !    call, none of the arguments may be omitted.
    335 !
    336 !    The behaviour of <TT>mpp_error</TT> for a <TT>WARNING</TT> can be
    337 !    controlled with an additional call <TT>mpp_set_warn_level</TT>.
    338 !    <PRE>
    339 !    call mpp_set_warn_level(ERROR)
    340 !    </PRE>
    341 !    causes <TT>mpp_error</TT> to treat <TT>WARNING</TT>
    342 !    exactly like <TT>FATAL</TT>.

Page 7           Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    343 !    <PRE>
    344 !    call mpp_set_warn_level(WARNING)
    345 !    </PRE>
    346 !    resets to the default behaviour described above.
    347 !
    348 !    <TT>mpp_error</TT> also has an internal error state which
    349 !    maintains knowledge of whether a warning has been issued. This can be
    350 !    used at startup in a subroutine that checks if the model has been
    351 !    properly configured. You can generate a series of warnings using
    352 !    <TT>mpp_error</TT>, and then check at the end if any warnings has been
    353 !    issued using the function <TT>mpp_error_state()</TT>. If the value of
    354 !    this is <TT>WARNING</TT>, at least one warning has been issued, and
    355 !    the user can take appropriate action:
    356 !
    357 !    <PRE>
    358 !    if( ... )call mpp_error( WARNING, '...' )
    359 !    if( ... )call mpp_error( WARNING, '...' )
    360 !    if( ... )call mpp_error( WARNING, '...' )
    361 !    ...
    362 !    if( mpp_error_state().EQ.WARNING )call mpp_error( FATAL, '...' )
    363 !    </PRE>
    364 !  </DESCRIPTION>
    365 !  <TEMPLATE>
    366 !    call mpp_error( errortype, routine, errormsg )
    367 !  </TEMPLATE>
    368 !  <IN NAME="errortype">
    369 !    One of <TT>NOTE</TT>, <TT>WARNING</TT> or <TT>FATAL</TT>
    370 !    (these definitions are acquired by use association).
    371 !    <TT>NOTE</TT> writes <TT>errormsg</TT> to <TT>STDOUT</TT>.
    372 !    <TT>WARNING</TT> writes <TT>errormsg</TT> to <TT>STDERR</TT>.
    373 !    <TT>FATAL</TT> writes <TT>errormsg</TT> to <TT>STDERR</TT>,
    374 !    and induces a clean error exit with a call stack traceback.
    375 !  </IN>
    376 ! </INTERFACE>
    377   interface mpp_error
    378      module procedure mpp_error_basic
    379      module procedure mpp_error_mesg
    380      module procedure mpp_error_noargs
    381      module procedure mpp_error_is
    382      module procedure mpp_error_rs
    383      module procedure mpp_error_ia
    384      module procedure mpp_error_ra
    385      module procedure mpp_error_ia_ia
    386      module procedure mpp_error_ia_ra
    387      module procedure mpp_error_ra_ia
    388      module procedure mpp_error_ra_ra
    389      module procedure mpp_error_ia_is
    390      module procedure mpp_error_ia_rs
    391      module procedure mpp_error_ra_is
    392      module procedure mpp_error_ra_rs
    393      module procedure mpp_error_is_ia
    394      module procedure mpp_error_is_ra
    395      module procedure mpp_error_rs_ia
    396      module procedure mpp_error_rs_ra
    397      module procedure mpp_error_is_is
    398      module procedure mpp_error_is_rs
    399      module procedure mpp_error_rs_is

Page 8           Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    400      module procedure mpp_error_rs_rs
    401   end interface
    402 
    403   interface array_to_char
    404      module procedure iarray_to_char
    405      module procedure rarray_to_char
    406   end interface
    407 
    408 !***********************************************************************
    409 !
    410 !    public interface from mpp_comm.h
    411 !
    412 !***********************************************************************
    413 
    414 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    415 !                                                                             !
    416 !       ROUTINES TO INITIALIZE/FINALIZE MPP MODULE: mpp_init, mpp_exit        !
    417 !                                                                             !
    418 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    419 
    420 ! <SUBROUTINE NAME="mpp_init">
    421 !  <OVERVIEW>
    422 !   Initialize <TT>mpp_mod</TT>.
    423 !  </OVERVIEW>
    424 !  <DESCRIPTION>
    425 !   Called to initialize the <TT>mpp_mod</TT> package. It is recommended
    426 !   that this call be the first executed line in your program. It sets the
    427 !   number of PEs assigned to this run (acquired from the command line, or
    428 !   through the environment variable <TT>NPES</TT>), and associates an ID
    429 !   number to each PE. These can be accessed by calling <LINK
    430 !   SRC="#mpp_npes"><TT>mpp_npes</TT></LINK> and <LINK
    431 !   SRC="#mpp_pe"><TT>mpp_pe</TT></LINK>.
    432 !  </DESCRIPTION>
    433 !  <TEMPLATE>
    434 !   call mpp_init( flags )
    435 !  </TEMPLATE>
    436 !  <IN NAME="flags" TYPE="integer">
    437 !   <TT>flags</TT> can be set to <TT>MPP_VERBOSE</TT> to
    438 !   have <TT>mpp_mod</TT> keep you informed of what it's up to.
    439 !  </IN>
    440 ! </SUBROUTINE>
    441 
    442 ! <SUBROUTINE NAME="mpp_exit">
    443 !  <OVERVIEW>
    444 !   Exit <TT>mpp_mod</TT>.
    445 !  </OVERVIEW>
    446 !  <DESCRIPTION>
    447 !   Called at the end of the run, or to re-initialize <TT>mpp_mod</TT>,
    448 !   should you require that for some odd reason.
    449 !
    450 !   This call implies synchronization across all PEs.
    451 !  </DESCRIPTION>
    452 !  <TEMPLATE>
    453 !   call mpp_exit()
    454 !  </TEMPLATE>
    455 ! </SUBROUTINE>
    456 

Page 9           Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    457 !#####################################################################
    458 
    459 ! <SUBROUTINE NAME="mpp_set_stack_size">
    460 !  <OVERVIEW>
    461 !    Allocate module internal workspace.
    462 !  </OVERVIEW>
    463 !  <DESCRIPTION>
    464 !    <TT>mpp_mod</TT> maintains a private internal array called
    465 !    <TT>mpp_stack</TT> for private workspace. This call sets the length,
    466 !    in words, of this array.
    467 !
    468 !    The <TT>mpp_init</TT> call sets this
    469 !    workspace length to a default of 32768, and this call may be used if a
    470 !    longer workspace is needed.
    471 !
    472 !    This call implies synchronization across all PEs.
    473 !
    474 !    This workspace is symmetrically allocated, as required for
    475 !    efficient communication on SGI and Cray MPP systems. Since symmetric
    476 !    allocation must be performed by <I>all</I> PEs in a job, this call
    477 !    must also be called by all PEs, using the same value of
    478 !    <TT>n</TT>. Calling <TT>mpp_set_stack_size</TT> from a subset of PEs,
    479 !    or with unequal argument <TT>n</TT>, may cause the program to hang.
    480 !
    481 !    If any MPP call using <TT>mpp_stack</TT> overflows the declared
    482 !    stack array, the program will abort with a message specifying the
    483 !    stack length that is required. Many users wonder why, if the required
    484 !    stack length can be computed, it cannot also be specified at that
    485 !    point. This cannot be automated because there is no way for the
    486 !    program to know if all PEs are present at that call, and with equal
    487 !    values of <TT>n</TT>. The program must be rerun by the user with the
    488 !    correct argument to <TT>mpp_set_stack_size</TT>, called at an
    489 !    appropriate point in the code where all PEs are known to be present.
    490 !  </DESCRIPTION>
    491 !  <TEMPLATE>
    492 !    call mpp_set_stack_size(n)
    493 !  </TEMPLATE>
    494 !  <IN NAME="n" TYPE="integer"></IN>
    495 ! </SUBROUTINE>
    496 
    497 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    498 !                                                                             !
    499 !              DATA TRANSFER TYPES: mpp_type_create                           !
    500 !                                                                             !
    501 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    502 
    503   interface mpp_type_create
    504       module procedure mpp_type_create_int4
    505       module procedure mpp_type_create_int8
    506       module procedure mpp_type_create_real4
    507       module procedure mpp_type_create_real8
    508       module procedure mpp_type_create_cmplx4
    509       module procedure mpp_type_create_cmplx8
    510       module procedure mpp_type_create_logical4
    511       module procedure mpp_type_create_logical8
    512   end interface mpp_type_create
    513 

Page 10          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    514 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    515 !                                                                             !
    516 !            GLOBAL REDUCTION ROUTINES: mpp_max, mpp_sum, mpp_min             !
    517 !                                                                             !
    518 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    519 
    520 ! <INTERFACE NAME="mpp_max">
    521 !  <OVERVIEW>
    522 !    Reduction operations.
    523 !  </OVERVIEW>
    524 !  <DESCRIPTION>
    525 !    Find the max of scalar a the PEs in pelist
    526 !    result is also automatically broadcast to all PEs
    527 !  </DESCRIPTION>
    528 !  <TEMPLATE>
    529 !    call  mpp_max( a, pelist )
    530 !  </TEMPLATE>
    531 !  <IN NAME="a">
    532 !    <TT>real</TT> or <TT>integer</TT>, of 4-byte of 8-byte kind.
    533 !  </IN>
    534 !  <IN NAME="pelist">
    535 !    If <TT>pelist</TT> is omitted, the context is assumed to be the
    536 !    current pelist. This call implies synchronization across the PEs in
    537 !    <TT>pelist</TT>, or the current pelist if <TT>pelist</TT> is absent.
    538 !  </IN>
    539 ! </INTERFACE>
    540 
    541   interface mpp_max
    542      module procedure mpp_max_real8_0d
    543      module procedure mpp_max_real8_1d
    544      module procedure mpp_max_int8_0d
    545      module procedure mpp_max_int8_1d
    546      module procedure mpp_max_real4_0d
    547      module procedure mpp_max_real4_1d
    548      module procedure mpp_max_int4_0d
    549      module procedure mpp_max_int4_1d
    550   end interface
    551 
    552   interface mpp_min
    553      module procedure mpp_min_real8_0d
    554      module procedure mpp_min_real8_1d
    555      module procedure mpp_min_int8_0d
    556      module procedure mpp_min_int8_1d
    557      module procedure mpp_min_real4_0d
    558      module procedure mpp_min_real4_1d
    559      module procedure mpp_min_int4_0d
    560      module procedure mpp_min_int4_1d
    561   end interface
    562 
    563 
    564 ! <INTERFACE NAME="mpp_sum">
    565 !  <OVERVIEW>
    566 !    Reduction operation.
    567 !  </OVERVIEW>
    568 !  <DESCRIPTION>
    569 !    <TT>MPP_TYPE_</TT> corresponds to any 4-byte and 8-byte variant of
    570 !    <TT>integer, real, complex</TT> variables, of rank 0 or 1. A

Page 11          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    571 !    contiguous block from a multi-dimensional array may be passed by its
    572 !    starting address and its length, as in <TT>f77</TT>.
    573 !
    574 !    Library reduction operators are not required or guaranteed to be
    575 !    bit-reproducible. In any case, changing the processor count changes
    576 !    the data layout, and thus very likely the order of operations. For
    577 !    bit-reproducible sums of distributed arrays, consider using the
    578 !    <TT>mpp_global_sum</TT> routine provided by the <LINK
    579 !    SRC="mpp_domains.html"><TT>mpp_domains</TT></LINK> module.
    580 !
    581 !    The <TT>bit_reproducible</TT> flag provided in earlier versions of
    582 !    this routine has been removed.
    583 !
    584 !
    585 !    If <TT>pelist</TT> is omitted, the context is assumed to be the
    586 !    current pelist. This call implies synchronization across the PEs in
    587 !    <TT>pelist</TT>, or the current pelist if <TT>pelist</TT> is absent.
    588 !  </DESCRIPTION>
    589 !  <TEMPLATE>
    590 !    call mpp_sum( a, length, pelist )
    591 !  </TEMPLATE>
    592 !  <IN NAME="length"></IN>
    593 !  <IN NAME="pelist"></IN>
    594 !  <INOUT NAME="a"></INOUT>
    595 ! </INTERFACE>
    596 
    597   interface mpp_sum
    598      module procedure mpp_sum_int8
    599      module procedure mpp_sum_int8_scalar
    600      module procedure mpp_sum_int8_2d
    601      module procedure mpp_sum_int8_3d
    602      module procedure mpp_sum_int8_4d
    603      module procedure mpp_sum_int8_5d
    604      module procedure mpp_sum_real8
    605      module procedure mpp_sum_real8_scalar
    606      module procedure mpp_sum_real8_2d
    607      module procedure mpp_sum_real8_3d
    608      module procedure mpp_sum_real8_4d
    609      module procedure mpp_sum_real8_5d
    610 # 617
    611 
    612      module procedure mpp_sum_int4
    613      module procedure mpp_sum_int4_scalar
    614      module procedure mpp_sum_int4_2d
    615      module procedure mpp_sum_int4_3d
    616      module procedure mpp_sum_int4_4d
    617      module procedure mpp_sum_int4_5d
    618      module procedure mpp_sum_real4
    619      module procedure mpp_sum_real4_scalar
    620      module procedure mpp_sum_real4_2d
    621      module procedure mpp_sum_real4_3d
    622      module procedure mpp_sum_real4_4d
    623      module procedure mpp_sum_real4_5d
    624 # 637
    625 
    626   end interface
    627 

Page 12          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    628   interface mpp_sum_ad
    629      module procedure mpp_sum_int8_ad
    630      module procedure mpp_sum_int8_scalar_ad
    631      module procedure mpp_sum_int8_2d_ad
    632      module procedure mpp_sum_int8_3d_ad
    633      module procedure mpp_sum_int8_4d_ad
    634      module procedure mpp_sum_int8_5d_ad
    635      module procedure mpp_sum_real8_ad
    636      module procedure mpp_sum_real8_scalar_ad
    637      module procedure mpp_sum_real8_2d_ad
    638      module procedure mpp_sum_real8_3d_ad
    639      module procedure mpp_sum_real8_4d_ad
    640      module procedure mpp_sum_real8_5d_ad
    641 # 660
    642 
    643      module procedure mpp_sum_int4_ad
    644      module procedure mpp_sum_int4_scalar_ad
    645      module procedure mpp_sum_int4_2d_ad
    646      module procedure mpp_sum_int4_3d_ad
    647      module procedure mpp_sum_int4_4d_ad
    648      module procedure mpp_sum_int4_5d_ad
    649      module procedure mpp_sum_real4_ad
    650      module procedure mpp_sum_real4_scalar_ad
    651      module procedure mpp_sum_real4_2d_ad
    652      module procedure mpp_sum_real4_3d_ad
    653      module procedure mpp_sum_real4_4d_ad
    654      module procedure mpp_sum_real4_5d_ad
    655 # 680
    656 
    657   end interface
    658 
    659 !#####################################################################
    660 ! <INTERFACE NAME="mpp_gather">
    661 !  <OVERVIEW>
    662 !    gather information onto root pe.
    663 !  </OVERVIEW>
    664 ! </INTERFACE>
    665   interface mpp_gather
    666      module procedure mpp_gather_logical_1d
    667      module procedure mpp_gather_int4_1d
    668      module procedure mpp_gather_real4_1d
    669      module procedure mpp_gather_real8_1d
    670      module procedure mpp_gather_logical_1dv
    671      module procedure mpp_gather_int4_1dv
    672      module procedure mpp_gather_real4_1dv
    673      module procedure mpp_gather_real8_1dv
    674      module procedure mpp_gather_pelist_logical_2d
    675      module procedure mpp_gather_pelist_logical_3d
    676      module procedure mpp_gather_pelist_int4_2d
    677      module procedure mpp_gather_pelist_int4_3d
    678      module procedure mpp_gather_pelist_real4_2d
    679      module procedure mpp_gather_pelist_real4_3d
    680      module procedure mpp_gather_pelist_real8_2d
    681      module procedure mpp_gather_pelist_real8_3d
    682   end interface
    683 
    684 !#####################################################################

Page 13          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    685 ! <INTERFACE NAME="mpp_scatter">
    686 !  <OVERVIEW>
    687 !    gather information onto root pe.
    688 !  </OVERVIEW>
    689 ! </INTERFACE>
    690   interface mpp_scatter
    691      module procedure mpp_scatter_pelist_int4_2d
    692      module procedure mpp_scatter_pelist_int4_3d
    693      module procedure mpp_scatter_pelist_real4_2d
    694      module procedure mpp_scatter_pelist_real4_3d
    695      module procedure mpp_scatter_pelist_real8_2d
    696      module procedure mpp_scatter_pelist_real8_3d
    697   end interface
    698 
    699 !#####################################################################
    700 ! <interface name="mpp_alltoall">
    701 !   <overview>
    702 !     scatter a vector across all PEs
    703 !     (e.g. transpose the vector and PE index)
    704 !   </overview>
    705 ! </interface>
    706   interface mpp_alltoall
    707      module procedure mpp_alltoall_int4
    708      module procedure mpp_alltoall_int8
    709      module procedure mpp_alltoall_real4
    710      module procedure mpp_alltoall_real8
    711 # 737
    712 
    713 # 740
    714 
    715      module procedure mpp_alltoall_logical4
    716      module procedure mpp_alltoall_logical8
    717      module procedure mpp_alltoall_int4_v
    718      module procedure mpp_alltoall_int8_v
    719      module procedure mpp_alltoall_real4_v
    720      module procedure mpp_alltoall_real8_v
    721 # 749
    722 
    723 # 752
    724 
    725      module procedure mpp_alltoall_logical4_v
    726      module procedure mpp_alltoall_logical8_v
    727      module procedure mpp_alltoall_int4_w
    728      module procedure mpp_alltoall_int8_w
    729      module procedure mpp_alltoall_real4_w
    730      module procedure mpp_alltoall_real8_w
    731 # 761
    732 
    733 # 764
    734 
    735      module procedure mpp_alltoall_logical4_w
    736      module procedure mpp_alltoall_logical8_w
    737   end interface
    738 
    739 
    740 !#####################################################################
    741 

Page 14          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    742 ! <INTERFACE NAME="mpp_transmit">
    743 !  <OVERVIEW>
    744 !    Basic message-passing call.
    745 !  </OVERVIEW>
    746 !  <DESCRIPTION>
    747 !    <TT>MPP_TYPE_</TT> corresponds to any 4-byte and 8-byte variant of
    748 !    <TT>integer, real, complex, logical</TT> variables, of rank 0 or 1. A
    749 !    contiguous block from a multi-dimensional array may be passed by its
    750 !    starting address and its length, as in <TT>f77</TT>.
    751 !
    752 !    <TT>mpp_transmit</TT> is currently implemented as asynchronous
    753 !    outward transmission and synchronous inward transmission. This follows
    754 !    the behaviour of <TT>shmem_put</TT> and <TT>shmem_get</TT>. In MPI, it
    755 !    is implemented as <TT>mpi_isend</TT> and <TT>mpi_recv</TT>. For most
    756 !    applications, transmissions occur in pairs, and are here accomplished
    757 !    in a single call.
    758 !
    759 !    The special PE designations <TT>NULL_PE</TT>,
    760 !    <TT>ANY_PE</TT> and <TT>ALL_PES</TT> are provided by use
    761 !    association.
    762 !
    763 !    <TT>NULL_PE</TT>: is used to disable one of the pair of
    764 !    transmissions.<BR/>
    765 !    <TT>ANY_PE</TT>: is used for unspecific remote
    766 !    destination. (Please note that <TT>put_pe=ANY_PE</TT> has no meaning
    767 !    in the MPI context, though it is available in the SHMEM invocation. If
    768 !    portability is a concern, it is best avoided).<BR/>
    769 !    <TT>ALL_PES</TT>: is used for broadcast operations.
    770 !
    771 !    It is recommended that <LINK
    772 !    SRC="#mpp_broadcast"><TT>mpp_broadcast</TT></LINK> be used for
    773 !    broadcasts.
    774 !
    775 !    The following example illustrates the use of
    776 !    <TT>NULL_PE</TT> and <TT>ALL_PES</TT>:
    777 !
    778 !    <PRE>
    779 !    real, dimension(n) :: a
    780 !    if( pe.EQ.0 )then
    781 !        do p = 1,npes-1
    782 !           call mpp_transmit( a, n, p, a, n, NULL_PE )
    783 !        end do
    784 !    else
    785 !        call mpp_transmit( a, n, NULL_PE, a, n, 0 )
    786 !    end if
    787 !
    788 !    call mpp_transmit( a, n, ALL_PES, a, n, 0 )
    789 !    </PRE>
    790 !
    791 !    The do loop and the broadcast operation above are equivalent.
    792 !
    793 !    Two overloaded calls <TT>mpp_send</TT> and
    794 !     <TT>mpp_recv</TT> have also been
    795 !    provided. <TT>mpp_send</TT> calls <TT>mpp_transmit</TT>
    796 !    with <TT>get_pe=NULL_PE</TT>. <TT>mpp_recv</TT> calls
    797 !    <TT>mpp_transmit</TT> with <TT>put_pe=NULL_PE</TT>. Thus
    798 !    the do loop above could be written more succinctly:

Page 15          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    799 !
    800 !    <PRE>
    801 !    if( pe.EQ.0 )then
    802 !        do p = 1,npes-1
    803 !           call mpp_send( a, n, p )
    804 !        end do
    805 !    else
    806 !        call mpp_recv( a, n, 0 )
    807 !    end if
    808 !    </PRE>
    809 !  </DESCRIPTION>
    810 !  <TEMPLATE>
    811 !    call mpp_transmit( put_data, put_len, put_pe, get_data, get_len, get_pe )
    812 !  </TEMPLATE>
    813 ! </INTERFACE>
    814   interface mpp_transmit
    815      module procedure mpp_transmit_real8
    816      module procedure mpp_transmit_real8_scalar
    817      module procedure mpp_transmit_real8_2d
    818      module procedure mpp_transmit_real8_3d
    819      module procedure mpp_transmit_real8_4d
    820      module procedure mpp_transmit_real8_5d
    821 # 858
    822 
    823      module procedure mpp_transmit_int8
    824      module procedure mpp_transmit_int8_scalar
    825      module procedure mpp_transmit_int8_2d
    826      module procedure mpp_transmit_int8_3d
    827      module procedure mpp_transmit_int8_4d
    828      module procedure mpp_transmit_int8_5d
    829      module procedure mpp_transmit_logical8
    830      module procedure mpp_transmit_logical8_scalar
    831      module procedure mpp_transmit_logical8_2d
    832      module procedure mpp_transmit_logical8_3d
    833      module procedure mpp_transmit_logical8_4d
    834      module procedure mpp_transmit_logical8_5d
    835 
    836      module procedure mpp_transmit_real4
    837      module procedure mpp_transmit_real4_scalar
    838      module procedure mpp_transmit_real4_2d
    839      module procedure mpp_transmit_real4_3d
    840      module procedure mpp_transmit_real4_4d
    841      module procedure mpp_transmit_real4_5d
    842 
    843 # 886
    844 
    845      module procedure mpp_transmit_int4
    846      module procedure mpp_transmit_int4_scalar
    847      module procedure mpp_transmit_int4_2d
    848      module procedure mpp_transmit_int4_3d
    849      module procedure mpp_transmit_int4_4d
    850      module procedure mpp_transmit_int4_5d
    851      module procedure mpp_transmit_logical4
    852      module procedure mpp_transmit_logical4_scalar
    853      module procedure mpp_transmit_logical4_2d
    854      module procedure mpp_transmit_logical4_3d
    855      module procedure mpp_transmit_logical4_4d

Page 16          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    856      module procedure mpp_transmit_logical4_5d
    857   end interface
    858   interface mpp_recv
    859      module procedure mpp_recv_real8
    860      module procedure mpp_recv_real8_scalar
    861      module procedure mpp_recv_real8_2d
    862      module procedure mpp_recv_real8_3d
    863      module procedure mpp_recv_real8_4d
    864      module procedure mpp_recv_real8_5d
    865 # 914
    866 
    867      module procedure mpp_recv_int8
    868      module procedure mpp_recv_int8_scalar
    869      module procedure mpp_recv_int8_2d
    870      module procedure mpp_recv_int8_3d
    871      module procedure mpp_recv_int8_4d
    872      module procedure mpp_recv_int8_5d
    873      module procedure mpp_recv_logical8
    874      module procedure mpp_recv_logical8_scalar
    875      module procedure mpp_recv_logical8_2d
    876      module procedure mpp_recv_logical8_3d
    877      module procedure mpp_recv_logical8_4d
    878      module procedure mpp_recv_logical8_5d
    879 
    880      module procedure mpp_recv_real4
    881      module procedure mpp_recv_real4_scalar
    882      module procedure mpp_recv_real4_2d
    883      module procedure mpp_recv_real4_3d
    884      module procedure mpp_recv_real4_4d
    885      module procedure mpp_recv_real4_5d
    886 
    887 # 942
    888 
    889      module procedure mpp_recv_int4
    890      module procedure mpp_recv_int4_scalar
    891      module procedure mpp_recv_int4_2d
    892      module procedure mpp_recv_int4_3d
    893      module procedure mpp_recv_int4_4d
    894      module procedure mpp_recv_int4_5d
    895      module procedure mpp_recv_logical4
    896      module procedure mpp_recv_logical4_scalar
    897      module procedure mpp_recv_logical4_2d
    898      module procedure mpp_recv_logical4_3d
    899      module procedure mpp_recv_logical4_4d
    900      module procedure mpp_recv_logical4_5d
    901   end interface
    902   interface mpp_send
    903      module procedure mpp_send_real8
    904      module procedure mpp_send_real8_scalar
    905      module procedure mpp_send_real8_2d
    906      module procedure mpp_send_real8_3d
    907      module procedure mpp_send_real8_4d
    908      module procedure mpp_send_real8_5d
    909 # 970
    910 
    911      module procedure mpp_send_int8
    912      module procedure mpp_send_int8_scalar

Page 17          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    913      module procedure mpp_send_int8_2d
    914      module procedure mpp_send_int8_3d
    915      module procedure mpp_send_int8_4d
    916      module procedure mpp_send_int8_5d
    917      module procedure mpp_send_logical8
    918      module procedure mpp_send_logical8_scalar
    919      module procedure mpp_send_logical8_2d
    920      module procedure mpp_send_logical8_3d
    921      module procedure mpp_send_logical8_4d
    922      module procedure mpp_send_logical8_5d
    923 
    924      module procedure mpp_send_real4
    925      module procedure mpp_send_real4_scalar
    926      module procedure mpp_send_real4_2d
    927      module procedure mpp_send_real4_3d
    928      module procedure mpp_send_real4_4d
    929      module procedure mpp_send_real4_5d
    930 
    931 # 998
    932 
    933      module procedure mpp_send_int4
    934      module procedure mpp_send_int4_scalar
    935      module procedure mpp_send_int4_2d
    936      module procedure mpp_send_int4_3d
    937      module procedure mpp_send_int4_4d
    938      module procedure mpp_send_int4_5d
    939      module procedure mpp_send_logical4
    940      module procedure mpp_send_logical4_scalar
    941      module procedure mpp_send_logical4_2d
    942      module procedure mpp_send_logical4_3d
    943      module procedure mpp_send_logical4_4d
    944      module procedure mpp_send_logical4_5d
    945   end interface
    946 
    947 ! <INTERFACE NAME="mpp_broadcast">
    948 
    949 !   <OVERVIEW>
    950 !     Parallel broadcasts.
    951 !   </OVERVIEW>
    952 !   <DESCRIPTION>
    953 !     The <TT>mpp_broadcast</TT> call has been added because the original
    954 !     syntax (using <TT>ALL_PES</TT> in <TT>mpp_transmit</TT>) did not
    955 !     support a broadcast across a pelist.
    956 !
    957 !     <TT>MPP_TYPE_</TT> corresponds to any 4-byte and 8-byte variant of
    958 !     <TT>integer, real, complex, logical</TT> variables, of rank 0 or 1. A
    959 !     contiguous block from a multi-dimensional array may be passed by its
    960 !     starting address and its length, as in <TT>f77</TT>.
    961 !
    962 !     Global broadcasts through the <TT>ALL_PES</TT> argument to <LINK
    963 !     SRC="#mpp_transmit"><TT>mpp_transmit</TT></LINK> are still provided for
    964 !     backward-compatibility.
    965 !
    966 !     If <TT>pelist</TT> is omitted, the context is assumed to be the
    967 !     current pelist. <TT>from_pe</TT> must belong to the current
    968 !     pelist. This call implies synchronization across the PEs in
    969 !     <TT>pelist</TT>, or the current pelist if <TT>pelist</TT> is absent.

Page 18          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

    970 !   </DESCRIPTION>
    971 !   <TEMPLATE>
    972 !     call mpp_broadcast( data, length, from_pe, pelist )
    973 !   </TEMPLATE>
    974 !   <IN NAME="length"> </IN>
    975 !   <IN NAME="from_pe"> </IN>
    976 !   <IN NAME="pelist"> </IN>
    977 !   <INOUT NAME="data(*)"> </INOUT>
    978 ! </INTERFACE>
    979   interface mpp_broadcast
    980      module procedure mpp_broadcast_char
    981      module procedure mpp_broadcast_real8
    982      module procedure mpp_broadcast_real8_scalar
    983      module procedure mpp_broadcast_real8_2d
    984      module procedure mpp_broadcast_real8_3d
    985      module procedure mpp_broadcast_real8_4d
    986      module procedure mpp_broadcast_real8_5d
    987 # 1060
    988 
    989      module procedure mpp_broadcast_int8
    990      module procedure mpp_broadcast_int8_scalar
    991      module procedure mpp_broadcast_int8_2d
    992      module procedure mpp_broadcast_int8_3d
    993      module procedure mpp_broadcast_int8_4d
    994      module procedure mpp_broadcast_int8_5d
    995      module procedure mpp_broadcast_logical8
    996      module procedure mpp_broadcast_logical8_scalar
    997      module procedure mpp_broadcast_logical8_2d
    998      module procedure mpp_broadcast_logical8_3d
    999      module procedure mpp_broadcast_logical8_4d
   1000      module procedure mpp_broadcast_logical8_5d
   1001 
   1002      module procedure mpp_broadcast_real4
   1003      module procedure mpp_broadcast_real4_scalar
   1004      module procedure mpp_broadcast_real4_2d
   1005      module procedure mpp_broadcast_real4_3d
   1006      module procedure mpp_broadcast_real4_4d
   1007      module procedure mpp_broadcast_real4_5d
   1008 
   1009 # 1088
   1010 
   1011      module procedure mpp_broadcast_int4
   1012      module procedure mpp_broadcast_int4_scalar
   1013      module procedure mpp_broadcast_int4_2d
   1014      module procedure mpp_broadcast_int4_3d
   1015      module procedure mpp_broadcast_int4_4d
   1016      module procedure mpp_broadcast_int4_5d
   1017      module procedure mpp_broadcast_logical4
   1018      module procedure mpp_broadcast_logical4_scalar
   1019      module procedure mpp_broadcast_logical4_2d
   1020      module procedure mpp_broadcast_logical4_3d
   1021      module procedure mpp_broadcast_logical4_4d
   1022      module procedure mpp_broadcast_logical4_5d
   1023   end interface
   1024 
   1025 !#####################################################################
   1026 ! <INTERFACE NAME="mpp_chksum">

Page 19          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

   1027 
   1028 !   <OVERVIEW>
   1029 !     Parallel checksums.
   1030 !   </OVERVIEW>
   1031 !   <DESCRIPTION>
   1032 !     \empp_chksum is a parallel checksum routine that returns an
   1033 !     identical answer for the same array irrespective of how it has been
   1034 !     partitioned across processors. \eint_kind is the KIND
   1035 !     parameter corresponding to long integers (see discussion on
   1036 !     OS-dependent preprocessor directives) defined in
   1037 !     the file platform.F90. \eMPP_TYPE_ corresponds to any
   1038 !     4-byte and 8-byte variant of \einteger, \ereal, \ecomplex, \elogical
   1039 !     variables, of rank 0 to 5.
   1040 !
   1041 !     Integer checksums on FP data use the F90 <TT>TRANSFER()</TT>
   1042 !     intrinsic.
   1043 !
   1044 !     The <LINK SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/shared/chksum/chksum.html">serial checksum module</
   1044 LINK> is superseded
   1045 !     by this function, and is no longer being actively maintained. This
   1046 !     provides identical results on a single-processor job, and to perform
   1047 !     serial checksums on a single processor of a parallel job, you only
   1048 !     need to use the optional <TT>pelist</TT> argument.
   1049 !     <PRE>
   1050 !     use mpp_mod
   1051 !     integer :: pe, chksum
   1052 !     real :: a(:)
   1053 !     pe = mpp_pe()
   1054 !     chksum = mpp_chksum( a, (/pe/) )
   1055 !     </PRE>
   1056 !
   1057 !     The additional functionality of <TT>mpp_chksum</TT> over
   1058 !     serial checksums is to compute the checksum across the PEs in
   1059 !     <TT>pelist</TT>. The answer is guaranteed to be the same for
   1060 !     the same distributed array irrespective of how it has been
   1061 !     partitioned.
   1062 !
   1063 !     If <TT>pelist</TT> is omitted, the context is assumed to be the
   1064 !     current pelist. This call implies synchronization across the PEs in
   1065 !     <TT>pelist</TT>, or the current pelist if <TT>pelist</TT> is absent.
   1066 !   </DESCRIPTION>
   1067 !   <TEMPLATE>
   1068 !     mpp_chksum( var, pelist )
   1069 !   </TEMPLATE>
   1070 !   <IN NAME="pelist" TYPE="integer" DIM="(:)"> </IN>
   1071 !   <IN NAME="var" TYPE="MPP_TYPE_"> </IN>
   1072 ! </INTERFACE>
   1073   interface mpp_chksum
   1074      module procedure mpp_chksum_i8_1d
   1075      module procedure mpp_chksum_i8_2d
   1076      module procedure mpp_chksum_i8_3d
   1077      module procedure mpp_chksum_i8_4d
   1078      module procedure mpp_chksum_i8_5d
   1079      module procedure mpp_chksum_i8_1d_rmask
   1080      module procedure mpp_chksum_i8_2d_rmask
   1081      module procedure mpp_chksum_i8_3d_rmask
   1082      module procedure mpp_chksum_i8_4d_rmask

Page 20          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

   1083      module procedure mpp_chksum_i8_5d_rmask
   1084 
   1085      module procedure mpp_chksum_i4_1d
   1086      module procedure mpp_chksum_i4_2d
   1087      module procedure mpp_chksum_i4_3d
   1088      module procedure mpp_chksum_i4_4d
   1089      module procedure mpp_chksum_i4_5d
   1090      module procedure mpp_chksum_i4_1d_rmask
   1091      module procedure mpp_chksum_i4_2d_rmask
   1092      module procedure mpp_chksum_i4_3d_rmask
   1093      module procedure mpp_chksum_i4_4d_rmask
   1094      module procedure mpp_chksum_i4_5d_rmask
   1095 
   1096      module procedure mpp_chksum_r8_0d
   1097      module procedure mpp_chksum_r8_1d
   1098      module procedure mpp_chksum_r8_2d
   1099      module procedure mpp_chksum_r8_3d
   1100      module procedure mpp_chksum_r8_4d
   1101      module procedure mpp_chksum_r8_5d
   1102 
   1103      module procedure mpp_chksum_r4_0d
   1104      module procedure mpp_chksum_r4_1d
   1105      module procedure mpp_chksum_r4_2d
   1106      module procedure mpp_chksum_r4_3d
   1107      module procedure mpp_chksum_r4_4d
   1108      module procedure mpp_chksum_r4_5d
   1109 # 1194
   1110 
   1111 # 1202
   1112 
   1113   end interface
   1114 
   1115 !***********************************************************************
   1116 !
   1117 !            module variables
   1118 !
   1119 !***********************************************************************
   1120   integer, parameter   :: PESET_MAX = 10000
   1121   integer              :: current_peset_max = 32
   1122   type(communicator), allocatable :: peset(:) ! Will be allocated starting from 0, 0 is a dummy used to hold single-PE "self
   1122 " communicator
   1123   logical              :: module_is_initialized = .false.
   1124   logical              :: debug = .false.
   1125   integer              :: npes=1, root_pe=0, pe=0
   1126   integer(i8_kind)     :: tick, ticks_per_sec, max_ticks, start_tick, end_tick, tick0=0
   1127   integer              :: mpp_comm_private
   1128   logical              :: first_call_system_clock_mpi=.TRUE.
   1129   real(r8_kind)        :: mpi_count0=0  ! use to prevent integer overflow
   1130   real(r8_kind)        :: mpi_tick_rate=0.d0  ! clock rate for mpi_wtick()
   1131   logical              :: mpp_record_timing_data=.TRUE.
   1132   type(clock),save     :: clocks(MAX_CLOCKS)
   1133   integer              :: log_unit, etc_unit
   1134   character(len=32)    :: configfile='logfile'
   1135   integer              :: peset_num=0, current_peset_num=0
   1136   integer              :: world_peset_num                  !the world communicator
   1137   integer              :: error
   1138   integer              :: clock_num=0, num_clock_ids=0,current_clock=0, previous_clock(MAX_CLOCKS)=0

Page 21          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

   1139   real                 :: tick_rate
   1140 
   1141   type(mpp_type_list)    :: datatypes
   1142   type(mpp_type), target :: mpp_byte
   1143 
   1144   integer              :: cur_send_request = 0
   1145   integer              :: cur_recv_request = 0
   1146   integer, allocatable :: request_send(:)
   1147   integer, allocatable :: request_recv(:)
   1148   integer, allocatable :: size_recv(:)
   1149   integer, allocatable :: type_recv(:)
   1150 ! if you want to save the non-root PE information uncomment out the following line
   1151 ! and comment out the assigment of etcfile to '/dev/null'
   1152 # 1244
   1153 
   1154   character(len=32)    :: etcfile='/dev/null'
   1155 
   1156 
   1157 !> Use the intrinsics in iso_fortran_env
   1158   integer :: in_unit=INPUT_UNIT, out_unit=OUTPUT_UNIT, err_unit=ERROR_UNIT
   1159   integer :: stdout_unit
   1160 
   1161 !--- variables used in mpp_util.h
   1162   type(Summary_Struct) :: clock_summary(MAX_CLOCKS)
   1163   logical              :: warnings_are_fatal = .FALSE.
   1164   integer              :: error_state=0
   1165   integer              :: clock_grain=CLOCK_LOOP-1
   1166 
   1167 !--- variables used in mpp_comm.h
   1168   integer            :: clock0    !measures total runtime from mpp_init to mpp_exit
   1169   integer            :: mpp_stack_size=0, mpp_stack_hwm=0
   1170   logical            :: verbose=.FALSE.
   1171 
   1172   integer :: get_len_nocomm = 0 ! needed for mpp_transmit_nocomm.h
   1173 
   1174 !--- variables used in mpp_comm_mpi.inc
   1175   integer, parameter :: mpp_init_test_full_init = -1
   1176   integer, parameter :: mpp_init_test_init_true_only = 0
   1177   integer, parameter :: mpp_init_test_peset_allocated = 1
   1178   integer, parameter :: mpp_init_test_clocks_init = 2
   1179   integer, parameter :: mpp_init_test_datatype_list_init = 3
   1180   integer, parameter :: mpp_init_test_logfile_init = 4
   1181   integer, parameter :: mpp_init_test_read_namelist = 5
   1182   integer, parameter :: mpp_init_test_etc_unit = 6
   1183   integer, parameter :: mpp_init_test_requests_allocated = 7
   1184 
   1185 
   1186 !***********************************************************************
   1187 !  variables needed for subroutine read_input_nml (include/mpp_util.inc)
   1188 !
   1189 ! parameter defining length of character variables
   1190   integer, parameter :: INPUT_STR_LENGTH = 256
   1191 ! public variable needed for reading input.nml from an internal file
   1192   character(len=:), dimension(:), allocatable, target, public :: input_nml_file
   1193   logical :: read_ascii_file_on = .FALSE.
   1194 !***********************************************************************
   1195 

Page 22          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 mpp.F90

   1196 ! Include variable "version" to be written to log file.
   1197 # 1 "../include/file_version.h" 1 
   1198 ! -*-f90-*-
   1199 !***********************************************************************
   1200 !*                   GNU Lesser General Public License
   1201 !*
   1202 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1203 !*
   1204 !* FMS is free software: you can redistribute it and/or modify it under
   1205 !* the terms of the GNU Lesser General Public License as published by
   1206 !* the Free Software Foundation, either version 3 of the License, or (at
   1207 !* your option) any later version.
   1208 !*
   1209 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1210 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1211 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1212 !* for more details.
   1213 !*
   1214 !* You should have received a copy of the GNU Lesser General Public
   1215 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1216 !***********************************************************************
   1217 
   1218 # 23
   1219 
   1220   character(len=*), parameter :: version = 'unknown'
   1221 
   1222 # 1289 "mpp.F90" 2 
   1223   public version
   1224 
   1225   integer, parameter :: MAX_REQUEST_MIN  = 10000
   1226   integer            :: request_multiply = 20
   1227 
   1228   logical :: etc_unit_is_stderr = .false.
   1229   integer :: max_request = 0
   1230   logical :: sync_all_clocks = .false.
   1231   namelist /mpp_nml/ etc_unit_is_stderr, request_multiply, mpp_record_timing_data, sync_all_clocks
   1232 
   1233   contains
   1234 # 1 "../mpp/include/system_clock.h" 1 
   1235 !***********************************************************************
   1236 !*                   GNU Lesser General Public License
   1237 !*
   1238 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1239 !*
   1240 !* FMS is free software: you can redistribute it and/or modify it under
   1241 !* the terms of the GNU Lesser General Public License as published by
   1242 !* the Free Software Foundation, either version 3 of the License, or (at
   1243 !* your option) any later version.
   1244 !*
   1245 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1246 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1247 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1248 !* for more details.
   1249 !*
   1250 !* You should have received a copy of the GNU Lesser General Public
   1251 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1252 !***********************************************************************

Page 23          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 ../mpp/include/system_clock.h

   1253 
   1254 
   1255 
   1256 !#######################################################################
   1257 subroutine system_clock_mpi( count, count_rate, count_max )
   1258 ! There can be one ONE baseline count0 and this routine is
   1259 ! included in multiple places.
   1260 !mimics F90 system_clock_mpi intrinsic
   1261       integer(i8_kind), intent(out), optional :: count, count_rate, count_max
   1262 !count must return a number between 0 and count_max
   1263       integer(i8_kind), parameter :: maxtick=HUGE(count_max)
   1264       if(first_call_system_clock_mpi)then
   1265          first_call_system_clock_mpi=.false.
   1266          mpi_count0 = MPI_WTime()
   1267          mpi_tick_rate = 1.d0/MPI_WTick()
   1268       endif
   1269       if( PRESENT(count) )then
   1270           count = (MPI_WTime()-mpi_count0)*mpi_tick_rate
   1271       end if
   1272       if( PRESENT(count_rate) )then
   1273           count_rate = mpi_tick_rate
   1274       end if
   1275       if( PRESENT(count_max) )then
   1276           count_max = maxtick-1
   1277       end if
   1278       return
   1279     end subroutine system_clock_mpi


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_system_clock_mpi_             

Page 24          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51 Symbol Table                    ../mpp/include/system_clock.h



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COUNT                      Dummy  1257     I(8)            8           scalar   ARG,OUT          1269,1270                         
 COUNT_MAX                  Dummy  1257     I(8)            8           scalar   ARG,OUT          1263,1275,1276                    
 COUNT_RATE                 Dummy  1257     I(8)            8           scalar   ARG,OUT          1272,1273                         
 FIRST_CALL_SYSTEM_CLOCK_MP                                                                                                         
 I                          Local  1264     L(4)            4           scalar                    1128,1264,1265                    
 HUGE                       Func   1263                                 scalar                    1263                              
 I8_KIND                    Param  1261     I(4)            4           scalar   PRIV             246,254,255,256,272,273,1126,1261,
                                                                                                  1263,2853,2905,5409,5410,5416,5533
                                                                                                  ,5595,5596,5602,5619,5620,5624,563
                                                                                                  9,5640,5644,5659,5660,5664,5679,56
                                                                                                  80,5684,5704,5709,5716,5719,5726,5
                                                                                                  733,5734,5746,5751,5752,5764,5769,
                                                                                                  5776,5779,5786,5791,5798,5801,5808
                                                                                                  ,5813,5820,5823,5830,5835,5842,584
                                                                                                  5,5856,5859,5873,5876,5889,5892,59
                                                                                                  05,5908,5921,5924,7995,7998,8014,8
                                                                                                  018,8287,8290,8306,8310,8767,8769,
                                                                                                  8813,8815,8826,8829,8840,8843,8854
                                                                                                  ,8857,8868,8871,9417,9461,9463,947
                                                                                                  4,9477,9488,9491,9502,9505,9516,95
                                                                                                  19,9862,9863,9889,9890,9920,9921,1
                                                                                                  0897,11713,11714,11716,11722,11724
                                                                                                  ,11736,11737,11743,11831,11832,118
                                                                                                  34,11840,11842,11854,11855,11861,1
                                                                                                  1949,11950,11952,11958,11960,11972
                                                                                                  ,11973,11979,12067,12068,12070,120
                                                                                                  76,12078,12090,12091,12097,12185,1
                                                                                                  2186,12188,12194,12196,12208,12209
                                                                                                  ,12215,12303,12312,12314,12326,123
                                                                                                  33,12421,12430,12432,12444,12451,1
                                                                                                  2539,12548,12550,12562,12569,12657
                                                                                                  ,12666,12668,12680,12687,12775,127
                                                                                                  84,12786,12798,12805,12895,12898,1
                                                                                                  2946,12947,12996,12997,13046,13047
                                                                                                  ,13096,13097,13146,13147,13199,132
                                                                                                  02,13250,13300,13350,13400,13450  
 MAXTICK                    Param  1263     I(8)            8           scalar                    1276                              
 MPI_COUNT0                 Local  1266     R(8)            8           scalar                    1129,1266,1270                    
 MPI_TICK_RATE              Local  1267     R(8)            8           scalar                    1130,1267,1270,1273               
 MPI_WTICK                  Func   1267     R(8)            8           scalar   PRIV             1267                              
 MPI_WTIME                  Func   1266     R(8)            8           scalar   PRIV             1266,1270                         
 PRESENT                    Func   1269                                 scalar                    1269,1272,1275                    
 SYSTEM_CLOCK_MPI           Subr   1257                                                           1460,1481,2843,2864,2912,3745,4030
                                                                                                  ,4040,4171,4182,4221,4250,4260,428
                                                                                                  6,4294,4799,4810,4849,4878,4888,49
                                                                                                  14,4922,5427,5438,5477,5506,5516,5
                                                                                                  542,5550,6052,6063,6102,6131,6141,
                                                                                                  6167,6175,6677,6688,6727,6756,6766
                                                                                                  ,6792,6800,7302,7313,7352,7381,739
                                                                                                  1,7417,7425,7857,7877,7930,7950,80
                                                                                                  03,8023,8076,8096,8149,8169,8222,8

Page 25          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51 Symbol Table                    ../mpp/include/system_clock.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  242,8295,8315,8368,8388,8450,8612,
                                                                                                  8774,8933,9095,9259,9423,9584,9742
                                                                                                  ,9772,9804,9874,9904,9936,10006,10
                                                                                                  036,10068,10138,10168,10200,10270,
                                                                                                  10300,10332,10402,10432,10464,1053
                                                                                                  4,10564,10596,10666,10696,10728,10
                                                                                                  799,10909,11019,11129,11239,11349,
                                                                                                  11459,11569,11652                 

Page 26          Source Listing                  SYSTEM_CLOCK_MPI
2021-06-01 08:51                                 ../mpp/include/system_clock.h

   1280 
   1281 # 60
   1282 
   1283 # 1301 "mpp.F90" 2 
   1284 # 1 "../mpp/include/mpp_util.inc" 1 
   1285 ! -*-f90-*-
   1286 
   1287 
   1288 !***********************************************************************
   1289 !*                   GNU Lesser General Public License
   1290 !*
   1291 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1292 !*
   1293 !* FMS is free software: you can redistribute it and/or modify it under
   1294 !* the terms of the GNU Lesser General Public License as published by
   1295 !* the Free Software Foundation, either version 3 of the License, or (at
   1296 !* your option) any later version.
   1297 !*
   1298 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1299 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1300 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1301 !* for more details.
   1302 !*
   1303 !* You should have received a copy of the GNU Lesser General Public
   1304 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1305 !***********************************************************************
   1306 
   1307 
   1308 # 1 "../mpp/include/mpp_util_mpi.inc" 1 
   1309 ! -*-f90-*-
   1310 
   1311 !***********************************************************************
   1312 !*                   GNU Lesser General Public License
   1313 !*
   1314 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1315 !*
   1316 !* FMS is free software: you can redistribute it and/or modify it under
   1317 !* the terms of the GNU Lesser General Public License as published by
   1318 !* the Free Software Foundation, either version 3 of the License, or (at
   1319 !* your option) any later version.
   1320 !*
   1321 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1322 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1323 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1324 !* for more details.
   1325 !*
   1326 !* You should have received a copy of the GNU Lesser General Public
   1327 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1328 !***********************************************************************
   1329 
   1330 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   1331 !                                                                             !
   1332 !         MISCELLANEOUS UTILITIES: mpp_error                                  !
   1333 !                                                                             !
   1334 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   1335 
   1336 subroutine mpp_error_basic( errortype, errormsg )

Page 27          Source Listing                  MPP_ERROR_BASIC
2021-06-01 08:51                                 ../mpp/include/mpp_util_mpi.inc

   1337 !a very basic error handler
   1338 !uses ABORT and FLUSH calls, may need to use cpp to rename
   1339 
   1340 ! Intel module containing tracebackQQ
   1341    use ifcore
   1342 
   1343   integer,                    intent(in) :: errortype
   1344   character(len=*), intent(in), optional :: errormsg
   1345   character(len=512)                     :: text
   1346   logical                                :: opened
   1347   integer                                :: istat, errunit
   1348 
   1349   if( .NOT.module_is_initialized )call ABORT()
   1350 
   1351   select case( errortype )
   1352   case(NOTE)
   1353      text = 'NOTE'         !just FYI
   1354   case(WARNING)
   1355      text = 'WARNING'      !probable error
   1356   case(FATAL)
   1357      text = 'FATAL'        !fatal error
   1358   case default
   1359      text = 'WARNING: non-existent errortype (must be NOTE|WARNING|FATAL)'
   1360   end select
   1361 
   1362   if( npes.GT.1 )write( text,'(a,i6)' )trim(text)//' from PE', pe   !this is the mpp part
   1363   if( PRESENT(errormsg) )text = trim(text)//': '//trim(errormsg)
   1364 !$OMP CRITICAL (MPP_ERROR_CRITICAL)
   1365   select case( errortype )
   1366   case(NOTE)
   1367      if(pe==root_pe)write( out_unit,'(a)' )trim(text)
   1368   case default
   1369      errunit = stderr()
   1370      write( errunit, '(/a/)' )trim(text)
   1371      if(pe==root_pe)write( out_unit,'(/a/)' )trim(text)
   1372      if( errortype.EQ.FATAL .OR. warnings_are_fatal )then
   1373         FLUSH(out_unit)
   1374 
   1375 ! Get traceback and return quietly for correct abort
   1376         call TRACEBACKQQ(user_exit_code=-1)
   1377 # 71
   1378 
   1379         call MPI_ABORT( MPI_COMM_WORLD, 1, error )
   1380      end if
   1381   end select
   1382 
   1383   error_state = errortype
   1384 !$OMP END CRITICAL (MPP_ERROR_CRITICAL)
   1385 
   1386 
   1387 end subroutine mpp_error_basic

Page 28          Source Listing                  MPP_ERROR_BASIC
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_util_mpi.inc



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_basic_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABORT                      Subr   1349                                                           1349                              
 ERROR                      Local  1379     I(4)            4           scalar                    1379,1437,1439,1461,1508,1509,1516
                                                                                                  ,1523,1528,1529,1631,3706,3709,371
                                                                                                  4,3715,3739,3989,4049,4189,4195,42
                                                                                                  23,4224,4236,4242,4251,4302,4817,4
                                                                                                  823,4851,4852,4864,4870,4879,4930,
                                                                                                  5445,5451,5479,5480,5492,5498,5507
                                                                                                  ,5558,6070,6076,6104,6105,6117,612
                                                                                                  3,6132,6183,6695,6701,6729,6730,67
                                                                                                  42,6748,6757,6808,7320,7326,7354,7
                                                                                                  355,7367,7373,7382,7433,7859,7879,
                                                                                                  7932,7952,8005,8025,8078,8098,8151
                                                                                                  ,8171,8224,8244,8297,8317,8370,839
                                                                                                  0,8456,8618,8780,8939,9748,9778,98
                                                                                                  19,9880,9910,9951,10012,10042,1008
                                                                                                  3,10144,10174,10215,10276,10306,10
                                                                                                  347,10408,10438,10479,10540,10570,
                                                                                                  10611,10672,10702,10743,10833,1083
                                                                                                  7,10943,10947,11053,11057,11163,11
                                                                                                  167,11273,11277,11383,11387,11493,
                                                                                                  11497,11603,11607,11662           
 ERRORMSG                   Dummy  1336     CHAR                        scalar   ARG,IN           1363                              
 ERRORTYPE                  Dummy  1336     I(4)            4           scalar   ARG,IN           1351,1365,1372,1383               
 ERROR_STATE                Local  1383     I(4)            4           scalar                    1164,1383,1695                    
 ERRUNIT                    Local  1347     I(4)            4           scalar                    1369,1370                         
 FATAL                      Param  1356     I(4)            4           scalar                    169,194,1356,1372,1409,1485,1490,1
                                                                                                  494,1497,1500,1503,1511,1531,1657,
                                                                                                  1658,1684,1687,1712,2426,2447,2456
                                                                                                  ,2466,2468,2519,2562,2564,2592,271
                                                                                                  7,2781,2803,2820,2823,2827,2828,28
                                                                                                  39,2856,2859,2861,2866,2910,3079,3
                                                                                                  173,3339,3383,3400,3409,3414,3422,
                                                                                                  3448,3466,3475,3480,3489,3565,3588
                                                                                                  ,3597,3609,3612,3617,3623,3631,370
                                                                                                  7,3784,3799,4025,4038,4164,4192,41
                                                                                                  99,4200,4213,4215,4227,4239,4254,4
                                                                                                  256,4282,4292,4792,4820,4827,4828,
                                                                                                  4841,4843,4855,4867,4882,4884,4910
                                                                                                  ,4920,5420,5448,5455,5456,5469,547
                                                                                                  1,5483,5495,5510,5512,5538,5548,60
                                                                                                  45,6073,6080,6081,6094,6096,6108,6
                                                                                                  120,6135,6137,6163,6173,6670,6698,
                                                                                                  6705,6706,6719,6721,6733,6745,6760
                                                                                                  ,6762,6788,6798,7295,7323,7330,733

Page 29          Source Listing                  MPP_ERROR_BASIC
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util_mpi.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  1,7344,7346,7358,7370,7385,7387,74
                                                                                                  13,7423,7854,7874,7927,7947,8000,8
                                                                                                  020,8073,8093,8146,8166,8219,8239,
                                                                                                  8292,8312,8365,8385,8447,8609,8771
                                                                                                  ,8930,9092,9256,9420,9581,9738,976
                                                                                                  8,9800,9870,9900,9932,10002,10032,
                                                                                                  10064,10134,10164,10196,10266,1029
                                                                                                  6,10328,10398,10428,10460,10530,10
                                                                                                  560,10592,10662,10692,10724,10796,
                                                                                                  10906,11016,11126,11236,11346,1145
                                                                                                  6,11566,11649,13525,13634,13642,13
                                                                                                  646,13678,13782,13891,13899,13903,
                                                                                                  13935,14039,14148,14156,14160,1419
                                                                                                  2,14296,14405,14413,14417,14449,14
                                                                                                  591,14599,14603,14634,14770,14778,
                                                                                                  14782,14813,14949,14957,14961,1499
                                                                                                  2                                 
 IFCORE                     Module 1341                                                           1341                              
 ISTAT                      Local  1347     I(4)            4           scalar                                                      
 MODULE_IS_INITIALIZED      Local  1349     L(4)            4           scalar                    1123,1349,2426,2447,2456,2466,2519
                                                                                                  ,2562,2717,2781,2820,2856,3704,371
                                                                                                  7,3891,4025,4164,4282,4792,4910,54
                                                                                                  20,5538,6045,6163,6670,6788,7295,7
                                                                                                  413,7854,7874,7927,7947,8000,8020,
                                                                                                  8073,8093,8146,8166,8219,8239,8292
                                                                                                  ,8312,8365,8385,8447,8609,8771,893
                                                                                                  0,9092,9256,9420,9581,9737,9767,97
                                                                                                  99,9869,9899,9931,10001,10031,1006
                                                                                                  3,10133,10163,10195,10265,10295,10
                                                                                                  327,10397,10427,10459,10529,10559,
                                                                                                  10591,10661,10691,10723,10795,1090
                                                                                                  5,11015,11125,11235,11345,11455,11
                                                                                                  565,11648                         
 MPI_ABORT                  Subr   1379                                          PRIV             1379,1631                         
 MPI_COMM_WORLD             Param  1379     I(4)            4           scalar   PRIV             1379,1631,3710,3989               
 MPP_ERROR_BASIC            Subr   1336                                          PRIV             1409,1485,1490,1494,1497,1500,1503
                                                                                                  ,1511,1531,1657,1658,1687,1706,171
                                                                                                  2,1741,1755,1793,1834,1875,1916,24
                                                                                                  26,2447,2456,2466,2468,2519,2562,2
                                                                                                  564,2592,2717,2781,2803,2820,2823,
                                                                                                  2827,2828,2839,2856,2859,2861,2866
                                                                                                  ,2872,2876,2910,2915,2926,3079,317
                                                                                                  3,3339,3383,3400,3409,3414,3422,34
                                                                                                  48,3466,3475,3480,3489,3565,3588,3
                                                                                                  597,3609,3612,3617,3623,3631,3707,
                                                                                                  3784,3788,3799,3862,4007,4025,4038
                                                                                                  ,4164,4192,4199,4200,4213,4215,422
                                                                                                  7,4239,4254,4256,4282,4292,4792,48
                                                                                                  20,4827,4828,4841,4843,4855,4867,4
                                                                                                  882,4884,4910,4920,5420,5448,5455,
                                                                                                  5456,5469,5471,5483,5495,5510,5512
                                                                                                  ,5538,5548,6045,6073,6080,6081,609
                                                                                                  4,6096,6108,6120,6135,6137,6163,61
                                                                                                  73,6670,6698,6705,6706,6719,6721,6
                                                                                                  733,6745,6760,6762,6788,6798,7295,

Page 30          Source Listing                  MPP_ERROR_BASIC
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util_mpi.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7323,7330,7331,7344,7346,7358,7370
                                                                                                  ,7385,7387,7413,7423,7854,7858,787
                                                                                                  4,7878,7927,7931,7947,7951,8000,80
                                                                                                  04,8020,8024,8073,8077,8093,8097,8
                                                                                                  146,8150,8166,8170,8219,8223,8239,
                                                                                                  8243,8292,8296,8312,8316,8365,8369
                                                                                                  ,8385,8389,8447,8451,8494,8609,861
                                                                                                  3,8656,8771,8775,8818,8930,8934,89
                                                                                                  77,9092,9096,9138,9256,9260,9302,9
                                                                                                  420,9424,9466,9581,9585,9627,9738,
                                                                                                  9744,9768,9774,9800,9806,9870,9876
                                                                                                  ,9900,9906,9932,9938,10002,10008,1
                                                                                                  0032,10038,10064,10070,10134,10140
                                                                                                  ,10164,10170,10196,10202,10266,102
                                                                                                  72,10296,10302,10328,10334,10398,1
                                                                                                  0404,10428,10434,10460,10466,10530
                                                                                                  ,10536,10560,10566,10592,10598,106
                                                                                                  62,10668,10692,10698,10724,10730,1
                                                                                                  0796,10802,10906,10912,11016,11022
                                                                                                  ,11126,11132,11236,11242,11346,113
                                                                                                  52,11456,11462,11566,11572,11649,1
                                                                                                  1655,11789,11907,12025,12143,12261
                                                                                                  ,12379,12497,12615,12733,12851,135
                                                                                                  25,13634,13642,13646,13678,13782,1
                                                                                                  3891,13899,13903,13935,14039,14148
                                                                                                  ,14156,14160,14192,14296,14405,144
                                                                                                  13,14417,14449,14591,14599,14603,1
                                                                                                  4634,14770,14778,14782,14813,14949
                                                                                                  ,14957,14961,14992                
 MPP_ERROR_CRITICAL         Global 1364                                 scalar                    1384                              
 NOTE                       Param  1352     I(4)            4           scalar                    169,194,1352,1366,2876,3219,3788,3
                                                                                                  862,4007,7858,7878,7931,7951,8004,
                                                                                                  8024,8077,8097,8150,8170,8223,8243
                                                                                                  ,8296,8316,8369,8389,8451,8494,861
                                                                                                  3,8656,8775,8818,8934,8977,9096,91
                                                                                                  38,9260,9302,9424,9466,9585,9627,9
                                                                                                  744,9774,9806,9876,9906,9938,10008
                                                                                                  ,10038,10070,10140,10170,10202,102
                                                                                                  72,10302,10334,10404,10434,10466,1
                                                                                                  0536,10566,10598,10668,10698,10730
                                                                                                  ,10802,10912,11022,11132,11242,113
                                                                                                  52,11462,11572,11655              
 NPES                       Local  1362     I(4)            4           scalar                    1125,1362,1668,3715,3740,3865,3906
                                                                                                  ,4180,4199,4219,4808,4827,4847,543
                                                                                                  6,5455,5475,6061,6080,6100,6686,67
                                                                                                  05,6725,7311,7330,7350            
 OPENED                     Local  1346     L(4)            4           scalar                                                      
 OUT_UNIT                   Local  1367     I(4)            4           scalar                    1158,1367,1371,1373,1577          
 PE                         Local  1362     I(4)            4           scalar                    1125,1362,1367,1371,1420,1578,1637
                                                                                                  ,1638,1666,2427,2564,2870,2924,296
                                                                                                  7,2976,3357,3391,3457,3573,3714,37
                                                                                                  36,3801,3863,3905,3916,3926,3933,3
                                                                                                  939,3959,3988,4007,4033,4173,4201,
                                                                                                  4262,4288,4801,4829,4890,4916,5429
                                                                                                  ,5457,5518,5544,6054,6082,6143,616

Page 31          Source Listing                  MPP_ERROR_BASIC
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util_mpi.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  9,6679,6707,6768,6794,7304,7332,73
                                                                                                  93,7419,8454,8616,8778,8937,9099,9
                                                                                                  263,9427,9588,13529,13568,13786,13
                                                                                                  825,14043,14082,14300,14339       
 PRESENT                    Func   1363                                 scalar                    1363                              
 ROOT_PE                    Local  1367     I(4)            4           scalar                    1125,1367,1371,1578,1637,1666,2457
                                                                                                  ,2487,3357,3388,3391,3453,3457,357
                                                                                                  0,3573,3863,3905,3926,3933,3959,39
                                                                                                  88,4007,13520,13562,13777,13819,14
                                                                                                  034,14076,14291,14333             
 STDERR                     Func   1369     I(4)            4           scalar                    212,1369,1415,1596,1628,2869,2922,
                                                                                                  3794,8453,8615,8777,8936,9098,9262
                                                                                                  ,9426,9587                        
 STDERR@0                   Local  1369     I(4)            4           scalar                                                      
 TEXT                       Local  1345     CHAR            512         scalar                    1353,1355,1357,1359,1362,1363,1367
                                                                                                  ,1370,1371                        
 TRACEBACKQQ                Subr   1376                                                           1376                              
 TRIM                       Func   1362                                 scalar                    1362,1363,1367,1370,1371          
 WARNING                    Param  1354     I(4)            4           scalar                    169,194,1354,1682,2872,2915,2926,1
                                                                                                  1789,11907,12025,12143,12261,12379
                                                                                                  ,12497,12615,12733,12851          
 WARNINGS_ARE_FATAL         Local  1372     L(4)            4           scalar                    1163,1372,1683,1685               

Page 32          Source Listing                  MPP_ERROR_BASIC
2021-06-01 08:51                                 ../mpp/include/mpp_util_mpi.inc

   1388 
   1389 !#####################################################################
   1390 !--- makes a PE set out of a PE list. A PE list is an ordered list of PEs
   1391 !--- a PE set is a triad (start,log2stride,size) for SHMEM, an a communicator for MPI
   1392 !--- if stride is non-uniform or not a power of 2,
   1393 !--- will return error (not required for MPI but enforced for uniformity)
   1394 function get_peset(pelist)
   1395   integer                       :: get_peset
   1396   integer, intent(in), optional :: pelist(:)
   1397   integer                       :: group, errunit
   1398   integer                       :: i, n, stride, l
   1399   integer,          allocatable :: sorted(:)
   1400   character(len=128) :: text
   1401 
   1402   if( .NOT.PRESENT(pelist) )then !set it to current_peset_num
   1403      get_peset = current_peset_num; return
   1404   end if
   1405 
   1406 !--- first make sure pelist is monotonically increasing.
   1407   if (size(pelist(:)) .GT. 1) then
   1408     do n = 2, size(pelist(:))
   1409        if(pelist(n) <= pelist(n-1)) call mpp_error(FATAL, "GET_PESET: pelist is not monotonically increasing")
   1410     enddo
   1411   endif
   1412 
   1413   allocate( sorted(size(pelist(:))) )
   1414   sorted = pelist
   1415   errunit = stderr()
   1416   if( debug )write( errunit,* )'pelist=', pelist
   1417 
   1418 !find if this array matches any existing peset
   1419   do i = 1,peset_num
   1420      if( debug )write( errunit,'(a,3i6)' )'pe, i, peset_num=', pe, i, peset_num
   1421      if( size(sorted(:)).EQ.size(peset(i)%list(:)) )then
   1422         if( ALL(sorted.EQ.peset(i)%list) )then
   1423            deallocate(sorted)
   1424            get_peset = i; return
   1425         end if
   1426      end if
   1427   end do
   1428 !not found, so create new peset
   1429   peset_num = peset_num + 1
   1430   if( peset_num > current_peset_max ) call expand_peset()
   1431   i = peset_num             !shorthand
   1432 !create list
   1433   allocate( peset(i)%list(size(sorted(:))) )
   1434   peset(i)%list(:) = sorted(:)
   1435   peset(i)%count = size(sorted(:))
   1436 
   1437   call MPI_GROUP_INCL( peset(current_peset_num)%group, size(sorted(:)), sorted-mpp_root_pe(), peset(i)%group, error )
   1438   call MPI_COMM_CREATE_GROUP(peset(current_peset_num)%id, peset(i)%group, &
   1439                              DEFAULT_TAG, peset(i)%id, error )
   1440   deallocate(sorted)
   1441   get_peset = i
   1442 
   1443   return
   1444 

Page 33          Source Listing                  GET_PESET
2021-06-01 08:51                                 ../mpp/include/mpp_util_mpi.inc

   1445 end function get_peset


ENTRY POINTS

  Name                             
                                   
 mpp_mod_mp_get_peset_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALL                        Func   1422                                 scalar                    1422                              
 CURRENT_PESET_MAX          Local  1430     I(4)            4           scalar                    1121,1430,3172,3195,3196,3219,3726
 CURRENT_PESET_NUM          Local  1403     I(4)            4           scalar                    1135,1403,1437,1438,2448,2467,2565
                                                                                                  ,2567,2569,2578,2580,2591,2593,259
                                                                                                  4,2596,2736,2826,2865,3327,3737,37
                                                                                                  41,4037,4291,4919,5547,6172,6797,7
                                                                                                  422                               
 DEBUG                      Local  1416     L(4)            4           scalar                    1124,1416,1420,1460,1463,1481,1538
                                                                                                  ,2837,2875,2909,3768,3769,4029,404
                                                                                                  0,4050,4170,4182,4197,4221,4247,42
                                                                                                  50,4252,4259,4285,4294,4303,4798,4
                                                                                                  810,4825,4849,4875,4878,4880,4887,
                                                                                                  4913,4922,4931,5426,5438,5453,5477
                                                                                                  ,5503,5506,5508,5515,5541,5550,555
                                                                                                  9,6051,6063,6078,6102,6128,6131,61
                                                                                                  33,6140,6166,6175,6184,6676,6688,6
                                                                                                  703,6727,6753,6756,6758,6765,6791,
                                                                                                  6800,6809,7301,7313,7328,7352,7378
                                                                                                  ,7381,7383,7390,7416,7425,7434,785
                                                                                                  7,7861,7877,7881,7930,7934,7950,79
                                                                                                  54,8003,8007,8023,8027,8076,8080,8
                                                                                                  096,8100,8149,8153,8169,8173,8222,
                                                                                                  8226,8242,8246,8295,8299,8315,8319
                                                                                                  ,8368,8372,8388,8392,8450,8452,845
                                                                                                  8,8494,8612,8614,8620,8656,8774,87
                                                                                                  76,8782,8818,8933,8935,8941,8977,9
                                                                                                  095,9097,9102,9138,9259,9261,9266,
                                                                                                  9302,9423,9425,9430,9466,9584,9586
                                                                                                  ,9591,9627                        
 DEFAULT_TAG                Local  1439     I(4)            4           scalar   PRIV             178,1439,4176,4804,5432,6057,6682,
                                                                                                  7307                              
 ERRUNIT                    Local  1397     I(4)            4           scalar                    1415,1416,1420                    
 GET_PESET                  Func   1394     I(4)            4           scalar                    1403,1424,1441,1458,2520,2565,3740
                                                                                                  ,4026,4283,4911,5539,6164,6789,741
                                                                                                  4,7855,7875,7928,7948,8001,8021,80
                                                                                                  74,8094,8147,8167,8220,8240,8293,8
                                                                                                  313,8366,8386,8448,8610,8772,8931,
                                                                                                  9093,9257,9421,9582,9740,9770,9802
                                                                                                  ,9872,9902,9934,10004,10034,10066,
                                                                                                  10136,10166,10198,10268,10298,1033
                                                                                                  0,10400,10430,10462,10532,10562,10
                                                                                                  594,10664,10694,10726             
 GROUP                      Local  1397     I(4)            4           scalar                                                      

Page 34          Source Listing                  GET_PESET
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util_mpi.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  1398     I(4)            4           scalar                    1419,1420,1421,1422,1424,1431,1433
                                                                                                  ,1434,1435,1437,1438,1439,1441    
 L                          Local  1398     I(4)            4           scalar                                                      
 MPI_COMM_CREATE_GROUP      Subr   1438                                          PRIV             1438                              
 MPI_GROUP_INCL             Subr   1437                                          PRIV             1437                              
 MPP_ERROR                  Local  1409                                 scalar                    212,1409,1485,1490,1494,1497,1500,
                                                                                                  1503,1511,1531,1657,1658,1687,1706
                                                                                                  ,1712,1721,1729,1953,1990,2027,206
                                                                                                  4,2101,2138,2175,2212,2249,2286,23
                                                                                                  23,2360,2426,2447,2456,2466,2468,2
                                                                                                  519,2562,2564,2592,2717,2781,2803,
                                                                                                  2820,2823,2827,2828,2839,2856,2859
                                                                                                  ,2861,2866,2872,2876,2910,2915,292
                                                                                                  6,3079,3173,3219,3339,3383,3400,34
                                                                                                  09,3414,3422,3448,3466,3475,3480,3
                                                                                                  489,3565,3588,3597,3609,3612,3617,
                                                                                                  3623,3631,3707,3784,3788,3799,3862
                                                                                                  ,4007,4025,4038,4164,4192,4199,420
                                                                                                  0,4213,4215,4227,4239,4254,4256,42
                                                                                                  82,4292,4792,4820,4827,4828,4841,4
                                                                                                  843,4855,4867,4882,4884,4910,4920,
                                                                                                  5420,5448,5455,5456,5469,5471,5483
                                                                                                  ,5495,5510,5512,5538,5548,6045,607
                                                                                                  3,6080,6081,6094,6096,6108,6120,61
                                                                                                  35,6137,6163,6173,6670,6698,6705,6
                                                                                                  706,6719,6721,6733,6745,6760,6762,
                                                                                                  6788,6798,7295,7323,7330,7331,7344
                                                                                                  ,7346,7358,7370,7385,7387,7413,742
                                                                                                  3,7854,7858,7874,7878,7927,7931,79
                                                                                                  47,7951,8000,8004,8020,8024,8073,8
                                                                                                  077,8093,8097,8146,8150,8166,8170,
                                                                                                  8219,8223,8239,8243,8292,8296,8312
                                                                                                  ,8316,8365,8369,8385,8389,8447,845
                                                                                                  1,8494,8609,8613,8656,8771,8775,88
                                                                                                  18,8930,8934,8977,9092,9096,9138,9
                                                                                                  256,9260,9302,9420,9424,9466,9581,
                                                                                                  9585,9627,9738,9744,9768,9774,9800
                                                                                                  ,9806,9870,9876,9900,9906,9932,993
                                                                                                  8,10002,10008,10032,10038,10064,10
                                                                                                  070,10134,10140,10164,10170,10196,
                                                                                                  10202,10266,10272,10296,10302,1032
                                                                                                  8,10334,10398,10404,10428,10434,10
                                                                                                  460,10466,10530,10536,10560,10566,
                                                                                                  10592,10598,10662,10668,10692,1069
                                                                                                  8,10724,10730,10796,10802,10906,10
                                                                                                  912,11016,11022,11126,11132,11236,
                                                                                                  11242,11346,11352,11456,11462,1156
                                                                                                  6,11572,11649,11655,11789,11907,12
                                                                                                  025,12143,12261,12379,12497,12615,
                                                                                                  12733,12851,13525,13634,13642,1364
                                                                                                  6,13678,13782,13891,13899,13903,13
                                                                                                  935,14039,14148,14156,14160,14192,
                                                                                                  14296,14405,14413,14417,14449,1459
                                                                                                  1,14599,14603,14634,14770,14778,14
                                                                                                  782,14813,14949,14957,14961,14992 

Page 35          Source Listing                  GET_PESET
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util_mpi.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_ROOT_PE                Func   1437     I(4)            4           scalar                    214,1437,2457,3788,4031           
 MPP_ROOT_PE@0              Local  1437     I(4)            4           scalar                                                      
 N                          Local  1398     I(4)            4           scalar                    1408,1409                         
 PELIST                     Dummy  1394     I(4)            4     1     1        ARG,IN           1402,1407,1408,1409,1413,1414,1416
 PESET                      Local  1421     RECORD          128   1     1        ALC              1421,1422,1433,1434,1435,1437,1438
                                                                                                  ,1439,1458,1461,2448,2467,2521,252
                                                                                                  2,2569,2578,2580,2591,2593,2594,25
                                                                                                  96,3179,3180,3181,3182,3183,3184,3
                                                                                                  186,3187,3188,3189,3192,3196,3197,
                                                                                                  3198,3199,3200,3201,3202,3204,3205
                                                                                                  ,3206,3207,3208,3209,3212,3213,332
                                                                                                  7,3726,3727,3728,3729,3730,3731,37
                                                                                                  32,3734,3735,3736,3738,3739,3916,3
                                                                                                  917,3928,3929,3939,3940,4026,4037,
                                                                                                  4043,4049,4283,4291,4297,4302,4911
                                                                                                  ,4919,4925,4930,5539,5547,5553,555
                                                                                                  8,6164,6172,6178,6183,6789,6797,68
                                                                                                  03,6808,7414,7422,7428,7433,7855,7
                                                                                                  859,7875,7879,7928,7932,7948,7952,
                                                                                                  8001,8005,8021,8025,8074,8078,8094
                                                                                                  ,8098,8147,8151,8167,8171,8220,822
                                                                                                  4,8240,8244,8293,8297,8313,8317,83
                                                                                                  66,8370,8386,8390,8448,8454,8456,8
                                                                                                  610,8616,8618,8772,8778,8780,8931,
                                                                                                  8937,8939,9093,9099,9101,9257,9263
                                                                                                  ,9265,9421,9427,9429,9582,9588,959
                                                                                                  0,9748,9778,9819,9880,9910,9951,10
                                                                                                  012,10042,10083,10144,10174,10215,
                                                                                                  10276,10306,10347,10408,10438,1047
                                                                                                  9,10540,10570,10611,10672,10702,10
                                                                                                  743                               
 PESET_NUM                  Local  1419     I(4)            4           scalar                    1135,1419,1420,1429,1430,1431     
 PRESENT                    Func   1402                                 scalar                    1402                              
 SIZE                       Func   1407                                 scalar                    1407,1408,1413,1421,1433,1435,1437
 SORTED                     Local  1399     I(4)            4     1     1        ALC              1413,1414,1421,1422,1423,1433,1434
                                                                                                  ,1435,1437,1440                   
 STRIDE                     Local  1398     I(4)            4           scalar                                                      
 TEXT                       Local  1400     CHAR            128         scalar                                                      


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 COMMUNICATOR.COUNT         I(4)            4     104            scalar   PRIV             1435,1458,3179,3197,3204,3727,3734 
                                                                                           ,4026,4283,4911,5539,6164,6789,741 
                                                                                           4,7855,7875,7928,7948,8001,8021,80 
                                                                                           74,8094,8147,8167,8220,8240,8293,8 
                                                                                           313,8366,8386,8448,8610,8772,8931, 
                                                                                           9093,9257,9421,9582                
 COMMUNICATOR.GROUP         I(4)            4     120            scalar   PRIV             1437,1438,3181,3199,3206,3729,3739 
 COMMUNICATOR.ID            I(4)            4     116            scalar   PRIV             1438,1439,1461,2596,3180,3198,3205 
                                                                                           ,3728,3738,4049,4302,4930,5558,618 
                                                                                           3,6808,7433,7859,7879,7932,7952,80 
                                                                                           05,8025,8078,8098,8151,8171,8224,8 

Page 36          Source Listing                  GET_PESET
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util_mpi.inc

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           244,8297,8317,8370,8390,8454,8456, 
                                                                                           8616,8618,8778,8780,8937,8939,9099 
                                                                                           ,9263,9427,9588,9748,9778,9819,988 
                                                                                           0,9910,9951,10012,10042,10083,1014 
                                                                                           4,10174,10215,10276,10306,10347,10 
                                                                                           408,10438,10479,10540,10570,10611, 
                                                                                           10672,10702,10743                  
 COMMUNICATOR.LIST          I(4)            4     32       1     1        PTR,PRIV         1421,1422,1433,1434,2448,2467,2569 
                                                                                           ,2591,2593,3186,3187,3188,3189,321 
                                                                                           1,3212,3213,3214,3735,3736,3916,39 
                                                                                           17,3928,3929,3939,3940,4037,4043,4 
                                                                                           291,4297,4919,4925,5547,5553,6172, 
                                                                                           6178,6797,6803,7422,7428,9101,9265 
                                                                                           ,9429,9590                         

Page 37          Source Listing                  GET_PESET
2021-06-01 08:51                                 ../mpp/include/mpp_util_mpi.inc

   1446 
   1447 !#######################################################################
   1448 !synchronize PEs in list
   1449 subroutine mpp_sync( pelist, do_self )
   1450   integer, intent(in), optional :: pelist(:)
   1451   logical, intent(in), optional :: do_self
   1452   logical                       :: dself
   1453   integer                       :: n
   1454 
   1455   dself=.true.; if(PRESENT(do_self))dself=do_self
   1456 !  if(dself)call mpp_sync_self(pelist)
   1457 
   1458   n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   1459 
   1460   if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   1461   call MPI_BARRIER( peset(n)%id, error )
   1462 
   1463   if( debug .and. (current_clock.NE.0) )call increment_current_clock(EVENT_WAIT)
   1464 
   1465   return
   1466 end subroutine mpp_sync


ENTRY POINTS

  Name                            
                                  
 mpp_mod_mp_mpp_sync_             

Page 38          Source Listing                  MPP_SYNC
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util_mpi.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CURRENT_CLOCK              Local  1460     I(4)            4           scalar                    1138,1460,1463,1481,1538,2840,2841
                                                                                                  ,2877,2909,2910,2911,2913,2916,291
                                                                                                  9,2928,2929,4040,4050,4182,4197,42
                                                                                                  21,4247,4250,4252,4294,4303,4810,4
                                                                                                  825,4849,4875,4878,4880,4922,4931,
                                                                                                  5438,5453,5477,5503,5506,5508,5550
                                                                                                  ,5559,6063,6078,6102,6128,6131,613
                                                                                                  3,6175,6184,6688,6703,6727,6753,67
                                                                                                  56,6758,6800,6809,7313,7328,7352,7
                                                                                                  378,7381,7383,7425,7434,7857,7861,
                                                                                                  7877,7881,7930,7934,7950,7954,8003
                                                                                                  ,8007,8023,8027,8076,8080,8096,810
                                                                                                  0,8149,8153,8169,8173,8222,8226,82
                                                                                                  42,8246,8295,8299,8315,8319,8368,8
                                                                                                  372,8388,8392,8450,8458,8612,8620,
                                                                                                  8774,8782,8933,8941,9095,9102,9259
                                                                                                  ,9266,9423,9430,9584,9591,9742,975
                                                                                                  0,9772,9780,9804,9823,9874,9882,99
                                                                                                  04,9912,9936,9955,10006,10014,1003
                                                                                                  6,10044,10068,10087,10138,10146,10
                                                                                                  168,10176,10200,10219,10270,10278,
                                                                                                  10300,10308,10332,10351,10402,1041
                                                                                                  0,10432,10440,10464,10483,10534,10
                                                                                                  542,10564,10572,10596,10615,10666,
                                                                                                  10674,10696,10704,10728,10747,1079
                                                                                                  8,10863,10908,10973,11018,11083,11
                                                                                                  128,11193,11238,11303,11348,11413,
                                                                                                  11458,11523,11568,11633,11651,1167
                                                                                                  6                                 
 DO_SELF                    Dummy  1449     L(4)            4           scalar   ARG,IN           1455                              
 DSELF                      Local  1452     L(4)            4           scalar                    1455                              
 EVENT_WAIT                 Param  1463     I(4)            4           scalar   PRIV             173,1463,1538,2749,2760           
 MPI_BARRIER                Subr   1461                                          PRIV             1461                              
 MPP_SYNC                   Subr   1449                                                                                             
 N                          Local  1453     I(4)            4           scalar                    1458,1461                         
 PELIST                     Dummy  1449     I(4)            4     1     1        ARG,IN           1458                              
 PRESENT                    Func   1455                                 scalar                    1455                              
 START_TICK                 Local  1460     I(8)            8           scalar                    1460,1481,2920,2924,4040,4182,4221
                                                                                                  ,4250,4294,4810,4849,4878,4922,543
                                                                                                  8,5477,5506,5550,6063,6102,6131,61
                                                                                                  75,6688,6727,6756,6800,7313,7352,7
                                                                                                  381,7425,7857,7877,7930,7950,8003,
                                                                                                  8023,8076,8096,8149,8169,8222,8242
                                                                                                  ,8295,8315,8368,8388,8450,8612,877
                                                                                                  4,8933,9095,9259,9423,9584,9742,97
                                                                                                  72,9804,9874,9904,9936,10006,10036
                                                                                                  ,10068,10138,10168,10200,10270,103
                                                                                                  00,10332,10402,10432,10464,10534,1
                                                                                                  0564,10596,10666,10696,10728,10799
                                                                                                  ,10909,11019,11129,11239,11349,114
                                                                                                  59,11569,11652                    

Page 39          Source Listing                  MPP_SYNC
2021-06-01 08:51                                 ../mpp/include/mpp_util_mpi.inc

   1467 
   1468 !#######################################################################
   1469 !this is to check if current PE's outstanding puts are complete
   1470 !but we can't use shmem_fence because we are actually waiting for
   1471 !a remote PE to complete its get
   1472 subroutine mpp_sync_self( pelist, check, request, msg_size, msg_type)
   1473   integer, intent(in), optional :: pelist(:)
   1474   integer, intent(in), optional :: check
   1475   integer, intent(inout), optional :: request(:)
   1476   integer, intent(in   ), optional :: msg_size(:)
   1477   integer, intent(in   ), optional :: msg_type(:)
   1478 
   1479   integer                       :: i, m, n, stride, my_check, rsize
   1480 
   1481   if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   1482   my_check = EVENT_SEND
   1483   if(present(check)) my_check = check
   1484   if( my_check .NE. EVENT_SEND .AND. my_check .NE. EVENT_RECV ) then
   1485      call mpp_error( FATAL, 'mpp_sync_self: The value of optional argument check should be EVENT_SEND or EVENT_RECV')
   1486   endif
   1487 
   1488   if(PRESENT(request)) then
   1489      if( .not. present(check) ) then
   1490         call mpp_error(FATAL, 'mpp_sync_self: check is not present when request is present')
   1491      endif
   1492      if( my_check == EVENT_RECV ) then
   1493         if( .not. present(msg_size) ) then
   1494            call mpp_error(FATAL, 'mpp_sync_self: msg_size is not present when request is present and it is EVENT_RECV')
   1495         endif
   1496         if( .not. present(msg_type) ) then
   1497            call mpp_error(FATAL, 'mpp_sync_self: msg_type is not present when request is present and it is EVENT_RECV')
   1498         endif
   1499         if(size(msg_size) .NE. size(request)) then
   1500            call mpp_error(FATAL, 'mpp_sync_self: dimension mismatch between msg_size and request')
   1501         endif
   1502         if(size(msg_type) .NE. size(request)) then
   1503            call mpp_error(FATAL, 'mpp_sync_self: dimension mismatch between msg_type and request')
   1504         endif
   1505 
   1506         do m = 1, size(request(:))
   1507            if( request(m) == MPI_REQUEST_NULL ) cycle
   1508            call MPI_WAIT(request(m), stat, error )
   1509            call MPI_GET_COUNT(stat, msg_type(m), rsize, error)
   1510            if(msg_size(m) .NE. rsize) then
   1511                 call mpp_error(FATAL, "mpp_sync_self: msg_size does not match size of data received")
   1512            endif
   1513         enddo
   1514      else
   1515         do m = 1, size(request(:))
   1516            if(request(m) .NE.MPI_REQUEST_NULL )call MPI_WAIT(request(m), stat, error )
   1517         enddo
   1518      endif
   1519   else
   1520      select case(my_check)
   1521      case(EVENT_SEND)
   1522         do m = 1,cur_send_request
   1523            if( request_send(m).NE.MPI_REQUEST_NULL )call MPI_WAIT( request_send(m), stat, error )

Page 40          Source Listing                  MPP_SYNC_SELF
2021-06-01 08:51                                 ../mpp/include/mpp_util_mpi.inc

   1524         end do
   1525         cur_send_request = 0
   1526      case(EVENT_RECV)
   1527         do m = 1,cur_recv_request
   1528            call MPI_WAIT( request_recv(m), stat, error )
   1529            call MPI_GET_COUNT(stat, type_recv(m), rsize, error)
   1530            if(size_recv(m) .NE. rsize) then
   1531                 call mpp_error(FATAL, "mpp_sync_self: size_recv does not match of data received")
   1532            endif
   1533            size_recv(m) = 0
   1534         end do
   1535         cur_recv_request = 0
   1536      end select
   1537   endif
   1538   if( debug .and. (current_clock.NE.0) )call increment_current_clock(EVENT_WAIT)
   1539   return
   1540 end subroutine mpp_sync_self


ENTRY POINTS

  Name                                 
                                       
 mpp_mod_mp_mpp_sync_self_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK                      Dummy  1472     I(4)            4           scalar   ARG,IN           1483,1489                         
 CUR_RECV_REQUEST           Local  1527     I(4)            4           scalar                    1145,1527,1535,4238,4239,4242,4243
                                                                                                  ,4244,4866,4867,4870,4871,4872,549
                                                                                                  4,5495,5498,5499,5500,6119,6120,61
                                                                                                  23,6124,6125,6744,6745,6748,6749,6
                                                                                                  750,7369,7370,7373,7374,7375      
 CUR_SEND_REQUEST           Local  1522     I(4)            4           scalar                    1144,1522,1525,4191,4192,4195,4819
                                                                                                  ,4820,4823,5447,5448,5451,6072,607
                                                                                                  3,6076,6697,6698,6701,7322,7323,73
                                                                                                  26                                
 EVENT_RECV                 Param  1484     I(4)            4           scalar                    176,197,1484,1492,1526,2747,2758,4
                                                                                                  247,4252,4875,4880,5503,5508,6128,
                                                                                                  6133,6753,6758,7378,7383,13538,135
                                                                                                  83,13671,13699,13795,13840,13928,1
                                                                                                  3956,14052,14097,14185,14213,14309
                                                                                                  ,14354,14442,14470,14627,14669,148
                                                                                                  06,14848,14985,15027              
 EVENT_SEND                 Param  1482     I(4)            4           scalar                    176,197,1482,1484,1521,2748,2759,4
                                                                                                  197,4825,5453,6078,6703,7328,13683
                                                                                                  ,13719,13940,13976,14197,14233,144
                                                                                                  54,14490,14639,14660,14818,14839,1
                                                                                                  4997,15018                        
 I                          Local  1479     I(4)            4           scalar                                                      
 M                          Local  1479     I(4)            4           scalar                    1506,1507,1508,1509,1510,1515,1516
                                                                                                  ,1522,1523,1527,1528,1529,1530,153
                                                                                                  3                                 
 MPI_GET_COUNT              Subr   1509                                          PRIV             1509,1529,4224,4852,5480,6105,6730

Page 41          Source Listing                  MPP_SYNC_SELF
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util_mpi.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,7355                             
 MPI_REQUEST_NULL           Param  1507     I(4)            4           scalar   PRIV             1507,1516,1523,3820,3821          
 MPI_WAIT                   Subr   1508                                          PRIV             1508,1516,1523,1528               
 MPP_SYNC_SELF              Subr   1472                                                                                             
 MSG_SIZE                   Dummy  1472     I(4)            4     1     1        ARG,IN           1493,1499,1510                    
 MSG_TYPE                   Dummy  1472     I(4)            4     1     1        ARG,IN           1496,1502,1509                    
 MY_CHECK                   Local  1479     I(4)            4           scalar                    1482,1483,1484,1492,1520          
 N                          Local  1479     I(4)            4           scalar                                                      
 PELIST                     Dummy  1472     I(4)            4     1     1        ARG,IN                                             
 PRESENT                    Func   1483                                 scalar                    1483,1488,1489,1493,1496          
 REQUEST                    Dummy  1472     I(4)            4     1     1        ARG,INOUT        1488,1499,1502,1506,1507,1508,1515
                                                                                                  ,1516                             
 REQUEST_RECV               Local  1528     I(4)            4     1     1        ALC              1528,3817,3821,4242,4870,5498,6123
                                                                                                  ,6748,7373                        
 REQUEST_SEND               Local  1523     I(4)            4     1     1        ALC              1523,3816,3820,4195,4823,5451,6076
                                                                                                  ,6701,7326                        
 RSIZE                      Local  1479     I(4)            4           scalar                    1509,1510,1529,1530               
 SIZE                       Func   1499                                 scalar                    1499,1502,1506,1515               
 SIZE_RECV                  Local  1530     I(4)            4     1     1        ALC              1530,1533,3818,3822,4243,4871,5499
                                                                                                  ,6124,6749,7374                   
 STAT                       Local  1508     I(4)            4     1     5        PRIV             185,1508,1509,1516,1523,1528,1529,
                                                                                                  4223,4224,4251,4851,4852,4879,5479
                                                                                                  ,5480,5507,6104,6105,6132,6729,673
                                                                                                  0,6757,7354,7355,7382             
 STRIDE                     Local  1479     I(4)            4           scalar                                                      
 TYPE_RECV                  Local  1529     I(4)            4     1     1        ALC              1529,3819,3823,4244,4872,5500,6125
                                                                                                  ,6750,7375                        

Page 42          Source Listing                  MPP_SYNC_SELF
2021-06-01 08:51                                 ../mpp/include/mpp_util_mpi.inc

   1541 # 25 "../mpp/include/mpp_util.inc" 2 
   1542 # 27
   1543 
   1544 
   1545 !#####################################################################
   1546 ! <FUNCTION NAME="stdin">
   1547 !  <OVERVIEW>
   1548 !    Standard fortran unit numbers.
   1549 !  </OVERVIEW>
   1550 !  <DESCRIPTION>
   1551 !    This function returns the current standard fortran unit numbers for input.
   1552 !  </DESCRIPTION>
   1553 !  <TEMPLATE>
   1554 !   stdin()
   1555 !  </TEMPLATE>
   1556 ! </FUNCTION>
   1557   function stdin()
   1558     integer :: stdin
   1559     stdin = in_unit
   1560     return
   1561   end function stdin


ENTRY POINTS

  Name                         
                               
 mpp_mod_mp_stdin_             

Page 43          Source Listing                  STDIN
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IN_UNIT                    Local  1559     I(4)            4           scalar                    1158,1559                         
 STDIN                      Func   1557     I(4)            4           scalar                                                      

Page 44          Source Listing                  STDIN
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1562 
   1563 !#####################################################################
   1564 ! <FUNCTION NAME="stdout">
   1565 !  <OVERVIEW>
   1566 !    Standard fortran unit numbers.
   1567 !  </OVERVIEW>
   1568 !  <DESCRIPTION>
   1569 !    This function returns the current  standard fortran unit numbers for output.
   1570 !  </DESCRIPTION>
   1571 !  <TEMPLATE>
   1572 !   stdout()
   1573 !  </TEMPLATE>
   1574 ! </FUNCTION>
   1575   function stdout()
   1576     integer :: stdout
   1577     stdout = out_unit
   1578     if( pe.NE.root_pe )stdout = stdlog()
   1579     return
   1580   end function stdout


ENTRY POINTS

  Name                          
                                
 mpp_mod_mp_stdout_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 STDLOG                     Func   1578     I(4)            4           scalar                    212,1578,1646,1654,3358,3575,3861,
                                                                                                  3896,3919                         
 STDLOG@0                   Local  1578     I(4)            4           scalar                                                      
 STDOUT                     Func   1575     I(4)            4           scalar                                                      

Page 45          Source Listing                  STDOUT
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1581 
   1582 !#####################################################################
   1583 ! <FUNCTION NAME="stderr">
   1584 !  <OVERVIEW>
   1585 !    Standard fortran unit numbers.
   1586 !  </OVERVIEW>
   1587 !  <DESCRIPTION>
   1588 !    This function returns the current standard fortran unit numbers for error messages.
   1589 !  </DESCRIPTION>
   1590 !  <TEMPLATE>
   1591 !   stderr()
   1592 !  </TEMPLATE>
   1593 ! </FUNCTION>
   1594   function stderr()
   1595     integer :: stderr
   1596     stderr = err_unit
   1597     return
   1598   end function stderr


ENTRY POINTS

  Name                          
                                
 mpp_mod_mp_stderr_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERR_UNIT                   Local  1596     I(4)            4           scalar                    1158,1596                         
 STDERR                     Func   1594     I(4)            4           scalar                                                      

Page 46          Source Listing                  STDERR
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1599 
   1600 !#####################################################################
   1601 ! <FUNCTION NAME="stdlog">
   1602 !  <OVERVIEW>
   1603 !    Standard fortran unit numbers.
   1604 !  </OVERVIEW>
   1605 !  <DESCRIPTION>
   1606 !    This function returns the current  standard fortran unit numbers for log messages.
   1607 !    Log messages, by convention, are written to the file <TT>logfile.out</TT>.
   1608 !  </DESCRIPTION>
   1609 !  <TEMPLATE>
   1610 !    stdlog()
   1611 !  </TEMPLATE>
   1612 ! </FUNCTION>
   1613   function stdlog()
   1614     integer :: stdlog,istat
   1615     logical :: opened
   1616     character(len=11) :: this_pe
   1617 !$  logical           :: omp_in_parallel
   1618 !$  integer           :: omp_get_num_threads
   1619 !$  integer           :: errunit
   1620 
   1621 
   1622 !NOTES: We can not use mpp_error to handle the error because mpp_error
   1623 !       will call stdout and stdout will call stdlog for non-root-pe.
   1624 !       This will be a cicular call.
   1625 
   1626 !$  if( omp_in_parallel() .and. (omp_get_num_threads() > 1) ) then
   1627 !$OMP single
   1628 !$      errunit = stderr()
   1629 !$      write( errunit,'(/a/)' ) 'FATAL: STDLOG: is called inside a OMP parallel region'
   1630 
   1631 !$      call MPI_ABORT( MPI_COMM_WORLD, 1, error )
   1632 # 118
   1633 
   1634 !$OMP end single
   1635 !$  endif
   1636 
   1637     if( pe.EQ.root_pe )then
   1638        write(this_pe,'(a,i6.6,a)') '.',pe,'.out'
   1639        inquire( file=trim(configfile)//this_pe, opened=opened )
   1640        if( opened )then
   1641           FLUSH(log_unit)
   1642        else
   1643           log_unit=get_unit()
   1644           open( unit=log_unit, status='UNKNOWN', file=trim(configfile)//this_pe, position='APPEND', err=10 )
   1645        end if
   1646        stdlog = log_unit
   1647     else
   1648        inquire( unit=etc_unit, opened=opened )
   1649        if( opened )then
   1650           FLUSH(etc_unit)
   1651        else
   1652           open( unit=etc_unit, status='UNKNOWN', file=trim(etcfile), position='APPEND', err=11 )
   1653        end if
   1654        stdlog = etc_unit
   1655     end if

Page 47          Source Listing                  STDLOG
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1656     return
   1657 10  call mpp_error( FATAL, 'STDLOG: unable to open '//trim(configfile)//this_pe//'.' )
   1658 11  call mpp_error( FATAL, 'STDLOG: unable to open '//trim(etcfile)//'.' )
   1659   end function stdlog


ENTRY POINTS

  Name                          
                                
 mpp_mod_mp_stdlog_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  1657                                                           1644                              
 11                         Label  1658                                                           1652                              
 CONFIGFILE                 Local  1639     CHAR            32          scalar                    1134,1639,1644,1657,1670,1672     
 ERRUNIT                    Local  1619     I(4)            4           scalar                    1628,1629                         
 ETCFILE                    Local  1652     CHAR            32          scalar                    1154,1652,1658,3800,3801,3803,3805
                                                                                                  ,3807                             
 ETC_UNIT                   Local  1648     I(4)            4           scalar                    1648,1650,1652,1654,3794,3797,3798
                                                                                                  ,3805,3807,3971,3973,3974         
 GET_UNIT                   Func   1643     I(4)            4           scalar                    216,1643,1667,2969,3081,3395,3461,
                                                                                                  3583                              
 GET_UNIT@0                 Local  1643     I(4)            4           scalar                                                      
 ISTAT                      Local  1614     I(4)            4           scalar                                                      
 LOG_UNIT                   Local  1641     I(4)            4           scalar                    1641,1643,1644,1646,1667,1672,1673
 OMP_GET_NUM_THREADS        Func   1618     I(4)            4           scalar                    1626                              
 OMP_IN_PARALLEL            Func   1617     L(4)            4           scalar                    1626                              
 OPENED                     Local  1615     L(4)            4           scalar                    1639,1640,1648,1649               
 STDLOG                     Func   1613     I(4)            4           scalar                                                      
 THIS_PE                    Local  1616     CHAR            11          scalar                    1638,1639,1644,1657               
 TRIM                       Func   1639                                 scalar                    1639,1644,1652,1657,1658          

Page 48          Source Listing                  STDLOG
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1660 
   1661 !#####################################################################
   1662   subroutine mpp_init_logfile()
   1663   integer :: p
   1664   logical :: exist
   1665   character(len=11) :: this_pe
   1666   if( pe.EQ.root_pe )then
   1667      log_unit = get_unit()
   1668      do p=0,npes-1
   1669        write(this_pe,'(a,i6.6,a)') '.',p,'.out'
   1670        inquire( file=trim(configfile)//this_pe, exist=exist )
   1671        if(exist)then
   1672          open( unit=log_unit, file=trim(configfile)//this_pe, status='REPLACE' )
   1673          close(log_unit)
   1674        endif
   1675      end do
   1676   end if
   1677   end subroutine mpp_init_logfile


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_init_logfile_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 EXIST                      Local  1664     L(4)            4           scalar                    1670,1671                         
 MPP_INIT_LOGFILE           Subr   1662                                                           3773                              
 P                          Local  1663     I(4)            4           scalar                    1668,1669                         
 THIS_PE                    Local  1665     CHAR            11          scalar                    1669,1670,1672                    
 TRIM                       Func   1670                                 scalar                    1670,1672                         

Page 49          Source Listing                  MPP_INIT_LOGFILE
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1678 !#####################################################################
   1679   subroutine mpp_set_warn_level(flag)
   1680     integer, intent(in) :: flag
   1681 
   1682     if( flag.EQ.WARNING )then
   1683        warnings_are_fatal = .FALSE.
   1684     else if( flag.EQ.FATAL )then
   1685        warnings_are_fatal = .TRUE.
   1686     else
   1687        call mpp_error( FATAL, 'MPP_SET_WARN_LEVEL: warning flag must be set to WARNING or FATAL.' )
   1688     end if
   1689     return
   1690   end subroutine mpp_set_warn_level


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_set_warn_level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FLAG                       Dummy  1679     I(4)            4           scalar   ARG,IN           1682,1684                         
 MPP_SET_WARN_LEVEL         Subr   1679                                                                                             

Page 50          Source Listing                  MPP_SET_WARN_LEVEL
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1691 
   1692 !#####################################################################
   1693   function mpp_error_state()
   1694     integer :: mpp_error_state
   1695     mpp_error_state = error_state
   1696     return
   1697   end function mpp_error_state


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_state_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_ERROR_STATE            Func   1693     I(4)            4           scalar                                                      

Page 51          Source Listing                  MPP_ERROR_STATE
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1698 
   1699 !#####################################################################
   1700 !overloads to mpp_error_basic
   1701 !support for error_mesg routine in FMS
   1702 subroutine mpp_error_mesg( routine, errormsg, errortype )
   1703   character(len=*), intent(in) :: routine, errormsg
   1704   integer,          intent(in) :: errortype
   1705 
   1706   call mpp_error( errortype, trim(routine)//': '//trim(errormsg) )
   1707   return
   1708 end subroutine mpp_error_mesg


ENTRY POINTS

  Name                                  
                                        
 mpp_mod_mp_mpp_error_mesg_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERRORMSG                   Dummy  1702     CHAR                        scalar   ARG,IN           1706                              
 ERRORTYPE                  Dummy  1702     I(4)            4           scalar   ARG,IN           1706                              
 MPP_ERROR_MESG             Subr   1702                                          PRIV                                               
 ROUTINE                    Dummy  1702     CHAR                        scalar   ARG,IN           1706                              
 TRIM                       Func   1706                                 scalar                    1706                              

Page 52          Source Listing                  MPP_ERROR_MESG
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1709 
   1710 !#####################################################################
   1711 subroutine mpp_error_noargs()
   1712   call mpp_error(FATAL)
   1713 end subroutine mpp_error_noargs


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_error_noargs_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_ERROR_NOARGS           Subr   1711                                          PRIV                                               

Page 53          Source Listing                  MPP_ERROR_NOARGS
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1714 
   1715 !#####################################################################
   1716 subroutine mpp_error_Is(errortype, errormsg1, value, errormsg2)
   1717   integer,          intent(in) :: errortype
   1718   INTEGER,          intent(in) :: value
   1719   character(len=*), intent(in) :: errormsg1
   1720   character(len=*),      intent(in), optional :: errormsg2
   1721   call mpp_error( errortype, errormsg1, (/value/), errormsg2)
   1722 end subroutine mpp_error_Is


ENTRY POINTS

  Name                                
                                      
 mpp_mod_mp_mpp_error_is_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERRORMSG1                  Dummy  1716     CHAR                        scalar   ARG,IN           1721                              
 ERRORMSG2                  Dummy  1716     CHAR                        scalar   ARG,IN           1721                              
 ERRORTYPE                  Dummy  1716     I(4)            4           scalar   ARG,IN           1721                              
 MPP_ERROR_IS               Subr   1716                                          PRIV             3219                              
 VALUE                      Dummy  1716     I(4)            4           scalar   ARG,IN           1721                              

Page 54          Source Listing                  MPP_ERROR_IS
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1723 !#####################################################################
   1724 subroutine mpp_error_Rs(errortype, errormsg1, value, errormsg2)
   1725   integer,          intent(in) :: errortype
   1726   REAL,             intent(in) :: value
   1727   character(len=*), intent(in) :: errormsg1
   1728   character(len=*),      intent(in), optional :: errormsg2
   1729   call mpp_error( errortype, errormsg1, (/value/), errormsg2)
   1730 end subroutine mpp_error_Rs


ENTRY POINTS

  Name                                
                                      
 mpp_mod_mp_mpp_error_rs_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERRORMSG1                  Dummy  1724     CHAR                        scalar   ARG,IN           1729                              
 ERRORMSG2                  Dummy  1724     CHAR                        scalar   ARG,IN           1729                              
 ERRORTYPE                  Dummy  1724     I(4)            4           scalar   ARG,IN           1729                              
 MPP_ERROR_RS               Subr   1724                                          PRIV                                               
 VALUE                      Dummy  1724     R(8)            8           scalar   ARG,IN           1729                              

Page 55          Source Listing                  MPP_ERROR_RS
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1731 !#####################################################################
   1732 subroutine mpp_error_Ia(errortype, errormsg1, array, errormsg2)
   1733   integer,               intent(in) :: errortype
   1734   INTEGER, dimension(:), intent(in) :: array
   1735   character(len=*),      intent(in) :: errormsg1
   1736   character(len=*),      intent(in), optional :: errormsg2
   1737   character(len=512) :: string
   1738 
   1739   string = errormsg1//trim(array_to_char(array))
   1740   if(present(errormsg2)) string = trim(string)//errormsg2
   1741   call mpp_error_basic( errortype, trim(string))
   1742 
   1743 end subroutine mpp_error_Ia


ENTRY POINTS

  Name                                
                                      
 mpp_mod_mp_mpp_error_ia_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  1732     I(4)            4     1     1        ARG,IN           1739                              
 ARRAY_TO_CHAR              Local  1739                                 scalar                    1739,1753,1790,1791,1831,1832,1872
                                                                                                  ,1873,1913,1914                   
 ERRORMSG1                  Dummy  1732     CHAR                        scalar   ARG,IN           1739                              
 ERRORMSG2                  Dummy  1732     CHAR                        scalar   ARG,IN           1740                              
 ERRORTYPE                  Dummy  1732     I(4)            4           scalar   ARG,IN           1741                              
 MPP_ERROR_IA               Subr   1732                                          PRIV             1721                              
 PRESENT                    Func   1740                                 scalar                    1740                              
 STRING                     Local  1737     CHAR            512         scalar                    1739,1740,1741                    
 TRIM                       Func   1739                                 scalar                    1739,1740,1741                    

Page 56          Source Listing                  MPP_ERROR_IA
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1744 
   1745 !#####################################################################
   1746 subroutine mpp_error_Ra(errortype, errormsg1, array, errormsg2)
   1747   integer,            intent(in) :: errortype
   1748   REAL, dimension(:), intent(in) :: array
   1749   character(len=*),      intent(in) :: errormsg1
   1750   character(len=*),   intent(in), optional :: errormsg2
   1751   character(len=512) :: string
   1752 
   1753   string = errormsg1//trim(array_to_char(array))
   1754   if(present(errormsg2)) string = trim(string)//errormsg2
   1755   call mpp_error_basic( errortype, trim(string))
   1756 
   1757 end subroutine mpp_error_Ra


ENTRY POINTS

  Name                                
                                      
 mpp_mod_mp_mpp_error_ra_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  1746     R(8)            8     1     1        ARG,IN           1753                              
 ERRORMSG1                  Dummy  1746     CHAR                        scalar   ARG,IN           1753                              
 ERRORMSG2                  Dummy  1746     CHAR                        scalar   ARG,IN           1754                              
 ERRORTYPE                  Dummy  1746     I(4)            4           scalar   ARG,IN           1755                              
 MPP_ERROR_RA               Subr   1746                                          PRIV             1729                              
 PRESENT                    Func   1754                                 scalar                    1754                              
 STRING                     Local  1751     CHAR            512         scalar                    1753,1754,1755                    
 TRIM                       Func   1753                                 scalar                    1753,1754,1755                    

Page 57          Source Listing                  MPP_ERROR_RA
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   1758 
   1759 !#####################################################################
   1760 
   1761 
   1762 
   1763 # 1 "../mpp/include/mpp_error_a_a.h" 1 
   1764 !***********************************************************************
   1765 !*                   GNU Lesser General Public License
   1766 !*
   1767 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1768 !*
   1769 !* FMS is free software: you can redistribute it and/or modify it under
   1770 !* the terms of the GNU Lesser General Public License as published by
   1771 !* the Free Software Foundation, either version 3 of the License, or (at
   1772 !* your option) any later version.
   1773 !*
   1774 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1775 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1776 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1777 !* for more details.
   1778 !*
   1779 !* You should have received a copy of the GNU Lesser General Public
   1780 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1781 !***********************************************************************
   1782 subroutine mpp_error_ia_ia(errortype, errormsg1, array1, errormsg2, array2, errormsg3)
   1783   integer,            intent(in) :: errortype
   1784   integer, dimension(:), intent(in) :: array1
   1785   integer, dimension(:), intent(in) :: array2
   1786   character(len=*),      intent(in) :: errormsg1, errormsg2
   1787   character(len=*),   intent(in), optional :: errormsg3
   1788   character(len=512) :: string
   1789 
   1790   string = errormsg1//trim(array_to_char(array1))
   1791   string = trim(string)//errormsg2//trim(array_to_char(array2))
   1792   if(present(errormsg3)) string = trim(string)//errormsg3
   1793   call mpp_error_basic( errortype, trim(string))
   1794 
   1795 end subroutine mpp_error_ia_ia

Page 58          Source Listing                  MPP_ERROR_IA_IA
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_a_a.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_ia_ia_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY1                     Dummy  1782     I(4)            4     1     1        ARG,IN           1790                              
 ARRAY2                     Dummy  1782     I(4)            4     1     1        ARG,IN           1791                              
 ERRORMSG1                  Dummy  1782     CHAR                        scalar   ARG,IN           1790                              
 ERRORMSG2                  Dummy  1782     CHAR                        scalar   ARG,IN           1791                              
 ERRORMSG3                  Dummy  1782     CHAR                        scalar   ARG,IN           1792                              
 ERRORTYPE                  Dummy  1782     I(4)            4           scalar   ARG,IN           1793                              
 MPP_ERROR_IA_IA            Subr   1782                                          PRIV             1953,2101,2249                    
 PRESENT                    Func   1792                                 scalar                    1792                              
 STRING                     Local  1788     CHAR            512         scalar                    1790,1791,1792,1793               
 TRIM                       Func   1790                                 scalar                    1790,1791,1792,1793               

Page 59          Source Listing                  MPP_ERROR_IA_IA
2021-06-01 08:51                                 ../mpp/include/mpp_error_a_a.h

   1796 # 249 "../mpp/include/mpp_util.inc" 2 
   1797 
   1798 
   1799 
   1800 !#####################################################################
   1801 
   1802 
   1803 
   1804 # 1 "../mpp/include/mpp_error_a_a.h" 1 
   1805 !***********************************************************************
   1806 !*                   GNU Lesser General Public License
   1807 !*
   1808 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1809 !*
   1810 !* FMS is free software: you can redistribute it and/or modify it under
   1811 !* the terms of the GNU Lesser General Public License as published by
   1812 !* the Free Software Foundation, either version 3 of the License, or (at
   1813 !* your option) any later version.
   1814 !*
   1815 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1816 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1817 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1818 !* for more details.
   1819 !*
   1820 !* You should have received a copy of the GNU Lesser General Public
   1821 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1822 !***********************************************************************
   1823 subroutine mpp_error_ia_ra(errortype, errormsg1, array1, errormsg2, array2, errormsg3)
   1824   integer,            intent(in) :: errortype
   1825   integer, dimension(:), intent(in) :: array1
   1826   real, dimension(:), intent(in) :: array2
   1827   character(len=*),      intent(in) :: errormsg1, errormsg2
   1828   character(len=*),   intent(in), optional :: errormsg3
   1829   character(len=512) :: string
   1830 
   1831   string = errormsg1//trim(array_to_char(array1))
   1832   string = trim(string)//errormsg2//trim(array_to_char(array2))
   1833   if(present(errormsg3)) string = trim(string)//errormsg3
   1834   call mpp_error_basic( errortype, trim(string))
   1835 
   1836 end subroutine mpp_error_ia_ra

Page 60          Source Listing                  MPP_ERROR_IA_RA
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_a_a.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_ia_ra_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY1                     Dummy  1823     I(4)            4     1     1        ARG,IN           1831                              
 ARRAY2                     Dummy  1823     R(8)            8     1     1        ARG,IN           1832                              
 ERRORMSG1                  Dummy  1823     CHAR                        scalar   ARG,IN           1831                              
 ERRORMSG2                  Dummy  1823     CHAR                        scalar   ARG,IN           1832                              
 ERRORMSG3                  Dummy  1823     CHAR                        scalar   ARG,IN           1833                              
 ERRORTYPE                  Dummy  1823     I(4)            4           scalar   ARG,IN           1834                              
 MPP_ERROR_IA_RA            Subr   1823                                          PRIV             1990,2138,2286                    
 PRESENT                    Func   1833                                 scalar                    1833                              
 STRING                     Local  1829     CHAR            512         scalar                    1831,1832,1833,1834               
 TRIM                       Func   1831                                 scalar                    1831,1832,1833,1834               

Page 61          Source Listing                  MPP_ERROR_IA_RA
2021-06-01 08:51                                 ../mpp/include/mpp_error_a_a.h

   1837 # 257 "../mpp/include/mpp_util.inc" 2 
   1838 
   1839 
   1840 
   1841 !#####################################################################
   1842 
   1843 
   1844 
   1845 # 1 "../mpp/include/mpp_error_a_a.h" 1 
   1846 !***********************************************************************
   1847 !*                   GNU Lesser General Public License
   1848 !*
   1849 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1850 !*
   1851 !* FMS is free software: you can redistribute it and/or modify it under
   1852 !* the terms of the GNU Lesser General Public License as published by
   1853 !* the Free Software Foundation, either version 3 of the License, or (at
   1854 !* your option) any later version.
   1855 !*
   1856 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1857 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1858 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1859 !* for more details.
   1860 !*
   1861 !* You should have received a copy of the GNU Lesser General Public
   1862 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1863 !***********************************************************************
   1864 subroutine mpp_error_ra_ia(errortype, errormsg1, array1, errormsg2, array2, errormsg3)
   1865   integer,            intent(in) :: errortype
   1866   real, dimension(:), intent(in) :: array1
   1867   integer, dimension(:), intent(in) :: array2
   1868   character(len=*),      intent(in) :: errormsg1, errormsg2
   1869   character(len=*),   intent(in), optional :: errormsg3
   1870   character(len=512) :: string
   1871 
   1872   string = errormsg1//trim(array_to_char(array1))
   1873   string = trim(string)//errormsg2//trim(array_to_char(array2))
   1874   if(present(errormsg3)) string = trim(string)//errormsg3
   1875   call mpp_error_basic( errortype, trim(string))
   1876 
   1877 end subroutine mpp_error_ra_ia

Page 62          Source Listing                  MPP_ERROR_RA_IA
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_a_a.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_ra_ia_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY1                     Dummy  1864     R(8)            8     1     1        ARG,IN           1872                              
 ARRAY2                     Dummy  1864     I(4)            4     1     1        ARG,IN           1873                              
 ERRORMSG1                  Dummy  1864     CHAR                        scalar   ARG,IN           1872                              
 ERRORMSG2                  Dummy  1864     CHAR                        scalar   ARG,IN           1873                              
 ERRORMSG3                  Dummy  1864     CHAR                        scalar   ARG,IN           1874                              
 ERRORTYPE                  Dummy  1864     I(4)            4           scalar   ARG,IN           1875                              
 MPP_ERROR_RA_IA            Subr   1864                                          PRIV             2027,2175,2323                    
 PRESENT                    Func   1874                                 scalar                    1874                              
 STRING                     Local  1870     CHAR            512         scalar                    1872,1873,1874,1875               
 TRIM                       Func   1872                                 scalar                    1872,1873,1874,1875               

Page 63          Source Listing                  MPP_ERROR_RA_IA
2021-06-01 08:51                                 ../mpp/include/mpp_error_a_a.h

   1878 # 265 "../mpp/include/mpp_util.inc" 2 
   1879 
   1880 
   1881 
   1882 !#####################################################################
   1883 
   1884 
   1885 
   1886 # 1 "../mpp/include/mpp_error_a_a.h" 1 
   1887 !***********************************************************************
   1888 !*                   GNU Lesser General Public License
   1889 !*
   1890 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1891 !*
   1892 !* FMS is free software: you can redistribute it and/or modify it under
   1893 !* the terms of the GNU Lesser General Public License as published by
   1894 !* the Free Software Foundation, either version 3 of the License, or (at
   1895 !* your option) any later version.
   1896 !*
   1897 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1898 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1899 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1900 !* for more details.
   1901 !*
   1902 !* You should have received a copy of the GNU Lesser General Public
   1903 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1904 !***********************************************************************
   1905 subroutine mpp_error_ra_ra(errortype, errormsg1, array1, errormsg2, array2, errormsg3)
   1906   integer,            intent(in) :: errortype
   1907   real, dimension(:), intent(in) :: array1
   1908   real, dimension(:), intent(in) :: array2
   1909   character(len=*),      intent(in) :: errormsg1, errormsg2
   1910   character(len=*),   intent(in), optional :: errormsg3
   1911   character(len=512) :: string
   1912 
   1913   string = errormsg1//trim(array_to_char(array1))
   1914   string = trim(string)//errormsg2//trim(array_to_char(array2))
   1915   if(present(errormsg3)) string = trim(string)//errormsg3
   1916   call mpp_error_basic( errortype, trim(string))
   1917 
   1918 end subroutine mpp_error_ra_ra

Page 64          Source Listing                  MPP_ERROR_RA_RA
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_a_a.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_ra_ra_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY1                     Dummy  1905     R(8)            8     1     1        ARG,IN           1913                              
 ARRAY2                     Dummy  1905     R(8)            8     1     1        ARG,IN           1914                              
 ERRORMSG1                  Dummy  1905     CHAR                        scalar   ARG,IN           1913                              
 ERRORMSG2                  Dummy  1905     CHAR                        scalar   ARG,IN           1914                              
 ERRORMSG3                  Dummy  1905     CHAR                        scalar   ARG,IN           1915                              
 ERRORTYPE                  Dummy  1905     I(4)            4           scalar   ARG,IN           1916                              
 MPP_ERROR_RA_RA            Subr   1905                                          PRIV             2064,2212,2360                    
 PRESENT                    Func   1915                                 scalar                    1915                              
 STRING                     Local  1911     CHAR            512         scalar                    1913,1914,1915,1916               
 TRIM                       Func   1913                                 scalar                    1913,1914,1915,1916               

Page 65          Source Listing                  MPP_ERROR_RA_RA
2021-06-01 08:51                                 ../mpp/include/mpp_error_a_a.h

   1919 # 273 "../mpp/include/mpp_util.inc" 2 
   1920 
   1921 
   1922 
   1923 !#####################################################################
   1924 
   1925 
   1926 
   1927 # 1 "../mpp/include/mpp_error_a_s.h" 1 
   1928 !***********************************************************************
   1929 !*                   GNU Lesser General Public License
   1930 !*
   1931 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1932 !*
   1933 !* FMS is free software: you can redistribute it and/or modify it under
   1934 !* the terms of the GNU Lesser General Public License as published by
   1935 !* the Free Software Foundation, either version 3 of the License, or (at
   1936 !* your option) any later version.
   1937 !*
   1938 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1939 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1940 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1941 !* for more details.
   1942 !*
   1943 !* You should have received a copy of the GNU Lesser General Public
   1944 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1945 !***********************************************************************
   1946 subroutine mpp_error_ia_is(errortype, errormsg1, array, errormsg2, scalar, errormsg3)
   1947   integer,            intent(in) :: errortype
   1948   integer, dimension(:), intent(in) :: array
   1949   integer,               intent(in) :: scalar
   1950   character(len=*),   intent(in) :: errormsg1, errormsg2
   1951   character(len=*),   intent(in), optional :: errormsg3
   1952 
   1953   call mpp_error( errortype, errormsg1, array, errormsg2, (/scalar/), errormsg3)
   1954 
   1955 end subroutine mpp_error_ia_is

Page 66          Source Listing                  MPP_ERROR_IA_IS
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_a_s.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_ia_is_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  1946     I(4)            4     1     1        ARG,IN           1953                              
 ERRORMSG1                  Dummy  1946     CHAR                        scalar   ARG,IN           1953                              
 ERRORMSG2                  Dummy  1946     CHAR                        scalar   ARG,IN           1953                              
 ERRORMSG3                  Dummy  1946     CHAR                        scalar   ARG,IN           1953                              
 ERRORTYPE                  Dummy  1946     I(4)            4           scalar   ARG,IN           1953                              
 MPP_ERROR_IA_IS            Subr   1946                                          PRIV                                               
 SCALAR                     Dummy  1946     I(4)            4           scalar   ARG,IN           1953                              

Page 67          Source Listing                  MPP_ERROR_IA_IS
2021-06-01 08:51                                 ../mpp/include/mpp_error_a_s.h

   1956 # 281 "../mpp/include/mpp_util.inc" 2 
   1957 
   1958 
   1959 
   1960 !#####################################################################
   1961 
   1962 
   1963 
   1964 # 1 "../mpp/include/mpp_error_a_s.h" 1 
   1965 !***********************************************************************
   1966 !*                   GNU Lesser General Public License
   1967 !*
   1968 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1969 !*
   1970 !* FMS is free software: you can redistribute it and/or modify it under
   1971 !* the terms of the GNU Lesser General Public License as published by
   1972 !* the Free Software Foundation, either version 3 of the License, or (at
   1973 !* your option) any later version.
   1974 !*
   1975 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1976 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1977 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1978 !* for more details.
   1979 !*
   1980 !* You should have received a copy of the GNU Lesser General Public
   1981 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1982 !***********************************************************************
   1983 subroutine mpp_error_ia_rs(errortype, errormsg1, array, errormsg2, scalar, errormsg3)
   1984   integer,            intent(in) :: errortype
   1985   integer, dimension(:), intent(in) :: array
   1986   real,               intent(in) :: scalar
   1987   character(len=*),   intent(in) :: errormsg1, errormsg2
   1988   character(len=*),   intent(in), optional :: errormsg3
   1989 
   1990   call mpp_error( errortype, errormsg1, array, errormsg2, (/scalar/), errormsg3)
   1991 
   1992 end subroutine mpp_error_ia_rs

Page 68          Source Listing                  MPP_ERROR_IA_RS
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_a_s.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_ia_rs_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  1983     I(4)            4     1     1        ARG,IN           1990                              
 ERRORMSG1                  Dummy  1983     CHAR                        scalar   ARG,IN           1990                              
 ERRORMSG2                  Dummy  1983     CHAR                        scalar   ARG,IN           1990                              
 ERRORMSG3                  Dummy  1983     CHAR                        scalar   ARG,IN           1990                              
 ERRORTYPE                  Dummy  1983     I(4)            4           scalar   ARG,IN           1990                              
 MPP_ERROR_IA_RS            Subr   1983                                          PRIV                                               
 SCALAR                     Dummy  1983     R(8)            8           scalar   ARG,IN           1990                              

Page 69          Source Listing                  MPP_ERROR_IA_RS
2021-06-01 08:51                                 ../mpp/include/mpp_error_a_s.h

   1993 # 289 "../mpp/include/mpp_util.inc" 2 
   1994 
   1995 
   1996 
   1997 !#####################################################################
   1998 
   1999 
   2000 
   2001 # 1 "../mpp/include/mpp_error_a_s.h" 1 
   2002 !***********************************************************************
   2003 !*                   GNU Lesser General Public License
   2004 !*
   2005 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2006 !*
   2007 !* FMS is free software: you can redistribute it and/or modify it under
   2008 !* the terms of the GNU Lesser General Public License as published by
   2009 !* the Free Software Foundation, either version 3 of the License, or (at
   2010 !* your option) any later version.
   2011 !*
   2012 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2013 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2014 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2015 !* for more details.
   2016 !*
   2017 !* You should have received a copy of the GNU Lesser General Public
   2018 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2019 !***********************************************************************
   2020 subroutine mpp_error_ra_is(errortype, errormsg1, array, errormsg2, scalar, errormsg3)
   2021   integer,            intent(in) :: errortype
   2022   real, dimension(:), intent(in) :: array
   2023   integer,               intent(in) :: scalar
   2024   character(len=*),   intent(in) :: errormsg1, errormsg2
   2025   character(len=*),   intent(in), optional :: errormsg3
   2026 
   2027   call mpp_error( errortype, errormsg1, array, errormsg2, (/scalar/), errormsg3)
   2028 
   2029 end subroutine mpp_error_ra_is

Page 70          Source Listing                  MPP_ERROR_RA_IS
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_a_s.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_ra_is_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  2020     R(8)            8     1     1        ARG,IN           2027                              
 ERRORMSG1                  Dummy  2020     CHAR                        scalar   ARG,IN           2027                              
 ERRORMSG2                  Dummy  2020     CHAR                        scalar   ARG,IN           2027                              
 ERRORMSG3                  Dummy  2020     CHAR                        scalar   ARG,IN           2027                              
 ERRORTYPE                  Dummy  2020     I(4)            4           scalar   ARG,IN           2027                              
 MPP_ERROR_RA_IS            Subr   2020                                          PRIV                                               
 SCALAR                     Dummy  2020     I(4)            4           scalar   ARG,IN           2027                              

Page 71          Source Listing                  MPP_ERROR_RA_IS
2021-06-01 08:51                                 ../mpp/include/mpp_error_a_s.h

   2030 # 297 "../mpp/include/mpp_util.inc" 2 
   2031 
   2032 
   2033 
   2034 !#####################################################################
   2035 
   2036 
   2037 
   2038 # 1 "../mpp/include/mpp_error_a_s.h" 1 
   2039 !***********************************************************************
   2040 !*                   GNU Lesser General Public License
   2041 !*
   2042 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2043 !*
   2044 !* FMS is free software: you can redistribute it and/or modify it under
   2045 !* the terms of the GNU Lesser General Public License as published by
   2046 !* the Free Software Foundation, either version 3 of the License, or (at
   2047 !* your option) any later version.
   2048 !*
   2049 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2050 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2051 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2052 !* for more details.
   2053 !*
   2054 !* You should have received a copy of the GNU Lesser General Public
   2055 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2056 !***********************************************************************
   2057 subroutine mpp_error_ra_rs(errortype, errormsg1, array, errormsg2, scalar, errormsg3)
   2058   integer,            intent(in) :: errortype
   2059   real, dimension(:), intent(in) :: array
   2060   real,               intent(in) :: scalar
   2061   character(len=*),   intent(in) :: errormsg1, errormsg2
   2062   character(len=*),   intent(in), optional :: errormsg3
   2063 
   2064   call mpp_error( errortype, errormsg1, array, errormsg2, (/scalar/), errormsg3)
   2065 
   2066 end subroutine mpp_error_ra_rs

Page 72          Source Listing                  MPP_ERROR_RA_RS
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_a_s.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_ra_rs_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  2057     R(8)            8     1     1        ARG,IN           2064                              
 ERRORMSG1                  Dummy  2057     CHAR                        scalar   ARG,IN           2064                              
 ERRORMSG2                  Dummy  2057     CHAR                        scalar   ARG,IN           2064                              
 ERRORMSG3                  Dummy  2057     CHAR                        scalar   ARG,IN           2064                              
 ERRORTYPE                  Dummy  2057     I(4)            4           scalar   ARG,IN           2064                              
 MPP_ERROR_RA_RS            Subr   2057                                          PRIV                                               
 SCALAR                     Dummy  2057     R(8)            8           scalar   ARG,IN           2064                              

Page 73          Source Listing                  MPP_ERROR_RA_RS
2021-06-01 08:51                                 ../mpp/include/mpp_error_a_s.h

   2067 # 305 "../mpp/include/mpp_util.inc" 2 
   2068 
   2069 
   2070 
   2071 !#####################################################################
   2072 
   2073 
   2074 
   2075 # 1 "../mpp/include/mpp_error_s_a.h" 1 
   2076 !***********************************************************************
   2077 !*                   GNU Lesser General Public License
   2078 !*
   2079 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2080 !*
   2081 !* FMS is free software: you can redistribute it and/or modify it under
   2082 !* the terms of the GNU Lesser General Public License as published by
   2083 !* the Free Software Foundation, either version 3 of the License, or (at
   2084 !* your option) any later version.
   2085 !*
   2086 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2087 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2088 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2089 !* for more details.
   2090 !*
   2091 !* You should have received a copy of the GNU Lesser General Public
   2092 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2093 !***********************************************************************
   2094 subroutine mpp_error_is_ia(errortype, errormsg1, scalar2, errormsg2, array2, errormsg3)
   2095   integer,            intent(in) :: errortype
   2096   integer,               intent(in) :: scalar2
   2097   integer, dimension(:), intent(in) :: array2
   2098   character(len=*),   intent(in) :: errormsg1, errormsg2
   2099   character(len=*),   intent(in), optional :: errormsg3
   2100 
   2101   call mpp_error( errortype, errormsg1, (/scalar2/), errormsg2, array2, errormsg3)
   2102 
   2103 end subroutine mpp_error_is_ia

Page 74          Source Listing                  MPP_ERROR_IS_IA
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_s_a.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_is_ia_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY2                     Dummy  2094     I(4)            4     1     1        ARG,IN           2101                              
 ERRORMSG1                  Dummy  2094     CHAR                        scalar   ARG,IN           2101                              
 ERRORMSG2                  Dummy  2094     CHAR                        scalar   ARG,IN           2101                              
 ERRORMSG3                  Dummy  2094     CHAR                        scalar   ARG,IN           2101                              
 ERRORTYPE                  Dummy  2094     I(4)            4           scalar   ARG,IN           2101                              
 MPP_ERROR_IS_IA            Subr   2094                                          PRIV                                               
 SCALAR2                    Dummy  2094     I(4)            4           scalar   ARG,IN           2101                              

Page 75          Source Listing                  MPP_ERROR_IS_IA
2021-06-01 08:51                                 ../mpp/include/mpp_error_s_a.h

   2104 # 313 "../mpp/include/mpp_util.inc" 2 
   2105 
   2106 
   2107 
   2108 !#####################################################################
   2109 
   2110 
   2111 
   2112 # 1 "../mpp/include/mpp_error_s_a.h" 1 
   2113 !***********************************************************************
   2114 !*                   GNU Lesser General Public License
   2115 !*
   2116 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2117 !*
   2118 !* FMS is free software: you can redistribute it and/or modify it under
   2119 !* the terms of the GNU Lesser General Public License as published by
   2120 !* the Free Software Foundation, either version 3 of the License, or (at
   2121 !* your option) any later version.
   2122 !*
   2123 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2124 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2125 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2126 !* for more details.
   2127 !*
   2128 !* You should have received a copy of the GNU Lesser General Public
   2129 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2130 !***********************************************************************
   2131 subroutine mpp_error_is_ra(errortype, errormsg1, scalar2, errormsg2, array2, errormsg3)
   2132   integer,            intent(in) :: errortype
   2133   integer,               intent(in) :: scalar2
   2134   real, dimension(:), intent(in) :: array2
   2135   character(len=*),   intent(in) :: errormsg1, errormsg2
   2136   character(len=*),   intent(in), optional :: errormsg3
   2137 
   2138   call mpp_error( errortype, errormsg1, (/scalar2/), errormsg2, array2, errormsg3)
   2139 
   2140 end subroutine mpp_error_is_ra

Page 76          Source Listing                  MPP_ERROR_IS_RA
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_s_a.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_is_ra_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY2                     Dummy  2131     R(8)            8     1     1        ARG,IN           2138                              
 ERRORMSG1                  Dummy  2131     CHAR                        scalar   ARG,IN           2138                              
 ERRORMSG2                  Dummy  2131     CHAR                        scalar   ARG,IN           2138                              
 ERRORMSG3                  Dummy  2131     CHAR                        scalar   ARG,IN           2138                              
 ERRORTYPE                  Dummy  2131     I(4)            4           scalar   ARG,IN           2138                              
 MPP_ERROR_IS_RA            Subr   2131                                          PRIV                                               
 SCALAR2                    Dummy  2131     I(4)            4           scalar   ARG,IN           2138                              

Page 77          Source Listing                  MPP_ERROR_IS_RA
2021-06-01 08:51                                 ../mpp/include/mpp_error_s_a.h

   2141 # 321 "../mpp/include/mpp_util.inc" 2 
   2142 
   2143 
   2144 
   2145 !#####################################################################
   2146 
   2147 
   2148 
   2149 # 1 "../mpp/include/mpp_error_s_a.h" 1 
   2150 !***********************************************************************
   2151 !*                   GNU Lesser General Public License
   2152 !*
   2153 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2154 !*
   2155 !* FMS is free software: you can redistribute it and/or modify it under
   2156 !* the terms of the GNU Lesser General Public License as published by
   2157 !* the Free Software Foundation, either version 3 of the License, or (at
   2158 !* your option) any later version.
   2159 !*
   2160 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2161 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2162 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2163 !* for more details.
   2164 !*
   2165 !* You should have received a copy of the GNU Lesser General Public
   2166 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2167 !***********************************************************************
   2168 subroutine mpp_error_rs_ia(errortype, errormsg1, scalar2, errormsg2, array2, errormsg3)
   2169   integer,            intent(in) :: errortype
   2170   real,               intent(in) :: scalar2
   2171   integer, dimension(:), intent(in) :: array2
   2172   character(len=*),   intent(in) :: errormsg1, errormsg2
   2173   character(len=*),   intent(in), optional :: errormsg3
   2174 
   2175   call mpp_error( errortype, errormsg1, (/scalar2/), errormsg2, array2, errormsg3)
   2176 
   2177 end subroutine mpp_error_rs_ia

Page 78          Source Listing                  MPP_ERROR_RS_IA
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_s_a.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_rs_ia_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY2                     Dummy  2168     I(4)            4     1     1        ARG,IN           2175                              
 ERRORMSG1                  Dummy  2168     CHAR                        scalar   ARG,IN           2175                              
 ERRORMSG2                  Dummy  2168     CHAR                        scalar   ARG,IN           2175                              
 ERRORMSG3                  Dummy  2168     CHAR                        scalar   ARG,IN           2175                              
 ERRORTYPE                  Dummy  2168     I(4)            4           scalar   ARG,IN           2175                              
 MPP_ERROR_RS_IA            Subr   2168                                          PRIV                                               
 SCALAR2                    Dummy  2168     R(8)            8           scalar   ARG,IN           2175                              

Page 79          Source Listing                  MPP_ERROR_RS_IA
2021-06-01 08:51                                 ../mpp/include/mpp_error_s_a.h

   2178 # 329 "../mpp/include/mpp_util.inc" 2 
   2179 
   2180 
   2181 
   2182 !#####################################################################
   2183 
   2184 
   2185 
   2186 # 1 "../mpp/include/mpp_error_s_a.h" 1 
   2187 !***********************************************************************
   2188 !*                   GNU Lesser General Public License
   2189 !*
   2190 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2191 !*
   2192 !* FMS is free software: you can redistribute it and/or modify it under
   2193 !* the terms of the GNU Lesser General Public License as published by
   2194 !* the Free Software Foundation, either version 3 of the License, or (at
   2195 !* your option) any later version.
   2196 !*
   2197 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2198 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2199 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2200 !* for more details.
   2201 !*
   2202 !* You should have received a copy of the GNU Lesser General Public
   2203 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2204 !***********************************************************************
   2205 subroutine mpp_error_rs_ra(errortype, errormsg1, scalar2, errormsg2, array2, errormsg3)
   2206   integer,            intent(in) :: errortype
   2207   real,               intent(in) :: scalar2
   2208   real, dimension(:), intent(in) :: array2
   2209   character(len=*),   intent(in) :: errormsg1, errormsg2
   2210   character(len=*),   intent(in), optional :: errormsg3
   2211 
   2212   call mpp_error( errortype, errormsg1, (/scalar2/), errormsg2, array2, errormsg3)
   2213 
   2214 end subroutine mpp_error_rs_ra

Page 80          Source Listing                  MPP_ERROR_RS_RA
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_s_a.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_rs_ra_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY2                     Dummy  2205     R(8)            8     1     1        ARG,IN           2212                              
 ERRORMSG1                  Dummy  2205     CHAR                        scalar   ARG,IN           2212                              
 ERRORMSG2                  Dummy  2205     CHAR                        scalar   ARG,IN           2212                              
 ERRORMSG3                  Dummy  2205     CHAR                        scalar   ARG,IN           2212                              
 ERRORTYPE                  Dummy  2205     I(4)            4           scalar   ARG,IN           2212                              
 MPP_ERROR_RS_RA            Subr   2205                                          PRIV                                               
 SCALAR2                    Dummy  2205     R(8)            8           scalar   ARG,IN           2212                              

Page 81          Source Listing                  MPP_ERROR_RS_RA
2021-06-01 08:51                                 ../mpp/include/mpp_error_s_a.h

   2215 # 337 "../mpp/include/mpp_util.inc" 2 
   2216 
   2217 
   2218 
   2219 !#####################################################################
   2220 
   2221 
   2222 
   2223 # 1 "../mpp/include/mpp_error_s_s.h" 1 
   2224 !***********************************************************************
   2225 !*                   GNU Lesser General Public License
   2226 !*
   2227 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2228 !*
   2229 !* FMS is free software: you can redistribute it and/or modify it under
   2230 !* the terms of the GNU Lesser General Public License as published by
   2231 !* the Free Software Foundation, either version 3 of the License, or (at
   2232 !* your option) any later version.
   2233 !*
   2234 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2235 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2236 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2237 !* for more details.
   2238 !*
   2239 !* You should have received a copy of the GNU Lesser General Public
   2240 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2241 !***********************************************************************
   2242 subroutine mpp_error_is_is(errortype, errormsg1, scalar1, errormsg2, scalar2, errormsg3)
   2243   integer,            intent(in) :: errortype
   2244   integer, intent(in) :: scalar1
   2245   integer, intent(in) :: scalar2
   2246   character(len=*),   intent(in) :: errormsg1, errormsg2
   2247   character(len=*),   intent(in), optional :: errormsg3
   2248 
   2249   call mpp_error( errortype, errormsg1, (/scalar1/), errormsg2, (/scalar2/), errormsg3)
   2250 
   2251 end subroutine mpp_error_is_is

Page 82          Source Listing                  MPP_ERROR_IS_IS
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_s_s.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_is_is_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERRORMSG1                  Dummy  2242     CHAR                        scalar   ARG,IN           2249                              
 ERRORMSG2                  Dummy  2242     CHAR                        scalar   ARG,IN           2249                              
 ERRORMSG3                  Dummy  2242     CHAR                        scalar   ARG,IN           2249                              
 ERRORTYPE                  Dummy  2242     I(4)            4           scalar   ARG,IN           2249                              
 MPP_ERROR_IS_IS            Subr   2242                                          PRIV                                               
 SCALAR1                    Dummy  2242     I(4)            4           scalar   ARG,IN           2249                              
 SCALAR2                    Dummy  2242     I(4)            4           scalar   ARG,IN           2249                              

Page 83          Source Listing                  MPP_ERROR_IS_IS
2021-06-01 08:51                                 ../mpp/include/mpp_error_s_s.h

   2252 # 345 "../mpp/include/mpp_util.inc" 2 
   2253 
   2254 
   2255 
   2256 !#####################################################################
   2257 
   2258 
   2259 
   2260 # 1 "../mpp/include/mpp_error_s_s.h" 1 
   2261 !***********************************************************************
   2262 !*                   GNU Lesser General Public License
   2263 !*
   2264 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2265 !*
   2266 !* FMS is free software: you can redistribute it and/or modify it under
   2267 !* the terms of the GNU Lesser General Public License as published by
   2268 !* the Free Software Foundation, either version 3 of the License, or (at
   2269 !* your option) any later version.
   2270 !*
   2271 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2272 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2273 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2274 !* for more details.
   2275 !*
   2276 !* You should have received a copy of the GNU Lesser General Public
   2277 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2278 !***********************************************************************
   2279 subroutine mpp_error_is_rs(errortype, errormsg1, scalar1, errormsg2, scalar2, errormsg3)
   2280   integer,            intent(in) :: errortype
   2281   integer, intent(in) :: scalar1
   2282   real, intent(in) :: scalar2
   2283   character(len=*),   intent(in) :: errormsg1, errormsg2
   2284   character(len=*),   intent(in), optional :: errormsg3
   2285 
   2286   call mpp_error( errortype, errormsg1, (/scalar1/), errormsg2, (/scalar2/), errormsg3)
   2287 
   2288 end subroutine mpp_error_is_rs

Page 84          Source Listing                  MPP_ERROR_IS_RS
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_s_s.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_is_rs_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERRORMSG1                  Dummy  2279     CHAR                        scalar   ARG,IN           2286                              
 ERRORMSG2                  Dummy  2279     CHAR                        scalar   ARG,IN           2286                              
 ERRORMSG3                  Dummy  2279     CHAR                        scalar   ARG,IN           2286                              
 ERRORTYPE                  Dummy  2279     I(4)            4           scalar   ARG,IN           2286                              
 MPP_ERROR_IS_RS            Subr   2279                                          PRIV                                               
 SCALAR1                    Dummy  2279     I(4)            4           scalar   ARG,IN           2286                              
 SCALAR2                    Dummy  2279     R(8)            8           scalar   ARG,IN           2286                              

Page 85          Source Listing                  MPP_ERROR_IS_RS
2021-06-01 08:51                                 ../mpp/include/mpp_error_s_s.h

   2289 # 353 "../mpp/include/mpp_util.inc" 2 
   2290 
   2291 
   2292 
   2293 !#####################################################################
   2294 
   2295 
   2296 
   2297 # 1 "../mpp/include/mpp_error_s_s.h" 1 
   2298 !***********************************************************************
   2299 !*                   GNU Lesser General Public License
   2300 !*
   2301 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2302 !*
   2303 !* FMS is free software: you can redistribute it and/or modify it under
   2304 !* the terms of the GNU Lesser General Public License as published by
   2305 !* the Free Software Foundation, either version 3 of the License, or (at
   2306 !* your option) any later version.
   2307 !*
   2308 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2309 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2310 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2311 !* for more details.
   2312 !*
   2313 !* You should have received a copy of the GNU Lesser General Public
   2314 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2315 !***********************************************************************
   2316 subroutine mpp_error_rs_is(errortype, errormsg1, scalar1, errormsg2, scalar2, errormsg3)
   2317   integer,            intent(in) :: errortype
   2318   real, intent(in) :: scalar1
   2319   integer, intent(in) :: scalar2
   2320   character(len=*),   intent(in) :: errormsg1, errormsg2
   2321   character(len=*),   intent(in), optional :: errormsg3
   2322 
   2323   call mpp_error( errortype, errormsg1, (/scalar1/), errormsg2, (/scalar2/), errormsg3)
   2324 
   2325 end subroutine mpp_error_rs_is

Page 86          Source Listing                  MPP_ERROR_RS_IS
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_s_s.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_rs_is_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERRORMSG1                  Dummy  2316     CHAR                        scalar   ARG,IN           2323                              
 ERRORMSG2                  Dummy  2316     CHAR                        scalar   ARG,IN           2323                              
 ERRORMSG3                  Dummy  2316     CHAR                        scalar   ARG,IN           2323                              
 ERRORTYPE                  Dummy  2316     I(4)            4           scalar   ARG,IN           2323                              
 MPP_ERROR_RS_IS            Subr   2316                                          PRIV                                               
 SCALAR1                    Dummy  2316     R(8)            8           scalar   ARG,IN           2323                              
 SCALAR2                    Dummy  2316     I(4)            4           scalar   ARG,IN           2323                              

Page 87          Source Listing                  MPP_ERROR_RS_IS
2021-06-01 08:51                                 ../mpp/include/mpp_error_s_s.h

   2326 # 361 "../mpp/include/mpp_util.inc" 2 
   2327 
   2328 
   2329 
   2330 !#####################################################################
   2331 
   2332 
   2333 
   2334 # 1 "../mpp/include/mpp_error_s_s.h" 1 
   2335 !***********************************************************************
   2336 !*                   GNU Lesser General Public License
   2337 !*
   2338 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2339 !*
   2340 !* FMS is free software: you can redistribute it and/or modify it under
   2341 !* the terms of the GNU Lesser General Public License as published by
   2342 !* the Free Software Foundation, either version 3 of the License, or (at
   2343 !* your option) any later version.
   2344 !*
   2345 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2346 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2347 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2348 !* for more details.
   2349 !*
   2350 !* You should have received a copy of the GNU Lesser General Public
   2351 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2352 !***********************************************************************
   2353 subroutine mpp_error_rs_rs(errortype, errormsg1, scalar1, errormsg2, scalar2, errormsg3)
   2354   integer,            intent(in) :: errortype
   2355   real, intent(in) :: scalar1
   2356   real, intent(in) :: scalar2
   2357   character(len=*),   intent(in) :: errormsg1, errormsg2
   2358   character(len=*),   intent(in), optional :: errormsg3
   2359 
   2360   call mpp_error( errortype, errormsg1, (/scalar1/), errormsg2, (/scalar2/), errormsg3)
   2361 
   2362 end subroutine mpp_error_rs_rs

Page 88          Source Listing                  MPP_ERROR_RS_RS
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_error_s_s.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_error_rs_rs_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERRORMSG1                  Dummy  2353     CHAR                        scalar   ARG,IN           2360                              
 ERRORMSG2                  Dummy  2353     CHAR                        scalar   ARG,IN           2360                              
 ERRORMSG3                  Dummy  2353     CHAR                        scalar   ARG,IN           2360                              
 ERRORTYPE                  Dummy  2353     I(4)            4           scalar   ARG,IN           2360                              
 MPP_ERROR_RS_RS            Subr   2353                                          PRIV                                               
 SCALAR1                    Dummy  2353     R(8)            8           scalar   ARG,IN           2360                              
 SCALAR2                    Dummy  2353     R(8)            8           scalar   ARG,IN           2360                              

Page 89          Source Listing                  MPP_ERROR_RS_RS
2021-06-01 08:51                                 ../mpp/include/mpp_error_s_s.h

   2363 # 369 "../mpp/include/mpp_util.inc" 2 
   2364 
   2365 
   2366 
   2367 !#####################################################################
   2368 function iarray_to_char(iarray) result(string)
   2369 integer, intent(in) :: iarray(:)
   2370 character(len=256) :: string
   2371 character(len=32)  :: chtmp
   2372 integer :: i, len_tmp, len_string
   2373 
   2374  string = ''
   2375  do i=1,size(iarray)
   2376    write(chtmp,'(i16)') iarray(i)
   2377    chtmp = adjustl(chtmp)
   2378    len_tmp = len_trim(chtmp)
   2379    len_string  = len_trim(string)
   2380    string(len_string+1:len_string+len_tmp) = trim(chtmp)
   2381    string(len_string+len_tmp+1:len_string+len_tmp+1) = ','
   2382  enddo
   2383  len_string = len_trim(string)
   2384  string(len_string:len_string) = ' ' ! remove trailing comma
   2385 
   2386 end function iarray_to_char


ENTRY POINTS

  Name                                  
                                        
 mpp_mod_mp_iarray_to_char_             

Page 90          Source Listing                  IARRAY_TO_CHAR
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   2377                                 scalar                    2377                              
 CHTMP                      Local  2371     CHAR            32          scalar                    2376,2377,2378,2380               
 I                          Local  2372     I(4)            4           scalar                    2375,2376                         
 IARRAY                     Dummy  2368     I(4)            4     1     1        ARG,IN           2375,2376                         
 IARRAY_TO_CHAR             Func   2368     CHAR            256         scalar                    1739,1790,1791,1831,1873          
 LEN_STRING                 Local  2372     I(4)            4           scalar                    2379,2380,2381,2383,2384          
 LEN_TMP                    Local  2372     I(4)            4           scalar                    2378,2380,2381                    
 LEN_TRIM                   Func   2378                                 scalar                    2378,2379,2383                    
 SIZE                       Func   2375                                 scalar                    2375                              
 STRING                     Local  2370     CHAR            256         scalar                    2374,2379,2380,2381,2383,2384     
 TRIM                       Func   2380                                 scalar                    2380                              

Page 91          Source Listing                  IARRAY_TO_CHAR
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2387 !#####################################################################
   2388 function rarray_to_char(rarray) result(string)
   2389 real, intent(in) :: rarray(:)
   2390 character(len=256) :: string
   2391 character(len=32)  :: chtmp
   2392 integer :: i, len_tmp, len_string
   2393 
   2394  string = ''
   2395  do i=1,size(rarray)
   2396    write(chtmp,'(G16.9)') rarray(i)
   2397    chtmp = adjustl(chtmp)
   2398    len_tmp = len_trim(chtmp)
   2399    len_string  = len_trim(string)
   2400    string(len_string+1:len_string+len_tmp) = trim(chtmp)
   2401    string(len_string+len_tmp+1:len_string+len_tmp+1) = ','
   2402  enddo
   2403  len_string = len_trim(string)
   2404  string(len_string:len_string) = ' ' ! remove trailing comma
   2405 
   2406 end function rarray_to_char


ENTRY POINTS

  Name                                  
                                        
 mpp_mod_mp_rarray_to_char_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   2397                                 scalar                    2397                              
 CHTMP                      Local  2391     CHAR            32          scalar                    2396,2397,2398,2400               
 I                          Local  2392     I(4)            4           scalar                    2395,2396                         
 LEN_STRING                 Local  2392     I(4)            4           scalar                    2399,2400,2401,2403,2404          
 LEN_TMP                    Local  2392     I(4)            4           scalar                    2398,2400,2401                    
 LEN_TRIM                   Func   2398                                 scalar                    2398,2399,2403                    
 RARRAY                     Dummy  2388     R(8)            8     1     1        ARG,IN           2395,2396                         
 RARRAY_TO_CHAR             Func   2388     CHAR            256         scalar                    1753,1832,1872,1913,1914          
 SIZE                       Func   2395                                 scalar                    2395                              
 STRING                     Local  2390     CHAR            256         scalar                    2394,2399,2400,2401,2403,2404     
 TRIM                       Func   2400                                 scalar                    2400                              

Page 92          Source Listing                  RARRAY_TO_CHAR
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2407 
   2408 !#####################################################################
   2409 ! <FUNCTION NAME="mpp_pe">
   2410 !  <OVERVIEW>
   2411 !    Returns processor ID.
   2412 !  </OVERVIEW>
   2413 !  <DESCRIPTION>
   2414 !    This returns the unique ID associated with a PE. This number runs
   2415 !    between 0 and <TT>npes-1</TT>, where <TT>npes</TT> is the total
   2416 !    processor count, returned by <TT>mpp_npes</TT>. For a uniprocessor
   2417 !    application this will always return 0.
   2418 !  </DESCRIPTION>
   2419 !  <TEMPLATE>
   2420 !    mpp_pe()
   2421 !  </TEMPLATE>
   2422 ! </FUNCTION>
   2423   function mpp_pe()
   2424     integer :: mpp_pe
   2425 
   2426     if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_PE: You must first call mpp_init.' )
   2427     mpp_pe = pe
   2428     return
   2429   end function mpp_pe


ENTRY POINTS

  Name                          
                                
 mpp_mod_mp_mpp_pe_             

Page 93          Source Listing                  MPP_PE
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_PE                     Func   2423     I(4)            4           scalar                                                      

Page 94          Source Listing                  MPP_PE
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2430 
   2431 !#####################################################################
   2432 ! <FUNCTION NAME="mpp_npes">
   2433 !  <OVERVIEW>
   2434 !    Returns processor count for current pelist.
   2435 !  </OVERVIEW>
   2436 !  <DESCRIPTION>
   2437 !    This returns the number of PEs in the current pelist. For a
   2438 !    uniprocessor application, this will always return 1.
   2439 !  </DESCRIPTION>
   2440 !  <TEMPLATE>
   2441 !    mpp_npes()
   2442 !  </TEMPLATE>
   2443 ! </FUNCTION>
   2444   function mpp_npes()
   2445     integer :: mpp_npes
   2446 
   2447     if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_NPES: You must first call mpp_init.' )
   2448     mpp_npes = size(peset(current_peset_num)%list(:))
   2449     return
   2450   end function mpp_npes


ENTRY POINTS

  Name                            
                                  
 mpp_mod_mp_mpp_npes_             

Page 95          Source Listing                  MPP_NPES
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_NPES                   Func   2444     I(4)            4           scalar                                                      
 SIZE                       Func   2448                                 scalar                    2448                              

Page 96          Source Listing                  MPP_NPES
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2451 
   2452 !#####################################################################
   2453   function mpp_root_pe()
   2454     integer :: mpp_root_pe
   2455 
   2456     if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_ROOT_PE: You must first call mpp_init.' )
   2457     mpp_root_pe = root_pe
   2458     return
   2459   end function mpp_root_pe


ENTRY POINTS

  Name                               
                                     
 mpp_mod_mp_mpp_root_pe_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_ROOT_PE                Func   2453     I(4)            4           scalar                                                      

Page 97          Source Listing                  MPP_ROOT_PE
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2460 
   2461 !#####################################################################
   2462   subroutine mpp_set_root_pe(num)
   2463     integer, intent(in) :: num
   2464     logical             :: opened
   2465 
   2466     if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_SET_ROOT_PE: You must first call mpp_init.' )
   2467     if( .NOT.(ANY(num.EQ.peset(current_peset_num)%list(:))) ) &
   2468          call mpp_error( FATAL, 'MPP_SET_ROOT_PE: you cannot set a root PE outside the current pelist.' )
   2469 !actions to take if root_pe has changed:
   2470 ! open log_unit on new root_pe, close it on old root_pe and point its log_unit to stdout.
   2471 !      if( num.NE.root_pe )then  !root_pe has changed
   2472 !          if( pe.EQ.num )then
   2473 !on the new root_pe
   2474 !              if( log_unit.NE.out_unit )then
   2475 !                  inquire( unit=log_unit, opened=opened )
   2476 !                  if( .NOT.opened )open( unit=log_unit, status='OLD', file=trim(configfile), position='APPEND' )
   2477 !              end if
   2478 !          else if( pe.EQ.root_pe )then
   2479 !on the old root_pe
   2480 !              if( log_unit.NE.out_unit )then
   2481 !                  inquire( unit=log_unit, opened=opened )
   2482 !                  if( opened )close(log_unit)
   2483 !                  log_unit = out_unit
   2484 !              end if
   2485 !          end if
   2486 !      end if
   2487     root_pe = num
   2488     return
   2489   end subroutine mpp_set_root_pe

Page 98          Source Listing                  MPP_SET_ROOT_PE
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_util.inc



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_set_root_pe_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   2467                                 scalar                    2467                              
 MPP_SET_ROOT_PE            Subr   2462                                                                                             
 NUM                        Dummy  2462     I(4)            4           scalar   ARG,IN           2467,2487                         
 OPENED                     Local  2464     L(4)            4           scalar                                                      

Page 99          Source Listing                  MPP_SET_ROOT_PE
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2490 
   2491 !#####################################################################
   2492 ! <SUBROUTINE NAME="mpp_declare_pelist">
   2493 !  <OVERVIEW>
   2494 !    Declare a pelist.
   2495 !  </OVERVIEW>
   2496 !  <DESCRIPTION>
   2497 !    This call is written specifically to accommodate a MPI restriction
   2498 !    that requires a parent communicator to create a child communicator, In
   2499 !    other words: a pelist cannot go off and declare a communicator, but
   2500 !    every PE in the parent, including those not in pelist(:), must get
   2501 !    together for the <TT>MPI_COMM_CREATE</TT> call. The parent is
   2502 !    typically <TT>MPI_COMM_WORLD</TT>, though it could also be a subset
   2503 !    that includes all PEs in <TT>pelist</TT>.
   2504 !
   2505 !    This call implies synchronization across the PEs in the current
   2506 !    pelist, of which <TT>pelist</TT> is a subset.
   2507 !  </DESCRIPTION>
   2508 !  <TEMPLATE>
   2509 !   call mpp_declare_pelist( pelist,name )
   2510 !  </TEMPLATE>
   2511 !  <IN NAME="pelist" DIM="(:)" TYPE="integer"></IN>
   2512 ! </SUBROUTINE>
   2513 
   2514   subroutine mpp_declare_pelist( pelist, name )
   2515     integer,                    intent(in) :: pelist(:)
   2516     character(len=*), intent(in), optional :: name
   2517     integer :: i
   2518 
   2519     if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_DECLARE_PELIST: You must first call mpp_init.' )
   2520     i = get_peset(pelist)
   2521     write( peset(i)%name,'(a,i2.2)' ) 'PElist', i !default name
   2522     if( PRESENT(name) )peset(i)%name = name
   2523     return
   2524   end subroutine mpp_declare_pelist

Page 100         Source Listing                  MPP_DECLARE_PELIST
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_util.inc



ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_declare_pelist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  2517     I(4)            4           scalar                    2520,2521,2522                    
 MPP_DECLARE_PELIST         Subr   2514                                                                                             
 NAME                       Dummy  2514     CHAR                        scalar   ARG,IN           2522                              
 PELIST                     Dummy  2514     I(4)            4     1     1        ARG,IN           2520                              
 PRESENT                    Func   2522                                 scalar                    2522                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 COMMUNICATOR.NAME          CHAR            32    0              scalar   PRIV             2521,2522,2578,2580,2594,3182,3202 
                                                                                           ,3207,3327,3732                    

Page 101         Source Listing                  MPP_DECLARE_PELIST
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2525 
   2526 !#####################################################################
   2527 ! <SUBROUTINE NAME="mpp_set_current_pelist">
   2528 !  <OVERVIEW>
   2529 !    Set context pelist.
   2530 !  </OVERVIEW>
   2531 !  <DESCRIPTION>
   2532 !    This call sets the value of the current pelist, which is the
   2533 !    context for all subsequent "global" calls where the optional
   2534 !    <TT>pelist</TT> argument is omitted. All the PEs that are to be in the
   2535 !    current pelist must call it.
   2536 !
   2537 !    In MPI, this call may hang unless <TT>pelist</TT> has been previous
   2538 !    declared using <LINK
   2539 !    SRC="#mpp_declare_pelist"><TT>mpp_declare_pelist</TT></LINK>.
   2540 !
   2541 !    If the argument <TT>pelist</TT> is absent, the current pelist is
   2542 !    set to the "world" pelist, of all PEs in the job.
   2543 !  </DESCRIPTION>
   2544 !  <TEMPLATE>
   2545 !    call mpp_set_current_pelist( pelist )
   2546 !  </TEMPLATE>
   2547 !  <IN NAME="pliest" TYPE="integer"></IN>
   2548 ! </SUBROUTINE>
   2549 
   2550   subroutine mpp_set_current_pelist( pelist, no_sync )
   2551 !Once we branch off into a PE subset, we want subsequent "global" calls to
   2552 !sync only across this subset. This is declared as the current pelist (peset(current_peset_num)%list)
   2553 !when current_peset all pelist ops with no pelist should apply the current pelist.
   2554 !also, we set the start PE in this pelist to be the root_pe.
   2555 !unlike mpp_declare_pelist, this is called by the PEs in the pelist only
   2556 !so if the PEset has not been previously declared, this will hang in MPI.
   2557 !if pelist is omitted, we reset pelist to the world pelist.
   2558     integer, intent(in), optional :: pelist(:)
   2559     logical, intent(in), optional :: no_sync
   2560     integer                       :: i
   2561 
   2562     if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_SET_CURRENT_PELIST: You must first call mpp_init.' )
   2563     if( PRESENT(pelist) )then
   2564        if( .NOT.ANY(pe.EQ.pelist) )call mpp_error( FATAL, 'MPP_SET_CURRENT_PELIST: pe must be in pelist.' )
   2565        current_peset_num = get_peset(pelist)
   2566     else
   2567        current_peset_num = world_peset_num
   2568     end if
   2569     call mpp_set_root_pe( MINVAL(peset(current_peset_num)%list(:)) )
   2570     if(.not.PRESENT(no_sync))call mpp_sync()  !this is called to make sure everyone in the current pelist is here.
   2571 !      npes = mpp_npes()
   2572     return
   2573   end subroutine mpp_set_current_pelist

Page 102         Source Listing                  MPP_SET_CURRENT_PELIST
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_util.inc



ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_set_current_pelist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   2564                                 scalar                    2564                              
 I                          Local  2560     I(4)            4           scalar                                                      
 MINVAL                     Func   2569                                 scalar                    2569                              
 MPP_SET_CURRENT_PELIST     Subr   2550                                                                                             
 MPP_SET_ROOT_PE            Subr   2569                                                           214,2569                          
 MPP_SYNC                   Subr   2570                                                           213,2570,2834,3902,3914,3986      
 NO_SYNC                    Dummy  2550     L(4)            4           scalar   ARG,IN           2570                              
 PELIST                     Dummy  2550     I(4)            4     1     1        ARG,IN           2563,2564,2565                    
 PRESENT                    Func   2563                                 scalar                    2563,2570                         
 WORLD_PESET_NUM            Local  2567     I(4)            4           scalar                    2567,3740,3741                    

Page 103         Source Listing                  MPP_SET_CURRENT_PELIST
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2574 
   2575 !#####################################################################
   2576   function mpp_get_current_pelist_name()
   2577 ! Simply return the current pelist name
   2578    character(len=len(peset(current_peset_num)%name)) :: mpp_get_current_pelist_name
   2579 
   2580    mpp_get_current_pelist_name = peset(current_peset_num)%name
   2581   end function mpp_get_current_pelist_name


ENTRY POINTS

  Name                                               
                                                     
 mpp_mod_mp_mpp_get_current_pelist_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LEN                        Func   2578                                 scalar                    2578                              
 MPP_GET_CURRENT_PELIST_NAM                                                                                                         
 E                          Func   2576     CHAR            32          scalar                                                      

Page 104         Source Listing                  MPP_GET_CURRENT_PELIST_NAME
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2582 
   2583 !#####################################################################
   2584 !this is created for use by mpp_define_domains within a pelist
   2585 !will be published but not publicized
   2586   subroutine mpp_get_current_pelist( pelist, name, commID )
   2587     integer, intent(out) :: pelist(:)
   2588     character(len=*), intent(out), optional :: name
   2589     integer, intent(out), optional :: commID
   2590 
   2591     if( size(pelist(:)).NE.size(peset(current_peset_num)%list(:)) ) &
   2592          call mpp_error( FATAL, 'MPP_GET_CURRENT_PELIST: size(pelist) is wrong.' )
   2593     pelist(:) = peset(current_peset_num)%list(:)
   2594     if( PRESENT(name) )name = peset(current_peset_num)%name
   2595 
   2596     if( PRESENT(commID) )commID = peset(current_peset_num)%id
   2597 
   2598 
   2599     return
   2600   end subroutine mpp_get_current_pelist


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_get_current_pelist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMMID                     Dummy  2586     I(4)            4           scalar   ARG,OUT          2596                              
 MPP_GET_CURRENT_PELIST     Subr   2586                                                                                             
 NAME                       Dummy  2586     CHAR                        scalar   ARG,OUT          2594                              
 PELIST                     Dummy  2586     I(4)            4     1     1        ARG,OUT          2591,2593                         
 PRESENT                    Func   2594                                 scalar                    2594,2596                         
 SIZE                       Func   2591                                 scalar                    2591                              

Page 105         Source Listing                  MPP_GET_CURRENT_PELIST
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2601 
   2602 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   2603 !                                                                             !
   2604 !                        PERFORMANCE PROFILING CALLS                          !
   2605 !                                                                             !
   2606 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   2607 ! <SUBROUTINE NAME="mpp_clock_set_grain">
   2608 !  <OVERVIEW>
   2609 !    Set the level of granularity of timing measurements.
   2610 !  </OVERVIEW>
   2611 !  <DESCRIPTION>
   2612 !    This routine and three other routines, mpp_clock_id, mpp_clock_begin(id),
   2613 !    and mpp_clock_end(id) may be used to time parallel code sections, and
   2614 !    extract parallel statistics. Clocks are identified by names, which
   2615 !    should be unique in the first 32 characters. The <TT>mpp_clock_id</TT>
   2616 !    call initializes a clock of a given name and returns an integer
   2617 !    <TT>id</TT>. This <TT>id</TT> can be used by subsequent
   2618 !    <TT>mpp_clock_begin</TT> and <TT>mpp_clock_end</TT> calls set around a
   2619 !    code section to be timed. Example:
   2620 !    <PRE>
   2621 !    integer :: id
   2622 !    id = mpp_clock_id( 'Atmosphere' )
   2623 !    call mpp_clock_begin(id)
   2624 !    call atmos_model()
   2625 !    call mpp_clock_end()
   2626 !    </PRE>
   2627 !     Two flags may be used to alter the behaviour of
   2628 !     <TT>mpp_clock</TT>. If the flag <TT>MPP_CLOCK_SYNC</TT> is turned on
   2629 !     by <TT>mpp_clock_id</TT>, the clock calls <TT>mpp_sync</TT> across all
   2630 !     the PEs in the current pelist at the top of the timed code section,
   2631 !     but allows each PE to complete the code section (and reach
   2632 !     <TT>mpp_clock_end</TT>) at different times. This allows us to measure
   2633 !     load imbalance for a given code section. Statistics are written to
   2634 !     <TT>stdout</TT> by <TT>mpp_exit</TT>.
   2635 !
   2636 !     The flag <TT>MPP_CLOCK_DETAILED</TT> may be turned on by
   2637 !     <TT>mpp_clock_id</TT> to get detailed communication
   2638 !     profiles. Communication events of the types <TT>SEND, RECV, BROADCAST,
   2639 !     REDUCE</TT> and <TT>WAIT</TT> are separately measured for data volume
   2640 !     and time. Statistics are written to <TT>stdout</TT> by
   2641 !     <TT>mpp_exit</TT>, and individual PE info is also written to the file
   2642 !     <TT>mpp_clock.out.####</TT> where <TT>####</TT> is the PE id given by
   2643 !     <TT>mpp_pe</TT>.
   2644 !
   2645 !     The flags <TT>MPP_CLOCK_SYNC</TT> and <TT>MPP_CLOCK_DETAILED</TT> are
   2646 !     integer parameters available by use association, and may be summed to
   2647 !     turn them both on.
   2648 !
   2649 !     While the nesting of clocks is allowed, please note that turning on
   2650 !     the non-optional flags on inner clocks has certain subtle issues.
   2651 !     Turning on <TT>MPP_CLOCK_SYNC</TT> on an inner
   2652 !     clock may distort outer clock measurements of load imbalance. Turning
   2653 !     on <TT>MPP_CLOCK_DETAILED</TT> will stop detailed measurements on its
   2654 !     outer clock, since only one detailed clock may be active at one time.
   2655 !     Also, detailed clocks only time a certain number of events per clock
   2656 !     (currently 40000) to conserve memory. If this array overflows, a
   2657 !     warning message is printed, and subsequent events for this clock are

Page 106         Source Listing                  MPP_GET_CURRENT_PELIST
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2658 !     not timed.
   2659 !
   2660 !     Timings are done using the <TT>f90</TT> standard
   2661 !     <TT>system_clock_mpi</TT> intrinsic.
   2662 !
   2663 !     The resolution of system_clock_mpi is often too coarse for use except
   2664 !     across large swaths of code. On SGI systems this is transparently
   2665 !     overloaded with a higher resolution clock made available in a
   2666 !     non-portable fortran interface made available by
   2667 !     <TT>nsclock.c</TT>. This approach will eventually be extended to other
   2668 !     platforms.
   2669 !
   2670 !     New behaviour added at the Havana release allows the user to embed
   2671 !     profiling calls at varying levels of granularity all over the code,
   2672 !     and for any particular run, set a threshold of granularity so that
   2673 !     finer-grained clocks become dormant.
   2674 !
   2675 !     The threshold granularity is held in the private module variable
   2676 !     <TT>clock_grain</TT>. This value may be modified by the call
   2677 !     <TT>mpp_clock_set_grain</TT>, and affect clocks initiated by
   2678 !     subsequent calls to <TT>mpp_clock_id</TT>. The value of
   2679 !     <TT>clock_grain</TT> is set to an arbitrarily large number initially.
   2680 !
   2681 !     Clocks initialized by <TT>mpp_clock_id</TT> can set a new optional
   2682 !     argument <TT>grain</TT> setting their granularity level. Clocks check
   2683 !     this level against the current value of <TT>clock_grain</TT>, and are
   2684 !     only triggered if they are <I>at or below ("coarser than")</I> the
   2685 !     threshold. Finer-grained clocks are dormant for that run.
   2686 !
   2687 !The following grain levels are pre-defined:
   2688 !
   2689 !<pre>
   2690 !!predefined clock granularities, but you can use any integer
   2691 !!using CLOCK_LOOP and above may distort coarser-grain measurements
   2692 !  integer, parameter, public :: CLOCK_COMPONENT=1 !component level, e.g model, exchange
   2693 !  integer, parameter, public :: CLOCK_SUBCOMPONENT=11 !top level within a model component, e.g dynamics, physics
   2694 !  integer, parameter, public :: CLOCK_MODULE=21 !module level, e.g main subroutine of a physics module
   2695 !  integer, parameter, public :: CLOCK_ROUTINE=31 !level of individual subroutine or function
   2696 !  integer, parameter, public :: CLOCK_LOOP=41 !loops or blocks within a routine
   2697 !  integer, parameter, public :: CLOCK_INFRA=51 !infrastructure level, e.g halo update
   2698 !</pre>
   2699 !
   2700 !     Note that subsequent changes to <TT>clock_grain</TT> do not
   2701 !     change the status of already initiated clocks, and that if the
   2702 !     optional <TT>grain</TT> argument is absent, the clock is always
   2703 !     triggered. This guarantees backward compatibility.
   2704 !  </DESCRIPTION>
   2705 !  <TEMPLATE>
   2706 !     call mpp_clock_set_grain( grain )
   2707 !  </TEMPLATE>
   2708 !  <IN NAME="grain" TYPE="integer"></IN>
   2709 ! </SUBROUTINE>
   2710 
   2711   subroutine mpp_clock_set_grain( grain )
   2712     integer, intent(in) :: grain
   2713 !set the granularity of times: only clocks whose grain is lower than
   2714 !clock_grain are triggered, finer-grained clocks are dormant.

Page 107         Source Listing                  MPP_CLOCK_SET_GRAIN
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2715 !clock_grain is initialized to CLOCK_LOOP, so all clocks above the loop level
   2716 !are triggered if this is never called.
   2717     if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_CLOCK_SET_GRAIN: You must first call mpp_init.' )
   2718 
   2719     clock_grain = grain
   2720     return
   2721   end subroutine mpp_clock_set_grain


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_clock_set_grain_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOCK_GRAIN                Local  2719     I(4)            4           scalar                    1165,2719,2788                    
 GRAIN                      Dummy  2711     I(4)            4           scalar   ARG,IN           2719                              
 MPP_CLOCK_SET_GRAIN        Subr   2711                                                                                             

Page 108         Source Listing                  MPP_CLOCK_SET_GRAIN
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2722 
   2723 !#####################################################################
   2724   subroutine clock_init( id, name, flags, grain )
   2725     integer,           intent(in) :: id
   2726     character(len=*),  intent(in) :: name
   2727     integer, intent(in), optional :: flags, grain
   2728     integer                       :: i
   2729 
   2730     clocks(id)%name = name
   2731     clocks(id)%hits = 0
   2732     clocks(id)%tick = 0
   2733     clocks(id)%total_ticks = 0
   2734     clocks(id)%sync_on_begin = .FALSE.
   2735     clocks(id)%detailed      = .FALSE.
   2736     clocks(id)%peset_num = current_peset_num
   2737     if( PRESENT(flags) )then
   2738        if( BTEST(flags,0) )clocks(id)%sync_on_begin = .TRUE.
   2739        if( BTEST(flags,1) )clocks(id)%detailed      = .TRUE.
   2740     end if
   2741     clocks(id)%grain = 0
   2742     if( PRESENT(grain) )clocks(id)%grain = grain
   2743     if( clocks(id)%detailed )then
   2744        allocate( clocks(id)%events(MAX_EVENT_TYPES) )
   2745        clocks(id)%events(EVENT_ALLREDUCE)%name = 'ALLREDUCE'
   2746        clocks(id)%events(EVENT_BROADCAST)%name = 'BROADCAST'
   2747        clocks(id)%events(EVENT_RECV)%name = 'RECV'
   2748        clocks(id)%events(EVENT_SEND)%name = 'SEND'
   2749        clocks(id)%events(EVENT_WAIT)%name = 'WAIT'
   2750        do i=1,MAX_EVENT_TYPES
   2751           clocks(id)%events(i)%ticks(:) = 0
   2752           clocks(id)%events(i)%bytes(:) = 0
   2753           clocks(id)%events(i)%calls = 0
   2754        end do
   2755        clock_summary(id)%name = name
   2756        clock_summary(id)%event(EVENT_ALLREDUCE)%name = 'ALLREDUCE'
   2757        clock_summary(id)%event(EVENT_BROADCAST)%name = 'BROADCAST'
   2758        clock_summary(id)%event(EVENT_RECV)%name = 'RECV'
   2759        clock_summary(id)%event(EVENT_SEND)%name = 'SEND'
   2760        clock_summary(id)%event(EVENT_WAIT)%name = 'WAIT'
   2761        do i=1,MAX_EVENT_TYPES
   2762           clock_summary(id)%event(i)%msg_size_sums(:) = 0.0
   2763           clock_summary(id)%event(i)%msg_time_sums(:) = 0.0
   2764           clock_summary(id)%event(i)%total_data = 0.0
   2765           clock_summary(id)%event(i)%total_time = 0.0
   2766           clock_summary(id)%event(i)%msg_size_cnts(:) = 0
   2767           clock_summary(id)%event(i)%total_cnts = 0
   2768        end do
   2769     end if
   2770     return
   2771   end subroutine clock_init

Page 109         Source Listing                  CLOCK_INIT
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_util.inc



ENTRY POINTS

  Name                              
                                    
 mpp_mod_mp_clock_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BTEST                      Func   2738                                 scalar                    2738,2739                         
 CLOCKS                     Local  2730     RECORD          152   1     400      SAVE             2730,2731,2732,2733,2734,2735,2736
                                                                                                  ,2738,2739,2741,2742,2743,2744,274
                                                                                                  5,2746,2747,2748,2749,2751,2752,27
                                                                                                  53,2799,2826,2828,2829,2830,2843,2
                                                                                                  844,2845,2861,2862,2865,2867,2870,
                                                                                                  2874,2880,2911,2913,2916,2919,2928
                                                                                                  ,2929,2966,2974,3095,3097,3103,311
                                                                                                  2,3116,3118,3119,3134,3138,3894,38
                                                                                                  98,3907,3916,3917,3921,3927,3928,3
                                                                                                  929,3930,3933,3938,3939,3940,3943,
                                                                                                  3948,3954,3960                    
 CLOCK_INIT                 Subr   2724                                                           2797,2807                         
 CLOCK_SUMMARY              Local  2755     RECORD          2616  1     400                       2755,2756,2757,2758,2759,2760,2762
                                                                                                  ,2763,2764,2765,2766,2767,2976,298
                                                                                                  4,2986,2988,2989,2991,3003,3016,30
                                                                                                  18,3019,3020,3032,3034,3036,3038,3
                                                                                                  047,3100,3101,3107,3108,3110,3111,
                                                                                                  3114,3115,3121,3122,3124,3125,3135
                                                                                                  ,3136,3139,3140,3142              
 EVENT_ALLREDUCE            Param  2745     I(4)            4           scalar   PRIV             173,2745,2756,7861,7881,7934,7954,
                                                                                                  8007,8027,8080,8100,8153,8173,8226
                                                                                                  ,8246,8299,8319,8372,8392,8458,862
                                                                                                  0,8782,8941,9102,9266,9430,9591   
 EVENT_BROADCAST            Param  2746     I(4)            4           scalar   PRIV             173,2746,2757,4050,4303,4931,5559,
                                                                                                  6184,6809,7434                    
 FLAGS                      Dummy  2724     I(4)            4           scalar   ARG,IN           2737,2738,2739                    
 GRAIN                      Dummy  2724     I(4)            4           scalar   ARG,IN           2742                              
 I                          Local  2728     I(4)            4           scalar                    2750,2751,2752,2753,2761,2762,2763
                                                                                                  ,2764,2765,2766,2767              
 ID                         Dummy  2724     I(4)            4           scalar   ARG,IN           2730,2731,2732,2733,2734,2735,2736
                                                                                                  ,2738,2739,2741,2742,2743,2744,274
                                                                                                  5,2746,2747,2748,2749,2751,2752,27
                                                                                                  53,2755,2756,2757,2758,2759,2760,2
                                                                                                  762,2763,2764,2765,2766,2767      
 MAX_EVENT_TYPES            Param  2744     I(4)            4           scalar   PRIV             172,279,2744,2750,2761,2982,3032,3
                                                                                                  034,3036,3038,3096,3130,3942      
 NAME                       Dummy  2724     CHAR                        scalar   ARG,IN           2730,2755                         
 PRESENT                    Func   2737                                 scalar                    2737,2742                         



Page 110         Source Listing                  CLOCK_INIT
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util.inc

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 CLOCK.DETAILED             L(4)            4     64             scalar   PRIV             2735,2739,2743,2911,2966,2974,3095 
                                                                                           ,3898,3907,3933,3938               
 CLOCK.EVENTS               RECORD          64002 72       1     1        PTR,PRIV         2744,2745,2746,2747,2748,2749,2751 
                                            4                                              ,2752,2753,2913,2919,2928,2929,309 
                                                                                           7,3103,3112,3116,3118,3119,3134,31 
                                                                                           38,3943,3948,3954,3960             
 CLOCK.GRAIN                I(4)            4     68             scalar   PRIV             2741,2742,3928                     
 CLOCK.HITS                 I(8)            8     32             scalar   PRIV             2731,2844,3927                     
 CLOCK.NAME                 CHAR            32    0              scalar   PRIV             2730,2799,2829,2862,2916,3927,3930 
                                                                                           ,3960                              
 CLOCK.PESET_NUM            I(4)            4     56             scalar   PRIV             2736,2826,2865,3916,3917,3928,3929 
                                                                                           ,3939,3940                         
 CLOCK.SYNC_ON_BEGIN        L(4)            4     60             scalar   PRIV             2734,2738,2830                     
 CLOCK.TICK                 I(8)            8     40             scalar   PRIV             2732,2843,2867,2870                
 CLOCK.TOTAL_TICKS          I(8)            8     48             scalar   PRIV             2733,2874,3894,3921,3930           
 CLOCK_DATA_SUMMARY.MSG_SIZE_CNTS                                                                                          ...
                            I(8)            8     352      1     20       PRIV             2766,3003,3016,3107,3108,3135      
 CLOCK_DATA_SUMMARY.MSG_SIZE_SUMS                                                                                          ...
                            R(8)            8     16       1     20       PRIV             2762,3018,3019,3110,3111           
 CLOCK_DATA_SUMMARY.MSG_TIME_SUMS                                                                                          ...
                            R(8)            8     176      1     20       PRIV             2763,3020,3121,3122,3139,3140,3142 
 CLOCK_DATA_SUMMARY.NAME    CHAR            16    0              scalar   PRIV             2756,2757,2758,2759,2760,2991,3038 
 CLOCK_DATA_SUMMARY.TOTAL_CNTS                                                                                             ...
                            I(8)            8     512            scalar   PRIV             2767,2989,3036,3100,3101,3136      
 CLOCK_DATA_SUMMARY.TOTAL_DATA                                                                                             ...
                            R(8)            8     336            scalar   PRIV             2764,2988,3114,3115                
 CLOCK_DATA_SUMMARY.TOTAL_TIME                                                                                             ...
                            R(8)            8     344            scalar   PRIV             2765,2984,2986,3032,3034,3124,3125 
                                                                                           ,3142                              
 EVENT.BYTES                I(8)            8     320016   1     40000    PRIV             2752,2929,3103,3112,3116,3948      
 EVENT.CALLS                I(4)            4     640016         scalar   PRIV             2753,2913,2919,3097,3134,3943      
 EVENT.NAME                 CHAR            16    0              scalar   PRIV             2745,2746,2747,2748,2749,3960      
 EVENT.TICKS                I(8)            8     16       1     40000    PRIV             2751,2928,3118,3119,3138,3954      
 SUMMARY_STRUCT.EVENT       RECORD          520   16       1     5        PRIV             2756,2757,2758,2759,2760,2762,2763 
                                                                                           ,2764,2765,2766,2767,2984,2986,298 
                                                                                           8,2989,2991,3003,3016,3018,3019,30 
                                                                                           20,3032,3034,3036,3038,3100,3101,3 
                                                                                           107,3108,3110,3111,3114,3115,3121, 
                                                                                           3122,3124,3125,3135,3136,3139,3140 
                                                                                           ,3142                              
 SUMMARY_STRUCT.NAME        CHAR            16    0              scalar   PRIV             2755,2976,3047                     

Page 111         Source Listing                  CLOCK_INIT
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2772 
   2773 !#####################################################################
   2774 !return an ID for a new or existing clock
   2775   function mpp_clock_id( name, flags, grain )
   2776     integer                       :: mpp_clock_id
   2777     character(len=*),  intent(in) :: name
   2778     integer, intent(in), optional :: flags, grain
   2779     integer                       :: i
   2780 
   2781     if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_CLOCK_ID: You must first call mpp_init.')
   2782 
   2783 !if grain is present, the clock is only triggered if it
   2784 !is low ("coarse") enough: compared to clock_grain
   2785 !finer-grained clocks are dormant.
   2786 !if grain is absent, clock is triggered.
   2787     if( PRESENT(grain) )then
   2788        if( grain.GT.clock_grain )then
   2789           mpp_clock_id = 0
   2790           return
   2791        end if
   2792     end if
   2793     mpp_clock_id = 1
   2794 
   2795     if( clock_num.EQ.0 )then  !first
   2796        clock_num = mpp_clock_id
   2797        call clock_init(mpp_clock_id,name,flags)
   2798     else
   2799        FIND_CLOCK: do while( trim(name).NE.trim(clocks(mpp_clock_id)%name) )
   2800           mpp_clock_id = mpp_clock_id + 1
   2801           if( mpp_clock_id.GT.clock_num )then
   2802              if( mpp_clock_id.GT.MAX_CLOCKS )then
   2803                 call mpp_error( FATAL, 'MPP_CLOCK_ID: too many clock requests, ' // &
   2804                       'check your clock id request or increase MAX_CLOCKS.')
   2805              else               !new clock: initialize
   2806                 clock_num = mpp_clock_id
   2807                 call clock_init(mpp_clock_id,name,flags,grain)
   2808                 exit FIND_CLOCK
   2809              end if
   2810           end if
   2811        end do FIND_CLOCK
   2812     endif
   2813     return
   2814   end function mpp_clock_id

Page 112         Source Listing                  MPP_CLOCK_ID
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_util.inc



ENTRY POINTS

  Name                                
                                      
 mpp_mod_mp_mpp_clock_id_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOCK_NUM                  Local  2795     I(4)            4           scalar                    1138,2795,2796,2801,2806,2823,2859
                                                                                                  ,2910,2966,2972,3094,3897,3898,390
                                                                                                  7,3915,3933,3936                  
 FIND_CLOCK                 Label  2799                                 scalar                    2808,2811                         
 FLAGS                      Dummy  2775     I(4)            4           scalar   ARG,IN           2797,2807                         
 GRAIN                      Dummy  2775     I(4)            4           scalar   ARG,IN           2787,2788,2807                    
 I                          Local  2779     I(4)            4           scalar                                                      
 MAX_CLOCKS                 Param  2802     I(4)            4           scalar   PRIV             172,1132,1138,1162,2802,2839      
 MPP_CLOCK_ID               Func   2775     I(4)            4           scalar                                                      
 NAME                       Dummy  2775     CHAR                        scalar   ARG,IN           2797,2799,2807                    
 PRESENT                    Func   2787                                 scalar                    2787                              
 TRIM                       Func   2799                                 scalar                    2799                              

Page 113         Source Listing                  MPP_CLOCK_ID
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2815 
   2816 !#####################################################################
   2817   subroutine mpp_clock_begin(id)
   2818     integer, intent(in) :: id
   2819 
   2820     if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_CLOCK_BEGIN: You must first call mpp_init.' )
   2821     if( .not. mpp_record_timing_data)return
   2822     if( id.EQ.0 )return
   2823     if( id.LT.0 .OR. id.GT.clock_num )call mpp_error( FATAL, 'MPP_CLOCK_BEGIN: invalid id.' )
   2824 
   2825 !$OMP MASTER
   2826     if( clocks(id)%peset_num.NE.current_peset_num ) &
   2827          call mpp_error( FATAL, 'MPP_CLOCK_BEGIN: cannot change pelist context of a clock.' )
   2828     if( clocks(id)%is_on) call mpp_error(FATAL, 'MPP_CLOCK_BEGIN: mpp_clock_begin is called again '// &
   2829                 'before calling mpp_clock_end for the clock '//trim(clocks(id)%name) )
   2830     if( clocks(id)%sync_on_begin .OR. sync_all_clocks )then
   2831 !do an untimed sync at the beginning of the clock
   2832 !this puts all PEs in the current pelist on par, so that measurements begin together
   2833 !ending time will be different, thus measuring load imbalance for this clock.
   2834        call mpp_sync()
   2835     end if
   2836 
   2837     if (debug) then
   2838       num_clock_ids = num_clock_ids+1
   2839       if(num_clock_ids > MAX_CLOCKS)call mpp_error(FATAL,'MPP_CLOCK_BEGIN: max num previous_clock exceeded.' )
   2840       previous_clock(num_clock_ids) = current_clock
   2841       current_clock = id
   2842     endif
   2843     call system_clock_mpi( clocks(id)%tick )
   2844     clocks(id)%hits = clocks(id)%hits + 1
   2845     clocks(id)%is_on = .true.
   2846 !$OMP END MASTER
   2847     return
   2848   end subroutine mpp_clock_begin

Page 114         Source Listing                  MPP_CLOCK_BEGIN
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_util.inc



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_clock_begin_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ID                         Dummy  2817     I(4)            4           scalar   ARG,IN           2822,2823,2826,2828,2829,2830,2841
                                                                                                  ,2843,2844,2845                   
 MPP_CLOCK_BEGIN            Subr   2817                                                                                             
 MPP_RECORD_TIMING_DATA     Local  2821     L(4)            4           scalar                    216,1131,1231,2821,2857,2888,2895,
                                                                                                  2908                              
 NUM_CLOCK_IDS              Local  2838     I(4)            4           scalar                    1138,2838,2839,2840,2876,2877,2878
 PREVIOUS_CLOCK             Local  2840     I(4)            4     1     400                       1138,2840,2877                    
 SYNC_ALL_CLOCKS            Local  2830     L(4)            4           scalar                    1230,1231,2830,3788               
 TRIM                       Func   2829                                 scalar                    2829                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 CLOCK.IS_ON                L(4)            4     144            scalar   PRIV             2828,2845,2861,2880                

Page 115         Source Listing                  MPP_CLOCK_BEGIN
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2849 
   2850 !#####################################################################
   2851   subroutine mpp_clock_end(id)
   2852     integer, intent(in) :: id
   2853     integer(i8_kind)  :: delta
   2854     integer             :: errunit
   2855 
   2856     if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_CLOCK_END: You must first call mpp_init.' )
   2857     if( .not. mpp_record_timing_data)return
   2858     if( id.EQ.0 )return
   2859     if( id.LT.0 .OR. id.GT.clock_num )call mpp_error( FATAL, 'MPP_CLOCK_BEGIN: invalid id.' )
   2860 !$OMP MASTER
   2861     if( .NOT. clocks(id)%is_on) call mpp_error(FATAL, 'MPP_CLOCK_END: mpp_clock_end is called '// &
   2862                 'before calling mpp_clock_begin for the clock '//trim(clocks(id)%name) )
   2863 
   2864     call system_clock_mpi(end_tick)
   2865     if( clocks(id)%peset_num.NE.current_peset_num ) &
   2866          call mpp_error( FATAL, 'MPP_CLOCK_END: cannot change pelist context of a clock.' )
   2867     delta = end_tick - clocks(id)%tick
   2868     if( delta.LT.0 )then
   2869        errunit = stderr()
   2870        write( errunit,* )'pe, id, start_tick, end_tick, delta, max_ticks=', pe, id, clocks(id)%tick, end_tick, delta, max_ti
   2870 cks
   2871        delta = delta + max_ticks + 1
   2872        call mpp_error( WARNING, 'MPP_CLOCK_END: Clock rollover, assumed single roll.' )
   2873     end if
   2874     clocks(id)%total_ticks = clocks(id)%total_ticks + delta
   2875     if (debug) then
   2876       if(num_clock_ids < 1) call mpp_error(NOTE,'MPP_CLOCK_END: min num previous_clock < 1.' )
   2877       current_clock = previous_clock(num_clock_ids)
   2878       num_clock_ids = num_clock_ids-1
   2879     endif
   2880     clocks(id)%is_on = .false.
   2881 !$OMP END MASTER
   2882     return
   2883   end subroutine mpp_clock_end

Page 116         Source Listing                  MPP_CLOCK_END
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_util.inc



ENTRY POINTS

  Name                                 
                                       
 mpp_mod_mp_mpp_clock_end_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DELTA                      Local  2853     I(8)            8           scalar                    2867,2868,2870,2871,2874          
 END_TICK                   Local  2864     I(8)            8           scalar                    2864,2867,2870,2912,2920,2924     
 ERRUNIT                    Local  2854     I(4)            4           scalar                    2869,2870                         
 ID                         Dummy  2851     I(4)            4           scalar   ARG,IN           2858,2859,2861,2862,2865,2867,2870
                                                                                                  ,2874,2880                        
 MAX_TICKS                  Local  2870     I(8)            8           scalar                    2870,2871,2924,2925,3745,3870     
 MPP_CLOCK_END              Subr   2851                                                                                             
 TRIM                       Func   2862                                 scalar                    2862                              

Page 117         Source Listing                  MPP_CLOCK_END
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2884 
   2885 !#####################################################################
   2886   subroutine mpp_record_time_start()
   2887 
   2888      mpp_record_timing_data = .TRUE.
   2889 
   2890   end subroutine mpp_record_time_start


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_record_time_start_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_RECORD_TIME_START      Subr   2886                                                                                             

Page 118         Source Listing                  MPP_RECORD_TIME_START
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2891 
   2892 !#####################################################################
   2893   subroutine mpp_record_time_end()
   2894 
   2895      mpp_record_timing_data = .FALSE.
   2896 
   2897   end subroutine mpp_record_time_end


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_record_time_end_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_RECORD_TIME_END        Subr   2893                                                                                             

Page 119         Source Listing                  MPP_RECORD_TIME_END
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2898 
   2899 
   2900 !#####################################################################
   2901   subroutine increment_current_clock( event_id, bytes )
   2902     integer,           intent(in) :: event_id
   2903     integer, intent(in), optional :: bytes
   2904     integer                       :: n
   2905     integer(i8_kind)            :: delta
   2906     integer                       :: errunit
   2907 
   2908     if( .not. mpp_record_timing_data )return
   2909     if( .not.debug .or. (current_clock.EQ.0) )return
   2910     if( current_clock.LT.0 .OR. current_clock.GT.clock_num )call mpp_error( FATAL, 'MPP_CLOCK_BEGIN: invalid current_clock.'
   2910  )
   2911     if( .NOT.clocks(current_clock)%detailed )return
   2912     call system_clock_mpi(end_tick)
   2913     n = clocks(current_clock)%events(event_id)%calls + 1
   2914 
   2915     if( n.EQ.MAX_EVENTS )call mpp_error( WARNING, &
   2916          'MPP_CLOCK: events exceed MAX_EVENTS, ignore detailed profiling data for clock '//trim(clocks(current_clock)%name) 
   2916 )
   2917     if( n.GT.MAX_EVENTS )return
   2918 
   2919     clocks(current_clock)%events(event_id)%calls = n
   2920     delta = end_tick - start_tick
   2921     if( delta.LT.0 )then
   2922        errunit = stderr()
   2923        write( errunit,* )'pe, event_id, start_tick, end_tick, delta, max_ticks=', &
   2924                            pe, event_id, start_tick, end_tick, delta, max_ticks
   2925        delta = delta + max_ticks + 1
   2926        call mpp_error( WARNING, 'MPP_CLOCK_END: Clock rollover, assumed single roll.' )
   2927     end if
   2928     clocks(current_clock)%events(event_id)%ticks(n) = delta
   2929     if( PRESENT(bytes) )clocks(current_clock)%events(event_id)%bytes(n) = bytes
   2930     return
   2931   end subroutine increment_current_clock

Page 120         Source Listing                  INCREMENT_CURRENT_CLOCK
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_util.inc



ENTRY POINTS

  Name                                           
                                                 
 mpp_mod_mp_increment_current_clock_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BYTES                      Dummy  2901     I(4)            4           scalar   ARG,IN           2929                              
 DELTA                      Local  2905     I(8)            8           scalar                    2920,2921,2924,2925,2928          
 ERRUNIT                    Local  2906     I(4)            4           scalar                    2922,2923                         
 EVENT_ID                   Dummy  2901     I(4)            4           scalar   ARG,IN           2913,2919,2924,2928,2929          
 INCREMENT_CURRENT_CLOCK    Subr   2901                                                           1463,1538,4050,4197,4247,4252,4303
                                                                                                  ,4825,4875,4880,4931,5453,5503,550
                                                                                                  8,5559,6078,6128,6133,6184,6703,67
                                                                                                  53,6758,6809,7328,7378,7383,7434,7
                                                                                                  861,7881,7934,7954,8007,8027,8080,
                                                                                                  8100,8153,8173,8226,8246,8299,8319
                                                                                                  ,8372,8392,8458,8620,8782,8941,910
                                                                                                  2,9266,9430,9591,9751,9781,9824,98
                                                                                                  83,9913,9956,10015,10045,10088,101
                                                                                                  47,10177,10220,10279,10309,10352,1
                                                                                                  0411,10441,10484,10543,10573,10616
                                                                                                  ,10675,10705,10748,10864,10974,110
                                                                                                  84,11194,11304,11414,11524,11634,1
                                                                                                  1677                              
 MAX_EVENTS                 Param  2915     I(4)            4           scalar   PRIV             172,246,2915,2917                 
 N                          Local  2904     I(4)            4           scalar                    2913,2915,2917,2919,2928,2929     
 PRESENT                    Func   2929                                 scalar                    2929                              
 TRIM                       Func   2916                                 scalar                    2916                              

Page 121         Source Listing                  INCREMENT_CURRENT_CLOCK
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2932 
   2933 !#####################################################################
   2934 
   2935   subroutine dump_clock_summary()
   2936 
   2937     real              :: total_time,total_time_all,total_data
   2938     real              :: msg_size,eff_BW,s
   2939     integer           :: SD_UNIT, total_calls
   2940     integer           :: i,j,k,ct, msg_cnt
   2941     character(len=2)  :: u
   2942     character(len=20) :: filename
   2943     character(len=20),dimension(MAX_BINS),save :: bin
   2944 
   2945     data bin( 1)  /'  0   -    8    B:  '/
   2946     data bin( 2)  /'  8   -   16    B:  '/
   2947     data bin( 3)  /' 16   -   32    B:  '/
   2948     data bin( 4)  /' 32   -   64    B:  '/
   2949     data bin( 5)  /' 64   -  128    B:  '/
   2950     data bin( 6)  /'128   -  256    B:  '/
   2951     data bin( 7)  /'256   -  512    B:  '/
   2952     data bin( 8)  /'512   - 1024    B:  '/
   2953     data bin( 9)  /'  1.0 -    2.1 KB:  '/
   2954     data bin(10)  /'  2.1 -    4.1 KB:  '/
   2955     data bin(11)  /'  4.1 -    8.2 KB:  '/
   2956     data bin(12)  /'  8.2 -   16.4 KB:  '/
   2957     data bin(13)  /' 16.4 -   32.8 KB:  '/
   2958     data bin(14)  /' 32.8 -   65.5 KB:  '/
   2959     data bin(15)  /' 65.5 -  131.1 KB:  '/
   2960     data bin(16)  /'131.1 -  262.1 KB:  '/
   2961     data bin(17)  /'262.1 -  524.3 KB:  '/
   2962     data bin(18)  /'524.3 - 1048.6 KB:  '/
   2963     data bin(19)  /'  1.0 -    2.1 MB:  '/
   2964     data bin(20)  /' >2.1          MB:  '/
   2965 
   2966     if( .NOT.ANY(clocks(1:clock_num)%detailed) )return
   2967     write( filename,'(a,i6.6)' )'mpp_clock.out.', pe
   2968 
   2969     SD_UNIT = get_unit()
   2970     open(SD_UNIT,file=trim(filename),form='formatted')
   2971 
   2972     COMM_TYPE: do ct = 1,clock_num
   2973 
   2974        if( .NOT.clocks(ct)%detailed )cycle
   2975        write(SD_UNIT,*) &
   2976             clock_summary(ct)%name(1:15),' Communication Data for PE ',pe
   2977 
   2978        write(SD_UNIT,*) ' '
   2979        write(SD_UNIT,*) ' '
   2980 
   2981        total_time_all = 0.0
   2982        EVENT_TYPE: do k = 1,MAX_EVENT_TYPES-1
   2983 
   2984           if(clock_summary(ct)%event(k)%total_time == 0.0)cycle
   2985 
   2986           total_time = clock_summary(ct)%event(k)%total_time
   2987           total_time_all = total_time_all + total_time
   2988           total_data = clock_summary(ct)%event(k)%total_data

Page 122         Source Listing                  DUMP_CLOCK_SUMMARY
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   2989           total_calls = clock_summary(ct)%event(k)%total_cnts
   2990 
   2991           write(SD_UNIT,1000) clock_summary(ct)%event(k)%name(1:9) // ':'
   2992 
   2993           write(SD_UNIT,1001) 'Total Data: ',total_data*1.0e-6, &
   2994                'MB; Total Time: ', total_time, &
   2995                'secs; Total Calls: ',total_calls
   2996 
   2997           write(SD_UNIT,*) ' '
   2998           write(SD_UNIT,1002) '     Bin            Counts      Avg Size        Eff B/W'
   2999           write(SD_UNIT,*) ' '
   3000 
   3001           BIN_LOOP: do j=1,MAX_BINS
   3002 
   3003              if(clock_summary(ct)%event(k)%msg_size_cnts(j)==0)cycle
   3004 
   3005              if(j<=8)then
   3006                 s = 1.0
   3007                 u = ' B'
   3008              elseif(j<=18)then
   3009                 s = 1.0e-3
   3010                 u = 'KB'
   3011              else
   3012                 s = 1.0e-6
   3013                 u = 'MB'
   3014              endif
   3015 
   3016              msg_cnt = clock_summary(ct)%event(k)%msg_size_cnts(j)
   3017              msg_size = &
   3018                   s*(clock_summary(ct)%event(k)%msg_size_sums(j)/real(msg_cnt))
   3019              eff_BW = (1.0e-6)*( clock_summary(ct)%event(k)%msg_size_sums(j) / &
   3020                   clock_summary(ct)%event(k)%msg_time_sums(j) )
   3021 
   3022              write(SD_UNIT,1003) bin(j),msg_cnt,msg_size,u,eff_BW
   3023 
   3024           end do BIN_LOOP
   3025 
   3026           write(SD_UNIT,*) ' '
   3027           write(SD_UNIT,*) ' '
   3028        end do EVENT_TYPE
   3029 
   3030 ! "Data-less" WAIT
   3031 
   3032        if(clock_summary(ct)%event(MAX_EVENT_TYPES)%total_time>0.0)then
   3033 
   3034           total_time = clock_summary(ct)%event(MAX_EVENT_TYPES)%total_time
   3035           total_time_all = total_time_all + total_time
   3036           total_calls = clock_summary(ct)%event(MAX_EVENT_TYPES)%total_cnts
   3037 
   3038           write(SD_UNIT,1000) clock_summary(ct)%event(MAX_EVENT_TYPES)%name(1:9) // ':'
   3039 
   3040           write(SD_UNIT,1004) 'Total Calls: ',total_calls,'; Total Time: ', &
   3041                total_time,'secs'
   3042 
   3043        endif
   3044 
   3045        write(SD_UNIT,*) ' '

Page 123         Source Listing                  DUMP_CLOCK_SUMMARY
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3046        write(SD_UNIT,1005) 'Total communication time spent for ' // &
   3047             clock_summary(ct)%name(1:9) // ': ',total_time_all,'secs'
   3048        write(SD_UNIT,*) ' '
   3049        write(SD_UNIT,*) ' '
   3050        write(SD_UNIT,*) ' '
   3051 
   3052     end do COMM_TYPE
   3053 
   3054     close(SD_UNIT)
   3055 
   3056 1000 format(a)
   3057 1001 format(a,f8.2,a,f8.2,a,i6)
   3058 1002 format(a)
   3059 1003 format(a,i6,'    ','  ',f9.1,a,'    ',f9.2,'MB/sec')
   3060 1004 format(a,i8,a,f9.2,a)
   3061 1005 format(a,f9.2,a)
   3062     return
   3063   end subroutine dump_clock_summary


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_dump_clock_summary_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 1000                       Label  3056                                                           2991,3038                         
 1001                       Label  3057                                                           2993                              
 1002                       Label  3058                                                           2998                              
 1003                       Label  3059                                                           3022                              
 1004                       Label  3060                                                           3040                              
 1005                       Label  3061                                                           3046                              
 ANY                        Func   2966                                 scalar                    2966                              
 BIN                        Local  2943     CHAR            20    1     20       SAVE             2945,2946,2947,2948,2949,2950,2951
                                                                                                  ,2952,2953,2954,2955,2956,2957,295
                                                                                                  8,2959,2960,2961,2962,2963,2964,30
                                                                                                  22                                
 BIN_LOOP                   Label  3001                                 scalar                    3024                              
 COMM_TYPE                  Label  2972                                 scalar                    3052                              
 CT                         Local  2940     I(4)            4           scalar                    2972,2974,2976,2984,2986,2988,2989
                                                                                                  ,2991,3003,3016,3018,3019,3020,303
                                                                                                  2,3034,3036,3038,3047             
 DUMP_CLOCK_SUMMARY         Subr   2935                                                           3899                              
 EFF_BW                     Local  2938     R(8)            8           scalar                    3019,3022                         
 EVENT_TYPE                 Label  2982                                 scalar                    3028                              
 FILENAME                   Local  2942     CHAR            20          scalar                    2967,2970                         
 I                          Local  2940     I(4)            4           scalar                                                      
 J                          Local  2940     I(4)            4           scalar                    3001,3003,3005,3008,3016,3018,3019
                                                                                                  ,3020,3022                        
 K                          Local  2940     I(4)            4           scalar                    2982,2984,2986,2988,2989,2991,3003
                                                                                                  ,3016,3018,3019,3020              
 MAX_BINS                   Param  2943     I(4)            4           scalar   PRIV             172,268,269,272,2943,3001,3155    

Page 124         Source Listing                  DUMP_CLOCK_SUMMARY
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MSG_CNT                    Local  2940     I(4)            4           scalar                    3016,3018,3022                    
 MSG_SIZE                   Local  2938     R(8)            8           scalar                    3017,3022                         
 REAL                       Func   3018                                 scalar                    3018                              
 S                          Local  2938     R(8)            8           scalar                    3006,3009,3012,3018               
 SD_UNIT                    Local  2939     I(4)            4           scalar                    2969,2970,2975,2978,2979,2991,2993
                                                                                                  ,2997,2998,2999,3022,3026,3027,303
                                                                                                  8,3040,3045,3046,3048,3049,3050,30
                                                                                                  54                                
 TOTAL_CALLS                Local  2939     I(4)            4           scalar                    2989,2995,3036,3040               
 TOTAL_DATA                 Local  2937     R(8)            8           scalar                    2988,2993                         
 TOTAL_TIME                 Local  2937     R(8)            8           scalar                    2986,2987,2994,3034,3035,3041     
 TOTAL_TIME_ALL             Local  2937     R(8)            8           scalar                    2981,2987,3035,3047               
 TRIM                       Func   2970                                 scalar                    2970                              
 U                          Local  2941     CHAR            2           scalar                    3007,3010,3013,3022               

Page 125         Source Listing                  DUMP_CLOCK_SUMMARY
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3064 
   3065 !#####################################################################
   3066 
   3067   integer function get_unit()
   3068 
   3069     integer,save :: i
   3070     logical      :: l_open
   3071 
   3072 !  9 is reserved for etc_unit
   3073     do i=10,99
   3074        inquire(unit=i,opened=l_open)
   3075        if(.not.l_open)exit
   3076     end do
   3077 
   3078     if(i==100)then
   3079        call mpp_error(FATAL,'Unable to get I/O unit')
   3080     else
   3081        get_unit = i
   3082     endif
   3083 
   3084     return
   3085   end function get_unit


ENTRY POINTS

  Name                            
                                  
 mpp_mod_mp_get_unit_             

Page 126         Source Listing                  GET_UNIT
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_UNIT                   Func   3067     I(4)            4           scalar                                                      
 I                          Local  3069     I(4)            4           scalar   SAVE             3073,3074,3078,3081               
 L_OPEN                     Local  3070     L(4)            4           scalar                    3074,3075                         

Page 127         Source Listing                  GET_UNIT
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3086 
   3087 !#####################################################################
   3088 
   3089   subroutine sum_clock_data()
   3090 
   3091     integer :: i,j,k,ct,event_size,event_cnt
   3092     real    :: msg_time
   3093 
   3094     CLOCK_TYPE: do ct=1,clock_num
   3095        if( .NOT.clocks(ct)%detailed )cycle
   3096        EVENT_TYPE: do j=1,MAX_EVENT_TYPES-1
   3097           event_cnt = clocks(ct)%events(j)%calls
   3098           EVENT_SUMMARY: do i=1,event_cnt
   3099 
   3100              clock_summary(ct)%event(j)%total_cnts = &
   3101                   clock_summary(ct)%event(j)%total_cnts + 1
   3102 
   3103              event_size = clocks(ct)%events(j)%bytes(i)
   3104 
   3105              k = find_bin(event_size)
   3106 
   3107              clock_summary(ct)%event(j)%msg_size_cnts(k) = &
   3108                   clock_summary(ct)%event(j)%msg_size_cnts(k) + 1
   3109 
   3110              clock_summary(ct)%event(j)%msg_size_sums(k) = &
   3111                   clock_summary(ct)%event(j)%msg_size_sums(k) &
   3112                   + clocks(ct)%events(j)%bytes(i)
   3113 
   3114              clock_summary(ct)%event(j)%total_data = &
   3115                   clock_summary(ct)%event(j)%total_data &
   3116                   + clocks(ct)%events(j)%bytes(i)
   3117 
   3118              msg_time = clocks(ct)%events(j)%ticks(i)
   3119              msg_time = tick_rate * real( clocks(ct)%events(j)%ticks(i) )
   3120 
   3121              clock_summary(ct)%event(j)%msg_time_sums(k) = &
   3122                   clock_summary(ct)%event(j)%msg_time_sums(k) + msg_time
   3123 
   3124              clock_summary(ct)%event(j)%total_time = &
   3125                   clock_summary(ct)%event(j)%total_time + msg_time
   3126 
   3127           end do EVENT_SUMMARY
   3128        end do EVENT_TYPE
   3129 
   3130        j = MAX_EVENT_TYPES ! WAITs
   3131 ! "msg_size_cnts" doesn't really mean anything for WAIT
   3132 ! but position will be used to store number of counts for now.
   3133 
   3134        event_cnt = clocks(ct)%events(j)%calls
   3135        clock_summary(ct)%event(j)%msg_size_cnts(1) = event_cnt
   3136        clock_summary(ct)%event(j)%total_cnts       = event_cnt
   3137 
   3138        msg_time = tick_rate * real( sum ( clocks(ct)%events(j)%ticks(1:event_cnt) ) )
   3139        clock_summary(ct)%event(j)%msg_time_sums(1) = &
   3140             clock_summary(ct)%event(j)%msg_time_sums(1) + msg_time
   3141 
   3142        clock_summary(ct)%event(j)%total_time = clock_summary(ct)%event(j)%msg_time_sums(1)

Page 128         Source Listing                  FIND_BIN
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3143 
   3144     end do CLOCK_TYPE
   3145 
   3146     return
   3147   contains
   3148     integer function find_bin(event_size)
   3149 
   3150       integer,intent(in) :: event_size
   3151       integer            :: k,msg_size
   3152 
   3153       msg_size = 8
   3154       k = 1
   3155       do while(event_size>msg_size .and. k<MAX_BINS)
   3156          k = k+1
   3157          msg_size = msg_size*2
   3158       end do
   3159       find_bin = k
   3160       return
   3161     end function find_bin


ENTRY POINTS

  Name                                          
                                                
 mpp_modsum_clock_data_mp_find_bin_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 EVENT_SIZE                 Dummy  3148     I(4)            4           scalar   ARG,IN           3155                              
 FIND_BIN                   Func   3148     I(4)            4           scalar                    3105,3159                         
 K                          Local  3151     I(4)            4           scalar                    3154,3155,3156,3159               
 MSG_SIZE                   Local  3151     I(4)            4           scalar                    3153,3155,3157                    

Page 129         Source Listing                  FIND_BIN
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3162 
   3163   end subroutine sum_clock_data


ENTRY POINTS

  Name                                  
                                        
 mpp_mod_mp_sum_clock_data_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOCK_TYPE                 Label  3094                                 scalar                    3144                              
 CT                         Local  3091     I(4)            4           scalar                    3094,3095,3097,3100,3101,3103,3107
                                                                                                  ,3108,3110,3111,3112,3114,3115,311
                                                                                                  6,3118,3119,3121,3122,3124,3125,31
                                                                                                  34,3135,3136,3138,3139,3140,3142  
 EVENT_CNT                  Local  3091     I(4)            4           scalar                    3097,3098,3134,3135,3136,3138     
 EVENT_SIZE                 Local  3091     I(4)            4           scalar                    3103,3105                         
 EVENT_SUMMARY              Label  3098                                 scalar                    3127                              
 EVENT_TYPE                 Label  3096                                 scalar                    3128                              
 FIND_BIN@0                 Local  3148     I(4)            4           scalar                                                      
 I                          Local  3091     I(4)            4           scalar                    3098,3103,3112,3116,3118,3119     
 J                          Local  3091     I(4)            4           scalar                    3096,3097,3100,3101,3103,3107,3108
                                                                                                  ,3110,3111,3112,3114,3115,3116,311
                                                                                                  8,3119,3121,3122,3124,3125,3130,31
                                                                                                  34,3135,3136,3138,3139,3140,3142  
 K                          Local  3091     I(4)            4           scalar                    3105,3107,3108,3110,3111,3121,3122
 MSG_TIME                   Local  3092     R(8)            8           scalar                    3118,3119,3122,3125,3138,3140     
 REAL                       Func   3119                                 scalar                    3119,3138                         
 SUM                        Func   3138                                 scalar                    3138                              
 SUM_CLOCK_DATA             Subr   3089                                                           3899                              
 TICK_RATE                  Local  3119     R(8)            8           scalar                    3119,3138,3746,3868,3870,3894,3921
                                                                                                  ,3930,3954                        

Page 130         Source Listing                  FIND_BIN
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3164 
   3165 !#####################################################################
   3166 ! This routine will double the size of peset and copy the original peset data
   3167 ! into the expanded one. The maximum allowed to expand is PESET_MAX.
   3168   subroutine expand_peset()
   3169      integer :: old_peset_max,n
   3170      type(communicator), allocatable :: peset_old(:)
   3171 
   3172      old_peset_max = current_peset_max
   3173      if(old_peset_max .GE. PESET_MAX) call mpp_error(FATAL, &
   3174          "mpp_mod(expand_peset): the number of peset reached PESET_MAX, increase PESET_MAX or contact developer")
   3175 
   3176 ! copy data to a tempoary data
   3177      allocate(peset_old(0:old_peset_max))
   3178      do n = 0, old_peset_max
   3179         peset_old(n)%count      = peset(n)%count
   3180         peset_old(n)%id         = peset(n)%id
   3181         peset_old(n)%group      = peset(n)%group
   3182         peset_old(n)%name       = peset(n)%name
   3183         peset_old(n)%start      = peset(n)%start
   3184         peset_old(n)%log2stride = peset(n)%log2stride
   3185 
   3186         if( ASSOCIATED(peset(n)%list) ) then
   3187            allocate(peset_old(n)%list(size(peset(n)%list(:))) )
   3188            peset_old(n)%list(:) = peset(n)%list(:)
   3189            deallocate(peset(n)%list)
   3190         endif
   3191      enddo
   3192      deallocate(peset)
   3193 
   3194 ! create the new peset
   3195      current_peset_max = min(PESET_MAX, 2*old_peset_max)
   3196      allocate(peset(0:current_peset_max))
   3197      peset(:)%count = -1
   3198      peset(:)%id = -1
   3199      peset(:)%group = -1
   3200      peset(:)%start = -1
   3201      peset(:)%log2stride = -1
   3202      peset(:)%name  = " "
   3203      do n = 0, old_peset_max
   3204         peset(n)%count      = peset_old(n)%count
   3205         peset(n)%id         = peset_old(n)%id
   3206         peset(n)%group      = peset_old(n)%group
   3207         peset(n)%name       = peset_old(n)%name
   3208         peset(n)%start      = peset_old(n)%start
   3209         peset(n)%log2stride = peset_old(n)%log2stride
   3210 
   3211         if( ASSOCIATED(peset_old(n)%list) ) then
   3212            allocate(peset(n)%list(size(peset_old(n)%list(:))) )
   3213            peset(n)%list(:) = peset_old(n)%list(:)
   3214            deallocate(peset_old(n)%list)
   3215         endif
   3216      enddo
   3217      deallocate(peset_old)
   3218 
   3219      call mpp_error(NOTE, "mpp_mod(expand_peset): size of peset is expanded to ", current_peset_max)
   3220 

Page 131         Source Listing                  EXPAND_PESET
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3221   end subroutine expand_peset


ENTRY POINTS

  Name                                
                                      
 mpp_mod_mp_expand_peset_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   3186                                 scalar                    3186,3211                         
 COMMUNICATOR               Type   3170                     128         scalar                    241,1122,3170                     
 EXPAND_PESET               Subr   3168                                                           1430                              
 MIN                        Func   3195                                 scalar                    3195                              
 N                          Local  3169     I(4)            4           scalar                    3178,3179,3180,3181,3182,3183,3184
                                                                                                  ,3186,3187,3188,3189,3203,3204,320
                                                                                                  5,3206,3207,3208,3209,3211,3212,32
                                                                                                  13,3214                           
 OLD_PESET_MAX              Local  3169     I(4)            4           scalar                    3172,3173,3177,3178,3195,3203     
 PESET_MAX                  Param  3173     I(4)            4           scalar                    3173,3195                         
 PESET_OLD                  Local  3170     RECORD          128   1     1        ALC              3177,3179,3180,3181,3182,3183,3184
                                                                                                  ,3187,3188,3204,3205,3206,3207,320
                                                                                                  8,3209,3211,3212,3213,3214,3217   
 SIZE                       Func   3187                                 scalar                    3187,3212                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 COMMUNICATOR.LOG2STRIDE    I(4)            4     112            scalar   PRIV             3184,3201,3209,3731                
 COMMUNICATOR.START         I(4)            4     108            scalar   PRIV             3183,3200,3208,3730                

Page 132         Source Listing                  EXPAND_PESET
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3222 !#####################################################################
   3223 
   3224   function uppercase (cs)
   3225     character(len=*), intent(in) :: cs
   3226     character(len=len(cs)),target       :: uppercase
   3227     integer                      :: k,tlen
   3228     character, pointer :: ca
   3229     integer, parameter :: co=iachar('A')-iachar('a') ! case offset
   3230 !The transfer function truncates the string with xlf90_r
   3231     tlen = len_trim(cs)
   3232     if(tlen <= 0) then      ! catch IBM compiler bug
   3233        uppercase = cs  ! simply return input blank string
   3234     else
   3235     uppercase = cs(1:tlen)
   3236     do k=1, tlen
   3237        ca => uppercase(k:k)
   3238        if(ca >= "a" .and. ca <= "z") ca = achar(ichar(ca)+co)
   3239     enddo
   3240     endif
   3241   end function uppercase


ENTRY POINTS

  Name                             
                                   
 mpp_mod_mp_uppercase_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACHAR                      Func   3238                                 scalar                    3238                              
 CA                         Local  3228     CHAR            1           scalar   PTR              3237,3238                         
 CO                         Param  3229     I(4)            4           scalar                    3238                              
 CS                         Dummy  3224     CHAR                        scalar   ARG,IN           3226,3231,3233,3235               
 IACHAR                     Func   3229                                 scalar                    3229                              
 ICHAR                      Func   3238                                 scalar                    3238                              
 K                          Local  3227     I(4)            4           scalar                    3236,3237                         
 LEN                        Func   3226                                 scalar   PRIV             3226                              
 LEN_TRIM                   Func   3231                                 scalar                    3231                              
 TLEN                       Local  3227     I(4)            4           scalar                    3231,3232,3235,3236               
 UPPERCASE                  Func   3224     CHAR                        scalar   TGT                                                

Page 133         Source Listing                  UPPERCASE
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3242 
   3243 !#######################################################################
   3244 
   3245   function lowercase (cs)
   3246     character(len=*), intent(in) :: cs
   3247     character(len=len(cs)),target       :: lowercase
   3248     integer, parameter :: co=iachar('a')-iachar('A') ! case offset
   3249     integer                        :: k,tlen
   3250     character, pointer :: ca
   3251 !  The transfer function truncates the string with xlf90_r
   3252     tlen = len_trim(cs)
   3253     if(tlen <= 0) then      ! catch IBM compiler bug
   3254        lowercase = cs  ! simply return input blank string
   3255     else
   3256     lowercase = cs(1:tlen)
   3257     do k=1, tlen
   3258        ca => lowercase(k:k)
   3259        if(ca >= "A" .and. ca <= "Z") ca = achar(ichar(ca)+co)
   3260     enddo
   3261     endif
   3262   end function lowercase


ENTRY POINTS

  Name                             
                                   
 mpp_mod_mp_lowercase_             

Page 134         Source Listing                  LOWERCASE
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACHAR                      Func   3259                                 scalar                    3259                              
 CA                         Local  3250     CHAR            1           scalar   PTR              3258,3259                         
 CO                         Param  3248     I(4)            4           scalar                    3259                              
 CS                         Dummy  3245     CHAR                        scalar   ARG,IN           3247,3252,3254,3256               
 IACHAR                     Func   3248                                 scalar                    3248                              
 ICHAR                      Func   3259                                 scalar                    3259                              
 K                          Local  3249     I(4)            4           scalar                    3257,3258                         
 LEN                        Func   3247                                 scalar   PRIV             3247                              
 LEN_TRIM                   Func   3252                                 scalar                    3252                              
 LOWERCASE                  Func   3245     CHAR                        scalar   TGT                                                
 TLEN                       Local  3249     I(4)            4           scalar                    3252,3253,3256,3257               

Page 135         Source Listing                  LOWERCASE
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3263 
   3264 
   3265 !#######################################################################
   3266 
   3267 !-----------------------------------------------------------------------
   3268 !
   3269 ! AUTHOR: Rusty Benson (rusty.benson@noaa.gov)
   3270 !
   3271 !
   3272 ! THESE LINES MUST BE PRESENT IN MPP.F90
   3273 !
   3274 ! ! parameter defining length of character variables
   3275 !   integer, parameter :: INPUT_STR_LENGTH = 256
   3276 ! ! public variable needed for reading input.nml from an internal file
   3277 !   character(len=INPUT_STR_LENGTH), dimension(:), allocatable, public :: input_nml_file
   3278 !
   3279 
   3280 !-----------------------------------------------------------------------
   3281 ! subroutine READ_INPUT_NML
   3282 !
   3283 !
   3284 ! Reads an existing input.nml into a character array and broadcasts
   3285 ! it to the non-root mpi-tasks. This allows the use of reads from an
   3286 ! internal file for namelist settings (requires 2003 compliant compiler)
   3287 !
   3288 ! read(input_nml_file, nml=<name_nml>, iostat=status)
   3289 !
   3290 !
   3291   subroutine read_input_nml(pelist_name_in)
   3292 
   3293 ! Include variable "version" to be written to log file.
   3294 # 1 "../include/file_version.h" 1 
   3295 ! -*-f90-*-
   3296 !***********************************************************************
   3297 !*                   GNU Lesser General Public License
   3298 !*
   3299 !* This file is part of the GFDL Flexible Modeling System (FMS).
   3300 !*
   3301 !* FMS is free software: you can redistribute it and/or modify it under
   3302 !* the terms of the GNU Lesser General Public License as published by
   3303 !* the Free Software Foundation, either version 3 of the License, or (at
   3304 !* your option) any later version.
   3305 !*
   3306 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   3307 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   3308 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   3309 !* for more details.
   3310 !*
   3311 !* You should have received a copy of the GNU Lesser General Public
   3312 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   3313 !***********************************************************************
   3314 
   3315 # 23
   3316 
   3317   character(len=*), parameter :: version = 'unknown'
   3318 
   3319 # 1300 "../mpp/include/mpp_util.inc" 2 

Page 136         Source Listing                  READ_INPUT_NML
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3320 
   3321     character(len=*), intent(in), optional :: pelist_name_in
   3322 ! private variables
   3323     integer :: log_unit
   3324     integer :: i
   3325     integer, dimension(2) :: lines_and_length
   3326     logical :: file_exist
   3327     character(len=len(peset(current_peset_num)%name)) :: pelist_name
   3328     character(len=128) :: filename
   3329 
   3330 ! check the status of input_nml_file
   3331     if ( allocated(input_nml_file) ) then
   3332       deallocate(input_nml_file)
   3333     endif
   3334 
   3335 ! the following code is necessary for using alternate namelist files (nests, stretched grids, etc)
   3336     if (PRESENT(pelist_name_in)) then
   3337 ! test to make sure length of pelist_name_in is <= pelist_name
   3338       if (LEN(pelist_name_in) > LEN(pelist_name)) then
   3339         call mpp_error(FATAL,  &
   3340            "mpp_util.inc: read_input_nml optional argument pelist_name_in has size greater than local pelist_name")
   3341       else
   3342         pelist_name = pelist_name_in
   3343       endif
   3344     else
   3345       pelist_name = mpp_get_current_pelist_name()
   3346     endif
   3347     filename='input_'//trim(pelist_name)//'.nml'
   3348     inquire(FILE=filename, EXIST=file_exist)
   3349     if (.not. file_exist ) then
   3350        filename='input.nml'
   3351     endif
   3352     lines_and_length = get_ascii_file_num_lines_and_length(filename)
   3353     allocate(character(len=lines_and_length(2))::input_nml_file(lines_and_length(1)))
   3354     call read_ascii_file(filename, lines_and_length(2), input_nml_file)
   3355 
   3356 ! write info logfile
   3357     if (pe == root_pe) then
   3358        log_unit = stdlog()
   3359        write(log_unit,'(a)')  '========================================================================'
   3360        write(log_unit,'(a)')  'READ_INPUT_NML: '//trim(version)
   3361        write(log_unit,'(a)')  'READ_INPUT_NML: '//trim(filename)//' '
   3362        do i = 1, lines_and_length(1)
   3363           write(log_unit,*) trim(input_nml_file(i))
   3364        enddo
   3365     end if
   3366   end subroutine read_input_nml

Page 137         Source Listing                  READ_INPUT_NML
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_util.inc



ENTRY POINTS

  Name                                  
                                        
 mpp_mod_mp_read_input_nml_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   3331                                 scalar                    3331                              
 FILENAME                   Local  3328     CHAR            128         scalar                    3347,3348,3350,3352,3354,3361     
 FILE_EXIST                 Local  3326     L(4)            4           scalar                    3348,3349                         
 GET_ASCII_FILE_NUM_LINES_A                                                                                                         
 ND_LENGTH                  Func   3352     I(4)            4     1     2                         218,3352,3454,3497,3498           
 GET_ASCII_FILE_NUM_LINES_A                                                                                                         
 ND_LENGTH@0                Local  3352     I(4)            4     1     2                                                           
 I                          Local  3324     I(4)            4           scalar                    3362,3363                         
 INPUT_NML_FILE             Local  3331     CHAR                  1     1        ALC,TGT          1192,3331,3332,3353,3354,3363,3779
 LEN                        Func   3327                                 scalar                    3327,3338                         
 LINES_AND_LENGTH           Local  3325     I(4)            4     1     2                         3352,3353,3354,3362               
 LOG_UNIT                   Local  3323     I(4)            4           scalar                    3358,3359,3360,3361,3363          
 MPP_GET_CURRENT_PELIST_NAM                                                                                                         
 E                          Func   3345     CHAR            32          scalar                    215,2580,3345                     
 PELIST_NAME                Local  3327     CHAR            32          scalar                    3338,3342,3345,3347               
 PELIST_NAME_IN             Dummy  3291     CHAR                        scalar   ARG,IN           3336,3338,3342                    
 PRESENT                    Func   3336                                 scalar                    3336                              
 READ_ASCII_FILE            Subr   3354                                                           217,3354                          
 READ_INPUT_NML             Subr   3291                                                                                             
 TRIM                       Func   3347                                 scalar                    3347,3360,3361,3363               
 VERSION                    Param  3317     CHAR            7           scalar                    3360                              

Page 138         Source Listing                  READ_INPUT_NML
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3367 
   3368 
   3369 !#######################################################################
   3370 !z1l: This is extracted from read_ascii_file
   3371   function get_ascii_file_num_lines(FILENAME, LENGTH, PELIST)
   3372     character(len=*), intent(in) :: FILENAME
   3373     integer, intent(in) :: LENGTH
   3374     integer, intent(in), optional, dimension(:) :: PELIST
   3375 
   3376     integer :: num_lines, get_ascii_file_num_lines
   3377     character(len=LENGTH) :: str_tmp
   3378     character(len=5) :: text
   3379     integer :: status, f_unit, from_pe
   3380     logical :: file_exist
   3381 
   3382     if( read_ascii_file_on) then
   3383        call mpp_error(FATAL,  &
   3384           "mpp_util.inc: get_ascii_file_num_lines is called again before calling read_ascii_file")
   3385     endif
   3386     read_ascii_file_on = .true.
   3387 
   3388     from_pe = root_pe
   3389     get_ascii_file_num_lines = -1
   3390     num_lines = -1
   3391     if ( pe == root_pe ) then
   3392        inquire(FILE=FILENAME, EXIST=file_exist)
   3393 
   3394        if ( file_exist ) then
   3395           f_unit = get_unit()
   3396           open(UNIT=f_unit, FILE=FILENAME, ACTION='READ', STATUS='OLD', IOSTAT=status)
   3397 
   3398           if ( status .ne. 0 ) then
   3399              write (UNIT=text, FMT='(I5)') status
   3400              call mpp_error(FATAL, 'get_ascii_file_num_lines: Error opening file:' //trim(FILENAME)// &
   3401                             '.  (IOSTAT = '//trim(text)//')')
   3402           else
   3403              num_lines = 1
   3404              do
   3405                 read (UNIT=f_unit, FMT='(A)', IOSTAT=status) str_tmp
   3406                 if ( status .lt. 0 ) exit
   3407                 if ( status .gt. 0 ) then
   3408                    write (UNIT=text, FMT='(I5)') num_lines
   3409                    call mpp_error(FATAL, 'get_ascii_file_num_lines: Error reading line '//trim(text)// &
   3410                         ' in file '//trim(FILENAME)//'.')
   3411                 end if
   3412                 if ( len_trim(str_tmp) == LENGTH ) then
   3413                    write(UNIT=text, FMT='(I5)') length
   3414                    call mpp_error(FATAL, 'get_ascii_file_num_lines: Length of output string ('//trim(text)//' is too small.&
   3415                         & Increase the LENGTH value.')
   3416                 end if
   3417                 num_lines = num_lines + 1
   3418              end do
   3419              close(UNIT=f_unit)
   3420           end if
   3421        else
   3422           call mpp_error(FATAL, 'get_ascii_file_num_lines: File '//trim(FILENAME)//' does not exist.')
   3423        end if

Page 139         Source Listing                  GET_ASCII_FILE_NUM_LINES
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3424     end if
   3425 
   3426 ! Broadcast number of lines
   3427     call mpp_broadcast(num_lines, from_pe, PELIST=PELIST)
   3428     get_ascii_file_num_lines = num_lines
   3429 
   3430   end function get_ascii_file_num_lines


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_get_ascii_file_num_lines_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILENAME                   Dummy  3371     CHAR                        scalar   ARG,IN           3392,3396,3400,3410,3422          
 FILE_EXIST                 Local  3380     L(4)            4           scalar                    3392,3394                         
 FROM_PE                    Local  3379     I(4)            4           scalar                    3388,3427                         
 F_UNIT                     Local  3379     I(4)            4           scalar                    3395,3396,3405,3419               
 GET_ASCII_FILE_NUM_LINES   Func   3371     I(4)            4           scalar                                                      
 LENGTH                     Dummy  3371     I(4)            4           scalar   ARG,IN           3377,3412,3413                    
 LEN_TRIM                   Func   3412                                 scalar                    3412                              
 MPP_BROADCAST              Local  3427                                 scalar                    224,3427,3495,3496,3636,4209,4624,
                                                                                                  4640,4656,4672,4837,5252,5268,5284
                                                                                                  ,5300,5465,5880,5896,5912,5928,609
                                                                                                  0,6505,6521,6537,6553,6715,7130,71
                                                                                                  46,7162,7178,7340,7755,7771,7787,7
                                                                                                  803,9101,9265,9429,9590           
 NUM_LINES                  Local  3376     I(4)            4           scalar                    3390,3403,3408,3417,3427,3428     
 PELIST                     Dummy  3371     I(4)            4     1     1        ARG,IN           3427                              
 READ_ASCII_FILE_ON         Local  3382     L(4)            4           scalar                    1193,3382,3386,3447,3451,3564,3568
 STATUS                     Local  3379     I(4)            4           scalar                    3396,3398,3399,3405,3406,3407     
 STR_TMP                    Local  3377     CHAR                        scalar                    3405,3412                         
 TEXT                       Local  3378     CHAR            5           scalar                    3399,3401,3408,3409,3413,3414     
 TRIM                       Func   3400                                 scalar                    3400,3401,3409,3410,3414,3422     

Page 140         Source Listing                  GET_ASCII_FILE_NUM_LINES
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3431 
   3432 !#######################################################################
   3433 !> @brief Function to determine the maximum line length and number of lines from an ascii file
   3434   function get_ascii_file_num_lines_and_length(FILENAME, PELIST)
   3435     character(len=*), intent(in) :: FILENAME !< name of the file to be read
   3436     integer, intent(in), optional, dimension(:) :: PELIST !< optional pelist
   3437 
   3438     integer, dimension(2) :: get_ascii_file_num_lines_and_length !< number of lines (1) and
   3439 !! max line length (2)
   3440     integer :: num_lines, max_length
   3441     integer, parameter :: LENGTH=1024
   3442     character(len=LENGTH) :: str_tmp
   3443     character(len=5) :: text
   3444     integer :: status, f_unit, from_pe
   3445     logical :: file_exist
   3446 
   3447     if( read_ascii_file_on) then
   3448        call mpp_error(FATAL,  &
   3449           "mpp_util.inc: get_ascii_file_num_lines is called again before calling read_ascii_file")
   3450     endif
   3451     read_ascii_file_on = .true.
   3452 
   3453     from_pe = root_pe
   3454     get_ascii_file_num_lines_and_length = -1
   3455     num_lines = -1
   3456     max_length = -1
   3457     if ( pe == root_pe ) then
   3458        inquire(FILE=FILENAME, EXIST=file_exist)
   3459 
   3460        if ( file_exist ) then
   3461           f_unit = get_unit()
   3462           open(UNIT=f_unit, FILE=FILENAME, ACTION='READ', STATUS='OLD', IOSTAT=status)
   3463 
   3464           if ( status .ne. 0 ) then
   3465              write (UNIT=text, FMT='(I5)') status
   3466              call mpp_error(FATAL, 'get_ascii_file_num_lines: Error opening file:' //trim(FILENAME)// &
   3467                             '.  (IOSTAT = '//trim(text)//')')
   3468           else
   3469              num_lines = 1
   3470              do
   3471                 read (UNIT=f_unit, FMT='(A)', IOSTAT=status) str_tmp
   3472                 if ( status .lt. 0 ) exit
   3473                 if ( status .gt. 0 ) then
   3474                    write (UNIT=text, FMT='(I5)') num_lines
   3475                    call mpp_error(FATAL, 'get_ascii_file_num_lines: Error reading line '//trim(text)// &
   3476                         ' in file '//trim(FILENAME)//'.')
   3477                 end if
   3478                 if ( len_trim(str_tmp) == LENGTH ) then
   3479                    write(UNIT=text, FMT='(I5)') length
   3480                    call mpp_error(FATAL, 'get_ascii_file_num_lines: Length of output string ('//trim(text)//' is too small.&
   3481                         & Increase the LENGTH value.')
   3482                 end if
   3483                 if (len_trim(str_tmp) > max_length) max_length = len_trim(str_tmp)
   3484                 num_lines = num_lines + 1
   3485              end do
   3486              close(UNIT=f_unit)
   3487           end if

Page 141         Source Listing                  GET_ASCII_FILE_NUM_LINES_AND_LENGTH
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3488        else
   3489           call mpp_error(FATAL, 'get_ascii_file_num_lines: File '//trim(FILENAME)//' does not exist.')
   3490        end if
   3491        max_length = max_length+1
   3492     end if
   3493 
   3494 ! Broadcast number of lines
   3495     call mpp_broadcast(num_lines, from_pe, PELIST=PELIST)
   3496     call mpp_broadcast(max_length, from_pe, PELIST=PELIST)
   3497     get_ascii_file_num_lines_and_length(1) = num_lines
   3498     get_ascii_file_num_lines_and_length(2) = max_length
   3499 
   3500   end function get_ascii_file_num_lines_and_length


ENTRY POINTS

  Name                                                       
                                                             
 mpp_mod_mp_get_ascii_file_num_lines_and_length_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILENAME                   Dummy  3434     CHAR                        scalar   ARG,IN           3458,3462,3466,3476,3489          
 FILE_EXIST                 Local  3445     L(4)            4           scalar                    3458,3460                         
 FROM_PE                    Local  3444     I(4)            4           scalar                    3453,3495,3496                    
 F_UNIT                     Local  3444     I(4)            4           scalar                    3461,3462,3471,3486               
 GET_ASCII_FILE_NUM_LINES_A                                                                                                         
 ND_LENGTH                  Func   3434     I(4)            4     1     2                                                           
 LENGTH                     Param  3441     I(4)            4           scalar                    3442,3478,3479                    
 LEN_TRIM                   Func   3478                                 scalar                    3478,3483                         
 MAX_LENGTH                 Local  3440     I(4)            4           scalar                    3456,3483,3491,3496,3498          
 NUM_LINES                  Local  3440     I(4)            4           scalar                    3455,3469,3474,3484,3495,3497     
 PELIST                     Dummy  3434     I(4)            4     1     1        ARG,IN           3495,3496                         
 STATUS                     Local  3444     I(4)            4           scalar                    3462,3464,3465,3471,3472,3473     
 STR_TMP                    Local  3442     CHAR            1024        scalar                    3471,3478,3483                    
 TEXT                       Local  3443     CHAR            5           scalar                    3465,3467,3474,3475,3479,3480     
 TRIM                       Func   3466                                 scalar                    3466,3467,3475,3476,3480,3489     

Page 142         Source Listing                  GET_ASCII_FILE_NUM_LINES_AND_LENGTH
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3501 
   3502 !-----------------------------------------------------------------------
   3503 !
   3504 ! AUTHOR: Rusty Benson <rusty.benson@noaa.gov>,
   3505 !         Seth Underwood <Seth.Underwood@noaa.gov>
   3506 !
   3507 !-----------------------------------------------------------------------
   3508 ! subroutine READ_ASCII_FILE
   3509 !
   3510 !
   3511 ! Reads any ascii file into a character array and broadcasts
   3512 ! it to the non-root mpi-tasks.  Based off READ_INPUT_NML.
   3513 !
   3514 ! Passed in 'Content' array, must be of the form:
   3515 ! character(len=LENGTH), dimension(:), allocatable :: array_name
   3516 !
   3517 ! Reads from this array must be done in a do loop over the number of
   3518 ! lines, i.e.:
   3519 !
   3520 ! do i=1, num_lines
   3521 !    read (UNIT=array_name(i), FMT=*) var1, var2, ...
   3522 ! end do
   3523 !
   3524   subroutine read_ascii_file(FILENAME, LENGTH, Content, PELIST)
   3525     character(len=*),    intent(in)               :: FILENAME
   3526     integer,             intent(in)               :: LENGTH
   3527     character(len=*), intent(inout), dimension(:) :: Content
   3528     integer, intent(in), optional,   dimension(:) :: PELIST
   3529 
   3530 ! Include variable "version" to be written to log file.
   3531 # 1 "../include/file_version.h" 1 
   3532 ! -*-f90-*-
   3533 !***********************************************************************
   3534 !*                   GNU Lesser General Public License
   3535 !*
   3536 !* This file is part of the GFDL Flexible Modeling System (FMS).
   3537 !*
   3538 !* FMS is free software: you can redistribute it and/or modify it under
   3539 !* the terms of the GNU Lesser General Public License as published by
   3540 !* the Free Software Foundation, either version 3 of the License, or (at
   3541 !* your option) any later version.
   3542 !*
   3543 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   3544 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   3545 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   3546 !* for more details.
   3547 !*
   3548 !* You should have received a copy of the GNU Lesser General Public
   3549 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   3550 !***********************************************************************
   3551 
   3552 # 23
   3553 
   3554   character(len=*), parameter :: version = 'unknown'
   3555 
   3556 # 1512 "../mpp/include/mpp_util.inc" 2 
   3557 

Page 143         Source Listing                  READ_ASCII_FILE
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3558     character(len=5) :: text
   3559     logical :: file_exist
   3560     integer :: status, i, f_unit, log_unit
   3561     integer :: from_pe
   3562     integer :: pnum_lines, num_lines
   3563 
   3564     if( .NOT. read_ascii_file_on) then
   3565        call mpp_error(FATAL,  &
   3566           "mpp_util.inc: get_ascii_file_num_lines needs to be called before calling read_ascii_file")
   3567     endif
   3568     read_ascii_file_on = .false.
   3569 
   3570     from_pe = root_pe
   3571     num_lines = size(Content(:))
   3572 
   3573     if ( pe == root_pe ) then
   3574 ! write info logfile
   3575        log_unit = stdlog()
   3576        write(log_unit,'(a)')  '========================================================================'
   3577        write(log_unit,'(a)')  'READ_ASCII_FILE: '//trim(version)
   3578        write(log_unit,'(a)')  'READ_ASCII_FILE: File: '//trim(FILENAME)
   3579 
   3580        inquire(FILE=FILENAME, EXIST=file_exist)
   3581 
   3582        if ( file_exist ) then
   3583           f_unit = get_unit()
   3584           open(UNIT=f_unit, FILE=FILENAME, ACTION='READ', STATUS='OLD', IOSTAT=status)
   3585 
   3586           if ( status .ne. 0 ) then
   3587              write (UNIT=text, FMT='(I5)') status
   3588              call mpp_error(FATAL, 'READ_ASCII_FILE: Error opening file: '//trim(FILENAME)//'.  (IOSTAT = '//trim(text)//')'
   3588 )
   3589           else
   3590 
   3591              if ( num_lines .gt. 0 ) then
   3592                 Content(:) = ' '
   3593 
   3594                 rewind(UNIT=f_unit, IOSTAT=status)
   3595                 if ( status .ne. 0 ) then
   3596                    write (UNIT=text, FMT='(I5)') status
   3597                    call mpp_error(FATAL, 'READ_ASCII_FILE: Unable to re-read file '//trim(FILENAME)//'. (IOSTAT = '&
   3598                         //trim(text)//'.')
   3599                 else
   3600 ! A second 'sanity' check on the file
   3601                    pnum_lines = 1
   3602 
   3603                    do
   3604                       read (UNIT=f_unit, FMT='(A)', IOSTAT=status) Content(pnum_lines)
   3605 
   3606                       if ( status .lt. 0 ) exit
   3607                       if ( status .gt. 0 ) then
   3608                          write (UNIT=text, FMT='(I5)') pnum_lines
   3609                          call mpp_error(FATAL, 'READ_ASCII_FILE: Error reading line '//trim(text)//' in file '//trim(FILENAM
   3609 E)//'.')
   3610                       end if
   3611                       if(pnum_lines > num_lines) then
   3612                          call mpp_error(FATAL, 'READ_ASCII_FILE: number of lines in file '//trim(FILENAME)// &

Page 144         Source Listing                  READ_ASCII_FILE
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3613                                 ' is greater than size(Content(:)). ')
   3614                       end if
   3615                       if ( len_trim(Content(pnum_lines)) == LENGTH ) then
   3616                          write(UNIT=text, FMT='(I5)') length
   3617                          call mpp_error(FATAL, 'READ_ASCII_FILE: Length of output string ('//trim(text)//' is too small.&
   3618                               & Increase the LENGTH value.')
   3619                       end if
   3620                       pnum_lines = pnum_lines + 1
   3621                    end do
   3622                    if(num_lines .NE. pnum_lines) then
   3623                       call mpp_error(FATAL, 'READ_ASCII_FILE: number of lines in file '//trim(FILENAME)// &
   3624                           ' does not equal to size(Content(:)) ' )
   3625                    end if
   3626                 end if
   3627              end if
   3628              close(UNIT=f_unit)
   3629           end if
   3630        else
   3631           call mpp_error(FATAL, 'READ_ASCII_FILE: File '//trim(FILENAME)//' does not exist.')
   3632        end if
   3633     end if
   3634 
   3635 ! Broadcast character array
   3636     call mpp_broadcast(Content, LENGTH, from_pe, PELIST=PELIST)
   3637 
   3638   end subroutine read_ascii_file


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_read_ascii_file_             

Page 145         Source Listing                  READ_ASCII_FILE
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONTENT                    Dummy  3524     CHAR                  1     1        ARG,INOUT        3571,3592,3604,3615,3636          
 FILENAME                   Dummy  3524     CHAR                        scalar   ARG,IN           3578,3580,3584,3588,3597,3609,3612
                                                                                                  ,3623,3631                        
 FILE_EXIST                 Local  3559     L(4)            4           scalar                    3580,3582                         
 FROM_PE                    Local  3561     I(4)            4           scalar                    3570,3636                         
 F_UNIT                     Local  3560     I(4)            4           scalar                    3583,3584,3594,3604,3628          
 I                          Local  3560     I(4)            4           scalar                                                      
 LENGTH                     Dummy  3524     I(4)            4           scalar   ARG,IN           3615,3616,3636                    
 LEN_TRIM                   Func   3615                                 scalar                    3615                              
 LOG_UNIT                   Local  3560     I(4)            4           scalar                    3575,3576,3577,3578               
 NUM_LINES                  Local  3562     I(4)            4           scalar                    3571,3591,3611,3622               
 PELIST                     Dummy  3524     I(4)            4     1     1        ARG,IN           3636                              
 PNUM_LINES                 Local  3562     I(4)            4           scalar                    3601,3604,3608,3611,3615,3620,3622
 READ_ASCII_FILE            Subr   3524                                                                                             
 SIZE                       Func   3571                                 scalar                    3571                              
 STATUS                     Local  3560     I(4)            4           scalar                    3584,3586,3587,3594,3595,3596,3604
                                                                                                  ,3606,3607                        
 TEXT                       Local  3558     CHAR            5           scalar                    3587,3588,3596,3598,3608,3609,3616
                                                                                                  ,3617                             
 TRIM                       Func   3577                                 scalar                    3577,3578,3588,3597,3598,3609,3612
                                                                                                  ,3617,3623,3631                   
 VERSION                    Param  3554     CHAR            7           scalar                    3577                              

Page 146         Source Listing                  READ_ASCII_FILE
2021-06-01 08:51                                 ../mpp/include/mpp_util.inc

   3639 # 1302 "mpp.F90" 2 
   3640 # 1 "../mpp/include/mpp_comm.inc" 1 
   3641 ! -*-f90-*-
   3642 
   3643 !***********************************************************************
   3644 !*                   GNU Lesser General Public License
   3645 !*
   3646 !* This file is part of the GFDL Flexible Modeling System (FMS).
   3647 !*
   3648 !* FMS is free software: you can redistribute it and/or modify it under
   3649 !* the terms of the GNU Lesser General Public License as published by
   3650 !* the Free Software Foundation, either version 3 of the License, or (at
   3651 !* your option) any later version.
   3652 !*
   3653 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   3654 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   3655 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   3656 !* for more details.
   3657 !*
   3658 !* You should have received a copy of the GNU Lesser General Public
   3659 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   3660 !***********************************************************************
   3661 
   3662 
   3663 # 1 "../mpp/include/mpp_comm_mpi.inc" 1 
   3664 ! -*-f90-*-
   3665 
   3666 
   3667 !***********************************************************************
   3668 !*                   GNU Lesser General Public License
   3669 !*
   3670 !* This file is part of the GFDL Flexible Modeling System (FMS).
   3671 !*
   3672 !* FMS is free software: you can redistribute it and/or modify it under
   3673 !* the terms of the GNU Lesser General Public License as published by
   3674 !* the Free Software Foundation, either version 3 of the License, or (at
   3675 !* your option) any later version.
   3676 !*
   3677 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   3678 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   3679 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   3680 !* for more details.
   3681 !*
   3682 !* You should have received a copy of the GNU Lesser General Public
   3683 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   3684 !***********************************************************************
   3685 
   3686 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   3687 !                                                                             !
   3688 !       ROUTINES TO INITIALIZE/FINALIZE MPP MODULE: mpp_init, mpp_exit        !
   3689 !                                                                             !
   3690 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   3691 !    subroutine mpp_init( flags, in, out, err, log )
   3692 !      integer, optional, intent(in) :: flags, in, out, err, log
   3693   subroutine mpp_init( flags, localcomm, test_level )
   3694   integer, optional, intent(in) :: flags
   3695   integer, optional, intent(in) :: localcomm

Page 147         Source Listing                  MPP_INIT
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   3696   integer, optional, intent(in) :: test_level
   3697   integer                       :: my_pe, num_pes, len, i, iunit
   3698   logical                       :: opened, existed
   3699   integer                       :: unit_begin, unit_end, unit_nml, io_status
   3700   integer                       :: t_level
   3701   character(len=5) :: this_pe
   3702   type(mpp_type), pointer :: dtype
   3703 
   3704   if( module_is_initialized )return
   3705 
   3706   call MPI_INITIALIZED( opened, error ) !in case called from another MPI package
   3707   if(opened .and. .NOT. PRESENT(localcomm)) call mpp_error( FATAL, 'MPP_INIT: communicator is required' )
   3708   if( .NOT.opened ) then
   3709     call MPI_INIT(error)
   3710     mpp_comm_private = MPI_COMM_WORLD
   3711   else
   3712     mpp_comm_private  = localcomm
   3713   endif
   3714   call MPI_COMM_RANK( mpp_comm_private, pe,   error )
   3715   call MPI_COMM_SIZE( mpp_comm_private, npes, error )
   3716 
   3717   module_is_initialized = .TRUE.
   3718   if (present(test_level)) then
   3719     t_level = test_level
   3720   else
   3721     t_level = -1
   3722   endif
   3723   if (t_level == 0) return
   3724 
   3725 !PEsets: make defaults illegal
   3726   allocate(peset(0:current_peset_max))
   3727   peset(:)%count = -1
   3728   peset(:)%id = -1
   3729   peset(:)%group = -1
   3730   peset(:)%start = -1
   3731   peset(:)%log2stride = -1
   3732   peset(:)%name  = " "
   3733 !0=single-PE, initialized so that count returns 1
   3734   peset(0)%count = 1
   3735   allocate( peset(0)%list(1) )
   3736   peset(0)%list = pe
   3737   current_peset_num = 0
   3738   peset(0)%id = mpp_comm_private
   3739   call MPI_COMM_GROUP( mpp_comm_private, peset(0)%group, error )
   3740   world_peset_num = get_peset( (/(i,i=0,npes-1)/) )
   3741   current_peset_num = world_peset_num !initialize current PEset to world
   3742   if (t_level == 1) return
   3743 
   3744 !initialize clocks
   3745   call system_clock_mpi( count=tick0, count_rate=ticks_per_sec, count_max=max_ticks )
   3746   tick_rate = 1./ticks_per_sec
   3747   clock0 = mpp_clock_id( 'Total runtime', flags=MPP_CLOCK_SYNC )
   3748   if (t_level == 2) return
   3749 
   3750 ! Create the bytestream (default) mpp_datatype
   3751   mpp_byte%counter = 1
   3752   mpp_byte%ndims = 0

Page 148         Source Listing                  MPP_INIT
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   3753   allocate(mpp_byte%sizes(0))
   3754   allocate(mpp_byte%subsizes(0))
   3755   allocate(mpp_byte%starts(0))
   3756   mpp_byte%etype = MPI_BYTE
   3757   mpp_byte%id = MPI_BYTE
   3758 
   3759   mpp_byte%prev => null()
   3760   mpp_byte%next => null()
   3761 
   3762 ! Initialize datatype list with mpp_byte
   3763   datatypes%head => mpp_byte
   3764   datatypes%tail => mpp_byte
   3765   datatypes%length = 0
   3766 
   3767   if( PRESENT(flags) )then
   3768      debug   = flags.EQ.MPP_DEBUG
   3769      verbose = flags.EQ.MPP_VERBOSE .OR. debug
   3770   end if
   3771   if (t_level == 3) return
   3772 
   3773   call mpp_init_logfile()
   3774   call read_input_nml
   3775   if (t_level == 4) return
   3776 
   3777 !--- read namelist
   3778 
   3779   read (input_nml_file, mpp_nml, iostat=io_status)
   3780 # 128
   3781 
   3782 
   3783   if (io_status > 0) then
   3784      call mpp_error(FATAL,'=>mpp_init: Error reading input.nml')
   3785   endif
   3786   if (t_level == 5) return
   3787 
   3788   if(sync_all_clocks .AND. mpp_pe()==mpp_root_pe() ) call mpp_error(NOTE, &
   3789      "mpp_mod: mpp_nml variable sync_all_clocks is set to .true., all clocks are synchronized in mpp_clock_begin.")
   3790 
   3791 ! non-root pe messages written to other location than stdout()
   3792 
   3793   if(etc_unit_is_stderr) then
   3794      etc_unit = stderr()
   3795   else
   3796 ! 9 is reserved for etc_unit
   3797      etc_unit=9
   3798      inquire(unit=etc_unit,opened=opened)
   3799      if(opened) call mpp_error(FATAL,'Unit 9 is already in use (etc_unit) in mpp_comm_mpi')
   3800      if (trim(etcfile) /= '/dev/null') then
   3801         write( etcfile,'(a,i6.6)' )trim(etcfile)//'.', pe
   3802      endif
   3803      inquire(file=etcfile, exist=existed)
   3804      if(existed) then
   3805         open( unit=etc_unit, file=trim(etcfile), status='REPLACE' )
   3806      else
   3807         open( unit=etc_unit, file=trim(etcfile) )
   3808      endif
   3809   endif

Page 149         Source Listing                  MPP_INIT
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   3810 
   3811   if (t_level == 6) return
   3812 
   3813 ! max_request is set to maximum of npes * REQUEST_MULTIPLY ( default is 20) and MAX_REQUEST_MIN ( default 10000)
   3814   max_request = max(MAX_REQUEST_MIN, mpp_npes()*REQUEST_MULTIPLY)
   3815 
   3816   allocate( request_send(max_request) )
   3817   allocate( request_recv(max_request) )
   3818   allocate( size_recv(max_request) )
   3819   allocate( type_recv(max_request) )
   3820   request_send(:) = MPI_REQUEST_NULL
   3821   request_recv(:) = MPI_REQUEST_NULL
   3822   size_recv(:)    = 0
   3823   type_recv(:)    = 0
   3824 
   3825   if (t_level == 7) return
   3826 
   3827 !if optional argument logunit=stdout, write messages to stdout instead.
   3828 !if specifying non-defaults, you must specify units not yet in use.
   3829 !      if( PRESENT(in) )then
   3830 !          inquire( unit=in, opened=opened )
   3831 !          if( opened )call mpp_error( FATAL, 'MPP_INIT: unable to open stdin.' )
   3832 !          in_unit=in
   3833 !      end if
   3834 !      if( PRESENT(out) )then
   3835 !          inquire( unit=out, opened=opened )
   3836 !          if( opened )call mpp_error( FATAL, 'MPP_INIT: unable to open stdout.' )
   3837 !          out_unit=out
   3838 !      end if
   3839 !      if( PRESENT(err) )then
   3840 !          inquire( unit=err, opened=opened )
   3841 !          if( opened )call mpp_error( FATAL, 'MPP_INIT: unable to open stderr.' )
   3842 !          err_unit=err
   3843 !      end if
   3844 !      log_unit=get_unit()
   3845 !      if( PRESENT(log) )then
   3846 !          inquire( unit=log, opened=opened )
   3847 !          if( opened .AND. log.NE.out_unit )call mpp_error( FATAL, 'MPP_INIT: unable to open stdlog.' )
   3848 !          log_unit=log
   3849 !      end if
   3850 !!log_unit can be written to only from root_pe, all others write to stdout
   3851 !      if( log_unit.NE.out_unit )then
   3852 !          inquire( unit=log_unit, opened=opened )
   3853 !          if( opened )call mpp_error( FATAL, 'MPP_INIT: specified unit for stdlog already in use.' )
   3854 !          if( pe.EQ.root_pe )open( unit=log_unit, file=trim(configfile), status='REPLACE' )
   3855 !          call mpp_sync()
   3856 !          if( pe.NE.root_pe )open( unit=log_unit, file=trim(configfile), status='OLD' )
   3857 !      end if
   3858 
   3859 
   3860 !messages
   3861   iunit = stdlog()  ! workaround for lf95.
   3862   if( verbose )call mpp_error( NOTE, 'MPP_INIT: initializing MPP module...' )
   3863   if( pe.EQ.root_pe )then
   3864      write( iunit,'(/a)' )'MPP module '//trim(version)
   3865      write( iunit,'(a,i6)' )'MPP started with NPES=', npes
   3866      write( iunit,'(a)' )'Using MPI library for message passing...'

Page 150         Source Listing                  MPP_INIT
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   3867      write( iunit, '(a,es12.4,a,i10,a)' ) &
   3868           'Realtime clock resolution=', tick_rate, ' sec (', ticks_per_sec, ' ticks/sec)'
   3869      write( iunit, '(a,es12.4,a,i20,a)' ) &
   3870           'Clock rolls over after ', max_ticks*tick_rate, ' sec (', max_ticks, ' ticks)'
   3871      write( iunit,'(/a)' )'MPP Parameter module '//trim(mpp_parameter_version)
   3872      write( iunit,'(/a)' )'MPP Data module '//trim(mpp_data_version)
   3873   end if
   3874 
   3875   stdout_unit = stdout()
   3876 
   3877   call mpp_clock_begin(clock0)
   3878 
   3879   return
   3880 end subroutine mpp_init


ENTRY POINTS

  Name                            
                                  
 mpp_mod_mp_mpp_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOCK0                     Local  3747     I(4)            4           scalar                    3747,3877,3893,3894               
 DATATYPES                  Local  3763     MPP_TYPE_LIST   24          scalar                    3763,3764,3765,3978,10805,10855,10
                                                                                                  857,10858,10915,10965,10967,10968,
                                                                                                  11025,11075,11077,11078,11135,1118
                                                                                                  5,11187,11188,11245,11295,11297,11
                                                                                                  298,11355,11405,11407,11408,11465,
                                                                                                  11515,11517,11518,11575,11625,1162
                                                                                                  7,11628,11673                     
 DTYPE                      Local  3702     MPP_TYPE        248         scalar   PTR                                                
 ETC_UNIT_IS_STDERR         Local  3793     L(4)            4           scalar                    1228,1231,3793                    
 EXISTED                    Local  3698     L(4)            4           scalar                    3803,3804                         
 FLAGS                      Dummy  3693     I(4)            4           scalar   ARG,IN           3767,3768,3769                    
 I                          Local  3697     I(4)            4           scalar                                                      
 IO_STATUS                  Local  3699     I(4)            4           scalar                    3779,3783                         
 IUNIT                      Local  3697     I(4)            4           scalar                    3861,3864,3865,3866,3867,3869,3871
                                                                                                  ,3872                             
 LEN                        Local  3697     I(4)            4           scalar                                                      
 LOCALCOMM                  Dummy  3693     I(4)            4           scalar   ARG,IN           3707,3712                         
 MAX                        Func   3814                                 scalar                    3814                              
 MAX_REQUEST                Local  3814     I(4)            4           scalar                    1229,3814,3816,3817,3818,3819,4192
                                                                                                  ,4239,4820,4867,5448,5495,6073,612
                                                                                                  0,6698,6745,7323,7370             
 MAX_REQUEST_MIN            Param  3814     I(4)            4           scalar                    3814                              
 MPI_BYTE                   Param  3756     I(4)            4           scalar   PRIV             3756,3757                         
 MPI_COMM_GROUP             Subr   3739                                          PRIV             3739                              
 MPI_COMM_RANK              Subr   3714                                          PRIV             3714                              
 MPI_COMM_SIZE              Subr   3715                                          PRIV             3715                              
 MPI_INIT                   Subr   3709                                          PRIV             3709                              
 MPI_INITIALIZED            Subr   3706                                          PRIV             3706                              
 MPP_BYTE                   Local  3751     MPP_TYPE        248         scalar   TGT              226,3751,3752,3753,3754,3755,3756,

Page 151         Source Listing                  MPP_INIT
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_comm_mpi.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  3757,3759,3760,3763,3764          
 MPP_CLOCK_BEGIN            Subr   3877                                                           217,3877                          
 MPP_CLOCK_ID               Func   3747     I(4)            4           scalar                    216,2789,2793,2796,2797,2799,2800,
                                                                                                  2801,2802,2806,2807,3747          
 MPP_CLOCK_SYNC             Param  3747     I(4)            4           scalar                    169,195,3747                      
 MPP_COMM_PRIVATE           Local  3710     I(4)            4           scalar                    3710,3712,3714,3715,3738,3739,3989
                                                                                                  ,4189,4194,4223,4235,4241,4251,481
                                                                                                  7,4822,4851,4863,4869,4879,5445,54
                                                                                                  50,5479,5491,5497,5507,6070,6075,6
                                                                                                  104,6116,6122,6132,6695,6700,6729,
                                                                                                  6741,6747,6757,7320,7325,7354,7366
                                                                                                  ,7372,7382                        
 MPP_DATA_VERSION           Param  3872     CHAR            7           scalar   PRIV             3872                              
 MPP_DEBUG                  Param  3768     I(4)            4           scalar                    168,194,3768                      
 MPP_INIT                   Subr   3693                                                                                             
 MPP_NML                    Local  3779                                 scalar                    3779                              
 MPP_NPES                   Func   3814     I(4)            4           scalar                    214,2448,3814,3924,3925,3951,3952,
                                                                                                  3957,3958,4042,4049,4296,4302,4924
                                                                                                  ,4930,5552,5558,6177,6183,6802,680
                                                                                                  8,7427,7433,13518,13560,13775,1381
                                                                                                  7,14032,14074,14289,14331         
 MPP_PARAMETER_VERSION      Param  3871     CHAR            7           scalar   PRIV             3871                              
 MPP_PE                     Func   3788     I(4)            4           scalar                    213,2427,3788,4031,4226,4854,5482,
                                                                                                  6107,6732,7357,13629,13632,13646,1
                                                                                                  3886,13889,13903,14143,14146,14160
                                                                                                  ,14400,14403,14417,14586,14589,146
                                                                                                  03,14765,14768,14782,14944,14947,1
                                                                                                  4961                              
 MPP_TYPE                   Type   3702                     248         scalar                    226,293,294,295,300,301,1142,3702,
                                                                                                  3889,9793,9925,10057,10189,10321,1
                                                                                                  0453,10585,10717,10790,10792,10900
                                                                                                  ,10902,11010,11012,11120,11122,112
                                                                                                  30,11232,11340,11342,11450,11452,1
                                                                                                  1560,11562,11646                  
 MPP_VERBOSE                Param  3769     I(4)            4           scalar                    168,194,3769                      
 MY_PE                      Local  3697     I(4)            4           scalar                                                      
 NULL                       Func   3759                                 scalar   PTR              237,260,293,294,300,301,3759,3760 
 NUM_PES                    Local  3697     I(4)            4           scalar                                                      
 OPENED                     Local  3698     L(4)            4           scalar                    3706,3707,3708,3798,3799          
 PRESENT                    Func   3707                                 scalar                    3707,3718,3767                    
 READ_INPUT_NML             Subr   3774                                                           217,3774                          
 REQUEST_MULTIPLY           Local  3814     I(4)            4           scalar                    1226,1231,3814                    
 STDOUT                     Func   3875     I(4)            4           scalar                    212,1577,1578,3875,3895,3918,3941 
 STDOUT_UNIT                Local  3875     I(4)            4           scalar                    3875,4032,4172,4261,4800,4889,5428
                                                                                                  ,5517,6053,6142,6678,6767,7303,739
                                                                                                  2                                 
 TEST_LEVEL                 Dummy  3693     I(4)            4           scalar   ARG,IN           3718,3719                         
 THIS_PE                    Local  3701     CHAR            5           scalar                                                      
 TICK0                      Local  3745     I(8)            8           scalar                    1126,3745                         
 TICKS_PER_SEC              Local  3745     I(8)            8           scalar                    3745,3746,3868                    
 TRIM                       Func   3800                                 scalar                    3800,3801,3805,3807,3864,3871,3872
 T_LEVEL                    Local  3700     I(4)            4           scalar                    3719,3721,3723,3742,3748,3771,3775
                                                                                                  ,3786,3811,3825                   
 UNIT_BEGIN                 Local  3699     I(4)            4           scalar                                                      
 UNIT_END                   Local  3699     I(4)            4           scalar                                                      

Page 152         Source Listing                  MPP_INIT
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_comm_mpi.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 UNIT_NML                   Local  3699     I(4)            4           scalar                                                      
 VERBOSE                    Local  3769     L(4)            4           scalar                    1170,3769,3862,7858,7878,7931,7951
                                                                                                  ,8004,8024,8077,8097,8150,8170,822
                                                                                                  3,8243,8296,8316,8369,8389,8451,86
                                                                                                  13,8775,8934,9096,9260,9424,9585,9
                                                                                                  744,9774,9806,9876,9906,9938,10008
                                                                                                  ,10038,10070,10140,10170,10202,102
                                                                                                  72,10302,10334,10404,10434,10466,1
                                                                                                  0536,10566,10598,10668,10698,10730
                                                                                                  ,10801,10911,11021,11131,11241,113
                                                                                                  51,11461,11571,11654              
 VERSION                    Param  3864     CHAR            7           scalar                    1223,3864                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 MPP_TYPE.COUNTER           I(4)            4     0              scalar   PRIV             3751,3981,10819,10846,10929,10956, 
                                                                                           11039,11066,11149,11176,11259,1128 
                                                                                           6,11369,11396,11479,11506,11589,11 
                                                                                           616,11658,11660                    
 MPP_TYPE.ETYPE             I(4)            4     224            scalar   PRIV             3756,10816,10851,10926,10961,11036 
                                                                                           ,11071,11146,11181,11256,11291,113 
                                                                                           66,11401,11476,11511,11586,11621   
 MPP_TYPE.ID                I(4)            4     228            scalar   PRIV             3757,9813,9814,9945,9946,10077,100 
                                                                                           78,10209,10210,10341,10342,10473,1 
                                                                                           0474,10605,10606,10737,10738,10852 
                                                                                           ,10962,11072,11182,11292,11402,115 
                                                                                           12,11622,11662                     
 MPP_TYPE.NDIMS             I(4)            4     4              scalar   PRIV             3752,10812,10847,10922,10957,11032 
                                                                                           ,11067,11142,11177,11252,11287,113 
                                                                                           62,11397,11472,11507,11582,11617   
 MPP_TYPE.NEXT              MPP_TYPE        248   240            scalar   PTR,TGT,PRIV     3760,3980,10810,10856,10920,10966, 
                                                                                           11030,11076,11140,11186,11250,1129 
                                                                                           6,11360,11406,11470,11516,11580,11 
                                                                                           626,11665                          
 MPP_TYPE.PREV              MPP_TYPE        248   232            scalar   PTR,PRIV         3759,10855,10856,10965,10966,11075 
                                                                                           ,11076,11185,11186,11295,11296,114 
                                                                                           05,11406,11515,11516,11625,11626,1 
                                                                                           1665                               
 MPP_TYPE.SIZES             I(4)            4     8        1     1        ALC,PRIV         3753,10813,10841,10848,10923,10951 
                                                                                           ,10958,11033,11061,11068,11143,111 
                                                                                           71,11178,11253,11281,11288,11363,1 
                                                                                           1391,11398,11473,11501,11508,11583 
                                                                                           ,11611,11618,11668                 
 MPP_TYPE.STARTS            I(4)            4     152      1     1        ALC,PRIV         3755,10815,10843,10850,10925,10953 
                                                                                           ,10960,11035,11063,11070,11145,111 
                                                                                           73,11180,11255,11283,11290,11365,1 
                                                                                           1393,11400,11475,11503,11510,11585 
                                                                                           ,11613,11620,11670                 
 MPP_TYPE.SUBSIZES          I(4)            4     80       1     1        ALC,PRIV         3754,10814,10842,10849,10924,10952 
                                                                                           ,10959,11034,11062,11069,11144,111 
                                                                                           72,11179,11254,11282,11289,11364,1 
                                                                                           1392,11399,11474,11502,11509,11584 

Page 153         Source Listing                  MPP_INIT
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_comm_mpi.inc

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           ,11612,11619,11669                 
 MPP_TYPE_LIST.HEAD         MPP_TYPE        248   0              scalar   PTR,TGT,PRIV     3763,3978,10805,10915,11025,11135, 
                                                                                           11245,11355,11465,11575            
 MPP_TYPE_LIST.LENGTH       I(4)            4     16             scalar   PRIV             3765,10858,10968,11078,11188,11298 
                                                                                           ,11408,11518,11628,11673           
 MPP_TYPE_LIST.TAIL         MPP_TYPE        248   8              scalar   PTR,TGT,PRIV     3764,10855,10857,10965,10967,11075 
                                                                                           ,11077,11185,11187,11295,11297,114 
                                                                                           05,11407,11515,11517,11625,11627   

Page 154         Source Listing                  MPP_INIT
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   3881 
   3882 !#######################################################################
   3883 !to be called at the end of a run
   3884 subroutine mpp_exit()
   3885   integer :: i, j, k, n, nmax, istat, out_unit, log_unit
   3886   real    :: t, tmin, tmax, tavg, tstd
   3887   real    :: m, mmin, mmax, mavg, mstd, t_total
   3888   logical :: opened
   3889   type(mpp_type), pointer :: dtype
   3890 
   3891   if( .NOT.module_is_initialized )return
   3892   call mpp_set_current_pelist()
   3893   call mpp_clock_end(clock0)
   3894   t_total = clocks(clock0)%total_ticks*tick_rate
   3895   out_unit = stdout()
   3896   log_unit = stdlog()
   3897   if( clock_num.GT.0 )then
   3898      if( ANY(clocks(1:clock_num)%detailed) )then
   3899         call sum_clock_data; call dump_clock_summary
   3900      end if
   3901 
   3902      call mpp_sync()
   3903      call FLUSH( out_unit )
   3904 
   3905      if( pe.EQ.root_pe )then
   3906         write( out_unit,'(/a,i6,a)' ) 'Tabulating mpp_clock statistics across ', npes, ' PEs...'
   3907         if( ANY(clocks(1:clock_num)%detailed) ) &
   3908              write( out_unit,'(a)' )'   ... see mpp_clock.out.#### for details on individual PEs.'
   3909         write( out_unit,'(/32x,a)' ) '      hits          tmin          tmax          tavg          tstd  tfrac grain pemin 
   3909 pemax'
   3910      end if
   3911      write( log_unit,'(/37x,a)' ) 'time'
   3912 
   3913      call FLUSH( out_unit )
   3914      call mpp_sync()
   3915      do i = 1,clock_num
   3916         if( .NOT.ANY(peset(clocks(i)%peset_num)%list(:).EQ.pe) )cycle
   3917         call mpp_set_current_pelist( peset(clocks(i)%peset_num)%list )
   3918         out_unit = stdout()
   3919         log_unit = stdlog()
   3920 !times between mpp_clock ticks
   3921         t = clocks(i)%total_ticks*tick_rate
   3922         tmin = t; call mpp_min(tmin)
   3923         tmax = t; call mpp_max(tmax)
   3924         tavg = t; call mpp_sum(tavg); tavg = tavg/mpp_npes()
   3925         tstd = (t-tavg)**2; call mpp_sum(tstd); tstd = sqrt( tstd/mpp_npes() )
   3926         if( pe.EQ.root_pe )write( out_unit,'(a32,i10,4f14.6,f7.3,3i6)' ) &
   3927              clocks(i)%name, clocks(i)%hits, tmin, tmax, tavg, tstd, tavg/t_total, &
   3928              clocks(i)%grain, minval(peset(clocks(i)%peset_num)%list), &
   3929              maxval(peset(clocks(i)%peset_num)%list)
   3930         write(log_unit,'(a32,f14.6)') clocks(i)%name, clocks(i)%total_ticks*tick_rate
   3931      end do
   3932 
   3933      if( ANY(clocks(1:clock_num)%detailed) .AND. pe.EQ.root_pe )write( out_unit,'(/32x,a)' ) &
   3934           '       tmin       tmax       tavg       tstd       mmin       mmax       mavg       mstd  mavg/tavg'
   3935 
   3936      do i = 1,clock_num

Page 155         Source Listing                  MPP_EXIT
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   3937 !messages: bytelengths and times
   3938         if( .NOT.clocks(i)%detailed )cycle
   3939         if( .NOT.ANY(peset(clocks(i)%peset_num)%list(:).EQ.pe) )cycle
   3940         call mpp_set_current_pelist( peset(clocks(i)%peset_num)%list )
   3941         out_unit = stdout()
   3942         do j = 1,MAX_EVENT_TYPES
   3943            n = clocks(i)%events(j)%calls; nmax = n
   3944            call mpp_max(nmax)
   3945            if( nmax.NE.0 )then
   3946 !don't divide by n because n might be 0
   3947               m = 0
   3948               if( n.GT.0 )m = sum(clocks(i)%events(j)%bytes(1:n))
   3949               mmin = m; call mpp_min(mmin)
   3950               mmax = m; call mpp_max(mmax)
   3951               mavg = m; call mpp_sum(mavg); mavg = mavg/mpp_npes()
   3952               mstd = (m-mavg)**2; call mpp_sum(mstd); mstd = sqrt( mstd/mpp_npes() )
   3953               t = 0
   3954               if( n.GT.0 )t = sum(clocks(i)%events(j)%ticks(1:n))*tick_rate
   3955               tmin = t; call mpp_min(tmin)
   3956               tmax = t; call mpp_max(tmax)
   3957               tavg = t; call mpp_sum(tavg); tavg = tavg/mpp_npes()
   3958               tstd = (t-tavg)**2; call mpp_sum(tstd); tstd = sqrt( tstd/mpp_npes() )
   3959               if( pe.EQ.root_pe )write( out_unit,'(a32,4f11.3,5es11.3)' ) &
   3960                    trim(clocks(i)%name)//' '//trim(clocks(i)%events(j)%name), &
   3961                    tmin, tmax, tavg, tstd, mmin, mmax, mavg, mstd, mavg/tavg
   3962            end if
   3963         end do
   3964      end do
   3965 
   3966   end if
   3967 
   3968   call FLUSH( out_unit )
   3969 
   3970 ! close down etc_unit: 9
   3971   inquire(unit=etc_unit, opened=opened)
   3972   if (opened) then
   3973    call FLUSH (etc_unit)
   3974    close(etc_unit)
   3975   endif
   3976 
   3977 ! Clear derived data types (skipping list head, mpp_byte)
   3978   dtype => datatypes%head
   3979   do while (.not. associated(dtype))
   3980       dtype => dtype%next
   3981       dtype%counter = 1         ! Force deallocation
   3982       call mpp_type_free(dtype)
   3983   end do
   3984 
   3985   call mpp_set_current_pelist()
   3986   call mpp_sync()
   3987   call mpp_max(mpp_stack_hwm)
   3988   if( pe.EQ.root_pe )write( out_unit,* )'MPP_STACK high water mark=', mpp_stack_hwm
   3989   if(mpp_comm_private == MPI_COMM_WORLD ) call MPI_FINALIZE(error)
   3990 
   3991   return
   3992 end subroutine mpp_exit

Page 156         Source Listing                  MPP_EXIT
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_comm_mpi.inc



ENTRY POINTS

  Name                            
                                  
 mpp_mod_mp_mpp_exit_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   3898                                 scalar                    3898,3907,3916,3933,3939          
 ASSOCIATED                 Func   3979                                 scalar                    3979                              
 DTYPE                      Local  3889     MPP_TYPE        248         scalar   PTR              3978,3979,3980,3981,3982          
 FLUSH                      Intrin 3903                                                           3903,3913,3968,3973               
 I                          Local  3885     I(4)            4           scalar                    3915,3916,3917,3921,3927,3928,3929
                                                                                                  ,3930,3936,3938,3939,3940,3943,394
                                                                                                  8,3954,3960                       
 ISTAT                      Local  3885     I(4)            4           scalar                                                      
 J                          Local  3885     I(4)            4           scalar                    3942,3943,3948,3954,3960          
 K                          Local  3885     I(4)            4           scalar                                                      
 LOG_UNIT                   Local  3885     I(4)            4           scalar                    3896,3911,3919,3930               
 M                          Local  3887     R(8)            8           scalar                    3947,3948,3949,3950,3951,3952     
 MAVG                       Local  3887     R(8)            8           scalar                    3951,3952,3961                    
 MAXVAL                     Func   3929                                 scalar                    3929                              
 MINVAL                     Func   3928                                 scalar                    3928                              
 MMAX                       Local  3887     R(8)            8           scalar                    3950,3961                         
 MMIN                       Local  3887     R(8)            8           scalar                    3949,3961                         
 MPI_FINALIZE               Subr   3989                                          PRIV             3989                              
 MPP_CLOCK_END              Subr   3893                                                           217,3893                          
 MPP_EXIT                   Subr   3884                                                                                             
 MPP_MAX                    Local  3923                                 scalar                    222,3923,3944,3950,3956,3987,13641
                                                                                                  ,13898,14155,14412,14598,14777,149
                                                                                                  56                                
 MPP_MIN                    Local  3922                                 scalar                    222,3922,3949,3955                
 MPP_SET_CURRENT_PELIST     Subr   3892                                                           215,3892,3917,3940,3985           
 MPP_STACK_HWM              Local  3987     I(4)            4           scalar                    1169,3987,3988                    
 MPP_SUM                    Local  3924                                 scalar                    222,3924,3925,3951,3952,3957,3958,
                                                                                                  8509,8523,8537,8551,8671,8685,8699
                                                                                                  ,8713,8833,8847,8861,8875,8992,900
                                                                                                  6,9020,9034,11727,11845,11963,1208
                                                                                                  1,12199,12317,12435,12553,12671,12
                                                                                                  789,13645,13902,14159,14416,14602,
                                                                                                  14781,14960                       
 MPP_TYPE_FREE              Subr   3982                                                           226,3982                          
 MSTD                       Local  3887     R(8)            8           scalar                    3952,3961                         
 N                          Local  3885     I(4)            4           scalar                    3943,3948,3954                    
 NMAX                       Local  3885     I(4)            4           scalar                    3943,3944,3945                    
 OPENED                     Local  3888     L(4)            4           scalar                    3971,3972                         
 OUT_UNIT                   Local  3885     I(4)            4           scalar                    3895,3903,3906,3908,3909,3913,3918
                                                                                                  ,3926,3933,3941,3959,3968,3988    
 SQRT                       Func   3925                                 scalar                    3925,3952,3958                    
 SUM                        Func   3948                                 scalar                    3948,3954                         
 T                          Local  3886     R(8)            8           scalar                    3921,3922,3923,3924,3925,3953,3954
                                                                                                  ,3955,3956,3957,3958              

Page 157         Source Listing                  MPP_EXIT
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_comm_mpi.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TAVG                       Local  3886     R(8)            8           scalar                    3924,3925,3927,3957,3958,3961     
 TMAX                       Local  3886     R(8)            8           scalar                    3923,3927,3956,3961               
 TMIN                       Local  3886     R(8)            8           scalar                    3922,3927,3955,3961               
 TRIM                       Func   3960                                 scalar                    3960                              
 TSTD                       Local  3886     R(8)            8           scalar                    3925,3927,3958,3961               
 T_TOTAL                    Local  3887     R(8)            8           scalar                    3894,3927                         

Page 158         Source Listing                  MPP_EXIT
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   3993 
   3994 !#######################################################################
   3995 !set the mpp_stack variable to be at least n LONG words long
   3996   subroutine mpp_set_stack_size(n)
   3997     integer, intent(in) :: n
   3998     character(len=8)    :: text
   3999 
   4000     if( n.GT.mpp_stack_size .AND. allocated(mpp_stack) )deallocate(mpp_stack)
   4001     if( .NOT.allocated(mpp_stack) )then
   4002        allocate( mpp_stack(n) )
   4003        mpp_stack_size = n
   4004     end if
   4005 
   4006     write( text,'(i8)' )n
   4007     if( pe.EQ.root_pe )call mpp_error( NOTE, 'MPP_SET_STACK_SIZE: stack size set to '//text//'.' )
   4008 
   4009     return
   4010   end subroutine mpp_set_stack_size


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_set_stack_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   4000                                 scalar                    4000,4001                         
 MPP_SET_STACK_SIZE         Subr   3996                                                                                             
 MPP_STACK                  Local  4000     R(8)            8     1     1        ALC,PRIV         185,4000,4001,4002                
 MPP_STACK_SIZE             Local  4000     I(4)            4           scalar                    1169,4000,4003                    
 N                          Dummy  3996     I(4)            4           scalar   ARG,IN           4000,4002,4003,4006               
 TEXT                       Local  3998     CHAR            8           scalar                    4006,4007                         

Page 159         Source Listing                  MPP_SET_STACK_SIZE
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   4011 
   4012 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4013 !                                                                             !
   4014 !                BASIC MESSAGE PASSING ROUTINE: mpp_transmit                  !
   4015 !                                                                             !
   4016 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4017     subroutine mpp_broadcast_char(data, length, from_pe, pelist )
   4018       character(len=*), intent(inout) :: data(:)
   4019       integer, intent(in) :: length, from_pe
   4020       integer, intent(in), optional :: pelist(:)
   4021       integer :: n, i, from_rank, out_unit
   4022       character    :: str1D(length*size(data(:)))
   4023       pointer(lptr, str1D)
   4024 
   4025       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'mpp_broadcast_text: You must first call mpp_init.' )
   4026       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   4027 
   4028 
   4029       if( debug )then
   4030           call system_clock_mpi(tick)
   4031           if(mpp_pe() == mpp_root_pe()) then
   4032             write( stdout_unit,'(a,i18,a,i5,a,2i5,2i8)' )&
   4033                'T=',tick, ' PE=',pe, 'mpp_broadcast_text begin: from_pe, length=', from_pe, length
   4034           endif
   4035       end if
   4036 
   4037       if( .NOT.ANY(from_pe.EQ.peset(current_peset_num)%list) ) &
   4038            call mpp_error( FATAL, 'mpp_broadcast_text: broadcasting from invalid PE.' )
   4039 
   4040       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   4041 ! find the rank of from_pe in the pelist.
   4042       do i = 1, mpp_npes()
   4043          if(peset(n)%list(i) == from_pe) then
   4044              from_rank = i - 1
   4045              exit
   4046          endif
   4047       enddo
   4048       lptr = LOC (data)
   4049       if( mpp_npes().GT.1 ) call MPI_BCAST( data, length*size(data(:)), MPI_CHARACTER, from_rank, peset(n)%id, error )
   4050       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_BROADCAST, length )
   4051       return
   4052     end subroutine mpp_broadcast_char

Page 160         Source Listing                  MPP_BROADCAST_CHAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_comm_mpi.inc



ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_broadcast_char_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   4037                                 scalar                    4037                              
 DATA                       Dummy  4017     CHAR                  1     1        ARG,INOUT        4022,4048,4049                    
 FROM_PE                    Dummy  4017     I(4)            4           scalar   ARG,IN           4033,4037,4043                    
 FROM_RANK                  Local  4021     I(4)            4           scalar                    4044,4049                         
 I                          Local  4021     I(4)            4           scalar                    4042,4043,4044                    
 LENGTH                     Dummy  4017     I(4)            4           scalar   ARG,IN           4022,4033,4049,4050               
 LOC                        Func   4048                                 scalar                    4048                              
 LPTR                       Local  4023     I(8)            8           scalar   PTR              4048                              
 MPI_BCAST                  Subr   4049                                                           4049                              
 MPI_CHARACTER              Param  4049     I(4)            4           scalar   PRIV             4049                              
 MPP_BROADCAST_CHAR         Subr   4017                                          PRIV             3636                              
 N                          Local  4021     I(4)            4           scalar                    4026,4043,4049                    
 OUT_UNIT                   Local  4021     I(4)            4           scalar                                                      
 PELIST                     Dummy  4017     I(4)            4     1     1        ARG,IN           4026                              
 SIZE                       Func   4022                                 scalar                    4022,4049                         
 STR1D                      Local  4022     CHAR            1     1     0                                                           
 TICK                       Local  4030     I(8)            8           scalar                    4030,4033,4171,4173,4260,4262,4286
                                                                                                  ,4288,4799,4801,4888,4890,4914,491
                                                                                                  6,5427,5429,5516,5518,5542,5544,60
                                                                                                  52,6054,6141,6143,6167,6169,6677,6
                                                                                                  679,6766,6768,6792,6794,7302,7304,
                                                                                                  7391,7393,7417,7419               

Page 161         Source Listing                  MPP_BROADCAST_CHAR
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   4053 
   4054 
   4055 
   4056 
   4057 
   4058 
   4059 
   4060 
   4061 
   4062 
   4063 
   4064 
   4065 
   4066 
   4067 
   4068 
   4069 
   4070 
   4071 
   4072 
   4073 
   4074 
   4075 
   4076 
   4077 
   4078 
   4079 
   4080 
   4081 
   4082 
   4083 
   4084 
   4085 
   4086 
   4087 
   4088 
   4089 
   4090 
   4091 
   4092 
   4093 
   4094 
   4095 
   4096 
   4097 
   4098 
   4099 
   4100 
   4101 
   4102 
   4103 
   4104 
   4105 
   4106 
   4107 
   4108 # 1 "../mpp/include/mpp_transmit_mpi.h" 1 
   4109 !***********************************************************************

Page 162         Source Listing                  MPP_BROADCAST_CHAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   4110 !*                   GNU Lesser General Public License
   4111 !*
   4112 !* This file is part of the GFDL Flexible Modeling System (FMS).
   4113 !*
   4114 !* FMS is free software: you can redistribute it and/or modify it under
   4115 !* the terms of the GNU Lesser General Public License as published by
   4116 !* the Free Software Foundation, either version 3 of the License, or (at
   4117 !* your option) any later version.
   4118 !*
   4119 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   4120 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   4121 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   4122 !* for more details.
   4123 !*
   4124 !* You should have received a copy of the GNU Lesser General Public
   4125 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   4126 !***********************************************************************
   4127 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4128 !                                                                             !
   4129 !                                  MPP_TRANSMIT                               !
   4130 !                                                                             !
   4131 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4132 
   4133     subroutine mpp_transmit_real8( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, recv_request, send_requ
   4133 est )
   4134 !a message-passing routine intended to be reminiscent equally of both MPI and SHMEM
   4135 
   4136 !put_data and get_data are contiguous real(r8_kind) arrays
   4137 
   4138 !at each call, your put_data array is put to   to_pe's get_data
   4139 !              your get_data array is got from from_pe's put_data
   4140 !i.e we assume that typically (e.g updating halo regions) each PE performs a put _and_ a get
   4141 
   4142 !special PE designations:
   4143 !      NULL_PE: to disable a put or a get (e.g at boundaries)
   4144 !      ANY_PE:  if remote PE for the put or get is to be unspecific
   4145 !      ALL_PES: broadcast and collect operations (collect not yet implemented)
   4146 
   4147 !ideally we would not pass length, but this f77-style call performs better (arrays passed by address, not descriptor)
   4148 !further, this permits <length> contiguous words from an array of any rank to be passed (avoiding f90 rank conformance check
   4148 )
   4149 
   4150 !caller is responsible for completion checks (mpp_sync_self) before and after
   4151 
   4152       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   4153       real(r8_kind), intent(in)  :: put_data(*)
   4154       real(r8_kind), intent(out) :: get_data(*)
   4155       logical, intent(in),  optional :: block
   4156       integer, intent(in),  optional :: tag
   4157       integer, intent(out), optional :: recv_request, send_request
   4158       logical                       :: block_comm
   4159       integer                       :: i
   4160       real(r8_kind), allocatable, save  :: local_data(:) !local copy used by non-parallel code (no SHMEM or MPI)
   4161       integer                       :: comm_tag
   4162       integer                       :: rsize
   4163 
   4164       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_TRANSMIT: You must first call mpp_init.' )

Page 163         Source Listing                  MPP_TRANSMIT_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   4165       if( to_pe.EQ.NULL_PE .AND. from_pe.EQ.NULL_PE )return
   4166 
   4167       block_comm = .true.
   4168       if(PRESENT(block)) block_comm = block
   4169 
   4170       if( debug )then
   4171           call system_clock_mpi(tick)
   4172           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   4173                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT begin: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_
   4173 len
   4174       end if
   4175 
   4176       comm_tag = DEFAULT_TAG
   4177       if(present(tag)) comm_tag = tag
   4178 
   4179 !do put first and then get
   4180       if( to_pe.GE.0 .AND. to_pe.LT.npes )then
   4181 !use non-blocking sends
   4182           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   4183 !z1l: truly non-blocking send.
   4184 !          if( request(to_pe).NE.MPI_REQUEST_NULL )then !only one message from pe->to_pe in queue
   4185 !              if( debug )write( stderr(),* )'PE waiting for sending', pe, to_pe
   4186 !              call MPI_WAIT( request(to_pe), stat, error )
   4187 !          end if
   4188           if(present(send_request)) then
   4189              call MPI_ISEND( put_data, put_len, MPI_REAL8, to_pe, comm_tag, mpp_comm_private, send_request, error)
   4190           else
   4191              cur_send_request = cur_send_request + 1
   4192              if( cur_send_request > max_request ) call mpp_error(FATAL, &
   4193                 "MPP_TRANSMIT: cur_send_request is greater than max_request, increase mpp_nml request_multiply")
   4194              call MPI_ISEND( put_data, put_len, MPI_REAL8, to_pe, comm_tag, mpp_comm_private, &
   4195                              request_send(cur_send_request), error)
   4196           endif
   4197           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_SEND, put_len*8 )
   4198       else if( to_pe.EQ.ALL_PES )then !this is a broadcast from from_pe
   4199           if( from_pe.LT.0 .OR. from_pe.GE.npes )call mpp_error( FATAL, 'MPP_TRANSMIT: broadcasting from invalid PE.' )
   4200           if( put_len.GT.get_len )call mpp_error( FATAL, 'MPP_TRANSMIT: size mismatch between put_data and get_data.' )
   4201           if( pe.EQ.from_pe )then
   4202               if( LOC(get_data).NE.LOC(put_data) )then
   4203 !dir$ IVDEP
   4204                   do i = 1,get_len
   4205                      get_data(i) = put_data(i)
   4206                   end do
   4207               end if
   4208           end if
   4209           call mpp_broadcast( get_data, get_len, from_pe )
   4210           return
   4211       else if( to_pe.EQ.ANY_PE )then !we don't have a destination to do puts to, so only do gets
   4212 !...but you cannot have a pure get with MPI
   4213           call mpp_error( FATAL, 'MPP_TRANSMIT: you cannot transmit to ANY_PE using MPI.' )
   4214       else if( to_pe.NE.NULL_PE )then  !no other valid cases except NULL_PE
   4215           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid to_pe.' )
   4216       end if
   4217 
   4218 !do the get
   4219       if( from_pe.GE.0 .AND. from_pe.LT.npes )then
   4220 !receive from from_pe

Page 164         Source Listing                  MPP_TRANSMIT_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   4221           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   4222           if( block_comm ) then
   4223              call MPI_RECV( get_data, get_len, MPI_REAL8, from_pe, comm_tag, mpp_comm_private, stat, error )
   4224              call MPI_GET_COUNT( stat, MPI_REAL8, rsize, error)
   4225              if(rsize .NE. get_len) then
   4226                 print*, "rsize, get_len=", rsize, get_len, mpp_pe(), from_pe
   4227                 call mpp_error(FATAL, "MPP_TRANSMIT: get_len does not match size of data received")
   4228              endif
   4229           else
   4230 !             if( request_recv(from_pe).NE.MPI_REQUEST_NULL )then !only one message from from_pe->pe in queue
   4231 !              if( debug )write( stderr(),* )'PE waiting for receiving', pe, from_pe
   4232 !                call MPI_WAIT( request_recv(from_pe), stat, error )
   4233 !             end if
   4234              if(PRESENT(recv_request)) then
   4235                 call MPI_IRECV( get_data, get_len, MPI_REAL8, from_pe, comm_tag, mpp_comm_private, &
   4236                   recv_request, error )
   4237              else
   4238                 cur_recv_request = cur_recv_request + 1
   4239                 if( cur_recv_request > max_request ) call mpp_error(FATAL, &
   4240                 "MPP_TRANSMIT: cur_recv_request is greater than max_request, increase mpp_nml request_multiply")
   4241                 call MPI_IRECV( get_data, get_len, MPI_REAL8, from_pe, comm_tag, mpp_comm_private, &
   4242                      request_recv(cur_recv_request), error )
   4243                 size_recv(cur_recv_request) = get_len
   4244                 type_recv(cur_recv_request) = MPI_REAL8
   4245              endif
   4246           endif
   4247           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*8 )
   4248       else if( from_pe.EQ.ANY_PE )then
   4249 !receive from MPI_ANY_SOURCE
   4250           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   4251           call MPI_RECV( get_data, get_len, MPI_REAL8, MPI_ANY_SOURCE, comm_tag, mpp_comm_private, stat, error )
   4252           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*8 )
   4253       else if( from_pe.EQ.ALL_PES )then
   4254           call mpp_error( FATAL, 'MPP_TRANSMIT: from_pe=ALL_PES has ambiguous meaning, and hence is not implemented.' )
   4255       else if( from_pe.NE.NULL_PE )then !only remaining valid choice is NULL_PE
   4256           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid from_pe.' )
   4257       end if
   4258 
   4259       if( debug )then
   4260           call system_clock_mpi(tick)
   4261           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   4262                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT end: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_le
   4262 n
   4263       end if
   4264       return
   4265     end subroutine mpp_transmit_real8

Page 165         Source Listing                  MPP_TRANSMIT_REAL8
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_transmit_real8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALL_PES                    Param  4198     I(4)            4           scalar                    168,194,4198,4253,4826,4881,5454,5
                                                                                                  509,6079,6134,6704,6759,7329,7384 
 ANY_PE                     Param  4211     I(4)            4           scalar                    168,194,4211,4248,4839,4876,5467,5
                                                                                                  504,6092,6129,6717,6754,7342,7379 
 BLOCK                      Dummy  4133     L(4)            4           scalar   ARG,IN           4168                              
 BLOCK_COMM                 Local  4158     L(4)            4           scalar                    4167,4168,4222                    
 COMM_TAG                   Local  4161     I(4)            4           scalar                    4176,4177,4189,4194,4223,4235,4241
                                                                                                  ,4251                             
 FROM_PE                    Dummy  4133     I(4)            4           scalar   ARG,IN           4165,4173,4199,4201,4209,4219,4223
                                                                                                  ,4226,4235,4241,4248,4253,4255,426
                                                                                                  2                                 
 GET_DATA                   Dummy  4133     R(8)            8     1     0        ARG,TGT,OUT      4202,4205,4209,4223,4235,4241,4251
 GET_LEN                    Dummy  4133     I(4)            4           scalar   ARG,IN           4173,4200,4204,4209,4223,4225,4226
                                                                                                  ,4235,4241,4243,4247,4251,4252,426
                                                                                                  2                                 
 I                          Local  4159     I(4)            4           scalar                    4204,4205                         
 LOC                        Func   4202                                 scalar                    4202                              
 LOCAL_DATA                 Local  4160     R(8)            8     1     1        ALC,SAVE                                           
 MPI_ANY_SOURCE             Param  4251     I(4)            4           scalar   PRIV             4251,4879,5507,6132,6757,7382     
 MPI_IRECV                  Subr   4235                                                           4235,4241                         
 MPI_ISEND                  Subr   4189                                                           4189,4194                         
 MPI_REAL8                  Param  4189     I(4)            4           scalar   PRIV             4189,4194,4223,4224,4235,4241,4244
                                                                                                  ,4251,4302,7859,7879,8151,8171,845
                                                                                                  6,10143,10172,10173,11146,11161,11
                                                                                                  181                               
 MPI_RECV                   Subr   4223                                                           4223,4251                         
 MPP_TRANSMIT_REAL8         Subr   4133                                          PRIV             4354,4374,4394,4414,4434,4454,4464
                                                                                                  ,4483,4501                        
 NULL_PE                    Param  4165     I(4)            4           scalar                    168,194,4165,4214,4255,4454,4464,4
                                                                                                  483,4501,4514,4524,4536,4546,4558,
                                                                                                  4568,4580,4590,4793,4842,4883,5082
                                                                                                  ,5092,5111,5129,5142,5152,5164,517
                                                                                                  4,5186,5196,5208,5218,5421,5470,55
                                                                                                  11,5710,5720,5739,5757,5770,5780,5
                                                                                                  792,5802,5814,5824,5836,5846,6046,
                                                                                                  6095,6136,6335,6345,6364,6382,6395
                                                                                                  ,6405,6417,6427,6439,6449,6461,647
                                                                                                  1,6671,6720,6761,6960,6970,6989,70
                                                                                                  07,7020,7030,7042,7052,7064,7074,7
                                                                                                  086,7096,7296,7345,7386,7585,7595,
                                                                                                  7614,7632,7645,7655,7667,7677,7689
                                                                                                  ,7699,7711,7721                   
 PRESENT                    Func   4168                                 scalar                    4168,4177,4188,4234               
 PUT_DATA                   Dummy  4133     R(8)            8     1     0        ARG,TGT,IN       4189,4194,4202,4205               

Page 166         Source Listing                  MPP_TRANSMIT_REAL8
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_transmit_mpi.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PUT_LEN                    Dummy  4133     I(4)            4           scalar   ARG,IN           4173,4189,4194,4197,4200,4262     
 R8_KIND                    Param  4153     I(4)            4           scalar   PRIV             268,269,270,271,1129,1130,4153,415
                                                                                                  4,4160,4277,4339,4340,4346,4363,43
                                                                                                  64,4368,4383,4384,4388,4403,4404,4
                                                                                                  408,4423,4424,4428,4448,4453,4460,
                                                                                                  4463,4470,4477,4478,4490,4495,4496
                                                                                                  ,4508,4513,4520,4523,4530,4535,454
                                                                                                  2,4545,4552,4557,4564,4567,4574,45
                                                                                                  79,4586,4589,4600,4603,4617,4620,4
                                                                                                  633,4636,4649,4652,4665,4668,7849,
                                                                                                  7852,7868,7872,8141,8144,8160,8164
                                                                                                  ,8443,8445,8489,8491,8502,8505,851
                                                                                                  6,8519,8530,8533,8544,8547,9089,91
                                                                                                  33,9135,9146,9149,9160,9163,9174,9
                                                                                                  177,9188,9191,10126,10127,10153,10
                                                                                                  154,10184,10185,11117,12896,12899,
                                                                                                  12948,12950,12998,13000,13048,1305
                                                                                                  0,13098,13100,13148,13150,14274,14
                                                                                                  275,14315,14316,14364,14365,14369,
                                                                                                  14370,14387,14388,14396,14908,1490
                                                                                                  9,14913,14914,14931,14932,14940   
 RECV_REQUEST               Dummy  4133     I(4)            4           scalar   ARG,OUT          4234,4236                         
 RSIZE                      Local  4162     I(4)            4           scalar                    4224,4225,4226                    
 SEND_REQUEST               Dummy  4133     I(4)            4           scalar   ARG,OUT          4188,4189                         
 TAG                        Dummy  4133     I(4)            4           scalar   ARG,IN           4177                              
 TO_PE                      Dummy  4133     I(4)            4           scalar   ARG,IN           4165,4173,4180,4189,4194,4198,4211
                                                                                                  ,4214,4262                        

Page 167         Source Listing                  MPP_TRANSMIT_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   4266 
   4267 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4268 !                                                                             !
   4269 !                                MPP_BROADCAST                                !
   4270 !                                                                             !
   4271 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4272 
   4273     subroutine mpp_broadcast_real8( data, length, from_pe, pelist )
   4274 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   4275 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   4276 !backward compatible.
   4277       real(r8_kind), intent(inout) :: data(*)
   4278       integer, intent(in) :: length, from_pe
   4279       integer, intent(in), optional :: pelist(:)
   4280       integer :: n, i, from_rank, stdout_unit
   4281 
   4282       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_BROADCAST: You must first call mpp_init.' )
   4283       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   4284 
   4285       if( debug )then
   4286           call system_clock_mpi(tick)
   4287           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   4288                'T=',tick, ' PE=',pe, ' MPP_BROADCAST begin: from_pe, length=', from_pe, length
   4289       end if
   4290 
   4291       if( .NOT.ANY(from_pe.EQ.peset(current_peset_num)%list) ) &
   4292            call mpp_error( FATAL, 'MPP_BROADCAST: broadcasting from invalid PE.' )
   4293 
   4294       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   4295 ! find the rank of from_pe in the pelist.
   4296       do i = 1, mpp_npes()
   4297          if(peset(n)%list(i) == from_pe) then
   4298              from_rank = i - 1
   4299              exit
   4300          endif
   4301       enddo
   4302       if( mpp_npes().GT.1 )call MPI_BCAST( data, length, MPI_REAL8, from_rank, peset(n)%id, error )
   4303       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_BROADCAST, length*8 )
   4304       return
   4305     end subroutine mpp_broadcast_real8

Page 168         Source Listing                  MPP_BROADCAST_REAL8
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_broadcast_real8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   4291                                 scalar                    4291                              
 DATA                       Dummy  4273     R(8)            8     1     0        ARG,INOUT        4302                              
 FROM_PE                    Dummy  4273     I(4)            4           scalar   ARG,IN           4288,4291,4297                    
 FROM_RANK                  Local  4280     I(4)            4           scalar                    4298,4302                         
 I                          Local  4280     I(4)            4           scalar                    4296,4297,4298                    
 LENGTH                     Dummy  4273     I(4)            4           scalar   ARG,IN           4288,4302,4303                    
 MPI_BCAST                  Subr   4302                                                           4302                              
 MPP_BROADCAST_REAL8        Subr   4273                                          PRIV             4209,4608,4624,4640,4656,4672,9101
 N                          Local  4280     I(4)            4           scalar                    4283,4297,4302                    
 PELIST                     Dummy  4273     I(4)            4     1     1        ARG,IN           4283                              
 STDOUT_UNIT                Local  4280     I(4)            4           scalar                    4287                              

Page 169         Source Listing                  MPP_BROADCAST_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   4306 
   4307 !####################################################################################
   4308 # 1 "../mpp/include/mpp_transmit.inc" 1 
   4309 ! -*-f90-*-
   4310 
   4311 !***********************************************************************
   4312 !*                   GNU Lesser General Public License
   4313 !*
   4314 !* This file is part of the GFDL Flexible Modeling System (FMS).
   4315 !*
   4316 !* FMS is free software: you can redistribute it and/or modify it under
   4317 !* the terms of the GNU Lesser General Public License as published by
   4318 !* the Free Software Foundation, either version 3 of the License, or (at
   4319 !* your option) any later version.
   4320 !*
   4321 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   4322 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   4323 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   4324 !* for more details.
   4325 !*
   4326 !* You should have received a copy of the GNU Lesser General Public
   4327 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   4328 !***********************************************************************
   4329 
   4330 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4331 !                                                                             !
   4332 !                                  MPP_TRANSMIT                               !
   4333 !                                                                             !
   4334 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4335 
   4336     subroutine mpp_transmit_real8_scalar( put_data, to_pe, get_data, from_pe, plen, glen, block, tag, &
   4337                                     recv_request, send_request)
   4338       integer, intent(in) :: to_pe, from_pe
   4339       real(r8_kind), intent(in)  :: put_data
   4340       real(r8_kind), intent(out) :: get_data
   4341       integer, optional,  intent(in) :: plen, glen
   4342       logical, intent(in),  optional :: block
   4343       integer, intent(in),  optional :: tag
   4344       integer, intent(out), optional :: recv_request, send_request
   4345       integer                       :: put_len, get_len
   4346       real(r8_kind) :: put_data1D(1), get_data1D(1)
   4347       pointer( ptrp, put_data1D )
   4348       pointer( ptrg, get_data1D )
   4349 
   4350       ptrp = LOC(put_data)
   4351       ptrg = LOC(get_data)
   4352       put_len=1; if(PRESENT(plen))put_len=plen
   4353       get_len=1; if(PRESENT(glen))get_len=glen
   4354       call mpp_transmit_real8 ( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   4355                            recv_request=recv_request, send_request=send_request )
   4356 
   4357       return
   4358     end subroutine mpp_transmit_real8_scalar

Page 170         Source Listing                  MPP_TRANSMIT_REAL8_SCALAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit.inc



ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_transmit_real8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4336     L(4)            4           scalar   ARG,IN           4354                              
 FROM_PE                    Dummy  4336     I(4)            4           scalar   ARG,IN           4354                              
 GET_DATA                   Dummy  4336     R(8)            8           scalar   ARG,TGT,OUT      4351                              
 GET_DATA1D                 Local  4346     R(8)            8     1     1                         4354                              
 GET_LEN                    Local  4345     I(4)            4           scalar                    4353,4354                         
 GLEN                       Dummy  4336     I(4)            4           scalar   ARG,IN           4353                              
 LOC                        Func   4350                                 scalar                    4350,4351                         
 MPP_TRANSMIT_REAL8_SCALAR  Subr   4336                                          PRIV                                               
 PLEN                       Dummy  4336     I(4)            4           scalar   ARG,IN           4352                              
 PRESENT                    Func   4352                                 scalar                    4352,4353                         
 PTRG                       Local  4348     I(8)            8           scalar   PTR              4351                              
 PTRP                       Local  4347     I(8)            8           scalar   PTR              4350                              
 PUT_DATA                   Dummy  4336     R(8)            8           scalar   ARG,TGT,IN       4350                              
 PUT_DATA1D                 Local  4346     R(8)            8     1     1                         4354                              
 PUT_LEN                    Local  4345     I(4)            4           scalar                    4352,4354                         
 RECV_REQUEST               Dummy  4337     I(4)            4           scalar   ARG,OUT          4355                              
 SEND_REQUEST               Dummy  4337     I(4)            4           scalar   ARG,OUT          4355                              
 TAG                        Dummy  4336     I(4)            4           scalar   ARG,IN           4354                              
 TO_PE                      Dummy  4336     I(4)            4           scalar   ARG,IN           4354                              

Page 171         Source Listing                  MPP_TRANSMIT_REAL8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4359 
   4360     subroutine mpp_transmit_real8_2d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   4361                                 recv_request, send_request )
   4362       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   4363       real(r8_kind), intent(in)  :: put_data(:,:)
   4364       real(r8_kind), intent(out) :: get_data(:,:)
   4365       logical, intent(in), optional :: block
   4366       integer, intent(in), optional :: tag
   4367       integer, intent(out), optional :: recv_request, send_request
   4368       real(r8_kind) :: put_data1D(put_len), get_data1D(get_len)
   4369 
   4370       pointer( ptrp, put_data1D )
   4371       pointer( ptrg, get_data1D )
   4372       ptrp = LOC(put_data)
   4373       ptrg = LOC(get_data)
   4374       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   4375                          recv_request=recv_request, send_request=send_request )
   4376 
   4377       return
   4378     end subroutine mpp_transmit_real8_2d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_transmit_real8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4360     L(4)            4           scalar   ARG,IN           4374                              
 FROM_PE                    Dummy  4360     I(4)            4           scalar   ARG,IN           4374                              
 GET_DATA                   Dummy  4360     R(8)            8     2     1        ARG,OUT          4373                              
 GET_DATA1D                 Local  4368     R(8)            8     1     0                         4374                              
 GET_LEN                    Dummy  4360     I(4)            4           scalar   ARG,IN           4368,4374                         
 LOC                        Func   4372                                 scalar                    4372,4373                         
 MPP_TRANSMIT               Local  4374                                 scalar                    222,4374,4394,4414,4434,4454,4464,
                                                                                                  4483,4501,4514,4524,4536,4546,4558
                                                                                                  ,4568,4580,4590,5002,5022,5042,506
                                                                                                  2,5082,5092,5111,5129,5142,5152,51
                                                                                                  64,5174,5186,5196,5208,5218,5630,5
                                                                                                  650,5670,5690,5710,5720,5739,5757,
                                                                                                  5770,5780,5792,5802,5814,5824,5836
                                                                                                  ,5846,6255,6275,6295,6315,6335,634
                                                                                                  5,6364,6382,6395,6405,6417,6427,64
                                                                                                  39,6449,6461,6471,6880,6900,6920,6
                                                                                                  940,6960,6970,6989,7007,7020,7030,
                                                                                                  7042,7052,7064,7074,7086,7096,7505
                                                                                                  ,7525,7545,7565,7585,7595,7614,763
                                                                                                  2,7645,7655,7667,7677,7689,7699,77
                                                                                                  11,7721                           
 MPP_TRANSMIT_REAL8_2D      Subr   4360                                          PRIV             4514,4524                         
 PTRG                       Local  4371     I(8)            8           scalar   PTR              4373                              
 PTRP                       Local  4370     I(8)            8           scalar   PTR              4372                              

Page 172         Source Listing                  MPP_TRANSMIT_REAL8_2D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_transmit.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PUT_DATA                   Dummy  4360     R(8)            8     2     1        ARG,IN           4372                              
 PUT_DATA1D                 Local  4368     R(8)            8     1     0                         4374                              
 PUT_LEN                    Dummy  4360     I(4)            4           scalar   ARG,IN           4368,4374                         
 RECV_REQUEST               Dummy  4361     I(4)            4           scalar   ARG,OUT          4375                              
 SEND_REQUEST               Dummy  4361     I(4)            4           scalar   ARG,OUT          4375                              
 TAG                        Dummy  4360     I(4)            4           scalar   ARG,IN           4374                              
 TO_PE                      Dummy  4360     I(4)            4           scalar   ARG,IN           4374                              

Page 173         Source Listing                  MPP_TRANSMIT_REAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4379 
   4380     subroutine mpp_transmit_real8_3d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   4381                                 recv_request, send_request )
   4382       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   4383       real(r8_kind), intent(in)  :: put_data(:,:,:)
   4384       real(r8_kind), intent(out) :: get_data(:,:,:)
   4385       logical, intent(in), optional :: block
   4386       integer, intent(in), optional :: tag
   4387       integer, intent(out), optional :: recv_request, send_request
   4388       real(r8_kind) :: put_data1D(put_len), get_data1D(get_len)
   4389 
   4390       pointer( ptrp, put_data1D )
   4391       pointer( ptrg, get_data1D )
   4392       ptrp = LOC(put_data)
   4393       ptrg = LOC(get_data)
   4394       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   4395                          recv_request=recv_request, send_request=send_request )
   4396 
   4397       return
   4398     end subroutine mpp_transmit_real8_3d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_transmit_real8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4380     L(4)            4           scalar   ARG,IN           4394                              
 FROM_PE                    Dummy  4380     I(4)            4           scalar   ARG,IN           4394                              
 GET_DATA                   Dummy  4380     R(8)            8     3     1        ARG,OUT          4393                              
 GET_DATA1D                 Local  4388     R(8)            8     1     0                         4394                              
 GET_LEN                    Dummy  4380     I(4)            4           scalar   ARG,IN           4388,4394                         
 LOC                        Func   4392                                 scalar                    4392,4393                         
 MPP_TRANSMIT_REAL8_3D      Subr   4380                                          PRIV             4536,4546                         
 PTRG                       Local  4391     I(8)            8           scalar   PTR              4393                              
 PTRP                       Local  4390     I(8)            8           scalar   PTR              4392                              
 PUT_DATA                   Dummy  4380     R(8)            8     3     1        ARG,IN           4392                              
 PUT_DATA1D                 Local  4388     R(8)            8     1     0                         4394                              
 PUT_LEN                    Dummy  4380     I(4)            4           scalar   ARG,IN           4388,4394                         
 RECV_REQUEST               Dummy  4381     I(4)            4           scalar   ARG,OUT          4395                              
 SEND_REQUEST               Dummy  4381     I(4)            4           scalar   ARG,OUT          4395                              
 TAG                        Dummy  4380     I(4)            4           scalar   ARG,IN           4394                              
 TO_PE                      Dummy  4380     I(4)            4           scalar   ARG,IN           4394                              

Page 174         Source Listing                  MPP_TRANSMIT_REAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4399 
   4400     subroutine mpp_transmit_real8_4d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   4401                                 recv_request, send_request )
   4402       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   4403       real(r8_kind), intent(in)  :: put_data(:,:,:,:)
   4404       real(r8_kind), intent(out) :: get_data(:,:,:,:)
   4405       logical, intent(in), optional :: block
   4406       integer, intent(in), optional :: tag
   4407       integer, intent(out), optional :: recv_request, send_request
   4408       real(r8_kind) :: put_data1D(put_len), get_data1D(get_len)
   4409 
   4410       pointer( ptrp, put_data1D )
   4411       pointer( ptrg, get_data1D )
   4412       ptrp = LOC(put_data)
   4413       ptrg = LOC(get_data)
   4414       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   4415                          recv_request=recv_request, send_request=send_request )
   4416 
   4417       return
   4418     end subroutine mpp_transmit_real8_4d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_transmit_real8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4400     L(4)            4           scalar   ARG,IN           4414                              
 FROM_PE                    Dummy  4400     I(4)            4           scalar   ARG,IN           4414                              
 GET_DATA                   Dummy  4400     R(8)            8     4     1        ARG,OUT          4413                              
 GET_DATA1D                 Local  4408     R(8)            8     1     0                         4414                              
 GET_LEN                    Dummy  4400     I(4)            4           scalar   ARG,IN           4408,4414                         
 LOC                        Func   4412                                 scalar                    4412,4413                         
 MPP_TRANSMIT_REAL8_4D      Subr   4400                                          PRIV             4558,4568                         
 PTRG                       Local  4411     I(8)            8           scalar   PTR              4413                              
 PTRP                       Local  4410     I(8)            8           scalar   PTR              4412                              
 PUT_DATA                   Dummy  4400     R(8)            8     4     1        ARG,IN           4412                              
 PUT_DATA1D                 Local  4408     R(8)            8     1     0                         4414                              
 PUT_LEN                    Dummy  4400     I(4)            4           scalar   ARG,IN           4408,4414                         
 RECV_REQUEST               Dummy  4401     I(4)            4           scalar   ARG,OUT          4415                              
 SEND_REQUEST               Dummy  4401     I(4)            4           scalar   ARG,OUT          4415                              
 TAG                        Dummy  4400     I(4)            4           scalar   ARG,IN           4414                              
 TO_PE                      Dummy  4400     I(4)            4           scalar   ARG,IN           4414                              

Page 175         Source Listing                  MPP_TRANSMIT_REAL8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4419 
   4420     subroutine mpp_transmit_real8_5d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   4421                                 recv_request, send_request )
   4422       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   4423       real(r8_kind), intent(in)  :: put_data(:,:,:,:,:)
   4424       real(r8_kind), intent(out) :: get_data(:,:,:,:,:)
   4425       logical, intent(in), optional :: block
   4426       integer, intent(in), optional :: tag
   4427       integer, intent(out), optional :: recv_request, send_request
   4428       real(r8_kind) :: put_data1D(put_len), get_data1D(get_len)
   4429 
   4430       pointer( ptrp, put_data1D )
   4431       pointer( ptrg, get_data1D )
   4432       ptrp = LOC(put_data)
   4433       ptrg = LOC(get_data)
   4434       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   4435                          recv_request=recv_request, send_request=send_request )
   4436 
   4437       return
   4438     end subroutine mpp_transmit_real8_5d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_transmit_real8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4420     L(4)            4           scalar   ARG,IN           4434                              
 FROM_PE                    Dummy  4420     I(4)            4           scalar   ARG,IN           4434                              
 GET_DATA                   Dummy  4420     R(8)            8     5     1        ARG,OUT          4433                              
 GET_DATA1D                 Local  4428     R(8)            8     1     0                         4434                              
 GET_LEN                    Dummy  4420     I(4)            4           scalar   ARG,IN           4428,4434                         
 LOC                        Func   4432                                 scalar                    4432,4433                         
 MPP_TRANSMIT_REAL8_5D      Subr   4420                                          PRIV             4580,4590                         
 PTRG                       Local  4431     I(8)            8           scalar   PTR              4433                              
 PTRP                       Local  4430     I(8)            8           scalar   PTR              4432                              
 PUT_DATA                   Dummy  4420     R(8)            8     5     1        ARG,IN           4432                              
 PUT_DATA1D                 Local  4428     R(8)            8     1     0                         4434                              
 PUT_LEN                    Dummy  4420     I(4)            4           scalar   ARG,IN           4428,4434                         
 RECV_REQUEST               Dummy  4421     I(4)            4           scalar   ARG,OUT          4435                              
 SEND_REQUEST               Dummy  4421     I(4)            4           scalar   ARG,OUT          4435                              
 TAG                        Dummy  4420     I(4)            4           scalar   ARG,IN           4434                              
 TO_PE                      Dummy  4420     I(4)            4           scalar   ARG,IN           4434                              

Page 176         Source Listing                  MPP_TRANSMIT_REAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4439 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4440 !                                                                             !
   4441 !                              MPP_SEND and RECV                              !
   4442 !                                                                             !
   4443 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4444 
   4445     subroutine mpp_recv_real8( get_data, get_len, from_pe, block, tag, request )
   4446 !a mpp_transmit with null arguments on the put side
   4447       integer, intent(in) :: get_len, from_pe
   4448       real(r8_kind), intent(out) :: get_data(*)
   4449       logical, intent(in), optional :: block
   4450       integer, intent(in), optional :: tag
   4451       integer, intent(out), optional :: request
   4452 
   4453       real(r8_kind) :: dummy(1)
   4454       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   4455     end subroutine mpp_recv_real8


ENTRY POINTS

  Name                                  
                                        
 mpp_mod_mp_mpp_recv_real8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4445     L(4)            4           scalar   ARG,IN           4454                              
 DUMMY                      Local  4453     R(8)            8     1     1                         4454                              
 FROM_PE                    Dummy  4445     I(4)            4           scalar   ARG,IN           4454                              
 GET_DATA                   Dummy  4445     R(8)            8     1     0        ARG,OUT          4454                              
 GET_LEN                    Dummy  4445     I(4)            4           scalar   ARG,IN           4454                              
 MPP_RECV_REAL8             Subr   4445                                          PRIV                                               
 REQUEST                    Dummy  4445     I(4)            4           scalar   ARG,OUT          4454                              
 TAG                        Dummy  4445     I(4)            4           scalar   ARG,IN           4454                              

Page 177         Source Listing                  MPP_RECV_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4456 
   4457     subroutine mpp_send_real8( put_data, put_len, to_pe, tag, request )
   4458 !a mpp_transmit with null arguments on the get side
   4459       integer, intent(in) :: put_len, to_pe
   4460       real(r8_kind), intent(in) :: put_data(*)
   4461       integer, intent(in), optional :: tag
   4462       integer, intent(out), optional :: request
   4463       real(r8_kind) :: dummy(1)
   4464       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag=tag, send_request=request )
   4465     end subroutine mpp_send_real8


ENTRY POINTS

  Name                                  
                                        
 mpp_mod_mp_mpp_send_real8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  4463     R(8)            8     1     1                         4464                              
 MPP_SEND_REAL8             Subr   4457                                          PRIV                                               
 PUT_DATA                   Dummy  4457     R(8)            8     1     0        ARG,IN           4464                              
 PUT_LEN                    Dummy  4457     I(4)            4           scalar   ARG,IN           4464                              
 REQUEST                    Dummy  4457     I(4)            4           scalar   ARG,OUT          4464                              
 TAG                        Dummy  4457     I(4)            4           scalar   ARG,IN           4464                              
 TO_PE                      Dummy  4457     I(4)            4           scalar   ARG,IN           4464                              

Page 178         Source Listing                  MPP_SEND_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4466 
   4467     subroutine mpp_recv_real8_scalar( get_data, from_pe, glen, block, tag, request )
   4468 !a mpp_transmit with null arguments on the put side
   4469       integer, intent(in) :: from_pe
   4470       real(r8_kind), intent(out) :: get_data
   4471       logical, intent(in), optional :: block
   4472       integer, intent(in), optional :: tag
   4473       integer, intent(out), optional :: request
   4474 
   4475       integer, optional, intent(in) :: glen
   4476       integer                       :: get_len
   4477       real(r8_kind) :: get_data1D(1)
   4478       real(r8_kind) :: dummy(1)
   4479 
   4480       pointer( ptr, get_data1D )
   4481       ptr = LOC(get_data)
   4482       get_len=1; if(PRESENT(glen))get_len=glen
   4483       call mpp_transmit( dummy, 1, NULL_PE, get_data1D, get_len, from_pe, block, tag, recv_request=request )
   4484 
   4485     end subroutine mpp_recv_real8_scalar


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_recv_real8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4467     L(4)            4           scalar   ARG,IN           4483                              
 DUMMY                      Local  4478     R(8)            8     1     1                         4483                              
 FROM_PE                    Dummy  4467     I(4)            4           scalar   ARG,IN           4483                              
 GET_DATA                   Dummy  4467     R(8)            8           scalar   ARG,TGT,OUT      4481                              
 GET_DATA1D                 Local  4477     R(8)            8     1     1                         4483                              
 GET_LEN                    Local  4476     I(4)            4           scalar                    4482,4483                         
 GLEN                       Dummy  4467     I(4)            4           scalar   ARG,IN           4482                              
 LOC                        Func   4481                                 scalar                    4481                              
 MPP_RECV_REAL8_SCALAR      Subr   4467                                          PRIV             14303,14345                       
 PRESENT                    Func   4482                                 scalar                    4482                              
 PTR                        Local  4480     I(8)            8           scalar   PTR              4481                              
 REQUEST                    Dummy  4467     I(4)            4           scalar   ARG,OUT          4483                              
 TAG                        Dummy  4467     I(4)            4           scalar   ARG,IN           4483                              

Page 179         Source Listing                  MPP_RECV_REAL8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4486 
   4487     subroutine mpp_send_real8_scalar( put_data, to_pe, plen, tag, request)
   4488 !a mpp_transmit with null arguments on the get side
   4489       integer, intent(in) :: to_pe
   4490       real(r8_kind), intent(in) :: put_data
   4491       integer, optional, intent(in) :: plen
   4492       integer, intent(in), optional :: tag
   4493       integer, intent(out), optional :: request
   4494       integer                       :: put_len
   4495       real(r8_kind) :: put_data1D(1)
   4496       real(r8_kind) :: dummy(1)
   4497 
   4498       pointer( ptr, put_data1D )
   4499       ptr = LOC(put_data)
   4500       put_len=1; if(PRESENT(plen))put_len=plen
   4501       call mpp_transmit( put_data1D, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   4502 
   4503     end subroutine mpp_send_real8_scalar


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_send_real8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  4496     R(8)            8     1     1                         4501                              
 LOC                        Func   4499                                 scalar                    4499                              
 MPP_SEND_REAL8_SCALAR      Subr   4487                                          PRIV             14306,14351                       
 PLEN                       Dummy  4487     I(4)            4           scalar   ARG,IN           4500                              
 PRESENT                    Func   4500                                 scalar                    4500                              
 PTR                        Local  4498     I(8)            8           scalar   PTR              4499                              
 PUT_DATA                   Dummy  4487     R(8)            8           scalar   ARG,TGT,IN       4499                              
 PUT_DATA1D                 Local  4495     R(8)            8     1     1                         4501                              
 PUT_LEN                    Local  4494     I(4)            4           scalar                    4500,4501                         
 REQUEST                    Dummy  4487     I(4)            4           scalar   ARG,OUT          4501                              
 TAG                        Dummy  4487     I(4)            4           scalar   ARG,IN           4501                              
 TO_PE                      Dummy  4487     I(4)            4           scalar   ARG,IN           4501                              

Page 180         Source Listing                  MPP_SEND_REAL8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4504 
   4505     subroutine mpp_recv_real8_2d( get_data, get_len, from_pe, block, tag, request )
   4506 !a mpp_transmit with null arguments on the put side
   4507       integer, intent(in) :: get_len, from_pe
   4508       real(r8_kind), intent(out) :: get_data(:,:)
   4509       logical, intent(in), optional :: block
   4510       integer, intent(in), optional :: tag
   4511       integer, intent(out), optional :: request
   4512 
   4513       real(r8_kind) :: dummy(1,1)
   4514       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   4515     end subroutine mpp_recv_real8_2d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_recv_real8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4505     L(4)            4           scalar   ARG,IN           4514                              
 DUMMY                      Local  4513     R(8)            8     2     1        TGT              4514                              
 FROM_PE                    Dummy  4505     I(4)            4           scalar   ARG,IN           4514                              
 GET_DATA                   Dummy  4505     R(8)            8     2     1        ARG,OUT          4514                              
 GET_LEN                    Dummy  4505     I(4)            4           scalar   ARG,IN           4514                              
 MPP_RECV_REAL8_2D          Subr   4505                                          PRIV                                               
 REQUEST                    Dummy  4505     I(4)            4           scalar   ARG,OUT          4514                              
 TAG                        Dummy  4505     I(4)            4           scalar   ARG,IN           4514                              

Page 181         Source Listing                  MPP_RECV_REAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4516 
   4517     subroutine mpp_send_real8_2d( put_data, put_len, to_pe, tag, request )
   4518 !a mpp_transmit with null arguments on the get side
   4519       integer, intent(in) :: put_len, to_pe
   4520       real(r8_kind), intent(in) :: put_data(:,:)
   4521       integer, intent(in), optional :: tag
   4522       integer, intent(out), optional :: request
   4523       real(r8_kind) :: dummy(1,1)
   4524       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   4525     end subroutine mpp_send_real8_2d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_send_real8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  4523     R(8)            8     2     1        TGT              4524                              
 MPP_SEND_REAL8_2D          Subr   4517                                          PRIV                                               
 PUT_DATA                   Dummy  4517     R(8)            8     2     1        ARG,IN           4524                              
 PUT_LEN                    Dummy  4517     I(4)            4           scalar   ARG,IN           4524                              
 REQUEST                    Dummy  4517     I(4)            4           scalar   ARG,OUT          4524                              
 TAG                        Dummy  4517     I(4)            4           scalar   ARG,IN           4524                              
 TO_PE                      Dummy  4517     I(4)            4           scalar   ARG,IN           4524                              

Page 182         Source Listing                  MPP_SEND_REAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4526 
   4527     subroutine mpp_recv_real8_3d( get_data, get_len, from_pe, block, tag, request )
   4528 !a mpp_transmit with null arguments on the put side
   4529       integer, intent(in) :: get_len, from_pe
   4530       real(r8_kind), intent(out) :: get_data(:,:,:)
   4531       logical, intent(in), optional :: block
   4532       integer, intent(in), optional :: tag
   4533       integer, intent(out), optional :: request
   4534 
   4535       real(r8_kind) :: dummy(1,1,1)
   4536       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   4537     end subroutine mpp_recv_real8_3d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_recv_real8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4527     L(4)            4           scalar   ARG,IN           4536                              
 DUMMY                      Local  4535     R(8)            8     3     1        TGT              4536                              
 FROM_PE                    Dummy  4527     I(4)            4           scalar   ARG,IN           4536                              
 GET_DATA                   Dummy  4527     R(8)            8     3     1        ARG,OUT          4536                              
 GET_LEN                    Dummy  4527     I(4)            4           scalar   ARG,IN           4536                              
 MPP_RECV_REAL8_3D          Subr   4527                                          PRIV             14467,15026                       
 REQUEST                    Dummy  4527     I(4)            4           scalar   ARG,OUT          4536                              
 TAG                        Dummy  4527     I(4)            4           scalar   ARG,IN           4536                              

Page 183         Source Listing                  MPP_RECV_REAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4538 
   4539     subroutine mpp_send_real8_3d( put_data, put_len, to_pe, tag, request )
   4540 !a mpp_transmit with null arguments on the get side
   4541       integer, intent(in) :: put_len, to_pe
   4542       real(r8_kind), intent(in) :: put_data(:,:,:)
   4543       integer, intent(in), optional :: tag
   4544       integer, intent(out), optional :: request
   4545       real(r8_kind) :: dummy(1,1,1)
   4546       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   4547     end subroutine mpp_send_real8_3d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_send_real8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  4545     R(8)            8     3     1        TGT              4546                              
 MPP_SEND_REAL8_3D          Subr   4539                                          PRIV             14489,15012                       
 PUT_DATA                   Dummy  4539     R(8)            8     3     1        ARG,IN           4546                              
 PUT_LEN                    Dummy  4539     I(4)            4           scalar   ARG,IN           4546                              
 REQUEST                    Dummy  4539     I(4)            4           scalar   ARG,OUT          4546                              
 TAG                        Dummy  4539     I(4)            4           scalar   ARG,IN           4546                              
 TO_PE                      Dummy  4539     I(4)            4           scalar   ARG,IN           4546                              

Page 184         Source Listing                  MPP_SEND_REAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4548 
   4549     subroutine mpp_recv_real8_4d( get_data, get_len, from_pe, block, tag, request )
   4550 !a mpp_transmit with null arguments on the put side
   4551       integer, intent(in) :: get_len, from_pe
   4552       real(r8_kind), intent(out) :: get_data(:,:,:,:)
   4553       logical, intent(in), optional :: block
   4554       integer, intent(in), optional :: tag
   4555       integer, intent(out), optional :: request
   4556 
   4557       real(r8_kind) :: dummy(1,1,1,1)
   4558       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   4559     end subroutine mpp_recv_real8_4d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_recv_real8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4549     L(4)            4           scalar   ARG,IN           4558                              
 DUMMY                      Local  4557     R(8)            8     4     1        TGT              4558                              
 FROM_PE                    Dummy  4549     I(4)            4           scalar   ARG,IN           4558                              
 GET_DATA                   Dummy  4549     R(8)            8     4     1        ARG,OUT          4558                              
 GET_LEN                    Dummy  4549     I(4)            4           scalar   ARG,IN           4558                              
 MPP_RECV_REAL8_4D          Subr   4549                                          PRIV                                               
 REQUEST                    Dummy  4549     I(4)            4           scalar   ARG,OUT          4558                              
 TAG                        Dummy  4549     I(4)            4           scalar   ARG,IN           4558                              

Page 185         Source Listing                  MPP_RECV_REAL8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4560 
   4561     subroutine mpp_send_real8_4d( put_data, put_len, to_pe, tag, request )
   4562 !a mpp_transmit with null arguments on the get side
   4563       integer, intent(in) :: put_len, to_pe
   4564       real(r8_kind), intent(in) :: put_data(:,:,:,:)
   4565       integer, intent(in), optional :: tag
   4566       integer, intent(out), optional :: request
   4567       real(r8_kind) :: dummy(1,1,1,1)
   4568       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   4569     end subroutine mpp_send_real8_4d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_send_real8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  4567     R(8)            8     4     1        TGT              4568                              
 MPP_SEND_REAL8_4D          Subr   4561                                          PRIV                                               
 PUT_DATA                   Dummy  4561     R(8)            8     4     1        ARG,IN           4568                              
 PUT_LEN                    Dummy  4561     I(4)            4           scalar   ARG,IN           4568                              
 REQUEST                    Dummy  4561     I(4)            4           scalar   ARG,OUT          4568                              
 TAG                        Dummy  4561     I(4)            4           scalar   ARG,IN           4568                              
 TO_PE                      Dummy  4561     I(4)            4           scalar   ARG,IN           4568                              

Page 186         Source Listing                  MPP_SEND_REAL8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4570 
   4571     subroutine mpp_recv_real8_5d( get_data, get_len, from_pe, block, tag, request)
   4572 !a mpp_transmit with null arguments on the put side
   4573       integer, intent(in) :: get_len, from_pe
   4574       real(r8_kind), intent(out) :: get_data(:,:,:,:,:)
   4575       logical, intent(in), optional :: block
   4576       integer, intent(in), optional :: tag
   4577       integer, intent(out), optional :: request
   4578 
   4579       real(r8_kind) :: dummy(1,1,1,1,1)
   4580       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   4581     end subroutine mpp_recv_real8_5d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_recv_real8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4571     L(4)            4           scalar   ARG,IN           4580                              
 DUMMY                      Local  4579     R(8)            8     5     1        TGT              4580                              
 FROM_PE                    Dummy  4571     I(4)            4           scalar   ARG,IN           4580                              
 GET_DATA                   Dummy  4571     R(8)            8     5     1        ARG,OUT          4580                              
 GET_LEN                    Dummy  4571     I(4)            4           scalar   ARG,IN           4580                              
 MPP_RECV_REAL8_5D          Subr   4571                                          PRIV                                               
 REQUEST                    Dummy  4571     I(4)            4           scalar   ARG,OUT          4580                              
 TAG                        Dummy  4571     I(4)            4           scalar   ARG,IN           4580                              

Page 187         Source Listing                  MPP_RECV_REAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4582 
   4583     subroutine mpp_send_real8_5d( put_data, put_len, to_pe, tag, request )
   4584 !a mpp_transmit with null arguments on the get side
   4585       integer, intent(in) :: put_len, to_pe
   4586       real(r8_kind), intent(in) :: put_data(:,:,:,:,:)
   4587       integer, intent(in), optional :: tag
   4588       integer, intent(out), optional :: request
   4589       real(r8_kind) :: dummy(1,1,1,1,1)
   4590       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   4591     end subroutine mpp_send_real8_5d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_send_real8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  4589     R(8)            8     5     1        TGT              4590                              
 MPP_SEND_REAL8_5D          Subr   4583                                          PRIV                                               
 PUT_DATA                   Dummy  4583     R(8)            8     5     1        ARG,IN           4590                              
 PUT_LEN                    Dummy  4583     I(4)            4           scalar   ARG,IN           4590                              
 REQUEST                    Dummy  4583     I(4)            4           scalar   ARG,OUT          4590                              
 TAG                        Dummy  4583     I(4)            4           scalar   ARG,IN           4590                              
 TO_PE                      Dummy  4583     I(4)            4           scalar   ARG,IN           4590                              

Page 188         Source Listing                  MPP_SEND_REAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4592 
   4593 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4594 !                                                                             !
   4595 !                                MPP_BROADCAST                                !
   4596 !                                                                             !
   4597 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4598 
   4599     subroutine mpp_broadcast_real8_scalar( data, from_pe, pelist )
   4600       real(r8_kind), intent(inout) :: data
   4601       integer, intent(in) :: from_pe
   4602       integer, intent(in), optional :: pelist(:)
   4603       real(r8_kind) :: data1D(1)
   4604 
   4605       pointer( ptr, data1D )
   4606 
   4607       ptr = LOC(data)
   4608       call mpp_broadcast_real8( data1D, 1, from_pe, pelist )
   4609 
   4610       return
   4611     end subroutine mpp_broadcast_real8_scalar


ENTRY POINTS

  Name                                              
                                                    
 mpp_mod_mp_mpp_broadcast_real8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4599     R(8)            8           scalar   ARG,TGT,INOUT    4607                              
 DATA1D                     Local  4603     R(8)            8     1     1                         4608                              
 FROM_PE                    Dummy  4599     I(4)            4           scalar   ARG,IN           4608                              
 LOC                        Func   4607                                 scalar                    4607                              
 MPP_BROADCAST_REAL8_SCALAR Subr   4599                                          PRIV                                               
 PELIST                     Dummy  4599     I(4)            4     1     1        ARG,IN           4608                              
 PTR                        Local  4605     I(8)            8           scalar   PTR              4607                              

Page 189         Source Listing                  MPP_BROADCAST_REAL8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4612 
   4613     subroutine mpp_broadcast_real8_2d( data, length, from_pe, pelist )
   4614 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   4615 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   4616 !backward compatible.
   4617       real(r8_kind), intent(inout) :: data(:,:)
   4618       integer, intent(in) :: length, from_pe
   4619       integer, intent(in), optional :: pelist(:)
   4620       real(r8_kind) :: data1D(length)
   4621 
   4622       pointer( ptr, data1D )
   4623       ptr = LOC(data)
   4624       call mpp_broadcast( data1D, length, from_pe, pelist )
   4625 
   4626       return
   4627     end subroutine mpp_broadcast_real8_2d


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_broadcast_real8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4613     R(8)            8     2     1        ARG,INOUT        4623                              
 DATA1D                     Local  4620     R(8)            8     1     0                         4624                              
 FROM_PE                    Dummy  4613     I(4)            4           scalar   ARG,IN           4624                              
 LENGTH                     Dummy  4613     I(4)            4           scalar   ARG,IN           4620,4624                         
 LOC                        Func   4623                                 scalar                    4623                              
 MPP_BROADCAST_REAL8_2D     Subr   4613                                          PRIV                                               
 PELIST                     Dummy  4613     I(4)            4     1     1        ARG,IN           4624                              
 PTR                        Local  4622     I(8)            8           scalar   PTR              4623                              

Page 190         Source Listing                  MPP_BROADCAST_REAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4628 
   4629     subroutine mpp_broadcast_real8_3d( data, length, from_pe, pelist )
   4630 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   4631 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   4632 !backward compatible.
   4633       real(r8_kind), intent(inout) :: data(:,:,:)
   4634       integer, intent(in) :: length, from_pe
   4635       integer, intent(in), optional :: pelist(:)
   4636       real(r8_kind) :: data1D(length)
   4637 
   4638       pointer( ptr, data1D )
   4639       ptr = LOC(data)
   4640       call mpp_broadcast( data1D, length, from_pe, pelist )
   4641 
   4642       return
   4643    end subroutine mpp_broadcast_real8_3d


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_broadcast_real8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4629     R(8)            8     3     1        ARG,INOUT        4639                              
 DATA1D                     Local  4636     R(8)            8     1     0                         4640                              
 FROM_PE                    Dummy  4629     I(4)            4           scalar   ARG,IN           4640                              
 LENGTH                     Dummy  4629     I(4)            4           scalar   ARG,IN           4636,4640                         
 LOC                        Func   4639                                 scalar                    4639                              
 MPP_BROADCAST_REAL8_3D     Subr   4629                                          PRIV                                               
 PELIST                     Dummy  4629     I(4)            4     1     1        ARG,IN           4640                              
 PTR                        Local  4638     I(8)            8           scalar   PTR              4639                              

Page 191         Source Listing                  MPP_BROADCAST_REAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4644 
   4645     subroutine mpp_broadcast_real8_4d( data, length, from_pe, pelist )
   4646 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   4647 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   4648 !backward compatible.
   4649       real(r8_kind), intent(inout) :: data(:,:,:,:)
   4650       integer, intent(in) :: length, from_pe
   4651       integer, intent(in), optional :: pelist(:)
   4652       real(r8_kind) :: data1D(length)
   4653 
   4654       pointer( ptr, data1D )
   4655       ptr = LOC(data)
   4656       call mpp_broadcast( data1D, length, from_pe, pelist )
   4657 
   4658       return
   4659     end subroutine mpp_broadcast_real8_4d


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_broadcast_real8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4645     R(8)            8     4     1        ARG,INOUT        4655                              
 DATA1D                     Local  4652     R(8)            8     1     0                         4656                              
 FROM_PE                    Dummy  4645     I(4)            4           scalar   ARG,IN           4656                              
 LENGTH                     Dummy  4645     I(4)            4           scalar   ARG,IN           4652,4656                         
 LOC                        Func   4655                                 scalar                    4655                              
 MPP_BROADCAST_REAL8_4D     Subr   4645                                          PRIV                                               
 PELIST                     Dummy  4645     I(4)            4     1     1        ARG,IN           4656                              
 PTR                        Local  4654     I(8)            8           scalar   PTR              4655                              

Page 192         Source Listing                  MPP_BROADCAST_REAL8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4660 
   4661     subroutine mpp_broadcast_real8_5d( data, length, from_pe, pelist )
   4662 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   4663 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   4664 !backward compatible.
   4665       real(r8_kind), intent(inout) :: data(:,:,:,:,:)
   4666       integer, intent(in) :: length, from_pe
   4667       integer, intent(in), optional :: pelist(:)
   4668       real(r8_kind) :: data1D(length)
   4669 
   4670       pointer( ptr, data1D )
   4671       ptr = LOC(data)
   4672       call mpp_broadcast( data1D, length, from_pe, pelist )
   4673 
   4674       return
   4675     end subroutine mpp_broadcast_real8_5d


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_broadcast_real8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4661     R(8)            8     5     1        ARG,INOUT        4671                              
 DATA1D                     Local  4668     R(8)            8     1     0                         4672                              
 FROM_PE                    Dummy  4661     I(4)            4           scalar   ARG,IN           4672                              
 LENGTH                     Dummy  4661     I(4)            4           scalar   ARG,IN           4668,4672                         
 LOC                        Func   4671                                 scalar                    4671                              
 MPP_BROADCAST_REAL8_5D     Subr   4661                                          PRIV                                               
 PELIST                     Dummy  4661     I(4)            4     1     1        ARG,IN           4672                              
 PTR                        Local  4670     I(8)            8           scalar   PTR              4671                              

Page 193         Source Listing                  MPP_BROADCAST_REAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4676 # 201 "../mpp/include/mpp_transmit_mpi.h" 2 
   4677 # 456 "../mpp/include/mpp_comm_mpi.inc" 2 
   4678 
   4679 # 513
   4680 
   4681 
   4682 
   4683 
   4684 
   4685 
   4686 
   4687 
   4688 
   4689 
   4690 
   4691 
   4692 
   4693 
   4694 
   4695 
   4696 
   4697 
   4698 
   4699 
   4700 
   4701 
   4702 
   4703 
   4704 
   4705 
   4706 
   4707 
   4708 
   4709 
   4710 
   4711 
   4712 
   4713 
   4714 
   4715 
   4716 
   4717 
   4718 
   4719 
   4720 
   4721 
   4722 
   4723 
   4724 
   4725 
   4726 
   4727 
   4728 
   4729 
   4730 
   4731 
   4732 

Page 194         Source Listing                  MPP_BROADCAST_REAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   4733 
   4734 
   4735 
   4736 # 1 "../mpp/include/mpp_transmit_mpi.h" 1 
   4737 !***********************************************************************
   4738 !*                   GNU Lesser General Public License
   4739 !*
   4740 !* This file is part of the GFDL Flexible Modeling System (FMS).
   4741 !*
   4742 !* FMS is free software: you can redistribute it and/or modify it under
   4743 !* the terms of the GNU Lesser General Public License as published by
   4744 !* the Free Software Foundation, either version 3 of the License, or (at
   4745 !* your option) any later version.
   4746 !*
   4747 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   4748 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   4749 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   4750 !* for more details.
   4751 !*
   4752 !* You should have received a copy of the GNU Lesser General Public
   4753 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   4754 !***********************************************************************
   4755 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4756 !                                                                             !
   4757 !                                  MPP_TRANSMIT                               !
   4758 !                                                                             !
   4759 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4760 
   4761     subroutine mpp_transmit_real4( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, recv_request, send_requ
   4761 est )
   4762 !a message-passing routine intended to be reminiscent equally of both MPI and SHMEM
   4763 
   4764 !put_data and get_data are contiguous real(r4_kind) arrays
   4765 
   4766 !at each call, your put_data array is put to   to_pe's get_data
   4767 !              your get_data array is got from from_pe's put_data
   4768 !i.e we assume that typically (e.g updating halo regions) each PE performs a put _and_ a get
   4769 
   4770 !special PE designations:
   4771 !      NULL_PE: to disable a put or a get (e.g at boundaries)
   4772 !      ANY_PE:  if remote PE for the put or get is to be unspecific
   4773 !      ALL_PES: broadcast and collect operations (collect not yet implemented)
   4774 
   4775 !ideally we would not pass length, but this f77-style call performs better (arrays passed by address, not descriptor)
   4776 !further, this permits <length> contiguous words from an array of any rank to be passed (avoiding f90 rank conformance check
   4776 )
   4777 
   4778 !caller is responsible for completion checks (mpp_sync_self) before and after
   4779 
   4780       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   4781       real(r4_kind), intent(in)  :: put_data(*)
   4782       real(r4_kind), intent(out) :: get_data(*)
   4783       logical, intent(in),  optional :: block
   4784       integer, intent(in),  optional :: tag
   4785       integer, intent(out), optional :: recv_request, send_request
   4786       logical                       :: block_comm
   4787       integer                       :: i

Page 195         Source Listing                  MPP_TRANSMIT_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   4788       real(r4_kind), allocatable, save  :: local_data(:) !local copy used by non-parallel code (no SHMEM or MPI)
   4789       integer                       :: comm_tag
   4790       integer                       :: rsize
   4791 
   4792       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_TRANSMIT: You must first call mpp_init.' )
   4793       if( to_pe.EQ.NULL_PE .AND. from_pe.EQ.NULL_PE )return
   4794 
   4795       block_comm = .true.
   4796       if(PRESENT(block)) block_comm = block
   4797 
   4798       if( debug )then
   4799           call system_clock_mpi(tick)
   4800           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   4801                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT begin: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_
   4801 len
   4802       end if
   4803 
   4804       comm_tag = DEFAULT_TAG
   4805       if(present(tag)) comm_tag = tag
   4806 
   4807 !do put first and then get
   4808       if( to_pe.GE.0 .AND. to_pe.LT.npes )then
   4809 !use non-blocking sends
   4810           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   4811 !z1l: truly non-blocking send.
   4812 !          if( request(to_pe).NE.MPI_REQUEST_NULL )then !only one message from pe->to_pe in queue
   4813 !              if( debug )write( stderr(),* )'PE waiting for sending', pe, to_pe
   4814 !              call MPI_WAIT( request(to_pe), stat, error )
   4815 !          end if
   4816           if(present(send_request)) then
   4817              call MPI_ISEND( put_data, put_len, MPI_REAL4, to_pe, comm_tag, mpp_comm_private, send_request, error)
   4818           else
   4819              cur_send_request = cur_send_request + 1
   4820              if( cur_send_request > max_request ) call mpp_error(FATAL, &
   4821                 "MPP_TRANSMIT: cur_send_request is greater than max_request, increase mpp_nml request_multiply")
   4822              call MPI_ISEND( put_data, put_len, MPI_REAL4, to_pe, comm_tag, mpp_comm_private, &
   4823                              request_send(cur_send_request), error)
   4824           endif
   4825           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_SEND, put_len*4 )
   4826       else if( to_pe.EQ.ALL_PES )then !this is a broadcast from from_pe
   4827           if( from_pe.LT.0 .OR. from_pe.GE.npes )call mpp_error( FATAL, 'MPP_TRANSMIT: broadcasting from invalid PE.' )
   4828           if( put_len.GT.get_len )call mpp_error( FATAL, 'MPP_TRANSMIT: size mismatch between put_data and get_data.' )
   4829           if( pe.EQ.from_pe )then
   4830               if( LOC(get_data).NE.LOC(put_data) )then
   4831 !dir$ IVDEP
   4832                   do i = 1,get_len
   4833                      get_data(i) = put_data(i)
   4834                   end do
   4835               end if
   4836           end if
   4837           call mpp_broadcast( get_data, get_len, from_pe )
   4838           return
   4839       else if( to_pe.EQ.ANY_PE )then !we don't have a destination to do puts to, so only do gets
   4840 !...but you cannot have a pure get with MPI
   4841           call mpp_error( FATAL, 'MPP_TRANSMIT: you cannot transmit to ANY_PE using MPI.' )
   4842       else if( to_pe.NE.NULL_PE )then  !no other valid cases except NULL_PE
   4843           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid to_pe.' )

Page 196         Source Listing                  MPP_TRANSMIT_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   4844       end if
   4845 
   4846 !do the get
   4847       if( from_pe.GE.0 .AND. from_pe.LT.npes )then
   4848 !receive from from_pe
   4849           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   4850           if( block_comm ) then
   4851              call MPI_RECV( get_data, get_len, MPI_REAL4, from_pe, comm_tag, mpp_comm_private, stat, error )
   4852              call MPI_GET_COUNT( stat, MPI_REAL4, rsize, error)
   4853              if(rsize .NE. get_len) then
   4854                 print*, "rsize, get_len=", rsize, get_len, mpp_pe(), from_pe
   4855                 call mpp_error(FATAL, "MPP_TRANSMIT: get_len does not match size of data received")
   4856              endif
   4857           else
   4858 !             if( request_recv(from_pe).NE.MPI_REQUEST_NULL )then !only one message from from_pe->pe in queue
   4859 !              if( debug )write( stderr(),* )'PE waiting for receiving', pe, from_pe
   4860 !                call MPI_WAIT( request_recv(from_pe), stat, error )
   4861 !             end if
   4862              if(PRESENT(recv_request)) then
   4863                 call MPI_IRECV( get_data, get_len, MPI_REAL4, from_pe, comm_tag, mpp_comm_private, &
   4864                   recv_request, error )
   4865              else
   4866                 cur_recv_request = cur_recv_request + 1
   4867                 if( cur_recv_request > max_request ) call mpp_error(FATAL, &
   4868                 "MPP_TRANSMIT: cur_recv_request is greater than max_request, increase mpp_nml request_multiply")
   4869                 call MPI_IRECV( get_data, get_len, MPI_REAL4, from_pe, comm_tag, mpp_comm_private, &
   4870                      request_recv(cur_recv_request), error )
   4871                 size_recv(cur_recv_request) = get_len
   4872                 type_recv(cur_recv_request) = MPI_REAL4
   4873              endif
   4874           endif
   4875           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*4 )
   4876       else if( from_pe.EQ.ANY_PE )then
   4877 !receive from MPI_ANY_SOURCE
   4878           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   4879           call MPI_RECV( get_data, get_len, MPI_REAL4, MPI_ANY_SOURCE, comm_tag, mpp_comm_private, stat, error )
   4880           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*4 )
   4881       else if( from_pe.EQ.ALL_PES )then
   4882           call mpp_error( FATAL, 'MPP_TRANSMIT: from_pe=ALL_PES has ambiguous meaning, and hence is not implemented.' )
   4883       else if( from_pe.NE.NULL_PE )then !only remaining valid choice is NULL_PE
   4884           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid from_pe.' )
   4885       end if
   4886 
   4887       if( debug )then
   4888           call system_clock_mpi(tick)
   4889           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   4890                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT end: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_le
   4890 n
   4891       end if
   4892       return
   4893     end subroutine mpp_transmit_real4

Page 197         Source Listing                  MPP_TRANSMIT_REAL4
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_transmit_real4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4761     L(4)            4           scalar   ARG,IN           4796                              
 BLOCK_COMM                 Local  4786     L(4)            4           scalar                    4795,4796,4850                    
 COMM_TAG                   Local  4789     I(4)            4           scalar                    4804,4805,4817,4822,4851,4863,4869
                                                                                                  ,4879                             
 FROM_PE                    Dummy  4761     I(4)            4           scalar   ARG,IN           4793,4801,4827,4829,4837,4847,4851
                                                                                                  ,4854,4863,4869,4876,4881,4883,489
                                                                                                  0                                 
 GET_DATA                   Dummy  4761     R(4)            4     1     0        ARG,TGT,OUT      4830,4833,4837,4851,4863,4869,4879
 GET_LEN                    Dummy  4761     I(4)            4           scalar   ARG,IN           4801,4828,4832,4837,4851,4853,4854
                                                                                                  ,4863,4869,4871,4875,4879,4880,489
                                                                                                  0                                 
 I                          Local  4787     I(4)            4           scalar                    4832,4833                         
 LOC                        Func   4830                                 scalar                    4830                              
 LOCAL_DATA                 Local  4788     R(4)            4     1     1        ALC,SAVE                                           
 MPI_IRECV                  Subr   4863                                                           4863,4869                         
 MPI_ISEND                  Subr   4817                                                           4817,4822                         
 MPI_REAL4                  Param  4817     I(4)            4           scalar   PRIV             4817,4822,4851,4852,4863,4869,4872
                                                                                                  ,4879,4930,7932,7952,8224,8244,861
                                                                                                  8,10011,10040,10041,11036,11051,11
                                                                                                  071                               
 MPI_RECV                   Subr   4851                                                           4851,4879                         
 MPP_TRANSMIT_REAL4         Subr   4761                                          PRIV             4982,5002,5022,5042,5062,5082,5092
                                                                                                  ,5111,5129                        
 PRESENT                    Func   4796                                 scalar                    4796,4805,4816,4862               
 PUT_DATA                   Dummy  4761     R(4)            4     1     0        ARG,TGT,IN       4817,4822,4830,4833               
 PUT_LEN                    Dummy  4761     I(4)            4           scalar   ARG,IN           4801,4817,4822,4825,4828,4890     
 R4_KIND                    Param  4781     I(4)            4           scalar   PRIV             4781,4782,4788,4905,4967,4968,4974
                                                                                                  ,4991,4992,4996,5011,5012,5016,503
                                                                                                  1,5032,5036,5051,5052,5056,5076,50
                                                                                                  81,5088,5091,5098,5105,5106,5118,5
                                                                                                  123,5124,5136,5141,5148,5151,5158,
                                                                                                  5163,5170,5173,5180,5185,5192,5195
                                                                                                  ,5202,5207,5214,5217,5228,5231,524
                                                                                                  5,5248,5261,5264,5277,5280,5293,52
                                                                                                  96,7922,7925,7941,7945,8214,8217,8
                                                                                                  233,8237,8605,8607,8651,8653,8664,
                                                                                                  8667,8678,8681,8692,8695,8706,8709
                                                                                                  ,9253,9297,9299,9310,9313,9324,932
                                                                                                  7,9338,9341,9352,9355,9994,9995,10
                                                                                                  021,10022,10052,10053,11007,11742,
                                                                                                  11860,11978,12096,12214,12332,1245
                                                                                                  0,12568,12686,12804,13200,13203,13
                                                                                                  252,13254,13302,13304,13352,13354,
                                                                                                  13402,13404,13452,13454,14017,1401

Page 198         Source Listing                  MPP_TRANSMIT_REAL4
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_transmit_mpi.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  8,14058,14059,14107,14108,14112,14
                                                                                                  113,14130,14131,14139,14729,14730,
                                                                                                  14734,14735,14752,14753,14761     
 RECV_REQUEST               Dummy  4761     I(4)            4           scalar   ARG,OUT          4862,4864                         
 RSIZE                      Local  4790     I(4)            4           scalar                    4852,4853,4854                    
 SEND_REQUEST               Dummy  4761     I(4)            4           scalar   ARG,OUT          4816,4817                         
 TAG                        Dummy  4761     I(4)            4           scalar   ARG,IN           4805                              
 TO_PE                      Dummy  4761     I(4)            4           scalar   ARG,IN           4793,4801,4808,4817,4822,4826,4839
                                                                                                  ,4842,4890                        

Page 199         Source Listing                  MPP_TRANSMIT_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   4894 
   4895 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4896 !                                                                             !
   4897 !                                MPP_BROADCAST                                !
   4898 !                                                                             !
   4899 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4900 
   4901     subroutine mpp_broadcast_real4( data, length, from_pe, pelist )
   4902 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   4903 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   4904 !backward compatible.
   4905       real(r4_kind), intent(inout) :: data(*)
   4906       integer, intent(in) :: length, from_pe
   4907       integer, intent(in), optional :: pelist(:)
   4908       integer :: n, i, from_rank, stdout_unit
   4909 
   4910       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_BROADCAST: You must first call mpp_init.' )
   4911       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   4912 
   4913       if( debug )then
   4914           call system_clock_mpi(tick)
   4915           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   4916                'T=',tick, ' PE=',pe, ' MPP_BROADCAST begin: from_pe, length=', from_pe, length
   4917       end if
   4918 
   4919       if( .NOT.ANY(from_pe.EQ.peset(current_peset_num)%list) ) &
   4920            call mpp_error( FATAL, 'MPP_BROADCAST: broadcasting from invalid PE.' )
   4921 
   4922       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   4923 ! find the rank of from_pe in the pelist.
   4924       do i = 1, mpp_npes()
   4925          if(peset(n)%list(i) == from_pe) then
   4926              from_rank = i - 1
   4927              exit
   4928          endif
   4929       enddo
   4930       if( mpp_npes().GT.1 )call MPI_BCAST( data, length, MPI_REAL4, from_rank, peset(n)%id, error )
   4931       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_BROADCAST, length*4 )
   4932       return
   4933     end subroutine mpp_broadcast_real4

Page 200         Source Listing                  MPP_BROADCAST_REAL4
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_broadcast_real4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   4919                                 scalar                    4919                              
 DATA                       Dummy  4901     R(4)            4     1     0        ARG,INOUT        4930                              
 FROM_PE                    Dummy  4901     I(4)            4           scalar   ARG,IN           4916,4919,4925                    
 FROM_RANK                  Local  4908     I(4)            4           scalar                    4926,4930                         
 I                          Local  4908     I(4)            4           scalar                    4924,4925,4926                    
 LENGTH                     Dummy  4901     I(4)            4           scalar   ARG,IN           4916,4930,4931                    
 MPI_BCAST                  Subr   4930                                                           4930                              
 MPP_BROADCAST_REAL4        Subr   4901                                          PRIV             4837,5236,5252,5268,5284,5300,9265
 N                          Local  4908     I(4)            4           scalar                    4911,4925,4930                    
 PELIST                     Dummy  4901     I(4)            4     1     1        ARG,IN           4911                              
 STDOUT_UNIT                Local  4908     I(4)            4           scalar                    4915                              

Page 201         Source Listing                  MPP_BROADCAST_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   4934 
   4935 !####################################################################################
   4936 # 1 "../mpp/include/mpp_transmit.inc" 1 
   4937 ! -*-f90-*-
   4938 
   4939 !***********************************************************************
   4940 !*                   GNU Lesser General Public License
   4941 !*
   4942 !* This file is part of the GFDL Flexible Modeling System (FMS).
   4943 !*
   4944 !* FMS is free software: you can redistribute it and/or modify it under
   4945 !* the terms of the GNU Lesser General Public License as published by
   4946 !* the Free Software Foundation, either version 3 of the License, or (at
   4947 !* your option) any later version.
   4948 !*
   4949 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   4950 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   4951 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   4952 !* for more details.
   4953 !*
   4954 !* You should have received a copy of the GNU Lesser General Public
   4955 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   4956 !***********************************************************************
   4957 
   4958 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4959 !                                                                             !
   4960 !                                  MPP_TRANSMIT                               !
   4961 !                                                                             !
   4962 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   4963 
   4964     subroutine mpp_transmit_real4_scalar( put_data, to_pe, get_data, from_pe, plen, glen, block, tag, &
   4965                                     recv_request, send_request)
   4966       integer, intent(in) :: to_pe, from_pe
   4967       real(r4_kind), intent(in)  :: put_data
   4968       real(r4_kind), intent(out) :: get_data
   4969       integer, optional,  intent(in) :: plen, glen
   4970       logical, intent(in),  optional :: block
   4971       integer, intent(in),  optional :: tag
   4972       integer, intent(out), optional :: recv_request, send_request
   4973       integer                       :: put_len, get_len
   4974       real(r4_kind) :: put_data1D(1), get_data1D(1)
   4975       pointer( ptrp, put_data1D )
   4976       pointer( ptrg, get_data1D )
   4977 
   4978       ptrp = LOC(put_data)
   4979       ptrg = LOC(get_data)
   4980       put_len=1; if(PRESENT(plen))put_len=plen
   4981       get_len=1; if(PRESENT(glen))get_len=glen
   4982       call mpp_transmit_real4 ( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   4983                            recv_request=recv_request, send_request=send_request )
   4984 
   4985       return
   4986     end subroutine mpp_transmit_real4_scalar

Page 202         Source Listing                  MPP_TRANSMIT_REAL4_SCALAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit.inc



ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_transmit_real4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4964     L(4)            4           scalar   ARG,IN           4982                              
 FROM_PE                    Dummy  4964     I(4)            4           scalar   ARG,IN           4982                              
 GET_DATA                   Dummy  4964     R(4)            4           scalar   ARG,TGT,OUT      4979                              
 GET_DATA1D                 Local  4974     R(4)            4     1     1                         4982                              
 GET_LEN                    Local  4973     I(4)            4           scalar                    4981,4982                         
 GLEN                       Dummy  4964     I(4)            4           scalar   ARG,IN           4981                              
 LOC                        Func   4978                                 scalar                    4978,4979                         
 MPP_TRANSMIT_REAL4_SCALAR  Subr   4964                                          PRIV                                               
 PLEN                       Dummy  4964     I(4)            4           scalar   ARG,IN           4980                              
 PRESENT                    Func   4980                                 scalar                    4980,4981                         
 PTRG                       Local  4976     I(8)            8           scalar   PTR              4979                              
 PTRP                       Local  4975     I(8)            8           scalar   PTR              4978                              
 PUT_DATA                   Dummy  4964     R(4)            4           scalar   ARG,TGT,IN       4978                              
 PUT_DATA1D                 Local  4974     R(4)            4     1     1                         4982                              
 PUT_LEN                    Local  4973     I(4)            4           scalar                    4980,4982                         
 RECV_REQUEST               Dummy  4965     I(4)            4           scalar   ARG,OUT          4983                              
 SEND_REQUEST               Dummy  4965     I(4)            4           scalar   ARG,OUT          4983                              
 TAG                        Dummy  4964     I(4)            4           scalar   ARG,IN           4982                              
 TO_PE                      Dummy  4964     I(4)            4           scalar   ARG,IN           4982                              

Page 203         Source Listing                  MPP_TRANSMIT_REAL4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   4987 
   4988     subroutine mpp_transmit_real4_2d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   4989                                 recv_request, send_request )
   4990       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   4991       real(r4_kind), intent(in)  :: put_data(:,:)
   4992       real(r4_kind), intent(out) :: get_data(:,:)
   4993       logical, intent(in), optional :: block
   4994       integer, intent(in), optional :: tag
   4995       integer, intent(out), optional :: recv_request, send_request
   4996       real(r4_kind) :: put_data1D(put_len), get_data1D(get_len)
   4997 
   4998       pointer( ptrp, put_data1D )
   4999       pointer( ptrg, get_data1D )
   5000       ptrp = LOC(put_data)
   5001       ptrg = LOC(get_data)
   5002       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   5003                          recv_request=recv_request, send_request=send_request )
   5004 
   5005       return
   5006     end subroutine mpp_transmit_real4_2d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_transmit_real4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  4988     L(4)            4           scalar   ARG,IN           5002                              
 FROM_PE                    Dummy  4988     I(4)            4           scalar   ARG,IN           5002                              
 GET_DATA                   Dummy  4988     R(4)            4     2     1        ARG,OUT          5001                              
 GET_DATA1D                 Local  4996     R(4)            4     1     0                         5002                              
 GET_LEN                    Dummy  4988     I(4)            4           scalar   ARG,IN           4996,5002                         
 LOC                        Func   5000                                 scalar                    5000,5001                         
 MPP_TRANSMIT_REAL4_2D      Subr   4988                                          PRIV             5142,5152                         
 PTRG                       Local  4999     I(8)            8           scalar   PTR              5001                              
 PTRP                       Local  4998     I(8)            8           scalar   PTR              5000                              
 PUT_DATA                   Dummy  4988     R(4)            4     2     1        ARG,IN           5000                              
 PUT_DATA1D                 Local  4996     R(4)            4     1     0                         5002                              
 PUT_LEN                    Dummy  4988     I(4)            4           scalar   ARG,IN           4996,5002                         
 RECV_REQUEST               Dummy  4989     I(4)            4           scalar   ARG,OUT          5003                              
 SEND_REQUEST               Dummy  4989     I(4)            4           scalar   ARG,OUT          5003                              
 TAG                        Dummy  4988     I(4)            4           scalar   ARG,IN           5002                              
 TO_PE                      Dummy  4988     I(4)            4           scalar   ARG,IN           5002                              

Page 204         Source Listing                  MPP_TRANSMIT_REAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5007 
   5008     subroutine mpp_transmit_real4_3d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   5009                                 recv_request, send_request )
   5010       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   5011       real(r4_kind), intent(in)  :: put_data(:,:,:)
   5012       real(r4_kind), intent(out) :: get_data(:,:,:)
   5013       logical, intent(in), optional :: block
   5014       integer, intent(in), optional :: tag
   5015       integer, intent(out), optional :: recv_request, send_request
   5016       real(r4_kind) :: put_data1D(put_len), get_data1D(get_len)
   5017 
   5018       pointer( ptrp, put_data1D )
   5019       pointer( ptrg, get_data1D )
   5020       ptrp = LOC(put_data)
   5021       ptrg = LOC(get_data)
   5022       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   5023                          recv_request=recv_request, send_request=send_request )
   5024 
   5025       return
   5026     end subroutine mpp_transmit_real4_3d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_transmit_real4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5008     L(4)            4           scalar   ARG,IN           5022                              
 FROM_PE                    Dummy  5008     I(4)            4           scalar   ARG,IN           5022                              
 GET_DATA                   Dummy  5008     R(4)            4     3     1        ARG,OUT          5021                              
 GET_DATA1D                 Local  5016     R(4)            4     1     0                         5022                              
 GET_LEN                    Dummy  5008     I(4)            4           scalar   ARG,IN           5016,5022                         
 LOC                        Func   5020                                 scalar                    5020,5021                         
 MPP_TRANSMIT_REAL4_3D      Subr   5008                                          PRIV             5164,5174                         
 PTRG                       Local  5019     I(8)            8           scalar   PTR              5021                              
 PTRP                       Local  5018     I(8)            8           scalar   PTR              5020                              
 PUT_DATA                   Dummy  5008     R(4)            4     3     1        ARG,IN           5020                              
 PUT_DATA1D                 Local  5016     R(4)            4     1     0                         5022                              
 PUT_LEN                    Dummy  5008     I(4)            4           scalar   ARG,IN           5016,5022                         
 RECV_REQUEST               Dummy  5009     I(4)            4           scalar   ARG,OUT          5023                              
 SEND_REQUEST               Dummy  5009     I(4)            4           scalar   ARG,OUT          5023                              
 TAG                        Dummy  5008     I(4)            4           scalar   ARG,IN           5022                              
 TO_PE                      Dummy  5008     I(4)            4           scalar   ARG,IN           5022                              

Page 205         Source Listing                  MPP_TRANSMIT_REAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5027 
   5028     subroutine mpp_transmit_real4_4d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   5029                                 recv_request, send_request )
   5030       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   5031       real(r4_kind), intent(in)  :: put_data(:,:,:,:)
   5032       real(r4_kind), intent(out) :: get_data(:,:,:,:)
   5033       logical, intent(in), optional :: block
   5034       integer, intent(in), optional :: tag
   5035       integer, intent(out), optional :: recv_request, send_request
   5036       real(r4_kind) :: put_data1D(put_len), get_data1D(get_len)
   5037 
   5038       pointer( ptrp, put_data1D )
   5039       pointer( ptrg, get_data1D )
   5040       ptrp = LOC(put_data)
   5041       ptrg = LOC(get_data)
   5042       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   5043                          recv_request=recv_request, send_request=send_request )
   5044 
   5045       return
   5046     end subroutine mpp_transmit_real4_4d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_transmit_real4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5028     L(4)            4           scalar   ARG,IN           5042                              
 FROM_PE                    Dummy  5028     I(4)            4           scalar   ARG,IN           5042                              
 GET_DATA                   Dummy  5028     R(4)            4     4     1        ARG,OUT          5041                              
 GET_DATA1D                 Local  5036     R(4)            4     1     0                         5042                              
 GET_LEN                    Dummy  5028     I(4)            4           scalar   ARG,IN           5036,5042                         
 LOC                        Func   5040                                 scalar                    5040,5041                         
 MPP_TRANSMIT_REAL4_4D      Subr   5028                                          PRIV             5186,5196                         
 PTRG                       Local  5039     I(8)            8           scalar   PTR              5041                              
 PTRP                       Local  5038     I(8)            8           scalar   PTR              5040                              
 PUT_DATA                   Dummy  5028     R(4)            4     4     1        ARG,IN           5040                              
 PUT_DATA1D                 Local  5036     R(4)            4     1     0                         5042                              
 PUT_LEN                    Dummy  5028     I(4)            4           scalar   ARG,IN           5036,5042                         
 RECV_REQUEST               Dummy  5029     I(4)            4           scalar   ARG,OUT          5043                              
 SEND_REQUEST               Dummy  5029     I(4)            4           scalar   ARG,OUT          5043                              
 TAG                        Dummy  5028     I(4)            4           scalar   ARG,IN           5042                              
 TO_PE                      Dummy  5028     I(4)            4           scalar   ARG,IN           5042                              

Page 206         Source Listing                  MPP_TRANSMIT_REAL4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5047 
   5048     subroutine mpp_transmit_real4_5d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   5049                                 recv_request, send_request )
   5050       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   5051       real(r4_kind), intent(in)  :: put_data(:,:,:,:,:)
   5052       real(r4_kind), intent(out) :: get_data(:,:,:,:,:)
   5053       logical, intent(in), optional :: block
   5054       integer, intent(in), optional :: tag
   5055       integer, intent(out), optional :: recv_request, send_request
   5056       real(r4_kind) :: put_data1D(put_len), get_data1D(get_len)
   5057 
   5058       pointer( ptrp, put_data1D )
   5059       pointer( ptrg, get_data1D )
   5060       ptrp = LOC(put_data)
   5061       ptrg = LOC(get_data)
   5062       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   5063                          recv_request=recv_request, send_request=send_request )
   5064 
   5065       return
   5066     end subroutine mpp_transmit_real4_5d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_transmit_real4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5048     L(4)            4           scalar   ARG,IN           5062                              
 FROM_PE                    Dummy  5048     I(4)            4           scalar   ARG,IN           5062                              
 GET_DATA                   Dummy  5048     R(4)            4     5     1        ARG,OUT          5061                              
 GET_DATA1D                 Local  5056     R(4)            4     1     0                         5062                              
 GET_LEN                    Dummy  5048     I(4)            4           scalar   ARG,IN           5056,5062                         
 LOC                        Func   5060                                 scalar                    5060,5061                         
 MPP_TRANSMIT_REAL4_5D      Subr   5048                                          PRIV             5208,5218                         
 PTRG                       Local  5059     I(8)            8           scalar   PTR              5061                              
 PTRP                       Local  5058     I(8)            8           scalar   PTR              5060                              
 PUT_DATA                   Dummy  5048     R(4)            4     5     1        ARG,IN           5060                              
 PUT_DATA1D                 Local  5056     R(4)            4     1     0                         5062                              
 PUT_LEN                    Dummy  5048     I(4)            4           scalar   ARG,IN           5056,5062                         
 RECV_REQUEST               Dummy  5049     I(4)            4           scalar   ARG,OUT          5063                              
 SEND_REQUEST               Dummy  5049     I(4)            4           scalar   ARG,OUT          5063                              
 TAG                        Dummy  5048     I(4)            4           scalar   ARG,IN           5062                              
 TO_PE                      Dummy  5048     I(4)            4           scalar   ARG,IN           5062                              

Page 207         Source Listing                  MPP_TRANSMIT_REAL4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5067 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5068 !                                                                             !
   5069 !                              MPP_SEND and RECV                              !
   5070 !                                                                             !
   5071 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5072 
   5073     subroutine mpp_recv_real4( get_data, get_len, from_pe, block, tag, request )
   5074 !a mpp_transmit with null arguments on the put side
   5075       integer, intent(in) :: get_len, from_pe
   5076       real(r4_kind), intent(out) :: get_data(*)
   5077       logical, intent(in), optional :: block
   5078       integer, intent(in), optional :: tag
   5079       integer, intent(out), optional :: request
   5080 
   5081       real(r4_kind) :: dummy(1)
   5082       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   5083     end subroutine mpp_recv_real4


ENTRY POINTS

  Name                                  
                                        
 mpp_mod_mp_mpp_recv_real4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5073     L(4)            4           scalar   ARG,IN           5082                              
 DUMMY                      Local  5081     R(4)            4     1     1                         5082                              
 FROM_PE                    Dummy  5073     I(4)            4           scalar   ARG,IN           5082                              
 GET_DATA                   Dummy  5073     R(4)            4     1     0        ARG,OUT          5082                              
 GET_LEN                    Dummy  5073     I(4)            4           scalar   ARG,IN           5082                              
 MPP_RECV_REAL4             Subr   5073                                          PRIV                                               
 REQUEST                    Dummy  5073     I(4)            4           scalar   ARG,OUT          5082                              
 TAG                        Dummy  5073     I(4)            4           scalar   ARG,IN           5082                              

Page 208         Source Listing                  MPP_RECV_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5084 
   5085     subroutine mpp_send_real4( put_data, put_len, to_pe, tag, request )
   5086 !a mpp_transmit with null arguments on the get side
   5087       integer, intent(in) :: put_len, to_pe
   5088       real(r4_kind), intent(in) :: put_data(*)
   5089       integer, intent(in), optional :: tag
   5090       integer, intent(out), optional :: request
   5091       real(r4_kind) :: dummy(1)
   5092       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag=tag, send_request=request )
   5093     end subroutine mpp_send_real4


ENTRY POINTS

  Name                                  
                                        
 mpp_mod_mp_mpp_send_real4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5091     R(4)            4     1     1                         5092                              
 MPP_SEND_REAL4             Subr   5085                                          PRIV                                               
 PUT_DATA                   Dummy  5085     R(4)            4     1     0        ARG,IN           5092                              
 PUT_LEN                    Dummy  5085     I(4)            4           scalar   ARG,IN           5092                              
 REQUEST                    Dummy  5085     I(4)            4           scalar   ARG,OUT          5092                              
 TAG                        Dummy  5085     I(4)            4           scalar   ARG,IN           5092                              
 TO_PE                      Dummy  5085     I(4)            4           scalar   ARG,IN           5092                              

Page 209         Source Listing                  MPP_SEND_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5094 
   5095     subroutine mpp_recv_real4_scalar( get_data, from_pe, glen, block, tag, request )
   5096 !a mpp_transmit with null arguments on the put side
   5097       integer, intent(in) :: from_pe
   5098       real(r4_kind), intent(out) :: get_data
   5099       logical, intent(in), optional :: block
   5100       integer, intent(in), optional :: tag
   5101       integer, intent(out), optional :: request
   5102 
   5103       integer, optional, intent(in) :: glen
   5104       integer                       :: get_len
   5105       real(r4_kind) :: get_data1D(1)
   5106       real(r4_kind) :: dummy(1)
   5107 
   5108       pointer( ptr, get_data1D )
   5109       ptr = LOC(get_data)
   5110       get_len=1; if(PRESENT(glen))get_len=glen
   5111       call mpp_transmit( dummy, 1, NULL_PE, get_data1D, get_len, from_pe, block, tag, recv_request=request )
   5112 
   5113     end subroutine mpp_recv_real4_scalar


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_recv_real4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5095     L(4)            4           scalar   ARG,IN           5111                              
 DUMMY                      Local  5106     R(4)            4     1     1                         5111                              
 FROM_PE                    Dummy  5095     I(4)            4           scalar   ARG,IN           5111                              
 GET_DATA                   Dummy  5095     R(4)            4           scalar   ARG,TGT,OUT      5109                              
 GET_DATA1D                 Local  5105     R(4)            4     1     1                         5111                              
 GET_LEN                    Local  5104     I(4)            4           scalar                    5110,5111                         
 GLEN                       Dummy  5095     I(4)            4           scalar   ARG,IN           5110                              
 LOC                        Func   5109                                 scalar                    5109                              
 MPP_RECV_REAL4_SCALAR      Subr   5095                                          PRIV             14046,14088                       
 PRESENT                    Func   5110                                 scalar                    5110                              
 PTR                        Local  5108     I(8)            8           scalar   PTR              5109                              
 REQUEST                    Dummy  5095     I(4)            4           scalar   ARG,OUT          5111                              
 TAG                        Dummy  5095     I(4)            4           scalar   ARG,IN           5111                              

Page 210         Source Listing                  MPP_RECV_REAL4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5114 
   5115     subroutine mpp_send_real4_scalar( put_data, to_pe, plen, tag, request)
   5116 !a mpp_transmit with null arguments on the get side
   5117       integer, intent(in) :: to_pe
   5118       real(r4_kind), intent(in) :: put_data
   5119       integer, optional, intent(in) :: plen
   5120       integer, intent(in), optional :: tag
   5121       integer, intent(out), optional :: request
   5122       integer                       :: put_len
   5123       real(r4_kind) :: put_data1D(1)
   5124       real(r4_kind) :: dummy(1)
   5125 
   5126       pointer( ptr, put_data1D )
   5127       ptr = LOC(put_data)
   5128       put_len=1; if(PRESENT(plen))put_len=plen
   5129       call mpp_transmit( put_data1D, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   5130 
   5131     end subroutine mpp_send_real4_scalar


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_send_real4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5124     R(4)            4     1     1                         5129                              
 LOC                        Func   5127                                 scalar                    5127                              
 MPP_SEND_REAL4_SCALAR      Subr   5115                                          PRIV             14049,14094                       
 PLEN                       Dummy  5115     I(4)            4           scalar   ARG,IN           5128                              
 PRESENT                    Func   5128                                 scalar                    5128                              
 PTR                        Local  5126     I(8)            8           scalar   PTR              5127                              
 PUT_DATA                   Dummy  5115     R(4)            4           scalar   ARG,TGT,IN       5127                              
 PUT_DATA1D                 Local  5123     R(4)            4     1     1                         5129                              
 PUT_LEN                    Local  5122     I(4)            4           scalar                    5128,5129                         
 REQUEST                    Dummy  5115     I(4)            4           scalar   ARG,OUT          5129                              
 TAG                        Dummy  5115     I(4)            4           scalar   ARG,IN           5129                              
 TO_PE                      Dummy  5115     I(4)            4           scalar   ARG,IN           5129                              

Page 211         Source Listing                  MPP_SEND_REAL4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5132 
   5133     subroutine mpp_recv_real4_2d( get_data, get_len, from_pe, block, tag, request )
   5134 !a mpp_transmit with null arguments on the put side
   5135       integer, intent(in) :: get_len, from_pe
   5136       real(r4_kind), intent(out) :: get_data(:,:)
   5137       logical, intent(in), optional :: block
   5138       integer, intent(in), optional :: tag
   5139       integer, intent(out), optional :: request
   5140 
   5141       real(r4_kind) :: dummy(1,1)
   5142       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   5143     end subroutine mpp_recv_real4_2d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_recv_real4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5133     L(4)            4           scalar   ARG,IN           5142                              
 DUMMY                      Local  5141     R(4)            4     2     1        TGT              5142                              
 FROM_PE                    Dummy  5133     I(4)            4           scalar   ARG,IN           5142                              
 GET_DATA                   Dummy  5133     R(4)            4     2     1        ARG,OUT          5142                              
 GET_LEN                    Dummy  5133     I(4)            4           scalar   ARG,IN           5142                              
 MPP_RECV_REAL4_2D          Subr   5133                                          PRIV                                               
 REQUEST                    Dummy  5133     I(4)            4           scalar   ARG,OUT          5142                              
 TAG                        Dummy  5133     I(4)            4           scalar   ARG,IN           5142                              

Page 212         Source Listing                  MPP_RECV_REAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5144 
   5145     subroutine mpp_send_real4_2d( put_data, put_len, to_pe, tag, request )
   5146 !a mpp_transmit with null arguments on the get side
   5147       integer, intent(in) :: put_len, to_pe
   5148       real(r4_kind), intent(in) :: put_data(:,:)
   5149       integer, intent(in), optional :: tag
   5150       integer, intent(out), optional :: request
   5151       real(r4_kind) :: dummy(1,1)
   5152       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   5153     end subroutine mpp_send_real4_2d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_send_real4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5151     R(4)            4     2     1        TGT              5152                              
 MPP_SEND_REAL4_2D          Subr   5145                                          PRIV                                               
 PUT_DATA                   Dummy  5145     R(4)            4     2     1        ARG,IN           5152                              
 PUT_LEN                    Dummy  5145     I(4)            4           scalar   ARG,IN           5152                              
 REQUEST                    Dummy  5145     I(4)            4           scalar   ARG,OUT          5152                              
 TAG                        Dummy  5145     I(4)            4           scalar   ARG,IN           5152                              
 TO_PE                      Dummy  5145     I(4)            4           scalar   ARG,IN           5152                              

Page 213         Source Listing                  MPP_SEND_REAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5154 
   5155     subroutine mpp_recv_real4_3d( get_data, get_len, from_pe, block, tag, request )
   5156 !a mpp_transmit with null arguments on the put side
   5157       integer, intent(in) :: get_len, from_pe
   5158       real(r4_kind), intent(out) :: get_data(:,:,:)
   5159       logical, intent(in), optional :: block
   5160       integer, intent(in), optional :: tag
   5161       integer, intent(out), optional :: request
   5162 
   5163       real(r4_kind) :: dummy(1,1,1)
   5164       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   5165     end subroutine mpp_recv_real4_3d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_recv_real4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5155     L(4)            4           scalar   ARG,IN           5164                              
 DUMMY                      Local  5163     R(4)            4     3     1        TGT              5164                              
 FROM_PE                    Dummy  5155     I(4)            4           scalar   ARG,IN           5164                              
 GET_DATA                   Dummy  5155     R(4)            4     3     1        ARG,OUT          5164                              
 GET_LEN                    Dummy  5155     I(4)            4           scalar   ARG,IN           5164                              
 MPP_RECV_REAL4_3D          Subr   5155                                          PRIV             14210,14847                       
 REQUEST                    Dummy  5155     I(4)            4           scalar   ARG,OUT          5164                              
 TAG                        Dummy  5155     I(4)            4           scalar   ARG,IN           5164                              

Page 214         Source Listing                  MPP_RECV_REAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5166 
   5167     subroutine mpp_send_real4_3d( put_data, put_len, to_pe, tag, request )
   5168 !a mpp_transmit with null arguments on the get side
   5169       integer, intent(in) :: put_len, to_pe
   5170       real(r4_kind), intent(in) :: put_data(:,:,:)
   5171       integer, intent(in), optional :: tag
   5172       integer, intent(out), optional :: request
   5173       real(r4_kind) :: dummy(1,1,1)
   5174       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   5175     end subroutine mpp_send_real4_3d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_send_real4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5173     R(4)            4     3     1        TGT              5174                              
 MPP_SEND_REAL4_3D          Subr   5167                                          PRIV             14232,14833                       
 PUT_DATA                   Dummy  5167     R(4)            4     3     1        ARG,IN           5174                              
 PUT_LEN                    Dummy  5167     I(4)            4           scalar   ARG,IN           5174                              
 REQUEST                    Dummy  5167     I(4)            4           scalar   ARG,OUT          5174                              
 TAG                        Dummy  5167     I(4)            4           scalar   ARG,IN           5174                              
 TO_PE                      Dummy  5167     I(4)            4           scalar   ARG,IN           5174                              

Page 215         Source Listing                  MPP_SEND_REAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5176 
   5177     subroutine mpp_recv_real4_4d( get_data, get_len, from_pe, block, tag, request )
   5178 !a mpp_transmit with null arguments on the put side
   5179       integer, intent(in) :: get_len, from_pe
   5180       real(r4_kind), intent(out) :: get_data(:,:,:,:)
   5181       logical, intent(in), optional :: block
   5182       integer, intent(in), optional :: tag
   5183       integer, intent(out), optional :: request
   5184 
   5185       real(r4_kind) :: dummy(1,1,1,1)
   5186       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   5187     end subroutine mpp_recv_real4_4d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_recv_real4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5177     L(4)            4           scalar   ARG,IN           5186                              
 DUMMY                      Local  5185     R(4)            4     4     1        TGT              5186                              
 FROM_PE                    Dummy  5177     I(4)            4           scalar   ARG,IN           5186                              
 GET_DATA                   Dummy  5177     R(4)            4     4     1        ARG,OUT          5186                              
 GET_LEN                    Dummy  5177     I(4)            4           scalar   ARG,IN           5186                              
 MPP_RECV_REAL4_4D          Subr   5177                                          PRIV                                               
 REQUEST                    Dummy  5177     I(4)            4           scalar   ARG,OUT          5186                              
 TAG                        Dummy  5177     I(4)            4           scalar   ARG,IN           5186                              

Page 216         Source Listing                  MPP_RECV_REAL4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5188 
   5189     subroutine mpp_send_real4_4d( put_data, put_len, to_pe, tag, request )
   5190 !a mpp_transmit with null arguments on the get side
   5191       integer, intent(in) :: put_len, to_pe
   5192       real(r4_kind), intent(in) :: put_data(:,:,:,:)
   5193       integer, intent(in), optional :: tag
   5194       integer, intent(out), optional :: request
   5195       real(r4_kind) :: dummy(1,1,1,1)
   5196       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   5197     end subroutine mpp_send_real4_4d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_send_real4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5195     R(4)            4     4     1        TGT              5196                              
 MPP_SEND_REAL4_4D          Subr   5189                                          PRIV                                               
 PUT_DATA                   Dummy  5189     R(4)            4     4     1        ARG,IN           5196                              
 PUT_LEN                    Dummy  5189     I(4)            4           scalar   ARG,IN           5196                              
 REQUEST                    Dummy  5189     I(4)            4           scalar   ARG,OUT          5196                              
 TAG                        Dummy  5189     I(4)            4           scalar   ARG,IN           5196                              
 TO_PE                      Dummy  5189     I(4)            4           scalar   ARG,IN           5196                              

Page 217         Source Listing                  MPP_SEND_REAL4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5198 
   5199     subroutine mpp_recv_real4_5d( get_data, get_len, from_pe, block, tag, request)
   5200 !a mpp_transmit with null arguments on the put side
   5201       integer, intent(in) :: get_len, from_pe
   5202       real(r4_kind), intent(out) :: get_data(:,:,:,:,:)
   5203       logical, intent(in), optional :: block
   5204       integer, intent(in), optional :: tag
   5205       integer, intent(out), optional :: request
   5206 
   5207       real(r4_kind) :: dummy(1,1,1,1,1)
   5208       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   5209     end subroutine mpp_recv_real4_5d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_recv_real4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5199     L(4)            4           scalar   ARG,IN           5208                              
 DUMMY                      Local  5207     R(4)            4     5     1        TGT              5208                              
 FROM_PE                    Dummy  5199     I(4)            4           scalar   ARG,IN           5208                              
 GET_DATA                   Dummy  5199     R(4)            4     5     1        ARG,OUT          5208                              
 GET_LEN                    Dummy  5199     I(4)            4           scalar   ARG,IN           5208                              
 MPP_RECV_REAL4_5D          Subr   5199                                          PRIV                                               
 REQUEST                    Dummy  5199     I(4)            4           scalar   ARG,OUT          5208                              
 TAG                        Dummy  5199     I(4)            4           scalar   ARG,IN           5208                              

Page 218         Source Listing                  MPP_RECV_REAL4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5210 
   5211     subroutine mpp_send_real4_5d( put_data, put_len, to_pe, tag, request )
   5212 !a mpp_transmit with null arguments on the get side
   5213       integer, intent(in) :: put_len, to_pe
   5214       real(r4_kind), intent(in) :: put_data(:,:,:,:,:)
   5215       integer, intent(in), optional :: tag
   5216       integer, intent(out), optional :: request
   5217       real(r4_kind) :: dummy(1,1,1,1,1)
   5218       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   5219     end subroutine mpp_send_real4_5d


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_send_real4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5217     R(4)            4     5     1        TGT              5218                              
 MPP_SEND_REAL4_5D          Subr   5211                                          PRIV                                               
 PUT_DATA                   Dummy  5211     R(4)            4     5     1        ARG,IN           5218                              
 PUT_LEN                    Dummy  5211     I(4)            4           scalar   ARG,IN           5218                              
 REQUEST                    Dummy  5211     I(4)            4           scalar   ARG,OUT          5218                              
 TAG                        Dummy  5211     I(4)            4           scalar   ARG,IN           5218                              
 TO_PE                      Dummy  5211     I(4)            4           scalar   ARG,IN           5218                              

Page 219         Source Listing                  MPP_SEND_REAL4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5220 
   5221 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5222 !                                                                             !
   5223 !                                MPP_BROADCAST                                !
   5224 !                                                                             !
   5225 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5226 
   5227     subroutine mpp_broadcast_real4_scalar( data, from_pe, pelist )
   5228       real(r4_kind), intent(inout) :: data
   5229       integer, intent(in) :: from_pe
   5230       integer, intent(in), optional :: pelist(:)
   5231       real(r4_kind) :: data1D(1)
   5232 
   5233       pointer( ptr, data1D )
   5234 
   5235       ptr = LOC(data)
   5236       call mpp_broadcast_real4( data1D, 1, from_pe, pelist )
   5237 
   5238       return
   5239     end subroutine mpp_broadcast_real4_scalar


ENTRY POINTS

  Name                                              
                                                    
 mpp_mod_mp_mpp_broadcast_real4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5227     R(4)            4           scalar   ARG,TGT,INOUT    5235                              
 DATA1D                     Local  5231     R(4)            4     1     1                         5236                              
 FROM_PE                    Dummy  5227     I(4)            4           scalar   ARG,IN           5236                              
 LOC                        Func   5235                                 scalar                    5235                              
 MPP_BROADCAST_REAL4_SCALAR Subr   5227                                          PRIV                                               
 PELIST                     Dummy  5227     I(4)            4     1     1        ARG,IN           5236                              
 PTR                        Local  5233     I(8)            8           scalar   PTR              5235                              

Page 220         Source Listing                  MPP_BROADCAST_REAL4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5240 
   5241     subroutine mpp_broadcast_real4_2d( data, length, from_pe, pelist )
   5242 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   5243 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   5244 !backward compatible.
   5245       real(r4_kind), intent(inout) :: data(:,:)
   5246       integer, intent(in) :: length, from_pe
   5247       integer, intent(in), optional :: pelist(:)
   5248       real(r4_kind) :: data1D(length)
   5249 
   5250       pointer( ptr, data1D )
   5251       ptr = LOC(data)
   5252       call mpp_broadcast( data1D, length, from_pe, pelist )
   5253 
   5254       return
   5255     end subroutine mpp_broadcast_real4_2d


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_broadcast_real4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5241     R(4)            4     2     1        ARG,INOUT        5251                              
 DATA1D                     Local  5248     R(4)            4     1     0                         5252                              
 FROM_PE                    Dummy  5241     I(4)            4           scalar   ARG,IN           5252                              
 LENGTH                     Dummy  5241     I(4)            4           scalar   ARG,IN           5248,5252                         
 LOC                        Func   5251                                 scalar                    5251                              
 MPP_BROADCAST_REAL4_2D     Subr   5241                                          PRIV                                               
 PELIST                     Dummy  5241     I(4)            4     1     1        ARG,IN           5252                              
 PTR                        Local  5250     I(8)            8           scalar   PTR              5251                              

Page 221         Source Listing                  MPP_BROADCAST_REAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5256 
   5257     subroutine mpp_broadcast_real4_3d( data, length, from_pe, pelist )
   5258 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   5259 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   5260 !backward compatible.
   5261       real(r4_kind), intent(inout) :: data(:,:,:)
   5262       integer, intent(in) :: length, from_pe
   5263       integer, intent(in), optional :: pelist(:)
   5264       real(r4_kind) :: data1D(length)
   5265 
   5266       pointer( ptr, data1D )
   5267       ptr = LOC(data)
   5268       call mpp_broadcast( data1D, length, from_pe, pelist )
   5269 
   5270       return
   5271    end subroutine mpp_broadcast_real4_3d


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_broadcast_real4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5257     R(4)            4     3     1        ARG,INOUT        5267                              
 DATA1D                     Local  5264     R(4)            4     1     0                         5268                              
 FROM_PE                    Dummy  5257     I(4)            4           scalar   ARG,IN           5268                              
 LENGTH                     Dummy  5257     I(4)            4           scalar   ARG,IN           5264,5268                         
 LOC                        Func   5267                                 scalar                    5267                              
 MPP_BROADCAST_REAL4_3D     Subr   5257                                          PRIV                                               
 PELIST                     Dummy  5257     I(4)            4     1     1        ARG,IN           5268                              
 PTR                        Local  5266     I(8)            8           scalar   PTR              5267                              

Page 222         Source Listing                  MPP_BROADCAST_REAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5272 
   5273     subroutine mpp_broadcast_real4_4d( data, length, from_pe, pelist )
   5274 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   5275 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   5276 !backward compatible.
   5277       real(r4_kind), intent(inout) :: data(:,:,:,:)
   5278       integer, intent(in) :: length, from_pe
   5279       integer, intent(in), optional :: pelist(:)
   5280       real(r4_kind) :: data1D(length)
   5281 
   5282       pointer( ptr, data1D )
   5283       ptr = LOC(data)
   5284       call mpp_broadcast( data1D, length, from_pe, pelist )
   5285 
   5286       return
   5287     end subroutine mpp_broadcast_real4_4d


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_broadcast_real4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5273     R(4)            4     4     1        ARG,INOUT        5283                              
 DATA1D                     Local  5280     R(4)            4     1     0                         5284                              
 FROM_PE                    Dummy  5273     I(4)            4           scalar   ARG,IN           5284                              
 LENGTH                     Dummy  5273     I(4)            4           scalar   ARG,IN           5280,5284                         
 LOC                        Func   5283                                 scalar                    5283                              
 MPP_BROADCAST_REAL4_4D     Subr   5273                                          PRIV                                               
 PELIST                     Dummy  5273     I(4)            4     1     1        ARG,IN           5284                              
 PTR                        Local  5282     I(8)            8           scalar   PTR              5283                              

Page 223         Source Listing                  MPP_BROADCAST_REAL4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5288 
   5289     subroutine mpp_broadcast_real4_5d( data, length, from_pe, pelist )
   5290 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   5291 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   5292 !backward compatible.
   5293       real(r4_kind), intent(inout) :: data(:,:,:,:,:)
   5294       integer, intent(in) :: length, from_pe
   5295       integer, intent(in), optional :: pelist(:)
   5296       real(r4_kind) :: data1D(length)
   5297 
   5298       pointer( ptr, data1D )
   5299       ptr = LOC(data)
   5300       call mpp_broadcast( data1D, length, from_pe, pelist )
   5301 
   5302       return
   5303     end subroutine mpp_broadcast_real4_5d


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_broadcast_real4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5289     R(4)            4     5     1        ARG,INOUT        5299                              
 DATA1D                     Local  5296     R(4)            4     1     0                         5300                              
 FROM_PE                    Dummy  5289     I(4)            4           scalar   ARG,IN           5300                              
 LENGTH                     Dummy  5289     I(4)            4           scalar   ARG,IN           5296,5300                         
 LOC                        Func   5299                                 scalar                    5299                              
 MPP_BROADCAST_REAL4_5D     Subr   5289                                          PRIV                                               
 PELIST                     Dummy  5289     I(4)            4     1     1        ARG,IN           5300                              
 PTR                        Local  5298     I(8)            8           scalar   PTR              5299                              

Page 224         Source Listing                  MPP_BROADCAST_REAL4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5304 # 201 "../mpp/include/mpp_transmit_mpi.h" 2 
   5305 # 570 "../mpp/include/mpp_comm_mpi.inc" 2 
   5306 
   5307 # 627
   5308 
   5309 
   5310 
   5311 
   5312 
   5313 
   5314 
   5315 
   5316 
   5317 
   5318 
   5319 
   5320 
   5321 
   5322 
   5323 
   5324 
   5325 
   5326 
   5327 
   5328 
   5329 
   5330 
   5331 
   5332 
   5333 
   5334 
   5335 
   5336 
   5337 
   5338 
   5339 
   5340 
   5341 
   5342 
   5343 
   5344 
   5345 
   5346 
   5347 
   5348 
   5349 
   5350 
   5351 
   5352 
   5353 
   5354 
   5355 
   5356 
   5357 
   5358 
   5359 
   5360 

Page 225         Source Listing                  MPP_BROADCAST_REAL4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   5361 
   5362 
   5363 
   5364 # 1 "../mpp/include/mpp_transmit_mpi.h" 1 
   5365 !***********************************************************************
   5366 !*                   GNU Lesser General Public License
   5367 !*
   5368 !* This file is part of the GFDL Flexible Modeling System (FMS).
   5369 !*
   5370 !* FMS is free software: you can redistribute it and/or modify it under
   5371 !* the terms of the GNU Lesser General Public License as published by
   5372 !* the Free Software Foundation, either version 3 of the License, or (at
   5373 !* your option) any later version.
   5374 !*
   5375 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   5376 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   5377 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   5378 !* for more details.
   5379 !*
   5380 !* You should have received a copy of the GNU Lesser General Public
   5381 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   5382 !***********************************************************************
   5383 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5384 !                                                                             !
   5385 !                                  MPP_TRANSMIT                               !
   5386 !                                                                             !
   5387 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5388 
   5389     subroutine mpp_transmit_int8( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, recv_request, send_reque
   5389 st )
   5390 !a message-passing routine intended to be reminiscent equally of both MPI and SHMEM
   5391 
   5392 !put_data and get_data are contiguous integer(i8_kind) arrays
   5393 
   5394 !at each call, your put_data array is put to   to_pe's get_data
   5395 !              your get_data array is got from from_pe's put_data
   5396 !i.e we assume that typically (e.g updating halo regions) each PE performs a put _and_ a get
   5397 
   5398 !special PE designations:
   5399 !      NULL_PE: to disable a put or a get (e.g at boundaries)
   5400 !      ANY_PE:  if remote PE for the put or get is to be unspecific
   5401 !      ALL_PES: broadcast and collect operations (collect not yet implemented)
   5402 
   5403 !ideally we would not pass length, but this f77-style call performs better (arrays passed by address, not descriptor)
   5404 !further, this permits <length> contiguous words from an array of any rank to be passed (avoiding f90 rank conformance check
   5404 )
   5405 
   5406 !caller is responsible for completion checks (mpp_sync_self) before and after
   5407 
   5408       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   5409       integer(i8_kind), intent(in)  :: put_data(*)
   5410       integer(i8_kind), intent(out) :: get_data(*)
   5411       logical, intent(in),  optional :: block
   5412       integer, intent(in),  optional :: tag
   5413       integer, intent(out), optional :: recv_request, send_request
   5414       logical                       :: block_comm
   5415       integer                       :: i

Page 226         Source Listing                  MPP_TRANSMIT_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   5416       integer(i8_kind), allocatable, save  :: local_data(:) !local copy used by non-parallel code (no SHMEM or MPI)
   5417       integer                       :: comm_tag
   5418       integer                       :: rsize
   5419 
   5420       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_TRANSMIT: You must first call mpp_init.' )
   5421       if( to_pe.EQ.NULL_PE .AND. from_pe.EQ.NULL_PE )return
   5422 
   5423       block_comm = .true.
   5424       if(PRESENT(block)) block_comm = block
   5425 
   5426       if( debug )then
   5427           call system_clock_mpi(tick)
   5428           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   5429                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT begin: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_
   5429 len
   5430       end if
   5431 
   5432       comm_tag = DEFAULT_TAG
   5433       if(present(tag)) comm_tag = tag
   5434 
   5435 !do put first and then get
   5436       if( to_pe.GE.0 .AND. to_pe.LT.npes )then
   5437 !use non-blocking sends
   5438           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   5439 !z1l: truly non-blocking send.
   5440 !          if( request(to_pe).NE.MPI_REQUEST_NULL )then !only one message from pe->to_pe in queue
   5441 !              if( debug )write( stderr(),* )'PE waiting for sending', pe, to_pe
   5442 !              call MPI_WAIT( request(to_pe), stat, error )
   5443 !          end if
   5444           if(present(send_request)) then
   5445              call MPI_ISEND( put_data, put_len, MPI_INTEGER8, to_pe, comm_tag, mpp_comm_private, send_request, error)
   5446           else
   5447              cur_send_request = cur_send_request + 1
   5448              if( cur_send_request > max_request ) call mpp_error(FATAL, &
   5449                 "MPP_TRANSMIT: cur_send_request is greater than max_request, increase mpp_nml request_multiply")
   5450              call MPI_ISEND( put_data, put_len, MPI_INTEGER8, to_pe, comm_tag, mpp_comm_private, &
   5451                              request_send(cur_send_request), error)
   5452           endif
   5453           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_SEND, put_len*8 )
   5454       else if( to_pe.EQ.ALL_PES )then !this is a broadcast from from_pe
   5455           if( from_pe.LT.0 .OR. from_pe.GE.npes )call mpp_error( FATAL, 'MPP_TRANSMIT: broadcasting from invalid PE.' )
   5456           if( put_len.GT.get_len )call mpp_error( FATAL, 'MPP_TRANSMIT: size mismatch between put_data and get_data.' )
   5457           if( pe.EQ.from_pe )then
   5458               if( LOC(get_data).NE.LOC(put_data) )then
   5459 !dir$ IVDEP
   5460                   do i = 1,get_len
   5461                      get_data(i) = put_data(i)
   5462                   end do
   5463               end if
   5464           end if
   5465           call mpp_broadcast( get_data, get_len, from_pe )
   5466           return
   5467       else if( to_pe.EQ.ANY_PE )then !we don't have a destination to do puts to, so only do gets
   5468 !...but you cannot have a pure get with MPI
   5469           call mpp_error( FATAL, 'MPP_TRANSMIT: you cannot transmit to ANY_PE using MPI.' )
   5470       else if( to_pe.NE.NULL_PE )then  !no other valid cases except NULL_PE
   5471           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid to_pe.' )

Page 227         Source Listing                  MPP_TRANSMIT_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   5472       end if
   5473 
   5474 !do the get
   5475       if( from_pe.GE.0 .AND. from_pe.LT.npes )then
   5476 !receive from from_pe
   5477           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   5478           if( block_comm ) then
   5479              call MPI_RECV( get_data, get_len, MPI_INTEGER8, from_pe, comm_tag, mpp_comm_private, stat, error )
   5480              call MPI_GET_COUNT( stat, MPI_INTEGER8, rsize, error)
   5481              if(rsize .NE. get_len) then
   5482                 print*, "rsize, get_len=", rsize, get_len, mpp_pe(), from_pe
   5483                 call mpp_error(FATAL, "MPP_TRANSMIT: get_len does not match size of data received")
   5484              endif
   5485           else
   5486 !             if( request_recv(from_pe).NE.MPI_REQUEST_NULL )then !only one message from from_pe->pe in queue
   5487 !              if( debug )write( stderr(),* )'PE waiting for receiving', pe, from_pe
   5488 !                call MPI_WAIT( request_recv(from_pe), stat, error )
   5489 !             end if
   5490              if(PRESENT(recv_request)) then
   5491                 call MPI_IRECV( get_data, get_len, MPI_INTEGER8, from_pe, comm_tag, mpp_comm_private, &
   5492                   recv_request, error )
   5493              else
   5494                 cur_recv_request = cur_recv_request + 1
   5495                 if( cur_recv_request > max_request ) call mpp_error(FATAL, &
   5496                 "MPP_TRANSMIT: cur_recv_request is greater than max_request, increase mpp_nml request_multiply")
   5497                 call MPI_IRECV( get_data, get_len, MPI_INTEGER8, from_pe, comm_tag, mpp_comm_private, &
   5498                      request_recv(cur_recv_request), error )
   5499                 size_recv(cur_recv_request) = get_len
   5500                 type_recv(cur_recv_request) = MPI_INTEGER8
   5501              endif
   5502           endif
   5503           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*8 )
   5504       else if( from_pe.EQ.ANY_PE )then
   5505 !receive from MPI_ANY_SOURCE
   5506           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   5507           call MPI_RECV( get_data, get_len, MPI_INTEGER8, MPI_ANY_SOURCE, comm_tag, mpp_comm_private, stat, error )
   5508           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*8 )
   5509       else if( from_pe.EQ.ALL_PES )then
   5510           call mpp_error( FATAL, 'MPP_TRANSMIT: from_pe=ALL_PES has ambiguous meaning, and hence is not implemented.' )
   5511       else if( from_pe.NE.NULL_PE )then !only remaining valid choice is NULL_PE
   5512           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid from_pe.' )
   5513       end if
   5514 
   5515       if( debug )then
   5516           call system_clock_mpi(tick)
   5517           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   5518                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT end: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_le
   5518 n
   5519       end if
   5520       return
   5521     end subroutine mpp_transmit_int8

Page 228         Source Listing                  MPP_TRANSMIT_INT8
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_transmit_int8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5389     L(4)            4           scalar   ARG,IN           5424                              
 BLOCK_COMM                 Local  5414     L(4)            4           scalar                    5423,5424,5478                    
 COMM_TAG                   Local  5417     I(4)            4           scalar                    5432,5433,5445,5450,5479,5491,5497
                                                                                                  ,5507                             
 FROM_PE                    Dummy  5389     I(4)            4           scalar   ARG,IN           5421,5429,5455,5457,5465,5475,5479
                                                                                                  ,5482,5491,5497,5504,5509,5511,551
                                                                                                  8                                 
 GET_DATA                   Dummy  5389     I(8)            8     1     0        ARG,TGT,OUT      5458,5461,5465,5479,5491,5497,5507
 GET_LEN                    Dummy  5389     I(4)            4           scalar   ARG,IN           5429,5456,5460,5465,5479,5481,5482
                                                                                                  ,5491,5497,5499,5503,5507,5508,551
                                                                                                  8                                 
 I                          Local  5415     I(4)            4           scalar                    5460,5461                         
 LOC                        Func   5458                                 scalar                    5458                              
 LOCAL_DATA                 Local  5416     I(8)            8     1     1        ALC,SAVE                                           
 MPI_INTEGER8               Param  5445     I(4)            4           scalar   PRIV             5445,5450,5479,5480,5491,5497,5500
                                                                                                  ,5507,5558,6695,6700,6729,6730,674
                                                                                                  1,6747,6750,6757,6808,8005,8025,82
                                                                                                  97,8317,8780,9879,9908,9909,10671,
                                                                                                  10700,10701,10926,10941,10961,1158
                                                                                                  6,11601,11621                     
 MPI_IRECV                  Subr   5491                                                           5491,5497                         
 MPI_ISEND                  Subr   5445                                                           5445,5450                         
 MPI_RECV                   Subr   5479                                                           5479,5507                         
 MPP_TRANSMIT_INT8          Subr   5389                                          PRIV             5610,5630,5650,5670,5690,5710,5720
                                                                                                  ,5739,5757                        
 PRESENT                    Func   5424                                 scalar                    5424,5433,5444,5490               
 PUT_DATA                   Dummy  5389     I(8)            8     1     0        ARG,TGT,IN       5445,5450,5458,5461               
 PUT_LEN                    Dummy  5389     I(4)            4           scalar   ARG,IN           5429,5445,5450,5453,5456,5518     
 RECV_REQUEST               Dummy  5389     I(4)            4           scalar   ARG,OUT          5490,5492                         
 RSIZE                      Local  5418     I(4)            4           scalar                    5480,5481,5482                    
 SEND_REQUEST               Dummy  5389     I(4)            4           scalar   ARG,OUT          5444,5445                         
 TAG                        Dummy  5389     I(4)            4           scalar   ARG,IN           5433                              
 TO_PE                      Dummy  5389     I(4)            4           scalar   ARG,IN           5421,5429,5436,5445,5450,5454,5467
                                                                                                  ,5470,5518                        

Page 229         Source Listing                  MPP_TRANSMIT_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   5522 
   5523 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5524 !                                                                             !
   5525 !                                MPP_BROADCAST                                !
   5526 !                                                                             !
   5527 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5528 
   5529     subroutine mpp_broadcast_int8( data, length, from_pe, pelist )
   5530 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   5531 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   5532 !backward compatible.
   5533       integer(i8_kind), intent(inout) :: data(*)
   5534       integer, intent(in) :: length, from_pe
   5535       integer, intent(in), optional :: pelist(:)
   5536       integer :: n, i, from_rank, stdout_unit
   5537 
   5538       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_BROADCAST: You must first call mpp_init.' )
   5539       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   5540 
   5541       if( debug )then
   5542           call system_clock_mpi(tick)
   5543           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   5544                'T=',tick, ' PE=',pe, ' MPP_BROADCAST begin: from_pe, length=', from_pe, length
   5545       end if
   5546 
   5547       if( .NOT.ANY(from_pe.EQ.peset(current_peset_num)%list) ) &
   5548            call mpp_error( FATAL, 'MPP_BROADCAST: broadcasting from invalid PE.' )
   5549 
   5550       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   5551 ! find the rank of from_pe in the pelist.
   5552       do i = 1, mpp_npes()
   5553          if(peset(n)%list(i) == from_pe) then
   5554              from_rank = i - 1
   5555              exit
   5556          endif
   5557       enddo
   5558       if( mpp_npes().GT.1 )call MPI_BCAST( data, length, MPI_INTEGER8, from_rank, peset(n)%id, error )
   5559       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_BROADCAST, length*8 )
   5560       return
   5561     end subroutine mpp_broadcast_int8

Page 230         Source Listing                  MPP_BROADCAST_INT8
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_broadcast_int8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   5547                                 scalar                    5547                              
 DATA                       Dummy  5529     I(8)            8     1     0        ARG,INOUT        5558                              
 FROM_PE                    Dummy  5529     I(4)            4           scalar   ARG,IN           5544,5547,5553                    
 FROM_RANK                  Local  5536     I(4)            4           scalar                    5554,5558                         
 I                          Local  5536     I(4)            4           scalar                    5552,5553,5554                    
 LENGTH                     Dummy  5529     I(4)            4           scalar   ARG,IN           5544,5558,5559                    
 MPI_BCAST                  Subr   5558                                                           5558                              
 MPP_BROADCAST_INT8         Subr   5529                                          PRIV             5465,5864,5880,5896,5912,5928,9429
 N                          Local  5536     I(4)            4           scalar                    5539,5553,5558                    
 PELIST                     Dummy  5529     I(4)            4     1     1        ARG,IN           5539                              
 STDOUT_UNIT                Local  5536     I(4)            4           scalar                    5543                              

Page 231         Source Listing                  MPP_BROADCAST_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   5562 
   5563 !####################################################################################
   5564 # 1 "../mpp/include/mpp_transmit.inc" 1 
   5565 ! -*-f90-*-
   5566 
   5567 !***********************************************************************
   5568 !*                   GNU Lesser General Public License
   5569 !*
   5570 !* This file is part of the GFDL Flexible Modeling System (FMS).
   5571 !*
   5572 !* FMS is free software: you can redistribute it and/or modify it under
   5573 !* the terms of the GNU Lesser General Public License as published by
   5574 !* the Free Software Foundation, either version 3 of the License, or (at
   5575 !* your option) any later version.
   5576 !*
   5577 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   5578 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   5579 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   5580 !* for more details.
   5581 !*
   5582 !* You should have received a copy of the GNU Lesser General Public
   5583 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   5584 !***********************************************************************
   5585 
   5586 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5587 !                                                                             !
   5588 !                                  MPP_TRANSMIT                               !
   5589 !                                                                             !
   5590 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5591 
   5592     subroutine mpp_transmit_int8_scalar( put_data, to_pe, get_data, from_pe, plen, glen, block, tag, &
   5593                                     recv_request, send_request)
   5594       integer, intent(in) :: to_pe, from_pe
   5595       integer(i8_kind), intent(in)  :: put_data
   5596       integer(i8_kind), intent(out) :: get_data
   5597       integer, optional,  intent(in) :: plen, glen
   5598       logical, intent(in),  optional :: block
   5599       integer, intent(in),  optional :: tag
   5600       integer, intent(out), optional :: recv_request, send_request
   5601       integer                       :: put_len, get_len
   5602       integer(i8_kind) :: put_data1D(1), get_data1D(1)
   5603       pointer( ptrp, put_data1D )
   5604       pointer( ptrg, get_data1D )
   5605 
   5606       ptrp = LOC(put_data)
   5607       ptrg = LOC(get_data)
   5608       put_len=1; if(PRESENT(plen))put_len=plen
   5609       get_len=1; if(PRESENT(glen))get_len=glen
   5610       call mpp_transmit_int8 ( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   5611                            recv_request=recv_request, send_request=send_request )
   5612 
   5613       return
   5614     end subroutine mpp_transmit_int8_scalar

Page 232         Source Listing                  MPP_TRANSMIT_INT8_SCALAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit.inc



ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_transmit_int8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5592     L(4)            4           scalar   ARG,IN           5610                              
 FROM_PE                    Dummy  5592     I(4)            4           scalar   ARG,IN           5610                              
 GET_DATA                   Dummy  5592     I(8)            8           scalar   ARG,TGT,OUT      5607                              
 GET_DATA1D                 Local  5602     I(8)            8     1     1                         5610                              
 GET_LEN                    Local  5601     I(4)            4           scalar                    5609,5610                         
 GLEN                       Dummy  5592     I(4)            4           scalar   ARG,IN           5609                              
 LOC                        Func   5606                                 scalar                    5606,5607                         
 MPP_TRANSMIT_INT8_SCALAR   Subr   5592                                          PRIV                                               
 PLEN                       Dummy  5592     I(4)            4           scalar   ARG,IN           5608                              
 PRESENT                    Func   5608                                 scalar                    5608,5609                         
 PTRG                       Local  5604     I(8)            8           scalar   PTR              5607                              
 PTRP                       Local  5603     I(8)            8           scalar   PTR              5606                              
 PUT_DATA                   Dummy  5592     I(8)            8           scalar   ARG,TGT,IN       5606                              
 PUT_DATA1D                 Local  5602     I(8)            8     1     1                         5610                              
 PUT_LEN                    Local  5601     I(4)            4           scalar                    5608,5610                         
 RECV_REQUEST               Dummy  5593     I(4)            4           scalar   ARG,OUT          5611                              
 SEND_REQUEST               Dummy  5593     I(4)            4           scalar   ARG,OUT          5611                              
 TAG                        Dummy  5592     I(4)            4           scalar   ARG,IN           5610                              
 TO_PE                      Dummy  5592     I(4)            4           scalar   ARG,IN           5610                              

Page 233         Source Listing                  MPP_TRANSMIT_INT8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5615 
   5616     subroutine mpp_transmit_int8_2d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   5617                                 recv_request, send_request )
   5618       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   5619       integer(i8_kind), intent(in)  :: put_data(:,:)
   5620       integer(i8_kind), intent(out) :: get_data(:,:)
   5621       logical, intent(in), optional :: block
   5622       integer, intent(in), optional :: tag
   5623       integer, intent(out), optional :: recv_request, send_request
   5624       integer(i8_kind) :: put_data1D(put_len), get_data1D(get_len)
   5625 
   5626       pointer( ptrp, put_data1D )
   5627       pointer( ptrg, get_data1D )
   5628       ptrp = LOC(put_data)
   5629       ptrg = LOC(get_data)
   5630       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   5631                          recv_request=recv_request, send_request=send_request )
   5632 
   5633       return
   5634     end subroutine mpp_transmit_int8_2d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_transmit_int8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5616     L(4)            4           scalar   ARG,IN           5630                              
 FROM_PE                    Dummy  5616     I(4)            4           scalar   ARG,IN           5630                              
 GET_DATA                   Dummy  5616     I(8)            8     2     1        ARG,OUT          5629                              
 GET_DATA1D                 Local  5624     I(8)            8     1     0                         5630                              
 GET_LEN                    Dummy  5616     I(4)            4           scalar   ARG,IN           5624,5630                         
 LOC                        Func   5628                                 scalar                    5628,5629                         
 MPP_TRANSMIT_INT8_2D       Subr   5616                                          PRIV             5770,5780                         
 PTRG                       Local  5627     I(8)            8           scalar   PTR              5629                              
 PTRP                       Local  5626     I(8)            8           scalar   PTR              5628                              
 PUT_DATA                   Dummy  5616     I(8)            8     2     1        ARG,IN           5628                              
 PUT_DATA1D                 Local  5624     I(8)            8     1     0                         5630                              
 PUT_LEN                    Dummy  5616     I(4)            4           scalar   ARG,IN           5624,5630                         
 RECV_REQUEST               Dummy  5617     I(4)            4           scalar   ARG,OUT          5631                              
 SEND_REQUEST               Dummy  5617     I(4)            4           scalar   ARG,OUT          5631                              
 TAG                        Dummy  5616     I(4)            4           scalar   ARG,IN           5630                              
 TO_PE                      Dummy  5616     I(4)            4           scalar   ARG,IN           5630                              

Page 234         Source Listing                  MPP_TRANSMIT_INT8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5635 
   5636     subroutine mpp_transmit_int8_3d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   5637                                 recv_request, send_request )
   5638       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   5639       integer(i8_kind), intent(in)  :: put_data(:,:,:)
   5640       integer(i8_kind), intent(out) :: get_data(:,:,:)
   5641       logical, intent(in), optional :: block
   5642       integer, intent(in), optional :: tag
   5643       integer, intent(out), optional :: recv_request, send_request
   5644       integer(i8_kind) :: put_data1D(put_len), get_data1D(get_len)
   5645 
   5646       pointer( ptrp, put_data1D )
   5647       pointer( ptrg, get_data1D )
   5648       ptrp = LOC(put_data)
   5649       ptrg = LOC(get_data)
   5650       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   5651                          recv_request=recv_request, send_request=send_request )
   5652 
   5653       return
   5654     end subroutine mpp_transmit_int8_3d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_transmit_int8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5636     L(4)            4           scalar   ARG,IN           5650                              
 FROM_PE                    Dummy  5636     I(4)            4           scalar   ARG,IN           5650                              
 GET_DATA                   Dummy  5636     I(8)            8     3     1        ARG,OUT          5649                              
 GET_DATA1D                 Local  5644     I(8)            8     1     0                         5650                              
 GET_LEN                    Dummy  5636     I(4)            4           scalar   ARG,IN           5644,5650                         
 LOC                        Func   5648                                 scalar                    5648,5649                         
 MPP_TRANSMIT_INT8_3D       Subr   5636                                          PRIV             5792,5802                         
 PTRG                       Local  5647     I(8)            8           scalar   PTR              5649                              
 PTRP                       Local  5646     I(8)            8           scalar   PTR              5648                              
 PUT_DATA                   Dummy  5636     I(8)            8     3     1        ARG,IN           5648                              
 PUT_DATA1D                 Local  5644     I(8)            8     1     0                         5650                              
 PUT_LEN                    Dummy  5636     I(4)            4           scalar   ARG,IN           5644,5650                         
 RECV_REQUEST               Dummy  5637     I(4)            4           scalar   ARG,OUT          5651                              
 SEND_REQUEST               Dummy  5637     I(4)            4           scalar   ARG,OUT          5651                              
 TAG                        Dummy  5636     I(4)            4           scalar   ARG,IN           5650                              
 TO_PE                      Dummy  5636     I(4)            4           scalar   ARG,IN           5650                              

Page 235         Source Listing                  MPP_TRANSMIT_INT8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5655 
   5656     subroutine mpp_transmit_int8_4d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   5657                                 recv_request, send_request )
   5658       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   5659       integer(i8_kind), intent(in)  :: put_data(:,:,:,:)
   5660       integer(i8_kind), intent(out) :: get_data(:,:,:,:)
   5661       logical, intent(in), optional :: block
   5662       integer, intent(in), optional :: tag
   5663       integer, intent(out), optional :: recv_request, send_request
   5664       integer(i8_kind) :: put_data1D(put_len), get_data1D(get_len)
   5665 
   5666       pointer( ptrp, put_data1D )
   5667       pointer( ptrg, get_data1D )
   5668       ptrp = LOC(put_data)
   5669       ptrg = LOC(get_data)
   5670       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   5671                          recv_request=recv_request, send_request=send_request )
   5672 
   5673       return
   5674     end subroutine mpp_transmit_int8_4d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_transmit_int8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5656     L(4)            4           scalar   ARG,IN           5670                              
 FROM_PE                    Dummy  5656     I(4)            4           scalar   ARG,IN           5670                              
 GET_DATA                   Dummy  5656     I(8)            8     4     1        ARG,OUT          5669                              
 GET_DATA1D                 Local  5664     I(8)            8     1     0                         5670                              
 GET_LEN                    Dummy  5656     I(4)            4           scalar   ARG,IN           5664,5670                         
 LOC                        Func   5668                                 scalar                    5668,5669                         
 MPP_TRANSMIT_INT8_4D       Subr   5656                                          PRIV             5814,5824                         
 PTRG                       Local  5667     I(8)            8           scalar   PTR              5669                              
 PTRP                       Local  5666     I(8)            8           scalar   PTR              5668                              
 PUT_DATA                   Dummy  5656     I(8)            8     4     1        ARG,IN           5668                              
 PUT_DATA1D                 Local  5664     I(8)            8     1     0                         5670                              
 PUT_LEN                    Dummy  5656     I(4)            4           scalar   ARG,IN           5664,5670                         
 RECV_REQUEST               Dummy  5657     I(4)            4           scalar   ARG,OUT          5671                              
 SEND_REQUEST               Dummy  5657     I(4)            4           scalar   ARG,OUT          5671                              
 TAG                        Dummy  5656     I(4)            4           scalar   ARG,IN           5670                              
 TO_PE                      Dummy  5656     I(4)            4           scalar   ARG,IN           5670                              

Page 236         Source Listing                  MPP_TRANSMIT_INT8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5675 
   5676     subroutine mpp_transmit_int8_5d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   5677                                 recv_request, send_request )
   5678       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   5679       integer(i8_kind), intent(in)  :: put_data(:,:,:,:,:)
   5680       integer(i8_kind), intent(out) :: get_data(:,:,:,:,:)
   5681       logical, intent(in), optional :: block
   5682       integer, intent(in), optional :: tag
   5683       integer, intent(out), optional :: recv_request, send_request
   5684       integer(i8_kind) :: put_data1D(put_len), get_data1D(get_len)
   5685 
   5686       pointer( ptrp, put_data1D )
   5687       pointer( ptrg, get_data1D )
   5688       ptrp = LOC(put_data)
   5689       ptrg = LOC(get_data)
   5690       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   5691                          recv_request=recv_request, send_request=send_request )
   5692 
   5693       return
   5694     end subroutine mpp_transmit_int8_5d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_transmit_int8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5676     L(4)            4           scalar   ARG,IN           5690                              
 FROM_PE                    Dummy  5676     I(4)            4           scalar   ARG,IN           5690                              
 GET_DATA                   Dummy  5676     I(8)            8     5     1        ARG,OUT          5689                              
 GET_DATA1D                 Local  5684     I(8)            8     1     0                         5690                              
 GET_LEN                    Dummy  5676     I(4)            4           scalar   ARG,IN           5684,5690                         
 LOC                        Func   5688                                 scalar                    5688,5689                         
 MPP_TRANSMIT_INT8_5D       Subr   5676                                          PRIV             5836,5846                         
 PTRG                       Local  5687     I(8)            8           scalar   PTR              5689                              
 PTRP                       Local  5686     I(8)            8           scalar   PTR              5688                              
 PUT_DATA                   Dummy  5676     I(8)            8     5     1        ARG,IN           5688                              
 PUT_DATA1D                 Local  5684     I(8)            8     1     0                         5690                              
 PUT_LEN                    Dummy  5676     I(4)            4           scalar   ARG,IN           5684,5690                         
 RECV_REQUEST               Dummy  5677     I(4)            4           scalar   ARG,OUT          5691                              
 SEND_REQUEST               Dummy  5677     I(4)            4           scalar   ARG,OUT          5691                              
 TAG                        Dummy  5676     I(4)            4           scalar   ARG,IN           5690                              
 TO_PE                      Dummy  5676     I(4)            4           scalar   ARG,IN           5690                              

Page 237         Source Listing                  MPP_TRANSMIT_INT8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5695 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5696 !                                                                             !
   5697 !                              MPP_SEND and RECV                              !
   5698 !                                                                             !
   5699 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5700 
   5701     subroutine mpp_recv_int8( get_data, get_len, from_pe, block, tag, request )
   5702 !a mpp_transmit with null arguments on the put side
   5703       integer, intent(in) :: get_len, from_pe
   5704       integer(i8_kind), intent(out) :: get_data(*)
   5705       logical, intent(in), optional :: block
   5706       integer, intent(in), optional :: tag
   5707       integer, intent(out), optional :: request
   5708 
   5709       integer(i8_kind) :: dummy(1)
   5710       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   5711     end subroutine mpp_recv_int8


ENTRY POINTS

  Name                                 
                                       
 mpp_mod_mp_mpp_recv_int8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5701     L(4)            4           scalar   ARG,IN           5710                              
 DUMMY                      Local  5709     I(8)            8     1     1                         5710                              
 FROM_PE                    Dummy  5701     I(4)            4           scalar   ARG,IN           5710                              
 GET_DATA                   Dummy  5701     I(8)            8     1     0        ARG,OUT          5710                              
 GET_LEN                    Dummy  5701     I(4)            4           scalar   ARG,IN           5710                              
 MPP_RECV_INT8              Subr   5701                                          PRIV                                               
 REQUEST                    Dummy  5701     I(4)            4           scalar   ARG,OUT          5710                              
 TAG                        Dummy  5701     I(4)            4           scalar   ARG,IN           5710                              

Page 238         Source Listing                  MPP_RECV_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5712 
   5713     subroutine mpp_send_int8( put_data, put_len, to_pe, tag, request )
   5714 !a mpp_transmit with null arguments on the get side
   5715       integer, intent(in) :: put_len, to_pe
   5716       integer(i8_kind), intent(in) :: put_data(*)
   5717       integer, intent(in), optional :: tag
   5718       integer, intent(out), optional :: request
   5719       integer(i8_kind) :: dummy(1)
   5720       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag=tag, send_request=request )
   5721     end subroutine mpp_send_int8


ENTRY POINTS

  Name                                 
                                       
 mpp_mod_mp_mpp_send_int8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5719     I(8)            8     1     1                         5720                              
 MPP_SEND_INT8              Subr   5713                                          PRIV                                               
 PUT_DATA                   Dummy  5713     I(8)            8     1     0        ARG,IN           5720                              
 PUT_LEN                    Dummy  5713     I(4)            4           scalar   ARG,IN           5720                              
 REQUEST                    Dummy  5713     I(4)            4           scalar   ARG,OUT          5720                              
 TAG                        Dummy  5713     I(4)            4           scalar   ARG,IN           5720                              
 TO_PE                      Dummy  5713     I(4)            4           scalar   ARG,IN           5720                              

Page 239         Source Listing                  MPP_SEND_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5722 
   5723     subroutine mpp_recv_int8_scalar( get_data, from_pe, glen, block, tag, request )
   5724 !a mpp_transmit with null arguments on the put side
   5725       integer, intent(in) :: from_pe
   5726       integer(i8_kind), intent(out) :: get_data
   5727       logical, intent(in), optional :: block
   5728       integer, intent(in), optional :: tag
   5729       integer, intent(out), optional :: request
   5730 
   5731       integer, optional, intent(in) :: glen
   5732       integer                       :: get_len
   5733       integer(i8_kind) :: get_data1D(1)
   5734       integer(i8_kind) :: dummy(1)
   5735 
   5736       pointer( ptr, get_data1D )
   5737       ptr = LOC(get_data)
   5738       get_len=1; if(PRESENT(glen))get_len=glen
   5739       call mpp_transmit( dummy, 1, NULL_PE, get_data1D, get_len, from_pe, block, tag, recv_request=request )
   5740 
   5741     end subroutine mpp_recv_int8_scalar


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_recv_int8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5723     L(4)            4           scalar   ARG,IN           5739                              
 DUMMY                      Local  5734     I(8)            8     1     1                         5739                              
 FROM_PE                    Dummy  5723     I(4)            4           scalar   ARG,IN           5739                              
 GET_DATA                   Dummy  5723     I(8)            8           scalar   ARG,TGT,OUT      5737                              
 GET_DATA1D                 Local  5733     I(8)            8     1     1                         5739                              
 GET_LEN                    Local  5732     I(4)            4           scalar                    5738,5739                         
 GLEN                       Dummy  5723     I(4)            4           scalar   ARG,IN           5738                              
 LOC                        Func   5737                                 scalar                    5737                              
 MPP_RECV_INT8_SCALAR       Subr   5723                                          PRIV                                               
 PRESENT                    Func   5738                                 scalar                    5738                              
 PTR                        Local  5736     I(8)            8           scalar   PTR              5737                              
 REQUEST                    Dummy  5723     I(4)            4           scalar   ARG,OUT          5739                              
 TAG                        Dummy  5723     I(4)            4           scalar   ARG,IN           5739                              

Page 240         Source Listing                  MPP_RECV_INT8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5742 
   5743     subroutine mpp_send_int8_scalar( put_data, to_pe, plen, tag, request)
   5744 !a mpp_transmit with null arguments on the get side
   5745       integer, intent(in) :: to_pe
   5746       integer(i8_kind), intent(in) :: put_data
   5747       integer, optional, intent(in) :: plen
   5748       integer, intent(in), optional :: tag
   5749       integer, intent(out), optional :: request
   5750       integer                       :: put_len
   5751       integer(i8_kind) :: put_data1D(1)
   5752       integer(i8_kind) :: dummy(1)
   5753 
   5754       pointer( ptr, put_data1D )
   5755       ptr = LOC(put_data)
   5756       put_len=1; if(PRESENT(plen))put_len=plen
   5757       call mpp_transmit( put_data1D, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   5758 
   5759     end subroutine mpp_send_int8_scalar


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_send_int8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5752     I(8)            8     1     1                         5757                              
 LOC                        Func   5755                                 scalar                    5755                              
 MPP_SEND_INT8_SCALAR       Subr   5743                                          PRIV                                               
 PLEN                       Dummy  5743     I(4)            4           scalar   ARG,IN           5756                              
 PRESENT                    Func   5756                                 scalar                    5756                              
 PTR                        Local  5754     I(8)            8           scalar   PTR              5755                              
 PUT_DATA                   Dummy  5743     I(8)            8           scalar   ARG,TGT,IN       5755                              
 PUT_DATA1D                 Local  5751     I(8)            8     1     1                         5757                              
 PUT_LEN                    Local  5750     I(4)            4           scalar                    5756,5757                         
 REQUEST                    Dummy  5743     I(4)            4           scalar   ARG,OUT          5757                              
 TAG                        Dummy  5743     I(4)            4           scalar   ARG,IN           5757                              
 TO_PE                      Dummy  5743     I(4)            4           scalar   ARG,IN           5757                              

Page 241         Source Listing                  MPP_SEND_INT8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5760 
   5761     subroutine mpp_recv_int8_2d( get_data, get_len, from_pe, block, tag, request )
   5762 !a mpp_transmit with null arguments on the put side
   5763       integer, intent(in) :: get_len, from_pe
   5764       integer(i8_kind), intent(out) :: get_data(:,:)
   5765       logical, intent(in), optional :: block
   5766       integer, intent(in), optional :: tag
   5767       integer, intent(out), optional :: request
   5768 
   5769       integer(i8_kind) :: dummy(1,1)
   5770       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   5771     end subroutine mpp_recv_int8_2d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_recv_int8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5761     L(4)            4           scalar   ARG,IN           5770                              
 DUMMY                      Local  5769     I(8)            8     2     1        TGT              5770                              
 FROM_PE                    Dummy  5761     I(4)            4           scalar   ARG,IN           5770                              
 GET_DATA                   Dummy  5761     I(8)            8     2     1        ARG,OUT          5770                              
 GET_LEN                    Dummy  5761     I(4)            4           scalar   ARG,IN           5770                              
 MPP_RECV_INT8_2D           Subr   5761                                          PRIV                                               
 REQUEST                    Dummy  5761     I(4)            4           scalar   ARG,OUT          5770                              
 TAG                        Dummy  5761     I(4)            4           scalar   ARG,IN           5770                              

Page 242         Source Listing                  MPP_RECV_INT8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5772 
   5773     subroutine mpp_send_int8_2d( put_data, put_len, to_pe, tag, request )
   5774 !a mpp_transmit with null arguments on the get side
   5775       integer, intent(in) :: put_len, to_pe
   5776       integer(i8_kind), intent(in) :: put_data(:,:)
   5777       integer, intent(in), optional :: tag
   5778       integer, intent(out), optional :: request
   5779       integer(i8_kind) :: dummy(1,1)
   5780       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   5781     end subroutine mpp_send_int8_2d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_send_int8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5779     I(8)            8     2     1        TGT              5780                              
 MPP_SEND_INT8_2D           Subr   5773                                          PRIV                                               
 PUT_DATA                   Dummy  5773     I(8)            8     2     1        ARG,IN           5780                              
 PUT_LEN                    Dummy  5773     I(4)            4           scalar   ARG,IN           5780                              
 REQUEST                    Dummy  5773     I(4)            4           scalar   ARG,OUT          5780                              
 TAG                        Dummy  5773     I(4)            4           scalar   ARG,IN           5780                              
 TO_PE                      Dummy  5773     I(4)            4           scalar   ARG,IN           5780                              

Page 243         Source Listing                  MPP_SEND_INT8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5782 
   5783     subroutine mpp_recv_int8_3d( get_data, get_len, from_pe, block, tag, request )
   5784 !a mpp_transmit with null arguments on the put side
   5785       integer, intent(in) :: get_len, from_pe
   5786       integer(i8_kind), intent(out) :: get_data(:,:,:)
   5787       logical, intent(in), optional :: block
   5788       integer, intent(in), optional :: tag
   5789       integer, intent(out), optional :: request
   5790 
   5791       integer(i8_kind) :: dummy(1,1,1)
   5792       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   5793     end subroutine mpp_recv_int8_3d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_recv_int8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5783     L(4)            4           scalar   ARG,IN           5792                              
 DUMMY                      Local  5791     I(8)            8     3     1        TGT              5792                              
 FROM_PE                    Dummy  5783     I(4)            4           scalar   ARG,IN           5792                              
 GET_DATA                   Dummy  5783     I(8)            8     3     1        ARG,OUT          5792                              
 GET_LEN                    Dummy  5783     I(4)            4           scalar   ARG,IN           5792                              
 MPP_RECV_INT8_3D           Subr   5783                                          PRIV                                               
 REQUEST                    Dummy  5783     I(4)            4           scalar   ARG,OUT          5792                              
 TAG                        Dummy  5783     I(4)            4           scalar   ARG,IN           5792                              

Page 244         Source Listing                  MPP_RECV_INT8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5794 
   5795     subroutine mpp_send_int8_3d( put_data, put_len, to_pe, tag, request )
   5796 !a mpp_transmit with null arguments on the get side
   5797       integer, intent(in) :: put_len, to_pe
   5798       integer(i8_kind), intent(in) :: put_data(:,:,:)
   5799       integer, intent(in), optional :: tag
   5800       integer, intent(out), optional :: request
   5801       integer(i8_kind) :: dummy(1,1,1)
   5802       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   5803     end subroutine mpp_send_int8_3d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_send_int8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5801     I(8)            8     3     1        TGT              5802                              
 MPP_SEND_INT8_3D           Subr   5795                                          PRIV                                               
 PUT_DATA                   Dummy  5795     I(8)            8     3     1        ARG,IN           5802                              
 PUT_LEN                    Dummy  5795     I(4)            4           scalar   ARG,IN           5802                              
 REQUEST                    Dummy  5795     I(4)            4           scalar   ARG,OUT          5802                              
 TAG                        Dummy  5795     I(4)            4           scalar   ARG,IN           5802                              
 TO_PE                      Dummy  5795     I(4)            4           scalar   ARG,IN           5802                              

Page 245         Source Listing                  MPP_SEND_INT8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5804 
   5805     subroutine mpp_recv_int8_4d( get_data, get_len, from_pe, block, tag, request )
   5806 !a mpp_transmit with null arguments on the put side
   5807       integer, intent(in) :: get_len, from_pe
   5808       integer(i8_kind), intent(out) :: get_data(:,:,:,:)
   5809       logical, intent(in), optional :: block
   5810       integer, intent(in), optional :: tag
   5811       integer, intent(out), optional :: request
   5812 
   5813       integer(i8_kind) :: dummy(1,1,1,1)
   5814       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   5815     end subroutine mpp_recv_int8_4d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_recv_int8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5805     L(4)            4           scalar   ARG,IN           5814                              
 DUMMY                      Local  5813     I(8)            8     4     1        TGT              5814                              
 FROM_PE                    Dummy  5805     I(4)            4           scalar   ARG,IN           5814                              
 GET_DATA                   Dummy  5805     I(8)            8     4     1        ARG,OUT          5814                              
 GET_LEN                    Dummy  5805     I(4)            4           scalar   ARG,IN           5814                              
 MPP_RECV_INT8_4D           Subr   5805                                          PRIV                                               
 REQUEST                    Dummy  5805     I(4)            4           scalar   ARG,OUT          5814                              
 TAG                        Dummy  5805     I(4)            4           scalar   ARG,IN           5814                              

Page 246         Source Listing                  MPP_RECV_INT8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5816 
   5817     subroutine mpp_send_int8_4d( put_data, put_len, to_pe, tag, request )
   5818 !a mpp_transmit with null arguments on the get side
   5819       integer, intent(in) :: put_len, to_pe
   5820       integer(i8_kind), intent(in) :: put_data(:,:,:,:)
   5821       integer, intent(in), optional :: tag
   5822       integer, intent(out), optional :: request
   5823       integer(i8_kind) :: dummy(1,1,1,1)
   5824       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   5825     end subroutine mpp_send_int8_4d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_send_int8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5823     I(8)            8     4     1        TGT              5824                              
 MPP_SEND_INT8_4D           Subr   5817                                          PRIV                                               
 PUT_DATA                   Dummy  5817     I(8)            8     4     1        ARG,IN           5824                              
 PUT_LEN                    Dummy  5817     I(4)            4           scalar   ARG,IN           5824                              
 REQUEST                    Dummy  5817     I(4)            4           scalar   ARG,OUT          5824                              
 TAG                        Dummy  5817     I(4)            4           scalar   ARG,IN           5824                              
 TO_PE                      Dummy  5817     I(4)            4           scalar   ARG,IN           5824                              

Page 247         Source Listing                  MPP_SEND_INT8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5826 
   5827     subroutine mpp_recv_int8_5d( get_data, get_len, from_pe, block, tag, request)
   5828 !a mpp_transmit with null arguments on the put side
   5829       integer, intent(in) :: get_len, from_pe
   5830       integer(i8_kind), intent(out) :: get_data(:,:,:,:,:)
   5831       logical, intent(in), optional :: block
   5832       integer, intent(in), optional :: tag
   5833       integer, intent(out), optional :: request
   5834 
   5835       integer(i8_kind) :: dummy(1,1,1,1,1)
   5836       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   5837     end subroutine mpp_recv_int8_5d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_recv_int8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  5827     L(4)            4           scalar   ARG,IN           5836                              
 DUMMY                      Local  5835     I(8)            8     5     1        TGT              5836                              
 FROM_PE                    Dummy  5827     I(4)            4           scalar   ARG,IN           5836                              
 GET_DATA                   Dummy  5827     I(8)            8     5     1        ARG,OUT          5836                              
 GET_LEN                    Dummy  5827     I(4)            4           scalar   ARG,IN           5836                              
 MPP_RECV_INT8_5D           Subr   5827                                          PRIV                                               
 REQUEST                    Dummy  5827     I(4)            4           scalar   ARG,OUT          5836                              
 TAG                        Dummy  5827     I(4)            4           scalar   ARG,IN           5836                              

Page 248         Source Listing                  MPP_RECV_INT8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5838 
   5839     subroutine mpp_send_int8_5d( put_data, put_len, to_pe, tag, request )
   5840 !a mpp_transmit with null arguments on the get side
   5841       integer, intent(in) :: put_len, to_pe
   5842       integer(i8_kind), intent(in) :: put_data(:,:,:,:,:)
   5843       integer, intent(in), optional :: tag
   5844       integer, intent(out), optional :: request
   5845       integer(i8_kind) :: dummy(1,1,1,1,1)
   5846       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   5847     end subroutine mpp_send_int8_5d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_send_int8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  5845     I(8)            8     5     1        TGT              5846                              
 MPP_SEND_INT8_5D           Subr   5839                                          PRIV                                               
 PUT_DATA                   Dummy  5839     I(8)            8     5     1        ARG,IN           5846                              
 PUT_LEN                    Dummy  5839     I(4)            4           scalar   ARG,IN           5846                              
 REQUEST                    Dummy  5839     I(4)            4           scalar   ARG,OUT          5846                              
 TAG                        Dummy  5839     I(4)            4           scalar   ARG,IN           5846                              
 TO_PE                      Dummy  5839     I(4)            4           scalar   ARG,IN           5846                              

Page 249         Source Listing                  MPP_SEND_INT8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5848 
   5849 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5850 !                                                                             !
   5851 !                                MPP_BROADCAST                                !
   5852 !                                                                             !
   5853 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5854 
   5855     subroutine mpp_broadcast_int8_scalar( data, from_pe, pelist )
   5856       integer(i8_kind), intent(inout) :: data
   5857       integer, intent(in) :: from_pe
   5858       integer, intent(in), optional :: pelist(:)
   5859       integer(i8_kind) :: data1D(1)
   5860 
   5861       pointer( ptr, data1D )
   5862 
   5863       ptr = LOC(data)
   5864       call mpp_broadcast_int8( data1D, 1, from_pe, pelist )
   5865 
   5866       return
   5867     end subroutine mpp_broadcast_int8_scalar


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_broadcast_int8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5855     I(8)            8           scalar   ARG,TGT,INOUT    5863                              
 DATA1D                     Local  5859     I(8)            8     1     1                         5864                              
 FROM_PE                    Dummy  5855     I(4)            4           scalar   ARG,IN           5864                              
 LOC                        Func   5863                                 scalar                    5863                              
 MPP_BROADCAST_INT8_SCALAR  Subr   5855                                          PRIV                                               
 PELIST                     Dummy  5855     I(4)            4     1     1        ARG,IN           5864                              
 PTR                        Local  5861     I(8)            8           scalar   PTR              5863                              

Page 250         Source Listing                  MPP_BROADCAST_INT8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5868 
   5869     subroutine mpp_broadcast_int8_2d( data, length, from_pe, pelist )
   5870 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   5871 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   5872 !backward compatible.
   5873       integer(i8_kind), intent(inout) :: data(:,:)
   5874       integer, intent(in) :: length, from_pe
   5875       integer, intent(in), optional :: pelist(:)
   5876       integer(i8_kind) :: data1D(length)
   5877 
   5878       pointer( ptr, data1D )
   5879       ptr = LOC(data)
   5880       call mpp_broadcast( data1D, length, from_pe, pelist )
   5881 
   5882       return
   5883     end subroutine mpp_broadcast_int8_2d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_broadcast_int8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5869     I(8)            8     2     1        ARG,INOUT        5879                              
 DATA1D                     Local  5876     I(8)            8     1     0                         5880                              
 FROM_PE                    Dummy  5869     I(4)            4           scalar   ARG,IN           5880                              
 LENGTH                     Dummy  5869     I(4)            4           scalar   ARG,IN           5876,5880                         
 LOC                        Func   5879                                 scalar                    5879                              
 MPP_BROADCAST_INT8_2D      Subr   5869                                          PRIV                                               
 PELIST                     Dummy  5869     I(4)            4     1     1        ARG,IN           5880                              
 PTR                        Local  5878     I(8)            8           scalar   PTR              5879                              

Page 251         Source Listing                  MPP_BROADCAST_INT8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5884 
   5885     subroutine mpp_broadcast_int8_3d( data, length, from_pe, pelist )
   5886 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   5887 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   5888 !backward compatible.
   5889       integer(i8_kind), intent(inout) :: data(:,:,:)
   5890       integer, intent(in) :: length, from_pe
   5891       integer, intent(in), optional :: pelist(:)
   5892       integer(i8_kind) :: data1D(length)
   5893 
   5894       pointer( ptr, data1D )
   5895       ptr = LOC(data)
   5896       call mpp_broadcast( data1D, length, from_pe, pelist )
   5897 
   5898       return
   5899    end subroutine mpp_broadcast_int8_3d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_broadcast_int8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5885     I(8)            8     3     1        ARG,INOUT        5895                              
 DATA1D                     Local  5892     I(8)            8     1     0                         5896                              
 FROM_PE                    Dummy  5885     I(4)            4           scalar   ARG,IN           5896                              
 LENGTH                     Dummy  5885     I(4)            4           scalar   ARG,IN           5892,5896                         
 LOC                        Func   5895                                 scalar                    5895                              
 MPP_BROADCAST_INT8_3D      Subr   5885                                          PRIV                                               
 PELIST                     Dummy  5885     I(4)            4     1     1        ARG,IN           5896                              
 PTR                        Local  5894     I(8)            8           scalar   PTR              5895                              

Page 252         Source Listing                  MPP_BROADCAST_INT8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5900 
   5901     subroutine mpp_broadcast_int8_4d( data, length, from_pe, pelist )
   5902 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   5903 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   5904 !backward compatible.
   5905       integer(i8_kind), intent(inout) :: data(:,:,:,:)
   5906       integer, intent(in) :: length, from_pe
   5907       integer, intent(in), optional :: pelist(:)
   5908       integer(i8_kind) :: data1D(length)
   5909 
   5910       pointer( ptr, data1D )
   5911       ptr = LOC(data)
   5912       call mpp_broadcast( data1D, length, from_pe, pelist )
   5913 
   5914       return
   5915     end subroutine mpp_broadcast_int8_4d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_broadcast_int8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5901     I(8)            8     4     1        ARG,INOUT        5911                              
 DATA1D                     Local  5908     I(8)            8     1     0                         5912                              
 FROM_PE                    Dummy  5901     I(4)            4           scalar   ARG,IN           5912                              
 LENGTH                     Dummy  5901     I(4)            4           scalar   ARG,IN           5908,5912                         
 LOC                        Func   5911                                 scalar                    5911                              
 MPP_BROADCAST_INT8_4D      Subr   5901                                          PRIV                                               
 PELIST                     Dummy  5901     I(4)            4     1     1        ARG,IN           5912                              
 PTR                        Local  5910     I(8)            8           scalar   PTR              5911                              

Page 253         Source Listing                  MPP_BROADCAST_INT8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5916 
   5917     subroutine mpp_broadcast_int8_5d( data, length, from_pe, pelist )
   5918 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   5919 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   5920 !backward compatible.
   5921       integer(i8_kind), intent(inout) :: data(:,:,:,:,:)
   5922       integer, intent(in) :: length, from_pe
   5923       integer, intent(in), optional :: pelist(:)
   5924       integer(i8_kind) :: data1D(length)
   5925 
   5926       pointer( ptr, data1D )
   5927       ptr = LOC(data)
   5928       call mpp_broadcast( data1D, length, from_pe, pelist )
   5929 
   5930       return
   5931     end subroutine mpp_broadcast_int8_5d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_broadcast_int8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5917     I(8)            8     5     1        ARG,INOUT        5927                              
 DATA1D                     Local  5924     I(8)            8     1     0                         5928                              
 FROM_PE                    Dummy  5917     I(4)            4           scalar   ARG,IN           5928                              
 LENGTH                     Dummy  5917     I(4)            4           scalar   ARG,IN           5924,5928                         
 LOC                        Func   5927                                 scalar                    5927                              
 MPP_BROADCAST_INT8_5D      Subr   5917                                          PRIV                                               
 PELIST                     Dummy  5917     I(4)            4     1     1        ARG,IN           5928                              
 PTR                        Local  5926     I(8)            8           scalar   PTR              5927                              

Page 254         Source Listing                  MPP_BROADCAST_INT8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   5932 # 201 "../mpp/include/mpp_transmit_mpi.h" 2 
   5933 # 684 "../mpp/include/mpp_comm_mpi.inc" 2 
   5934 
   5935 
   5936 
   5937 
   5938 
   5939 
   5940 
   5941 
   5942 
   5943 
   5944 
   5945 
   5946 
   5947 
   5948 
   5949 
   5950 
   5951 
   5952 
   5953 
   5954 
   5955 
   5956 
   5957 
   5958 
   5959 
   5960 
   5961 
   5962 
   5963 
   5964 
   5965 
   5966 
   5967 
   5968 
   5969 
   5970 
   5971 
   5972 
   5973 
   5974 
   5975 
   5976 
   5977 
   5978 
   5979 
   5980 
   5981 
   5982 
   5983 
   5984 
   5985 
   5986 
   5987 
   5988 

Page 255         Source Listing                  MPP_BROADCAST_INT8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   5989 # 1 "../mpp/include/mpp_transmit_mpi.h" 1 
   5990 !***********************************************************************
   5991 !*                   GNU Lesser General Public License
   5992 !*
   5993 !* This file is part of the GFDL Flexible Modeling System (FMS).
   5994 !*
   5995 !* FMS is free software: you can redistribute it and/or modify it under
   5996 !* the terms of the GNU Lesser General Public License as published by
   5997 !* the Free Software Foundation, either version 3 of the License, or (at
   5998 !* your option) any later version.
   5999 !*
   6000 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   6001 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   6002 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   6003 !* for more details.
   6004 !*
   6005 !* You should have received a copy of the GNU Lesser General Public
   6006 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   6007 !***********************************************************************
   6008 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6009 !                                                                             !
   6010 !                                  MPP_TRANSMIT                               !
   6011 !                                                                             !
   6012 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6013 
   6014     subroutine mpp_transmit_int4( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, recv_request, send_reque
   6014 st )
   6015 !a message-passing routine intended to be reminiscent equally of both MPI and SHMEM
   6016 
   6017 !put_data and get_data are contiguous integer(i4_kind) arrays
   6018 
   6019 !at each call, your put_data array is put to   to_pe's get_data
   6020 !              your get_data array is got from from_pe's put_data
   6021 !i.e we assume that typically (e.g updating halo regions) each PE performs a put _and_ a get
   6022 
   6023 !special PE designations:
   6024 !      NULL_PE: to disable a put or a get (e.g at boundaries)
   6025 !      ANY_PE:  if remote PE for the put or get is to be unspecific
   6026 !      ALL_PES: broadcast and collect operations (collect not yet implemented)
   6027 
   6028 !ideally we would not pass length, but this f77-style call performs better (arrays passed by address, not descriptor)
   6029 !further, this permits <length> contiguous words from an array of any rank to be passed (avoiding f90 rank conformance check
   6029 )
   6030 
   6031 !caller is responsible for completion checks (mpp_sync_self) before and after
   6032 
   6033       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   6034       integer(i4_kind), intent(in)  :: put_data(*)
   6035       integer(i4_kind), intent(out) :: get_data(*)
   6036       logical, intent(in),  optional :: block
   6037       integer, intent(in),  optional :: tag
   6038       integer, intent(out), optional :: recv_request, send_request
   6039       logical                       :: block_comm
   6040       integer                       :: i
   6041       integer(i4_kind), allocatable, save  :: local_data(:) !local copy used by non-parallel code (no SHMEM or MPI)
   6042       integer                       :: comm_tag
   6043       integer                       :: rsize

Page 256         Source Listing                  MPP_TRANSMIT_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   6044 
   6045       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_TRANSMIT: You must first call mpp_init.' )
   6046       if( to_pe.EQ.NULL_PE .AND. from_pe.EQ.NULL_PE )return
   6047 
   6048       block_comm = .true.
   6049       if(PRESENT(block)) block_comm = block
   6050 
   6051       if( debug )then
   6052           call system_clock_mpi(tick)
   6053           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   6054                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT begin: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_
   6054 len
   6055       end if
   6056 
   6057       comm_tag = DEFAULT_TAG
   6058       if(present(tag)) comm_tag = tag
   6059 
   6060 !do put first and then get
   6061       if( to_pe.GE.0 .AND. to_pe.LT.npes )then
   6062 !use non-blocking sends
   6063           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   6064 !z1l: truly non-blocking send.
   6065 !          if( request(to_pe).NE.MPI_REQUEST_NULL )then !only one message from pe->to_pe in queue
   6066 !              if( debug )write( stderr(),* )'PE waiting for sending', pe, to_pe
   6067 !              call MPI_WAIT( request(to_pe), stat, error )
   6068 !          end if
   6069           if(present(send_request)) then
   6070              call MPI_ISEND( put_data, put_len, MPI_INTEGER4, to_pe, comm_tag, mpp_comm_private, send_request, error)
   6071           else
   6072              cur_send_request = cur_send_request + 1
   6073              if( cur_send_request > max_request ) call mpp_error(FATAL, &
   6074                 "MPP_TRANSMIT: cur_send_request is greater than max_request, increase mpp_nml request_multiply")
   6075              call MPI_ISEND( put_data, put_len, MPI_INTEGER4, to_pe, comm_tag, mpp_comm_private, &
   6076                              request_send(cur_send_request), error)
   6077           endif
   6078           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_SEND, put_len*4 )
   6079       else if( to_pe.EQ.ALL_PES )then !this is a broadcast from from_pe
   6080           if( from_pe.LT.0 .OR. from_pe.GE.npes )call mpp_error( FATAL, 'MPP_TRANSMIT: broadcasting from invalid PE.' )
   6081           if( put_len.GT.get_len )call mpp_error( FATAL, 'MPP_TRANSMIT: size mismatch between put_data and get_data.' )
   6082           if( pe.EQ.from_pe )then
   6083               if( LOC(get_data).NE.LOC(put_data) )then
   6084 !dir$ IVDEP
   6085                   do i = 1,get_len
   6086                      get_data(i) = put_data(i)
   6087                   end do
   6088               end if
   6089           end if
   6090           call mpp_broadcast( get_data, get_len, from_pe )
   6091           return
   6092       else if( to_pe.EQ.ANY_PE )then !we don't have a destination to do puts to, so only do gets
   6093 !...but you cannot have a pure get with MPI
   6094           call mpp_error( FATAL, 'MPP_TRANSMIT: you cannot transmit to ANY_PE using MPI.' )
   6095       else if( to_pe.NE.NULL_PE )then  !no other valid cases except NULL_PE
   6096           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid to_pe.' )
   6097       end if
   6098 
   6099 !do the get

Page 257         Source Listing                  MPP_TRANSMIT_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   6100       if( from_pe.GE.0 .AND. from_pe.LT.npes )then
   6101 !receive from from_pe
   6102           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   6103           if( block_comm ) then
   6104              call MPI_RECV( get_data, get_len, MPI_INTEGER4, from_pe, comm_tag, mpp_comm_private, stat, error )
   6105              call MPI_GET_COUNT( stat, MPI_INTEGER4, rsize, error)
   6106              if(rsize .NE. get_len) then
   6107                 print*, "rsize, get_len=", rsize, get_len, mpp_pe(), from_pe
   6108                 call mpp_error(FATAL, "MPP_TRANSMIT: get_len does not match size of data received")
   6109              endif
   6110           else
   6111 !             if( request_recv(from_pe).NE.MPI_REQUEST_NULL )then !only one message from from_pe->pe in queue
   6112 !              if( debug )write( stderr(),* )'PE waiting for receiving', pe, from_pe
   6113 !                call MPI_WAIT( request_recv(from_pe), stat, error )
   6114 !             end if
   6115              if(PRESENT(recv_request)) then
   6116                 call MPI_IRECV( get_data, get_len, MPI_INTEGER4, from_pe, comm_tag, mpp_comm_private, &
   6117                   recv_request, error )
   6118              else
   6119                 cur_recv_request = cur_recv_request + 1
   6120                 if( cur_recv_request > max_request ) call mpp_error(FATAL, &
   6121                 "MPP_TRANSMIT: cur_recv_request is greater than max_request, increase mpp_nml request_multiply")
   6122                 call MPI_IRECV( get_data, get_len, MPI_INTEGER4, from_pe, comm_tag, mpp_comm_private, &
   6123                      request_recv(cur_recv_request), error )
   6124                 size_recv(cur_recv_request) = get_len
   6125                 type_recv(cur_recv_request) = MPI_INTEGER4
   6126              endif
   6127           endif
   6128           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*4 )
   6129       else if( from_pe.EQ.ANY_PE )then
   6130 !receive from MPI_ANY_SOURCE
   6131           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   6132           call MPI_RECV( get_data, get_len, MPI_INTEGER4, MPI_ANY_SOURCE, comm_tag, mpp_comm_private, stat, error )
   6133           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*4 )
   6134       else if( from_pe.EQ.ALL_PES )then
   6135           call mpp_error( FATAL, 'MPP_TRANSMIT: from_pe=ALL_PES has ambiguous meaning, and hence is not implemented.' )
   6136       else if( from_pe.NE.NULL_PE )then !only remaining valid choice is NULL_PE
   6137           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid from_pe.' )
   6138       end if
   6139 
   6140       if( debug )then
   6141           call system_clock_mpi(tick)
   6142           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   6143                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT end: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_le
   6143 n
   6144       end if
   6145       return
   6146     end subroutine mpp_transmit_int4

Page 258         Source Listing                  MPP_TRANSMIT_INT4
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_transmit_int4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6014     L(4)            4           scalar   ARG,IN           6049                              
 BLOCK_COMM                 Local  6039     L(4)            4           scalar                    6048,6049,6103                    
 COMM_TAG                   Local  6042     I(4)            4           scalar                    6057,6058,6070,6075,6104,6116,6122
                                                                                                  ,6132                             
 FROM_PE                    Dummy  6014     I(4)            4           scalar   ARG,IN           6046,6054,6080,6082,6090,6100,6104
                                                                                                  ,6107,6116,6122,6129,6134,6136,614
                                                                                                  3                                 
 GET_DATA                   Dummy  6014     I(4)            4     1     0        ARG,TGT,OUT      6083,6086,6090,6104,6116,6122,6132
 GET_LEN                    Dummy  6014     I(4)            4           scalar   ARG,IN           6054,6081,6085,6090,6104,6106,6107
                                                                                                  ,6116,6122,6124,6128,6132,6133,614
                                                                                                  3                                 
 I                          Local  6040     I(4)            4           scalar                    6085,6086                         
 I4_KIND                    Param  6034     I(4)            4           scalar   PRIV             6034,6035,6041,6158,6220,6221,6227
                                                                                                  ,6244,6245,6249,6264,6265,6269,628
                                                                                                  4,6285,6289,6304,6305,6309,6329,63
                                                                                                  34,6341,6344,6351,6358,6359,6371,6
                                                                                                  376,6377,6389,6394,6401,6404,6411,
                                                                                                  6416,6423,6426,6433,6438,6445,6448
                                                                                                  ,6455,6460,6467,6470,6481,6484,649
                                                                                                  8,6501,6514,6517,6530,6533,6546,65
                                                                                                  49,8068,8071,8087,8091,8360,8363,8
                                                                                                  379,8383,8926,8928,8972,8974,8985,
                                                                                                  8988,8999,9002,9013,9016,9027,9030
                                                                                                  ,9578,9622,9624,9635,9638,9649,965
                                                                                                  2,9663,9666,9677,9680,9730,9731,97
                                                                                                  57,9758,9788,9789,10787,11741,1175
                                                                                                  6,11859,11874,11977,11992,12095,12
                                                                                                  110,12213,12228,12304,12306,12327,
                                                                                                  12331,12346,12422,12424,12445,1244
                                                                                                  9,12464,12540,12542,12563,12567,12
                                                                                                  582,12658,12660,12681,12685,12700,
                                                                                                  12776,12778,12799,12803,12818,1325
                                                                                                  1,13301,13351,13401,13451,13760,13
                                                                                                  761,13801,13802,13850,13851,13855,
                                                                                                  13856,13873,13874,13882,14550,1455
                                                                                                  1,14555,14556,14573,14574,14582   
 LOC                        Func   6083                                 scalar                    6083                              
 LOCAL_DATA                 Local  6041     I(4)            4     1     1        ALC,SAVE                                           
 MPI_INTEGER4               Param  6070     I(4)            4           scalar   PRIV             6070,6075,6104,6105,6116,6122,6125
                                                                                                  ,6132,6183,7320,7325,7354,7355,736
                                                                                                  6,7372,7375,7382,7433,8078,8098,83
                                                                                                  70,8390,8939,9747,9776,9777,10539,
                                                                                                  10568,10569,10816,10831,10851,1147
                                                                                                  6,11491,11511                     

Page 259         Source Listing                  MPP_TRANSMIT_INT4
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_transmit_mpi.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_IRECV                  Subr   6116                                                           6116,6122                         
 MPI_ISEND                  Subr   6070                                                           6070,6075                         
 MPI_RECV                   Subr   6104                                                           6104,6132                         
 MPP_TRANSMIT_INT4          Subr   6014                                          PRIV             6235,6255,6275,6295,6315,6335,6345
                                                                                                  ,6364,6382                        
 PRESENT                    Func   6049                                 scalar                    6049,6058,6069,6115               
 PUT_DATA                   Dummy  6014     I(4)            4     1     0        ARG,TGT,IN       6070,6075,6083,6086               
 PUT_LEN                    Dummy  6014     I(4)            4           scalar   ARG,IN           6054,6070,6075,6078,6081,6143     
 RECV_REQUEST               Dummy  6014     I(4)            4           scalar   ARG,OUT          6115,6117                         
 RSIZE                      Local  6043     I(4)            4           scalar                    6105,6106,6107                    
 SEND_REQUEST               Dummy  6014     I(4)            4           scalar   ARG,OUT          6069,6070                         
 TAG                        Dummy  6014     I(4)            4           scalar   ARG,IN           6058                              
 TO_PE                      Dummy  6014     I(4)            4           scalar   ARG,IN           6046,6054,6061,6070,6075,6079,6092
                                                                                                  ,6095,6143                        

Page 260         Source Listing                  MPP_TRANSMIT_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   6147 
   6148 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6149 !                                                                             !
   6150 !                                MPP_BROADCAST                                !
   6151 !                                                                             !
   6152 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6153 
   6154     subroutine mpp_broadcast_int4( data, length, from_pe, pelist )
   6155 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   6156 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   6157 !backward compatible.
   6158       integer(i4_kind), intent(inout) :: data(*)
   6159       integer, intent(in) :: length, from_pe
   6160       integer, intent(in), optional :: pelist(:)
   6161       integer :: n, i, from_rank, stdout_unit
   6162 
   6163       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_BROADCAST: You must first call mpp_init.' )
   6164       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   6165 
   6166       if( debug )then
   6167           call system_clock_mpi(tick)
   6168           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   6169                'T=',tick, ' PE=',pe, ' MPP_BROADCAST begin: from_pe, length=', from_pe, length
   6170       end if
   6171 
   6172       if( .NOT.ANY(from_pe.EQ.peset(current_peset_num)%list) ) &
   6173            call mpp_error( FATAL, 'MPP_BROADCAST: broadcasting from invalid PE.' )
   6174 
   6175       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   6176 ! find the rank of from_pe in the pelist.
   6177       do i = 1, mpp_npes()
   6178          if(peset(n)%list(i) == from_pe) then
   6179              from_rank = i - 1
   6180              exit
   6181          endif
   6182       enddo
   6183       if( mpp_npes().GT.1 )call MPI_BCAST( data, length, MPI_INTEGER4, from_rank, peset(n)%id, error )
   6184       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_BROADCAST, length*4 )
   6185       return
   6186     end subroutine mpp_broadcast_int4

Page 261         Source Listing                  MPP_BROADCAST_INT4
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_broadcast_int4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   6172                                 scalar                    6172                              
 DATA                       Dummy  6154     I(4)            4     1     0        ARG,INOUT        6183                              
 FROM_PE                    Dummy  6154     I(4)            4           scalar   ARG,IN           6169,6172,6178                    
 FROM_RANK                  Local  6161     I(4)            4           scalar                    6179,6183                         
 I                          Local  6161     I(4)            4           scalar                    6177,6178,6179                    
 LENGTH                     Dummy  6154     I(4)            4           scalar   ARG,IN           6169,6183,6184                    
 MPI_BCAST                  Subr   6183                                                           6183                              
 MPP_BROADCAST_INT4         Subr   6154                                          PRIV             6090,6489,6505,6521,6537,6553,9590
 N                          Local  6161     I(4)            4           scalar                    6164,6178,6183                    
 PELIST                     Dummy  6154     I(4)            4     1     1        ARG,IN           6164                              
 STDOUT_UNIT                Local  6161     I(4)            4           scalar                    6168                              

Page 262         Source Listing                  MPP_BROADCAST_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   6187 
   6188 !####################################################################################
   6189 # 1 "../mpp/include/mpp_transmit.inc" 1 
   6190 ! -*-f90-*-
   6191 
   6192 !***********************************************************************
   6193 !*                   GNU Lesser General Public License
   6194 !*
   6195 !* This file is part of the GFDL Flexible Modeling System (FMS).
   6196 !*
   6197 !* FMS is free software: you can redistribute it and/or modify it under
   6198 !* the terms of the GNU Lesser General Public License as published by
   6199 !* the Free Software Foundation, either version 3 of the License, or (at
   6200 !* your option) any later version.
   6201 !*
   6202 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   6203 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   6204 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   6205 !* for more details.
   6206 !*
   6207 !* You should have received a copy of the GNU Lesser General Public
   6208 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   6209 !***********************************************************************
   6210 
   6211 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6212 !                                                                             !
   6213 !                                  MPP_TRANSMIT                               !
   6214 !                                                                             !
   6215 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6216 
   6217     subroutine mpp_transmit_int4_scalar( put_data, to_pe, get_data, from_pe, plen, glen, block, tag, &
   6218                                     recv_request, send_request)
   6219       integer, intent(in) :: to_pe, from_pe
   6220       integer(i4_kind), intent(in)  :: put_data
   6221       integer(i4_kind), intent(out) :: get_data
   6222       integer, optional,  intent(in) :: plen, glen
   6223       logical, intent(in),  optional :: block
   6224       integer, intent(in),  optional :: tag
   6225       integer, intent(out), optional :: recv_request, send_request
   6226       integer                       :: put_len, get_len
   6227       integer(i4_kind) :: put_data1D(1), get_data1D(1)
   6228       pointer( ptrp, put_data1D )
   6229       pointer( ptrg, get_data1D )
   6230 
   6231       ptrp = LOC(put_data)
   6232       ptrg = LOC(get_data)
   6233       put_len=1; if(PRESENT(plen))put_len=plen
   6234       get_len=1; if(PRESENT(glen))get_len=glen
   6235       call mpp_transmit_int4 ( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   6236                            recv_request=recv_request, send_request=send_request )
   6237 
   6238       return
   6239     end subroutine mpp_transmit_int4_scalar

Page 263         Source Listing                  MPP_TRANSMIT_INT4_SCALAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit.inc



ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_transmit_int4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6217     L(4)            4           scalar   ARG,IN           6235                              
 FROM_PE                    Dummy  6217     I(4)            4           scalar   ARG,IN           6235                              
 GET_DATA                   Dummy  6217     I(4)            4           scalar   ARG,TGT,OUT      6232                              
 GET_DATA1D                 Local  6227     I(4)            4     1     1                         6235                              
 GET_LEN                    Local  6226     I(4)            4           scalar                    6234,6235                         
 GLEN                       Dummy  6217     I(4)            4           scalar   ARG,IN           6234                              
 LOC                        Func   6231                                 scalar                    6231,6232                         
 MPP_TRANSMIT_INT4_SCALAR   Subr   6217                                          PRIV                                               
 PLEN                       Dummy  6217     I(4)            4           scalar   ARG,IN           6233                              
 PRESENT                    Func   6233                                 scalar                    6233,6234                         
 PTRG                       Local  6229     I(8)            8           scalar   PTR              6232                              
 PTRP                       Local  6228     I(8)            8           scalar   PTR              6231                              
 PUT_DATA                   Dummy  6217     I(4)            4           scalar   ARG,TGT,IN       6231                              
 PUT_DATA1D                 Local  6227     I(4)            4     1     1                         6235                              
 PUT_LEN                    Local  6226     I(4)            4           scalar                    6233,6235                         
 RECV_REQUEST               Dummy  6218     I(4)            4           scalar   ARG,OUT          6236                              
 SEND_REQUEST               Dummy  6218     I(4)            4           scalar   ARG,OUT          6236                              
 TAG                        Dummy  6217     I(4)            4           scalar   ARG,IN           6235                              
 TO_PE                      Dummy  6217     I(4)            4           scalar   ARG,IN           6235                              

Page 264         Source Listing                  MPP_TRANSMIT_INT4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6240 
   6241     subroutine mpp_transmit_int4_2d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   6242                                 recv_request, send_request )
   6243       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   6244       integer(i4_kind), intent(in)  :: put_data(:,:)
   6245       integer(i4_kind), intent(out) :: get_data(:,:)
   6246       logical, intent(in), optional :: block
   6247       integer, intent(in), optional :: tag
   6248       integer, intent(out), optional :: recv_request, send_request
   6249       integer(i4_kind) :: put_data1D(put_len), get_data1D(get_len)
   6250 
   6251       pointer( ptrp, put_data1D )
   6252       pointer( ptrg, get_data1D )
   6253       ptrp = LOC(put_data)
   6254       ptrg = LOC(get_data)
   6255       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   6256                          recv_request=recv_request, send_request=send_request )
   6257 
   6258       return
   6259     end subroutine mpp_transmit_int4_2d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_transmit_int4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6241     L(4)            4           scalar   ARG,IN           6255                              
 FROM_PE                    Dummy  6241     I(4)            4           scalar   ARG,IN           6255                              
 GET_DATA                   Dummy  6241     I(4)            4     2     1        ARG,OUT          6254                              
 GET_DATA1D                 Local  6249     I(4)            4     1     0                         6255                              
 GET_LEN                    Dummy  6241     I(4)            4           scalar   ARG,IN           6249,6255                         
 LOC                        Func   6253                                 scalar                    6253,6254                         
 MPP_TRANSMIT_INT4_2D       Subr   6241                                          PRIV             6395,6405                         
 PTRG                       Local  6252     I(8)            8           scalar   PTR              6254                              
 PTRP                       Local  6251     I(8)            8           scalar   PTR              6253                              
 PUT_DATA                   Dummy  6241     I(4)            4     2     1        ARG,IN           6253                              
 PUT_DATA1D                 Local  6249     I(4)            4     1     0                         6255                              
 PUT_LEN                    Dummy  6241     I(4)            4           scalar   ARG,IN           6249,6255                         
 RECV_REQUEST               Dummy  6242     I(4)            4           scalar   ARG,OUT          6256                              
 SEND_REQUEST               Dummy  6242     I(4)            4           scalar   ARG,OUT          6256                              
 TAG                        Dummy  6241     I(4)            4           scalar   ARG,IN           6255                              
 TO_PE                      Dummy  6241     I(4)            4           scalar   ARG,IN           6255                              

Page 265         Source Listing                  MPP_TRANSMIT_INT4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6260 
   6261     subroutine mpp_transmit_int4_3d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   6262                                 recv_request, send_request )
   6263       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   6264       integer(i4_kind), intent(in)  :: put_data(:,:,:)
   6265       integer(i4_kind), intent(out) :: get_data(:,:,:)
   6266       logical, intent(in), optional :: block
   6267       integer, intent(in), optional :: tag
   6268       integer, intent(out), optional :: recv_request, send_request
   6269       integer(i4_kind) :: put_data1D(put_len), get_data1D(get_len)
   6270 
   6271       pointer( ptrp, put_data1D )
   6272       pointer( ptrg, get_data1D )
   6273       ptrp = LOC(put_data)
   6274       ptrg = LOC(get_data)
   6275       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   6276                          recv_request=recv_request, send_request=send_request )
   6277 
   6278       return
   6279     end subroutine mpp_transmit_int4_3d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_transmit_int4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6261     L(4)            4           scalar   ARG,IN           6275                              
 FROM_PE                    Dummy  6261     I(4)            4           scalar   ARG,IN           6275                              
 GET_DATA                   Dummy  6261     I(4)            4     3     1        ARG,OUT          6274                              
 GET_DATA1D                 Local  6269     I(4)            4     1     0                         6275                              
 GET_LEN                    Dummy  6261     I(4)            4           scalar   ARG,IN           6269,6275                         
 LOC                        Func   6273                                 scalar                    6273,6274                         
 MPP_TRANSMIT_INT4_3D       Subr   6261                                          PRIV             6417,6427                         
 PTRG                       Local  6272     I(8)            8           scalar   PTR              6274                              
 PTRP                       Local  6271     I(8)            8           scalar   PTR              6273                              
 PUT_DATA                   Dummy  6261     I(4)            4     3     1        ARG,IN           6273                              
 PUT_DATA1D                 Local  6269     I(4)            4     1     0                         6275                              
 PUT_LEN                    Dummy  6261     I(4)            4           scalar   ARG,IN           6269,6275                         
 RECV_REQUEST               Dummy  6262     I(4)            4           scalar   ARG,OUT          6276                              
 SEND_REQUEST               Dummy  6262     I(4)            4           scalar   ARG,OUT          6276                              
 TAG                        Dummy  6261     I(4)            4           scalar   ARG,IN           6275                              
 TO_PE                      Dummy  6261     I(4)            4           scalar   ARG,IN           6275                              

Page 266         Source Listing                  MPP_TRANSMIT_INT4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6280 
   6281     subroutine mpp_transmit_int4_4d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   6282                                 recv_request, send_request )
   6283       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   6284       integer(i4_kind), intent(in)  :: put_data(:,:,:,:)
   6285       integer(i4_kind), intent(out) :: get_data(:,:,:,:)
   6286       logical, intent(in), optional :: block
   6287       integer, intent(in), optional :: tag
   6288       integer, intent(out), optional :: recv_request, send_request
   6289       integer(i4_kind) :: put_data1D(put_len), get_data1D(get_len)
   6290 
   6291       pointer( ptrp, put_data1D )
   6292       pointer( ptrg, get_data1D )
   6293       ptrp = LOC(put_data)
   6294       ptrg = LOC(get_data)
   6295       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   6296                          recv_request=recv_request, send_request=send_request )
   6297 
   6298       return
   6299     end subroutine mpp_transmit_int4_4d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_transmit_int4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6281     L(4)            4           scalar   ARG,IN           6295                              
 FROM_PE                    Dummy  6281     I(4)            4           scalar   ARG,IN           6295                              
 GET_DATA                   Dummy  6281     I(4)            4     4     1        ARG,OUT          6294                              
 GET_DATA1D                 Local  6289     I(4)            4     1     0                         6295                              
 GET_LEN                    Dummy  6281     I(4)            4           scalar   ARG,IN           6289,6295                         
 LOC                        Func   6293                                 scalar                    6293,6294                         
 MPP_TRANSMIT_INT4_4D       Subr   6281                                          PRIV             6439,6449                         
 PTRG                       Local  6292     I(8)            8           scalar   PTR              6294                              
 PTRP                       Local  6291     I(8)            8           scalar   PTR              6293                              
 PUT_DATA                   Dummy  6281     I(4)            4     4     1        ARG,IN           6293                              
 PUT_DATA1D                 Local  6289     I(4)            4     1     0                         6295                              
 PUT_LEN                    Dummy  6281     I(4)            4           scalar   ARG,IN           6289,6295                         
 RECV_REQUEST               Dummy  6282     I(4)            4           scalar   ARG,OUT          6296                              
 SEND_REQUEST               Dummy  6282     I(4)            4           scalar   ARG,OUT          6296                              
 TAG                        Dummy  6281     I(4)            4           scalar   ARG,IN           6295                              
 TO_PE                      Dummy  6281     I(4)            4           scalar   ARG,IN           6295                              

Page 267         Source Listing                  MPP_TRANSMIT_INT4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6300 
   6301     subroutine mpp_transmit_int4_5d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   6302                                 recv_request, send_request )
   6303       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   6304       integer(i4_kind), intent(in)  :: put_data(:,:,:,:,:)
   6305       integer(i4_kind), intent(out) :: get_data(:,:,:,:,:)
   6306       logical, intent(in), optional :: block
   6307       integer, intent(in), optional :: tag
   6308       integer, intent(out), optional :: recv_request, send_request
   6309       integer(i4_kind) :: put_data1D(put_len), get_data1D(get_len)
   6310 
   6311       pointer( ptrp, put_data1D )
   6312       pointer( ptrg, get_data1D )
   6313       ptrp = LOC(put_data)
   6314       ptrg = LOC(get_data)
   6315       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   6316                          recv_request=recv_request, send_request=send_request )
   6317 
   6318       return
   6319     end subroutine mpp_transmit_int4_5d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_transmit_int4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6301     L(4)            4           scalar   ARG,IN           6315                              
 FROM_PE                    Dummy  6301     I(4)            4           scalar   ARG,IN           6315                              
 GET_DATA                   Dummy  6301     I(4)            4     5     1        ARG,OUT          6314                              
 GET_DATA1D                 Local  6309     I(4)            4     1     0                         6315                              
 GET_LEN                    Dummy  6301     I(4)            4           scalar   ARG,IN           6309,6315                         
 LOC                        Func   6313                                 scalar                    6313,6314                         
 MPP_TRANSMIT_INT4_5D       Subr   6301                                          PRIV             6461,6471                         
 PTRG                       Local  6312     I(8)            8           scalar   PTR              6314                              
 PTRP                       Local  6311     I(8)            8           scalar   PTR              6313                              
 PUT_DATA                   Dummy  6301     I(4)            4     5     1        ARG,IN           6313                              
 PUT_DATA1D                 Local  6309     I(4)            4     1     0                         6315                              
 PUT_LEN                    Dummy  6301     I(4)            4           scalar   ARG,IN           6309,6315                         
 RECV_REQUEST               Dummy  6302     I(4)            4           scalar   ARG,OUT          6316                              
 SEND_REQUEST               Dummy  6302     I(4)            4           scalar   ARG,OUT          6316                              
 TAG                        Dummy  6301     I(4)            4           scalar   ARG,IN           6315                              
 TO_PE                      Dummy  6301     I(4)            4           scalar   ARG,IN           6315                              

Page 268         Source Listing                  MPP_TRANSMIT_INT4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6320 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6321 !                                                                             !
   6322 !                              MPP_SEND and RECV                              !
   6323 !                                                                             !
   6324 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6325 
   6326     subroutine mpp_recv_int4( get_data, get_len, from_pe, block, tag, request )
   6327 !a mpp_transmit with null arguments on the put side
   6328       integer, intent(in) :: get_len, from_pe
   6329       integer(i4_kind), intent(out) :: get_data(*)
   6330       logical, intent(in), optional :: block
   6331       integer, intent(in), optional :: tag
   6332       integer, intent(out), optional :: request
   6333 
   6334       integer(i4_kind) :: dummy(1)
   6335       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   6336     end subroutine mpp_recv_int4


ENTRY POINTS

  Name                                 
                                       
 mpp_mod_mp_mpp_recv_int4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6326     L(4)            4           scalar   ARG,IN           6335                              
 DUMMY                      Local  6334     I(4)            4     1     1                         6335                              
 FROM_PE                    Dummy  6326     I(4)            4           scalar   ARG,IN           6335                              
 GET_DATA                   Dummy  6326     I(4)            4     1     0        ARG,OUT          6335                              
 GET_LEN                    Dummy  6326     I(4)            4           scalar   ARG,IN           6335                              
 MPP_RECV_INT4              Subr   6326                                          PRIV                                               
 REQUEST                    Dummy  6326     I(4)            4           scalar   ARG,OUT          6335                              
 TAG                        Dummy  6326     I(4)            4           scalar   ARG,IN           6335                              

Page 269         Source Listing                  MPP_RECV_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6337 
   6338     subroutine mpp_send_int4( put_data, put_len, to_pe, tag, request )
   6339 !a mpp_transmit with null arguments on the get side
   6340       integer, intent(in) :: put_len, to_pe
   6341       integer(i4_kind), intent(in) :: put_data(*)
   6342       integer, intent(in), optional :: tag
   6343       integer, intent(out), optional :: request
   6344       integer(i4_kind) :: dummy(1)
   6345       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag=tag, send_request=request )
   6346     end subroutine mpp_send_int4


ENTRY POINTS

  Name                                 
                                       
 mpp_mod_mp_mpp_send_int4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  6344     I(4)            4     1     1                         6345                              
 MPP_SEND_INT4              Subr   6338                                          PRIV             13682,13939,14196,14453,14638,1481
                                                                                                  7,14996                           
 PUT_DATA                   Dummy  6338     I(4)            4     1     0        ARG,IN           6345                              
 PUT_LEN                    Dummy  6338     I(4)            4           scalar   ARG,IN           6345                              
 REQUEST                    Dummy  6338     I(4)            4           scalar   ARG,OUT          6345                              
 TAG                        Dummy  6338     I(4)            4           scalar   ARG,IN           6345                              
 TO_PE                      Dummy  6338     I(4)            4           scalar   ARG,IN           6345                              

Page 270         Source Listing                  MPP_SEND_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6347 
   6348     subroutine mpp_recv_int4_scalar( get_data, from_pe, glen, block, tag, request )
   6349 !a mpp_transmit with null arguments on the put side
   6350       integer, intent(in) :: from_pe
   6351       integer(i4_kind), intent(out) :: get_data
   6352       logical, intent(in), optional :: block
   6353       integer, intent(in), optional :: tag
   6354       integer, intent(out), optional :: request
   6355 
   6356       integer, optional, intent(in) :: glen
   6357       integer                       :: get_len
   6358       integer(i4_kind) :: get_data1D(1)
   6359       integer(i4_kind) :: dummy(1)
   6360 
   6361       pointer( ptr, get_data1D )
   6362       ptr = LOC(get_data)
   6363       get_len=1; if(PRESENT(glen))get_len=glen
   6364       call mpp_transmit( dummy, 1, NULL_PE, get_data1D, get_len, from_pe, block, tag, recv_request=request )
   6365 
   6366     end subroutine mpp_recv_int4_scalar


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_recv_int4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6348     L(4)            4           scalar   ARG,IN           6364                              
 DUMMY                      Local  6359     I(4)            4     1     1                         6364                              
 FROM_PE                    Dummy  6348     I(4)            4           scalar   ARG,IN           6364                              
 GET_DATA                   Dummy  6348     I(4)            4           scalar   ARG,TGT,OUT      6362                              
 GET_DATA1D                 Local  6358     I(4)            4     1     1                         6364                              
 GET_LEN                    Local  6357     I(4)            4           scalar                    6363,6364                         
 GLEN                       Dummy  6348     I(4)            4           scalar   ARG,IN           6363                              
 LOC                        Func   6362                                 scalar                    6362                              
 MPP_RECV_INT4_SCALAR       Subr   6348                                          PRIV             13789,13831                       
 PRESENT                    Func   6363                                 scalar                    6363                              
 PTR                        Local  6361     I(8)            8           scalar   PTR              6362                              
 REQUEST                    Dummy  6348     I(4)            4           scalar   ARG,OUT          6364                              
 TAG                        Dummy  6348     I(4)            4           scalar   ARG,IN           6364                              

Page 271         Source Listing                  MPP_RECV_INT4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6367 
   6368     subroutine mpp_send_int4_scalar( put_data, to_pe, plen, tag, request)
   6369 !a mpp_transmit with null arguments on the get side
   6370       integer, intent(in) :: to_pe
   6371       integer(i4_kind), intent(in) :: put_data
   6372       integer, optional, intent(in) :: plen
   6373       integer, intent(in), optional :: tag
   6374       integer, intent(out), optional :: request
   6375       integer                       :: put_len
   6376       integer(i4_kind) :: put_data1D(1)
   6377       integer(i4_kind) :: dummy(1)
   6378 
   6379       pointer( ptr, put_data1D )
   6380       ptr = LOC(put_data)
   6381       put_len=1; if(PRESENT(plen))put_len=plen
   6382       call mpp_transmit( put_data1D, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   6383 
   6384     end subroutine mpp_send_int4_scalar


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_send_int4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  6377     I(4)            4     1     1                         6382                              
 LOC                        Func   6380                                 scalar                    6380                              
 MPP_SEND_INT4_SCALAR       Subr   6368                                          PRIV             13792,13837                       
 PLEN                       Dummy  6368     I(4)            4           scalar   ARG,IN           6381                              
 PRESENT                    Func   6381                                 scalar                    6381                              
 PTR                        Local  6379     I(8)            8           scalar   PTR              6380                              
 PUT_DATA                   Dummy  6368     I(4)            4           scalar   ARG,TGT,IN       6380                              
 PUT_DATA1D                 Local  6376     I(4)            4     1     1                         6382                              
 PUT_LEN                    Local  6375     I(4)            4           scalar                    6381,6382                         
 REQUEST                    Dummy  6368     I(4)            4           scalar   ARG,OUT          6382                              
 TAG                        Dummy  6368     I(4)            4           scalar   ARG,IN           6382                              
 TO_PE                      Dummy  6368     I(4)            4           scalar   ARG,IN           6382                              

Page 272         Source Listing                  MPP_SEND_INT4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6385 
   6386     subroutine mpp_recv_int4_2d( get_data, get_len, from_pe, block, tag, request )
   6387 !a mpp_transmit with null arguments on the put side
   6388       integer, intent(in) :: get_len, from_pe
   6389       integer(i4_kind), intent(out) :: get_data(:,:)
   6390       logical, intent(in), optional :: block
   6391       integer, intent(in), optional :: tag
   6392       integer, intent(out), optional :: request
   6393 
   6394       integer(i4_kind) :: dummy(1,1)
   6395       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   6396     end subroutine mpp_recv_int4_2d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_recv_int4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6386     L(4)            4           scalar   ARG,IN           6395                              
 DUMMY                      Local  6394     I(4)            4     2     1        TGT              6395                              
 FROM_PE                    Dummy  6386     I(4)            4           scalar   ARG,IN           6395                              
 GET_DATA                   Dummy  6386     I(4)            4     2     1        ARG,OUT          6395                              
 GET_LEN                    Dummy  6386     I(4)            4           scalar   ARG,IN           6395                              
 MPP_RECV_INT4_2D           Subr   6386                                          PRIV             13668,13925,14182,14439,14624,1480
                                                                                                  3,14982                           
 REQUEST                    Dummy  6386     I(4)            4           scalar   ARG,OUT          6395                              
 TAG                        Dummy  6386     I(4)            4           scalar   ARG,IN           6395                              

Page 273         Source Listing                  MPP_RECV_INT4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6397 
   6398     subroutine mpp_send_int4_2d( put_data, put_len, to_pe, tag, request )
   6399 !a mpp_transmit with null arguments on the get side
   6400       integer, intent(in) :: put_len, to_pe
   6401       integer(i4_kind), intent(in) :: put_data(:,:)
   6402       integer, intent(in), optional :: tag
   6403       integer, intent(out), optional :: request
   6404       integer(i4_kind) :: dummy(1,1)
   6405       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   6406     end subroutine mpp_send_int4_2d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_send_int4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  6404     I(4)            4     2     1        TGT              6405                              
 MPP_SEND_INT4_2D           Subr   6398                                          PRIV                                               
 PUT_DATA                   Dummy  6398     I(4)            4     2     1        ARG,IN           6405                              
 PUT_LEN                    Dummy  6398     I(4)            4           scalar   ARG,IN           6405                              
 REQUEST                    Dummy  6398     I(4)            4           scalar   ARG,OUT          6405                              
 TAG                        Dummy  6398     I(4)            4           scalar   ARG,IN           6405                              
 TO_PE                      Dummy  6398     I(4)            4           scalar   ARG,IN           6405                              

Page 274         Source Listing                  MPP_SEND_INT4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6407 
   6408     subroutine mpp_recv_int4_3d( get_data, get_len, from_pe, block, tag, request )
   6409 !a mpp_transmit with null arguments on the put side
   6410       integer, intent(in) :: get_len, from_pe
   6411       integer(i4_kind), intent(out) :: get_data(:,:,:)
   6412       logical, intent(in), optional :: block
   6413       integer, intent(in), optional :: tag
   6414       integer, intent(out), optional :: request
   6415 
   6416       integer(i4_kind) :: dummy(1,1,1)
   6417       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   6418     end subroutine mpp_recv_int4_3d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_recv_int4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6408     L(4)            4           scalar   ARG,IN           6417                              
 DUMMY                      Local  6416     I(4)            4     3     1        TGT              6417                              
 FROM_PE                    Dummy  6408     I(4)            4           scalar   ARG,IN           6417                              
 GET_DATA                   Dummy  6408     I(4)            4     3     1        ARG,OUT          6417                              
 GET_LEN                    Dummy  6408     I(4)            4           scalar   ARG,IN           6417                              
 MPP_RECV_INT4_3D           Subr   6408                                          PRIV             13953,14668                       
 REQUEST                    Dummy  6408     I(4)            4           scalar   ARG,OUT          6417                              
 TAG                        Dummy  6408     I(4)            4           scalar   ARG,IN           6417                              

Page 275         Source Listing                  MPP_RECV_INT4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6419 
   6420     subroutine mpp_send_int4_3d( put_data, put_len, to_pe, tag, request )
   6421 !a mpp_transmit with null arguments on the get side
   6422       integer, intent(in) :: put_len, to_pe
   6423       integer(i4_kind), intent(in) :: put_data(:,:,:)
   6424       integer, intent(in), optional :: tag
   6425       integer, intent(out), optional :: request
   6426       integer(i4_kind) :: dummy(1,1,1)
   6427       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   6428     end subroutine mpp_send_int4_3d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_send_int4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  6426     I(4)            4     3     1        TGT              6427                              
 MPP_SEND_INT4_3D           Subr   6420                                          PRIV             13975,14654                       
 PUT_DATA                   Dummy  6420     I(4)            4     3     1        ARG,IN           6427                              
 PUT_LEN                    Dummy  6420     I(4)            4           scalar   ARG,IN           6427                              
 REQUEST                    Dummy  6420     I(4)            4           scalar   ARG,OUT          6427                              
 TAG                        Dummy  6420     I(4)            4           scalar   ARG,IN           6427                              
 TO_PE                      Dummy  6420     I(4)            4           scalar   ARG,IN           6427                              

Page 276         Source Listing                  MPP_SEND_INT4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6429 
   6430     subroutine mpp_recv_int4_4d( get_data, get_len, from_pe, block, tag, request )
   6431 !a mpp_transmit with null arguments on the put side
   6432       integer, intent(in) :: get_len, from_pe
   6433       integer(i4_kind), intent(out) :: get_data(:,:,:,:)
   6434       logical, intent(in), optional :: block
   6435       integer, intent(in), optional :: tag
   6436       integer, intent(out), optional :: request
   6437 
   6438       integer(i4_kind) :: dummy(1,1,1,1)
   6439       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   6440     end subroutine mpp_recv_int4_4d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_recv_int4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6430     L(4)            4           scalar   ARG,IN           6439                              
 DUMMY                      Local  6438     I(4)            4     4     1        TGT              6439                              
 FROM_PE                    Dummy  6430     I(4)            4           scalar   ARG,IN           6439                              
 GET_DATA                   Dummy  6430     I(4)            4     4     1        ARG,OUT          6439                              
 GET_LEN                    Dummy  6430     I(4)            4           scalar   ARG,IN           6439                              
 MPP_RECV_INT4_4D           Subr   6430                                          PRIV                                               
 REQUEST                    Dummy  6430     I(4)            4           scalar   ARG,OUT          6439                              
 TAG                        Dummy  6430     I(4)            4           scalar   ARG,IN           6439                              

Page 277         Source Listing                  MPP_RECV_INT4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6441 
   6442     subroutine mpp_send_int4_4d( put_data, put_len, to_pe, tag, request )
   6443 !a mpp_transmit with null arguments on the get side
   6444       integer, intent(in) :: put_len, to_pe
   6445       integer(i4_kind), intent(in) :: put_data(:,:,:,:)
   6446       integer, intent(in), optional :: tag
   6447       integer, intent(out), optional :: request
   6448       integer(i4_kind) :: dummy(1,1,1,1)
   6449       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   6450     end subroutine mpp_send_int4_4d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_send_int4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  6448     I(4)            4     4     1        TGT              6449                              
 MPP_SEND_INT4_4D           Subr   6442                                          PRIV                                               
 PUT_DATA                   Dummy  6442     I(4)            4     4     1        ARG,IN           6449                              
 PUT_LEN                    Dummy  6442     I(4)            4           scalar   ARG,IN           6449                              
 REQUEST                    Dummy  6442     I(4)            4           scalar   ARG,OUT          6449                              
 TAG                        Dummy  6442     I(4)            4           scalar   ARG,IN           6449                              
 TO_PE                      Dummy  6442     I(4)            4           scalar   ARG,IN           6449                              

Page 278         Source Listing                  MPP_SEND_INT4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6451 
   6452     subroutine mpp_recv_int4_5d( get_data, get_len, from_pe, block, tag, request)
   6453 !a mpp_transmit with null arguments on the put side
   6454       integer, intent(in) :: get_len, from_pe
   6455       integer(i4_kind), intent(out) :: get_data(:,:,:,:,:)
   6456       logical, intent(in), optional :: block
   6457       integer, intent(in), optional :: tag
   6458       integer, intent(out), optional :: request
   6459 
   6460       integer(i4_kind) :: dummy(1,1,1,1,1)
   6461       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   6462     end subroutine mpp_recv_int4_5d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_recv_int4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6452     L(4)            4           scalar   ARG,IN           6461                              
 DUMMY                      Local  6460     I(4)            4     5     1        TGT              6461                              
 FROM_PE                    Dummy  6452     I(4)            4           scalar   ARG,IN           6461                              
 GET_DATA                   Dummy  6452     I(4)            4     5     1        ARG,OUT          6461                              
 GET_LEN                    Dummy  6452     I(4)            4           scalar   ARG,IN           6461                              
 MPP_RECV_INT4_5D           Subr   6452                                          PRIV                                               
 REQUEST                    Dummy  6452     I(4)            4           scalar   ARG,OUT          6461                              
 TAG                        Dummy  6452     I(4)            4           scalar   ARG,IN           6461                              

Page 279         Source Listing                  MPP_RECV_INT4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6463 
   6464     subroutine mpp_send_int4_5d( put_data, put_len, to_pe, tag, request )
   6465 !a mpp_transmit with null arguments on the get side
   6466       integer, intent(in) :: put_len, to_pe
   6467       integer(i4_kind), intent(in) :: put_data(:,:,:,:,:)
   6468       integer, intent(in), optional :: tag
   6469       integer, intent(out), optional :: request
   6470       integer(i4_kind) :: dummy(1,1,1,1,1)
   6471       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   6472     end subroutine mpp_send_int4_5d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_send_int4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  6470     I(4)            4     5     1        TGT              6471                              
 MPP_SEND_INT4_5D           Subr   6464                                          PRIV                                               
 PUT_DATA                   Dummy  6464     I(4)            4     5     1        ARG,IN           6471                              
 PUT_LEN                    Dummy  6464     I(4)            4           scalar   ARG,IN           6471                              
 REQUEST                    Dummy  6464     I(4)            4           scalar   ARG,OUT          6471                              
 TAG                        Dummy  6464     I(4)            4           scalar   ARG,IN           6471                              
 TO_PE                      Dummy  6464     I(4)            4           scalar   ARG,IN           6471                              

Page 280         Source Listing                  MPP_SEND_INT4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6473 
   6474 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6475 !                                                                             !
   6476 !                                MPP_BROADCAST                                !
   6477 !                                                                             !
   6478 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6479 
   6480     subroutine mpp_broadcast_int4_scalar( data, from_pe, pelist )
   6481       integer(i4_kind), intent(inout) :: data
   6482       integer, intent(in) :: from_pe
   6483       integer, intent(in), optional :: pelist(:)
   6484       integer(i4_kind) :: data1D(1)
   6485 
   6486       pointer( ptr, data1D )
   6487 
   6488       ptr = LOC(data)
   6489       call mpp_broadcast_int4( data1D, 1, from_pe, pelist )
   6490 
   6491       return
   6492     end subroutine mpp_broadcast_int4_scalar


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_broadcast_int4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  6480     I(4)            4           scalar   ARG,TGT,INOUT    6488                              
 DATA1D                     Local  6484     I(4)            4     1     1                         6489                              
 FROM_PE                    Dummy  6480     I(4)            4           scalar   ARG,IN           6489                              
 LOC                        Func   6488                                 scalar                    6488                              
 MPP_BROADCAST_INT4_SCALAR  Subr   6480                                          PRIV             3427,3495,3496                    
 PELIST                     Dummy  6480     I(4)            4     1     1        ARG,IN           6489                              
 PTR                        Local  6486     I(8)            8           scalar   PTR              6488                              

Page 281         Source Listing                  MPP_BROADCAST_INT4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6493 
   6494     subroutine mpp_broadcast_int4_2d( data, length, from_pe, pelist )
   6495 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   6496 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   6497 !backward compatible.
   6498       integer(i4_kind), intent(inout) :: data(:,:)
   6499       integer, intent(in) :: length, from_pe
   6500       integer, intent(in), optional :: pelist(:)
   6501       integer(i4_kind) :: data1D(length)
   6502 
   6503       pointer( ptr, data1D )
   6504       ptr = LOC(data)
   6505       call mpp_broadcast( data1D, length, from_pe, pelist )
   6506 
   6507       return
   6508     end subroutine mpp_broadcast_int4_2d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_broadcast_int4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  6494     I(4)            4     2     1        ARG,INOUT        6504                              
 DATA1D                     Local  6501     I(4)            4     1     0                         6505                              
 FROM_PE                    Dummy  6494     I(4)            4           scalar   ARG,IN           6505                              
 LENGTH                     Dummy  6494     I(4)            4           scalar   ARG,IN           6501,6505                         
 LOC                        Func   6504                                 scalar                    6504                              
 MPP_BROADCAST_INT4_2D      Subr   6494                                          PRIV                                               
 PELIST                     Dummy  6494     I(4)            4     1     1        ARG,IN           6505                              
 PTR                        Local  6503     I(8)            8           scalar   PTR              6504                              

Page 282         Source Listing                  MPP_BROADCAST_INT4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6509 
   6510     subroutine mpp_broadcast_int4_3d( data, length, from_pe, pelist )
   6511 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   6512 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   6513 !backward compatible.
   6514       integer(i4_kind), intent(inout) :: data(:,:,:)
   6515       integer, intent(in) :: length, from_pe
   6516       integer, intent(in), optional :: pelist(:)
   6517       integer(i4_kind) :: data1D(length)
   6518 
   6519       pointer( ptr, data1D )
   6520       ptr = LOC(data)
   6521       call mpp_broadcast( data1D, length, from_pe, pelist )
   6522 
   6523       return
   6524    end subroutine mpp_broadcast_int4_3d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_broadcast_int4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  6510     I(4)            4     3     1        ARG,INOUT        6520                              
 DATA1D                     Local  6517     I(4)            4     1     0                         6521                              
 FROM_PE                    Dummy  6510     I(4)            4           scalar   ARG,IN           6521                              
 LENGTH                     Dummy  6510     I(4)            4           scalar   ARG,IN           6517,6521                         
 LOC                        Func   6520                                 scalar                    6520                              
 MPP_BROADCAST_INT4_3D      Subr   6510                                          PRIV                                               
 PELIST                     Dummy  6510     I(4)            4     1     1        ARG,IN           6521                              
 PTR                        Local  6519     I(8)            8           scalar   PTR              6520                              

Page 283         Source Listing                  MPP_BROADCAST_INT4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6525 
   6526     subroutine mpp_broadcast_int4_4d( data, length, from_pe, pelist )
   6527 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   6528 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   6529 !backward compatible.
   6530       integer(i4_kind), intent(inout) :: data(:,:,:,:)
   6531       integer, intent(in) :: length, from_pe
   6532       integer, intent(in), optional :: pelist(:)
   6533       integer(i4_kind) :: data1D(length)
   6534 
   6535       pointer( ptr, data1D )
   6536       ptr = LOC(data)
   6537       call mpp_broadcast( data1D, length, from_pe, pelist )
   6538 
   6539       return
   6540     end subroutine mpp_broadcast_int4_4d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_broadcast_int4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  6526     I(4)            4     4     1        ARG,INOUT        6536                              
 DATA1D                     Local  6533     I(4)            4     1     0                         6537                              
 FROM_PE                    Dummy  6526     I(4)            4           scalar   ARG,IN           6537                              
 LENGTH                     Dummy  6526     I(4)            4           scalar   ARG,IN           6533,6537                         
 LOC                        Func   6536                                 scalar                    6536                              
 MPP_BROADCAST_INT4_4D      Subr   6526                                          PRIV                                               
 PELIST                     Dummy  6526     I(4)            4     1     1        ARG,IN           6537                              
 PTR                        Local  6535     I(8)            8           scalar   PTR              6536                              

Page 284         Source Listing                  MPP_BROADCAST_INT4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6541 
   6542     subroutine mpp_broadcast_int4_5d( data, length, from_pe, pelist )
   6543 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   6544 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   6545 !backward compatible.
   6546       integer(i4_kind), intent(inout) :: data(:,:,:,:,:)
   6547       integer, intent(in) :: length, from_pe
   6548       integer, intent(in), optional :: pelist(:)
   6549       integer(i4_kind) :: data1D(length)
   6550 
   6551       pointer( ptr, data1D )
   6552       ptr = LOC(data)
   6553       call mpp_broadcast( data1D, length, from_pe, pelist )
   6554 
   6555       return
   6556     end subroutine mpp_broadcast_int4_5d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_broadcast_int4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  6542     I(4)            4     5     1        ARG,INOUT        6552                              
 DATA1D                     Local  6549     I(4)            4     1     0                         6553                              
 FROM_PE                    Dummy  6542     I(4)            4           scalar   ARG,IN           6553                              
 LENGTH                     Dummy  6542     I(4)            4           scalar   ARG,IN           6549,6553                         
 LOC                        Func   6552                                 scalar                    6552                              
 MPP_BROADCAST_INT4_5D      Subr   6542                                          PRIV                                               
 PELIST                     Dummy  6542     I(4)            4     1     1        ARG,IN           6553                              
 PTR                        Local  6551     I(8)            8           scalar   PTR              6552                              

Page 285         Source Listing                  MPP_BROADCAST_INT4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6557 # 201 "../mpp/include/mpp_transmit_mpi.h" 2 
   6558 # 740 "../mpp/include/mpp_comm_mpi.inc" 2 
   6559 
   6560 
   6561 
   6562 
   6563 
   6564 
   6565 
   6566 
   6567 
   6568 
   6569 
   6570 
   6571 
   6572 
   6573 
   6574 
   6575 
   6576 
   6577 
   6578 
   6579 
   6580 
   6581 
   6582 
   6583 
   6584 
   6585 
   6586 
   6587 
   6588 
   6589 
   6590 
   6591 
   6592 
   6593 
   6594 
   6595 
   6596 
   6597 
   6598 
   6599 
   6600 
   6601 
   6602 
   6603 
   6604 
   6605 
   6606 
   6607 
   6608 
   6609 
   6610 
   6611 
   6612 
   6613 

Page 286         Source Listing                  MPP_BROADCAST_INT4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   6614 # 1 "../mpp/include/mpp_transmit_mpi.h" 1 
   6615 !***********************************************************************
   6616 !*                   GNU Lesser General Public License
   6617 !*
   6618 !* This file is part of the GFDL Flexible Modeling System (FMS).
   6619 !*
   6620 !* FMS is free software: you can redistribute it and/or modify it under
   6621 !* the terms of the GNU Lesser General Public License as published by
   6622 !* the Free Software Foundation, either version 3 of the License, or (at
   6623 !* your option) any later version.
   6624 !*
   6625 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   6626 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   6627 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   6628 !* for more details.
   6629 !*
   6630 !* You should have received a copy of the GNU Lesser General Public
   6631 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   6632 !***********************************************************************
   6633 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6634 !                                                                             !
   6635 !                                  MPP_TRANSMIT                               !
   6636 !                                                                             !
   6637 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6638 
   6639     subroutine mpp_transmit_logical8( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, recv_request, send_r
   6639 equest )
   6640 !a message-passing routine intended to be reminiscent equally of both MPI and SHMEM
   6641 
   6642 !put_data and get_data are contiguous logical(l8_kind) arrays
   6643 
   6644 !at each call, your put_data array is put to   to_pe's get_data
   6645 !              your get_data array is got from from_pe's put_data
   6646 !i.e we assume that typically (e.g updating halo regions) each PE performs a put _and_ a get
   6647 
   6648 !special PE designations:
   6649 !      NULL_PE: to disable a put or a get (e.g at boundaries)
   6650 !      ANY_PE:  if remote PE for the put or get is to be unspecific
   6651 !      ALL_PES: broadcast and collect operations (collect not yet implemented)
   6652 
   6653 !ideally we would not pass length, but this f77-style call performs better (arrays passed by address, not descriptor)
   6654 !further, this permits <length> contiguous words from an array of any rank to be passed (avoiding f90 rank conformance check
   6654 )
   6655 
   6656 !caller is responsible for completion checks (mpp_sync_self) before and after
   6657 
   6658       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   6659       logical(l8_kind), intent(in)  :: put_data(*)
   6660       logical(l8_kind), intent(out) :: get_data(*)
   6661       logical, intent(in),  optional :: block
   6662       integer, intent(in),  optional :: tag
   6663       integer, intent(out), optional :: recv_request, send_request
   6664       logical                       :: block_comm
   6665       integer                       :: i
   6666       logical(l8_kind), allocatable, save  :: local_data(:) !local copy used by non-parallel code (no SHMEM or MPI)
   6667       integer                       :: comm_tag
   6668       integer                       :: rsize

Page 287         Source Listing                  MPP_TRANSMIT_LOGICAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   6669 
   6670       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_TRANSMIT: You must first call mpp_init.' )
   6671       if( to_pe.EQ.NULL_PE .AND. from_pe.EQ.NULL_PE )return
   6672 
   6673       block_comm = .true.
   6674       if(PRESENT(block)) block_comm = block
   6675 
   6676       if( debug )then
   6677           call system_clock_mpi(tick)
   6678           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   6679                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT begin: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_
   6679 len
   6680       end if
   6681 
   6682       comm_tag = DEFAULT_TAG
   6683       if(present(tag)) comm_tag = tag
   6684 
   6685 !do put first and then get
   6686       if( to_pe.GE.0 .AND. to_pe.LT.npes )then
   6687 !use non-blocking sends
   6688           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   6689 !z1l: truly non-blocking send.
   6690 !          if( request(to_pe).NE.MPI_REQUEST_NULL )then !only one message from pe->to_pe in queue
   6691 !              if( debug )write( stderr(),* )'PE waiting for sending', pe, to_pe
   6692 !              call MPI_WAIT( request(to_pe), stat, error )
   6693 !          end if
   6694           if(present(send_request)) then
   6695              call MPI_ISEND( put_data, put_len, MPI_INTEGER8, to_pe, comm_tag, mpp_comm_private, send_request, error)
   6696           else
   6697              cur_send_request = cur_send_request + 1
   6698              if( cur_send_request > max_request ) call mpp_error(FATAL, &
   6699                 "MPP_TRANSMIT: cur_send_request is greater than max_request, increase mpp_nml request_multiply")
   6700              call MPI_ISEND( put_data, put_len, MPI_INTEGER8, to_pe, comm_tag, mpp_comm_private, &
   6701                              request_send(cur_send_request), error)
   6702           endif
   6703           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_SEND, put_len*8 )
   6704       else if( to_pe.EQ.ALL_PES )then !this is a broadcast from from_pe
   6705           if( from_pe.LT.0 .OR. from_pe.GE.npes )call mpp_error( FATAL, 'MPP_TRANSMIT: broadcasting from invalid PE.' )
   6706           if( put_len.GT.get_len )call mpp_error( FATAL, 'MPP_TRANSMIT: size mismatch between put_data and get_data.' )
   6707           if( pe.EQ.from_pe )then
   6708               if( LOC(get_data).NE.LOC(put_data) )then
   6709 !dir$ IVDEP
   6710                   do i = 1,get_len
   6711                      get_data(i) = put_data(i)
   6712                   end do
   6713               end if
   6714           end if
   6715           call mpp_broadcast( get_data, get_len, from_pe )
   6716           return
   6717       else if( to_pe.EQ.ANY_PE )then !we don't have a destination to do puts to, so only do gets
   6718 !...but you cannot have a pure get with MPI
   6719           call mpp_error( FATAL, 'MPP_TRANSMIT: you cannot transmit to ANY_PE using MPI.' )
   6720       else if( to_pe.NE.NULL_PE )then  !no other valid cases except NULL_PE
   6721           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid to_pe.' )
   6722       end if
   6723 
   6724 !do the get

Page 288         Source Listing                  MPP_TRANSMIT_LOGICAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   6725       if( from_pe.GE.0 .AND. from_pe.LT.npes )then
   6726 !receive from from_pe
   6727           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   6728           if( block_comm ) then
   6729              call MPI_RECV( get_data, get_len, MPI_INTEGER8, from_pe, comm_tag, mpp_comm_private, stat, error )
   6730              call MPI_GET_COUNT( stat, MPI_INTEGER8, rsize, error)
   6731              if(rsize .NE. get_len) then
   6732                 print*, "rsize, get_len=", rsize, get_len, mpp_pe(), from_pe
   6733                 call mpp_error(FATAL, "MPP_TRANSMIT: get_len does not match size of data received")
   6734              endif
   6735           else
   6736 !             if( request_recv(from_pe).NE.MPI_REQUEST_NULL )then !only one message from from_pe->pe in queue
   6737 !              if( debug )write( stderr(),* )'PE waiting for receiving', pe, from_pe
   6738 !                call MPI_WAIT( request_recv(from_pe), stat, error )
   6739 !             end if
   6740              if(PRESENT(recv_request)) then
   6741                 call MPI_IRECV( get_data, get_len, MPI_INTEGER8, from_pe, comm_tag, mpp_comm_private, &
   6742                   recv_request, error )
   6743              else
   6744                 cur_recv_request = cur_recv_request + 1
   6745                 if( cur_recv_request > max_request ) call mpp_error(FATAL, &
   6746                 "MPP_TRANSMIT: cur_recv_request is greater than max_request, increase mpp_nml request_multiply")
   6747                 call MPI_IRECV( get_data, get_len, MPI_INTEGER8, from_pe, comm_tag, mpp_comm_private, &
   6748                      request_recv(cur_recv_request), error )
   6749                 size_recv(cur_recv_request) = get_len
   6750                 type_recv(cur_recv_request) = MPI_INTEGER8
   6751              endif
   6752           endif
   6753           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*8 )
   6754       else if( from_pe.EQ.ANY_PE )then
   6755 !receive from MPI_ANY_SOURCE
   6756           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   6757           call MPI_RECV( get_data, get_len, MPI_INTEGER8, MPI_ANY_SOURCE, comm_tag, mpp_comm_private, stat, error )
   6758           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*8 )
   6759       else if( from_pe.EQ.ALL_PES )then
   6760           call mpp_error( FATAL, 'MPP_TRANSMIT: from_pe=ALL_PES has ambiguous meaning, and hence is not implemented.' )
   6761       else if( from_pe.NE.NULL_PE )then !only remaining valid choice is NULL_PE
   6762           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid from_pe.' )
   6763       end if
   6764 
   6765       if( debug )then
   6766           call system_clock_mpi(tick)
   6767           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   6768                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT end: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_le
   6768 n
   6769       end if
   6770       return
   6771     end subroutine mpp_transmit_logical8

Page 289         Source Listing                  MPP_TRANSMIT_LOGICAL8
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_transmit_logical8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6639     L(4)            4           scalar   ARG,IN           6674                              
 BLOCK_COMM                 Local  6664     L(4)            4           scalar                    6673,6674,6728                    
 COMM_TAG                   Local  6667     I(4)            4           scalar                    6682,6683,6695,6700,6729,6741,6747
                                                                                                  ,6757                             
 FROM_PE                    Dummy  6639     I(4)            4           scalar   ARG,IN           6671,6679,6705,6707,6715,6725,6729
                                                                                                  ,6732,6741,6747,6754,6759,6761,676
                                                                                                  8                                 
 GET_DATA                   Dummy  6639     L(8)            8     1     0        ARG,TGT,OUT      6708,6711,6715,6729,6741,6747,6757
 GET_LEN                    Dummy  6639     I(4)            4           scalar   ARG,IN           6679,6706,6710,6715,6729,6731,6732
                                                                                                  ,6741,6747,6749,6753,6757,6758,676
                                                                                                  8                                 
 I                          Local  6665     I(4)            4           scalar                    6710,6711                         
 L8_KIND                    Param  6659     I(4)            4           scalar   PRIV             6659,6660,6666,6783,6845,6846,6852
                                                                                                  ,6869,6870,6874,6889,6890,6894,690
                                                                                                  9,6910,6914,6929,6930,6934,6954,69
                                                                                                  59,6966,6969,6976,6983,6984,6996,7
                                                                                                  001,7002,7014,7019,7026,7029,7036,
                                                                                                  7041,7048,7051,7058,7063,7070,7073
                                                                                                  ,7080,7085,7092,7095,7106,7109,712
                                                                                                  3,7126,7139,7142,7155,7158,7171,71
                                                                                                  74,10654,10655,10681,10682,10712,1
                                                                                                  0713,11557                        
 LOC                        Func   6708                                 scalar                    6708                              
 LOCAL_DATA                 Local  6666     L(8)            8     1     1        ALC,SAVE                                           
 MPI_IRECV                  Subr   6741                                                           6741,6747                         
 MPI_ISEND                  Subr   6695                                                           6695,6700                         
 MPI_RECV                   Subr   6729                                                           6729,6757                         
 MPP_TRANSMIT_LOGICAL8      Subr   6639                                          PRIV             6860,6880,6900,6920,6940,6960,6970
                                                                                                  ,6989,7007                        
 PRESENT                    Func   6674                                 scalar                    6674,6683,6694,6740               
 PUT_DATA                   Dummy  6639     L(8)            8     1     0        ARG,TGT,IN       6695,6700,6708,6711               
 PUT_LEN                    Dummy  6639     I(4)            4           scalar   ARG,IN           6679,6695,6700,6703,6706,6768     
 RECV_REQUEST               Dummy  6639     I(4)            4           scalar   ARG,OUT          6740,6742                         
 RSIZE                      Local  6668     I(4)            4           scalar                    6730,6731,6732                    
 SEND_REQUEST               Dummy  6639     I(4)            4           scalar   ARG,OUT          6694,6695                         
 TAG                        Dummy  6639     I(4)            4           scalar   ARG,IN           6683                              
 TO_PE                      Dummy  6639     I(4)            4           scalar   ARG,IN           6671,6679,6686,6695,6700,6704,6717
                                                                                                  ,6720,6768                        

Page 290         Source Listing                  MPP_TRANSMIT_LOGICAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   6772 
   6773 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6774 !                                                                             !
   6775 !                                MPP_BROADCAST                                !
   6776 !                                                                             !
   6777 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6778 
   6779     subroutine mpp_broadcast_logical8( data, length, from_pe, pelist )
   6780 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   6781 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   6782 !backward compatible.
   6783       logical(l8_kind), intent(inout) :: data(*)
   6784       integer, intent(in) :: length, from_pe
   6785       integer, intent(in), optional :: pelist(:)
   6786       integer :: n, i, from_rank, stdout_unit
   6787 
   6788       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_BROADCAST: You must first call mpp_init.' )
   6789       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   6790 
   6791       if( debug )then
   6792           call system_clock_mpi(tick)
   6793           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   6794                'T=',tick, ' PE=',pe, ' MPP_BROADCAST begin: from_pe, length=', from_pe, length
   6795       end if
   6796 
   6797       if( .NOT.ANY(from_pe.EQ.peset(current_peset_num)%list) ) &
   6798            call mpp_error( FATAL, 'MPP_BROADCAST: broadcasting from invalid PE.' )
   6799 
   6800       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   6801 ! find the rank of from_pe in the pelist.
   6802       do i = 1, mpp_npes()
   6803          if(peset(n)%list(i) == from_pe) then
   6804              from_rank = i - 1
   6805              exit
   6806          endif
   6807       enddo
   6808       if( mpp_npes().GT.1 )call MPI_BCAST( data, length, MPI_INTEGER8, from_rank, peset(n)%id, error )
   6809       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_BROADCAST, length*8 )
   6810       return
   6811     end subroutine mpp_broadcast_logical8

Page 291         Source Listing                  MPP_BROADCAST_LOGICAL8
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_broadcast_logical8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   6797                                 scalar                    6797                              
 DATA                       Dummy  6779     L(8)            8     1     0        ARG,INOUT        6808                              
 FROM_PE                    Dummy  6779     I(4)            4           scalar   ARG,IN           6794,6797,6803                    
 FROM_RANK                  Local  6786     I(4)            4           scalar                    6804,6808                         
 I                          Local  6786     I(4)            4           scalar                    6802,6803,6804                    
 LENGTH                     Dummy  6779     I(4)            4           scalar   ARG,IN           6794,6808,6809                    
 MPI_BCAST                  Subr   6808                                                           6808                              
 MPP_BROADCAST_LOGICAL8     Subr   6779                                          PRIV             6715,7114,7130,7146,7162,7178     
 N                          Local  6786     I(4)            4           scalar                    6789,6803,6808                    
 PELIST                     Dummy  6779     I(4)            4     1     1        ARG,IN           6789                              
 STDOUT_UNIT                Local  6786     I(4)            4           scalar                    6793                              

Page 292         Source Listing                  MPP_BROADCAST_LOGICAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   6812 
   6813 !####################################################################################
   6814 # 1 "../mpp/include/mpp_transmit.inc" 1 
   6815 ! -*-f90-*-
   6816 
   6817 !***********************************************************************
   6818 !*                   GNU Lesser General Public License
   6819 !*
   6820 !* This file is part of the GFDL Flexible Modeling System (FMS).
   6821 !*
   6822 !* FMS is free software: you can redistribute it and/or modify it under
   6823 !* the terms of the GNU Lesser General Public License as published by
   6824 !* the Free Software Foundation, either version 3 of the License, or (at
   6825 !* your option) any later version.
   6826 !*
   6827 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   6828 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   6829 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   6830 !* for more details.
   6831 !*
   6832 !* You should have received a copy of the GNU Lesser General Public
   6833 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   6834 !***********************************************************************
   6835 
   6836 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6837 !                                                                             !
   6838 !                                  MPP_TRANSMIT                               !
   6839 !                                                                             !
   6840 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6841 
   6842     subroutine mpp_transmit_logical8_scalar( put_data, to_pe, get_data, from_pe, plen, glen, block, tag, &
   6843                                     recv_request, send_request)
   6844       integer, intent(in) :: to_pe, from_pe
   6845       logical(l8_kind), intent(in)  :: put_data
   6846       logical(l8_kind), intent(out) :: get_data
   6847       integer, optional,  intent(in) :: plen, glen
   6848       logical, intent(in),  optional :: block
   6849       integer, intent(in),  optional :: tag
   6850       integer, intent(out), optional :: recv_request, send_request
   6851       integer                       :: put_len, get_len
   6852       logical(l8_kind) :: put_data1D(1), get_data1D(1)
   6853       pointer( ptrp, put_data1D )
   6854       pointer( ptrg, get_data1D )
   6855 
   6856       ptrp = LOC(put_data)
   6857       ptrg = LOC(get_data)
   6858       put_len=1; if(PRESENT(plen))put_len=plen
   6859       get_len=1; if(PRESENT(glen))get_len=glen
   6860       call mpp_transmit_logical8 ( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   6861                            recv_request=recv_request, send_request=send_request )
   6862 
   6863       return
   6864     end subroutine mpp_transmit_logical8_scalar

Page 293         Source Listing                  MPP_TRANSMIT_LOGICAL8_SCALAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit.inc



ENTRY POINTS

  Name                                                
                                                      
 mpp_mod_mp_mpp_transmit_logical8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6842     L(4)            4           scalar   ARG,IN           6860                              
 FROM_PE                    Dummy  6842     I(4)            4           scalar   ARG,IN           6860                              
 GET_DATA                   Dummy  6842     L(8)            8           scalar   ARG,TGT,OUT      6857                              
 GET_DATA1D                 Local  6852     L(8)            8     1     1                         6860                              
 GET_LEN                    Local  6851     I(4)            4           scalar                    6859,6860                         
 GLEN                       Dummy  6842     I(4)            4           scalar   ARG,IN           6859                              
 LOC                        Func   6856                                 scalar                    6856,6857                         
 MPP_TRANSMIT_LOGICAL8_SCAL                                                                                                         
 AR                         Subr   6842                                          PRIV                                               
 PLEN                       Dummy  6842     I(4)            4           scalar   ARG,IN           6858                              
 PRESENT                    Func   6858                                 scalar                    6858,6859                         
 PTRG                       Local  6854     I(8)            8           scalar   PTR              6857                              
 PTRP                       Local  6853     I(8)            8           scalar   PTR              6856                              
 PUT_DATA                   Dummy  6842     L(8)            8           scalar   ARG,TGT,IN       6856                              
 PUT_DATA1D                 Local  6852     L(8)            8     1     1                         6860                              
 PUT_LEN                    Local  6851     I(4)            4           scalar                    6858,6860                         
 RECV_REQUEST               Dummy  6843     I(4)            4           scalar   ARG,OUT          6861                              
 SEND_REQUEST               Dummy  6843     I(4)            4           scalar   ARG,OUT          6861                              
 TAG                        Dummy  6842     I(4)            4           scalar   ARG,IN           6860                              
 TO_PE                      Dummy  6842     I(4)            4           scalar   ARG,IN           6860                              

Page 294         Source Listing                  MPP_TRANSMIT_LOGICAL8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6865 
   6866     subroutine mpp_transmit_logical8_2d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   6867                                 recv_request, send_request )
   6868       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   6869       logical(l8_kind), intent(in)  :: put_data(:,:)
   6870       logical(l8_kind), intent(out) :: get_data(:,:)
   6871       logical, intent(in), optional :: block
   6872       integer, intent(in), optional :: tag
   6873       integer, intent(out), optional :: recv_request, send_request
   6874       logical(l8_kind) :: put_data1D(put_len), get_data1D(get_len)
   6875 
   6876       pointer( ptrp, put_data1D )
   6877       pointer( ptrg, get_data1D )
   6878       ptrp = LOC(put_data)
   6879       ptrg = LOC(get_data)
   6880       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   6881                          recv_request=recv_request, send_request=send_request )
   6882 
   6883       return
   6884     end subroutine mpp_transmit_logical8_2d


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_transmit_logical8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6866     L(4)            4           scalar   ARG,IN           6880                              
 FROM_PE                    Dummy  6866     I(4)            4           scalar   ARG,IN           6880                              
 GET_DATA                   Dummy  6866     L(8)            8     2     1        ARG,OUT          6879                              
 GET_DATA1D                 Local  6874     L(8)            8     1     0                         6880                              
 GET_LEN                    Dummy  6866     I(4)            4           scalar   ARG,IN           6874,6880                         
 LOC                        Func   6878                                 scalar                    6878,6879                         
 MPP_TRANSMIT_LOGICAL8_2D   Subr   6866                                          PRIV             7020,7030                         
 PTRG                       Local  6877     I(8)            8           scalar   PTR              6879                              
 PTRP                       Local  6876     I(8)            8           scalar   PTR              6878                              
 PUT_DATA                   Dummy  6866     L(8)            8     2     1        ARG,IN           6878                              
 PUT_DATA1D                 Local  6874     L(8)            8     1     0                         6880                              
 PUT_LEN                    Dummy  6866     I(4)            4           scalar   ARG,IN           6874,6880                         
 RECV_REQUEST               Dummy  6867     I(4)            4           scalar   ARG,OUT          6881                              
 SEND_REQUEST               Dummy  6867     I(4)            4           scalar   ARG,OUT          6881                              
 TAG                        Dummy  6866     I(4)            4           scalar   ARG,IN           6880                              
 TO_PE                      Dummy  6866     I(4)            4           scalar   ARG,IN           6880                              

Page 295         Source Listing                  MPP_TRANSMIT_LOGICAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6885 
   6886     subroutine mpp_transmit_logical8_3d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   6887                                 recv_request, send_request )
   6888       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   6889       logical(l8_kind), intent(in)  :: put_data(:,:,:)
   6890       logical(l8_kind), intent(out) :: get_data(:,:,:)
   6891       logical, intent(in), optional :: block
   6892       integer, intent(in), optional :: tag
   6893       integer, intent(out), optional :: recv_request, send_request
   6894       logical(l8_kind) :: put_data1D(put_len), get_data1D(get_len)
   6895 
   6896       pointer( ptrp, put_data1D )
   6897       pointer( ptrg, get_data1D )
   6898       ptrp = LOC(put_data)
   6899       ptrg = LOC(get_data)
   6900       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   6901                          recv_request=recv_request, send_request=send_request )
   6902 
   6903       return
   6904     end subroutine mpp_transmit_logical8_3d


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_transmit_logical8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6886     L(4)            4           scalar   ARG,IN           6900                              
 FROM_PE                    Dummy  6886     I(4)            4           scalar   ARG,IN           6900                              
 GET_DATA                   Dummy  6886     L(8)            8     3     1        ARG,OUT          6899                              
 GET_DATA1D                 Local  6894     L(8)            8     1     0                         6900                              
 GET_LEN                    Dummy  6886     I(4)            4           scalar   ARG,IN           6894,6900                         
 LOC                        Func   6898                                 scalar                    6898,6899                         
 MPP_TRANSMIT_LOGICAL8_3D   Subr   6886                                          PRIV             7042,7052                         
 PTRG                       Local  6897     I(8)            8           scalar   PTR              6899                              
 PTRP                       Local  6896     I(8)            8           scalar   PTR              6898                              
 PUT_DATA                   Dummy  6886     L(8)            8     3     1        ARG,IN           6898                              
 PUT_DATA1D                 Local  6894     L(8)            8     1     0                         6900                              
 PUT_LEN                    Dummy  6886     I(4)            4           scalar   ARG,IN           6894,6900                         
 RECV_REQUEST               Dummy  6887     I(4)            4           scalar   ARG,OUT          6901                              
 SEND_REQUEST               Dummy  6887     I(4)            4           scalar   ARG,OUT          6901                              
 TAG                        Dummy  6886     I(4)            4           scalar   ARG,IN           6900                              
 TO_PE                      Dummy  6886     I(4)            4           scalar   ARG,IN           6900                              

Page 296         Source Listing                  MPP_TRANSMIT_LOGICAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6905 
   6906     subroutine mpp_transmit_logical8_4d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   6907                                 recv_request, send_request )
   6908       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   6909       logical(l8_kind), intent(in)  :: put_data(:,:,:,:)
   6910       logical(l8_kind), intent(out) :: get_data(:,:,:,:)
   6911       logical, intent(in), optional :: block
   6912       integer, intent(in), optional :: tag
   6913       integer, intent(out), optional :: recv_request, send_request
   6914       logical(l8_kind) :: put_data1D(put_len), get_data1D(get_len)
   6915 
   6916       pointer( ptrp, put_data1D )
   6917       pointer( ptrg, get_data1D )
   6918       ptrp = LOC(put_data)
   6919       ptrg = LOC(get_data)
   6920       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   6921                          recv_request=recv_request, send_request=send_request )
   6922 
   6923       return
   6924     end subroutine mpp_transmit_logical8_4d


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_transmit_logical8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6906     L(4)            4           scalar   ARG,IN           6920                              
 FROM_PE                    Dummy  6906     I(4)            4           scalar   ARG,IN           6920                              
 GET_DATA                   Dummy  6906     L(8)            8     4     1        ARG,OUT          6919                              
 GET_DATA1D                 Local  6914     L(8)            8     1     0                         6920                              
 GET_LEN                    Dummy  6906     I(4)            4           scalar   ARG,IN           6914,6920                         
 LOC                        Func   6918                                 scalar                    6918,6919                         
 MPP_TRANSMIT_LOGICAL8_4D   Subr   6906                                          PRIV             7064,7074                         
 PTRG                       Local  6917     I(8)            8           scalar   PTR              6919                              
 PTRP                       Local  6916     I(8)            8           scalar   PTR              6918                              
 PUT_DATA                   Dummy  6906     L(8)            8     4     1        ARG,IN           6918                              
 PUT_DATA1D                 Local  6914     L(8)            8     1     0                         6920                              
 PUT_LEN                    Dummy  6906     I(4)            4           scalar   ARG,IN           6914,6920                         
 RECV_REQUEST               Dummy  6907     I(4)            4           scalar   ARG,OUT          6921                              
 SEND_REQUEST               Dummy  6907     I(4)            4           scalar   ARG,OUT          6921                              
 TAG                        Dummy  6906     I(4)            4           scalar   ARG,IN           6920                              
 TO_PE                      Dummy  6906     I(4)            4           scalar   ARG,IN           6920                              

Page 297         Source Listing                  MPP_TRANSMIT_LOGICAL8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6925 
   6926     subroutine mpp_transmit_logical8_5d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   6927                                 recv_request, send_request )
   6928       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   6929       logical(l8_kind), intent(in)  :: put_data(:,:,:,:,:)
   6930       logical(l8_kind), intent(out) :: get_data(:,:,:,:,:)
   6931       logical, intent(in), optional :: block
   6932       integer, intent(in), optional :: tag
   6933       integer, intent(out), optional :: recv_request, send_request
   6934       logical(l8_kind) :: put_data1D(put_len), get_data1D(get_len)
   6935 
   6936       pointer( ptrp, put_data1D )
   6937       pointer( ptrg, get_data1D )
   6938       ptrp = LOC(put_data)
   6939       ptrg = LOC(get_data)
   6940       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   6941                          recv_request=recv_request, send_request=send_request )
   6942 
   6943       return
   6944     end subroutine mpp_transmit_logical8_5d


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_transmit_logical8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6926     L(4)            4           scalar   ARG,IN           6940                              
 FROM_PE                    Dummy  6926     I(4)            4           scalar   ARG,IN           6940                              
 GET_DATA                   Dummy  6926     L(8)            8     5     1        ARG,OUT          6939                              
 GET_DATA1D                 Local  6934     L(8)            8     1     0                         6940                              
 GET_LEN                    Dummy  6926     I(4)            4           scalar   ARG,IN           6934,6940                         
 LOC                        Func   6938                                 scalar                    6938,6939                         
 MPP_TRANSMIT_LOGICAL8_5D   Subr   6926                                          PRIV             7086,7096                         
 PTRG                       Local  6937     I(8)            8           scalar   PTR              6939                              
 PTRP                       Local  6936     I(8)            8           scalar   PTR              6938                              
 PUT_DATA                   Dummy  6926     L(8)            8     5     1        ARG,IN           6938                              
 PUT_DATA1D                 Local  6934     L(8)            8     1     0                         6940                              
 PUT_LEN                    Dummy  6926     I(4)            4           scalar   ARG,IN           6934,6940                         
 RECV_REQUEST               Dummy  6927     I(4)            4           scalar   ARG,OUT          6941                              
 SEND_REQUEST               Dummy  6927     I(4)            4           scalar   ARG,OUT          6941                              
 TAG                        Dummy  6926     I(4)            4           scalar   ARG,IN           6940                              
 TO_PE                      Dummy  6926     I(4)            4           scalar   ARG,IN           6940                              

Page 298         Source Listing                  MPP_TRANSMIT_LOGICAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6945 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6946 !                                                                             !
   6947 !                              MPP_SEND and RECV                              !
   6948 !                                                                             !
   6949 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6950 
   6951     subroutine mpp_recv_logical8( get_data, get_len, from_pe, block, tag, request )
   6952 !a mpp_transmit with null arguments on the put side
   6953       integer, intent(in) :: get_len, from_pe
   6954       logical(l8_kind), intent(out) :: get_data(*)
   6955       logical, intent(in), optional :: block
   6956       integer, intent(in), optional :: tag
   6957       integer, intent(out), optional :: request
   6958 
   6959       logical(l8_kind) :: dummy(1)
   6960       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   6961     end subroutine mpp_recv_logical8


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_recv_logical8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6951     L(4)            4           scalar   ARG,IN           6960                              
 DUMMY                      Local  6959     L(8)            8     1     1                         6960                              
 FROM_PE                    Dummy  6951     I(4)            4           scalar   ARG,IN           6960                              
 GET_DATA                   Dummy  6951     L(8)            8     1     0        ARG,OUT          6960                              
 GET_LEN                    Dummy  6951     I(4)            4           scalar   ARG,IN           6960                              
 MPP_RECV_LOGICAL8          Subr   6951                                          PRIV                                               
 REQUEST                    Dummy  6951     I(4)            4           scalar   ARG,OUT          6960                              
 TAG                        Dummy  6951     I(4)            4           scalar   ARG,IN           6960                              

Page 299         Source Listing                  MPP_RECV_LOGICAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6962 
   6963     subroutine mpp_send_logical8( put_data, put_len, to_pe, tag, request )
   6964 !a mpp_transmit with null arguments on the get side
   6965       integer, intent(in) :: put_len, to_pe
   6966       logical(l8_kind), intent(in) :: put_data(*)
   6967       integer, intent(in), optional :: tag
   6968       integer, intent(out), optional :: request
   6969       logical(l8_kind) :: dummy(1)
   6970       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag=tag, send_request=request )
   6971     end subroutine mpp_send_logical8


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_send_logical8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  6969     L(8)            8     1     1                         6970                              
 MPP_SEND_LOGICAL8          Subr   6963                                          PRIV                                               
 PUT_DATA                   Dummy  6963     L(8)            8     1     0        ARG,IN           6970                              
 PUT_LEN                    Dummy  6963     I(4)            4           scalar   ARG,IN           6970                              
 REQUEST                    Dummy  6963     I(4)            4           scalar   ARG,OUT          6970                              
 TAG                        Dummy  6963     I(4)            4           scalar   ARG,IN           6970                              
 TO_PE                      Dummy  6963     I(4)            4           scalar   ARG,IN           6970                              

Page 300         Source Listing                  MPP_SEND_LOGICAL8
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6972 
   6973     subroutine mpp_recv_logical8_scalar( get_data, from_pe, glen, block, tag, request )
   6974 !a mpp_transmit with null arguments on the put side
   6975       integer, intent(in) :: from_pe
   6976       logical(l8_kind), intent(out) :: get_data
   6977       logical, intent(in), optional :: block
   6978       integer, intent(in), optional :: tag
   6979       integer, intent(out), optional :: request
   6980 
   6981       integer, optional, intent(in) :: glen
   6982       integer                       :: get_len
   6983       logical(l8_kind) :: get_data1D(1)
   6984       logical(l8_kind) :: dummy(1)
   6985 
   6986       pointer( ptr, get_data1D )
   6987       ptr = LOC(get_data)
   6988       get_len=1; if(PRESENT(glen))get_len=glen
   6989       call mpp_transmit( dummy, 1, NULL_PE, get_data1D, get_len, from_pe, block, tag, recv_request=request )
   6990 
   6991     end subroutine mpp_recv_logical8_scalar


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_recv_logical8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  6973     L(4)            4           scalar   ARG,IN           6989                              
 DUMMY                      Local  6984     L(8)            8     1     1                         6989                              
 FROM_PE                    Dummy  6973     I(4)            4           scalar   ARG,IN           6989                              
 GET_DATA                   Dummy  6973     L(8)            8           scalar   ARG,TGT,OUT      6987                              
 GET_DATA1D                 Local  6983     L(8)            8     1     1                         6989                              
 GET_LEN                    Local  6982     I(4)            4           scalar                    6988,6989                         
 GLEN                       Dummy  6973     I(4)            4           scalar   ARG,IN           6988                              
 LOC                        Func   6987                                 scalar                    6987                              
 MPP_RECV_LOGICAL8_SCALAR   Subr   6973                                          PRIV                                               
 PRESENT                    Func   6988                                 scalar                    6988                              
 PTR                        Local  6986     I(8)            8           scalar   PTR              6987                              
 REQUEST                    Dummy  6973     I(4)            4           scalar   ARG,OUT          6989                              
 TAG                        Dummy  6973     I(4)            4           scalar   ARG,IN           6989                              

Page 301         Source Listing                  MPP_RECV_LOGICAL8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   6992 
   6993     subroutine mpp_send_logical8_scalar( put_data, to_pe, plen, tag, request)
   6994 !a mpp_transmit with null arguments on the get side
   6995       integer, intent(in) :: to_pe
   6996       logical(l8_kind), intent(in) :: put_data
   6997       integer, optional, intent(in) :: plen
   6998       integer, intent(in), optional :: tag
   6999       integer, intent(out), optional :: request
   7000       integer                       :: put_len
   7001       logical(l8_kind) :: put_data1D(1)
   7002       logical(l8_kind) :: dummy(1)
   7003 
   7004       pointer( ptr, put_data1D )
   7005       ptr = LOC(put_data)
   7006       put_len=1; if(PRESENT(plen))put_len=plen
   7007       call mpp_transmit( put_data1D, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   7008 
   7009     end subroutine mpp_send_logical8_scalar


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_send_logical8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7002     L(8)            8     1     1                         7007                              
 LOC                        Func   7005                                 scalar                    7005                              
 MPP_SEND_LOGICAL8_SCALAR   Subr   6993                                          PRIV                                               
 PLEN                       Dummy  6993     I(4)            4           scalar   ARG,IN           7006                              
 PRESENT                    Func   7006                                 scalar                    7006                              
 PTR                        Local  7004     I(8)            8           scalar   PTR              7005                              
 PUT_DATA                   Dummy  6993     L(8)            8           scalar   ARG,TGT,IN       7005                              
 PUT_DATA1D                 Local  7001     L(8)            8     1     1                         7007                              
 PUT_LEN                    Local  7000     I(4)            4           scalar                    7006,7007                         
 REQUEST                    Dummy  6993     I(4)            4           scalar   ARG,OUT          7007                              
 TAG                        Dummy  6993     I(4)            4           scalar   ARG,IN           7007                              
 TO_PE                      Dummy  6993     I(4)            4           scalar   ARG,IN           7007                              

Page 302         Source Listing                  MPP_SEND_LOGICAL8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7010 
   7011     subroutine mpp_recv_logical8_2d( get_data, get_len, from_pe, block, tag, request )
   7012 !a mpp_transmit with null arguments on the put side
   7013       integer, intent(in) :: get_len, from_pe
   7014       logical(l8_kind), intent(out) :: get_data(:,:)
   7015       logical, intent(in), optional :: block
   7016       integer, intent(in), optional :: tag
   7017       integer, intent(out), optional :: request
   7018 
   7019       logical(l8_kind) :: dummy(1,1)
   7020       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   7021     end subroutine mpp_recv_logical8_2d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_recv_logical8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7011     L(4)            4           scalar   ARG,IN           7020                              
 DUMMY                      Local  7019     L(8)            8     2     1        TGT              7020                              
 FROM_PE                    Dummy  7011     I(4)            4           scalar   ARG,IN           7020                              
 GET_DATA                   Dummy  7011     L(8)            8     2     1        ARG,OUT          7020                              
 GET_LEN                    Dummy  7011     I(4)            4           scalar   ARG,IN           7020                              
 MPP_RECV_LOGICAL8_2D       Subr   7011                                          PRIV                                               
 REQUEST                    Dummy  7011     I(4)            4           scalar   ARG,OUT          7020                              
 TAG                        Dummy  7011     I(4)            4           scalar   ARG,IN           7020                              

Page 303         Source Listing                  MPP_RECV_LOGICAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7022 
   7023     subroutine mpp_send_logical8_2d( put_data, put_len, to_pe, tag, request )
   7024 !a mpp_transmit with null arguments on the get side
   7025       integer, intent(in) :: put_len, to_pe
   7026       logical(l8_kind), intent(in) :: put_data(:,:)
   7027       integer, intent(in), optional :: tag
   7028       integer, intent(out), optional :: request
   7029       logical(l8_kind) :: dummy(1,1)
   7030       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   7031     end subroutine mpp_send_logical8_2d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_send_logical8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7029     L(8)            8     2     1        TGT              7030                              
 MPP_SEND_LOGICAL8_2D       Subr   7023                                          PRIV                                               
 PUT_DATA                   Dummy  7023     L(8)            8     2     1        ARG,IN           7030                              
 PUT_LEN                    Dummy  7023     I(4)            4           scalar   ARG,IN           7030                              
 REQUEST                    Dummy  7023     I(4)            4           scalar   ARG,OUT          7030                              
 TAG                        Dummy  7023     I(4)            4           scalar   ARG,IN           7030                              
 TO_PE                      Dummy  7023     I(4)            4           scalar   ARG,IN           7030                              

Page 304         Source Listing                  MPP_SEND_LOGICAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7032 
   7033     subroutine mpp_recv_logical8_3d( get_data, get_len, from_pe, block, tag, request )
   7034 !a mpp_transmit with null arguments on the put side
   7035       integer, intent(in) :: get_len, from_pe
   7036       logical(l8_kind), intent(out) :: get_data(:,:,:)
   7037       logical, intent(in), optional :: block
   7038       integer, intent(in), optional :: tag
   7039       integer, intent(out), optional :: request
   7040 
   7041       logical(l8_kind) :: dummy(1,1,1)
   7042       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   7043     end subroutine mpp_recv_logical8_3d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_recv_logical8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7033     L(4)            4           scalar   ARG,IN           7042                              
 DUMMY                      Local  7041     L(8)            8     3     1        TGT              7042                              
 FROM_PE                    Dummy  7033     I(4)            4           scalar   ARG,IN           7042                              
 GET_DATA                   Dummy  7033     L(8)            8     3     1        ARG,OUT          7042                              
 GET_LEN                    Dummy  7033     I(4)            4           scalar   ARG,IN           7042                              
 MPP_RECV_LOGICAL8_3D       Subr   7033                                          PRIV                                               
 REQUEST                    Dummy  7033     I(4)            4           scalar   ARG,OUT          7042                              
 TAG                        Dummy  7033     I(4)            4           scalar   ARG,IN           7042                              

Page 305         Source Listing                  MPP_RECV_LOGICAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7044 
   7045     subroutine mpp_send_logical8_3d( put_data, put_len, to_pe, tag, request )
   7046 !a mpp_transmit with null arguments on the get side
   7047       integer, intent(in) :: put_len, to_pe
   7048       logical(l8_kind), intent(in) :: put_data(:,:,:)
   7049       integer, intent(in), optional :: tag
   7050       integer, intent(out), optional :: request
   7051       logical(l8_kind) :: dummy(1,1,1)
   7052       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   7053     end subroutine mpp_send_logical8_3d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_send_logical8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7051     L(8)            8     3     1        TGT              7052                              
 MPP_SEND_LOGICAL8_3D       Subr   7045                                          PRIV                                               
 PUT_DATA                   Dummy  7045     L(8)            8     3     1        ARG,IN           7052                              
 PUT_LEN                    Dummy  7045     I(4)            4           scalar   ARG,IN           7052                              
 REQUEST                    Dummy  7045     I(4)            4           scalar   ARG,OUT          7052                              
 TAG                        Dummy  7045     I(4)            4           scalar   ARG,IN           7052                              
 TO_PE                      Dummy  7045     I(4)            4           scalar   ARG,IN           7052                              

Page 306         Source Listing                  MPP_SEND_LOGICAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7054 
   7055     subroutine mpp_recv_logical8_4d( get_data, get_len, from_pe, block, tag, request )
   7056 !a mpp_transmit with null arguments on the put side
   7057       integer, intent(in) :: get_len, from_pe
   7058       logical(l8_kind), intent(out) :: get_data(:,:,:,:)
   7059       logical, intent(in), optional :: block
   7060       integer, intent(in), optional :: tag
   7061       integer, intent(out), optional :: request
   7062 
   7063       logical(l8_kind) :: dummy(1,1,1,1)
   7064       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   7065     end subroutine mpp_recv_logical8_4d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_recv_logical8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7055     L(4)            4           scalar   ARG,IN           7064                              
 DUMMY                      Local  7063     L(8)            8     4     1        TGT              7064                              
 FROM_PE                    Dummy  7055     I(4)            4           scalar   ARG,IN           7064                              
 GET_DATA                   Dummy  7055     L(8)            8     4     1        ARG,OUT          7064                              
 GET_LEN                    Dummy  7055     I(4)            4           scalar   ARG,IN           7064                              
 MPP_RECV_LOGICAL8_4D       Subr   7055                                          PRIV                                               
 REQUEST                    Dummy  7055     I(4)            4           scalar   ARG,OUT          7064                              
 TAG                        Dummy  7055     I(4)            4           scalar   ARG,IN           7064                              

Page 307         Source Listing                  MPP_RECV_LOGICAL8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7066 
   7067     subroutine mpp_send_logical8_4d( put_data, put_len, to_pe, tag, request )
   7068 !a mpp_transmit with null arguments on the get side
   7069       integer, intent(in) :: put_len, to_pe
   7070       logical(l8_kind), intent(in) :: put_data(:,:,:,:)
   7071       integer, intent(in), optional :: tag
   7072       integer, intent(out), optional :: request
   7073       logical(l8_kind) :: dummy(1,1,1,1)
   7074       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   7075     end subroutine mpp_send_logical8_4d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_send_logical8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7073     L(8)            8     4     1        TGT              7074                              
 MPP_SEND_LOGICAL8_4D       Subr   7067                                          PRIV                                               
 PUT_DATA                   Dummy  7067     L(8)            8     4     1        ARG,IN           7074                              
 PUT_LEN                    Dummy  7067     I(4)            4           scalar   ARG,IN           7074                              
 REQUEST                    Dummy  7067     I(4)            4           scalar   ARG,OUT          7074                              
 TAG                        Dummy  7067     I(4)            4           scalar   ARG,IN           7074                              
 TO_PE                      Dummy  7067     I(4)            4           scalar   ARG,IN           7074                              

Page 308         Source Listing                  MPP_SEND_LOGICAL8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7076 
   7077     subroutine mpp_recv_logical8_5d( get_data, get_len, from_pe, block, tag, request)
   7078 !a mpp_transmit with null arguments on the put side
   7079       integer, intent(in) :: get_len, from_pe
   7080       logical(l8_kind), intent(out) :: get_data(:,:,:,:,:)
   7081       logical, intent(in), optional :: block
   7082       integer, intent(in), optional :: tag
   7083       integer, intent(out), optional :: request
   7084 
   7085       logical(l8_kind) :: dummy(1,1,1,1,1)
   7086       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   7087     end subroutine mpp_recv_logical8_5d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_recv_logical8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7077     L(4)            4           scalar   ARG,IN           7086                              
 DUMMY                      Local  7085     L(8)            8     5     1        TGT              7086                              
 FROM_PE                    Dummy  7077     I(4)            4           scalar   ARG,IN           7086                              
 GET_DATA                   Dummy  7077     L(8)            8     5     1        ARG,OUT          7086                              
 GET_LEN                    Dummy  7077     I(4)            4           scalar   ARG,IN           7086                              
 MPP_RECV_LOGICAL8_5D       Subr   7077                                          PRIV                                               
 REQUEST                    Dummy  7077     I(4)            4           scalar   ARG,OUT          7086                              
 TAG                        Dummy  7077     I(4)            4           scalar   ARG,IN           7086                              

Page 309         Source Listing                  MPP_RECV_LOGICAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7088 
   7089     subroutine mpp_send_logical8_5d( put_data, put_len, to_pe, tag, request )
   7090 !a mpp_transmit with null arguments on the get side
   7091       integer, intent(in) :: put_len, to_pe
   7092       logical(l8_kind), intent(in) :: put_data(:,:,:,:,:)
   7093       integer, intent(in), optional :: tag
   7094       integer, intent(out), optional :: request
   7095       logical(l8_kind) :: dummy(1,1,1,1,1)
   7096       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   7097     end subroutine mpp_send_logical8_5d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_send_logical8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7095     L(8)            8     5     1        TGT              7096                              
 MPP_SEND_LOGICAL8_5D       Subr   7089                                          PRIV                                               
 PUT_DATA                   Dummy  7089     L(8)            8     5     1        ARG,IN           7096                              
 PUT_LEN                    Dummy  7089     I(4)            4           scalar   ARG,IN           7096                              
 REQUEST                    Dummy  7089     I(4)            4           scalar   ARG,OUT          7096                              
 TAG                        Dummy  7089     I(4)            4           scalar   ARG,IN           7096                              
 TO_PE                      Dummy  7089     I(4)            4           scalar   ARG,IN           7096                              

Page 310         Source Listing                  MPP_SEND_LOGICAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7098 
   7099 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7100 !                                                                             !
   7101 !                                MPP_BROADCAST                                !
   7102 !                                                                             !
   7103 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7104 
   7105     subroutine mpp_broadcast_logical8_scalar( data, from_pe, pelist )
   7106       logical(l8_kind), intent(inout) :: data
   7107       integer, intent(in) :: from_pe
   7108       integer, intent(in), optional :: pelist(:)
   7109       logical(l8_kind) :: data1D(1)
   7110 
   7111       pointer( ptr, data1D )
   7112 
   7113       ptr = LOC(data)
   7114       call mpp_broadcast_logical8( data1D, 1, from_pe, pelist )
   7115 
   7116       return
   7117     end subroutine mpp_broadcast_logical8_scalar


ENTRY POINTS

  Name                                                 
                                                       
 mpp_mod_mp_mpp_broadcast_logical8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7105     L(8)            8           scalar   ARG,TGT,INOUT    7113                              
 DATA1D                     Local  7109     L(8)            8     1     1                         7114                              
 FROM_PE                    Dummy  7105     I(4)            4           scalar   ARG,IN           7114                              
 LOC                        Func   7113                                 scalar                    7113                              
 MPP_BROADCAST_LOGICAL8_SCA                                                                                                         
 LAR                        Subr   7105                                          PRIV                                               
 PELIST                     Dummy  7105     I(4)            4     1     1        ARG,IN           7114                              
 PTR                        Local  7111     I(8)            8           scalar   PTR              7113                              

Page 311         Source Listing                  MPP_BROADCAST_LOGICAL8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7118 
   7119     subroutine mpp_broadcast_logical8_2d( data, length, from_pe, pelist )
   7120 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   7121 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   7122 !backward compatible.
   7123       logical(l8_kind), intent(inout) :: data(:,:)
   7124       integer, intent(in) :: length, from_pe
   7125       integer, intent(in), optional :: pelist(:)
   7126       logical(l8_kind) :: data1D(length)
   7127 
   7128       pointer( ptr, data1D )
   7129       ptr = LOC(data)
   7130       call mpp_broadcast( data1D, length, from_pe, pelist )
   7131 
   7132       return
   7133     end subroutine mpp_broadcast_logical8_2d


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_broadcast_logical8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7119     L(8)            8     2     1        ARG,INOUT        7129                              
 DATA1D                     Local  7126     L(8)            8     1     0                         7130                              
 FROM_PE                    Dummy  7119     I(4)            4           scalar   ARG,IN           7130                              
 LENGTH                     Dummy  7119     I(4)            4           scalar   ARG,IN           7126,7130                         
 LOC                        Func   7129                                 scalar                    7129                              
 MPP_BROADCAST_LOGICAL8_2D  Subr   7119                                          PRIV                                               
 PELIST                     Dummy  7119     I(4)            4     1     1        ARG,IN           7130                              
 PTR                        Local  7128     I(8)            8           scalar   PTR              7129                              

Page 312         Source Listing                  MPP_BROADCAST_LOGICAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7134 
   7135     subroutine mpp_broadcast_logical8_3d( data, length, from_pe, pelist )
   7136 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   7137 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   7138 !backward compatible.
   7139       logical(l8_kind), intent(inout) :: data(:,:,:)
   7140       integer, intent(in) :: length, from_pe
   7141       integer, intent(in), optional :: pelist(:)
   7142       logical(l8_kind) :: data1D(length)
   7143 
   7144       pointer( ptr, data1D )
   7145       ptr = LOC(data)
   7146       call mpp_broadcast( data1D, length, from_pe, pelist )
   7147 
   7148       return
   7149    end subroutine mpp_broadcast_logical8_3d


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_broadcast_logical8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7135     L(8)            8     3     1        ARG,INOUT        7145                              
 DATA1D                     Local  7142     L(8)            8     1     0                         7146                              
 FROM_PE                    Dummy  7135     I(4)            4           scalar   ARG,IN           7146                              
 LENGTH                     Dummy  7135     I(4)            4           scalar   ARG,IN           7142,7146                         
 LOC                        Func   7145                                 scalar                    7145                              
 MPP_BROADCAST_LOGICAL8_3D  Subr   7135                                          PRIV                                               
 PELIST                     Dummy  7135     I(4)            4     1     1        ARG,IN           7146                              
 PTR                        Local  7144     I(8)            8           scalar   PTR              7145                              

Page 313         Source Listing                  MPP_BROADCAST_LOGICAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7150 
   7151     subroutine mpp_broadcast_logical8_4d( data, length, from_pe, pelist )
   7152 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   7153 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   7154 !backward compatible.
   7155       logical(l8_kind), intent(inout) :: data(:,:,:,:)
   7156       integer, intent(in) :: length, from_pe
   7157       integer, intent(in), optional :: pelist(:)
   7158       logical(l8_kind) :: data1D(length)
   7159 
   7160       pointer( ptr, data1D )
   7161       ptr = LOC(data)
   7162       call mpp_broadcast( data1D, length, from_pe, pelist )
   7163 
   7164       return
   7165     end subroutine mpp_broadcast_logical8_4d


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_broadcast_logical8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7151     L(8)            8     4     1        ARG,INOUT        7161                              
 DATA1D                     Local  7158     L(8)            8     1     0                         7162                              
 FROM_PE                    Dummy  7151     I(4)            4           scalar   ARG,IN           7162                              
 LENGTH                     Dummy  7151     I(4)            4           scalar   ARG,IN           7158,7162                         
 LOC                        Func   7161                                 scalar                    7161                              
 MPP_BROADCAST_LOGICAL8_4D  Subr   7151                                          PRIV                                               
 PELIST                     Dummy  7151     I(4)            4     1     1        ARG,IN           7162                              
 PTR                        Local  7160     I(8)            8           scalar   PTR              7161                              

Page 314         Source Listing                  MPP_BROADCAST_LOGICAL8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7166 
   7167     subroutine mpp_broadcast_logical8_5d( data, length, from_pe, pelist )
   7168 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   7169 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   7170 !backward compatible.
   7171       logical(l8_kind), intent(inout) :: data(:,:,:,:,:)
   7172       integer, intent(in) :: length, from_pe
   7173       integer, intent(in), optional :: pelist(:)
   7174       logical(l8_kind) :: data1D(length)
   7175 
   7176       pointer( ptr, data1D )
   7177       ptr = LOC(data)
   7178       call mpp_broadcast( data1D, length, from_pe, pelist )
   7179 
   7180       return
   7181     end subroutine mpp_broadcast_logical8_5d


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_broadcast_logical8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7167     L(8)            8     5     1        ARG,INOUT        7177                              
 DATA1D                     Local  7174     L(8)            8     1     0                         7178                              
 FROM_PE                    Dummy  7167     I(4)            4           scalar   ARG,IN           7178                              
 LENGTH                     Dummy  7167     I(4)            4           scalar   ARG,IN           7174,7178                         
 LOC                        Func   7177                                 scalar                    7177                              
 MPP_BROADCAST_LOGICAL8_5D  Subr   7167                                          PRIV                                               
 PELIST                     Dummy  7167     I(4)            4     1     1        ARG,IN           7178                              
 PTR                        Local  7176     I(8)            8           scalar   PTR              7177                              

Page 315         Source Listing                  MPP_BROADCAST_LOGICAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7182 # 201 "../mpp/include/mpp_transmit_mpi.h" 2 
   7183 # 796 "../mpp/include/mpp_comm_mpi.inc" 2 
   7184 
   7185 
   7186 
   7187 
   7188 
   7189 
   7190 
   7191 
   7192 
   7193 
   7194 
   7195 
   7196 
   7197 
   7198 
   7199 
   7200 
   7201 
   7202 
   7203 
   7204 
   7205 
   7206 
   7207 
   7208 
   7209 
   7210 
   7211 
   7212 
   7213 
   7214 
   7215 
   7216 
   7217 
   7218 
   7219 
   7220 
   7221 
   7222 
   7223 
   7224 
   7225 
   7226 
   7227 
   7228 
   7229 
   7230 
   7231 
   7232 
   7233 
   7234 
   7235 
   7236 
   7237 
   7238 

Page 316         Source Listing                  MPP_BROADCAST_LOGICAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

   7239 # 1 "../mpp/include/mpp_transmit_mpi.h" 1 
   7240 !***********************************************************************
   7241 !*                   GNU Lesser General Public License
   7242 !*
   7243 !* This file is part of the GFDL Flexible Modeling System (FMS).
   7244 !*
   7245 !* FMS is free software: you can redistribute it and/or modify it under
   7246 !* the terms of the GNU Lesser General Public License as published by
   7247 !* the Free Software Foundation, either version 3 of the License, or (at
   7248 !* your option) any later version.
   7249 !*
   7250 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   7251 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   7252 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   7253 !* for more details.
   7254 !*
   7255 !* You should have received a copy of the GNU Lesser General Public
   7256 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   7257 !***********************************************************************
   7258 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7259 !                                                                             !
   7260 !                                  MPP_TRANSMIT                               !
   7261 !                                                                             !
   7262 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7263 
   7264     subroutine mpp_transmit_logical4( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, recv_request, send_r
   7264 equest )
   7265 !a message-passing routine intended to be reminiscent equally of both MPI and SHMEM
   7266 
   7267 !put_data and get_data are contiguous logical(l4_kind) arrays
   7268 
   7269 !at each call, your put_data array is put to   to_pe's get_data
   7270 !              your get_data array is got from from_pe's put_data
   7271 !i.e we assume that typically (e.g updating halo regions) each PE performs a put _and_ a get
   7272 
   7273 !special PE designations:
   7274 !      NULL_PE: to disable a put or a get (e.g at boundaries)
   7275 !      ANY_PE:  if remote PE for the put or get is to be unspecific
   7276 !      ALL_PES: broadcast and collect operations (collect not yet implemented)
   7277 
   7278 !ideally we would not pass length, but this f77-style call performs better (arrays passed by address, not descriptor)
   7279 !further, this permits <length> contiguous words from an array of any rank to be passed (avoiding f90 rank conformance check
   7279 )
   7280 
   7281 !caller is responsible for completion checks (mpp_sync_self) before and after
   7282 
   7283       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   7284       logical(l4_kind), intent(in)  :: put_data(*)
   7285       logical(l4_kind), intent(out) :: get_data(*)
   7286       logical, intent(in),  optional :: block
   7287       integer, intent(in),  optional :: tag
   7288       integer, intent(out), optional :: recv_request, send_request
   7289       logical                       :: block_comm
   7290       integer                       :: i
   7291       logical(l4_kind), allocatable, save  :: local_data(:) !local copy used by non-parallel code (no SHMEM or MPI)
   7292       integer                       :: comm_tag
   7293       integer                       :: rsize

Page 317         Source Listing                  MPP_TRANSMIT_LOGICAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   7294 
   7295       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_TRANSMIT: You must first call mpp_init.' )
   7296       if( to_pe.EQ.NULL_PE .AND. from_pe.EQ.NULL_PE )return
   7297 
   7298       block_comm = .true.
   7299       if(PRESENT(block)) block_comm = block
   7300 
   7301       if( debug )then
   7302           call system_clock_mpi(tick)
   7303           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   7304                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT begin: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_
   7304 len
   7305       end if
   7306 
   7307       comm_tag = DEFAULT_TAG
   7308       if(present(tag)) comm_tag = tag
   7309 
   7310 !do put first and then get
   7311       if( to_pe.GE.0 .AND. to_pe.LT.npes )then
   7312 !use non-blocking sends
   7313           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   7314 !z1l: truly non-blocking send.
   7315 !          if( request(to_pe).NE.MPI_REQUEST_NULL )then !only one message from pe->to_pe in queue
   7316 !              if( debug )write( stderr(),* )'PE waiting for sending', pe, to_pe
   7317 !              call MPI_WAIT( request(to_pe), stat, error )
   7318 !          end if
   7319           if(present(send_request)) then
   7320              call MPI_ISEND( put_data, put_len, MPI_INTEGER4, to_pe, comm_tag, mpp_comm_private, send_request, error)
   7321           else
   7322              cur_send_request = cur_send_request + 1
   7323              if( cur_send_request > max_request ) call mpp_error(FATAL, &
   7324                 "MPP_TRANSMIT: cur_send_request is greater than max_request, increase mpp_nml request_multiply")
   7325              call MPI_ISEND( put_data, put_len, MPI_INTEGER4, to_pe, comm_tag, mpp_comm_private, &
   7326                              request_send(cur_send_request), error)
   7327           endif
   7328           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_SEND, put_len*4 )
   7329       else if( to_pe.EQ.ALL_PES )then !this is a broadcast from from_pe
   7330           if( from_pe.LT.0 .OR. from_pe.GE.npes )call mpp_error( FATAL, 'MPP_TRANSMIT: broadcasting from invalid PE.' )
   7331           if( put_len.GT.get_len )call mpp_error( FATAL, 'MPP_TRANSMIT: size mismatch between put_data and get_data.' )
   7332           if( pe.EQ.from_pe )then
   7333               if( LOC(get_data).NE.LOC(put_data) )then
   7334 !dir$ IVDEP
   7335                   do i = 1,get_len
   7336                      get_data(i) = put_data(i)
   7337                   end do
   7338               end if
   7339           end if
   7340           call mpp_broadcast( get_data, get_len, from_pe )
   7341           return
   7342       else if( to_pe.EQ.ANY_PE )then !we don't have a destination to do puts to, so only do gets
   7343 !...but you cannot have a pure get with MPI
   7344           call mpp_error( FATAL, 'MPP_TRANSMIT: you cannot transmit to ANY_PE using MPI.' )
   7345       else if( to_pe.NE.NULL_PE )then  !no other valid cases except NULL_PE
   7346           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid to_pe.' )
   7347       end if
   7348 
   7349 !do the get

Page 318         Source Listing                  MPP_TRANSMIT_LOGICAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   7350       if( from_pe.GE.0 .AND. from_pe.LT.npes )then
   7351 !receive from from_pe
   7352           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   7353           if( block_comm ) then
   7354              call MPI_RECV( get_data, get_len, MPI_INTEGER4, from_pe, comm_tag, mpp_comm_private, stat, error )
   7355              call MPI_GET_COUNT( stat, MPI_INTEGER4, rsize, error)
   7356              if(rsize .NE. get_len) then
   7357                 print*, "rsize, get_len=", rsize, get_len, mpp_pe(), from_pe
   7358                 call mpp_error(FATAL, "MPP_TRANSMIT: get_len does not match size of data received")
   7359              endif
   7360           else
   7361 !             if( request_recv(from_pe).NE.MPI_REQUEST_NULL )then !only one message from from_pe->pe in queue
   7362 !              if( debug )write( stderr(),* )'PE waiting for receiving', pe, from_pe
   7363 !                call MPI_WAIT( request_recv(from_pe), stat, error )
   7364 !             end if
   7365              if(PRESENT(recv_request)) then
   7366                 call MPI_IRECV( get_data, get_len, MPI_INTEGER4, from_pe, comm_tag, mpp_comm_private, &
   7367                   recv_request, error )
   7368              else
   7369                 cur_recv_request = cur_recv_request + 1
   7370                 if( cur_recv_request > max_request ) call mpp_error(FATAL, &
   7371                 "MPP_TRANSMIT: cur_recv_request is greater than max_request, increase mpp_nml request_multiply")
   7372                 call MPI_IRECV( get_data, get_len, MPI_INTEGER4, from_pe, comm_tag, mpp_comm_private, &
   7373                      request_recv(cur_recv_request), error )
   7374                 size_recv(cur_recv_request) = get_len
   7375                 type_recv(cur_recv_request) = MPI_INTEGER4
   7376              endif
   7377           endif
   7378           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*4 )
   7379       else if( from_pe.EQ.ANY_PE )then
   7380 !receive from MPI_ANY_SOURCE
   7381           if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   7382           call MPI_RECV( get_data, get_len, MPI_INTEGER4, MPI_ANY_SOURCE, comm_tag, mpp_comm_private, stat, error )
   7383           if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_RECV, get_len*4 )
   7384       else if( from_pe.EQ.ALL_PES )then
   7385           call mpp_error( FATAL, 'MPP_TRANSMIT: from_pe=ALL_PES has ambiguous meaning, and hence is not implemented.' )
   7386       else if( from_pe.NE.NULL_PE )then !only remaining valid choice is NULL_PE
   7387           call mpp_error( FATAL, 'MPP_TRANSMIT: invalid from_pe.' )
   7388       end if
   7389 
   7390       if( debug )then
   7391           call system_clock_mpi(tick)
   7392           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   7393                'T=',tick, ' PE=',pe, ' MPP_TRANSMIT end: to_pe, from_pe, put_len, get_len=', to_pe, from_pe, put_len, get_le
   7393 n
   7394       end if
   7395       return
   7396     end subroutine mpp_transmit_logical4

Page 319         Source Listing                  MPP_TRANSMIT_LOGICAL4
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_transmit_logical4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7264     L(4)            4           scalar   ARG,IN           7299                              
 BLOCK_COMM                 Local  7289     L(4)            4           scalar                    7298,7299,7353                    
 COMM_TAG                   Local  7292     I(4)            4           scalar                    7307,7308,7320,7325,7354,7366,7372
                                                                                                  ,7382                             
 FROM_PE                    Dummy  7264     I(4)            4           scalar   ARG,IN           7296,7304,7330,7332,7340,7350,7354
                                                                                                  ,7357,7366,7372,7379,7384,7386,739
                                                                                                  3                                 
 GET_DATA                   Dummy  7264     L(4)            4     1     0        ARG,TGT,OUT      7333,7336,7340,7354,7366,7372,7382
 GET_LEN                    Dummy  7264     I(4)            4           scalar   ARG,IN           7304,7331,7335,7340,7354,7356,7357
                                                                                                  ,7366,7372,7374,7378,7382,7383,739
                                                                                                  3                                 
 I                          Local  7290     I(4)            4           scalar                    7335,7336                         
 L4_KIND                    Param  7284     I(4)            4           scalar   PRIV             7284,7285,7291,7408,7470,7471,7477
                                                                                                  ,7494,7495,7499,7514,7515,7519,753
                                                                                                  4,7535,7539,7554,7555,7559,7579,75
                                                                                                  84,7591,7594,7601,7608,7609,7621,7
                                                                                                  626,7627,7639,7644,7651,7654,7661,
                                                                                                  7666,7673,7676,7683,7688,7695,7698
                                                                                                  ,7705,7710,7717,7720,7731,7734,774
                                                                                                  8,7751,7764,7767,7780,7783,7796,77
                                                                                                  99,10522,10523,10549,10550,10580,1
                                                                                                  0581,11447                        
 LOC                        Func   7333                                 scalar                    7333                              
 LOCAL_DATA                 Local  7291     L(4)            4     1     1        ALC,SAVE                                           
 MPI_IRECV                  Subr   7366                                                           7366,7372                         
 MPI_ISEND                  Subr   7320                                                           7320,7325                         
 MPI_RECV                   Subr   7354                                                           7354,7382                         
 MPP_TRANSMIT_LOGICAL4      Subr   7264                                          PRIV             7485,7505,7525,7545,7565,7585,7595
                                                                                                  ,7614,7632                        
 PRESENT                    Func   7299                                 scalar                    7299,7308,7319,7365               
 PUT_DATA                   Dummy  7264     L(4)            4     1     0        ARG,TGT,IN       7320,7325,7333,7336               
 PUT_LEN                    Dummy  7264     I(4)            4           scalar   ARG,IN           7304,7320,7325,7328,7331,7393     
 RECV_REQUEST               Dummy  7264     I(4)            4           scalar   ARG,OUT          7365,7367                         
 RSIZE                      Local  7293     I(4)            4           scalar                    7355,7356,7357                    
 SEND_REQUEST               Dummy  7264     I(4)            4           scalar   ARG,OUT          7319,7320                         
 TAG                        Dummy  7264     I(4)            4           scalar   ARG,IN           7308                              
 TO_PE                      Dummy  7264     I(4)            4           scalar   ARG,IN           7296,7304,7311,7320,7325,7329,7342
                                                                                                  ,7345,7393                        

Page 320         Source Listing                  MPP_TRANSMIT_LOGICAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   7397 
   7398 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7399 !                                                                             !
   7400 !                                MPP_BROADCAST                                !
   7401 !                                                                             !
   7402 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7403 
   7404     subroutine mpp_broadcast_logical4( data, length, from_pe, pelist )
   7405 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   7406 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   7407 !backward compatible.
   7408       logical(l4_kind), intent(inout) :: data(*)
   7409       integer, intent(in) :: length, from_pe
   7410       integer, intent(in), optional :: pelist(:)
   7411       integer :: n, i, from_rank, stdout_unit
   7412 
   7413       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_BROADCAST: You must first call mpp_init.' )
   7414       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   7415 
   7416       if( debug )then
   7417           call system_clock_mpi(tick)
   7418           write( stdout_unit,'(a,i18,a,i6,a,2i6,2i8)' )&
   7419                'T=',tick, ' PE=',pe, ' MPP_BROADCAST begin: from_pe, length=', from_pe, length
   7420       end if
   7421 
   7422       if( .NOT.ANY(from_pe.EQ.peset(current_peset_num)%list) ) &
   7423            call mpp_error( FATAL, 'MPP_BROADCAST: broadcasting from invalid PE.' )
   7424 
   7425       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   7426 ! find the rank of from_pe in the pelist.
   7427       do i = 1, mpp_npes()
   7428          if(peset(n)%list(i) == from_pe) then
   7429              from_rank = i - 1
   7430              exit
   7431          endif
   7432       enddo
   7433       if( mpp_npes().GT.1 )call MPI_BCAST( data, length, MPI_INTEGER4, from_rank, peset(n)%id, error )
   7434       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_BROADCAST, length*4 )
   7435       return
   7436     end subroutine mpp_broadcast_logical4

Page 321         Source Listing                  MPP_BROADCAST_LOGICAL4
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit_mpi.h



ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_broadcast_logical4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   7422                                 scalar                    7422                              
 DATA                       Dummy  7404     L(4)            4     1     0        ARG,INOUT        7433                              
 FROM_PE                    Dummy  7404     I(4)            4           scalar   ARG,IN           7419,7422,7428                    
 FROM_RANK                  Local  7411     I(4)            4           scalar                    7429,7433                         
 I                          Local  7411     I(4)            4           scalar                    7427,7428,7429                    
 LENGTH                     Dummy  7404     I(4)            4           scalar   ARG,IN           7419,7433,7434                    
 MPI_BCAST                  Subr   7433                                                           7433                              
 MPP_BROADCAST_LOGICAL4     Subr   7404                                          PRIV             7340,7739,7755,7771,7787,7803     
 N                          Local  7411     I(4)            4           scalar                    7414,7428,7433                    
 PELIST                     Dummy  7404     I(4)            4     1     1        ARG,IN           7414                              
 STDOUT_UNIT                Local  7411     I(4)            4           scalar                    7418                              

Page 322         Source Listing                  MPP_BROADCAST_LOGICAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit_mpi.h

   7437 
   7438 !####################################################################################
   7439 # 1 "../mpp/include/mpp_transmit.inc" 1 
   7440 ! -*-f90-*-
   7441 
   7442 !***********************************************************************
   7443 !*                   GNU Lesser General Public License
   7444 !*
   7445 !* This file is part of the GFDL Flexible Modeling System (FMS).
   7446 !*
   7447 !* FMS is free software: you can redistribute it and/or modify it under
   7448 !* the terms of the GNU Lesser General Public License as published by
   7449 !* the Free Software Foundation, either version 3 of the License, or (at
   7450 !* your option) any later version.
   7451 !*
   7452 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   7453 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   7454 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   7455 !* for more details.
   7456 !*
   7457 !* You should have received a copy of the GNU Lesser General Public
   7458 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   7459 !***********************************************************************
   7460 
   7461 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7462 !                                                                             !
   7463 !                                  MPP_TRANSMIT                               !
   7464 !                                                                             !
   7465 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7466 
   7467     subroutine mpp_transmit_logical4_scalar( put_data, to_pe, get_data, from_pe, plen, glen, block, tag, &
   7468                                     recv_request, send_request)
   7469       integer, intent(in) :: to_pe, from_pe
   7470       logical(l4_kind), intent(in)  :: put_data
   7471       logical(l4_kind), intent(out) :: get_data
   7472       integer, optional,  intent(in) :: plen, glen
   7473       logical, intent(in),  optional :: block
   7474       integer, intent(in),  optional :: tag
   7475       integer, intent(out), optional :: recv_request, send_request
   7476       integer                       :: put_len, get_len
   7477       logical(l4_kind) :: put_data1D(1), get_data1D(1)
   7478       pointer( ptrp, put_data1D )
   7479       pointer( ptrg, get_data1D )
   7480 
   7481       ptrp = LOC(put_data)
   7482       ptrg = LOC(get_data)
   7483       put_len=1; if(PRESENT(plen))put_len=plen
   7484       get_len=1; if(PRESENT(glen))get_len=glen
   7485       call mpp_transmit_logical4 ( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   7486                            recv_request=recv_request, send_request=send_request )
   7487 
   7488       return
   7489     end subroutine mpp_transmit_logical4_scalar

Page 323         Source Listing                  MPP_TRANSMIT_LOGICAL4_SCALAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_transmit.inc



ENTRY POINTS

  Name                                                
                                                      
 mpp_mod_mp_mpp_transmit_logical4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7467     L(4)            4           scalar   ARG,IN           7485                              
 FROM_PE                    Dummy  7467     I(4)            4           scalar   ARG,IN           7485                              
 GET_DATA                   Dummy  7467     L(4)            4           scalar   ARG,TGT,OUT      7482                              
 GET_DATA1D                 Local  7477     L(4)            4     1     1                         7485                              
 GET_LEN                    Local  7476     I(4)            4           scalar                    7484,7485                         
 GLEN                       Dummy  7467     I(4)            4           scalar   ARG,IN           7484                              
 LOC                        Func   7481                                 scalar                    7481,7482                         
 MPP_TRANSMIT_LOGICAL4_SCAL                                                                                                         
 AR                         Subr   7467                                          PRIV                                               
 PLEN                       Dummy  7467     I(4)            4           scalar   ARG,IN           7483                              
 PRESENT                    Func   7483                                 scalar                    7483,7484                         
 PTRG                       Local  7479     I(8)            8           scalar   PTR              7482                              
 PTRP                       Local  7478     I(8)            8           scalar   PTR              7481                              
 PUT_DATA                   Dummy  7467     L(4)            4           scalar   ARG,TGT,IN       7481                              
 PUT_DATA1D                 Local  7477     L(4)            4     1     1                         7485                              
 PUT_LEN                    Local  7476     I(4)            4           scalar                    7483,7485                         
 RECV_REQUEST               Dummy  7468     I(4)            4           scalar   ARG,OUT          7486                              
 SEND_REQUEST               Dummy  7468     I(4)            4           scalar   ARG,OUT          7486                              
 TAG                        Dummy  7467     I(4)            4           scalar   ARG,IN           7485                              
 TO_PE                      Dummy  7467     I(4)            4           scalar   ARG,IN           7485                              

Page 324         Source Listing                  MPP_TRANSMIT_LOGICAL4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7490 
   7491     subroutine mpp_transmit_logical4_2d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   7492                                 recv_request, send_request )
   7493       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   7494       logical(l4_kind), intent(in)  :: put_data(:,:)
   7495       logical(l4_kind), intent(out) :: get_data(:,:)
   7496       logical, intent(in), optional :: block
   7497       integer, intent(in), optional :: tag
   7498       integer, intent(out), optional :: recv_request, send_request
   7499       logical(l4_kind) :: put_data1D(put_len), get_data1D(get_len)
   7500 
   7501       pointer( ptrp, put_data1D )
   7502       pointer( ptrg, get_data1D )
   7503       ptrp = LOC(put_data)
   7504       ptrg = LOC(get_data)
   7505       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   7506                          recv_request=recv_request, send_request=send_request )
   7507 
   7508       return
   7509     end subroutine mpp_transmit_logical4_2d


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_transmit_logical4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7491     L(4)            4           scalar   ARG,IN           7505                              
 FROM_PE                    Dummy  7491     I(4)            4           scalar   ARG,IN           7505                              
 GET_DATA                   Dummy  7491     L(4)            4     2     1        ARG,OUT          7504                              
 GET_DATA1D                 Local  7499     L(4)            4     1     0                         7505                              
 GET_LEN                    Dummy  7491     I(4)            4           scalar   ARG,IN           7499,7505                         
 LOC                        Func   7503                                 scalar                    7503,7504                         
 MPP_TRANSMIT_LOGICAL4_2D   Subr   7491                                          PRIV             7645,7655                         
 PTRG                       Local  7502     I(8)            8           scalar   PTR              7504                              
 PTRP                       Local  7501     I(8)            8           scalar   PTR              7503                              
 PUT_DATA                   Dummy  7491     L(4)            4     2     1        ARG,IN           7503                              
 PUT_DATA1D                 Local  7499     L(4)            4     1     0                         7505                              
 PUT_LEN                    Dummy  7491     I(4)            4           scalar   ARG,IN           7499,7505                         
 RECV_REQUEST               Dummy  7492     I(4)            4           scalar   ARG,OUT          7506                              
 SEND_REQUEST               Dummy  7492     I(4)            4           scalar   ARG,OUT          7506                              
 TAG                        Dummy  7491     I(4)            4           scalar   ARG,IN           7505                              
 TO_PE                      Dummy  7491     I(4)            4           scalar   ARG,IN           7505                              

Page 325         Source Listing                  MPP_TRANSMIT_LOGICAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7510 
   7511     subroutine mpp_transmit_logical4_3d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   7512                                 recv_request, send_request )
   7513       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   7514       logical(l4_kind), intent(in)  :: put_data(:,:,:)
   7515       logical(l4_kind), intent(out) :: get_data(:,:,:)
   7516       logical, intent(in), optional :: block
   7517       integer, intent(in), optional :: tag
   7518       integer, intent(out), optional :: recv_request, send_request
   7519       logical(l4_kind) :: put_data1D(put_len), get_data1D(get_len)
   7520 
   7521       pointer( ptrp, put_data1D )
   7522       pointer( ptrg, get_data1D )
   7523       ptrp = LOC(put_data)
   7524       ptrg = LOC(get_data)
   7525       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   7526                          recv_request=recv_request, send_request=send_request )
   7527 
   7528       return
   7529     end subroutine mpp_transmit_logical4_3d


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_transmit_logical4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7511     L(4)            4           scalar   ARG,IN           7525                              
 FROM_PE                    Dummy  7511     I(4)            4           scalar   ARG,IN           7525                              
 GET_DATA                   Dummy  7511     L(4)            4     3     1        ARG,OUT          7524                              
 GET_DATA1D                 Local  7519     L(4)            4     1     0                         7525                              
 GET_LEN                    Dummy  7511     I(4)            4           scalar   ARG,IN           7519,7525                         
 LOC                        Func   7523                                 scalar                    7523,7524                         
 MPP_TRANSMIT_LOGICAL4_3D   Subr   7511                                          PRIV             7667,7677                         
 PTRG                       Local  7522     I(8)            8           scalar   PTR              7524                              
 PTRP                       Local  7521     I(8)            8           scalar   PTR              7523                              
 PUT_DATA                   Dummy  7511     L(4)            4     3     1        ARG,IN           7523                              
 PUT_DATA1D                 Local  7519     L(4)            4     1     0                         7525                              
 PUT_LEN                    Dummy  7511     I(4)            4           scalar   ARG,IN           7519,7525                         
 RECV_REQUEST               Dummy  7512     I(4)            4           scalar   ARG,OUT          7526                              
 SEND_REQUEST               Dummy  7512     I(4)            4           scalar   ARG,OUT          7526                              
 TAG                        Dummy  7511     I(4)            4           scalar   ARG,IN           7525                              
 TO_PE                      Dummy  7511     I(4)            4           scalar   ARG,IN           7525                              

Page 326         Source Listing                  MPP_TRANSMIT_LOGICAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7530 
   7531     subroutine mpp_transmit_logical4_4d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   7532                                 recv_request, send_request )
   7533       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   7534       logical(l4_kind), intent(in)  :: put_data(:,:,:,:)
   7535       logical(l4_kind), intent(out) :: get_data(:,:,:,:)
   7536       logical, intent(in), optional :: block
   7537       integer, intent(in), optional :: tag
   7538       integer, intent(out), optional :: recv_request, send_request
   7539       logical(l4_kind) :: put_data1D(put_len), get_data1D(get_len)
   7540 
   7541       pointer( ptrp, put_data1D )
   7542       pointer( ptrg, get_data1D )
   7543       ptrp = LOC(put_data)
   7544       ptrg = LOC(get_data)
   7545       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   7546                          recv_request=recv_request, send_request=send_request )
   7547 
   7548       return
   7549     end subroutine mpp_transmit_logical4_4d


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_transmit_logical4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7531     L(4)            4           scalar   ARG,IN           7545                              
 FROM_PE                    Dummy  7531     I(4)            4           scalar   ARG,IN           7545                              
 GET_DATA                   Dummy  7531     L(4)            4     4     1        ARG,OUT          7544                              
 GET_DATA1D                 Local  7539     L(4)            4     1     0                         7545                              
 GET_LEN                    Dummy  7531     I(4)            4           scalar   ARG,IN           7539,7545                         
 LOC                        Func   7543                                 scalar                    7543,7544                         
 MPP_TRANSMIT_LOGICAL4_4D   Subr   7531                                          PRIV             7689,7699                         
 PTRG                       Local  7542     I(8)            8           scalar   PTR              7544                              
 PTRP                       Local  7541     I(8)            8           scalar   PTR              7543                              
 PUT_DATA                   Dummy  7531     L(4)            4     4     1        ARG,IN           7543                              
 PUT_DATA1D                 Local  7539     L(4)            4     1     0                         7545                              
 PUT_LEN                    Dummy  7531     I(4)            4           scalar   ARG,IN           7539,7545                         
 RECV_REQUEST               Dummy  7532     I(4)            4           scalar   ARG,OUT          7546                              
 SEND_REQUEST               Dummy  7532     I(4)            4           scalar   ARG,OUT          7546                              
 TAG                        Dummy  7531     I(4)            4           scalar   ARG,IN           7545                              
 TO_PE                      Dummy  7531     I(4)            4           scalar   ARG,IN           7545                              

Page 327         Source Listing                  MPP_TRANSMIT_LOGICAL4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7550 
   7551     subroutine mpp_transmit_logical4_5d( put_data, put_len, to_pe, get_data, get_len, from_pe, block, tag, &
   7552                                 recv_request, send_request )
   7553       integer, intent(in) :: put_len, to_pe, get_len, from_pe
   7554       logical(l4_kind), intent(in)  :: put_data(:,:,:,:,:)
   7555       logical(l4_kind), intent(out) :: get_data(:,:,:,:,:)
   7556       logical, intent(in), optional :: block
   7557       integer, intent(in), optional :: tag
   7558       integer, intent(out), optional :: recv_request, send_request
   7559       logical(l4_kind) :: put_data1D(put_len), get_data1D(get_len)
   7560 
   7561       pointer( ptrp, put_data1D )
   7562       pointer( ptrg, get_data1D )
   7563       ptrp = LOC(put_data)
   7564       ptrg = LOC(get_data)
   7565       call mpp_transmit( put_data1D, put_len, to_pe, get_data1D, get_len, from_pe, block, tag, &
   7566                          recv_request=recv_request, send_request=send_request )
   7567 
   7568       return
   7569     end subroutine mpp_transmit_logical4_5d


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_transmit_logical4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7551     L(4)            4           scalar   ARG,IN           7565                              
 FROM_PE                    Dummy  7551     I(4)            4           scalar   ARG,IN           7565                              
 GET_DATA                   Dummy  7551     L(4)            4     5     1        ARG,OUT          7564                              
 GET_DATA1D                 Local  7559     L(4)            4     1     0                         7565                              
 GET_LEN                    Dummy  7551     I(4)            4           scalar   ARG,IN           7559,7565                         
 LOC                        Func   7563                                 scalar                    7563,7564                         
 MPP_TRANSMIT_LOGICAL4_5D   Subr   7551                                          PRIV             7711,7721                         
 PTRG                       Local  7562     I(8)            8           scalar   PTR              7564                              
 PTRP                       Local  7561     I(8)            8           scalar   PTR              7563                              
 PUT_DATA                   Dummy  7551     L(4)            4     5     1        ARG,IN           7563                              
 PUT_DATA1D                 Local  7559     L(4)            4     1     0                         7565                              
 PUT_LEN                    Dummy  7551     I(4)            4           scalar   ARG,IN           7559,7565                         
 RECV_REQUEST               Dummy  7552     I(4)            4           scalar   ARG,OUT          7566                              
 SEND_REQUEST               Dummy  7552     I(4)            4           scalar   ARG,OUT          7566                              
 TAG                        Dummy  7551     I(4)            4           scalar   ARG,IN           7565                              
 TO_PE                      Dummy  7551     I(4)            4           scalar   ARG,IN           7565                              

Page 328         Source Listing                  MPP_TRANSMIT_LOGICAL4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7570 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7571 !                                                                             !
   7572 !                              MPP_SEND and RECV                              !
   7573 !                                                                             !
   7574 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7575 
   7576     subroutine mpp_recv_logical4( get_data, get_len, from_pe, block, tag, request )
   7577 !a mpp_transmit with null arguments on the put side
   7578       integer, intent(in) :: get_len, from_pe
   7579       logical(l4_kind), intent(out) :: get_data(*)
   7580       logical, intent(in), optional :: block
   7581       integer, intent(in), optional :: tag
   7582       integer, intent(out), optional :: request
   7583 
   7584       logical(l4_kind) :: dummy(1)
   7585       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   7586     end subroutine mpp_recv_logical4


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_recv_logical4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7576     L(4)            4           scalar   ARG,IN           7585                              
 DUMMY                      Local  7584     L(4)            4     1     1                         7585                              
 FROM_PE                    Dummy  7576     I(4)            4           scalar   ARG,IN           7585                              
 GET_DATA                   Dummy  7576     L(4)            4     1     0        ARG,OUT          7585                              
 GET_LEN                    Dummy  7576     I(4)            4           scalar   ARG,IN           7585                              
 MPP_RECV_LOGICAL4          Subr   7576                                          PRIV                                               
 REQUEST                    Dummy  7576     I(4)            4           scalar   ARG,OUT          7585                              
 TAG                        Dummy  7576     I(4)            4           scalar   ARG,IN           7585                              

Page 329         Source Listing                  MPP_RECV_LOGICAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7587 
   7588     subroutine mpp_send_logical4( put_data, put_len, to_pe, tag, request )
   7589 !a mpp_transmit with null arguments on the get side
   7590       integer, intent(in) :: put_len, to_pe
   7591       logical(l4_kind), intent(in) :: put_data(*)
   7592       integer, intent(in), optional :: tag
   7593       integer, intent(out), optional :: request
   7594       logical(l4_kind) :: dummy(1)
   7595       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag=tag, send_request=request )
   7596     end subroutine mpp_send_logical4


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_send_logical4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7594     L(4)            4     1     1                         7595                              
 MPP_SEND_LOGICAL4          Subr   7588                                          PRIV                                               
 PUT_DATA                   Dummy  7588     L(4)            4     1     0        ARG,IN           7595                              
 PUT_LEN                    Dummy  7588     I(4)            4           scalar   ARG,IN           7595                              
 REQUEST                    Dummy  7588     I(4)            4           scalar   ARG,OUT          7595                              
 TAG                        Dummy  7588     I(4)            4           scalar   ARG,IN           7595                              
 TO_PE                      Dummy  7588     I(4)            4           scalar   ARG,IN           7595                              

Page 330         Source Listing                  MPP_SEND_LOGICAL4
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7597 
   7598     subroutine mpp_recv_logical4_scalar( get_data, from_pe, glen, block, tag, request )
   7599 !a mpp_transmit with null arguments on the put side
   7600       integer, intent(in) :: from_pe
   7601       logical(l4_kind), intent(out) :: get_data
   7602       logical, intent(in), optional :: block
   7603       integer, intent(in), optional :: tag
   7604       integer, intent(out), optional :: request
   7605 
   7606       integer, optional, intent(in) :: glen
   7607       integer                       :: get_len
   7608       logical(l4_kind) :: get_data1D(1)
   7609       logical(l4_kind) :: dummy(1)
   7610 
   7611       pointer( ptr, get_data1D )
   7612       ptr = LOC(get_data)
   7613       get_len=1; if(PRESENT(glen))get_len=glen
   7614       call mpp_transmit( dummy, 1, NULL_PE, get_data1D, get_len, from_pe, block, tag, recv_request=request )
   7615 
   7616     end subroutine mpp_recv_logical4_scalar


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_recv_logical4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7598     L(4)            4           scalar   ARG,IN           7614                              
 DUMMY                      Local  7609     L(4)            4     1     1                         7614                              
 FROM_PE                    Dummy  7598     I(4)            4           scalar   ARG,IN           7614                              
 GET_DATA                   Dummy  7598     L(4)            4           scalar   ARG,TGT,OUT      7612                              
 GET_DATA1D                 Local  7608     L(4)            4     1     1                         7614                              
 GET_LEN                    Local  7607     I(4)            4           scalar                    7613,7614                         
 GLEN                       Dummy  7598     I(4)            4           scalar   ARG,IN           7613                              
 LOC                        Func   7612                                 scalar                    7612                              
 MPP_RECV_LOGICAL4_SCALAR   Subr   7598                                          PRIV             13532,13574                       
 PRESENT                    Func   7613                                 scalar                    7613                              
 PTR                        Local  7611     I(8)            8           scalar   PTR              7612                              
 REQUEST                    Dummy  7598     I(4)            4           scalar   ARG,OUT          7614                              
 TAG                        Dummy  7598     I(4)            4           scalar   ARG,IN           7614                              

Page 331         Source Listing                  MPP_RECV_LOGICAL4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7617 
   7618     subroutine mpp_send_logical4_scalar( put_data, to_pe, plen, tag, request)
   7619 !a mpp_transmit with null arguments on the get side
   7620       integer, intent(in) :: to_pe
   7621       logical(l4_kind), intent(in) :: put_data
   7622       integer, optional, intent(in) :: plen
   7623       integer, intent(in), optional :: tag
   7624       integer, intent(out), optional :: request
   7625       integer                       :: put_len
   7626       logical(l4_kind) :: put_data1D(1)
   7627       logical(l4_kind) :: dummy(1)
   7628 
   7629       pointer( ptr, put_data1D )
   7630       ptr = LOC(put_data)
   7631       put_len=1; if(PRESENT(plen))put_len=plen
   7632       call mpp_transmit( put_data1D, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   7633 
   7634     end subroutine mpp_send_logical4_scalar


ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_send_logical4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7627     L(4)            4     1     1                         7632                              
 LOC                        Func   7630                                 scalar                    7630                              
 MPP_SEND_LOGICAL4_SCALAR   Subr   7618                                          PRIV             13535,13580                       
 PLEN                       Dummy  7618     I(4)            4           scalar   ARG,IN           7631                              
 PRESENT                    Func   7631                                 scalar                    7631                              
 PTR                        Local  7629     I(8)            8           scalar   PTR              7630                              
 PUT_DATA                   Dummy  7618     L(4)            4           scalar   ARG,TGT,IN       7630                              
 PUT_DATA1D                 Local  7626     L(4)            4     1     1                         7632                              
 PUT_LEN                    Local  7625     I(4)            4           scalar                    7631,7632                         
 REQUEST                    Dummy  7618     I(4)            4           scalar   ARG,OUT          7632                              
 TAG                        Dummy  7618     I(4)            4           scalar   ARG,IN           7632                              
 TO_PE                      Dummy  7618     I(4)            4           scalar   ARG,IN           7632                              

Page 332         Source Listing                  MPP_SEND_LOGICAL4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7635 
   7636     subroutine mpp_recv_logical4_2d( get_data, get_len, from_pe, block, tag, request )
   7637 !a mpp_transmit with null arguments on the put side
   7638       integer, intent(in) :: get_len, from_pe
   7639       logical(l4_kind), intent(out) :: get_data(:,:)
   7640       logical, intent(in), optional :: block
   7641       integer, intent(in), optional :: tag
   7642       integer, intent(out), optional :: request
   7643 
   7644       logical(l4_kind) :: dummy(1,1)
   7645       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   7646     end subroutine mpp_recv_logical4_2d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_recv_logical4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7636     L(4)            4           scalar   ARG,IN           7645                              
 DUMMY                      Local  7644     L(4)            4     2     1        TGT              7645                              
 FROM_PE                    Dummy  7636     I(4)            4           scalar   ARG,IN           7645                              
 GET_DATA                   Dummy  7636     L(4)            4     2     1        ARG,OUT          7645                              
 GET_LEN                    Dummy  7636     I(4)            4           scalar   ARG,IN           7645                              
 MPP_RECV_LOGICAL4_2D       Subr   7636                                          PRIV                                               
 REQUEST                    Dummy  7636     I(4)            4           scalar   ARG,OUT          7645                              
 TAG                        Dummy  7636     I(4)            4           scalar   ARG,IN           7645                              

Page 333         Source Listing                  MPP_RECV_LOGICAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7647 
   7648     subroutine mpp_send_logical4_2d( put_data, put_len, to_pe, tag, request )
   7649 !a mpp_transmit with null arguments on the get side
   7650       integer, intent(in) :: put_len, to_pe
   7651       logical(l4_kind), intent(in) :: put_data(:,:)
   7652       integer, intent(in), optional :: tag
   7653       integer, intent(out), optional :: request
   7654       logical(l4_kind) :: dummy(1,1)
   7655       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   7656     end subroutine mpp_send_logical4_2d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_send_logical4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7654     L(4)            4     2     1        TGT              7655                              
 MPP_SEND_LOGICAL4_2D       Subr   7648                                          PRIV                                               
 PUT_DATA                   Dummy  7648     L(4)            4     2     1        ARG,IN           7655                              
 PUT_LEN                    Dummy  7648     I(4)            4           scalar   ARG,IN           7655                              
 REQUEST                    Dummy  7648     I(4)            4           scalar   ARG,OUT          7655                              
 TAG                        Dummy  7648     I(4)            4           scalar   ARG,IN           7655                              
 TO_PE                      Dummy  7648     I(4)            4           scalar   ARG,IN           7655                              

Page 334         Source Listing                  MPP_SEND_LOGICAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7657 
   7658     subroutine mpp_recv_logical4_3d( get_data, get_len, from_pe, block, tag, request )
   7659 !a mpp_transmit with null arguments on the put side
   7660       integer, intent(in) :: get_len, from_pe
   7661       logical(l4_kind), intent(out) :: get_data(:,:,:)
   7662       logical, intent(in), optional :: block
   7663       integer, intent(in), optional :: tag
   7664       integer, intent(out), optional :: request
   7665 
   7666       logical(l4_kind) :: dummy(1,1,1)
   7667       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   7668     end subroutine mpp_recv_logical4_3d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_recv_logical4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7658     L(4)            4           scalar   ARG,IN           7667                              
 DUMMY                      Local  7666     L(4)            4     3     1        TGT              7667                              
 FROM_PE                    Dummy  7658     I(4)            4           scalar   ARG,IN           7667                              
 GET_DATA                   Dummy  7658     L(4)            4     3     1        ARG,OUT          7667                              
 GET_LEN                    Dummy  7658     I(4)            4           scalar   ARG,IN           7667                              
 MPP_RECV_LOGICAL4_3D       Subr   7658                                          PRIV             13696                             
 REQUEST                    Dummy  7658     I(4)            4           scalar   ARG,OUT          7667                              
 TAG                        Dummy  7658     I(4)            4           scalar   ARG,IN           7667                              

Page 335         Source Listing                  MPP_RECV_LOGICAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7669 
   7670     subroutine mpp_send_logical4_3d( put_data, put_len, to_pe, tag, request )
   7671 !a mpp_transmit with null arguments on the get side
   7672       integer, intent(in) :: put_len, to_pe
   7673       logical(l4_kind), intent(in) :: put_data(:,:,:)
   7674       integer, intent(in), optional :: tag
   7675       integer, intent(out), optional :: request
   7676       logical(l4_kind) :: dummy(1,1,1)
   7677       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   7678     end subroutine mpp_send_logical4_3d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_send_logical4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7676     L(4)            4     3     1        TGT              7677                              
 MPP_SEND_LOGICAL4_3D       Subr   7670                                          PRIV             13718                             
 PUT_DATA                   Dummy  7670     L(4)            4     3     1        ARG,IN           7677                              
 PUT_LEN                    Dummy  7670     I(4)            4           scalar   ARG,IN           7677                              
 REQUEST                    Dummy  7670     I(4)            4           scalar   ARG,OUT          7677                              
 TAG                        Dummy  7670     I(4)            4           scalar   ARG,IN           7677                              
 TO_PE                      Dummy  7670     I(4)            4           scalar   ARG,IN           7677                              

Page 336         Source Listing                  MPP_SEND_LOGICAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7679 
   7680     subroutine mpp_recv_logical4_4d( get_data, get_len, from_pe, block, tag, request )
   7681 !a mpp_transmit with null arguments on the put side
   7682       integer, intent(in) :: get_len, from_pe
   7683       logical(l4_kind), intent(out) :: get_data(:,:,:,:)
   7684       logical, intent(in), optional :: block
   7685       integer, intent(in), optional :: tag
   7686       integer, intent(out), optional :: request
   7687 
   7688       logical(l4_kind) :: dummy(1,1,1,1)
   7689       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   7690     end subroutine mpp_recv_logical4_4d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_recv_logical4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7680     L(4)            4           scalar   ARG,IN           7689                              
 DUMMY                      Local  7688     L(4)            4     4     1        TGT              7689                              
 FROM_PE                    Dummy  7680     I(4)            4           scalar   ARG,IN           7689                              
 GET_DATA                   Dummy  7680     L(4)            4     4     1        ARG,OUT          7689                              
 GET_LEN                    Dummy  7680     I(4)            4           scalar   ARG,IN           7689                              
 MPP_RECV_LOGICAL4_4D       Subr   7680                                          PRIV                                               
 REQUEST                    Dummy  7680     I(4)            4           scalar   ARG,OUT          7689                              
 TAG                        Dummy  7680     I(4)            4           scalar   ARG,IN           7689                              

Page 337         Source Listing                  MPP_RECV_LOGICAL4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7691 
   7692     subroutine mpp_send_logical4_4d( put_data, put_len, to_pe, tag, request )
   7693 !a mpp_transmit with null arguments on the get side
   7694       integer, intent(in) :: put_len, to_pe
   7695       logical(l4_kind), intent(in) :: put_data(:,:,:,:)
   7696       integer, intent(in), optional :: tag
   7697       integer, intent(out), optional :: request
   7698       logical(l4_kind) :: dummy(1,1,1,1)
   7699       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   7700     end subroutine mpp_send_logical4_4d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_send_logical4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7698     L(4)            4     4     1        TGT              7699                              
 MPP_SEND_LOGICAL4_4D       Subr   7692                                          PRIV                                               
 PUT_DATA                   Dummy  7692     L(4)            4     4     1        ARG,IN           7699                              
 PUT_LEN                    Dummy  7692     I(4)            4           scalar   ARG,IN           7699                              
 REQUEST                    Dummy  7692     I(4)            4           scalar   ARG,OUT          7699                              
 TAG                        Dummy  7692     I(4)            4           scalar   ARG,IN           7699                              
 TO_PE                      Dummy  7692     I(4)            4           scalar   ARG,IN           7699                              

Page 338         Source Listing                  MPP_SEND_LOGICAL4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7701 
   7702     subroutine mpp_recv_logical4_5d( get_data, get_len, from_pe, block, tag, request)
   7703 !a mpp_transmit with null arguments on the put side
   7704       integer, intent(in) :: get_len, from_pe
   7705       logical(l4_kind), intent(out) :: get_data(:,:,:,:,:)
   7706       logical, intent(in), optional :: block
   7707       integer, intent(in), optional :: tag
   7708       integer, intent(out), optional :: request
   7709 
   7710       logical(l4_kind) :: dummy(1,1,1,1,1)
   7711       call mpp_transmit( dummy, 1, NULL_PE, get_data, get_len, from_pe, block, tag, recv_request=request )
   7712     end subroutine mpp_recv_logical4_5d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_recv_logical4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCK                      Dummy  7702     L(4)            4           scalar   ARG,IN           7711                              
 DUMMY                      Local  7710     L(4)            4     5     1        TGT              7711                              
 FROM_PE                    Dummy  7702     I(4)            4           scalar   ARG,IN           7711                              
 GET_DATA                   Dummy  7702     L(4)            4     5     1        ARG,OUT          7711                              
 GET_LEN                    Dummy  7702     I(4)            4           scalar   ARG,IN           7711                              
 MPP_RECV_LOGICAL4_5D       Subr   7702                                          PRIV                                               
 REQUEST                    Dummy  7702     I(4)            4           scalar   ARG,OUT          7711                              
 TAG                        Dummy  7702     I(4)            4           scalar   ARG,IN           7711                              

Page 339         Source Listing                  MPP_RECV_LOGICAL4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7713 
   7714     subroutine mpp_send_logical4_5d( put_data, put_len, to_pe, tag, request )
   7715 !a mpp_transmit with null arguments on the get side
   7716       integer, intent(in) :: put_len, to_pe
   7717       logical(l4_kind), intent(in) :: put_data(:,:,:,:,:)
   7718       integer, intent(in), optional :: tag
   7719       integer, intent(out), optional :: request
   7720       logical(l4_kind) :: dummy(1,1,1,1,1)
   7721       call mpp_transmit( put_data, put_len, to_pe, dummy, 1, NULL_PE, tag = tag, send_request=request )
   7722     end subroutine mpp_send_logical4_5d


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_send_logical4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DUMMY                      Local  7720     L(4)            4     5     1        TGT              7721                              
 MPP_SEND_LOGICAL4_5D       Subr   7714                                          PRIV                                               
 PUT_DATA                   Dummy  7714     L(4)            4     5     1        ARG,IN           7721                              
 PUT_LEN                    Dummy  7714     I(4)            4           scalar   ARG,IN           7721                              
 REQUEST                    Dummy  7714     I(4)            4           scalar   ARG,OUT          7721                              
 TAG                        Dummy  7714     I(4)            4           scalar   ARG,IN           7721                              
 TO_PE                      Dummy  7714     I(4)            4           scalar   ARG,IN           7721                              

Page 340         Source Listing                  MPP_SEND_LOGICAL4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7723 
   7724 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7725 !                                                                             !
   7726 !                                MPP_BROADCAST                                !
   7727 !                                                                             !
   7728 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7729 
   7730     subroutine mpp_broadcast_logical4_scalar( data, from_pe, pelist )
   7731       logical(l4_kind), intent(inout) :: data
   7732       integer, intent(in) :: from_pe
   7733       integer, intent(in), optional :: pelist(:)
   7734       logical(l4_kind) :: data1D(1)
   7735 
   7736       pointer( ptr, data1D )
   7737 
   7738       ptr = LOC(data)
   7739       call mpp_broadcast_logical4( data1D, 1, from_pe, pelist )
   7740 
   7741       return
   7742     end subroutine mpp_broadcast_logical4_scalar


ENTRY POINTS

  Name                                                 
                                                       
 mpp_mod_mp_mpp_broadcast_logical4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7730     L(4)            4           scalar   ARG,TGT,INOUT    7738                              
 DATA1D                     Local  7734     L(4)            4     1     1                         7739                              
 FROM_PE                    Dummy  7730     I(4)            4           scalar   ARG,IN           7739                              
 LOC                        Func   7738                                 scalar                    7738                              
 MPP_BROADCAST_LOGICAL4_SCA                                                                                                         
 LAR                        Subr   7730                                          PRIV                                               
 PELIST                     Dummy  7730     I(4)            4     1     1        ARG,IN           7739                              
 PTR                        Local  7736     I(8)            8           scalar   PTR              7738                              

Page 341         Source Listing                  MPP_BROADCAST_LOGICAL4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7743 
   7744     subroutine mpp_broadcast_logical4_2d( data, length, from_pe, pelist )
   7745 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   7746 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   7747 !backward compatible.
   7748       logical(l4_kind), intent(inout) :: data(:,:)
   7749       integer, intent(in) :: length, from_pe
   7750       integer, intent(in), optional :: pelist(:)
   7751       logical(l4_kind) :: data1D(length)
   7752 
   7753       pointer( ptr, data1D )
   7754       ptr = LOC(data)
   7755       call mpp_broadcast( data1D, length, from_pe, pelist )
   7756 
   7757       return
   7758     end subroutine mpp_broadcast_logical4_2d


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_broadcast_logical4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7744     L(4)            4     2     1        ARG,INOUT        7754                              
 DATA1D                     Local  7751     L(4)            4     1     0                         7755                              
 FROM_PE                    Dummy  7744     I(4)            4           scalar   ARG,IN           7755                              
 LENGTH                     Dummy  7744     I(4)            4           scalar   ARG,IN           7751,7755                         
 LOC                        Func   7754                                 scalar                    7754                              
 MPP_BROADCAST_LOGICAL4_2D  Subr   7744                                          PRIV                                               
 PELIST                     Dummy  7744     I(4)            4     1     1        ARG,IN           7755                              
 PTR                        Local  7753     I(8)            8           scalar   PTR              7754                              

Page 342         Source Listing                  MPP_BROADCAST_LOGICAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7759 
   7760     subroutine mpp_broadcast_logical4_3d( data, length, from_pe, pelist )
   7761 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   7762 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   7763 !backward compatible.
   7764       logical(l4_kind), intent(inout) :: data(:,:,:)
   7765       integer, intent(in) :: length, from_pe
   7766       integer, intent(in), optional :: pelist(:)
   7767       logical(l4_kind) :: data1D(length)
   7768 
   7769       pointer( ptr, data1D )
   7770       ptr = LOC(data)
   7771       call mpp_broadcast( data1D, length, from_pe, pelist )
   7772 
   7773       return
   7774    end subroutine mpp_broadcast_logical4_3d


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_broadcast_logical4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7760     L(4)            4     3     1        ARG,INOUT        7770                              
 DATA1D                     Local  7767     L(4)            4     1     0                         7771                              
 FROM_PE                    Dummy  7760     I(4)            4           scalar   ARG,IN           7771                              
 LENGTH                     Dummy  7760     I(4)            4           scalar   ARG,IN           7767,7771                         
 LOC                        Func   7770                                 scalar                    7770                              
 MPP_BROADCAST_LOGICAL4_3D  Subr   7760                                          PRIV                                               
 PELIST                     Dummy  7760     I(4)            4     1     1        ARG,IN           7771                              
 PTR                        Local  7769     I(8)            8           scalar   PTR              7770                              

Page 343         Source Listing                  MPP_BROADCAST_LOGICAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7775 
   7776     subroutine mpp_broadcast_logical4_4d( data, length, from_pe, pelist )
   7777 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   7778 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   7779 !backward compatible.
   7780       logical(l4_kind), intent(inout) :: data(:,:,:,:)
   7781       integer, intent(in) :: length, from_pe
   7782       integer, intent(in), optional :: pelist(:)
   7783       logical(l4_kind) :: data1D(length)
   7784 
   7785       pointer( ptr, data1D )
   7786       ptr = LOC(data)
   7787       call mpp_broadcast( data1D, length, from_pe, pelist )
   7788 
   7789       return
   7790     end subroutine mpp_broadcast_logical4_4d


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_broadcast_logical4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7776     L(4)            4     4     1        ARG,INOUT        7786                              
 DATA1D                     Local  7783     L(4)            4     1     0                         7787                              
 FROM_PE                    Dummy  7776     I(4)            4           scalar   ARG,IN           7787                              
 LENGTH                     Dummy  7776     I(4)            4           scalar   ARG,IN           7783,7787                         
 LOC                        Func   7786                                 scalar                    7786                              
 MPP_BROADCAST_LOGICAL4_4D  Subr   7776                                          PRIV                                               
 PELIST                     Dummy  7776     I(4)            4     1     1        ARG,IN           7787                              
 PTR                        Local  7785     I(8)            8           scalar   PTR              7786                              

Page 344         Source Listing                  MPP_BROADCAST_LOGICAL4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7791 
   7792     subroutine mpp_broadcast_logical4_5d( data, length, from_pe, pelist )
   7793 !this call was originally bundled in with mpp_transmit, but that doesn't allow
   7794 !broadcast to a subset of PEs. This version will, and mpp_transmit will remain
   7795 !backward compatible.
   7796       logical(l4_kind), intent(inout) :: data(:,:,:,:,:)
   7797       integer, intent(in) :: length, from_pe
   7798       integer, intent(in), optional :: pelist(:)
   7799       logical(l4_kind) :: data1D(length)
   7800 
   7801       pointer( ptr, data1D )
   7802       ptr = LOC(data)
   7803       call mpp_broadcast( data1D, length, from_pe, pelist )
   7804 
   7805       return
   7806     end subroutine mpp_broadcast_logical4_5d


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_broadcast_logical4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7792     L(4)            4     5     1        ARG,INOUT        7802                              
 DATA1D                     Local  7799     L(4)            4     1     0                         7803                              
 FROM_PE                    Dummy  7792     I(4)            4           scalar   ARG,IN           7803                              
 LENGTH                     Dummy  7792     I(4)            4           scalar   ARG,IN           7799,7803                         
 LOC                        Func   7802                                 scalar                    7802                              
 MPP_BROADCAST_LOGICAL4_5D  Subr   7792                                          PRIV                                               
 PELIST                     Dummy  7792     I(4)            4     1     1        ARG,IN           7803                              
 PTR                        Local  7801     I(8)            8           scalar   PTR              7802                              

Page 345         Source Listing                  MPP_BROADCAST_LOGICAL4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_transmit.inc

   7807 # 201 "../mpp/include/mpp_transmit_mpi.h" 2 
   7808 # 852 "../mpp/include/mpp_comm_mpi.inc" 2 
   7809 
   7810 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7811 !                                                                             !
   7812 !            GLOBAL REDUCTION ROUTINES: mpp_max, mpp_sum, mpp_min             !
   7813 !                                                                             !
   7814 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   7815 
   7816 
   7817 
   7818 
   7819 
   7820 
   7821 
   7822 
   7823 
   7824 
   7825 
   7826 
   7827 # 1 "../mpp/include/mpp_reduce_mpi.h" 1 
   7828 !***********************************************************************
   7829 !*                   GNU Lesser General Public License
   7830 !*
   7831 !* This file is part of the GFDL Flexible Modeling System (FMS).
   7832 !*
   7833 !* FMS is free software: you can redistribute it and/or modify it under
   7834 !* the terms of the GNU Lesser General Public License as published by
   7835 !* the Free Software Foundation, either version 3 of the License, or (at
   7836 !* your option) any later version.
   7837 !*
   7838 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   7839 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   7840 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   7841 !* for more details.
   7842 !*
   7843 !* You should have received a copy of the GNU Lesser General Public
   7844 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   7845 !***********************************************************************
   7846     subroutine mpp_max_real8_0d( a, pelist )
   7847 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   7848 !result is also automatically broadcast to all PEs
   7849       real(r8_kind), intent(inout) :: a
   7850       integer, intent(in), optional :: pelist(0:)
   7851       integer :: n
   7852       real(r8_kind) :: work
   7853 
   7854       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_0D: You must first call mpp_init.' )
   7855       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   7856 
   7857       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   7858       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_0D_: using MPI_ALLREDUCE...' )
   7859       call MPI_ALLREDUCE( a, work, 1, MPI_REAL8, MPI_MAX, peset(n)%id, error )
   7860       a = work
   7861       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 8 )
   7862       return
   7863     end subroutine mpp_max_real8_0d

Page 346         Source Listing                  MPP_MAX_REAL8_0D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_reduce_mpi.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_max_real8_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  7846     R(8)            8           scalar   ARG,INOUT        7859,7860                         
 MPI_ALLREDUCE              Subr   7859                                                           7859                              
 MPI_MAX                    Param  7859     I(4)            4           scalar   PRIV             7859,7879,7932,7952,8005,8025,8078
                                                                                                  ,8098                             
 MPP_MAX_REAL8_0D           Subr   7846                                          PRIV             3923,3950,3956                    
 N                          Local  7851     I(4)            4           scalar                    7855,7859                         
 PELIST                     Dummy  7846     I(4)            4     1     1        ARG,IN           7855                              
 WORK                       Local  7852     R(8)            8           scalar                    7859,7860                         

Page 347         Source Listing                  MPP_MAX_REAL8_0D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   7864 
   7865     subroutine mpp_max_real8_1d( a, length, pelist )
   7866 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   7867 !result is also automatically broadcast to all PEs
   7868       real(r8_kind), intent(inout) :: a(:)
   7869       integer,   intent(in)    :: length
   7870       integer, intent(in), optional :: pelist(0:)
   7871       integer :: n
   7872       real(r8_kind) :: work(length)
   7873 
   7874       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_1D: You must first call mpp_init.' )
   7875       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   7876 
   7877       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   7878       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_1D_: using MPI_ALLREDUCE...' )
   7879       call MPI_ALLREDUCE( a, work, length, MPI_REAL8, MPI_MAX, peset(n)%id, error )
   7880       a(1:length) = work(1:length)
   7881       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 8 )
   7882       return
   7883     end subroutine mpp_max_real8_1d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_max_real8_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  7865     R(8)            8     1     1        ARG,INOUT        7879,7880                         
 LENGTH                     Dummy  7865     I(4)            4           scalar   ARG,IN           7872,7879,7880                    
 MPI_ALLREDUCE              Subr   7879                                                           7879                              
 MPP_MAX_REAL8_1D           Subr   7865                                          PRIV                                               
 N                          Local  7871     I(4)            4           scalar                    7875,7879                         
 PELIST                     Dummy  7865     I(4)            4     1     1        ARG,IN           7875                              
 WORK                       Local  7872     R(8)            8     1     0                         7879,7880                         

Page 348         Source Listing                  MPP_MAX_REAL8_1D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   7884 
   7885 
   7886 # 871 "../mpp/include/mpp_comm_mpi.inc" 2 
   7887 
   7888 
   7889 
   7890 
   7891 
   7892 
   7893 
   7894 
   7895 
   7896 
   7897 
   7898 
   7899 
   7900 # 1 "../mpp/include/mpp_reduce_mpi.h" 1 
   7901 !***********************************************************************
   7902 !*                   GNU Lesser General Public License
   7903 !*
   7904 !* This file is part of the GFDL Flexible Modeling System (FMS).
   7905 !*
   7906 !* FMS is free software: you can redistribute it and/or modify it under
   7907 !* the terms of the GNU Lesser General Public License as published by
   7908 !* the Free Software Foundation, either version 3 of the License, or (at
   7909 !* your option) any later version.
   7910 !*
   7911 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   7912 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   7913 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   7914 !* for more details.
   7915 !*
   7916 !* You should have received a copy of the GNU Lesser General Public
   7917 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   7918 !***********************************************************************
   7919     subroutine mpp_max_real4_0d( a, pelist )
   7920 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   7921 !result is also automatically broadcast to all PEs
   7922       real(r4_kind), intent(inout) :: a
   7923       integer, intent(in), optional :: pelist(0:)
   7924       integer :: n
   7925       real(r4_kind) :: work
   7926 
   7927       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_0D: You must first call mpp_init.' )
   7928       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   7929 
   7930       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   7931       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_0D_: using MPI_ALLREDUCE...' )
   7932       call MPI_ALLREDUCE( a, work, 1, MPI_REAL4, MPI_MAX, peset(n)%id, error )
   7933       a = work
   7934       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 4 )
   7935       return
   7936     end subroutine mpp_max_real4_0d

Page 349         Source Listing                  MPP_MAX_REAL4_0D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_reduce_mpi.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_max_real4_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  7919     R(4)            4           scalar   ARG,INOUT        7932,7933                         
 MPI_ALLREDUCE              Subr   7932                                                           7932                              
 MPP_MAX_REAL4_0D           Subr   7919                                          PRIV                                               
 N                          Local  7924     I(4)            4           scalar                    7928,7932                         
 PELIST                     Dummy  7919     I(4)            4     1     1        ARG,IN           7928                              
 WORK                       Local  7925     R(4)            4           scalar                    7932,7933                         

Page 350         Source Listing                  MPP_MAX_REAL4_0D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   7937 
   7938     subroutine mpp_max_real4_1d( a, length, pelist )
   7939 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   7940 !result is also automatically broadcast to all PEs
   7941       real(r4_kind), intent(inout) :: a(:)
   7942       integer,   intent(in)    :: length
   7943       integer, intent(in), optional :: pelist(0:)
   7944       integer :: n
   7945       real(r4_kind) :: work(length)
   7946 
   7947       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_1D: You must first call mpp_init.' )
   7948       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   7949 
   7950       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   7951       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_1D_: using MPI_ALLREDUCE...' )
   7952       call MPI_ALLREDUCE( a, work, length, MPI_REAL4, MPI_MAX, peset(n)%id, error )
   7953       a(1:length) = work(1:length)
   7954       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 4 )
   7955       return
   7956     end subroutine mpp_max_real4_1d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_max_real4_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  7938     R(4)            4     1     1        ARG,INOUT        7952,7953                         
 LENGTH                     Dummy  7938     I(4)            4           scalar   ARG,IN           7945,7952,7953                    
 MPI_ALLREDUCE              Subr   7952                                                           7952                              
 MPP_MAX_REAL4_1D           Subr   7938                                          PRIV                                               
 N                          Local  7944     I(4)            4           scalar                    7948,7952                         
 PELIST                     Dummy  7938     I(4)            4     1     1        ARG,IN           7948                              
 WORK                       Local  7945     R(4)            4     1     0                         7952,7953                         

Page 351         Source Listing                  MPP_MAX_REAL4_1D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   7957 
   7958 
   7959 # 885 "../mpp/include/mpp_comm_mpi.inc" 2 
   7960 
   7961 
   7962 
   7963 
   7964 
   7965 
   7966 
   7967 
   7968 
   7969 
   7970 
   7971 
   7972 
   7973 # 1 "../mpp/include/mpp_reduce_mpi.h" 1 
   7974 !***********************************************************************
   7975 !*                   GNU Lesser General Public License
   7976 !*
   7977 !* This file is part of the GFDL Flexible Modeling System (FMS).
   7978 !*
   7979 !* FMS is free software: you can redistribute it and/or modify it under
   7980 !* the terms of the GNU Lesser General Public License as published by
   7981 !* the Free Software Foundation, either version 3 of the License, or (at
   7982 !* your option) any later version.
   7983 !*
   7984 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   7985 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   7986 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   7987 !* for more details.
   7988 !*
   7989 !* You should have received a copy of the GNU Lesser General Public
   7990 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   7991 !***********************************************************************
   7992     subroutine mpp_max_int8_0d( a, pelist )
   7993 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   7994 !result is also automatically broadcast to all PEs
   7995       integer(i8_kind), intent(inout) :: a
   7996       integer, intent(in), optional :: pelist(0:)
   7997       integer :: n
   7998       integer(i8_kind) :: work
   7999 
   8000       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_0D: You must first call mpp_init.' )
   8001       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8002 
   8003       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8004       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_0D_: using MPI_ALLREDUCE...' )
   8005       call MPI_ALLREDUCE( a, work, 1, MPI_INTEGER8, MPI_MAX, peset(n)%id, error )
   8006       a = work
   8007       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 8 )
   8008       return
   8009     end subroutine mpp_max_int8_0d

Page 352         Source Listing                  MPP_MAX_INT8_0D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_reduce_mpi.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_max_int8_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  7992     I(8)            8           scalar   ARG,INOUT        8005,8006                         
 MPI_ALLREDUCE              Subr   8005                                                           8005                              
 MPP_MAX_INT8_0D            Subr   7992                                          PRIV                                               
 N                          Local  7997     I(4)            4           scalar                    8001,8005                         
 PELIST                     Dummy  7992     I(4)            4     1     1        ARG,IN           8001                              
 WORK                       Local  7998     I(8)            8           scalar                    8005,8006                         

Page 353         Source Listing                  MPP_MAX_INT8_0D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8010 
   8011     subroutine mpp_max_int8_1d( a, length, pelist )
   8012 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8013 !result is also automatically broadcast to all PEs
   8014       integer(i8_kind), intent(inout) :: a(:)
   8015       integer,   intent(in)    :: length
   8016       integer, intent(in), optional :: pelist(0:)
   8017       integer :: n
   8018       integer(i8_kind) :: work(length)
   8019 
   8020       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_1D: You must first call mpp_init.' )
   8021       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8022 
   8023       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8024       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_1D_: using MPI_ALLREDUCE...' )
   8025       call MPI_ALLREDUCE( a, work, length, MPI_INTEGER8, MPI_MAX, peset(n)%id, error )
   8026       a(1:length) = work(1:length)
   8027       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 8 )
   8028       return
   8029     end subroutine mpp_max_int8_1d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_max_int8_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8011     I(8)            8     1     1        ARG,INOUT        8025,8026                         
 LENGTH                     Dummy  8011     I(4)            4           scalar   ARG,IN           8018,8025,8026                    
 MPI_ALLREDUCE              Subr   8025                                                           8025                              
 MPP_MAX_INT8_1D            Subr   8011                                          PRIV                                               
 N                          Local  8017     I(4)            4           scalar                    8021,8025                         
 PELIST                     Dummy  8011     I(4)            4     1     1        ARG,IN           8021                              
 WORK                       Local  8018     I(8)            8     1     0                         8025,8026                         

Page 354         Source Listing                  MPP_MAX_INT8_1D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8030 
   8031 
   8032 # 899 "../mpp/include/mpp_comm_mpi.inc" 2 
   8033 
   8034 
   8035 
   8036 
   8037 
   8038 
   8039 
   8040 
   8041 
   8042 
   8043 
   8044 
   8045 
   8046 # 1 "../mpp/include/mpp_reduce_mpi.h" 1 
   8047 !***********************************************************************
   8048 !*                   GNU Lesser General Public License
   8049 !*
   8050 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8051 !*
   8052 !* FMS is free software: you can redistribute it and/or modify it under
   8053 !* the terms of the GNU Lesser General Public License as published by
   8054 !* the Free Software Foundation, either version 3 of the License, or (at
   8055 !* your option) any later version.
   8056 !*
   8057 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8058 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8059 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8060 !* for more details.
   8061 !*
   8062 !* You should have received a copy of the GNU Lesser General Public
   8063 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8064 !***********************************************************************
   8065     subroutine mpp_max_int4_0d( a, pelist )
   8066 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8067 !result is also automatically broadcast to all PEs
   8068       integer(i4_kind), intent(inout) :: a
   8069       integer, intent(in), optional :: pelist(0:)
   8070       integer :: n
   8071       integer(i4_kind) :: work
   8072 
   8073       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_0D: You must first call mpp_init.' )
   8074       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8075 
   8076       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8077       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_0D_: using MPI_ALLREDUCE...' )
   8078       call MPI_ALLREDUCE( a, work, 1, MPI_INTEGER4, MPI_MAX, peset(n)%id, error )
   8079       a = work
   8080       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 4 )
   8081       return
   8082     end subroutine mpp_max_int4_0d

Page 355         Source Listing                  MPP_MAX_INT4_0D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_reduce_mpi.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_max_int4_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8065     I(4)            4           scalar   ARG,INOUT        8078,8079                         
 MPI_ALLREDUCE              Subr   8078                                                           8078                              
 MPP_MAX_INT4_0D            Subr   8065                                          PRIV             3944,3987,13641,13898,14155,14412,
                                                                                                  14598,14777,14956                 
 N                          Local  8070     I(4)            4           scalar                    8074,8078                         
 PELIST                     Dummy  8065     I(4)            4     1     1        ARG,IN           8074                              
 WORK                       Local  8071     I(4)            4           scalar                    8078,8079                         

Page 356         Source Listing                  MPP_MAX_INT4_0D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8083 
   8084     subroutine mpp_max_int4_1d( a, length, pelist )
   8085 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8086 !result is also automatically broadcast to all PEs
   8087       integer(i4_kind), intent(inout) :: a(:)
   8088       integer,   intent(in)    :: length
   8089       integer, intent(in), optional :: pelist(0:)
   8090       integer :: n
   8091       integer(i4_kind) :: work(length)
   8092 
   8093       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_1D: You must first call mpp_init.' )
   8094       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8095 
   8096       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8097       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_1D_: using MPI_ALLREDUCE...' )
   8098       call MPI_ALLREDUCE( a, work, length, MPI_INTEGER4, MPI_MAX, peset(n)%id, error )
   8099       a(1:length) = work(1:length)
   8100       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 4 )
   8101       return
   8102     end subroutine mpp_max_int4_1d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_max_int4_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8084     I(4)            4     1     1        ARG,INOUT        8098,8099                         
 LENGTH                     Dummy  8084     I(4)            4           scalar   ARG,IN           8091,8098,8099                    
 MPI_ALLREDUCE              Subr   8098                                                           8098                              
 MPP_MAX_INT4_1D            Subr   8084                                          PRIV                                               
 N                          Local  8090     I(4)            4           scalar                    8094,8098                         
 PELIST                     Dummy  8084     I(4)            4     1     1        ARG,IN           8094                              
 WORK                       Local  8091     I(4)            4     1     0                         8098,8099                         

Page 357         Source Listing                  MPP_MAX_INT4_1D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8103 
   8104 
   8105 # 913 "../mpp/include/mpp_comm_mpi.inc" 2 
   8106 
   8107 
   8108 
   8109 
   8110 
   8111 
   8112 
   8113 
   8114 
   8115 
   8116 
   8117 
   8118 
   8119 # 1 "../mpp/include/mpp_reduce_mpi.h" 1 
   8120 !***********************************************************************
   8121 !*                   GNU Lesser General Public License
   8122 !*
   8123 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8124 !*
   8125 !* FMS is free software: you can redistribute it and/or modify it under
   8126 !* the terms of the GNU Lesser General Public License as published by
   8127 !* the Free Software Foundation, either version 3 of the License, or (at
   8128 !* your option) any later version.
   8129 !*
   8130 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8131 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8132 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8133 !* for more details.
   8134 !*
   8135 !* You should have received a copy of the GNU Lesser General Public
   8136 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8137 !***********************************************************************
   8138     subroutine mpp_min_real8_0d( a, pelist )
   8139 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8140 !result is also automatically broadcast to all PEs
   8141       real(r8_kind), intent(inout) :: a
   8142       integer, intent(in), optional :: pelist(0:)
   8143       integer :: n
   8144       real(r8_kind) :: work
   8145 
   8146       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_0D: You must first call mpp_init.' )
   8147       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8148 
   8149       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8150       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_0D_: using MPI_ALLREDUCE...' )
   8151       call MPI_ALLREDUCE( a, work, 1, MPI_REAL8, MPI_MIN, peset(n)%id, error )
   8152       a = work
   8153       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 8 )
   8154       return
   8155     end subroutine mpp_min_real8_0d

Page 358         Source Listing                  MPP_MIN_REAL8_0D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_reduce_mpi.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_min_real8_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8138     R(8)            8           scalar   ARG,INOUT        8151,8152                         
 MPI_ALLREDUCE              Subr   8151                                                           8151                              
 MPI_MIN                    Param  8151     I(4)            4           scalar   PRIV             8151,8171,8224,8244,8297,8317,8370
                                                                                                  ,8390                             
 MPP_MIN_REAL8_0D           Subr   8138                                          PRIV             3922,3949,3955                    
 N                          Local  8143     I(4)            4           scalar                    8147,8151                         
 PELIST                     Dummy  8138     I(4)            4     1     1        ARG,IN           8147                              
 WORK                       Local  8144     R(8)            8           scalar                    8151,8152                         

Page 359         Source Listing                  MPP_MIN_REAL8_0D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8156 
   8157     subroutine mpp_min_real8_1d( a, length, pelist )
   8158 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8159 !result is also automatically broadcast to all PEs
   8160       real(r8_kind), intent(inout) :: a(:)
   8161       integer,   intent(in)    :: length
   8162       integer, intent(in), optional :: pelist(0:)
   8163       integer :: n
   8164       real(r8_kind) :: work(length)
   8165 
   8166       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_1D: You must first call mpp_init.' )
   8167       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8168 
   8169       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8170       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_1D_: using MPI_ALLREDUCE...' )
   8171       call MPI_ALLREDUCE( a, work, length, MPI_REAL8, MPI_MIN, peset(n)%id, error )
   8172       a(1:length) = work(1:length)
   8173       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 8 )
   8174       return
   8175     end subroutine mpp_min_real8_1d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_min_real8_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8157     R(8)            8     1     1        ARG,INOUT        8171,8172                         
 LENGTH                     Dummy  8157     I(4)            4           scalar   ARG,IN           8164,8171,8172                    
 MPI_ALLREDUCE              Subr   8171                                                           8171                              
 MPP_MIN_REAL8_1D           Subr   8157                                          PRIV                                               
 N                          Local  8163     I(4)            4           scalar                    8167,8171                         
 PELIST                     Dummy  8157     I(4)            4     1     1        ARG,IN           8167                              
 WORK                       Local  8164     R(8)            8     1     0                         8171,8172                         

Page 360         Source Listing                  MPP_MIN_REAL8_1D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8176 
   8177 
   8178 # 927 "../mpp/include/mpp_comm_mpi.inc" 2 
   8179 
   8180 
   8181 
   8182 
   8183 
   8184 
   8185 
   8186 
   8187 
   8188 
   8189 
   8190 
   8191 
   8192 # 1 "../mpp/include/mpp_reduce_mpi.h" 1 
   8193 !***********************************************************************
   8194 !*                   GNU Lesser General Public License
   8195 !*
   8196 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8197 !*
   8198 !* FMS is free software: you can redistribute it and/or modify it under
   8199 !* the terms of the GNU Lesser General Public License as published by
   8200 !* the Free Software Foundation, either version 3 of the License, or (at
   8201 !* your option) any later version.
   8202 !*
   8203 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8204 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8205 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8206 !* for more details.
   8207 !*
   8208 !* You should have received a copy of the GNU Lesser General Public
   8209 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8210 !***********************************************************************
   8211     subroutine mpp_min_real4_0d( a, pelist )
   8212 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8213 !result is also automatically broadcast to all PEs
   8214       real(r4_kind), intent(inout) :: a
   8215       integer, intent(in), optional :: pelist(0:)
   8216       integer :: n
   8217       real(r4_kind) :: work
   8218 
   8219       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_0D: You must first call mpp_init.' )
   8220       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8221 
   8222       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8223       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_0D_: using MPI_ALLREDUCE...' )
   8224       call MPI_ALLREDUCE( a, work, 1, MPI_REAL4, MPI_MIN, peset(n)%id, error )
   8225       a = work
   8226       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 4 )
   8227       return
   8228     end subroutine mpp_min_real4_0d

Page 361         Source Listing                  MPP_MIN_REAL4_0D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_reduce_mpi.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_min_real4_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8211     R(4)            4           scalar   ARG,INOUT        8224,8225                         
 MPI_ALLREDUCE              Subr   8224                                                           8224                              
 MPP_MIN_REAL4_0D           Subr   8211                                          PRIV                                               
 N                          Local  8216     I(4)            4           scalar                    8220,8224                         
 PELIST                     Dummy  8211     I(4)            4     1     1        ARG,IN           8220                              
 WORK                       Local  8217     R(4)            4           scalar                    8224,8225                         

Page 362         Source Listing                  MPP_MIN_REAL4_0D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8229 
   8230     subroutine mpp_min_real4_1d( a, length, pelist )
   8231 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8232 !result is also automatically broadcast to all PEs
   8233       real(r4_kind), intent(inout) :: a(:)
   8234       integer,   intent(in)    :: length
   8235       integer, intent(in), optional :: pelist(0:)
   8236       integer :: n
   8237       real(r4_kind) :: work(length)
   8238 
   8239       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_1D: You must first call mpp_init.' )
   8240       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8241 
   8242       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8243       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_1D_: using MPI_ALLREDUCE...' )
   8244       call MPI_ALLREDUCE( a, work, length, MPI_REAL4, MPI_MIN, peset(n)%id, error )
   8245       a(1:length) = work(1:length)
   8246       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 4 )
   8247       return
   8248     end subroutine mpp_min_real4_1d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_min_real4_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8230     R(4)            4     1     1        ARG,INOUT        8244,8245                         
 LENGTH                     Dummy  8230     I(4)            4           scalar   ARG,IN           8237,8244,8245                    
 MPI_ALLREDUCE              Subr   8244                                                           8244                              
 MPP_MIN_REAL4_1D           Subr   8230                                          PRIV                                               
 N                          Local  8236     I(4)            4           scalar                    8240,8244                         
 PELIST                     Dummy  8230     I(4)            4     1     1        ARG,IN           8240                              
 WORK                       Local  8237     R(4)            4     1     0                         8244,8245                         

Page 363         Source Listing                  MPP_MIN_REAL4_1D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8249 
   8250 
   8251 # 941 "../mpp/include/mpp_comm_mpi.inc" 2 
   8252 
   8253 
   8254 
   8255 
   8256 
   8257 
   8258 
   8259 
   8260 
   8261 
   8262 
   8263 
   8264 
   8265 # 1 "../mpp/include/mpp_reduce_mpi.h" 1 
   8266 !***********************************************************************
   8267 !*                   GNU Lesser General Public License
   8268 !*
   8269 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8270 !*
   8271 !* FMS is free software: you can redistribute it and/or modify it under
   8272 !* the terms of the GNU Lesser General Public License as published by
   8273 !* the Free Software Foundation, either version 3 of the License, or (at
   8274 !* your option) any later version.
   8275 !*
   8276 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8277 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8278 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8279 !* for more details.
   8280 !*
   8281 !* You should have received a copy of the GNU Lesser General Public
   8282 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8283 !***********************************************************************
   8284     subroutine mpp_min_int8_0d( a, pelist )
   8285 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8286 !result is also automatically broadcast to all PEs
   8287       integer(i8_kind), intent(inout) :: a
   8288       integer, intent(in), optional :: pelist(0:)
   8289       integer :: n
   8290       integer(i8_kind) :: work
   8291 
   8292       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_0D: You must first call mpp_init.' )
   8293       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8294 
   8295       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8296       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_0D_: using MPI_ALLREDUCE...' )
   8297       call MPI_ALLREDUCE( a, work, 1, MPI_INTEGER8, MPI_MIN, peset(n)%id, error )
   8298       a = work
   8299       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 8 )
   8300       return
   8301     end subroutine mpp_min_int8_0d

Page 364         Source Listing                  MPP_MIN_INT8_0D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_reduce_mpi.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_min_int8_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8284     I(8)            8           scalar   ARG,INOUT        8297,8298                         
 MPI_ALLREDUCE              Subr   8297                                                           8297                              
 MPP_MIN_INT8_0D            Subr   8284                                          PRIV                                               
 N                          Local  8289     I(4)            4           scalar                    8293,8297                         
 PELIST                     Dummy  8284     I(4)            4     1     1        ARG,IN           8293                              
 WORK                       Local  8290     I(8)            8           scalar                    8297,8298                         

Page 365         Source Listing                  MPP_MIN_INT8_0D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8302 
   8303     subroutine mpp_min_int8_1d( a, length, pelist )
   8304 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8305 !result is also automatically broadcast to all PEs
   8306       integer(i8_kind), intent(inout) :: a(:)
   8307       integer,   intent(in)    :: length
   8308       integer, intent(in), optional :: pelist(0:)
   8309       integer :: n
   8310       integer(i8_kind) :: work(length)
   8311 
   8312       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_1D: You must first call mpp_init.' )
   8313       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8314 
   8315       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8316       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_1D_: using MPI_ALLREDUCE...' )
   8317       call MPI_ALLREDUCE( a, work, length, MPI_INTEGER8, MPI_MIN, peset(n)%id, error )
   8318       a(1:length) = work(1:length)
   8319       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 8 )
   8320       return
   8321     end subroutine mpp_min_int8_1d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_min_int8_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8303     I(8)            8     1     1        ARG,INOUT        8317,8318                         
 LENGTH                     Dummy  8303     I(4)            4           scalar   ARG,IN           8310,8317,8318                    
 MPI_ALLREDUCE              Subr   8317                                                           8317                              
 MPP_MIN_INT8_1D            Subr   8303                                          PRIV                                               
 N                          Local  8309     I(4)            4           scalar                    8313,8317                         
 PELIST                     Dummy  8303     I(4)            4     1     1        ARG,IN           8313                              
 WORK                       Local  8310     I(8)            8     1     0                         8317,8318                         

Page 366         Source Listing                  MPP_MIN_INT8_1D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8322 
   8323 
   8324 # 955 "../mpp/include/mpp_comm_mpi.inc" 2 
   8325 
   8326 
   8327 
   8328 
   8329 
   8330 
   8331 
   8332 
   8333 
   8334 
   8335 
   8336 
   8337 
   8338 # 1 "../mpp/include/mpp_reduce_mpi.h" 1 
   8339 !***********************************************************************
   8340 !*                   GNU Lesser General Public License
   8341 !*
   8342 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8343 !*
   8344 !* FMS is free software: you can redistribute it and/or modify it under
   8345 !* the terms of the GNU Lesser General Public License as published by
   8346 !* the Free Software Foundation, either version 3 of the License, or (at
   8347 !* your option) any later version.
   8348 !*
   8349 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8350 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8351 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8352 !* for more details.
   8353 !*
   8354 !* You should have received a copy of the GNU Lesser General Public
   8355 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8356 !***********************************************************************
   8357     subroutine mpp_min_int4_0d( a, pelist )
   8358 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8359 !result is also automatically broadcast to all PEs
   8360       integer(i4_kind), intent(inout) :: a
   8361       integer, intent(in), optional :: pelist(0:)
   8362       integer :: n
   8363       integer(i4_kind) :: work
   8364 
   8365       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_0D: You must first call mpp_init.' )
   8366       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8367 
   8368       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8369       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_0D_: using MPI_ALLREDUCE...' )
   8370       call MPI_ALLREDUCE( a, work, 1, MPI_INTEGER4, MPI_MIN, peset(n)%id, error )
   8371       a = work
   8372       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 4 )
   8373       return
   8374     end subroutine mpp_min_int4_0d

Page 367         Source Listing                  MPP_MIN_INT4_0D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_reduce_mpi.h



ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_min_int4_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8357     I(4)            4           scalar   ARG,INOUT        8370,8371                         
 MPI_ALLREDUCE              Subr   8370                                                           8370                              
 MPP_MIN_INT4_0D            Subr   8357                                          PRIV                                               
 N                          Local  8362     I(4)            4           scalar                    8366,8370                         
 PELIST                     Dummy  8357     I(4)            4     1     1        ARG,IN           8366                              
 WORK                       Local  8363     I(4)            4           scalar                    8370,8371                         

Page 368         Source Listing                  MPP_MIN_INT4_0D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8375 
   8376     subroutine mpp_min_int4_1d( a, length, pelist )
   8377 !find the max of scalar a the PEs in pelist (all PEs if this argument is omitted)
   8378 !result is also automatically broadcast to all PEs
   8379       integer(i4_kind), intent(inout) :: a(:)
   8380       integer,   intent(in)    :: length
   8381       integer, intent(in), optional :: pelist(0:)
   8382       integer :: n
   8383       integer(i4_kind) :: work(length)
   8384 
   8385       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_REDUCE_1D: You must first call mpp_init.' )
   8386       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8387 
   8388       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8389       if( verbose )call mpp_error( NOTE, 'MPP_REDUCE_1D_: using MPI_ALLREDUCE...' )
   8390       call MPI_ALLREDUCE( a, work, length, MPI_INTEGER4, MPI_MIN, peset(n)%id, error )
   8391       a(1:length) = work(1:length)
   8392       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, 4 )
   8393       return
   8394     end subroutine mpp_min_int4_1d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_min_int4_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8376     I(4)            4     1     1        ARG,INOUT        8390,8391                         
 LENGTH                     Dummy  8376     I(4)            4           scalar   ARG,IN           8383,8390,8391                    
 MPI_ALLREDUCE              Subr   8390                                                           8390                              
 MPP_MIN_INT4_1D            Subr   8376                                          PRIV                                               
 N                          Local  8382     I(4)            4           scalar                    8386,8390                         
 PELIST                     Dummy  8376     I(4)            4     1     1        ARG,IN           8386                              
 WORK                       Local  8383     I(4)            4     1     0                         8390,8391                         

Page 369         Source Listing                  MPP_MIN_INT4_1D
2021-06-01 08:51                                 ../mpp/include/mpp_reduce_mpi.h

   8395 
   8396 
   8397 # 969 "../mpp/include/mpp_comm_mpi.inc" 2 
   8398 
   8399 
   8400 
   8401 
   8402 
   8403 
   8404 
   8405 
   8406 
   8407 
   8408 
   8409 
   8410 
   8411 
   8412 
   8413 
   8414 
   8415 
   8416 
   8417 # 1 "../mpp/include/mpp_sum_mpi.h" 1 
   8418 !***********************************************************************
   8419 !*                   GNU Lesser General Public License
   8420 !*
   8421 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8422 !*
   8423 !* FMS is free software: you can redistribute it and/or modify it under
   8424 !* the terms of the GNU Lesser General Public License as published by
   8425 !* the Free Software Foundation, either version 3 of the License, or (at
   8426 !* your option) any later version.
   8427 !*
   8428 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8429 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8430 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8431 !* for more details.
   8432 !*
   8433 !* You should have received a copy of the GNU Lesser General Public
   8434 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8435 !***********************************************************************
   8436     subroutine mpp_sum_real8( a, length, pelist )
   8437 !sums array a over the PEs in pelist (all PEs if this argument is omitted)
   8438 !result is also automatically broadcast: all PEs have the sum in a at the end
   8439 !we are using f77-style call: array passed by address and not descriptor; further,
   8440 !the f90 conformance check is avoided.
   8441       integer, intent(in) :: length
   8442       integer, intent(in), optional :: pelist(:)
   8443       real(r8_kind), intent(inout) :: a(*)
   8444       integer :: n, errunit
   8445       real(r8_kind) :: work(length)
   8446 
   8447       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_SUM: You must first call mpp_init.' )
   8448       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8449 
   8450       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8451       if( verbose )call mpp_error( NOTE, 'MPP_SUM: using MPI_ALLREDUCE...' )

Page 370         Source Listing                  MPP_SUM_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi.h

   8452       if( debug ) then
   8453           errunit = stderr()
   8454           write( errunit,* )'pe, n, peset(n)%id=', pe, n, peset(n)%id
   8455       endif
   8456       call MPI_ALLREDUCE( a, work, length, MPI_REAL8, MPI_SUM, peset(n)%id, error )
   8457       a(1:length) = work(1:length)
   8458       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, length*8 )
   8459       return
   8460     end subroutine mpp_sum_real8


ENTRY POINTS

  Name                                 
                                       
 mpp_mod_mp_mpp_sum_real8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8436     R(8)            8     1     0        ARG,INOUT        8456,8457                         
 ERRUNIT                    Local  8444     I(4)            4           scalar                    8453,8454                         
 LENGTH                     Dummy  8436     I(4)            4           scalar   ARG,IN           8445,8456,8457,8458               
 MPI_ALLREDUCE              Subr   8456                                                           8456                              
 MPI_SUM                    Param  8456     I(4)            4           scalar   PRIV             8456,8618,8780,8939               
 MPP_SUM_REAL8              Subr   8436                                          PRIV             8495,8509,8523,8537,8551          
 N                          Local  8444     I(4)            4           scalar                    8448,8454,8456                    
 PELIST                     Dummy  8436     I(4)            4     1     1        ARG,IN           8448                              
 WORK                       Local  8445     R(8)            8     1     0                         8456,8457                         

Page 371         Source Listing                  MPP_SUM_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi.h

   8461 
   8462 !#######################################################################
   8463 # 1 "../mpp/include/mpp_sum.inc" 1 
   8464 ! -*-f90-*-
   8465 
   8466 !***********************************************************************
   8467 !*                   GNU Lesser General Public License
   8468 !*
   8469 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8470 !*
   8471 !* FMS is free software: you can redistribute it and/or modify it under
   8472 !* the terms of the GNU Lesser General Public License as published by
   8473 !* the Free Software Foundation, either version 3 of the License, or (at
   8474 !* your option) any later version.
   8475 !*
   8476 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8477 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8478 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8479 !* for more details.
   8480 !*
   8481 !* You should have received a copy of the GNU Lesser General Public
   8482 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8483 !***********************************************************************
   8484 
   8485 !#######################################################################
   8486 
   8487     subroutine mpp_sum_real8_scalar( a, pelist )
   8488 !sums array a when only first element is passed: this routine just converts to a call to mpp_sum_real8
   8489       real(r8_kind), intent(inout) :: a
   8490       integer, intent(in), optional :: pelist(:)
   8491       real(r8_kind) :: b(1)
   8492 
   8493       b(1) = a
   8494       if( debug )call mpp_error( NOTE, 'MPP_SUM_SCALAR_: calling MPP_SUM_ ...' )
   8495       call mpp_sum_real8( b, 1, pelist )
   8496       a = b(1)
   8497       return
   8498     end subroutine mpp_sum_real8_scalar

Page 372         Source Listing                  MPP_SUM_REAL8_SCALAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_sum.inc



ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_sum_real8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8487     R(8)            8           scalar   ARG,INOUT        8493,8496                         
 B                          Local  8491     R(8)            8     1     1                         8493,8495,8496                    
 MPP_SUM_REAL8_SCALAR       Subr   8487                                          PRIV             3924,3925,3951,3952,3957,3958     
 PELIST                     Dummy  8487     I(4)            4     1     1        ARG,IN           8495                              

Page 373         Source Listing                  MPP_SUM_REAL8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8499 
   8500 !#######################################################################
   8501     subroutine mpp_sum_real8_2d( a, length, pelist )
   8502       real(r8_kind), intent(inout) :: a(:,:)
   8503       integer, intent(in) :: length
   8504       integer, intent(in), optional :: pelist(:)
   8505       real(r8_kind) :: a1D(length)
   8506 
   8507       pointer( ptr, a1D )
   8508       ptr = LOC(a)
   8509       call mpp_sum( a1D, length, pelist )
   8510 
   8511       return
   8512     end subroutine mpp_sum_real8_2d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_sum_real8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8501     R(8)            8     2     1        ARG,INOUT        8508                              
 A1D                        Local  8505     R(8)            8     1     0                         8509                              
 LENGTH                     Dummy  8501     I(4)            4           scalar   ARG,IN           8505,8509                         
 LOC                        Func   8508                                 scalar                    8508                              
 MPP_SUM_REAL8_2D           Subr   8501                                          PRIV                                               
 PELIST                     Dummy  8501     I(4)            4     1     1        ARG,IN           8509                              
 PTR                        Local  8507     I(8)            8           scalar   PTR              8508                              

Page 374         Source Listing                  MPP_SUM_REAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8513 
   8514 !#######################################################################
   8515     subroutine mpp_sum_real8_3d( a, length, pelist )
   8516       real(r8_kind), intent(inout) :: a(:,:,:)
   8517       integer, intent(in) :: length
   8518       integer, intent(in), optional :: pelist(:)
   8519       real(r8_kind) :: a1D(length)
   8520 
   8521       pointer( ptr, a1D )
   8522       ptr = LOC(a)
   8523       call mpp_sum( a1D, length, pelist )
   8524 
   8525       return
   8526     end subroutine mpp_sum_real8_3d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_sum_real8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8515     R(8)            8     3     1        ARG,INOUT        8522                              
 A1D                        Local  8519     R(8)            8     1     0                         8523                              
 LENGTH                     Dummy  8515     I(4)            4           scalar   ARG,IN           8519,8523                         
 LOC                        Func   8522                                 scalar                    8522                              
 MPP_SUM_REAL8_3D           Subr   8515                                          PRIV                                               
 PELIST                     Dummy  8515     I(4)            4     1     1        ARG,IN           8523                              
 PTR                        Local  8521     I(8)            8           scalar   PTR              8522                              

Page 375         Source Listing                  MPP_SUM_REAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8527 
   8528 !#######################################################################
   8529     subroutine mpp_sum_real8_4d( a, length, pelist )
   8530       real(r8_kind), intent(inout) :: a(:,:,:,:)
   8531       integer, intent(in) :: length
   8532       integer, intent(in), optional :: pelist(:)
   8533       real(r8_kind) :: a1D(length)
   8534 
   8535       pointer( ptr, a1D )
   8536       ptr = LOC(a)
   8537       call mpp_sum( a1D, length, pelist )
   8538 
   8539       return
   8540     end subroutine mpp_sum_real8_4d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_sum_real8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8529     R(8)            8     4     1        ARG,INOUT        8536                              
 A1D                        Local  8533     R(8)            8     1     0                         8537                              
 LENGTH                     Dummy  8529     I(4)            4           scalar   ARG,IN           8533,8537                         
 LOC                        Func   8536                                 scalar                    8536                              
 MPP_SUM_REAL8_4D           Subr   8529                                          PRIV                                               
 PELIST                     Dummy  8529     I(4)            4     1     1        ARG,IN           8537                              
 PTR                        Local  8535     I(8)            8           scalar   PTR              8536                              

Page 376         Source Listing                  MPP_SUM_REAL8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8541 
   8542 !#######################################################################
   8543     subroutine mpp_sum_real8_5d( a, length, pelist )
   8544       real(r8_kind), intent(inout) :: a(:,:,:,:,:)
   8545       integer, intent(in) :: length
   8546       integer, intent(in), optional :: pelist(:)
   8547       real(r8_kind) :: a1D(length)
   8548 
   8549       pointer( ptr, a1D )
   8550       ptr = LOC(a)
   8551       call mpp_sum( a1D, length, pelist )
   8552 
   8553       return
   8554     end subroutine mpp_sum_real8_5d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_sum_real8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8543     R(8)            8     5     1        ARG,INOUT        8550                              
 A1D                        Local  8547     R(8)            8     1     0                         8551                              
 LENGTH                     Dummy  8543     I(4)            4           scalar   ARG,IN           8547,8551                         
 LOC                        Func   8550                                 scalar                    8550                              
 MPP_SUM_REAL8_5D           Subr   8543                                          PRIV                                               
 PELIST                     Dummy  8543     I(4)            4     1     1        ARG,IN           8551                              
 PTR                        Local  8549     I(8)            8           scalar   PTR              8550                              

Page 377         Source Listing                  MPP_SUM_REAL8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8555 # 47 "../mpp/include/mpp_sum_mpi.h" 2 
   8556 # 989 "../mpp/include/mpp_comm_mpi.inc" 2 
   8557 
   8558 # 1010
   8559 
   8560 
   8561 
   8562 
   8563 
   8564 
   8565 
   8566 
   8567 
   8568 
   8569 
   8570 
   8571 
   8572 
   8573 
   8574 
   8575 
   8576 
   8577 
   8578 
   8579 # 1 "../mpp/include/mpp_sum_mpi.h" 1 
   8580 !***********************************************************************
   8581 !*                   GNU Lesser General Public License
   8582 !*
   8583 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8584 !*
   8585 !* FMS is free software: you can redistribute it and/or modify it under
   8586 !* the terms of the GNU Lesser General Public License as published by
   8587 !* the Free Software Foundation, either version 3 of the License, or (at
   8588 !* your option) any later version.
   8589 !*
   8590 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8591 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8592 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8593 !* for more details.
   8594 !*
   8595 !* You should have received a copy of the GNU Lesser General Public
   8596 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8597 !***********************************************************************
   8598     subroutine mpp_sum_real4( a, length, pelist )
   8599 !sums array a over the PEs in pelist (all PEs if this argument is omitted)
   8600 !result is also automatically broadcast: all PEs have the sum in a at the end
   8601 !we are using f77-style call: array passed by address and not descriptor; further,
   8602 !the f90 conformance check is avoided.
   8603       integer, intent(in) :: length
   8604       integer, intent(in), optional :: pelist(:)
   8605       real(r4_kind), intent(inout) :: a(*)
   8606       integer :: n, errunit
   8607       real(r4_kind) :: work(length)
   8608 
   8609       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_SUM: You must first call mpp_init.' )
   8610       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8611 

Page 378         Source Listing                  MPP_SUM_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi.h

   8612       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8613       if( verbose )call mpp_error( NOTE, 'MPP_SUM: using MPI_ALLREDUCE...' )
   8614       if( debug ) then
   8615           errunit = stderr()
   8616           write( errunit,* )'pe, n, peset(n)%id=', pe, n, peset(n)%id
   8617       endif
   8618       call MPI_ALLREDUCE( a, work, length, MPI_REAL4, MPI_SUM, peset(n)%id, error )
   8619       a(1:length) = work(1:length)
   8620       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, length*4 )
   8621       return
   8622     end subroutine mpp_sum_real4


ENTRY POINTS

  Name                                 
                                       
 mpp_mod_mp_mpp_sum_real4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8598     R(4)            4     1     0        ARG,INOUT        8618,8619                         
 ERRUNIT                    Local  8606     I(4)            4           scalar                    8615,8616                         
 LENGTH                     Dummy  8598     I(4)            4           scalar   ARG,IN           8607,8618,8619,8620               
 MPI_ALLREDUCE              Subr   8618                                                           8618                              
 MPP_SUM_REAL4              Subr   8598                                          PRIV             8657,8671,8685,8699,8713          
 N                          Local  8606     I(4)            4           scalar                    8610,8616,8618                    
 PELIST                     Dummy  8598     I(4)            4     1     1        ARG,IN           8610                              
 WORK                       Local  8607     R(4)            4     1     0                         8618,8619                         

Page 379         Source Listing                  MPP_SUM_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi.h

   8623 
   8624 !#######################################################################
   8625 # 1 "../mpp/include/mpp_sum.inc" 1 
   8626 ! -*-f90-*-
   8627 
   8628 !***********************************************************************
   8629 !*                   GNU Lesser General Public License
   8630 !*
   8631 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8632 !*
   8633 !* FMS is free software: you can redistribute it and/or modify it under
   8634 !* the terms of the GNU Lesser General Public License as published by
   8635 !* the Free Software Foundation, either version 3 of the License, or (at
   8636 !* your option) any later version.
   8637 !*
   8638 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8639 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8640 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8641 !* for more details.
   8642 !*
   8643 !* You should have received a copy of the GNU Lesser General Public
   8644 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8645 !***********************************************************************
   8646 
   8647 !#######################################################################
   8648 
   8649     subroutine mpp_sum_real4_scalar( a, pelist )
   8650 !sums array a when only first element is passed: this routine just converts to a call to mpp_sum_real4
   8651       real(r4_kind), intent(inout) :: a
   8652       integer, intent(in), optional :: pelist(:)
   8653       real(r4_kind) :: b(1)
   8654 
   8655       b(1) = a
   8656       if( debug )call mpp_error( NOTE, 'MPP_SUM_SCALAR_: calling MPP_SUM_ ...' )
   8657       call mpp_sum_real4( b, 1, pelist )
   8658       a = b(1)
   8659       return
   8660     end subroutine mpp_sum_real4_scalar

Page 380         Source Listing                  MPP_SUM_REAL4_SCALAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_sum.inc



ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_sum_real4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8649     R(4)            4           scalar   ARG,INOUT        8655,8658                         
 B                          Local  8653     R(4)            4     1     1                         8655,8657,8658                    
 MPP_SUM_REAL4_SCALAR       Subr   8649                                          PRIV                                               
 PELIST                     Dummy  8649     I(4)            4     1     1        ARG,IN           8657                              

Page 381         Source Listing                  MPP_SUM_REAL4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8661 
   8662 !#######################################################################
   8663     subroutine mpp_sum_real4_2d( a, length, pelist )
   8664       real(r4_kind), intent(inout) :: a(:,:)
   8665       integer, intent(in) :: length
   8666       integer, intent(in), optional :: pelist(:)
   8667       real(r4_kind) :: a1D(length)
   8668 
   8669       pointer( ptr, a1D )
   8670       ptr = LOC(a)
   8671       call mpp_sum( a1D, length, pelist )
   8672 
   8673       return
   8674     end subroutine mpp_sum_real4_2d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_sum_real4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8663     R(4)            4     2     1        ARG,INOUT        8670                              
 A1D                        Local  8667     R(4)            4     1     0                         8671                              
 LENGTH                     Dummy  8663     I(4)            4           scalar   ARG,IN           8667,8671                         
 LOC                        Func   8670                                 scalar                    8670                              
 MPP_SUM_REAL4_2D           Subr   8663                                          PRIV                                               
 PELIST                     Dummy  8663     I(4)            4     1     1        ARG,IN           8671                              
 PTR                        Local  8669     I(8)            8           scalar   PTR              8670                              

Page 382         Source Listing                  MPP_SUM_REAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8675 
   8676 !#######################################################################
   8677     subroutine mpp_sum_real4_3d( a, length, pelist )
   8678       real(r4_kind), intent(inout) :: a(:,:,:)
   8679       integer, intent(in) :: length
   8680       integer, intent(in), optional :: pelist(:)
   8681       real(r4_kind) :: a1D(length)
   8682 
   8683       pointer( ptr, a1D )
   8684       ptr = LOC(a)
   8685       call mpp_sum( a1D, length, pelist )
   8686 
   8687       return
   8688     end subroutine mpp_sum_real4_3d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_sum_real4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8677     R(4)            4     3     1        ARG,INOUT        8684                              
 A1D                        Local  8681     R(4)            4     1     0                         8685                              
 LENGTH                     Dummy  8677     I(4)            4           scalar   ARG,IN           8681,8685                         
 LOC                        Func   8684                                 scalar                    8684                              
 MPP_SUM_REAL4_3D           Subr   8677                                          PRIV                                               
 PELIST                     Dummy  8677     I(4)            4     1     1        ARG,IN           8685                              
 PTR                        Local  8683     I(8)            8           scalar   PTR              8684                              

Page 383         Source Listing                  MPP_SUM_REAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8689 
   8690 !#######################################################################
   8691     subroutine mpp_sum_real4_4d( a, length, pelist )
   8692       real(r4_kind), intent(inout) :: a(:,:,:,:)
   8693       integer, intent(in) :: length
   8694       integer, intent(in), optional :: pelist(:)
   8695       real(r4_kind) :: a1D(length)
   8696 
   8697       pointer( ptr, a1D )
   8698       ptr = LOC(a)
   8699       call mpp_sum( a1D, length, pelist )
   8700 
   8701       return
   8702     end subroutine mpp_sum_real4_4d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_sum_real4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8691     R(4)            4     4     1        ARG,INOUT        8698                              
 A1D                        Local  8695     R(4)            4     1     0                         8699                              
 LENGTH                     Dummy  8691     I(4)            4           scalar   ARG,IN           8695,8699                         
 LOC                        Func   8698                                 scalar                    8698                              
 MPP_SUM_REAL4_4D           Subr   8691                                          PRIV                                               
 PELIST                     Dummy  8691     I(4)            4     1     1        ARG,IN           8699                              
 PTR                        Local  8697     I(8)            8           scalar   PTR              8698                              

Page 384         Source Listing                  MPP_SUM_REAL4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8703 
   8704 !#######################################################################
   8705     subroutine mpp_sum_real4_5d( a, length, pelist )
   8706       real(r4_kind), intent(inout) :: a(:,:,:,:,:)
   8707       integer, intent(in) :: length
   8708       integer, intent(in), optional :: pelist(:)
   8709       real(r4_kind) :: a1D(length)
   8710 
   8711       pointer( ptr, a1D )
   8712       ptr = LOC(a)
   8713       call mpp_sum( a1D, length, pelist )
   8714 
   8715       return
   8716     end subroutine mpp_sum_real4_5d


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_sum_real4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8705     R(4)            4     5     1        ARG,INOUT        8712                              
 A1D                        Local  8709     R(4)            4     1     0                         8713                              
 LENGTH                     Dummy  8705     I(4)            4           scalar   ARG,IN           8709,8713                         
 LOC                        Func   8712                                 scalar                    8712                              
 MPP_SUM_REAL4_5D           Subr   8705                                          PRIV                                               
 PELIST                     Dummy  8705     I(4)            4     1     1        ARG,IN           8713                              
 PTR                        Local  8711     I(8)            8           scalar   PTR              8712                              

Page 385         Source Listing                  MPP_SUM_REAL4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8717 # 47 "../mpp/include/mpp_sum_mpi.h" 2 
   8718 # 1031 "../mpp/include/mpp_comm_mpi.inc" 2 
   8719 
   8720 # 1052
   8721 
   8722 
   8723 
   8724 
   8725 
   8726 
   8727 
   8728 
   8729 
   8730 
   8731 
   8732 
   8733 
   8734 
   8735 
   8736 
   8737 
   8738 
   8739 
   8740 
   8741 # 1 "../mpp/include/mpp_sum_mpi.h" 1 
   8742 !***********************************************************************
   8743 !*                   GNU Lesser General Public License
   8744 !*
   8745 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8746 !*
   8747 !* FMS is free software: you can redistribute it and/or modify it under
   8748 !* the terms of the GNU Lesser General Public License as published by
   8749 !* the Free Software Foundation, either version 3 of the License, or (at
   8750 !* your option) any later version.
   8751 !*
   8752 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8753 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8754 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8755 !* for more details.
   8756 !*
   8757 !* You should have received a copy of the GNU Lesser General Public
   8758 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8759 !***********************************************************************
   8760     subroutine mpp_sum_int8( a, length, pelist )
   8761 !sums array a over the PEs in pelist (all PEs if this argument is omitted)
   8762 !result is also automatically broadcast: all PEs have the sum in a at the end
   8763 !we are using f77-style call: array passed by address and not descriptor; further,
   8764 !the f90 conformance check is avoided.
   8765       integer, intent(in) :: length
   8766       integer, intent(in), optional :: pelist(:)
   8767       integer(i8_kind), intent(inout) :: a(*)
   8768       integer :: n, errunit
   8769       integer(i8_kind) :: work(length)
   8770 
   8771       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_SUM: You must first call mpp_init.' )
   8772       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8773 

Page 386         Source Listing                  MPP_SUM_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi.h

   8774       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8775       if( verbose )call mpp_error( NOTE, 'MPP_SUM: using MPI_ALLREDUCE...' )
   8776       if( debug ) then
   8777           errunit = stderr()
   8778           write( errunit,* )'pe, n, peset(n)%id=', pe, n, peset(n)%id
   8779       endif
   8780       call MPI_ALLREDUCE( a, work, length, MPI_INTEGER8, MPI_SUM, peset(n)%id, error )
   8781       a(1:length) = work(1:length)
   8782       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, length*8 )
   8783       return
   8784     end subroutine mpp_sum_int8


ENTRY POINTS

  Name                                
                                      
 mpp_mod_mp_mpp_sum_int8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8760     I(8)            8     1     0        ARG,INOUT        8780,8781                         
 ERRUNIT                    Local  8768     I(4)            4           scalar                    8777,8778                         
 LENGTH                     Dummy  8760     I(4)            4           scalar   ARG,IN           8769,8780,8781,8782               
 MPI_ALLREDUCE              Subr   8780                                                           8780                              
 MPP_SUM_INT8               Subr   8760                                          PRIV             8819,8833,8847,8861,8875          
 N                          Local  8768     I(4)            4           scalar                    8772,8778,8780                    
 PELIST                     Dummy  8760     I(4)            4     1     1        ARG,IN           8772                              
 WORK                       Local  8769     I(8)            8     1     0                         8780,8781                         

Page 387         Source Listing                  MPP_SUM_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi.h

   8785 
   8786 !#######################################################################
   8787 # 1 "../mpp/include/mpp_sum.inc" 1 
   8788 ! -*-f90-*-
   8789 
   8790 !***********************************************************************
   8791 !*                   GNU Lesser General Public License
   8792 !*
   8793 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8794 !*
   8795 !* FMS is free software: you can redistribute it and/or modify it under
   8796 !* the terms of the GNU Lesser General Public License as published by
   8797 !* the Free Software Foundation, either version 3 of the License, or (at
   8798 !* your option) any later version.
   8799 !*
   8800 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8801 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8802 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8803 !* for more details.
   8804 !*
   8805 !* You should have received a copy of the GNU Lesser General Public
   8806 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8807 !***********************************************************************
   8808 
   8809 !#######################################################################
   8810 
   8811     subroutine mpp_sum_int8_scalar( a, pelist )
   8812 !sums array a when only first element is passed: this routine just converts to a call to mpp_sum_int8
   8813       integer(i8_kind), intent(inout) :: a
   8814       integer, intent(in), optional :: pelist(:)
   8815       integer(i8_kind) :: b(1)
   8816 
   8817       b(1) = a
   8818       if( debug )call mpp_error( NOTE, 'MPP_SUM_SCALAR_: calling MPP_SUM_ ...' )
   8819       call mpp_sum_int8( b, 1, pelist )
   8820       a = b(1)
   8821       return
   8822     end subroutine mpp_sum_int8_scalar

Page 388         Source Listing                  MPP_SUM_INT8_SCALAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_sum.inc



ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_sum_int8_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8811     I(8)            8           scalar   ARG,INOUT        8817,8820                         
 B                          Local  8815     I(8)            8     1     1                         8817,8819,8820                    
 MPP_SUM_INT8_SCALAR        Subr   8811                                          PRIV             11727,11845,11963,12081,12199,1231
                                                                                                  7,12435,12553,12671,12789         
 PELIST                     Dummy  8811     I(4)            4     1     1        ARG,IN           8819                              

Page 389         Source Listing                  MPP_SUM_INT8_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8823 
   8824 !#######################################################################
   8825     subroutine mpp_sum_int8_2d( a, length, pelist )
   8826       integer(i8_kind), intent(inout) :: a(:,:)
   8827       integer, intent(in) :: length
   8828       integer, intent(in), optional :: pelist(:)
   8829       integer(i8_kind) :: a1D(length)
   8830 
   8831       pointer( ptr, a1D )
   8832       ptr = LOC(a)
   8833       call mpp_sum( a1D, length, pelist )
   8834 
   8835       return
   8836     end subroutine mpp_sum_int8_2d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_sum_int8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8825     I(8)            8     2     1        ARG,INOUT        8832                              
 A1D                        Local  8829     I(8)            8     1     0                         8833                              
 LENGTH                     Dummy  8825     I(4)            4           scalar   ARG,IN           8829,8833                         
 LOC                        Func   8832                                 scalar                    8832                              
 MPP_SUM_INT8_2D            Subr   8825                                          PRIV                                               
 PELIST                     Dummy  8825     I(4)            4     1     1        ARG,IN           8833                              
 PTR                        Local  8831     I(8)            8           scalar   PTR              8832                              

Page 390         Source Listing                  MPP_SUM_INT8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8837 
   8838 !#######################################################################
   8839     subroutine mpp_sum_int8_3d( a, length, pelist )
   8840       integer(i8_kind), intent(inout) :: a(:,:,:)
   8841       integer, intent(in) :: length
   8842       integer, intent(in), optional :: pelist(:)
   8843       integer(i8_kind) :: a1D(length)
   8844 
   8845       pointer( ptr, a1D )
   8846       ptr = LOC(a)
   8847       call mpp_sum( a1D, length, pelist )
   8848 
   8849       return
   8850     end subroutine mpp_sum_int8_3d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_sum_int8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8839     I(8)            8     3     1        ARG,INOUT        8846                              
 A1D                        Local  8843     I(8)            8     1     0                         8847                              
 LENGTH                     Dummy  8839     I(4)            4           scalar   ARG,IN           8843,8847                         
 LOC                        Func   8846                                 scalar                    8846                              
 MPP_SUM_INT8_3D            Subr   8839                                          PRIV                                               
 PELIST                     Dummy  8839     I(4)            4     1     1        ARG,IN           8847                              
 PTR                        Local  8845     I(8)            8           scalar   PTR              8846                              

Page 391         Source Listing                  MPP_SUM_INT8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8851 
   8852 !#######################################################################
   8853     subroutine mpp_sum_int8_4d( a, length, pelist )
   8854       integer(i8_kind), intent(inout) :: a(:,:,:,:)
   8855       integer, intent(in) :: length
   8856       integer, intent(in), optional :: pelist(:)
   8857       integer(i8_kind) :: a1D(length)
   8858 
   8859       pointer( ptr, a1D )
   8860       ptr = LOC(a)
   8861       call mpp_sum( a1D, length, pelist )
   8862 
   8863       return
   8864     end subroutine mpp_sum_int8_4d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_sum_int8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8853     I(8)            8     4     1        ARG,INOUT        8860                              
 A1D                        Local  8857     I(8)            8     1     0                         8861                              
 LENGTH                     Dummy  8853     I(4)            4           scalar   ARG,IN           8857,8861                         
 LOC                        Func   8860                                 scalar                    8860                              
 MPP_SUM_INT8_4D            Subr   8853                                          PRIV                                               
 PELIST                     Dummy  8853     I(4)            4     1     1        ARG,IN           8861                              
 PTR                        Local  8859     I(8)            8           scalar   PTR              8860                              

Page 392         Source Listing                  MPP_SUM_INT8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8865 
   8866 !#######################################################################
   8867     subroutine mpp_sum_int8_5d( a, length, pelist )
   8868       integer(i8_kind), intent(inout) :: a(:,:,:,:,:)
   8869       integer, intent(in) :: length
   8870       integer, intent(in), optional :: pelist(:)
   8871       integer(i8_kind) :: a1D(length)
   8872 
   8873       pointer( ptr, a1D )
   8874       ptr = LOC(a)
   8875       call mpp_sum( a1D, length, pelist )
   8876 
   8877       return
   8878     end subroutine mpp_sum_int8_5d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_sum_int8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8867     I(8)            8     5     1        ARG,INOUT        8874                              
 A1D                        Local  8871     I(8)            8     1     0                         8875                              
 LENGTH                     Dummy  8867     I(4)            4           scalar   ARG,IN           8871,8875                         
 LOC                        Func   8874                                 scalar                    8874                              
 MPP_SUM_INT8_5D            Subr   8867                                          PRIV                                               
 PELIST                     Dummy  8867     I(4)            4     1     1        ARG,IN           8875                              
 PTR                        Local  8873     I(8)            8           scalar   PTR              8874                              

Page 393         Source Listing                  MPP_SUM_INT8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8879 # 47 "../mpp/include/mpp_sum_mpi.h" 2 
   8880 # 1073 "../mpp/include/mpp_comm_mpi.inc" 2 
   8881 
   8882 
   8883 
   8884 
   8885 
   8886 
   8887 
   8888 
   8889 
   8890 
   8891 
   8892 
   8893 
   8894 
   8895 
   8896 
   8897 
   8898 
   8899 
   8900 # 1 "../mpp/include/mpp_sum_mpi.h" 1 
   8901 !***********************************************************************
   8902 !*                   GNU Lesser General Public License
   8903 !*
   8904 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8905 !*
   8906 !* FMS is free software: you can redistribute it and/or modify it under
   8907 !* the terms of the GNU Lesser General Public License as published by
   8908 !* the Free Software Foundation, either version 3 of the License, or (at
   8909 !* your option) any later version.
   8910 !*
   8911 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8912 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8913 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8914 !* for more details.
   8915 !*
   8916 !* You should have received a copy of the GNU Lesser General Public
   8917 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8918 !***********************************************************************
   8919     subroutine mpp_sum_int4( a, length, pelist )
   8920 !sums array a over the PEs in pelist (all PEs if this argument is omitted)
   8921 !result is also automatically broadcast: all PEs have the sum in a at the end
   8922 !we are using f77-style call: array passed by address and not descriptor; further,
   8923 !the f90 conformance check is avoided.
   8924       integer, intent(in) :: length
   8925       integer, intent(in), optional :: pelist(:)
   8926       integer(i4_kind), intent(inout) :: a(*)
   8927       integer :: n, errunit
   8928       integer(i4_kind) :: work(length)
   8929 
   8930       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_SUM: You must first call mpp_init.' )
   8931       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   8932 
   8933       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   8934       if( verbose )call mpp_error( NOTE, 'MPP_SUM: using MPI_ALLREDUCE...' )
   8935       if( debug ) then

Page 394         Source Listing                  MPP_SUM_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi.h

   8936           errunit = stderr()
   8937           write( errunit,* )'pe, n, peset(n)%id=', pe, n, peset(n)%id
   8938       endif
   8939       call MPI_ALLREDUCE( a, work, length, MPI_INTEGER4, MPI_SUM, peset(n)%id, error )
   8940       a(1:length) = work(1:length)
   8941       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, length*4 )
   8942       return
   8943     end subroutine mpp_sum_int4


ENTRY POINTS

  Name                                
                                      
 mpp_mod_mp_mpp_sum_int4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8919     I(4)            4     1     0        ARG,INOUT        8939,8940                         
 ERRUNIT                    Local  8927     I(4)            4           scalar                    8936,8937                         
 LENGTH                     Dummy  8919     I(4)            4           scalar   ARG,IN           8928,8939,8940,8941               
 MPI_ALLREDUCE              Subr   8939                                                           8939                              
 MPP_SUM_INT4               Subr   8919                                          PRIV             8978,8992,9006,9020,9034          
 N                          Local  8927     I(4)            4           scalar                    8931,8937,8939                    
 PELIST                     Dummy  8919     I(4)            4     1     1        ARG,IN           8931                              
 WORK                       Local  8928     I(4)            4     1     0                         8939,8940                         

Page 395         Source Listing                  MPP_SUM_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi.h

   8944 
   8945 !#######################################################################
   8946 # 1 "../mpp/include/mpp_sum.inc" 1 
   8947 ! -*-f90-*-
   8948 
   8949 !***********************************************************************
   8950 !*                   GNU Lesser General Public License
   8951 !*
   8952 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8953 !*
   8954 !* FMS is free software: you can redistribute it and/or modify it under
   8955 !* the terms of the GNU Lesser General Public License as published by
   8956 !* the Free Software Foundation, either version 3 of the License, or (at
   8957 !* your option) any later version.
   8958 !*
   8959 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8960 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8961 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8962 !* for more details.
   8963 !*
   8964 !* You should have received a copy of the GNU Lesser General Public
   8965 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8966 !***********************************************************************
   8967 
   8968 !#######################################################################
   8969 
   8970     subroutine mpp_sum_int4_scalar( a, pelist )
   8971 !sums array a when only first element is passed: this routine just converts to a call to mpp_sum_int4
   8972       integer(i4_kind), intent(inout) :: a
   8973       integer, intent(in), optional :: pelist(:)
   8974       integer(i4_kind) :: b(1)
   8975 
   8976       b(1) = a
   8977       if( debug )call mpp_error( NOTE, 'MPP_SUM_SCALAR_: calling MPP_SUM_ ...' )
   8978       call mpp_sum_int4( b, 1, pelist )
   8979       a = b(1)
   8980       return
   8981     end subroutine mpp_sum_int4_scalar

Page 396         Source Listing                  MPP_SUM_INT4_SCALAR
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_sum.inc



ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_sum_int4_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8970     I(4)            4           scalar   ARG,INOUT        8976,8979                         
 B                          Local  8974     I(4)            4     1     1                         8976,8978,8979                    
 MPP_SUM_INT4_SCALAR        Subr   8970                                          PRIV             13645,13902,14159,14416,14602,1478
                                                                                                  1,14960                           
 PELIST                     Dummy  8970     I(4)            4     1     1        ARG,IN           8978                              

Page 397         Source Listing                  MPP_SUM_INT4_SCALAR
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8982 
   8983 !#######################################################################
   8984     subroutine mpp_sum_int4_2d( a, length, pelist )
   8985       integer(i4_kind), intent(inout) :: a(:,:)
   8986       integer, intent(in) :: length
   8987       integer, intent(in), optional :: pelist(:)
   8988       integer(i4_kind) :: a1D(length)
   8989 
   8990       pointer( ptr, a1D )
   8991       ptr = LOC(a)
   8992       call mpp_sum( a1D, length, pelist )
   8993 
   8994       return
   8995     end subroutine mpp_sum_int4_2d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_sum_int4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8984     I(4)            4     2     1        ARG,INOUT        8991                              
 A1D                        Local  8988     I(4)            4     1     0                         8992                              
 LENGTH                     Dummy  8984     I(4)            4           scalar   ARG,IN           8988,8992                         
 LOC                        Func   8991                                 scalar                    8991                              
 MPP_SUM_INT4_2D            Subr   8984                                          PRIV                                               
 PELIST                     Dummy  8984     I(4)            4     1     1        ARG,IN           8992                              
 PTR                        Local  8990     I(8)            8           scalar   PTR              8991                              

Page 398         Source Listing                  MPP_SUM_INT4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   8996 
   8997 !#######################################################################
   8998     subroutine mpp_sum_int4_3d( a, length, pelist )
   8999       integer(i4_kind), intent(inout) :: a(:,:,:)
   9000       integer, intent(in) :: length
   9001       integer, intent(in), optional :: pelist(:)
   9002       integer(i4_kind) :: a1D(length)
   9003 
   9004       pointer( ptr, a1D )
   9005       ptr = LOC(a)
   9006       call mpp_sum( a1D, length, pelist )
   9007 
   9008       return
   9009     end subroutine mpp_sum_int4_3d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_sum_int4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  8998     I(4)            4     3     1        ARG,INOUT        9005                              
 A1D                        Local  9002     I(4)            4     1     0                         9006                              
 LENGTH                     Dummy  8998     I(4)            4           scalar   ARG,IN           9002,9006                         
 LOC                        Func   9005                                 scalar                    9005                              
 MPP_SUM_INT4_3D            Subr   8998                                          PRIV                                               
 PELIST                     Dummy  8998     I(4)            4     1     1        ARG,IN           9006                              
 PTR                        Local  9004     I(8)            8           scalar   PTR              9005                              

Page 399         Source Listing                  MPP_SUM_INT4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   9010 
   9011 !#######################################################################
   9012     subroutine mpp_sum_int4_4d( a, length, pelist )
   9013       integer(i4_kind), intent(inout) :: a(:,:,:,:)
   9014       integer, intent(in) :: length
   9015       integer, intent(in), optional :: pelist(:)
   9016       integer(i4_kind) :: a1D(length)
   9017 
   9018       pointer( ptr, a1D )
   9019       ptr = LOC(a)
   9020       call mpp_sum( a1D, length, pelist )
   9021 
   9022       return
   9023     end subroutine mpp_sum_int4_4d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_sum_int4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9012     I(4)            4     4     1        ARG,INOUT        9019                              
 A1D                        Local  9016     I(4)            4     1     0                         9020                              
 LENGTH                     Dummy  9012     I(4)            4           scalar   ARG,IN           9016,9020                         
 LOC                        Func   9019                                 scalar                    9019                              
 MPP_SUM_INT4_4D            Subr   9012                                          PRIV                                               
 PELIST                     Dummy  9012     I(4)            4     1     1        ARG,IN           9020                              
 PTR                        Local  9018     I(8)            8           scalar   PTR              9019                              

Page 400         Source Listing                  MPP_SUM_INT4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   9024 
   9025 !#######################################################################
   9026     subroutine mpp_sum_int4_5d( a, length, pelist )
   9027       integer(i4_kind), intent(inout) :: a(:,:,:,:,:)
   9028       integer, intent(in) :: length
   9029       integer, intent(in), optional :: pelist(:)
   9030       integer(i4_kind) :: a1D(length)
   9031 
   9032       pointer( ptr, a1D )
   9033       ptr = LOC(a)
   9034       call mpp_sum( a1D, length, pelist )
   9035 
   9036       return
   9037     end subroutine mpp_sum_int4_5d


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_sum_int4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9026     I(4)            4     5     1        ARG,INOUT        9033                              
 A1D                        Local  9030     I(4)            4     1     0                         9034                              
 LENGTH                     Dummy  9026     I(4)            4           scalar   ARG,IN           9030,9034                         
 LOC                        Func   9033                                 scalar                    9033                              
 MPP_SUM_INT4_5D            Subr   9026                                          PRIV                                               
 PELIST                     Dummy  9026     I(4)            4     1     1        ARG,IN           9034                              
 PTR                        Local  9032     I(8)            8           scalar   PTR              9033                              

Page 401         Source Listing                  MPP_SUM_INT4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_sum.inc

   9038 # 47 "../mpp/include/mpp_sum_mpi.h" 2 
   9039 # 1093 "../mpp/include/mpp_comm_mpi.inc" 2 
   9040 !--------------------------------
   9041 
   9042 
   9043 
   9044 
   9045 
   9046 
   9047 
   9048 
   9049 
   9050 
   9051 
   9052 
   9053 
   9054 
   9055 
   9056 
   9057 
   9058 
   9059 # 1 "../mpp/include/mpp_sum_mpi_ad.h" 1 
   9060 ! -*-f90-*-
   9061 
   9062 
   9063 !***********************************************************************
   9064 !*                   GNU Lesser General Public License
   9065 !*
   9066 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9067 !*
   9068 !* FMS is free software: you can redistribute it and/or modify it under
   9069 !* the terms of the GNU Lesser General Public License as published by
   9070 !* the Free Software Foundation, either version 3 of the License, or (at
   9071 !* your option) any later version.
   9072 !*
   9073 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9074 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9075 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9076 !* for more details.
   9077 !*
   9078 !* You should have received a copy of the GNU Lesser General Public
   9079 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9080 !***********************************************************************
   9081 
   9082     subroutine mpp_sum_real8_ad( a, length, pelist )
   9083 !sums array a over the PEs in pelist (all PEs if this argument is omitted)
   9084 !result is also automatically broadcast: all PEs have the sum in a at the end
   9085 !we are using f77-style call: array passed by address and not descriptor; further,
   9086 !the f90 conformance check is avoided.
   9087       integer, intent(in) :: length
   9088       integer, intent(in), optional :: pelist(:)
   9089       real(r8_kind), intent(inout) :: a(*)
   9090       integer :: n, errunit
   9091 
   9092       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_SUM: You must first call mpp_init.' )
   9093       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   9094 

Page 402         Source Listing                  MPP_SUM_REAL8_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi_ad.h

   9095       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   9096       if( verbose )call mpp_error( NOTE, 'MPP_SUM: using MPI_ALLREDUCE...' )
   9097       if( debug ) then
   9098           errunit = stderr()
   9099           write( errunit,* )'pe, n, peset(n)%id=', pe, n, peset(n)%id
   9100       endif
   9101       call mpp_broadcast(a, length, peset(n)%list(1), PELIST=pelist)
   9102       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, length*8 )
   9103       return
   9104     end subroutine mpp_sum_real8_ad


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_sum_real8_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9082     R(8)            8     1     0        ARG,INOUT        9101                              
 ERRUNIT                    Local  9090     I(4)            4           scalar                    9098,9099                         
 LENGTH                     Dummy  9082     I(4)            4           scalar   ARG,IN           9101,9102                         
 MPP_SUM_REAL8_AD           Subr   9082                                          PRIV             9139,9153,9167,9181,9195          
 N                          Local  9090     I(4)            4           scalar                    9093,9099,9101                    
 PELIST                     Dummy  9082     I(4)            4     1     1        ARG,IN           9093,9101                         

Page 403         Source Listing                  MPP_SUM_REAL8_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi_ad.h

   9105 
   9106 !#######################################################################
   9107 # 1 "../mpp/include/mpp_sum_ad.inc" 1 
   9108 ! -*-f90-*-
   9109 
   9110 !***********************************************************************
   9111 !*                   GNU Lesser General Public License
   9112 !*
   9113 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9114 !*
   9115 !* FMS is free software: you can redistribute it and/or modify it under
   9116 !* the terms of the GNU Lesser General Public License as published by
   9117 !* the Free Software Foundation, either version 3 of the License, or (at
   9118 !* your option) any later version.
   9119 !*
   9120 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9121 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9122 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9123 !* for more details.
   9124 !*
   9125 !* You should have received a copy of the GNU Lesser General Public
   9126 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9127 !***********************************************************************
   9128 
   9129 !#######################################################################
   9130 
   9131     subroutine mpp_sum_real8_scalar_ad( a, pelist )
   9132 !sums array a when only first element is passed: this routine just converts to a call to mpp_sum_int4
   9133       real(r8_kind), intent(inout) :: a
   9134       integer, intent(in), optional :: pelist(:)
   9135       real(r8_kind) :: b(1)
   9136 
   9137       b(1) = a
   9138       if( debug )call mpp_error( NOTE, 'MPP_SUM_SCALAR_: calling MPP_SUM_ ...' )
   9139       call mpp_sum_real8_ad( b, 1, pelist )
   9140       a = b(1)
   9141       return
   9142     end subroutine mpp_sum_real8_scalar_ad

Page 404         Source Listing                  MPP_SUM_REAL8_SCALAR_AD
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_sum_ad.inc



ENTRY POINTS

  Name                                           
                                                 
 mpp_mod_mp_mpp_sum_real8_scalar_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9131     R(8)            8           scalar   ARG,INOUT        9137,9140                         
 B                          Local  9135     R(8)            8     1     1                         9137,9139,9140                    
 MPP_SUM_REAL8_SCALAR_AD    Subr   9131                                          PRIV                                               
 PELIST                     Dummy  9131     I(4)            4     1     1        ARG,IN           9139                              

Page 405         Source Listing                  MPP_SUM_REAL8_SCALAR_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9143 
   9144 !#######################################################################
   9145     subroutine mpp_sum_real8_2d_ad( a, length, pelist )
   9146       real(r8_kind), intent(inout) :: a(:,:)
   9147       integer, intent(in) :: length
   9148       integer, intent(in), optional :: pelist(:)
   9149       real(r8_kind) :: a1D(length)
   9150 
   9151       pointer( ptr, a1D )
   9152       ptr = LOC(a)
   9153       call mpp_sum_ad( a1D, length, pelist )
   9154 
   9155       return
   9156     end subroutine mpp_sum_real8_2d_ad


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_sum_real8_2d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9145     R(8)            8     2     1        ARG,INOUT        9152                              
 A1D                        Local  9149     R(8)            8     1     0                         9153                              
 LENGTH                     Dummy  9145     I(4)            4           scalar   ARG,IN           9149,9153                         
 LOC                        Func   9152                                 scalar                    9152                              
 MPP_SUM_AD                 Local  9153                                 scalar                    223,9153,9167,9181,9195,9317,9331,
                                                                                                  9345,9359,9481,9495,9509,9523,9642
                                                                                                  ,9656,9670,9684                   
 MPP_SUM_REAL8_2D_AD        Subr   9145                                          PRIV                                               
 PELIST                     Dummy  9145     I(4)            4     1     1        ARG,IN           9153                              
 PTR                        Local  9151     I(8)            8           scalar   PTR              9152                              

Page 406         Source Listing                  MPP_SUM_REAL8_2D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9157 
   9158 !#######################################################################
   9159     subroutine mpp_sum_real8_3d_ad( a, length, pelist )
   9160       real(r8_kind), intent(inout) :: a(:,:,:)
   9161       integer, intent(in) :: length
   9162       integer, intent(in), optional :: pelist(:)
   9163       real(r8_kind) :: a1D(length)
   9164 
   9165       pointer( ptr, a1D )
   9166       ptr = LOC(a)
   9167       call mpp_sum_ad( a1D, length, pelist )
   9168 
   9169       return
   9170     end subroutine mpp_sum_real8_3d_ad


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_sum_real8_3d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9159     R(8)            8     3     1        ARG,INOUT        9166                              
 A1D                        Local  9163     R(8)            8     1     0                         9167                              
 LENGTH                     Dummy  9159     I(4)            4           scalar   ARG,IN           9163,9167                         
 LOC                        Func   9166                                 scalar                    9166                              
 MPP_SUM_REAL8_3D_AD        Subr   9159                                          PRIV                                               
 PELIST                     Dummy  9159     I(4)            4     1     1        ARG,IN           9167                              
 PTR                        Local  9165     I(8)            8           scalar   PTR              9166                              

Page 407         Source Listing                  MPP_SUM_REAL8_3D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9171 
   9172 !#######################################################################
   9173     subroutine mpp_sum_real8_4d_ad( a, length, pelist )
   9174       real(r8_kind), intent(inout) :: a(:,:,:,:)
   9175       integer, intent(in) :: length
   9176       integer, intent(in), optional :: pelist(:)
   9177       real(r8_kind) :: a1D(length)
   9178 
   9179       pointer( ptr, a1D )
   9180       ptr = LOC(a)
   9181       call mpp_sum_ad( a1D, length, pelist )
   9182 
   9183       return
   9184     end subroutine mpp_sum_real8_4d_ad


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_sum_real8_4d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9173     R(8)            8     4     1        ARG,INOUT        9180                              
 A1D                        Local  9177     R(8)            8     1     0                         9181                              
 LENGTH                     Dummy  9173     I(4)            4           scalar   ARG,IN           9177,9181                         
 LOC                        Func   9180                                 scalar                    9180                              
 MPP_SUM_REAL8_4D_AD        Subr   9173                                          PRIV                                               
 PELIST                     Dummy  9173     I(4)            4     1     1        ARG,IN           9181                              
 PTR                        Local  9179     I(8)            8           scalar   PTR              9180                              

Page 408         Source Listing                  MPP_SUM_REAL8_4D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9185 
   9186 !#######################################################################
   9187     subroutine mpp_sum_real8_5d_ad( a, length, pelist )
   9188       real(r8_kind), intent(inout) :: a(:,:,:,:,:)
   9189       integer, intent(in) :: length
   9190       integer, intent(in), optional :: pelist(:)
   9191       real(r8_kind) :: a1D(length)
   9192 
   9193       pointer( ptr, a1D )
   9194       ptr = LOC(a)
   9195       call mpp_sum_ad( a1D, length, pelist )
   9196 
   9197       return
   9198     end subroutine mpp_sum_real8_5d_ad


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_sum_real8_5d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9187     R(8)            8     5     1        ARG,INOUT        9194                              
 A1D                        Local  9191     R(8)            8     1     0                         9195                              
 LENGTH                     Dummy  9187     I(4)            4           scalar   ARG,IN           9191,9195                         
 LOC                        Func   9194                                 scalar                    9194                              
 MPP_SUM_REAL8_5D_AD        Subr   9187                                          PRIV                                               
 PELIST                     Dummy  9187     I(4)            4     1     1        ARG,IN           9195                              
 PTR                        Local  9193     I(8)            8           scalar   PTR              9194                              

Page 409         Source Listing                  MPP_SUM_REAL8_5D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9199 # 49 "../mpp/include/mpp_sum_mpi_ad.h" 2 
   9200 # 1113 "../mpp/include/mpp_comm_mpi.inc" 2 
   9201 
   9202 # 1134
   9203 
   9204 
   9205 
   9206 
   9207 
   9208 
   9209 
   9210 
   9211 
   9212 
   9213 
   9214 
   9215 
   9216 
   9217 
   9218 
   9219 
   9220 
   9221 
   9222 
   9223 # 1 "../mpp/include/mpp_sum_mpi_ad.h" 1 
   9224 ! -*-f90-*-
   9225 
   9226 
   9227 !***********************************************************************
   9228 !*                   GNU Lesser General Public License
   9229 !*
   9230 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9231 !*
   9232 !* FMS is free software: you can redistribute it and/or modify it under
   9233 !* the terms of the GNU Lesser General Public License as published by
   9234 !* the Free Software Foundation, either version 3 of the License, or (at
   9235 !* your option) any later version.
   9236 !*
   9237 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9238 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9239 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9240 !* for more details.
   9241 !*
   9242 !* You should have received a copy of the GNU Lesser General Public
   9243 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9244 !***********************************************************************
   9245 
   9246     subroutine mpp_sum_real4_ad( a, length, pelist )
   9247 !sums array a over the PEs in pelist (all PEs if this argument is omitted)
   9248 !result is also automatically broadcast: all PEs have the sum in a at the end
   9249 !we are using f77-style call: array passed by address and not descriptor; further,
   9250 !the f90 conformance check is avoided.
   9251       integer, intent(in) :: length
   9252       integer, intent(in), optional :: pelist(:)
   9253       real(r4_kind), intent(inout) :: a(*)
   9254       integer :: n, errunit
   9255 

Page 410         Source Listing                  MPP_SUM_REAL4_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi_ad.h

   9256       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_SUM: You must first call mpp_init.' )
   9257       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   9258 
   9259       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   9260       if( verbose )call mpp_error( NOTE, 'MPP_SUM: using MPI_ALLREDUCE...' )
   9261       if( debug ) then
   9262           errunit = stderr()
   9263           write( errunit,* )'pe, n, peset(n)%id=', pe, n, peset(n)%id
   9264       endif
   9265       call mpp_broadcast(a, length, peset(n)%list(1), PELIST=pelist)
   9266       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, length*4 )
   9267       return
   9268     end subroutine mpp_sum_real4_ad


ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_sum_real4_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9246     R(4)            4     1     0        ARG,INOUT        9265                              
 ERRUNIT                    Local  9254     I(4)            4           scalar                    9262,9263                         
 LENGTH                     Dummy  9246     I(4)            4           scalar   ARG,IN           9265,9266                         
 MPP_SUM_REAL4_AD           Subr   9246                                          PRIV             9303,9317,9331,9345,9359          
 N                          Local  9254     I(4)            4           scalar                    9257,9263,9265                    
 PELIST                     Dummy  9246     I(4)            4     1     1        ARG,IN           9257,9265                         

Page 411         Source Listing                  MPP_SUM_REAL4_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi_ad.h

   9269 
   9270 !#######################################################################
   9271 # 1 "../mpp/include/mpp_sum_ad.inc" 1 
   9272 ! -*-f90-*-
   9273 
   9274 !***********************************************************************
   9275 !*                   GNU Lesser General Public License
   9276 !*
   9277 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9278 !*
   9279 !* FMS is free software: you can redistribute it and/or modify it under
   9280 !* the terms of the GNU Lesser General Public License as published by
   9281 !* the Free Software Foundation, either version 3 of the License, or (at
   9282 !* your option) any later version.
   9283 !*
   9284 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9285 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9286 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9287 !* for more details.
   9288 !*
   9289 !* You should have received a copy of the GNU Lesser General Public
   9290 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9291 !***********************************************************************
   9292 
   9293 !#######################################################################
   9294 
   9295     subroutine mpp_sum_real4_scalar_ad( a, pelist )
   9296 !sums array a when only first element is passed: this routine just converts to a call to mpp_sum_int4
   9297       real(r4_kind), intent(inout) :: a
   9298       integer, intent(in), optional :: pelist(:)
   9299       real(r4_kind) :: b(1)
   9300 
   9301       b(1) = a
   9302       if( debug )call mpp_error( NOTE, 'MPP_SUM_SCALAR_: calling MPP_SUM_ ...' )
   9303       call mpp_sum_real4_ad( b, 1, pelist )
   9304       a = b(1)
   9305       return
   9306     end subroutine mpp_sum_real4_scalar_ad

Page 412         Source Listing                  MPP_SUM_REAL4_SCALAR_AD
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_sum_ad.inc



ENTRY POINTS

  Name                                           
                                                 
 mpp_mod_mp_mpp_sum_real4_scalar_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9295     R(4)            4           scalar   ARG,INOUT        9301,9304                         
 B                          Local  9299     R(4)            4     1     1                         9301,9303,9304                    
 MPP_SUM_REAL4_SCALAR_AD    Subr   9295                                          PRIV                                               
 PELIST                     Dummy  9295     I(4)            4     1     1        ARG,IN           9303                              

Page 413         Source Listing                  MPP_SUM_REAL4_SCALAR_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9307 
   9308 !#######################################################################
   9309     subroutine mpp_sum_real4_2d_ad( a, length, pelist )
   9310       real(r4_kind), intent(inout) :: a(:,:)
   9311       integer, intent(in) :: length
   9312       integer, intent(in), optional :: pelist(:)
   9313       real(r4_kind) :: a1D(length)
   9314 
   9315       pointer( ptr, a1D )
   9316       ptr = LOC(a)
   9317       call mpp_sum_ad( a1D, length, pelist )
   9318 
   9319       return
   9320     end subroutine mpp_sum_real4_2d_ad


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_sum_real4_2d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9309     R(4)            4     2     1        ARG,INOUT        9316                              
 A1D                        Local  9313     R(4)            4     1     0                         9317                              
 LENGTH                     Dummy  9309     I(4)            4           scalar   ARG,IN           9313,9317                         
 LOC                        Func   9316                                 scalar                    9316                              
 MPP_SUM_REAL4_2D_AD        Subr   9309                                          PRIV                                               
 PELIST                     Dummy  9309     I(4)            4     1     1        ARG,IN           9317                              
 PTR                        Local  9315     I(8)            8           scalar   PTR              9316                              

Page 414         Source Listing                  MPP_SUM_REAL4_2D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9321 
   9322 !#######################################################################
   9323     subroutine mpp_sum_real4_3d_ad( a, length, pelist )
   9324       real(r4_kind), intent(inout) :: a(:,:,:)
   9325       integer, intent(in) :: length
   9326       integer, intent(in), optional :: pelist(:)
   9327       real(r4_kind) :: a1D(length)
   9328 
   9329       pointer( ptr, a1D )
   9330       ptr = LOC(a)
   9331       call mpp_sum_ad( a1D, length, pelist )
   9332 
   9333       return
   9334     end subroutine mpp_sum_real4_3d_ad


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_sum_real4_3d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9323     R(4)            4     3     1        ARG,INOUT        9330                              
 A1D                        Local  9327     R(4)            4     1     0                         9331                              
 LENGTH                     Dummy  9323     I(4)            4           scalar   ARG,IN           9327,9331                         
 LOC                        Func   9330                                 scalar                    9330                              
 MPP_SUM_REAL4_3D_AD        Subr   9323                                          PRIV                                               
 PELIST                     Dummy  9323     I(4)            4     1     1        ARG,IN           9331                              
 PTR                        Local  9329     I(8)            8           scalar   PTR              9330                              

Page 415         Source Listing                  MPP_SUM_REAL4_3D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9335 
   9336 !#######################################################################
   9337     subroutine mpp_sum_real4_4d_ad( a, length, pelist )
   9338       real(r4_kind), intent(inout) :: a(:,:,:,:)
   9339       integer, intent(in) :: length
   9340       integer, intent(in), optional :: pelist(:)
   9341       real(r4_kind) :: a1D(length)
   9342 
   9343       pointer( ptr, a1D )
   9344       ptr = LOC(a)
   9345       call mpp_sum_ad( a1D, length, pelist )
   9346 
   9347       return
   9348     end subroutine mpp_sum_real4_4d_ad


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_sum_real4_4d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9337     R(4)            4     4     1        ARG,INOUT        9344                              
 A1D                        Local  9341     R(4)            4     1     0                         9345                              
 LENGTH                     Dummy  9337     I(4)            4           scalar   ARG,IN           9341,9345                         
 LOC                        Func   9344                                 scalar                    9344                              
 MPP_SUM_REAL4_4D_AD        Subr   9337                                          PRIV                                               
 PELIST                     Dummy  9337     I(4)            4     1     1        ARG,IN           9345                              
 PTR                        Local  9343     I(8)            8           scalar   PTR              9344                              

Page 416         Source Listing                  MPP_SUM_REAL4_4D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9349 
   9350 !#######################################################################
   9351     subroutine mpp_sum_real4_5d_ad( a, length, pelist )
   9352       real(r4_kind), intent(inout) :: a(:,:,:,:,:)
   9353       integer, intent(in) :: length
   9354       integer, intent(in), optional :: pelist(:)
   9355       real(r4_kind) :: a1D(length)
   9356 
   9357       pointer( ptr, a1D )
   9358       ptr = LOC(a)
   9359       call mpp_sum_ad( a1D, length, pelist )
   9360 
   9361       return
   9362     end subroutine mpp_sum_real4_5d_ad


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_sum_real4_5d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9351     R(4)            4     5     1        ARG,INOUT        9358                              
 A1D                        Local  9355     R(4)            4     1     0                         9359                              
 LENGTH                     Dummy  9351     I(4)            4           scalar   ARG,IN           9355,9359                         
 LOC                        Func   9358                                 scalar                    9358                              
 MPP_SUM_REAL4_5D_AD        Subr   9351                                          PRIV                                               
 PELIST                     Dummy  9351     I(4)            4     1     1        ARG,IN           9359                              
 PTR                        Local  9357     I(8)            8           scalar   PTR              9358                              

Page 417         Source Listing                  MPP_SUM_REAL4_5D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9363 # 49 "../mpp/include/mpp_sum_mpi_ad.h" 2 
   9364 # 1155 "../mpp/include/mpp_comm_mpi.inc" 2 
   9365 
   9366 # 1176
   9367 
   9368 
   9369 
   9370 
   9371 
   9372 
   9373 
   9374 
   9375 
   9376 
   9377 
   9378 
   9379 
   9380 
   9381 
   9382 
   9383 
   9384 
   9385 
   9386 
   9387 # 1 "../mpp/include/mpp_sum_mpi_ad.h" 1 
   9388 ! -*-f90-*-
   9389 
   9390 
   9391 !***********************************************************************
   9392 !*                   GNU Lesser General Public License
   9393 !*
   9394 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9395 !*
   9396 !* FMS is free software: you can redistribute it and/or modify it under
   9397 !* the terms of the GNU Lesser General Public License as published by
   9398 !* the Free Software Foundation, either version 3 of the License, or (at
   9399 !* your option) any later version.
   9400 !*
   9401 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9402 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9403 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9404 !* for more details.
   9405 !*
   9406 !* You should have received a copy of the GNU Lesser General Public
   9407 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9408 !***********************************************************************
   9409 
   9410     subroutine mpp_sum_int8_ad( a, length, pelist )
   9411 !sums array a over the PEs in pelist (all PEs if this argument is omitted)
   9412 !result is also automatically broadcast: all PEs have the sum in a at the end
   9413 !we are using f77-style call: array passed by address and not descriptor; further,
   9414 !the f90 conformance check is avoided.
   9415       integer, intent(in) :: length
   9416       integer, intent(in), optional :: pelist(:)
   9417       integer(i8_kind), intent(inout) :: a(*)
   9418       integer :: n, errunit
   9419 

Page 418         Source Listing                  MPP_SUM_INT8_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi_ad.h

   9420       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_SUM: You must first call mpp_init.' )
   9421       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   9422 
   9423       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   9424       if( verbose )call mpp_error( NOTE, 'MPP_SUM: using MPI_ALLREDUCE...' )
   9425       if( debug ) then
   9426           errunit = stderr()
   9427           write( errunit,* )'pe, n, peset(n)%id=', pe, n, peset(n)%id
   9428       endif
   9429       call mpp_broadcast(a, length, peset(n)%list(1), PELIST=pelist)
   9430       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, length*8 )
   9431       return
   9432     end subroutine mpp_sum_int8_ad


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_sum_int8_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9410     I(8)            8     1     0        ARG,INOUT        9429                              
 ERRUNIT                    Local  9418     I(4)            4           scalar                    9426,9427                         
 LENGTH                     Dummy  9410     I(4)            4           scalar   ARG,IN           9429,9430                         
 MPP_SUM_INT8_AD            Subr   9410                                          PRIV             9467,9481,9495,9509,9523          
 N                          Local  9418     I(4)            4           scalar                    9421,9427,9429                    
 PELIST                     Dummy  9410     I(4)            4     1     1        ARG,IN           9421,9429                         

Page 419         Source Listing                  MPP_SUM_INT8_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi_ad.h

   9433 
   9434 !#######################################################################
   9435 # 1 "../mpp/include/mpp_sum_ad.inc" 1 
   9436 ! -*-f90-*-
   9437 
   9438 !***********************************************************************
   9439 !*                   GNU Lesser General Public License
   9440 !*
   9441 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9442 !*
   9443 !* FMS is free software: you can redistribute it and/or modify it under
   9444 !* the terms of the GNU Lesser General Public License as published by
   9445 !* the Free Software Foundation, either version 3 of the License, or (at
   9446 !* your option) any later version.
   9447 !*
   9448 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9449 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9450 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9451 !* for more details.
   9452 !*
   9453 !* You should have received a copy of the GNU Lesser General Public
   9454 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9455 !***********************************************************************
   9456 
   9457 !#######################################################################
   9458 
   9459     subroutine mpp_sum_int8_scalar_ad( a, pelist )
   9460 !sums array a when only first element is passed: this routine just converts to a call to mpp_sum_int4
   9461       integer(i8_kind), intent(inout) :: a
   9462       integer, intent(in), optional :: pelist(:)
   9463       integer(i8_kind) :: b(1)
   9464 
   9465       b(1) = a
   9466       if( debug )call mpp_error( NOTE, 'MPP_SUM_SCALAR_: calling MPP_SUM_ ...' )
   9467       call mpp_sum_int8_ad( b, 1, pelist )
   9468       a = b(1)
   9469       return
   9470     end subroutine mpp_sum_int8_scalar_ad

Page 420         Source Listing                  MPP_SUM_INT8_SCALAR_AD
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_sum_ad.inc



ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_sum_int8_scalar_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9459     I(8)            8           scalar   ARG,INOUT        9465,9468                         
 B                          Local  9463     I(8)            8     1     1                         9465,9467,9468                    
 MPP_SUM_INT8_SCALAR_AD     Subr   9459                                          PRIV                                               
 PELIST                     Dummy  9459     I(4)            4     1     1        ARG,IN           9467                              

Page 421         Source Listing                  MPP_SUM_INT8_SCALAR_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9471 
   9472 !#######################################################################
   9473     subroutine mpp_sum_int8_2d_ad( a, length, pelist )
   9474       integer(i8_kind), intent(inout) :: a(:,:)
   9475       integer, intent(in) :: length
   9476       integer, intent(in), optional :: pelist(:)
   9477       integer(i8_kind) :: a1D(length)
   9478 
   9479       pointer( ptr, a1D )
   9480       ptr = LOC(a)
   9481       call mpp_sum_ad( a1D, length, pelist )
   9482 
   9483       return
   9484     end subroutine mpp_sum_int8_2d_ad


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_sum_int8_2d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9473     I(8)            8     2     1        ARG,INOUT        9480                              
 A1D                        Local  9477     I(8)            8     1     0                         9481                              
 LENGTH                     Dummy  9473     I(4)            4           scalar   ARG,IN           9477,9481                         
 LOC                        Func   9480                                 scalar                    9480                              
 MPP_SUM_INT8_2D_AD         Subr   9473                                          PRIV                                               
 PELIST                     Dummy  9473     I(4)            4     1     1        ARG,IN           9481                              
 PTR                        Local  9479     I(8)            8           scalar   PTR              9480                              

Page 422         Source Listing                  MPP_SUM_INT8_2D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9485 
   9486 !#######################################################################
   9487     subroutine mpp_sum_int8_3d_ad( a, length, pelist )
   9488       integer(i8_kind), intent(inout) :: a(:,:,:)
   9489       integer, intent(in) :: length
   9490       integer, intent(in), optional :: pelist(:)
   9491       integer(i8_kind) :: a1D(length)
   9492 
   9493       pointer( ptr, a1D )
   9494       ptr = LOC(a)
   9495       call mpp_sum_ad( a1D, length, pelist )
   9496 
   9497       return
   9498     end subroutine mpp_sum_int8_3d_ad


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_sum_int8_3d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9487     I(8)            8     3     1        ARG,INOUT        9494                              
 A1D                        Local  9491     I(8)            8     1     0                         9495                              
 LENGTH                     Dummy  9487     I(4)            4           scalar   ARG,IN           9491,9495                         
 LOC                        Func   9494                                 scalar                    9494                              
 MPP_SUM_INT8_3D_AD         Subr   9487                                          PRIV                                               
 PELIST                     Dummy  9487     I(4)            4     1     1        ARG,IN           9495                              
 PTR                        Local  9493     I(8)            8           scalar   PTR              9494                              

Page 423         Source Listing                  MPP_SUM_INT8_3D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9499 
   9500 !#######################################################################
   9501     subroutine mpp_sum_int8_4d_ad( a, length, pelist )
   9502       integer(i8_kind), intent(inout) :: a(:,:,:,:)
   9503       integer, intent(in) :: length
   9504       integer, intent(in), optional :: pelist(:)
   9505       integer(i8_kind) :: a1D(length)
   9506 
   9507       pointer( ptr, a1D )
   9508       ptr = LOC(a)
   9509       call mpp_sum_ad( a1D, length, pelist )
   9510 
   9511       return
   9512     end subroutine mpp_sum_int8_4d_ad


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_sum_int8_4d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9501     I(8)            8     4     1        ARG,INOUT        9508                              
 A1D                        Local  9505     I(8)            8     1     0                         9509                              
 LENGTH                     Dummy  9501     I(4)            4           scalar   ARG,IN           9505,9509                         
 LOC                        Func   9508                                 scalar                    9508                              
 MPP_SUM_INT8_4D_AD         Subr   9501                                          PRIV                                               
 PELIST                     Dummy  9501     I(4)            4     1     1        ARG,IN           9509                              
 PTR                        Local  9507     I(8)            8           scalar   PTR              9508                              

Page 424         Source Listing                  MPP_SUM_INT8_4D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9513 
   9514 !#######################################################################
   9515     subroutine mpp_sum_int8_5d_ad( a, length, pelist )
   9516       integer(i8_kind), intent(inout) :: a(:,:,:,:,:)
   9517       integer, intent(in) :: length
   9518       integer, intent(in), optional :: pelist(:)
   9519       integer(i8_kind) :: a1D(length)
   9520 
   9521       pointer( ptr, a1D )
   9522       ptr = LOC(a)
   9523       call mpp_sum_ad( a1D, length, pelist )
   9524 
   9525       return
   9526     end subroutine mpp_sum_int8_5d_ad


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_sum_int8_5d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9515     I(8)            8     5     1        ARG,INOUT        9522                              
 A1D                        Local  9519     I(8)            8     1     0                         9523                              
 LENGTH                     Dummy  9515     I(4)            4           scalar   ARG,IN           9519,9523                         
 LOC                        Func   9522                                 scalar                    9522                              
 MPP_SUM_INT8_5D_AD         Subr   9515                                          PRIV                                               
 PELIST                     Dummy  9515     I(4)            4     1     1        ARG,IN           9523                              
 PTR                        Local  9521     I(8)            8           scalar   PTR              9522                              

Page 425         Source Listing                  MPP_SUM_INT8_5D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9527 # 49 "../mpp/include/mpp_sum_mpi_ad.h" 2 
   9528 # 1197 "../mpp/include/mpp_comm_mpi.inc" 2 
   9529 
   9530 
   9531 
   9532 
   9533 
   9534 
   9535 
   9536 
   9537 
   9538 
   9539 
   9540 
   9541 
   9542 
   9543 
   9544 
   9545 
   9546 
   9547 
   9548 # 1 "../mpp/include/mpp_sum_mpi_ad.h" 1 
   9549 ! -*-f90-*-
   9550 
   9551 
   9552 !***********************************************************************
   9553 !*                   GNU Lesser General Public License
   9554 !*
   9555 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9556 !*
   9557 !* FMS is free software: you can redistribute it and/or modify it under
   9558 !* the terms of the GNU Lesser General Public License as published by
   9559 !* the Free Software Foundation, either version 3 of the License, or (at
   9560 !* your option) any later version.
   9561 !*
   9562 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9563 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9564 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9565 !* for more details.
   9566 !*
   9567 !* You should have received a copy of the GNU Lesser General Public
   9568 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9569 !***********************************************************************
   9570 
   9571     subroutine mpp_sum_int4_ad( a, length, pelist )
   9572 !sums array a over the PEs in pelist (all PEs if this argument is omitted)
   9573 !result is also automatically broadcast: all PEs have the sum in a at the end
   9574 !we are using f77-style call: array passed by address and not descriptor; further,
   9575 !the f90 conformance check is avoided.
   9576       integer, intent(in) :: length
   9577       integer, intent(in), optional :: pelist(:)
   9578       integer(i4_kind), intent(inout) :: a(*)
   9579       integer :: n, errunit
   9580 
   9581       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_SUM: You must first call mpp_init.' )
   9582       n = get_peset(pelist); if( peset(n)%count.EQ.1 )return
   9583 

Page 426         Source Listing                  MPP_SUM_INT4_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi_ad.h

   9584       if( debug .and. (current_clock.NE.0) )call system_clock_mpi(start_tick)
   9585       if( verbose )call mpp_error( NOTE, 'MPP_SUM: using MPI_ALLREDUCE...' )
   9586       if( debug ) then
   9587           errunit = stderr()
   9588           write( errunit,* )'pe, n, peset(n)%id=', pe, n, peset(n)%id
   9589       endif
   9590       call mpp_broadcast(a, length, peset(n)%list(1), PELIST=pelist)
   9591       if( debug .and. (current_clock.NE.0) )call increment_current_clock( EVENT_ALLREDUCE, length*4 )
   9592       return
   9593     end subroutine mpp_sum_int4_ad


ENTRY POINTS

  Name                                   
                                         
 mpp_mod_mp_mpp_sum_int4_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9571     I(4)            4     1     0        ARG,INOUT        9590                              
 ERRUNIT                    Local  9579     I(4)            4           scalar                    9587,9588                         
 LENGTH                     Dummy  9571     I(4)            4           scalar   ARG,IN           9590,9591                         
 MPP_SUM_INT4_AD            Subr   9571                                          PRIV             9628,9642,9656,9670,9684          
 N                          Local  9579     I(4)            4           scalar                    9582,9588,9590                    
 PELIST                     Dummy  9571     I(4)            4     1     1        ARG,IN           9582,9590                         

Page 427         Source Listing                  MPP_SUM_INT4_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_mpi_ad.h

   9594 
   9595 !#######################################################################
   9596 # 1 "../mpp/include/mpp_sum_ad.inc" 1 
   9597 ! -*-f90-*-
   9598 
   9599 !***********************************************************************
   9600 !*                   GNU Lesser General Public License
   9601 !*
   9602 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9603 !*
   9604 !* FMS is free software: you can redistribute it and/or modify it under
   9605 !* the terms of the GNU Lesser General Public License as published by
   9606 !* the Free Software Foundation, either version 3 of the License, or (at
   9607 !* your option) any later version.
   9608 !*
   9609 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9610 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9611 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9612 !* for more details.
   9613 !*
   9614 !* You should have received a copy of the GNU Lesser General Public
   9615 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9616 !***********************************************************************
   9617 
   9618 !#######################################################################
   9619 
   9620     subroutine mpp_sum_int4_scalar_ad( a, pelist )
   9621 !sums array a when only first element is passed: this routine just converts to a call to mpp_sum_int4
   9622       integer(i4_kind), intent(inout) :: a
   9623       integer, intent(in), optional :: pelist(:)
   9624       integer(i4_kind) :: b(1)
   9625 
   9626       b(1) = a
   9627       if( debug )call mpp_error( NOTE, 'MPP_SUM_SCALAR_: calling MPP_SUM_ ...' )
   9628       call mpp_sum_int4_ad( b, 1, pelist )
   9629       a = b(1)
   9630       return
   9631     end subroutine mpp_sum_int4_scalar_ad

Page 428         Source Listing                  MPP_SUM_INT4_SCALAR_AD
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_sum_ad.inc



ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_sum_int4_scalar_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9620     I(4)            4           scalar   ARG,INOUT        9626,9629                         
 B                          Local  9624     I(4)            4     1     1                         9626,9628,9629                    
 MPP_SUM_INT4_SCALAR_AD     Subr   9620                                          PRIV                                               
 PELIST                     Dummy  9620     I(4)            4     1     1        ARG,IN           9628                              

Page 429         Source Listing                  MPP_SUM_INT4_SCALAR_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9632 
   9633 !#######################################################################
   9634     subroutine mpp_sum_int4_2d_ad( a, length, pelist )
   9635       integer(i4_kind), intent(inout) :: a(:,:)
   9636       integer, intent(in) :: length
   9637       integer, intent(in), optional :: pelist(:)
   9638       integer(i4_kind) :: a1D(length)
   9639 
   9640       pointer( ptr, a1D )
   9641       ptr = LOC(a)
   9642       call mpp_sum_ad( a1D, length, pelist )
   9643 
   9644       return
   9645     end subroutine mpp_sum_int4_2d_ad


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_sum_int4_2d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9634     I(4)            4     2     1        ARG,INOUT        9641                              
 A1D                        Local  9638     I(4)            4     1     0                         9642                              
 LENGTH                     Dummy  9634     I(4)            4           scalar   ARG,IN           9638,9642                         
 LOC                        Func   9641                                 scalar                    9641                              
 MPP_SUM_INT4_2D_AD         Subr   9634                                          PRIV                                               
 PELIST                     Dummy  9634     I(4)            4     1     1        ARG,IN           9642                              
 PTR                        Local  9640     I(8)            8           scalar   PTR              9641                              

Page 430         Source Listing                  MPP_SUM_INT4_2D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9646 
   9647 !#######################################################################
   9648     subroutine mpp_sum_int4_3d_ad( a, length, pelist )
   9649       integer(i4_kind), intent(inout) :: a(:,:,:)
   9650       integer, intent(in) :: length
   9651       integer, intent(in), optional :: pelist(:)
   9652       integer(i4_kind) :: a1D(length)
   9653 
   9654       pointer( ptr, a1D )
   9655       ptr = LOC(a)
   9656       call mpp_sum_ad( a1D, length, pelist )
   9657 
   9658       return
   9659     end subroutine mpp_sum_int4_3d_ad


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_sum_int4_3d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9648     I(4)            4     3     1        ARG,INOUT        9655                              
 A1D                        Local  9652     I(4)            4     1     0                         9656                              
 LENGTH                     Dummy  9648     I(4)            4           scalar   ARG,IN           9652,9656                         
 LOC                        Func   9655                                 scalar                    9655                              
 MPP_SUM_INT4_3D_AD         Subr   9648                                          PRIV                                               
 PELIST                     Dummy  9648     I(4)            4     1     1        ARG,IN           9656                              
 PTR                        Local  9654     I(8)            8           scalar   PTR              9655                              

Page 431         Source Listing                  MPP_SUM_INT4_3D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9660 
   9661 !#######################################################################
   9662     subroutine mpp_sum_int4_4d_ad( a, length, pelist )
   9663       integer(i4_kind), intent(inout) :: a(:,:,:,:)
   9664       integer, intent(in) :: length
   9665       integer, intent(in), optional :: pelist(:)
   9666       integer(i4_kind) :: a1D(length)
   9667 
   9668       pointer( ptr, a1D )
   9669       ptr = LOC(a)
   9670       call mpp_sum_ad( a1D, length, pelist )
   9671 
   9672       return
   9673     end subroutine mpp_sum_int4_4d_ad


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_sum_int4_4d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9662     I(4)            4     4     1        ARG,INOUT        9669                              
 A1D                        Local  9666     I(4)            4     1     0                         9670                              
 LENGTH                     Dummy  9662     I(4)            4           scalar   ARG,IN           9666,9670                         
 LOC                        Func   9669                                 scalar                    9669                              
 MPP_SUM_INT4_4D_AD         Subr   9662                                          PRIV                                               
 PELIST                     Dummy  9662     I(4)            4     1     1        ARG,IN           9670                              
 PTR                        Local  9668     I(8)            8           scalar   PTR              9669                              

Page 432         Source Listing                  MPP_SUM_INT4_4D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9674 
   9675 !#######################################################################
   9676     subroutine mpp_sum_int4_5d_ad( a, length, pelist )
   9677       integer(i4_kind), intent(inout) :: a(:,:,:,:,:)
   9678       integer, intent(in) :: length
   9679       integer, intent(in), optional :: pelist(:)
   9680       integer(i4_kind) :: a1D(length)
   9681 
   9682       pointer( ptr, a1D )
   9683       ptr = LOC(a)
   9684       call mpp_sum_ad( a1D, length, pelist )
   9685 
   9686       return
   9687     end subroutine mpp_sum_int4_5d_ad


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_sum_int4_5d_ad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  9676     I(4)            4     5     1        ARG,INOUT        9683                              
 A1D                        Local  9680     I(4)            4     1     0                         9684                              
 LENGTH                     Dummy  9676     I(4)            4           scalar   ARG,IN           9680,9684                         
 LOC                        Func   9683                                 scalar                    9683                              
 MPP_SUM_INT4_5D_AD         Subr   9676                                          PRIV                                               
 PELIST                     Dummy  9676     I(4)            4     1     1        ARG,IN           9684                              
 PTR                        Local  9682     I(8)            8           scalar   PTR              9683                              

Page 433         Source Listing                  MPP_SUM_INT4_5D_AD
2021-06-01 08:51                                 ../mpp/include/mpp_sum_ad.inc

   9688 # 49 "../mpp/include/mpp_sum_mpi_ad.h" 2 
   9689 # 1217 "../mpp/include/mpp_comm_mpi.inc" 2 
   9690 
   9691 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   9692 !                                                                             !
   9693 !            SCATTER AND GATHER ROUTINES: mpp_alltoall                        !
   9694 !                                                                             !
   9695 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   9696 
   9697 
   9698 
   9699 
   9700 
   9701 
   9702 
   9703 
   9704 
   9705 
   9706 
   9707 
   9708 
   9709 # 1 "../mpp/include/mpp_alltoall_mpi.h" 1 
   9710 !***********************************************************************
   9711 !*                   GNU Lesser General Public License
   9712 !*
   9713 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9714 !*
   9715 !* FMS is free software: you can redistribute it and/or modify it under
   9716 !* the terms of the GNU Lesser General Public License as published by
   9717 !* the Free Software Foundation, either version 3 of the License, or (at
   9718 !* your option) any later version.
   9719 !*
   9720 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9721 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9722 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9723 !* for more details.
   9724 !*
   9725 !* You should have received a copy of the GNU Lesser General Public
   9726 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9727 !***********************************************************************
   9728 
   9729 subroutine mpp_alltoall_int4(sbuf, scount, rbuf, rcount, pelist)
   9730     integer(i4_kind), intent(in) :: sbuf(:)
   9731     integer(i4_kind), intent(inout) :: rbuf(:)
   9732     integer,   intent(in) :: scount, rcount
   9733 
   9734     integer, intent(in), optional :: pelist(0:)
   9735     integer :: n
   9736 
   9737     if (.NOT. module_is_initialized) &
   9738         call mpp_error(FATAL, 'MPP_ALLTOALL: You must first call mpp_init.')
   9739 
   9740     n = get_peset(pelist)
   9741 
   9742     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
   9743 
   9744     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALL_: using MPI_Alltoall...')

Page 434         Source Listing                  MPP_ALLTOALL_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

   9745 
   9746 ! TODO: Message lengths greater than 1
   9747     call MPI_Alltoall(sbuf, scount, MPI_INTEGER4, rbuf, rcount, MPI_INTEGER4, &
   9748                       peset(n)%id, error)
   9749 
   9750     if (current_clock .NE. 0) &
   9751         call increment_current_clock(EVENT_ALLTOALL, 4)
   9752 
   9753 end subroutine mpp_alltoall_int4


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_alltoall_int4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 EVENT_ALLTOALL             Param  9751     I(4)            4           scalar   PRIV             174,9751,9781,9824,9883,9913,9956,
                                                                                                  10015,10045,10088,10147,10177,1022
                                                                                                  0,10279,10309,10352,10411,10441,10
                                                                                                  484,10543,10573,10616,10675,10705,
                                                                                                  10748                             
 MPI_ALLTOALL               Subr   9747                                                           9747                              
 MPP_ALLTOALL_INT4          Subr   9729                                          PRIV                                               
 N                          Local  9735     I(4)            4           scalar                    9740,9748                         
 PELIST                     Dummy  9729     I(4)            4     1     1        ARG,IN           9740                              
 RBUF                       Dummy  9729     I(4)            4     1     1        ARG,INOUT        9747                              
 RCOUNT                     Dummy  9729     I(4)            4           scalar   ARG,IN           9747                              
 SBUF                       Dummy  9729     I(4)            4     1     1        ARG,IN           9747                              
 SCOUNT                     Dummy  9729     I(4)            4           scalar   ARG,IN           9747                              

Page 435         Source Listing                  MPP_ALLTOALL_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

   9754 
   9755 
   9756 subroutine mpp_alltoall_int4_v(sbuf, ssize, sdispl, rbuf, rsize, rdispl, pelist)
   9757     integer(i4_kind), intent(in) :: sbuf(:)
   9758     integer(i4_kind), intent(inout) :: rbuf(:)
   9759 
   9760 ! TODO: Optionally set displacements to cumulative sums of ssize, rsize
   9761     integer, intent(in) :: ssize(:), rsize(:)
   9762     integer, intent(in) :: sdispl(:), rdispl(:)
   9763 
   9764     integer, intent(in), optional :: pelist(0:)
   9765     integer :: n
   9766 
   9767     if (.NOT. module_is_initialized) &
   9768         call mpp_error(FATAL, 'MPP_ALLTOALLV_: You must first call mpp_init.')
   9769 
   9770     n = get_peset(pelist)
   9771 
   9772     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
   9773 
   9774     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLV_: using MPI_Alltoallv...')
   9775 
   9776     call MPI_Alltoallv(sbuf, ssize, sdispl, MPI_INTEGER4, &
   9777                        rbuf, rsize, rdispl, MPI_INTEGER4, &
   9778                        peset(n)%id, error)
   9779 
   9780     if (current_clock .NE. 0) &
   9781         call increment_current_clock(EVENT_ALLTOALL, 4)
   9782 
   9783 end subroutine mpp_alltoall_int4_v

Page 436         Source Listing                  MPP_ALLTOALL_INT4_V
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_alltoall_int4_v_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALLV              Subr   9776                                                           9776                              
 MPP_ALLTOALL_INT4_V        Subr   9756                                          PRIV                                               
 N                          Local  9765     I(4)            4           scalar                    9770,9778                         
 PELIST                     Dummy  9756     I(4)            4     1     1        ARG,IN           9770                              
 RBUF                       Dummy  9756     I(4)            4     1     1        ARG,INOUT        9777                              
 RDISPL                     Dummy  9756     I(4)            4     1     1        ARG,IN           9777                              
 RSIZE                      Dummy  9756     I(4)            4     1     1        ARG,IN           9777                              
 SBUF                       Dummy  9756     I(4)            4     1     1        ARG,IN           9776                              
 SDISPL                     Dummy  9756     I(4)            4     1     1        ARG,IN           9776                              
 SSIZE                      Dummy  9756     I(4)            4     1     1        ARG,IN           9776                              

Page 437         Source Listing                  MPP_ALLTOALL_INT4_V
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

   9784 
   9785 
   9786 subroutine mpp_alltoall_int4_w(sbuf, ssize, sdispl, stype, &
   9787                           rbuf, rsize, rdispl, rtype, pelist)
   9788     integer(i4_kind), intent(in) :: sbuf(:)
   9789     integer(i4_kind), intent(inout) :: rbuf(:)
   9790 
   9791     integer, intent(in) :: ssize(:), rsize(:)
   9792     integer, intent(in) :: sdispl(:), rdispl(:)
   9793     type(mpp_type), intent(in) :: stype(:), rtype(:)
   9794     integer, intent(in), optional :: pelist(0:)
   9795     integer :: i, n
   9796 
   9797     integer, allocatable :: sendtypes(:), recvtypes(:)
   9798 
   9799     if (.NOT. module_is_initialized) &
   9800         call mpp_error(FATAL, 'MPP_ALLTOALLW_: You must first call mpp_init.')
   9801 
   9802     n = get_peset(pelist)
   9803 
   9804     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
   9805 
   9806     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLW_: using MPI_Alltoallw...')
   9807 
   9808 ! Convert mpp_types to MPI datatype IDs
   9809 ! NOTE: sendtypes and recvtypes must be the same size
   9810     allocate(sendtypes(size(stype)))
   9811     allocate(recvtypes(size(rtype)))
   9812     do i = 1, size(stype)
   9813         sendtypes(i) = stype(i)%id
   9814         recvtypes(i) = rtype(i)%id
   9815     end do
   9816 
   9817     call MPI_Alltoallw(sbuf, ssize, sdispl, sendtypes, &
   9818                        rbuf, rsize, rdispl, recvtypes, &
   9819                        peset(n)%id, error)
   9820 
   9821     deallocate(sendtypes, recvtypes)
   9822 
   9823     if (current_clock .NE. 0) &
   9824         call increment_current_clock(EVENT_ALLTOALL, 4)
   9825 
   9826 end subroutine mpp_alltoall_int4_w

Page 438         Source Listing                  MPP_ALLTOALL_INT4_W
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_alltoall_int4_w_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  9795     I(4)            4           scalar                    9812,9813,9814                    
 MPI_ALLTOALLW              Subr   9817                                                           9817                              
 MPP_ALLTOALL_INT4_W        Subr   9786                                          PRIV                                               
 N                          Local  9795     I(4)            4           scalar                    9802,9819                         
 PELIST                     Dummy  9787     I(4)            4     1     1        ARG,IN           9802                              
 RBUF                       Dummy  9787     I(4)            4     1     1        ARG,INOUT        9818                              
 RDISPL                     Dummy  9787     I(4)            4     1     1        ARG,IN           9818                              
 RECVTYPES                  Local  9797     I(4)            4     1     1        ALC              9811,9814,9818,9821               
 RSIZE                      Dummy  9787     I(4)            4     1     1        ARG,IN           9818                              
 RTYPE                      Dummy  9787     RECORD          248   1     1        ARG,IN           9811,9814                         
 SBUF                       Dummy  9786     I(4)            4     1     1        ARG,IN           9817                              
 SDISPL                     Dummy  9786     I(4)            4     1     1        ARG,IN           9817                              
 SENDTYPES                  Local  9797     I(4)            4     1     1        ALC              9810,9813,9817,9821               
 SIZE                       Func   9810                                 scalar                    9810,9811,9812                    
 SSIZE                      Dummy  9786     I(4)            4     1     1        ARG,IN           9817                              
 STYPE                      Dummy  9786     RECORD          248   1     1        ARG,IN           9810,9812,9813                    

Page 439         Source Listing                  MPP_ALLTOALL_INT4_W
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

   9827 # 1237 "../mpp/include/mpp_comm_mpi.inc" 2 
   9828 
   9829 
   9830 
   9831 
   9832 
   9833 
   9834 
   9835 
   9836 
   9837 
   9838 
   9839 
   9840 
   9841 # 1 "../mpp/include/mpp_alltoall_mpi.h" 1 
   9842 !***********************************************************************
   9843 !*                   GNU Lesser General Public License
   9844 !*
   9845 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9846 !*
   9847 !* FMS is free software: you can redistribute it and/or modify it under
   9848 !* the terms of the GNU Lesser General Public License as published by
   9849 !* the Free Software Foundation, either version 3 of the License, or (at
   9850 !* your option) any later version.
   9851 !*
   9852 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9853 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9854 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9855 !* for more details.
   9856 !*
   9857 !* You should have received a copy of the GNU Lesser General Public
   9858 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9859 !***********************************************************************
   9860 
   9861 subroutine mpp_alltoall_int8(sbuf, scount, rbuf, rcount, pelist)
   9862     integer(i8_kind), intent(in) :: sbuf(:)
   9863     integer(i8_kind), intent(inout) :: rbuf(:)
   9864     integer,   intent(in) :: scount, rcount
   9865 
   9866     integer, intent(in), optional :: pelist(0:)
   9867     integer :: n
   9868 
   9869     if (.NOT. module_is_initialized) &
   9870         call mpp_error(FATAL, 'MPP_ALLTOALL: You must first call mpp_init.')
   9871 
   9872     n = get_peset(pelist)
   9873 
   9874     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
   9875 
   9876     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALL_: using MPI_Alltoall...')
   9877 
   9878 ! TODO: Message lengths greater than 1
   9879     call MPI_Alltoall(sbuf, scount, MPI_INTEGER8, rbuf, rcount, MPI_INTEGER8, &
   9880                       peset(n)%id, error)
   9881 
   9882     if (current_clock .NE. 0) &
   9883         call increment_current_clock(EVENT_ALLTOALL, 8)

Page 440         Source Listing                  MPP_ALLTOALL_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

   9884 
   9885 end subroutine mpp_alltoall_int8


ENTRY POINTS

  Name                                     
                                           
 mpp_mod_mp_mpp_alltoall_int8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALL               Subr   9879                                                           9879                              
 MPP_ALLTOALL_INT8          Subr   9861                                          PRIV                                               
 N                          Local  9867     I(4)            4           scalar                    9872,9880                         
 PELIST                     Dummy  9861     I(4)            4     1     1        ARG,IN           9872                              
 RBUF                       Dummy  9861     I(8)            8     1     1        ARG,INOUT        9879                              
 RCOUNT                     Dummy  9861     I(4)            4           scalar   ARG,IN           9879                              
 SBUF                       Dummy  9861     I(8)            8     1     1        ARG,IN           9879                              
 SCOUNT                     Dummy  9861     I(4)            4           scalar   ARG,IN           9879                              

Page 441         Source Listing                  MPP_ALLTOALL_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

   9886 
   9887 
   9888 subroutine mpp_alltoall_int8_v(sbuf, ssize, sdispl, rbuf, rsize, rdispl, pelist)
   9889     integer(i8_kind), intent(in) :: sbuf(:)
   9890     integer(i8_kind), intent(inout) :: rbuf(:)
   9891 
   9892 ! TODO: Optionally set displacements to cumulative sums of ssize, rsize
   9893     integer, intent(in) :: ssize(:), rsize(:)
   9894     integer, intent(in) :: sdispl(:), rdispl(:)
   9895 
   9896     integer, intent(in), optional :: pelist(0:)
   9897     integer :: n
   9898 
   9899     if (.NOT. module_is_initialized) &
   9900         call mpp_error(FATAL, 'MPP_ALLTOALLV_: You must first call mpp_init.')
   9901 
   9902     n = get_peset(pelist)
   9903 
   9904     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
   9905 
   9906     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLV_: using MPI_Alltoallv...')
   9907 
   9908     call MPI_Alltoallv(sbuf, ssize, sdispl, MPI_INTEGER8, &
   9909                        rbuf, rsize, rdispl, MPI_INTEGER8, &
   9910                        peset(n)%id, error)
   9911 
   9912     if (current_clock .NE. 0) &
   9913         call increment_current_clock(EVENT_ALLTOALL, 8)
   9914 
   9915 end subroutine mpp_alltoall_int8_v

Page 442         Source Listing                  MPP_ALLTOALL_INT8_V
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_alltoall_int8_v_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALLV              Subr   9908                                                           9908                              
 MPP_ALLTOALL_INT8_V        Subr   9888                                          PRIV                                               
 N                          Local  9897     I(4)            4           scalar                    9902,9910                         
 PELIST                     Dummy  9888     I(4)            4     1     1        ARG,IN           9902                              
 RBUF                       Dummy  9888     I(8)            8     1     1        ARG,INOUT        9909                              
 RDISPL                     Dummy  9888     I(4)            4     1     1        ARG,IN           9909                              
 RSIZE                      Dummy  9888     I(4)            4     1     1        ARG,IN           9909                              
 SBUF                       Dummy  9888     I(8)            8     1     1        ARG,IN           9908                              
 SDISPL                     Dummy  9888     I(4)            4     1     1        ARG,IN           9908                              
 SSIZE                      Dummy  9888     I(4)            4     1     1        ARG,IN           9908                              

Page 443         Source Listing                  MPP_ALLTOALL_INT8_V
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

   9916 
   9917 
   9918 subroutine mpp_alltoall_int8_w(sbuf, ssize, sdispl, stype, &
   9919                           rbuf, rsize, rdispl, rtype, pelist)
   9920     integer(i8_kind), intent(in) :: sbuf(:)
   9921     integer(i8_kind), intent(inout) :: rbuf(:)
   9922 
   9923     integer, intent(in) :: ssize(:), rsize(:)
   9924     integer, intent(in) :: sdispl(:), rdispl(:)
   9925     type(mpp_type), intent(in) :: stype(:), rtype(:)
   9926     integer, intent(in), optional :: pelist(0:)
   9927     integer :: i, n
   9928 
   9929     integer, allocatable :: sendtypes(:), recvtypes(:)
   9930 
   9931     if (.NOT. module_is_initialized) &
   9932         call mpp_error(FATAL, 'MPP_ALLTOALLW_: You must first call mpp_init.')
   9933 
   9934     n = get_peset(pelist)
   9935 
   9936     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
   9937 
   9938     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLW_: using MPI_Alltoallw...')
   9939 
   9940 ! Convert mpp_types to MPI datatype IDs
   9941 ! NOTE: sendtypes and recvtypes must be the same size
   9942     allocate(sendtypes(size(stype)))
   9943     allocate(recvtypes(size(rtype)))
   9944     do i = 1, size(stype)
   9945         sendtypes(i) = stype(i)%id
   9946         recvtypes(i) = rtype(i)%id
   9947     end do
   9948 
   9949     call MPI_Alltoallw(sbuf, ssize, sdispl, sendtypes, &
   9950                        rbuf, rsize, rdispl, recvtypes, &
   9951                        peset(n)%id, error)
   9952 
   9953     deallocate(sendtypes, recvtypes)
   9954 
   9955     if (current_clock .NE. 0) &
   9956         call increment_current_clock(EVENT_ALLTOALL, 8)
   9957 
   9958 end subroutine mpp_alltoall_int8_w

Page 444         Source Listing                  MPP_ALLTOALL_INT8_W
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_alltoall_int8_w_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  9927     I(4)            4           scalar                    9944,9945,9946                    
 MPI_ALLTOALLW              Subr   9949                                                           9949                              
 MPP_ALLTOALL_INT8_W        Subr   9918                                          PRIV                                               
 N                          Local  9927     I(4)            4           scalar                    9934,9951                         
 PELIST                     Dummy  9919     I(4)            4     1     1        ARG,IN           9934                              
 RBUF                       Dummy  9919     I(8)            8     1     1        ARG,INOUT        9950                              
 RDISPL                     Dummy  9919     I(4)            4     1     1        ARG,IN           9950                              
 RECVTYPES                  Local  9929     I(4)            4     1     1        ALC              9943,9946,9950,9953               
 RSIZE                      Dummy  9919     I(4)            4     1     1        ARG,IN           9950                              
 RTYPE                      Dummy  9919     RECORD          248   1     1        ARG,IN           9943,9946                         
 SBUF                       Dummy  9918     I(8)            8     1     1        ARG,IN           9949                              
 SDISPL                     Dummy  9918     I(4)            4     1     1        ARG,IN           9949                              
 SENDTYPES                  Local  9929     I(4)            4     1     1        ALC              9942,9945,9949,9953               
 SIZE                       Func   9942                                 scalar                    9942,9943,9944                    
 SSIZE                      Dummy  9918     I(4)            4     1     1        ARG,IN           9949                              
 STYPE                      Dummy  9918     RECORD          248   1     1        ARG,IN           9942,9944,9945                    

Page 445         Source Listing                  MPP_ALLTOALL_INT8_W
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

   9959 # 1251 "../mpp/include/mpp_comm_mpi.inc" 2 
   9960 
   9961 
   9962 
   9963 
   9964 
   9965 
   9966 
   9967 
   9968 
   9969 
   9970 
   9971 
   9972 
   9973 # 1 "../mpp/include/mpp_alltoall_mpi.h" 1 
   9974 !***********************************************************************
   9975 !*                   GNU Lesser General Public License
   9976 !*
   9977 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9978 !*
   9979 !* FMS is free software: you can redistribute it and/or modify it under
   9980 !* the terms of the GNU Lesser General Public License as published by
   9981 !* the Free Software Foundation, either version 3 of the License, or (at
   9982 !* your option) any later version.
   9983 !*
   9984 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9985 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9986 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9987 !* for more details.
   9988 !*
   9989 !* You should have received a copy of the GNU Lesser General Public
   9990 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9991 !***********************************************************************
   9992 
   9993 subroutine mpp_alltoall_real4(sbuf, scount, rbuf, rcount, pelist)
   9994     real(r4_kind), intent(in) :: sbuf(:)
   9995     real(r4_kind), intent(inout) :: rbuf(:)
   9996     integer,   intent(in) :: scount, rcount
   9997 
   9998     integer, intent(in), optional :: pelist(0:)
   9999     integer :: n
  10000 
  10001     if (.NOT. module_is_initialized) &
  10002         call mpp_error(FATAL, 'MPP_ALLTOALL: You must first call mpp_init.')
  10003 
  10004     n = get_peset(pelist)
  10005 
  10006     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10007 
  10008     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALL_: using MPI_Alltoall...')
  10009 
  10010 ! TODO: Message lengths greater than 1
  10011     call MPI_Alltoall(sbuf, scount, MPI_REAL4, rbuf, rcount, MPI_REAL4, &
  10012                       peset(n)%id, error)
  10013 
  10014     if (current_clock .NE. 0) &
  10015         call increment_current_clock(EVENT_ALLTOALL, 4)

Page 446         Source Listing                  MPP_ALLTOALL_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10016 
  10017 end subroutine mpp_alltoall_real4


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_alltoall_real4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALL               Subr   10011                                                          10011                             
 MPP_ALLTOALL_REAL4         Subr   9993                                          PRIV                                               
 N                          Local  9999     I(4)            4           scalar                    10004,10012                       
 PELIST                     Dummy  9993     I(4)            4     1     1        ARG,IN           10004                             
 RBUF                       Dummy  9993     R(4)            4     1     1        ARG,INOUT        10011                             
 RCOUNT                     Dummy  9993     I(4)            4           scalar   ARG,IN           10011                             
 SBUF                       Dummy  9993     R(4)            4     1     1        ARG,IN           10011                             
 SCOUNT                     Dummy  9993     I(4)            4           scalar   ARG,IN           10011                             

Page 447         Source Listing                  MPP_ALLTOALL_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10018 
  10019 
  10020 subroutine mpp_alltoall_real4_v(sbuf, ssize, sdispl, rbuf, rsize, rdispl, pelist)
  10021     real(r4_kind), intent(in) :: sbuf(:)
  10022     real(r4_kind), intent(inout) :: rbuf(:)
  10023 
  10024 ! TODO: Optionally set displacements to cumulative sums of ssize, rsize
  10025     integer, intent(in) :: ssize(:), rsize(:)
  10026     integer, intent(in) :: sdispl(:), rdispl(:)
  10027 
  10028     integer, intent(in), optional :: pelist(0:)
  10029     integer :: n
  10030 
  10031     if (.NOT. module_is_initialized) &
  10032         call mpp_error(FATAL, 'MPP_ALLTOALLV_: You must first call mpp_init.')
  10033 
  10034     n = get_peset(pelist)
  10035 
  10036     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10037 
  10038     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLV_: using MPI_Alltoallv...')
  10039 
  10040     call MPI_Alltoallv(sbuf, ssize, sdispl, MPI_REAL4, &
  10041                        rbuf, rsize, rdispl, MPI_REAL4, &
  10042                        peset(n)%id, error)
  10043 
  10044     if (current_clock .NE. 0) &
  10045         call increment_current_clock(EVENT_ALLTOALL, 4)
  10046 
  10047 end subroutine mpp_alltoall_real4_v

Page 448         Source Listing                  MPP_ALLTOALL_REAL4_V
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_alltoall_real4_v_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALLV              Subr   10040                                                          10040                             
 MPP_ALLTOALL_REAL4_V       Subr   10020                                         PRIV                                               
 N                          Local  10029    I(4)            4           scalar                    10034,10042                       
 PELIST                     Dummy  10020    I(4)            4     1     1        ARG,IN           10034                             
 RBUF                       Dummy  10020    R(4)            4     1     1        ARG,INOUT        10041                             
 RDISPL                     Dummy  10020    I(4)            4     1     1        ARG,IN           10041                             
 RSIZE                      Dummy  10020    I(4)            4     1     1        ARG,IN           10041                             
 SBUF                       Dummy  10020    R(4)            4     1     1        ARG,IN           10040                             
 SDISPL                     Dummy  10020    I(4)            4     1     1        ARG,IN           10040                             
 SSIZE                      Dummy  10020    I(4)            4     1     1        ARG,IN           10040                             

Page 449         Source Listing                  MPP_ALLTOALL_REAL4_V
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10048 
  10049 
  10050 subroutine mpp_alltoall_real4_w(sbuf, ssize, sdispl, stype, &
  10051                           rbuf, rsize, rdispl, rtype, pelist)
  10052     real(r4_kind), intent(in) :: sbuf(:)
  10053     real(r4_kind), intent(inout) :: rbuf(:)
  10054 
  10055     integer, intent(in) :: ssize(:), rsize(:)
  10056     integer, intent(in) :: sdispl(:), rdispl(:)
  10057     type(mpp_type), intent(in) :: stype(:), rtype(:)
  10058     integer, intent(in), optional :: pelist(0:)
  10059     integer :: i, n
  10060 
  10061     integer, allocatable :: sendtypes(:), recvtypes(:)
  10062 
  10063     if (.NOT. module_is_initialized) &
  10064         call mpp_error(FATAL, 'MPP_ALLTOALLW_: You must first call mpp_init.')
  10065 
  10066     n = get_peset(pelist)
  10067 
  10068     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10069 
  10070     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLW_: using MPI_Alltoallw...')
  10071 
  10072 ! Convert mpp_types to MPI datatype IDs
  10073 ! NOTE: sendtypes and recvtypes must be the same size
  10074     allocate(sendtypes(size(stype)))
  10075     allocate(recvtypes(size(rtype)))
  10076     do i = 1, size(stype)
  10077         sendtypes(i) = stype(i)%id
  10078         recvtypes(i) = rtype(i)%id
  10079     end do
  10080 
  10081     call MPI_Alltoallw(sbuf, ssize, sdispl, sendtypes, &
  10082                        rbuf, rsize, rdispl, recvtypes, &
  10083                        peset(n)%id, error)
  10084 
  10085     deallocate(sendtypes, recvtypes)
  10086 
  10087     if (current_clock .NE. 0) &
  10088         call increment_current_clock(EVENT_ALLTOALL, 4)
  10089 
  10090 end subroutine mpp_alltoall_real4_w

Page 450         Source Listing                  MPP_ALLTOALL_REAL4_W
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_alltoall_real4_w_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  10059    I(4)            4           scalar                    10076,10077,10078                 
 MPI_ALLTOALLW              Subr   10081                                                          10081                             
 MPP_ALLTOALL_REAL4_W       Subr   10050                                         PRIV                                               
 N                          Local  10059    I(4)            4           scalar                    10066,10083                       
 PELIST                     Dummy  10051    I(4)            4     1     1        ARG,IN           10066                             
 RBUF                       Dummy  10051    R(4)            4     1     1        ARG,INOUT        10082                             
 RDISPL                     Dummy  10051    I(4)            4     1     1        ARG,IN           10082                             
 RECVTYPES                  Local  10061    I(4)            4     1     1        ALC              10075,10078,10082,10085           
 RSIZE                      Dummy  10051    I(4)            4     1     1        ARG,IN           10082                             
 RTYPE                      Dummy  10051    RECORD          248   1     1        ARG,IN           10075,10078                       
 SBUF                       Dummy  10050    R(4)            4     1     1        ARG,IN           10081                             
 SDISPL                     Dummy  10050    I(4)            4     1     1        ARG,IN           10081                             
 SENDTYPES                  Local  10061    I(4)            4     1     1        ALC              10074,10077,10081,10085           
 SIZE                       Func   10074                                scalar                    10074,10075,10076                 
 SSIZE                      Dummy  10050    I(4)            4     1     1        ARG,IN           10081                             
 STYPE                      Dummy  10050    RECORD          248   1     1        ARG,IN           10074,10076,10077                 

Page 451         Source Listing                  MPP_ALLTOALL_REAL4_W
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10091 # 1265 "../mpp/include/mpp_comm_mpi.inc" 2 
  10092 
  10093 
  10094 
  10095 
  10096 
  10097 
  10098 
  10099 
  10100 
  10101 
  10102 
  10103 
  10104 
  10105 # 1 "../mpp/include/mpp_alltoall_mpi.h" 1 
  10106 !***********************************************************************
  10107 !*                   GNU Lesser General Public License
  10108 !*
  10109 !* This file is part of the GFDL Flexible Modeling System (FMS).
  10110 !*
  10111 !* FMS is free software: you can redistribute it and/or modify it under
  10112 !* the terms of the GNU Lesser General Public License as published by
  10113 !* the Free Software Foundation, either version 3 of the License, or (at
  10114 !* your option) any later version.
  10115 !*
  10116 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  10117 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  10118 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  10119 !* for more details.
  10120 !*
  10121 !* You should have received a copy of the GNU Lesser General Public
  10122 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  10123 !***********************************************************************
  10124 
  10125 subroutine mpp_alltoall_real8(sbuf, scount, rbuf, rcount, pelist)
  10126     real(r8_kind), intent(in) :: sbuf(:)
  10127     real(r8_kind), intent(inout) :: rbuf(:)
  10128     integer,   intent(in) :: scount, rcount
  10129 
  10130     integer, intent(in), optional :: pelist(0:)
  10131     integer :: n
  10132 
  10133     if (.NOT. module_is_initialized) &
  10134         call mpp_error(FATAL, 'MPP_ALLTOALL: You must first call mpp_init.')
  10135 
  10136     n = get_peset(pelist)
  10137 
  10138     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10139 
  10140     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALL_: using MPI_Alltoall...')
  10141 
  10142 ! TODO: Message lengths greater than 1
  10143     call MPI_Alltoall(sbuf, scount, MPI_REAL8, rbuf, rcount, MPI_REAL8, &
  10144                       peset(n)%id, error)
  10145 
  10146     if (current_clock .NE. 0) &
  10147         call increment_current_clock(EVENT_ALLTOALL, 8)

Page 452         Source Listing                  MPP_ALLTOALL_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10148 
  10149 end subroutine mpp_alltoall_real8


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_alltoall_real8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALL               Subr   10143                                                          10143                             
 MPP_ALLTOALL_REAL8         Subr   10125                                         PRIV                                               
 N                          Local  10131    I(4)            4           scalar                    10136,10144                       
 PELIST                     Dummy  10125    I(4)            4     1     1        ARG,IN           10136                             
 RBUF                       Dummy  10125    R(8)            8     1     1        ARG,INOUT        10143                             
 RCOUNT                     Dummy  10125    I(4)            4           scalar   ARG,IN           10143                             
 SBUF                       Dummy  10125    R(8)            8     1     1        ARG,IN           10143                             
 SCOUNT                     Dummy  10125    I(4)            4           scalar   ARG,IN           10143                             

Page 453         Source Listing                  MPP_ALLTOALL_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10150 
  10151 
  10152 subroutine mpp_alltoall_real8_v(sbuf, ssize, sdispl, rbuf, rsize, rdispl, pelist)
  10153     real(r8_kind), intent(in) :: sbuf(:)
  10154     real(r8_kind), intent(inout) :: rbuf(:)
  10155 
  10156 ! TODO: Optionally set displacements to cumulative sums of ssize, rsize
  10157     integer, intent(in) :: ssize(:), rsize(:)
  10158     integer, intent(in) :: sdispl(:), rdispl(:)
  10159 
  10160     integer, intent(in), optional :: pelist(0:)
  10161     integer :: n
  10162 
  10163     if (.NOT. module_is_initialized) &
  10164         call mpp_error(FATAL, 'MPP_ALLTOALLV_: You must first call mpp_init.')
  10165 
  10166     n = get_peset(pelist)
  10167 
  10168     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10169 
  10170     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLV_: using MPI_Alltoallv...')
  10171 
  10172     call MPI_Alltoallv(sbuf, ssize, sdispl, MPI_REAL8, &
  10173                        rbuf, rsize, rdispl, MPI_REAL8, &
  10174                        peset(n)%id, error)
  10175 
  10176     if (current_clock .NE. 0) &
  10177         call increment_current_clock(EVENT_ALLTOALL, 8)
  10178 
  10179 end subroutine mpp_alltoall_real8_v

Page 454         Source Listing                  MPP_ALLTOALL_REAL8_V
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_alltoall_real8_v_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALLV              Subr   10172                                                          10172                             
 MPP_ALLTOALL_REAL8_V       Subr   10152                                         PRIV                                               
 N                          Local  10161    I(4)            4           scalar                    10166,10174                       
 PELIST                     Dummy  10152    I(4)            4     1     1        ARG,IN           10166                             
 RBUF                       Dummy  10152    R(8)            8     1     1        ARG,INOUT        10173                             
 RDISPL                     Dummy  10152    I(4)            4     1     1        ARG,IN           10173                             
 RSIZE                      Dummy  10152    I(4)            4     1     1        ARG,IN           10173                             
 SBUF                       Dummy  10152    R(8)            8     1     1        ARG,IN           10172                             
 SDISPL                     Dummy  10152    I(4)            4     1     1        ARG,IN           10172                             
 SSIZE                      Dummy  10152    I(4)            4     1     1        ARG,IN           10172                             

Page 455         Source Listing                  MPP_ALLTOALL_REAL8_V
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10180 
  10181 
  10182 subroutine mpp_alltoall_real8_w(sbuf, ssize, sdispl, stype, &
  10183                           rbuf, rsize, rdispl, rtype, pelist)
  10184     real(r8_kind), intent(in) :: sbuf(:)
  10185     real(r8_kind), intent(inout) :: rbuf(:)
  10186 
  10187     integer, intent(in) :: ssize(:), rsize(:)
  10188     integer, intent(in) :: sdispl(:), rdispl(:)
  10189     type(mpp_type), intent(in) :: stype(:), rtype(:)
  10190     integer, intent(in), optional :: pelist(0:)
  10191     integer :: i, n
  10192 
  10193     integer, allocatable :: sendtypes(:), recvtypes(:)
  10194 
  10195     if (.NOT. module_is_initialized) &
  10196         call mpp_error(FATAL, 'MPP_ALLTOALLW_: You must first call mpp_init.')
  10197 
  10198     n = get_peset(pelist)
  10199 
  10200     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10201 
  10202     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLW_: using MPI_Alltoallw...')
  10203 
  10204 ! Convert mpp_types to MPI datatype IDs
  10205 ! NOTE: sendtypes and recvtypes must be the same size
  10206     allocate(sendtypes(size(stype)))
  10207     allocate(recvtypes(size(rtype)))
  10208     do i = 1, size(stype)
  10209         sendtypes(i) = stype(i)%id
  10210         recvtypes(i) = rtype(i)%id
  10211     end do
  10212 
  10213     call MPI_Alltoallw(sbuf, ssize, sdispl, sendtypes, &
  10214                        rbuf, rsize, rdispl, recvtypes, &
  10215                        peset(n)%id, error)
  10216 
  10217     deallocate(sendtypes, recvtypes)
  10218 
  10219     if (current_clock .NE. 0) &
  10220         call increment_current_clock(EVENT_ALLTOALL, 8)
  10221 
  10222 end subroutine mpp_alltoall_real8_w

Page 456         Source Listing                  MPP_ALLTOALL_REAL8_W
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_alltoall_real8_w_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  10191    I(4)            4           scalar                    10208,10209,10210                 
 MPI_ALLTOALLW              Subr   10213                                                          10213                             
 MPP_ALLTOALL_REAL8_W       Subr   10182                                         PRIV                                               
 N                          Local  10191    I(4)            4           scalar                    10198,10215                       
 PELIST                     Dummy  10183    I(4)            4     1     1        ARG,IN           10198                             
 RBUF                       Dummy  10183    R(8)            8     1     1        ARG,INOUT        10214                             
 RDISPL                     Dummy  10183    I(4)            4     1     1        ARG,IN           10214                             
 RECVTYPES                  Local  10193    I(4)            4     1     1        ALC              10207,10210,10214,10217           
 RSIZE                      Dummy  10183    I(4)            4     1     1        ARG,IN           10214                             
 RTYPE                      Dummy  10183    RECORD          248   1     1        ARG,IN           10207,10210                       
 SBUF                       Dummy  10182    R(8)            8     1     1        ARG,IN           10213                             
 SDISPL                     Dummy  10182    I(4)            4     1     1        ARG,IN           10213                             
 SENDTYPES                  Local  10193    I(4)            4     1     1        ALC              10206,10209,10213,10217           
 SIZE                       Func   10206                                scalar                    10206,10207,10208                 
 SSIZE                      Dummy  10182    I(4)            4     1     1        ARG,IN           10213                             
 STYPE                      Dummy  10182    RECORD          248   1     1        ARG,IN           10206,10208,10209                 

Page 457         Source Listing                  MPP_ALLTOALL_REAL8_W
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10223 # 1279 "../mpp/include/mpp_comm_mpi.inc" 2 
  10224 
  10225 
  10226 
  10227 
  10228 
  10229 
  10230 
  10231 
  10232 
  10233 
  10234 
  10235 
  10236 
  10237 # 1 "../mpp/include/mpp_alltoall_mpi.h" 1 
  10238 !***********************************************************************
  10239 !*                   GNU Lesser General Public License
  10240 !*
  10241 !* This file is part of the GFDL Flexible Modeling System (FMS).
  10242 !*
  10243 !* FMS is free software: you can redistribute it and/or modify it under
  10244 !* the terms of the GNU Lesser General Public License as published by
  10245 !* the Free Software Foundation, either version 3 of the License, or (at
  10246 !* your option) any later version.
  10247 !*
  10248 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  10249 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  10250 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  10251 !* for more details.
  10252 !*
  10253 !* You should have received a copy of the GNU Lesser General Public
  10254 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  10255 !***********************************************************************
  10256 
  10257 subroutine mpp_alltoall_cmplx4(sbuf, scount, rbuf, rcount, pelist)
  10258     complex(c4_kind), intent(in) :: sbuf(:)
  10259     complex(c4_kind), intent(inout) :: rbuf(:)
  10260     integer,   intent(in) :: scount, rcount
  10261 
  10262     integer, intent(in), optional :: pelist(0:)
  10263     integer :: n
  10264 
  10265     if (.NOT. module_is_initialized) &
  10266         call mpp_error(FATAL, 'MPP_ALLTOALL: You must first call mpp_init.')
  10267 
  10268     n = get_peset(pelist)
  10269 
  10270     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10271 
  10272     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALL_: using MPI_Alltoall...')
  10273 
  10274 ! TODO: Message lengths greater than 1
  10275     call MPI_Alltoall(sbuf, scount, MPI_COMPLEX8, rbuf, rcount, MPI_COMPLEX8, &
  10276                       peset(n)%id, error)
  10277 
  10278     if (current_clock .NE. 0) &
  10279         call increment_current_clock(EVENT_ALLTOALL, 8)

Page 458         Source Listing                  MPP_ALLTOALL_CMPLX4
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10280 
  10281 end subroutine mpp_alltoall_cmplx4


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_alltoall_cmplx4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 C4_KIND                    Param  10258    I(4)            4           scalar   PRIV             10258,10259,10285,10286,10316,1031
                                                                                                  7,11227                           
 MPI_ALLTOALL               Subr   10275                                                          10275                             
 MPI_COMPLEX8               Param  10275    I(4)            4           scalar   PRIV             10275,10304,10305,11256,11271,1129
                                                                                                  1                                 
 MPP_ALLTOALL_CMPLX4        Subr   10257                                                                                            
 N                          Local  10263    I(4)            4           scalar                    10268,10276                       
 PELIST                     Dummy  10257    I(4)            4     1     1        ARG,IN           10268                             
 RBUF                       Dummy  10257    C(8)            8     1     1        ARG,INOUT        10275                             
 RCOUNT                     Dummy  10257    I(4)            4           scalar   ARG,IN           10275                             
 SBUF                       Dummy  10257    C(8)            8     1     1        ARG,IN           10275                             
 SCOUNT                     Dummy  10257    I(4)            4           scalar   ARG,IN           10275                             

Page 459         Source Listing                  MPP_ALLTOALL_CMPLX4
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10282 
  10283 
  10284 subroutine mpp_alltoall_cmplx4_v(sbuf, ssize, sdispl, rbuf, rsize, rdispl, pelist)
  10285     complex(c4_kind), intent(in) :: sbuf(:)
  10286     complex(c4_kind), intent(inout) :: rbuf(:)
  10287 
  10288 ! TODO: Optionally set displacements to cumulative sums of ssize, rsize
  10289     integer, intent(in) :: ssize(:), rsize(:)
  10290     integer, intent(in) :: sdispl(:), rdispl(:)
  10291 
  10292     integer, intent(in), optional :: pelist(0:)
  10293     integer :: n
  10294 
  10295     if (.NOT. module_is_initialized) &
  10296         call mpp_error(FATAL, 'MPP_ALLTOALLV_: You must first call mpp_init.')
  10297 
  10298     n = get_peset(pelist)
  10299 
  10300     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10301 
  10302     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLV_: using MPI_Alltoallv...')
  10303 
  10304     call MPI_Alltoallv(sbuf, ssize, sdispl, MPI_COMPLEX8, &
  10305                        rbuf, rsize, rdispl, MPI_COMPLEX8, &
  10306                        peset(n)%id, error)
  10307 
  10308     if (current_clock .NE. 0) &
  10309         call increment_current_clock(EVENT_ALLTOALL, 8)
  10310 
  10311 end subroutine mpp_alltoall_cmplx4_v

Page 460         Source Listing                  MPP_ALLTOALL_CMPLX4_V
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_alltoall_cmplx4_v_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALLV              Subr   10304                                                          10304                             
 MPP_ALLTOALL_CMPLX4_V      Subr   10284                                                                                            
 N                          Local  10293    I(4)            4           scalar                    10298,10306                       
 PELIST                     Dummy  10284    I(4)            4     1     1        ARG,IN           10298                             
 RBUF                       Dummy  10284    C(8)            8     1     1        ARG,INOUT        10305                             
 RDISPL                     Dummy  10284    I(4)            4     1     1        ARG,IN           10305                             
 RSIZE                      Dummy  10284    I(4)            4     1     1        ARG,IN           10305                             
 SBUF                       Dummy  10284    C(8)            8     1     1        ARG,IN           10304                             
 SDISPL                     Dummy  10284    I(4)            4     1     1        ARG,IN           10304                             
 SSIZE                      Dummy  10284    I(4)            4     1     1        ARG,IN           10304                             

Page 461         Source Listing                  MPP_ALLTOALL_CMPLX4_V
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10312 
  10313 
  10314 subroutine mpp_alltoall_cmplx4_w(sbuf, ssize, sdispl, stype, &
  10315                           rbuf, rsize, rdispl, rtype, pelist)
  10316     complex(c4_kind), intent(in) :: sbuf(:)
  10317     complex(c4_kind), intent(inout) :: rbuf(:)
  10318 
  10319     integer, intent(in) :: ssize(:), rsize(:)
  10320     integer, intent(in) :: sdispl(:), rdispl(:)
  10321     type(mpp_type), intent(in) :: stype(:), rtype(:)
  10322     integer, intent(in), optional :: pelist(0:)
  10323     integer :: i, n
  10324 
  10325     integer, allocatable :: sendtypes(:), recvtypes(:)
  10326 
  10327     if (.NOT. module_is_initialized) &
  10328         call mpp_error(FATAL, 'MPP_ALLTOALLW_: You must first call mpp_init.')
  10329 
  10330     n = get_peset(pelist)
  10331 
  10332     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10333 
  10334     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLW_: using MPI_Alltoallw...')
  10335 
  10336 ! Convert mpp_types to MPI datatype IDs
  10337 ! NOTE: sendtypes and recvtypes must be the same size
  10338     allocate(sendtypes(size(stype)))
  10339     allocate(recvtypes(size(rtype)))
  10340     do i = 1, size(stype)
  10341         sendtypes(i) = stype(i)%id
  10342         recvtypes(i) = rtype(i)%id
  10343     end do
  10344 
  10345     call MPI_Alltoallw(sbuf, ssize, sdispl, sendtypes, &
  10346                        rbuf, rsize, rdispl, recvtypes, &
  10347                        peset(n)%id, error)
  10348 
  10349     deallocate(sendtypes, recvtypes)
  10350 
  10351     if (current_clock .NE. 0) &
  10352         call increment_current_clock(EVENT_ALLTOALL, 8)
  10353 
  10354 end subroutine mpp_alltoall_cmplx4_w

Page 462         Source Listing                  MPP_ALLTOALL_CMPLX4_W
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_alltoall_cmplx4_w_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  10323    I(4)            4           scalar                    10340,10341,10342                 
 MPI_ALLTOALLW              Subr   10345                                                          10345                             
 MPP_ALLTOALL_CMPLX4_W      Subr   10314                                                                                            
 N                          Local  10323    I(4)            4           scalar                    10330,10347                       
 PELIST                     Dummy  10315    I(4)            4     1     1        ARG,IN           10330                             
 RBUF                       Dummy  10315    C(8)            8     1     1        ARG,INOUT        10346                             
 RDISPL                     Dummy  10315    I(4)            4     1     1        ARG,IN           10346                             
 RECVTYPES                  Local  10325    I(4)            4     1     1        ALC              10339,10342,10346,10349           
 RSIZE                      Dummy  10315    I(4)            4     1     1        ARG,IN           10346                             
 RTYPE                      Dummy  10315    RECORD          248   1     1        ARG,IN           10339,10342                       
 SBUF                       Dummy  10314    C(8)            8     1     1        ARG,IN           10345                             
 SDISPL                     Dummy  10314    I(4)            4     1     1        ARG,IN           10345                             
 SENDTYPES                  Local  10325    I(4)            4     1     1        ALC              10338,10341,10345,10349           
 SIZE                       Func   10338                                scalar                    10338,10339,10340                 
 SSIZE                      Dummy  10314    I(4)            4     1     1        ARG,IN           10345                             
 STYPE                      Dummy  10314    RECORD          248   1     1        ARG,IN           10338,10340,10341                 

Page 463         Source Listing                  MPP_ALLTOALL_CMPLX4_W
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10355 # 1293 "../mpp/include/mpp_comm_mpi.inc" 2 
  10356 
  10357 
  10358 
  10359 
  10360 
  10361 
  10362 
  10363 
  10364 
  10365 
  10366 
  10367 
  10368 
  10369 # 1 "../mpp/include/mpp_alltoall_mpi.h" 1 
  10370 !***********************************************************************
  10371 !*                   GNU Lesser General Public License
  10372 !*
  10373 !* This file is part of the GFDL Flexible Modeling System (FMS).
  10374 !*
  10375 !* FMS is free software: you can redistribute it and/or modify it under
  10376 !* the terms of the GNU Lesser General Public License as published by
  10377 !* the Free Software Foundation, either version 3 of the License, or (at
  10378 !* your option) any later version.
  10379 !*
  10380 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  10381 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  10382 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  10383 !* for more details.
  10384 !*
  10385 !* You should have received a copy of the GNU Lesser General Public
  10386 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  10387 !***********************************************************************
  10388 
  10389 subroutine mpp_alltoall_cmplx8(sbuf, scount, rbuf, rcount, pelist)
  10390     complex(c8_kind), intent(in) :: sbuf(:)
  10391     complex(c8_kind), intent(inout) :: rbuf(:)
  10392     integer,   intent(in) :: scount, rcount
  10393 
  10394     integer, intent(in), optional :: pelist(0:)
  10395     integer :: n
  10396 
  10397     if (.NOT. module_is_initialized) &
  10398         call mpp_error(FATAL, 'MPP_ALLTOALL: You must first call mpp_init.')
  10399 
  10400     n = get_peset(pelist)
  10401 
  10402     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10403 
  10404     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALL_: using MPI_Alltoall...')
  10405 
  10406 ! TODO: Message lengths greater than 1
  10407     call MPI_Alltoall(sbuf, scount, MPI_COMPLEX16, rbuf, rcount, MPI_COMPLEX16, &
  10408                       peset(n)%id, error)
  10409 
  10410     if (current_clock .NE. 0) &
  10411         call increment_current_clock(EVENT_ALLTOALL, 16)

Page 464         Source Listing                  MPP_ALLTOALL_CMPLX8
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10412 
  10413 end subroutine mpp_alltoall_cmplx8


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_alltoall_cmplx8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 C8_KIND                    Param  10390    I(4)            4           scalar   PRIV             10390,10391,10417,10418,10448,1044
                                                                                                  9,11337                           
 MPI_ALLTOALL               Subr   10407                                                          10407                             
 MPI_COMPLEX16              Param  10407    I(4)            4           scalar   PRIV             10407,10436,10437,11366,11381,1140
                                                                                                  1                                 
 MPP_ALLTOALL_CMPLX8        Subr   10389                                                                                            
 N                          Local  10395    I(4)            4           scalar                    10400,10408                       
 PELIST                     Dummy  10389    I(4)            4     1     1        ARG,IN           10400                             
 RBUF                       Dummy  10389    C(16)           16    1     1        ARG,INOUT        10407                             
 RCOUNT                     Dummy  10389    I(4)            4           scalar   ARG,IN           10407                             
 SBUF                       Dummy  10389    C(16)           16    1     1        ARG,IN           10407                             
 SCOUNT                     Dummy  10389    I(4)            4           scalar   ARG,IN           10407                             

Page 465         Source Listing                  MPP_ALLTOALL_CMPLX8
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10414 
  10415 
  10416 subroutine mpp_alltoall_cmplx8_v(sbuf, ssize, sdispl, rbuf, rsize, rdispl, pelist)
  10417     complex(c8_kind), intent(in) :: sbuf(:)
  10418     complex(c8_kind), intent(inout) :: rbuf(:)
  10419 
  10420 ! TODO: Optionally set displacements to cumulative sums of ssize, rsize
  10421     integer, intent(in) :: ssize(:), rsize(:)
  10422     integer, intent(in) :: sdispl(:), rdispl(:)
  10423 
  10424     integer, intent(in), optional :: pelist(0:)
  10425     integer :: n
  10426 
  10427     if (.NOT. module_is_initialized) &
  10428         call mpp_error(FATAL, 'MPP_ALLTOALLV_: You must first call mpp_init.')
  10429 
  10430     n = get_peset(pelist)
  10431 
  10432     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10433 
  10434     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLV_: using MPI_Alltoallv...')
  10435 
  10436     call MPI_Alltoallv(sbuf, ssize, sdispl, MPI_COMPLEX16, &
  10437                        rbuf, rsize, rdispl, MPI_COMPLEX16, &
  10438                        peset(n)%id, error)
  10439 
  10440     if (current_clock .NE. 0) &
  10441         call increment_current_clock(EVENT_ALLTOALL, 16)
  10442 
  10443 end subroutine mpp_alltoall_cmplx8_v

Page 466         Source Listing                  MPP_ALLTOALL_CMPLX8_V
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_alltoall_cmplx8_v_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALLV              Subr   10436                                                          10436                             
 MPP_ALLTOALL_CMPLX8_V      Subr   10416                                                                                            
 N                          Local  10425    I(4)            4           scalar                    10430,10438                       
 PELIST                     Dummy  10416    I(4)            4     1     1        ARG,IN           10430                             
 RBUF                       Dummy  10416    C(16)           16    1     1        ARG,INOUT        10437                             
 RDISPL                     Dummy  10416    I(4)            4     1     1        ARG,IN           10437                             
 RSIZE                      Dummy  10416    I(4)            4     1     1        ARG,IN           10437                             
 SBUF                       Dummy  10416    C(16)           16    1     1        ARG,IN           10436                             
 SDISPL                     Dummy  10416    I(4)            4     1     1        ARG,IN           10436                             
 SSIZE                      Dummy  10416    I(4)            4     1     1        ARG,IN           10436                             

Page 467         Source Listing                  MPP_ALLTOALL_CMPLX8_V
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10444 
  10445 
  10446 subroutine mpp_alltoall_cmplx8_w(sbuf, ssize, sdispl, stype, &
  10447                           rbuf, rsize, rdispl, rtype, pelist)
  10448     complex(c8_kind), intent(in) :: sbuf(:)
  10449     complex(c8_kind), intent(inout) :: rbuf(:)
  10450 
  10451     integer, intent(in) :: ssize(:), rsize(:)
  10452     integer, intent(in) :: sdispl(:), rdispl(:)
  10453     type(mpp_type), intent(in) :: stype(:), rtype(:)
  10454     integer, intent(in), optional :: pelist(0:)
  10455     integer :: i, n
  10456 
  10457     integer, allocatable :: sendtypes(:), recvtypes(:)
  10458 
  10459     if (.NOT. module_is_initialized) &
  10460         call mpp_error(FATAL, 'MPP_ALLTOALLW_: You must first call mpp_init.')
  10461 
  10462     n = get_peset(pelist)
  10463 
  10464     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10465 
  10466     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLW_: using MPI_Alltoallw...')
  10467 
  10468 ! Convert mpp_types to MPI datatype IDs
  10469 ! NOTE: sendtypes and recvtypes must be the same size
  10470     allocate(sendtypes(size(stype)))
  10471     allocate(recvtypes(size(rtype)))
  10472     do i = 1, size(stype)
  10473         sendtypes(i) = stype(i)%id
  10474         recvtypes(i) = rtype(i)%id
  10475     end do
  10476 
  10477     call MPI_Alltoallw(sbuf, ssize, sdispl, sendtypes, &
  10478                        rbuf, rsize, rdispl, recvtypes, &
  10479                        peset(n)%id, error)
  10480 
  10481     deallocate(sendtypes, recvtypes)
  10482 
  10483     if (current_clock .NE. 0) &
  10484         call increment_current_clock(EVENT_ALLTOALL, 16)
  10485 
  10486 end subroutine mpp_alltoall_cmplx8_w

Page 468         Source Listing                  MPP_ALLTOALL_CMPLX8_W
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_alltoall_cmplx8_w_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  10455    I(4)            4           scalar                    10472,10473,10474                 
 MPI_ALLTOALLW              Subr   10477                                                          10477                             
 MPP_ALLTOALL_CMPLX8_W      Subr   10446                                                                                            
 N                          Local  10455    I(4)            4           scalar                    10462,10479                       
 PELIST                     Dummy  10447    I(4)            4     1     1        ARG,IN           10462                             
 RBUF                       Dummy  10447    C(16)           16    1     1        ARG,INOUT        10478                             
 RDISPL                     Dummy  10447    I(4)            4     1     1        ARG,IN           10478                             
 RECVTYPES                  Local  10457    I(4)            4     1     1        ALC              10471,10474,10478,10481           
 RSIZE                      Dummy  10447    I(4)            4     1     1        ARG,IN           10478                             
 RTYPE                      Dummy  10447    RECORD          248   1     1        ARG,IN           10471,10474                       
 SBUF                       Dummy  10446    C(16)           16    1     1        ARG,IN           10477                             
 SDISPL                     Dummy  10446    I(4)            4     1     1        ARG,IN           10477                             
 SENDTYPES                  Local  10457    I(4)            4     1     1        ALC              10470,10473,10477,10481           
 SIZE                       Func   10470                                scalar                    10470,10471,10472                 
 SSIZE                      Dummy  10446    I(4)            4     1     1        ARG,IN           10477                             
 STYPE                      Dummy  10446    RECORD          248   1     1        ARG,IN           10470,10472,10473                 

Page 469         Source Listing                  MPP_ALLTOALL_CMPLX8_W
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10487 # 1307 "../mpp/include/mpp_comm_mpi.inc" 2 
  10488 
  10489 
  10490 
  10491 
  10492 
  10493 
  10494 
  10495 
  10496 
  10497 
  10498 
  10499 
  10500 
  10501 # 1 "../mpp/include/mpp_alltoall_mpi.h" 1 
  10502 !***********************************************************************
  10503 !*                   GNU Lesser General Public License
  10504 !*
  10505 !* This file is part of the GFDL Flexible Modeling System (FMS).
  10506 !*
  10507 !* FMS is free software: you can redistribute it and/or modify it under
  10508 !* the terms of the GNU Lesser General Public License as published by
  10509 !* the Free Software Foundation, either version 3 of the License, or (at
  10510 !* your option) any later version.
  10511 !*
  10512 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  10513 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  10514 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  10515 !* for more details.
  10516 !*
  10517 !* You should have received a copy of the GNU Lesser General Public
  10518 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  10519 !***********************************************************************
  10520 
  10521 subroutine mpp_alltoall_logical4(sbuf, scount, rbuf, rcount, pelist)
  10522     logical(l4_kind), intent(in) :: sbuf(:)
  10523     logical(l4_kind), intent(inout) :: rbuf(:)
  10524     integer,   intent(in) :: scount, rcount
  10525 
  10526     integer, intent(in), optional :: pelist(0:)
  10527     integer :: n
  10528 
  10529     if (.NOT. module_is_initialized) &
  10530         call mpp_error(FATAL, 'MPP_ALLTOALL: You must first call mpp_init.')
  10531 
  10532     n = get_peset(pelist)
  10533 
  10534     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10535 
  10536     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALL_: using MPI_Alltoall...')
  10537 
  10538 ! TODO: Message lengths greater than 1
  10539     call MPI_Alltoall(sbuf, scount, MPI_INTEGER4, rbuf, rcount, MPI_INTEGER4, &
  10540                       peset(n)%id, error)
  10541 
  10542     if (current_clock .NE. 0) &
  10543         call increment_current_clock(EVENT_ALLTOALL, 4)

Page 470         Source Listing                  MPP_ALLTOALL_LOGICAL4
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10544 
  10545 end subroutine mpp_alltoall_logical4


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_alltoall_logical4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALL               Subr   10539                                                          10539                             
 MPP_ALLTOALL_LOGICAL4      Subr   10521                                         PRIV                                               
 N                          Local  10527    I(4)            4           scalar                    10532,10540                       
 PELIST                     Dummy  10521    I(4)            4     1     1        ARG,IN           10532                             
 RBUF                       Dummy  10521    L(4)            4     1     1        ARG,INOUT        10539                             
 RCOUNT                     Dummy  10521    I(4)            4           scalar   ARG,IN           10539                             
 SBUF                       Dummy  10521    L(4)            4     1     1        ARG,IN           10539                             
 SCOUNT                     Dummy  10521    I(4)            4           scalar   ARG,IN           10539                             

Page 471         Source Listing                  MPP_ALLTOALL_LOGICAL4
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10546 
  10547 
  10548 subroutine mpp_alltoall_logical4_v(sbuf, ssize, sdispl, rbuf, rsize, rdispl, pelist)
  10549     logical(l4_kind), intent(in) :: sbuf(:)
  10550     logical(l4_kind), intent(inout) :: rbuf(:)
  10551 
  10552 ! TODO: Optionally set displacements to cumulative sums of ssize, rsize
  10553     integer, intent(in) :: ssize(:), rsize(:)
  10554     integer, intent(in) :: sdispl(:), rdispl(:)
  10555 
  10556     integer, intent(in), optional :: pelist(0:)
  10557     integer :: n
  10558 
  10559     if (.NOT. module_is_initialized) &
  10560         call mpp_error(FATAL, 'MPP_ALLTOALLV_: You must first call mpp_init.')
  10561 
  10562     n = get_peset(pelist)
  10563 
  10564     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10565 
  10566     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLV_: using MPI_Alltoallv...')
  10567 
  10568     call MPI_Alltoallv(sbuf, ssize, sdispl, MPI_INTEGER4, &
  10569                        rbuf, rsize, rdispl, MPI_INTEGER4, &
  10570                        peset(n)%id, error)
  10571 
  10572     if (current_clock .NE. 0) &
  10573         call increment_current_clock(EVENT_ALLTOALL, 4)
  10574 
  10575 end subroutine mpp_alltoall_logical4_v

Page 472         Source Listing                  MPP_ALLTOALL_LOGICAL4_V
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                           
                                                 
 mpp_mod_mp_mpp_alltoall_logical4_v_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALLV              Subr   10568                                                          10568                             
 MPP_ALLTOALL_LOGICAL4_V    Subr   10548                                         PRIV                                               
 N                          Local  10557    I(4)            4           scalar                    10562,10570                       
 PELIST                     Dummy  10548    I(4)            4     1     1        ARG,IN           10562                             
 RBUF                       Dummy  10548    L(4)            4     1     1        ARG,INOUT        10569                             
 RDISPL                     Dummy  10548    I(4)            4     1     1        ARG,IN           10569                             
 RSIZE                      Dummy  10548    I(4)            4     1     1        ARG,IN           10569                             
 SBUF                       Dummy  10548    L(4)            4     1     1        ARG,IN           10568                             
 SDISPL                     Dummy  10548    I(4)            4     1     1        ARG,IN           10568                             
 SSIZE                      Dummy  10548    I(4)            4     1     1        ARG,IN           10568                             

Page 473         Source Listing                  MPP_ALLTOALL_LOGICAL4_V
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10576 
  10577 
  10578 subroutine mpp_alltoall_logical4_w(sbuf, ssize, sdispl, stype, &
  10579                           rbuf, rsize, rdispl, rtype, pelist)
  10580     logical(l4_kind), intent(in) :: sbuf(:)
  10581     logical(l4_kind), intent(inout) :: rbuf(:)
  10582 
  10583     integer, intent(in) :: ssize(:), rsize(:)
  10584     integer, intent(in) :: sdispl(:), rdispl(:)
  10585     type(mpp_type), intent(in) :: stype(:), rtype(:)
  10586     integer, intent(in), optional :: pelist(0:)
  10587     integer :: i, n
  10588 
  10589     integer, allocatable :: sendtypes(:), recvtypes(:)
  10590 
  10591     if (.NOT. module_is_initialized) &
  10592         call mpp_error(FATAL, 'MPP_ALLTOALLW_: You must first call mpp_init.')
  10593 
  10594     n = get_peset(pelist)
  10595 
  10596     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10597 
  10598     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLW_: using MPI_Alltoallw...')
  10599 
  10600 ! Convert mpp_types to MPI datatype IDs
  10601 ! NOTE: sendtypes and recvtypes must be the same size
  10602     allocate(sendtypes(size(stype)))
  10603     allocate(recvtypes(size(rtype)))
  10604     do i = 1, size(stype)
  10605         sendtypes(i) = stype(i)%id
  10606         recvtypes(i) = rtype(i)%id
  10607     end do
  10608 
  10609     call MPI_Alltoallw(sbuf, ssize, sdispl, sendtypes, &
  10610                        rbuf, rsize, rdispl, recvtypes, &
  10611                        peset(n)%id, error)
  10612 
  10613     deallocate(sendtypes, recvtypes)
  10614 
  10615     if (current_clock .NE. 0) &
  10616         call increment_current_clock(EVENT_ALLTOALL, 4)
  10617 
  10618 end subroutine mpp_alltoall_logical4_w

Page 474         Source Listing                  MPP_ALLTOALL_LOGICAL4_W
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                           
                                                 
 mpp_mod_mp_mpp_alltoall_logical4_w_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  10587    I(4)            4           scalar                    10604,10605,10606                 
 MPI_ALLTOALLW              Subr   10609                                                          10609                             
 MPP_ALLTOALL_LOGICAL4_W    Subr   10578                                         PRIV                                               
 N                          Local  10587    I(4)            4           scalar                    10594,10611                       
 PELIST                     Dummy  10579    I(4)            4     1     1        ARG,IN           10594                             
 RBUF                       Dummy  10579    L(4)            4     1     1        ARG,INOUT        10610                             
 RDISPL                     Dummy  10579    I(4)            4     1     1        ARG,IN           10610                             
 RECVTYPES                  Local  10589    I(4)            4     1     1        ALC              10603,10606,10610,10613           
 RSIZE                      Dummy  10579    I(4)            4     1     1        ARG,IN           10610                             
 RTYPE                      Dummy  10579    RECORD          248   1     1        ARG,IN           10603,10606                       
 SBUF                       Dummy  10578    L(4)            4     1     1        ARG,IN           10609                             
 SDISPL                     Dummy  10578    I(4)            4     1     1        ARG,IN           10609                             
 SENDTYPES                  Local  10589    I(4)            4     1     1        ALC              10602,10605,10609,10613           
 SIZE                       Func   10602                                scalar                    10602,10603,10604                 
 SSIZE                      Dummy  10578    I(4)            4     1     1        ARG,IN           10609                             
 STYPE                      Dummy  10578    RECORD          248   1     1        ARG,IN           10602,10604,10605                 

Page 475         Source Listing                  MPP_ALLTOALL_LOGICAL4_W
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10619 # 1321 "../mpp/include/mpp_comm_mpi.inc" 2 
  10620 
  10621 
  10622 
  10623 
  10624 
  10625 
  10626 
  10627 
  10628 
  10629 
  10630 
  10631 
  10632 
  10633 # 1 "../mpp/include/mpp_alltoall_mpi.h" 1 
  10634 !***********************************************************************
  10635 !*                   GNU Lesser General Public License
  10636 !*
  10637 !* This file is part of the GFDL Flexible Modeling System (FMS).
  10638 !*
  10639 !* FMS is free software: you can redistribute it and/or modify it under
  10640 !* the terms of the GNU Lesser General Public License as published by
  10641 !* the Free Software Foundation, either version 3 of the License, or (at
  10642 !* your option) any later version.
  10643 !*
  10644 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  10645 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  10646 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  10647 !* for more details.
  10648 !*
  10649 !* You should have received a copy of the GNU Lesser General Public
  10650 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  10651 !***********************************************************************
  10652 
  10653 subroutine mpp_alltoall_logical8(sbuf, scount, rbuf, rcount, pelist)
  10654     logical(l8_kind), intent(in) :: sbuf(:)
  10655     logical(l8_kind), intent(inout) :: rbuf(:)
  10656     integer,   intent(in) :: scount, rcount
  10657 
  10658     integer, intent(in), optional :: pelist(0:)
  10659     integer :: n
  10660 
  10661     if (.NOT. module_is_initialized) &
  10662         call mpp_error(FATAL, 'MPP_ALLTOALL: You must first call mpp_init.')
  10663 
  10664     n = get_peset(pelist)
  10665 
  10666     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10667 
  10668     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALL_: using MPI_Alltoall...')
  10669 
  10670 ! TODO: Message lengths greater than 1
  10671     call MPI_Alltoall(sbuf, scount, MPI_INTEGER8, rbuf, rcount, MPI_INTEGER8, &
  10672                       peset(n)%id, error)
  10673 
  10674     if (current_clock .NE. 0) &
  10675         call increment_current_clock(EVENT_ALLTOALL, 8)

Page 476         Source Listing                  MPP_ALLTOALL_LOGICAL8
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10676 
  10677 end subroutine mpp_alltoall_logical8


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_alltoall_logical8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALL               Subr   10671                                                          10671                             
 MPP_ALLTOALL_LOGICAL8      Subr   10653                                         PRIV                                               
 N                          Local  10659    I(4)            4           scalar                    10664,10672                       
 PELIST                     Dummy  10653    I(4)            4     1     1        ARG,IN           10664                             
 RBUF                       Dummy  10653    L(8)            8     1     1        ARG,INOUT        10671                             
 RCOUNT                     Dummy  10653    I(4)            4           scalar   ARG,IN           10671                             
 SBUF                       Dummy  10653    L(8)            8     1     1        ARG,IN           10671                             
 SCOUNT                     Dummy  10653    I(4)            4           scalar   ARG,IN           10671                             

Page 477         Source Listing                  MPP_ALLTOALL_LOGICAL8
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10678 
  10679 
  10680 subroutine mpp_alltoall_logical8_v(sbuf, ssize, sdispl, rbuf, rsize, rdispl, pelist)
  10681     logical(l8_kind), intent(in) :: sbuf(:)
  10682     logical(l8_kind), intent(inout) :: rbuf(:)
  10683 
  10684 ! TODO: Optionally set displacements to cumulative sums of ssize, rsize
  10685     integer, intent(in) :: ssize(:), rsize(:)
  10686     integer, intent(in) :: sdispl(:), rdispl(:)
  10687 
  10688     integer, intent(in), optional :: pelist(0:)
  10689     integer :: n
  10690 
  10691     if (.NOT. module_is_initialized) &
  10692         call mpp_error(FATAL, 'MPP_ALLTOALLV_: You must first call mpp_init.')
  10693 
  10694     n = get_peset(pelist)
  10695 
  10696     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10697 
  10698     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLV_: using MPI_Alltoallv...')
  10699 
  10700     call MPI_Alltoallv(sbuf, ssize, sdispl, MPI_INTEGER8, &
  10701                        rbuf, rsize, rdispl, MPI_INTEGER8, &
  10702                        peset(n)%id, error)
  10703 
  10704     if (current_clock .NE. 0) &
  10705         call increment_current_clock(EVENT_ALLTOALL, 8)
  10706 
  10707 end subroutine mpp_alltoall_logical8_v

Page 478         Source Listing                  MPP_ALLTOALL_LOGICAL8_V
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                           
                                                 
 mpp_mod_mp_mpp_alltoall_logical8_v_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPI_ALLTOALLV              Subr   10700                                                          10700                             
 MPP_ALLTOALL_LOGICAL8_V    Subr   10680                                         PRIV                                               
 N                          Local  10689    I(4)            4           scalar                    10694,10702                       
 PELIST                     Dummy  10680    I(4)            4     1     1        ARG,IN           10694                             
 RBUF                       Dummy  10680    L(8)            8     1     1        ARG,INOUT        10701                             
 RDISPL                     Dummy  10680    I(4)            4     1     1        ARG,IN           10701                             
 RSIZE                      Dummy  10680    I(4)            4     1     1        ARG,IN           10701                             
 SBUF                       Dummy  10680    L(8)            8     1     1        ARG,IN           10700                             
 SDISPL                     Dummy  10680    I(4)            4     1     1        ARG,IN           10700                             
 SSIZE                      Dummy  10680    I(4)            4     1     1        ARG,IN           10700                             

Page 479         Source Listing                  MPP_ALLTOALL_LOGICAL8_V
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10708 
  10709 
  10710 subroutine mpp_alltoall_logical8_w(sbuf, ssize, sdispl, stype, &
  10711                           rbuf, rsize, rdispl, rtype, pelist)
  10712     logical(l8_kind), intent(in) :: sbuf(:)
  10713     logical(l8_kind), intent(inout) :: rbuf(:)
  10714 
  10715     integer, intent(in) :: ssize(:), rsize(:)
  10716     integer, intent(in) :: sdispl(:), rdispl(:)
  10717     type(mpp_type), intent(in) :: stype(:), rtype(:)
  10718     integer, intent(in), optional :: pelist(0:)
  10719     integer :: i, n
  10720 
  10721     integer, allocatable :: sendtypes(:), recvtypes(:)
  10722 
  10723     if (.NOT. module_is_initialized) &
  10724         call mpp_error(FATAL, 'MPP_ALLTOALLW_: You must first call mpp_init.')
  10725 
  10726     n = get_peset(pelist)
  10727 
  10728     if (current_clock .NE. 0) call system_clock_mpi(start_tick)
  10729 
  10730     if (verbose) call mpp_error(NOTE, 'MPP_ALLTOALLW_: using MPI_Alltoallw...')
  10731 
  10732 ! Convert mpp_types to MPI datatype IDs
  10733 ! NOTE: sendtypes and recvtypes must be the same size
  10734     allocate(sendtypes(size(stype)))
  10735     allocate(recvtypes(size(rtype)))
  10736     do i = 1, size(stype)
  10737         sendtypes(i) = stype(i)%id
  10738         recvtypes(i) = rtype(i)%id
  10739     end do
  10740 
  10741     call MPI_Alltoallw(sbuf, ssize, sdispl, sendtypes, &
  10742                        rbuf, rsize, rdispl, recvtypes, &
  10743                        peset(n)%id, error)
  10744 
  10745     deallocate(sendtypes, recvtypes)
  10746 
  10747     if (current_clock .NE. 0) &
  10748         call increment_current_clock(EVENT_ALLTOALL, 8)
  10749 
  10750 end subroutine mpp_alltoall_logical8_w

Page 480         Source Listing                  MPP_ALLTOALL_LOGICAL8_W
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_alltoall_mpi.h



ENTRY POINTS

  Name                                           
                                                 
 mpp_mod_mp_mpp_alltoall_logical8_w_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  10719    I(4)            4           scalar                    10736,10737,10738                 
 MPI_ALLTOALLW              Subr   10741                                                          10741                             
 MPP_ALLTOALL_LOGICAL8_W    Subr   10710                                         PRIV                                               
 N                          Local  10719    I(4)            4           scalar                    10726,10743                       
 PELIST                     Dummy  10711    I(4)            4     1     1        ARG,IN           10726                             
 RBUF                       Dummy  10711    L(8)            8     1     1        ARG,INOUT        10742                             
 RDISPL                     Dummy  10711    I(4)            4     1     1        ARG,IN           10742                             
 RECVTYPES                  Local  10721    I(4)            4     1     1        ALC              10735,10738,10742,10745           
 RSIZE                      Dummy  10711    I(4)            4     1     1        ARG,IN           10742                             
 RTYPE                      Dummy  10711    RECORD          248   1     1        ARG,IN           10735,10738                       
 SBUF                       Dummy  10710    L(8)            8     1     1        ARG,IN           10741                             
 SDISPL                     Dummy  10710    I(4)            4     1     1        ARG,IN           10741                             
 SENDTYPES                  Local  10721    I(4)            4     1     1        ALC              10734,10737,10741,10745           
 SIZE                       Func   10734                                scalar                    10734,10735,10736                 
 SSIZE                      Dummy  10710    I(4)            4     1     1        ARG,IN           10741                             
 STYPE                      Dummy  10710    RECORD          248   1     1        ARG,IN           10734,10736,10737                 

Page 481         Source Listing                  MPP_ALLTOALL_LOGICAL8_W
2021-06-01 08:51                                 ../mpp/include/mpp_alltoall_mpi.h

  10751 # 1335 "../mpp/include/mpp_comm_mpi.inc" 2 
  10752 
  10753 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  10754 !                                                                             !
  10755 !            DATA TRANSFER TYPES: mpp_type_create, mpp_type_free              !
  10756 !                                                                             !
  10757 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  10758 
  10759 
  10760 
  10761 
  10762 
  10763 
  10764 
  10765 # 1 "../mpp/include/mpp_type_mpi.h" 1 
  10766 !***********************************************************************
  10767 !*                   GNU Lesser General Public License
  10768 !*
  10769 !* This file is part of the GFDL Flexible Modeling System (FMS).
  10770 !*
  10771 !* FMS is free software: you can redistribute it and/or modify it under
  10772 !* the terms of the GNU Lesser General Public License as published by
  10773 !* the Free Software Foundation, either version 3 of the License, or (at
  10774 !* your option) any later version.
  10775 !*
  10776 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  10777 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  10778 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  10779 !* for more details.
  10780 !*
  10781 !* You should have received a copy of the GNU Lesser General Public
  10782 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  10783 !***********************************************************************
  10784 
  10785 subroutine mpp_type_create_int4(field, array_of_subsizes, array_of_starts, &
  10786                             dtype_out)
  10787     integer(i4_kind), intent(in) :: field(:,:,:)
  10788     integer, intent(in) :: array_of_subsizes(:)
  10789     integer, intent(in) :: array_of_starts(:)
  10790     type(mpp_type), target, intent(out) :: dtype_out
  10791 
  10792     type(mpp_type), pointer :: dtype
  10793     integer :: newtype      ! MPI datatype ID
  10794 
  10795     if (.NOT. module_is_initialized) &
  10796         call mpp_error(FATAL, 'MPP_TYPE_CREATE_: You must first call mpp_init.')
  10797 
  10798     if (current_clock .NE. 0) &
  10799         call system_clock_mpi(start_tick)
  10800 
  10801     if (verbose) &
  10802         call mpp_error(NOTE, 'MPP_TYPE_CREATE_: &
  10803                              &using MPI_Type_create_subarray...')
  10804 
  10805     dtype => datatypes%head
  10806 ! TODO: Check mpp_byte
  10807 

Page 482         Source Listing                  MPP_TYPE_CREATE_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  10808 ! Check if mpp_type already exists
  10809     do while (.not. associated(dtype))
  10810         dtype => dtype%next
  10811 
  10812         if (dtype%ndims /= rank(field)) cycle
  10813         if (any(dtype%sizes /= shape(field))) cycle
  10814         if (any(dtype%subsizes /= array_of_subsizes)) cycle
  10815         if (any(dtype%starts /= array_of_starts)) cycle
  10816         if (dtype%etype /= MPI_INTEGER4) cycle
  10817 
  10818 ! If all parameters match, then the datatype exists and return dtype
  10819         dtype%counter = dtype%counter + 1
  10820         dtype_out = dtype
  10821         return
  10822     end do
  10823 
  10824 ! The type does not exist; create a new internal type
  10825     call MPI_Type_create_subarray( &
  10826         rank(field), &
  10827         shape(field), &
  10828         array_of_subsizes, &
  10829         array_of_starts, &
  10830         MPI_ORDER_FORTRAN, &
  10831         MPI_INTEGER4, &
  10832         newtype, &
  10833         error &
  10834     )
  10835 
  10836 ! Register on the MPI runtime
  10837     call MPI_Type_commit(newtype, error)
  10838 
  10839 ! Create new entry
  10840     allocate(dtype)
  10841     allocate(dtype%sizes(rank(field)))
  10842     allocate(dtype%subsizes(rank(field)))
  10843     allocate(dtype%starts(rank(field)))
  10844 
  10845 ! Populate values
  10846     dtype%counter = 1
  10847     dtype%ndims = rank(field)
  10848     dtype%sizes = shape(field)
  10849     dtype%subsizes = array_of_subsizes
  10850     dtype%starts = array_of_starts
  10851     dtype%etype = MPI_INTEGER4
  10852     dtype%id = newtype
  10853 
  10854 ! Add dtype to the list
  10855     dtype%prev => datatypes%tail
  10856     dtype%prev%next => dtype
  10857     datatypes%tail => dtype
  10858     datatypes%length = datatypes%length + 1
  10859 
  10860 ! Copy dtype to output
  10861     dtype_out = dtype
  10862 
  10863     if (current_clock .NE. 0) &
  10864         call increment_current_clock(EVENT_TYPE_CREATE, 8)

Page 483         Source Listing                  MPP_TYPE_CREATE_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  10865 
  10866 end subroutine mpp_type_create_int4


ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_type_create_int4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   10813                                scalar                    10813,10814,10815                 
 ARRAY_OF_STARTS            Dummy  10785    I(4)            4     1     1        ARG,IN           10815,10829,10850                 
 ARRAY_OF_SUBSIZES          Dummy  10785    I(4)            4     1     1        ARG,IN           10814,10828,10849                 
 ASSOCIATED                 Func   10809                                scalar                    10809                             
 DTYPE                      Local  10792    MPP_TYPE        248         scalar   PTR,TGT          10805,10809,10810,10812,10813,1081
                                                                                                  4,10815,10816,10819,10820,10840,10
                                                                                                  841,10842,10843,10846,10847,10848,
                                                                                                  10849,10850,10851,10852,10855,1085
                                                                                                  6,10857,10861                     
 DTYPE_OUT                  Dummy  10786    MPP_TYPE        248         scalar   ARG,TGT,OUT      10820,10861                       
 EVENT_TYPE_CREATE          Param  10864    I(4)            4           scalar   PRIV             175,10864,10974,11084,11194,11304,
                                                                                                  11414,11524,11634                 
 FIELD                      Dummy  10785    I(4)            4     3     1        ARG,IN           10812,10813,10826,10827,10841,1084
                                                                                                  2,10843,10847,10848               
 MPI_ORDER_FORTRAN          Param  10830    I(4)            4           scalar   PRIV             10830,10940,11050,11160,11270,1138
                                                                                                  0,11490,11600                     
 MPI_TYPE_COMMIT            Subr   10837                                         PRIV             10837,10947,11057,11167,11277,1138
                                                                                                  7,11497,11607                     
 MPI_TYPE_CREATE_SUBARRAY   Subr   10825                                         PRIV             10825,10935,11045,11155,11265,1137
                                                                                                  5,11485,11595                     
 MPP_TYPE_CREATE_INT4       Subr   10785                                         PRIV                                               
 NEWTYPE                    Local  10793    I(4)            4           scalar                    10832,10837,10852                 
 RANK                       Func   10812                                scalar                    10812,10826,10841,10842,10843,1084
                                                                                                  7                                 
 SHAPE                      Func   10813                                scalar                    10813,10827,10848                 

Page 484         Source Listing                  MPP_TYPE_CREATE_INT4
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  10867 # 1349 "../mpp/include/mpp_comm_mpi.inc" 2 
  10868 
  10869 
  10870 
  10871 
  10872 
  10873 
  10874 
  10875 # 1 "../mpp/include/mpp_type_mpi.h" 1 
  10876 !***********************************************************************
  10877 !*                   GNU Lesser General Public License
  10878 !*
  10879 !* This file is part of the GFDL Flexible Modeling System (FMS).
  10880 !*
  10881 !* FMS is free software: you can redistribute it and/or modify it under
  10882 !* the terms of the GNU Lesser General Public License as published by
  10883 !* the Free Software Foundation, either version 3 of the License, or (at
  10884 !* your option) any later version.
  10885 !*
  10886 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  10887 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  10888 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  10889 !* for more details.
  10890 !*
  10891 !* You should have received a copy of the GNU Lesser General Public
  10892 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  10893 !***********************************************************************
  10894 
  10895 subroutine mpp_type_create_int8(field, array_of_subsizes, array_of_starts, &
  10896                             dtype_out)
  10897     integer(i8_kind), intent(in) :: field(:,:,:)
  10898     integer, intent(in) :: array_of_subsizes(:)
  10899     integer, intent(in) :: array_of_starts(:)
  10900     type(mpp_type), target, intent(out) :: dtype_out
  10901 
  10902     type(mpp_type), pointer :: dtype
  10903     integer :: newtype      ! MPI datatype ID
  10904 
  10905     if (.NOT. module_is_initialized) &
  10906         call mpp_error(FATAL, 'MPP_TYPE_CREATE_: You must first call mpp_init.')
  10907 
  10908     if (current_clock .NE. 0) &
  10909         call system_clock_mpi(start_tick)
  10910 
  10911     if (verbose) &
  10912         call mpp_error(NOTE, 'MPP_TYPE_CREATE_: &
  10913                              &using MPI_Type_create_subarray...')
  10914 
  10915     dtype => datatypes%head
  10916 ! TODO: Check mpp_byte
  10917 
  10918 ! Check if mpp_type already exists
  10919     do while (.not. associated(dtype))
  10920         dtype => dtype%next
  10921 
  10922         if (dtype%ndims /= rank(field)) cycle
  10923         if (any(dtype%sizes /= shape(field))) cycle

Page 485         Source Listing                  MPP_TYPE_CREATE_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  10924         if (any(dtype%subsizes /= array_of_subsizes)) cycle
  10925         if (any(dtype%starts /= array_of_starts)) cycle
  10926         if (dtype%etype /= MPI_INTEGER8) cycle
  10927 
  10928 ! If all parameters match, then the datatype exists and return dtype
  10929         dtype%counter = dtype%counter + 1
  10930         dtype_out = dtype
  10931         return
  10932     end do
  10933 
  10934 ! The type does not exist; create a new internal type
  10935     call MPI_Type_create_subarray( &
  10936         rank(field), &
  10937         shape(field), &
  10938         array_of_subsizes, &
  10939         array_of_starts, &
  10940         MPI_ORDER_FORTRAN, &
  10941         MPI_INTEGER8, &
  10942         newtype, &
  10943         error &
  10944     )
  10945 
  10946 ! Register on the MPI runtime
  10947     call MPI_Type_commit(newtype, error)
  10948 
  10949 ! Create new entry
  10950     allocate(dtype)
  10951     allocate(dtype%sizes(rank(field)))
  10952     allocate(dtype%subsizes(rank(field)))
  10953     allocate(dtype%starts(rank(field)))
  10954 
  10955 ! Populate values
  10956     dtype%counter = 1
  10957     dtype%ndims = rank(field)
  10958     dtype%sizes = shape(field)
  10959     dtype%subsizes = array_of_subsizes
  10960     dtype%starts = array_of_starts
  10961     dtype%etype = MPI_INTEGER8
  10962     dtype%id = newtype
  10963 
  10964 ! Add dtype to the list
  10965     dtype%prev => datatypes%tail
  10966     dtype%prev%next => dtype
  10967     datatypes%tail => dtype
  10968     datatypes%length = datatypes%length + 1
  10969 
  10970 ! Copy dtype to output
  10971     dtype_out = dtype
  10972 
  10973     if (current_clock .NE. 0) &
  10974         call increment_current_clock(EVENT_TYPE_CREATE, 8)
  10975 
  10976 end subroutine mpp_type_create_int8

Page 486         Source Listing                  MPP_TYPE_CREATE_INT8
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_type_mpi.h



ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_type_create_int8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   10923                                scalar                    10923,10924,10925                 
 ARRAY_OF_STARTS            Dummy  10895    I(4)            4     1     1        ARG,IN           10925,10939,10960                 
 ARRAY_OF_SUBSIZES          Dummy  10895    I(4)            4     1     1        ARG,IN           10924,10938,10959                 
 ASSOCIATED                 Func   10919                                scalar                    10919                             
 DTYPE                      Local  10902    MPP_TYPE        248         scalar   PTR,TGT          10915,10919,10920,10922,10923,1092
                                                                                                  4,10925,10926,10929,10930,10950,10
                                                                                                  951,10952,10953,10956,10957,10958,
                                                                                                  10959,10960,10961,10962,10965,1096
                                                                                                  6,10967,10971                     
 DTYPE_OUT                  Dummy  10896    MPP_TYPE        248         scalar   ARG,TGT,OUT      10930,10971                       
 FIELD                      Dummy  10895    I(8)            8     3     1        ARG,IN           10922,10923,10936,10937,10951,1095
                                                                                                  2,10953,10957,10958               
 MPP_TYPE_CREATE_INT8       Subr   10895                                         PRIV                                               
 NEWTYPE                    Local  10903    I(4)            4           scalar                    10942,10947,10962                 
 RANK                       Func   10922                                scalar                    10922,10936,10951,10952,10953,1095
                                                                                                  7                                 
 SHAPE                      Func   10923                                scalar                    10923,10937,10958                 

Page 487         Source Listing                  MPP_TYPE_CREATE_INT8
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  10977 # 1357 "../mpp/include/mpp_comm_mpi.inc" 2 
  10978 
  10979 
  10980 
  10981 
  10982 
  10983 
  10984 
  10985 # 1 "../mpp/include/mpp_type_mpi.h" 1 
  10986 !***********************************************************************
  10987 !*                   GNU Lesser General Public License
  10988 !*
  10989 !* This file is part of the GFDL Flexible Modeling System (FMS).
  10990 !*
  10991 !* FMS is free software: you can redistribute it and/or modify it under
  10992 !* the terms of the GNU Lesser General Public License as published by
  10993 !* the Free Software Foundation, either version 3 of the License, or (at
  10994 !* your option) any later version.
  10995 !*
  10996 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  10997 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  10998 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  10999 !* for more details.
  11000 !*
  11001 !* You should have received a copy of the GNU Lesser General Public
  11002 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11003 !***********************************************************************
  11004 
  11005 subroutine mpp_type_create_real4(field, array_of_subsizes, array_of_starts, &
  11006                             dtype_out)
  11007     real(r4_kind), intent(in) :: field(:,:,:)
  11008     integer, intent(in) :: array_of_subsizes(:)
  11009     integer, intent(in) :: array_of_starts(:)
  11010     type(mpp_type), target, intent(out) :: dtype_out
  11011 
  11012     type(mpp_type), pointer :: dtype
  11013     integer :: newtype      ! MPI datatype ID
  11014 
  11015     if (.NOT. module_is_initialized) &
  11016         call mpp_error(FATAL, 'MPP_TYPE_CREATE_: You must first call mpp_init.')
  11017 
  11018     if (current_clock .NE. 0) &
  11019         call system_clock_mpi(start_tick)
  11020 
  11021     if (verbose) &
  11022         call mpp_error(NOTE, 'MPP_TYPE_CREATE_: &
  11023                              &using MPI_Type_create_subarray...')
  11024 
  11025     dtype => datatypes%head
  11026 ! TODO: Check mpp_byte
  11027 
  11028 ! Check if mpp_type already exists
  11029     do while (.not. associated(dtype))
  11030         dtype => dtype%next
  11031 
  11032         if (dtype%ndims /= rank(field)) cycle
  11033         if (any(dtype%sizes /= shape(field))) cycle

Page 488         Source Listing                  MPP_TYPE_CREATE_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11034         if (any(dtype%subsizes /= array_of_subsizes)) cycle
  11035         if (any(dtype%starts /= array_of_starts)) cycle
  11036         if (dtype%etype /= MPI_REAL4) cycle
  11037 
  11038 ! If all parameters match, then the datatype exists and return dtype
  11039         dtype%counter = dtype%counter + 1
  11040         dtype_out = dtype
  11041         return
  11042     end do
  11043 
  11044 ! The type does not exist; create a new internal type
  11045     call MPI_Type_create_subarray( &
  11046         rank(field), &
  11047         shape(field), &
  11048         array_of_subsizes, &
  11049         array_of_starts, &
  11050         MPI_ORDER_FORTRAN, &
  11051         MPI_REAL4, &
  11052         newtype, &
  11053         error &
  11054     )
  11055 
  11056 ! Register on the MPI runtime
  11057     call MPI_Type_commit(newtype, error)
  11058 
  11059 ! Create new entry
  11060     allocate(dtype)
  11061     allocate(dtype%sizes(rank(field)))
  11062     allocate(dtype%subsizes(rank(field)))
  11063     allocate(dtype%starts(rank(field)))
  11064 
  11065 ! Populate values
  11066     dtype%counter = 1
  11067     dtype%ndims = rank(field)
  11068     dtype%sizes = shape(field)
  11069     dtype%subsizes = array_of_subsizes
  11070     dtype%starts = array_of_starts
  11071     dtype%etype = MPI_REAL4
  11072     dtype%id = newtype
  11073 
  11074 ! Add dtype to the list
  11075     dtype%prev => datatypes%tail
  11076     dtype%prev%next => dtype
  11077     datatypes%tail => dtype
  11078     datatypes%length = datatypes%length + 1
  11079 
  11080 ! Copy dtype to output
  11081     dtype_out = dtype
  11082 
  11083     if (current_clock .NE. 0) &
  11084         call increment_current_clock(EVENT_TYPE_CREATE, 8)
  11085 
  11086 end subroutine mpp_type_create_real4

Page 489         Source Listing                  MPP_TYPE_CREATE_REAL4
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_type_mpi.h



ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_type_create_real4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11033                                scalar                    11033,11034,11035                 
 ARRAY_OF_STARTS            Dummy  11005    I(4)            4     1     1        ARG,IN           11035,11049,11070                 
 ARRAY_OF_SUBSIZES          Dummy  11005    I(4)            4     1     1        ARG,IN           11034,11048,11069                 
 ASSOCIATED                 Func   11029                                scalar                    11029                             
 DTYPE                      Local  11012    MPP_TYPE        248         scalar   PTR,TGT          11025,11029,11030,11032,11033,1103
                                                                                                  4,11035,11036,11039,11040,11060,11
                                                                                                  061,11062,11063,11066,11067,11068,
                                                                                                  11069,11070,11071,11072,11075,1107
                                                                                                  6,11077,11081                     
 DTYPE_OUT                  Dummy  11006    MPP_TYPE        248         scalar   ARG,TGT,OUT      11040,11081                       
 FIELD                      Dummy  11005    R(4)            4     3     1        ARG,IN           11032,11033,11046,11047,11061,1106
                                                                                                  2,11063,11067,11068               
 MPP_TYPE_CREATE_REAL4      Subr   11005                                         PRIV                                               
 NEWTYPE                    Local  11013    I(4)            4           scalar                    11052,11057,11072                 
 RANK                       Func   11032                                scalar                    11032,11046,11061,11062,11063,1106
                                                                                                  7                                 
 SHAPE                      Func   11033                                scalar                    11033,11047,11068                 

Page 490         Source Listing                  MPP_TYPE_CREATE_REAL4
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11087 # 1365 "../mpp/include/mpp_comm_mpi.inc" 2 
  11088 
  11089 
  11090 
  11091 
  11092 
  11093 
  11094 
  11095 # 1 "../mpp/include/mpp_type_mpi.h" 1 
  11096 !***********************************************************************
  11097 !*                   GNU Lesser General Public License
  11098 !*
  11099 !* This file is part of the GFDL Flexible Modeling System (FMS).
  11100 !*
  11101 !* FMS is free software: you can redistribute it and/or modify it under
  11102 !* the terms of the GNU Lesser General Public License as published by
  11103 !* the Free Software Foundation, either version 3 of the License, or (at
  11104 !* your option) any later version.
  11105 !*
  11106 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  11107 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  11108 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  11109 !* for more details.
  11110 !*
  11111 !* You should have received a copy of the GNU Lesser General Public
  11112 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11113 !***********************************************************************
  11114 
  11115 subroutine mpp_type_create_real8(field, array_of_subsizes, array_of_starts, &
  11116                             dtype_out)
  11117     real(r8_kind), intent(in) :: field(:,:,:)
  11118     integer, intent(in) :: array_of_subsizes(:)
  11119     integer, intent(in) :: array_of_starts(:)
  11120     type(mpp_type), target, intent(out) :: dtype_out
  11121 
  11122     type(mpp_type), pointer :: dtype
  11123     integer :: newtype      ! MPI datatype ID
  11124 
  11125     if (.NOT. module_is_initialized) &
  11126         call mpp_error(FATAL, 'MPP_TYPE_CREATE_: You must first call mpp_init.')
  11127 
  11128     if (current_clock .NE. 0) &
  11129         call system_clock_mpi(start_tick)
  11130 
  11131     if (verbose) &
  11132         call mpp_error(NOTE, 'MPP_TYPE_CREATE_: &
  11133                              &using MPI_Type_create_subarray...')
  11134 
  11135     dtype => datatypes%head
  11136 ! TODO: Check mpp_byte
  11137 
  11138 ! Check if mpp_type already exists
  11139     do while (.not. associated(dtype))
  11140         dtype => dtype%next
  11141 
  11142         if (dtype%ndims /= rank(field)) cycle
  11143         if (any(dtype%sizes /= shape(field))) cycle

Page 491         Source Listing                  MPP_TYPE_CREATE_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11144         if (any(dtype%subsizes /= array_of_subsizes)) cycle
  11145         if (any(dtype%starts /= array_of_starts)) cycle
  11146         if (dtype%etype /= MPI_REAL8) cycle
  11147 
  11148 ! If all parameters match, then the datatype exists and return dtype
  11149         dtype%counter = dtype%counter + 1
  11150         dtype_out = dtype
  11151         return
  11152     end do
  11153 
  11154 ! The type does not exist; create a new internal type
  11155     call MPI_Type_create_subarray( &
  11156         rank(field), &
  11157         shape(field), &
  11158         array_of_subsizes, &
  11159         array_of_starts, &
  11160         MPI_ORDER_FORTRAN, &
  11161         MPI_REAL8, &
  11162         newtype, &
  11163         error &
  11164     )
  11165 
  11166 ! Register on the MPI runtime
  11167     call MPI_Type_commit(newtype, error)
  11168 
  11169 ! Create new entry
  11170     allocate(dtype)
  11171     allocate(dtype%sizes(rank(field)))
  11172     allocate(dtype%subsizes(rank(field)))
  11173     allocate(dtype%starts(rank(field)))
  11174 
  11175 ! Populate values
  11176     dtype%counter = 1
  11177     dtype%ndims = rank(field)
  11178     dtype%sizes = shape(field)
  11179     dtype%subsizes = array_of_subsizes
  11180     dtype%starts = array_of_starts
  11181     dtype%etype = MPI_REAL8
  11182     dtype%id = newtype
  11183 
  11184 ! Add dtype to the list
  11185     dtype%prev => datatypes%tail
  11186     dtype%prev%next => dtype
  11187     datatypes%tail => dtype
  11188     datatypes%length = datatypes%length + 1
  11189 
  11190 ! Copy dtype to output
  11191     dtype_out = dtype
  11192 
  11193     if (current_clock .NE. 0) &
  11194         call increment_current_clock(EVENT_TYPE_CREATE, 8)
  11195 
  11196 end subroutine mpp_type_create_real8

Page 492         Source Listing                  MPP_TYPE_CREATE_REAL8
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_type_mpi.h



ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_type_create_real8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11143                                scalar                    11143,11144,11145                 
 ARRAY_OF_STARTS            Dummy  11115    I(4)            4     1     1        ARG,IN           11145,11159,11180                 
 ARRAY_OF_SUBSIZES          Dummy  11115    I(4)            4     1     1        ARG,IN           11144,11158,11179                 
 ASSOCIATED                 Func   11139                                scalar                    11139                             
 DTYPE                      Local  11122    MPP_TYPE        248         scalar   PTR,TGT          11135,11139,11140,11142,11143,1114
                                                                                                  4,11145,11146,11149,11150,11170,11
                                                                                                  171,11172,11173,11176,11177,11178,
                                                                                                  11179,11180,11181,11182,11185,1118
                                                                                                  6,11187,11191                     
 DTYPE_OUT                  Dummy  11116    MPP_TYPE        248         scalar   ARG,TGT,OUT      11150,11191                       
 FIELD                      Dummy  11115    R(8)            8     3     1        ARG,IN           11142,11143,11156,11157,11171,1117
                                                                                                  2,11173,11177,11178               
 MPP_TYPE_CREATE_REAL8      Subr   11115                                         PRIV                                               
 NEWTYPE                    Local  11123    I(4)            4           scalar                    11162,11167,11182                 
 RANK                       Func   11142                                scalar                    11142,11156,11171,11172,11173,1117
                                                                                                  7                                 
 SHAPE                      Func   11143                                scalar                    11143,11157,11178                 

Page 493         Source Listing                  MPP_TYPE_CREATE_REAL8
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11197 # 1373 "../mpp/include/mpp_comm_mpi.inc" 2 
  11198 
  11199 
  11200 
  11201 
  11202 
  11203 
  11204 
  11205 # 1 "../mpp/include/mpp_type_mpi.h" 1 
  11206 !***********************************************************************
  11207 !*                   GNU Lesser General Public License
  11208 !*
  11209 !* This file is part of the GFDL Flexible Modeling System (FMS).
  11210 !*
  11211 !* FMS is free software: you can redistribute it and/or modify it under
  11212 !* the terms of the GNU Lesser General Public License as published by
  11213 !* the Free Software Foundation, either version 3 of the License, or (at
  11214 !* your option) any later version.
  11215 !*
  11216 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  11217 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  11218 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  11219 !* for more details.
  11220 !*
  11221 !* You should have received a copy of the GNU Lesser General Public
  11222 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11223 !***********************************************************************
  11224 
  11225 subroutine mpp_type_create_cmplx4(field, array_of_subsizes, array_of_starts, &
  11226                             dtype_out)
  11227     complex(c4_kind), intent(in) :: field(:,:,:)
  11228     integer, intent(in) :: array_of_subsizes(:)
  11229     integer, intent(in) :: array_of_starts(:)
  11230     type(mpp_type), target, intent(out) :: dtype_out
  11231 
  11232     type(mpp_type), pointer :: dtype
  11233     integer :: newtype      ! MPI datatype ID
  11234 
  11235     if (.NOT. module_is_initialized) &
  11236         call mpp_error(FATAL, 'MPP_TYPE_CREATE_: You must first call mpp_init.')
  11237 
  11238     if (current_clock .NE. 0) &
  11239         call system_clock_mpi(start_tick)
  11240 
  11241     if (verbose) &
  11242         call mpp_error(NOTE, 'MPP_TYPE_CREATE_: &
  11243                              &using MPI_Type_create_subarray...')
  11244 
  11245     dtype => datatypes%head
  11246 ! TODO: Check mpp_byte
  11247 
  11248 ! Check if mpp_type already exists
  11249     do while (.not. associated(dtype))
  11250         dtype => dtype%next
  11251 
  11252         if (dtype%ndims /= rank(field)) cycle
  11253         if (any(dtype%sizes /= shape(field))) cycle

Page 494         Source Listing                  MPP_TYPE_CREATE_CMPLX4
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11254         if (any(dtype%subsizes /= array_of_subsizes)) cycle
  11255         if (any(dtype%starts /= array_of_starts)) cycle
  11256         if (dtype%etype /= MPI_COMPLEX8) cycle
  11257 
  11258 ! If all parameters match, then the datatype exists and return dtype
  11259         dtype%counter = dtype%counter + 1
  11260         dtype_out = dtype
  11261         return
  11262     end do
  11263 
  11264 ! The type does not exist; create a new internal type
  11265     call MPI_Type_create_subarray( &
  11266         rank(field), &
  11267         shape(field), &
  11268         array_of_subsizes, &
  11269         array_of_starts, &
  11270         MPI_ORDER_FORTRAN, &
  11271         MPI_COMPLEX8, &
  11272         newtype, &
  11273         error &
  11274     )
  11275 
  11276 ! Register on the MPI runtime
  11277     call MPI_Type_commit(newtype, error)
  11278 
  11279 ! Create new entry
  11280     allocate(dtype)
  11281     allocate(dtype%sizes(rank(field)))
  11282     allocate(dtype%subsizes(rank(field)))
  11283     allocate(dtype%starts(rank(field)))
  11284 
  11285 ! Populate values
  11286     dtype%counter = 1
  11287     dtype%ndims = rank(field)
  11288     dtype%sizes = shape(field)
  11289     dtype%subsizes = array_of_subsizes
  11290     dtype%starts = array_of_starts
  11291     dtype%etype = MPI_COMPLEX8
  11292     dtype%id = newtype
  11293 
  11294 ! Add dtype to the list
  11295     dtype%prev => datatypes%tail
  11296     dtype%prev%next => dtype
  11297     datatypes%tail => dtype
  11298     datatypes%length = datatypes%length + 1
  11299 
  11300 ! Copy dtype to output
  11301     dtype_out = dtype
  11302 
  11303     if (current_clock .NE. 0) &
  11304         call increment_current_clock(EVENT_TYPE_CREATE, 8)
  11305 
  11306 end subroutine mpp_type_create_cmplx4

Page 495         Source Listing                  MPP_TYPE_CREATE_CMPLX4
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_type_mpi.h



ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_type_create_cmplx4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11253                                scalar                    11253,11254,11255                 
 ARRAY_OF_STARTS            Dummy  11225    I(4)            4     1     1        ARG,IN           11255,11269,11290                 
 ARRAY_OF_SUBSIZES          Dummy  11225    I(4)            4     1     1        ARG,IN           11254,11268,11289                 
 ASSOCIATED                 Func   11249                                scalar                    11249                             
 DTYPE                      Local  11232    MPP_TYPE        248         scalar   PTR,TGT          11245,11249,11250,11252,11253,1125
                                                                                                  4,11255,11256,11259,11260,11280,11
                                                                                                  281,11282,11283,11286,11287,11288,
                                                                                                  11289,11290,11291,11292,11295,1129
                                                                                                  6,11297,11301                     
 DTYPE_OUT                  Dummy  11226    MPP_TYPE        248         scalar   ARG,TGT,OUT      11260,11301                       
 FIELD                      Dummy  11225    C(8)            8     3     1        ARG,IN           11252,11253,11266,11267,11281,1128
                                                                                                  2,11283,11287,11288               
 MPP_TYPE_CREATE_CMPLX4     Subr   11225                                         PRIV                                               
 NEWTYPE                    Local  11233    I(4)            4           scalar                    11272,11277,11292                 
 RANK                       Func   11252                                scalar                    11252,11266,11281,11282,11283,1128
                                                                                                  7                                 
 SHAPE                      Func   11253                                scalar                    11253,11267,11288                 

Page 496         Source Listing                  MPP_TYPE_CREATE_CMPLX4
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11307 # 1381 "../mpp/include/mpp_comm_mpi.inc" 2 
  11308 
  11309 
  11310 
  11311 
  11312 
  11313 
  11314 
  11315 # 1 "../mpp/include/mpp_type_mpi.h" 1 
  11316 !***********************************************************************
  11317 !*                   GNU Lesser General Public License
  11318 !*
  11319 !* This file is part of the GFDL Flexible Modeling System (FMS).
  11320 !*
  11321 !* FMS is free software: you can redistribute it and/or modify it under
  11322 !* the terms of the GNU Lesser General Public License as published by
  11323 !* the Free Software Foundation, either version 3 of the License, or (at
  11324 !* your option) any later version.
  11325 !*
  11326 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  11327 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  11328 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  11329 !* for more details.
  11330 !*
  11331 !* You should have received a copy of the GNU Lesser General Public
  11332 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11333 !***********************************************************************
  11334 
  11335 subroutine mpp_type_create_cmplx8(field, array_of_subsizes, array_of_starts, &
  11336                             dtype_out)
  11337     complex(c8_kind), intent(in) :: field(:,:,:)
  11338     integer, intent(in) :: array_of_subsizes(:)
  11339     integer, intent(in) :: array_of_starts(:)
  11340     type(mpp_type), target, intent(out) :: dtype_out
  11341 
  11342     type(mpp_type), pointer :: dtype
  11343     integer :: newtype      ! MPI datatype ID
  11344 
  11345     if (.NOT. module_is_initialized) &
  11346         call mpp_error(FATAL, 'MPP_TYPE_CREATE_: You must first call mpp_init.')
  11347 
  11348     if (current_clock .NE. 0) &
  11349         call system_clock_mpi(start_tick)
  11350 
  11351     if (verbose) &
  11352         call mpp_error(NOTE, 'MPP_TYPE_CREATE_: &
  11353                              &using MPI_Type_create_subarray...')
  11354 
  11355     dtype => datatypes%head
  11356 ! TODO: Check mpp_byte
  11357 
  11358 ! Check if mpp_type already exists
  11359     do while (.not. associated(dtype))
  11360         dtype => dtype%next
  11361 
  11362         if (dtype%ndims /= rank(field)) cycle
  11363         if (any(dtype%sizes /= shape(field))) cycle

Page 497         Source Listing                  MPP_TYPE_CREATE_CMPLX8
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11364         if (any(dtype%subsizes /= array_of_subsizes)) cycle
  11365         if (any(dtype%starts /= array_of_starts)) cycle
  11366         if (dtype%etype /= MPI_COMPLEX16) cycle
  11367 
  11368 ! If all parameters match, then the datatype exists and return dtype
  11369         dtype%counter = dtype%counter + 1
  11370         dtype_out = dtype
  11371         return
  11372     end do
  11373 
  11374 ! The type does not exist; create a new internal type
  11375     call MPI_Type_create_subarray( &
  11376         rank(field), &
  11377         shape(field), &
  11378         array_of_subsizes, &
  11379         array_of_starts, &
  11380         MPI_ORDER_FORTRAN, &
  11381         MPI_COMPLEX16, &
  11382         newtype, &
  11383         error &
  11384     )
  11385 
  11386 ! Register on the MPI runtime
  11387     call MPI_Type_commit(newtype, error)
  11388 
  11389 ! Create new entry
  11390     allocate(dtype)
  11391     allocate(dtype%sizes(rank(field)))
  11392     allocate(dtype%subsizes(rank(field)))
  11393     allocate(dtype%starts(rank(field)))
  11394 
  11395 ! Populate values
  11396     dtype%counter = 1
  11397     dtype%ndims = rank(field)
  11398     dtype%sizes = shape(field)
  11399     dtype%subsizes = array_of_subsizes
  11400     dtype%starts = array_of_starts
  11401     dtype%etype = MPI_COMPLEX16
  11402     dtype%id = newtype
  11403 
  11404 ! Add dtype to the list
  11405     dtype%prev => datatypes%tail
  11406     dtype%prev%next => dtype
  11407     datatypes%tail => dtype
  11408     datatypes%length = datatypes%length + 1
  11409 
  11410 ! Copy dtype to output
  11411     dtype_out = dtype
  11412 
  11413     if (current_clock .NE. 0) &
  11414         call increment_current_clock(EVENT_TYPE_CREATE, 8)
  11415 
  11416 end subroutine mpp_type_create_cmplx8

Page 498         Source Listing                  MPP_TYPE_CREATE_CMPLX8
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_type_mpi.h



ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_type_create_cmplx8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11363                                scalar                    11363,11364,11365                 
 ARRAY_OF_STARTS            Dummy  11335    I(4)            4     1     1        ARG,IN           11365,11379,11400                 
 ARRAY_OF_SUBSIZES          Dummy  11335    I(4)            4     1     1        ARG,IN           11364,11378,11399                 
 ASSOCIATED                 Func   11359                                scalar                    11359                             
 DTYPE                      Local  11342    MPP_TYPE        248         scalar   PTR,TGT          11355,11359,11360,11362,11363,1136
                                                                                                  4,11365,11366,11369,11370,11390,11
                                                                                                  391,11392,11393,11396,11397,11398,
                                                                                                  11399,11400,11401,11402,11405,1140
                                                                                                  6,11407,11411                     
 DTYPE_OUT                  Dummy  11336    MPP_TYPE        248         scalar   ARG,TGT,OUT      11370,11411                       
 FIELD                      Dummy  11335    C(16)           16    3     1        ARG,IN           11362,11363,11376,11377,11391,1139
                                                                                                  2,11393,11397,11398               
 MPP_TYPE_CREATE_CMPLX8     Subr   11335                                         PRIV                                               
 NEWTYPE                    Local  11343    I(4)            4           scalar                    11382,11387,11402                 
 RANK                       Func   11362                                scalar                    11362,11376,11391,11392,11393,1139
                                                                                                  7                                 
 SHAPE                      Func   11363                                scalar                    11363,11377,11398                 

Page 499         Source Listing                  MPP_TYPE_CREATE_CMPLX8
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11417 # 1389 "../mpp/include/mpp_comm_mpi.inc" 2 
  11418 
  11419 
  11420 
  11421 
  11422 
  11423 
  11424 
  11425 # 1 "../mpp/include/mpp_type_mpi.h" 1 
  11426 !***********************************************************************
  11427 !*                   GNU Lesser General Public License
  11428 !*
  11429 !* This file is part of the GFDL Flexible Modeling System (FMS).
  11430 !*
  11431 !* FMS is free software: you can redistribute it and/or modify it under
  11432 !* the terms of the GNU Lesser General Public License as published by
  11433 !* the Free Software Foundation, either version 3 of the License, or (at
  11434 !* your option) any later version.
  11435 !*
  11436 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  11437 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  11438 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  11439 !* for more details.
  11440 !*
  11441 !* You should have received a copy of the GNU Lesser General Public
  11442 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11443 !***********************************************************************
  11444 
  11445 subroutine mpp_type_create_logical4(field, array_of_subsizes, array_of_starts, &
  11446                             dtype_out)
  11447     logical(l4_kind), intent(in) :: field(:,:,:)
  11448     integer, intent(in) :: array_of_subsizes(:)
  11449     integer, intent(in) :: array_of_starts(:)
  11450     type(mpp_type), target, intent(out) :: dtype_out
  11451 
  11452     type(mpp_type), pointer :: dtype
  11453     integer :: newtype      ! MPI datatype ID
  11454 
  11455     if (.NOT. module_is_initialized) &
  11456         call mpp_error(FATAL, 'MPP_TYPE_CREATE_: You must first call mpp_init.')
  11457 
  11458     if (current_clock .NE. 0) &
  11459         call system_clock_mpi(start_tick)
  11460 
  11461     if (verbose) &
  11462         call mpp_error(NOTE, 'MPP_TYPE_CREATE_: &
  11463                              &using MPI_Type_create_subarray...')
  11464 
  11465     dtype => datatypes%head
  11466 ! TODO: Check mpp_byte
  11467 
  11468 ! Check if mpp_type already exists
  11469     do while (.not. associated(dtype))
  11470         dtype => dtype%next
  11471 
  11472         if (dtype%ndims /= rank(field)) cycle
  11473         if (any(dtype%sizes /= shape(field))) cycle

Page 500         Source Listing                  MPP_TYPE_CREATE_LOGICAL4
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11474         if (any(dtype%subsizes /= array_of_subsizes)) cycle
  11475         if (any(dtype%starts /= array_of_starts)) cycle
  11476         if (dtype%etype /= MPI_INTEGER4) cycle
  11477 
  11478 ! If all parameters match, then the datatype exists and return dtype
  11479         dtype%counter = dtype%counter + 1
  11480         dtype_out = dtype
  11481         return
  11482     end do
  11483 
  11484 ! The type does not exist; create a new internal type
  11485     call MPI_Type_create_subarray( &
  11486         rank(field), &
  11487         shape(field), &
  11488         array_of_subsizes, &
  11489         array_of_starts, &
  11490         MPI_ORDER_FORTRAN, &
  11491         MPI_INTEGER4, &
  11492         newtype, &
  11493         error &
  11494     )
  11495 
  11496 ! Register on the MPI runtime
  11497     call MPI_Type_commit(newtype, error)
  11498 
  11499 ! Create new entry
  11500     allocate(dtype)
  11501     allocate(dtype%sizes(rank(field)))
  11502     allocate(dtype%subsizes(rank(field)))
  11503     allocate(dtype%starts(rank(field)))
  11504 
  11505 ! Populate values
  11506     dtype%counter = 1
  11507     dtype%ndims = rank(field)
  11508     dtype%sizes = shape(field)
  11509     dtype%subsizes = array_of_subsizes
  11510     dtype%starts = array_of_starts
  11511     dtype%etype = MPI_INTEGER4
  11512     dtype%id = newtype
  11513 
  11514 ! Add dtype to the list
  11515     dtype%prev => datatypes%tail
  11516     dtype%prev%next => dtype
  11517     datatypes%tail => dtype
  11518     datatypes%length = datatypes%length + 1
  11519 
  11520 ! Copy dtype to output
  11521     dtype_out = dtype
  11522 
  11523     if (current_clock .NE. 0) &
  11524         call increment_current_clock(EVENT_TYPE_CREATE, 8)
  11525 
  11526 end subroutine mpp_type_create_logical4

Page 501         Source Listing                  MPP_TYPE_CREATE_LOGICAL4
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_type_mpi.h



ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_type_create_logical4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11473                                scalar                    11473,11474,11475                 
 ARRAY_OF_STARTS            Dummy  11445    I(4)            4     1     1        ARG,IN           11475,11489,11510                 
 ARRAY_OF_SUBSIZES          Dummy  11445    I(4)            4     1     1        ARG,IN           11474,11488,11509                 
 ASSOCIATED                 Func   11469                                scalar                    11469                             
 DTYPE                      Local  11452    MPP_TYPE        248         scalar   PTR,TGT          11465,11469,11470,11472,11473,1147
                                                                                                  4,11475,11476,11479,11480,11500,11
                                                                                                  501,11502,11503,11506,11507,11508,
                                                                                                  11509,11510,11511,11512,11515,1151
                                                                                                  6,11517,11521                     
 DTYPE_OUT                  Dummy  11446    MPP_TYPE        248         scalar   ARG,TGT,OUT      11480,11521                       
 FIELD                      Dummy  11445    L(4)            4     3     1        ARG,IN           11472,11473,11486,11487,11501,1150
                                                                                                  2,11503,11507,11508               
 MPP_TYPE_CREATE_LOGICAL4   Subr   11445                                         PRIV                                               
 NEWTYPE                    Local  11453    I(4)            4           scalar                    11492,11497,11512                 
 RANK                       Func   11472                                scalar                    11472,11486,11501,11502,11503,1150
                                                                                                  7                                 
 SHAPE                      Func   11473                                scalar                    11473,11487,11508                 

Page 502         Source Listing                  MPP_TYPE_CREATE_LOGICAL4
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11527 # 1397 "../mpp/include/mpp_comm_mpi.inc" 2 
  11528 
  11529 
  11530 
  11531 
  11532 
  11533 
  11534 
  11535 # 1 "../mpp/include/mpp_type_mpi.h" 1 
  11536 !***********************************************************************
  11537 !*                   GNU Lesser General Public License
  11538 !*
  11539 !* This file is part of the GFDL Flexible Modeling System (FMS).
  11540 !*
  11541 !* FMS is free software: you can redistribute it and/or modify it under
  11542 !* the terms of the GNU Lesser General Public License as published by
  11543 !* the Free Software Foundation, either version 3 of the License, or (at
  11544 !* your option) any later version.
  11545 !*
  11546 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  11547 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  11548 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  11549 !* for more details.
  11550 !*
  11551 !* You should have received a copy of the GNU Lesser General Public
  11552 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11553 !***********************************************************************
  11554 
  11555 subroutine mpp_type_create_logical8(field, array_of_subsizes, array_of_starts, &
  11556                             dtype_out)
  11557     logical(l8_kind), intent(in) :: field(:,:,:)
  11558     integer, intent(in) :: array_of_subsizes(:)
  11559     integer, intent(in) :: array_of_starts(:)
  11560     type(mpp_type), target, intent(out) :: dtype_out
  11561 
  11562     type(mpp_type), pointer :: dtype
  11563     integer :: newtype      ! MPI datatype ID
  11564 
  11565     if (.NOT. module_is_initialized) &
  11566         call mpp_error(FATAL, 'MPP_TYPE_CREATE_: You must first call mpp_init.')
  11567 
  11568     if (current_clock .NE. 0) &
  11569         call system_clock_mpi(start_tick)
  11570 
  11571     if (verbose) &
  11572         call mpp_error(NOTE, 'MPP_TYPE_CREATE_: &
  11573                              &using MPI_Type_create_subarray...')
  11574 
  11575     dtype => datatypes%head
  11576 ! TODO: Check mpp_byte
  11577 
  11578 ! Check if mpp_type already exists
  11579     do while (.not. associated(dtype))
  11580         dtype => dtype%next
  11581 
  11582         if (dtype%ndims /= rank(field)) cycle
  11583         if (any(dtype%sizes /= shape(field))) cycle

Page 503         Source Listing                  MPP_TYPE_CREATE_LOGICAL8
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11584         if (any(dtype%subsizes /= array_of_subsizes)) cycle
  11585         if (any(dtype%starts /= array_of_starts)) cycle
  11586         if (dtype%etype /= MPI_INTEGER8) cycle
  11587 
  11588 ! If all parameters match, then the datatype exists and return dtype
  11589         dtype%counter = dtype%counter + 1
  11590         dtype_out = dtype
  11591         return
  11592     end do
  11593 
  11594 ! The type does not exist; create a new internal type
  11595     call MPI_Type_create_subarray( &
  11596         rank(field), &
  11597         shape(field), &
  11598         array_of_subsizes, &
  11599         array_of_starts, &
  11600         MPI_ORDER_FORTRAN, &
  11601         MPI_INTEGER8, &
  11602         newtype, &
  11603         error &
  11604     )
  11605 
  11606 ! Register on the MPI runtime
  11607     call MPI_Type_commit(newtype, error)
  11608 
  11609 ! Create new entry
  11610     allocate(dtype)
  11611     allocate(dtype%sizes(rank(field)))
  11612     allocate(dtype%subsizes(rank(field)))
  11613     allocate(dtype%starts(rank(field)))
  11614 
  11615 ! Populate values
  11616     dtype%counter = 1
  11617     dtype%ndims = rank(field)
  11618     dtype%sizes = shape(field)
  11619     dtype%subsizes = array_of_subsizes
  11620     dtype%starts = array_of_starts
  11621     dtype%etype = MPI_INTEGER8
  11622     dtype%id = newtype
  11623 
  11624 ! Add dtype to the list
  11625     dtype%prev => datatypes%tail
  11626     dtype%prev%next => dtype
  11627     datatypes%tail => dtype
  11628     datatypes%length = datatypes%length + 1
  11629 
  11630 ! Copy dtype to output
  11631     dtype_out = dtype
  11632 
  11633     if (current_clock .NE. 0) &
  11634         call increment_current_clock(EVENT_TYPE_CREATE, 8)
  11635 
  11636 end subroutine mpp_type_create_logical8

Page 504         Source Listing                  MPP_TYPE_CREATE_LOGICAL8
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_type_mpi.h



ENTRY POINTS

  Name                                            
                                                  
 mpp_mod_mp_mpp_type_create_logical8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11583                                scalar                    11583,11584,11585                 
 ARRAY_OF_STARTS            Dummy  11555    I(4)            4     1     1        ARG,IN           11585,11599,11620                 
 ARRAY_OF_SUBSIZES          Dummy  11555    I(4)            4     1     1        ARG,IN           11584,11598,11619                 
 ASSOCIATED                 Func   11579                                scalar                    11579                             
 DTYPE                      Local  11562    MPP_TYPE        248         scalar   PTR,TGT          11575,11579,11580,11582,11583,1158
                                                                                                  4,11585,11586,11589,11590,11610,11
                                                                                                  611,11612,11613,11616,11617,11618,
                                                                                                  11619,11620,11621,11622,11625,1162
                                                                                                  6,11627,11631                     
 DTYPE_OUT                  Dummy  11556    MPP_TYPE        248         scalar   ARG,TGT,OUT      11590,11631                       
 FIELD                      Dummy  11555    L(8)            8     3     1        ARG,IN           11582,11583,11596,11597,11611,1161
                                                                                                  2,11613,11617,11618               
 MPP_TYPE_CREATE_LOGICAL8   Subr   11555                                         PRIV                                               
 NEWTYPE                    Local  11563    I(4)            4           scalar                    11602,11607,11622                 
 RANK                       Func   11582                                scalar                    11582,11596,11611,11612,11613,1161
                                                                                                  7                                 
 SHAPE                      Func   11583                                scalar                    11583,11597,11618                 

Page 505         Source Listing                  MPP_TYPE_CREATE_LOGICAL8
2021-06-01 08:51                                 ../mpp/include/mpp_type_mpi.h

  11637 # 1405 "../mpp/include/mpp_comm_mpi.inc" 2 
  11638 
  11639 ! Clear preprocessor flags
  11640 
  11641 
  11642 
  11643 
  11644 ! NOTE: This should probably not take a pointer, but for now we do this.
  11645 subroutine mpp_type_free(dtype)
  11646     type(mpp_type), pointer, intent(inout) :: dtype
  11647 
  11648     if (.NOT. module_is_initialized) &
  11649         call mpp_error(FATAL, 'MPP_TYPE_FREE: You must first call mpp_init.')
  11650 
  11651     if (current_clock .NE. 0) &
  11652         call system_clock_mpi(start_tick)
  11653 
  11654     if (verbose) &
  11655         call mpp_error(NOTE, 'MPP_TYPE_FREE: using MPI_Type_free...')
  11656 
  11657 ! Decrement the reference counter
  11658     dtype%counter = dtype%counter - 1
  11659 
  11660     if (dtype%counter < 1) then
  11661 ! De-register the datatype in MPI runtime
  11662         call MPI_Type_free(dtype%id, error)
  11663 
  11664 ! Remove from list
  11665         dtype%prev => dtype%next
  11666 
  11667 ! Remove from memory
  11668         if (allocated(dtype%sizes)) deallocate(dtype%sizes)
  11669         if (allocated(dtype%subsizes)) deallocate(dtype%subsizes)
  11670         if (allocated(dtype%starts)) deallocate(dtype%starts)
  11671         deallocate(dtype)
  11672 
  11673         datatypes%length = datatypes%length - 1
  11674     end if
  11675 
  11676     if (current_clock .NE. 0) &
  11677         call increment_current_clock(EVENT_TYPE_FREE, 8)
  11678 
  11679 end subroutine mpp_type_free

Page 506         Source Listing                  MPP_TYPE_FREE
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_comm_mpi.inc



ENTRY POINTS

  Name                                 
                                       
 mpp_mod_mp_mpp_type_free_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   11668                                scalar                    11668,11669,11670                 
 DTYPE                      Dummy  11645    MPP_TYPE        248         scalar   ARG,PTR,INOUT    11658,11660,11662,11665,11668,1166
                                                                                                  9,11670,11671                     
 EVENT_TYPE_FREE            Param  11677    I(4)            4           scalar   PRIV             175,11677                         
 MPI_TYPE_FREE              Subr   11662                                         PRIV             11662                             
 MPP_TYPE_FREE              Subr   11645                                                                                            

Page 507         Source Listing                  MPP_TYPE_FREE
2021-06-01 08:51                                 ../mpp/include/mpp_comm_mpi.inc

  11680 # 24 "../mpp/include/mpp_comm.inc" 2 
  11681 # 26
  11682 
  11683 
  11684 
  11685 
  11686 
  11687 
  11688 
  11689 
  11690 
  11691 
  11692 # 1 "../mpp/include/mpp_chksum_int.h" 1 
  11693 !***********************************************************************
  11694 !*                   GNU Lesser General Public License
  11695 !*
  11696 !* This file is part of the GFDL Flexible Modeling System (FMS).
  11697 !*
  11698 !* FMS is free software: you can redistribute it and/or modify it under
  11699 !* the terms of the GNU Lesser General Public License as published by
  11700 !* the Free Software Foundation, either version 3 of the License, or (at
  11701 !* your option) any later version.
  11702 !*
  11703 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  11704 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  11705 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  11706 !* for more details.
  11707 !*
  11708 !* You should have received a copy of the GNU Lesser General Public
  11709 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11710 !***********************************************************************
  11711 
  11712 function mpp_chksum_i8_1d( var, pelist, mask_val )
  11713   integer(i8_kind) :: mpp_chksum_i8_1d
  11714   integer(i8_kind), intent(in) :: var (:)
  11715   integer, optional :: pelist(:)
  11716   integer(i8_kind), intent(in), optional :: mask_val
  11717 
  11718   if ( PRESENT(mask_val) ) then
  11719 !PACK on var/=mask_val ignores values in var
  11720 !equiv to setting those values=0, but on sparse arrays
  11721 !pack should return much smaller array to sum
  11722      mpp_chksum_i8_1d = sum( INT( PACK(var,var/=mask_val),i8_kind) )
  11723   else
  11724      mpp_chksum_i8_1d = sum(INT(var,i8_kind))
  11725   end if
  11726 
  11727       call mpp_sum( mpp_chksum_i8_1d, pelist )
  11728       return
  11729 
  11730     end function mpp_chksum_i8_1d

Page 508         Source Listing                  MPP_CHKSUM_I8_1D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_int.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_i8_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INT                        Func   11722                                scalar                    11722,11724                       
 MASK_VAL                   Dummy  11712    I(8)            8           scalar   ARG,IN           11718,11722                       
 MPP_CHKSUM_I8_1D           Func   11712    I(8)            8           scalar   PRIV             11722,11724,11727,11795,12905,1290
                                                                                                  7,12953,12956,13003,13006,13053,13
                                                                                                  056,13103,13106,13153,13156,13209,
                                                                                                  13211                             
 PACK                       Func   11722                                scalar                    11722                             
 PELIST                     Dummy  11712    I(4)            4     1     1        ARG,INOUT        11727                             
 PRESENT                    Func   11718                                scalar                    11718                             
 SUM                        Func   11722                                scalar                    11722,11724                       
 VAR                        Dummy  11712    I(8)            8     1     1        ARG,IN           11722,11724                       

Page 509         Source Listing                  MPP_CHKSUM_I8_1D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  11731 
  11732 
  11733 !Handles real mask for easier implimentation
  11734 ! until exists full integer vartypes...
  11735 function mpp_chksum_i8_1d_rmask( var, pelist, mask_val )
  11736   integer(KIND=i8_kind) :: mpp_chksum_i8_1d_rmask
  11737   integer(i8_kind), intent(in) :: var (:)
  11738   integer, optional :: pelist(:)
  11739   real, intent(in) :: mask_val
  11740   integer(KIND(var))::imask_val
  11741   integer(KIND=i4_kind)::i4tmp(2)=0
  11742   real(KIND=r4_kind)::r4tmp(2)=0
  11743   integer(KIND=i8_kind) :: i8tmp=0
  11744 !high fidelity error message
  11745   character(LEN=1) :: tmpStr1,tmpStr2,tmpStr3
  11746   character(LEN=32) :: tmpStr4,tmpStr5
  11747   character(LEN=512) :: errStr
  11748 
  11749 ! Primary Logic: These first two are the "expected" branches.
  11750 !! These all resolve to MPP_FILL_INT
  11751 !!Should catch real "default_fill"(MPP_FILL_DOUBLE)
  11752   if (mask_val == MPP_FILL_DOUBLE ) then !this is FMS variable field default fill
  11753 ! we've packed an MPP_FILL_
  11754      imask_val = MPP_FILL_INT
  11755 !!! Current NETCDF fill values (AKA MPP_FILL_*) designed towards CEILING(MPP_FILL_{FLOAT,DOUBLE},kind=4byte)=MPP_FILL_INT
  11756   else if ( CEILING(mask_val, i4_kind) == MPP_FILL_INT ) then
  11757 ! we've also packed an MPP_FILL_
  11758      imask_val = MPP_FILL_INT
  11759 ! Secondary Logic:
  11760 !! We've done something dangerous
  11761   else
  11762      i8tmp = TRANSFER(mask_val , i8tmp )
  11763      i4tmp = TRANSFER(mask_val , i4tmp )
  11764      r4tmp = TRANSFER(mask_val , r4tmp )
  11765      if ( i8tmp == MPP_FILL_INT ) then
  11766 ! we've packed an MPP_FILL_
  11767         imask_val = MPP_FILL_INT
  11768      else if ( ANY(i4tmp == MPP_FILL_INT) ) then
  11769 ! we've packed an MPP_FILL_
  11770         imask_val = MPP_FILL_INT
  11771      else if ( ANY(r4tmp == MPP_FILL_DOUBLE) ) then
  11772 ! we've packed an MPP_FILL_
  11773         imask_val = MPP_FILL_INT
  11774      else
  11775 ! we have no idea what this is
  11776 ! construct detailed errStr
  11777         errStr = "mpp_chksum: mpp_chksum_i"
  11778         write(unit=tmpStr1,fmt="(I1)") KIND(var)
  11779         write(unit=tmpstr2,fmt="(I1)") SIZE(SHAPE(var))
  11780         errStr = errStr // tmpStr1 // "_" // tmpstr2 // "d_rmask passed int var with REAL("
  11781         write(unit=tmpstr3,fmt="(I1)") KIND(mask_val)
  11782         errStr = errStr // tmpstr3 // ") mask_val="
  11783         write(unit=tmpstr4,fmt=*) mask_val
  11784         errStr = errStr // trim(tmpstr4) // "has been called with these strange values. Check your KINDS, "// &
  11785               "_FillValue, pack and mask_val. "// &
  11786               "Hint: Try being explicit and using MPP_FILL_{INT,FLOAT,DOUBLE}. "// &
  11787               "Continuing by using the default MPP_FILL_INT. " // &

Page 510         Source Listing                  MPP_CHKSUM_I8_1D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  11788               "THIS WILL BE FATAL IN THE FUTURE!"
  11789         call mpp_error(WARNING, trim(errStr) )
  11790 
  11791         imask_val = MPP_FILL_INT
  11792      end if
  11793   end if
  11794 
  11795   mpp_chksum_i8_1d_rmask = mpp_chksum(var,pelist,mask_val=imask_val)
  11796 
  11797   return
  11798 
  11799 end function mpp_chksum_i8_1d_rmask


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_chksum_i8_1d_rmask_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11768                                scalar                    11768,11771                       
 CEILING                    Func   11756                                scalar                    11756                             
 ERRSTR                     Local  11747    CHAR            512         scalar                    11777,11780,11782,11784,11789     
 I4TMP                      Local  11741    I(4)            4     1     2                         11741,11763,11768                 
 I8TMP                      Local  11743    I(8)            8           scalar                    11743,11762,11765                 
 IMASK_VAL                  Local  11740    I(8)            8           scalar                    11754,11758,11767,11770,11773,1179
                                                                                                  1,11795                           
 KIND                       Func   11740                                scalar                    11740,11778,11781                 
 MASK_VAL                   Dummy  11735    R(8)            8           scalar   ARG,IN           11752,11756,11762,11763,11764,1178
                                                                                                  1,11783                           
 MPP_CHKSUM                 Local  11795                                scalar                    222,11795,11913,12031,12149,12267,
                                                                                                  12385,12503,12621,12739,12857,1290
                                                                                                  5,12907,12953,12956,13003,13006,13
                                                                                                  053,13056,13103,13106,13153,13156,
                                                                                                  13209,13211,13257,13260,13307,1331
                                                                                                  0,13357,13360,13407,13410,13457,13
                                                                                                  460                               
 MPP_CHKSUM_I8_1D_RMASK     Func   11735    I(8)            8           scalar   PRIV             11795                             
 MPP_FILL_DOUBLE            Param  11752    R(8)            8           scalar                    184,203,11752,11771,11870,11889,11
                                                                                                  988,12007,12106,12125,12224,12243,
                                                                                                  12342,12361,12460,12479,12578,1259
                                                                                                  7,12696,12715,12814,12833         
 MPP_FILL_INT               Param  11754    I(4)            4           scalar                    184,203,11754,11756,11758,11765,11
                                                                                                  767,11768,11770,11773,11791,11872,
                                                                                                  11874,11876,11883,11885,11886,1188
                                                                                                  8,11891,11909,11990,11992,11994,12
                                                                                                  001,12003,12004,12006,12009,12027,
                                                                                                  12108,12110,12112,12119,12121,1212
                                                                                                  2,12124,12127,12145,12226,12228,12
                                                                                                  230,12237,12239,12240,12242,12245,
                                                                                                  12263,12344,12346,12348,12355,1235
                                                                                                  7,12358,12360,12363,12381,12462,12

Page 511         Source Listing                  MPP_CHKSUM_I8_1D_RMASK
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_chksum_int.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  464,12466,12473,12475,12476,12478,
                                                                                                  12481,12499,12580,12582,12584,1259
                                                                                                  1,12593,12594,12596,12599,12617,12
                                                                                                  698,12700,12702,12709,12711,12712,
                                                                                                  12714,12717,12735,12816,12818,1282
                                                                                                  0,12827,12829,12830,12832,12835,12
                                                                                                  853                               
 PELIST                     Dummy  11735    I(4)            4     1     1        ARG,INOUT        11795                             
 R4TMP                      Local  11742    R(4)            4     1     2                         11742,11764,11771                 
 SHAPE                      Func   11779                                scalar                    11779                             
 SIZE                       Func   11779                                scalar                    11779                             
 TMPSTR1                    Local  11745    CHAR            1           scalar                    11778,11780                       
 TMPSTR2                    Local  11745    CHAR            1           scalar                    11779,11780                       
 TMPSTR3                    Local  11745    CHAR            1           scalar                    11781,11782                       
 TMPSTR4                    Local  11746    CHAR            32          scalar                    11783,11784                       
 TMPSTR5                    Local  11746    CHAR            32          scalar                                                      
 TRANSFER                   Func   11762                                scalar                    11762,11763,11764                 
 TRIM                       Func   11784                                scalar                    11784,11789                       
 VAR                        Dummy  11735    I(8)            8     1     1        ARG,IN           11740,11778,11779,11795           

Page 512         Source Listing                  MPP_CHKSUM_I8_1D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  11800 # 37 "../mpp/include/mpp_comm.inc" 2 
  11801 
  11802 
  11803 
  11804 
  11805 
  11806 
  11807 
  11808 
  11809 
  11810 # 1 "../mpp/include/mpp_chksum_int.h" 1 
  11811 !***********************************************************************
  11812 !*                   GNU Lesser General Public License
  11813 !*
  11814 !* This file is part of the GFDL Flexible Modeling System (FMS).
  11815 !*
  11816 !* FMS is free software: you can redistribute it and/or modify it under
  11817 !* the terms of the GNU Lesser General Public License as published by
  11818 !* the Free Software Foundation, either version 3 of the License, or (at
  11819 !* your option) any later version.
  11820 !*
  11821 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  11822 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  11823 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  11824 !* for more details.
  11825 !*
  11826 !* You should have received a copy of the GNU Lesser General Public
  11827 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11828 !***********************************************************************
  11829 
  11830 function mpp_chksum_i8_2d( var, pelist, mask_val )
  11831   integer(i8_kind) :: mpp_chksum_i8_2d
  11832   integer(i8_kind), intent(in) :: var (:,:)
  11833   integer, optional :: pelist(:)
  11834   integer(i8_kind), intent(in), optional :: mask_val
  11835 
  11836   if ( PRESENT(mask_val) ) then
  11837 !PACK on var/=mask_val ignores values in var
  11838 !equiv to setting those values=0, but on sparse arrays
  11839 !pack should return much smaller array to sum
  11840      mpp_chksum_i8_2d = sum( INT( PACK(var,var/=mask_val),i8_kind) )
  11841   else
  11842      mpp_chksum_i8_2d = sum(INT(var,i8_kind))
  11843   end if
  11844 
  11845       call mpp_sum( mpp_chksum_i8_2d, pelist )
  11846       return
  11847 
  11848     end function mpp_chksum_i8_2d

Page 513         Source Listing                  MPP_CHKSUM_I8_2D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_int.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_i8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INT                        Func   11840                                scalar                    11840,11842                       
 MASK_VAL                   Dummy  11830    I(8)            8           scalar   ARG,IN           11836,11840                       
 MPP_CHKSUM_I8_2D           Func   11830    I(8)            8           scalar   PRIV             11840,11842,11845,11913           
 PACK                       Func   11840                                scalar                    11840                             
 PELIST                     Dummy  11830    I(4)            4     1     1        ARG,INOUT        11845                             
 PRESENT                    Func   11836                                scalar                    11836                             
 SUM                        Func   11840                                scalar                    11840,11842                       
 VAR                        Dummy  11830    I(8)            8     2     1        ARG,IN           11840,11842                       

Page 514         Source Listing                  MPP_CHKSUM_I8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  11849 
  11850 
  11851 !Handles real mask for easier implimentation
  11852 ! until exists full integer vartypes...
  11853 function mpp_chksum_i8_2d_rmask( var, pelist, mask_val )
  11854   integer(KIND=i8_kind) :: mpp_chksum_i8_2d_rmask
  11855   integer(i8_kind), intent(in) :: var (:,:)
  11856   integer, optional :: pelist(:)
  11857   real, intent(in) :: mask_val
  11858   integer(KIND(var))::imask_val
  11859   integer(KIND=i4_kind)::i4tmp(2)=0
  11860   real(KIND=r4_kind)::r4tmp(2)=0
  11861   integer(KIND=i8_kind) :: i8tmp=0
  11862 !high fidelity error message
  11863   character(LEN=1) :: tmpStr1,tmpStr2,tmpStr3
  11864   character(LEN=32) :: tmpStr4,tmpStr5
  11865   character(LEN=512) :: errStr
  11866 
  11867 ! Primary Logic: These first two are the "expected" branches.
  11868 !! These all resolve to MPP_FILL_INT
  11869 !!Should catch real "default_fill"(MPP_FILL_DOUBLE)
  11870   if (mask_val == MPP_FILL_DOUBLE ) then !this is FMS variable field default fill
  11871 ! we've packed an MPP_FILL_
  11872      imask_val = MPP_FILL_INT
  11873 !!! Current NETCDF fill values (AKA MPP_FILL_*) designed towards CEILING(MPP_FILL_{FLOAT,DOUBLE},kind=4byte)=MPP_FILL_INT
  11874   else if ( CEILING(mask_val, i4_kind) == MPP_FILL_INT ) then
  11875 ! we've also packed an MPP_FILL_
  11876      imask_val = MPP_FILL_INT
  11877 ! Secondary Logic:
  11878 !! We've done something dangerous
  11879   else
  11880      i8tmp = TRANSFER(mask_val , i8tmp )
  11881      i4tmp = TRANSFER(mask_val , i4tmp )
  11882      r4tmp = TRANSFER(mask_val , r4tmp )
  11883      if ( i8tmp == MPP_FILL_INT ) then
  11884 ! we've packed an MPP_FILL_
  11885         imask_val = MPP_FILL_INT
  11886      else if ( ANY(i4tmp == MPP_FILL_INT) ) then
  11887 ! we've packed an MPP_FILL_
  11888         imask_val = MPP_FILL_INT
  11889      else if ( ANY(r4tmp == MPP_FILL_DOUBLE) ) then
  11890 ! we've packed an MPP_FILL_
  11891         imask_val = MPP_FILL_INT
  11892      else
  11893 ! we have no idea what this is
  11894 ! construct detailed errStr
  11895         errStr = "mpp_chksum: mpp_chksum_i"
  11896         write(unit=tmpStr1,fmt="(I1)") KIND(var)
  11897         write(unit=tmpstr2,fmt="(I1)") SIZE(SHAPE(var))
  11898         errStr = errStr // tmpStr1 // "_" // tmpstr2 // "d_rmask passed int var with REAL("
  11899         write(unit=tmpstr3,fmt="(I1)") KIND(mask_val)
  11900         errStr = errStr // tmpstr3 // ") mask_val="
  11901         write(unit=tmpstr4,fmt=*) mask_val
  11902         errStr = errStr // trim(tmpstr4) // "has been called with these strange values. Check your KINDS, "// &
  11903               "_FillValue, pack and mask_val. "// &
  11904               "Hint: Try being explicit and using MPP_FILL_{INT,FLOAT,DOUBLE}. "// &
  11905               "Continuing by using the default MPP_FILL_INT. " // &

Page 515         Source Listing                  MPP_CHKSUM_I8_2D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  11906               "THIS WILL BE FATAL IN THE FUTURE!"
  11907         call mpp_error(WARNING, trim(errStr) )
  11908 
  11909         imask_val = MPP_FILL_INT
  11910      end if
  11911   end if
  11912 
  11913   mpp_chksum_i8_2d_rmask = mpp_chksum(var,pelist,mask_val=imask_val)
  11914 
  11915   return
  11916 
  11917 end function mpp_chksum_i8_2d_rmask


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_chksum_i8_2d_rmask_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11886                                scalar                    11886,11889                       
 CEILING                    Func   11874                                scalar                    11874                             
 ERRSTR                     Local  11865    CHAR            512         scalar                    11895,11898,11900,11902,11907     
 I4TMP                      Local  11859    I(4)            4     1     2                         11859,11881,11886                 
 I8TMP                      Local  11861    I(8)            8           scalar                    11861,11880,11883                 
 IMASK_VAL                  Local  11858    I(8)            8           scalar                    11872,11876,11885,11888,11891,1190
                                                                                                  9,11913                           
 KIND                       Func   11858                                scalar                    11858,11896,11899                 
 MASK_VAL                   Dummy  11853    R(8)            8           scalar   ARG,IN           11870,11874,11880,11881,11882,1189
                                                                                                  9,11901                           
 MPP_CHKSUM_I8_2D_RMASK     Func   11853    I(8)            8           scalar   PRIV             11913                             
 PELIST                     Dummy  11853    I(4)            4     1     1        ARG,INOUT        11913                             
 R4TMP                      Local  11860    R(4)            4     1     2                         11860,11882,11889                 
 SHAPE                      Func   11897                                scalar                    11897                             
 SIZE                       Func   11897                                scalar                    11897                             
 TMPSTR1                    Local  11863    CHAR            1           scalar                    11896,11898                       
 TMPSTR2                    Local  11863    CHAR            1           scalar                    11897,11898                       
 TMPSTR3                    Local  11863    CHAR            1           scalar                    11899,11900                       
 TMPSTR4                    Local  11864    CHAR            32          scalar                    11901,11902                       
 TMPSTR5                    Local  11864    CHAR            32          scalar                                                      
 TRANSFER                   Func   11880                                scalar                    11880,11881,11882                 
 TRIM                       Func   11902                                scalar                    11902,11907                       
 VAR                        Dummy  11853    I(8)            8     2     1        ARG,IN           11858,11896,11897,11913           

Page 516         Source Listing                  MPP_CHKSUM_I8_2D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  11918 # 47 "../mpp/include/mpp_comm.inc" 2 
  11919 
  11920 
  11921 
  11922 
  11923 
  11924 
  11925 
  11926 
  11927 
  11928 # 1 "../mpp/include/mpp_chksum_int.h" 1 
  11929 !***********************************************************************
  11930 !*                   GNU Lesser General Public License
  11931 !*
  11932 !* This file is part of the GFDL Flexible Modeling System (FMS).
  11933 !*
  11934 !* FMS is free software: you can redistribute it and/or modify it under
  11935 !* the terms of the GNU Lesser General Public License as published by
  11936 !* the Free Software Foundation, either version 3 of the License, or (at
  11937 !* your option) any later version.
  11938 !*
  11939 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  11940 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  11941 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  11942 !* for more details.
  11943 !*
  11944 !* You should have received a copy of the GNU Lesser General Public
  11945 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11946 !***********************************************************************
  11947 
  11948 function mpp_chksum_i8_3d( var, pelist, mask_val )
  11949   integer(i8_kind) :: mpp_chksum_i8_3d
  11950   integer(i8_kind), intent(in) :: var (:,:,:)
  11951   integer, optional :: pelist(:)
  11952   integer(i8_kind), intent(in), optional :: mask_val
  11953 
  11954   if ( PRESENT(mask_val) ) then
  11955 !PACK on var/=mask_val ignores values in var
  11956 !equiv to setting those values=0, but on sparse arrays
  11957 !pack should return much smaller array to sum
  11958      mpp_chksum_i8_3d = sum( INT( PACK(var,var/=mask_val),i8_kind) )
  11959   else
  11960      mpp_chksum_i8_3d = sum(INT(var,i8_kind))
  11961   end if
  11962 
  11963       call mpp_sum( mpp_chksum_i8_3d, pelist )
  11964       return
  11965 
  11966     end function mpp_chksum_i8_3d

Page 517         Source Listing                  MPP_CHKSUM_I8_3D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_int.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_i8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INT                        Func   11958                                scalar                    11958,11960                       
 MASK_VAL                   Dummy  11948    I(8)            8           scalar   ARG,IN           11954,11958                       
 MPP_CHKSUM_I8_3D           Func   11948    I(8)            8           scalar   PRIV             11958,11960,11963,12031           
 PACK                       Func   11958                                scalar                    11958                             
 PELIST                     Dummy  11948    I(4)            4     1     1        ARG,INOUT        11963                             
 PRESENT                    Func   11954                                scalar                    11954                             
 SUM                        Func   11958                                scalar                    11958,11960                       
 VAR                        Dummy  11948    I(8)            8     3     1        ARG,IN           11958,11960                       

Page 518         Source Listing                  MPP_CHKSUM_I8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  11967 
  11968 
  11969 !Handles real mask for easier implimentation
  11970 ! until exists full integer vartypes...
  11971 function mpp_chksum_i8_3d_rmask( var, pelist, mask_val )
  11972   integer(KIND=i8_kind) :: mpp_chksum_i8_3d_rmask
  11973   integer(i8_kind), intent(in) :: var (:,:,:)
  11974   integer, optional :: pelist(:)
  11975   real, intent(in) :: mask_val
  11976   integer(KIND(var))::imask_val
  11977   integer(KIND=i4_kind)::i4tmp(2)=0
  11978   real(KIND=r4_kind)::r4tmp(2)=0
  11979   integer(KIND=i8_kind) :: i8tmp=0
  11980 !high fidelity error message
  11981   character(LEN=1) :: tmpStr1,tmpStr2,tmpStr3
  11982   character(LEN=32) :: tmpStr4,tmpStr5
  11983   character(LEN=512) :: errStr
  11984 
  11985 ! Primary Logic: These first two are the "expected" branches.
  11986 !! These all resolve to MPP_FILL_INT
  11987 !!Should catch real "default_fill"(MPP_FILL_DOUBLE)
  11988   if (mask_val == MPP_FILL_DOUBLE ) then !this is FMS variable field default fill
  11989 ! we've packed an MPP_FILL_
  11990      imask_val = MPP_FILL_INT
  11991 !!! Current NETCDF fill values (AKA MPP_FILL_*) designed towards CEILING(MPP_FILL_{FLOAT,DOUBLE},kind=4byte)=MPP_FILL_INT
  11992   else if ( CEILING(mask_val, i4_kind) == MPP_FILL_INT ) then
  11993 ! we've also packed an MPP_FILL_
  11994      imask_val = MPP_FILL_INT
  11995 ! Secondary Logic:
  11996 !! We've done something dangerous
  11997   else
  11998      i8tmp = TRANSFER(mask_val , i8tmp )
  11999      i4tmp = TRANSFER(mask_val , i4tmp )
  12000      r4tmp = TRANSFER(mask_val , r4tmp )
  12001      if ( i8tmp == MPP_FILL_INT ) then
  12002 ! we've packed an MPP_FILL_
  12003         imask_val = MPP_FILL_INT
  12004      else if ( ANY(i4tmp == MPP_FILL_INT) ) then
  12005 ! we've packed an MPP_FILL_
  12006         imask_val = MPP_FILL_INT
  12007      else if ( ANY(r4tmp == MPP_FILL_DOUBLE) ) then
  12008 ! we've packed an MPP_FILL_
  12009         imask_val = MPP_FILL_INT
  12010      else
  12011 ! we have no idea what this is
  12012 ! construct detailed errStr
  12013         errStr = "mpp_chksum: mpp_chksum_i"
  12014         write(unit=tmpStr1,fmt="(I1)") KIND(var)
  12015         write(unit=tmpstr2,fmt="(I1)") SIZE(SHAPE(var))
  12016         errStr = errStr // tmpStr1 // "_" // tmpstr2 // "d_rmask passed int var with REAL("
  12017         write(unit=tmpstr3,fmt="(I1)") KIND(mask_val)
  12018         errStr = errStr // tmpstr3 // ") mask_val="
  12019         write(unit=tmpstr4,fmt=*) mask_val
  12020         errStr = errStr // trim(tmpstr4) // "has been called with these strange values. Check your KINDS, "// &
  12021               "_FillValue, pack and mask_val. "// &
  12022               "Hint: Try being explicit and using MPP_FILL_{INT,FLOAT,DOUBLE}. "// &
  12023               "Continuing by using the default MPP_FILL_INT. " // &

Page 519         Source Listing                  MPP_CHKSUM_I8_3D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12024               "THIS WILL BE FATAL IN THE FUTURE!"
  12025         call mpp_error(WARNING, trim(errStr) )
  12026 
  12027         imask_val = MPP_FILL_INT
  12028      end if
  12029   end if
  12030 
  12031   mpp_chksum_i8_3d_rmask = mpp_chksum(var,pelist,mask_val=imask_val)
  12032 
  12033   return
  12034 
  12035 end function mpp_chksum_i8_3d_rmask


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_chksum_i8_3d_rmask_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   12004                                scalar                    12004,12007                       
 CEILING                    Func   11992                                scalar                    11992                             
 ERRSTR                     Local  11983    CHAR            512         scalar                    12013,12016,12018,12020,12025     
 I4TMP                      Local  11977    I(4)            4     1     2                         11977,11999,12004                 
 I8TMP                      Local  11979    I(8)            8           scalar                    11979,11998,12001                 
 IMASK_VAL                  Local  11976    I(8)            8           scalar                    11990,11994,12003,12006,12009,1202
                                                                                                  7,12031                           
 KIND                       Func   11976                                scalar                    11976,12014,12017                 
 MASK_VAL                   Dummy  11971    R(8)            8           scalar   ARG,IN           11988,11992,11998,11999,12000,1201
                                                                                                  7,12019                           
 MPP_CHKSUM_I8_3D_RMASK     Func   11971    I(8)            8           scalar   PRIV             12031                             
 PELIST                     Dummy  11971    I(4)            4     1     1        ARG,INOUT        12031                             
 R4TMP                      Local  11978    R(4)            4     1     2                         11978,12000,12007                 
 SHAPE                      Func   12015                                scalar                    12015                             
 SIZE                       Func   12015                                scalar                    12015                             
 TMPSTR1                    Local  11981    CHAR            1           scalar                    12014,12016                       
 TMPSTR2                    Local  11981    CHAR            1           scalar                    12015,12016                       
 TMPSTR3                    Local  11981    CHAR            1           scalar                    12017,12018                       
 TMPSTR4                    Local  11982    CHAR            32          scalar                    12019,12020                       
 TMPSTR5                    Local  11982    CHAR            32          scalar                                                      
 TRANSFER                   Func   11998                                scalar                    11998,11999,12000                 
 TRIM                       Func   12020                                scalar                    12020,12025                       
 VAR                        Dummy  11971    I(8)            8     3     1        ARG,IN           11976,12014,12015,12031           

Page 520         Source Listing                  MPP_CHKSUM_I8_3D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12036 # 57 "../mpp/include/mpp_comm.inc" 2 
  12037 
  12038 
  12039 
  12040 
  12041 
  12042 
  12043 
  12044 
  12045 
  12046 # 1 "../mpp/include/mpp_chksum_int.h" 1 
  12047 !***********************************************************************
  12048 !*                   GNU Lesser General Public License
  12049 !*
  12050 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12051 !*
  12052 !* FMS is free software: you can redistribute it and/or modify it under
  12053 !* the terms of the GNU Lesser General Public License as published by
  12054 !* the Free Software Foundation, either version 3 of the License, or (at
  12055 !* your option) any later version.
  12056 !*
  12057 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12058 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12059 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12060 !* for more details.
  12061 !*
  12062 !* You should have received a copy of the GNU Lesser General Public
  12063 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12064 !***********************************************************************
  12065 
  12066 function mpp_chksum_i8_4d( var, pelist, mask_val )
  12067   integer(i8_kind) :: mpp_chksum_i8_4d
  12068   integer(i8_kind), intent(in) :: var (:,:,:,:)
  12069   integer, optional :: pelist(:)
  12070   integer(i8_kind), intent(in), optional :: mask_val
  12071 
  12072   if ( PRESENT(mask_val) ) then
  12073 !PACK on var/=mask_val ignores values in var
  12074 !equiv to setting those values=0, but on sparse arrays
  12075 !pack should return much smaller array to sum
  12076      mpp_chksum_i8_4d = sum( INT( PACK(var,var/=mask_val),i8_kind) )
  12077   else
  12078      mpp_chksum_i8_4d = sum(INT(var,i8_kind))
  12079   end if
  12080 
  12081       call mpp_sum( mpp_chksum_i8_4d, pelist )
  12082       return
  12083 
  12084     end function mpp_chksum_i8_4d

Page 521         Source Listing                  MPP_CHKSUM_I8_4D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_int.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_i8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INT                        Func   12076                                scalar                    12076,12078                       
 MASK_VAL                   Dummy  12066    I(8)            8           scalar   ARG,IN           12072,12076                       
 MPP_CHKSUM_I8_4D           Func   12066    I(8)            8           scalar   PRIV             12076,12078,12081,12149           
 PACK                       Func   12076                                scalar                    12076                             
 PELIST                     Dummy  12066    I(4)            4     1     1        ARG,INOUT        12081                             
 PRESENT                    Func   12072                                scalar                    12072                             
 SUM                        Func   12076                                scalar                    12076,12078                       
 VAR                        Dummy  12066    I(8)            8     4     1        ARG,IN           12076,12078                       

Page 522         Source Listing                  MPP_CHKSUM_I8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12085 
  12086 
  12087 !Handles real mask for easier implimentation
  12088 ! until exists full integer vartypes...
  12089 function mpp_chksum_i8_4d_rmask( var, pelist, mask_val )
  12090   integer(KIND=i8_kind) :: mpp_chksum_i8_4d_rmask
  12091   integer(i8_kind), intent(in) :: var (:,:,:,:)
  12092   integer, optional :: pelist(:)
  12093   real, intent(in) :: mask_val
  12094   integer(KIND(var))::imask_val
  12095   integer(KIND=i4_kind)::i4tmp(2)=0
  12096   real(KIND=r4_kind)::r4tmp(2)=0
  12097   integer(KIND=i8_kind) :: i8tmp=0
  12098 !high fidelity error message
  12099   character(LEN=1) :: tmpStr1,tmpStr2,tmpStr3
  12100   character(LEN=32) :: tmpStr4,tmpStr5
  12101   character(LEN=512) :: errStr
  12102 
  12103 ! Primary Logic: These first two are the "expected" branches.
  12104 !! These all resolve to MPP_FILL_INT
  12105 !!Should catch real "default_fill"(MPP_FILL_DOUBLE)
  12106   if (mask_val == MPP_FILL_DOUBLE ) then !this is FMS variable field default fill
  12107 ! we've packed an MPP_FILL_
  12108      imask_val = MPP_FILL_INT
  12109 !!! Current NETCDF fill values (AKA MPP_FILL_*) designed towards CEILING(MPP_FILL_{FLOAT,DOUBLE},kind=4byte)=MPP_FILL_INT
  12110   else if ( CEILING(mask_val, i4_kind) == MPP_FILL_INT ) then
  12111 ! we've also packed an MPP_FILL_
  12112      imask_val = MPP_FILL_INT
  12113 ! Secondary Logic:
  12114 !! We've done something dangerous
  12115   else
  12116      i8tmp = TRANSFER(mask_val , i8tmp )
  12117      i4tmp = TRANSFER(mask_val , i4tmp )
  12118      r4tmp = TRANSFER(mask_val , r4tmp )
  12119      if ( i8tmp == MPP_FILL_INT ) then
  12120 ! we've packed an MPP_FILL_
  12121         imask_val = MPP_FILL_INT
  12122      else if ( ANY(i4tmp == MPP_FILL_INT) ) then
  12123 ! we've packed an MPP_FILL_
  12124         imask_val = MPP_FILL_INT
  12125      else if ( ANY(r4tmp == MPP_FILL_DOUBLE) ) then
  12126 ! we've packed an MPP_FILL_
  12127         imask_val = MPP_FILL_INT
  12128      else
  12129 ! we have no idea what this is
  12130 ! construct detailed errStr
  12131         errStr = "mpp_chksum: mpp_chksum_i"
  12132         write(unit=tmpStr1,fmt="(I1)") KIND(var)
  12133         write(unit=tmpstr2,fmt="(I1)") SIZE(SHAPE(var))
  12134         errStr = errStr // tmpStr1 // "_" // tmpstr2 // "d_rmask passed int var with REAL("
  12135         write(unit=tmpstr3,fmt="(I1)") KIND(mask_val)
  12136         errStr = errStr // tmpstr3 // ") mask_val="
  12137         write(unit=tmpstr4,fmt=*) mask_val
  12138         errStr = errStr // trim(tmpstr4) // "has been called with these strange values. Check your KINDS, "// &
  12139               "_FillValue, pack and mask_val. "// &
  12140               "Hint: Try being explicit and using MPP_FILL_{INT,FLOAT,DOUBLE}. "// &
  12141               "Continuing by using the default MPP_FILL_INT. " // &

Page 523         Source Listing                  MPP_CHKSUM_I8_4D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12142               "THIS WILL BE FATAL IN THE FUTURE!"
  12143         call mpp_error(WARNING, trim(errStr) )
  12144 
  12145         imask_val = MPP_FILL_INT
  12146      end if
  12147   end if
  12148 
  12149   mpp_chksum_i8_4d_rmask = mpp_chksum(var,pelist,mask_val=imask_val)
  12150 
  12151   return
  12152 
  12153 end function mpp_chksum_i8_4d_rmask


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_chksum_i8_4d_rmask_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   12122                                scalar                    12122,12125                       
 CEILING                    Func   12110                                scalar                    12110                             
 ERRSTR                     Local  12101    CHAR            512         scalar                    12131,12134,12136,12138,12143     
 I4TMP                      Local  12095    I(4)            4     1     2                         12095,12117,12122                 
 I8TMP                      Local  12097    I(8)            8           scalar                    12097,12116,12119                 
 IMASK_VAL                  Local  12094    I(8)            8           scalar                    12108,12112,12121,12124,12127,1214
                                                                                                  5,12149                           
 KIND                       Func   12094                                scalar                    12094,12132,12135                 
 MASK_VAL                   Dummy  12089    R(8)            8           scalar   ARG,IN           12106,12110,12116,12117,12118,1213
                                                                                                  5,12137                           
 MPP_CHKSUM_I8_4D_RMASK     Func   12089    I(8)            8           scalar   PRIV             12149                             
 PELIST                     Dummy  12089    I(4)            4     1     1        ARG,INOUT        12149                             
 R4TMP                      Local  12096    R(4)            4     1     2                         12096,12118,12125                 
 SHAPE                      Func   12133                                scalar                    12133                             
 SIZE                       Func   12133                                scalar                    12133                             
 TMPSTR1                    Local  12099    CHAR            1           scalar                    12132,12134                       
 TMPSTR2                    Local  12099    CHAR            1           scalar                    12133,12134                       
 TMPSTR3                    Local  12099    CHAR            1           scalar                    12135,12136                       
 TMPSTR4                    Local  12100    CHAR            32          scalar                    12137,12138                       
 TMPSTR5                    Local  12100    CHAR            32          scalar                                                      
 TRANSFER                   Func   12116                                scalar                    12116,12117,12118                 
 TRIM                       Func   12138                                scalar                    12138,12143                       
 VAR                        Dummy  12089    I(8)            8     4     1        ARG,IN           12094,12132,12133,12149           

Page 524         Source Listing                  MPP_CHKSUM_I8_4D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12154 # 67 "../mpp/include/mpp_comm.inc" 2 
  12155 
  12156 
  12157 
  12158 
  12159 
  12160 
  12161 
  12162 
  12163 
  12164 # 1 "../mpp/include/mpp_chksum_int.h" 1 
  12165 !***********************************************************************
  12166 !*                   GNU Lesser General Public License
  12167 !*
  12168 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12169 !*
  12170 !* FMS is free software: you can redistribute it and/or modify it under
  12171 !* the terms of the GNU Lesser General Public License as published by
  12172 !* the Free Software Foundation, either version 3 of the License, or (at
  12173 !* your option) any later version.
  12174 !*
  12175 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12176 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12177 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12178 !* for more details.
  12179 !*
  12180 !* You should have received a copy of the GNU Lesser General Public
  12181 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12182 !***********************************************************************
  12183 
  12184 function mpp_chksum_i8_5d( var, pelist, mask_val )
  12185   integer(i8_kind) :: mpp_chksum_i8_5d
  12186   integer(i8_kind), intent(in) :: var (:,:,:,:,:)
  12187   integer, optional :: pelist(:)
  12188   integer(i8_kind), intent(in), optional :: mask_val
  12189 
  12190   if ( PRESENT(mask_val) ) then
  12191 !PACK on var/=mask_val ignores values in var
  12192 !equiv to setting those values=0, but on sparse arrays
  12193 !pack should return much smaller array to sum
  12194      mpp_chksum_i8_5d = sum( INT( PACK(var,var/=mask_val),i8_kind) )
  12195   else
  12196      mpp_chksum_i8_5d = sum(INT(var,i8_kind))
  12197   end if
  12198 
  12199       call mpp_sum( mpp_chksum_i8_5d, pelist )
  12200       return
  12201 
  12202     end function mpp_chksum_i8_5d

Page 525         Source Listing                  MPP_CHKSUM_I8_5D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_int.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_i8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INT                        Func   12194                                scalar                    12194,12196                       
 MASK_VAL                   Dummy  12184    I(8)            8           scalar   ARG,IN           12190,12194                       
 MPP_CHKSUM_I8_5D           Func   12184    I(8)            8           scalar   PRIV             12194,12196,12199,12267           
 PACK                       Func   12194                                scalar                    12194                             
 PELIST                     Dummy  12184    I(4)            4     1     1        ARG,INOUT        12199                             
 PRESENT                    Func   12190                                scalar                    12190                             
 SUM                        Func   12194                                scalar                    12194,12196                       
 VAR                        Dummy  12184    I(8)            8     5     1        ARG,IN           12194,12196                       

Page 526         Source Listing                  MPP_CHKSUM_I8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12203 
  12204 
  12205 !Handles real mask for easier implimentation
  12206 ! until exists full integer vartypes...
  12207 function mpp_chksum_i8_5d_rmask( var, pelist, mask_val )
  12208   integer(KIND=i8_kind) :: mpp_chksum_i8_5d_rmask
  12209   integer(i8_kind), intent(in) :: var (:,:,:,:,:)
  12210   integer, optional :: pelist(:)
  12211   real, intent(in) :: mask_val
  12212   integer(KIND(var))::imask_val
  12213   integer(KIND=i4_kind)::i4tmp(2)=0
  12214   real(KIND=r4_kind)::r4tmp(2)=0
  12215   integer(KIND=i8_kind) :: i8tmp=0
  12216 !high fidelity error message
  12217   character(LEN=1) :: tmpStr1,tmpStr2,tmpStr3
  12218   character(LEN=32) :: tmpStr4,tmpStr5
  12219   character(LEN=512) :: errStr
  12220 
  12221 ! Primary Logic: These first two are the "expected" branches.
  12222 !! These all resolve to MPP_FILL_INT
  12223 !!Should catch real "default_fill"(MPP_FILL_DOUBLE)
  12224   if (mask_val == MPP_FILL_DOUBLE ) then !this is FMS variable field default fill
  12225 ! we've packed an MPP_FILL_
  12226      imask_val = MPP_FILL_INT
  12227 !!! Current NETCDF fill values (AKA MPP_FILL_*) designed towards CEILING(MPP_FILL_{FLOAT,DOUBLE},kind=4byte)=MPP_FILL_INT
  12228   else if ( CEILING(mask_val, i4_kind) == MPP_FILL_INT ) then
  12229 ! we've also packed an MPP_FILL_
  12230      imask_val = MPP_FILL_INT
  12231 ! Secondary Logic:
  12232 !! We've done something dangerous
  12233   else
  12234      i8tmp = TRANSFER(mask_val , i8tmp )
  12235      i4tmp = TRANSFER(mask_val , i4tmp )
  12236      r4tmp = TRANSFER(mask_val , r4tmp )
  12237      if ( i8tmp == MPP_FILL_INT ) then
  12238 ! we've packed an MPP_FILL_
  12239         imask_val = MPP_FILL_INT
  12240      else if ( ANY(i4tmp == MPP_FILL_INT) ) then
  12241 ! we've packed an MPP_FILL_
  12242         imask_val = MPP_FILL_INT
  12243      else if ( ANY(r4tmp == MPP_FILL_DOUBLE) ) then
  12244 ! we've packed an MPP_FILL_
  12245         imask_val = MPP_FILL_INT
  12246      else
  12247 ! we have no idea what this is
  12248 ! construct detailed errStr
  12249         errStr = "mpp_chksum: mpp_chksum_i"
  12250         write(unit=tmpStr1,fmt="(I1)") KIND(var)
  12251         write(unit=tmpstr2,fmt="(I1)") SIZE(SHAPE(var))
  12252         errStr = errStr // tmpStr1 // "_" // tmpstr2 // "d_rmask passed int var with REAL("
  12253         write(unit=tmpstr3,fmt="(I1)") KIND(mask_val)
  12254         errStr = errStr // tmpstr3 // ") mask_val="
  12255         write(unit=tmpstr4,fmt=*) mask_val
  12256         errStr = errStr // trim(tmpstr4) // "has been called with these strange values. Check your KINDS, "// &
  12257               "_FillValue, pack and mask_val. "// &
  12258               "Hint: Try being explicit and using MPP_FILL_{INT,FLOAT,DOUBLE}. "// &
  12259               "Continuing by using the default MPP_FILL_INT. " // &

Page 527         Source Listing                  MPP_CHKSUM_I8_5D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12260               "THIS WILL BE FATAL IN THE FUTURE!"
  12261         call mpp_error(WARNING, trim(errStr) )
  12262 
  12263         imask_val = MPP_FILL_INT
  12264      end if
  12265   end if
  12266 
  12267   mpp_chksum_i8_5d_rmask = mpp_chksum(var,pelist,mask_val=imask_val)
  12268 
  12269   return
  12270 
  12271 end function mpp_chksum_i8_5d_rmask


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_chksum_i8_5d_rmask_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   12240                                scalar                    12240,12243                       
 CEILING                    Func   12228                                scalar                    12228                             
 ERRSTR                     Local  12219    CHAR            512         scalar                    12249,12252,12254,12256,12261     
 I4TMP                      Local  12213    I(4)            4     1     2                         12213,12235,12240                 
 I8TMP                      Local  12215    I(8)            8           scalar                    12215,12234,12237                 
 IMASK_VAL                  Local  12212    I(8)            8           scalar                    12226,12230,12239,12242,12245,1226
                                                                                                  3,12267                           
 KIND                       Func   12212                                scalar                    12212,12250,12253                 
 MASK_VAL                   Dummy  12207    R(8)            8           scalar   ARG,IN           12224,12228,12234,12235,12236,1225
                                                                                                  3,12255                           
 MPP_CHKSUM_I8_5D_RMASK     Func   12207    I(8)            8           scalar   PRIV             12267                             
 PELIST                     Dummy  12207    I(4)            4     1     1        ARG,INOUT        12267                             
 R4TMP                      Local  12214    R(4)            4     1     2                         12214,12236,12243                 
 SHAPE                      Func   12251                                scalar                    12251                             
 SIZE                       Func   12251                                scalar                    12251                             
 TMPSTR1                    Local  12217    CHAR            1           scalar                    12250,12252                       
 TMPSTR2                    Local  12217    CHAR            1           scalar                    12251,12252                       
 TMPSTR3                    Local  12217    CHAR            1           scalar                    12253,12254                       
 TMPSTR4                    Local  12218    CHAR            32          scalar                    12255,12256                       
 TMPSTR5                    Local  12218    CHAR            32          scalar                                                      
 TRANSFER                   Func   12234                                scalar                    12234,12235,12236                 
 TRIM                       Func   12256                                scalar                    12256,12261                       
 VAR                        Dummy  12207    I(8)            8     5     1        ARG,IN           12212,12250,12251,12267           

Page 528         Source Listing                  MPP_CHKSUM_I8_5D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12272 # 77 "../mpp/include/mpp_comm.inc" 2 
  12273 
  12274 
  12275 
  12276 
  12277 
  12278 
  12279 
  12280 
  12281 
  12282 # 1 "../mpp/include/mpp_chksum_int.h" 1 
  12283 !***********************************************************************
  12284 !*                   GNU Lesser General Public License
  12285 !*
  12286 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12287 !*
  12288 !* FMS is free software: you can redistribute it and/or modify it under
  12289 !* the terms of the GNU Lesser General Public License as published by
  12290 !* the Free Software Foundation, either version 3 of the License, or (at
  12291 !* your option) any later version.
  12292 !*
  12293 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12294 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12295 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12296 !* for more details.
  12297 !*
  12298 !* You should have received a copy of the GNU Lesser General Public
  12299 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12300 !***********************************************************************
  12301 
  12302 function mpp_chksum_i4_1d( var, pelist, mask_val )
  12303   integer(i8_kind) :: mpp_chksum_i4_1d
  12304   integer(i4_kind), intent(in) :: var (:)
  12305   integer, optional :: pelist(:)
  12306   integer(i4_kind), intent(in), optional :: mask_val
  12307 
  12308   if ( PRESENT(mask_val) ) then
  12309 !PACK on var/=mask_val ignores values in var
  12310 !equiv to setting those values=0, but on sparse arrays
  12311 !pack should return much smaller array to sum
  12312      mpp_chksum_i4_1d = sum( INT( PACK(var,var/=mask_val),i8_kind) )
  12313   else
  12314      mpp_chksum_i4_1d = sum(INT(var,i8_kind))
  12315   end if
  12316 
  12317       call mpp_sum( mpp_chksum_i4_1d, pelist )
  12318       return
  12319 
  12320     end function mpp_chksum_i4_1d

Page 529         Source Listing                  MPP_CHKSUM_I4_1D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_int.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_i4_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INT                        Func   12312                                scalar                    12312,12314                       
 MASK_VAL                   Dummy  12302    I(4)            4           scalar   ARG,IN           12308,12312                       
 MPP_CHKSUM_I4_1D           Func   12302    I(8)            8           scalar   PRIV             12312,12314,12317,12385,13257,1326
                                                                                                  0,13307,13310,13357,13360,13407,13
                                                                                                  410,13457,13460                   
 PACK                       Func   12312                                scalar                    12312                             
 PELIST                     Dummy  12302    I(4)            4     1     1        ARG,INOUT        12317                             
 PRESENT                    Func   12308                                scalar                    12308                             
 SUM                        Func   12312                                scalar                    12312,12314                       
 VAR                        Dummy  12302    I(4)            4     1     1        ARG,IN           12312,12314                       

Page 530         Source Listing                  MPP_CHKSUM_I4_1D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12321 
  12322 
  12323 !Handles real mask for easier implimentation
  12324 ! until exists full integer vartypes...
  12325 function mpp_chksum_i4_1d_rmask( var, pelist, mask_val )
  12326   integer(KIND=i8_kind) :: mpp_chksum_i4_1d_rmask
  12327   integer(i4_kind), intent(in) :: var (:)
  12328   integer, optional :: pelist(:)
  12329   real, intent(in) :: mask_val
  12330   integer(KIND(var))::imask_val
  12331   integer(KIND=i4_kind)::i4tmp(2)=0
  12332   real(KIND=r4_kind)::r4tmp(2)=0
  12333   integer(KIND=i8_kind) :: i8tmp=0
  12334 !high fidelity error message
  12335   character(LEN=1) :: tmpStr1,tmpStr2,tmpStr3
  12336   character(LEN=32) :: tmpStr4,tmpStr5
  12337   character(LEN=512) :: errStr
  12338 
  12339 ! Primary Logic: These first two are the "expected" branches.
  12340 !! These all resolve to MPP_FILL_INT
  12341 !!Should catch real "default_fill"(MPP_FILL_DOUBLE)
  12342   if (mask_val == MPP_FILL_DOUBLE ) then !this is FMS variable field default fill
  12343 ! we've packed an MPP_FILL_
  12344      imask_val = MPP_FILL_INT
  12345 !!! Current NETCDF fill values (AKA MPP_FILL_*) designed towards CEILING(MPP_FILL_{FLOAT,DOUBLE},kind=4byte)=MPP_FILL_INT
  12346   else if ( CEILING(mask_val, i4_kind) == MPP_FILL_INT ) then
  12347 ! we've also packed an MPP_FILL_
  12348      imask_val = MPP_FILL_INT
  12349 ! Secondary Logic:
  12350 !! We've done something dangerous
  12351   else
  12352      i8tmp = TRANSFER(mask_val , i8tmp )
  12353      i4tmp = TRANSFER(mask_val , i4tmp )
  12354      r4tmp = TRANSFER(mask_val , r4tmp )
  12355      if ( i8tmp == MPP_FILL_INT ) then
  12356 ! we've packed an MPP_FILL_
  12357         imask_val = MPP_FILL_INT
  12358      else if ( ANY(i4tmp == MPP_FILL_INT) ) then
  12359 ! we've packed an MPP_FILL_
  12360         imask_val = MPP_FILL_INT
  12361      else if ( ANY(r4tmp == MPP_FILL_DOUBLE) ) then
  12362 ! we've packed an MPP_FILL_
  12363         imask_val = MPP_FILL_INT
  12364      else
  12365 ! we have no idea what this is
  12366 ! construct detailed errStr
  12367         errStr = "mpp_chksum: mpp_chksum_i"
  12368         write(unit=tmpStr1,fmt="(I1)") KIND(var)
  12369         write(unit=tmpstr2,fmt="(I1)") SIZE(SHAPE(var))
  12370         errStr = errStr // tmpStr1 // "_" // tmpstr2 // "d_rmask passed int var with REAL("
  12371         write(unit=tmpstr3,fmt="(I1)") KIND(mask_val)
  12372         errStr = errStr // tmpstr3 // ") mask_val="
  12373         write(unit=tmpstr4,fmt=*) mask_val
  12374         errStr = errStr // trim(tmpstr4) // "has been called with these strange values. Check your KINDS, "// &
  12375               "_FillValue, pack and mask_val. "// &
  12376               "Hint: Try being explicit and using MPP_FILL_{INT,FLOAT,DOUBLE}. "// &
  12377               "Continuing by using the default MPP_FILL_INT. " // &

Page 531         Source Listing                  MPP_CHKSUM_I4_1D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12378               "THIS WILL BE FATAL IN THE FUTURE!"
  12379         call mpp_error(WARNING, trim(errStr) )
  12380 
  12381         imask_val = MPP_FILL_INT
  12382      end if
  12383   end if
  12384 
  12385   mpp_chksum_i4_1d_rmask = mpp_chksum(var,pelist,mask_val=imask_val)
  12386 
  12387   return
  12388 
  12389 end function mpp_chksum_i4_1d_rmask


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_chksum_i4_1d_rmask_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   12358                                scalar                    12358,12361                       
 CEILING                    Func   12346                                scalar                    12346                             
 ERRSTR                     Local  12337    CHAR            512         scalar                    12367,12370,12372,12374,12379     
 I4TMP                      Local  12331    I(4)            4     1     2                         12331,12353,12358                 
 I8TMP                      Local  12333    I(8)            8           scalar                    12333,12352,12355                 
 IMASK_VAL                  Local  12330    I(4)            4           scalar                    12344,12348,12357,12360,12363,1238
                                                                                                  1,12385                           
 KIND                       Func   12330                                scalar                    12330,12368,12371                 
 MASK_VAL                   Dummy  12325    R(8)            8           scalar   ARG,IN           12342,12346,12352,12353,12354,1237
                                                                                                  1,12373                           
 MPP_CHKSUM_I4_1D_RMASK     Func   12325    I(8)            8           scalar   PRIV             12385                             
 PELIST                     Dummy  12325    I(4)            4     1     1        ARG,INOUT        12385                             
 R4TMP                      Local  12332    R(4)            4     1     2                         12332,12354,12361                 
 SHAPE                      Func   12369                                scalar                    12369                             
 SIZE                       Func   12369                                scalar                    12369                             
 TMPSTR1                    Local  12335    CHAR            1           scalar                    12368,12370                       
 TMPSTR2                    Local  12335    CHAR            1           scalar                    12369,12370                       
 TMPSTR3                    Local  12335    CHAR            1           scalar                    12371,12372                       
 TMPSTR4                    Local  12336    CHAR            32          scalar                    12373,12374                       
 TMPSTR5                    Local  12336    CHAR            32          scalar                                                      
 TRANSFER                   Func   12352                                scalar                    12352,12353,12354                 
 TRIM                       Func   12374                                scalar                    12374,12379                       
 VAR                        Dummy  12325    I(4)            4     1     1        ARG,IN           12330,12368,12369,12385           

Page 532         Source Listing                  MPP_CHKSUM_I4_1D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12390 # 87 "../mpp/include/mpp_comm.inc" 2 
  12391 
  12392 
  12393 
  12394 
  12395 
  12396 
  12397 
  12398 
  12399 
  12400 # 1 "../mpp/include/mpp_chksum_int.h" 1 
  12401 !***********************************************************************
  12402 !*                   GNU Lesser General Public License
  12403 !*
  12404 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12405 !*
  12406 !* FMS is free software: you can redistribute it and/or modify it under
  12407 !* the terms of the GNU Lesser General Public License as published by
  12408 !* the Free Software Foundation, either version 3 of the License, or (at
  12409 !* your option) any later version.
  12410 !*
  12411 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12412 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12413 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12414 !* for more details.
  12415 !*
  12416 !* You should have received a copy of the GNU Lesser General Public
  12417 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12418 !***********************************************************************
  12419 
  12420 function mpp_chksum_i4_2d( var, pelist, mask_val )
  12421   integer(i8_kind) :: mpp_chksum_i4_2d
  12422   integer(i4_kind), intent(in) :: var (:,:)
  12423   integer, optional :: pelist(:)
  12424   integer(i4_kind), intent(in), optional :: mask_val
  12425 
  12426   if ( PRESENT(mask_val) ) then
  12427 !PACK on var/=mask_val ignores values in var
  12428 !equiv to setting those values=0, but on sparse arrays
  12429 !pack should return much smaller array to sum
  12430      mpp_chksum_i4_2d = sum( INT( PACK(var,var/=mask_val),i8_kind) )
  12431   else
  12432      mpp_chksum_i4_2d = sum(INT(var,i8_kind))
  12433   end if
  12434 
  12435       call mpp_sum( mpp_chksum_i4_2d, pelist )
  12436       return
  12437 
  12438     end function mpp_chksum_i4_2d

Page 533         Source Listing                  MPP_CHKSUM_I4_2D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_int.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_i4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INT                        Func   12430                                scalar                    12430,12432                       
 MASK_VAL                   Dummy  12420    I(4)            4           scalar   ARG,IN           12426,12430                       
 MPP_CHKSUM_I4_2D           Func   12420    I(8)            8           scalar   PRIV             12430,12432,12435,12503           
 PACK                       Func   12430                                scalar                    12430                             
 PELIST                     Dummy  12420    I(4)            4     1     1        ARG,INOUT        12435                             
 PRESENT                    Func   12426                                scalar                    12426                             
 SUM                        Func   12430                                scalar                    12430,12432                       
 VAR                        Dummy  12420    I(4)            4     2     1        ARG,IN           12430,12432                       

Page 534         Source Listing                  MPP_CHKSUM_I4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12439 
  12440 
  12441 !Handles real mask for easier implimentation
  12442 ! until exists full integer vartypes...
  12443 function mpp_chksum_i4_2d_rmask( var, pelist, mask_val )
  12444   integer(KIND=i8_kind) :: mpp_chksum_i4_2d_rmask
  12445   integer(i4_kind), intent(in) :: var (:,:)
  12446   integer, optional :: pelist(:)
  12447   real, intent(in) :: mask_val
  12448   integer(KIND(var))::imask_val
  12449   integer(KIND=i4_kind)::i4tmp(2)=0
  12450   real(KIND=r4_kind)::r4tmp(2)=0
  12451   integer(KIND=i8_kind) :: i8tmp=0
  12452 !high fidelity error message
  12453   character(LEN=1) :: tmpStr1,tmpStr2,tmpStr3
  12454   character(LEN=32) :: tmpStr4,tmpStr5
  12455   character(LEN=512) :: errStr
  12456 
  12457 ! Primary Logic: These first two are the "expected" branches.
  12458 !! These all resolve to MPP_FILL_INT
  12459 !!Should catch real "default_fill"(MPP_FILL_DOUBLE)
  12460   if (mask_val == MPP_FILL_DOUBLE ) then !this is FMS variable field default fill
  12461 ! we've packed an MPP_FILL_
  12462      imask_val = MPP_FILL_INT
  12463 !!! Current NETCDF fill values (AKA MPP_FILL_*) designed towards CEILING(MPP_FILL_{FLOAT,DOUBLE},kind=4byte)=MPP_FILL_INT
  12464   else if ( CEILING(mask_val, i4_kind) == MPP_FILL_INT ) then
  12465 ! we've also packed an MPP_FILL_
  12466      imask_val = MPP_FILL_INT
  12467 ! Secondary Logic:
  12468 !! We've done something dangerous
  12469   else
  12470      i8tmp = TRANSFER(mask_val , i8tmp )
  12471      i4tmp = TRANSFER(mask_val , i4tmp )
  12472      r4tmp = TRANSFER(mask_val , r4tmp )
  12473      if ( i8tmp == MPP_FILL_INT ) then
  12474 ! we've packed an MPP_FILL_
  12475         imask_val = MPP_FILL_INT
  12476      else if ( ANY(i4tmp == MPP_FILL_INT) ) then
  12477 ! we've packed an MPP_FILL_
  12478         imask_val = MPP_FILL_INT
  12479      else if ( ANY(r4tmp == MPP_FILL_DOUBLE) ) then
  12480 ! we've packed an MPP_FILL_
  12481         imask_val = MPP_FILL_INT
  12482      else
  12483 ! we have no idea what this is
  12484 ! construct detailed errStr
  12485         errStr = "mpp_chksum: mpp_chksum_i"
  12486         write(unit=tmpStr1,fmt="(I1)") KIND(var)
  12487         write(unit=tmpstr2,fmt="(I1)") SIZE(SHAPE(var))
  12488         errStr = errStr // tmpStr1 // "_" // tmpstr2 // "d_rmask passed int var with REAL("
  12489         write(unit=tmpstr3,fmt="(I1)") KIND(mask_val)
  12490         errStr = errStr // tmpstr3 // ") mask_val="
  12491         write(unit=tmpstr4,fmt=*) mask_val
  12492         errStr = errStr // trim(tmpstr4) // "has been called with these strange values. Check your KINDS, "// &
  12493               "_FillValue, pack and mask_val. "// &
  12494               "Hint: Try being explicit and using MPP_FILL_{INT,FLOAT,DOUBLE}. "// &
  12495               "Continuing by using the default MPP_FILL_INT. " // &

Page 535         Source Listing                  MPP_CHKSUM_I4_2D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12496               "THIS WILL BE FATAL IN THE FUTURE!"
  12497         call mpp_error(WARNING, trim(errStr) )
  12498 
  12499         imask_val = MPP_FILL_INT
  12500      end if
  12501   end if
  12502 
  12503   mpp_chksum_i4_2d_rmask = mpp_chksum(var,pelist,mask_val=imask_val)
  12504 
  12505   return
  12506 
  12507 end function mpp_chksum_i4_2d_rmask


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_chksum_i4_2d_rmask_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   12476                                scalar                    12476,12479                       
 CEILING                    Func   12464                                scalar                    12464                             
 ERRSTR                     Local  12455    CHAR            512         scalar                    12485,12488,12490,12492,12497     
 I4TMP                      Local  12449    I(4)            4     1     2                         12449,12471,12476                 
 I8TMP                      Local  12451    I(8)            8           scalar                    12451,12470,12473                 
 IMASK_VAL                  Local  12448    I(4)            4           scalar                    12462,12466,12475,12478,12481,1249
                                                                                                  9,12503                           
 KIND                       Func   12448                                scalar                    12448,12486,12489                 
 MASK_VAL                   Dummy  12443    R(8)            8           scalar   ARG,IN           12460,12464,12470,12471,12472,1248
                                                                                                  9,12491                           
 MPP_CHKSUM_I4_2D_RMASK     Func   12443    I(8)            8           scalar   PRIV             12503                             
 PELIST                     Dummy  12443    I(4)            4     1     1        ARG,INOUT        12503                             
 R4TMP                      Local  12450    R(4)            4     1     2                         12450,12472,12479                 
 SHAPE                      Func   12487                                scalar                    12487                             
 SIZE                       Func   12487                                scalar                    12487                             
 TMPSTR1                    Local  12453    CHAR            1           scalar                    12486,12488                       
 TMPSTR2                    Local  12453    CHAR            1           scalar                    12487,12488                       
 TMPSTR3                    Local  12453    CHAR            1           scalar                    12489,12490                       
 TMPSTR4                    Local  12454    CHAR            32          scalar                    12491,12492                       
 TMPSTR5                    Local  12454    CHAR            32          scalar                                                      
 TRANSFER                   Func   12470                                scalar                    12470,12471,12472                 
 TRIM                       Func   12492                                scalar                    12492,12497                       
 VAR                        Dummy  12443    I(4)            4     2     1        ARG,IN           12448,12486,12487,12503           

Page 536         Source Listing                  MPP_CHKSUM_I4_2D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12508 # 97 "../mpp/include/mpp_comm.inc" 2 
  12509 
  12510 
  12511 
  12512 
  12513 
  12514 
  12515 
  12516 
  12517 
  12518 # 1 "../mpp/include/mpp_chksum_int.h" 1 
  12519 !***********************************************************************
  12520 !*                   GNU Lesser General Public License
  12521 !*
  12522 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12523 !*
  12524 !* FMS is free software: you can redistribute it and/or modify it under
  12525 !* the terms of the GNU Lesser General Public License as published by
  12526 !* the Free Software Foundation, either version 3 of the License, or (at
  12527 !* your option) any later version.
  12528 !*
  12529 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12530 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12531 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12532 !* for more details.
  12533 !*
  12534 !* You should have received a copy of the GNU Lesser General Public
  12535 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12536 !***********************************************************************
  12537 
  12538 function mpp_chksum_i4_3d( var, pelist, mask_val )
  12539   integer(i8_kind) :: mpp_chksum_i4_3d
  12540   integer(i4_kind), intent(in) :: var (:,:,:)
  12541   integer, optional :: pelist(:)
  12542   integer(i4_kind), intent(in), optional :: mask_val
  12543 
  12544   if ( PRESENT(mask_val) ) then
  12545 !PACK on var/=mask_val ignores values in var
  12546 !equiv to setting those values=0, but on sparse arrays
  12547 !pack should return much smaller array to sum
  12548      mpp_chksum_i4_3d = sum( INT( PACK(var,var/=mask_val),i8_kind) )
  12549   else
  12550      mpp_chksum_i4_3d = sum(INT(var,i8_kind))
  12551   end if
  12552 
  12553       call mpp_sum( mpp_chksum_i4_3d, pelist )
  12554       return
  12555 
  12556     end function mpp_chksum_i4_3d

Page 537         Source Listing                  MPP_CHKSUM_I4_3D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_int.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_i4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INT                        Func   12548                                scalar                    12548,12550                       
 MASK_VAL                   Dummy  12538    I(4)            4           scalar   ARG,IN           12544,12548                       
 MPP_CHKSUM_I4_3D           Func   12538    I(8)            8           scalar   PRIV             12548,12550,12553,12621           
 PACK                       Func   12548                                scalar                    12548                             
 PELIST                     Dummy  12538    I(4)            4     1     1        ARG,INOUT        12553                             
 PRESENT                    Func   12544                                scalar                    12544                             
 SUM                        Func   12548                                scalar                    12548,12550                       
 VAR                        Dummy  12538    I(4)            4     3     1        ARG,IN           12548,12550                       

Page 538         Source Listing                  MPP_CHKSUM_I4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12557 
  12558 
  12559 !Handles real mask for easier implimentation
  12560 ! until exists full integer vartypes...
  12561 function mpp_chksum_i4_3d_rmask( var, pelist, mask_val )
  12562   integer(KIND=i8_kind) :: mpp_chksum_i4_3d_rmask
  12563   integer(i4_kind), intent(in) :: var (:,:,:)
  12564   integer, optional :: pelist(:)
  12565   real, intent(in) :: mask_val
  12566   integer(KIND(var))::imask_val
  12567   integer(KIND=i4_kind)::i4tmp(2)=0
  12568   real(KIND=r4_kind)::r4tmp(2)=0
  12569   integer(KIND=i8_kind) :: i8tmp=0
  12570 !high fidelity error message
  12571   character(LEN=1) :: tmpStr1,tmpStr2,tmpStr3
  12572   character(LEN=32) :: tmpStr4,tmpStr5
  12573   character(LEN=512) :: errStr
  12574 
  12575 ! Primary Logic: These first two are the "expected" branches.
  12576 !! These all resolve to MPP_FILL_INT
  12577 !!Should catch real "default_fill"(MPP_FILL_DOUBLE)
  12578   if (mask_val == MPP_FILL_DOUBLE ) then !this is FMS variable field default fill
  12579 ! we've packed an MPP_FILL_
  12580      imask_val = MPP_FILL_INT
  12581 !!! Current NETCDF fill values (AKA MPP_FILL_*) designed towards CEILING(MPP_FILL_{FLOAT,DOUBLE},kind=4byte)=MPP_FILL_INT
  12582   else if ( CEILING(mask_val, i4_kind) == MPP_FILL_INT ) then
  12583 ! we've also packed an MPP_FILL_
  12584      imask_val = MPP_FILL_INT
  12585 ! Secondary Logic:
  12586 !! We've done something dangerous
  12587   else
  12588      i8tmp = TRANSFER(mask_val , i8tmp )
  12589      i4tmp = TRANSFER(mask_val , i4tmp )
  12590      r4tmp = TRANSFER(mask_val , r4tmp )
  12591      if ( i8tmp == MPP_FILL_INT ) then
  12592 ! we've packed an MPP_FILL_
  12593         imask_val = MPP_FILL_INT
  12594      else if ( ANY(i4tmp == MPP_FILL_INT) ) then
  12595 ! we've packed an MPP_FILL_
  12596         imask_val = MPP_FILL_INT
  12597      else if ( ANY(r4tmp == MPP_FILL_DOUBLE) ) then
  12598 ! we've packed an MPP_FILL_
  12599         imask_val = MPP_FILL_INT
  12600      else
  12601 ! we have no idea what this is
  12602 ! construct detailed errStr
  12603         errStr = "mpp_chksum: mpp_chksum_i"
  12604         write(unit=tmpStr1,fmt="(I1)") KIND(var)
  12605         write(unit=tmpstr2,fmt="(I1)") SIZE(SHAPE(var))
  12606         errStr = errStr // tmpStr1 // "_" // tmpstr2 // "d_rmask passed int var with REAL("
  12607         write(unit=tmpstr3,fmt="(I1)") KIND(mask_val)
  12608         errStr = errStr // tmpstr3 // ") mask_val="
  12609         write(unit=tmpstr4,fmt=*) mask_val
  12610         errStr = errStr // trim(tmpstr4) // "has been called with these strange values. Check your KINDS, "// &
  12611               "_FillValue, pack and mask_val. "// &
  12612               "Hint: Try being explicit and using MPP_FILL_{INT,FLOAT,DOUBLE}. "// &
  12613               "Continuing by using the default MPP_FILL_INT. " // &

Page 539         Source Listing                  MPP_CHKSUM_I4_3D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12614               "THIS WILL BE FATAL IN THE FUTURE!"
  12615         call mpp_error(WARNING, trim(errStr) )
  12616 
  12617         imask_val = MPP_FILL_INT
  12618      end if
  12619   end if
  12620 
  12621   mpp_chksum_i4_3d_rmask = mpp_chksum(var,pelist,mask_val=imask_val)
  12622 
  12623   return
  12624 
  12625 end function mpp_chksum_i4_3d_rmask


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_chksum_i4_3d_rmask_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   12594                                scalar                    12594,12597                       
 CEILING                    Func   12582                                scalar                    12582                             
 ERRSTR                     Local  12573    CHAR            512         scalar                    12603,12606,12608,12610,12615     
 I4TMP                      Local  12567    I(4)            4     1     2                         12567,12589,12594                 
 I8TMP                      Local  12569    I(8)            8           scalar                    12569,12588,12591                 
 IMASK_VAL                  Local  12566    I(4)            4           scalar                    12580,12584,12593,12596,12599,1261
                                                                                                  7,12621                           
 KIND                       Func   12566                                scalar                    12566,12604,12607                 
 MASK_VAL                   Dummy  12561    R(8)            8           scalar   ARG,IN           12578,12582,12588,12589,12590,1260
                                                                                                  7,12609                           
 MPP_CHKSUM_I4_3D_RMASK     Func   12561    I(8)            8           scalar   PRIV             12621                             
 PELIST                     Dummy  12561    I(4)            4     1     1        ARG,INOUT        12621                             
 R4TMP                      Local  12568    R(4)            4     1     2                         12568,12590,12597                 
 SHAPE                      Func   12605                                scalar                    12605                             
 SIZE                       Func   12605                                scalar                    12605                             
 TMPSTR1                    Local  12571    CHAR            1           scalar                    12604,12606                       
 TMPSTR2                    Local  12571    CHAR            1           scalar                    12605,12606                       
 TMPSTR3                    Local  12571    CHAR            1           scalar                    12607,12608                       
 TMPSTR4                    Local  12572    CHAR            32          scalar                    12609,12610                       
 TMPSTR5                    Local  12572    CHAR            32          scalar                                                      
 TRANSFER                   Func   12588                                scalar                    12588,12589,12590                 
 TRIM                       Func   12610                                scalar                    12610,12615                       
 VAR                        Dummy  12561    I(4)            4     3     1        ARG,IN           12566,12604,12605,12621           

Page 540         Source Listing                  MPP_CHKSUM_I4_3D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12626 # 107 "../mpp/include/mpp_comm.inc" 2 
  12627 
  12628 
  12629 
  12630 
  12631 
  12632 
  12633 
  12634 
  12635 
  12636 # 1 "../mpp/include/mpp_chksum_int.h" 1 
  12637 !***********************************************************************
  12638 !*                   GNU Lesser General Public License
  12639 !*
  12640 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12641 !*
  12642 !* FMS is free software: you can redistribute it and/or modify it under
  12643 !* the terms of the GNU Lesser General Public License as published by
  12644 !* the Free Software Foundation, either version 3 of the License, or (at
  12645 !* your option) any later version.
  12646 !*
  12647 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12648 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12649 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12650 !* for more details.
  12651 !*
  12652 !* You should have received a copy of the GNU Lesser General Public
  12653 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12654 !***********************************************************************
  12655 
  12656 function mpp_chksum_i4_4d( var, pelist, mask_val )
  12657   integer(i8_kind) :: mpp_chksum_i4_4d
  12658   integer(i4_kind), intent(in) :: var (:,:,:,:)
  12659   integer, optional :: pelist(:)
  12660   integer(i4_kind), intent(in), optional :: mask_val
  12661 
  12662   if ( PRESENT(mask_val) ) then
  12663 !PACK on var/=mask_val ignores values in var
  12664 !equiv to setting those values=0, but on sparse arrays
  12665 !pack should return much smaller array to sum
  12666      mpp_chksum_i4_4d = sum( INT( PACK(var,var/=mask_val),i8_kind) )
  12667   else
  12668      mpp_chksum_i4_4d = sum(INT(var,i8_kind))
  12669   end if
  12670 
  12671       call mpp_sum( mpp_chksum_i4_4d, pelist )
  12672       return
  12673 
  12674     end function mpp_chksum_i4_4d

Page 541         Source Listing                  MPP_CHKSUM_I4_4D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_int.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_i4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INT                        Func   12666                                scalar                    12666,12668                       
 MASK_VAL                   Dummy  12656    I(4)            4           scalar   ARG,IN           12662,12666                       
 MPP_CHKSUM_I4_4D           Func   12656    I(8)            8           scalar   PRIV             12666,12668,12671,12739           
 PACK                       Func   12666                                scalar                    12666                             
 PELIST                     Dummy  12656    I(4)            4     1     1        ARG,INOUT        12671                             
 PRESENT                    Func   12662                                scalar                    12662                             
 SUM                        Func   12666                                scalar                    12666,12668                       
 VAR                        Dummy  12656    I(4)            4     4     1        ARG,IN           12666,12668                       

Page 542         Source Listing                  MPP_CHKSUM_I4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12675 
  12676 
  12677 !Handles real mask for easier implimentation
  12678 ! until exists full integer vartypes...
  12679 function mpp_chksum_i4_4d_rmask( var, pelist, mask_val )
  12680   integer(KIND=i8_kind) :: mpp_chksum_i4_4d_rmask
  12681   integer(i4_kind), intent(in) :: var (:,:,:,:)
  12682   integer, optional :: pelist(:)
  12683   real, intent(in) :: mask_val
  12684   integer(KIND(var))::imask_val
  12685   integer(KIND=i4_kind)::i4tmp(2)=0
  12686   real(KIND=r4_kind)::r4tmp(2)=0
  12687   integer(KIND=i8_kind) :: i8tmp=0
  12688 !high fidelity error message
  12689   character(LEN=1) :: tmpStr1,tmpStr2,tmpStr3
  12690   character(LEN=32) :: tmpStr4,tmpStr5
  12691   character(LEN=512) :: errStr
  12692 
  12693 ! Primary Logic: These first two are the "expected" branches.
  12694 !! These all resolve to MPP_FILL_INT
  12695 !!Should catch real "default_fill"(MPP_FILL_DOUBLE)
  12696   if (mask_val == MPP_FILL_DOUBLE ) then !this is FMS variable field default fill
  12697 ! we've packed an MPP_FILL_
  12698      imask_val = MPP_FILL_INT
  12699 !!! Current NETCDF fill values (AKA MPP_FILL_*) designed towards CEILING(MPP_FILL_{FLOAT,DOUBLE},kind=4byte)=MPP_FILL_INT
  12700   else if ( CEILING(mask_val, i4_kind) == MPP_FILL_INT ) then
  12701 ! we've also packed an MPP_FILL_
  12702      imask_val = MPP_FILL_INT
  12703 ! Secondary Logic:
  12704 !! We've done something dangerous
  12705   else
  12706      i8tmp = TRANSFER(mask_val , i8tmp )
  12707      i4tmp = TRANSFER(mask_val , i4tmp )
  12708      r4tmp = TRANSFER(mask_val , r4tmp )
  12709      if ( i8tmp == MPP_FILL_INT ) then
  12710 ! we've packed an MPP_FILL_
  12711         imask_val = MPP_FILL_INT
  12712      else if ( ANY(i4tmp == MPP_FILL_INT) ) then
  12713 ! we've packed an MPP_FILL_
  12714         imask_val = MPP_FILL_INT
  12715      else if ( ANY(r4tmp == MPP_FILL_DOUBLE) ) then
  12716 ! we've packed an MPP_FILL_
  12717         imask_val = MPP_FILL_INT
  12718      else
  12719 ! we have no idea what this is
  12720 ! construct detailed errStr
  12721         errStr = "mpp_chksum: mpp_chksum_i"
  12722         write(unit=tmpStr1,fmt="(I1)") KIND(var)
  12723         write(unit=tmpstr2,fmt="(I1)") SIZE(SHAPE(var))
  12724         errStr = errStr // tmpStr1 // "_" // tmpstr2 // "d_rmask passed int var with REAL("
  12725         write(unit=tmpstr3,fmt="(I1)") KIND(mask_val)
  12726         errStr = errStr // tmpstr3 // ") mask_val="
  12727         write(unit=tmpstr4,fmt=*) mask_val
  12728         errStr = errStr // trim(tmpstr4) // "has been called with these strange values. Check your KINDS, "// &
  12729               "_FillValue, pack and mask_val. "// &
  12730               "Hint: Try being explicit and using MPP_FILL_{INT,FLOAT,DOUBLE}. "// &
  12731               "Continuing by using the default MPP_FILL_INT. " // &

Page 543         Source Listing                  MPP_CHKSUM_I4_4D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12732               "THIS WILL BE FATAL IN THE FUTURE!"
  12733         call mpp_error(WARNING, trim(errStr) )
  12734 
  12735         imask_val = MPP_FILL_INT
  12736      end if
  12737   end if
  12738 
  12739   mpp_chksum_i4_4d_rmask = mpp_chksum(var,pelist,mask_val=imask_val)
  12740 
  12741   return
  12742 
  12743 end function mpp_chksum_i4_4d_rmask


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_chksum_i4_4d_rmask_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   12712                                scalar                    12712,12715                       
 CEILING                    Func   12700                                scalar                    12700                             
 ERRSTR                     Local  12691    CHAR            512         scalar                    12721,12724,12726,12728,12733     
 I4TMP                      Local  12685    I(4)            4     1     2                         12685,12707,12712                 
 I8TMP                      Local  12687    I(8)            8           scalar                    12687,12706,12709                 
 IMASK_VAL                  Local  12684    I(4)            4           scalar                    12698,12702,12711,12714,12717,1273
                                                                                                  5,12739                           
 KIND                       Func   12684                                scalar                    12684,12722,12725                 
 MASK_VAL                   Dummy  12679    R(8)            8           scalar   ARG,IN           12696,12700,12706,12707,12708,1272
                                                                                                  5,12727                           
 MPP_CHKSUM_I4_4D_RMASK     Func   12679    I(8)            8           scalar   PRIV             12739                             
 PELIST                     Dummy  12679    I(4)            4     1     1        ARG,INOUT        12739                             
 R4TMP                      Local  12686    R(4)            4     1     2                         12686,12708,12715                 
 SHAPE                      Func   12723                                scalar                    12723                             
 SIZE                       Func   12723                                scalar                    12723                             
 TMPSTR1                    Local  12689    CHAR            1           scalar                    12722,12724                       
 TMPSTR2                    Local  12689    CHAR            1           scalar                    12723,12724                       
 TMPSTR3                    Local  12689    CHAR            1           scalar                    12725,12726                       
 TMPSTR4                    Local  12690    CHAR            32          scalar                    12727,12728                       
 TMPSTR5                    Local  12690    CHAR            32          scalar                                                      
 TRANSFER                   Func   12706                                scalar                    12706,12707,12708                 
 TRIM                       Func   12728                                scalar                    12728,12733                       
 VAR                        Dummy  12679    I(4)            4     4     1        ARG,IN           12684,12722,12723,12739           

Page 544         Source Listing                  MPP_CHKSUM_I4_4D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12744 # 117 "../mpp/include/mpp_comm.inc" 2 
  12745 
  12746 
  12747 
  12748 
  12749 
  12750 
  12751 
  12752 
  12753 
  12754 # 1 "../mpp/include/mpp_chksum_int.h" 1 
  12755 !***********************************************************************
  12756 !*                   GNU Lesser General Public License
  12757 !*
  12758 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12759 !*
  12760 !* FMS is free software: you can redistribute it and/or modify it under
  12761 !* the terms of the GNU Lesser General Public License as published by
  12762 !* the Free Software Foundation, either version 3 of the License, or (at
  12763 !* your option) any later version.
  12764 !*
  12765 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12766 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12767 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12768 !* for more details.
  12769 !*
  12770 !* You should have received a copy of the GNU Lesser General Public
  12771 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12772 !***********************************************************************
  12773 
  12774 function mpp_chksum_i4_5d( var, pelist, mask_val )
  12775   integer(i8_kind) :: mpp_chksum_i4_5d
  12776   integer(i4_kind), intent(in) :: var (:,:,:,:,:)
  12777   integer, optional :: pelist(:)
  12778   integer(i4_kind), intent(in), optional :: mask_val
  12779 
  12780   if ( PRESENT(mask_val) ) then
  12781 !PACK on var/=mask_val ignores values in var
  12782 !equiv to setting those values=0, but on sparse arrays
  12783 !pack should return much smaller array to sum
  12784      mpp_chksum_i4_5d = sum( INT( PACK(var,var/=mask_val),i8_kind) )
  12785   else
  12786      mpp_chksum_i4_5d = sum(INT(var,i8_kind))
  12787   end if
  12788 
  12789       call mpp_sum( mpp_chksum_i4_5d, pelist )
  12790       return
  12791 
  12792     end function mpp_chksum_i4_5d

Page 545         Source Listing                  MPP_CHKSUM_I4_5D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_int.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_i4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INT                        Func   12784                                scalar                    12784,12786                       
 MASK_VAL                   Dummy  12774    I(4)            4           scalar   ARG,IN           12780,12784                       
 MPP_CHKSUM_I4_5D           Func   12774    I(8)            8           scalar   PRIV             12784,12786,12789,12857           
 PACK                       Func   12784                                scalar                    12784                             
 PELIST                     Dummy  12774    I(4)            4     1     1        ARG,INOUT        12789                             
 PRESENT                    Func   12780                                scalar                    12780                             
 SUM                        Func   12784                                scalar                    12784,12786                       
 VAR                        Dummy  12774    I(4)            4     5     1        ARG,IN           12784,12786                       

Page 546         Source Listing                  MPP_CHKSUM_I4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12793 
  12794 
  12795 !Handles real mask for easier implimentation
  12796 ! until exists full integer vartypes...
  12797 function mpp_chksum_i4_5d_rmask( var, pelist, mask_val )
  12798   integer(KIND=i8_kind) :: mpp_chksum_i4_5d_rmask
  12799   integer(i4_kind), intent(in) :: var (:,:,:,:,:)
  12800   integer, optional :: pelist(:)
  12801   real, intent(in) :: mask_val
  12802   integer(KIND(var))::imask_val
  12803   integer(KIND=i4_kind)::i4tmp(2)=0
  12804   real(KIND=r4_kind)::r4tmp(2)=0
  12805   integer(KIND=i8_kind) :: i8tmp=0
  12806 !high fidelity error message
  12807   character(LEN=1) :: tmpStr1,tmpStr2,tmpStr3
  12808   character(LEN=32) :: tmpStr4,tmpStr5
  12809   character(LEN=512) :: errStr
  12810 
  12811 ! Primary Logic: These first two are the "expected" branches.
  12812 !! These all resolve to MPP_FILL_INT
  12813 !!Should catch real "default_fill"(MPP_FILL_DOUBLE)
  12814   if (mask_val == MPP_FILL_DOUBLE ) then !this is FMS variable field default fill
  12815 ! we've packed an MPP_FILL_
  12816      imask_val = MPP_FILL_INT
  12817 !!! Current NETCDF fill values (AKA MPP_FILL_*) designed towards CEILING(MPP_FILL_{FLOAT,DOUBLE},kind=4byte)=MPP_FILL_INT
  12818   else if ( CEILING(mask_val, i4_kind) == MPP_FILL_INT ) then
  12819 ! we've also packed an MPP_FILL_
  12820      imask_val = MPP_FILL_INT
  12821 ! Secondary Logic:
  12822 !! We've done something dangerous
  12823   else
  12824      i8tmp = TRANSFER(mask_val , i8tmp )
  12825      i4tmp = TRANSFER(mask_val , i4tmp )
  12826      r4tmp = TRANSFER(mask_val , r4tmp )
  12827      if ( i8tmp == MPP_FILL_INT ) then
  12828 ! we've packed an MPP_FILL_
  12829         imask_val = MPP_FILL_INT
  12830      else if ( ANY(i4tmp == MPP_FILL_INT) ) then
  12831 ! we've packed an MPP_FILL_
  12832         imask_val = MPP_FILL_INT
  12833      else if ( ANY(r4tmp == MPP_FILL_DOUBLE) ) then
  12834 ! we've packed an MPP_FILL_
  12835         imask_val = MPP_FILL_INT
  12836      else
  12837 ! we have no idea what this is
  12838 ! construct detailed errStr
  12839         errStr = "mpp_chksum: mpp_chksum_i"
  12840         write(unit=tmpStr1,fmt="(I1)") KIND(var)
  12841         write(unit=tmpstr2,fmt="(I1)") SIZE(SHAPE(var))
  12842         errStr = errStr // tmpStr1 // "_" // tmpstr2 // "d_rmask passed int var with REAL("
  12843         write(unit=tmpstr3,fmt="(I1)") KIND(mask_val)
  12844         errStr = errStr // tmpstr3 // ") mask_val="
  12845         write(unit=tmpstr4,fmt=*) mask_val
  12846         errStr = errStr // trim(tmpstr4) // "has been called with these strange values. Check your KINDS, "// &
  12847               "_FillValue, pack and mask_val. "// &
  12848               "Hint: Try being explicit and using MPP_FILL_{INT,FLOAT,DOUBLE}. "// &
  12849               "Continuing by using the default MPP_FILL_INT. " // &

Page 547         Source Listing                  MPP_CHKSUM_I4_5D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12850               "THIS WILL BE FATAL IN THE FUTURE!"
  12851         call mpp_error(WARNING, trim(errStr) )
  12852 
  12853         imask_val = MPP_FILL_INT
  12854      end if
  12855   end if
  12856 
  12857   mpp_chksum_i4_5d_rmask = mpp_chksum(var,pelist,mask_val=imask_val)
  12858 
  12859   return
  12860 
  12861 end function mpp_chksum_i4_5d_rmask


ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_chksum_i4_5d_rmask_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   12830                                scalar                    12830,12833                       
 CEILING                    Func   12818                                scalar                    12818                             
 ERRSTR                     Local  12809    CHAR            512         scalar                    12839,12842,12844,12846,12851     
 I4TMP                      Local  12803    I(4)            4     1     2                         12803,12825,12830                 
 I8TMP                      Local  12805    I(8)            8           scalar                    12805,12824,12827                 
 IMASK_VAL                  Local  12802    I(4)            4           scalar                    12816,12820,12829,12832,12835,1285
                                                                                                  3,12857                           
 KIND                       Func   12802                                scalar                    12802,12840,12843                 
 MASK_VAL                   Dummy  12797    R(8)            8           scalar   ARG,IN           12814,12818,12824,12825,12826,1284
                                                                                                  3,12845                           
 MPP_CHKSUM_I4_5D_RMASK     Func   12797    I(8)            8           scalar   PRIV             12857                             
 PELIST                     Dummy  12797    I(4)            4     1     1        ARG,INOUT        12857                             
 R4TMP                      Local  12804    R(4)            4     1     2                         12804,12826,12833                 
 SHAPE                      Func   12841                                scalar                    12841                             
 SIZE                       Func   12841                                scalar                    12841                             
 TMPSTR1                    Local  12807    CHAR            1           scalar                    12840,12842                       
 TMPSTR2                    Local  12807    CHAR            1           scalar                    12841,12842                       
 TMPSTR3                    Local  12807    CHAR            1           scalar                    12843,12844                       
 TMPSTR4                    Local  12808    CHAR            32          scalar                    12845,12846                       
 TMPSTR5                    Local  12808    CHAR            32          scalar                                                      
 TRANSFER                   Func   12824                                scalar                    12824,12825,12826                 
 TRIM                       Func   12846                                scalar                    12846,12851                       
 VAR                        Dummy  12797    I(4)            4     5     1        ARG,IN           12802,12840,12841,12857           

Page 548         Source Listing                  MPP_CHKSUM_I4_5D_RMASK
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_int.h

  12862 # 127 "../mpp/include/mpp_comm.inc" 2 
  12863 
  12864 
  12865 
  12866 
  12867 
  12868 
  12869 
  12870 # 1 "../mpp/include/mpp_chksum_scalar.h" 1 
  12871 !***********************************************************************
  12872 !*                   GNU Lesser General Public License
  12873 !*
  12874 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12875 !*
  12876 !* FMS is free software: you can redistribute it and/or modify it under
  12877 !* the terms of the GNU Lesser General Public License as published by
  12878 !* the Free Software Foundation, either version 3 of the License, or (at
  12879 !* your option) any later version.
  12880 !*
  12881 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12882 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12883 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12884 !* for more details.
  12885 !*
  12886 !* You should have received a copy of the GNU Lesser General Public
  12887 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12888 !***********************************************************************
  12889 
  12890 function mpp_chksum_r8_0d( var, pelist, mask_val )
  12891 !mold is a dummy array to be used by TRANSFER()
  12892 !must be same TYPE as result
  12893 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  12894 !mold and mask_val must be same numBytes, otherwise undefined behavior
  12895       integer(i8_kind) :: mpp_chksum_r8_0d
  12896       real(r8_kind), intent(in) :: var
  12897       integer, intent(in), optional :: pelist(:)
  12898       integer(i8_kind) :: mold(1)
  12899   real(r8_kind), intent(in), optional :: mask_val
  12900       pointer( p, mold )
  12901 
  12902       p = LOC(var)
  12903 
  12904   if ( PRESENT(mask_val) ) then
  12905      mpp_chksum_r8_0d = mpp_chksum( mold, pelist, TRANSFER(mask_val, mold(1)) )
  12906   else
  12907       mpp_chksum_r8_0d = mpp_chksum( mold, pelist )
  12908   end if
  12909       return
  12910     end function mpp_chksum_r8_0d

Page 549         Source Listing                  MPP_CHKSUM_R8_0D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_scalar.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r8_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LOC                        Func   12902                                scalar                    12902                             
 MASK_VAL                   Dummy  12890    R(8)            8           scalar   ARG,IN           12904,12905                       
 MOLD                       Local  12898    I(8)            8     1     1                         12905,12907                       
 MPP_CHKSUM_R8_0D           Func   12890    I(8)            8           scalar   PRIV             12905,12907                       
 P                          Local  12900    I(8)            8           scalar   PTR              12902                             
 PELIST                     Dummy  12890    I(4)            4     1     1        ARG,IN           12905,12907                       
 PRESENT                    Func   12904                                scalar                    12904                             
 TRANSFER                   Func   12905                                scalar                    12905                             
 VAR                        Dummy  12890    R(8)            8           scalar   ARG,TGT,IN       12902                             

Page 550         Source Listing                  MPP_CHKSUM_R8_0D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_scalar.h

  12911 # 135 "../mpp/include/mpp_comm.inc" 2 
  12912 
  12913 
  12914 
  12915 
  12916 
  12917 
  12918 
  12919 
  12920 
  12921 # 1 "../mpp/include/mpp_chksum.h" 1 
  12922 !***********************************************************************
  12923 !*                   GNU Lesser General Public License
  12924 !*
  12925 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12926 !*
  12927 !* FMS is free software: you can redistribute it and/or modify it under
  12928 !* the terms of the GNU Lesser General Public License as published by
  12929 !* the Free Software Foundation, either version 3 of the License, or (at
  12930 !* your option) any later version.
  12931 !*
  12932 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12933 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12934 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12935 !* for more details.
  12936 !*
  12937 !* You should have received a copy of the GNU Lesser General Public
  12938 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12939 !***********************************************************************
  12940 
  12941 function mpp_chksum_r8_1d( var, pelist , mask_val)
  12942 !mold is a dummy array to be used by TRANSFER()
  12943 !must be same TYPE as result
  12944 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  12945 !optional mask_val is masked away in checksum_int.h function via PACK()
  12946   integer(i8_kind) :: mpp_chksum_r8_1d
  12947   integer(i8_kind) :: mold(1)
  12948   real(r8_kind), intent(in) :: var (:)
  12949   integer, intent(in), optional :: pelist(:)
  12950   real(r8_kind), intent(in),optional :: mask_val
  12951 
  12952   if ( PRESENT(mask_val) ) then
  12953      mpp_chksum_r8_1d = mpp_chksum( TRANSFER(var,mold), pelist, &
  12954           mask_val= TRANSFER(mask_val,mold(1) ) )
  12955   else
  12956       mpp_chksum_r8_1d = mpp_chksum( TRANSFER(var,mold), pelist )
  12957   end if
  12958 
  12959       return
  12960     end function mpp_chksum_r8_1d

Page 551         Source Listing                  MPP_CHKSUM_R8_1D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r8_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MASK_VAL                   Dummy  12941    R(8)            8           scalar   ARG,IN           12952,12954                       
 MOLD                       Local  12947    I(8)            8     1     1                         12953,12954,12956                 
 MPP_CHKSUM_R8_1D           Func   12941    I(8)            8           scalar   PRIV             12953,12956                       
 PELIST                     Dummy  12941    I(4)            4     1     1        ARG,IN           12953,12956                       
 PRESENT                    Func   12952                                scalar                    12952                             
 TRANSFER                   Func   12953                                scalar                    12953,12954,12956                 
 VAR                        Dummy  12941    R(8)            8     1     1        ARG,IN           12953,12956                       

Page 552         Source Listing                  MPP_CHKSUM_R8_1D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum.h

  12961 # 145 "../mpp/include/mpp_comm.inc" 2 
  12962 
  12963 
  12964 
  12965 
  12966 
  12967 
  12968 
  12969 
  12970 
  12971 # 1 "../mpp/include/mpp_chksum.h" 1 
  12972 !***********************************************************************
  12973 !*                   GNU Lesser General Public License
  12974 !*
  12975 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12976 !*
  12977 !* FMS is free software: you can redistribute it and/or modify it under
  12978 !* the terms of the GNU Lesser General Public License as published by
  12979 !* the Free Software Foundation, either version 3 of the License, or (at
  12980 !* your option) any later version.
  12981 !*
  12982 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12983 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12984 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12985 !* for more details.
  12986 !*
  12987 !* You should have received a copy of the GNU Lesser General Public
  12988 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12989 !***********************************************************************
  12990 
  12991 function mpp_chksum_r8_2d( var, pelist , mask_val)
  12992 !mold is a dummy array to be used by TRANSFER()
  12993 !must be same TYPE as result
  12994 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  12995 !optional mask_val is masked away in checksum_int.h function via PACK()
  12996   integer(i8_kind) :: mpp_chksum_r8_2d
  12997   integer(i8_kind) :: mold(1)
  12998   real(r8_kind), intent(in) :: var (:,:)
  12999   integer, intent(in), optional :: pelist(:)
  13000   real(r8_kind), intent(in),optional :: mask_val
  13001 
  13002   if ( PRESENT(mask_val) ) then
  13003      mpp_chksum_r8_2d = mpp_chksum( TRANSFER(var,mold), pelist, &
  13004           mask_val= TRANSFER(mask_val,mold(1) ) )
  13005   else
  13006       mpp_chksum_r8_2d = mpp_chksum( TRANSFER(var,mold), pelist )
  13007   end if
  13008 
  13009       return
  13010     end function mpp_chksum_r8_2d

Page 553         Source Listing                  MPP_CHKSUM_R8_2D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MASK_VAL                   Dummy  12991    R(8)            8           scalar   ARG,IN           13002,13004                       
 MOLD                       Local  12997    I(8)            8     1     1                         13003,13004,13006                 
 MPP_CHKSUM_R8_2D           Func   12991    I(8)            8           scalar   PRIV             13003,13006                       
 PELIST                     Dummy  12991    I(4)            4     1     1        ARG,IN           13003,13006                       
 PRESENT                    Func   13002                                scalar                    13002                             
 TRANSFER                   Func   13003                                scalar                    13003,13004,13006                 
 VAR                        Dummy  12991    R(8)            8     2     1        ARG,IN           13003,13006                       

Page 554         Source Listing                  MPP_CHKSUM_R8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum.h

  13011 # 155 "../mpp/include/mpp_comm.inc" 2 
  13012 
  13013 
  13014 
  13015 
  13016 
  13017 
  13018 
  13019 
  13020 
  13021 # 1 "../mpp/include/mpp_chksum.h" 1 
  13022 !***********************************************************************
  13023 !*                   GNU Lesser General Public License
  13024 !*
  13025 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13026 !*
  13027 !* FMS is free software: you can redistribute it and/or modify it under
  13028 !* the terms of the GNU Lesser General Public License as published by
  13029 !* the Free Software Foundation, either version 3 of the License, or (at
  13030 !* your option) any later version.
  13031 !*
  13032 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13033 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13034 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13035 !* for more details.
  13036 !*
  13037 !* You should have received a copy of the GNU Lesser General Public
  13038 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13039 !***********************************************************************
  13040 
  13041 function mpp_chksum_r8_3d( var, pelist , mask_val)
  13042 !mold is a dummy array to be used by TRANSFER()
  13043 !must be same TYPE as result
  13044 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  13045 !optional mask_val is masked away in checksum_int.h function via PACK()
  13046   integer(i8_kind) :: mpp_chksum_r8_3d
  13047   integer(i8_kind) :: mold(1)
  13048   real(r8_kind), intent(in) :: var (:,:,:)
  13049   integer, intent(in), optional :: pelist(:)
  13050   real(r8_kind), intent(in),optional :: mask_val
  13051 
  13052   if ( PRESENT(mask_val) ) then
  13053      mpp_chksum_r8_3d = mpp_chksum( TRANSFER(var,mold), pelist, &
  13054           mask_val= TRANSFER(mask_val,mold(1) ) )
  13055   else
  13056       mpp_chksum_r8_3d = mpp_chksum( TRANSFER(var,mold), pelist )
  13057   end if
  13058 
  13059       return
  13060     end function mpp_chksum_r8_3d

Page 555         Source Listing                  MPP_CHKSUM_R8_3D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MASK_VAL                   Dummy  13041    R(8)            8           scalar   ARG,IN           13052,13054                       
 MOLD                       Local  13047    I(8)            8     1     1                         13053,13054,13056                 
 MPP_CHKSUM_R8_3D           Func   13041    I(8)            8           scalar   PRIV             13053,13056                       
 PELIST                     Dummy  13041    I(4)            4     1     1        ARG,IN           13053,13056                       
 PRESENT                    Func   13052                                scalar                    13052                             
 TRANSFER                   Func   13053                                scalar                    13053,13054,13056                 
 VAR                        Dummy  13041    R(8)            8     3     1        ARG,IN           13053,13056                       

Page 556         Source Listing                  MPP_CHKSUM_R8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum.h

  13061 # 165 "../mpp/include/mpp_comm.inc" 2 
  13062 
  13063 
  13064 
  13065 
  13066 
  13067 
  13068 
  13069 
  13070 
  13071 # 1 "../mpp/include/mpp_chksum.h" 1 
  13072 !***********************************************************************
  13073 !*                   GNU Lesser General Public License
  13074 !*
  13075 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13076 !*
  13077 !* FMS is free software: you can redistribute it and/or modify it under
  13078 !* the terms of the GNU Lesser General Public License as published by
  13079 !* the Free Software Foundation, either version 3 of the License, or (at
  13080 !* your option) any later version.
  13081 !*
  13082 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13083 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13084 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13085 !* for more details.
  13086 !*
  13087 !* You should have received a copy of the GNU Lesser General Public
  13088 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13089 !***********************************************************************
  13090 
  13091 function mpp_chksum_r8_4d( var, pelist , mask_val)
  13092 !mold is a dummy array to be used by TRANSFER()
  13093 !must be same TYPE as result
  13094 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  13095 !optional mask_val is masked away in checksum_int.h function via PACK()
  13096   integer(i8_kind) :: mpp_chksum_r8_4d
  13097   integer(i8_kind) :: mold(1)
  13098   real(r8_kind), intent(in) :: var (:,:,:,:)
  13099   integer, intent(in), optional :: pelist(:)
  13100   real(r8_kind), intent(in),optional :: mask_val
  13101 
  13102   if ( PRESENT(mask_val) ) then
  13103      mpp_chksum_r8_4d = mpp_chksum( TRANSFER(var,mold), pelist, &
  13104           mask_val= TRANSFER(mask_val,mold(1) ) )
  13105   else
  13106       mpp_chksum_r8_4d = mpp_chksum( TRANSFER(var,mold), pelist )
  13107   end if
  13108 
  13109       return
  13110     end function mpp_chksum_r8_4d

Page 557         Source Listing                  MPP_CHKSUM_R8_4D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MASK_VAL                   Dummy  13091    R(8)            8           scalar   ARG,IN           13102,13104                       
 MOLD                       Local  13097    I(8)            8     1     1                         13103,13104,13106                 
 MPP_CHKSUM_R8_4D           Func   13091    I(8)            8           scalar   PRIV             13103,13106                       
 PELIST                     Dummy  13091    I(4)            4     1     1        ARG,IN           13103,13106                       
 PRESENT                    Func   13102                                scalar                    13102                             
 TRANSFER                   Func   13103                                scalar                    13103,13104,13106                 
 VAR                        Dummy  13091    R(8)            8     4     1        ARG,IN           13103,13106                       

Page 558         Source Listing                  MPP_CHKSUM_R8_4D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum.h

  13111 # 175 "../mpp/include/mpp_comm.inc" 2 
  13112 
  13113 
  13114 
  13115 
  13116 
  13117 
  13118 
  13119 
  13120 
  13121 # 1 "../mpp/include/mpp_chksum.h" 1 
  13122 !***********************************************************************
  13123 !*                   GNU Lesser General Public License
  13124 !*
  13125 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13126 !*
  13127 !* FMS is free software: you can redistribute it and/or modify it under
  13128 !* the terms of the GNU Lesser General Public License as published by
  13129 !* the Free Software Foundation, either version 3 of the License, or (at
  13130 !* your option) any later version.
  13131 !*
  13132 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13133 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13134 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13135 !* for more details.
  13136 !*
  13137 !* You should have received a copy of the GNU Lesser General Public
  13138 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13139 !***********************************************************************
  13140 
  13141 function mpp_chksum_r8_5d( var, pelist , mask_val)
  13142 !mold is a dummy array to be used by TRANSFER()
  13143 !must be same TYPE as result
  13144 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  13145 !optional mask_val is masked away in checksum_int.h function via PACK()
  13146   integer(i8_kind) :: mpp_chksum_r8_5d
  13147   integer(i8_kind) :: mold(1)
  13148   real(r8_kind), intent(in) :: var (:,:,:,:,:)
  13149   integer, intent(in), optional :: pelist(:)
  13150   real(r8_kind), intent(in),optional :: mask_val
  13151 
  13152   if ( PRESENT(mask_val) ) then
  13153      mpp_chksum_r8_5d = mpp_chksum( TRANSFER(var,mold), pelist, &
  13154           mask_val= TRANSFER(mask_val,mold(1) ) )
  13155   else
  13156       mpp_chksum_r8_5d = mpp_chksum( TRANSFER(var,mold), pelist )
  13157   end if
  13158 
  13159       return
  13160     end function mpp_chksum_r8_5d

Page 559         Source Listing                  MPP_CHKSUM_R8_5D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r8_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MASK_VAL                   Dummy  13141    R(8)            8           scalar   ARG,IN           13152,13154                       
 MOLD                       Local  13147    I(8)            8     1     1                         13153,13154,13156                 
 MPP_CHKSUM_R8_5D           Func   13141    I(8)            8           scalar   PRIV             13153,13156                       
 PELIST                     Dummy  13141    I(4)            4     1     1        ARG,IN           13153,13156                       
 PRESENT                    Func   13152                                scalar                    13152                             
 TRANSFER                   Func   13153                                scalar                    13153,13154,13156                 
 VAR                        Dummy  13141    R(8)            8     5     1        ARG,IN           13153,13156                       

Page 560         Source Listing                  MPP_CHKSUM_R8_5D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum.h

  13161 # 185 "../mpp/include/mpp_comm.inc" 2 
  13162 
  13163 # 246
  13164 
  13165 
  13166 
  13167 
  13168 
  13169 
  13170 
  13171 
  13172 
  13173 
  13174 # 1 "../mpp/include/mpp_chksum_scalar.h" 1 
  13175 !***********************************************************************
  13176 !*                   GNU Lesser General Public License
  13177 !*
  13178 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13179 !*
  13180 !* FMS is free software: you can redistribute it and/or modify it under
  13181 !* the terms of the GNU Lesser General Public License as published by
  13182 !* the Free Software Foundation, either version 3 of the License, or (at
  13183 !* your option) any later version.
  13184 !*
  13185 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13186 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13187 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13188 !* for more details.
  13189 !*
  13190 !* You should have received a copy of the GNU Lesser General Public
  13191 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13192 !***********************************************************************
  13193 
  13194 function mpp_chksum_r4_0d( var, pelist, mask_val )
  13195 !mold is a dummy array to be used by TRANSFER()
  13196 !must be same TYPE as result
  13197 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  13198 !mold and mask_val must be same numBytes, otherwise undefined behavior
  13199       integer(i8_kind) :: mpp_chksum_r4_0d
  13200       real(r4_kind), intent(in) :: var
  13201       integer, intent(in), optional :: pelist(:)
  13202       integer(i8_kind) :: mold(1)
  13203   real(r4_kind), intent(in), optional :: mask_val
  13204       pointer( p, mold )
  13205 
  13206       p = LOC(var)
  13207 
  13208   if ( PRESENT(mask_val) ) then
  13209      mpp_chksum_r4_0d = mpp_chksum( mold, pelist, TRANSFER(mask_val, mold(1)) )
  13210   else
  13211       mpp_chksum_r4_0d = mpp_chksum( mold, pelist )
  13212   end if
  13213       return
  13214     end function mpp_chksum_r4_0d

Page 561         Source Listing                  MPP_CHKSUM_R4_0D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum_scalar.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r4_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LOC                        Func   13206                                scalar                    13206                             
 MASK_VAL                   Dummy  13194    R(4)            4           scalar   ARG,IN           13208,13209                       
 MOLD                       Local  13202    I(8)            8     1     1                         13209,13211                       
 MPP_CHKSUM_R4_0D           Func   13194    I(8)            8           scalar   PRIV             13209,13211                       
 P                          Local  13204    I(8)            8           scalar   PTR              13206                             
 PELIST                     Dummy  13194    I(4)            4     1     1        ARG,IN           13209,13211                       
 PRESENT                    Func   13208                                scalar                    13208                             
 TRANSFER                   Func   13209                                scalar                    13209                             
 VAR                        Dummy  13194    R(4)            4           scalar   ARG,TGT,IN       13206                             

Page 562         Source Listing                  MPP_CHKSUM_R4_0D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum_scalar.h

  13215 # 257 "../mpp/include/mpp_comm.inc" 2 
  13216 
  13217 
  13218 
  13219 
  13220 
  13221 
  13222 
  13223 
  13224 
  13225 # 1 "../mpp/include/mpp_chksum.h" 1 
  13226 !***********************************************************************
  13227 !*                   GNU Lesser General Public License
  13228 !*
  13229 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13230 !*
  13231 !* FMS is free software: you can redistribute it and/or modify it under
  13232 !* the terms of the GNU Lesser General Public License as published by
  13233 !* the Free Software Foundation, either version 3 of the License, or (at
  13234 !* your option) any later version.
  13235 !*
  13236 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13237 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13238 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13239 !* for more details.
  13240 !*
  13241 !* You should have received a copy of the GNU Lesser General Public
  13242 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13243 !***********************************************************************
  13244 
  13245 function mpp_chksum_r4_1d( var, pelist , mask_val)
  13246 !mold is a dummy array to be used by TRANSFER()
  13247 !must be same TYPE as result
  13248 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  13249 !optional mask_val is masked away in checksum_int.h function via PACK()
  13250   integer(i8_kind) :: mpp_chksum_r4_1d
  13251   integer(i4_kind) :: mold(1)
  13252   real(r4_kind), intent(in) :: var (:)
  13253   integer, intent(in), optional :: pelist(:)
  13254   real(r4_kind), intent(in),optional :: mask_val
  13255 
  13256   if ( PRESENT(mask_val) ) then
  13257      mpp_chksum_r4_1d = mpp_chksum( TRANSFER(var,mold), pelist, &
  13258           mask_val= TRANSFER(mask_val,mold(1) ) )
  13259   else
  13260       mpp_chksum_r4_1d = mpp_chksum( TRANSFER(var,mold), pelist )
  13261   end if
  13262 
  13263       return
  13264     end function mpp_chksum_r4_1d

Page 563         Source Listing                  MPP_CHKSUM_R4_1D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r4_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MASK_VAL                   Dummy  13245    R(4)            4           scalar   ARG,IN           13256,13258                       
 MOLD                       Local  13251    I(4)            4     1     1                         13257,13258,13260                 
 MPP_CHKSUM_R4_1D           Func   13245    I(8)            8           scalar   PRIV             13257,13260                       
 PELIST                     Dummy  13245    I(4)            4     1     1        ARG,IN           13257,13260                       
 PRESENT                    Func   13256                                scalar                    13256                             
 TRANSFER                   Func   13257                                scalar                    13257,13258,13260                 
 VAR                        Dummy  13245    R(4)            4     1     1        ARG,IN           13257,13260                       

Page 564         Source Listing                  MPP_CHKSUM_R4_1D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum.h

  13265 # 267 "../mpp/include/mpp_comm.inc" 2 
  13266 
  13267 
  13268 
  13269 
  13270 
  13271 
  13272 
  13273 
  13274 
  13275 # 1 "../mpp/include/mpp_chksum.h" 1 
  13276 !***********************************************************************
  13277 !*                   GNU Lesser General Public License
  13278 !*
  13279 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13280 !*
  13281 !* FMS is free software: you can redistribute it and/or modify it under
  13282 !* the terms of the GNU Lesser General Public License as published by
  13283 !* the Free Software Foundation, either version 3 of the License, or (at
  13284 !* your option) any later version.
  13285 !*
  13286 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13287 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13288 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13289 !* for more details.
  13290 !*
  13291 !* You should have received a copy of the GNU Lesser General Public
  13292 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13293 !***********************************************************************
  13294 
  13295 function mpp_chksum_r4_2d( var, pelist , mask_val)
  13296 !mold is a dummy array to be used by TRANSFER()
  13297 !must be same TYPE as result
  13298 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  13299 !optional mask_val is masked away in checksum_int.h function via PACK()
  13300   integer(i8_kind) :: mpp_chksum_r4_2d
  13301   integer(i4_kind) :: mold(1)
  13302   real(r4_kind), intent(in) :: var (:,:)
  13303   integer, intent(in), optional :: pelist(:)
  13304   real(r4_kind), intent(in),optional :: mask_val
  13305 
  13306   if ( PRESENT(mask_val) ) then
  13307      mpp_chksum_r4_2d = mpp_chksum( TRANSFER(var,mold), pelist, &
  13308           mask_val= TRANSFER(mask_val,mold(1) ) )
  13309   else
  13310       mpp_chksum_r4_2d = mpp_chksum( TRANSFER(var,mold), pelist )
  13311   end if
  13312 
  13313       return
  13314     end function mpp_chksum_r4_2d

Page 565         Source Listing                  MPP_CHKSUM_R4_2D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MASK_VAL                   Dummy  13295    R(4)            4           scalar   ARG,IN           13306,13308                       
 MOLD                       Local  13301    I(4)            4     1     1                         13307,13308,13310                 
 MPP_CHKSUM_R4_2D           Func   13295    I(8)            8           scalar   PRIV             13307,13310                       
 PELIST                     Dummy  13295    I(4)            4     1     1        ARG,IN           13307,13310                       
 PRESENT                    Func   13306                                scalar                    13306                             
 TRANSFER                   Func   13307                                scalar                    13307,13308,13310                 
 VAR                        Dummy  13295    R(4)            4     2     1        ARG,IN           13307,13310                       

Page 566         Source Listing                  MPP_CHKSUM_R4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum.h

  13315 # 277 "../mpp/include/mpp_comm.inc" 2 
  13316 
  13317 
  13318 
  13319 
  13320 
  13321 
  13322 
  13323 
  13324 
  13325 # 1 "../mpp/include/mpp_chksum.h" 1 
  13326 !***********************************************************************
  13327 !*                   GNU Lesser General Public License
  13328 !*
  13329 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13330 !*
  13331 !* FMS is free software: you can redistribute it and/or modify it under
  13332 !* the terms of the GNU Lesser General Public License as published by
  13333 !* the Free Software Foundation, either version 3 of the License, or (at
  13334 !* your option) any later version.
  13335 !*
  13336 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13337 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13338 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13339 !* for more details.
  13340 !*
  13341 !* You should have received a copy of the GNU Lesser General Public
  13342 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13343 !***********************************************************************
  13344 
  13345 function mpp_chksum_r4_3d( var, pelist , mask_val)
  13346 !mold is a dummy array to be used by TRANSFER()
  13347 !must be same TYPE as result
  13348 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  13349 !optional mask_val is masked away in checksum_int.h function via PACK()
  13350   integer(i8_kind) :: mpp_chksum_r4_3d
  13351   integer(i4_kind) :: mold(1)
  13352   real(r4_kind), intent(in) :: var (:,:,:)
  13353   integer, intent(in), optional :: pelist(:)
  13354   real(r4_kind), intent(in),optional :: mask_val
  13355 
  13356   if ( PRESENT(mask_val) ) then
  13357      mpp_chksum_r4_3d = mpp_chksum( TRANSFER(var,mold), pelist, &
  13358           mask_val= TRANSFER(mask_val,mold(1) ) )
  13359   else
  13360       mpp_chksum_r4_3d = mpp_chksum( TRANSFER(var,mold), pelist )
  13361   end if
  13362 
  13363       return
  13364     end function mpp_chksum_r4_3d

Page 567         Source Listing                  MPP_CHKSUM_R4_3D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MASK_VAL                   Dummy  13345    R(4)            4           scalar   ARG,IN           13356,13358                       
 MOLD                       Local  13351    I(4)            4     1     1                         13357,13358,13360                 
 MPP_CHKSUM_R4_3D           Func   13345    I(8)            8           scalar   PRIV             13357,13360                       
 PELIST                     Dummy  13345    I(4)            4     1     1        ARG,IN           13357,13360                       
 PRESENT                    Func   13356                                scalar                    13356                             
 TRANSFER                   Func   13357                                scalar                    13357,13358,13360                 
 VAR                        Dummy  13345    R(4)            4     3     1        ARG,IN           13357,13360                       

Page 568         Source Listing                  MPP_CHKSUM_R4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum.h

  13365 # 287 "../mpp/include/mpp_comm.inc" 2 
  13366 
  13367 
  13368 
  13369 
  13370 
  13371 
  13372 
  13373 
  13374 
  13375 # 1 "../mpp/include/mpp_chksum.h" 1 
  13376 !***********************************************************************
  13377 !*                   GNU Lesser General Public License
  13378 !*
  13379 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13380 !*
  13381 !* FMS is free software: you can redistribute it and/or modify it under
  13382 !* the terms of the GNU Lesser General Public License as published by
  13383 !* the Free Software Foundation, either version 3 of the License, or (at
  13384 !* your option) any later version.
  13385 !*
  13386 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13387 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13388 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13389 !* for more details.
  13390 !*
  13391 !* You should have received a copy of the GNU Lesser General Public
  13392 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13393 !***********************************************************************
  13394 
  13395 function mpp_chksum_r4_4d( var, pelist , mask_val)
  13396 !mold is a dummy array to be used by TRANSFER()
  13397 !must be same TYPE as result
  13398 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  13399 !optional mask_val is masked away in checksum_int.h function via PACK()
  13400   integer(i8_kind) :: mpp_chksum_r4_4d
  13401   integer(i4_kind) :: mold(1)
  13402   real(r4_kind), intent(in) :: var (:,:,:,:)
  13403   integer, intent(in), optional :: pelist(:)
  13404   real(r4_kind), intent(in),optional :: mask_val
  13405 
  13406   if ( PRESENT(mask_val) ) then
  13407      mpp_chksum_r4_4d = mpp_chksum( TRANSFER(var,mold), pelist, &
  13408           mask_val= TRANSFER(mask_val,mold(1) ) )
  13409   else
  13410       mpp_chksum_r4_4d = mpp_chksum( TRANSFER(var,mold), pelist )
  13411   end if
  13412 
  13413       return
  13414     end function mpp_chksum_r4_4d

Page 569         Source Listing                  MPP_CHKSUM_R4_4D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MASK_VAL                   Dummy  13395    R(4)            4           scalar   ARG,IN           13406,13408                       
 MOLD                       Local  13401    I(4)            4     1     1                         13407,13408,13410                 
 MPP_CHKSUM_R4_4D           Func   13395    I(8)            8           scalar   PRIV             13407,13410                       
 PELIST                     Dummy  13395    I(4)            4     1     1        ARG,IN           13407,13410                       
 PRESENT                    Func   13406                                scalar                    13406                             
 TRANSFER                   Func   13407                                scalar                    13407,13408,13410                 
 VAR                        Dummy  13395    R(4)            4     4     1        ARG,IN           13407,13410                       

Page 570         Source Listing                  MPP_CHKSUM_R4_4D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum.h

  13415 # 297 "../mpp/include/mpp_comm.inc" 2 
  13416 
  13417 
  13418 
  13419 
  13420 
  13421 
  13422 
  13423 
  13424 
  13425 # 1 "../mpp/include/mpp_chksum.h" 1 
  13426 !***********************************************************************
  13427 !*                   GNU Lesser General Public License
  13428 !*
  13429 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13430 !*
  13431 !* FMS is free software: you can redistribute it and/or modify it under
  13432 !* the terms of the GNU Lesser General Public License as published by
  13433 !* the Free Software Foundation, either version 3 of the License, or (at
  13434 !* your option) any later version.
  13435 !*
  13436 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13437 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13438 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13439 !* for more details.
  13440 !*
  13441 !* You should have received a copy of the GNU Lesser General Public
  13442 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13443 !***********************************************************************
  13444 
  13445 function mpp_chksum_r4_5d( var, pelist , mask_val)
  13446 !mold is a dummy array to be used by TRANSFER()
  13447 !must be same TYPE as result
  13448 !result is i8_kind, which will actually be int ifdef no_8byte_integers
  13449 !optional mask_val is masked away in checksum_int.h function via PACK()
  13450   integer(i8_kind) :: mpp_chksum_r4_5d
  13451   integer(i4_kind) :: mold(1)
  13452   real(r4_kind), intent(in) :: var (:,:,:,:,:)
  13453   integer, intent(in), optional :: pelist(:)
  13454   real(r4_kind), intent(in),optional :: mask_val
  13455 
  13456   if ( PRESENT(mask_val) ) then
  13457      mpp_chksum_r4_5d = mpp_chksum( TRANSFER(var,mold), pelist, &
  13458           mask_val= TRANSFER(mask_val,mold(1) ) )
  13459   else
  13460       mpp_chksum_r4_5d = mpp_chksum( TRANSFER(var,mold), pelist )
  13461   end if
  13462 
  13463       return
  13464     end function mpp_chksum_r4_5d

Page 571         Source Listing                  MPP_CHKSUM_R4_5D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_chksum.h



ENTRY POINTS

  Name                                    
                                          
 mpp_mod_mp_mpp_chksum_r4_5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MASK_VAL                   Dummy  13445    R(4)            4           scalar   ARG,IN           13456,13458                       
 MOLD                       Local  13451    I(4)            4     1     1                         13457,13458,13460                 
 MPP_CHKSUM_R4_5D           Func   13445    I(8)            8           scalar   PRIV             13457,13460                       
 PELIST                     Dummy  13445    I(4)            4     1     1        ARG,IN           13457,13460                       
 PRESENT                    Func   13456                                scalar                    13456                             
 TRANSFER                   Func   13457                                scalar                    13457,13458,13460                 
 VAR                        Dummy  13445    R(4)            4     5     1        ARG,IN           13457,13460                       

Page 572         Source Listing                  MPP_CHKSUM_R4_5D
2021-06-01 08:51                                 ../mpp/include/mpp_chksum.h

  13465 # 307 "../mpp/include/mpp_comm.inc" 2 
  13466 
  13467 # 368
  13468 
  13469 
  13470 !#################################################
  13471 
  13472 
  13473 
  13474 
  13475 
  13476 
  13477 
  13478 
  13479 
  13480 
  13481 # 1 "../mpp/include/mpp_gather.h" 1 
  13482 !***********************************************************************
  13483 !*                   GNU Lesser General Public License
  13484 !*
  13485 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13486 !*
  13487 !* FMS is free software: you can redistribute it and/or modify it under
  13488 !* the terms of the GNU Lesser General Public License as published by
  13489 !* the Free Software Foundation, either version 3 of the License, or (at
  13490 !* your option) any later version.
  13491 !*
  13492 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13493 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13494 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13495 !* for more details.
  13496 !*
  13497 !* You should have received a copy of the GNU Lesser General Public
  13498 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13499 !***********************************************************************
  13500 subroutine mpp_gather_logical_1d(sbuf, rbuf,pelist)
  13501 ! JWD: Did not create mpp_gather_2d because have no requirement for it
  13502 ! JWD: See mpp_gather_2dv below
  13503    logical, dimension(:),    intent(in) :: sbuf
  13504    logical, dimension(:), intent(inout) :: rbuf
  13505    integer,   dimension(:),    intent(in), optional :: pelist(:)
  13506 
  13507    integer :: cnt, l, nproc, op_root
  13508    integer, allocatable :: pelist2(:)
  13509 
  13510 
  13511 !  If pelist is provided, the first position must be
  13512 !  the operation root
  13513    if(PRESENT(pelist))then
  13514       nproc = size(pelist)
  13515       allocate(pelist2(nproc))
  13516       pelist2 = pelist
  13517    else
  13518       nproc = mpp_npes()
  13519       allocate(pelist2(nproc))
  13520       pelist2 = (/ (l, l=root_pe, nproc-1+root_pe) /)
  13521    endif

Page 573         Source Listing                  MPP_GATHER_LOGICAL_1D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13522    op_root = pelist2(1)
  13523 
  13524    cnt = size(sbuf(:))
  13525    if(size(rbuf(:)) < cnt*nproc) call mpp_error(FATAL, &
  13526           "MPP_GATHER_1D_: size(rbuf) must be at least npes*size(sbuf) ")
  13527 
  13528 !--- pre-post receiving
  13529    if(pe == op_root) then
  13530       rbuf(1:cnt) = sbuf
  13531       do l = 2, nproc
  13532          call mpp_recv(rbuf((l-1)*cnt+1), glen=cnt, from_pe=pelist2(l), block=.FALSE., tag=COMM_TAG_1 )
  13533       enddo
  13534    else
  13535       call mpp_send(sbuf(1), plen=cnt, to_pe=op_root, tag=COMM_TAG_1)
  13536    endif
  13537 
  13538    call mpp_sync_self(check=EVENT_RECV)
  13539    call mpp_sync_self()
  13540    deallocate(pelist2)
  13541 end subroutine mpp_gather_logical_1d


ENTRY POINTS

  Name                                         
                                               
 mpp_mod_mp_mpp_gather_logical_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CNT                        Local  13507    I(4)            4           scalar                    13524,13525,13530,13532,13535     
 COMM_TAG_1                 Param  13532    I(4)            4           scalar                    179,198,13532,13535,13668,13682,13
                                                                                                  789,13792,13925,13939,14046,14049,
                                                                                                  14182,14196,14303,14306,14439,1445
                                                                                                  3,14624,14638,14803,14817,14982,14
                                                                                                  996                               
 L                          Local  13507    I(4)            4           scalar                    13531,13532                       
 MPP_GATHER_LOGICAL_1D      Subr   13500                                         PRIV                                               
 MPP_RECV                   Local  13532                                scalar                    222,13532,13574,13668,13696,13789,
                                                                                                  13831,13925,13953,14046,14088,1418
                                                                                                  2,14210,14303,14345,14439,14467,14
                                                                                                  624,14668,14803,14847,14982,15026 
 MPP_SEND                   Local  13535                                scalar                    222,13535,13580,13682,13718,13792,
                                                                                                  13837,13939,13975,14049,14094,1419
                                                                                                  6,14232,14306,14351,14453,14489,14
                                                                                                  638,14654,14817,14833,14996,15012 
 MPP_SYNC_SELF              Subr   13538                                                          213,13538,13539,13583,13584,13671,
                                                                                                  13683,13699,13719,13722,13795,1379
                                                                                                  6,13840,13841,13928,13940,13956,13
                                                                                                  976,13979,14052,14053,14097,14098,
                                                                                                  14185,14197,14213,14233,14236,1430
                                                                                                  9,14310,14354,14355,14442,14454,14
                                                                                                  470,14490,14493,14627,14639,14660,
                                                                                                  14669,14672,14806,14818,14839,1484

Page 574         Source Listing                  MPP_GATHER_LOGICAL_1D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_gather.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  8,14851,14985,14997,15018,15027,15
                                                                                                  030                               
 NPROC                      Local  13507    I(4)            4           scalar                    13514,13515,13518,13519,13520,1352
                                                                                                  5,13531                           
 OP_ROOT                    Local  13507    I(4)            4           scalar                    13522,13529,13535                 
 PELIST                     Dummy  13500    I(4)            4     1     1        ARG,IN           13513,13514,13516                 
 PELIST2                    Local  13508    I(4)            4     1     1        ALC              13515,13516,13519,13520,13522,1353
                                                                                                  2,13540                           
 PRESENT                    Func   13513                                scalar                    13513                             
 RBUF                       Dummy  13500    L(4)            4     1     1        ARG,INOUT        13525,13530,13532                 
 SBUF                       Dummy  13500    L(4)            4     1     1        ARG,IN           13524,13530,13535                 
 SIZE                       Func   13514                                scalar                    13514,13524,13525                 

Page 575         Source Listing                  MPP_GATHER_LOGICAL_1D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13542 
  13543 subroutine mpp_gather_logical_1dv(sbuf, ssize, rbuf, rsize, pelist)
  13544    logical, dimension(:),    intent(in) :: sbuf
  13545    logical, dimension(:), intent(inout) :: rbuf
  13546    integer,                    intent(in) :: ssize
  13547    integer,   dimension(:),    intent(in) :: rsize
  13548    integer,   dimension(:),    intent(in), optional :: pelist(:)
  13549 
  13550    integer :: cnt, l, nproc, pos, op_root
  13551    integer, allocatable :: pelist2(:)
  13552 
  13553 !  If pelist is provided, the first position must be
  13554 !  the operation root
  13555    if(PRESENT(pelist))then
  13556       nproc = size(pelist)
  13557       allocate(pelist2(nproc))
  13558       pelist2 = pelist
  13559    else
  13560       nproc = mpp_npes()
  13561       allocate(pelist2(nproc))
  13562       pelist2 = (/ (l, l=0+root_pe, nproc-1+root_pe) /)
  13563    endif
  13564    op_root = pelist2(1)
  13565 
  13566 
  13567 !--- pre-post receiving
  13568    if (pe .eq. op_root) then
  13569        pos = 1
  13570        do l = 1,nproc   ! include op_root to simplify logic
  13571            if (rsize(l) == 0) then
  13572                cycle  ! avoid ranks with no data
  13573            endif
  13574            call mpp_recv(rbuf(pos),glen=rsize(l),from_pe=pelist2(l), &
  13575                          block=.FALSE.,tag=COMM_TAG_2)
  13576            pos = pos + rsize(l)
  13577        enddo
  13578    endif
  13579    if (ssize .gt. 0) then
  13580        call mpp_send(sbuf(1),plen=ssize,to_pe=op_root,tag=COMM_TAG_2) !avoid ranks with no data
  13581    endif
  13582 
  13583    call mpp_sync_self(check=EVENT_RECV)
  13584    call mpp_sync_self()
  13585    deallocate(pelist2)
  13586 end subroutine mpp_gather_logical_1dv

Page 576         Source Listing                  MPP_GATHER_LOGICAL_1DV
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_gather.h



ENTRY POINTS

  Name                                          
                                                
 mpp_mod_mp_mpp_gather_logical_1dv_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CNT                        Local  13550    I(4)            4           scalar                                                      
 COMM_TAG_2                 Param  13575    I(4)            4           scalar                    179,198,13575,13580,13696,13718,13
                                                                                                  832,13837,13953,13975,14089,14094,
                                                                                                  14210,14232,14346,14351,14467,1448
                                                                                                  9,14654,14668,14833,14847,15012,15
                                                                                                  026                               
 L                          Local  13550    I(4)            4           scalar                    13570,13571,13574,13576           
 MPP_GATHER_LOGICAL_1DV     Subr   13543                                         PRIV                                               
 NPROC                      Local  13550    I(4)            4           scalar                    13556,13557,13560,13561,13562,1357
                                                                                                  0                                 
 OP_ROOT                    Local  13550    I(4)            4           scalar                    13564,13568,13580                 
 PELIST                     Dummy  13543    I(4)            4     1     1        ARG,IN           13555,13556,13558                 
 PELIST2                    Local  13551    I(4)            4     1     1        ALC              13557,13558,13561,13562,13564,1357
                                                                                                  4,13585                           
 POS                        Local  13550    I(4)            4           scalar                    13569,13574,13576                 
 PRESENT                    Func   13555                                scalar                    13555                             
 RBUF                       Dummy  13543    L(4)            4     1     1        ARG,INOUT        13574                             
 RSIZE                      Dummy  13543    I(4)            4     1     1        ARG,IN           13571,13574,13576                 
 SBUF                       Dummy  13543    L(4)            4     1     1        ARG,IN           13580                             
 SIZE                       Func   13556                                scalar                    13556                             
 SSIZE                      Dummy  13543    I(4)            4           scalar   ARG,IN           13579,13580                       

Page 577         Source Listing                  MPP_GATHER_LOGICAL_1DV
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13587 
  13588 
  13589 subroutine mpp_gather_pelist_logical_2d(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
  13590                                  ishift, jshift)
  13591    integer,                           intent(in)    :: is, ie, js, je
  13592    integer,   dimension(:),           intent(in)    :: pelist
  13593    logical, dimension(is:ie,js:je), intent(in)    :: array_seg
  13594    logical, dimension(:,:),         intent(inout) :: data
  13595    logical,                           intent(in)    :: is_root_pe
  13596    integer,   optional,               intent(in)    :: ishift, jshift
  13597 
  13598    logical ::  arr3D(size(array_seg,1),size(array_seg,2),1)
  13599    logical :: data3D(size(     data,1),size(     data,2),1)
  13600    pointer( aptr,  arr3D )
  13601    pointer( dptr, data3D )
  13602    aptr = LOC(array_seg)
  13603    dptr = LOC(     data)
  13604 
  13605    call mpp_gather(is, ie, js, je, 1, pelist, arr3D, data3D, is_root_pe, &
  13606                    ishift, jshift)
  13607    return
  13608 
  13609 end subroutine mpp_gather_pelist_logical_2d


ENTRY POINTS

  Name                                                
                                                      
 mpp_mod_mp_mpp_gather_pelist_logical_2d_             

Page 578         Source Listing                  MPP_GATHER_PELIST_LOGICAL_2D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_gather.h



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 APTR                       Local  13600    I(8)            8           scalar   PTR              13602                             
 ARR3D                      Local  13598    L(4)            4     3     0                         13605                             
 ARRAY_SEG                  Dummy  13589    L(4)            4     2     0        ARG,IN           13598,13602                       
 DATA                       Dummy  13589    L(4)            4     2     1        ARG,INOUT        13599,13603                       
 DATA3D                     Local  13599    L(4)            4     3     0                         13605                             
 DPTR                       Local  13601    I(8)            8           scalar   PTR              13603                             
 IE                         Dummy  13589    I(4)            4           scalar   ARG,IN           13593,13605                       
 IS                         Dummy  13589    I(4)            4           scalar   ARG,IN           13593,13605                       
 ISHIFT                     Dummy  13590    I(4)            4           scalar   ARG,IN           13606                             
 IS_ROOT_PE                 Dummy  13589    L(4)            4           scalar   ARG,IN           13605                             
 JE                         Dummy  13589    I(4)            4           scalar   ARG,IN           13593,13605                       
 JS                         Dummy  13589    I(4)            4           scalar   ARG,IN           13593,13605                       
 JSHIFT                     Dummy  13590    I(4)            4           scalar   ARG,IN           13606                             
 LOC                        Func   13602                                scalar                    13602,13603                       
 MPP_GATHER                 Local  13605                                scalar                    225,13605,13862,14119,14376       
 MPP_GATHER_PELIST_LOGICAL_                                                                                                         
 2D                         Subr   13589                                         PRIV                                               
 PELIST                     Dummy  13589    I(4)            4     1     1        ARG,IN           13605                             
 SIZE                       Func   13598                                scalar                    13598,13599                       

Page 579         Source Listing                  MPP_GATHER_PELIST_LOGICAL_2D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13610 
  13611 
  13612 subroutine mpp_gather_pelist_logical_3d(is, ie, js, je, nk, pelist, array_seg, data, is_root_pe, &
  13613                                  ishift, jshift)
  13614    integer,                                intent(in)    :: is, ie, js, je, nk
  13615    integer,   dimension(:),                intent(in)    :: pelist
  13616    logical, dimension(is:ie,js:je,1:nk), intent(in)    :: array_seg
  13617    logical, dimension(:,:,:),            intent(inout) :: data
  13618    logical,                                intent(in)    :: is_root_pe
  13619    integer,   optional,                    intent(in)    :: ishift, jshift
  13620 
  13621    integer :: i, msgsize, root_pe, root_pe_test
  13622    integer :: i1, i2, j1, j2, ioff, joff
  13623    integer :: my_ind(4), gind(4,size(pelist))
  13624    type array3D
  13625      logical, dimension(:,:,:), allocatable :: data
  13626    endtype array3D
  13627    type(array3d), dimension(:), allocatable :: temp
  13628 
  13629    if (.not.ANY(mpp_pe().eq.pelist(:))) return
  13630 
  13631    if (is_root_pe) then
  13632      root_pe = mpp_pe()
  13633      root_pe_test = 999
  13634      if (.not.ANY(pelist(:).eq.root_pe)) call mpp_error(FATAL, &
  13635                 "fms_io(mpp_gather_pelist): root_pe not a member of pelist")
  13636    else
  13637      root_pe = 0
  13638      root_pe_test = -999
  13639    endif
  13640 ! need this check in case MPI-rank 0 is a member of the pelist
  13641    call mpp_max(root_pe_test, pelist)
  13642    if (root_pe_test.lt.0) call mpp_error(FATAL, &
  13643                 "fms_io(mpp_gather_pelist): root_pe not specified or not a member of the pelist")
  13644 ! need to make sure only one root_pe has been specified
  13645    call mpp_sum(root_pe, pelist)
  13646    if ((is_root_pe) .and. (mpp_pe().ne.root_pe)) call mpp_error(FATAL, &
  13647                 "fms_io(mpp_gather_pelist): too many root_pes specified")
  13648 
  13649 
  13650    ioff=0
  13651    joff=0
  13652    if (present(ishift)) ioff=ishift
  13653    if (present(jshift)) joff=jshift
  13654 
  13655    my_ind(1) = is
  13656    my_ind(2) = ie
  13657    my_ind(3) = js
  13658    my_ind(4) = je
  13659 
  13660 ! gather indices into global index on root_pe
  13661    if (is_root_pe) then
  13662      allocate(temp(1:size(pelist)))
  13663      do i = 1, size(pelist)
  13664 ! root_pe data copy - no send to self
  13665        if (pelist(i).eq.root_pe) then
  13666          gind(:,i) = my_ind(:)

Page 580         Source Listing                  MPP_GATHER_PELIST_LOGICAL_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13667        else
  13668          call mpp_recv(gind(:,i:i), 4, pelist(i), .FALSE., COMM_TAG_1)
  13669        endif
  13670      enddo
  13671      call mpp_sync_self(check=EVENT_RECV)
  13672      gind(1,:)=gind(1,:)+ioff
  13673      gind(2,:)=gind(2,:)+ioff
  13674      gind(3,:)=gind(3,:)+joff
  13675      gind(4,:)=gind(4,:)+joff
  13676 ! check indices to make sure they are within the range of "data"
  13677      if ((minval(gind).lt.1) .OR. (maxval(gind(1:2,:)).gt.size(data,1)) .OR. (maxval(gind(3:4,:)).gt.size(data,2))) &
  13678          call mpp_error(FATAL,"fms_io(mpp_gather_pelist): specified indices (with shift) are outside of the &
  13679                         &range of the receiving array")
  13680    else
  13681 ! non root_pe's send indices to root_pe
  13682      call mpp_send(my_ind(:), 4, root_pe, COMM_TAG_1)
  13683      call mpp_sync_self(check=EVENT_SEND)
  13684    endif
  13685 
  13686 !  gather segments into data based on indices
  13687    if (is_root_pe) then
  13688      do i = 1, size(pelist)
  13689        if (pelist(i).ne.root_pe) then    ! no send to self
  13690          i1 = gind(1,i)
  13691          i2 = gind(2,i)
  13692          j1 = gind(3,i)
  13693          j2 = gind(4,i)
  13694          msgsize = (i2-i1+1)*(j2-j1+1)*nk
  13695          allocate(temp(i)%data(i1:i2,j1:j2,1:nk))
  13696          call mpp_recv(temp(i)%data(i1:i2,j1:j2,1:nk), msgsize, pelist(i), .FALSE., COMM_TAG_2)
  13697        endif
  13698      enddo
  13699      call mpp_sync_self(check=EVENT_RECV)
  13700 !  unbuffer/copy the data into the return array
  13701      do i = 1, size(pelist)
  13702        if (pelist(i).eq.root_pe) then
  13703 !        data copy - no send to self
  13704          data(is+ioff:ie+ioff,js+joff:je+joff,1:nk) = array_seg(is:ie,js:je,1:nk)
  13705        else
  13706          i1 = gind(1,i)
  13707          i2 = gind(2,i)
  13708          j1 = gind(3,i)
  13709          j2 = gind(4,i)
  13710          data(i1:i2,j1:j2,1:nk)=temp(i)%data(i1:i2,j1:j2,1:nk)
  13711          deallocate(temp(i)%data)
  13712        endif
  13713      enddo
  13714      deallocate(temp)
  13715    else
  13716 !    non root_pe's send data to root_pe
  13717      msgsize = (my_ind(2)-my_ind(1)+1) * (my_ind(4)-my_ind(3)+1) * nk
  13718      call mpp_send(array_seg, msgsize, root_pe, COMM_TAG_2)
  13719      call mpp_sync_self(check=EVENT_SEND)
  13720    endif
  13721 
  13722    call mpp_sync_self()
  13723    return

Page 581         Source Listing                  MPP_GATHER_PELIST_LOGICAL_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13724 
  13725 end subroutine mpp_gather_pelist_logical_3d


ENTRY POINTS

  Name                                                
                                                      
 mpp_mod_mp_mpp_gather_pelist_logical_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   13629                                scalar                    13629,13634                       
 ARRAY3D                    Type   13624                    120         scalar   PRIV             13626,13627                       
 ARRAY_SEG                  Dummy  13612    L(4)            4     3     0        ARG,IN           13704,13718                       
 DATA                       Dummy  13612    L(4)            4     3     1        ARG,INOUT        13677,13704,13710                 
 GIND                       Local  13623    I(4)            4     2     0                         13666,13668,13672,13673,13674,1367
                                                                                                  5,13677,13690,13691,13692,13693,13
                                                                                                  706,13707,13708,13709             
 I                          Local  13621    I(4)            4           scalar                    13663,13665,13666,13668,13688,1368
                                                                                                  9,13690,13691,13692,13693,13695,13
                                                                                                  696,13701,13702,13706,13707,13708,
                                                                                                  13709,13710,13711                 
 I1                         Local  13622    I(4)            4           scalar                    13690,13694,13695,13696,13706,1371
                                                                                                  0                                 
 I2                         Local  13622    I(4)            4           scalar                    13691,13694,13695,13696,13707,1371
                                                                                                  0                                 
 IE                         Dummy  13612    I(4)            4           scalar   ARG,IN           13616,13656,13704                 
 IOFF                       Local  13622    I(4)            4           scalar                    13650,13652,13672,13673,13704     
 IS                         Dummy  13612    I(4)            4           scalar   ARG,IN           13616,13655,13704                 
 ISHIFT                     Dummy  13613    I(4)            4           scalar   ARG,IN           13652                             
 IS_ROOT_PE                 Dummy  13612    L(4)            4           scalar   ARG,IN           13631,13646,13661,13687           
 J1                         Local  13622    I(4)            4           scalar                    13692,13694,13695,13696,13708,1371
                                                                                                  0                                 
 J2                         Local  13622    I(4)            4           scalar                    13693,13694,13695,13696,13709,1371
                                                                                                  0                                 
 JE                         Dummy  13612    I(4)            4           scalar   ARG,IN           13616,13658,13704                 
 JOFF                       Local  13622    I(4)            4           scalar                    13651,13653,13674,13675,13704     
 JS                         Dummy  13612    I(4)            4           scalar   ARG,IN           13616,13657,13704                 
 JSHIFT                     Dummy  13613    I(4)            4           scalar   ARG,IN           13653                             
 MAXVAL                     Func   13677                                scalar                    13677                             
 MINVAL                     Func   13677                                scalar                    13677                             
 MPP_GATHER_PELIST_LOGICAL_                                                                                                         
 3D                         Subr   13612                                         PRIV             13605                             
 MSGSIZE                    Local  13621    I(4)            4           scalar                    13694,13696,13717,13718           
 MY_IND                     Local  13623    I(4)            4     1     4                         13655,13656,13657,13658,13666,1368
                                                                                                  2,13717                           
 NK                         Dummy  13612    I(4)            4           scalar   ARG,IN           13616,13694,13695,13696,13704,1371
                                                                                                  0,13717                           
 PELIST                     Dummy  13612    I(4)            4     1     1        ARG,IN           13623,13629,13634,13641,13645,1366
                                                                                                  2,13663,13665,13668,13688,13689,13
                                                                                                  696,13701,13702                   
 PRESENT                    Func   13652                                scalar                    13652,13653                       
 ROOT_PE                    Local  13621    I(4)            4           scalar                    13632,13634,13637,13645,13646,1366

Page 582         Source Listing                  MPP_GATHER_PELIST_LOGICAL_3D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_gather.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5,13682,13689,13702,13718         
 ROOT_PE_TEST               Local  13621    I(4)            4           scalar                    13633,13638,13641,13642           
 SIZE                       Func   13623                                scalar                    13623,13662,13663,13677,13688,1370
                                                                                                  1                                 
 TEMP                       Local  13627    RECORD          120   1     1        ALC              13662,13695,13696,13710,13711,1371
                                                                                                  4                                 


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ARRAY3D.DATA               L(4)            4     0        3     1        ALC              13695,13696,13710,13711            

Page 583         Source Listing                  MPP_GATHER_PELIST_LOGICAL_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13726 # 382 "../mpp/include/mpp_comm.inc" 2 
  13727 
  13728 
  13729 
  13730 
  13731 
  13732 
  13733 
  13734 
  13735 
  13736 
  13737 
  13738 # 1 "../mpp/include/mpp_gather.h" 1 
  13739 !***********************************************************************
  13740 !*                   GNU Lesser General Public License
  13741 !*
  13742 !* This file is part of the GFDL Flexible Modeling System (FMS).
  13743 !*
  13744 !* FMS is free software: you can redistribute it and/or modify it under
  13745 !* the terms of the GNU Lesser General Public License as published by
  13746 !* the Free Software Foundation, either version 3 of the License, or (at
  13747 !* your option) any later version.
  13748 !*
  13749 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  13750 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  13751 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  13752 !* for more details.
  13753 !*
  13754 !* You should have received a copy of the GNU Lesser General Public
  13755 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  13756 !***********************************************************************
  13757 subroutine mpp_gather_int4_1d(sbuf, rbuf,pelist)
  13758 ! JWD: Did not create mpp_gather_2d because have no requirement for it
  13759 ! JWD: See mpp_gather_2dv below
  13760    integer(i4_kind), dimension(:),    intent(in) :: sbuf
  13761    integer(i4_kind), dimension(:), intent(inout) :: rbuf
  13762    integer,   dimension(:),    intent(in), optional :: pelist(:)
  13763 
  13764    integer :: cnt, l, nproc, op_root
  13765    integer, allocatable :: pelist2(:)
  13766 
  13767 
  13768 !  If pelist is provided, the first position must be
  13769 !  the operation root
  13770    if(PRESENT(pelist))then
  13771       nproc = size(pelist)
  13772       allocate(pelist2(nproc))
  13773       pelist2 = pelist
  13774    else
  13775       nproc = mpp_npes()
  13776       allocate(pelist2(nproc))
  13777       pelist2 = (/ (l, l=root_pe, nproc-1+root_pe) /)
  13778    endif
  13779    op_root = pelist2(1)
  13780 
  13781    cnt = size(sbuf(:))
  13782    if(size(rbuf(:)) < cnt*nproc) call mpp_error(FATAL, &

Page 584         Source Listing                  MPP_GATHER_INT4_1D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13783           "MPP_GATHER_1D_: size(rbuf) must be at least npes*size(sbuf) ")
  13784 
  13785 !--- pre-post receiving
  13786    if(pe == op_root) then
  13787       rbuf(1:cnt) = sbuf
  13788       do l = 2, nproc
  13789          call mpp_recv(rbuf((l-1)*cnt+1), glen=cnt, from_pe=pelist2(l), block=.FALSE., tag=COMM_TAG_1 )
  13790       enddo
  13791    else
  13792       call mpp_send(sbuf(1), plen=cnt, to_pe=op_root, tag=COMM_TAG_1)
  13793    endif
  13794 
  13795    call mpp_sync_self(check=EVENT_RECV)
  13796    call mpp_sync_self()
  13797    deallocate(pelist2)
  13798 end subroutine mpp_gather_int4_1d


ENTRY POINTS

  Name                                      
                                            
 mpp_mod_mp_mpp_gather_int4_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CNT                        Local  13764    I(4)            4           scalar                    13781,13782,13787,13789,13792     
 L                          Local  13764    I(4)            4           scalar                    13788,13789                       
 MPP_GATHER_INT4_1D         Subr   13757                                         PRIV                                               
 NPROC                      Local  13764    I(4)            4           scalar                    13771,13772,13775,13776,13777,1378
                                                                                                  2,13788                           
 OP_ROOT                    Local  13764    I(4)            4           scalar                    13779,13786,13792                 
 PELIST                     Dummy  13757    I(4)            4     1     1        ARG,IN           13770,13771,13773                 
 PELIST2                    Local  13765    I(4)            4     1     1        ALC              13772,13773,13776,13777,13779,1378
                                                                                                  9,13797                           
 PRESENT                    Func   13770                                scalar                    13770                             
 RBUF                       Dummy  13757    I(4)            4     1     1        ARG,INOUT        13782,13787,13789                 
 SBUF                       Dummy  13757    I(4)            4     1     1        ARG,IN           13781,13787,13792                 
 SIZE                       Func   13771                                scalar                    13771,13781,13782                 

Page 585         Source Listing                  MPP_GATHER_INT4_1D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13799 
  13800 subroutine mpp_gather_int4_1dv(sbuf, ssize, rbuf, rsize, pelist)
  13801    integer(i4_kind), dimension(:),    intent(in) :: sbuf
  13802    integer(i4_kind), dimension(:), intent(inout) :: rbuf
  13803    integer,                    intent(in) :: ssize
  13804    integer,   dimension(:),    intent(in) :: rsize
  13805    integer,   dimension(:),    intent(in), optional :: pelist(:)
  13806 
  13807    integer :: cnt, l, nproc, pos, op_root
  13808    integer, allocatable :: pelist2(:)
  13809 
  13810 !  If pelist is provided, the first position must be
  13811 !  the operation root
  13812    if(PRESENT(pelist))then
  13813       nproc = size(pelist)
  13814       allocate(pelist2(nproc))
  13815       pelist2 = pelist
  13816    else
  13817       nproc = mpp_npes()
  13818       allocate(pelist2(nproc))
  13819       pelist2 = (/ (l, l=0+root_pe, nproc-1+root_pe) /)
  13820    endif
  13821    op_root = pelist2(1)
  13822 
  13823 
  13824 !--- pre-post receiving
  13825    if (pe .eq. op_root) then
  13826        pos = 1
  13827        do l = 1,nproc   ! include op_root to simplify logic
  13828            if (rsize(l) == 0) then
  13829                cycle  ! avoid ranks with no data
  13830            endif
  13831            call mpp_recv(rbuf(pos),glen=rsize(l),from_pe=pelist2(l), &
  13832                          block=.FALSE.,tag=COMM_TAG_2)
  13833            pos = pos + rsize(l)
  13834        enddo
  13835    endif
  13836    if (ssize .gt. 0) then
  13837        call mpp_send(sbuf(1),plen=ssize,to_pe=op_root,tag=COMM_TAG_2) !avoid ranks with no data
  13838    endif
  13839 
  13840    call mpp_sync_self(check=EVENT_RECV)
  13841    call mpp_sync_self()
  13842    deallocate(pelist2)
  13843 end subroutine mpp_gather_int4_1dv

Page 586         Source Listing                  MPP_GATHER_INT4_1DV
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_gather.h



ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_gather_int4_1dv_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CNT                        Local  13807    I(4)            4           scalar                                                      
 L                          Local  13807    I(4)            4           scalar                    13827,13828,13831,13833           
 MPP_GATHER_INT4_1DV        Subr   13800                                         PRIV                                               
 NPROC                      Local  13807    I(4)            4           scalar                    13813,13814,13817,13818,13819,1382
                                                                                                  7                                 
 OP_ROOT                    Local  13807    I(4)            4           scalar                    13821,13825,13837                 
 PELIST                     Dummy  13800    I(4)            4     1     1        ARG,IN           13812,13813,13815                 
 PELIST2                    Local  13808    I(4)            4     1     1        ALC              13814,13815,13818,13819,13821,1383
                                                                                                  1,13842                           
 POS                        Local  13807    I(4)            4           scalar                    13826,13831,13833                 
 PRESENT                    Func   13812                                scalar                    13812                             
 RBUF                       Dummy  13800    I(4)            4     1     1        ARG,INOUT        13831                             
 RSIZE                      Dummy  13800    I(4)            4     1     1        ARG,IN           13828,13831,13833                 
 SBUF                       Dummy  13800    I(4)            4     1     1        ARG,IN           13837                             
 SIZE                       Func   13813                                scalar                    13813                             
 SSIZE                      Dummy  13800    I(4)            4           scalar   ARG,IN           13836,13837                       

Page 587         Source Listing                  MPP_GATHER_INT4_1DV
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13844 
  13845 
  13846 subroutine mpp_gather_pelist_int4_2d(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
  13847                                  ishift, jshift)
  13848    integer,                           intent(in)    :: is, ie, js, je
  13849    integer,   dimension(:),           intent(in)    :: pelist
  13850    integer(i4_kind), dimension(is:ie,js:je), intent(in)    :: array_seg
  13851    integer(i4_kind), dimension(:,:),         intent(inout) :: data
  13852    logical,                           intent(in)    :: is_root_pe
  13853    integer,   optional,               intent(in)    :: ishift, jshift
  13854 
  13855    integer(i4_kind) ::  arr3D(size(array_seg,1),size(array_seg,2),1)
  13856    integer(i4_kind) :: data3D(size(     data,1),size(     data,2),1)
  13857    pointer( aptr,  arr3D )
  13858    pointer( dptr, data3D )
  13859    aptr = LOC(array_seg)
  13860    dptr = LOC(     data)
  13861 
  13862    call mpp_gather(is, ie, js, je, 1, pelist, arr3D, data3D, is_root_pe, &
  13863                    ishift, jshift)
  13864    return
  13865 
  13866 end subroutine mpp_gather_pelist_int4_2d


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_gather_pelist_int4_2d_             

Page 588         Source Listing                  MPP_GATHER_PELIST_INT4_2D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_gather.h



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 APTR                       Local  13857    I(8)            8           scalar   PTR              13859                             
 ARR3D                      Local  13855    I(4)            4     3     0                         13862                             
 ARRAY_SEG                  Dummy  13846    I(4)            4     2     0        ARG,IN           13855,13859                       
 DATA                       Dummy  13846    I(4)            4     2     1        ARG,INOUT        13856,13860                       
 DATA3D                     Local  13856    I(4)            4     3     0                         13862                             
 DPTR                       Local  13858    I(8)            8           scalar   PTR              13860                             
 IE                         Dummy  13846    I(4)            4           scalar   ARG,IN           13850,13862                       
 IS                         Dummy  13846    I(4)            4           scalar   ARG,IN           13850,13862                       
 ISHIFT                     Dummy  13847    I(4)            4           scalar   ARG,IN           13863                             
 IS_ROOT_PE                 Dummy  13846    L(4)            4           scalar   ARG,IN           13862                             
 JE                         Dummy  13846    I(4)            4           scalar   ARG,IN           13850,13862                       
 JS                         Dummy  13846    I(4)            4           scalar   ARG,IN           13850,13862                       
 JSHIFT                     Dummy  13847    I(4)            4           scalar   ARG,IN           13863                             
 LOC                        Func   13859                                scalar                    13859,13860                       
 MPP_GATHER_PELIST_INT4_2D  Subr   13846                                         PRIV                                               
 PELIST                     Dummy  13846    I(4)            4     1     1        ARG,IN           13862                             
 SIZE                       Func   13855                                scalar                    13855,13856                       

Page 589         Source Listing                  MPP_GATHER_PELIST_INT4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13867 
  13868 
  13869 subroutine mpp_gather_pelist_int4_3d(is, ie, js, je, nk, pelist, array_seg, data, is_root_pe, &
  13870                                  ishift, jshift)
  13871    integer,                                intent(in)    :: is, ie, js, je, nk
  13872    integer,   dimension(:),                intent(in)    :: pelist
  13873    integer(i4_kind), dimension(is:ie,js:je,1:nk), intent(in)    :: array_seg
  13874    integer(i4_kind), dimension(:,:,:),            intent(inout) :: data
  13875    logical,                                intent(in)    :: is_root_pe
  13876    integer,   optional,                    intent(in)    :: ishift, jshift
  13877 
  13878    integer :: i, msgsize, root_pe, root_pe_test
  13879    integer :: i1, i2, j1, j2, ioff, joff
  13880    integer :: my_ind(4), gind(4,size(pelist))
  13881    type array3D
  13882      integer(i4_kind), dimension(:,:,:), allocatable :: data
  13883    endtype array3D
  13884    type(array3d), dimension(:), allocatable :: temp
  13885 
  13886    if (.not.ANY(mpp_pe().eq.pelist(:))) return
  13887 
  13888    if (is_root_pe) then
  13889      root_pe = mpp_pe()
  13890      root_pe_test = 999
  13891      if (.not.ANY(pelist(:).eq.root_pe)) call mpp_error(FATAL, &
  13892                 "fms_io(mpp_gather_pelist): root_pe not a member of pelist")
  13893    else
  13894      root_pe = 0
  13895      root_pe_test = -999
  13896    endif
  13897 ! need this check in case MPI-rank 0 is a member of the pelist
  13898    call mpp_max(root_pe_test, pelist)
  13899    if (root_pe_test.lt.0) call mpp_error(FATAL, &
  13900                 "fms_io(mpp_gather_pelist): root_pe not specified or not a member of the pelist")
  13901 ! need to make sure only one root_pe has been specified
  13902    call mpp_sum(root_pe, pelist)
  13903    if ((is_root_pe) .and. (mpp_pe().ne.root_pe)) call mpp_error(FATAL, &
  13904                 "fms_io(mpp_gather_pelist): too many root_pes specified")
  13905 
  13906 
  13907    ioff=0
  13908    joff=0
  13909    if (present(ishift)) ioff=ishift
  13910    if (present(jshift)) joff=jshift
  13911 
  13912    my_ind(1) = is
  13913    my_ind(2) = ie
  13914    my_ind(3) = js
  13915    my_ind(4) = je
  13916 
  13917 ! gather indices into global index on root_pe
  13918    if (is_root_pe) then
  13919      allocate(temp(1:size(pelist)))
  13920      do i = 1, size(pelist)
  13921 ! root_pe data copy - no send to self
  13922        if (pelist(i).eq.root_pe) then
  13923          gind(:,i) = my_ind(:)

Page 590         Source Listing                  MPP_GATHER_PELIST_INT4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13924        else
  13925          call mpp_recv(gind(:,i:i), 4, pelist(i), .FALSE., COMM_TAG_1)
  13926        endif
  13927      enddo
  13928      call mpp_sync_self(check=EVENT_RECV)
  13929      gind(1,:)=gind(1,:)+ioff
  13930      gind(2,:)=gind(2,:)+ioff
  13931      gind(3,:)=gind(3,:)+joff
  13932      gind(4,:)=gind(4,:)+joff
  13933 ! check indices to make sure they are within the range of "data"
  13934      if ((minval(gind).lt.1) .OR. (maxval(gind(1:2,:)).gt.size(data,1)) .OR. (maxval(gind(3:4,:)).gt.size(data,2))) &
  13935          call mpp_error(FATAL,"fms_io(mpp_gather_pelist): specified indices (with shift) are outside of the &
  13936                         &range of the receiving array")
  13937    else
  13938 ! non root_pe's send indices to root_pe
  13939      call mpp_send(my_ind(:), 4, root_pe, COMM_TAG_1)
  13940      call mpp_sync_self(check=EVENT_SEND)
  13941    endif
  13942 
  13943 !  gather segments into data based on indices
  13944    if (is_root_pe) then
  13945      do i = 1, size(pelist)
  13946        if (pelist(i).ne.root_pe) then    ! no send to self
  13947          i1 = gind(1,i)
  13948          i2 = gind(2,i)
  13949          j1 = gind(3,i)
  13950          j2 = gind(4,i)
  13951          msgsize = (i2-i1+1)*(j2-j1+1)*nk
  13952          allocate(temp(i)%data(i1:i2,j1:j2,1:nk))
  13953          call mpp_recv(temp(i)%data(i1:i2,j1:j2,1:nk), msgsize, pelist(i), .FALSE., COMM_TAG_2)
  13954        endif
  13955      enddo
  13956      call mpp_sync_self(check=EVENT_RECV)
  13957 !  unbuffer/copy the data into the return array
  13958      do i = 1, size(pelist)
  13959        if (pelist(i).eq.root_pe) then
  13960 !        data copy - no send to self
  13961          data(is+ioff:ie+ioff,js+joff:je+joff,1:nk) = array_seg(is:ie,js:je,1:nk)
  13962        else
  13963          i1 = gind(1,i)
  13964          i2 = gind(2,i)
  13965          j1 = gind(3,i)
  13966          j2 = gind(4,i)
  13967          data(i1:i2,j1:j2,1:nk)=temp(i)%data(i1:i2,j1:j2,1:nk)
  13968          deallocate(temp(i)%data)
  13969        endif
  13970      enddo
  13971      deallocate(temp)
  13972    else
  13973 !    non root_pe's send data to root_pe
  13974      msgsize = (my_ind(2)-my_ind(1)+1) * (my_ind(4)-my_ind(3)+1) * nk
  13975      call mpp_send(array_seg, msgsize, root_pe, COMM_TAG_2)
  13976      call mpp_sync_self(check=EVENT_SEND)
  13977    endif
  13978 
  13979    call mpp_sync_self()
  13980    return

Page 591         Source Listing                  MPP_GATHER_PELIST_INT4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13981 
  13982 end subroutine mpp_gather_pelist_int4_3d


ENTRY POINTS

  Name                                             
                                                   
 mpp_mod_mp_mpp_gather_pelist_int4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   13886                                scalar                    13886,13891                       
 ARRAY3D                    Type   13881                    120         scalar   PRIV             13883,13884                       
 ARRAY_SEG                  Dummy  13869    I(4)            4     3     0        ARG,IN           13961,13975                       
 DATA                       Dummy  13869    I(4)            4     3     1        ARG,INOUT        13934,13961,13967                 
 GIND                       Local  13880    I(4)            4     2     0                         13923,13925,13929,13930,13931,1393
                                                                                                  2,13934,13947,13948,13949,13950,13
                                                                                                  963,13964,13965,13966             
 I                          Local  13878    I(4)            4           scalar                    13920,13922,13923,13925,13945,1394
                                                                                                  6,13947,13948,13949,13950,13952,13
                                                                                                  953,13958,13959,13963,13964,13965,
                                                                                                  13966,13967,13968                 
 I1                         Local  13879    I(4)            4           scalar                    13947,13951,13952,13953,13963,1396
                                                                                                  7                                 
 I2                         Local  13879    I(4)            4           scalar                    13948,13951,13952,13953,13964,1396
                                                                                                  7                                 
 IE                         Dummy  13869    I(4)            4           scalar   ARG,IN           13873,13913,13961                 
 IOFF                       Local  13879    I(4)            4           scalar                    13907,13909,13929,13930,13961     
 IS                         Dummy  13869    I(4)            4           scalar   ARG,IN           13873,13912,13961                 
 ISHIFT                     Dummy  13870    I(4)            4           scalar   ARG,IN           13909                             
 IS_ROOT_PE                 Dummy  13869    L(4)            4           scalar   ARG,IN           13888,13903,13918,13944           
 J1                         Local  13879    I(4)            4           scalar                    13949,13951,13952,13953,13965,1396
                                                                                                  7                                 
 J2                         Local  13879    I(4)            4           scalar                    13950,13951,13952,13953,13966,1396
                                                                                                  7                                 
 JE                         Dummy  13869    I(4)            4           scalar   ARG,IN           13873,13915,13961                 
 JOFF                       Local  13879    I(4)            4           scalar                    13908,13910,13931,13932,13961     
 JS                         Dummy  13869    I(4)            4           scalar   ARG,IN           13873,13914,13961                 
 JSHIFT                     Dummy  13870    I(4)            4           scalar   ARG,IN           13910                             
 MAXVAL                     Func   13934                                scalar                    13934                             
 MINVAL                     Func   13934                                scalar                    13934                             
 MPP_GATHER_PELIST_INT4_3D  Subr   13869                                         PRIV             13862                             
 MSGSIZE                    Local  13878    I(4)            4           scalar                    13951,13953,13974,13975           
 MY_IND                     Local  13880    I(4)            4     1     4                         13912,13913,13914,13915,13923,1393
                                                                                                  9,13974                           
 NK                         Dummy  13869    I(4)            4           scalar   ARG,IN           13873,13951,13952,13953,13961,1396
                                                                                                  7,13974                           
 PELIST                     Dummy  13869    I(4)            4     1     1        ARG,IN           13880,13886,13891,13898,13902,1391
                                                                                                  9,13920,13922,13925,13945,13946,13
                                                                                                  953,13958,13959                   
 PRESENT                    Func   13909                                scalar                    13909,13910                       
 ROOT_PE                    Local  13878    I(4)            4           scalar                    13889,13891,13894,13902,13903,1392
                                                                                                  2,13939,13946,13959,13975         

Page 592         Source Listing                  MPP_GATHER_PELIST_INT4_3D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_gather.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ROOT_PE_TEST               Local  13878    I(4)            4           scalar                    13890,13895,13898,13899           
 SIZE                       Func   13880                                scalar                    13880,13919,13920,13934,13945,1395
                                                                                                  8                                 
 TEMP                       Local  13884    RECORD          120   1     1        ALC              13919,13952,13953,13967,13968,1397
                                                                                                  1                                 


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ARRAY3D.DATA               I(4)            4     0        3     1        ALC              13952,13953,13967,13968            

Page 593         Source Listing                  MPP_GATHER_PELIST_INT4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  13983 # 394 "../mpp/include/mpp_comm.inc" 2 
  13984 
  13985 
  13986 
  13987 
  13988 
  13989 
  13990 
  13991 
  13992 
  13993 
  13994 
  13995 # 1 "../mpp/include/mpp_gather.h" 1 
  13996 !***********************************************************************
  13997 !*                   GNU Lesser General Public License
  13998 !*
  13999 !* This file is part of the GFDL Flexible Modeling System (FMS).
  14000 !*
  14001 !* FMS is free software: you can redistribute it and/or modify it under
  14002 !* the terms of the GNU Lesser General Public License as published by
  14003 !* the Free Software Foundation, either version 3 of the License, or (at
  14004 !* your option) any later version.
  14005 !*
  14006 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  14007 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  14008 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  14009 !* for more details.
  14010 !*
  14011 !* You should have received a copy of the GNU Lesser General Public
  14012 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  14013 !***********************************************************************
  14014 subroutine mpp_gather_real4_1d(sbuf, rbuf,pelist)
  14015 ! JWD: Did not create mpp_gather_2d because have no requirement for it
  14016 ! JWD: See mpp_gather_2dv below
  14017    real(r4_kind), dimension(:),    intent(in) :: sbuf
  14018    real(r4_kind), dimension(:), intent(inout) :: rbuf
  14019    integer,   dimension(:),    intent(in), optional :: pelist(:)
  14020 
  14021    integer :: cnt, l, nproc, op_root
  14022    integer, allocatable :: pelist2(:)
  14023 
  14024 
  14025 !  If pelist is provided, the first position must be
  14026 !  the operation root
  14027    if(PRESENT(pelist))then
  14028       nproc = size(pelist)
  14029       allocate(pelist2(nproc))
  14030       pelist2 = pelist
  14031    else
  14032       nproc = mpp_npes()
  14033       allocate(pelist2(nproc))
  14034       pelist2 = (/ (l, l=root_pe, nproc-1+root_pe) /)
  14035    endif
  14036    op_root = pelist2(1)
  14037 
  14038    cnt = size(sbuf(:))
  14039    if(size(rbuf(:)) < cnt*nproc) call mpp_error(FATAL, &

Page 594         Source Listing                  MPP_GATHER_REAL4_1D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14040           "MPP_GATHER_1D_: size(rbuf) must be at least npes*size(sbuf) ")
  14041 
  14042 !--- pre-post receiving
  14043    if(pe == op_root) then
  14044       rbuf(1:cnt) = sbuf
  14045       do l = 2, nproc
  14046          call mpp_recv(rbuf((l-1)*cnt+1), glen=cnt, from_pe=pelist2(l), block=.FALSE., tag=COMM_TAG_1 )
  14047       enddo
  14048    else
  14049       call mpp_send(sbuf(1), plen=cnt, to_pe=op_root, tag=COMM_TAG_1)
  14050    endif
  14051 
  14052    call mpp_sync_self(check=EVENT_RECV)
  14053    call mpp_sync_self()
  14054    deallocate(pelist2)
  14055 end subroutine mpp_gather_real4_1d


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_gather_real4_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CNT                        Local  14021    I(4)            4           scalar                    14038,14039,14044,14046,14049     
 L                          Local  14021    I(4)            4           scalar                    14045,14046                       
 MPP_GATHER_REAL4_1D        Subr   14014                                         PRIV                                               
 NPROC                      Local  14021    I(4)            4           scalar                    14028,14029,14032,14033,14034,1403
                                                                                                  9,14045                           
 OP_ROOT                    Local  14021    I(4)            4           scalar                    14036,14043,14049                 
 PELIST                     Dummy  14014    I(4)            4     1     1        ARG,IN           14027,14028,14030                 
 PELIST2                    Local  14022    I(4)            4     1     1        ALC              14029,14030,14033,14034,14036,1404
                                                                                                  6,14054                           
 PRESENT                    Func   14027                                scalar                    14027                             
 RBUF                       Dummy  14014    R(4)            4     1     1        ARG,INOUT        14039,14044,14046                 
 SBUF                       Dummy  14014    R(4)            4     1     1        ARG,IN           14038,14044,14049                 
 SIZE                       Func   14028                                scalar                    14028,14038,14039                 

Page 595         Source Listing                  MPP_GATHER_REAL4_1D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14056 
  14057 subroutine mpp_gather_real4_1dv(sbuf, ssize, rbuf, rsize, pelist)
  14058    real(r4_kind), dimension(:),    intent(in) :: sbuf
  14059    real(r4_kind), dimension(:), intent(inout) :: rbuf
  14060    integer,                    intent(in) :: ssize
  14061    integer,   dimension(:),    intent(in) :: rsize
  14062    integer,   dimension(:),    intent(in), optional :: pelist(:)
  14063 
  14064    integer :: cnt, l, nproc, pos, op_root
  14065    integer, allocatable :: pelist2(:)
  14066 
  14067 !  If pelist is provided, the first position must be
  14068 !  the operation root
  14069    if(PRESENT(pelist))then
  14070       nproc = size(pelist)
  14071       allocate(pelist2(nproc))
  14072       pelist2 = pelist
  14073    else
  14074       nproc = mpp_npes()
  14075       allocate(pelist2(nproc))
  14076       pelist2 = (/ (l, l=0+root_pe, nproc-1+root_pe) /)
  14077    endif
  14078    op_root = pelist2(1)
  14079 
  14080 
  14081 !--- pre-post receiving
  14082    if (pe .eq. op_root) then
  14083        pos = 1
  14084        do l = 1,nproc   ! include op_root to simplify logic
  14085            if (rsize(l) == 0) then
  14086                cycle  ! avoid ranks with no data
  14087            endif
  14088            call mpp_recv(rbuf(pos),glen=rsize(l),from_pe=pelist2(l), &
  14089                          block=.FALSE.,tag=COMM_TAG_2)
  14090            pos = pos + rsize(l)
  14091        enddo
  14092    endif
  14093    if (ssize .gt. 0) then
  14094        call mpp_send(sbuf(1),plen=ssize,to_pe=op_root,tag=COMM_TAG_2) !avoid ranks with no data
  14095    endif
  14096 
  14097    call mpp_sync_self(check=EVENT_RECV)
  14098    call mpp_sync_self()
  14099    deallocate(pelist2)
  14100 end subroutine mpp_gather_real4_1dv

Page 596         Source Listing                  MPP_GATHER_REAL4_1DV
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_gather.h



ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_gather_real4_1dv_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CNT                        Local  14064    I(4)            4           scalar                                                      
 L                          Local  14064    I(4)            4           scalar                    14084,14085,14088,14090           
 MPP_GATHER_REAL4_1DV       Subr   14057                                         PRIV                                               
 NPROC                      Local  14064    I(4)            4           scalar                    14070,14071,14074,14075,14076,1408
                                                                                                  4                                 
 OP_ROOT                    Local  14064    I(4)            4           scalar                    14078,14082,14094                 
 PELIST                     Dummy  14057    I(4)            4     1     1        ARG,IN           14069,14070,14072                 
 PELIST2                    Local  14065    I(4)            4     1     1        ALC              14071,14072,14075,14076,14078,1408
                                                                                                  8,14099                           
 POS                        Local  14064    I(4)            4           scalar                    14083,14088,14090                 
 PRESENT                    Func   14069                                scalar                    14069                             
 RBUF                       Dummy  14057    R(4)            4     1     1        ARG,INOUT        14088                             
 RSIZE                      Dummy  14057    I(4)            4     1     1        ARG,IN           14085,14088,14090                 
 SBUF                       Dummy  14057    R(4)            4     1     1        ARG,IN           14094                             
 SIZE                       Func   14070                                scalar                    14070                             
 SSIZE                      Dummy  14057    I(4)            4           scalar   ARG,IN           14093,14094                       

Page 597         Source Listing                  MPP_GATHER_REAL4_1DV
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14101 
  14102 
  14103 subroutine mpp_gather_pelist_real4_2d(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
  14104                                  ishift, jshift)
  14105    integer,                           intent(in)    :: is, ie, js, je
  14106    integer,   dimension(:),           intent(in)    :: pelist
  14107    real(r4_kind), dimension(is:ie,js:je), intent(in)    :: array_seg
  14108    real(r4_kind), dimension(:,:),         intent(inout) :: data
  14109    logical,                           intent(in)    :: is_root_pe
  14110    integer,   optional,               intent(in)    :: ishift, jshift
  14111 
  14112    real(r4_kind) ::  arr3D(size(array_seg,1),size(array_seg,2),1)
  14113    real(r4_kind) :: data3D(size(     data,1),size(     data,2),1)
  14114    pointer( aptr,  arr3D )
  14115    pointer( dptr, data3D )
  14116    aptr = LOC(array_seg)
  14117    dptr = LOC(     data)
  14118 
  14119    call mpp_gather(is, ie, js, je, 1, pelist, arr3D, data3D, is_root_pe, &
  14120                    ishift, jshift)
  14121    return
  14122 
  14123 end subroutine mpp_gather_pelist_real4_2d


ENTRY POINTS

  Name                                              
                                                    
 mpp_mod_mp_mpp_gather_pelist_real4_2d_             

Page 598         Source Listing                  MPP_GATHER_PELIST_REAL4_2D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_gather.h



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 APTR                       Local  14114    I(8)            8           scalar   PTR              14116                             
 ARR3D                      Local  14112    R(4)            4     3     0                         14119                             
 ARRAY_SEG                  Dummy  14103    R(4)            4     2     0        ARG,IN           14112,14116                       
 DATA                       Dummy  14103    R(4)            4     2     1        ARG,INOUT        14113,14117                       
 DATA3D                     Local  14113    R(4)            4     3     0                         14119                             
 DPTR                       Local  14115    I(8)            8           scalar   PTR              14117                             
 IE                         Dummy  14103    I(4)            4           scalar   ARG,IN           14107,14119                       
 IS                         Dummy  14103    I(4)            4           scalar   ARG,IN           14107,14119                       
 ISHIFT                     Dummy  14104    I(4)            4           scalar   ARG,IN           14120                             
 IS_ROOT_PE                 Dummy  14103    L(4)            4           scalar   ARG,IN           14119                             
 JE                         Dummy  14103    I(4)            4           scalar   ARG,IN           14107,14119                       
 JS                         Dummy  14103    I(4)            4           scalar   ARG,IN           14107,14119                       
 JSHIFT                     Dummy  14104    I(4)            4           scalar   ARG,IN           14120                             
 LOC                        Func   14116                                scalar                    14116,14117                       
 MPP_GATHER_PELIST_REAL4_2D Subr   14103                                         PRIV                                               
 PELIST                     Dummy  14103    I(4)            4     1     1        ARG,IN           14119                             
 SIZE                       Func   14112                                scalar                    14112,14113                       

Page 599         Source Listing                  MPP_GATHER_PELIST_REAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14124 
  14125 
  14126 subroutine mpp_gather_pelist_real4_3d(is, ie, js, je, nk, pelist, array_seg, data, is_root_pe, &
  14127                                  ishift, jshift)
  14128    integer,                                intent(in)    :: is, ie, js, je, nk
  14129    integer,   dimension(:),                intent(in)    :: pelist
  14130    real(r4_kind), dimension(is:ie,js:je,1:nk), intent(in)    :: array_seg
  14131    real(r4_kind), dimension(:,:,:),            intent(inout) :: data
  14132    logical,                                intent(in)    :: is_root_pe
  14133    integer,   optional,                    intent(in)    :: ishift, jshift
  14134 
  14135    integer :: i, msgsize, root_pe, root_pe_test
  14136    integer :: i1, i2, j1, j2, ioff, joff
  14137    integer :: my_ind(4), gind(4,size(pelist))
  14138    type array3D
  14139      real(r4_kind), dimension(:,:,:), allocatable :: data
  14140    endtype array3D
  14141    type(array3d), dimension(:), allocatable :: temp
  14142 
  14143    if (.not.ANY(mpp_pe().eq.pelist(:))) return
  14144 
  14145    if (is_root_pe) then
  14146      root_pe = mpp_pe()
  14147      root_pe_test = 999
  14148      if (.not.ANY(pelist(:).eq.root_pe)) call mpp_error(FATAL, &
  14149                 "fms_io(mpp_gather_pelist): root_pe not a member of pelist")
  14150    else
  14151      root_pe = 0
  14152      root_pe_test = -999
  14153    endif
  14154 ! need this check in case MPI-rank 0 is a member of the pelist
  14155    call mpp_max(root_pe_test, pelist)
  14156    if (root_pe_test.lt.0) call mpp_error(FATAL, &
  14157                 "fms_io(mpp_gather_pelist): root_pe not specified or not a member of the pelist")
  14158 ! need to make sure only one root_pe has been specified
  14159    call mpp_sum(root_pe, pelist)
  14160    if ((is_root_pe) .and. (mpp_pe().ne.root_pe)) call mpp_error(FATAL, &
  14161                 "fms_io(mpp_gather_pelist): too many root_pes specified")
  14162 
  14163 
  14164    ioff=0
  14165    joff=0
  14166    if (present(ishift)) ioff=ishift
  14167    if (present(jshift)) joff=jshift
  14168 
  14169    my_ind(1) = is
  14170    my_ind(2) = ie
  14171    my_ind(3) = js
  14172    my_ind(4) = je
  14173 
  14174 ! gather indices into global index on root_pe
  14175    if (is_root_pe) then
  14176      allocate(temp(1:size(pelist)))
  14177      do i = 1, size(pelist)
  14178 ! root_pe data copy - no send to self
  14179        if (pelist(i).eq.root_pe) then
  14180          gind(:,i) = my_ind(:)

Page 600         Source Listing                  MPP_GATHER_PELIST_REAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14181        else
  14182          call mpp_recv(gind(:,i:i), 4, pelist(i), .FALSE., COMM_TAG_1)
  14183        endif
  14184      enddo
  14185      call mpp_sync_self(check=EVENT_RECV)
  14186      gind(1,:)=gind(1,:)+ioff
  14187      gind(2,:)=gind(2,:)+ioff
  14188      gind(3,:)=gind(3,:)+joff
  14189      gind(4,:)=gind(4,:)+joff
  14190 ! check indices to make sure they are within the range of "data"
  14191      if ((minval(gind).lt.1) .OR. (maxval(gind(1:2,:)).gt.size(data,1)) .OR. (maxval(gind(3:4,:)).gt.size(data,2))) &
  14192          call mpp_error(FATAL,"fms_io(mpp_gather_pelist): specified indices (with shift) are outside of the &
  14193                         &range of the receiving array")
  14194    else
  14195 ! non root_pe's send indices to root_pe
  14196      call mpp_send(my_ind(:), 4, root_pe, COMM_TAG_1)
  14197      call mpp_sync_self(check=EVENT_SEND)
  14198    endif
  14199 
  14200 !  gather segments into data based on indices
  14201    if (is_root_pe) then
  14202      do i = 1, size(pelist)
  14203        if (pelist(i).ne.root_pe) then    ! no send to self
  14204          i1 = gind(1,i)
  14205          i2 = gind(2,i)
  14206          j1 = gind(3,i)
  14207          j2 = gind(4,i)
  14208          msgsize = (i2-i1+1)*(j2-j1+1)*nk
  14209          allocate(temp(i)%data(i1:i2,j1:j2,1:nk))
  14210          call mpp_recv(temp(i)%data(i1:i2,j1:j2,1:nk), msgsize, pelist(i), .FALSE., COMM_TAG_2)
  14211        endif
  14212      enddo
  14213      call mpp_sync_self(check=EVENT_RECV)
  14214 !  unbuffer/copy the data into the return array
  14215      do i = 1, size(pelist)
  14216        if (pelist(i).eq.root_pe) then
  14217 !        data copy - no send to self
  14218          data(is+ioff:ie+ioff,js+joff:je+joff,1:nk) = array_seg(is:ie,js:je,1:nk)
  14219        else
  14220          i1 = gind(1,i)
  14221          i2 = gind(2,i)
  14222          j1 = gind(3,i)
  14223          j2 = gind(4,i)
  14224          data(i1:i2,j1:j2,1:nk)=temp(i)%data(i1:i2,j1:j2,1:nk)
  14225          deallocate(temp(i)%data)
  14226        endif
  14227      enddo
  14228      deallocate(temp)
  14229    else
  14230 !    non root_pe's send data to root_pe
  14231      msgsize = (my_ind(2)-my_ind(1)+1) * (my_ind(4)-my_ind(3)+1) * nk
  14232      call mpp_send(array_seg, msgsize, root_pe, COMM_TAG_2)
  14233      call mpp_sync_self(check=EVENT_SEND)
  14234    endif
  14235 
  14236    call mpp_sync_self()
  14237    return

Page 601         Source Listing                  MPP_GATHER_PELIST_REAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14238 
  14239 end subroutine mpp_gather_pelist_real4_3d


ENTRY POINTS

  Name                                              
                                                    
 mpp_mod_mp_mpp_gather_pelist_real4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   14143                                scalar                    14143,14148                       
 ARRAY3D                    Type   14138                    120         scalar   PRIV             14140,14141                       
 ARRAY_SEG                  Dummy  14126    R(4)            4     3     0        ARG,IN           14218,14232                       
 DATA                       Dummy  14126    R(4)            4     3     1        ARG,INOUT        14191,14218,14224                 
 GIND                       Local  14137    I(4)            4     2     0                         14180,14182,14186,14187,14188,1418
                                                                                                  9,14191,14204,14205,14206,14207,14
                                                                                                  220,14221,14222,14223             
 I                          Local  14135    I(4)            4           scalar                    14177,14179,14180,14182,14202,1420
                                                                                                  3,14204,14205,14206,14207,14209,14
                                                                                                  210,14215,14216,14220,14221,14222,
                                                                                                  14223,14224,14225                 
 I1                         Local  14136    I(4)            4           scalar                    14204,14208,14209,14210,14220,1422
                                                                                                  4                                 
 I2                         Local  14136    I(4)            4           scalar                    14205,14208,14209,14210,14221,1422
                                                                                                  4                                 
 IE                         Dummy  14126    I(4)            4           scalar   ARG,IN           14130,14170,14218                 
 IOFF                       Local  14136    I(4)            4           scalar                    14164,14166,14186,14187,14218     
 IS                         Dummy  14126    I(4)            4           scalar   ARG,IN           14130,14169,14218                 
 ISHIFT                     Dummy  14127    I(4)            4           scalar   ARG,IN           14166                             
 IS_ROOT_PE                 Dummy  14126    L(4)            4           scalar   ARG,IN           14145,14160,14175,14201           
 J1                         Local  14136    I(4)            4           scalar                    14206,14208,14209,14210,14222,1422
                                                                                                  4                                 
 J2                         Local  14136    I(4)            4           scalar                    14207,14208,14209,14210,14223,1422
                                                                                                  4                                 
 JE                         Dummy  14126    I(4)            4           scalar   ARG,IN           14130,14172,14218                 
 JOFF                       Local  14136    I(4)            4           scalar                    14165,14167,14188,14189,14218     
 JS                         Dummy  14126    I(4)            4           scalar   ARG,IN           14130,14171,14218                 
 JSHIFT                     Dummy  14127    I(4)            4           scalar   ARG,IN           14167                             
 MAXVAL                     Func   14191                                scalar                    14191                             
 MINVAL                     Func   14191                                scalar                    14191                             
 MPP_GATHER_PELIST_REAL4_3D Subr   14126                                         PRIV             14119                             
 MSGSIZE                    Local  14135    I(4)            4           scalar                    14208,14210,14231,14232           
 MY_IND                     Local  14137    I(4)            4     1     4                         14169,14170,14171,14172,14180,1419
                                                                                                  6,14231                           
 NK                         Dummy  14126    I(4)            4           scalar   ARG,IN           14130,14208,14209,14210,14218,1422
                                                                                                  4,14231                           
 PELIST                     Dummy  14126    I(4)            4     1     1        ARG,IN           14137,14143,14148,14155,14159,1417
                                                                                                  6,14177,14179,14182,14202,14203,14
                                                                                                  210,14215,14216                   
 PRESENT                    Func   14166                                scalar                    14166,14167                       
 ROOT_PE                    Local  14135    I(4)            4           scalar                    14146,14148,14151,14159,14160,1417
                                                                                                  9,14196,14203,14216,14232         

Page 602         Source Listing                  MPP_GATHER_PELIST_REAL4_3D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_gather.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ROOT_PE_TEST               Local  14135    I(4)            4           scalar                    14147,14152,14155,14156           
 SIZE                       Func   14137                                scalar                    14137,14176,14177,14191,14202,1421
                                                                                                  5                                 
 TEMP                       Local  14141    RECORD          120   1     1        ALC              14176,14209,14210,14224,14225,1422
                                                                                                  8                                 


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ARRAY3D.DATA               R(4)            4     0        3     1        ALC              14209,14210,14224,14225            

Page 603         Source Listing                  MPP_GATHER_PELIST_REAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14240 # 406 "../mpp/include/mpp_comm.inc" 2 
  14241 
  14242 
  14243 
  14244 
  14245 
  14246 
  14247 
  14248 
  14249 
  14250 
  14251 
  14252 # 1 "../mpp/include/mpp_gather.h" 1 
  14253 !***********************************************************************
  14254 !*                   GNU Lesser General Public License
  14255 !*
  14256 !* This file is part of the GFDL Flexible Modeling System (FMS).
  14257 !*
  14258 !* FMS is free software: you can redistribute it and/or modify it under
  14259 !* the terms of the GNU Lesser General Public License as published by
  14260 !* the Free Software Foundation, either version 3 of the License, or (at
  14261 !* your option) any later version.
  14262 !*
  14263 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  14264 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  14265 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  14266 !* for more details.
  14267 !*
  14268 !* You should have received a copy of the GNU Lesser General Public
  14269 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  14270 !***********************************************************************
  14271 subroutine mpp_gather_real8_1d(sbuf, rbuf,pelist)
  14272 ! JWD: Did not create mpp_gather_2d because have no requirement for it
  14273 ! JWD: See mpp_gather_2dv below
  14274    real(r8_kind), dimension(:),    intent(in) :: sbuf
  14275    real(r8_kind), dimension(:), intent(inout) :: rbuf
  14276    integer,   dimension(:),    intent(in), optional :: pelist(:)
  14277 
  14278    integer :: cnt, l, nproc, op_root
  14279    integer, allocatable :: pelist2(:)
  14280 
  14281 
  14282 !  If pelist is provided, the first position must be
  14283 !  the operation root
  14284    if(PRESENT(pelist))then
  14285       nproc = size(pelist)
  14286       allocate(pelist2(nproc))
  14287       pelist2 = pelist
  14288    else
  14289       nproc = mpp_npes()
  14290       allocate(pelist2(nproc))
  14291       pelist2 = (/ (l, l=root_pe, nproc-1+root_pe) /)
  14292    endif
  14293    op_root = pelist2(1)
  14294 
  14295    cnt = size(sbuf(:))
  14296    if(size(rbuf(:)) < cnt*nproc) call mpp_error(FATAL, &

Page 604         Source Listing                  MPP_GATHER_REAL8_1D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14297           "MPP_GATHER_1D_: size(rbuf) must be at least npes*size(sbuf) ")
  14298 
  14299 !--- pre-post receiving
  14300    if(pe == op_root) then
  14301       rbuf(1:cnt) = sbuf
  14302       do l = 2, nproc
  14303          call mpp_recv(rbuf((l-1)*cnt+1), glen=cnt, from_pe=pelist2(l), block=.FALSE., tag=COMM_TAG_1 )
  14304       enddo
  14305    else
  14306       call mpp_send(sbuf(1), plen=cnt, to_pe=op_root, tag=COMM_TAG_1)
  14307    endif
  14308 
  14309    call mpp_sync_self(check=EVENT_RECV)
  14310    call mpp_sync_self()
  14311    deallocate(pelist2)
  14312 end subroutine mpp_gather_real8_1d


ENTRY POINTS

  Name                                       
                                             
 mpp_mod_mp_mpp_gather_real8_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CNT                        Local  14278    I(4)            4           scalar                    14295,14296,14301,14303,14306     
 L                          Local  14278    I(4)            4           scalar                    14302,14303                       
 MPP_GATHER_REAL8_1D        Subr   14271                                         PRIV                                               
 NPROC                      Local  14278    I(4)            4           scalar                    14285,14286,14289,14290,14291,1429
                                                                                                  6,14302                           
 OP_ROOT                    Local  14278    I(4)            4           scalar                    14293,14300,14306                 
 PELIST                     Dummy  14271    I(4)            4     1     1        ARG,IN           14284,14285,14287                 
 PELIST2                    Local  14279    I(4)            4     1     1        ALC              14286,14287,14290,14291,14293,1430
                                                                                                  3,14311                           
 PRESENT                    Func   14284                                scalar                    14284                             
 RBUF                       Dummy  14271    R(8)            8     1     1        ARG,INOUT        14296,14301,14303                 
 SBUF                       Dummy  14271    R(8)            8     1     1        ARG,IN           14295,14301,14306                 
 SIZE                       Func   14285                                scalar                    14285,14295,14296                 

Page 605         Source Listing                  MPP_GATHER_REAL8_1D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14313 
  14314 subroutine mpp_gather_real8_1dv(sbuf, ssize, rbuf, rsize, pelist)
  14315    real(r8_kind), dimension(:),    intent(in) :: sbuf
  14316    real(r8_kind), dimension(:), intent(inout) :: rbuf
  14317    integer,                    intent(in) :: ssize
  14318    integer,   dimension(:),    intent(in) :: rsize
  14319    integer,   dimension(:),    intent(in), optional :: pelist(:)
  14320 
  14321    integer :: cnt, l, nproc, pos, op_root
  14322    integer, allocatable :: pelist2(:)
  14323 
  14324 !  If pelist is provided, the first position must be
  14325 !  the operation root
  14326    if(PRESENT(pelist))then
  14327       nproc = size(pelist)
  14328       allocate(pelist2(nproc))
  14329       pelist2 = pelist
  14330    else
  14331       nproc = mpp_npes()
  14332       allocate(pelist2(nproc))
  14333       pelist2 = (/ (l, l=0+root_pe, nproc-1+root_pe) /)
  14334    endif
  14335    op_root = pelist2(1)
  14336 
  14337 
  14338 !--- pre-post receiving
  14339    if (pe .eq. op_root) then
  14340        pos = 1
  14341        do l = 1,nproc   ! include op_root to simplify logic
  14342            if (rsize(l) == 0) then
  14343                cycle  ! avoid ranks with no data
  14344            endif
  14345            call mpp_recv(rbuf(pos),glen=rsize(l),from_pe=pelist2(l), &
  14346                          block=.FALSE.,tag=COMM_TAG_2)
  14347            pos = pos + rsize(l)
  14348        enddo
  14349    endif
  14350    if (ssize .gt. 0) then
  14351        call mpp_send(sbuf(1),plen=ssize,to_pe=op_root,tag=COMM_TAG_2) !avoid ranks with no data
  14352    endif
  14353 
  14354    call mpp_sync_self(check=EVENT_RECV)
  14355    call mpp_sync_self()
  14356    deallocate(pelist2)
  14357 end subroutine mpp_gather_real8_1dv

Page 606         Source Listing                  MPP_GATHER_REAL8_1DV
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_gather.h



ENTRY POINTS

  Name                                        
                                              
 mpp_mod_mp_mpp_gather_real8_1dv_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CNT                        Local  14321    I(4)            4           scalar                                                      
 L                          Local  14321    I(4)            4           scalar                    14341,14342,14345,14347           
 MPP_GATHER_REAL8_1DV       Subr   14314                                         PRIV                                               
 NPROC                      Local  14321    I(4)            4           scalar                    14327,14328,14331,14332,14333,1434
                                                                                                  1                                 
 OP_ROOT                    Local  14321    I(4)            4           scalar                    14335,14339,14351                 
 PELIST                     Dummy  14314    I(4)            4     1     1        ARG,IN           14326,14327,14329                 
 PELIST2                    Local  14322    I(4)            4     1     1        ALC              14328,14329,14332,14333,14335,1434
                                                                                                  5,14356                           
 POS                        Local  14321    I(4)            4           scalar                    14340,14345,14347                 
 PRESENT                    Func   14326                                scalar                    14326                             
 RBUF                       Dummy  14314    R(8)            8     1     1        ARG,INOUT        14345                             
 RSIZE                      Dummy  14314    I(4)            4     1     1        ARG,IN           14342,14345,14347                 
 SBUF                       Dummy  14314    R(8)            8     1     1        ARG,IN           14351                             
 SIZE                       Func   14327                                scalar                    14327                             
 SSIZE                      Dummy  14314    I(4)            4           scalar   ARG,IN           14350,14351                       

Page 607         Source Listing                  MPP_GATHER_REAL8_1DV
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14358 
  14359 
  14360 subroutine mpp_gather_pelist_real8_2d(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
  14361                                  ishift, jshift)
  14362    integer,                           intent(in)    :: is, ie, js, je
  14363    integer,   dimension(:),           intent(in)    :: pelist
  14364    real(r8_kind), dimension(is:ie,js:je), intent(in)    :: array_seg
  14365    real(r8_kind), dimension(:,:),         intent(inout) :: data
  14366    logical,                           intent(in)    :: is_root_pe
  14367    integer,   optional,               intent(in)    :: ishift, jshift
  14368 
  14369    real(r8_kind) ::  arr3D(size(array_seg,1),size(array_seg,2),1)
  14370    real(r8_kind) :: data3D(size(     data,1),size(     data,2),1)
  14371    pointer( aptr,  arr3D )
  14372    pointer( dptr, data3D )
  14373    aptr = LOC(array_seg)
  14374    dptr = LOC(     data)
  14375 
  14376    call mpp_gather(is, ie, js, je, 1, pelist, arr3D, data3D, is_root_pe, &
  14377                    ishift, jshift)
  14378    return
  14379 
  14380 end subroutine mpp_gather_pelist_real8_2d


ENTRY POINTS

  Name                                              
                                                    
 mpp_mod_mp_mpp_gather_pelist_real8_2d_             

Page 608         Source Listing                  MPP_GATHER_PELIST_REAL8_2D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_gather.h



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 APTR                       Local  14371    I(8)            8           scalar   PTR              14373                             
 ARR3D                      Local  14369    R(8)            8     3     0                         14376                             
 ARRAY_SEG                  Dummy  14360    R(8)            8     2     0        ARG,IN           14369,14373                       
 DATA                       Dummy  14360    R(8)            8     2     1        ARG,INOUT        14370,14374                       
 DATA3D                     Local  14370    R(8)            8     3     0                         14376                             
 DPTR                       Local  14372    I(8)            8           scalar   PTR              14374                             
 IE                         Dummy  14360    I(4)            4           scalar   ARG,IN           14364,14376                       
 IS                         Dummy  14360    I(4)            4           scalar   ARG,IN           14364,14376                       
 ISHIFT                     Dummy  14361    I(4)            4           scalar   ARG,IN           14377                             
 IS_ROOT_PE                 Dummy  14360    L(4)            4           scalar   ARG,IN           14376                             
 JE                         Dummy  14360    I(4)            4           scalar   ARG,IN           14364,14376                       
 JS                         Dummy  14360    I(4)            4           scalar   ARG,IN           14364,14376                       
 JSHIFT                     Dummy  14361    I(4)            4           scalar   ARG,IN           14377                             
 LOC                        Func   14373                                scalar                    14373,14374                       
 MPP_GATHER_PELIST_REAL8_2D Subr   14360                                         PRIV                                               
 PELIST                     Dummy  14360    I(4)            4     1     1        ARG,IN           14376                             
 SIZE                       Func   14369                                scalar                    14369,14370                       

Page 609         Source Listing                  MPP_GATHER_PELIST_REAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14381 
  14382 
  14383 subroutine mpp_gather_pelist_real8_3d(is, ie, js, je, nk, pelist, array_seg, data, is_root_pe, &
  14384                                  ishift, jshift)
  14385    integer,                                intent(in)    :: is, ie, js, je, nk
  14386    integer,   dimension(:),                intent(in)    :: pelist
  14387    real(r8_kind), dimension(is:ie,js:je,1:nk), intent(in)    :: array_seg
  14388    real(r8_kind), dimension(:,:,:),            intent(inout) :: data
  14389    logical,                                intent(in)    :: is_root_pe
  14390    integer,   optional,                    intent(in)    :: ishift, jshift
  14391 
  14392    integer :: i, msgsize, root_pe, root_pe_test
  14393    integer :: i1, i2, j1, j2, ioff, joff
  14394    integer :: my_ind(4), gind(4,size(pelist))
  14395    type array3D
  14396      real(r8_kind), dimension(:,:,:), allocatable :: data
  14397    endtype array3D
  14398    type(array3d), dimension(:), allocatable :: temp
  14399 
  14400    if (.not.ANY(mpp_pe().eq.pelist(:))) return
  14401 
  14402    if (is_root_pe) then
  14403      root_pe = mpp_pe()
  14404      root_pe_test = 999
  14405      if (.not.ANY(pelist(:).eq.root_pe)) call mpp_error(FATAL, &
  14406                 "fms_io(mpp_gather_pelist): root_pe not a member of pelist")
  14407    else
  14408      root_pe = 0
  14409      root_pe_test = -999
  14410    endif
  14411 ! need this check in case MPI-rank 0 is a member of the pelist
  14412    call mpp_max(root_pe_test, pelist)
  14413    if (root_pe_test.lt.0) call mpp_error(FATAL, &
  14414                 "fms_io(mpp_gather_pelist): root_pe not specified or not a member of the pelist")
  14415 ! need to make sure only one root_pe has been specified
  14416    call mpp_sum(root_pe, pelist)
  14417    if ((is_root_pe) .and. (mpp_pe().ne.root_pe)) call mpp_error(FATAL, &
  14418                 "fms_io(mpp_gather_pelist): too many root_pes specified")
  14419 
  14420 
  14421    ioff=0
  14422    joff=0
  14423    if (present(ishift)) ioff=ishift
  14424    if (present(jshift)) joff=jshift
  14425 
  14426    my_ind(1) = is
  14427    my_ind(2) = ie
  14428    my_ind(3) = js
  14429    my_ind(4) = je
  14430 
  14431 ! gather indices into global index on root_pe
  14432    if (is_root_pe) then
  14433      allocate(temp(1:size(pelist)))
  14434      do i = 1, size(pelist)
  14435 ! root_pe data copy - no send to self
  14436        if (pelist(i).eq.root_pe) then
  14437          gind(:,i) = my_ind(:)

Page 610         Source Listing                  MPP_GATHER_PELIST_REAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14438        else
  14439          call mpp_recv(gind(:,i:i), 4, pelist(i), .FALSE., COMM_TAG_1)
  14440        endif
  14441      enddo
  14442      call mpp_sync_self(check=EVENT_RECV)
  14443      gind(1,:)=gind(1,:)+ioff
  14444      gind(2,:)=gind(2,:)+ioff
  14445      gind(3,:)=gind(3,:)+joff
  14446      gind(4,:)=gind(4,:)+joff
  14447 ! check indices to make sure they are within the range of "data"
  14448      if ((minval(gind).lt.1) .OR. (maxval(gind(1:2,:)).gt.size(data,1)) .OR. (maxval(gind(3:4,:)).gt.size(data,2))) &
  14449          call mpp_error(FATAL,"fms_io(mpp_gather_pelist): specified indices (with shift) are outside of the &
  14450                         &range of the receiving array")
  14451    else
  14452 ! non root_pe's send indices to root_pe
  14453      call mpp_send(my_ind(:), 4, root_pe, COMM_TAG_1)
  14454      call mpp_sync_self(check=EVENT_SEND)
  14455    endif
  14456 
  14457 !  gather segments into data based on indices
  14458    if (is_root_pe) then
  14459      do i = 1, size(pelist)
  14460        if (pelist(i).ne.root_pe) then    ! no send to self
  14461          i1 = gind(1,i)
  14462          i2 = gind(2,i)
  14463          j1 = gind(3,i)
  14464          j2 = gind(4,i)
  14465          msgsize = (i2-i1+1)*(j2-j1+1)*nk
  14466          allocate(temp(i)%data(i1:i2,j1:j2,1:nk))
  14467          call mpp_recv(temp(i)%data(i1:i2,j1:j2,1:nk), msgsize, pelist(i), .FALSE., COMM_TAG_2)
  14468        endif
  14469      enddo
  14470      call mpp_sync_self(check=EVENT_RECV)
  14471 !  unbuffer/copy the data into the return array
  14472      do i = 1, size(pelist)
  14473        if (pelist(i).eq.root_pe) then
  14474 !        data copy - no send to self
  14475          data(is+ioff:ie+ioff,js+joff:je+joff,1:nk) = array_seg(is:ie,js:je,1:nk)
  14476        else
  14477          i1 = gind(1,i)
  14478          i2 = gind(2,i)
  14479          j1 = gind(3,i)
  14480          j2 = gind(4,i)
  14481          data(i1:i2,j1:j2,1:nk)=temp(i)%data(i1:i2,j1:j2,1:nk)
  14482          deallocate(temp(i)%data)
  14483        endif
  14484      enddo
  14485      deallocate(temp)
  14486    else
  14487 !    non root_pe's send data to root_pe
  14488      msgsize = (my_ind(2)-my_ind(1)+1) * (my_ind(4)-my_ind(3)+1) * nk
  14489      call mpp_send(array_seg, msgsize, root_pe, COMM_TAG_2)
  14490      call mpp_sync_self(check=EVENT_SEND)
  14491    endif
  14492 
  14493    call mpp_sync_self()
  14494    return

Page 611         Source Listing                  MPP_GATHER_PELIST_REAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14495 
  14496 end subroutine mpp_gather_pelist_real8_3d


ENTRY POINTS

  Name                                              
                                                    
 mpp_mod_mp_mpp_gather_pelist_real8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   14400                                scalar                    14400,14405                       
 ARRAY3D                    Type   14395                    120         scalar   PRIV             14397,14398                       
 ARRAY_SEG                  Dummy  14383    R(8)            8     3     0        ARG,IN           14475,14489                       
 DATA                       Dummy  14383    R(8)            8     3     1        ARG,INOUT        14448,14475,14481                 
 GIND                       Local  14394    I(4)            4     2     0                         14437,14439,14443,14444,14445,1444
                                                                                                  6,14448,14461,14462,14463,14464,14
                                                                                                  477,14478,14479,14480             
 I                          Local  14392    I(4)            4           scalar                    14434,14436,14437,14439,14459,1446
                                                                                                  0,14461,14462,14463,14464,14466,14
                                                                                                  467,14472,14473,14477,14478,14479,
                                                                                                  14480,14481,14482                 
 I1                         Local  14393    I(4)            4           scalar                    14461,14465,14466,14467,14477,1448
                                                                                                  1                                 
 I2                         Local  14393    I(4)            4           scalar                    14462,14465,14466,14467,14478,1448
                                                                                                  1                                 
 IE                         Dummy  14383    I(4)            4           scalar   ARG,IN           14387,14427,14475                 
 IOFF                       Local  14393    I(4)            4           scalar                    14421,14423,14443,14444,14475     
 IS                         Dummy  14383    I(4)            4           scalar   ARG,IN           14387,14426,14475                 
 ISHIFT                     Dummy  14384    I(4)            4           scalar   ARG,IN           14423                             
 IS_ROOT_PE                 Dummy  14383    L(4)            4           scalar   ARG,IN           14402,14417,14432,14458           
 J1                         Local  14393    I(4)            4           scalar                    14463,14465,14466,14467,14479,1448
                                                                                                  1                                 
 J2                         Local  14393    I(4)            4           scalar                    14464,14465,14466,14467,14480,1448
                                                                                                  1                                 
 JE                         Dummy  14383    I(4)            4           scalar   ARG,IN           14387,14429,14475                 
 JOFF                       Local  14393    I(4)            4           scalar                    14422,14424,14445,14446,14475     
 JS                         Dummy  14383    I(4)            4           scalar   ARG,IN           14387,14428,14475                 
 JSHIFT                     Dummy  14384    I(4)            4           scalar   ARG,IN           14424                             
 MAXVAL                     Func   14448                                scalar                    14448                             
 MINVAL                     Func   14448                                scalar                    14448                             
 MPP_GATHER_PELIST_REAL8_3D Subr   14383                                         PRIV             14376                             
 MSGSIZE                    Local  14392    I(4)            4           scalar                    14465,14467,14488,14489           
 MY_IND                     Local  14394    I(4)            4     1     4                         14426,14427,14428,14429,14437,1445
                                                                                                  3,14488                           
 NK                         Dummy  14383    I(4)            4           scalar   ARG,IN           14387,14465,14466,14467,14475,1448
                                                                                                  1,14488                           
 PELIST                     Dummy  14383    I(4)            4     1     1        ARG,IN           14394,14400,14405,14412,14416,1443
                                                                                                  3,14434,14436,14439,14459,14460,14
                                                                                                  467,14472,14473                   
 PRESENT                    Func   14423                                scalar                    14423,14424                       
 ROOT_PE                    Local  14392    I(4)            4           scalar                    14403,14405,14408,14416,14417,1443
                                                                                                  6,14453,14460,14473,14489         

Page 612         Source Listing                  MPP_GATHER_PELIST_REAL8_3D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_gather.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ROOT_PE_TEST               Local  14392    I(4)            4           scalar                    14404,14409,14412,14413           
 SIZE                       Func   14394                                scalar                    14394,14433,14434,14448,14459,1447
                                                                                                  2                                 
 TEMP                       Local  14398    RECORD          120   1     1        ALC              14433,14466,14467,14481,14482,1448
                                                                                                  5                                 


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ARRAY3D.DATA               R(8)            8     0        3     1        ALC              14466,14467,14481,14482            

Page 613         Source Listing                  MPP_GATHER_PELIST_REAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_gather.h

  14497 # 418 "../mpp/include/mpp_comm.inc" 2 
  14498 
  14499 !#################################################
  14500 
  14501 
  14502 
  14503 
  14504 
  14505 
  14506 # 1 "../mpp/include/mpp_scatter.h" 1 
  14507 !***********************************************************************
  14508 !*                   GNU Lesser General Public License
  14509 !*
  14510 !* This file is part of the GFDL Flexible Modeling System (FMS).
  14511 !*
  14512 !* FMS is free software: you can redistribute it and/or modify it under
  14513 !* the terms of the GNU Lesser General Public License as published by
  14514 !* the Free Software Foundation, either version 3 of the License, or (at
  14515 !* your option) any later version.
  14516 !*
  14517 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  14518 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  14519 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  14520 !* for more details.
  14521 !*
  14522 !* You should have received a copy of the GNU Lesser General Public
  14523 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  14524 !***********************************************************************
  14525 ! <SUBROUTINE NAME="MPP_SCATTER_PELIST_2D_">
  14526 !   <OVERVIEW>
  14527 !     Scatter data from one pe to the specified pes.
  14528 !   </OVERVIEW>
  14529 !   <TEMPLATE>
  14530 !     SUBROUTINE mpp_scatter_pelist_int4_2d(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
  14531 !					  ishift, jshift)
  14532 !   </TEMPLATE>
  14533 !   <DESCRIPTION>
  14534 !		   Scatter (ie - is) * (je - js) contiguous elements of array data from the designated root pe
  14535 !		   into contigous members of array segment in each pe that is included in the pelist argument.
  14536 !   </DESCRIPTION>
  14537 !   <IN NAME="is, ie" TYPE="INTEGER">Start and end index of the first dimension of the segment array</IN>
  14538 !   <IN NAME="js, je" TYPE="INTEGER">Start and end index of the second dimension of the segment array</IN>
  14539 !   <IN NAME="pelist" TYPE="INTEGER()">The PE list of of target pes, Needs to be in monotonic increasing order.
  14540 !		The root pe is allowed to be included (see input is_root_pe). If a pe is absent in this list then
  14541 !             its segment array is not updated. </IN>
  14542 !   <IN NAME="array_seg" TYPE="REAL(:)">The 2D array that the data is to be copied into</IN>
  14543 !   <IN NAME="data" TYPE="REAL(:)">The source array.</IN>
  14544 !   <IN NAME="is_root_pe" TYPE="LOGICAL" > True if the calee is root pe, false otherwise. </IN>
  14545 !   <IN NAME="ishift, jshift" TYPE="INTEGER" > Offsets specifying the first element in data array.</IN>
  14546 subroutine mpp_scatter_pelist_int4_2d(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
  14547                                   ishift, jshift)
  14548    integer,                           intent(in)    :: is, ie, js, je
  14549    integer,   dimension(:),           intent(in)    :: pelist
  14550    integer(i4_kind), dimension(is:ie,js:je), intent(inout)    :: array_seg
  14551    integer(i4_kind), dimension(:,:),         intent(in) :: data
  14552    logical,                           intent(in)    :: is_root_pe
  14553    integer,   optional,               intent(in)    :: ishift, jshift

Page 614         Source Listing                  MPP_SCATTER_PELIST_INT4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14554 
  14555    integer(i4_kind) ::  arr3D(size(array_seg,1),size(array_seg,2),1)
  14556    integer(i4_kind) :: data3D(size(     data,1),size(     data,2),1)
  14557    pointer( aptr,  arr3D )
  14558    pointer( dptr, data3D )
  14559    aptr = LOC(array_seg)
  14560    dptr = LOC(     data)
  14561 
  14562    call mpp_scatter(is, ie, js, je, 1, pelist, arr3D, data3D, is_root_pe, &
  14563                     ishift, jshift)
  14564    return
  14565 
  14566 end subroutine mpp_scatter_pelist_int4_2d


ENTRY POINTS

  Name                                              
                                                    
 mpp_mod_mp_mpp_scatter_pelist_int4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 APTR                       Local  14557    I(8)            8           scalar   PTR              14559                             
 ARR3D                      Local  14555    I(4)            4     3     0                         14562                             
 ARRAY_SEG                  Dummy  14546    I(4)            4     2     0        ARG,INOUT        14555,14559                       
 DATA                       Dummy  14546    I(4)            4     2     1        ARG,IN           14556,14560                       
 DATA3D                     Local  14556    I(4)            4     3     0                         14562                             
 DPTR                       Local  14558    I(8)            8           scalar   PTR              14560                             
 IE                         Dummy  14546    I(4)            4           scalar   ARG,IN           14550,14562                       
 IS                         Dummy  14546    I(4)            4           scalar   ARG,IN           14550,14562                       
 ISHIFT                     Dummy  14547    I(4)            4           scalar   ARG,IN           14563                             
 IS_ROOT_PE                 Dummy  14546    L(4)            4           scalar   ARG,IN           14562                             
 JE                         Dummy  14546    I(4)            4           scalar   ARG,IN           14550,14562                       
 JS                         Dummy  14546    I(4)            4           scalar   ARG,IN           14550,14562                       
 JSHIFT                     Dummy  14547    I(4)            4           scalar   ARG,IN           14563                             
 LOC                        Func   14559                                scalar                    14559,14560                       
 MPP_SCATTER                Local  14562                                scalar                    225,14562,14741,14920             
 MPP_SCATTER_PELIST_INT4_2D Subr   14546                                         PRIV                                               
 PELIST                     Dummy  14546    I(4)            4     1     1        ARG,IN           14562                             
 SIZE                       Func   14555                                scalar                    14555,14556                       

Page 615         Source Listing                  MPP_SCATTER_PELIST_INT4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14567 
  14568 
  14569 subroutine mpp_scatter_pelist_int4_3d(is, ie, js, je, nk, pelist, array_seg, data, is_root_pe, &
  14570                                   ishift, jshift)
  14571    integer,                                intent(in)    :: is, ie, js, je, nk
  14572    integer,   dimension(:),                intent(in)    :: pelist
  14573    integer(i4_kind), dimension(is:ie,js:je,1:nk), intent(inout)    :: array_seg
  14574    integer(i4_kind), dimension(:,:,:),            intent(in) :: data
  14575    logical,                                intent(in)    :: is_root_pe
  14576    integer,   optional,                    intent(in)    :: ishift, jshift
  14577 
  14578    integer :: i, msgsize, root_pe, root_pe_test
  14579    integer :: i1, i2, j1, j2, ioff, joff
  14580    integer :: my_ind(4), gind(4,size(pelist))
  14581    type array3D
  14582      integer(i4_kind), dimension(:,:,:), allocatable :: data
  14583    endtype array3D
  14584    type(array3d), dimension(size(pelist)) :: temp
  14585 
  14586    if (.not.ANY(mpp_pe().eq.pelist(:))) return
  14587 
  14588    if (is_root_pe) then
  14589      root_pe = mpp_pe()
  14590      root_pe_test = 999
  14591      if (.not.ANY(pelist(:).eq.root_pe)) call mpp_error(FATAL, &
  14592                 "fms_io(mpp_scatter_pelist): root_pe not a member of pelist")
  14593    else
  14594      root_pe = 0
  14595      root_pe_test = -999
  14596    endif
  14597 ! need this check in case MPI-rank 0 is a member of the pelist
  14598    call mpp_max(root_pe_test, pelist)
  14599    if (root_pe_test.lt.0) call mpp_error(FATAL, &
  14600                 "fms_io(mpp_scatter_pelist): root_pe not specified or not a member of the pelist")
  14601 ! need to make sure only one root_pe has been specified
  14602    call mpp_sum(root_pe, pelist)
  14603    if ((is_root_pe) .and. (mpp_pe().ne.root_pe)) call mpp_error(FATAL, &
  14604                 "fms_io(mpp_scatter_pelist): too many root_pes specified")
  14605 
  14606 
  14607    ioff=0
  14608    joff=0
  14609    if (present(ishift)) ioff=ishift
  14610    if (present(jshift)) joff=jshift
  14611 
  14612    my_ind(1) = is
  14613    my_ind(2) = ie
  14614    my_ind(3) = js
  14615    my_ind(4) = je
  14616 
  14617 ! scatter indices into global index on root_pe
  14618    if (is_root_pe) then
  14619      do i = 1, size(pelist)
  14620 ! root_pe data copy - no send to self
  14621        if (pelist(i).eq.root_pe) then
  14622          gind(:,i) = my_ind(:)
  14623        else

Page 616         Source Listing                  MPP_SCATTER_PELIST_INT4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14624          call mpp_recv(gind(:,i:i), 4, pelist(i), .FALSE., COMM_TAG_1)
  14625        endif
  14626      enddo
  14627      call mpp_sync_self(check=EVENT_RECV)
  14628      gind(1,:)=gind(1,:)+ioff
  14629      gind(2,:)=gind(2,:)+ioff
  14630      gind(3,:)=gind(3,:)+joff
  14631      gind(4,:)=gind(4,:)+joff
  14632 ! check indices to make sure they are within the range of "data"
  14633      if ((minval(gind).lt.1) .OR. (maxval(gind(1:2,:)).gt.size(data,1)) .OR. (maxval(gind(3:4,:)).gt.size(data,2))) &
  14634          call mpp_error(FATAL,"fms_io(mpp_scatter_pelist): specified indices (with shift) are outside of the &
  14635                         &range of the receiving array")
  14636    else
  14637 ! non root_pe's send indices to root_pe
  14638      call mpp_send(my_ind(:), 4, root_pe, COMM_TAG_1)
  14639      call mpp_sync_self(check=EVENT_SEND)
  14640    endif
  14641 
  14642 !  scatter segments into data based on indices
  14643    if (is_root_pe) then
  14644      do i = 1, size(pelist)
  14645        if (pelist(i).ne.root_pe) then    ! no send to self
  14646          i1 = gind(1,i)
  14647          i2 = gind(2,i)
  14648          j1 = gind(3,i)
  14649          j2 = gind(4,i)
  14650          msgsize = (i2-i1+1)*(j2-j1+1)*nk
  14651 ! allocate and copy data into a contiguous memory space
  14652          allocate(temp(i)%data(i1:i2,j1:j2,1:nk))
  14653          temp(i)%data(i1:i2,j1:j2,1:nk)=data(i1:i2,j1:j2,1:nk)
  14654          call mpp_send(temp(i)%data, msgsize, pelist(i), COMM_TAG_2)
  14655        else
  14656 !        data copy - no send to self
  14657          array_seg(is:ie,js:je,1:nk) = data(is+ioff:ie+ioff,js+joff:je+joff,1:nk)
  14658        endif
  14659      enddo
  14660      call mpp_sync_self(check=EVENT_SEND)
  14661 ! deallocate the temporary array used for the send
  14662      do i = 1, size(pelist)
  14663        if (allocated(temp(i)%data)) deallocate(temp(i)%data)
  14664      enddo
  14665    else
  14666 !    non root_pe's recv data from root_pe
  14667      msgsize = (my_ind(2)-my_ind(1)+1) * (my_ind(4)-my_ind(3)+1) * nk
  14668      call mpp_recv(array_seg, msgsize, root_pe, .FALSE., COMM_TAG_2)
  14669      call mpp_sync_self(check=EVENT_RECV)
  14670    endif
  14671 
  14672    call mpp_sync_self()
  14673 
  14674    return
  14675 
  14676 end subroutine mpp_scatter_pelist_int4_3d

Page 617         Source Listing                  MPP_SCATTER_PELIST_INT4_3D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_scatter.h



ENTRY POINTS

  Name                                              
                                                    
 mpp_mod_mp_mpp_scatter_pelist_int4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   14663                                scalar                    14663                             
 ANY                        Func   14586                                scalar                    14586,14591                       
 ARRAY3D                    Type   14581                    120         scalar   PRIV             14583,14584                       
 ARRAY_SEG                  Dummy  14569    I(4)            4     3     0        ARG,INOUT        14657,14668                       
 DATA                       Dummy  14569    I(4)            4     3     1        ARG,IN           14633,14653,14657                 
 GIND                       Local  14580    I(4)            4     2     0                         14622,14624,14628,14629,14630,1463
                                                                                                  1,14633,14646,14647,14648,14649   
 I                          Local  14578    I(4)            4           scalar                    14619,14621,14622,14624,14644,1464
                                                                                                  5,14646,14647,14648,14649,14652,14
                                                                                                  653,14654,14662,14663             
 I1                         Local  14579    I(4)            4           scalar                    14646,14650,14652,14653           
 I2                         Local  14579    I(4)            4           scalar                    14647,14650,14652,14653           
 IE                         Dummy  14569    I(4)            4           scalar   ARG,IN           14573,14613,14657                 
 IOFF                       Local  14579    I(4)            4           scalar                    14607,14609,14628,14629,14657     
 IS                         Dummy  14569    I(4)            4           scalar   ARG,IN           14573,14612,14657                 
 ISHIFT                     Dummy  14570    I(4)            4           scalar   ARG,IN           14609                             
 IS_ROOT_PE                 Dummy  14569    L(4)            4           scalar   ARG,IN           14588,14603,14618,14643           
 J1                         Local  14579    I(4)            4           scalar                    14648,14650,14652,14653           
 J2                         Local  14579    I(4)            4           scalar                    14649,14650,14652,14653           
 JE                         Dummy  14569    I(4)            4           scalar   ARG,IN           14573,14615,14657                 
 JOFF                       Local  14579    I(4)            4           scalar                    14608,14610,14630,14631,14657     
 JS                         Dummy  14569    I(4)            4           scalar   ARG,IN           14573,14614,14657                 
 JSHIFT                     Dummy  14570    I(4)            4           scalar   ARG,IN           14610                             
 MAXVAL                     Func   14633                                scalar                    14633                             
 MINVAL                     Func   14633                                scalar                    14633                             
 MPP_SCATTER_PELIST_INT4_3D Subr   14569                                         PRIV             14562                             
 MSGSIZE                    Local  14578    I(4)            4           scalar                    14650,14654,14667,14668           
 MY_IND                     Local  14580    I(4)            4     1     4                         14612,14613,14614,14615,14622,1463
                                                                                                  8,14667                           
 NK                         Dummy  14569    I(4)            4           scalar   ARG,IN           14573,14650,14652,14653,14657,1466
                                                                                                  7                                 
 PELIST                     Dummy  14569    I(4)            4     1     1        ARG,IN           14580,14584,14586,14591,14598,1460
                                                                                                  2,14619,14621,14624,14644,14645,14
                                                                                                  654,14662                         
 PRESENT                    Func   14609                                scalar                    14609,14610                       
 ROOT_PE                    Local  14578    I(4)            4           scalar                    14589,14591,14594,14602,14603,1462
                                                                                                  1,14638,14645,14668               
 ROOT_PE_TEST               Local  14578    I(4)            4           scalar                    14590,14595,14598,14599           
 SIZE                       Func   14580                                scalar                    14580,14584,14619,14633,14644,1466
                                                                                                  2                                 
 TEMP                       Local  14584    RECORD          120   1     0                         14652,14653,14654,14663           



Page 618         Source Listing                  MPP_SCATTER_PELIST_INT4_3D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_scatter.h

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ARRAY3D.DATA               I(4)            4     0        3     1        ALC              14652,14653,14654,14663            

Page 619         Source Listing                  MPP_SCATTER_PELIST_INT4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14677 # 427 "../mpp/include/mpp_comm.inc" 2 
  14678 
  14679 
  14680 
  14681 
  14682 
  14683 
  14684 
  14685 # 1 "../mpp/include/mpp_scatter.h" 1 
  14686 !***********************************************************************
  14687 !*                   GNU Lesser General Public License
  14688 !*
  14689 !* This file is part of the GFDL Flexible Modeling System (FMS).
  14690 !*
  14691 !* FMS is free software: you can redistribute it and/or modify it under
  14692 !* the terms of the GNU Lesser General Public License as published by
  14693 !* the Free Software Foundation, either version 3 of the License, or (at
  14694 !* your option) any later version.
  14695 !*
  14696 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  14697 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  14698 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  14699 !* for more details.
  14700 !*
  14701 !* You should have received a copy of the GNU Lesser General Public
  14702 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  14703 !***********************************************************************
  14704 ! <SUBROUTINE NAME="MPP_SCATTER_PELIST_2D_">
  14705 !   <OVERVIEW>
  14706 !     Scatter data from one pe to the specified pes.
  14707 !   </OVERVIEW>
  14708 !   <TEMPLATE>
  14709 !     SUBROUTINE mpp_scatter_pelist_real4_2d(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
  14710 !					  ishift, jshift)
  14711 !   </TEMPLATE>
  14712 !   <DESCRIPTION>
  14713 !		   Scatter (ie - is) * (je - js) contiguous elements of array data from the designated root pe
  14714 !		   into contigous members of array segment in each pe that is included in the pelist argument.
  14715 !   </DESCRIPTION>
  14716 !   <IN NAME="is, ie" TYPE="INTEGER">Start and end index of the first dimension of the segment array</IN>
  14717 !   <IN NAME="js, je" TYPE="INTEGER">Start and end index of the second dimension of the segment array</IN>
  14718 !   <IN NAME="pelist" TYPE="INTEGER()">The PE list of of target pes, Needs to be in monotonic increasing order.
  14719 !		The root pe is allowed to be included (see input is_root_pe). If a pe is absent in this list then
  14720 !             its segment array is not updated. </IN>
  14721 !   <IN NAME="array_seg" TYPE="REAL(:)">The 2D array that the data is to be copied into</IN>
  14722 !   <IN NAME="data" TYPE="REAL(:)">The source array.</IN>
  14723 !   <IN NAME="is_root_pe" TYPE="LOGICAL" > True if the calee is root pe, false otherwise. </IN>
  14724 !   <IN NAME="ishift, jshift" TYPE="INTEGER" > Offsets specifying the first element in data array.</IN>
  14725 subroutine mpp_scatter_pelist_real4_2d(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
  14726                                   ishift, jshift)
  14727    integer,                           intent(in)    :: is, ie, js, je
  14728    integer,   dimension(:),           intent(in)    :: pelist
  14729    real(r4_kind), dimension(is:ie,js:je), intent(inout)    :: array_seg
  14730    real(r4_kind), dimension(:,:),         intent(in) :: data
  14731    logical,                           intent(in)    :: is_root_pe
  14732    integer,   optional,               intent(in)    :: ishift, jshift
  14733 

Page 620         Source Listing                  MPP_SCATTER_PELIST_REAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14734    real(r4_kind) ::  arr3D(size(array_seg,1),size(array_seg,2),1)
  14735    real(r4_kind) :: data3D(size(     data,1),size(     data,2),1)
  14736    pointer( aptr,  arr3D )
  14737    pointer( dptr, data3D )
  14738    aptr = LOC(array_seg)
  14739    dptr = LOC(     data)
  14740 
  14741    call mpp_scatter(is, ie, js, je, 1, pelist, arr3D, data3D, is_root_pe, &
  14742                     ishift, jshift)
  14743    return
  14744 
  14745 end subroutine mpp_scatter_pelist_real4_2d


ENTRY POINTS

  Name                                               
                                                     
 mpp_mod_mp_mpp_scatter_pelist_real4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 APTR                       Local  14736    I(8)            8           scalar   PTR              14738                             
 ARR3D                      Local  14734    R(4)            4     3     0                         14741                             
 ARRAY_SEG                  Dummy  14725    R(4)            4     2     0        ARG,INOUT        14734,14738                       
 DATA                       Dummy  14725    R(4)            4     2     1        ARG,IN           14735,14739                       
 DATA3D                     Local  14735    R(4)            4     3     0                         14741                             
 DPTR                       Local  14737    I(8)            8           scalar   PTR              14739                             
 IE                         Dummy  14725    I(4)            4           scalar   ARG,IN           14729,14741                       
 IS                         Dummy  14725    I(4)            4           scalar   ARG,IN           14729,14741                       
 ISHIFT                     Dummy  14726    I(4)            4           scalar   ARG,IN           14742                             
 IS_ROOT_PE                 Dummy  14725    L(4)            4           scalar   ARG,IN           14741                             
 JE                         Dummy  14725    I(4)            4           scalar   ARG,IN           14729,14741                       
 JS                         Dummy  14725    I(4)            4           scalar   ARG,IN           14729,14741                       
 JSHIFT                     Dummy  14726    I(4)            4           scalar   ARG,IN           14742                             
 LOC                        Func   14738                                scalar                    14738,14739                       
 MPP_SCATTER_PELIST_REAL4_2                                                                                                         
 D                          Subr   14725                                         PRIV                                               
 PELIST                     Dummy  14725    I(4)            4     1     1        ARG,IN           14741                             
 SIZE                       Func   14734                                scalar                    14734,14735                       

Page 621         Source Listing                  MPP_SCATTER_PELIST_REAL4_2D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14746 
  14747 
  14748 subroutine mpp_scatter_pelist_real4_3d(is, ie, js, je, nk, pelist, array_seg, data, is_root_pe, &
  14749                                   ishift, jshift)
  14750    integer,                                intent(in)    :: is, ie, js, je, nk
  14751    integer,   dimension(:),                intent(in)    :: pelist
  14752    real(r4_kind), dimension(is:ie,js:je,1:nk), intent(inout)    :: array_seg
  14753    real(r4_kind), dimension(:,:,:),            intent(in) :: data
  14754    logical,                                intent(in)    :: is_root_pe
  14755    integer,   optional,                    intent(in)    :: ishift, jshift
  14756 
  14757    integer :: i, msgsize, root_pe, root_pe_test
  14758    integer :: i1, i2, j1, j2, ioff, joff
  14759    integer :: my_ind(4), gind(4,size(pelist))
  14760    type array3D
  14761      real(r4_kind), dimension(:,:,:), allocatable :: data
  14762    endtype array3D
  14763    type(array3d), dimension(size(pelist)) :: temp
  14764 
  14765    if (.not.ANY(mpp_pe().eq.pelist(:))) return
  14766 
  14767    if (is_root_pe) then
  14768      root_pe = mpp_pe()
  14769      root_pe_test = 999
  14770      if (.not.ANY(pelist(:).eq.root_pe)) call mpp_error(FATAL, &
  14771                 "fms_io(mpp_scatter_pelist): root_pe not a member of pelist")
  14772    else
  14773      root_pe = 0
  14774      root_pe_test = -999
  14775    endif
  14776 ! need this check in case MPI-rank 0 is a member of the pelist
  14777    call mpp_max(root_pe_test, pelist)
  14778    if (root_pe_test.lt.0) call mpp_error(FATAL, &
  14779                 "fms_io(mpp_scatter_pelist): root_pe not specified or not a member of the pelist")
  14780 ! need to make sure only one root_pe has been specified
  14781    call mpp_sum(root_pe, pelist)
  14782    if ((is_root_pe) .and. (mpp_pe().ne.root_pe)) call mpp_error(FATAL, &
  14783                 "fms_io(mpp_scatter_pelist): too many root_pes specified")
  14784 
  14785 
  14786    ioff=0
  14787    joff=0
  14788    if (present(ishift)) ioff=ishift
  14789    if (present(jshift)) joff=jshift
  14790 
  14791    my_ind(1) = is
  14792    my_ind(2) = ie
  14793    my_ind(3) = js
  14794    my_ind(4) = je
  14795 
  14796 ! scatter indices into global index on root_pe
  14797    if (is_root_pe) then
  14798      do i = 1, size(pelist)
  14799 ! root_pe data copy - no send to self
  14800        if (pelist(i).eq.root_pe) then
  14801          gind(:,i) = my_ind(:)
  14802        else

Page 622         Source Listing                  MPP_SCATTER_PELIST_REAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14803          call mpp_recv(gind(:,i:i), 4, pelist(i), .FALSE., COMM_TAG_1)
  14804        endif
  14805      enddo
  14806      call mpp_sync_self(check=EVENT_RECV)
  14807      gind(1,:)=gind(1,:)+ioff
  14808      gind(2,:)=gind(2,:)+ioff
  14809      gind(3,:)=gind(3,:)+joff
  14810      gind(4,:)=gind(4,:)+joff
  14811 ! check indices to make sure they are within the range of "data"
  14812      if ((minval(gind).lt.1) .OR. (maxval(gind(1:2,:)).gt.size(data,1)) .OR. (maxval(gind(3:4,:)).gt.size(data,2))) &
  14813          call mpp_error(FATAL,"fms_io(mpp_scatter_pelist): specified indices (with shift) are outside of the &
  14814                         &range of the receiving array")
  14815    else
  14816 ! non root_pe's send indices to root_pe
  14817      call mpp_send(my_ind(:), 4, root_pe, COMM_TAG_1)
  14818      call mpp_sync_self(check=EVENT_SEND)
  14819    endif
  14820 
  14821 !  scatter segments into data based on indices
  14822    if (is_root_pe) then
  14823      do i = 1, size(pelist)
  14824        if (pelist(i).ne.root_pe) then    ! no send to self
  14825          i1 = gind(1,i)
  14826          i2 = gind(2,i)
  14827          j1 = gind(3,i)
  14828          j2 = gind(4,i)
  14829          msgsize = (i2-i1+1)*(j2-j1+1)*nk
  14830 ! allocate and copy data into a contiguous memory space
  14831          allocate(temp(i)%data(i1:i2,j1:j2,1:nk))
  14832          temp(i)%data(i1:i2,j1:j2,1:nk)=data(i1:i2,j1:j2,1:nk)
  14833          call mpp_send(temp(i)%data, msgsize, pelist(i), COMM_TAG_2)
  14834        else
  14835 !        data copy - no send to self
  14836          array_seg(is:ie,js:je,1:nk) = data(is+ioff:ie+ioff,js+joff:je+joff,1:nk)
  14837        endif
  14838      enddo
  14839      call mpp_sync_self(check=EVENT_SEND)
  14840 ! deallocate the temporary array used for the send
  14841      do i = 1, size(pelist)
  14842        if (allocated(temp(i)%data)) deallocate(temp(i)%data)
  14843      enddo
  14844    else
  14845 !    non root_pe's recv data from root_pe
  14846      msgsize = (my_ind(2)-my_ind(1)+1) * (my_ind(4)-my_ind(3)+1) * nk
  14847      call mpp_recv(array_seg, msgsize, root_pe, .FALSE., COMM_TAG_2)
  14848      call mpp_sync_self(check=EVENT_RECV)
  14849    endif
  14850 
  14851    call mpp_sync_self()
  14852 
  14853    return
  14854 
  14855 end subroutine mpp_scatter_pelist_real4_3d

Page 623         Source Listing                  MPP_SCATTER_PELIST_REAL4_3D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_scatter.h



ENTRY POINTS

  Name                                               
                                                     
 mpp_mod_mp_mpp_scatter_pelist_real4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   14842                                scalar                    14842                             
 ANY                        Func   14765                                scalar                    14765,14770                       
 ARRAY3D                    Type   14760                    120         scalar   PRIV             14762,14763                       
 ARRAY_SEG                  Dummy  14748    R(4)            4     3     0        ARG,INOUT        14836,14847                       
 DATA                       Dummy  14748    R(4)            4     3     1        ARG,IN           14812,14832,14836                 
 GIND                       Local  14759    I(4)            4     2     0                         14801,14803,14807,14808,14809,1481
                                                                                                  0,14812,14825,14826,14827,14828   
 I                          Local  14757    I(4)            4           scalar                    14798,14800,14801,14803,14823,1482
                                                                                                  4,14825,14826,14827,14828,14831,14
                                                                                                  832,14833,14841,14842             
 I1                         Local  14758    I(4)            4           scalar                    14825,14829,14831,14832           
 I2                         Local  14758    I(4)            4           scalar                    14826,14829,14831,14832           
 IE                         Dummy  14748    I(4)            4           scalar   ARG,IN           14752,14792,14836                 
 IOFF                       Local  14758    I(4)            4           scalar                    14786,14788,14807,14808,14836     
 IS                         Dummy  14748    I(4)            4           scalar   ARG,IN           14752,14791,14836                 
 ISHIFT                     Dummy  14749    I(4)            4           scalar   ARG,IN           14788                             
 IS_ROOT_PE                 Dummy  14748    L(4)            4           scalar   ARG,IN           14767,14782,14797,14822           
 J1                         Local  14758    I(4)            4           scalar                    14827,14829,14831,14832           
 J2                         Local  14758    I(4)            4           scalar                    14828,14829,14831,14832           
 JE                         Dummy  14748    I(4)            4           scalar   ARG,IN           14752,14794,14836                 
 JOFF                       Local  14758    I(4)            4           scalar                    14787,14789,14809,14810,14836     
 JS                         Dummy  14748    I(4)            4           scalar   ARG,IN           14752,14793,14836                 
 JSHIFT                     Dummy  14749    I(4)            4           scalar   ARG,IN           14789                             
 MAXVAL                     Func   14812                                scalar                    14812                             
 MINVAL                     Func   14812                                scalar                    14812                             
 MPP_SCATTER_PELIST_REAL4_3                                                                                                         
 D                          Subr   14748                                         PRIV             14741                             
 MSGSIZE                    Local  14757    I(4)            4           scalar                    14829,14833,14846,14847           
 MY_IND                     Local  14759    I(4)            4     1     4                         14791,14792,14793,14794,14801,1481
                                                                                                  7,14846                           
 NK                         Dummy  14748    I(4)            4           scalar   ARG,IN           14752,14829,14831,14832,14836,1484
                                                                                                  6                                 
 PELIST                     Dummy  14748    I(4)            4     1     1        ARG,IN           14759,14763,14765,14770,14777,1478
                                                                                                  1,14798,14800,14803,14823,14824,14
                                                                                                  833,14841                         
 PRESENT                    Func   14788                                scalar                    14788,14789                       
 ROOT_PE                    Local  14757    I(4)            4           scalar                    14768,14770,14773,14781,14782,1480
                                                                                                  0,14817,14824,14847               
 ROOT_PE_TEST               Local  14757    I(4)            4           scalar                    14769,14774,14777,14778           
 SIZE                       Func   14759                                scalar                    14759,14763,14798,14812,14823,1484
                                                                                                  1                                 
 TEMP                       Local  14763    RECORD          120   1     0                         14831,14832,14833,14842           



Page 624         Source Listing                  MPP_SCATTER_PELIST_REAL4_3D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_scatter.h

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ARRAY3D.DATA               R(4)            4     0        3     1        ALC              14831,14832,14833,14842            

Page 625         Source Listing                  MPP_SCATTER_PELIST_REAL4_3D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14856 # 435 "../mpp/include/mpp_comm.inc" 2 
  14857 
  14858 
  14859 
  14860 
  14861 
  14862 
  14863 
  14864 # 1 "../mpp/include/mpp_scatter.h" 1 
  14865 !***********************************************************************
  14866 !*                   GNU Lesser General Public License
  14867 !*
  14868 !* This file is part of the GFDL Flexible Modeling System (FMS).
  14869 !*
  14870 !* FMS is free software: you can redistribute it and/or modify it under
  14871 !* the terms of the GNU Lesser General Public License as published by
  14872 !* the Free Software Foundation, either version 3 of the License, or (at
  14873 !* your option) any later version.
  14874 !*
  14875 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  14876 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  14877 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  14878 !* for more details.
  14879 !*
  14880 !* You should have received a copy of the GNU Lesser General Public
  14881 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  14882 !***********************************************************************
  14883 ! <SUBROUTINE NAME="MPP_SCATTER_PELIST_2D_">
  14884 !   <OVERVIEW>
  14885 !     Scatter data from one pe to the specified pes.
  14886 !   </OVERVIEW>
  14887 !   <TEMPLATE>
  14888 !     SUBROUTINE mpp_scatter_pelist_real8_2d(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
  14889 !					  ishift, jshift)
  14890 !   </TEMPLATE>
  14891 !   <DESCRIPTION>
  14892 !		   Scatter (ie - is) * (je - js) contiguous elements of array data from the designated root pe
  14893 !		   into contigous members of array segment in each pe that is included in the pelist argument.
  14894 !   </DESCRIPTION>
  14895 !   <IN NAME="is, ie" TYPE="INTEGER">Start and end index of the first dimension of the segment array</IN>
  14896 !   <IN NAME="js, je" TYPE="INTEGER">Start and end index of the second dimension of the segment array</IN>
  14897 !   <IN NAME="pelist" TYPE="INTEGER()">The PE list of of target pes, Needs to be in monotonic increasing order.
  14898 !		The root pe is allowed to be included (see input is_root_pe). If a pe is absent in this list then
  14899 !             its segment array is not updated. </IN>
  14900 !   <IN NAME="array_seg" TYPE="REAL(:)">The 2D array that the data is to be copied into</IN>
  14901 !   <IN NAME="data" TYPE="REAL(:)">The source array.</IN>
  14902 !   <IN NAME="is_root_pe" TYPE="LOGICAL" > True if the calee is root pe, false otherwise. </IN>
  14903 !   <IN NAME="ishift, jshift" TYPE="INTEGER" > Offsets specifying the first element in data array.</IN>
  14904 subroutine mpp_scatter_pelist_real8_2d(is, ie, js, je, pelist, array_seg, data, is_root_pe, &
  14905                                   ishift, jshift)
  14906    integer,                           intent(in)    :: is, ie, js, je
  14907    integer,   dimension(:),           intent(in)    :: pelist
  14908    real(r8_kind), dimension(is:ie,js:je), intent(inout)    :: array_seg
  14909    real(r8_kind), dimension(:,:),         intent(in) :: data
  14910    logical,                           intent(in)    :: is_root_pe
  14911    integer,   optional,               intent(in)    :: ishift, jshift
  14912 

Page 626         Source Listing                  MPP_SCATTER_PELIST_REAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14913    real(r8_kind) ::  arr3D(size(array_seg,1),size(array_seg,2),1)
  14914    real(r8_kind) :: data3D(size(     data,1),size(     data,2),1)
  14915    pointer( aptr,  arr3D )
  14916    pointer( dptr, data3D )
  14917    aptr = LOC(array_seg)
  14918    dptr = LOC(     data)
  14919 
  14920    call mpp_scatter(is, ie, js, je, 1, pelist, arr3D, data3D, is_root_pe, &
  14921                     ishift, jshift)
  14922    return
  14923 
  14924 end subroutine mpp_scatter_pelist_real8_2d


ENTRY POINTS

  Name                                               
                                                     
 mpp_mod_mp_mpp_scatter_pelist_real8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 APTR                       Local  14915    I(8)            8           scalar   PTR              14917                             
 ARR3D                      Local  14913    R(8)            8     3     0                         14920                             
 ARRAY_SEG                  Dummy  14904    R(8)            8     2     0        ARG,INOUT        14913,14917                       
 DATA                       Dummy  14904    R(8)            8     2     1        ARG,IN           14914,14918                       
 DATA3D                     Local  14914    R(8)            8     3     0                         14920                             
 DPTR                       Local  14916    I(8)            8           scalar   PTR              14918                             
 IE                         Dummy  14904    I(4)            4           scalar   ARG,IN           14908,14920                       
 IS                         Dummy  14904    I(4)            4           scalar   ARG,IN           14908,14920                       
 ISHIFT                     Dummy  14905    I(4)            4           scalar   ARG,IN           14921                             
 IS_ROOT_PE                 Dummy  14904    L(4)            4           scalar   ARG,IN           14920                             
 JE                         Dummy  14904    I(4)            4           scalar   ARG,IN           14908,14920                       
 JS                         Dummy  14904    I(4)            4           scalar   ARG,IN           14908,14920                       
 JSHIFT                     Dummy  14905    I(4)            4           scalar   ARG,IN           14921                             
 LOC                        Func   14917                                scalar                    14917,14918                       
 MPP_SCATTER_PELIST_REAL8_2                                                                                                         
 D                          Subr   14904                                         PRIV                                               
 PELIST                     Dummy  14904    I(4)            4     1     1        ARG,IN           14920                             
 SIZE                       Func   14913                                scalar                    14913,14914                       

Page 627         Source Listing                  MPP_SCATTER_PELIST_REAL8_2D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14925 
  14926 
  14927 subroutine mpp_scatter_pelist_real8_3d(is, ie, js, je, nk, pelist, array_seg, data, is_root_pe, &
  14928                                   ishift, jshift)
  14929    integer,                                intent(in)    :: is, ie, js, je, nk
  14930    integer,   dimension(:),                intent(in)    :: pelist
  14931    real(r8_kind), dimension(is:ie,js:je,1:nk), intent(inout)    :: array_seg
  14932    real(r8_kind), dimension(:,:,:),            intent(in) :: data
  14933    logical,                                intent(in)    :: is_root_pe
  14934    integer,   optional,                    intent(in)    :: ishift, jshift
  14935 
  14936    integer :: i, msgsize, root_pe, root_pe_test
  14937    integer :: i1, i2, j1, j2, ioff, joff
  14938    integer :: my_ind(4), gind(4,size(pelist))
  14939    type array3D
  14940      real(r8_kind), dimension(:,:,:), allocatable :: data
  14941    endtype array3D
  14942    type(array3d), dimension(size(pelist)) :: temp
  14943 
  14944    if (.not.ANY(mpp_pe().eq.pelist(:))) return
  14945 
  14946    if (is_root_pe) then
  14947      root_pe = mpp_pe()
  14948      root_pe_test = 999
  14949      if (.not.ANY(pelist(:).eq.root_pe)) call mpp_error(FATAL, &
  14950                 "fms_io(mpp_scatter_pelist): root_pe not a member of pelist")
  14951    else
  14952      root_pe = 0
  14953      root_pe_test = -999
  14954    endif
  14955 ! need this check in case MPI-rank 0 is a member of the pelist
  14956    call mpp_max(root_pe_test, pelist)
  14957    if (root_pe_test.lt.0) call mpp_error(FATAL, &
  14958                 "fms_io(mpp_scatter_pelist): root_pe not specified or not a member of the pelist")
  14959 ! need to make sure only one root_pe has been specified
  14960    call mpp_sum(root_pe, pelist)
  14961    if ((is_root_pe) .and. (mpp_pe().ne.root_pe)) call mpp_error(FATAL, &
  14962                 "fms_io(mpp_scatter_pelist): too many root_pes specified")
  14963 
  14964 
  14965    ioff=0
  14966    joff=0
  14967    if (present(ishift)) ioff=ishift
  14968    if (present(jshift)) joff=jshift
  14969 
  14970    my_ind(1) = is
  14971    my_ind(2) = ie
  14972    my_ind(3) = js
  14973    my_ind(4) = je
  14974 
  14975 ! scatter indices into global index on root_pe
  14976    if (is_root_pe) then
  14977      do i = 1, size(pelist)
  14978 ! root_pe data copy - no send to self
  14979        if (pelist(i).eq.root_pe) then
  14980          gind(:,i) = my_ind(:)
  14981        else

Page 628         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  14982          call mpp_recv(gind(:,i:i), 4, pelist(i), .FALSE., COMM_TAG_1)
  14983        endif
  14984      enddo
  14985      call mpp_sync_self(check=EVENT_RECV)
  14986      gind(1,:)=gind(1,:)+ioff
  14987      gind(2,:)=gind(2,:)+ioff
  14988      gind(3,:)=gind(3,:)+joff
  14989      gind(4,:)=gind(4,:)+joff
  14990 ! check indices to make sure they are within the range of "data"
  14991      if ((minval(gind).lt.1) .OR. (maxval(gind(1:2,:)).gt.size(data,1)) .OR. (maxval(gind(3:4,:)).gt.size(data,2))) &
  14992          call mpp_error(FATAL,"fms_io(mpp_scatter_pelist): specified indices (with shift) are outside of the &
  14993                         &range of the receiving array")
  14994    else
  14995 ! non root_pe's send indices to root_pe
  14996      call mpp_send(my_ind(:), 4, root_pe, COMM_TAG_1)
  14997      call mpp_sync_self(check=EVENT_SEND)
  14998    endif
  14999 
  15000 !  scatter segments into data based on indices
  15001    if (is_root_pe) then
  15002      do i = 1, size(pelist)
  15003        if (pelist(i).ne.root_pe) then    ! no send to self
  15004          i1 = gind(1,i)
  15005          i2 = gind(2,i)
  15006          j1 = gind(3,i)
  15007          j2 = gind(4,i)
  15008          msgsize = (i2-i1+1)*(j2-j1+1)*nk
  15009 ! allocate and copy data into a contiguous memory space
  15010          allocate(temp(i)%data(i1:i2,j1:j2,1:nk))
  15011          temp(i)%data(i1:i2,j1:j2,1:nk)=data(i1:i2,j1:j2,1:nk)
  15012          call mpp_send(temp(i)%data, msgsize, pelist(i), COMM_TAG_2)
  15013        else
  15014 !        data copy - no send to self
  15015          array_seg(is:ie,js:je,1:nk) = data(is+ioff:ie+ioff,js+joff:je+joff,1:nk)
  15016        endif
  15017      enddo
  15018      call mpp_sync_self(check=EVENT_SEND)
  15019 ! deallocate the temporary array used for the send
  15020      do i = 1, size(pelist)
  15021        if (allocated(temp(i)%data)) deallocate(temp(i)%data)
  15022      enddo
  15023    else
  15024 !    non root_pe's recv data from root_pe
  15025      msgsize = (my_ind(2)-my_ind(1)+1) * (my_ind(4)-my_ind(3)+1) * nk
  15026      call mpp_recv(array_seg, msgsize, root_pe, .FALSE., COMM_TAG_2)
  15027      call mpp_sync_self(check=EVENT_RECV)
  15028    endif
  15029 
  15030    call mpp_sync_self()
  15031 
  15032    return
  15033 
  15034 end subroutine mpp_scatter_pelist_real8_3d

Page 629         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Entry Points                    ../mpp/include/mpp_scatter.h



ENTRY POINTS

  Name                                               
                                                     
 mpp_mod_mp_mpp_scatter_pelist_real8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   15021                                scalar                    15021                             
 ANY                        Func   14944                                scalar                    14944,14949                       
 ARRAY3D                    Type   14939                    120         scalar   PRIV             14941,14942                       
 ARRAY_SEG                  Dummy  14927    R(8)            8     3     0        ARG,INOUT        15015,15026                       
 DATA                       Dummy  14927    R(8)            8     3     1        ARG,IN           14991,15011,15015                 
 GIND                       Local  14938    I(4)            4     2     0                         14980,14982,14986,14987,14988,1498
                                                                                                  9,14991,15004,15005,15006,15007   
 I                          Local  14936    I(4)            4           scalar                    14977,14979,14980,14982,15002,1500
                                                                                                  3,15004,15005,15006,15007,15010,15
                                                                                                  011,15012,15020,15021             
 I1                         Local  14937    I(4)            4           scalar                    15004,15008,15010,15011           
 I2                         Local  14937    I(4)            4           scalar                    15005,15008,15010,15011           
 IE                         Dummy  14927    I(4)            4           scalar   ARG,IN           14931,14971,15015                 
 IOFF                       Local  14937    I(4)            4           scalar                    14965,14967,14986,14987,15015     
 IS                         Dummy  14927    I(4)            4           scalar   ARG,IN           14931,14970,15015                 
 ISHIFT                     Dummy  14928    I(4)            4           scalar   ARG,IN           14967                             
 IS_ROOT_PE                 Dummy  14927    L(4)            4           scalar   ARG,IN           14946,14961,14976,15001           
 J1                         Local  14937    I(4)            4           scalar                    15006,15008,15010,15011           
 J2                         Local  14937    I(4)            4           scalar                    15007,15008,15010,15011           
 JE                         Dummy  14927    I(4)            4           scalar   ARG,IN           14931,14973,15015                 
 JOFF                       Local  14937    I(4)            4           scalar                    14966,14968,14988,14989,15015     
 JS                         Dummy  14927    I(4)            4           scalar   ARG,IN           14931,14972,15015                 
 JSHIFT                     Dummy  14928    I(4)            4           scalar   ARG,IN           14968                             
 MAXVAL                     Func   14991                                scalar                    14991                             
 MINVAL                     Func   14991                                scalar                    14991                             
 MPP_SCATTER_PELIST_REAL8_3                                                                                                         
 D                          Subr   14927                                         PRIV             14920                             
 MSGSIZE                    Local  14936    I(4)            4           scalar                    15008,15012,15025,15026           
 MY_IND                     Local  14938    I(4)            4     1     4                         14970,14971,14972,14973,14980,1499
                                                                                                  6,15025                           
 NK                         Dummy  14927    I(4)            4           scalar   ARG,IN           14931,15008,15010,15011,15015,1502
                                                                                                  5                                 
 PELIST                     Dummy  14927    I(4)            4     1     1        ARG,IN           14938,14942,14944,14949,14956,1496
                                                                                                  0,14977,14979,14982,15002,15003,15
                                                                                                  012,15020                         
 PRESENT                    Func   14967                                scalar                    14967,14968                       
 ROOT_PE                    Local  14936    I(4)            4           scalar                    14947,14949,14952,14960,14961,1497
                                                                                                  9,14996,15003,15026               
 ROOT_PE_TEST               Local  14936    I(4)            4           scalar                    14948,14953,14956,14957           
 SIZE                       Func   14938                                scalar                    14938,14942,14977,14991,15002,1502
                                                                                                  0                                 
 TEMP                       Local  14942    RECORD          120   1     0                         15010,15011,15012,15021           



Page 630         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Symbol Table                    ../mpp/include/mpp_scatter.h

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ARRAY3D.DATA               R(8)            8     0        3     1        ALC              15010,15011,15012,15021            

Page 631         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51                                 ../mpp/include/mpp_scatter.h

  15035 # 443 "../mpp/include/mpp_comm.inc" 2 
  15036 
  15037 # 1303 "mpp.F90" 2 
  15038 
  15039   end module mpp_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOCK                      Type   251                      152         scalar                    263,1132                          
 CLOCK_COMPONENT            Param  170      I(4)            4           scalar                    170,195                           
 CLOCK_DATA_SUMMARY         Type   265                      520         scalar                    274,279                           
 CLOCK_INFRA                Param  171      I(4)            4           scalar                    171,196                           
 CLOCK_LOOP                 Param  171      I(4)            4           scalar                    171,196,1165                      
 CLOCK_MODULE               Param  171      I(4)            4           scalar                    171,196                           
 CLOCK_MODULE_DRIVER        Param  170      I(4)            4           scalar                    170,196                           
 CLOCK_ROUTINE              Param  171      I(4)            4           scalar                    171,196                           
 CLOCK_SUBCOMPONENT         Param  170      I(4)            4           scalar                    170,195                           
 COMM_TAG_10                Param  181      I(4)            4           scalar                    181,200                           
 COMM_TAG_11                Param  181      I(4)            4           scalar                    181,200                           
 COMM_TAG_12                Param  181      I(4)            4           scalar                    181,200                           
 COMM_TAG_13                Param  182      I(4)            4           scalar                    182,201                           
 COMM_TAG_14                Param  182      I(4)            4           scalar                    182,201                           
 COMM_TAG_15                Param  182      I(4)            4           scalar                    182,201                           
 COMM_TAG_16                Param  182      I(4)            4           scalar                    182,201                           
 COMM_TAG_17                Param  183      I(4)            4           scalar                    183,202                           
 COMM_TAG_18                Param  183      I(4)            4           scalar                    183,202                           
 COMM_TAG_19                Param  183      I(4)            4           scalar                    183,202                           
 COMM_TAG_20                Param  183      I(4)            4           scalar                    183,202                           
 COMM_TAG_3                 Param  179      I(4)            4           scalar                    179,198                           
 COMM_TAG_4                 Param  179      I(4)            4           scalar                    179,198                           
 COMM_TAG_5                 Param  180      I(4)            4           scalar                    180,199                           
 COMM_TAG_6                 Param  180      I(4)            4           scalar                    180,199                           
 COMM_TAG_7                 Param  180      I(4)            4           scalar                    180,199                           
 COMM_TAG_8                 Param  180      I(4)            4           scalar                    180,199                           
 COMM_TAG_9                 Param  181      I(4)            4           scalar                    181,200                           
 ERROR_UNIT                 Param  167      I(4)            4           scalar   PRIV             167,1158                          
 EVENT                      Type   243                      64002       scalar                    248,260                           
                                                            4                                                                       
 GET_ASCII_FILE_NUM_LINES@0 Local  3371     I(4)            4           scalar                                                      
 GET_LEN_NOCOMM             Local  1172     I(4)            4           scalar                    1172                              
 GET_PESET@0                Local  1394     I(4)            4           scalar                                                      
 INPUT_STR_LENGTH           Param  1190     I(4)            4           scalar                    197                               
 INPUT_UNIT                 Param  167      I(4)            4           scalar   PRIV             167,1158                          
 ISO_FORTRAN_ENV            Module 167                                                            167                               
 LOWERCASE@0                Local  3245     CHAR                        scalar   TGT                                                
 MAXPES                     Param  173      I(4)            4           scalar                    173,197                           
 MPI                        Module 164                                                            164                               
 MPP_ALLTOALL               Local  706                                  scalar                    225                               
 MPP_CHKSUM_I4_1D@0         Local  12302    I(8)            8           scalar                                                      
 MPP_CHKSUM_I4_1D_RMASK@0   Local  12325    I(8)            8           scalar                                                      
 MPP_CHKSUM_I4_2D@0         Local  12420    I(8)            8           scalar                                                      
 MPP_CHKSUM_I4_2D_RMASK@0   Local  12443    I(8)            8           scalar                                                      
 MPP_CHKSUM_I4_3D@0         Local  12538    I(8)            8           scalar                                                      
 MPP_CHKSUM_I4_3D_RMASK@0   Local  12561    I(8)            8           scalar                                                      

Page 632         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Symbol Table                    mpp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_CHKSUM_I4_4D@0         Local  12656    I(8)            8           scalar                                                      
 MPP_CHKSUM_I4_4D_RMASK@0   Local  12679    I(8)            8           scalar                                                      
 MPP_CHKSUM_I4_5D@0         Local  12774    I(8)            8           scalar                                                      
 MPP_CHKSUM_I4_5D_RMASK@0   Local  12797    I(8)            8           scalar                                                      
 MPP_CHKSUM_I8_1D@0         Local  11712    I(8)            8           scalar                                                      
 MPP_CHKSUM_I8_1D_RMASK@0   Local  11735    I(8)            8           scalar                                                      
 MPP_CHKSUM_I8_2D@0         Local  11830    I(8)            8           scalar                                                      
 MPP_CHKSUM_I8_2D_RMASK@0   Local  11853    I(8)            8           scalar                                                      
 MPP_CHKSUM_I8_3D@0         Local  11948    I(8)            8           scalar                                                      
 MPP_CHKSUM_I8_3D_RMASK@0   Local  11971    I(8)            8           scalar                                                      
 MPP_CHKSUM_I8_4D@0         Local  12066    I(8)            8           scalar                                                      
 MPP_CHKSUM_I8_4D_RMASK@0   Local  12089    I(8)            8           scalar                                                      
 MPP_CHKSUM_I8_5D@0         Local  12184    I(8)            8           scalar                                                      
 MPP_CHKSUM_I8_5D_RMASK@0   Local  12207    I(8)            8           scalar                                                      
 MPP_CHKSUM_R4_0D@0         Local  13194    I(8)            8           scalar                                                      
 MPP_CHKSUM_R4_1D@0         Local  13245    I(8)            8           scalar                                                      
 MPP_CHKSUM_R4_2D@0         Local  13295    I(8)            8           scalar                                                      
 MPP_CHKSUM_R4_3D@0         Local  13345    I(8)            8           scalar                                                      
 MPP_CHKSUM_R4_4D@0         Local  13395    I(8)            8           scalar                                                      
 MPP_CHKSUM_R4_5D@0         Local  13445    I(8)            8           scalar                                                      
 MPP_CHKSUM_R8_0D@0         Local  12890    I(8)            8           scalar                                                      
 MPP_CHKSUM_R8_1D@0         Local  12941    I(8)            8           scalar                                                      
 MPP_CHKSUM_R8_2D@0         Local  12991    I(8)            8           scalar                                                      
 MPP_CHKSUM_R8_3D@0         Local  13041    I(8)            8           scalar                                                      
 MPP_CHKSUM_R8_4D@0         Local  13091    I(8)            8           scalar                                                      
 MPP_CHKSUM_R8_5D@0         Local  13141    I(8)            8           scalar                                                      
 MPP_CLOCK_DETAILED         Param  169      I(4)            4           scalar                    169,195                           
 MPP_CLOCK_ID@0             Local  2775     I(4)            4           scalar                                                      
 MPP_CLOCK_SET_GRAIN        Subr   216                                                            216                               
 MPP_DATA_MOD               Module 185                                                            185,186,187                       
 MPP_DECLARE_PELIST         Subr   214                                                            214                               
 MPP_ERROR_STATE@0          Local  1693     I(4)            4           scalar                                                      
 MPP_EXIT                   Subr   224                                                            224                               
 MPP_FROM_PE                Param  186      I(4)            4           scalar   PRIV             186                               
 MPP_GET_CURRENT_PELIST     Subr   215                                                            215                               
 MPP_GET_CURRENT_PELIST_NAM                                                                                                         
 E@0                        Local  2576     CHAR            32          scalar                                                      
 MPP_INIT                   Subr   224                                                            224                               
 MPP_INIT_TEST_CLOCKS_INIT  Param  1178     I(4)            4           scalar                    205                               
 MPP_INIT_TEST_DATATYPE_LIS                                                                                                         
 T_INIT                     Param  1179     I(4)            4           scalar                    205                               
 MPP_INIT_TEST_ETC_UNIT     Param  1182     I(4)            4           scalar                    206                               
 MPP_INIT_TEST_FULL_INIT    Param  1175     I(4)            4           scalar                    204                               
 MPP_INIT_TEST_INIT_TRUE_ON                                                                                                         
 LY                         Param  1176     I(4)            4           scalar                    204                               
 MPP_INIT_TEST_LOGFILE_INIT Param  1180     I(4)            4           scalar                    205                               
 MPP_INIT_TEST_PESET_ALLOCA                                                                                                         
 TED                        Param  1177     I(4)            4           scalar                    204                               
 MPP_INIT_TEST_READ_NAMELIS                                                                                                         
 T                          Param  1181     I(4)            4           scalar                    206                               
 MPP_INIT_TEST_REQUESTS_ALL                                                                                                         
 OCATED                     Param  1183     I(4)            4           scalar                    206                               
 MPP_MOD                    Module 27                                                                                               
 MPP_NPES@0                 Local  2444     I(4)            4           scalar                                                      
 MPP_PARAMETER_MOD          Module 168                                                            168,169,170,171,172,173,174,175,17

Page 633         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Symbol Table                    mpp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  6,177,178,179,180,181,182,183,184 
 MPP_PE@0                   Local  2423     I(4)            4           scalar                                                      
 MPP_READY                  Param  176      I(8)            8           scalar   PRIV             176                               
 MPP_RECORD_TIME_END        Subr   219                                                            219                               
 MPP_RECORD_TIME_START      Subr   219                                                            219                               
 MPP_SET_STACK_SIZE         Subr   213                                                            213                               
 MPP_SET_WARN_LEVEL         Subr   213                                                            213                               
 MPP_TYPE_CREATE            Local  503                                  scalar                    226                               
 MPP_TYPE_LIST              Type   298                      24          scalar                    303,1141                          
 MPP_WAIT                   Param  176      I(8)            8           scalar   PRIV             176                               
 OUTPUT_UNIT                Param  167      I(4)            4           scalar   PRIV             167,1158                          
 PLATFORM_MOD               Module 188                                                            188                               
 PTR_FROM                   Param  186      I(4)            4           scalar   PRIV             186                               
 PTR_REMOTE                 Param  186      I(4)            4           scalar   PRIV             186                               
 PTR_STACK                  Param  185      I(4)            4           scalar   PRIV             185                               
 PTR_STATUS                 Param  185      I(4)            4           scalar   PRIV             185                               
 PTR_SYNC                   Param  185      I(4)            4           scalar   PRIV             185                               
 REMOTE_DATA_LOC            Param  186      I(4)            4           scalar   PRIV             186                               
 STATUS                     Param  185      I(4)            4           scalar   PRIV             185                               
 STDIN@0                    Local  1557     I(4)            4           scalar                                                      
 STDOUT@0                   Local  1575     I(4)            4           scalar                                                      
 SUMMARY_STRUCT             Type   276                      2616        scalar                    280,1162                          
 SYNC                       Param  185      I(4)            4           scalar   PRIV             185                               
 UPPERCASE@0                Local  3224     CHAR                        scalar   TGT                                                

Page 634         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Subprograms/Common Blocks       mpp.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOCK_INIT                 Subr   2724                                                           2797,2807                         
 DUMP_CLOCK_SUMMARY         Subr   2935                                                           3899                              
 EXPAND_PESET               Subr   3168                                                           1430                              
 FIND_BIN                   Func   3148     I(4)            4           scalar                    3105,3159                         
 GET_ASCII_FILE_NUM_LINES   Func   3371     I(4)            4           scalar                                                      
 GET_ASCII_FILE_NUM_LINES_A                                                                                                         
 ND_LENGTH                  Func   3434     I(4)            4     1     2                                                           
 GET_PESET                  Func   1394     I(4)            4           scalar                    1403,1424,1441,1458,2520,2565,3740
                                                                                                  ,4026,4283,4911,5539,6164,6789,741
                                                                                                  4,7855,7875,7928,7948,8001,8021,80
                                                                                                  74,8094,8147,8167,8220,8240,8293,8
                                                                                                  313,8366,8386,8448,8610,8772,8931,
                                                                                                  9093,9257,9421,9582,9740,9770,9802
                                                                                                  ,9872,9902,9934,10004,10034,10066,
                                                                                                  10136,10166,10198,10268,10298,1033
                                                                                                  0,10400,10430,10462,10532,10562,10
                                                                                                  594,10664,10694,10726             
 GET_UNIT                   Func   3067     I(4)            4           scalar                                                      
 IARRAY_TO_CHAR             Func   2368     CHAR            256         scalar                    1739,1790,1791,1831,1873          
 INCREMENT_CURRENT_CLOCK    Subr   2901                                                           1463,1538,4050,4197,4247,4252,4303
                                                                                                  ,4825,4875,4880,4931,5453,5503,550
                                                                                                  8,5559,6078,6128,6133,6184,6703,67
                                                                                                  53,6758,6809,7328,7378,7383,7434,7
                                                                                                  861,7881,7934,7954,8007,8027,8080,
                                                                                                  8100,8153,8173,8226,8246,8299,8319
                                                                                                  ,8372,8392,8458,8620,8782,8941,910
                                                                                                  2,9266,9430,9591,9751,9781,9824,98
                                                                                                  83,9913,9956,10015,10045,10088,101
                                                                                                  47,10177,10220,10279,10309,10352,1
                                                                                                  0411,10441,10484,10543,10573,10616
                                                                                                  ,10675,10705,10748,10864,10974,110
                                                                                                  84,11194,11304,11414,11524,11634,1
                                                                                                  1677                              
 LOWERCASE                  Func   3245     CHAR                        scalar   TGT                                                
 MPP_ALLTOALL_CMPLX4        Subr   10257                                                                                            
 MPP_ALLTOALL_CMPLX4_V      Subr   10284                                                                                            
 MPP_ALLTOALL_CMPLX4_W      Subr   10314                                                                                            
 MPP_ALLTOALL_CMPLX8        Subr   10389                                                                                            
 MPP_ALLTOALL_CMPLX8_V      Subr   10416                                                                                            
 MPP_ALLTOALL_CMPLX8_W      Subr   10446                                                                                            
 MPP_ALLTOALL_INT4          Subr   9729                                          PRIV                                               
 MPP_ALLTOALL_INT4_V        Subr   9756                                          PRIV                                               
 MPP_ALLTOALL_INT4_W        Subr   9786                                          PRIV                                               
 MPP_ALLTOALL_INT8          Subr   9861                                          PRIV                                               
 MPP_ALLTOALL_INT8_V        Subr   9888                                          PRIV                                               
 MPP_ALLTOALL_INT8_W        Subr   9918                                          PRIV                                               
 MPP_ALLTOALL_LOGICAL4      Subr   10521                                         PRIV                                               
 MPP_ALLTOALL_LOGICAL4_V    Subr   10548                                         PRIV                                               
 MPP_ALLTOALL_LOGICAL4_W    Subr   10578                                         PRIV                                               
 MPP_ALLTOALL_LOGICAL8      Subr   10653                                         PRIV                                               
 MPP_ALLTOALL_LOGICAL8_V    Subr   10680                                         PRIV                                               

Page 635         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Subprograms/Common Blocks       mpp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_ALLTOALL_LOGICAL8_W    Subr   10710                                         PRIV                                               
 MPP_ALLTOALL_REAL4         Subr   9993                                          PRIV                                               
 MPP_ALLTOALL_REAL4_V       Subr   10020                                         PRIV                                               
 MPP_ALLTOALL_REAL4_W       Subr   10050                                         PRIV                                               
 MPP_ALLTOALL_REAL8         Subr   10125                                         PRIV                                               
 MPP_ALLTOALL_REAL8_V       Subr   10152                                         PRIV                                               
 MPP_ALLTOALL_REAL8_W       Subr   10182                                         PRIV                                               
 MPP_BROADCAST_CHAR         Subr   4017                                          PRIV             3636                              
 MPP_BROADCAST_INT4         Subr   6154                                          PRIV             6090,6489,6505,6521,6537,6553,9590
 MPP_BROADCAST_INT4_2D      Subr   6494                                          PRIV                                               
 MPP_BROADCAST_INT4_3D      Subr   6510                                          PRIV                                               
 MPP_BROADCAST_INT4_4D      Subr   6526                                          PRIV                                               
 MPP_BROADCAST_INT4_5D      Subr   6542                                          PRIV                                               
 MPP_BROADCAST_INT4_SCALAR  Subr   6480                                          PRIV             3427,3495,3496                    
 MPP_BROADCAST_INT8         Subr   5529                                          PRIV             5465,5864,5880,5896,5912,5928,9429
 MPP_BROADCAST_INT8_2D      Subr   5869                                          PRIV                                               
 MPP_BROADCAST_INT8_3D      Subr   5885                                          PRIV                                               
 MPP_BROADCAST_INT8_4D      Subr   5901                                          PRIV                                               
 MPP_BROADCAST_INT8_5D      Subr   5917                                          PRIV                                               
 MPP_BROADCAST_INT8_SCALAR  Subr   5855                                          PRIV                                               
 MPP_BROADCAST_LOGICAL4     Subr   7404                                          PRIV             7340,7739,7755,7771,7787,7803     
 MPP_BROADCAST_LOGICAL4_2D  Subr   7744                                          PRIV                                               
 MPP_BROADCAST_LOGICAL4_3D  Subr   7760                                          PRIV                                               
 MPP_BROADCAST_LOGICAL4_4D  Subr   7776                                          PRIV                                               
 MPP_BROADCAST_LOGICAL4_5D  Subr   7792                                          PRIV                                               
 MPP_BROADCAST_LOGICAL4_SCA                                                                                                         
 LAR                        Subr   7730                                          PRIV                                               
 MPP_BROADCAST_LOGICAL8     Subr   6779                                          PRIV             6715,7114,7130,7146,7162,7178     
 MPP_BROADCAST_LOGICAL8_2D  Subr   7119                                          PRIV                                               
 MPP_BROADCAST_LOGICAL8_3D  Subr   7135                                          PRIV                                               
 MPP_BROADCAST_LOGICAL8_4D  Subr   7151                                          PRIV                                               
 MPP_BROADCAST_LOGICAL8_5D  Subr   7167                                          PRIV                                               
 MPP_BROADCAST_LOGICAL8_SCA                                                                                                         
 LAR                        Subr   7105                                          PRIV                                               
 MPP_BROADCAST_REAL4        Subr   4901                                          PRIV             4837,5236,5252,5268,5284,5300,9265
 MPP_BROADCAST_REAL4_2D     Subr   5241                                          PRIV                                               
 MPP_BROADCAST_REAL4_3D     Subr   5257                                          PRIV                                               
 MPP_BROADCAST_REAL4_4D     Subr   5273                                          PRIV                                               
 MPP_BROADCAST_REAL4_5D     Subr   5289                                          PRIV                                               
 MPP_BROADCAST_REAL4_SCALAR Subr   5227                                          PRIV                                               
 MPP_BROADCAST_REAL8        Subr   4273                                          PRIV             4209,4608,4624,4640,4656,4672,9101
 MPP_BROADCAST_REAL8_2D     Subr   4613                                          PRIV                                               
 MPP_BROADCAST_REAL8_3D     Subr   4629                                          PRIV                                               
 MPP_BROADCAST_REAL8_4D     Subr   4645                                          PRIV                                               
 MPP_BROADCAST_REAL8_5D     Subr   4661                                          PRIV                                               
 MPP_BROADCAST_REAL8_SCALAR Subr   4599                                          PRIV                                               
 MPP_CHKSUM_I4_1D           Func   12302    I(8)            8           scalar   PRIV             12312,12314,12317,12385,13257,1326
                                                                                                  0,13307,13310,13357,13360,13407,13
                                                                                                  410,13457,13460                   
 MPP_CHKSUM_I4_1D_RMASK     Func   12325    I(8)            8           scalar   PRIV             12385                             
 MPP_CHKSUM_I4_2D           Func   12420    I(8)            8           scalar   PRIV             12430,12432,12435,12503           
 MPP_CHKSUM_I4_2D_RMASK     Func   12443    I(8)            8           scalar   PRIV             12503                             
 MPP_CHKSUM_I4_3D           Func   12538    I(8)            8           scalar   PRIV             12548,12550,12553,12621           
 MPP_CHKSUM_I4_3D_RMASK     Func   12561    I(8)            8           scalar   PRIV             12621                             
 MPP_CHKSUM_I4_4D           Func   12656    I(8)            8           scalar   PRIV             12666,12668,12671,12739           

Page 636         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Subprograms/Common Blocks       mpp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_CHKSUM_I4_4D_RMASK     Func   12679    I(8)            8           scalar   PRIV             12739                             
 MPP_CHKSUM_I4_5D           Func   12774    I(8)            8           scalar   PRIV             12784,12786,12789,12857           
 MPP_CHKSUM_I4_5D_RMASK     Func   12797    I(8)            8           scalar   PRIV             12857                             
 MPP_CHKSUM_I8_1D           Func   11712    I(8)            8           scalar   PRIV             11722,11724,11727,11795,12905,1290
                                                                                                  7,12953,12956,13003,13006,13053,13
                                                                                                  056,13103,13106,13153,13156,13209,
                                                                                                  13211                             
 MPP_CHKSUM_I8_1D_RMASK     Func   11735    I(8)            8           scalar   PRIV             11795                             
 MPP_CHKSUM_I8_2D           Func   11830    I(8)            8           scalar   PRIV             11840,11842,11845,11913           
 MPP_CHKSUM_I8_2D_RMASK     Func   11853    I(8)            8           scalar   PRIV             11913                             
 MPP_CHKSUM_I8_3D           Func   11948    I(8)            8           scalar   PRIV             11958,11960,11963,12031           
 MPP_CHKSUM_I8_3D_RMASK     Func   11971    I(8)            8           scalar   PRIV             12031                             
 MPP_CHKSUM_I8_4D           Func   12066    I(8)            8           scalar   PRIV             12076,12078,12081,12149           
 MPP_CHKSUM_I8_4D_RMASK     Func   12089    I(8)            8           scalar   PRIV             12149                             
 MPP_CHKSUM_I8_5D           Func   12184    I(8)            8           scalar   PRIV             12194,12196,12199,12267           
 MPP_CHKSUM_I8_5D_RMASK     Func   12207    I(8)            8           scalar   PRIV             12267                             
 MPP_CHKSUM_R4_0D           Func   13194    I(8)            8           scalar   PRIV             13209,13211                       
 MPP_CHKSUM_R4_1D           Func   13245    I(8)            8           scalar   PRIV             13257,13260                       
 MPP_CHKSUM_R4_2D           Func   13295    I(8)            8           scalar   PRIV             13307,13310                       
 MPP_CHKSUM_R4_3D           Func   13345    I(8)            8           scalar   PRIV             13357,13360                       
 MPP_CHKSUM_R4_4D           Func   13395    I(8)            8           scalar   PRIV             13407,13410                       
 MPP_CHKSUM_R4_5D           Func   13445    I(8)            8           scalar   PRIV             13457,13460                       
 MPP_CHKSUM_R8_0D           Func   12890    I(8)            8           scalar   PRIV             12905,12907                       
 MPP_CHKSUM_R8_1D           Func   12941    I(8)            8           scalar   PRIV             12953,12956                       
 MPP_CHKSUM_R8_2D           Func   12991    I(8)            8           scalar   PRIV             13003,13006                       
 MPP_CHKSUM_R8_3D           Func   13041    I(8)            8           scalar   PRIV             13053,13056                       
 MPP_CHKSUM_R8_4D           Func   13091    I(8)            8           scalar   PRIV             13103,13106                       
 MPP_CHKSUM_R8_5D           Func   13141    I(8)            8           scalar   PRIV             13153,13156                       
 MPP_CLOCK_BEGIN            Subr   2817                                                                                             
 MPP_CLOCK_END              Subr   2851                                                                                             
 MPP_CLOCK_ID               Func   2775     I(4)            4           scalar                                                      
 MPP_CLOCK_SET_GRAIN        Subr   2711                                                                                             
 MPP_DECLARE_PELIST         Subr   2514                                                                                             
 MPP_ERROR_BASIC            Subr   1336                                          PRIV             1409,1485,1490,1494,1497,1500,1503
                                                                                                  ,1511,1531,1657,1658,1687,1706,171
                                                                                                  2,1741,1755,1793,1834,1875,1916,24
                                                                                                  26,2447,2456,2466,2468,2519,2562,2
                                                                                                  564,2592,2717,2781,2803,2820,2823,
                                                                                                  2827,2828,2839,2856,2859,2861,2866
                                                                                                  ,2872,2876,2910,2915,2926,3079,317
                                                                                                  3,3339,3383,3400,3409,3414,3422,34
                                                                                                  48,3466,3475,3480,3489,3565,3588,3
                                                                                                  597,3609,3612,3617,3623,3631,3707,
                                                                                                  3784,3788,3799,3862,4007,4025,4038
                                                                                                  ,4164,4192,4199,4200,4213,4215,422
                                                                                                  7,4239,4254,4256,4282,4292,4792,48
                                                                                                  20,4827,4828,4841,4843,4855,4867,4
                                                                                                  882,4884,4910,4920,5420,5448,5455,
                                                                                                  5456,5469,5471,5483,5495,5510,5512
                                                                                                  ,5538,5548,6045,6073,6080,6081,609
                                                                                                  4,6096,6108,6120,6135,6137,6163,61
                                                                                                  73,6670,6698,6705,6706,6719,6721,6
                                                                                                  733,6745,6760,6762,6788,6798,7295,
                                                                                                  7323,7330,7331,7344,7346,7358,7370
                                                                                                  ,7385,7387,7413,7423,7854,7858,787

Page 637         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Subprograms/Common Blocks       mpp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  4,7878,7927,7931,7947,7951,8000,80
                                                                                                  04,8020,8024,8073,8077,8093,8097,8
                                                                                                  146,8150,8166,8170,8219,8223,8239,
                                                                                                  8243,8292,8296,8312,8316,8365,8369
                                                                                                  ,8385,8389,8447,8451,8494,8609,861
                                                                                                  3,8656,8771,8775,8818,8930,8934,89
                                                                                                  77,9092,9096,9138,9256,9260,9302,9
                                                                                                  420,9424,9466,9581,9585,9627,9738,
                                                                                                  9744,9768,9774,9800,9806,9870,9876
                                                                                                  ,9900,9906,9932,9938,10002,10008,1
                                                                                                  0032,10038,10064,10070,10134,10140
                                                                                                  ,10164,10170,10196,10202,10266,102
                                                                                                  72,10296,10302,10328,10334,10398,1
                                                                                                  0404,10428,10434,10460,10466,10530
                                                                                                  ,10536,10560,10566,10592,10598,106
                                                                                                  62,10668,10692,10698,10724,10730,1
                                                                                                  0796,10802,10906,10912,11016,11022
                                                                                                  ,11126,11132,11236,11242,11346,113
                                                                                                  52,11456,11462,11566,11572,11649,1
                                                                                                  1655,11789,11907,12025,12143,12261
                                                                                                  ,12379,12497,12615,12733,12851,135
                                                                                                  25,13634,13642,13646,13678,13782,1
                                                                                                  3891,13899,13903,13935,14039,14148
                                                                                                  ,14156,14160,14192,14296,14405,144
                                                                                                  13,14417,14449,14591,14599,14603,1
                                                                                                  4634,14770,14778,14782,14813,14949
                                                                                                  ,14957,14961,14992                
 MPP_ERROR_IA               Subr   1732                                          PRIV             1721                              
 MPP_ERROR_IA_IA            Subr   1782                                          PRIV             1953,2101,2249                    
 MPP_ERROR_IA_IS            Subr   1946                                          PRIV                                               
 MPP_ERROR_IA_RA            Subr   1823                                          PRIV             1990,2138,2286                    
 MPP_ERROR_IA_RS            Subr   1983                                          PRIV                                               
 MPP_ERROR_IS               Subr   1716                                          PRIV             3219                              
 MPP_ERROR_IS_IA            Subr   2094                                          PRIV                                               
 MPP_ERROR_IS_IS            Subr   2242                                          PRIV                                               
 MPP_ERROR_IS_RA            Subr   2131                                          PRIV                                               
 MPP_ERROR_IS_RS            Subr   2279                                          PRIV                                               
 MPP_ERROR_MESG             Subr   1702                                          PRIV                                               
 MPP_ERROR_NOARGS           Subr   1711                                          PRIV                                               
 MPP_ERROR_RA               Subr   1746                                          PRIV             1729                              
 MPP_ERROR_RA_IA            Subr   1864                                          PRIV             2027,2175,2323                    
 MPP_ERROR_RA_IS            Subr   2020                                          PRIV                                               
 MPP_ERROR_RA_RA            Subr   1905                                          PRIV             2064,2212,2360                    
 MPP_ERROR_RA_RS            Subr   2057                                          PRIV                                               
 MPP_ERROR_RS               Subr   1724                                          PRIV                                               
 MPP_ERROR_RS_IA            Subr   2168                                          PRIV                                               
 MPP_ERROR_RS_IS            Subr   2316                                          PRIV                                               
 MPP_ERROR_RS_RA            Subr   2205                                          PRIV                                               
 MPP_ERROR_RS_RS            Subr   2353                                          PRIV                                               
 MPP_ERROR_STATE            Func   1693     I(4)            4           scalar                                                      
 MPP_EXIT                   Subr   3884                                                                                             
 MPP_GATHER_INT4_1D         Subr   13757                                         PRIV                                               
 MPP_GATHER_INT4_1DV        Subr   13800                                         PRIV                                               
 MPP_GATHER_LOGICAL_1D      Subr   13500                                         PRIV                                               
 MPP_GATHER_LOGICAL_1DV     Subr   13543                                         PRIV                                               

Page 638         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Subprograms/Common Blocks       mpp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_GATHER_PELIST_INT4_2D  Subr   13846                                         PRIV                                               
 MPP_GATHER_PELIST_INT4_3D  Subr   13869                                         PRIV             13862                             
 MPP_GATHER_PELIST_LOGICAL_                                                                                                         
 2D                         Subr   13589                                         PRIV                                               
 MPP_GATHER_PELIST_LOGICAL_                                                                                                         
 3D                         Subr   13612                                         PRIV             13605                             
 MPP_GATHER_PELIST_REAL4_2D Subr   14103                                         PRIV                                               
 MPP_GATHER_PELIST_REAL4_3D Subr   14126                                         PRIV             14119                             
 MPP_GATHER_PELIST_REAL8_2D Subr   14360                                         PRIV                                               
 MPP_GATHER_PELIST_REAL8_3D Subr   14383                                         PRIV             14376                             
 MPP_GATHER_REAL4_1D        Subr   14014                                         PRIV                                               
 MPP_GATHER_REAL4_1DV       Subr   14057                                         PRIV                                               
 MPP_GATHER_REAL8_1D        Subr   14271                                         PRIV                                               
 MPP_GATHER_REAL8_1DV       Subr   14314                                         PRIV                                               
 MPP_GET_CURRENT_PELIST     Subr   2586                                                                                             
 MPP_GET_CURRENT_PELIST_NAM                                                                                                         
 E                          Func   2576     CHAR            32          scalar                                                      
 MPP_INIT                   Subr   3693                                                                                             
 MPP_INIT_LOGFILE           Subr   1662                                                           3773                              
 MPP_MAX_INT4_0D            Subr   8065                                          PRIV             3944,3987,13641,13898,14155,14412,
                                                                                                  14598,14777,14956                 
 MPP_MAX_INT4_1D            Subr   8084                                          PRIV                                               
 MPP_MAX_INT8_0D            Subr   7992                                          PRIV                                               
 MPP_MAX_INT8_1D            Subr   8011                                          PRIV                                               
 MPP_MAX_REAL4_0D           Subr   7919                                          PRIV                                               
 MPP_MAX_REAL4_1D           Subr   7938                                          PRIV                                               
 MPP_MAX_REAL8_0D           Subr   7846                                          PRIV             3923,3950,3956                    
 MPP_MAX_REAL8_1D           Subr   7865                                          PRIV                                               
 MPP_MIN_INT4_0D            Subr   8357                                          PRIV                                               
 MPP_MIN_INT4_1D            Subr   8376                                          PRIV                                               
 MPP_MIN_INT8_0D            Subr   8284                                          PRIV                                               
 MPP_MIN_INT8_1D            Subr   8303                                          PRIV                                               
 MPP_MIN_REAL4_0D           Subr   8211                                          PRIV                                               
 MPP_MIN_REAL4_1D           Subr   8230                                          PRIV                                               
 MPP_MIN_REAL8_0D           Subr   8138                                          PRIV             3922,3949,3955                    
 MPP_MIN_REAL8_1D           Subr   8157                                          PRIV                                               
 MPP_MOD                    Module 27                                                                                               
 MPP_NPES                   Func   2444     I(4)            4           scalar                                                      
 MPP_PE                     Func   2423     I(4)            4           scalar                                                      
 MPP_RECORD_TIME_END        Subr   2893                                                                                             
 MPP_RECORD_TIME_START      Subr   2886                                                                                             
 MPP_RECV_INT4              Subr   6326                                          PRIV                                               
 MPP_RECV_INT4_2D           Subr   6386                                          PRIV             13668,13925,14182,14439,14624,1480
                                                                                                  3,14982                           
 MPP_RECV_INT4_3D           Subr   6408                                          PRIV             13953,14668                       
 MPP_RECV_INT4_4D           Subr   6430                                          PRIV                                               
 MPP_RECV_INT4_5D           Subr   6452                                          PRIV                                               
 MPP_RECV_INT4_SCALAR       Subr   6348                                          PRIV             13789,13831                       
 MPP_RECV_INT8              Subr   5701                                          PRIV                                               
 MPP_RECV_INT8_2D           Subr   5761                                          PRIV                                               
 MPP_RECV_INT8_3D           Subr   5783                                          PRIV                                               
 MPP_RECV_INT8_4D           Subr   5805                                          PRIV                                               
 MPP_RECV_INT8_5D           Subr   5827                                          PRIV                                               
 MPP_RECV_INT8_SCALAR       Subr   5723                                          PRIV                                               
 MPP_RECV_LOGICAL4          Subr   7576                                          PRIV                                               

Page 639         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Subprograms/Common Blocks       mpp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_RECV_LOGICAL4_2D       Subr   7636                                          PRIV                                               
 MPP_RECV_LOGICAL4_3D       Subr   7658                                          PRIV             13696                             
 MPP_RECV_LOGICAL4_4D       Subr   7680                                          PRIV                                               
 MPP_RECV_LOGICAL4_5D       Subr   7702                                          PRIV                                               
 MPP_RECV_LOGICAL4_SCALAR   Subr   7598                                          PRIV             13532,13574                       
 MPP_RECV_LOGICAL8          Subr   6951                                          PRIV                                               
 MPP_RECV_LOGICAL8_2D       Subr   7011                                          PRIV                                               
 MPP_RECV_LOGICAL8_3D       Subr   7033                                          PRIV                                               
 MPP_RECV_LOGICAL8_4D       Subr   7055                                          PRIV                                               
 MPP_RECV_LOGICAL8_5D       Subr   7077                                          PRIV                                               
 MPP_RECV_LOGICAL8_SCALAR   Subr   6973                                          PRIV                                               
 MPP_RECV_REAL4             Subr   5073                                          PRIV                                               
 MPP_RECV_REAL4_2D          Subr   5133                                          PRIV                                               
 MPP_RECV_REAL4_3D          Subr   5155                                          PRIV             14210,14847                       
 MPP_RECV_REAL4_4D          Subr   5177                                          PRIV                                               
 MPP_RECV_REAL4_5D          Subr   5199                                          PRIV                                               
 MPP_RECV_REAL4_SCALAR      Subr   5095                                          PRIV             14046,14088                       
 MPP_RECV_REAL8             Subr   4445                                          PRIV                                               
 MPP_RECV_REAL8_2D          Subr   4505                                          PRIV                                               
 MPP_RECV_REAL8_3D          Subr   4527                                          PRIV             14467,15026                       
 MPP_RECV_REAL8_4D          Subr   4549                                          PRIV                                               
 MPP_RECV_REAL8_5D          Subr   4571                                          PRIV                                               
 MPP_RECV_REAL8_SCALAR      Subr   4467                                          PRIV             14303,14345                       
 MPP_ROOT_PE                Func   2453     I(4)            4           scalar                                                      
 MPP_SCATTER_PELIST_INT4_2D Subr   14546                                         PRIV                                               
 MPP_SCATTER_PELIST_INT4_3D Subr   14569                                         PRIV             14562                             
 MPP_SCATTER_PELIST_REAL4_2                                                                                                         
 D                          Subr   14725                                         PRIV                                               
 MPP_SCATTER_PELIST_REAL4_3                                                                                                         
 D                          Subr   14748                                         PRIV             14741                             
 MPP_SCATTER_PELIST_REAL8_2                                                                                                         
 D                          Subr   14904                                         PRIV                                               
 MPP_SCATTER_PELIST_REAL8_3                                                                                                         
 D                          Subr   14927                                         PRIV             14920                             
 MPP_SEND_INT4              Subr   6338                                          PRIV             13682,13939,14196,14453,14638,1481
                                                                                                  7,14996                           
 MPP_SEND_INT4_2D           Subr   6398                                          PRIV                                               
 MPP_SEND_INT4_3D           Subr   6420                                          PRIV             13975,14654                       
 MPP_SEND_INT4_4D           Subr   6442                                          PRIV                                               
 MPP_SEND_INT4_5D           Subr   6464                                          PRIV                                               
 MPP_SEND_INT4_SCALAR       Subr   6368                                          PRIV             13792,13837                       
 MPP_SEND_INT8              Subr   5713                                          PRIV                                               
 MPP_SEND_INT8_2D           Subr   5773                                          PRIV                                               
 MPP_SEND_INT8_3D           Subr   5795                                          PRIV                                               
 MPP_SEND_INT8_4D           Subr   5817                                          PRIV                                               
 MPP_SEND_INT8_5D           Subr   5839                                          PRIV                                               
 MPP_SEND_INT8_SCALAR       Subr   5743                                          PRIV                                               
 MPP_SEND_LOGICAL4          Subr   7588                                          PRIV                                               
 MPP_SEND_LOGICAL4_2D       Subr   7648                                          PRIV                                               
 MPP_SEND_LOGICAL4_3D       Subr   7670                                          PRIV             13718                             
 MPP_SEND_LOGICAL4_4D       Subr   7692                                          PRIV                                               
 MPP_SEND_LOGICAL4_5D       Subr   7714                                          PRIV                                               
 MPP_SEND_LOGICAL4_SCALAR   Subr   7618                                          PRIV             13535,13580                       
 MPP_SEND_LOGICAL8          Subr   6963                                          PRIV                                               
 MPP_SEND_LOGICAL8_2D       Subr   7023                                          PRIV                                               

Page 640         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Subprograms/Common Blocks       mpp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_SEND_LOGICAL8_3D       Subr   7045                                          PRIV                                               
 MPP_SEND_LOGICAL8_4D       Subr   7067                                          PRIV                                               
 MPP_SEND_LOGICAL8_5D       Subr   7089                                          PRIV                                               
 MPP_SEND_LOGICAL8_SCALAR   Subr   6993                                          PRIV                                               
 MPP_SEND_REAL4             Subr   5085                                          PRIV                                               
 MPP_SEND_REAL4_2D          Subr   5145                                          PRIV                                               
 MPP_SEND_REAL4_3D          Subr   5167                                          PRIV             14232,14833                       
 MPP_SEND_REAL4_4D          Subr   5189                                          PRIV                                               
 MPP_SEND_REAL4_5D          Subr   5211                                          PRIV                                               
 MPP_SEND_REAL4_SCALAR      Subr   5115                                          PRIV             14049,14094                       
 MPP_SEND_REAL8             Subr   4457                                          PRIV                                               
 MPP_SEND_REAL8_2D          Subr   4517                                          PRIV                                               
 MPP_SEND_REAL8_3D          Subr   4539                                          PRIV             14489,15012                       
 MPP_SEND_REAL8_4D          Subr   4561                                          PRIV                                               
 MPP_SEND_REAL8_5D          Subr   4583                                          PRIV                                               
 MPP_SEND_REAL8_SCALAR      Subr   4487                                          PRIV             14306,14351                       
 MPP_SET_CURRENT_PELIST     Subr   2550                                                                                             
 MPP_SET_ROOT_PE            Subr   2462                                                                                             
 MPP_SET_STACK_SIZE         Subr   3996                                                                                             
 MPP_SET_WARN_LEVEL         Subr   1679                                                                                             
 MPP_SUM_INT4               Subr   8919                                          PRIV             8978,8992,9006,9020,9034          
 MPP_SUM_INT4_2D            Subr   8984                                          PRIV                                               
 MPP_SUM_INT4_2D_AD         Subr   9634                                          PRIV                                               
 MPP_SUM_INT4_3D            Subr   8998                                          PRIV                                               
 MPP_SUM_INT4_3D_AD         Subr   9648                                          PRIV                                               
 MPP_SUM_INT4_4D            Subr   9012                                          PRIV                                               
 MPP_SUM_INT4_4D_AD         Subr   9662                                          PRIV                                               
 MPP_SUM_INT4_5D            Subr   9026                                          PRIV                                               
 MPP_SUM_INT4_5D_AD         Subr   9676                                          PRIV                                               
 MPP_SUM_INT4_AD            Subr   9571                                          PRIV             9628,9642,9656,9670,9684          
 MPP_SUM_INT4_SCALAR        Subr   8970                                          PRIV             13645,13902,14159,14416,14602,1478
                                                                                                  1,14960                           
 MPP_SUM_INT4_SCALAR_AD     Subr   9620                                          PRIV                                               
 MPP_SUM_INT8               Subr   8760                                          PRIV             8819,8833,8847,8861,8875          
 MPP_SUM_INT8_2D            Subr   8825                                          PRIV                                               
 MPP_SUM_INT8_2D_AD         Subr   9473                                          PRIV                                               
 MPP_SUM_INT8_3D            Subr   8839                                          PRIV                                               
 MPP_SUM_INT8_3D_AD         Subr   9487                                          PRIV                                               
 MPP_SUM_INT8_4D            Subr   8853                                          PRIV                                               
 MPP_SUM_INT8_4D_AD         Subr   9501                                          PRIV                                               
 MPP_SUM_INT8_5D            Subr   8867                                          PRIV                                               
 MPP_SUM_INT8_5D_AD         Subr   9515                                          PRIV                                               
 MPP_SUM_INT8_AD            Subr   9410                                          PRIV             9467,9481,9495,9509,9523          
 MPP_SUM_INT8_SCALAR        Subr   8811                                          PRIV             11727,11845,11963,12081,12199,1231
                                                                                                  7,12435,12553,12671,12789         
 MPP_SUM_INT8_SCALAR_AD     Subr   9459                                          PRIV                                               
 MPP_SUM_REAL4              Subr   8598                                          PRIV             8657,8671,8685,8699,8713          
 MPP_SUM_REAL4_2D           Subr   8663                                          PRIV                                               
 MPP_SUM_REAL4_2D_AD        Subr   9309                                          PRIV                                               
 MPP_SUM_REAL4_3D           Subr   8677                                          PRIV                                               
 MPP_SUM_REAL4_3D_AD        Subr   9323                                          PRIV                                               
 MPP_SUM_REAL4_4D           Subr   8691                                          PRIV                                               
 MPP_SUM_REAL4_4D_AD        Subr   9337                                          PRIV                                               
 MPP_SUM_REAL4_5D           Subr   8705                                          PRIV                                               
 MPP_SUM_REAL4_5D_AD        Subr   9351                                          PRIV                                               

Page 641         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Subprograms/Common Blocks       mpp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_SUM_REAL4_AD           Subr   9246                                          PRIV             9303,9317,9331,9345,9359          
 MPP_SUM_REAL4_SCALAR       Subr   8649                                          PRIV                                               
 MPP_SUM_REAL4_SCALAR_AD    Subr   9295                                          PRIV                                               
 MPP_SUM_REAL8              Subr   8436                                          PRIV             8495,8509,8523,8537,8551          
 MPP_SUM_REAL8_2D           Subr   8501                                          PRIV                                               
 MPP_SUM_REAL8_2D_AD        Subr   9145                                          PRIV                                               
 MPP_SUM_REAL8_3D           Subr   8515                                          PRIV                                               
 MPP_SUM_REAL8_3D_AD        Subr   9159                                          PRIV                                               
 MPP_SUM_REAL8_4D           Subr   8529                                          PRIV                                               
 MPP_SUM_REAL8_4D_AD        Subr   9173                                          PRIV                                               
 MPP_SUM_REAL8_5D           Subr   8543                                          PRIV                                               
 MPP_SUM_REAL8_5D_AD        Subr   9187                                          PRIV                                               
 MPP_SUM_REAL8_AD           Subr   9082                                          PRIV             9139,9153,9167,9181,9195          
 MPP_SUM_REAL8_SCALAR       Subr   8487                                          PRIV             3924,3925,3951,3952,3957,3958     
 MPP_SUM_REAL8_SCALAR_AD    Subr   9131                                          PRIV                                               
 MPP_SYNC                   Subr   1449                                                                                             
 MPP_SYNC_SELF              Subr   1472                                                                                             
 MPP_TRANSMIT_INT4          Subr   6014                                          PRIV             6235,6255,6275,6295,6315,6335,6345
                                                                                                  ,6364,6382                        
 MPP_TRANSMIT_INT4_2D       Subr   6241                                          PRIV             6395,6405                         
 MPP_TRANSMIT_INT4_3D       Subr   6261                                          PRIV             6417,6427                         
 MPP_TRANSMIT_INT4_4D       Subr   6281                                          PRIV             6439,6449                         
 MPP_TRANSMIT_INT4_5D       Subr   6301                                          PRIV             6461,6471                         
 MPP_TRANSMIT_INT4_SCALAR   Subr   6217                                          PRIV                                               
 MPP_TRANSMIT_INT8          Subr   5389                                          PRIV             5610,5630,5650,5670,5690,5710,5720
                                                                                                  ,5739,5757                        
 MPP_TRANSMIT_INT8_2D       Subr   5616                                          PRIV             5770,5780                         
 MPP_TRANSMIT_INT8_3D       Subr   5636                                          PRIV             5792,5802                         
 MPP_TRANSMIT_INT8_4D       Subr   5656                                          PRIV             5814,5824                         
 MPP_TRANSMIT_INT8_5D       Subr   5676                                          PRIV             5836,5846                         
 MPP_TRANSMIT_INT8_SCALAR   Subr   5592                                          PRIV                                               
 MPP_TRANSMIT_LOGICAL4      Subr   7264                                          PRIV             7485,7505,7525,7545,7565,7585,7595
                                                                                                  ,7614,7632                        
 MPP_TRANSMIT_LOGICAL4_2D   Subr   7491                                          PRIV             7645,7655                         
 MPP_TRANSMIT_LOGICAL4_3D   Subr   7511                                          PRIV             7667,7677                         
 MPP_TRANSMIT_LOGICAL4_4D   Subr   7531                                          PRIV             7689,7699                         
 MPP_TRANSMIT_LOGICAL4_5D   Subr   7551                                          PRIV             7711,7721                         
 MPP_TRANSMIT_LOGICAL4_SCAL                                                                                                         
 AR                         Subr   7467                                          PRIV                                               
 MPP_TRANSMIT_LOGICAL8      Subr   6639                                          PRIV             6860,6880,6900,6920,6940,6960,6970
                                                                                                  ,6989,7007                        
 MPP_TRANSMIT_LOGICAL8_2D   Subr   6866                                          PRIV             7020,7030                         
 MPP_TRANSMIT_LOGICAL8_3D   Subr   6886                                          PRIV             7042,7052                         
 MPP_TRANSMIT_LOGICAL8_4D   Subr   6906                                          PRIV             7064,7074                         
 MPP_TRANSMIT_LOGICAL8_5D   Subr   6926                                          PRIV             7086,7096                         
 MPP_TRANSMIT_LOGICAL8_SCAL                                                                                                         
 AR                         Subr   6842                                          PRIV                                               
 MPP_TRANSMIT_REAL4         Subr   4761                                          PRIV             4982,5002,5022,5042,5062,5082,5092
                                                                                                  ,5111,5129                        
 MPP_TRANSMIT_REAL4_2D      Subr   4988                                          PRIV             5142,5152                         
 MPP_TRANSMIT_REAL4_3D      Subr   5008                                          PRIV             5164,5174                         
 MPP_TRANSMIT_REAL4_4D      Subr   5028                                          PRIV             5186,5196                         
 MPP_TRANSMIT_REAL4_5D      Subr   5048                                          PRIV             5208,5218                         
 MPP_TRANSMIT_REAL4_SCALAR  Subr   4964                                          PRIV                                               
 MPP_TRANSMIT_REAL8         Subr   4133                                          PRIV             4354,4374,4394,4414,4434,4454,4464

Page 642         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51 Subprograms/Common Blocks       mpp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,4483,4501                        
 MPP_TRANSMIT_REAL8_2D      Subr   4360                                          PRIV             4514,4524                         
 MPP_TRANSMIT_REAL8_3D      Subr   4380                                          PRIV             4536,4546                         
 MPP_TRANSMIT_REAL8_4D      Subr   4400                                          PRIV             4558,4568                         
 MPP_TRANSMIT_REAL8_5D      Subr   4420                                          PRIV             4580,4590                         
 MPP_TRANSMIT_REAL8_SCALAR  Subr   4336                                          PRIV                                               
 MPP_TYPE_CREATE_CMPLX4     Subr   11225                                         PRIV                                               
 MPP_TYPE_CREATE_CMPLX8     Subr   11335                                         PRIV                                               
 MPP_TYPE_CREATE_INT4       Subr   10785                                         PRIV                                               
 MPP_TYPE_CREATE_INT8       Subr   10895                                         PRIV                                               
 MPP_TYPE_CREATE_LOGICAL4   Subr   11445                                         PRIV                                               
 MPP_TYPE_CREATE_LOGICAL8   Subr   11555                                         PRIV                                               
 MPP_TYPE_CREATE_REAL4      Subr   11005                                         PRIV                                               
 MPP_TYPE_CREATE_REAL8      Subr   11115                                         PRIV                                               
 MPP_TYPE_FREE              Subr   11645                                                                                            
 RARRAY_TO_CHAR             Func   2388     CHAR            256         scalar                    1753,1832,1872,1913,1914          
 READ_ASCII_FILE            Subr   3524                                                                                             
 READ_INPUT_NML             Subr   3291                                                                                             
 STDERR                     Func   1594     I(4)            4           scalar                                                      
 STDIN                      Func   1557     I(4)            4           scalar                                                      
 STDLOG                     Func   1613     I(4)            4           scalar                                                      
 STDOUT                     Func   1575     I(4)            4           scalar                                                      
 SUM_CLOCK_DATA             Subr   3089                                                           3899                              
 SYSTEM_CLOCK_MPI           Subr   1257                                                           1460,1481,2843,2864,2912,3745,4030
                                                                                                  ,4040,4171,4182,4221,4250,4260,428
                                                                                                  6,4294,4799,4810,4849,4878,4888,49
                                                                                                  14,4922,5427,5438,5477,5506,5516,5
                                                                                                  542,5550,6052,6063,6102,6131,6141,
                                                                                                  6167,6175,6677,6688,6727,6756,6766
                                                                                                  ,6792,6800,7302,7313,7352,7381,739
                                                                                                  1,7417,7425,7857,7877,7930,7950,80
                                                                                                  03,8023,8076,8096,8149,8169,8222,8
                                                                                                  242,8295,8315,8368,8388,8450,8612,
                                                                                                  8774,8933,9095,9259,9423,9584,9742
                                                                                                  ,9772,9804,9874,9904,9936,10006,10
                                                                                                  036,10068,10138,10168,10200,10270,
                                                                                                  10300,10332,10402,10432,10464,1053
                                                                                                  4,10564,10596,10666,10696,10728,10
                                                                                                  799,10909,11019,11129,11239,11349,
                                                                                                  11459,11569,11652                 
 UPPERCASE                  Func   3224     CHAR                        scalar   TGT                                                

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam

Page 643         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51                                 mpp.F90

       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines

Page 644         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51                                 mpp.F90

  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : ./,/opt/intel/2020/compilers_and_libraries/linux/mkl/include/,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/,
           /usr/include/,./,./,../include/,../mpp/include/,./,/opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/,

Page 645         Source Listing                  MPP_SCATTER_PELIST_REAL8_3D
2021-06-01 08:51                                 mpp.F90

           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/,/opt/intel/2020/compilers_and_libraries/linux/daal/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,/usr/local/include/,/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/,
           /usr/include/,/usr/include/,/usr/include/
       -list filename : mpp.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
