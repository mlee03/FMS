Page 1           Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 /tmp/ifort60wYS2.i90

      1 # 1 "mpp_io.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 !-----------------------------------------------------------------------
     21 !                 Parallel I/O for message-passing codes
     22 !
     23 ! AUTHOR: V. Balaji (vb@gfdl.gov)
     24 !         SGI/GFDL Princeton University
     25 !
     26 !-----------------------------------------------------------------------
     27 
     28 ! <CONTACT EMAIL="vb@gfdl.noaa.gov">
     29 !   V. Balaji
     30 ! </CONTACT>
     31 
     32 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/"/>
     33 ! <RCSLOG SRC="http://www.gfdl.noaa.gov/~vb/changes_mpp_io.html"/>
     34 
     35 ! <OVERVIEW>
     36 !   <TT>mpp_io_mod</TT>, is a set of simple calls for parallel I/O on
     37 !   distributed systems. It is geared toward the writing of data in netCDF
     38 !   format. It requires the modules <LINK
     39 !   SRC="mpp_domains.html">mpp_domains_mod</LINK> and <LINK
     40 !   SRC="mpp.html">mpp_mod</LINK>, upon which it is built.
     41 ! </OVERVIEW>
     42 
     43 ! <DESCRIPTION>
     44 !   In massively parallel environments, an often difficult problem is
     45 !   the reading and writing of data to files on disk. MPI-IO and MPI-2 IO
     46 !   are moving toward providing this capability, but are currently not
     47 !   widely implemented. Further, it is a rather abstruse
     48 !   API. <TT>mpp_io_mod</TT> is an attempt at a simple API encompassing a
     49 !   certain variety of the I/O tasks that will be required. It does not
     50 !   attempt to be an all-encompassing standard such as MPI, however, it
     51 !   can be implemented in MPI if so desired. It is equally simple to add
     52 !   parallel I/O capability to <TT>mpp_io_mod</TT> based on vendor-specific
     53 !   APIs while providing a layer of insulation for user codes.
     54 !
     55 !   The <TT>mpp_io_mod</TT> parallel I/O API built on top of the <LINK
     56 !   SRC="mpp_domains.html">mpp_domains_mod</LINK> and <LINK
     57 !   SRC="mpp.html">mpp_mod</LINK> API for domain decomposition and

Page 2           Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

     58 !   message passing. Features of <TT>mpp_io_mod</TT> include:
     59 !
     60 !    1) Simple, minimal API, with free access to underlying API for more
     61 !   complicated stuff.<BR/>
     62 !    2) Self-describing files: comprehensive header information
     63 !   (metadata) in the file itself.<BR/>
     64 !    3) Strong focus on performance of parallel write: the climate models
     65 !   for which it is designed typically read a minimal amount of data
     66 !   (typically at the beginning of the run); but on the other hand, tend
     67 !   to write copious amounts of data during the run. An interface for
     68 !   reading is also supplied, but its performance has not yet been optimized.<BR/>
     69 !    4) Integrated netCDF capability: <LINK SRC
     70 !   ="http://www.unidata.ucar.edu/packages/netcdf/">netCDF</LINK> is a
     71 !   data format widely used in the climate/weather modeling
     72 !   community. netCDF is considered the principal medium of data storage
     73 !   for <TT>mpp_io_mod</TT>. But I provide a raw unformatted
     74 !   fortran I/O capability in case netCDF is not an option, either due to
     75 !   unavailability, inappropriateness, or poor performance.<BR/>
     76 !    5) May require off-line post-processing: a tool for this purpose,
     77 !   <TT>mppnccombine</TT>, is available. GFDL users may use
     78 !   <TT>~hnv/pub/mppnccombine</TT>. Outside users may obtain the
     79 !   source <LINK SRC
     80 !   ="ftp://ftp.gfdl.gov/perm/hnv/mpp/mppnccombine.c">here</LINK>.  It
     81 !   can be compiled on any C compiler and linked with the netCDF
     82 !   library. The program is free and is covered by the <LINK SRC
     83 !   ="ftp://ftp.gfdl.gov/perm/hnv/mpp/LICENSE">GPL license</LINK>.
     84 !
     85 !   The internal representation of the data being written out is
     86 !   assumed be the default real type, which can be 4 or 8-byte. Time data
     87 !   is always written as 8-bytes to avoid overflow on climatic time scales
     88 !   in units of seconds.
     89 !
     90 !   <LINK SRC="modes"></LINK><H4>I/O modes in <TT>mpp_io_mod</TT></H4>
     91 !
     92 !   The I/O activity critical to performance in the models for which
     93 !   <TT>mpp_io_mod</TT> is designed is typically the writing of large
     94 !   datasets on a model grid volume produced at intervals during
     95 !   a run. Consider a 3D grid volume, where model arrays are stored as
     96 !   <TT>(i,j,k)</TT>. The domain decomposition is typically along
     97 !   <TT>i</TT> or <TT>j</TT>: thus to store data to disk as a global
     98 !   volume, the distributed chunks of data have to be seen as
     99 !   non-contiguous. If we attempt to have all PEs write this data into a
    100 !   single file, performance can be seriously compromised because of the
    101 !   data reordering that will be required. Possible options are to have
    102 !   one PE acquire all the data and write it out, or to have all the PEs
    103 !   write independent files, which are recombined offline. These three
    104 !   modes of operation are described in the <TT>mpp_io_mod</TT> terminology
    105 !   in terms of two parameters, <I>threading</I> and <I>fileset</I>,
    106 !   as follows:
    107 !
    108 !   <I>Single-threaded I/O:</I> a single PE acquires all the data
    109 !   and writes it out.<BR/>
    110 !   <I>Multi-threaded, single-fileset I/O:</I> many PEs write to a
    111 !   single file.<BR/>
    112 !    <I>Multi-threaded, multi-fileset I/O:</I> many PEs write to
    113 !   independent files. This is also called <I>distributed I/O</I>.
    114 !

Page 3           Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    115 !   The middle option is the most difficult to achieve performance. The
    116 !   choice of one of these modes is made when a file is opened for I/O, in
    117 !   <LINK SRC="#mpp_open">mpp_open</LINK>.
    118 !
    119 !   <LINK name="metadata"></LINK><H4>Metadata in <TT>mpp_io_mod</TT></H4>
    120 !
    121 !   A requirement of the design of <TT>mpp_io_mod</TT> is that the file must
    122 !   be entirely self-describing: comprehensive header information
    123 !   describing its contents is present in the header of every file. The
    124 !   header information follows the model of netCDF. Variables in the file
    125 !   are divided into <I>axes</I> and <I>fields</I>. An axis describes a
    126 !   co-ordinate variable, e.g <TT>x,y,z,t</TT>. A field consists of data in
    127 !   the space described by the axes. An axis is described in
    128 !   <TT>mpp_io_mod</TT> using the defined type <TT>axistype</TT>:
    129 !
    130 !   <PRE>
    131 !   type, public :: axistype
    132 !      sequence
    133 !      character(len=128) :: name
    134 !      character(len=128) :: units
    135 !      character(len=256) :: longname
    136 !      character(len=8) :: cartesian
    137 !      integer :: len
    138 !      integer :: sense           !+/-1, depth or height?
    139 !      type(domain1D), pointer :: domain
    140 !      real, dimension(:), pointer :: data
    141 !      integer :: id, did
    142 !      integer :: type  ! external NetCDF type format for axis data
    143 !      integer :: natt
    144 !      type(atttype), pointer :: Att(:) ! axis attributes
    145 !   end type axistype
    146 !   </PRE>
    147 !
    148 !   A field is described using the type <TT>fieldtype</TT>:
    149 !
    150 !   <PRE>
    151 !   type, public :: fieldtype
    152 !      sequence
    153 !      character(len=128) :: name
    154 !      character(len=128) :: units
    155 !      character(len=256) :: longname
    156 !      real :: min, max, missing, fill, scale, add
    157 !      integer :: pack
    158 !      type(axistype), dimension(:), pointer :: axes
    159 !      integer, dimension(:), pointer :: size
    160 !      integer :: time_axis_index
    161 !      integer :: id
    162 !      integer :: type ! external NetCDF format for field data
    163 !      integer :: natt, ndim
    164 !      type(atttype), pointer :: Att(:) ! field metadata
    165 !   end type fieldtype
    166 !   </PRE>
    167 !
    168 !   An attribute (global, field or axis) is described using the <TT>atttype</TT>:
    169 !
    170 !   <PRE>
    171 !   type, public :: atttype

Page 4           Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    172 !      sequence
    173 !      integer :: type, len
    174 !      character(len=128) :: name
    175 !      character(len=256)  :: catt
    176 !      real(r4_kind), pointer :: fatt(:)
    177 !   end type atttype
    178 !   </PRE>
    179 !
    180 !   <LINK name="packing"></LINK>This default set of field attributes corresponds
    181 !   closely to various conventions established for netCDF files. The
    182 !   <TT>pack</TT> attribute of a field defines whether or not a
    183 !   field is to be packed on output. Allowed values of
    184 !   <TT>pack</TT> are 1,2,4 and 8. The value of
    185 !   <TT>pack</TT> is the number of variables written into 8
    186 !   bytes. In typical use, we write 4-byte reals to netCDF output; thus
    187 !   the default value of <TT>pack</TT> is 2. For
    188 !   <TT>pack</TT> = 4 or 8, packing uses a simple-minded linear
    189 !   scaling scheme using the <TT>scale</TT> and <TT>add</TT>
    190 !   attributes. There is thus likely to be a significant loss of dynamic
    191 !   range with packing. When a field is declared to be packed, the
    192 !   <TT>missing</TT> and <TT>fill</TT> attributes, if
    193 !   supplied, are packed also.
    194 !
    195 !   Please note that the pack values are the same even if the default
    196 !   real is 4 bytes, i.e <TT>PACK=1</TT> still follows the definition
    197 !   above and writes out 8 bytes.
    198 !
    199 !   A set of <I>attributes</I> for each variable is also available. The
    200 !   variable definitions and attribute information is written/read by calling
    201 !   <LINK SRC="#mpp_write_meta">mpp_write_meta</LINK> or <LINK SRC="#mpp_read_meta">mpp_read_meta</LINK>. A typical calling
    202 !   sequence for writing data might be:
    203 !
    204 !   <PRE>
    205 !   ...
    206 !     type(domain2D), dimension(:), allocatable, target :: domain
    207 !     type(fieldtype) :: field
    208 !     type(axistype) :: x, y, z, t
    209 !   ...
    210 !     call mpp_define_domains( (/1,nx,1,ny/), domain )
    211 !     allocate( a(domain(pe)%x%data%start_index:domain(pe)%x%data%end_index, &
    212 !                 domain(pe)%y%data%start_index:domain(pe)%y%data%end_index,nz) )
    213 !   ...
    214 !     call mpp_write_meta( unit, x, 'X', 'km', 'X distance', &
    215 !          domain=domain(pe)%x, data=(/(float(i),i=1,nx)/) )
    216 !     call mpp_write_meta( unit, y, 'Y', 'km', 'Y distance', &
    217 !          domain=domain(pe)%y, data=(/(float(i),i=1,ny)/) )
    218 !     call mpp_write_meta( unit, z, 'Z', 'km', 'Z distance', &
    219 !          data=(/(float(i),i=1,nz)/) )
    220 !     call mpp_write_meta( unit, t, 'Time', 'second', 'Time' )
    221 !
    222 !     call mpp_write_meta( unit, field, (/x,y,z,t/), 'a', '(m/s)', AAA', &
    223 !          missing=-1e36 )
    224 !   ...
    225 !     call mpp_write( unit, x )
    226 !     call mpp_write( unit, y )
    227 !     call mpp_write( unit, z )
    228 !   ...

Page 5           Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    229 !   </PRE>
    230 !
    231 !   In this example, <TT>x</TT> and <TT>y</TT> have been
    232 !   declared as distributed axes, since a domain decomposition has been
    233 !   associated. <TT>z</TT> and <TT>t</TT> are undistributed
    234 !   axes. <TT>t</TT> is known to be a <I>record</I> axis (netCDF
    235 !   terminology) since we do not allocate the <TT>data</TT> element
    236 !   of the <TT>axistype</TT>. <I>Only one record axis may be
    237 !   associated with a file.</I> The call to <LINK
    238 !   SRC="#mpp_write_meta">mpp_write_meta</LINK> initializes
    239 !   the axes, and associates a unique variable ID with each axis. The call
    240 !   to <TT>mpp_write_meta</TT> with argument <TT>field</TT>
    241 !   declared <TT>field</TT> to be a 4D variable that is a function
    242 !   of <TT>(x,y,z,t)</TT>, and a unique variable ID is associated
    243 !   with it. A 3D field will be written at each call to
    244 !   <TT>mpp_write(field)</TT>.
    245 !
    246 !   The data to any variable, including axes, is written by
    247 !   <TT>mpp_write</TT>.
    248 !
    249 !   Any additional attributes of variables can be added through
    250 !   subsequent <TT>mpp_write_meta</TT> calls, using the variable ID as a
    251 !   handle. <I>Global</I> attributes, associated with the dataset as a
    252 !   whole, can also be written thus. See the <LINK
    253 !   SRC="#mpp_write_meta">mpp_write_meta</LINK> call syntax below
    254 !   for further details.
    255 !
    256 !   You cannot interleave calls to <TT>mpp_write</TT> and
    257 !   <TT>mpp_write_meta</TT>: the first call to
    258 !   <TT>mpp_write</TT> implies that metadata specification is
    259 !   complete.
    260 !
    261 !   A typical calling sequence for reading data might be:
    262 !
    263 !   <PRE>
    264 !   ...
    265 !     integer :: unit, natt, nvar, ntime
    266 !     type(domain2D), dimension(:), allocatable, target :: domain
    267 !     type(fieldtype), allocatable, dimension(:) :: fields
    268 !     type(atttype), allocatable, dimension(:) :: global_atts
    269 !     real, allocatable, dimension(:) :: times
    270 !   ...
    271 !     call mpp_define_domains( (/1,nx,1,ny/), domain )
    272 !
    273 !     call mpp_read_meta(unit)
    274 !     call mpp_get_info(unit,natt,nvar,ntime)
    275 !     allocate(global_atts(natt))
    276 !     call mpp_get_atts(unit,global_atts)
    277 !     allocate(fields(nvar))
    278 !     call mpp_get_vars(unit, fields)
    279 !     allocate(times(ntime))
    280 !     call mpp_get_times(unit, times)
    281 !
    282 !     allocate( a(domain(pe)%x%data%start_index:domain(pe)%x%data%end_index, &
    283 !                 domain(pe)%y%data%start_index:domain(pe)%y%data%end_index,nz) )
    284 !   ...
    285 !     do i=1, nvar

Page 6           Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    286 !       if (fields(i)%name == 'a')  call mpp_read(unit,fields(i),domain(pe), a,
    287 !                                                 tindex)
    288 !     enddo
    289 !   ...
    290 !   </PRE>
    291 !
    292 !   In this example, the data are distributed as in the previous
    293 !   example. The call to <LINK
    294 !   SRC="#mpp_read_meta">mpp_read_meta</LINK> initializes
    295 !   all of the metadata associated with the file, including global
    296 !   attributes, variable attributes and non-record dimension data. The
    297 !   call to <TT>mpp_get_info</TT> returns the number of global
    298 !   attributes (<TT>natt</TT>), variables (<TT>nvar</TT>) and
    299 !   time levels (<TT>ntime</TT>) associated with the file
    300 !   identified by a unique ID (<TT>unit</TT>).
    301 !   <TT>mpp_get_atts</TT> returns all global attributes for
    302 !   the file in the derived type <TT>atttype(natt)</TT>.
    303 !   <TT>mpp_get_vars</TT> returns variable types
    304 !   (<TT>fieldtype(nvar)</TT>).  Since the record dimension data are not allocated for calls to <LINK SRC="#mpp_write">mpp_w
    304 rite</LINK>, a separate call to  <TT>mpp_get_times</TT> is required to access record dimension data.  Subsequent calls to
    305 !   <TT>mpp_read</TT> return the field data arrays corresponding to
    306 !   the fieldtype.  The <TT>domain</TT> type is an optional
    307 !   argument.  If <TT>domain</TT> is omitted, the incoming field
    308 !   array should be dimensioned for the global domain, otherwise, the
    309 !   field data is assigned to the computational domain of a local array.
    310 !
    311 !   <I>Multi-fileset</I> reads are not supported with <TT>mpp_read</TT>.
    312 
    313 ! </DESCRIPTION>
    314 
    315 module mpp_io_mod
    316 
    317 
    318 
    319 
    320 use netcdf
    321 use netcdf_nf_data
    322 use netcdf_nf_interfaces
    323 use netcdf4_nf_interfaces
    324 
    325 
    326 use mpp_parameter_mod,  only : MPP_WRONLY, MPP_RDONLY, MPP_APPEND, MPP_OVERWR, MPP_ASCII
    327 use mpp_parameter_mod,  only : MPP_IEEE32, MPP_NATIVE, MPP_NETCDF, MPP_SEQUENTIAL
    328 use mpp_parameter_mod,  only : MPP_DIRECT, MPP_SINGLE, MPP_MULTI, MPP_DELETE, MPP_COLLECT
    329 use mpp_parameter_mod,  only : MPP_DEBUG, MPP_VERBOSE, NULLUNIT, NULLTIME, ALL_PES
    330 use mpp_parameter_mod,  only : CENTER, EAST, NORTH, CORNER
    331 use mpp_parameter_mod,  only : MAX_FILE_SIZE, GLOBAL_ROOT_ONLY, XUPDATE, YUPDATE
    332 use mpp_mod,            only : mpp_error, FATAL, WARNING, NOTE, stdin, stdout, stderr, stdlog
    333 use mpp_mod,            only : mpp_pe, mpp_root_pe, mpp_npes, lowercase, mpp_transmit, mpp_sync_self
    334 use mpp_mod,            only : mpp_init, mpp_sync, mpp_clock_id, mpp_clock_begin, mpp_clock_end
    335 use mpp_mod,            only : MPP_CLOCK_SYNC, MPP_CLOCK_DETAILED, CLOCK_ROUTINE
    336 use mpp_mod,            only : input_nml_file, mpp_gather, mpp_broadcast
    337 use mpp_mod,            only : mpp_send, mpp_recv, mpp_sync_self, EVENT_RECV, COMM_TAG_1
    338 use mpp_domains_mod,    only : domain1d, domain2d, NULL_DOMAIN1D, mpp_domains_init
    339 use mpp_domains_mod,    only : mpp_get_global_domain, mpp_get_compute_domain
    340 use mpp_domains_mod,    only : mpp_get_data_domain, mpp_get_memory_domain, mpp_get_pelist
    341 use mpp_domains_mod,    only : mpp_update_domains, mpp_global_field, mpp_domain_is_symmetry

Page 7           Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    342 use mpp_domains_mod,    only : operator( .NE. ), mpp_get_domain_shift, mpp_get_UG_compute_domains
    343 use mpp_domains_mod,    only : mpp_get_io_domain, mpp_domain_is_tile_root_pe, mpp_get_domain_tile_root_pe
    344 use mpp_domains_mod,    only : mpp_get_tile_id, mpp_get_tile_npes, mpp_get_io_domain_layout
    345 use mpp_domains_mod,    only : mpp_get_domain_name, mpp_get_domain_npes
    346 use mpp_parameter_mod,  only : MPP_FILL_DOUBLE,MPP_FILL_INT
    347 use mpp_mod,            only : mpp_chksum
    348 
    349 !----------
    350 !ug support
    351 use mpp_domains_mod, only: domainUG, &
    352                            mpp_get_UG_io_domain, &
    353                            mpp_domain_UG_is_tile_root_pe, &
    354                            mpp_get_UG_domain_tile_id, &
    355                            mpp_get_UG_domain_npes, &
    356                            mpp_get_io_domain_UG_layout, &
    357                            mpp_get_UG_compute_domain, &
    358                            mpp_get_UG_domain_pelist
    359 use platform_mod
    360 !----------
    361 
    362 implicit none
    363 private
    364 
    365 !--- public parameters  -----------------------------------------------
    366   public :: MPP_WRONLY, MPP_RDONLY, MPP_APPEND, MPP_OVERWR, MPP_ASCII, MPP_IEEE32
    367   public :: MPP_NATIVE, MPP_NETCDF, MPP_SEQUENTIAL, MPP_DIRECT, MPP_SINGLE
    368   public :: MPP_MULTI, MPP_DELETE, MPP_COLLECT
    369   public :: FILE_TYPE_USED
    370   public :: MAX_FILE_SIZE
    371 !--- public data type ------------------------------------------------
    372   public :: axistype, atttype, fieldtype, validtype, filetype
    373 
    374 !--- public data -----------------------------------------------------
    375   public :: default_field, default_axis, default_att
    376 
    377 !--- public interface from mpp_io_util.h ----------------------
    378   public :: mpp_get_id, mpp_get_ncid, mpp_get_unit_range, mpp_is_valid
    379   public :: mpp_set_unit_range, mpp_get_info, mpp_get_atts, mpp_get_fields
    380   public :: mpp_get_times, mpp_get_axes, mpp_get_recdimid, mpp_get_axis_data, mpp_get_axis_by_name
    381   public :: mpp_io_set_stack_size, mpp_get_field_index, mpp_get_axis_index
    382   public :: mpp_get_field_name, mpp_get_att_value, mpp_get_att_length
    383   public :: mpp_get_att_type, mpp_get_att_name, mpp_get_att_real, mpp_get_att_char
    384   public :: mpp_get_att_real_scalar, mpp_get_axis_length, mpp_is_dist_ioroot
    385   public :: mpp_get_file_name, mpp_file_is_opened, mpp_attribute_exist
    386   public :: mpp_io_clock_on, mpp_get_time_axis, mpp_get_default_calendar
    387   public :: mpp_get_dimension_length, mpp_get_axis_bounds
    388 
    389 !--- public interface from mpp_io_misc.h ----------------------
    390   public :: mpp_io_init, mpp_io_exit, netcdf_err, mpp_flush, mpp_get_maxunits, do_cf_compliance
    391 
    392 !--- public interface from mpp_io_write.h ---------------------
    393   public :: mpp_write, mpp_write_meta, mpp_copy_meta, mpp_modify_meta, mpp_write_axis_data, mpp_def_dim
    394 
    395 !--- public interface from mpp_io_read.h ---------------------
    396   public :: mpp_read, mpp_read_meta, mpp_get_tavg_info
    397   public :: mpp_read_compressed, mpp_write_compressed, mpp_read_distributed_ascii, mpp_write_unlimited_axis
    398 

Page 8           Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    399 !--- public interface from mpp_io_switch.h ---------------------
    400   public :: mpp_open, mpp_close
    401   public :: fillin_fieldtype
    402 !-----------------------------------------------------------------------------
    403 !--- mpp_io data types
    404 !-----------------------------------------------------------------------------
    405 integer FILE_TYPE_USED
    406 integer, parameter :: MAX_ATT_LENGTH = 1280
    407 type :: atttype
    408      private
    409      integer             :: type, len
    410      character(len=128)  :: name
    411      character(len=MAX_ATT_LENGTH) :: catt
    412      real, pointer       :: fatt(:) =>NULL() ! just use type conversion for integers
    413   end type atttype
    414 
    415   type :: axistype
    416      private
    417      character(len=128) :: name
    418      character(len=128) :: name_bounds
    419      character(len=128) :: units
    420      character(len=256) :: longname
    421      character(len=8)   :: cartesian
    422      character(len=256) :: compressed
    423      character(len=24)  :: calendar
    424      integer            :: sense, len          !+/-1, depth or height?
    425      type(domain1D)     :: domain              !if pointer is associated, it is a distributed data axis
    426      real, pointer      :: data(:) =>NULL()    !axis values (not used if time axis)
    427      real, pointer      :: data_bounds(:) =>NULL()    !axis bounds values
    428      integer, pointer   :: idata(:) =>NULL()   !compressed axis valuesi
    429      integer            :: id, did, type, natt !id is the "variable ID", did is the "dimension ID":
    430 !netCDF requires 2 IDs for axes
    431      integer            :: shift               !normally is 0. when domain is symmetry, its value maybe 1.
    432      type(atttype), pointer :: Att(:) =>NULL()
    433   end type axistype
    434 
    435   type :: validtype
    436      private
    437      logical :: is_range ! if true, then the data represent the valid range
    438      real    :: min,max  ! boundaries of the valid range or missing value
    439   end type validtype
    440 
    441   type :: fieldtype
    442      private
    443      character(len=128)      :: name
    444      character(len=128)      :: units
    445      character(len=256)      :: longname
    446      character(len=256)      :: standard_name   ! CF standard name
    447      real                    :: min, max, missing, fill, scale, add
    448      integer                 :: pack
    449      integer(i8_kind), dimension(3) :: checksum
    450      type(axistype), pointer :: axes(:) =>NULL() !axes associated with field size, time_axis_index redundantly
    451 !hold info already contained in axes. it's clunky and inelegant,
    452 !but required so that axes can be shared among multiple files
    453      integer, pointer        :: size(:) =>NULL()
    454      integer                 :: time_axis_index
    455      integer                 :: id, type, natt, ndim

Page 9           Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    456      type(atttype), pointer  :: Att(:) =>NULL()
    457      integer                 :: position ! indicate the location of the data ( CENTER, NORTH, EAST, CORNER )
    458   end type fieldtype
    459 
    460   type :: filetype
    461      private
    462      character(len=256) :: name
    463      integer            :: action, format, access, threading, fileset, record, ncid
    464      logical            :: opened, initialized, nohdrs
    465      integer            :: time_level
    466      real(r8_kind)  :: time
    467      logical            :: valid
    468      logical            :: write_on_this_pe   ! indicate if will write out from this pe
    469      logical            :: read_on_this_pe    ! indicate if will read from this pe
    470      logical            :: io_domain_exist    ! indicate if io_domain exist or not.
    471      integer            :: id       !variable ID of time axis associated with file (only one time axis per file)
    472      integer            :: recdimid !dim ID of time axis associated with file (only one time axis per file)
    473      real(r8_kind), pointer :: time_values(:) =>NULL() ! time axis values are stored here instead of axis%data
    474 ! since mpp_write assumes these values are not time values.
    475 ! Not used in mpp_write
    476 ! additional elements of filetype for mpp_read (ignored for mpp_write)
    477      integer :: ndim, nvar, natt  ! number of dimensions, non-dimension variables and global attributes
    478 ! redundant axis types stored here and in associated fieldtype
    479 ! some axes are not used by any fields, i.e. "edges"
    480      type(axistype), pointer  :: axis(:) =>NULL()
    481      type(fieldtype), pointer :: var(:) =>NULL()
    482      type(atttype), pointer   :: att(:) =>NULL()
    483      type(domain2d), pointer  :: domain =>NULL()
    484 !----------
    485 !ug support
    486      type(domainUG),pointer :: domain_ug => null() !Is this actually pointed to?
    487 !----------
    488   end type filetype
    489 
    490 !***********************************************************************
    491 !
    492 !     public interface from mpp_io_util.h
    493 !
    494 !***********************************************************************
    495   interface mpp_get_id
    496      module procedure mpp_get_axis_id
    497      module procedure mpp_get_field_id
    498   end interface
    499 
    500 ! <INTERFACE NAME="mpp_get_atts">
    501 !   <OVERVIEW>
    502 !     Get file global metdata.
    503 !   </OVERVIEW>
    504 !   <DESCRIPTION>
    505 !     Get file global metdata.
    506 !   </DESCRIPTION>
    507 !   <TEMPLATE>
    508 !     call mpp_get_atts( unit, global_atts)
    509 !   </TEMPLATE>
    510 !  <IN NAME="unit"></IN>
    511 !  <IN NAME="global_atts"></IN>
    512 ! </INTERFACE>

Page 10          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    513   interface mpp_get_atts
    514      module procedure mpp_get_global_atts
    515      module procedure mpp_get_field_atts
    516      module procedure mpp_get_axis_atts
    517   end interface
    518 
    519   interface mpp_get_att_value
    520      module procedure mpp_get_field_att_text
    521   end interface
    522 
    523 
    524 !***********************************************************************
    525 !
    526 !      public interface from mpp_io_read.h
    527 !
    528 !***********************************************************************
    529 ! <INTERFACE NAME="mpp_read">
    530 !   <OVERVIEW>
    531 !     Read from an open file.
    532 !   </OVERVIEW>
    533 !   <DESCRIPTION>
    534 !      <TT>mpp_read</TT> is used to read data to the file on an I/O unit
    535 !      using the file parameters supplied by <LINK
    536 !      SRC="#mpp_open"><TT>mpp_open</TT></LINK>. There are two
    537 !      forms of <TT>mpp_read</TT>, one to read
    538 !      distributed field data, and one to read non-distributed field
    539 !      data. <I>Distributed</I> data refer to arrays whose two
    540 !      fastest-varying indices are domain-decomposed. Distributed data must
    541 !      be 2D or 3D (in space). Non-distributed data can be 0-3D.
    542 !
    543 !      The <TT>data</TT> argument for distributed data is expected by
    544 !      <TT>mpp_read</TT> to contain data specified on the <I>data</I> domain,
    545 !      and will read the data belonging to the <I>compute</I> domain,
    546 !      fetching data as required by the parallel I/O <LINK
    547 !      SRC="#modes">mode</LINK> specified in the <TT>mpp_open</TT> call. This
    548 !      is consistent with our definition of <LINK
    549 !      SRC="http:mpp_domains.html#domains">domains</LINK>, where all arrays are
    550 !      expected to be dimensioned on the data domain, and all operations
    551 !      performed on the compute domain.
    552 !   </DESCRIPTION>
    553 !   <TEMPLATE>
    554 !     call mpp_read( unit, field, data, time_index )
    555 !   </TEMPLATE>
    556 !   <TEMPLATE>
    557 !     call mpp_read( unit, field, domain, data, time_index )
    558 !   </TEMPLATE>
    559 !  <IN NAME="unit"></IN>
    560 !  <IN NAME="field"></IN>
    561 !  <INOUT NAME="data"></INOUT>
    562 !  <IN NAME="domain"></IN>
    563 !  <IN NAME="time_index">
    564 !     time_index is an optional argument. It is to be omitted if the
    565 !     field was defined not to be a function of time. Results are
    566 !     unpredictable if the argument is supplied for a time- independent
    567 !     field, or omitted for a time-dependent field.
    568 !  </IN>
    569 !  <NOTE>

Page 11          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    570 !     The type of read performed by <TT>mpp_read</TT> depends on
    571 !     the file characteristics on the I/O unit specified at the <LINK
    572 !     SRC="#mpp_open"><TT>mpp_open</TT></LINK> call. Specifically, the
    573 !     format of the input data (e.g netCDF or IEEE) and the
    574 !     <TT>threading</TT> flags, etc., can be changed there, and
    575 !     require no changes to the <TT>mpp_read</TT>
    576 !     calls. (<TT>fileset</TT> = MPP_MULTI is not supported by
    577 !     <TT>mpp_read</TT>; IEEE is currently not supported).
    578 !
    579 !     Packed variables are unpacked using the <TT>scale</TT> and
    580 !     <TT>add</TT> attributes.
    581 !
    582 !     <TT>mpp_read_meta</TT> must be called prior to calling <TT>mpp_read.</TT>
    583 !  </NOTE>
    584 ! </INTERFACE>
    585   interface mpp_read
    586      module procedure mpp_read_2ddecomp_r2d_r4
    587      module procedure mpp_read_2ddecomp_r3d_r4
    588      module procedure mpp_read_2ddecomp_r4d_r4
    589      module procedure mpp_read_2ddecomp_r2d_r8
    590      module procedure mpp_read_2ddecomp_r3d_r8
    591      module procedure mpp_read_2ddecomp_r4d_r8
    592      module procedure mpp_read_region_r2D_r4
    593      module procedure mpp_read_region_r3D_r4
    594      module procedure mpp_read_region_r2D_r8
    595      module procedure mpp_read_region_r3D_r8
    596      module procedure mpp_read_r0D_r4
    597      module procedure mpp_read_r1D_r4
    598      module procedure mpp_read_r2D_r4
    599      module procedure mpp_read_r3D_r4
    600      module procedure mpp_read_r4D_r4
    601      module procedure mpp_read_r0D_r8
    602      module procedure mpp_read_r1D_r8
    603      module procedure mpp_read_r2D_r8
    604      module procedure mpp_read_r3D_r8
    605      module procedure mpp_read_r4D_r8
    606      module procedure mpp_read_text
    607   end interface
    608 
    609 !***********************************************************************
    610 !
    611 !      public interfaces from mpp_io_read_distributed_ascii.inc
    612 !
    613 !***********************************************************************
    614 ! <INTERFACE NAME="mpp_read_distributed_ascii">
    615 !   <OVERVIEW>
    616 !     Read from an opened, ascii file, translating data to the desired format
    617 !   </OVERVIEW>
    618 !   <DESCRIPTION>
    619 !     These routines are part of the mpp_read family. It is intended to
    620 !     provide a general purpose, distributed, list directed read
    621 !  </DESCRIPTION>
    622 !   <TEMPLATE>
    623 !     call mpp_read_distributed_ascii(unit,fmt,ssize,data,iostat)
    624 !   </TEMPLATE>
    625 !  <IN NAME="unit"></IN>
    626 !  <IN NAME="fmt"></IN>

Page 12          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    627 !  <IN NAME="ssize"></IN>
    628 !  <INOUT NAME="data"></IN>
    629 !  <OUT NAME="iostat">
    630 !  </IN>
    631 !  <NOTE>
    632 !     <TT>mpp_read_distributed_ascii</TT>
    633 !     The stripe size must be greater than or equal to 1. The stripe
    634 !     size does not have to be a common denominator of the number of
    635 !     MPI ranks.
    636 !  </NOTE>
    637 ! </INTERFACE>
    638   interface mpp_read_distributed_ascii
    639      module procedure mpp_read_distributed_ascii_r1d
    640      module procedure mpp_read_distributed_ascii_i1d
    641      module procedure mpp_read_distributed_ascii_a1d
    642   end interface
    643 
    644 
    645 !***********************************************************************
    646 !
    647 !      public interfaces from mpp_io_read_compressed.h
    648 !
    649 !***********************************************************************
    650 ! <INTERFACE NAME="mpp_read_compressed">
    651 !   <OVERVIEW>
    652 !     Read from an opened, sparse data, compressed file (e.g. land_model)
    653 !   </OVERVIEW>
    654 !   <DESCRIPTION>
    655 !     These routines are similar to mpp_read except that they are designed
    656 !     to handle sparse, compressed vectors of data such as from the
    657 !     land model. Currently, the sparse vector may vary in z. Hence
    658 !     the need for the rank 2 treatment.
    659 !  </DESCRIPTION>
    660 !   <TEMPLATE>
    661 !     call mpp_read_compressed( unit, field, domain, data, time_index )
    662 !   </TEMPLATE>
    663 !  <IN NAME="unit"></IN>
    664 !  <IN NAME="field"></IN>
    665 !  <IN NAME="domain"></IN>
    666 !  <INOUT NAME="data"></INOUT>
    667 !  <IN NAME="time_index">
    668 !     time_index is an optional argument. It is to be omitted if the
    669 !     field was defined not to be a function of time. Results are
    670 !     unpredictable if the argument is supplied for a time- independent
    671 !     field, or omitted for a time-dependent field.
    672 !  </IN>
    673 !  <NOTE>
    674 !     <TT>mpp_read_meta</TT> must be called prior to calling
    675 !     <TT>mpp_read_compressed.</TT>
    676 !     Since in general, the vector is distributed across the io-domain
    677 !     The read expects the io_domain to be defined.
    678 !  </NOTE>
    679 ! </INTERFACE>
    680   interface mpp_read_compressed
    681      module procedure mpp_read_compressed_r1d_r4
    682      module procedure mpp_read_compressed_r2d_r4
    683      module procedure mpp_read_compressed_r3d_r4

Page 13          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    684      module procedure mpp_read_compressed_r1d_r8
    685      module procedure mpp_read_compressed_r2d_r8
    686      module procedure mpp_read_compressed_r3d_r8
    687   end interface mpp_read_compressed
    688 
    689 
    690 !***********************************************************************
    691 !
    692 !    public interface from mpp_io_write.h
    693 !
    694 !***********************************************************************
    695 
    696 ! <INTERFACE NAME="mpp_write_meta">
    697 !   <OVERVIEW>
    698 !     Write metadata.
    699 !   </OVERVIEW>
    700 !   <DESCRIPTION>
    701 !     This routine is used to write the <LINK SRC="#metadata">metadata</LINK>
    702 !     describing the contents of a file being written. Each file can contain
    703 !     any number of fields, which are functions of 0-3 space axes and 0-1
    704 !     time axes. (Only one time axis can be defined per file). The basic
    705 !     metadata defined <LINK SRC="#metadata">above</LINK> for <TT>axistype</TT>
    706 !     and <TT>fieldtype</TT> are written in the first two forms of the call
    707 !     shown below. These calls will associate a unique variable ID with each
    708 !     variable (axis or field). These can be used to attach any other real,
    709 !     integer or character attribute to a variable. The last form is used to
    710 !     define a <I>global</I> real, integer or character attribute that
    711 !     applies to the dataset as a whole.
    712 !   </DESCRIPTION>
    713 !  <TEMPLATE>
    714 !    call mpp_write_meta( unit, axis, name, units, longname,
    715 !      cartesian, sense, domain, data )
    716 !  </TEMPLATE>
    717 !  <NOTE>
    718 !    The first form defines a time or space axis. Metadata corresponding to the type
    719 !    above are written to the file on &lt;unit&gt;. A unique ID for subsequen
    720 !    references to this axis is returned in axis%id. If the &lt;domain&gt;
    721 !    element is present, this is recognized as a distributed data axis
    722 !    and domain decomposition information is also written if required (the
    723 !    domain decomposition info is required for multi-fileset multi-threaded
    724 !    I/O). If the &lt;data&gt; element is allocated, it is considered to be a
    725 !    space axis, otherwise it is a time axis with an unlimited dimension. Only
    726 !    one time axis is allowed per file.
    727 !  </NOTE>
    728 !  <TEMPLATE>
    729 !    call mpp_write_meta( unit, field, axes, name, units, longname,
    730 !                              min, max, missing, fill, scale, add, pack )
    731 !  </TEMPLATE>
    732 !  <NOTE>
    733 !    The second form defines a field. Metadata corresponding to the type
    734 !    above are written to the file on &lt;unit&gt;. A unique ID for subsequen
    735 !    references to this field is returned in field%id. At least one axis
    736 !    must be associated, 0D variables are not considered. mpp_write_meta
    737 !    must previously have been called on all axes associated with this
    738 !    field.
    739 !  </NOTE>
    740 !  <TEMPLATE>

Page 14          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    741 !    call mpp_write_meta( unit, id, name, rval=rval, pack=pack )
    742 !  </TEMPLATE>
    743 !  <TEMPLATE>
    744 !    call mpp_write_meta( unit, id, name, ival=ival )
    745 !  </TEMPLATE>
    746 !  <TEMPLATE>
    747 !    call mpp_write_meta( unit, id, name, cval=cval )
    748 !  </TEMPLATE>
    749 !  <NOTE>
    750 !    The third form (3 - 5) defines metadata associated with a previously defined
    751 !    axis or field, identified to mpp_write_meta by its unique ID &lt;id&gt;.
    752 !    The attribute is named &lt;name&gt; and can take on a real, integer
    753 !    or character value. &lt;rval&gt; and &lt;ival&gt; can be scalar or 1D arrays.
    754 !    This need not be called for attributes already contained in
    755 !    the type.
    756 !  </NOTE>
    757 !  <TEMPLATE>
    758 !    call mpp_write_meta( unit, name, rval=rval, pack=pack )
    759 !  </TEMPLATE>
    760 !  <TEMPLATE>
    761 !    call mpp_write_meta( unit, name, ival=ival )
    762 !  </TEMPLATE>
    763 !  <TEMPLATE>
    764 !    call mpp_write_meta( unit, name, cval=cval )
    765 !  </TEMPLATE>
    766 !  <NOTE>
    767 !    The last form (6 - 8) defines global metadata associated with the file as a
    768 !    whole. The attribute is named &lt;name&gt; and can take on a real, integer
    769 !    or character value. &lt;rval&gt; and &lt;ival&gt; can be scalar or 1D arrays.
    770 !  </NOTE>
    771 !  <IN NAME="unit"></IN>
    772 !  <OUT NAME="axis"></OUT>
    773 !  <IN NAME="name"></IN>
    774 !  <IN NAME="units"></IN>
    775 !  <IN NAME="longname"></IN>
    776 !  <IN NAME="cartesian"></IN>
    777 !  <IN NAME="sense"></IN>
    778 !  <IN NAME="domain"></IN>
    779 !  <IN NAME="data"></IN>
    780 !  <OUT NAME="field"></OUT>
    781 !  <IN NAME="min, max"></IN>
    782 !  <IN NAME="missing"></IN>
    783 !  <IN NAME="fill"></IN>
    784 !  <IN NAME="scale"></IN>
    785 !  <IN NAME="add"></IN>
    786 !  <IN NAME="pack"></IN>
    787 !  <IN NAME="id"></IN>
    788 !  <IN NAME="cval"></IN>
    789 !  <IN NAME="ival"></IN>
    790 !  <IN NAME="rval"></IN>
    791 ! <NOTE>
    792 !    Note that <TT>mpp_write_meta</TT> is expecting axis data on the
    793 !    <I>global</I> domain even if it is a domain-decomposed axis.
    794 !
    795 !    You cannot interleave calls to <TT>mpp_write</TT> and
    796 !    <TT>mpp_write_meta</TT>: the first call to
    797 !    <TT>mpp_write</TT> implies that metadata specification is complete.

Page 15          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    798 ! </NOTE>
    799 ! </INTERFACE>
    800   interface mpp_write_meta
    801      module procedure mpp_write_meta_var
    802      module procedure mpp_write_meta_scalar_r
    803      module procedure mpp_write_meta_scalar_i
    804      module procedure mpp_write_meta_axis_r1d
    805      module procedure mpp_write_meta_axis_i1d
    806      module procedure mpp_write_meta_axis_unlimited
    807      module procedure mpp_write_meta_field
    808      module procedure mpp_write_meta_global
    809      module procedure mpp_write_meta_global_scalar_r
    810      module procedure mpp_write_meta_global_scalar_i
    811   end interface
    812 
    813   interface mpp_copy_meta
    814      module procedure mpp_copy_meta_axis
    815      module procedure mpp_copy_meta_field
    816      module procedure mpp_copy_meta_global
    817   end interface
    818 
    819   interface mpp_modify_meta
    820 !     module procedure mpp_modify_att_meta
    821      module procedure mpp_modify_field_meta
    822      module procedure mpp_modify_axis_meta
    823   end interface
    824 
    825 ! <INTERFACE NAME="mpp_write">
    826 !   <OVERVIEW>
    827 !     Write to an open file.
    828 !   </OVERVIEW>
    829 !   <DESCRIPTION>
    830 !    <TT>mpp_write</TT> is used to write data to the file on an I/O unit
    831 !    using the file parameters supplied by <LINK
    832 !    SRC="#mpp_open"><TT>mpp_open</TT></LINK>. Axis and field definitions must
    833 !    have previously been written to the file using <LINK
    834 !    SRC="#mpp_write_meta"><TT>mpp_write_meta</TT></LINK>.  There are three
    835 !    forms of <TT>mpp_write</TT>, one to write axis data, one to write
    836 !    distributed field data, and one to write non-distributed field
    837 !    data. <I>Distributed</I> data refer to arrays whose two
    838 !    fastest-varying indices are domain-decomposed. Distributed data must
    839 !    be 2D or 3D (in space). Non-distributed data can be 0-3D.
    840 !
    841 !    The <TT>data</TT> argument for distributed data is expected by
    842 !    <TT>mpp_write</TT> to contain data specified on the <I>data</I> domain,
    843 !    and will write the data belonging to the <I>compute</I> domain,
    844 !    fetching or sending data as required by the parallel I/O <LINK
    845 !    SRC="#modes">mode</LINK> specified in the <TT>mpp_open</TT> call. This
    846 !    is consistent with our definition of <LINK
    847 !    SRC="http:mpp_domains.html#domains">domains</LINK>, where all arrays are
    848 !    expected to be dimensioned on the data domain, and all operations
    849 !    performed on the compute domain.
    850 !
    851 !     The type of the <TT>data</TT> argument must be a <I>default
    852 !     real</I>, which can be 4 or 8 byte.
    853 !   </DESCRIPTION>
    854 !  <TEMPLATE>

Page 16          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    855 !    mpp_write( unit, axis )
    856 !  </TEMPLATE>
    857 !  <TEMPLATE>
    858 !    mpp_write( unit, field, data, tstamp )
    859 !  </TEMPLATE>
    860 !  <TEMPLATE>
    861 !    mpp_write( unit, field, domain, data, tstamp )
    862 !  </TEMPLATE>
    863 !  <IN NAME="tstamp">
    864 !    <TT>tstamp</TT> is an optional argument. It is to
    865 !    be omitted if the field was defined not to be a function of time.
    866 !    Results are unpredictable if the argument is supplied for a time-
    867 !    independent field, or omitted for a time-dependent field. Repeated
    868 !    writes of a time-independent field are also not recommended. One
    869 !    time level of one field is written per call. tstamp must be an 8-byte
    870 !    real, even if the default real type is 4-byte.
    871 !  </IN>
    872 !  <NOTE>
    873 !    The type of write performed by <TT>mpp_write</TT> depends on the file
    874 !    characteristics on the I/O unit specified at the <LINK
    875 !    SRC="#mpp_open"><TT>mpp_open</TT></LINK> call. Specifically, the format of
    876 !    the output data (e.g netCDF or IEEE), the <TT>threading</TT> and
    877 !    <TT>fileset</TT> flags, etc., can be changed there, and require no
    878 !    changes to the <TT>mpp_write</TT> calls.
    879 !
    880 !    Packing is currently not implemented for non-netCDF files, and the
    881 !    <TT>pack</TT> attribute is ignored. On netCDF files,
    882 !    <TT>NF_DOUBLE</TT>s (8-byte IEEE floating point numbers) are
    883 !    written for <TT>pack</TT>=1 and <TT>NF_FLOAT</TT>s for
    884 !    <TT>pack</TT>=2. (<TT>pack</TT>=2 gives the customary
    885 !    and default behaviour). We write <TT>NF_SHORT</TT>s (2-byte
    886 !    integers) for <TT>pack=4</TT>, or <TT>NF_BYTE</TT>s
    887 !    (1-byte integers) for <TT>pack=8</TT>. Integer scaling is done
    888 !    using the <TT>scale</TT> and <TT>add</TT> attributes at
    889 !    <TT>pack</TT>=4 or 8, satisfying the relation
    890 !
    891 !    <PRE>
    892 !    data = packed_data*scale + add
    893 !    </PRE>
    894 !
    895 !    <TT>NOTE: mpp_write</TT> does not check to see if the scaled
    896 !    data in fact fits into the dynamic range implied by the specified
    897 !    packing. It is incumbent on the user to supply correct scaling
    898 !    attributes.
    899 !
    900 !    You cannot interleave calls to <TT>mpp_write</TT> and
    901 !    <TT>mpp_write_meta</TT>: the first call to
    902 !    <TT>mpp_write</TT> implies that metadata specification is
    903 !    complete.
    904 ! </NOTE>
    905 ! </INTERFACE>
    906 
    907 
    908   interface write_record
    909      module procedure write_record_r8
    910      module procedure write_record_r4
    911   end interface

Page 17          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    912 
    913   interface mpp_write
    914      module procedure mpp_write_2ddecomp_r2d_r8
    915      module procedure mpp_write_2ddecomp_r3d_r8
    916      module procedure mpp_write_2ddecomp_r4d_r8
    917      module procedure mpp_write_2ddecomp_r2d_r4
    918      module procedure mpp_write_2ddecomp_r3d_r4
    919      module procedure mpp_write_2ddecomp_r4d_r4
    920      module procedure mpp_write_r0D_r8
    921      module procedure mpp_write_r1D_r8
    922      module procedure mpp_write_r2D_r8
    923      module procedure mpp_write_r3D_r8
    924      module procedure mpp_write_r4D_r8
    925      module procedure mpp_write_r0D_r4
    926      module procedure mpp_write_r1D_r4
    927      module procedure mpp_write_r2D_r4
    928      module procedure mpp_write_r3D_r4
    929      module procedure mpp_write_r4D_r4
    930      module procedure mpp_write_axis
    931   end interface
    932 
    933 
    934 !***********************************************************************
    935 ! <INTERFACE NAME="mpp_write_compressed">
    936 !   <OVERVIEW>
    937 !     Write to an opened, sparse data, compressed file (e.g. land_model)
    938 !   </OVERVIEW>
    939 !   <DESCRIPTION>
    940 !     These routines are similar to mpp_write except that they are
    941 !     designed to handle sparse, compressed vectors of data such
    942 !     as from the land model. Currently, the sparse vector may vary in z.
    943 !     Hence the need for the rank 2 treatment.
    944 !  </DESCRIPTION>
    945 !   <TEMPLATE>
    946 !     call mpp_write(unit, field, domain, data, nelems_io, tstamp, default_data )
    947 !   </TEMPLATE>
    948 !  <IN NAME="unit"></IN>
    949 !  <IN NAME="field"></IN>
    950 !  <IN NAME="domain"></IN>
    951 !  <INOUT NAME="data"></INOUT>
    952 !  <IN NAME="nelems_io">
    953 !    <TT>nelems</TT> is a vector containing the number of elements expected
    954 !    from each member of the io_domain. It MUST have the same order as
    955 !    the io_domain pelist.
    956 !  </IN>
    957 !  <IN NAME="tstamp">
    958 !    <TT>tstamp</TT> is an optional argument. It is to
    959 !    be omitted if the field was defined not to be a function of time.
    960 !    Results are unpredictable if the argument is supplied for a time-
    961 !    independent field, or omitted for a time-dependent field. Repeated
    962 !    writes of a time-independent field are also not recommended. One
    963 !    time level of one field is written per call. tstamp must be an 8-byte
    964 !    real, even if the default real type is 4-byte.
    965 !  </IN>
    966 !  <IN NAME="default_data"></IN>
    967 !  <NOTE>
    968 !     <TT>mpp_write_meta</TT> must be called prior to calling

Page 18          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

    969 !     <TT>mpp_write_compressed.</TT>
    970 !     Since in general, the vector is distributed across the io-domain
    971 !     The write expects the io_domain to be defined.
    972 !  </NOTE>
    973 ! </INTERFACE>
    974   interface mpp_write_compressed
    975      module procedure mpp_write_compressed_r1d_r8
    976      module procedure mpp_write_compressed_r2d_r8
    977      module procedure mpp_write_compressed_r3d_r8
    978      module procedure mpp_write_compressed_r1d_r4
    979      module procedure mpp_write_compressed_r2d_r4
    980      module procedure mpp_write_compressed_r3d_r4
    981   end interface mpp_write_compressed
    982 
    983 !***********************************************************************
    984 ! <INTERFACE NAME="mpp_write_unlimited_axis">
    985 !   <OVERVIEW>
    986 !     Write to an opened file along the unlimited axis (e.g. icebergs)
    987 !   </OVERVIEW>
    988 !   <DESCRIPTION>
    989 !     These routines are similar to mpp_write except that they are
    990 !     designed to handle data written along the unlimited axis that
    991 !     is not time (e.g. icebergs).
    992 !  </DESCRIPTION>
    993 !   <TEMPLATE>
    994 !     call mpp_write(unit, field, domain, data, nelems_io)
    995 !   </TEMPLATE>
    996 !  <IN NAME="unit"></IN>
    997 !  <IN NAME="field"></IN>
    998 !  <IN NAME="domain"></IN>
    999 !  <INOUT NAME="data"></INOUT>
   1000 !  <IN NAME="nelems">
   1001 !    <TT>nelems</TT> is a vector containing the number of elements expected
   1002 !    from each member of the io_domain. It MUST have the same order as
   1003 !    the io_domain pelist.
   1004 !  </IN>
   1005 !  <NOTE>
   1006 !     <TT>mpp_write_meta</TT> must be called prior to calling
   1007 !     <TT>mpp_write_unlimited_axis.</TT>
   1008 !     Since in general, the vector is distributed across the io-domain
   1009 !     The write expects the io_domain to be defined.
   1010 !  </NOTE>
   1011 ! </INTERFACE>
   1012   interface mpp_write_unlimited_axis
   1013      module procedure mpp_write_unlimited_axis_r1d
   1014   end interface mpp_write_unlimited_axis
   1015 
   1016 
   1017 !***********************************************************************
   1018 ! <INTERFACE NAME="mpp_def_dim">
   1019 !   <OVERVIEW>
   1020 !     Define an dimension variable
   1021 !   </OVERVIEW>
   1022 !   <DESCRIPTION>
   1023 !     Similar to the mpp_write_meta routines, but simply defines the
   1024 !     a dimension variable with the optional attributes
   1025 !  </DESCRIPTION>

Page 19          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 mpp_io.F90

   1026 !   <TEMPLATE>
   1027 !     call mpp_def_dim( unit, name, dsize, longname, data )
   1028 !   </TEMPLATE>
   1029 !  <IN NAME="unit"></IN>
   1030 !  <IN NAME="name"></IN>
   1031 !  <IN NAME="dsize"></IN>
   1032 !  <IN NAME="data"></INOUT>
   1033 ! </INTERFACE>
   1034   interface mpp_def_dim
   1035      module procedure mpp_def_dim_nodata
   1036      module procedure mpp_def_dim_int
   1037      module procedure mpp_def_dim_real
   1038   end interface mpp_def_dim
   1039 
   1040 !***********************************************************************
   1041 !
   1042 !            module variables
   1043 !
   1044 !***********************************************************************
   1045   logical            :: module_is_initialized = .FALSE.
   1046   logical            :: verbose =.FALSE.
   1047   logical            :: debug = .FALSE.
   1048   integer            :: maxunits, unit_begin, unit_end
   1049   integer            :: mpp_io_stack_size=0, mpp_io_stack_hwm=0
   1050   integer            :: varnum=0
   1051   integer            :: pe, npes
   1052   character(len=256) :: text
   1053   integer            :: error
   1054   integer            :: records_per_pe
   1055   integer            :: mpp_read_clock=0, mpp_write_clock=0
   1056   integer            :: mpp_open_clock=0, mpp_close_clock=0
   1057 
   1058 
   1059 !initial value of buffer between meta_data and data in .nc file
   1060   integer            :: header_buffer_val = 16384  ! value used in NF__ENDDEF
   1061   logical            :: global_field_on_root_pe = .true.
   1062   logical            :: io_clocks_on = .false.
   1063   integer            :: shuffle = 0
   1064   integer            :: deflate = 0
   1065   integer            :: deflate_level = -1
   1066   logical            :: cf_compliance = .false.
   1067 
   1068   namelist /mpp_io_nml/header_buffer_val, global_field_on_root_pe, io_clocks_on, &
   1069                        shuffle, deflate_level, cf_compliance
   1070 
   1071   real(r8_kind), allocatable :: mpp_io_stack(:)
   1072   type(axistype),save            :: default_axis      !provided to users with default components
   1073   type(fieldtype),save           :: default_field     !provided to users with default components
   1074   type(atttype),save             :: default_att       !provided to users with default components
   1075   type(filetype), allocatable    :: mpp_file(:)
   1076 
   1077   integer :: pack_size ! = 1 when compiling with -r8 and = 2 when compiling with -r4.
   1078 
   1079 ! Include variable "version" to be written to log file.
   1080 # 1 "../include/file_version.h" 1 
   1081 ! -*-f90-*-
   1082 !***********************************************************************

Page 20          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 ../include/file_version.h

   1083 !*                   GNU Lesser General Public License
   1084 !*
   1085 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1086 !*
   1087 !* FMS is free software: you can redistribute it and/or modify it under
   1088 !* the terms of the GNU Lesser General Public License as published by
   1089 !* the Free Software Foundation, either version 3 of the License, or (at
   1090 !* your option) any later version.
   1091 !*
   1092 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1093 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1094 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1095 !* for more details.
   1096 !*
   1097 !* You should have received a copy of the GNU Lesser General Public
   1098 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1099 !***********************************************************************
   1100 
   1101 # 23
   1102 
   1103   character(len=*), parameter :: version = 'unknown'
   1104 
   1105 # 1080 "mpp_io.F90" 2 
   1106 
   1107 !----------
   1108 !ug support
   1109 public :: mpp_io_unstructured_write
   1110 public :: mpp_io_unstructured_read
   1111 
   1112 interface mpp_io_unstructured_write
   1113     module procedure mpp_io_unstructured_write_r8_1D
   1114     module procedure mpp_io_unstructured_write_r8_2D
   1115     module procedure mpp_io_unstructured_write_r8_3D
   1116     module procedure mpp_io_unstructured_write_r8_4D
   1117     module procedure mpp_io_unstructured_write_r4_1D
   1118     module procedure mpp_io_unstructured_write_r4_2D
   1119     module procedure mpp_io_unstructured_write_r4_3D
   1120     module procedure mpp_io_unstructured_write_r4_4D
   1121 end interface mpp_io_unstructured_write
   1122 
   1123 interface mpp_io_unstructured_read
   1124     module procedure mpp_io_unstructured_read_r8_1D
   1125     module procedure mpp_io_unstructured_read_r8_2D
   1126     module procedure mpp_io_unstructured_read_r8_3D
   1127     module procedure mpp_io_unstructured_read_r4_1D
   1128     module procedure mpp_io_unstructured_read_r4_2D
   1129     module procedure mpp_io_unstructured_read_r4_3D
   1130 end interface mpp_io_unstructured_read
   1131 !----------
   1132 
   1133 contains
   1134 
   1135 # 1 "../mpp/include/mpp_io_util.inc" 1 
   1136 ! -*-f90-*-
   1137 
   1138 
   1139 !***********************************************************************

Page 21          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1140 !*                   GNU Lesser General Public License
   1141 !*
   1142 !* This file is part of the GFDL Flexible Modeling System (FMS).
   1143 !*
   1144 !* FMS is free software: you can redistribute it and/or modify it under
   1145 !* the terms of the GNU Lesser General Public License as published by
   1146 !* the Free Software Foundation, either version 3 of the License, or (at
   1147 !* your option) any later version.
   1148 !*
   1149 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   1150 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   1151 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   1152 !* for more details.
   1153 !*
   1154 !* You should have received a copy of the GNU Lesser General Public
   1155 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   1156 !***********************************************************************
   1157 
   1158 !#####################################################################
   1159 ! <SUBROUTINE NAME="mpp_get_info">
   1160 !   <OVERVIEW>
   1161 !     Get some general information about a file.
   1162 !   </OVERVIEW>
   1163 !   <DESCRIPTION>
   1164 !     Get some general information about a file.
   1165 !   </DESCRIPTION>
   1166 !   <TEMPLATE>
   1167 !     call mpp_get_info( unit, ndim, nvar, natt, ntime )
   1168 !   </TEMPLATE>
   1169 !   <IN NAME="unit" TYPE="integer"> </IN>
   1170 !   <OUT NAME="ndim" TYPE="integer"> </OUT>
   1171 !   <OUT NAME="nvar" TYPE="integer"> </OUT>
   1172 !   <OUT NAME="natt" TYPE="integer"> </OUT>
   1173 !   <OUT NAME="ntime" TYPE="integer"> </OUT>
   1174 ! </SUBROUTINE>
   1175 
   1176     subroutine mpp_get_info( unit, ndim, nvar, natt, ntime )
   1177 
   1178       integer, intent(in) :: unit
   1179       integer, intent(out) :: ndim, nvar, natt, ntime
   1180 
   1181 
   1182       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_GET_INFO: must first call mpp_io_init.' )
   1183       if( .NOT.mpp_file(unit)%opened )&
   1184            call mpp_error(FATAL, 'MPP_GET_INFO: invalid unit number, file '//trim(mpp_file(unit)%name))
   1185 
   1186       ndim = mpp_file(unit)%ndim
   1187       nvar = mpp_file(unit)%nvar
   1188       natt = mpp_file(unit)%natt
   1189       ntime = mpp_file(unit)%time_level
   1190 
   1191       return
   1192 
   1193     end subroutine mpp_get_info

Page 22          Source Listing                  MPP_GET_INFO
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_util.inc



ENTRY POINTS

  Name                                   
                                         
 mpp_io_mod_mp_mpp_get_info_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FATAL                      Param  1182     I(4)            4           scalar   PRIV             332,1182,1184,1211,1213,1216,1260,
                                                                                                  1270,1280,1297,1330,1354,1355,1358
                                                                                                  ,1384,1386,1389,1420,1422,1442,144
                                                                                                  4,1483,1485,1496,1607,1627,1646,16
                                                                                                  47,1707,1708,1709,1986,1996,1998,2
                                                                                                  038,2043,2058,2162,2174,2180,2293,
                                                                                                  2343,2353,2355,2356,2591,2602,2649
                                                                                                  ,2684,2693,2741,2752,2767,2778,281
                                                                                                  5,2832,2834,2838,2847,2850,2853,29
                                                                                                  16,2933,2954,2980,2983,3060,3076,3
                                                                                                  338,3394,3440,3441,3444,3445,3456,
                                                                                                  3457,3556,3558,3559,3599,3608,3732
                                                                                                  ,3788,3834,3835,3838,3839,3850,385
                                                                                                  1,3950,3952,3953,3993,4002,4129,41
                                                                                                  30,4143,4165,4225,4226,4236,4258,4
                                                                                                  360,4361,4374,4396,4456,4457,4467,
                                                                                                  4489,4583,4588,4637,4642,4669,4674
                                                                                                  ,4854,4858,4860,4875,4879,4881,489
                                                                                                  4,4898,4900,4913,4917,4919,4940,49
                                                                                                  41,4944,4953,4957,4961,4966,4985,4
                                                                                                  988,5123,5129,5141,5147,5161,5167,
                                                                                                  5179,5185,5245,5251,5262,5268,5279
                                                                                                  ,5285,5292,5300,5308,5324,5337,535
                                                                                                  9,5372,5378,5392,5399,5413,5420,54
                                                                                                  35,5442,5454,5525,5537,5540,5544,5
                                                                                                  552,5564,5576,5585,5614,5632,5668,
                                                                                                  5678,5684,5697,5703,5718,5725,5740
                                                                                                  ,5746,5758,5804,5844,5848,6044,604
                                                                                                  9,6051,6099,6103,6105,6303,6308,63
                                                                                                  10,6349,6377,6451,6456,6458,6480,6
                                                                                                  523,6528,6530,6547,6612,6619,6688,
                                                                                                  6692,6695,6760,6817,6850,6853,6901
                                                                                                  ,6918,6924,6938,7060,7062,7227,722
                                                                                                  8,7245,7342,7343,7360,7503,7505,76
                                                                                                  70,7671,7688,7785,7786,7803,7969,7
                                                                                                  970,7976,7988,8118,8119,8125,8137,
                                                                                                  8216,8217,8220,8650,8655,8678,8703
                                                                                                  ,8705,8747,8752,8812,8854,8859,887
                                                                                                  1,8915,9185,9193,9220,9226,9320,93
                                                                                                  28,9355,9361,9481,9489,9516,9522,9
                                                                                                  651,9659,9686,9692,9832,9840,9867,
                                                                                                  9873,9967,9975,10002,10008,10128,1
                                                                                                  0136,10163,10169,10298,10306,10333
                                                                                                  ,10339,10501,10509,10582,10680,106

Page 23          Source Listing                  MPP_GET_INFO
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  88,10761,10859,10867,10940,11042,1
                                                                                                  1050,11123,11221,11229,11302,11400
                                                                                                  ,11408,11481                      
 MODULE_IS_INITIALIZED      Local  1182     L(4)            4           scalar                    1045,1182,1211,1354,1384,1419,1442
                                                                                                  ,1483,1646,2136,2268,2293,2320,235
                                                                                                  3,2602,3060,3440,3558,3834,3952,41
                                                                                                  29,4225,4360,4456,4583,4637,4669,4
                                                                                                  940,6044,6099,6303,6451,6523,6612,
                                                                                                  7060,7227,7342,7503,7670,7785,7969
                                                                                                  ,8118,8216,8650,8703,8747,8854,918
                                                                                                  4,9319,9480,9650,9831,9966,10127,1
                                                                                                  0297,10500,10679,10858,11041,11220
                                                                                                  ,11399                            
 MPP_ERROR                  Local  1182                                 scalar   PRIV             332,1182,1184,1211,1213,1216,1260,
                                                                                                  1270,1280,1297,1330,1354,1355,1358
                                                                                                  ,1384,1386,1389,1420,1422,1442,144
                                                                                                  4,1483,1485,1496,1607,1627,1629,16
                                                                                                  46,1647,1707,1708,1709,1725,1986,1
                                                                                                  996,1998,2038,2043,2058,2162,2174,
                                                                                                  2180,2293,2343,2353,2355,2356,2591
                                                                                                  ,2602,2624,2649,2684,2693,2741,275
                                                                                                  2,2767,2778,2815,2832,2834,2838,28
                                                                                                  47,2850,2853,2916,2933,2954,2958,2
                                                                                                  976,2980,2983,3060,3074,3076,3338,
                                                                                                  3394,3440,3441,3444,3445,3456,3457
                                                                                                  ,3556,3558,3559,3599,3608,3732,378
                                                                                                  8,3834,3835,3838,3839,3850,3851,39
                                                                                                  50,3952,3953,3993,4002,4129,4130,4
                                                                                                  143,4165,4178,4196,4225,4226,4236,
                                                                                                  4258,4270,4288,4360,4361,4374,4396
                                                                                                  ,4409,4427,4456,4457,4467,4489,450
                                                                                                  1,4519,4583,4588,4637,4642,4669,46
                                                                                                  74,4854,4858,4860,4875,4879,4881,4
                                                                                                  894,4898,4900,4913,4917,4919,4940,
                                                                                                  4941,4944,4953,4957,4961,4966,4985
                                                                                                  ,4988,5107,5123,5129,5141,5147,516
                                                                                                  1,5167,5179,5185,5245,5251,5262,52
                                                                                                  68,5279,5285,5292,5300,5308,5324,5
                                                                                                  337,5359,5372,5378,5392,5399,5413,
                                                                                                  5420,5435,5442,5454,5525,5537,5540
                                                                                                  ,5544,5552,5564,5576,5585,5614,563
                                                                                                  2,5668,5678,5684,5697,5703,5718,57
                                                                                                  25,5740,5746,5758,5804,5844,5848,6
                                                                                                  044,6049,6051,6099,6103,6105,6303,
                                                                                                  6308,6310,6349,6377,6451,6456,6458
                                                                                                  ,6480,6523,6528,6530,6547,6612,661
                                                                                                  9,6665,6688,6692,6695,6709,6760,68
                                                                                                  17,6850,6853,6861,6901,6918,6924,6
                                                                                                  938,7060,7062,7227,7228,7245,7342,
                                                                                                  7343,7360,7503,7505,7670,7671,7688
                                                                                                  ,7785,7786,7803,7969,7970,7976,798
                                                                                                  8,8118,8119,8125,8137,8216,8217,82
                                                                                                  20,8650,8655,8678,8703,8705,8747,8
                                                                                                  752,8812,8854,8859,8871,8915,8923,
                                                                                                  9111,9185,9193,9220,9226,9320,9328

Page 24          Source Listing                  MPP_GET_INFO
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,9355,9361,9481,9489,9516,9522,965
                                                                                                  1,9659,9686,9692,9832,9840,9867,98
                                                                                                  73,9967,9975,10002,10008,10128,101
                                                                                                  36,10163,10169,10298,10306,10333,1
                                                                                                  0339,10501,10509,10582,10605,10680
                                                                                                  ,10688,10761,10784,10859,10867,109
                                                                                                  40,10963,11042,11050,11123,11146,1
                                                                                                  1221,11229,11302,11325,11400,11408
                                                                                                  ,11481,11504                      
 MPP_ERROR_BASIC            Subr   1182                                          PRIV             1182,1184,1211,1213,1216,1260,1270
                                                                                                  ,1280,1297,1330,1354,1355,1358,138
                                                                                                  4,1386,1389,1420,1422,1442,1444,14
                                                                                                  83,1485,1496,1607,1627,1629,1646,1
                                                                                                  647,1707,1708,1709,1725,1986,1996,
                                                                                                  1998,2038,2043,2058,2162,2174,2180
                                                                                                  ,2293,2343,2353,2355,2356,2591,260
                                                                                                  2,2624,2649,2684,2693,2741,2752,27
                                                                                                  67,2778,2815,2832,2834,2838,2847,2
                                                                                                  850,2853,2916,2933,2954,2958,2976,
                                                                                                  2980,2983,3060,3074,3076,3338,3394
                                                                                                  ,3440,3441,3444,3445,3456,3457,355
                                                                                                  6,3558,3559,3599,3608,3732,3788,38
                                                                                                  34,3835,3838,3839,3850,3851,3950,3
                                                                                                  952,3953,3993,4002,4129,4130,4143,
                                                                                                  4165,4178,4196,4225,4226,4236,4258
                                                                                                  ,4270,4288,4360,4361,4374,4396,440
                                                                                                  9,4427,4456,4457,4467,4489,4501,45
                                                                                                  19,4583,4588,4637,4642,4669,4674,4
                                                                                                  854,4858,4860,4875,4879,4881,4894,
                                                                                                  4898,4900,4913,4917,4919,4940,4941
                                                                                                  ,4944,4953,4957,4961,4966,4985,498
                                                                                                  8,5107,5123,5129,5141,5147,5161,51
                                                                                                  67,5179,5185,5245,5251,5262,5268,5
                                                                                                  279,5285,5292,5300,5308,5324,5337,
                                                                                                  5359,5372,5378,5392,5399,5413,5420
                                                                                                  ,5435,5442,5454,5525,5537,5540,554
                                                                                                  4,5552,5564,5576,5585,5614,5632,56
                                                                                                  68,5678,5684,5697,5703,5718,5725,5
                                                                                                  740,5746,5758,5804,5844,5848,6044,
                                                                                                  6049,6051,6099,6103,6105,6303,6308
                                                                                                  ,6310,6349,6377,6451,6456,6458,648
                                                                                                  0,6523,6528,6530,6547,6612,6619,66
                                                                                                  65,6688,6692,6695,6709,6760,6817,6
                                                                                                  850,6853,6861,6901,6918,6924,6938,
                                                                                                  7060,7062,7227,7228,7245,7342,7343
                                                                                                  ,7360,7503,7505,7670,7671,7688,778
                                                                                                  5,7786,7803,7969,7970,7976,7988,81
                                                                                                  18,8119,8125,8137,8216,8217,8220,8
                                                                                                  650,8655,8678,8703,8705,8747,8752,
                                                                                                  8812,8854,8859,8871,8915,8923,9111
                                                                                                  ,9185,9193,9220,9226,9320,9328,935
                                                                                                  5,9361,9481,9489,9516,9522,9651,96
                                                                                                  59,9686,9692,9832,9840,9867,9873,9
                                                                                                  967,9975,10002,10008,10128,10136,1
                                                                                                  0163,10169,10298,10306,10333,10339

Page 25          Source Listing                  MPP_GET_INFO
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,10501,10509,10582,10605,10680,106
                                                                                                  88,10761,10784,10859,10867,10940,1
                                                                                                  0963,11042,11050,11123,11146,11221
                                                                                                  ,11229,11302,11325,11400,11408,114
                                                                                                  81,11504                          
 MPP_FILE                   Local  1183     RECORD          656   1     1        ALC              1183,1184,1186,1187,1188,1189,1212
                                                                                                  ,1213,1215,1217,1219,1223,1355,135
                                                                                                  7,1359,1361,1364,1385,1386,1388,13
                                                                                                  90,1394,1397,1400,1401,1402,1421,1
                                                                                                  422,1425,1426,1427,1443,1444,1446,
                                                                                                  1484,1485,1490,1495,1497,1499,1502
                                                                                                  ,1561,1562,1563,1647,1649,1675,195
                                                                                                  0,1952,1963,1979,1980,1982,1983,19
                                                                                                  85,1988,1997,1999,2222,2223,2224,2
                                                                                                  225,2226,2227,2228,2229,2230,2231,
                                                                                                  2232,2233,2234,2235,2236,2237,2238
                                                                                                  ,2239,2241,2242,2243,2244,2246,224
                                                                                                  7,2248,2249,2300,2304,2309,2319,23
                                                                                                  54,2355,2356,2358,2360,2680,2688,2
                                                                                                  689,2696,2697,2698,2699,2701,2702,
                                                                                                  2707,2800,2802,2818,2819,2835,2866
                                                                                                  ,2892,2896,2904,2905,2906,2907,290
                                                                                                  9,2910,2911,2913,2915,2917,2918,29
                                                                                                  20,2922,2923,2924,2925,2928,2929,2
                                                                                                  932,2934,2935,2937,2938,2941,2956,
                                                                                                  2958,2964,2965,2968,2969,2972,2976
                                                                                                  ,2980,2983,2985,2986,2987,2988,299
                                                                                                  3,3071,3079,3080,3081,3083,3089,30
                                                                                                  90,3091,3092,3093,3096,3097,3098,3
                                                                                                  099,3100,3103,3104,3107,3108,3111,
                                                                                                  3112,3113,3115,3116,3118,3119,3120
                                                                                                  ,3122,3123,3124,3125,3126,3129,313
                                                                                                  0,3133,3134,3137,3138,3139,3140,31
                                                                                                  41,3144,3145,3148,3149,3150,3153,3
                                                                                                  154,3155,3156,3157,3158,3159,3160,
                                                                                                  3161,3162,3163,3164,3165,3166,3167
                                                                                                  ,3168,3169,3170,3177,3178,3179,318
                                                                                                  0,3181,3341,3342,3352,3353,3362,33
                                                                                                  63,3368,3369,3379,3380,3385,3386,3
                                                                                                  441,3442,3444,3445,3454,3493,3507,
                                                                                                  3555,3559,3612,3735,3736,3746,3747
                                                                                                  ,3756,3757,3762,3763,3773,3774,377
                                                                                                  9,3780,3835,3836,3838,3839,3848,38
                                                                                                  87,3901,3949,3953,4006,4130,4226,4
                                                                                                  361,4457,4941,4942,4944,4948,4950,
                                                                                                  4974,4976,4978,5053,5054,5056,5059
                                                                                                  ,5060,5061,5067,5068,5069,5070,507
                                                                                                  2,5075,5077,5085,5089,5096,5097,50
                                                                                                  98,5099,5100,5109,5110,5112,5113,5
                                                                                                  114,5120,5133,5135,5138,5151,5153,
                                                                                                  5155,5158,5171,5172,5173,5176,5189
                                                                                                  ,5190,5191,5200,5201,5202,5207,521
                                                                                                  0,5214,5215,5218,5225,5228,5232,52
                                                                                                  33,5234,5235,5236,5238,5241,5242,5
                                                                                                  254,5255,5258,5259,5271,5272,5275,

Page 26          Source Listing                  MPP_GET_INFO
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5276,5288,5289,5295,5297,5315,5318
                                                                                                  ,5331,5334,5342,5345,5349,5351,535
                                                                                                  3,5354,5355,5360,5361,5363,5364,53
                                                                                                  69,5382,5383,5385,5386,5389,5403,5
                                                                                                  404,5406,5407,5410,5425,5426,5428,
                                                                                                  5429,5432,5447,5448,5450,5451,5459
                                                                                                  ,5461,5463,5465,5466,5467,5468,546
                                                                                                  9,5470,5471,5472,5473,5474,5476,54
                                                                                                  77,5478,5479,5480,5481,5482,5483,5
                                                                                                  484,5485,5487,5489,5491,5493,5502,
                                                                                                  5503,5504,5505,5506,5509,5510,5511
                                                                                                  ,5512,5520,5521,5522,5524,5526,552
                                                                                                  7,5533,5538,5539,5541,5543,5545,55
                                                                                                  56,5557,5558,5568,5569,5570,5580,5
                                                                                                  581,5582,5593,5595,5596,5603,5609,
                                                                                                  5614,5615,5616,5617,5618,5622,5624
                                                                                                  ,5626,5628,5630,5635,5636,5638,564
                                                                                                  0,5643,5644,5646,5648,5652,5655,56
                                                                                                  59,5661,5662,5663,5664,5669,5670,5
                                                                                                  672,5675,5688,5689,5691,5694,5708,
                                                                                                  5709,5710,5712,5715,5730,5731,5732
                                                                                                  ,5734,5737,5751,5752,5753,5755,576
                                                                                                  3,5765,5767,5769,5771,5773,5775,57
                                                                                                  77,5779,5780,5782,5796,5807,6045,6
                                                                                                  049,6050,6053,6100,6103,6104,6107,
                                                                                                  6146,6147,6149,6151,6153,6166,6168
                                                                                                  ,6169,6183,6184,6185,6188,6189,619
                                                                                                  1,6192,6194,6196,6198,6201,6202,62
                                                                                                  03,6204,6205,6220,6221,6222,6225,6
                                                                                                  226,6228,6229,6231,6233,6235,6238,
                                                                                                  6239,6240,6241,6242,6280,6281,6304
                                                                                                  ,6308,6309,6323,6334,6339,6340,634
                                                                                                  2,6344,6346,6348,6350,6351,6353,63
                                                                                                  55,6357,6358,6376,6379,6421,6428,6
                                                                                                  452,6456,6457,6474,6475,6476,6477,
                                                                                                  6478,6499,6524,6528,6529,6541,6542
                                                                                                  ,6543,6544,6545,6563,6614,6619,662
                                                                                                  0,6623,6625,6672,6681,6683,6685,66
                                                                                                  89,6693,6697,6701,6702,6808,6819,6
                                                                                                  823,6826,6827,6828,6858,6863,6866,
                                                                                                  6869,6872,6875,6880,6883,6886,6892
                                                                                                  ,6895,6898,6906,6909,6912,6920,692
                                                                                                  2,6927,6928,6932,6934,6936,7061,70
                                                                                                  62,7063,7067,7070,7071,7073,7075,7
                                                                                                  078,7083,7084,7093,7094,7095,7099,
                                                                                                  7101,7128,7137,7139,7144,7146,7149
                                                                                                  ,7151,7162,7166,7169,7170,7176,717
                                                                                                  7,7179,7181,7228,7248,7252,7258,72
                                                                                                  72,7277,7280,7284,7286,7300,7343,7
                                                                                                  363,7367,7373,7387,7392,7395,7399,
                                                                                                  7401,7415,7504,7505,7506,7510,7513
                                                                                                  ,7514,7516,7518,7521,7526,7527,753
                                                                                                  6,7537,7538,7542,7544,7571,7580,75
                                                                                                  82,7587,7589,7592,7594,7605,7609,7
                                                                                                  612,7613,7619,7620,7622,7624,7671,

Page 27          Source Listing                  MPP_GET_INFO
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7691,7695,7701,7715,7720,7723,7727
                                                                                                  ,7729,7743,7786,7806,7810,7816,783
                                                                                                  0,7835,7838,7842,7844,7858,7970,79
                                                                                                  87,7992,8005,8008,8119,8136,8141,8
                                                                                                  154,8157,8217,8227,8232,8651,8655,
                                                                                                  8704,8705,8706,8709,8711,8715,8748
                                                                                                  ,8752,8753,8756,8758,8771,8775,878
                                                                                                  0,8782,8784,8785,8786,8788,8789,87
                                                                                                  90,8791,8792,8793,8804,8811,8814,8
                                                                                                  830,8855,8859,8860,8863,8865,8890,
                                                                                                  8899,8902,8907,8912,9192,9219,9225
                                                                                                  ,9327,9354,9360,9488,9515,9521,965
                                                                                                  8,9685,9691,9839,9866,9872,9974,10
                                                                                                  001,10007,10135,10162,10168,10305,
                                                                                                  10332,10338,10508,10687,10866,1104
                                                                                                  9,11228,11407                     
 MPP_GET_INFO               Subr   1176                                                                                             
 NATT                       Dummy  1176     I(4)            4           scalar   ARG,OUT          1188                              
 NDIM                       Dummy  1176     I(4)            4           scalar   ARG,OUT          1186                              
 NTIME                      Dummy  1176     I(4)            4           scalar   ARG,OUT          1189                              
 NVAR                       Dummy  1176     I(4)            4           scalar   ARG,OUT          1187                              
 TRIM                       Func   1184                                 scalar                    1184                              
 UNIT                       Dummy  1176     I(4)            4           scalar   ARG,IN           1183,1184,1186,1187,1188,1189     


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FILETYPE.NAME              CHAR            256   0              scalar   PRIV             1184,1213,1217,1359,1386,1390,1422 
                                                                                           ,1444,1485,1497,1950,1952,1997,199 
                                                                                           9,2223,2337,2800,2802,2866,2892,28 
                                                                                           96,2904,2905,2909,2910,2915,2917,2 
                                                                                           918,2932,2934,2935,2956,2958,2964, 
                                                                                           2965,2968,2969,2976,2980,2993,3153 
                                                                                           ,5526,5538,5541,5545,7084,7527     
 FILETYPE.NATT              I(4)            4     416            scalar   PRIV             1188,1215,1219,3138,5060           
 FILETYPE.NDIM              I(4)            4     408            scalar   PRIV             1186,1388,1394,1425,2238,3090,3164 
                                                                                           ,5059,5502,5520,6428,6499,6563     
 FILETYPE.NVAR              I(4)            4     412            scalar   PRIV             1187,1357,1361,1979,2239,3112,3165 
                                                                                           ,5214,5614                         
 FILETYPE.OPENED            L(4)            4     284            scalar   PRIV             1183,1212,1355,1385,1421,1443,1484 
                                                                                           ,1647,1963,2230,2242,2246,2247,224 
                                                                                           8,2249,2300,2304,2309,2355,2688,26 
                                                                                           89,2941,2972,2983,3080,3161,3441,3 
                                                                                           559,3835,3953,4941,6049,6103,6308, 
                                                                                           6456,6528,6619,7062,7505,8655,8705 
                                                                                           ,8752,8859                         
 FILETYPE.TIME_LEVEL        I(4)            4     296            scalar   PRIV             1189,1490,1495,1499,2234,2922,3166 
                                                                                           ,3555,3949,5067,5072,5155,5295,564 
                                                                                           3,7094,7099,7128,7137,7537,7542,75 
                                                                                           71,7580                            

Page 28          Source Listing                  MPP_GET_INFO
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1194 
   1195 !#####################################################################
   1196 ! <SUBROUTINE NAME="mpp_get_global_atts" INTERFACE="mpp_get_atts">
   1197 !  <IN NAME="unit" TYPE="integer"></IN>
   1198 !  <IN NAME="global_atts" TYPE="atttype" DIM="(:)"></IN>
   1199 ! </SUBROUTINE>
   1200     subroutine mpp_get_global_atts( unit, global_atts )
   1201 !
   1202 !  copy global file attributes for use by user
   1203 !
   1204 !  global_atts is an attribute type which is allocated from the
   1205 !  calling routine
   1206 
   1207       integer,       intent(in)    :: unit
   1208       type(atttype), intent(inout) :: global_atts(:)
   1209       integer :: natt,i
   1210 
   1211       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_GET_INFO: must first call mpp_io_init.' )
   1212       if( .NOT.mpp_file(unit)%opened )&
   1213            call mpp_error( FATAL, 'MPP_GET_INFO: invalid unit number,file '//trim(mpp_file(unit)%name))
   1214 
   1215       if (size(global_atts(:)).lt.mpp_file(unit)%natt) &
   1216            call mpp_error(FATAL, 'MPP_GET_ATTS: atttype not dimensioned properly in calling routine, file '// &
   1217            trim(mpp_file(unit)%name))
   1218 
   1219       natt = mpp_file(unit)%natt
   1220       global_atts = default_att
   1221 
   1222       do i=1,natt
   1223          global_atts(i) = mpp_file(unit)%Att(i)
   1224       enddo
   1225 
   1226       return
   1227    end subroutine mpp_get_global_atts

Page 29          Source Listing                  MPP_GET_GLOBAL_ATTS
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_util.inc



ENTRY POINTS

  Name                                          
                                                
 mpp_io_mod_mp_mpp_get_global_atts_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTTYPE                    Type   1208                     1488        scalar                    372,413,432,456,482,1074,1208,1244
                                                                                                  ,1314,1850,1867,1879,1891,1904,191
                                                                                                  6,1928,2330,8700                  
 DEFAULT_ATT                Local  1220     ATTTYPE         1488        scalar   SAVE             375,1220,1257,1327,2214,2215,2216,
                                                                                                  2217,5089,5345,5655,8820          
 GLOBAL_ATTS                Dummy  1200     RECORD          1488  1     1        ARG,INOUT        1215,1220,1223                    
 I                          Local  1209     I(4)            4           scalar                    1222,1223                         
 MPP_GET_GLOBAL_ATTS        Subr   1200                                          PRIV                                               
 NATT                       Local  1209     I(4)            4           scalar                    1219,1222                         
 SIZE                       Func   1215                                 scalar                    1215                              
 TRIM                       Func   1213                                 scalar                    1213,1217                         
 UNIT                       Dummy  1200     I(4)            4           scalar   ARG,IN           1212,1213,1215,1217,1219,1223     


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FILETYPE.ATT               RECORD          1488  568      1     1        PTR,PRIV         1223,3137,3139,3140,3141,3144,3145 
                                                                                           ,5075,5089,5098,5099,5100,5109,511 
                                                                                           0,5112,5113,5114,5120,5133,5135,51 
                                                                                           38,5151,5153,5158,5171,5172,5173,5 
                                                                                           176,5189,5190,5191                 

Page 30          Source Listing                  MPP_GET_GLOBAL_ATTS
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1228 
   1229 !#####################################################################
   1230    subroutine mpp_get_field_atts(field, name, units, longname, min, max, missing, ndim, siz, axes, atts, &
   1231                                  valid, scale, add, checksum)
   1232 
   1233      type(fieldtype),    intent(in)                            :: field
   1234      character(len=*),   intent(out),                 optional :: name, units
   1235      character(len=*),   intent(out),                 optional :: longname
   1236      real,               intent(out),                 optional :: min,max,missing
   1237      integer,            intent(out),                 optional :: ndim
   1238      integer,            intent(out),   dimension(:), optional :: siz
   1239      type(validtype),    intent(out),                 optional :: valid
   1240      real,               intent(out),                 optional :: scale
   1241      real,               intent(out),                 optional :: add
   1242      integer(i8_kind), intent(out),   dimension(:), optional :: checksum
   1243 
   1244      type(atttype),      intent(inout), dimension(:), optional :: atts
   1245      type(axistype),     intent(inout), dimension(:), optional :: axes
   1246 
   1247      integer :: n,m, check_exist
   1248 
   1249      if (PRESENT(name)) name = field%name
   1250      if (PRESENT(units)) units = field%units
   1251      if (PRESENT(longname)) longname = field%longname
   1252      if (PRESENT(min)) min = field%min
   1253      if (PRESENT(max)) max = field%max
   1254      if (PRESENT(missing)) missing = field%missing
   1255      if (PRESENT(ndim)) ndim = field%ndim
   1256      if (PRESENT(atts)) then
   1257         atts = default_att
   1258         n = size(atts(:));m=size(field%Att(:))
   1259         if (n.LT.m)&
   1260              call mpp_error(FATAL,'attribute array not large enough in mpp_get_field_atts, field '//&
   1261              trim(field%name))
   1262         do n=1,m
   1263           atts(n) = field%Att(n)
   1264         end do
   1265      end if
   1266      if (PRESENT(axes)) then
   1267         axes = default_axis
   1268         n = size(axes(:));m=field%ndim
   1269         if (n.LT.m) &
   1270              call mpp_error(FATAL,'axis array not large enough in mpp_get_field_atts, field '//&
   1271              trim(field%name))
   1272         do n=1,m
   1273           axes(n) = field%axes(n)
   1274         end do
   1275      end if
   1276      if (PRESENT(siz)) then
   1277         siz = -1
   1278         n = size(siz(:));m=field%ndim
   1279         if (n.LT.m) &
   1280              call mpp_error(FATAL,'size array not large enough in mpp_get_field_atts, field '//&
   1281              trim(field%name))
   1282         do n=1,m
   1283           siz(n) = field%size(n)
   1284         end do

Page 31          Source Listing                  MPP_GET_FIELD_ATTS
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1285      end if
   1286 
   1287      if(PRESENT(valid)) then
   1288        call mpp_get_valid(field,valid)
   1289      endif
   1290 
   1291      if(PRESENT(scale))    scale    = field%scale
   1292      if(present(add))      add      = field%add
   1293      if(present(checksum)) then
   1294        checksum = 0
   1295        check_exist = mpp_find_att(field%Att(:),"checksum")
   1296        if ( check_exist >= 0 ) then
   1297          if(size(checksum(:)) >size(field%checksum(:))) call mpp_error(FATAL,"size(checksum(:)) >size(field%checksum(:))")
   1298          checksum = field%checksum(1:size(checksum(:)))
   1299        endif
   1300      endif
   1301 
   1302      return
   1303    end subroutine mpp_get_field_atts


ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_get_field_atts_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD                        Dummy  1231     R(8)            8           scalar   ARG,OUT          1292                              
 ATTS                       Dummy  1230     RECORD          1488  1     1        ARG,INOUT        1256,1257,1258,1263               
 AXES                       Dummy  1230     RECORD          1424  1     1        ARG,INOUT        1266,1267,1268,1273               
 AXISTYPE                   Type   1245                     1424        scalar                    372,433,450,480,1072,1245,1309,138
                                                                                                  0,1381,1440,1532,1555,1591,1601,16
                                                                                                  22,1682,2328,2567,6141,6255,6440,6
                                                                                                  512,6575,8646,8741,8847,8991,9014,
                                                                                                  9039                              
 CHECKSUM                   Dummy  1231     I(8)            8     1     1        ARG,OUT          1293,1294,1297,1298               
 CHECK_EXIST                Local  1247     I(4)            4           scalar                    1295,1296                         
 DEFAULT_AXIS               Local  1267     AXISTYPE        1424        scalar   SAVE             375,1267,1393,1453,1455,1559,2201,
                                                                                                  2202,2203,2204,2205,2206,2207,2208
                                                                                                  ,2209,2210,2211,2212,5085         
 FIELD                      Dummy  1230     FIELDTYPE       1096        scalar   ARG,IN           1249,1250,1251,1252,1253,1254,1255
                                                                                                  ,1258,1261,1263,1268,1271,1273,127
                                                                                                  8,1281,1283,1288,1291,1292,1295,12
                                                                                                  97,1298                           
 FIELDTYPE                  Type   1233                     1096        scalar                    372,458,481,1073,1233,1350,1511,15
                                                                                                  74,1690,1735,1939,2019,2329,3313,3
                                                                                                  420,3526,3540,3662,3707,3814,3920,
                                                                                                  3934,4056,4099,4114,4208,4330,4345
                                                                                                  ,4439,4698,4714,4729,4744,4759,477
                                                                                                  7,4793,4808,4823,4838,4850,4871,48
                                                                                                  90,4909,4931,5830,5831,6574,7041,7
                                                                                                  190,7208,7323,7484,7633,7651,7766,

Page 32          Source Listing                  MPP_GET_FIELD_ATTS
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7911,7928,7945,8060,8077,8094,8203
                                                                                                  ,8274,8314,8354,8394,8434,8474,851
                                                                                                  4,8554,8594,8634,8647,8846,9011,90
                                                                                                  38,9160,9288,9447,9616,9807,9935,1
                                                                                                  0094,10263,10478,10657,10836,11019
                                                                                                  ,11198,11377                      
 I8_KIND                    Param  1242     I(4)            4           scalar   PRIV             449,1242,4125,4219,4356,4450,5039,
                                                                                                  6581,6917,9045,10493,10672,10851,1
                                                                                                  1034,11213,11392                  
 LONGNAME                   Dummy  1230     CHAR                        scalar   ARG,OUT          1251                              
 M                          Local  1247     I(4)            4           scalar                    1258,1259,1262,1268,1269,1272,1278
                                                                                                  ,1279,1282                        
 MAX                        Dummy  1230     R(8)            8           scalar   ARG,OUT          1253                              
 MIN                        Dummy  1230     R(8)            8           scalar   ARG,OUT          1252                              
 MISSING                    Dummy  1230     R(8)            8           scalar   ARG,OUT          1254                              
 MPP_FIND_ATT@0             Local  1295     I(4)            4           scalar                                                      
 MPP_GET_FIELD_ATTS         Subr   1230                                          PRIV                                               
 N                          Local  1247     I(4)            4           scalar                    1258,1259,1262,1263,1268,1269,1272
                                                                                                  ,1273,1278,1279,1282,1283         
 NAME                       Dummy  1230     CHAR                        scalar   ARG,OUT          1249                              
 NDIM                       Dummy  1230     I(4)            4           scalar   ARG,OUT          1255                              
 PRESENT                    Func   1249                                 scalar                    1249,1250,1251,1252,1253,1254,1255
                                                                                                  ,1256,1266,1276,1287,1291,1292,129
                                                                                                  3                                 
 SCALE                      Dummy  1231     R(8)            8           scalar   ARG,OUT          1291                              
 SIZ                        Dummy  1230     I(4)            4     1     1        ARG,OUT          1276,1277,1278,1283               
 SIZE                       Func   1258                                 scalar                    1258,1268,1278,1297,1298          
 TRIM                       Func   1261                                 scalar                    1261,1271,1281                    
 UNITS                      Dummy  1230     CHAR                        scalar   ARG,OUT          1250                              
 VALID                      Dummy  1231     VALIDTYPE       24          scalar   ARG,OUT          1287,1288                         
 VALIDTYPE                  Type   1239                     24          scalar                    372,439,1239,1736,1836            


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FIELDTYPE.ADD              R(8)            8     808            scalar   PRIV             1292,1780,1798,1812,1824,1827,2197 
                                                                                           ,3343,3346,3354,3357,3364,3365,337 
                                                                                           0,3373,3381,3382,3387,3390,3737,37 
                                                                                           40,3748,3751,3758,3759,3764,3767,3 
                                                                                           775,3776,3781,3784,5775,6655,6774, 
                                                                                           7148,7591,8940,8941,8948,8955,8963 
                                                                                           ,8971,8979,8980,9102               
 FIELDTYPE.ATT              RECORD          1488  1016     1     1        PTR,PRIV         1258,1263,1295,1745,1746,1747,1748 
                                                                                           ,1749,1755,1756,1757,1758,1764,176 
                                                                                           5,1766,1769,1770,1773,1774,1780,17 
                                                                                           85,1787,1801,1982,1983,1985,1988,2 
                                                                                           023,3122,3124,3125,3126,3129,3130, 
                                                                                           5652,5655,5662,5663,5664,5669,5670 
                                                                                           ,5672,5675,5688,5689,5691,5694,570 
                                                                                           9,5710,5712,5715,5731,5732,5734,57 
                                                                                           37,5752,5753,5755,5763,5765,5767,5 
                                                                                           769,5771,5773,5775,5777,5779,5780, 
                                                                                           5782,5858,5859                     

Page 33          Source Listing                  MPP_GET_FIELD_ATTS
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FIELDTYPE.AXES             RECORD          1424  848      1     1        PTR,PRIV         1273,3113,3115,3116,3484,3878,5636 
                                                                                           ,5638,6615,6630,6636,6637,6674,667 
                                                                                           5,6676,6681,6683,6685,6689,6693,67 
                                                                                           14,7126,7569,8658,8659,8669,8670,8 
                                                                                           673,8674,8681,8682,8875,8877,8879, 
                                                                                           8892,8893,8894,8900,8903,8908,8913 
                                                                                           ,8928,9077,9083,9084               
 FIELDTYPE.CHECKSUM         I(8)            8     824      1     3        PRIV             1297,1298,2190,4170,4194,4195,4262 
                                                                                           ,4286,4287,4401,4425,4426,4493,451 
                                                                                           7,4518,5796,6659,6660,6778,9106,91 
                                                                                           07,10592,10771,10950,11133,11312,1 
                                                                                           1491                               
 FIELDTYPE.LONGNAME         CHAR            256   256            scalar   PRIV             1251,2185,5763,6635,6717,8665,8931 
                                                                                           ,9018,9082                         
 FIELDTYPE.MAX              R(8)            8     776            scalar   PRIV             1253,2193,5780,6653,6739,8936,8938 
                                                                                           ,8941,8951,8953,8955,9020,9100     
 FIELDTYPE.MIN              R(8)            8     768            scalar   PRIV             1252,2192,5779,6652,6732,8936,8938 
                                                                                           ,8940,8944,8946,8948,9019,9099     
 FIELDTYPE.MISSING          R(8)            8     784            scalar   PRIV             1254,2194,5769,5771,6657,6664,6748 
                                                                                           ,8959,8961,8963,8969,9021,9104,911 
                                                                                           0                                  
 FIELDTYPE.NAME             CHAR            128   0              scalar   PRIV             1249,1261,1271,1281,1520,1940,1942 
                                                                                           ,1980,2183,2339,4178,4190,4195,419 
                                                                                           6,4270,4282,4287,4288,4409,4421,44 
                                                                                           26,4427,4501,4513,4518,4519,5541,5 
                                                                                           545,5617,5868,5874,5880,6633,6681, 
                                                                                           6683,6685,6689,6693,6712,6792,7242 
                                                                                           ,7357,7685,7800,8664,8899,8902,890 
                                                                                           7,8912,8926,8983,9016,9080,10607,1 
                                                                                           0786,10965,11148,11327,11506       
 FIELDTYPE.NDIM             I(4)            4     1008           scalar   PRIV             1255,1268,1278,2189,4955,4973,5635 
                                                                                           ,6638,9085                         
 FIELDTYPE.SCALE            R(8)            8     800            scalar   PRIV             1291,1780,1798,1812,1824,1827,2196 
                                                                                           ,3343,3346,3354,3357,3364,3365,337 
                                                                                           0,3373,3381,3382,3387,3390,3737,37 
                                                                                           40,3748,3751,3758,3759,3764,3767,3 
                                                                                           775,3776,3781,3784,5767,6654,6773, 
                                                                                           7148,7591,8940,8941,8948,8955,8963 
                                                                                           ,8971,8977,8978,9101               
 FIELDTYPE.SIZE             I(4)            4     920      1     1        PTR,PRIV         1283,1579,1580,1581,1582,3118,3119 
                                                                                           ,3120,3485,3879,4952,4953,4959,496 
                                                                                           0,5640,5646,5648,6631,6642,6645,66 
                                                                                           47,7127,7570,8016,8165,8233,8660,8 
                                                                                           661,8682,8876,8878,8882,8884,9078, 
                                                                                           9089,9092,9094,9256,9414,9583,9769 
                                                                                           ,9903,10061,10230,10416            
 FIELDTYPE.UNITS            CHAR            128   128            scalar   PRIV             1250,2184,5765,6634,6718,6719,8666 
                                                                                           ,8932,8933,9017,9081               

Page 34          Source Listing                  MPP_GET_FIELD_ATTS
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1304 
   1305 !#####################################################################
   1306    subroutine mpp_get_axis_atts( axis, name, units, longname, cartesian, &
   1307                                  calendar, sense, len, natts, atts, compressed )
   1308 
   1309      type(axistype), intent(in) :: axis
   1310      character(len=*), intent(out) , optional :: name, units
   1311      character(len=*), intent(out), optional :: longname, cartesian
   1312      character(len=*), intent(out), optional :: compressed, calendar
   1313      integer,intent(out), optional :: sense, len , natts
   1314      type(atttype), intent(inout), optional, dimension(:) :: atts
   1315 
   1316      integer :: n,m
   1317 
   1318      if (PRESENT(name)) name = axis%name
   1319      if (PRESENT(units)) units = axis%units
   1320      if (PRESENT(longname)) longname = axis%longname
   1321      if (PRESENT(cartesian)) cartesian = axis%cartesian
   1322      if (PRESENT(compressed)) compressed = axis%compressed
   1323      if (PRESENT(calendar)) calendar = axis%calendar
   1324      if (PRESENT(sense)) sense = axis%sense
   1325      if (PRESENT(len)) len = axis%len
   1326      if (PRESENT(atts)) then
   1327         atts = default_att
   1328         n = size(atts(:));m=size(axis%Att(:))
   1329         if (n.LT.m) &
   1330              call mpp_error(FATAL,'attribute array not large enough in mpp_get_field_atts, axis '//&
   1331              trim(axis%name))
   1332         do n=1,m
   1333           atts(n) = axis%Att(n)
   1334         end do
   1335      end if
   1336      if (PRESENT(natts)) natts = size(axis%Att(:))
   1337 
   1338      return
   1339    end subroutine mpp_get_axis_atts

Page 35          Source Listing                  MPP_GET_AXIS_ATTS
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_util.inc



ENTRY POINTS

  Name                                        
                                              
 mpp_io_mod_mp_mpp_get_axis_atts_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTS                       Dummy  1307     RECORD          1488  1     1        ARG,INOUT        1326,1327,1328,1333               
 AXIS                       Dummy  1306     AXISTYPE        1424        scalar   ARG,IN           1318,1319,1320,1321,1322,1323,1324
                                                                                                  ,1325,1328,1331,1333,1336         
 CALENDAR                   Dummy  1307     CHAR                        scalar   ARG,OUT          1323                              
 CARTESIAN                  Dummy  1306     CHAR                        scalar   ARG,OUT          1321                              
 COMPRESSED                 Dummy  1307     CHAR                        scalar   ARG,OUT          1322                              
 LEN                        Dummy  1307     I(4)            4           scalar   ARG,OUT          1325                              
 LONGNAME                   Dummy  1306     CHAR                        scalar   ARG,OUT          1320                              
 M                          Local  1316     I(4)            4           scalar                    1328,1329,1332                    
 MPP_GET_AXIS_ATTS          Subr   1306                                          PRIV                                               
 N                          Local  1316     I(4)            4           scalar                    1328,1329,1332,1333               
 NAME                       Dummy  1306     CHAR                        scalar   ARG,OUT          1318                              
 NATTS                      Dummy  1307     I(4)            4           scalar   ARG,OUT          1336                              
 PRESENT                    Func   1318                                 scalar                    1318,1319,1320,1321,1322,1323,1324
                                                                                                  ,1325,1326,1336                   
 SENSE                      Dummy  1307     I(4)            4           scalar   ARG,OUT          1324                              
 SIZE                       Func   1328                                 scalar                    1328,1336                         
 TRIM                       Func   1331                                 scalar                    1331                              
 UNITS                      Dummy  1306     CHAR                        scalar   ARG,OUT          1319                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AXISTYPE.ATT               RECORD          1488  1352     1     1        PTR,PRIV         1328,1333,1336,3096,3098,3099,3100 
                                                                                           ,3103,3104,5342,5345,5353,5354,535 
                                                                                           5,5360,5361,5364,5369,5382,5383,53 
                                                                                           86,5389,5403,5404,5407,5410,5425,5 
                                                                                           426,5429,5432,5447,5448,5451,5459, 
                                                                                           5461,5463,5465,5476,5487,5489,5510 
                                                                                           ,5511,5512,8820,8821,8822,8823,882 
                                                                                           5                                  
 AXISTYPE.CALENDAR          CHAR            24    904            scalar   PRIV             1323,1453,1455,2206,5465,5466,5467 
                                                                                           ,5468,5469,5470,5471,5472,5473,547 
                                                                                           4,5476,5477,5478,5479,5480,5481,54 
                                                                                           82,5483,5484,5485,6320,6389,6391   
 AXISTYPE.CARTESIAN         CHAR            8     640            scalar   PRIV             1321,2204,5463,6272,6273,6282,6284 
                                                                                           ,6397,6400,6401,6595,8998,9059     
 AXISTYPE.COMPRESSED        CHAR            256   648            scalar   PRIV             1322,2205,5487,6468,6489           
 AXISTYPE.LEN               I(4)            4     932            scalar   PRIV             1325,1427,1594,1606,1612,1626,1632 
                                                                                           ,2208,5202,5241,5258,5275,5539,554 
                                                                                           3,5648,6324,6325,6328,6329,6339,64 
                                                                                           69,6470,6475,6536,8661,8671,8676,9 

Page 36          Source Listing                  MPP_GET_AXIS_ATTS
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           000,9002                           
 AXISTYPE.LONGNAME          CHAR            256   384            scalar   PRIV             1320,2203,5459,6319,6383,6467,6484 
                                                                                           ,6535,6552,8665,8997               
 AXISTYPE.NAME              CHAR            128   0              scalar   PRIV             1318,1331,1426,1541,1562,1607,1627 
                                                                                           ,2201,2338,2922,2924,5201,5210,522 
                                                                                           8,5363,5385,5406,5428,5450,5522,56 
                                                                                           09,6317,6339,6342,6344,6350,6353,6 
                                                                                           355,6367,6426,6465,6475,6477,6497, 
                                                                                           6533,6542,6544,6561,8664,8780,8782 
                                                                                           ,8785,8788,8790,8801,8835,8995     
 AXISTYPE.SENSE             I(4)            4     928            scalar   PRIV             1324,2207,5491,5493,6321           
 AXISTYPE.UNITS             CHAR            128   256            scalar   PRIV             1319,2202,5461,6318,6384,6385,6466 
                                                                                           ,6485,6486,6534,6555,6556,8666,899 
                                                                                           6                                  

Page 37          Source Listing                  MPP_GET_AXIS_ATTS
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1340 
   1341 
   1342 !#####################################################################
   1343     subroutine mpp_get_fields( unit, variables )
   1344 !
   1345 !  copy variable information from file (excluding data)
   1346 !  global_atts is an attribute type which is allocated from the
   1347 !  calling routine
   1348 !
   1349       integer,         intent(in)    :: unit
   1350       type(fieldtype), intent(inout) :: variables(:)
   1351 
   1352       integer :: nvar,i
   1353 
   1354       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_GET_FIELDS: must first call mpp_io_init.' )
   1355       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_GET_FIELDS: invalid unit number.' )
   1356 
   1357       if (size(variables(:)).ne.mpp_file(unit)%nvar) &
   1358           call mpp_error(FATAL,'MPP_GET_FIELDS: fieldtype not dimensioned properly in calling routine, file '//&
   1359           trim(mpp_file(unit)%name))
   1360 
   1361       nvar = mpp_file(unit)%nvar
   1362 
   1363       do i=1,nvar
   1364          variables(i) = mpp_file(unit)%Var(i)
   1365       enddo
   1366 
   1367       return
   1368    end subroutine mpp_get_fields

Page 38          Source Listing                  MPP_GET_FIELDS
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_util.inc



ENTRY POINTS

  Name                                     
                                           
 mpp_io_mod_mp_mpp_get_fields_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  1352     I(4)            4           scalar                    1363,1364                         
 MPP_GET_FIELDS             Subr   1343                                                                                             
 NVAR                       Local  1352     I(4)            4           scalar                    1361,1363                         
 SIZE                       Func   1357                                 scalar                    1357                              
 TRIM                       Func   1359                                 scalar                    1359                              
 UNIT                       Dummy  1343     I(4)            4           scalar   ARG,IN           1355,1357,1359,1361,1364          
 VARIABLES                  Dummy  1343     RECORD          1096  1     1        ARG,INOUT        1357,1364                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FILETYPE.VAR               RECORD          1096  496      1     1        PTR,PRIV         1364,1980,1982,1983,1985,1988,3111 
                                                                                           ,3113,3115,3116,3118,3119,3120,312 
                                                                                           2,3123,3124,3125,3126,3129,3130,31 
                                                                                           33,3134,5215,5218,5541,5545,5615,5 
                                                                                           616,5617,5618,5622,5624,5626,5628, 
                                                                                           5630,5635,5636,5638,5640,5644,5646 
                                                                                           ,5648,5652,5655,5659,5661,5662,566 
                                                                                           3,5664,5669,5670,5672,5675,5688,56 
                                                                                           89,5691,5694,5708,5709,5710,5712,5 
                                                                                           715,5730,5731,5732,5734,5737,5751, 
                                                                                           5752,5753,5755,5763,5765,5767,5769 
                                                                                           ,5771,5773,5775,5777,5779,5780,578 
                                                                                           2,5796                             

Page 39          Source Listing                  MPP_GET_FIELDS
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1369 
   1370 
   1371 
   1372 !#####################################################################
   1373     subroutine mpp_get_axes( unit, axes, time_axis )
   1374 !
   1375 !  copy variable information from file (excluding data)
   1376 !  global_atts is an attribute type which is allocated from the
   1377 !  calling routine
   1378 !
   1379       integer, intent(in) :: unit
   1380       type(axistype), intent(inout) :: axes(:)
   1381       type(axistype), intent(inout), optional :: time_axis
   1382       integer :: ndim,i
   1383 
   1384       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_GET_AXES: must first call mpp_io_init.' )
   1385       if( .NOT.mpp_file(unit)%opened )&
   1386            call mpp_error( FATAL, 'MPP_GET_AXES: invalid unit number, file '//trim(mpp_file(unit)%name))
   1387 
   1388       if (size(axes(:)).ne.mpp_file(unit)%ndim) &
   1389            call mpp_error(FATAL, 'MPP_GET_AXES: axistype not dimensioned properly in calling routine, file '//&
   1390            trim(mpp_file(unit)%name))
   1391 
   1392 
   1393       if (PRESENT(time_axis)) time_axis = default_axis
   1394       ndim = mpp_file(unit)%ndim
   1395 
   1396       do i=1,ndim
   1397          axes(i)=mpp_file(unit)%Axis(i)
   1398 
   1399          if (PRESENT(time_axis) &
   1400              .AND. .NOT. ASSOCIATED(mpp_file(unit)%Axis(i)%data) &
   1401              .AND. mpp_file(unit)%Axis(i)%type /= -1) then
   1402             time_axis = mpp_file(unit)%Axis(i)
   1403          endif
   1404       enddo
   1405 
   1406       return
   1407    end subroutine mpp_get_axes

Page 40          Source Listing                  MPP_GET_AXES
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_util.inc



ENTRY POINTS

  Name                                   
                                         
 mpp_io_mod_mp_mpp_get_axes_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   1400                                 scalar                    1400                              
 AXES                       Dummy  1373     RECORD          1424  1     1        ARG,INOUT        1388,1397                         
 I                          Local  1382     I(4)            4           scalar                    1396,1397,1400,1401,1402          
 MPP_GET_AXES               Subr   1373                                                                                             
 NDIM                       Local  1382     I(4)            4           scalar                    1394,1396                         
 PRESENT                    Func   1393                                 scalar                    1393,1399                         
 SIZE                       Func   1388                                 scalar                    1388                              
 TIME_AXIS                  Dummy  1373     AXISTYPE        1424        scalar   ARG,INOUT        1393,1399,1402                    
 TRIM                       Func   1386                                 scalar                    1386,1390                         
 UNIT                       Dummy  1373     I(4)            4           scalar   ARG,IN           1385,1386,1388,1390,1394,1397,1400
                                                                                                  ,1401,1402                        


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AXISTYPE.DATA              R(8)            8     1112     1     1        PTR,PRIV         1400,1628,1632,3091,3092,3093,5242 
                                                                                           ,5255,5259,5272,5276,5289,5503,550 
                                                                                           4,5521,5524,5527,6313,6314,6325,63 
                                                                                           26,6329,6330,6338,6369,6373,6644,6 
                                                                                           645,8668,8669,8670,8671,8673,8674, 
                                                                                           8681,8774,8782,8803,8808,8881,8882 
                                                                                           ,9001,9002,9003,9091,9092          
 AXISTYPE.TYPE              I(4)            4     1336           scalar   PRIV             1401,2211,5233                     
 FILETYPE.AXIS              RECORD          1424  424      1     1        PTR,PRIV         1397,1400,1401,1402,1426,1427,1446 
                                                                                           ,1561,1562,1563,3089,3091,3092,309 
                                                                                           3,3096,3097,3098,3099,3100,3103,31 
                                                                                           04,3107,3108,5077,5085,5201,5202,5 
                                                                                           210,5228,5233,5234,5235,5236,5241, 
                                                                                           5242,5254,5255,5258,5259,5271,5272 
                                                                                           ,5275,5276,5288,5289,5315,5331,534 
                                                                                           2,5345,5353,5354,5355,5360,5361,53 
                                                                                           63,5364,5369,5382,5383,5385,5386,5 
                                                                                           389,5403,5404,5406,5407,5410,5425, 
                                                                                           5426,5428,5429,5432,5447,5448,5450 
                                                                                           ,5451,5459,5461,5463,5465,5466,546 
                                                                                           7,5468,5469,5470,5471,5472,5473,54 
                                                                                           74,5476,5477,5478,5479,5480,5481,5 
                                                                                           482,5483,5484,5485,5487,5489,5491, 
                                                                                           5493,5503,5504,5505,5506,5509,5510 
                                                                                           ,5511,5512,5521,5522,5524,5527,553 
                                                                                           9,5543,5557,5558,5569,5570,5581,55 
                                                                                           82,5593,5595,5596,5609,5638,5648,6 

Page 41          Source Listing                  MPP_GET_AXES
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           146,6147                           

Page 42          Source Listing                  MPP_GET_AXES
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1408 
   1409 !#####################################################################
   1410    function mpp_get_dimension_length(unit, dimname, found)
   1411      integer,           intent(in)  :: unit
   1412      character(len=*),  intent(in)  :: dimname
   1413      logical, optional, intent(out) :: found
   1414      integer                        :: mpp_get_dimension_length
   1415      logical                        :: found_dim
   1416      integer                        :: i
   1417 
   1418 
   1419      if( .NOT.module_is_initialized ) &
   1420        call mpp_error( FATAL, 'mpp_get_dimension_length: must first call mpp_io_init.' )
   1421      if( .NOT.mpp_file(unit)%opened )&
   1422        call mpp_error( FATAL, 'mpp_get_dimension_length: invalid unit number, file '//trim(mpp_file(unit)%name))
   1423      found_dim = .false.
   1424      mpp_get_dimension_length = -1
   1425      do i = 1, mpp_file(unit)%ndim
   1426         if(trim(dimname) == trim(mpp_file(unit)%Axis(i)%name)) then
   1427           mpp_get_dimension_length = mpp_file(unit)%Axis(i)%len
   1428           found_dim = .true.
   1429           exit
   1430         endif
   1431      enddo
   1432 
   1433      if(present(found)) found = found_dim
   1434 
   1435    end function mpp_get_dimension_length

Page 43          Source Listing                  MPP_GET_DIMENSION_LENGTH
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_util.inc



ENTRY POINTS

  Name                                               
                                                     
 mpp_io_mod_mp_mpp_get_dimension_length_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIMNAME                    Dummy  1410     CHAR                        scalar   ARG,IN           1426                              
 FOUND                      Dummy  1410     L(4)            4           scalar   ARG,OUT          1433                              
 FOUND_DIM                  Local  1415     L(4)            4           scalar                    1423,1428,1433                    
 I                          Local  1416     I(4)            4           scalar                    1425,1426,1427                    
 MPP_GET_DIMENSION_LENGTH   Func   1410     I(4)            4           scalar                                                      
 PRESENT                    Func   1433                                 scalar                    1433                              
 TRIM                       Func   1422                                 scalar                    1422,1426                         
 UNIT                       Dummy  1410     I(4)            4           scalar   ARG,IN           1421,1422,1425,1426,1427          

Page 44          Source Listing                  MPP_GET_DIMENSION_LENGTH
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1436 
   1437 !#####################################################################
   1438     subroutine mpp_get_time_axis( unit, time_axis )
   1439       integer, intent(in) :: unit
   1440       type(axistype), intent(inout) :: time_axis
   1441 
   1442       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_GET_AXES: must first call mpp_io_init.' )
   1443       if( .NOT.mpp_file(unit)%opened )&
   1444            call mpp_error( FATAL, 'MPP_GET_AXES: invalid unit number, file '//trim(mpp_file(unit)%name))
   1445 
   1446       time_axis = mpp_file(unit)%Axis(mpp_file(unit)%recdimid)
   1447 
   1448       return
   1449    end subroutine mpp_get_time_axis


ENTRY POINTS

  Name                                        
                                              
 mpp_io_mod_mp_mpp_get_time_axis_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_GET_TIME_AXIS          Subr   1438                                                                                             
 TIME_AXIS                  Dummy  1438     AXISTYPE        1424        scalar   ARG,INOUT        1446                              
 TRIM                       Func   1444                                 scalar                    1444                              
 UNIT                       Dummy  1438     I(4)            4           scalar   ARG,IN           1443,1444,1446                    


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FILETYPE.RECDIMID          I(4)            4     332            scalar   PRIV             1446,1649,5061,5643,8793           

Page 45          Source Listing                  MPP_GET_TIME_AXIS
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1450 
   1451 !####################################################################
   1452   function mpp_get_default_calendar( )
   1453      character(len=len(default_axis%calendar)) :: mpp_get_default_calendar
   1454 
   1455      mpp_get_default_calendar = default_axis%calendar
   1456 
   1457   end function mpp_get_default_calendar


ENTRY POINTS

  Name                                               
                                                     
 mpp_io_mod_mp_mpp_get_default_calendar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LEN                        Func   1453                                 scalar                    1453                              
 MPP_GET_DEFAULT_CALENDAR   Func   1452     CHAR            24          scalar                                                      

Page 46          Source Listing                  MPP_GET_DEFAULT_CALENDAR
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1458 
   1459 !#####################################################################
   1460 ! <SUBROUTINE NAME="mpp_get_times">
   1461 !   <OVERVIEW>
   1462 !     Get file time data.
   1463 !   </OVERVIEW>
   1464 !   <DESCRIPTION>
   1465 !     Get file time data.
   1466 !   </DESCRIPTION>
   1467 !   <TEMPLATE>
   1468 !     call mpp_get_times( unit, time_values )
   1469 !   </TEMPLATE>
   1470 !   <IN NAME="unit" TYPE="integer"> </IN>
   1471 !   <INOUT NAME="time_values" TYPE="real(r8_kind)" DIM="(:)"> </INOUT>
   1472 ! </SUBROUTINE>
   1473 
   1474    subroutine mpp_get_times( unit, time_values )
   1475 !
   1476 !  copy time information from file and convert to time_type
   1477 !
   1478       integer, intent(in) :: unit
   1479       real, intent(inout) :: time_values(:)
   1480 
   1481       integer :: ntime,i
   1482 
   1483       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_GET_TIMES: must first call mpp_io_init.' )
   1484       if( .NOT.mpp_file(unit)%opened )&
   1485            call mpp_error(FATAL, 'MPP_GET_TIMES: invalid unit number, file '//trim(mpp_file(unit)%name))
   1486 
   1487 ! NF_INQ_DIM returns -1 for the length of a record dimension if
   1488 ! it does not exist
   1489 
   1490       if (mpp_file(unit)%time_level == -1) then
   1491           time_values = 0.0
   1492           return
   1493       endif
   1494 
   1495       if (size(time_values(:)).ne.mpp_file(unit)%time_level) &
   1496          call mpp_error(FATAL,'MPP_GET_TIMES: time_values not dimensioned properly in calling routine, file '//&
   1497          trim(mpp_file(unit)%name))
   1498 
   1499       ntime = mpp_file(unit)%time_level
   1500 
   1501       do i=1,ntime
   1502          time_values(i) = mpp_file(unit)%time_values(i)
   1503       enddo
   1504 
   1505       return
   1506     end subroutine mpp_get_times

Page 47          Source Listing                  MPP_GET_TIMES
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_util.inc



ENTRY POINTS

  Name                                    
                                          
 mpp_io_mod_mp_mpp_get_times_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  1481     I(4)            4           scalar                    1501,1502                         
 MPP_GET_TIMES              Subr   1474                                                                                             
 NTIME                      Local  1481     I(4)            4           scalar                    1499,1501                         
 SIZE                       Func   1495                                 scalar                    1495                              
 TIME_VALUES                Dummy  1474     R(8)            8     1     1        ARG,INOUT        1491,1495,1502                    
 TRIM                       Func   1485                                 scalar                    1485,1497                         
 UNIT                       Dummy  1474     I(4)            4           scalar   ARG,IN           1484,1485,1490,1495,1497,1499,1502


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FILETYPE.TIME_VALUES       R(8)            8     336      1     1        PTR,PRIV         1502,3148,3149,3150,5297,5318,5334 

Page 48          Source Listing                  MPP_GET_TIMES
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1507 
   1508 !#####################################################################
   1509    function mpp_get_field_index(fields,fieldname)
   1510 
   1511      type(fieldtype), dimension(:) :: fields
   1512      character(len=*) :: fieldname
   1513      integer :: mpp_get_field_index
   1514 
   1515      integer :: n
   1516 
   1517      mpp_get_field_index = -1
   1518 
   1519      do n=1,size(fields(:))
   1520         if (lowercase(fields(n)%name) == lowercase(fieldname)) then
   1521            mpp_get_field_index = n
   1522            exit
   1523         endif
   1524      enddo
   1525 
   1526      return
   1527    end function mpp_get_field_index


ENTRY POINTS

  Name                                          
                                                
 mpp_io_mod_mp_mpp_get_field_index_             

Page 49          Source Listing                  MPP_GET_FIELD_INDEX
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIELDNAME                  Dummy  1509     CHAR                        scalar   ARG,INOUT        1520                              
 FIELDS                     Dummy  1509     RECORD          1096  1     1        ARG,INOUT        1519,1520                         
 LOWERCASE                  Func   1520     CHAR                        scalar   TGT,PRIV         333,1520,1541,1562,5154,5210,5228,
                                                                                                  5466,5477,5609,6384,6391,6485,6555
                                                                                                  ,6595,6718,6934,8932,9059         
 MPP_GET_FIELD_INDEX        Func   1509     I(4)            4           scalar                                                      
 N                          Local  1515     I(4)            4           scalar                    1519,1520,1521                    
 SIZE                       Func   1519                                 scalar                    1519                              

Page 50          Source Listing                  MPP_GET_FIELD_INDEX
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1528 
   1529 !#####################################################################
   1530    function mpp_get_axis_index(axes,axisname)
   1531 
   1532      type(axistype), dimension(:) :: axes
   1533      character(len=*) :: axisname
   1534      integer :: mpp_get_axis_index
   1535 
   1536      integer :: n
   1537 
   1538      mpp_get_axis_index = -1
   1539 
   1540      do n=1,size(axes(:))
   1541         if (lowercase(axes(n)%name) == lowercase(axisname)) then
   1542            mpp_get_axis_index = n
   1543            exit
   1544         endif
   1545      enddo
   1546 
   1547      return
   1548    end function mpp_get_axis_index


ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_get_axis_index_             

Page 51          Source Listing                  MPP_GET_AXIS_INDEX
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXES                       Dummy  1530     RECORD          1424  1     1        ARG,INOUT        1540,1541                         
 AXISNAME                   Dummy  1530     CHAR                        scalar   ARG,INOUT        1541                              
 MPP_GET_AXIS_INDEX         Func   1530     I(4)            4           scalar                                                      
 N                          Local  1536     I(4)            4           scalar                    1540,1541,1542                    
 SIZE                       Func   1540                                 scalar                    1540                              

Page 52          Source Listing                  MPP_GET_AXIS_INDEX
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1549 
   1550 !#####################################################################
   1551    function mpp_get_axis_by_name(unit,axisname)
   1552 
   1553      integer          :: unit
   1554      character(len=*) :: axisname
   1555      type(axistype)   :: mpp_get_axis_by_name
   1556 
   1557      integer :: n
   1558 
   1559      mpp_get_axis_by_name = default_axis
   1560 
   1561      do n=1,size(mpp_file(unit)%Axis(:))
   1562         if (lowercase(mpp_file(unit)%Axis(n)%name) == lowercase(axisname)) then
   1563            mpp_get_axis_by_name = mpp_file(unit)%Axis(n)
   1564            exit
   1565         endif
   1566      enddo
   1567 
   1568      return
   1569    end function mpp_get_axis_by_name


ENTRY POINTS

  Name                                           
                                                 
 mpp_io_mod_mp_mpp_get_axis_by_name_             

Page 53          Source Listing                  MPP_GET_AXIS_BY_NAME
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXISNAME                   Dummy  1551     CHAR                        scalar   ARG,INOUT        1562                              
 MPP_GET_AXIS_BY_NAME       Func   1551     AXISTYPE        1424        scalar                                                      
 N                          Local  1557     I(4)            4           scalar                    1561,1562,1563                    
 SIZE                       Func   1561                                 scalar                    1561                              
 UNIT                       Dummy  1551     I(4)            4           scalar   ARG,INOUT        1561,1562,1563                    

Page 54          Source Listing                  MPP_GET_AXIS_BY_NAME
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1570 
   1571 !#####################################################################
   1572    function mpp_get_field_size(field)
   1573 
   1574      type(fieldtype) :: field
   1575      integer :: mpp_get_field_size(4)
   1576 
   1577      mpp_get_field_size = -1
   1578 
   1579      mpp_get_field_size(1) = field%size(1)
   1580      mpp_get_field_size(2) = field%size(2)
   1581      mpp_get_field_size(3) = field%size(3)
   1582      mpp_get_field_size(4) = field%size(4)
   1583 
   1584      return
   1585    end function mpp_get_field_size


ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_get_field_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIELD                      Dummy  1572     FIELDTYPE       1096        scalar   ARG,INOUT        1579,1580,1581,1582               
 MPP_GET_FIELD_SIZE         Func   1572     I(4)            4     1     4                         1577,1579,1580,1581,1582          

Page 55          Source Listing                  MPP_GET_FIELD_SIZE
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1586 
   1587 
   1588 !#####################################################################
   1589    function mpp_get_axis_length(axis)
   1590 
   1591      type(axistype) :: axis
   1592      integer :: mpp_get_axis_length
   1593 
   1594      mpp_get_axis_length = axis%len
   1595 
   1596      return
   1597    end function mpp_get_axis_length


ENTRY POINTS

  Name                                          
                                                
 mpp_io_mod_mp_mpp_get_axis_length_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXIS                       Dummy  1589     AXISTYPE        1424        scalar   ARG,INOUT        1594                              
 MPP_GET_AXIS_LENGTH        Func   1589     I(4)            4           scalar                                                      

Page 56          Source Listing                  MPP_GET_AXIS_LENGTH
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1598 
   1599 !#####################################################################
   1600   function mpp_get_axis_bounds(axis, data, name)
   1601      type(axistype), intent(in) :: axis
   1602      real, dimension(:), intent(out) :: data
   1603      character(len=*), optional, intent(out) :: name
   1604      logical                         :: mpp_get_axis_bounds
   1605 
   1606      if (size(data(:)).lt.axis%len+1)&
   1607           call mpp_error(FATAL,'MPP_GET_AXIS_BOUNDS: data array not large enough, axis '//trim(axis%name))
   1608      if (.NOT.ASSOCIATED(axis%data_bounds)) then
   1609         mpp_get_axis_bounds = .false.
   1610      else
   1611         mpp_get_axis_bounds = .true.
   1612         data(1:axis%len+1) = axis%data_bounds(:)
   1613      endif
   1614      if(present(name)) name = trim(axis%name_bounds)
   1615 
   1616      return
   1617   end function mpp_get_axis_bounds


ENTRY POINTS

  Name                                          
                                                
 mpp_io_mod_mp_mpp_get_axis_bounds_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   1608                                 scalar                    1608                              
 AXIS                       Dummy  1600     AXISTYPE        1424        scalar   ARG,IN           1606,1607,1608,1612,1614          
 DATA                       Dummy  1600     R(8)            8     1     1        ARG,OUT          1606,1612                         
 MPP_GET_AXIS_BOUNDS        Func   1600     L(4)            4           scalar                                                      
 NAME                       Dummy  1600     CHAR                        scalar   ARG,OUT          1614                              
 PRESENT                    Func   1614                                 scalar                    1614                              
 SIZE                       Func   1606                                 scalar                    1606                              
 TRIM                       Func   1607                                 scalar                    1607,1614                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AXISTYPE.DATA_BOUNDS       R(8)            8     1184     1     1        PTR,PRIV         1608,1612,5505,5527,5557,5558,5569 
                                                                                           ,5570,5581,5582,5595,5596          
 AXISTYPE.NAME_BOUNDS       CHAR            128   128            scalar   PRIV             1614,5506,5593                     

Page 57          Source Listing                  MPP_GET_AXIS_BOUNDS
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1618 
   1619 !#####################################################################
   1620    subroutine mpp_get_axis_data( axis, data )
   1621 
   1622      type(axistype), intent(in) :: axis
   1623      real, dimension(:), intent(out) :: data
   1624 
   1625 
   1626      if (size(data(:)).lt.axis%len)&
   1627           call mpp_error(FATAL,'MPP_GET_AXIS_DATA: data array not large enough, axis '//trim(axis%name))
   1628      if (.NOT.ASSOCIATED(axis%data)) then
   1629         call mpp_error(NOTE,'MPP_GET_AXIS_DATA: use mpp_get_times for record dims')
   1630         data = 0.
   1631      else
   1632         data(1:axis%len) = axis%data
   1633      endif
   1634 
   1635      return
   1636    end subroutine mpp_get_axis_data


ENTRY POINTS

  Name                                        
                                              
 mpp_io_mod_mp_mpp_get_axis_data_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   1628                                 scalar                    1628                              
 AXIS                       Dummy  1620     AXISTYPE        1424        scalar   ARG,IN           1626,1627,1628,1632               
 DATA                       Dummy  1620     R(8)            8     1     1        ARG,OUT          1626,1630,1632                    
 MPP_GET_AXIS_DATA          Subr   1620                                                                                             
 NOTE                       Param  1629     I(4)            4           scalar   PRIV             332,1629,1725,2624,4178,4196,4270,
                                                                                                  4288,4409,4427,4501,4519,5107,1060
                                                                                                  5,10784,10963,11146,11325,11504   
 SIZE                       Func   1626                                 scalar                    1626                              
 TRIM                       Func   1627                                 scalar                    1627                              

Page 58          Source Listing                  MPP_GET_AXIS_DATA
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1637 
   1638 
   1639 !#####################################################################
   1640    function mpp_get_recdimid(unit)
   1641 !
   1642       integer, intent(in) :: unit
   1643       integer  :: mpp_get_recdimid
   1644 
   1645 
   1646       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_GET_RECDIMID: must first call mpp_io_init.' )
   1647       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_GET_RECDIMID: invalid unit number.' )
   1648 
   1649       mpp_get_recdimid = mpp_file(unit)%recdimid
   1650 
   1651       return
   1652    end function mpp_get_recdimid


ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_get_recdimid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_GET_RECDIMID           Func   1640     I(4)            4           scalar                                                      
 UNIT                       Dummy  1640     I(4)            4           scalar   ARG,IN           1647,1649                         

Page 59          Source Listing                  MPP_GET_RECDIMID
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1653 
   1654 !#####################################################################
   1655 ! <FUNCTION NAME="mpp_get_ncid">
   1656 !   <OVERVIEW>
   1657 !     Get netCDF ID of an open file.
   1658 !   </OVERVIEW>
   1659 !   <DESCRIPTION>
   1660 !    This returns the <TT>ncid</TT> associated with the open file on
   1661 !    <TT>unit</TT>. It is used in the instance that the user desires to
   1662 !    perform netCDF calls upon the file that are not provided by the
   1663 !    <TT>mpp_io_mod</TT> API itself.
   1664 !   </DESCRIPTION>
   1665 !   <TEMPLATE>
   1666 !     mpp_get_ncid(unit)
   1667 !   </TEMPLATE>
   1668 !   <IN NAME="unit" TYPE="integer"> </IN>
   1669 ! </FUNCTION>
   1670 
   1671     function mpp_get_ncid(unit)
   1672       integer :: mpp_get_ncid
   1673       integer, intent(in) :: unit
   1674 
   1675       mpp_get_ncid = mpp_file(unit)%ncid
   1676       return
   1677     end function mpp_get_ncid


ENTRY POINTS

  Name                                   
                                         
 mpp_io_mod_mp_mpp_get_ncid_             

Page 60          Source Listing                  MPP_GET_NCID
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_GET_NCID               Func   1671     I(4)            4           scalar                                                      
 UNIT                       Dummy  1671     I(4)            4           scalar   ARG,IN           1675                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FILETYPE.NCID              I(4)            4     280            scalar   PRIV             1675,2229,2309,2360,2905,2907,2910 
                                                                                           ,2913,2918,2920,2922,2924,2928,293 
                                                                                           5,2937,3083,3160,3341,3352,3362,33 
                                                                                           68,3379,3385,3735,3746,3756,3762,3 
                                                                                           773,3779,4974,4976,5054,6151,6153, 
                                                                                           6168,6184,6188,6191,6196,6198,6202 
                                                                                           ,6204,6221,6225,6228,6233,6235,623 
                                                                                           9,6241,6339,6342,6344,6350,6353,63 
                                                                                           55,6475,6477,6542,6544,6623,6681,6 
                                                                                           683,6685,6689,6693,6701,6858,6863, 
                                                                                           6869,6872,6880,6883,6892,6895,6906 
                                                                                           ,6909,6920,6927,6932,6934,7070,707 
                                                                                           3,7075,7137,7139,7144,7146,7149,75 
                                                                                           13,7516,7518,7580,7582,7587,7589,7 
                                                                                           592,8709,8756,8780,8782,8785,8788, 
                                                                                           8790,8863,8899,8902,8907,8912      

Page 61          Source Listing                  MPP_GET_NCID
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1678 
   1679 !#####################################################################
   1680     function mpp_get_axis_id(axis)
   1681       integer mpp_get_axis_id
   1682       type(axistype), intent(in) :: axis
   1683       mpp_get_axis_id = axis%id
   1684       return
   1685     end function mpp_get_axis_id


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_get_axis_id_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXIS                       Dummy  1680     AXISTYPE        1424        scalar   ARG,IN           1683                              
 MPP_GET_AXIS_ID            Func   1680     I(4)            4           scalar   PRIV             1683                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AXISTYPE.ID                I(4)            4     1328           scalar   PRIV             1683,2209,5235,6342,6344,6353,6355 
                                                                                           ,6358,6363,6366,6368,6379,6383,638 
                                                                                           5,6389,6391,6397,6401,6408,6411,64 
                                                                                           18,6422,6426,6477,6484,6486,6489,6 
                                                                                           493,6497,6544,6552,6556,6561,8662, 
                                                                                           8785,8790,8792,8797,8800,8802,8814 
                                                                                           ,8823,8825,8832,8835               

Page 62          Source Listing                  MPP_GET_AXIS_ID
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1686 
   1687 !#####################################################################
   1688     function mpp_get_field_id(field)
   1689       integer mpp_get_field_id
   1690       type(fieldtype), intent(in) :: field
   1691       mpp_get_field_id = field%id
   1692       return
   1693     end function mpp_get_field_id


ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_get_field_id_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIELD                      Dummy  1688     FIELDTYPE       1096        scalar   ARG,IN           1691                              
 MPP_GET_FIELD_ID           Func   1688     I(4)            4           scalar   PRIV             1691                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FIELDTYPE.ID               I(4)            4     996            scalar   PRIV             1691,2186,3341,3352,3362,3368,3379 
                                                                                           ,3385,3735,3746,3756,3762,3773,377 
                                                                                           9,4974,4976,5616,6681,6683,6685,66 
                                                                                           89,6693,6701,6708,6711,6713,6717,6 
                                                                                           719,6724,6728,6732,6735,6739,6742, 
                                                                                           6748,6751,6757,6763,6767,6772,6773 
                                                                                           ,6774,6782,6786,6789,6792,7144,714 
                                                                                           6,7149,7164,7167,7169,7587,7589,75 
                                                                                           92,7607,7610,7612,8662,8900,8903,8 
                                                                                           908,8913,8921,8925,8927,8931,8933, 
                                                                                           8938,8942,8946,8949,8953,8956,8961 
                                                                                           ,8964,8969,8972,8976,8978,8980,898 
                                                                                           3                                  

Page 63          Source Listing                  MPP_GET_FIELD_ID
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1694 
   1695 !#####################################################################
   1696     subroutine mpp_get_unit_range( unit_begin_out, unit_end_out )
   1697       integer, intent(out) ::      unit_begin_out, unit_end_out
   1698 
   1699       unit_begin_out = unit_begin; unit_end_out = unit_end
   1700       return
   1701     end subroutine mpp_get_unit_range


ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_get_unit_range_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_GET_UNIT_RANGE         Subr   1696                                                                                             
 UNIT_BEGIN                 Local  1699     I(4)            4           scalar                    1699,1710,2299,2303,2687,2692     
 UNIT_BEGIN_OUT             Dummy  1696     I(4)            4           scalar   ARG,OUT          1699                              
 UNIT_END                   Local  1699     I(4)            4           scalar                    1699,1710,2299,2303,2687,2691,2692
 UNIT_END_OUT               Dummy  1696     I(4)            4           scalar   ARG,OUT          1699                              

Page 64          Source Listing                  MPP_GET_UNIT_RANGE
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1702 
   1703 !#####################################################################
   1704     subroutine mpp_set_unit_range( unit_begin_in, unit_end_in )
   1705       integer, intent(in) ::       unit_begin_in, unit_end_in
   1706 
   1707       if( unit_begin_in.GT.unit_end_in )call mpp_error( FATAL, 'MPP_SET_UNIT_RANGE: unit_begin_in.GT.unit_end_in.' )
   1708       if( unit_begin_in.LT.0           )call mpp_error( FATAL, 'MPP_SET_UNIT_RANGE: unit_begin_in.LT.0.' )
   1709       if( unit_end_in  .GT.maxunits    )call mpp_error( FATAL, 'MPP_SET_UNIT_RANGE: unit_end_in.GT.maxunits.' )
   1710       unit_begin = unit_begin_in; unit_end = unit_end_in
   1711       return
   1712     end subroutine mpp_set_unit_range


ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_set_unit_range_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MAXUNITS                   Local  1709     I(4)            4           scalar                    1709,2145,2146,2153,2222,2308,2374
                                                                                                  ,2679,2682,2683                   
 MPP_SET_UNIT_RANGE         Subr   1704                                                                                             
 UNIT_BEGIN_IN              Dummy  1704     I(4)            4           scalar   ARG,IN           1707,1708,1710                    
 UNIT_END_IN                Dummy  1704     I(4)            4           scalar   ARG,IN           1707,1709,1710                    

Page 65          Source Listing                  MPP_SET_UNIT_RANGE
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1713 
   1714 !#####################################################################
   1715     subroutine mpp_io_set_stack_size(n)
   1716 !set the mpp_io_stack variable to be at least n LONG words long
   1717       integer, intent(in) :: n
   1718       character(len=10) :: text
   1719 
   1720       if( n.GT.mpp_io_stack_size .AND. allocated(mpp_io_stack) )deallocate(mpp_io_stack)
   1721       if( .NOT.allocated(mpp_io_stack) )then
   1722           allocate( mpp_io_stack(n) )
   1723           mpp_io_stack_size = n
   1724           write( text,'(i10)' )n
   1725           if( pe.EQ.mpp_root_pe() )call mpp_error( NOTE, 'MPP_IO_SET_STACK_SIZE: stack size set to '//text//'.' )
   1726       end if
   1727 
   1728       return
   1729     end subroutine mpp_io_set_stack_size


ENTRY POINTS

  Name                                            
                                                  
 mpp_io_mod_mp_mpp_io_set_stack_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1720                                 scalar                    1720,1721                         
 MPP_IO_SET_STACK_SIZE      Subr   1715                                                                                             
 MPP_IO_STACK               Local  1720     R(8)            8     1     1        ALC              1720,1721,1722,3340,3350,3360,3377
                                                                                                  ,3734,3744,3754,3771,7102,7154,754
                                                                                                  5,7597                            
 MPP_IO_STACK_SIZE          Local  1720     I(4)            4           scalar                    1049,1720,1723,3330,3724,7058,7501
 MPP_ROOT_PE                Func   1725     I(4)            4           scalar   PRIV             333,1725,2061,2251,2315,2603,2795,
                                                                                                  2797,3071,4189,4281,4420,4512,4942
                                                                                                  ,5313,5317,5329,5333              
 N                          Dummy  1715     I(4)            4           scalar   ARG,IN           1720,1722,1723,1724               
 PE                         Local  1725     I(4)            4           scalar                    1725,2141,2251,2315,2795,2797,2802
                                                                                                  ,2907,2913,2928,2937,2963,2967,307
                                                                                                  1,3454,3517,3614,3622,3848,3911,40
                                                                                                  08,4016,4942,4948,4969,5114,5134,5
                                                                                                  152,5173,5191,5362,5384,5405,5427,
                                                                                                  5449,5671,5690,5711,5733,5754,6426
                                                                                                  ,6497,6561,6792,6827,7084,7099,713
                                                                                                  2,7170,7527,7542,7575,7613,8835,89
                                                                                                  83                                
 TEXT                       Local  1718     CHAR            10          scalar                    1724,1725                         

Page 66          Source Listing                  MPP_IO_SET_STACK_SIZE
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1730 
   1731 !#####################################################################
   1732 ! based on presence/absence of attributes, defines valid range or missing
   1733 ! value. For details, see section 8.1 of NetCDF User Guide
   1734   subroutine mpp_get_valid(f,v)
   1735      type(fieldtype),intent(in)  :: f ! field
   1736      type(validtype),intent(out) :: v ! validator
   1737 
   1738      integer :: irange,imin,imax,ifill,imissing,iscale
   1739      integer :: valid_T, scale_T ! types of attributes
   1740 
   1741      v%is_range = .true.
   1742      v%min = -HUGE(v%min); v%max = HUGE(v%max)
   1743      if (f%natt == 0) return
   1744 ! find indices of relevant attributes
   1745      irange   = mpp_find_att(f%att,'valid_range')
   1746      imin     = mpp_find_att(f%att,'valid_min')
   1747      imax     = mpp_find_att(f%att,'valid_max')
   1748      ifill    = mpp_find_att(f%att,'_FillValue')
   1749      imissing = mpp_find_att(f%att,'missing_value')
   1750 
   1751 ! find the widest type of scale and offset; note that the code
   1752 ! uses assumption that NetCDF types are arranged in th order of rank,
   1753 ! that is NF_BYTE < NF_SHORT < NF_INT < NF_FLOAT < NF_DOUBLE
   1754      scale_T = 0
   1755      iscale   = mpp_find_att(f%att,'scale_factor')
   1756      if(iscale>0) scale_T = f%att(iscale)%type
   1757      iscale = mpp_find_att(f%att,'add_offset')
   1758      if(iscale>0) scale_T = max(scale_T,f%att(iscale)%type)
   1759 
   1760 
   1761 ! examine possible range attributes
   1762      valid_T = 0
   1763      if (irange>0) then
   1764         v%min = f%att(irange)%fatt(1)
   1765         v%max = f%att(irange)%fatt(2)
   1766         valid_T = f%att(irange)%type
   1767      else if (imax>0.or.imin>0) then
   1768         if(imax>0) then
   1769            v%max = f%att(imax)%fatt(1)
   1770            valid_T = max(valid_T,f%att(imax)%type)
   1771         endif
   1772         if(imin>0) then
   1773            v%min = f%att(imin)%fatt(1)
   1774            valid_T = max(valid_T,f%att(imin)%type)
   1775         endif
   1776      else if (imissing > 0) then
   1777         v%is_range = .false.
   1778 ! here we always scale, since missing_value is supposed to be in
   1779 ! external representation
   1780         v%min = f%att(imissing)%fatt(1)*f%scale + f%add
   1781      else if (ifill>0) then
   1782 !z1l ifdef is added in to be able to compile without using 1.
   1783 
   1784 ! define min and max according to _FillValue
   1785         if(f%att(ifill)%fatt(1)>0) then
   1786 ! if _FillValue is positive, then it defines valid maximum

Page 67          Source Listing                  MPP_GET_VALID
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1787             v%max = f%att(ifill)%fatt(1)
   1788             select case(f%type)
   1789             case (NF_BYTE,NF_SHORT,NF_INT)
   1790                v%max = v%max-1
   1791             case (NF_FLOAT)
   1792                v%max = nearest(nearest(real(v%max,4),-1.0),-1.0)
   1793             case (NF_DOUBLE)
   1794                v%max = nearest(nearest(real(v%max,8),-1.0),-1.0)
   1795             end select
   1796 ! always do the scaling, as the _FillValue is in external
   1797 ! representation
   1798             v%max = v%max*f%scale + f%add
   1799         else
   1800 ! if _FillValue is negative or zero, then it defines valid minimum
   1801             v%min = f%att(ifill)%fatt(1)
   1802             select case(f%type)
   1803             case (NF_BYTE,NF_SHORT,NF_INT)
   1804                v%min = v%min+1
   1805             case (NF_FLOAT)
   1806                v%min = nearest(nearest(real(v%min,4),+1.0),+1.0)
   1807             case (NF_DOUBLE)
   1808                v%min = nearest(nearest(real(v%min,8),+1.0),+1.0)
   1809             end select
   1810 ! always do the scaling, as the _FillValue is in external
   1811 ! representation
   1812             v%min = v%min*f%scale + f%add
   1813         endif
   1814 
   1815     endif
   1816 ! If valid_range is the same type as scale_factor (actually the wider of
   1817 ! scale_factor and add_offset) and this is wider than the external data, then it
   1818 ! will be interpreted as being in the units of the internal (unpacked) data.
   1819 ! Otherwise it is in the units of the external (packed) data.
   1820 ! Note that it is not relevant if we went through the missing_data of _FillValue
   1821 ! brances, because in this case all irange, imin, and imax are less then 0
   1822     if(.not.((valid_T == scale_T).and.(scale_T>f%type))) then
   1823        if(irange>0 .or. imin>0) then
   1824           v%min = v%min*f%scale + f%add
   1825        endif
   1826        if(irange>0 .or. imax>0) then
   1827           v%max = v%max*f%scale + f%add
   1828        endif
   1829     endif
   1830 
   1831    end subroutine mpp_get_valid

Page 68          Source Listing                  MPP_GET_VALID
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_util.inc



ENTRY POINTS

  Name                                    
                                          
 mpp_io_mod_mp_mpp_get_valid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 F                          Dummy  1734     FIELDTYPE       1096        scalar   ARG,IN           1743,1745,1746,1747,1748,1749,1755
                                                                                                  ,1756,1757,1758,1764,1765,1766,176
                                                                                                  9,1770,1773,1774,1780,1785,1787,17
                                                                                                  88,1798,1801,1802,1812,1822,1824,1
                                                                                                  827                               
 HUGE                       Func   1742                                 scalar                    1742                              
 IFILL                      Local  1738     I(4)            4           scalar                    1748,1781,1785,1787,1801          
 IMAX                       Local  1738     I(4)            4           scalar                    1747,1767,1768,1769,1770,1826     
 IMIN                       Local  1738     I(4)            4           scalar                    1746,1767,1772,1773,1774,1823     
 IMISSING                   Local  1738     I(4)            4           scalar                    1749,1776,1780                    
 IRANGE                     Local  1738     I(4)            4           scalar                    1745,1763,1764,1765,1766,1823,1826
 ISCALE                     Local  1738     I(4)            4           scalar                    1755,1756,1757,1758               
 MAX                        Func   1758                                 scalar                    1758,1770,1774                    
 MPP_GET_VALID              Subr   1734                                                           1288                              
 NEAREST                    Func   1792                                 scalar                    1792,1794,1806,1808               
 NF_BYTE                    Param  1789     I(4)            4           scalar   PRIV             1789,1803,3336,3730,6693,6892,6895
                                                                                                  ,8912                             
 NF_DOUBLE                  Param  1793     I(4)            4           scalar   PRIV             1793,1807,3376,3770,5175,5274,5320
                                                                                                  ,5431,5572,5625,5736,6342,6353,668
                                                                                                  3,6858,6863,8790,8899             
 NF_FLOAT                   Param  1791     I(4)            4           scalar   PRIV             1791,1805,3359,3753,5157,5257,5304
                                                                                                  ,5409,5560,5623,5714,6344,6355,668
                                                                                                  5,6869,6872,6906,6909,8785,8902   
 NF_INT                     Param  1789     I(4)            4           scalar   PRIV             1789,1803,3348,3742,4174,4266,4405
                                                                                                  ,4497,5137,5240,5388,5548,5627,569
                                                                                                  3,6188,6225,6477,6544,6681,6921,69
                                                                                                  27,10599,10778,10957,11140,11319,1
                                                                                                  1498                              
 NF_SHORT                   Param  1789     I(4)            4           scalar   PRIV             1789,1803,3339,3733,5119,5368,5621
                                                                                                  ,5674,6689,6880,6883,8907         
 REAL                       Func   1792                                 scalar                    1792,1794,1806,1808               
 SCALE_T                    Local  1739     I(4)            4           scalar                    1754,1756,1758,1822               
 V                          Dummy  1734     VALIDTYPE       24          scalar   ARG,OUT          1741,1742,1764,1765,1769,1773,1777
                                                                                                  ,1780,1787,1790,1792,1794,1798,180
                                                                                                  1,1804,1806,1808,1812,1824,1827   
 VALID_T                    Local  1739     I(4)            4           scalar                    1762,1766,1770,1774,1822          



Page 69          Source Listing                  MPP_GET_VALID
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ATTTYPE.FATT               R(8)            8     1416     1     1        PTR,PRIV         1764,1765,1769,1773,1780,1785,1787 
                                                                                           ,1801,1917,1919,1931,3098,3099,310 
                                                                                           0,3124,3125,3126,3139,3140,3141,51 
                                                                                           20,5135,5138,5153,5158,5172,5173,5 
                                                                                           176,5190,5191,5369,5383,5386,5389, 
                                                                                           5404,5407,5410,5426,5429,5432,5448 
                                                                                           ,5451,5675,5689,5691,5694,5710,571 
                                                                                           2,5715,5732,5734,5737,5753,5755,57 
                                                                                           67,5769,5771,5773,5775,5777,5779,5 
                                                                                           780,8720,8727,8825                 
 ATTTYPE.TYPE               I(4)            4     0              scalar   PRIV             1756,1758,1766,1770,1774,1882,2215 
                                                                                           ,5100,5354,5663,5858,8716,8723,882 
                                                                                           1                                  
 FIELDTYPE.NATT             I(4)            4     1004           scalar   PRIV             1743,2022,2188,3123,5618,5857      
 FIELDTYPE.TYPE             I(4)            4     1000           scalar   PRIV             1788,1802,1822,2187,3335,3729,4174 
                                                                                           ,4266,4405,4497,4971,5615,10599,10 
                                                                                           778,10957,11140,11319,11498        
 VALIDTYPE.IS_RANGE         L(4)            4     0              scalar   PRIV             1741,1777,1838                     
 VALIDTYPE.MAX              R(8)            8     16             scalar   PRIV             1742,1765,1769,1787,1790,1792,1794 
                                                                                           ,1798,1827,1839                    
 VALIDTYPE.MIN              R(8)            8     8              scalar   PRIV             1742,1764,1773,1780,1801,1804,1806 
                                                                                           ,1808,1812,1824,1839,1841          

Page 70          Source Listing                  MPP_GET_VALID
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1832 
   1833 !#####################################################################
   1834    logical elemental function mpp_is_valid(x, v)
   1835       real           , intent(in) :: x ! real value to be eaxmined
   1836       type(validtype), intent(in) :: v ! validator
   1837 
   1838       if (v%is_range) then
   1839          mpp_is_valid = (v%min<=x).and.(x<=v%max)
   1840       else
   1841          mpp_is_valid = x/=v%min
   1842       endif
   1843     end function mpp_is_valid


ENTRY POINTS

  Name                                   
                                         
 mpp_io_mod_mp_mpp_is_valid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_IS_VALID               Func   1834     L(4)            4           scalar                                                      
 V                          Dummy  1834     VALIDTYPE       24          scalar   ARG,IN           1838,1839,1841                    
 X                          Dummy  1834     R(8)            8           scalar   ARG,IN           1839,1841                         

Page 71          Source Listing                  MPP_IS_VALID
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1844 
   1845 !#####################################################################
   1846 ! finds an attribute by name in the array; returns -1 if it is not
   1847 ! found
   1848    function mpp_find_att(atts, name)
   1849      integer                   :: mpp_find_att
   1850      type(atttype), intent(in) :: atts(:) ! array of attributes
   1851      character(len=*)          :: name ! name of the attributes
   1852 
   1853      integer :: i
   1854 
   1855      mpp_find_att = -1
   1856      do i = 1, size(atts)
   1857         if (trim(name)==trim(atts(i)%name)) then
   1858            mpp_find_att=i
   1859            exit
   1860         endif
   1861      enddo
   1862    end function mpp_find_att


ENTRY POINTS

  Name                                   
                                         
 mpp_io_mod_mp_mpp_find_att_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTS                       Dummy  1848     RECORD          1488  1     1        ARG,IN           1856,1857                         
 I                          Local  1853     I(4)            4           scalar                    1856,1857,1858                    
 MPP_FIND_ATT               Func   1848     I(4)            4           scalar                    1295,1745,1746,1747,1748,1749,1755
                                                                                                  ,1757,1855,1858,2023              
 NAME                       Dummy  1848     CHAR                        scalar   ARG,INOUT        1857                              
 SIZE                       Func   1856                                 scalar                    1856                              
 TRIM                       Func   1857                                 scalar                    1857                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ATTTYPE.NAME               CHAR            128   8              scalar   PRIV             1857,1868,1870,1983,2214,2340,5098 
                                                                                           ,5353,5510,5511,5662,5859,8718,872 
                                                                                           0,8725,8727,8820,8823,8825         

Page 72          Source Listing                  MPP_FIND_ATT
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1863 !#####################################################################
   1864 
   1865 ! return the name of an attribute.
   1866    function mpp_get_att_name(att)
   1867       type(atttype),    intent(in) :: att
   1868       character(len=len(att%name)) :: mpp_get_att_name
   1869 
   1870       mpp_get_att_name = att%name
   1871       return
   1872 
   1873    end function mpp_get_att_name


ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_get_att_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATT                        Dummy  1866     ATTTYPE         1488        scalar   ARG,IN           1868,1870                         
 LEN                        Func   1868                                 scalar                    1868                              
 MPP_GET_ATT_NAME           Func   1866     CHAR            128         scalar                                                      

Page 73          Source Listing                  MPP_GET_ATT_NAME
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1874 
   1875 !#####################################################################
   1876 
   1877 ! return the type of an attribute.
   1878    function mpp_get_att_type(att)
   1879       type(atttype), intent(in) :: att
   1880       integer                   :: mpp_get_att_type
   1881 
   1882       mpp_get_att_type = att%type
   1883       return
   1884 
   1885    end function mpp_get_att_type


ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_get_att_type_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATT                        Dummy  1878     ATTTYPE         1488        scalar   ARG,IN           1882                              
 MPP_GET_ATT_TYPE           Func   1878     I(4)            4           scalar                                                      

Page 74          Source Listing                  MPP_GET_ATT_TYPE
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1886 
   1887 !#####################################################################
   1888 
   1889 ! return the length of an attribute.
   1890    function mpp_get_att_length(att)
   1891       type(atttype), intent(in) :: att
   1892       integer                   :: mpp_get_att_length
   1893 
   1894       mpp_get_att_length = att%len
   1895 
   1896       return
   1897 
   1898    end function mpp_get_att_length


ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_get_att_length_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATT                        Dummy  1890     ATTTYPE         1488        scalar   ARG,IN           1894                              
 MPP_GET_ATT_LENGTH         Func   1890     I(4)            4           scalar                                                      


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ATTTYPE.LEN                I(4)            4     4              scalar   PRIV             1894,1905,1985,2216,5099,5109,5355 
                                                                                           ,5664,8717,8724,8822               

Page 75          Source Listing                  MPP_GET_ATT_LENGTH
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1899 
   1900 !#####################################################################
   1901 
   1902 ! return the char value of an attribute.
   1903    function mpp_get_att_char(att)
   1904       type(atttype), intent(in) :: att
   1905       character(len=att%len)    :: mpp_get_att_char
   1906 
   1907       mpp_get_att_char = att%catt
   1908       return
   1909 
   1910    end function mpp_get_att_char


ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_get_att_char_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATT                        Dummy  1903     ATTTYPE         1488        scalar   ARG,IN           1905,1907                         
 MPP_GET_ATT_CHAR           Func   1903     CHAR                        scalar                                                      


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 ATTTYPE.CATT               CHAR            1280  136            scalar   PRIV             1907,1988,2217,5110,5112,5114,5360 
                                                                                           ,5364,5459,5461,5463,5465,5476,548 
                                                                                           7,5489,5512,5669,5672,5763,5765,57 
                                                                                           82,8718,8725,8823                  

Page 76          Source Listing                  MPP_GET_ATT_CHAR
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1911 
   1912 !#####################################################################
   1913 
   1914 ! return the real array value of an attribute.
   1915    function mpp_get_att_real(att)
   1916       type(atttype), intent(in)          :: att
   1917       real, dimension(size(att%fatt(:))) :: mpp_get_att_real
   1918 
   1919       mpp_get_att_real = att%fatt
   1920       return
   1921 
   1922    end function mpp_get_att_real


ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_get_att_real_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATT                        Dummy  1915     ATTTYPE         1488        scalar   ARG,IN           1917,1919                         
 MPP_GET_ATT_REAL           Func   1915     R(8)            8     1     0                                                           
 SIZE                       Func   1917                                 scalar   PRIV             1917                              

Page 77          Source Listing                  MPP_GET_ATT_REAL
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1923 
   1924 !#####################################################################
   1925 
   1926 ! return the real array value of an attribute.
   1927    function mpp_get_att_real_scalar(att)
   1928       type(atttype), intent(in)          :: att
   1929       real                               :: mpp_get_att_real_scalar
   1930 
   1931       mpp_get_att_real_scalar = att%fatt(1)
   1932       return
   1933 
   1934    end function mpp_get_att_real_scalar


ENTRY POINTS

  Name                                              
                                                    
 mpp_io_mod_mp_mpp_get_att_real_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATT                        Dummy  1927     ATTTYPE         1488        scalar   ARG,IN           1931                              
 MPP_GET_ATT_REAL_SCALAR    Func   1927     R(8)            8           scalar                                                      

Page 78          Source Listing                  MPP_GET_ATT_REAL_SCALAR
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1935 
   1936 !#####################################################################
   1937 ! return the name of an field
   1938    function mpp_get_field_name(field)
   1939       type(fieldtype), intent(in) :: field
   1940       character(len=len(field%name)) :: mpp_get_field_name
   1941 
   1942       mpp_get_field_name = field%name
   1943       return
   1944    end function mpp_get_field_name


ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_get_field_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIELD                      Dummy  1938     FIELDTYPE       1096        scalar   ARG,IN           1940,1942                         
 LEN                        Func   1940                                 scalar                    1940                              
 MPP_GET_FIELD_NAME         Func   1938     CHAR            128         scalar                                                      

Page 79          Source Listing                  MPP_GET_FIELD_NAME
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1945 
   1946 !#####################################################################
   1947 ! return the  file name of corresponding unit
   1948    function mpp_get_file_name(unit)
   1949       integer,                  intent(in) :: unit
   1950       character(len=len(mpp_file(1)%name)) :: mpp_get_file_name
   1951 
   1952       mpp_get_file_name = mpp_file(unit)%name
   1953       return
   1954 
   1955    end function mpp_get_file_name


ENTRY POINTS

  Name                                        
                                              
 mpp_io_mod_mp_mpp_get_file_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LEN                        Func   1950                                 scalar                    1950                              
 MPP_GET_FILE_NAME          Func   1948     CHAR            256         scalar                                                      
 UNIT                       Dummy  1948     I(4)            4           scalar   ARG,IN           1952                              

Page 80          Source Listing                  MPP_GET_FILE_NAME
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1956 
   1957 !####################################################################
   1958 ! return if certain file with unit is opened or not
   1959    function mpp_file_is_opened(unit)
   1960       integer,  intent(in) :: unit
   1961       logical              :: mpp_file_is_opened
   1962 
   1963       mpp_file_is_opened = mpp_file(unit)%opened
   1964       return
   1965 
   1966    end function mpp_file_is_opened


ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_file_is_opened_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_FILE_IS_OPENED         Func   1959     L(4)            4           scalar                                                      
 UNIT                       Dummy  1959     I(4)            4           scalar   ARG,IN           1963                              

Page 81          Source Listing                  MPP_FILE_IS_OPENED
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   1967 
   1968 !####################################################################
   1969 ! return the attribute value of given field name
   1970    subroutine mpp_get_field_att_text(unit, fieldname, attname, attvalue)
   1971      integer,           intent(in) :: unit
   1972      character(len=*),  intent(in) :: fieldname, attname
   1973      character(len=*), intent(out) :: attvalue
   1974      logical                       :: found_field,  found_att
   1975      integer                       :: i, j, length
   1976 
   1977      found_field = .false.
   1978      found_att = .false.
   1979      do i=1,mpp_file(unit)%nvar
   1980         if( trim(mpp_file(unit)%Var(i)%name) == trim(fieldname)) then
   1981            found_field = .true.
   1982            do j=1, size(mpp_file(unit)%Var(i)%Att(:))
   1983               if( trim(mpp_file(unit)%Var(i)%Att(j)%name) == trim(attname) ) then
   1984                  found_att = .true.
   1985                  length = mpp_file(unit)%Var(i)%Att(j)%len
   1986                  if(len(attvalue) .LE. length ) call mpp_error(FATAL, &
   1987                       'mpp_io_util.inc: length of attvalue is less than the length of catt')
   1988                  attvalue = trim(mpp_file(unit)%Var(i)%Att(j)%catt(1:length))
   1989                  exit
   1990               end if
   1991            end do
   1992            exit
   1993         end if
   1994      end do
   1995 
   1996      if(.NOT. found_field) call mpp_error(FATAL,"mpp_io_util.inc: field "//trim(fieldname)// &
   1997                " does not exist in the file "//trim(mpp_file(unit)%name) )
   1998      if(.NOT. found_att) call mpp_error(FATAL,"mpp_io_util.inc: attribute "//trim(attname)//" of field "&
   1999                //trim(fieldname)// " does not exist in the file "//trim(mpp_file(unit)%name) )
   2000 
   2001      return
   2002 
   2003    end subroutine mpp_get_field_att_text

Page 82          Source Listing                  MPP_GET_FIELD_ATT_TEXT
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_util.inc



ENTRY POINTS

  Name                                             
                                                   
 mpp_io_mod_mp_mpp_get_field_att_text_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTNAME                    Dummy  1970     CHAR                        scalar   ARG,IN           1983,1998                         
 ATTVALUE                   Dummy  1970     CHAR                        scalar   ARG,OUT          1986,1988                         
 FIELDNAME                  Dummy  1970     CHAR                        scalar   ARG,IN           1980,1996,1999                    
 FOUND_ATT                  Local  1974     L(4)            4           scalar                    1978,1984,1998                    
 FOUND_FIELD                Local  1974     L(4)            4           scalar                    1977,1981,1996                    
 I                          Local  1975     I(4)            4           scalar                    1979,1980,1982,1983,1985,1988     
 J                          Local  1975     I(4)            4           scalar                    1982,1983,1985,1988               
 LEN                        Func   1986                                 scalar                    1986                              
 LENGTH                     Local  1975     I(4)            4           scalar                    1985,1986,1988                    
 MPP_GET_FIELD_ATT_TEXT     Subr   1970                                          PRIV                                               
 SIZE                       Func   1982                                 scalar                    1982                              
 TRIM                       Func   1980                                 scalar                    1980,1983,1988,1996,1997,1998,1999
 UNIT                       Dummy  1970     I(4)            4           scalar   ARG,IN           1979,1980,1982,1983,1985,1988,1997
                                                                                                  ,1999                             

Page 83          Source Listing                  MPP_GET_FIELD_ATT_TEXT
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   2004 
   2005 
   2006 !####################################################################
   2007 ! return mpp_io_nml variable io_clock_on
   2008    function mpp_io_clock_on()
   2009       logical :: mpp_io_clock_on
   2010 
   2011       mpp_io_clock_on = io_clocks_on
   2012       return
   2013 
   2014    end function mpp_io_clock_on


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_io_clock_on_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IO_CLOCKS_ON               Local  2011     L(4)            4           scalar                    1062,1068,2011,2262               
 MPP_IO_CLOCK_ON            Func   2008     L(4)            4           scalar                                                      

Page 84          Source Listing                  MPP_IO_CLOCK_ON
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   2015 
   2016 
   2017    function mpp_attribute_exist(field,name)
   2018       logical                      :: mpp_attribute_exist
   2019       type(fieldtype),  intent(in) :: field ! The field that you are searching for the attribute.
   2020       character(len=*), intent(in) :: name ! name of the attributes
   2021 
   2022       if(field%natt > 0) then
   2023          mpp_attribute_exist = ( mpp_find_att(field%Att(:),name) > 0 )
   2024       else
   2025          mpp_attribute_exist = .false.
   2026       endif
   2027 
   2028    end function mpp_attribute_exist


ENTRY POINTS

  Name                                          
                                                
 mpp_io_mod_mp_mpp_attribute_exist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIELD                      Dummy  2017     FIELDTYPE       1096        scalar   ARG,IN           2022,2023                         
 MPP_ATTRIBUTE_EXIST        Func   2017     L(4)            4           scalar                                                      
 NAME                       Dummy  2017     CHAR                        scalar   ARG,IN           2023                              

Page 85          Source Listing                  MPP_ATTRIBUTE_EXIST
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   2029 
   2030 !#######################################################################
   2031 subroutine mpp_dist_io_pelist(ssize,pelist)
   2032   integer,              intent(in)  :: ssize   ! Stripe size for dist read
   2033   integer, allocatable, intent(out) :: pelist(:)
   2034   integer :: i, lsize, ioroot
   2035   logical :: is_ioroot=.false.
   2036 
   2037 ! Did you make a mistake?
   2038   if(ssize < 1) call mpp_error(FATAL,'mpp_dist_io_pelist: I/O stripe size < 1')
   2039 
   2040   is_ioroot = mpp_is_dist_ioroot(ssize,ioroot=ioroot,lsize=lsize)
   2041 
   2042 ! Did I make a mistake?
   2043   if(lsize < 1) call mpp_error(FATAL,'mpp_dist_io_pelist: size of pelist < 1')
   2044 
   2045   allocate(pelist(lsize))
   2046   do i=1,lsize
   2047     pelist(i) = ioroot + i - 1
   2048   enddo
   2049 end subroutine mpp_dist_io_pelist


ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_dist_io_pelist_             

Page 86          Source Listing                  MPP_DIST_IO_PELIST
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_util.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  2034     I(4)            4           scalar                    2046,2047                         
 IOROOT                     Local  2034     I(4)            4           scalar                    2040,2047                         
 IS_IOROOT                  Local  2035     L(4)            4           scalar                    2035,2040                         
 LSIZE                      Local  2034     I(4)            4           scalar                    2040,2043,2045,2046               
 MPP_DIST_IO_PELIST         Subr   2031                                                           4586,4640,4672                    
 MPP_IS_DIST_IOROOT         Func   2040     L(4)            4           scalar                    384,2040,2060,2076,4589,4643,4675 
 MPP_IS_DIST_IOROOT@0       Local  2040     L(4)            4           scalar                                                      
 PELIST                     Dummy  2031     I(4)            4     1     1        ARG,ALC,OUT      2045,2047                         
 SSIZE                      Dummy  2031     I(4)            4           scalar   ARG,IN           2038,2040                         

Page 87          Source Listing                  MPP_DIST_IO_PELIST
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   2050 
   2051 !#######################################################################
   2052 logical function mpp_is_dist_ioroot(ssize,ioroot,lsize)
   2053   integer, intent(in)  :: ssize   ! Dist io set size
   2054   integer, intent(out), optional :: ioroot, lsize
   2055   integer :: pe, npes, mypos, maxpe, d_ioroot, d_lsize, last_ioroot
   2056   integer :: rootpe
   2057 
   2058   if(ssize < 1) call mpp_error(FATAL,'mpp_is_dist_ioroot: I/O stripe size < 1')
   2059 
   2060   mpp_is_dist_ioroot = .false.
   2061   rootpe = mpp_root_pe()
   2062   d_lsize = ssize
   2063   pe = mpp_pe()
   2064   mypos = modulo(pe-rootpe,ssize)  ! Which PE am I in the io group?
   2065   d_ioroot = pe - mypos            ! What is the io root for the group?
   2066   npes = mpp_npes()
   2067   maxpe = min(d_ioroot+ssize,npes+rootpe) - 1  ! Handle end case
   2068   d_lsize = maxpe - d_ioroot + 1
   2069   if(mod(npes,ssize) == 1)then  ! Ensure there are no sets with 1 member
   2070     last_ioroot = (npes-1) - ssize
   2071     if(pe >= last_ioroot) then
   2072        d_ioroot = last_ioroot
   2073        d_lsize = ssize + 1
   2074     endif
   2075   endif
   2076   if(pe == d_ioroot) mpp_is_dist_ioroot = .true.
   2077   if(PRESENT(ioroot)) ioroot = d_ioroot
   2078   if(PRESENT(lsize)) lsize = d_lsize
   2079 end function mpp_is_dist_ioroot

Page 88          Source Listing                  MPP_IS_DIST_IOROOT
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_util.inc



ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_is_dist_ioroot_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D_IOROOT                   Local  2055     I(4)            4           scalar                    2065,2067,2068,2072,2076,2077     
 D_LSIZE                    Local  2055     I(4)            4           scalar                    2062,2068,2073,2078               
 IOROOT                     Dummy  2052     I(4)            4           scalar   ARG,OUT          2077                              
 LAST_IOROOT                Local  2055     I(4)            4           scalar                    2070,2071,2072                    
 LSIZE                      Dummy  2052     I(4)            4           scalar   ARG,OUT          2078                              
 MAXPE                      Local  2055     I(4)            4           scalar                    2067,2068                         
 MIN                        Func   2067                                 scalar                    2067                              
 MOD                        Func   2069                                 scalar                    2069                              
 MODULO                     Func   2064                                 scalar                    2064                              
 MPP_IS_DIST_IOROOT         Func   2052     L(4)            4           scalar                                                      
 MPP_NPES                   Func   2066     I(4)            4           scalar   PRIV             333,2066,2142,2794,3014           
 MPP_PE                     Func   2063     I(4)            4           scalar   PRIV             333,2063,2141,2603,4148,4153,4189,
                                                                                                  4241,4246,4281,4379,4384,4420,4472
                                                                                                  ,4477,4512,5313,5329,9218,9225,923
                                                                                                  4,9250,9353,9360,9380,9397,9514,95
                                                                                                  21,9544,9561,9684,9691,9725,9755,9
                                                                                                  865,9872,9881,9897,10000,10007,100
                                                                                                  27,10044,10161,10168,10191,10208,1
                                                                                                  0331,10338,10372,10402,10552,10564
                                                                                                  ,10731,10743,10910,10922,11093,111
                                                                                                  05,11272,11284,11451,11463        
 MYPOS                      Local  2055     I(4)            4           scalar                    2064,2065                         
 NPES                       Local  2055     I(4)            4           scalar                    2066,2067,2069,2070               
 PE                         Local  2055     I(4)            4           scalar                    2063,2064,2065,2071,2076          
 PRESENT                    Func   2077                                 scalar                    2077,2078                         
 ROOTPE                     Local  2056     I(4)            4           scalar                    2061,2064,2067                    
 SSIZE                      Dummy  2052     I(4)            4           scalar   ARG,IN           2058,2062,2064,2067,2069,2070,2073

Page 89          Source Listing                  MPP_IS_DIST_IOROOT
2021-06-01 08:53                                 ../mpp/include/mpp_io_util.inc

   2080 # 1110 "mpp_io.F90" 2 
   2081 # 1 "../mpp/include/mpp_io_misc.inc" 1 
   2082 ! -*-f90-*-
   2083 
   2084 !***********************************************************************
   2085 !*                   GNU Lesser General Public License
   2086 !*
   2087 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2088 !*
   2089 !* FMS is free software: you can redistribute it and/or modify it under
   2090 !* the terms of the GNU Lesser General Public License as published by
   2091 !* the Free Software Foundation, either version 3 of the License, or (at
   2092 !* your option) any later version.
   2093 !*
   2094 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2095 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2096 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2097 !* for more details.
   2098 !*
   2099 !* You should have received a copy of the GNU Lesser General Public
   2100 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2101 !***********************************************************************
   2102 
   2103 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   2104 !                                                                      !
   2105 !               mpp_io_init: initialize parallel I/O                   !
   2106 !                                                                      !
   2107 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   2108 
   2109 ! <SUBROUTINE NAME="mpp_io_init">
   2110 !   <OVERVIEW>
   2111 !    Initialize <TT>mpp_io_mod</TT>.
   2112 !   </OVERVIEW>
   2113 !   <DESCRIPTION>
   2114 !    Called to initialize the <TT>mpp_io_mod</TT> package. Sets the range
   2115 !    of valid fortran units and initializes the <TT>mpp_file</TT> array of
   2116 !    <TT>type(filetype)</TT>.  <TT>mpp_io_init</TT> will call <TT>mpp_init</TT> and
   2117 !    <TT>mpp_domains_init</TT>, to make sure its parent modules have been
   2118 !    initialized. (Repeated calls to the <TT>init</TT> routines do no harm,
   2119 !    so don't worry if you already called it).
   2120 !   </DESCRIPTION>
   2121 !   <TEMPLATE>
   2122 !    call mpp_io_init( flags, maxunit )
   2123 !   </TEMPLATE>
   2124 !   <IN NAME="flags" TYPE="integer"></IN>
   2125 !   <IN NAME="maxunit" TYPE="integer"></IN>
   2126 ! </SUBROUTINE>
   2127 
   2128     subroutine mpp_io_init( flags, maxunit )
   2129       integer, intent(in), optional :: flags, maxunit
   2130       integer                       :: unit_nml, io_status, iunit
   2131       integer                       :: logunit, outunit, inunit, errunit
   2132       logical                       :: opened
   2133       real(r8_kind)             :: doubledata = 0
   2134       real                          :: realarray(4)
   2135 
   2136       if( module_is_initialized )return

Page 90          Source Listing                  MPP_IO_INIT
2021-06-01 08:53                                 ../mpp/include/mpp_io_misc.inc

   2137 
   2138 !initialize IO package: initialize mpp_file array, set valid range of units for fortran IO
   2139 
   2140       call mpp_init(flags)           !if mpp_init has been called, this call will merely return
   2141       pe = mpp_pe()
   2142       npes = mpp_npes()
   2143       call mpp_domains_init(flags)
   2144 
   2145       maxunits = 1024
   2146       if( PRESENT(maxunit) )maxunits = maxunit
   2147       if( PRESENT(flags) )then
   2148           debug   = flags.EQ.MPP_DEBUG
   2149           verbose = flags.EQ.MPP_VERBOSE .OR. debug
   2150       end if
   2151 
   2152 !set range of allowed fortran unit numbers: could be compiler-dependent (should not overlap stdin/out/err)
   2153       call mpp_set_unit_range( 103, maxunits )
   2154 
   2155 !--- namelist
   2156 
   2157       read (input_nml_file, mpp_io_nml, iostat=io_status)
   2158 # 85
   2159 
   2160 
   2161       if (io_status > 0) then
   2162          call mpp_error(FATAL,'=>mpp_io_init: Error reading input.nml')
   2163       endif
   2164 
   2165 
   2166       outunit = stdout(); logunit=stdlog()
   2167       write(outunit, mpp_io_nml)
   2168       write(logunit, mpp_io_nml)
   2169 
   2170 !--- check the deflate level, set deflate = 1 if deflate_level is greater than equal to 0
   2171       if(deflate_level .GE. 0) deflate = 1
   2172       if(deflate .NE. 0) then
   2173          if(deflate_level <0 .OR. deflate > 9) then
   2174             call mpp_error(FATAL, "mpp_io_mod(mpp_io_init): mpp_io_nml variable must be between 0 and 9 when set")
   2175          endif
   2176       endif
   2177 
   2178 ! determine the pack_size
   2179       pack_size = size(transfer(doubledata, realarray))
   2180       if( pack_size .NE. 1 .AND. pack_size .NE. 2) call mpp_error(FATAL,'mpp_io_mod(mpp_io_init): pack_size should be 1 or 2
   2180 ')
   2181 
   2182 !initialize default_field
   2183       default_field%name = 'noname'
   2184       default_field%units = 'nounits'
   2185       default_field%longname = 'noname'
   2186       default_field%id = -1
   2187       default_field%type = -1
   2188       default_field%natt = -1
   2189       default_field%ndim = -1
   2190       default_field%checksum = 0
   2191 !largest possible 4-byte reals
   2192       default_field%min = -huge(1._4)

Page 91          Source Listing                  MPP_IO_INIT
2021-06-01 08:53                                 ../mpp/include/mpp_io_misc.inc

   2193       default_field%max =  huge(1._4)
   2194       default_field%missing = MPP_FILL_DOUBLE ! now using netcdf:NF_FILL_DOUBLE instead of -1e36
   2195       default_field%fill = MPP_FILL_DOUBLE ! now using netcdf:NF_FILL_DOUBLE instead of -1e36
   2196       default_field%scale = 1.0
   2197       default_field%add = 0.0
   2198       default_field%pack = 1
   2199       default_field%time_axis_index = -1 !this value will never match any index
   2200 ! Initialize default axis
   2201       default_axis%name = 'noname'
   2202       default_axis%units = 'nounits'
   2203       default_axis%longname = 'noname'
   2204       default_axis%cartesian = 'none'
   2205       default_axis%compressed = 'unspecified'
   2206       default_axis%calendar = 'unspecified'
   2207       default_axis%sense = 0
   2208       default_axis%len = -1
   2209       default_axis%id = -1
   2210       default_axis%did = -1
   2211       default_axis%type = -1
   2212       default_axis%natt = -1
   2213 ! Initialize default attribute
   2214       default_att%name = 'noname'
   2215       default_att%type = -1
   2216       default_att%len = -1
   2217       default_att%catt = 'none'
   2218 
   2219 !up to MAXUNITS fortran units and MAXUNITS netCDF units are supported
   2220 !file attributes (opened, format, access, threading, fileset) are saved against the unit number
   2221 !external handles to netCDF units are saved from maxunits+1:2*maxunits
   2222       allocate( mpp_file(NULLUNIT:2*maxunits) ) !starts at NULLUNIT=-1, used by non-participant PEs in single-threaded I/O
   2223       mpp_file(:)%name   = ' '
   2224       mpp_file(:)%action    = -1
   2225       mpp_file(:)%format    = -1
   2226       mpp_file(:)%threading = -1
   2227       mpp_file(:)%fileset   = -1
   2228       mpp_file(:)%record    = -1
   2229       mpp_file(:)%ncid      = -1
   2230       mpp_file(:)%opened = .FALSE.
   2231       mpp_file(:)%initialized = .FALSE.
   2232       mpp_file(:)%write_on_this_pe = .FALSE.
   2233       mpp_file(:)%io_domain_exist = .FALSE.
   2234       mpp_file(:)%time_level = 0
   2235       mpp_file(:)%time = NULLTIME
   2236       mpp_file(:)%id = -1
   2237       mpp_file(:)%valid = .FALSE.
   2238       mpp_file(:)%ndim = -1
   2239       mpp_file(:)%nvar = -1
   2240 !NULLUNIT "file" is always single-threaded, open and initialized (to pass checks in mpp_write)
   2241       mpp_file(NULLUNIT)%threading = MPP_SINGLE
   2242       mpp_file(NULLUNIT)%opened = .TRUE.
   2243       mpp_file(NULLUNIT)%valid  = .TRUE.
   2244       mpp_file(NULLUNIT)%initialized = .TRUE.
   2245 !declare the stdunits to be open
   2246       mpp_file(outunit)%opened = .TRUE.
   2247       mpp_file(logunit)%opened = .TRUE.
   2248       inunit  = stdin()  ; mpp_file(inunit)%opened  = .TRUE.
   2249       errunit = stderr() ; mpp_file(errunit)%opened = .TRUE.

Page 92          Source Listing                  MPP_IO_INIT
2021-06-01 08:53                                 ../mpp/include/mpp_io_misc.inc

   2250 
   2251       if( pe.EQ.mpp_root_pe() )then
   2252           iunit = stdlog()  ! PGI compiler does not like stdlog() doing I/O within write call
   2253           write( iunit,'(/a)' )'MPP_IO module '//trim(version)
   2254 
   2255           text = NF_INQ_LIBVERS()
   2256           write( iunit,'(/a)' )'Using netCDF library version '//trim(text)
   2257 
   2258       endif
   2259 
   2260       call mpp_io_set_stack_size(131072) ! default initial value
   2261       call mpp_sync()
   2262       if( io_clocks_on )then
   2263           mpp_read_clock  = mpp_clock_id( 'mpp_read')
   2264           mpp_write_clock  = mpp_clock_id( 'mpp_write')
   2265           mpp_open_clock  = mpp_clock_id( 'mpp_open')
   2266           mpp_close_clock  = mpp_clock_id( 'mpp_close')
   2267       endif
   2268       module_is_initialized = .TRUE.
   2269       return
   2270     end subroutine mpp_io_init


ENTRY POINTS

  Name                                  
                                        
 mpp_io_mod_mp_mpp_io_init_             

Page 93          Source Listing                  MPP_IO_INIT
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_misc.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DEBUG                      Local  2148     L(4)            4           scalar                    1047,2148,2149,2896,2904,2909,7132
                                                                                                  ,7170,7575,7613                   
 DEFAULT_FIELD              Local  2183     FIELDTYPE       1096        scalar   SAVE             375,2183,2184,2185,2186,2187,2188,
                                                                                                  2189,2190,2192,2193,2194,2195,2196
                                                                                                  ,2197,2198,2199,4170,4262,4401,449
                                                                                                  3,5218,8657,8922,8936,8944,8951,89
                                                                                                  59,8967,8977,8979,10592,10771,1095
                                                                                                  0,11133,11312,11491               
 DEFLATE                    Local  2171     I(4)            4           scalar                    1064,2171,2172,2173,6700,6701     
 DEFLATE_LEVEL              Local  2171     I(4)            4           scalar                    1065,1069,2171,2173,6701          
 DOUBLEDATA                 Local  2133     R(8)            8           scalar                    2133,2179                         
 ERRUNIT                    Local  2131     I(4)            4           scalar                    2249                              
 FLAGS                      Dummy  2128     I(4)            4           scalar   ARG,IN           2140,2143,2147,2148,2149          
 HUGE                       Func   2192                                 scalar                    2192,2193                         
 INPUT_NML_FILE             Local  2157     CHAR                  1     1        ALC,TGT,PRIV     336,2157                          
 INUNIT                     Local  2131     I(4)            4           scalar                    2248                              
 IO_STATUS                  Local  2130     I(4)            4           scalar                    2157,2161                         
 IUNIT                      Local  2130     I(4)            4           scalar                    2252,2253,2256                    
 LOGUNIT                    Local  2131     I(4)            4           scalar                    2166,2168,2247                    
 MAXUNIT                    Dummy  2128     I(4)            4           scalar   ARG,IN           2146                              
 MPP_CLOCK_ID               Func   2263     I(4)            4           scalar   PRIV             334,2263,2264,2265,2266           
 MPP_CLOSE_CLOCK            Local  2266     I(4)            4           scalar                    1056,2266,3059,3062,3185          
 MPP_DEBUG                  Param  2148     I(4)            4           scalar   PRIV             329,2148                          
 MPP_DOMAINS_INIT           Subr   2143                                          PRIV             338,2143                          
 MPP_FILL_DOUBLE            Param  2194     R(8)            8           scalar   PRIV             346,2194,2195,4175,4267,4406,4498,
                                                                                                  10600,10779,10958,11141,11320,1149
                                                                                                  9                                 
 MPP_INIT                   Subr   2140                                          PRIV             334,2140                          
 MPP_IO_INIT                Subr   2128                                                                                             
 MPP_IO_NML                 Local  2157                                 scalar                    2157,2167,2168                    
 MPP_IO_SET_STACK_SIZE      Subr   2260                                                           381,2260,3330,3724,7058,7501      
 MPP_OPEN_CLOCK             Local  2265     I(4)            4           scalar                    1056,2265,2601,2675,2822,2977,3031
 MPP_READ_CLOCK             Local  2263     I(4)            4           scalar                    1055,2263,3553,3654,3947,4048,4127
                                                                                                  ,4202,4221,4294,4358,4433,4452,452
                                                                                                  5,10497,10638,10676,10817,10855,10
                                                                                                  996,11038,11179,11217,11358,11396,
                                                                                                  11537                             
 MPP_SET_UNIT_RANGE         Subr   2153                                                           379,2153                          
 MPP_SINGLE                 Param  2241     I(4)            4           scalar                    328,367,2241,2616,2620,2643,2648,2
                                                                                                  652,2788,2789,2845,2852,3493,3612,
                                                                                                  3887,4006,4136,4140,4229,4233,4367
                                                                                                  ,4371,4460,4464,4942,7177,7248,736
                                                                                                  3,7620,7691,7806,10521,10537,10700
                                                                                                  ,10716,10879,10895,11062,11078,112
                                                                                                  41,11257,11420,11436              
 MPP_SYNC                   Subr   2261                                          PRIV             334,2261,2302                     
 MPP_VERBOSE                Param  2149     I(4)            4           scalar   PRIV             329,2149                          
 MPP_WRITE_CLOCK            Local  2264     I(4)            4           scalar                    1055,2264,7224,7315,7340,7430,7667
                                                                                                  ,7758,7783,7873,7967,8023,8116,817
                                                                                                  2,8214,8239,8649,8652,8684,9181,92
                                                                                                  70,9316,9429,9477,9598,9647,9785,9

Page 94          Source Listing                  MPP_IO_INIT
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_misc.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  828,9917,9963,10076,10124,10245,10
                                                                                                  294,10432                         
 NF_INQ_LIBVERS             Func   2255     CHAR            80          scalar   PRIV             2255                              
 NPES                       Local  2142     I(4)            4           scalar                    2142,2617,3000,3001,3007,3008,3009
                                                                                                  ,3494,3612,3888,4006,7179,7248,736
                                                                                                  3,7394,7622,7691,7806,7837        
 NULLTIME                   Param  2235     R(8)            8           scalar   PRIV             329,2235,3167,7088,7531           
 NULLUNIT                   Param  2222     I(4)            4           scalar   PRIV             329,2222,2241,2242,2243,2244,2674,
                                                                                                  3061                              
 OPENED                     Local  2132     L(4)            4           scalar                                                      
 OUTUNIT                    Local  2131     I(4)            4           scalar                    2166,2167,2246                    
 PACK_SIZE                  Local  2179     I(4)            4           scalar                    2179,2180,6341,6352               
 PRESENT                    Func   2146                                 scalar                    2146,2147                         
 R8_KIND                    Param  2133     I(4)            4           scalar   PRIV             466,473,1071,2133,3315,3325,3421,3
                                                                                                  528,3530,3542,3545,3546,3664,3666,
                                                                                                  3719,4101,4104,4116,4210,4699,4715
                                                                                                  ,4730,4745,4760,4762,4891,4910,504
                                                                                                  6,6849,6857,6859,6868,6870,6879,68
                                                                                                  81,6891,6893,6905,6907,7042,7043,7
                                                                                                  047,7136,7192,7193,7195,7197,7210,
                                                                                                  7211,7213,7217,7325,7326,7328,7332
                                                                                                  ,7490,7579,7913,7915,7916,7918,793
                                                                                                  0,7932,7933,7935,7947,7951,7952,79
                                                                                                  55,7956,7957,7959,7960,8275,8276,8
                                                                                                  315,8316,8355,8356,8395,8396,8435,
                                                                                                  8436,9162,9165,9166,9169,9175,9176
                                                                                                  ,9290,9293,9294,9297,9303,9306,930
                                                                                                  7,9449,9452,9453,9456,9463,9466,94
                                                                                                  67,9618,9621,9622,9625,9635,9638,9
                                                                                                  639,10480,10659,10838             
 REALARRAY                  Local  2134     R(8)            8     1     4                         2179                              
 SIZE                       Func   2179                                 scalar                    2179                              
 STDERR                     Func   2249     I(4)            4           scalar   PRIV             332,2249,3061,7226,7339,7669,7782 
 STDIN                      Func   2248     I(4)            4           scalar   PRIV             332,2248                          
 STDLOG                     Func   2166     I(4)            4           scalar   PRIV             332,2166,2252                     
 STDOUT                     Func   2166     I(4)            4           scalar   PRIV             332,2166                          
 TEXT                       Local  2255     CHAR            256         scalar                    2255,2256,2715,2718,2739,2745,2747
                                                                                                  ,2754,2758,2765,2771,2773,2780,278
                                                                                                  4,2795,2797,2800,5122,5124,5128,51
                                                                                                  30,5140,5142,5146,5148,5160,5162,5
                                                                                                  166,5168,5178,5180,5184,5186,5244,
                                                                                                  5246,5250,5252,5261,5263,5267,5269
                                                                                                  ,5278,5280,5284,5286,5299,5301,530
                                                                                                  7,5309,5323,5325,5371,5373,5377,53
                                                                                                  79,5391,5394,5398,5400,5412,5415,5
                                                                                                  419,5422,5434,5437,5441,5444,5551,
                                                                                                  5553,5563,5565,5575,5577,5677,5679
                                                                                                  ,5683,5685,5696,5698,5702,5705,571
                                                                                                  7,5720,5724,5727,5739,5741,5745,57
                                                                                                  48,6110,6111,6366,6367,6368,6373,6
                                                                                                  378,6711,6712,6713,6714,6811,6813,
                                                                                                  6815,6821,6824,6826,8925,8926,8927
                                                                                                  ,8928                             
 TRANSFER                   Func   2179                                 scalar                    2179                              
 TRIM                       Func   2253                                 scalar                    2253,2256                         

Page 95          Source Listing                  MPP_IO_INIT
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_misc.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 UNIT_NML                   Local  2130     I(4)            4           scalar                                                      
 VERBOSE                    Local  2149     L(4)            4           scalar                    1046,2149,2801,2907,2913,2927,2936
                                                                                                  ,2963,2967,3453,3517,3847,3911,494
                                                                                                  8,4969,5114,5134,5152,5173,5191,53
                                                                                                  62,5384,5405,5427,5449,5671,5690,5
                                                                                                  711,5733,5754,6425,6496,6559,6791,
                                                                                                  6827,7084,7098,7527,7541,8834,8982
 VERSION                    Param  2253     CHAR            7           scalar                    2253                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AXISTYPE.DID               I(4)            4     1332           scalar   PRIV             2210,2920,2922,5234,6339,6342,6344 
                                                                                           ,6350,6353,6355,6364,6426,6475,647 
                                                                                           7,6497,6542,6544,6561,6676,6714,87 
                                                                                           80,8782,8785,8788,8790,8793,8798,8 
                                                                                           835,8894,8928                      
 AXISTYPE.NATT              I(4)            4     1340           scalar   PRIV             2212,3097,5236,5509,6383,6385,6393 
                                                                                           ,6398,6402,6409,6412,6419,6423,648 
                                                                                           4,6486,6490,6494,6552,6556,8819    
 FIELDTYPE.FILL             R(8)            8     792            scalar   PRIV             2195,4175,4181,4184,4267,4273,4276 
                                                                                           ,4406,4412,4415,4498,4504,4507,577 
                                                                                           3,6658,6664,6757,8967,8971,9105,91 
                                                                                           10,10600,10614,10617,10779,10793,1 
                                                                                           0796,10958,10972,10975,11141,11155 
                                                                                           ,11158,11320,11334,11337,11499,115 
                                                                                           13,11516                           
 FIELDTYPE.PACK             I(4)            4     816            scalar   PRIV             2198,5622,5624,5626,5628,5630,5777 
                                                                                           ,6670,6671,6679,6723,6731,6738,674 
                                                                                           7,6756,6758,6771,6772,7142,7145,75 
                                                                                           85,7588,8675,8869,8870,8897,8922,8 
                                                                                           937,8938,8942,8945,8946,8949,8952, 
                                                                                           8953,8956,8960,8961,8964,8968,8969 
                                                                                           ,8972,8975,8976,9114,9115          
 FIELDTYPE.TIME_AXIS_INDEX  I(4)            4     992            scalar   PRIV             2199,3486,3880,5644,6639,6648,7128 
                                                                                           ,7571,8885,9086,9095               
 FILETYPE.ACTION            I(4)            4     256            scalar   PRIV             2224,2985,3154,6149,6194,6231,7071 
                                                                                           ,7514                              
 FILETYPE.FILESET           I(4)            4     272            scalar   PRIV             2227,2819,3071,3079,3158,3493,3887 
                                                                                           ,6323,6421,7177,7620,8775,8804,883 
                                                                                           0                                  
 FILETYPE.FORMAT            I(4)            4     260            scalar   PRIV             2225,2358,2929,2938,2986,3081,3155 
                                                                                           ,3445,3839,4950,5053,6053,6107,633 
                                                                                           4,6474,6541,6672,6819,7067,7101,71 
                                                                                           62,7510,7544,7605,8715,8771,8890   
 FILETYPE.ID                I(4)            4     328            scalar   PRIV             2236,2924,2928,2937,3163,3454,3848 
                                                                                           ,4948,5069,5238,6348,6358,6376,637 
                                                                                           9,7099,7137,7139,7542,7580,7582,87 
                                                                                           92,8811,8814                       
 FILETYPE.INITIALIZED       L(4)            4     288            scalar   PRIV             2231,2244,2356,3162,3444,3838,4944 
                                                                                           ,5807,6050,6104,6309,6457,6529,662 
                                                                                           0,6625,7063,7083,7506,7526,8706,87 
                                                                                           11,8753,8758,8860,8865             

Page 96          Source Listing                  MPP_IO_INIT
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_misc.inc

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FILETYPE.IO_DOMAIN_EXIST   L(4)            4     324            scalar   PRIV             2233,2699,3169,3507,3901,6280,7277 
                                                                                           ,7392,7720,7835                    
 FILETYPE.RECORD            I(4)            4     276            scalar   PRIV             2228,2835,3159,6826,6827,6828,7169 
                                                                                           ,7170,7179,7181,7612,7613,7622,762 
                                                                                           4                                  
 FILETYPE.THREADING         I(4)            4     268            scalar   PRIV             2226,2241,2818,3157,3612,4006,4942 
                                                                                           ,6421,7248,7363,7691,7806,8830     
 FILETYPE.TIME              R(8)            8     304            scalar   PRIV             2235,3167,7093,7095,7099,7536,7538 
                                                                                           ,7542                              
 FILETYPE.VALID             L(4)            4     312            scalar   PRIV             2237,2243,2680,2696,3168,4130,4226 
                                                                                           ,4361,4457,7228,7343,7671,7786,797 
                                                                                           0,8119,8217,9192,9327,9488,9658,98 
                                                                                           39,9974,10135,10305,10508,10687,10 
                                                                                           866,11049,11228,11407              
 FILETYPE.WRITE_ON_THIS_PE  L(4)            4     316            scalar   PRIV             2232,2354,2697,3170,6045,6100,6166 
                                                                                           ,6183,6220,6304,6452,6524,6614,706 
                                                                                           1,7252,7258,7272,7280,7286,7300,73 
                                                                                           67,7373,7387,7395,7401,7415,7504,7 
                                                                                           695,7701,7715,7723,7729,7743,7810, 
                                                                                           7816,7830,7838,7844,7858,7987,7992 
                                                                                           ,8005,8008,8136,8141,8154,8157,822 
                                                                                           7,8232,8651,8704,8748,8855,9219,92 
                                                                                           25,9354,9360,9515,9521,9685,9691,9 
                                                                                           866,9872,10001,10007,10162,10168,1 
                                                                                           0332,10338                         

Page 97          Source Listing                  MPP_IO_INIT
2021-06-01 08:53                                 ../mpp/include/mpp_io_misc.inc

   2271 
   2272 
   2273 ! <SUBROUTINE NAME="mpp_io_exit">
   2274 !   <OVERVIEW>
   2275 !    Exit <TT>mpp_io_mod</TT>.
   2276 !   </OVERVIEW>
   2277 !   <DESCRIPTION>
   2278 !    It is recommended, though not at present required, that you call this
   2279 !    near the end of a run. This will close all open files that were opened
   2280 !    with <LINK SRC="#mpp_open"><TT>mpp_open</TT></LINK>. Files opened otherwise
   2281 !    are not affected.
   2282 !   </DESCRIPTION>
   2283 !   <TEMPLATE>
   2284 !    call mpp_io_exit()
   2285 !   </TEMPLATE>
   2286 ! </SUBROUTINE>
   2287 
   2288     subroutine mpp_io_exit(string)
   2289       character(len=*), optional :: string
   2290       integer :: unit,istat
   2291       logical :: dosync
   2292 
   2293       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_IO_EXIT: must first call mpp_io_init.' )
   2294       dosync = .TRUE.
   2295       if( PRESENT(string) )then
   2296           dosync = .NOT.( trim(string).EQ.'NOSYNC' )
   2297       end if
   2298 !close all open fortran units
   2299       do unit = unit_begin,unit_end
   2300          if( mpp_file(unit)%opened )FLUSH(unit)
   2301       end do
   2302       if( dosync )call mpp_sync()
   2303       do unit = unit_begin,unit_end
   2304          if( mpp_file(unit)%opened )close(unit)
   2305       end do
   2306 
   2307 !close all open netCDF units
   2308       do unit = maxunits+1,2*maxunits
   2309          if( mpp_file(unit)%opened )error = NF_CLOSE(mpp_file(unit)%ncid)
   2310       end do
   2311 
   2312 
   2313 !      call mpp_max(mpp_io_stack_hwm)
   2314 
   2315       if( pe.EQ.mpp_root_pe() )then
   2316 !          write( stdout,'(/a)' )'Exiting MPP_IO module...'
   2317 !          write( stdout,* )'MPP_IO_STACK high water mark=', mpp_io_stack_hwm
   2318       end if
   2319       deallocate(mpp_file)
   2320       module_is_initialized = .FALSE.
   2321       return
   2322     end subroutine mpp_io_exit

Page 98          Source Listing                  MPP_IO_EXIT
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_misc.inc



ENTRY POINTS

  Name                                  
                                        
 mpp_io_mod_mp_mpp_io_exit_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOSYNC                     Local  2291     L(4)            4           scalar                    2294,2296,2302                    
 ERROR                      Local  2309     I(4)            4           scalar                    2309,2360,2905,2906,2910,2911,2918
                                                                                                  ,2920,2921,2922,2923,2924,2925,293
                                                                                                  5,3083,3341,3342,3352,3353,3362,33
                                                                                                  63,3368,3369,3379,3380,3385,3386,3
                                                                                                  735,3736,3746,3747,3756,3757,3762,
                                                                                                  3763,3773,3774,3779,3780,4974,4976
                                                                                                  ,4978,6151,6153,6339,6340,6342,634
                                                                                                  4,6346,6350,6351,6353,6355,6357,64
                                                                                                  75,6476,6477,6478,6542,6543,6544,6
                                                                                                  545,6623,6681,6683,6685,6689,6693,
                                                                                                  6697,6701,6702,6858,6863,6866,6869
                                                                                                  ,6872,6875,6880,6883,6886,6892,689
                                                                                                  5,6898,6906,6909,6912,6920,6922,69
                                                                                                  27,6928,6932,6934,6936,7070,7073,7
                                                                                                  075,7078,7137,7139,7144,7146,7149,
                                                                                                  7151,7513,7516,7518,7521,7580,7582
                                                                                                  ,7587,7589,7592,7594              
 ISTAT                      Local  2290     I(4)            4           scalar                                                      
 MPP_IO_EXIT                Subr   2288                                                                                             
 NF_CLOSE                   Func   2309     I(4)            4           scalar   PRIV             2309,3083                         
 PRESENT                    Func   2295                                 scalar                    2295                              
 STRING                     Dummy  2288     CHAR                        scalar   ARG,INOUT        2295,2296                         
 TRIM                       Func   2296                                 scalar                    2296                              
 UNIT                       Local  2290     I(4)            4           scalar                    2299,2300,2303,2304,2308,2309     

Page 99          Source Listing                  MPP_IO_EXIT
2021-06-01 08:53                                 ../mpp/include/mpp_io_misc.inc

   2323 
   2324 
   2325     subroutine netcdf_err( err, file, axis, field, attr, string )
   2326       integer, intent(in) :: err
   2327       type(filetype), optional :: file
   2328       type(axistype), optional :: axis
   2329       type(fieldtype), optional :: field
   2330       type(atttype), optional :: attr
   2331       character(len=*), optional :: string
   2332       character(len=256) :: errmsg
   2333 
   2334 
   2335       if( err.EQ.NF_NOERR )return
   2336       errmsg = NF_STRERROR(err)
   2337       if( PRESENT(file) )errmsg = trim(errmsg)//' File='//file%name
   2338       if( PRESENT(axis) )errmsg = trim(errmsg)//' Axis='//axis%name
   2339       if( PRESENT(field) )errmsg = trim(errmsg)//' Field='//field%name
   2340       if( PRESENT(attr) )errmsg = trim(errmsg)//' Attribute='//attr%name
   2341       if( PRESENT(string) )errmsg = trim(errmsg)//string
   2342       call mpp_io_exit('NOSYNC')        !make sure you close all open files
   2343       call mpp_error( FATAL, 'NETCDF ERROR: '//trim(errmsg) )
   2344 
   2345       return
   2346     end subroutine netcdf_err


ENTRY POINTS

  Name                                 
                                       
 mpp_io_mod_mp_netcdf_err_             

Page 100         Source Listing                  NETCDF_ERR
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_misc.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTR                       Dummy  2325     ATTTYPE         1488        scalar   ARG,INOUT        2340                              
 AXIS                       Dummy  2325     AXISTYPE        1424        scalar   ARG,INOUT        2338                              
 ERR                        Dummy  2325     I(4)            4           scalar   ARG,IN           2335,2336                         
 ERRMSG                     Local  2332     CHAR            256         scalar                    2336,2337,2338,2339,2340,2341,2343
 FIELD                      Dummy  2325     FIELDTYPE       1096        scalar   ARG,INOUT        2339                              
 FILE                       Dummy  2325     FILETYPE        656         scalar   ARG,INOUT        2337                              
 FILETYPE                   Type   2327                     656         scalar                    372,488,1075,2327                 
 MPP_IO_EXIT                Subr   2342                                                           390,2342                          
 NETCDF_ERR                 Subr   2325                                                                                             
 NF_NOERR                   Param  2335     I(4)            4           scalar   PRIV             2335,2921                         
 NF_STRERROR                Func   2336     CHAR            80          scalar   PRIV             2336                              
 PRESENT                    Func   2337                                 scalar                    2337,2338,2339,2340,2341          
 STRING                     Dummy  2325     CHAR                        scalar   ARG,INOUT        2341                              
 TRIM                       Func   2337                                 scalar                    2337,2338,2339,2340,2341,2343     

Page 101         Source Listing                  NETCDF_ERR
2021-06-01 08:53                                 ../mpp/include/mpp_io_misc.inc

   2347 
   2348 
   2349     subroutine mpp_flush(unit)
   2350 !flush the output on a unit, syncing with disk
   2351       integer, intent(in) :: unit
   2352 
   2353       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_FLUSH: must first call mpp_io_init.' )
   2354       if( .NOT.mpp_file(unit)%write_on_this_pe) return
   2355       if( .NOT.mpp_file(unit)%opened ) call mpp_error( FATAL, 'MPP_FLUSH: invalid unit number.' )
   2356       if( .NOT.mpp_file(unit)%initialized )call mpp_error( FATAL, 'MPP_FLUSH: cannot flush a file during writing of metadata
   2356 .' )
   2357 
   2358       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   2359 
   2360           error = NF_SYNC(mpp_file(unit)%ncid); call netcdf_err( error, mpp_file(unit) )
   2361 
   2362       else
   2363           FLUSH(unit)
   2364       end if
   2365       return
   2366     end subroutine mpp_flush


ENTRY POINTS

  Name                                
                                      
 mpp_io_mod_mp_mpp_flush_             

Page 102         Source Listing                  MPP_FLUSH
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_misc.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_FLUSH                  Subr   2349                                                                                             
 MPP_NETCDF                 Param  2358     I(4)            4           scalar                    327,367,2358,2647,2678,2717,2827,2
                                                                                                  846,2857,2991,3081,3445,3839,4950,
                                                                                                  5053,6053,6107,6334,6474,6541,6672
                                                                                                  ,7067,7101,7510,7544,8715,8771,889
                                                                                                  0                                 
 NETCDF_ERR                 Subr   2360                                                           390,2360,2906,2911,2918,2923,2925,
                                                                                                  2935,3083,3342,3353,3363,3369,3380
                                                                                                  ,3386,3736,3747,3757,3763,3774,378
                                                                                                  0,4978,5056,5068,5070,5096,5097,51
                                                                                                  13,5133,5151,5171,5189,5200,5207,5
                                                                                                  225,5232,5254,5271,5288,5315,5331,
                                                                                                  5349,5351,5361,5382,5403,5425,5447
                                                                                                  ,5533,5556,5568,5580,5603,5659,566
                                                                                                  1,5670,5688,5708,5730,5751,6169,61
                                                                                                  85,6189,6192,6201,6203,6205,6222,6
                                                                                                  226,6229,6238,6240,6242,6340,6346,
                                                                                                  6351,6357,6476,6478,6543,6545,6697
                                                                                                  ,6702,6866,6875,6886,6898,6912,692
                                                                                                  2,6928,6936,7070,7078,7151,7513,75
                                                                                                  21,7594,8784,8786,8789,8791       
 NF_SYNC                    Func   2360     I(4)            4           scalar   PRIV             2360                              
 UNIT                       Dummy  2349     I(4)            4           scalar   ARG,IN           2354,2355,2356,2358,2360,2363     

Page 103         Source Listing                  MPP_FLUSH
2021-06-01 08:53                                 ../mpp/include/mpp_io_misc.inc

   2367 
   2368 !> Return the maximum number of MPP file units available.
   2369 !!
   2370 !! maxunits is a mpp_io_mod module variable and defines the maximum number
   2371 !! of Fortran file units that can be open simultaneously.  mpp_get_maxunits
   2372 !! simply returns this number.
   2373    integer function mpp_get_maxunits()
   2374       mpp_get_maxunits = maxunits
   2375    end function mpp_get_maxunits


ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_get_maxunits_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_GET_MAXUNITS           Func   2373     I(4)            4           scalar                                                      

Page 104         Source Listing                  MPP_GET_MAXUNITS
2021-06-01 08:53                                 ../mpp/include/mpp_io_misc.inc

   2376 
   2377     logical function do_cf_compliance()
   2378       do_cf_compliance = cf_compliance
   2379     end function do_cf_compliance


ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_do_cf_compliance_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CF_COMPLIANCE              Local  2378     L(4)            4           scalar                    1066,1069,2378,6384,6388,6396,6485
                                                                                                  ,6555,6718,6931,8932              
 DO_CF_COMPLIANCE           Func   2377     L(4)            4           scalar                                                      

Page 105         Source Listing                  DO_CF_COMPLIANCE
2021-06-01 08:53                                 ../mpp/include/mpp_io_misc.inc

   2380 
   2381 # 1111 "mpp_io.F90" 2 
   2382 # 1 "../mpp/include/mpp_io_connect.inc" 1 
   2383 ! -*-f90-*-
   2384 
   2385 !***********************************************************************
   2386 !*                   GNU Lesser General Public License
   2387 !*
   2388 !* This file is part of the GFDL Flexible Modeling System (FMS).
   2389 !*
   2390 !* FMS is free software: you can redistribute it and/or modify it under
   2391 !* the terms of the GNU Lesser General Public License as published by
   2392 !* the Free Software Foundation, either version 3 of the License, or (at
   2393 !* your option) any later version.
   2394 !*
   2395 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   2396 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   2397 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   2398 !* for more details.
   2399 !*
   2400 !* You should have received a copy of the GNU Lesser General Public
   2401 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   2402 !***********************************************************************
   2403 
   2404 ! <SUBROUTINE NAME="mpp_open">
   2405 
   2406 !   <OVERVIEW>
   2407 !     Open a file for parallel I/O.
   2408 !   </OVERVIEW>
   2409 !   <DESCRIPTION>
   2410 !     Open a file for parallel I/O.
   2411 !   </DESCRIPTION>
   2412 !   <TEMPLATE>
   2413 !     call mpp_open( unit, file, action, form, access, threading, fileset,
   2414 !             iospec, nohdrs, recl, pelist )
   2415 !   </TEMPLATE>
   2416 
   2417 !   <OUT NAME="unit" TYPE="integer">
   2418 !     unit is intent(OUT): always _returned_by_ mpp_open().
   2419 !   </OUT>
   2420 !   <IN NAME="file" TYPE="character(len=*)">
   2421 !     file is the filename: REQUIRED
   2422 !    we append .nc to filename if it is a netCDF file
   2423 !    we append .<pppp> to filename if fileset is private (pppp is PE number)
   2424 !   </IN>
   2425 !   <IN NAME="action" TYPE="integer">
   2426 !     action is one of MPP_RDONLY, MPP_APPEND, MPP_WRONLY or MPP_OVERWR.
   2427 !   </IN>
   2428 !   <IN NAME="form" TYPE="integer">
   2429 !     form is one of MPP_ASCII:  formatted read/write
   2430 !                   MPP_NATIVE: unformatted read/write with no conversion
   2431 !                   MPP_IEEE32: unformatted read/write with conversion to IEEE32
   2432 !                   MPP_NETCDF: unformatted read/write with conversion to netCDF
   2433 !   </IN>
   2434 !   <IN NAME="access" TYPE="integer">
   2435 !     access is one of MPP_SEQUENTIAL or MPP_DIRECT (ignored for netCDF).
   2436 !     RECL argument is REQUIRED for direct access IO.

Page 106         Source Listing                  DO_CF_COMPLIANCE
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   2437 !   </IN>
   2438 !   <IN NAME="threading" TYPE="integer">
   2439 !     threading is one of MPP_SINGLE or MPP_MULTI
   2440 !      single-threaded IO in a multi-PE run is done by PE0.
   2441 !   </IN>
   2442 !   <IN NAME="fileset" TYPE="integer">
   2443 !     fileset is one of MPP_MULTI and MPP_SINGLE
   2444 !     fileset is only used for multi-threaded I/O
   2445 !     if all I/O PEs in <pelist> use a single fileset, they write to the same file
   2446 !     if all I/O PEs in <pelist> use a multi  fileset, they each write an independent file
   2447 !   </IN>
   2448 !   <IN NAME="pelist" TYPE="integer">
   2449 !     pelist is the list of I/O PEs (currently ALL).
   2450 !   </IN>
   2451 !   <IN NAME="recl" TYPE="integer">
   2452 !     recl is the record length in bytes.
   2453 !   </IN>
   2454 !   <IN NAME="iospec" TYPE="character(len=*)">
   2455 !     iospec is deprecated, but included for interface uniformity reasons.
   2456 !   </IN>
   2457 !   <IN NAME="nohdrs" TYPE="logical">
   2458 !     nohdrs has no effect when action=MPP_RDONLY|MPP_APPEND or when form=MPP_NETCDF
   2459 !   </IN>
   2460 !   <NOTE>
   2461 !     The integer parameters to be passed as flags (<TT>MPP_RDONLY</TT>,
   2462 !   etc) are all made available by use association. The <TT>unit</TT>
   2463 !   returned by <TT>mpp_open</TT> is guaranteed unique. For non-netCDF I/O
   2464 !   it is a valid fortran unit number and fortran I/O can be directly called
   2465 !   on the file.
   2466 !
   2467 !   <TT>MPP_WRONLY</TT> will guarantee that existing files named
   2468 !   <TT>file</TT> will not be clobbered. <TT>MPP_OVERWR</TT>
   2469 !   allows overwriting of files.
   2470 !
   2471 !   Files opened read-only by many processors will give each processor
   2472 !   an independent pointer into the file, i.e:
   2473 !
   2474 !   <PRE>
   2475 !      namelist / nml / ...
   2476 !   ...
   2477 !      call mpp_open( unit, 'input.nml', action=MPP_RDONLY )
   2478 !      read(unit,nml)
   2479 !   </PRE>
   2480 !
   2481 !   will result in each PE independently reading the same namelist.
   2482 !
   2483 !   Metadata identifying the file and the version of
   2484 !   <TT>mpp_io_mod</TT> are written to a file that is opened
   2485 !   <TT>MPP_WRONLY</TT> or <TT>MPP_OVERWR</TT>. If this is a
   2486 !   multi-file set, and an additional global attribute
   2487 !   <TT>NumFilesInSet</TT> is written to be used by post-processing
   2488 !   software.
   2489 !
   2490 !   If <TT>nohdrs=.TRUE.</TT> all calls to write attributes will
   2491 !   return successfully <I>without</I> performing any writes to the
   2492 !   file. The default is <TT>.FALSE.</TT>.
   2493 !

Page 107         Source Listing                  DO_CF_COMPLIANCE
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   2494 !   For netCDF files, headers are always written even if
   2495 !   <TT>nohdrs=.TRUE.</TT>
   2496 ! </SUBROUTINE>
   2497 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   2498 !                                                                            !
   2499 !           OPENING AND CLOSING FILES: mpp_open() and mpp_close()            !
   2500 !                                                                            !
   2501 ! mpp_open( unit, file, action, form, access, threading, &                   !
   2502 !           fileset, iospec, nohdrs, recl, pelist )                          !
   2503 !      integer, intent(out) :: unit                                          !
   2504 !      character(len=*), intent(in) :: file                                  !
   2505 !      integer, intent(in), optional :: action, form, access, threading,     !
   2506 !                                       fileset, recl                        !
   2507 !      character(len=*), intent(in), optional :: iospec                      !
   2508 !      logical, intent(in), optional :: nohdrs                               !
   2509 !      integer, optional, intent(in) :: pelist(:) !default ALL               !
   2510 !                                                                            !
   2511 !  unit is intent(OUT): always _returned_by_ mpp_open()                      !
   2512 !  file is the filename: REQUIRED                                            !
   2513 !    we append .nc to filename if it is a netCDF file                        !
   2514 !    we append .<pppp> to filename if fileset is private (pppp is PE number) !
   2515 !  iospec is a deprecated option                                             !
   2516 !  if nohdrs is .TRUE. headers are not written on non-netCDF writes.         !
   2517 !  nohdrs has no effect when action=MPP_RDONLY|MPP_APPEND                    !
   2518 !                    or when form=MPP_NETCDF                                 !
   2519 ! FLAGS:                                                                     !
   2520 !    action is one of MPP_RDONLY, MPP_APPEND or MPP_WRONLY                   !
   2521 !    form is one of MPP_ASCII:  formatted read/write                         !
   2522 !                   MPP_NATIVE: unformatted read/write, no conversion        !
   2523 !                   MPP_IEEE32: unformatted read/write, conversion to IEEE32 !
   2524 !                   MPP_NETCDF: unformatted read/write, conversion to netCDF !
   2525 !    access is one of MPP_SEQUENTIAL or MPP_DIRECT (ignored for netCDF)      !
   2526 !      RECL argument is REQUIRED for direct access IO                        !
   2527 !    threading is one of MPP_SINGLE or MPP_MULTI                             !
   2528 !      single-threaded IO in a multi-PE run is done by PE0                   !
   2529 !    fileset is one of MPP_MULTI and MPP_SINGLE                              !
   2530 !      fileset is only used for multi-threaded I/O                           !
   2531 !      if all I/O PEs in <pelist> use a single fileset,                      !
   2532 !              they write to the same file                                   !
   2533 !      if all I/O PEs in <pelist> use a multi  fileset,                      !
   2534 !              they each write an independent file                           !
   2535 !  recl is the record length in bytes                                        !
   2536 !  pelist is the list of I/O PEs (currently ALL)                             !
   2537 !                                                                            !
   2538 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   2539     subroutine mpp_open( unit, file, action, form, access, threading, &
   2540                          fileset, iospec, nohdrs, recl,               &
   2541                          iostat, is_root_pe, domain, &
   2542 !----------
   2543 !ug support
   2544                          domain_ug)
   2545 !----------
   2546       integer,         intent(out)           :: unit
   2547       character(len=*), intent(in)           :: file
   2548       integer,          intent(in), optional :: action, form, access
   2549       integer,          intent(in), optional :: threading, fileset, recl
   2550       character(len=*), intent(in), optional :: iospec

Page 108         Source Listing                  MPP_OPEN
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   2551       logical,          intent(in), optional :: nohdrs
   2552       integer,         intent(out), optional :: iostat
   2553       logical,          intent(in), optional :: is_root_pe
   2554       type(domain2d),   intent(in), optional :: domain
   2555 !----------
   2556 !ug support
   2557       type(domainUG),target,intent(in),optional :: domain_ug
   2558 !----------
   2559       character(len=16)  :: act, acc, for, pos
   2560       character(len=128) :: mesg
   2561       character(len=256) :: text2
   2562       integer :: action_flag, form_flag, access_flag, threading_flag, fileset_flag, length
   2563       integer :: nfiles, tile_id(1), io_layout(2)
   2564       logical :: exists, on_root_pe, dist_file
   2565       logical :: write_on_this_pe, read_on_this_pe, io_domain_exist
   2566       integer :: ios, nc_pos     !position of .nc in file name
   2567       type(axistype) :: unlim    !used by netCDF with mpp_append
   2568 
   2569 !----------
   2570 !ug support
   2571       type(domain2d),pointer :: io_domain
   2572       type(domainUG),pointer :: io_domain_ug
   2573       integer(i4_kind)      :: io_layout_ug
   2574       integer(i4_kind)      :: tile_id_ug
   2575 !----------
   2576       integer*8                             :: lenp
   2577       integer                               :: comm
   2578       integer                               :: info, ierror
   2579       integer,dimension(:), allocatable     :: glist(:)
   2580       integer                               ::lena, lenb
   2581       character(len=12)                     ::ncblk
   2582       character(len=128)                    ::nc_name
   2583       integer                               ::f_size, f_stat
   2584       integer                               ::fsize, inital = 0
   2585       character(len=128)                    :: f_test
   2586 
   2587 !----------
   2588 !ug support
   2589 !Only allow one type of mpp domain.
   2590       if (present(domain) .and. present(domain_ug)) then
   2591           call mpp_error(FATAL, &
   2592                          "mpp_open: domain and domain_ug cannot both be" &
   2593                          //" present in the same mpp_open call.")
   2594       endif
   2595 
   2596 !Null initialize the unstructured I/O domain pointer.
   2597       io_domain => null()
   2598       io_domain_ug => null()
   2599 !----------
   2600 
   2601       call mpp_clock_begin(mpp_open_clock)
   2602       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_OPEN: must first call mpp_io_init.' )
   2603       on_root_pe = mpp_pe() == mpp_root_pe()
   2604       if(present(is_root_pe)) on_root_pe = is_root_pe
   2605 
   2606       dist_file = .false.
   2607 !set flags

Page 109         Source Listing                  MPP_OPEN
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   2608       action_flag = MPP_WRONLY        !default
   2609       if( PRESENT(action) )action_flag = action
   2610       form_flag = MPP_ASCII
   2611       if( PRESENT(form) )form_flag = form
   2612 # 233
   2613 
   2614       access_flag = MPP_SEQUENTIAL
   2615       if( PRESENT(access) )access_flag = access
   2616       threading_flag = MPP_SINGLE
   2617       if( npes.GT.1 .AND. PRESENT(threading) )threading_flag = threading
   2618       fileset_flag = MPP_MULTI
   2619       if( PRESENT(fileset) )fileset_flag = fileset
   2620       if( threading_flag.EQ.MPP_SINGLE )fileset_flag = MPP_SINGLE
   2621 
   2622 !-- iospec presence warning
   2623       if( PRESENT(iospec) ) &
   2624        & call mpp_error( NOTE, 'MPP_OPEN: iospec option has been deprecated and will be removed at some future date')
   2625 
   2626 
   2627       io_domain_exist = .false.
   2628       if( PRESENT(domain) ) then
   2629          io_domain => mpp_get_io_domain(domain)
   2630          if(associated(io_domain)) io_domain_exist = .true.
   2631 
   2632 !----------
   2633 !ug support
   2634       elseif (present(domain_ug)) then
   2635           io_domain_ug => mpp_get_UG_io_domain(domain_ug)
   2636           io_domain_exist = .true.
   2637 !----------
   2638 
   2639       endif
   2640 
   2641       write_on_this_pe = .true.
   2642       read_on_this_pe = .true.
   2643       if( threading_flag.EQ.MPP_SINGLE .AND. .NOT.on_root_pe ) then
   2644          write_on_this_pe = .false.
   2645          read_on_this_pe = .false.
   2646       endif
   2647       if(form_flag == MPP_NETCDF .AND. action_flag .NE. MPP_RDONLY) then
   2648          if(fileset_flag .EQ.MPP_SINGLE .AND.  threading_flag.EQ.MPP_MULTI) then
   2649             call mpp_error(FATAL, "mpp_io_connect.inc(mpp_open): multiple thread and single "// &
   2650                 "file writing/appending is not supported for netCDF file")
   2651          endif
   2652          if( fileset_flag.EQ.MPP_SINGLE .AND. .NOT.on_root_pe ) then
   2653             write_on_this_pe = .false.
   2654             read_on_this_pe = .false.
   2655          endif
   2656       endif
   2657 
   2658       if( io_domain_exist) then
   2659 
   2660 !----------
   2661 !ug support
   2662           if (associated(io_domain)) then
   2663 ! in this case, only write out from the root_pe of io_domain.
   2664               write_on_this_pe = mpp_domain_is_tile_root_pe(io_domain)

Page 110         Source Listing                  MPP_OPEN
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   2665           elseif (associated(io_domain_ug)) then
   2666               write_on_this_pe = mpp_domain_UG_is_tile_root_pe(io_domain_ug)
   2667           endif
   2668 !----------
   2669 
   2670       endif
   2671       if( action_flag == MPP_RDONLY) write_on_this_pe = .false.
   2672 !get a unit number
   2673       if( .NOT. write_on_this_pe .AND. action_flag.NE.MPP_RDONLY .AND. .NOT. io_domain_exist)then
   2674             unit = NULLUNIT           !PEs not participating in IO from this mpp_open() will return this value for unit
   2675          call mpp_clock_end(mpp_open_clock)
   2676          return
   2677       end if
   2678       if( form_flag.EQ.MPP_NETCDF )then
   2679           do unit = maxunits+1,2*maxunits
   2680              if( .NOT.mpp_file(unit)%valid )exit
   2681           end do
   2682           if( unit.GT.2*maxunits ) then
   2683             write(mesg,*) 'all the units between ',maxunits+1,' and ',2*maxunits,' are used'
   2684             call mpp_error( FATAL, 'MPP_OPEN: too many open netCDF files.'//trim(mesg) )
   2685           endif
   2686       else
   2687           do unit = unit_begin, unit_end
   2688              inquire( unit,OPENED=mpp_file(unit)%opened )
   2689              if( .NOT.mpp_file(unit)%opened )exit
   2690           end do
   2691           if( unit.GT.unit_end ) then
   2692             write(mesg,*) 'all the units between ',unit_begin,' and ',unit_end,' are used'
   2693             call mpp_error( FATAL, 'MPP_OPEN: no available units.'//trim(mesg) )
   2694           endif
   2695       end if
   2696       mpp_file(unit)%valid            = .true.
   2697       mpp_file(unit)%write_on_this_pe = write_on_this_pe
   2698       mpp_file(unit)%read_on_this_pe  = read_on_this_pe
   2699       mpp_file(unit)%io_domain_exist  = io_domain_exist
   2700       if( PRESENT(domain) ) then
   2701          allocate(mpp_file(unit)%domain)
   2702          mpp_file(unit)%domain = domain
   2703 
   2704 !----------
   2705 !ug support
   2706       elseif (present(domain_ug)) then
   2707           mpp_file(unit)%domain_ug => domain_ug
   2708 !----------
   2709 
   2710       endif
   2711 
   2712 !get a filename
   2713       nc_pos = index(file,'.nc.')
   2714       dist_file = nc_pos>0  ! this is a distributed file ending with filename.nc.0???
   2715       text = file
   2716       length = len_trim(file)
   2717       if(form_flag.EQ.MPP_NETCDF.AND. file(length-2:length) /= '.nc' .AND. .NOT.dist_file) &
   2718          text = trim(file)//'.nc'
   2719 
   2720 !----------
   2721 !ug support

Page 111         Source Listing                  MPP_OPEN
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   2722 !HELP: Is there any way to retrieve the I/O layout for an unstructured grid?
   2723 !      I could not find a way, so I added it into mpp_domains.
   2724       if (present(domain)) then
   2725           io_layout = mpp_get_io_domain_layout(domain)
   2726       elseif (present(domain_ug)) then
   2727           io_layout_ug = mpp_get_io_domain_UG_layout(domain_ug)
   2728       endif
   2729 !----------
   2730 
   2731       if( io_domain_exist) then
   2732 
   2733 !----------
   2734 !ug support
   2735           if (present(domain) .and. io_layout(1)*io_layout(2) .gt. 1) then
   2736               fileset_flag = MPP_MULTI
   2737               threading_flag = MPP_MULTI
   2738               tile_id = mpp_get_tile_id(io_domain)
   2739               text2 = trim(text)
   2740               if (tile_id(1) .ge. 10000) then
   2741                   call mpp_error(FATAL, &
   2742                                  "mpp_open: tile_id should be less than" &
   2743                                  //" 10000 when io_domain exist")
   2744               endif
   2745               write(text,'(a,i4.4)') trim(text)//'.',tile_id(1)
   2746               if (action_flag .eq. MPP_RDONLY) then
   2747                   inquire(file=trim(text),EXIST=exists)
   2748                   if (.not. exists) then
   2749                       write(text2,'(a,i6.6)') trim(text2)//'.',tile_id(1)
   2750                       inquire(file=trim(text2),EXIST=exists)
   2751                       if (.not.exists) then
   2752                           call mpp_error(FATAL, &
   2753                                          "mpp_open: neither "// &
   2754                                          trim(text)//" nor "// &
   2755                                          trim(text2)//" exist and io" &
   2756                                          //" domain exist.")
   2757                       endif
   2758                       text = trim(text2)
   2759                   endif
   2760               endif
   2761           elseif (present(domain_ug) .and. io_layout_ug .gt. 1) then
   2762               fileset_flag = MPP_MULTI
   2763               threading_flag = MPP_MULTI
   2764               tile_id_ug = mpp_get_UG_domain_tile_id(io_domain_ug)
   2765               text2 = trim(text)
   2766               if (tile_id_ug .ge. 10000) then
   2767                   call mpp_error(FATAL, &
   2768                                  "mpp_open: tile_id should be less than" &
   2769                                  //" 10000 when io_domain exist")
   2770               endif
   2771               write(text,'(a,i4.4)') trim(text)//'.',tile_id_ug
   2772               if (action_flag .eq. MPP_RDONLY) then
   2773                   inquire(file=trim(text),EXIST=exists)
   2774                   if (.not. exists) then
   2775                       write(text2,'(a,i6.6)') trim(text2)//'.',tile_id_ug
   2776                       inquire(file=trim(text2),EXIST=exists)
   2777                       if (.not.exists) then
   2778                           call mpp_error(FATAL, &

Page 112         Source Listing                  MPP_OPEN
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   2779                                          "mpp_open: neither "// &
   2780                                          trim(text)//" nor "// &
   2781                                          trim(text2)//" exist and io" &
   2782                                          //" domain exist.")
   2783                       endif
   2784                       text = trim(text2)
   2785                   endif
   2786               endif
   2787           else
   2788               fileset_flag = MPP_SINGLE
   2789               threading_flag = MPP_SINGLE
   2790           endif
   2791 !----------
   2792 
   2793       else if( fileset_flag.EQ.MPP_MULTI ) then
   2794          if(mpp_npes() > 10000) then
   2795             write( text,'(a,i6.6)' )trim(text)//'.', pe-mpp_root_pe()
   2796          else
   2797             write( text,'(a,i4.4)' )trim(text)//'.', pe-mpp_root_pe()
   2798          endif
   2799       endif
   2800       mpp_file(unit)%name = text
   2801       if( verbose )print '(a,2i6,x,a,5i5)', 'MPP_OPEN: PE, unit, filename, action, format, access, threading, fileset=', &
   2802            pe, unit, trim(mpp_file(unit)%name), action_flag, form_flag, access_flag, threading_flag, fileset_flag
   2803 
   2804 !action: read, write, overwrite, append: act and pos are ignored by netCDF
   2805       if( action_flag.EQ.MPP_RDONLY )then
   2806           act = 'READ'
   2807           pos = 'REWIND'
   2808       else if( action_flag.EQ.MPP_WRONLY .OR. action_flag.EQ.MPP_OVERWR )then
   2809           act = 'WRITE'
   2810           pos = 'REWIND'
   2811       else if( action_flag.EQ.MPP_APPEND )then
   2812           act = 'WRITE'
   2813           pos = 'APPEND'
   2814       else
   2815           call mpp_error( FATAL, 'MPP_OPEN: action must be one of MPP_WRONLY, MPP_APPEND or MPP_RDONLY.' )
   2816       end if
   2817 
   2818       mpp_file(unit)%threading = threading_flag
   2819       mpp_file(unit)%fileset = fileset_flag
   2820 
   2821       if( .NOT. write_on_this_pe .AND. action_flag.NE.MPP_RDONLY ) then
   2822          call mpp_clock_end(mpp_open_clock)
   2823          return
   2824       endif
   2825 
   2826 !access: sequential or direct: ignored by netCDF
   2827       if( form_flag.NE.MPP_NETCDF )then
   2828           if( access_flag.EQ.MPP_SEQUENTIAL )then
   2829               acc = 'SEQUENTIAL'
   2830           else if( access_flag.EQ.MPP_DIRECT )then
   2831               acc = 'DIRECT'
   2832               if( form_flag.EQ.MPP_ASCII )call mpp_error( FATAL, 'MPP_OPEN: formatted direct access I/O is prohibited.' )
   2833               if( .NOT.PRESENT(recl) ) &
   2834                    call mpp_error( FATAL, 'MPP_OPEN: recl (record length in bytes) must be specified with access=MPP_DIRECT.
   2834 ' )

Page 113         Source Listing                  MPP_OPEN
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   2835               mpp_file(unit)%record = 1
   2836               records_per_pe = 1 !each PE writes 1 record per mpp_write
   2837           else
   2838               call mpp_error( FATAL, 'MPP_OPEN: access must be one of MPP_SEQUENTIAL or MPP_DIRECT.' )
   2839           end if
   2840       end if
   2841 
   2842 !threading: SINGLE or MULTI
   2843       if( threading_flag.EQ.MPP_MULTI )then
   2844 !fileset: MULTI or SINGLE (only for multi-threaded I/O
   2845           if( fileset_flag.EQ.MPP_SINGLE )then
   2846               if( form_flag.EQ.MPP_NETCDF .AND. act.EQ.'WRITE' ) &
   2847                    call mpp_error( FATAL, 'MPP_OPEN: netCDF currently does not support single-file multi-threaded output.' )
   2848 
   2849           else if( fileset_flag.NE.MPP_MULTI )then
   2850               call mpp_error( FATAL, 'MPP_OPEN: fileset must be one of MPP_MULTI or MPP_SINGLE.' )
   2851           end if
   2852       else if( threading_flag.NE.MPP_SINGLE )then
   2853           call mpp_error( FATAL, 'MPP_OPEN: threading must be one of MPP_SINGLE or MPP_MULTI.' )
   2854       end if
   2855 
   2856 !open the file as specified above for various formats
   2857       if( form_flag.EQ.MPP_NETCDF )then
   2858 # 505
   2859 
   2860 !added by fmi to read NC_BLKSZ and NC_BLKSZ_filename...
   2861 
   2862 
   2863 !get regular nc_blksz...
   2864 !build env var for check
   2865 !write (*,*) 'hello', trim(mpp_file(unit)%name)
   2866                  nc_name = 'NC_BLKSZ_'//trim(mpp_file(unit)%name)
   2867 !write (*,*) 'nc_name: ', nc_name,  ' bcblk: ', ncblk
   2868 
   2869 
   2870 
   2871 !make the call.....
   2872 !f2003 replaces GETENV with get_enviornment_variable so the guts are here if we need to switch
   2873 !call get_enviornment_variable(trim(nc_name),ncblk )
   2874                   call GETENV( trim(nc_name),ncblk )
   2875 
   2876 !might not be there...use the general setting
   2877 
   2878                   if (ncblk .EQ. '') then
   2879 !call get_enviornment_variable( 'NC_BLKSZ', ncblk)
   2880                   call GETENV( 'NC_BLKSZ', ncblk)
   2881 
   2882 
   2883                   endif
   2884 
   2885 !if no general setting then use default
   2886                   if (ncblk .EQ. '') then
   2887                     ncblk = '64k'  !change for platform...perhaps we should set an ifdef for this....
   2888                   endif
   2889 
   2890 !set or convert the chunksize
   2891 

Page 114         Source Listing                  MPP_OPEN
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   2892                   call file_size(ncblk, mpp_file(unit)%name, fsize)
   2893 !write (*,*) 'this is fsize after: ', fsize
   2894 
   2895 
   2896                   if(debug) write(*,*) 'Blocksize for ', trim(mpp_file(unit)%name),' is ', fsize
   2897 !ends addition from fmi - oct.22.2008
   2898 
   2899 
   2900 
   2901 # 627
   2902 
   2903           if( action_flag.EQ.MPP_WRONLY )then
   2904               if(debug) write(*,*) 'Blocksize for create of ', trim(mpp_file(unit)%name),' is ', fsize
   2905               error=NF__CREATE( trim(mpp_file(unit)%name), IOR(NF_NETCDF4,NF_CLASSIC_MODEL), inital, fsize, mpp_file(unit)%n
   2905 cid )
   2906               call netcdf_err( error, mpp_file(unit) )
   2907               if( verbose )print '(a,i6,i16)', 'MPP_OPEN: new netCDF file: pe, ncid=', pe, mpp_file(unit)%ncid
   2908           else if( action_flag.EQ.MPP_OVERWR )then
   2909               if(debug) write(*,*) 'Blocksize for create of ', trim(mpp_file(unit)%name),' is ', fsize
   2910               error=NF__CREATE( trim(mpp_file(unit)%name), IOR(NF_NETCDF4,NF_CLASSIC_MODEL), inital, fsize, mpp_file(unit)%n
   2910 cid )
   2911               call netcdf_err( error, mpp_file(unit) )
   2912               action_flag = MPP_WRONLY !after setting clobber, there is no further distinction btwn MPP_WRONLY and MPP_OVERW
   2912 R
   2913               if( verbose )print '(a,i6,i16)', 'MPP_OPEN: overwrite netCDF file: pe, ncid=', pe, mpp_file(unit)%ncid
   2914           else if( action_flag.EQ.MPP_APPEND )then
   2915               inquire(file=trim(mpp_file(unit)%name),EXIST=exists)
   2916               if (.NOT.exists) call mpp_error(FATAL,'MPP_OPEN:'&
   2917                    &//trim(mpp_file(unit)%name)//' does not exist.')
   2918               error=NF__OPEN(trim(mpp_file(unit)%name),NF_WRITE,fsize,mpp_file(unit)%ncid);call netcdf_err(error,mpp_file(un
   2918 it))
   2919 !get the current time level of the file: writes to this file will be at next time level
   2920               error = NF_INQ_UNLIMDIM( mpp_file(unit)%ncid, unlim%did )
   2921               if( error.EQ.NF_NOERR )then
   2922                   error = NF_INQ_DIM( mpp_file(unit)%ncid, unlim%did, unlim%name, mpp_file(unit)%time_level )
   2923                   call netcdf_err( error, mpp_file(unit) )
   2924                   error = NF_INQ_VARID( mpp_file(unit)%ncid, unlim%name, mpp_file(unit)%id )
   2925                   call netcdf_err( error, mpp_file(unit), unlim )
   2926               end if
   2927               if( verbose )print '(a,i6,i16,i4)', 'MPP_OPEN: append to existing netCDF file: pe, ncid, time_axis_id=',&
   2928                    pe, mpp_file(unit)%ncid, mpp_file(unit)%id
   2929               mpp_file(unit)%format=form_flag ! need this for mpp_read
   2930               call mpp_read_meta(unit, read_time=.FALSE.)
   2931           else if( action_flag.EQ.MPP_RDONLY )then
   2932                inquire(file=trim(mpp_file(unit)%name),EXIST=exists)
   2933               if (.NOT.exists) call mpp_error(FATAL,'MPP_OPEN:'&
   2934                    &//trim(mpp_file(unit)%name)//' does not exist.')
   2935               error=NF__OPEN(trim(mpp_file(unit)%name),NF_NOWRITE,fsize,mpp_file(unit)%ncid);call netcdf_err(error,mpp_file(
   2935 unit))
   2936               if( verbose )print '(a,i6,i16,i4)', 'MPP_OPEN: opening existing netCDF file: pe, ncid, time_axis_id=',&
   2937                    pe, mpp_file(unit)%ncid, mpp_file(unit)%id
   2938               mpp_file(unit)%format=form_flag ! need this for mpp_read
   2939               call mpp_read_meta(unit, read_time=.TRUE.)
   2940           end if
   2941           mpp_file(unit)%opened = .TRUE.
   2942 
   2943 

Page 115         Source Listing                  MPP_OPEN
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   2944 
   2945       else
   2946 !format: ascii, native, or IEEE 32 bit
   2947           if( form_flag.EQ.MPP_ASCII )then
   2948               for = 'FORMATTED'
   2949           else if( form_flag.EQ.MPP_IEEE32 )then
   2950               for = 'UNFORMATTED'
   2951           else if( form_flag.EQ.MPP_NATIVE )then
   2952               for = 'UNFORMATTED'
   2953           else
   2954               call mpp_error( FATAL, 'MPP_OPEN: form must be one of MPP_ASCII, MPP_NATIVE, MPP_IEEE32 or MPP_NETCDF.' )
   2955           end if
   2956           inquire( file=trim(mpp_file(unit)%name), EXIST=exists )
   2957           if( exists .AND. action_flag.EQ.MPP_WRONLY ) &
   2958                call mpp_error( WARNING, 'MPP_OPEN: File '//trim(mpp_file(unit)%name)//' opened WRONLY already exists!' )
   2959           if( action_flag.EQ.MPP_OVERWR )action_flag = MPP_WRONLY
   2960 !perform the OPEN here
   2961           ios = 0
   2962           if( PRESENT(recl) )then
   2963               if( verbose )print '(2(x,a,i6),5(x,a),a,i8)', 'MPP_OPEN: PE=', pe, &
   2964                    'unit=', unit, trim(mpp_file(unit)%name), 'attributes=', trim(acc), trim(for), trim(act), ' RECL=', recl
   2965               open( unit, file=trim(mpp_file(unit)%name), access=acc, form=for, action=act, recl=recl,iostat=ios )
   2966           else
   2967               if( verbose )print '(2(x,a,i6),6(x,a))',      'MPP_OPEN: PE=', pe, &
   2968                    'unit=', unit, trim(mpp_file(unit)%name), 'attributes=', trim(acc), trim(for), trim(pos), trim(act)
   2969               open( unit, file=trim(mpp_file(unit)%name), access=acc, form=for, action=act, position=pos, iostat=ios)
   2970           end if
   2971 !check if OPEN worked
   2972           inquire( unit,OPENED=mpp_file(unit)%opened )
   2973           if (ios/=0) then
   2974               if (PRESENT(iostat)) then
   2975                   iostat=ios
   2976                   call mpp_error( WARNING, 'MPP_OPEN: error in OPEN for '//trim(mpp_file(unit)%name)//'.' )
   2977                   call mpp_clock_end(mpp_open_clock)
   2978                   return
   2979               else
   2980                   call mpp_error( FATAL, 'MPP_OPEN: error in OPEN for '//trim(mpp_file(unit)%name)//'.' )
   2981               endif
   2982           endif
   2983           if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_OPEN: error in OPEN() statement.' )
   2984       end if
   2985       mpp_file(unit)%action = action_flag
   2986       mpp_file(unit)%format = form_flag
   2987       mpp_file(unit)%access = access_flag
   2988       if( PRESENT(nohdrs) )mpp_file(unit)%nohdrs = nohdrs
   2989 
   2990       if( action_flag.EQ.MPP_WRONLY )then
   2991           if( form_flag.NE.MPP_NETCDF .AND. access_flag.EQ.MPP_DIRECT )call mpp_write_meta( unit, 'record_length', ival=recl
   2991  )
   2992 !actual file name
   2993           call mpp_write_meta( unit, 'filename', cval=mpp_file(unit)%name)
   2994 !MPP_IO package version
   2995 !          call mpp_write_meta( unit, 'MPP_IO_VERSION', cval=trim(version) )
   2996 !filecount for multifileset.
   2997           if( threading_flag.EQ.MPP_MULTI .AND. fileset_flag.EQ.MPP_MULTI ) then
   2998              if(present(domain)) then
   2999                 nfiles = io_layout(1)*io_layout(2)

Page 116         Source Listing                  MPP_OPEN
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   3000                 npes = mpp_get_domain_npes(domain)
   3001                 if(nfiles > npes) nfiles = npes
   3002 
   3003 !----------
   3004 !ug support
   3005              elseif (present(domain_ug)) then
   3006                  nfiles = io_layout_ug
   3007                  npes = mpp_get_UG_domain_npes(domain_ug)
   3008                  if (nfiles .gt. npes) then
   3009                      nfiles = npes
   3010                  endif
   3011 !----------
   3012 
   3013              else
   3014                 nfiles = mpp_npes()
   3015              endif
   3016              call mpp_write_meta( unit, 'NumFilesInSet', ival=nfiles)
   3017           end if
   3018       end if
   3019 
   3020 !----------
   3021 !ug support
   3022 !<Nullify local pointers.
   3023       if (associated(io_domain)) then
   3024           io_domain => NULL()
   3025       endif
   3026       if (associated(io_domain_ug)) then
   3027           io_domain_ug => null()
   3028       endif
   3029 !----------
   3030 
   3031       call mpp_clock_end(mpp_open_clock)
   3032       return
   3033     end subroutine mpp_open

Page 117         Source Listing                  MPP_OPEN
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_connect.inc



ENTRY POINTS

  Name                               
                                     
 mpp_io_mod_mp_mpp_open_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACC                        Local  2559     CHAR            16          scalar                    2829,2831,2964,2965,2968,2969     
 ACCESS                     Dummy  2539     I(4)            4           scalar   ARG,IN           2615                              
 ACCESS_FLAG                Local  2562     I(4)            4           scalar                    2614,2615,2802,2828,2830,2987,2991
 ACT                        Local  2559     CHAR            16          scalar                    2806,2809,2812,2846,2964,2965,2968
                                                                                                  ,2969                             
 ACTION                     Dummy  2539     I(4)            4           scalar   ARG,IN           2609                              
 ACTION_FLAG                Local  2562     I(4)            4           scalar                    2608,2609,2647,2671,2673,2746,2772
                                                                                                  ,2802,2805,2808,2811,2821,2903,290
                                                                                                  8,2912,2914,2931,2957,2959,2985,29
                                                                                                  90                                
 ASSOCIATED                 Func   2630                                 scalar                    2630,2662,2665,3023,3026          
 COMM                       Local  2577     I(4)            4           scalar                                                      
 DIST_FILE                  Local  2564     L(4)            4           scalar                    2606,2714,2717                    
 DOMAIN                     Dummy  2541     DOMAIN2D        752         scalar   ARG,IN           2590,2628,2629,2700,2702,2724,2725
                                                                                                  ,2735,2998,3000                   
 DOMAIN2D                   Type   2554                                 scalar                    338,483,2554,2571,3423,3432,3527,3
                                                                                                  541,3663,3817,3826,3921,3935,4057,
                                                                                                  4100,4115,4123,4209,4217,4331,4346
                                                                                                  ,4354,4440,4448,6267,6448,6520,704
                                                                                                  4,7191,7209,7222,7324,7337,7487,76
                                                                                                  34,7652,7665,7767,7780,7912,7929,7
                                                                                                  946,7965,8061,8078,8095,8114,8204,
                                                                                                  8211                              
 DOMAINUG                   Type   2557                                 scalar                    351,486,2557,2572,9161,9170,9289,9
                                                                                                  298,9448,9457,9617,9626,9808,9817,
                                                                                                  9936,9945,10095,10104,10264,10273,
                                                                                                  10479,10488,10658,10667,10837,1084
                                                                                                  6,11020,11029,11199,11208,11378,11
                                                                                                  387                               
 DOMAIN_UG                  Dummy  2544     DOMAINUG        544         scalar   ARG,TGT,IN       2590,2634,2635,2706,2707,2726,2727
                                                                                                  ,2761,3005,3007                   
 EXISTS                     Local  2564     L(4)            4           scalar                    2747,2748,2750,2751,2773,2774,2776
                                                                                                  ,2777,2915,2916,2932,2933,2956,295
                                                                                                  7                                 
 FILE                       Dummy  2539     CHAR                        scalar   ARG,IN           2713,2715,2716,2717,2718          
 FILESET                    Dummy  2540     I(4)            4           scalar   ARG,IN           2619                              
 FILESET_FLAG               Local  2562     I(4)            4           scalar                    2618,2619,2620,2648,2652,2736,2762
                                                                                                  ,2788,2793,2802,2819,2845,2849,299
                                                                                                  7                                 
 FOR                        Local  2559     CHAR            16          scalar                    2948,2950,2952,2964,2965,2968,2969
 FORM                       Dummy  2539     I(4)            4           scalar   ARG,IN           2611                              
 FORM_FLAG                  Local  2562     I(4)            4           scalar                    2610,2611,2647,2678,2717,2802,2827
                                                                                                  ,2832,2846,2857,2929,2938,2947,294
                                                                                                  9,2951,2986,2991                  

Page 118         Source Listing                  MPP_OPEN
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_connect.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FSIZE                      Local  2584     I(4)            4           scalar                    2892,2896,2904,2905,2909,2910,2918
                                                                                                  ,2935                             
 F_SIZE                     Local  2583     I(4)            4           scalar                                                      
 F_STAT                     Local  2583     I(4)            4           scalar                                                      
 F_TEST                     Local  2585     CHAR            128         scalar                                                      
 GETENV                     Subr   2874                                                           2874,2880                         
 GLIST                      Local  2579     I(4)            4     1     1        ALC                                                
 I4_KIND                    Param  2573     I(4)            4           scalar   PRIV             2573,2574,3322,3716,5044,9159,9171
                                                                                                  ,9172,9173,9177,9287,9299,9300,930
                                                                                                  1,9302,9304,9308,9309,9310,9311,93
                                                                                                  12,9446,9458,9459,9460,9461,9462,9
                                                                                                  464,9468,9469,9470,9471,9472,9473,
                                                                                                  9615,9627,9628,9629,9630,9631,9632
                                                                                                  ,9633,9634,9636,9640,9641,9642,964
                                                                                                  3,9806,9818,9819,9820,9824,9934,99
                                                                                                  46,9947,9948,9949,9951,9955,9956,9
                                                                                                  957,9958,9959,10093,10105,10106,10
                                                                                                  107,10108,10109,10111,10115,10116,
                                                                                                  10117,10118,10119,10120,10262,1027
                                                                                                  4,10275,10276,10277,10278,10279,10
                                                                                                  280,10281,10283,10287,10288,10289,
                                                                                                  10290,10477,10481,10482,10483,1048
                                                                                                  4,10487,10489,10490,10491,10656,10
                                                                                                  660,10661,10662,10663,10666,10668,
                                                                                                  10669,10670,10835,10839,10840,1084
                                                                                                  1,10842,10845,10847,10848,10849,11
                                                                                                  018,11022,11023,11024,11025,11028,
                                                                                                  11030,11031,11032,11197,11201,1120
                                                                                                  2,11203,11204,11207,11209,11210,11
                                                                                                  211,11376,11380,11381,11382,11383,
                                                                                                  11386,11388,11389,11390           
 IERROR                     Local  2578     I(4)            4           scalar                                                      
 INDEX                      Func   2713                                 scalar                    2713                              
 INFO                       Local  2578     I(4)            4           scalar                                                      
 INITAL                     Local  2584     I(4)            4           scalar                    2584,2905,2910                    
 IOR                        Func   2905                                 scalar                    2905,2910                         
 IOS                        Local  2566     I(4)            4           scalar                    2961,2965,2969,2973,2975          
 IOSPEC                     Dummy  2540     CHAR                        scalar   ARG,IN           2623                              
 IOSTAT                     Dummy  2541     I(4)            4           scalar   ARG,OUT          2974,2975                         
 IO_DOMAIN                  Local  2571     DOMAIN2D        752         scalar   PTR              2597,2629,2630,2662,2664,2738,3023
                                                                                                  ,3024                             
 IO_DOMAIN_EXIST            Local  2565     L(4)            4           scalar                    2627,2630,2636,2658,2673,2699,2731
 IO_DOMAIN_UG               Local  2572     DOMAINUG        544         scalar   PTR              2598,2635,2665,2666,2764,3026,3027
 IO_LAYOUT                  Local  2563     I(4)            4     1     2                         2725,2735,2999                    
 IO_LAYOUT_UG               Local  2573     I(4)            4           scalar                    2727,2761,3006                    
 IS_ROOT_PE                 Dummy  2541     L(4)            4           scalar   ARG,IN           2604                              
 LENA                       Local  2580     I(4)            4           scalar                                                      
 LENB                       Local  2580     I(4)            4           scalar                                                      
 LENGTH                     Local  2562     I(4)            4           scalar                    2716,2717                         
 LENP                       Local  2576     I(8)            8           scalar                                                      
 LEN_TRIM                   Func   2716                                 scalar                    2716                              
 MESG                       Local  2560     CHAR            128         scalar                    2683,2684,2692,2693               
 MPP_APPEND                 Param  2811     I(4)            4           scalar                    326,366,2811,2914                 
 MPP_ASCII                  Param  2610     I(4)            4           scalar                    326,366,2610,2832,2947,6819,7162,7
                                                                                                  605                               

Page 119         Source Listing                  MPP_OPEN
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_connect.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_CLOCK_BEGIN            Subr   2601                                          PRIV             334,2601,3059,3553,3947,4127,4221,
                                                                                                  4358,4452,7224,7340,7667,7783,7967
                                                                                                  ,8116,8214,8649,9181,9316,9477,964
                                                                                                  7,9828,9963,10124,10294,10497,1067
                                                                                                  6,10855,11038,11217,11396         
 MPP_CLOCK_END              Subr   2675                                          PRIV             334,2675,2822,2977,3031,3062,3185,
                                                                                                  3654,4048,4202,4294,4433,4525,7315
                                                                                                  ,7430,7758,7873,8023,8172,8239,865
                                                                                                  2,8684,9270,9429,9598,9785,9917,10
                                                                                                  076,10245,10432,10638,10817,10996,
                                                                                                  11179,11358,11537                 
 MPP_DIRECT                 Param  2830     I(4)            4           scalar                    328,367,2830,2991,7176,7619       
 MPP_DOMAIN_IS_TILE_ROOT_PE Func   2664     L(4)            4           scalar   PRIV             343,2664                          
 MPP_DOMAIN_UG_IS_TILE_ROOT                                                                                                         
 _PE                        Func   2666     L(8)            8           scalar   PRIV             353,2666                          
 MPP_GET_DOMAIN_NPES        Func   3000     I(4)            4           scalar   PRIV             345,3000,4144,4237,4375,4468,7977,
                                                                                                  8126,8221                         
 MPP_GET_IO_DOMAIN          Func   2629     RECORD          752         scalar   PTR,PRIV         343,2629,3508,3902,4142,4235,4373,
                                                                                                  4466,6281,7284,7399,7727,7842,7975
                                                                                                  ,8124,8219                        
 MPP_GET_IO_DOMAIN_LAYOUT   Func   2725     I(4)            4     1     2        PRIV             344,2725                          
 MPP_GET_IO_DOMAIN_UG_LAYOU                                                                                                         
 T                          Func   2727     I(4)            4           scalar   PRIV             356,2727                          
 MPP_GET_TILE_ID            Func   2738     I(4)            4     1     0        PRIV             344,2738                          
 MPP_GET_UG_DOMAIN_NPES     Func   3007     I(4)            4           scalar   PRIV             355,3007,9210,9345,9506,9676,9857,
                                                                                                  9992,10153,10323,10545,10724,10903
                                                                                                  ,11086,11265,11444                
 MPP_GET_UG_DOMAIN_TILE_ID  Func   2764     I(4)            4           scalar   PRIV             354,2764                          
 MPP_GET_UG_IO_DOMAIN       Func   2635     RECORD          544         scalar   PTR,PRIV         352,2635,9207,9342,9503,9673,9854,
                                                                                                  9989,10150,10320,10542,10721,10900
                                                                                                  ,11083,11262,11441                
 MPP_IEEE32                 Param  2949     I(4)            4           scalar                    327,366,2949                      
 MPP_MULTI                  Param  2618     I(4)            4           scalar                    328,368,2618,2648,2736,2737,2762,2
                                                                                                  763,2793,2843,2849,2997,3071,3079,
                                                                                                  4138,4231,4369,4462,6323,6421,8775
                                                                                                  ,8804,8830,10527,10706,10885,11068
                                                                                                  ,11247,11426                      
 MPP_NATIVE                 Param  2951     I(4)            4           scalar                    327,367,2951                      
 MPP_OPEN                   Subr   2539                                                                                             
 MPP_OVERWR                 Param  2808     I(4)            4           scalar                    326,366,2808,2908,2959            
 MPP_RDONLY                 Param  2647     I(4)            4           scalar                    326,366,2647,2671,2673,2746,2772,2
                                                                                                  805,2821,2931                     
 MPP_READ_META              Subr   2930                                                           396,2930,2939                     
 MPP_SEQUENTIAL             Param  2614     I(4)            4           scalar                    327,367,2614,2828,6823,7166,7609  
 MPP_WRITE_META             Local  2991                                 scalar                    393,2991,2993,3016,6124,6134,6383,
                                                                                                  6385,6389,6391,6397,6401,6408,6411
                                                                                                  ,6418,6422,6484,6486,6489,6493,655
                                                                                                  2,6556,6717,6719,6724,6728,6732,67
                                                                                                  35,6739,6742,6748,6751,6757,6763,6
                                                                                                  767,6772,6773,6774,6782,6786,6789,
                                                                                                  7081,7524,8823,8825,8832,8931,8933
                                                                                                  ,8938,8942,8946,8949,8953,8956,896
                                                                                                  1,8964,8969,8972,8976,8978,8980   
 MPP_WRONLY                 Param  2608     I(4)            4           scalar                    326,366,2608,2808,2903,2912,2957,2
                                                                                                  959,2990,6149,6194,6231,7071,7514 

Page 120         Source Listing                  MPP_OPEN
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_connect.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NCBLK                      Local  2581     CHAR            12          scalar                    2874,2878,2880,2886,2887,2892     
 NC_NAME                    Local  2582     CHAR            128         scalar                    2866,2874                         
 NC_POS                     Local  2566     I(4)            4           scalar                    2713,2714                         
 NFILES                     Local  2563     I(4)            4           scalar                    2999,3001,3006,3008,3009,3014,3016
 NF_CLASSIC_MODEL           Param  2905     I(4)            4           scalar   PRIV             2905,2910                         
 NF_INQ_DIM                 Func   2922     I(4)            4           scalar   PRIV             2922,5067,5200                    
 NF_INQ_UNLIMDIM            Func   2920     I(4)            4           scalar   PRIV             2920                              
 NF_INQ_VARID               Func   2924     I(4)            4           scalar   PRIV             2924,5069                         
 NF_NETCDF4                 Param  2905     I(4)            4           scalar   PRIV             2905,2910                         
 NF_NOWRITE                 Param  2935     I(4)            4           scalar   PRIV             2935                              
 NF_WRITE                   Param  2918     I(4)            4           scalar   PRIV             2918                              
 NF__CREATE                 Func   2905     I(4)            4           scalar   PRIV             2905,2910                         
 NF__OPEN                   Func   2918     I(4)            4           scalar   PRIV             2918,2935                         
 NOHDRS                     Dummy  2540     L(4)            4           scalar   ARG,IN           2988                              
 NULL                       Func   2597                                 scalar   PTR              412,426,427,428,432,450,453,456,47
                                                                                                  3,480,481,482,483,486,2597,2598,30
                                                                                                  24,3027,3179,3181,3432,3513,3826,3
                                                                                                  907,4123,4217,4354,4448,5596,6267,
                                                                                                  6448,6520,7222,7299,7337,7414,7665
                                                                                                  ,7742,7780,7857,7965,8114,8211,920
                                                                                                  6,9341,9502,9672,9853,9988,10149,1
                                                                                                  0319,10541,10549,10720,10728,10899
                                                                                                  ,10907,11082,11090,11261,11269,114
                                                                                                  40,11448                          
 ON_ROOT_PE                 Local  2564     L(4)            4           scalar                    2603,2604,2643,2652               
 POS                        Local  2559     CHAR            16          scalar                    2807,2810,2813,2968,2969          
 PRESENT                    Func   2590                                 scalar                    2590,2604,2609,2611,2615,2617,2619
                                                                                                  ,2623,2628,2634,2700,2706,2724,272
                                                                                                  6,2735,2761,2833,2962,2974,2988,29
                                                                                                  98,3005                           
 READ_ON_THIS_PE            Local  2565     L(4)            4           scalar                    2642,2645,2654,2698               
 RECL                       Dummy  2540     I(4)            4           scalar   ARG,IN           2833,2962,2964,2965,2991          
 RECORDS_PER_PE             Local  2836     I(4)            4           scalar                    2836,7179,7181,7622,7624          
 TEXT2                      Local  2561     CHAR            256         scalar                    2739,2749,2750,2755,2758,2765,2775
                                                                                                  ,2776,2781,2784                   
 THREADING                  Dummy  2539     I(4)            4           scalar   ARG,IN           2617                              
 THREADING_FLAG             Local  2562     I(4)            4           scalar                    2616,2617,2620,2643,2648,2737,2763
                                                                                                  ,2789,2802,2818,2843,2852,2997    
 TILE_ID                    Local  2563     I(4)            4     1     1                         2738,2740,2745,2749               
 TILE_ID_UG                 Local  2574     I(4)            4           scalar                    2764,2766,2771,2775               
 TRIM                       Func   2684                                 scalar                    2684,2693,2718,2739,2745,2747,2749
                                                                                                  ,2750,2754,2755,2758,2765,2771,277
                                                                                                  3,2775,2776,2780,2781,2784,2795,27
                                                                                                  97,2802,2866,2874,2896,2904,2905,2
                                                                                                  909,2910,2915,2917,2918,2932,2934,
                                                                                                  2935,2956,2958,2964,2965,2968,2969
                                                                                                  ,2976,2980                        
 UNIT                       Dummy  2539     I(4)            4           scalar   ARG,OUT          2674,2679,2680,2682,2687,2688,2689
                                                                                                  ,2691,2696,2697,2698,2699,2701,270
                                                                                                  2,2707,2800,2802,2818,2819,2835,28
                                                                                                  66,2892,2896,2904,2905,2906,2907,2
                                                                                                  909,2910,2911,2913,2915,2917,2918,
                                                                                                  2920,2922,2923,2924,2925,2928,2929
                                                                                                  ,2930,2932,2934,2935,2937,2938,293
                                                                                                  9,2941,2956,2958,2964,2965,2968,29

Page 121         Source Listing                  MPP_OPEN
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_connect.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  69,2972,2976,2980,2983,2985,2986,2
                                                                                                  987,2988,2991,2993,3016           
 UNLIM                      Local  2567     AXISTYPE        1424        scalar                    2920,2922,2924,2925               
 WARNING                    Param  2958     I(4)            4           scalar   PRIV             332,2958,2976,3074,6665,6709,6861,
                                                                                                  8923,9111                         
 WRITE_ON_THIS_PE           Local  2565     L(4)            4           scalar                    2641,2644,2653,2664,2666,2671,2673
                                                                                                  ,2697,2821                        


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FILETYPE.ACCESS            I(4)            4     264            scalar   PRIV             2987,3156,6823,7166,7176,7609,7619 
 FILETYPE.DOMAIN            DOMAIN2D        752   640            scalar   PTR,PRIV         2701,2702,3177,3178,3179,6281,7284 
                                                                                           ,7399,7727,7842                    
 FILETYPE.DOMAIN_UG         DOMAINUG        544   648            scalar   PTR,PRIV         2707,3180,3181                     
 FILETYPE.NOHDRS            L(4)            4     292            scalar   PRIV             2988,6808                          
 FILETYPE.READ_ON_THIS_PE   L(4)            4     320            scalar   PRIV             2698,3442,3836                     

Page 122         Source Listing                  MPP_OPEN
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   3034 
   3035 
   3036 ! <SUBROUTINE NAME="mpp_close">
   3037 !   <OVERVIEW>
   3038 !     Close an open file.
   3039 !   </OVERVIEW>
   3040 !   <DESCRIPTION>
   3041 !     Closes the open file on <TT>unit</TT>. Clears the
   3042 !     <TT>type(filetype)</TT> object <TT>mpp_file(unit)</TT> making it
   3043 !     available for reuse.
   3044 !   </DESCRIPTION>
   3045 !   <TEMPLATE>
   3046 !     call mpp_close( unit, action )
   3047 !   </TEMPLATE>
   3048 !   <IN NAME="unit" TYPE="integer"> </IN>
   3049 !   <IN NAME="action" TYPE="integer"> </IN>
   3050 ! </SUBROUTINE>
   3051 
   3052     subroutine mpp_close( unit, action )
   3053       integer, intent(in) :: unit
   3054       integer, intent(in), optional :: action
   3055       character(len=8) :: status
   3056       logical :: collect
   3057       integer :: i, j
   3058 
   3059       call mpp_clock_begin(mpp_close_clock)
   3060       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_CLOSE: must first call mpp_io_init.' )
   3061       if( unit.EQ.NULLUNIT .OR. unit .EQ. stderr() ) then
   3062          call mpp_clock_end(mpp_close_clock)
   3063          return !nothing was actually opened on this unit
   3064       endif
   3065 !action on close
   3066       status = 'KEEP'
   3067 !collect is supposed to launch the post-processing collector tool for multi-fileset
   3068       collect = .FALSE.
   3069       if( PRESENT(action) )then
   3070           if( action.EQ.MPP_DELETE )then
   3071               if( pe.EQ.mpp_root_pe() .OR. mpp_file(unit)%fileset.EQ.MPP_MULTI )status = 'DELETE'
   3072           else if( action.EQ.MPP_COLLECT )then
   3073               collect = .FALSE.         !should be TRUE but this is not yet ready
   3074               call mpp_error( WARNING, 'MPP_CLOSE: the COLLECT operation is not yet implemented.' )
   3075           else
   3076               call mpp_error( FATAL, 'MPP_CLOSE: action must be one of MPP_DELETE or MPP_COLLECT.' )
   3077           end if
   3078       end if
   3079       if( mpp_file(unit)%fileset.NE.MPP_MULTI )collect = .FALSE.
   3080       if( mpp_file(unit)%opened) then
   3081          if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   3082 
   3083             error = NF_CLOSE(mpp_file(unit)%ncid); call netcdf_err( error, mpp_file(unit) )
   3084 
   3085          else
   3086             close(unit,status=status)
   3087          end if
   3088       endif
   3089       if ( associated(mpp_file(unit)%Axis) ) then
   3090          do i=1, mpp_file(unit)%ndim

Page 123         Source Listing                  MPP_CLOSE
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   3091             if ( associated(mpp_file(unit)%Axis(i)%data) ) then
   3092                deallocate(mpp_file(unit)%Axis(i)%data)
   3093                nullify(mpp_file(unit)%Axis(i)%data)
   3094             end if
   3095 
   3096             if ( associated(mpp_file(unit)%Axis(i)%Att) ) then
   3097                do j=1, mpp_file(unit)%Axis(i)%natt
   3098                   if ( associated(mpp_file(unit)%Axis(i)%Att(j)%fatt) ) then
   3099                      deallocate(mpp_file(unit)%Axis(i)%Att(j)%fatt)
   3100                      nullify(mpp_file(unit)%Axis(i)%Att(j)%fatt)
   3101                   end if
   3102                end do
   3103                deallocate(mpp_file(unit)%Axis(i)%Att)
   3104                nullify(mpp_file(unit)%Axis(i)%Att)
   3105             end if
   3106          end do
   3107          deallocate(mpp_file(unit)%Axis)
   3108          nullify(mpp_file(unit)%Axis)
   3109       end if
   3110 
   3111       if ( associated(mpp_file(unit)%var) ) then
   3112          do i=1, mpp_file(unit)%nvar
   3113             if ( associated(mpp_file(unit)%var(i)%Axes) ) then
   3114 ! Do not need to deallocate/nullify child pointers, handled above with mpp_file(unit)%Axis(:)%*
   3115                deallocate(mpp_file(unit)%var(i)%Axes)
   3116                nullify(mpp_file(unit)%var(i)%Axes)
   3117             end if
   3118             if ( associated(mpp_file(unit)%var(i)%size) ) then
   3119                deallocate(mpp_file(unit)%var(i)%size)
   3120                nullify(mpp_file(unit)%var(i)%size)
   3121             end if
   3122             if ( associated(mpp_file(unit)%var(i)%Att) ) then
   3123                do j=1, mpp_file(unit)%var(i)%natt
   3124                   if ( associated(mpp_file(unit)%var(i)%Att(j)%fatt) ) then
   3125                      deallocate(mpp_file(unit)%var(i)%Att(j)%fatt)
   3126                      nullify(mpp_file(unit)%var(i)%Att(j)%fatt)
   3127                   end if
   3128               end do
   3129                deallocate(mpp_file(unit)%var(i)%Att)
   3130                nullify(mpp_file(unit)%var(i)%Att)
   3131             end if
   3132          end do
   3133          deallocate(mpp_file(unit)%var)
   3134          nullify(mpp_file(unit)%var)
   3135       end if
   3136 
   3137       if ( associated(mpp_file(unit)%att) ) then
   3138          do i=1, mpp_file(unit)%natt
   3139             if ( associated(mpp_file(unit)%att(i)%fatt) ) then
   3140                deallocate(mpp_file(unit)%att(i)%fatt)
   3141                nullify(mpp_file(unit)%att(i)%fatt)
   3142             end if
   3143          end do
   3144          deallocate(mpp_file(unit)%att)
   3145          nullify(mpp_file(unit)%att)
   3146       end if
   3147 

Page 124         Source Listing                  MPP_CLOSE
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   3148       if ( associated(mpp_file(unit)%time_values) ) then
   3149          deallocate(mpp_file(unit)%time_values)
   3150          nullify(mpp_file(unit)%time_values)
   3151       end if
   3152 
   3153       mpp_file(unit)%name = ' '
   3154       mpp_file(unit)%action    = -1
   3155       mpp_file(unit)%format    = -1
   3156       mpp_file(unit)%access    = -1
   3157       mpp_file(unit)%threading = -1
   3158       mpp_file(unit)%fileset   = -1
   3159       mpp_file(unit)%record    = -1
   3160       mpp_file(unit)%ncid      = -1
   3161       mpp_file(unit)%opened = .FALSE.
   3162       mpp_file(unit)%initialized = .FALSE.
   3163       mpp_file(unit)%id = -1
   3164       mpp_file(unit)%ndim = -1
   3165       mpp_file(unit)%nvar = -1
   3166       mpp_file(unit)%time_level = 0
   3167       mpp_file(unit)%time = NULLTIME
   3168       mpp_file(unit)%valid = .false.
   3169       mpp_file(unit)%io_domain_exist = .false.
   3170       mpp_file(unit)%write_on_this_pe = .false.
   3171 
   3172 !----------
   3173 !ug support
   3174 !<There was a memory leak here.  The mpp_file(unit)%domain was set
   3175 !!to point to null without begin deallocated first (it is allocated
   3176 !!in mpp_open above).
   3177       if (associated(mpp_file(unit)%domain)) then
   3178           deallocate(mpp_file(unit)%domain)
   3179           mpp_file(unit)%domain => null()
   3180       elseif (associated(mpp_file(unit)%domain_ug)) then
   3181           mpp_file(unit)%domain_ug => null()
   3182       endif
   3183 !----------
   3184 
   3185       call mpp_clock_end(mpp_close_clock)
   3186       return
   3187     end subroutine mpp_close

Page 125         Source Listing                  MPP_CLOSE
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_connect.inc



ENTRY POINTS

  Name                                
                                      
 mpp_io_mod_mp_mpp_close_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTION                     Dummy  3052     I(4)            4           scalar   ARG,IN           3069,3070,3072                    
 ASSOCIATED                 Func   3089                                 scalar                    3089,3091,3096,3098,3111,3113,3118
                                                                                                  ,3122,3124,3137,3139,3148,3177,318
                                                                                                  0                                 
 COLLECT                    Local  3056     L(4)            4           scalar                    3068,3073,3079                    
 I                          Local  3057     I(4)            4           scalar                    3090,3091,3092,3093,3096,3097,3098
                                                                                                  ,3099,3100,3103,3104,3112,3113,311
                                                                                                  5,3116,3118,3119,3120,3122,3123,31
                                                                                                  24,3125,3126,3129,3130,3138,3139,3
                                                                                                  140,3141                          
 J                          Local  3057     I(4)            4           scalar                    3097,3098,3099,3100,3123,3124,3125
                                                                                                  ,3126                             
 MPP_CLOSE                  Subr   3052                                                                                             
 MPP_COLLECT                Param  3072     I(4)            4           scalar                    328,368,3072                      
 MPP_DELETE                 Param  3070     I(4)            4           scalar                    328,368,3070                      
 PRESENT                    Func   3069                                 scalar                    3069                              
 STATUS                     Local  3055     CHAR            8           scalar                    3066,3071,3086                    
 UNIT                       Dummy  3052     I(4)            4           scalar   ARG,IN           3061,3071,3079,3080,3081,3083,3086
                                                                                                  ,3089,3090,3091,3092,3093,3096,309
                                                                                                  7,3098,3099,3100,3103,3104,3107,31
                                                                                                  08,3111,3112,3113,3115,3116,3118,3
                                                                                                  119,3120,3122,3123,3124,3125,3126,
                                                                                                  3129,3130,3133,3134,3137,3138,3139
                                                                                                  ,3140,3141,3144,3145,3148,3149,315
                                                                                                  0,3153,3154,3155,3156,3157,3158,31
                                                                                                  59,3160,3161,3162,3163,3164,3165,3
                                                                                                  166,3167,3168,3169,3170,3177,3178,
                                                                                                  3179,3180,3181                    

Page 126         Source Listing                  MPP_CLOSE
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   3188 
   3189 
   3190     subroutine file_size(fsize, fname, size)
   3191 
   3192     character(len=12), intent(in)    ::fsize
   3193     character(len=128)               ::filesize
   3194     character(len=128), intent(in),optional :: fname
   3195     character(len=128) :: filename
   3196     integer*4 :: fstat(13)
   3197     integer :: length
   3198     character(len=16)   ::number
   3199     integer,intent(OUT) :: size
   3200     integer*4 ::ierr, stat
   3201     integer   :: tend
   3202     logical   :: there
   3203 
   3204     size = 0
   3205 
   3206     filesize = fsize
   3207 
   3208     length = len(trim(fsize))
   3209     tend = length - 1
   3210 
   3211 
   3212 
   3213     if (filesize .EQ. 'file') then
   3214       filename = trim(fname)
   3215       INQUIRE( FILE=filename, EXIST=THERE )
   3216       if (THERE) then
   3217         ierr = stat(filename, fstat)
   3218         if (ierr .EQ. 0) then
   3219           size = fstat(8)
   3220         else
   3221           size = 0
   3222         end if
   3223       end if
   3224     elseif((filesize(length:length)>='a'.AND.fsize(length:length)<='z').OR.(filesize(length:length)>='A' &
   3225                 .AND.fsize(length:length)<='Z'))then
   3226       number = filesize(1:tend)
   3227       READ(number, FMT='(I9)') size
   3228       if (filesize(length:length) >= 'a' .AND. fsize(length:length) <= 'z') then
   3229         filesize(length:length) = ACHAR ( ICHAR (filesize(length:length)) - 32)
   3230       end if
   3231       if ( filesize(length:length) .EQ. 'K') then
   3232         size = size*1024
   3233       elseif ( filesize(length:length) .EQ. 'M') then
   3234         size = (size*1024)*1024
   3235       elseif ( filesize(length:length) .EQ. 'G') then
   3236         size = (((size*1024)*1024)*1024)
   3237       else
   3238         size = size
   3239       end if
   3240     else
   3241       READ(filesize, FMT='(I9)') size
   3242     endif
   3243 
   3244       if (size .eq. 0) then

Page 127         Source Listing                  FILE_SIZE
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   3245         size = 65536
   3246       endif
   3247 
   3248 return
   3249 
   3250     end subroutine file_size


ENTRY POINTS

  Name                                
                                      
 mpp_io_mod_mp_file_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACHAR                      Func   3229                                 scalar                    3229                              
 FILENAME                   Local  3195     CHAR            128         scalar                    3214,3215,3217                    
 FILESIZE                   Local  3193     CHAR            128         scalar                    3206,3213,3224,3226,3228,3229,3231
                                                                                                  ,3233,3235,3241                   
 FILE_SIZE                  Subr   3190                                                           2892                              
 FNAME                      Dummy  3190     CHAR            128         scalar   ARG,IN           3214                              
 FSIZE                      Dummy  3190     CHAR            12          scalar   ARG,IN           3206,3208,3224,3225,3228          
 FSTAT                      Local  3196     I(4)            4     1     13                        3217,3219                         
 ICHAR                      Func   3229                                 scalar                    3229                              
 IERR                       Local  3200     I(4)            4           scalar                    3217,3218                         
 LEN                        Func   3208                                 scalar                    3208                              
 LENGTH                     Local  3197     I(4)            4           scalar                    3208,3209,3224,3225,3228,3229,3231
                                                                                                  ,3233,3235                        
 NUMBER                     Local  3198     CHAR            16          scalar                    3226,3227                         
 SIZE                       Dummy  3190     I(4)            4           scalar   ARG,OUT          3204,3219,3221,3227,3232,3234,3236
                                                                                                  ,3238,3241,3244,3245              
 STAT                       Func   3200     I(4)            4           scalar                    3217                              
 TEND                       Local  3201     I(4)            4           scalar                    3209,3226                         
 THERE                      Local  3202     L(4)            4           scalar                    3215,3216                         
 TRIM                       Func   3208                                 scalar                    3208,3214                         

Page 128         Source Listing                  FILE_SIZE
2021-06-01 08:53                                 ../mpp/include/mpp_io_connect.inc

   3251 # 1112 "mpp_io.F90" 2 
   3252 # 1 "../mpp/include/mpp_io_read.inc" 1 
   3253 ! -*-f90-*-
   3254 
   3255 !***********************************************************************
   3256 !*                   GNU Lesser General Public License
   3257 !*
   3258 !* This file is part of the GFDL Flexible Modeling System (FMS).
   3259 !*
   3260 !* FMS is free software: you can redistribute it and/or modify it under
   3261 !* the terms of the GNU Lesser General Public License as published by
   3262 !* the Free Software Foundation, either version 3 of the License, or (at
   3263 !* your option) any later version.
   3264 !*
   3265 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   3266 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   3267 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   3268 !* for more details.
   3269 !*
   3270 !* You should have received a copy of the GNU Lesser General Public
   3271 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   3272 !***********************************************************************
   3273 
   3274 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   3275 !                                                                      !
   3276 !                               MPP_READ                               !
   3277 !                                                                      !
   3278 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   3279 
   3280 
   3281 
   3282 
   3283 
   3284 
   3285 
   3286 
   3287 
   3288 
   3289 
   3290 
   3291 
   3292 # 1 "../mpp/include/mpp_read_2Ddecomp.h" 1 
   3293 !***********************************************************************
   3294 !*                   GNU Lesser General Public License
   3295 !*
   3296 !* This file is part of the GFDL Flexible Modeling System (FMS).
   3297 !*
   3298 !* FMS is free software: you can redistribute it and/or modify it under
   3299 !* the terms of the GNU Lesser General Public License as published by
   3300 !* the Free Software Foundation, either version 3 of the License, or (at
   3301 !* your option) any later version.
   3302 !*
   3303 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   3304 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   3305 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   3306 !* for more details.
   3307 !*

Page 129         Source Listing                  FILE_SIZE
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3308 !* You should have received a copy of the GNU Lesser General Public
   3309 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   3310 !***********************************************************************
   3311     subroutine read_record_core_r8(unit, field, nwords, data, start, axsiz)
   3312       integer,         intent(in)    :: unit
   3313       type(fieldtype), intent(in)    :: field
   3314       integer,         intent(in)    :: nwords
   3315       real(KIND=r8_kind),        intent(inout) :: data(nwords)
   3316       integer,         intent(in)    :: start(:), axsiz(:)
   3317 
   3318       integer(i2_kind) :: i2vals(nwords)
   3319 !rab used in conjunction with transfer intrinsic to determine size of a variable
   3320       integer(KIND=1) :: one_byte(8)
   3321       integer         :: word_sz
   3322       integer(i4_kind) :: ivals(nwords)
   3323       real(r4_kind) :: rvals(nwords)
   3324 
   3325       real(r8_kind) :: r8vals(nwords)
   3326       pointer( ptr1, i2vals )
   3327       pointer( ptr2, ivals )
   3328       pointer( ptr3, rvals )
   3329       pointer( ptr4, r8vals )
   3330       if (mpp_io_stack_size < nwords) call mpp_io_set_stack_size(nwords)
   3331 
   3332 
   3333       word_sz = size(transfer(data(1),one_byte))
   3334 
   3335           select case (field%type)
   3336              case(NF_BYTE)
   3337 ! use type conversion
   3338                 call mpp_error( FATAL, 'MPP_READ: does not support NF_BYTE packing' )
   3339              case(NF_SHORT)
   3340                 ptr1 = LOC(mpp_io_stack(1))
   3341                 error = NF_GET_VARA_INT2  ( mpp_file(unit)%ncid, field%id, start, axsiz, i2vals )
   3342                 call netcdf_err( error, mpp_file(unit), field=field )
   3343                 if(field%scale == 1.0 .and. field%add == 0.0) then
   3344                    data(:)=i2vals(:)
   3345                 else
   3346                    data(:)=i2vals(:)*field%scale + field%add
   3347                 end if
   3348              case(NF_INT)
   3349 
   3350                 ptr2 = LOC(mpp_io_stack(1))
   3351 
   3352                 error = NF_GET_VARA_INT   ( mpp_file(unit)%ncid, field%id, start, axsiz, ivals  )
   3353                 call netcdf_err( error, mpp_file(unit), field=field )
   3354                 if(field%scale == 1.0 .and. field%add == 0.0) then
   3355                    data(:)=ivals(:)
   3356                 else
   3357                    data(:)=ivals(:)*field%scale + field%add
   3358                 end if
   3359              case(NF_FLOAT)
   3360                 ptr3 = LOC(mpp_io_stack(1))
   3361                 if (size(transfer(rvals(1),one_byte)) .eq. word_sz) then
   3362                   error = NF90_GET_VAR  ( mpp_file(unit)%ncid, field%id, data, start=start, count=axsiz )
   3363                   call netcdf_err( error, mpp_file(unit), field=field )
   3364                   if(field%scale /= 1.0 .or. field%add /= 0.0) then

Page 130         Source Listing                  READ_RECORD_CORE_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3365                      data(:)=data(:)*field%scale + field%add
   3366                   end if
   3367                 else
   3368                   error = NF_GET_VARA_REAL  ( mpp_file(unit)%ncid, field%id, start, axsiz, rvals )
   3369                   call netcdf_err( error, mpp_file(unit), field=field )
   3370                   if(field%scale == 1.0 .and. field%add == 0.0) then
   3371                      data(:)=rvals(:)
   3372                   else
   3373                      data(:)=rvals(:)*field%scale + field%add
   3374                   end if
   3375                 end if
   3376              case(NF_DOUBLE)
   3377                 ptr4 = LOC(mpp_io_stack(1))
   3378                 if (size(transfer(r8vals(1),one_byte)) .eq. word_sz) then
   3379                   error = NF90_GET_VAR( mpp_file(unit)%ncid, field%id, data, start=start, count=axsiz )
   3380                   call netcdf_err( error, mpp_file(unit), field=field )
   3381                   if(field%scale /= 1.0 .or. field%add /= 0.0) then
   3382                      data(:)=data(:)*field%scale + field%add
   3383                   end if
   3384                 else
   3385                   error = NF_GET_VARA_DOUBLE( mpp_file(unit)%ncid, field%id, start, axsiz, r8vals )
   3386                   call netcdf_err( error, mpp_file(unit), field=field )
   3387                   if(field%scale == 1.0 .and. field%add == 0.0) then
   3388                      data(:)=r8vals(:)
   3389                   else
   3390                      data(:)=r8vals(:)*field%scale + field%add
   3391                   end if
   3392                 end if
   3393              case default
   3394                 call mpp_error( FATAL, 'MPP_READ: invalid pack value' )
   3395           end select
   3396 # 106
   3397 
   3398 
   3399     end subroutine read_record_core_r8

Page 131         Source Listing                  READ_RECORD_CORE_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_read_2Ddecomp.h



ENTRY POINTS

  Name                                          
                                                
 mpp_io_mod_mp_read_record_core_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXSIZ                      Dummy  3311     I(4)            4     1     1        ARG,IN           3341,3352,3362,3368,3379,3385     
 DATA                       Dummy  3311     R(8)            8     1     0        ARG,TGT,INOUT    3333,3344,3346,3355,3357,3362,3365
                                                                                                  ,3371,3373,3379,3382,3388,3390    
 FIELD                      Dummy  3311     FIELDTYPE       1096        scalar   ARG,IN           3335,3341,3342,3343,3346,3352,3353
                                                                                                  ,3354,3357,3362,3363,3364,3365,336
                                                                                                  8,3369,3370,3373,3379,3380,3381,33
                                                                                                  82,3385,3386,3387,3390            
 I2VALS                     Local  3318     I(2)            2     1     0                         3341,3344,3346                    
 I2_KIND                    Param  3318     I(4)            4           scalar   PRIV             3318,3712,5043                    
 IVALS                      Local  3322     I(4)            4     1     0                         3352,3355,3357                    
 LOC                        Func   3340                                 scalar                    3340,3350,3360,3377               
 NF90_GET_VAR               Local  3362                                 scalar   PRIV             3362,3379,3756,3773               
 NF90_GET_VAR_1D_EIGHTBYTER                                                                                                         
 EAL                        Func   3362     I(4)            4           scalar   PRIV             3362,3379                         
 NF_GET_VARA_DOUBLE         Func   3385     I(4)            4           scalar   PRIV             3385,3779                         
 NF_GET_VARA_INT            Func   3352     I(4)            4           scalar   PRIV             3352,3746                         
 NF_GET_VARA_INT2           Func   3341     I(4)            4           scalar   PRIV             3341,3735                         
 NF_GET_VARA_REAL           Func   3368     I(4)            4           scalar   PRIV             3368,3762                         
 NWORDS                     Dummy  3311     I(4)            4           scalar   ARG,IN           3315,3318,3322,3323,3325,3330     
 ONE_BYTE                   Local  3320     I(1)            1     1     8                         3333,3361,3378                    
 PTR1                       Local  3326     I(8)            8           scalar   PTR              3340                              
 PTR2                       Local  3327     I(8)            8           scalar   PTR              3350                              
 PTR3                       Local  3328     I(8)            8           scalar   PTR              3360                              
 PTR4                       Local  3329     I(8)            8           scalar   PTR              3377                              
 R4_KIND                    Param  3323     I(4)            4           scalar   PRIV             3323,3709,3717,3815,3922,3924,3936
                                                                                                  ,3939,3940,4058,4060,4332,4335,434
                                                                                                  7,4441,4778,4794,4809,4824,4839,48
                                                                                                  41,4851,4872,5045,6852,6860,6864,6
                                                                                                  871,6873,6882,6884,6894,6896,6908,
                                                                                                  6910,7054,7138,7485,7486,7497,7581
                                                                                                  ,7635,7636,7638,7640,7653,7654,765
                                                                                                  6,7660,7768,7769,7771,7775,8062,80
                                                                                                  64,8065,8067,8079,8081,8082,8084,8
                                                                                                  096,8100,8101,8104,8105,8106,8108,
                                                                                                  8109,8475,8476,8515,8516,8555,8556
                                                                                                  ,8595,8596,8635,8636,9809,9812,981
                                                                                                  3,9816,9822,9823,9937,9940,9941,99
                                                                                                  44,9950,9953,9954,10096,10099,1010
                                                                                                  0,10103,10110,10113,10114,10265,10
                                                                                                  268,10269,10272,10282,10285,10286,
                                                                                                  11021,11200,11379                 
 R8VALS                     Local  3325     R(8)            8     1     0                         3378,3385,3388,3390               
 READ_RECORD_CORE_R8        Subr   3311                                                           3519,4902,4921                    
 RVALS                      Local  3323     R(4)            4     1     0                         3361,3368,3371,3373               

Page 132         Source Listing                  READ_RECORD_CORE_R8
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_read_2Ddecomp.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 SIZE                       Func   3333                                 scalar                    3333,3361,3378                    
 START                      Dummy  3311     I(4)            4     1     1        ARG,IN           3341,3352,3362,3368,3379,3385     
 TRANSFER                   Func   3333                                 scalar                    3333,3361,3378                    
 UNIT                       Dummy  3311     I(4)            4           scalar   ARG,IN           3341,3342,3352,3353,3362,3363,3368
                                                                                                  ,3369,3379,3380,3385,3386         
 WORD_SZ                    Local  3321     I(4)            4           scalar                    3333,3361,3378                    

Page 133         Source Listing                  READ_RECORD_CORE_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3400 
   3401 
   3402     subroutine read_record_r8( unit, field, nwords, data, time_level, domain, position, tile_count, start_in, axsiz_in )
   3403 !routine that is finally called by all mpp_read routines to perform the read
   3404 !a non-netCDF record contains:
   3405 !      field ID
   3406 !      a set of 4 coordinates (is:ie,js:je) giving the data subdomain
   3407 !      a timelevel and a timestamp (=NULLTIME if field is static)
   3408 !      3D real data (stored as 1D)
   3409 !if you are using direct access I/O, the RECL argument to OPEN must be large enough for the above
   3410 !in a global direct access file, record position on PE is given by %record.
   3411 
   3412 !Treatment of timestamp:
   3413 !   We assume that static fields have been passed without a timestamp.
   3414 !   Here that is converted into a timestamp of NULLTIME.
   3415 !   For non-netCDF fields, field is treated no differently, but is written
   3416 !   with a timestamp of NULLTIME. There is no check in the code to prevent
   3417 !   the user from repeatedly writing a static field.
   3418 
   3419       integer,         intent(in)             :: unit, nwords
   3420       type(fieldtype), intent(in)             :: field
   3421       real(KIND=r8_kind),      intent(inout)           :: data(nwords)
   3422       integer,        intent(in),    optional :: time_level
   3423       type(domain2D), intent(in),    optional :: domain
   3424       integer,        intent(in),    optional :: position, tile_count
   3425       integer,        intent(in),    optional :: start_in(:), axsiz_in(:)
   3426       integer, dimension(size(field%axes(:))) :: start, axsiz
   3427 
   3428       integer :: tlevel !,subdomain(4)
   3429 
   3430 
   3431       integer :: i, error, is, ie, js, je, isg, ieg, jsg, jeg
   3432       type(domain2d), pointer :: io_domain=>NULL()
   3433 
   3434       if (.not.PRESENT(time_level)) then
   3435           tlevel = 0
   3436       else
   3437           tlevel = time_level
   3438       endif
   3439 
   3440       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'READ_RECORD: must first call mpp_io_init.' )
   3441       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'READ_RECORD: invalid unit number.' )
   3442       if( .NOT.mpp_file(unit)%read_on_this_pe )return
   3443 
   3444       if( .NOT.mpp_file(unit)%initialized ) call mpp_error( FATAL, 'MPP_READ: must first call mpp_read_meta.' )
   3445       if( mpp_file(unit)%format .NE. MPP_NETCDF ) call mpp_error( FATAL, 'Currently dont support non-NetCDF mpp read' )
   3446 
   3447       if (.not.PRESENT(time_level)) then
   3448           tlevel = 0
   3449       else
   3450           tlevel = time_level
   3451       endif
   3452 
   3453       if( verbose )print '(a,2i6,2i5)', 'MPP_READ: PE, unit, %id, %time_level =',&
   3454            pe, unit, mpp_file(unit)%id, tlevel
   3455       if( PRESENT(start_in) .AND. PRESENT(axsiz_in) ) then
   3456          if(size(start(:)) > size(start_in(:)) )call mpp_error( FATAL, 'MPP_READ: size(start_in) < size(start)')

Page 134         Source Listing                  READ_RECORD_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3457          if(size(axsiz(:)) > size(axsiz_in(:)) )call mpp_error( FATAL, 'MPP_READ: size(axsiz_in) < size(axsiz)')
   3458          start(:) = start_in(1:size(start(:)))
   3459          axsiz(:) = axsiz_in(1:size(axsiz(:)))
   3460       else
   3461 !define netCDF data block to be read:
   3462 !  time axis: START = time level
   3463 !             AXSIZ = 1
   3464 !  space axis: if there is no domain info
   3465 !              START = 1
   3466 !              AXSIZ = field%size(axis)
   3467 !          if there IS domain info:
   3468 !              start of domain is compute%start_index for multi-file I/O
   3469 !                                 global%start_index for all other cases
   3470 !              this number must be converted to 1 for NF_GET_VAR
   3471 !                  (netCDF fortran calls are with reference to 1),
   3472 !          So, START = compute%start_index - <start of domain> + 1
   3473 !              AXSIZ = usually compute%size
   3474 !          However, if compute%start_index-compute%end_index+1.NE.compute%size,
   3475 !              we assume that the call is passing a subdomain.
   3476 !              To pass a subdomain, you must pass a domain2D object that satisfies the following:
   3477 !                  global%start_index must contain the <start of domain> as defined above;
   3478 !                  the data domain and compute domain must refer to the subdomain being passed.
   3479 !              In this case, START = compute%start_index - <start of domain> + 1
   3480 !                            AXSIZ = compute%start_index - compute%end_index + 1
   3481 ! NOTE: passing of subdomains will fail for multi-PE single-threaded I/O,
   3482 !       since that attempts to gather all data on PE 0.
   3483           start = 1
   3484           do i = 1,size(field%axes(:))
   3485              axsiz(i) = field%size(i)
   3486              if( i .EQ. field%time_axis_index )start(i) = tlevel
   3487           end do
   3488           if( PRESENT(domain) )then
   3489               call mpp_get_compute_domain( domain, is,  ie,  js,  je, tile_count=tile_count, position=position  )
   3490               call mpp_get_global_domain ( domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   3491               axsiz(1) = ie-is+1
   3492               axsiz(2) = je-js+1
   3493               if( mpp_file(unit)%fileset.EQ.MPP_SINGLE )then
   3494                  if( npes.GT.1 )then
   3495                     start(1) = is - isg + 1
   3496                     start(2) = js - jsg + 1
   3497                  else   !--- z1l fix a problem related obc when npes = 1
   3498                     if( ie-is+1.NE.ieg-isg+1 )then
   3499                        start(1) = is - isg + 1
   3500                        axsiz(1) = ie - is + 1
   3501                     end if
   3502                     if( je-js+1.NE.jeg-jsg+1 )then
   3503                        start(2) = js - jsg + 1
   3504                        axsiz(2) = je - js + 1
   3505                     end if
   3506                  end if
   3507               else if( mpp_file(unit)%io_domain_exist ) then
   3508                  io_domain=>mpp_get_io_domain(domain)
   3509                  call mpp_get_compute_domain( io_domain, is,  ie,  js,  je, tile_count=tile_count, position=position  )
   3510                  call mpp_get_global_domain ( io_domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   3511                  start(1) = is - isg + 1
   3512                  start(2) = js - jsg + 1
   3513                  io_domain => NULL()

Page 135         Source Listing                  READ_RECORD_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3514               end if
   3515           end if
   3516       endif
   3517       if( verbose )print '(a,2i6,i6,12i4)', 'READ_RECORD: PE, unit, nwords, start, axsiz=', pe, unit, nwords, start, axsiz
   3518 
   3519       call read_record_core_r8(unit, field, nwords, data, start, axsiz)
   3520 
   3521       return
   3522     end subroutine read_record_r8


ENTRY POINTS

  Name                                     
                                           
 mpp_io_mod_mp_read_record_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXSIZ                      Local  3426     I(4)            4     1     0        TGT              3457,3459,3485,3491,3492,3500,3504
                                                                                                  ,3517,3519                        
 AXSIZ_IN                   Dummy  3402     I(4)            4     1     1        ARG,IN           3455,3457,3459                    
 DATA                       Dummy  3402     R(8)            8     1     0        ARG,INOUT        3519                              
 DOMAIN                     Dummy  3402     DOMAIN2D        752         scalar   ARG,IN           3488,3489,3490,3508               
 ERROR                      Local  3431     I(4)            4           scalar                                                      
 FIELD                      Dummy  3402     FIELDTYPE       1096        scalar   ARG,IN           3484,3485,3486,3519               
 I                          Local  3431     I(4)            4           scalar                    3484,3485,3486                    
 IE                         Local  3431     I(4)            4           scalar                    3489,3491,3498,3500,3509          
 IEG                        Local  3431     I(4)            4           scalar                    3490,3498,3510                    
 IO_DOMAIN                  Local  3432     DOMAIN2D        752         scalar   PTR              3432,3508,3509,3510,3513          
 IS                         Local  3431     I(4)            4           scalar                    3489,3491,3495,3498,3499,3500,3509
                                                                                                  ,3511                             
 ISG                        Local  3431     I(4)            4           scalar                    3490,3495,3498,3499,3510,3511     
 JE                         Local  3431     I(4)            4           scalar                    3489,3492,3502,3504,3509          
 JEG                        Local  3431     I(4)            4           scalar                    3490,3502,3510                    
 JS                         Local  3431     I(4)            4           scalar                    3489,3492,3496,3502,3503,3504,3509
                                                                                                  ,3512                             
 JSG                        Local  3431     I(4)            4           scalar                    3490,3496,3502,3503,3510,3512     
 MPP_GET_COMPUTE_DOMAIN     Local  3489                                 scalar   PRIV             339,3489,3509,3561,3883,3903,3955,
                                                                                                  6288,7157,7232,7347,7600,7675,7790
                                                                                                  ,8776,8805                        
 MPP_GET_COMPUTE_DOMAIN2D   Subr   3489                                          PRIV             3489,3509,3561,3883,3903,3955,7157
                                                                                                  ,7232,7347,7600,7675,7790         
 MPP_GET_GLOBAL_DOMAIN      Local  3490                                 scalar   PRIV             339,3490,3510,3565,3884,3904,3959,
                                                                                                  6279,6283,6285,7257,7285,7372,7400
                                                                                                  ,7700,7728,7815,7843,8777         
 MPP_GET_GLOBAL_DOMAIN2D    Subr   3490                                          PRIV             3490,3510,3565,3884,3904,3959,6283
                                                                                                  ,6285,7257,7285,7372,7400,7700,772
                                                                                                  8,7815,7843                       
 NWORDS                     Dummy  3402     I(4)            4           scalar   ARG,IN           3421,3517,3519                    
 POSITION                   Dummy  3402     I(4)            4           scalar   ARG,IN           3489,3490,3509,3510               
 PRESENT                    Func   3434                                 scalar                    3434,3447,3455,3488               
 READ_RECORD_R8             Subr   3402                                                           3614,3622,3646,3651,4139,4148,4232
                                                                                                  ,4241,4702,4718,4733,4748,4765,105

Page 136         Source Listing                  READ_RECORD_R8
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_read_2Ddecomp.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  30,10553,10709,10732,10888,10911  
 SIZE                       Func   3456                                 scalar                    3456,3457,3458,3459,3484          
 START                      Local  3426     I(4)            4     1     0        TGT              3456,3458,3483,3486,3495,3496,3499
                                                                                                  ,3503,3511,3512,3517,3519         
 START_IN                   Dummy  3402     I(4)            4     1     1        ARG,IN           3455,3456,3458                    
 TILE_COUNT                 Dummy  3402     I(4)            4           scalar   ARG,IN           3489,3490,3509,3510               
 TIME_LEVEL                 Dummy  3402     I(4)            4           scalar   ARG,IN           3434,3437,3447,3450               
 TLEVEL                     Local  3428     I(4)            4           scalar                    3435,3437,3448,3450,3454,3486     
 UNIT                       Dummy  3402     I(4)            4           scalar   ARG,IN           3441,3442,3444,3445,3454,3493,3507
                                                                                                  ,3517,3519                        

Page 137         Source Listing                  READ_RECORD_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3523 
   3524     subroutine mpp_read_2ddecomp_r2d_r8( unit, field, domain, data, tindex, tile_count )
   3525       integer, intent(in) :: unit
   3526       type(fieldtype), intent(in) :: field
   3527       type(domain2D), intent(in) :: domain
   3528       real(KIND=r8_kind), intent(inout) :: data(:,:)
   3529       integer, intent(in), optional :: tindex, tile_count
   3530       real(KIND=r8_kind) :: data3D(size(data,1),size(data,2),1)
   3531       pointer( ptr, data3D )
   3532       ptr = LOC(data)
   3533       call mpp_read( unit, field, domain, data3D, tindex, tile_count)
   3534       return
   3535     end subroutine mpp_read_2ddecomp_r2d_r8


ENTRY POINTS

  Name                                               
                                                     
 mpp_io_mod_mp_mpp_read_2ddecomp_r2d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  3524     R(8)            8     2     1        ARG,INOUT        3530,3532                         
 DATA3D                     Local  3530     R(8)            8     3     0                         3533                              
 DOMAIN                     Dummy  3524     DOMAIN2D        752         scalar   ARG,IN           3533                              
 FIELD                      Dummy  3524     FIELDTYPE       1096        scalar   ARG,IN           3533                              
 LOC                        Func   3532                                 scalar                    3532                              
 MPP_READ                   Local  3533                                 scalar                    396,3533,3669,3927,4063,4108,4339,
                                                                                                  5870,5876,5882                    
 MPP_READ_2DDECOMP_R2D_R8   Subr   3524                                          PRIV             4108                              
 PTR                        Local  3531     I(8)            8           scalar   PTR              3532                              
 SIZE                       Func   3530                                 scalar                    3530                              
 TILE_COUNT                 Dummy  3524     I(4)            4           scalar   ARG,IN           3533                              
 TINDEX                     Dummy  3524     I(4)            4           scalar   ARG,IN           3533                              
 UNIT                       Dummy  3524     I(4)            4           scalar   ARG,IN           3533                              

Page 138         Source Listing                  MPP_READ_2DDECOMP_R2D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3536 
   3537     subroutine mpp_read_2ddecomp_r3d_r8( unit, field, domain, data, tindex, tile_count )
   3538 !mpp_read reads <data> which has the domain decomposition <domain>
   3539       integer,           intent(in) :: unit
   3540       type(fieldtype),   intent(in) :: field
   3541       type(domain2D),    intent(in) :: domain
   3542       real(KIND=r8_kind),      intent(inout) :: data(:,:,:)
   3543       integer, intent(in), optional :: tindex, tile_count
   3544 
   3545       real(KIND=r8_kind), allocatable :: cdata(:,:,:)
   3546       real(KIND=r8_kind), allocatable :: gdata(:)
   3547       integer :: len, lenx,leny,lenz,i,j,k,n
   3548 !NEW: data may be on compute OR data domain
   3549       logical :: data_has_halos, halos_are_global, x_is_global, y_is_global
   3550       integer :: is, ie, js, je, isd, ied, jsd, jed, isg, ieg, jsg, jeg, ism, iem, jsm, jem
   3551       integer :: ioff, joff, position
   3552 
   3553       call mpp_clock_begin(mpp_read_clock)
   3554 
   3555       if (.NOT. present(tindex) .AND. mpp_file(unit)%time_level .ne. -1) &
   3556       call mpp_error(FATAL, 'MPP_READ: need to specify a time level for data with time axis')
   3557 
   3558       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_READ: must first call mpp_io_init.' )
   3559       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_READ: invalid unit number.' )
   3560 
   3561       call mpp_get_compute_domain( domain, is,  ie,  js,  je, tile_count=tile_count )
   3562       call mpp_get_data_domain   ( domain, isd, ied, jsd, jed, x_is_global=x_is_global, &
   3563                                    y_is_global=y_is_global, tile_count=tile_count )
   3564       call mpp_get_memory_domain ( domain, ism, iem, jsm, jem )
   3565       call mpp_get_global_domain ( domain, isg, ieg, jsg, jeg, tile_count=tile_count )
   3566 
   3567 ! when domain is symmetry, extra point is needed for some data on x/y direction
   3568       position = CENTER
   3569       if(mpp_domain_is_symmetry(domain)) then
   3570          if( size(data,1).EQ.ie-is+1 .AND. size(data,2).EQ.je-js+1 ) then  ! CENTER
   3571             data_has_halos = .FALSE.
   3572          else if( size(data,1).EQ.ie-is+2 .AND. size(data,2).EQ.je-js+1 ) then ! EAST
   3573             data_has_halos = .FALSE.
   3574             position = EAST
   3575             ie = ie + 1
   3576          else if( size(data,1).EQ.ie-is+1 .AND. size(data,2).EQ.je-js+2 ) then ! NORTH
   3577             position = NORTH
   3578             data_has_halos = .FALSE.
   3579             je = je + 1
   3580          else if( size(data,1).EQ.ie-is+2 .AND. size(data,2).EQ.je-js+2 ) then ! CORNER
   3581             position = CORNER
   3582             data_has_halos = .FALSE.
   3583             ie = ie + 1;   je = je + 1
   3584          else if( size(data,1).EQ.iem-ism+1 .AND. size(data,2).EQ.jem-jsm+1 )then ! CENTER
   3585             data_has_halos = .TRUE.
   3586          else if( size(data,1).EQ.iem-ism+2 .AND. size(data,2).EQ.jem-jsm+1 )then ! EAST
   3587             position = EAST
   3588             data_has_halos = .TRUE.
   3589             ie = ie + 1
   3590          else if( size(data,1).EQ.iem-ism+1 .AND. size(data,2).EQ.jem-jsm+2 )then ! NORTH
   3591             position = NORTH
   3592             data_has_halos = .TRUE.

Page 139         Source Listing                  MPP_READ_2DDECOMP_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3593             je = je + 1
   3594          else if( size(data,1).EQ.iem-ism+2 .AND. size(data,2).EQ.jem-jsm+2 )then ! CORNER
   3595             position = CORNER
   3596             data_has_halos = .TRUE.
   3597             ie = ie + 1;  je = je + 1
   3598          else
   3599             call mpp_error( FATAL, 'MPP_READ: when domain is symmetry, data must be either on ' &
   3600                       //'compute domain or data domain with the consideration of shifting.' )
   3601          end if
   3602       else
   3603          if( size(data,1).EQ.ie-is+1 .AND. size(data,2).EQ.je-js+1 )then
   3604             data_has_halos = .FALSE.
   3605          else if( size(data,1).EQ.iem-ism+1 .AND. size(data,2).EQ.jem-jsm+1 )then
   3606             data_has_halos = .TRUE.
   3607          else
   3608             call mpp_error( FATAL, 'MPP_READ: data must be either on compute domain or data domain.' )
   3609          end if
   3610       endif
   3611       halos_are_global = x_is_global .AND. y_is_global
   3612       if( npes.GT.1 .AND. mpp_file(unit)%threading.EQ.MPP_SINGLE )then
   3613           if( halos_are_global )then !you can read directly into data array
   3614               if( pe.EQ.0 )call read_record_r8( unit, field, size(data(:,:,:)), data, tindex )
   3615           else
   3616               lenx=size(data,1)
   3617               leny=size(data,2)
   3618               lenz=size(data,3)
   3619               len=lenx*leny*lenz
   3620               allocate(gdata(len))
   3621 ! read field on pe 0 and pass to all pes
   3622               if( pe.EQ.0 ) call read_record_r8( unit, field, len, gdata, tindex )
   3623 ! broadcasting global array, this can be expensive!
   3624               call mpp_transmit( put_data=gdata(1), plen=len, to_pe=ALL_PES, &
   3625                                  get_data=gdata(1), glen=len, from_pe=0 )
   3626               ioff = is; joff = js
   3627               if( data_has_halos )then
   3628                   ioff = isd; joff = jsd
   3629               end if
   3630               do k=1,size(data,3)
   3631                  do j=js,je
   3632                     do i=is,ie
   3633                        n=(i-isg+1) + (j-jsg)*lenx + (k-1)*lenx*leny
   3634                        data(i-ioff+1,j-joff+1,k)=gdata(n)
   3635                     enddo
   3636                  enddo
   3637               enddo
   3638               deallocate(gdata)
   3639               call mpp_sync_self() ! ensure MPI_ISEND is done.
   3640           end if
   3641       else if( data_has_halos )then
   3642 ! for uniprocessor or multithreaded read
   3643 ! read compute domain as contiguous data
   3644 
   3645           allocate( cdata(is:ie,js:je,size(data,3)) )
   3646           call read_record_r8(unit,field,size(cdata(:,:,:)),cdata,tindex,domain,position,tile_count)
   3647 
   3648           data(is-isd+1:ie-isd+1,js-jsd+1:je-jsd+1,:) = cdata(:,:,:)
   3649           deallocate(cdata)

Page 140         Source Listing                  MPP_READ_2DDECOMP_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3650       else
   3651           call read_record_r8(unit,field,size(data(:,:,:)),data,tindex,domain,position,tile_count)
   3652       end if
   3653 
   3654       call mpp_clock_end(mpp_read_clock)
   3655 
   3656       return
   3657     end subroutine mpp_read_2ddecomp_r3d_r8


ENTRY POINTS

  Name                                               
                                                     
 mpp_io_mod_mp_mpp_read_2ddecomp_r3d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALL_PES                    Param  3624     I(4)            4           scalar   PRIV             329,3624,4018                     
 CDATA                      Local  3545     R(8)            8     3     1        ALC              3645,3646,3648,3649               
 CENTER                     Param  3568     I(4)            4           scalar   PRIV             330,3568,3962,6603,9067           
 CORNER                     Param  3581     I(4)            4           scalar   PRIV             330,3581,3595,3975,3989,6605,9069 
 DATA                       Dummy  3537     R(8)            8     3     1        ARG,INOUT        3570,3572,3576,3580,3584,3586,3590
                                                                                                  ,3594,3603,3605,3614,3616,3617,361
                                                                                                  8,3630,3634,3645,3648,3651        
 DATA_HAS_HALOS             Local  3549     L(4)            4           scalar                    3571,3573,3578,3582,3585,3588,3592
                                                                                                  ,3596,3604,3606,3627,3641         
 DOMAIN                     Dummy  3537     DOMAIN2D        752         scalar   ARG,IN           3561,3562,3564,3565,3569,3646,3651
 EAST                       Param  3574     I(4)            4           scalar   PRIV             330,3574,3587,3968,3981,6607,9071 
 FIELD                      Dummy  3537     FIELDTYPE       1096        scalar   ARG,IN           3614,3622,3646,3651               
 GDATA                      Local  3546     R(8)            8     1     1        ALC              3620,3622,3624,3625,3634,3638     
 HALOS_ARE_GLOBAL           Local  3549     L(4)            4           scalar                    3611,3613                         
 I                          Local  3547     I(4)            4           scalar                    3632,3633,3634                    
 IE                         Local  3550     I(4)            4           scalar                    3561,3570,3572,3575,3576,3580,3583
                                                                                                  ,3589,3597,3603,3632,3645,3648    
 IED                        Local  3550     I(4)            4           scalar                    3562                              
 IEG                        Local  3550     I(4)            4           scalar                    3565                              
 IEM                        Local  3550     I(4)            4           scalar                    3564,3584,3586,3590,3594,3605     
 IOFF                       Local  3551     I(4)            4           scalar                    3626,3628,3634                    
 IS                         Local  3550     I(4)            4           scalar                    3561,3570,3572,3576,3580,3603,3626
                                                                                                  ,3632,3645,3648                   
 ISD                        Local  3550     I(4)            4           scalar                    3562,3628,3648                    
 ISG                        Local  3550     I(4)            4           scalar                    3565,3633                         
 ISM                        Local  3550     I(4)            4           scalar                    3564,3584,3586,3590,3594,3605     
 J                          Local  3547     I(4)            4           scalar                    3631,3633,3634                    
 JE                         Local  3550     I(4)            4           scalar                    3561,3570,3572,3576,3579,3580,3583
                                                                                                  ,3593,3597,3603,3631,3645,3648    
 JED                        Local  3550     I(4)            4           scalar                    3562                              
 JEG                        Local  3550     I(4)            4           scalar                    3565                              
 JEM                        Local  3550     I(4)            4           scalar                    3564,3584,3586,3590,3594,3605     
 JOFF                       Local  3551     I(4)            4           scalar                    3626,3628,3634                    
 JS                         Local  3550     I(4)            4           scalar                    3561,3570,3572,3576,3580,3603,3626
                                                                                                  ,3631,3645,3648                   
 JSD                        Local  3550     I(4)            4           scalar                    3562,3628,3648                    

Page 141         Source Listing                  MPP_READ_2DDECOMP_R3D_R8
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_read_2Ddecomp.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 JSG                        Local  3550     I(4)            4           scalar                    3565,3633                         
 JSM                        Local  3550     I(4)            4           scalar                    3564,3584,3586,3590,3594,3605     
 K                          Local  3547     I(4)            4           scalar                    3630,3633,3634                    
 LEN                        Local  3547     I(4)            4           scalar                    3619,3620,3622,3624,3625          
 LENX                       Local  3547     I(4)            4           scalar                    3616,3619,3633                    
 LENY                       Local  3547     I(4)            4           scalar                    3617,3619,3633                    
 LENZ                       Local  3547     I(4)            4           scalar                    3618,3619                         
 MPP_DOMAIN_IS_SYMMETRY     Func   3569     L(4)            4           scalar   PRIV             341,3569,3963                     
 MPP_GET_DATA_DOMAIN        Local  3562                                 scalar   PRIV             340,3562,3956,7233,7348,7676,7791 
 MPP_GET_DATA_DOMAIN2D      Subr   3562                                          PRIV             3562,3956,7233,7348,7676,7791     
 MPP_GET_MEMORY_DOMAIN      Local  3564                                 scalar   PRIV             340,3564,3958,7235,7350,7678,7793 
 MPP_GET_MEMORY_DOMAIN2D    Subr   3564                                          PRIV             3564,3958,7235,7350,7678,7793     
 MPP_READ_2DDECOMP_R3D_R8   Subr   3537                                          PRIV             3533,3669                         
 MPP_SYNC_SELF              Subr   3639                                          PRIV             333,3639,4033,4157,4160,4250,4253,
                                                                                                  4388,4391,4481,4484,10571,10578,10
                                                                                                  750,10757,10929,10936,11112,11119,
                                                                                                  11291,11298,11470,11477           
 MPP_TRANSMIT               Local  3624                                 scalar   PRIV             333,3624,4018                     
 MPP_TRANSMIT_REAL8_SCALAR  Subr   3624                                          PRIV             3624                              
 N                          Local  3547     I(4)            4           scalar                    3633,3634                         
 NORTH                      Param  3577     I(4)            4           scalar   PRIV             330,3577,3591,3971,3985,6609,9073 
 POSITION                   Local  3551     I(4)            4           scalar                    3568,3574,3577,3581,3587,3591,3595
                                                                                                  ,3646,3651                        
 PRESENT                    Func   3555                                 scalar                    3555                              
 SIZE                       Func   3570                                 scalar                    3570,3572,3576,3580,3584,3586,3590
                                                                                                  ,3594,3603,3605,3614,3616,3617,361
                                                                                                  8,3630,3645,3646,3651             
 TILE_COUNT                 Dummy  3537     I(4)            4           scalar   ARG,IN           3561,3563,3565,3646,3651          
 TINDEX                     Dummy  3537     I(4)            4           scalar   ARG,IN           3555,3614,3622,3646,3651          
 UNIT                       Dummy  3537     I(4)            4           scalar   ARG,IN           3555,3559,3612,3614,3622,3646,3651
 X_IS_GLOBAL                Local  3549     L(4)            4           scalar                    3562,3611                         
 Y_IS_GLOBAL                Local  3549     L(4)            4           scalar                    3563,3611                         

Page 142         Source Listing                  MPP_READ_2DDECOMP_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3658 
   3659 
   3660     subroutine mpp_read_2ddecomp_r4d_r8( unit, field, domain, data, tindex, tile_count )
   3661       integer, intent(in) :: unit
   3662       type(fieldtype), intent(in) :: field
   3663       type(domain2D), intent(in) :: domain
   3664       real(KIND=r8_kind), intent(inout) :: data(:,:,:,:)
   3665       integer, intent(in), optional :: tindex, tile_count
   3666       real(KIND=r8_kind) :: data3D(size(data,1),size(data,2),size(data,3)*size(data,4))
   3667       pointer( ptr, data3D )
   3668       ptr = LOC(data)
   3669       call mpp_read( unit, field, domain, data3D, tindex, tile_count)
   3670       return
   3671     end subroutine mpp_read_2ddecomp_r4d_r8


ENTRY POINTS

  Name                                               
                                                     
 mpp_io_mod_mp_mpp_read_2ddecomp_r4d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  3660     R(8)            8     4     1        ARG,INOUT        3666,3668                         
 DATA3D                     Local  3666     R(8)            8     3     0                         3669                              
 DOMAIN                     Dummy  3660     DOMAIN2D        752         scalar   ARG,IN           3669                              
 FIELD                      Dummy  3660     FIELDTYPE       1096        scalar   ARG,IN           3669                              
 LOC                        Func   3668                                 scalar                    3668                              
 MPP_READ_2DDECOMP_R4D_R8   Subr   3660                                          PRIV                                               
 PTR                        Local  3667     I(8)            8           scalar   PTR              3668                              
 SIZE                       Func   3666                                 scalar                    3666                              
 TILE_COUNT                 Dummy  3660     I(4)            4           scalar   ARG,IN           3669                              
 TINDEX                     Dummy  3660     I(4)            4           scalar   ARG,IN           3669                              
 UNIT                       Dummy  3660     I(4)            4           scalar   ARG,IN           3669                              

Page 143         Source Listing                  MPP_READ_2DDECOMP_R4D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3672 # 41 "../mpp/include/mpp_io_read.inc" 2 
   3673 
   3674 
   3675 
   3676 
   3677 
   3678 
   3679 
   3680 
   3681 
   3682 
   3683 
   3684 
   3685 
   3686 # 1 "../mpp/include/mpp_read_2Ddecomp.h" 1 
   3687 !***********************************************************************
   3688 !*                   GNU Lesser General Public License
   3689 !*
   3690 !* This file is part of the GFDL Flexible Modeling System (FMS).
   3691 !*
   3692 !* FMS is free software: you can redistribute it and/or modify it under
   3693 !* the terms of the GNU Lesser General Public License as published by
   3694 !* the Free Software Foundation, either version 3 of the License, or (at
   3695 !* your option) any later version.
   3696 !*
   3697 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   3698 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   3699 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   3700 !* for more details.
   3701 !*
   3702 !* You should have received a copy of the GNU Lesser General Public
   3703 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   3704 !***********************************************************************
   3705     subroutine read_record_core_r4(unit, field, nwords, data, start, axsiz)
   3706       integer,         intent(in)    :: unit
   3707       type(fieldtype), intent(in)    :: field
   3708       integer,         intent(in)    :: nwords
   3709       real(KIND=r4_kind),        intent(inout) :: data(nwords)
   3710       integer,         intent(in)    :: start(:), axsiz(:)
   3711 
   3712       integer(i2_kind) :: i2vals(nwords)
   3713 !rab used in conjunction with transfer intrinsic to determine size of a variable
   3714       integer(KIND=1) :: one_byte(8)
   3715       integer         :: word_sz
   3716       integer(i4_kind) :: ivals(nwords)
   3717       real(r4_kind) :: rvals(nwords)
   3718 
   3719       real(r8_kind) :: r8vals(nwords)
   3720       pointer( ptr1, i2vals )
   3721       pointer( ptr2, ivals )
   3722       pointer( ptr3, rvals )
   3723       pointer( ptr4, r8vals )
   3724       if (mpp_io_stack_size < nwords) call mpp_io_set_stack_size(nwords)
   3725 
   3726 
   3727       word_sz = size(transfer(data(1),one_byte))
   3728 

Page 144         Source Listing                  READ_RECORD_CORE_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3729           select case (field%type)
   3730              case(NF_BYTE)
   3731 ! use type conversion
   3732                 call mpp_error( FATAL, 'MPP_READ: does not support NF_BYTE packing' )
   3733              case(NF_SHORT)
   3734                 ptr1 = LOC(mpp_io_stack(1))
   3735                 error = NF_GET_VARA_INT2  ( mpp_file(unit)%ncid, field%id, start, axsiz, i2vals )
   3736                 call netcdf_err( error, mpp_file(unit), field=field )
   3737                 if(field%scale == 1.0 .and. field%add == 0.0) then
   3738                    data(:)=i2vals(:)
   3739                 else
   3740                    data(:)=i2vals(:)*field%scale + field%add
   3741                 end if
   3742              case(NF_INT)
   3743 
   3744                 ptr2 = LOC(mpp_io_stack(1))
   3745 
   3746                 error = NF_GET_VARA_INT   ( mpp_file(unit)%ncid, field%id, start, axsiz, ivals  )
   3747                 call netcdf_err( error, mpp_file(unit), field=field )
   3748                 if(field%scale == 1.0 .and. field%add == 0.0) then
   3749                    data(:)=ivals(:)
   3750                 else
   3751                    data(:)=ivals(:)*field%scale + field%add
   3752                 end if
   3753              case(NF_FLOAT)
   3754                 ptr3 = LOC(mpp_io_stack(1))
   3755                 if (size(transfer(rvals(1),one_byte)) .eq. word_sz) then
   3756                   error = NF90_GET_VAR  ( mpp_file(unit)%ncid, field%id, data, start=start, count=axsiz )
   3757                   call netcdf_err( error, mpp_file(unit), field=field )
   3758                   if(field%scale /= 1.0 .or. field%add /= 0.0) then
   3759                      data(:)=data(:)*field%scale + field%add
   3760                   end if
   3761                 else
   3762                   error = NF_GET_VARA_REAL  ( mpp_file(unit)%ncid, field%id, start, axsiz, rvals )
   3763                   call netcdf_err( error, mpp_file(unit), field=field )
   3764                   if(field%scale == 1.0 .and. field%add == 0.0) then
   3765                      data(:)=rvals(:)
   3766                   else
   3767                      data(:)=rvals(:)*field%scale + field%add
   3768                   end if
   3769                 end if
   3770              case(NF_DOUBLE)
   3771                 ptr4 = LOC(mpp_io_stack(1))
   3772                 if (size(transfer(r8vals(1),one_byte)) .eq. word_sz) then
   3773                   error = NF90_GET_VAR( mpp_file(unit)%ncid, field%id, data, start=start, count=axsiz )
   3774                   call netcdf_err( error, mpp_file(unit), field=field )
   3775                   if(field%scale /= 1.0 .or. field%add /= 0.0) then
   3776                      data(:)=data(:)*field%scale + field%add
   3777                   end if
   3778                 else
   3779                   error = NF_GET_VARA_DOUBLE( mpp_file(unit)%ncid, field%id, start, axsiz, r8vals )
   3780                   call netcdf_err( error, mpp_file(unit), field=field )
   3781                   if(field%scale == 1.0 .and. field%add == 0.0) then
   3782                      data(:)=r8vals(:)
   3783                   else
   3784                      data(:)=r8vals(:)*field%scale + field%add
   3785                   end if

Page 145         Source Listing                  READ_RECORD_CORE_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3786                 end if
   3787              case default
   3788                 call mpp_error( FATAL, 'MPP_READ: invalid pack value' )
   3789           end select
   3790 # 106
   3791 
   3792 
   3793     end subroutine read_record_core_r4


ENTRY POINTS

  Name                                          
                                                
 mpp_io_mod_mp_read_record_core_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXSIZ                      Dummy  3705     I(4)            4     1     1        ARG,IN           3735,3746,3756,3762,3773,3779     
 DATA                       Dummy  3705     R(4)            4     1     0        ARG,TGT,INOUT    3727,3738,3740,3749,3751,3756,3759
                                                                                                  ,3765,3767,3773,3776,3782,3784    
 FIELD                      Dummy  3705     FIELDTYPE       1096        scalar   ARG,IN           3729,3735,3736,3737,3740,3746,3747
                                                                                                  ,3748,3751,3756,3757,3758,3759,376
                                                                                                  2,3763,3764,3767,3773,3774,3775,37
                                                                                                  76,3779,3780,3781,3784            
 I2VALS                     Local  3712     I(2)            2     1     0                         3735,3738,3740                    
 IVALS                      Local  3716     I(4)            4     1     0                         3746,3749,3751                    
 LOC                        Func   3734                                 scalar                    3734,3744,3754,3771               
 NF90_GET_VAR_1D_FOURBYTERE                                                                                                         
 AL                         Func   3756     I(4)            4           scalar   PRIV             3756,3773                         
 NWORDS                     Dummy  3705     I(4)            4           scalar   ARG,IN           3709,3712,3716,3717,3719,3724     
 ONE_BYTE                   Local  3714     I(1)            1     1     8                         3727,3755,3772                    
 PTR1                       Local  3720     I(8)            8           scalar   PTR              3734                              
 PTR2                       Local  3721     I(8)            8           scalar   PTR              3744                              
 PTR3                       Local  3722     I(8)            8           scalar   PTR              3754                              
 PTR4                       Local  3723     I(8)            8           scalar   PTR              3771                              
 R8VALS                     Local  3719     R(8)            8     1     0                         3772,3779,3782,3784               
 READ_RECORD_CORE_R4        Subr   3705                                                           3913,4862,4883                    
 RVALS                      Local  3717     R(4)            4     1     0                         3755,3762,3765,3767               
 SIZE                       Func   3727                                 scalar                    3727,3755,3772                    
 START                      Dummy  3705     I(4)            4     1     1        ARG,IN           3735,3746,3756,3762,3773,3779     
 TRANSFER                   Func   3727                                 scalar                    3727,3755,3772                    
 UNIT                       Dummy  3705     I(4)            4           scalar   ARG,IN           3735,3736,3746,3747,3756,3757,3762
                                                                                                  ,3763,3773,3774,3779,3780         
 WORD_SZ                    Local  3715     I(4)            4           scalar                    3727,3755,3772                    

Page 146         Source Listing                  READ_RECORD_CORE_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3794 
   3795 
   3796     subroutine read_record_r4( unit, field, nwords, data, time_level, domain, position, tile_count, start_in, axsiz_in )
   3797 !routine that is finally called by all mpp_read routines to perform the read
   3798 !a non-netCDF record contains:
   3799 !      field ID
   3800 !      a set of 4 coordinates (is:ie,js:je) giving the data subdomain
   3801 !      a timelevel and a timestamp (=NULLTIME if field is static)
   3802 !      3D real data (stored as 1D)
   3803 !if you are using direct access I/O, the RECL argument to OPEN must be large enough for the above
   3804 !in a global direct access file, record position on PE is given by %record.
   3805 
   3806 !Treatment of timestamp:
   3807 !   We assume that static fields have been passed without a timestamp.
   3808 !   Here that is converted into a timestamp of NULLTIME.
   3809 !   For non-netCDF fields, field is treated no differently, but is written
   3810 !   with a timestamp of NULLTIME. There is no check in the code to prevent
   3811 !   the user from repeatedly writing a static field.
   3812 
   3813       integer,         intent(in)             :: unit, nwords
   3814       type(fieldtype), intent(in)             :: field
   3815       real(KIND=r4_kind),      intent(inout)           :: data(nwords)
   3816       integer,        intent(in),    optional :: time_level
   3817       type(domain2D), intent(in),    optional :: domain
   3818       integer,        intent(in),    optional :: position, tile_count
   3819       integer,        intent(in),    optional :: start_in(:), axsiz_in(:)
   3820       integer, dimension(size(field%axes(:))) :: start, axsiz
   3821 
   3822       integer :: tlevel !,subdomain(4)
   3823 
   3824 
   3825       integer :: i, error, is, ie, js, je, isg, ieg, jsg, jeg
   3826       type(domain2d), pointer :: io_domain=>NULL()
   3827 
   3828       if (.not.PRESENT(time_level)) then
   3829           tlevel = 0
   3830       else
   3831           tlevel = time_level
   3832       endif
   3833 
   3834       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'READ_RECORD: must first call mpp_io_init.' )
   3835       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'READ_RECORD: invalid unit number.' )
   3836       if( .NOT.mpp_file(unit)%read_on_this_pe )return
   3837 
   3838       if( .NOT.mpp_file(unit)%initialized ) call mpp_error( FATAL, 'MPP_READ: must first call mpp_read_meta.' )
   3839       if( mpp_file(unit)%format .NE. MPP_NETCDF ) call mpp_error( FATAL, 'Currently dont support non-NetCDF mpp read' )
   3840 
   3841       if (.not.PRESENT(time_level)) then
   3842           tlevel = 0
   3843       else
   3844           tlevel = time_level
   3845       endif
   3846 
   3847       if( verbose )print '(a,2i6,2i5)', 'MPP_READ: PE, unit, %id, %time_level =',&
   3848            pe, unit, mpp_file(unit)%id, tlevel
   3849       if( PRESENT(start_in) .AND. PRESENT(axsiz_in) ) then
   3850          if(size(start(:)) > size(start_in(:)) )call mpp_error( FATAL, 'MPP_READ: size(start_in) < size(start)')

Page 147         Source Listing                  READ_RECORD_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3851          if(size(axsiz(:)) > size(axsiz_in(:)) )call mpp_error( FATAL, 'MPP_READ: size(axsiz_in) < size(axsiz)')
   3852          start(:) = start_in(1:size(start(:)))
   3853          axsiz(:) = axsiz_in(1:size(axsiz(:)))
   3854       else
   3855 !define netCDF data block to be read:
   3856 !  time axis: START = time level
   3857 !             AXSIZ = 1
   3858 !  space axis: if there is no domain info
   3859 !              START = 1
   3860 !              AXSIZ = field%size(axis)
   3861 !          if there IS domain info:
   3862 !              start of domain is compute%start_index for multi-file I/O
   3863 !                                 global%start_index for all other cases
   3864 !              this number must be converted to 1 for NF_GET_VAR
   3865 !                  (netCDF fortran calls are with reference to 1),
   3866 !          So, START = compute%start_index - <start of domain> + 1
   3867 !              AXSIZ = usually compute%size
   3868 !          However, if compute%start_index-compute%end_index+1.NE.compute%size,
   3869 !              we assume that the call is passing a subdomain.
   3870 !              To pass a subdomain, you must pass a domain2D object that satisfies the following:
   3871 !                  global%start_index must contain the <start of domain> as defined above;
   3872 !                  the data domain and compute domain must refer to the subdomain being passed.
   3873 !              In this case, START = compute%start_index - <start of domain> + 1
   3874 !                            AXSIZ = compute%start_index - compute%end_index + 1
   3875 ! NOTE: passing of subdomains will fail for multi-PE single-threaded I/O,
   3876 !       since that attempts to gather all data on PE 0.
   3877           start = 1
   3878           do i = 1,size(field%axes(:))
   3879              axsiz(i) = field%size(i)
   3880              if( i .EQ. field%time_axis_index )start(i) = tlevel
   3881           end do
   3882           if( PRESENT(domain) )then
   3883               call mpp_get_compute_domain( domain, is,  ie,  js,  je, tile_count=tile_count, position=position  )
   3884               call mpp_get_global_domain ( domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   3885               axsiz(1) = ie-is+1
   3886               axsiz(2) = je-js+1
   3887               if( mpp_file(unit)%fileset.EQ.MPP_SINGLE )then
   3888                  if( npes.GT.1 )then
   3889                     start(1) = is - isg + 1
   3890                     start(2) = js - jsg + 1
   3891                  else   !--- z1l fix a problem related obc when npes = 1
   3892                     if( ie-is+1.NE.ieg-isg+1 )then
   3893                        start(1) = is - isg + 1
   3894                        axsiz(1) = ie - is + 1
   3895                     end if
   3896                     if( je-js+1.NE.jeg-jsg+1 )then
   3897                        start(2) = js - jsg + 1
   3898                        axsiz(2) = je - js + 1
   3899                     end if
   3900                  end if
   3901               else if( mpp_file(unit)%io_domain_exist ) then
   3902                  io_domain=>mpp_get_io_domain(domain)
   3903                  call mpp_get_compute_domain( io_domain, is,  ie,  js,  je, tile_count=tile_count, position=position  )
   3904                  call mpp_get_global_domain ( io_domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   3905                  start(1) = is - isg + 1
   3906                  start(2) = js - jsg + 1
   3907                  io_domain => NULL()

Page 148         Source Listing                  READ_RECORD_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3908               end if
   3909           end if
   3910       endif
   3911       if( verbose )print '(a,2i6,i6,12i4)', 'READ_RECORD: PE, unit, nwords, start, axsiz=', pe, unit, nwords, start, axsiz
   3912 
   3913       call read_record_core_r4(unit, field, nwords, data, start, axsiz)
   3914 
   3915       return
   3916     end subroutine read_record_r4


ENTRY POINTS

  Name                                     
                                           
 mpp_io_mod_mp_read_record_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXSIZ                      Local  3820     I(4)            4     1     0        TGT              3851,3853,3879,3885,3886,3894,3898
                                                                                                  ,3911,3913                        
 AXSIZ_IN                   Dummy  3796     I(4)            4     1     1        ARG,IN           3849,3851,3853                    
 DATA                       Dummy  3796     R(4)            4     1     0        ARG,INOUT        3913                              
 DOMAIN                     Dummy  3796     DOMAIN2D        752         scalar   ARG,IN           3882,3883,3884,3902               
 ERROR                      Local  3825     I(4)            4           scalar                                                      
 FIELD                      Dummy  3796     FIELDTYPE       1096        scalar   ARG,IN           3878,3879,3880,3913               
 I                          Local  3825     I(4)            4           scalar                    3878,3879,3880                    
 IE                         Local  3825     I(4)            4           scalar                    3883,3885,3892,3894,3903          
 IEG                        Local  3825     I(4)            4           scalar                    3884,3892,3904                    
 IO_DOMAIN                  Local  3826     DOMAIN2D        752         scalar   PTR              3826,3902,3903,3904,3907          
 IS                         Local  3825     I(4)            4           scalar                    3883,3885,3889,3892,3893,3894,3903
                                                                                                  ,3905                             
 ISG                        Local  3825     I(4)            4           scalar                    3884,3889,3892,3893,3904,3905     
 JE                         Local  3825     I(4)            4           scalar                    3883,3886,3896,3898,3903          
 JEG                        Local  3825     I(4)            4           scalar                    3884,3896,3904                    
 JS                         Local  3825     I(4)            4           scalar                    3883,3886,3890,3896,3897,3898,3903
                                                                                                  ,3906                             
 JSG                        Local  3825     I(4)            4           scalar                    3884,3890,3896,3897,3904,3906     
 NWORDS                     Dummy  3796     I(4)            4           scalar   ARG,IN           3815,3911,3913                    
 POSITION                   Dummy  3796     I(4)            4           scalar   ARG,IN           3883,3884,3903,3904               
 PRESENT                    Func   3828                                 scalar                    3828,3841,3849,3882               
 READ_RECORD_R4             Subr   3796                                                           4008,4016,4040,4045,4370,4379,4463
                                                                                                  ,4472,4781,4797,4812,4827,4844,110
                                                                                                  71,11094,11250,11273,11429,11452  
 SIZE                       Func   3850                                 scalar                    3850,3851,3852,3853,3878          
 START                      Local  3820     I(4)            4     1     0        TGT              3850,3852,3877,3880,3889,3890,3893
                                                                                                  ,3897,3905,3906,3911,3913         
 START_IN                   Dummy  3796     I(4)            4     1     1        ARG,IN           3849,3850,3852                    
 TILE_COUNT                 Dummy  3796     I(4)            4           scalar   ARG,IN           3883,3884,3903,3904               
 TIME_LEVEL                 Dummy  3796     I(4)            4           scalar   ARG,IN           3828,3831,3841,3844               
 TLEVEL                     Local  3822     I(4)            4           scalar                    3829,3831,3842,3844,3848,3880     
 UNIT                       Dummy  3796     I(4)            4           scalar   ARG,IN           3835,3836,3838,3839,3848,3887,3901
                                                                                                  ,3911,3913                        

Page 149         Source Listing                  READ_RECORD_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3917 
   3918     subroutine mpp_read_2ddecomp_r2d_r4( unit, field, domain, data, tindex, tile_count )
   3919       integer, intent(in) :: unit
   3920       type(fieldtype), intent(in) :: field
   3921       type(domain2D), intent(in) :: domain
   3922       real(KIND=r4_kind), intent(inout) :: data(:,:)
   3923       integer, intent(in), optional :: tindex, tile_count
   3924       real(KIND=r4_kind) :: data3D(size(data,1),size(data,2),1)
   3925       pointer( ptr, data3D )
   3926       ptr = LOC(data)
   3927       call mpp_read( unit, field, domain, data3D, tindex, tile_count)
   3928       return
   3929     end subroutine mpp_read_2ddecomp_r2d_r4


ENTRY POINTS

  Name                                               
                                                     
 mpp_io_mod_mp_mpp_read_2ddecomp_r2d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  3918     R(4)            4     2     1        ARG,INOUT        3924,3926                         
 DATA3D                     Local  3924     R(4)            4     3     0                         3927                              
 DOMAIN                     Dummy  3918     DOMAIN2D        752         scalar   ARG,IN           3927                              
 FIELD                      Dummy  3918     FIELDTYPE       1096        scalar   ARG,IN           3927                              
 LOC                        Func   3926                                 scalar                    3926                              
 MPP_READ_2DDECOMP_R2D_R4   Subr   3918                                          PRIV             4339                              
 PTR                        Local  3925     I(8)            8           scalar   PTR              3926                              
 SIZE                       Func   3924                                 scalar                    3924                              
 TILE_COUNT                 Dummy  3918     I(4)            4           scalar   ARG,IN           3927                              
 TINDEX                     Dummy  3918     I(4)            4           scalar   ARG,IN           3927                              
 UNIT                       Dummy  3918     I(4)            4           scalar   ARG,IN           3927                              

Page 150         Source Listing                  MPP_READ_2DDECOMP_R2D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3930 
   3931     subroutine mpp_read_2ddecomp_r3d_r4( unit, field, domain, data, tindex, tile_count )
   3932 !mpp_read reads <data> which has the domain decomposition <domain>
   3933       integer,           intent(in) :: unit
   3934       type(fieldtype),   intent(in) :: field
   3935       type(domain2D),    intent(in) :: domain
   3936       real(KIND=r4_kind),      intent(inout) :: data(:,:,:)
   3937       integer, intent(in), optional :: tindex, tile_count
   3938 
   3939       real(KIND=r4_kind), allocatable :: cdata(:,:,:)
   3940       real(KIND=r4_kind), allocatable :: gdata(:)
   3941       integer :: len, lenx,leny,lenz,i,j,k,n
   3942 !NEW: data may be on compute OR data domain
   3943       logical :: data_has_halos, halos_are_global, x_is_global, y_is_global
   3944       integer :: is, ie, js, je, isd, ied, jsd, jed, isg, ieg, jsg, jeg, ism, iem, jsm, jem
   3945       integer :: ioff, joff, position
   3946 
   3947       call mpp_clock_begin(mpp_read_clock)
   3948 
   3949       if (.NOT. present(tindex) .AND. mpp_file(unit)%time_level .ne. -1) &
   3950       call mpp_error(FATAL, 'MPP_READ: need to specify a time level for data with time axis')
   3951 
   3952       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_READ: must first call mpp_io_init.' )
   3953       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_READ: invalid unit number.' )
   3954 
   3955       call mpp_get_compute_domain( domain, is,  ie,  js,  je, tile_count=tile_count )
   3956       call mpp_get_data_domain   ( domain, isd, ied, jsd, jed, x_is_global=x_is_global, &
   3957                                    y_is_global=y_is_global, tile_count=tile_count )
   3958       call mpp_get_memory_domain ( domain, ism, iem, jsm, jem )
   3959       call mpp_get_global_domain ( domain, isg, ieg, jsg, jeg, tile_count=tile_count )
   3960 
   3961 ! when domain is symmetry, extra point is needed for some data on x/y direction
   3962       position = CENTER
   3963       if(mpp_domain_is_symmetry(domain)) then
   3964          if( size(data,1).EQ.ie-is+1 .AND. size(data,2).EQ.je-js+1 ) then  ! CENTER
   3965             data_has_halos = .FALSE.
   3966          else if( size(data,1).EQ.ie-is+2 .AND. size(data,2).EQ.je-js+1 ) then ! EAST
   3967             data_has_halos = .FALSE.
   3968             position = EAST
   3969             ie = ie + 1
   3970          else if( size(data,1).EQ.ie-is+1 .AND. size(data,2).EQ.je-js+2 ) then ! NORTH
   3971             position = NORTH
   3972             data_has_halos = .FALSE.
   3973             je = je + 1
   3974          else if( size(data,1).EQ.ie-is+2 .AND. size(data,2).EQ.je-js+2 ) then ! CORNER
   3975             position = CORNER
   3976             data_has_halos = .FALSE.
   3977             ie = ie + 1;   je = je + 1
   3978          else if( size(data,1).EQ.iem-ism+1 .AND. size(data,2).EQ.jem-jsm+1 )then ! CENTER
   3979             data_has_halos = .TRUE.
   3980          else if( size(data,1).EQ.iem-ism+2 .AND. size(data,2).EQ.jem-jsm+1 )then ! EAST
   3981             position = EAST
   3982             data_has_halos = .TRUE.
   3983             ie = ie + 1
   3984          else if( size(data,1).EQ.iem-ism+1 .AND. size(data,2).EQ.jem-jsm+2 )then ! NORTH
   3985             position = NORTH
   3986             data_has_halos = .TRUE.

Page 151         Source Listing                  MPP_READ_2DDECOMP_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   3987             je = je + 1
   3988          else if( size(data,1).EQ.iem-ism+2 .AND. size(data,2).EQ.jem-jsm+2 )then ! CORNER
   3989             position = CORNER
   3990             data_has_halos = .TRUE.
   3991             ie = ie + 1;  je = je + 1
   3992          else
   3993             call mpp_error( FATAL, 'MPP_READ: when domain is symmetry, data must be either on ' &
   3994                       //'compute domain or data domain with the consideration of shifting.' )
   3995          end if
   3996       else
   3997          if( size(data,1).EQ.ie-is+1 .AND. size(data,2).EQ.je-js+1 )then
   3998             data_has_halos = .FALSE.
   3999          else if( size(data,1).EQ.iem-ism+1 .AND. size(data,2).EQ.jem-jsm+1 )then
   4000             data_has_halos = .TRUE.
   4001          else
   4002             call mpp_error( FATAL, 'MPP_READ: data must be either on compute domain or data domain.' )
   4003          end if
   4004       endif
   4005       halos_are_global = x_is_global .AND. y_is_global
   4006       if( npes.GT.1 .AND. mpp_file(unit)%threading.EQ.MPP_SINGLE )then
   4007           if( halos_are_global )then !you can read directly into data array
   4008               if( pe.EQ.0 )call read_record_r4( unit, field, size(data(:,:,:)), data, tindex )
   4009           else
   4010               lenx=size(data,1)
   4011               leny=size(data,2)
   4012               lenz=size(data,3)
   4013               len=lenx*leny*lenz
   4014               allocate(gdata(len))
   4015 ! read field on pe 0 and pass to all pes
   4016               if( pe.EQ.0 ) call read_record_r4( unit, field, len, gdata, tindex )
   4017 ! broadcasting global array, this can be expensive!
   4018               call mpp_transmit( put_data=gdata(1), plen=len, to_pe=ALL_PES, &
   4019                                  get_data=gdata(1), glen=len, from_pe=0 )
   4020               ioff = is; joff = js
   4021               if( data_has_halos )then
   4022                   ioff = isd; joff = jsd
   4023               end if
   4024               do k=1,size(data,3)
   4025                  do j=js,je
   4026                     do i=is,ie
   4027                        n=(i-isg+1) + (j-jsg)*lenx + (k-1)*lenx*leny
   4028                        data(i-ioff+1,j-joff+1,k)=gdata(n)
   4029                     enddo
   4030                  enddo
   4031               enddo
   4032               deallocate(gdata)
   4033               call mpp_sync_self() ! ensure MPI_ISEND is done.
   4034           end if
   4035       else if( data_has_halos )then
   4036 ! for uniprocessor or multithreaded read
   4037 ! read compute domain as contiguous data
   4038 
   4039           allocate( cdata(is:ie,js:je,size(data,3)) )
   4040           call read_record_r4(unit,field,size(cdata(:,:,:)),cdata,tindex,domain,position,tile_count)
   4041 
   4042           data(is-isd+1:ie-isd+1,js-jsd+1:je-jsd+1,:) = cdata(:,:,:)
   4043           deallocate(cdata)

Page 152         Source Listing                  MPP_READ_2DDECOMP_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   4044       else
   4045           call read_record_r4(unit,field,size(data(:,:,:)),data,tindex,domain,position,tile_count)
   4046       end if
   4047 
   4048       call mpp_clock_end(mpp_read_clock)
   4049 
   4050       return
   4051     end subroutine mpp_read_2ddecomp_r3d_r4


ENTRY POINTS

  Name                                               
                                                     
 mpp_io_mod_mp_mpp_read_2ddecomp_r3d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  3939     R(4)            4     3     1        ALC              4039,4040,4042,4043               
 DATA                       Dummy  3931     R(4)            4     3     1        ARG,INOUT        3964,3966,3970,3974,3978,3980,3984
                                                                                                  ,3988,3997,3999,4008,4010,4011,401
                                                                                                  2,4024,4028,4039,4042,4045        
 DATA_HAS_HALOS             Local  3943     L(4)            4           scalar                    3965,3967,3972,3976,3979,3982,3986
                                                                                                  ,3990,3998,4000,4021,4035         
 DOMAIN                     Dummy  3931     DOMAIN2D        752         scalar   ARG,IN           3955,3956,3958,3959,3963,4040,4045
 FIELD                      Dummy  3931     FIELDTYPE       1096        scalar   ARG,IN           4008,4016,4040,4045               
 GDATA                      Local  3940     R(4)            4     1     1        ALC              4014,4016,4018,4019,4028,4032     
 HALOS_ARE_GLOBAL           Local  3943     L(4)            4           scalar                    4005,4007                         
 I                          Local  3941     I(4)            4           scalar                    4026,4027,4028                    
 IE                         Local  3944     I(4)            4           scalar                    3955,3964,3966,3969,3970,3974,3977
                                                                                                  ,3983,3991,3997,4026,4039,4042    
 IED                        Local  3944     I(4)            4           scalar                    3956                              
 IEG                        Local  3944     I(4)            4           scalar                    3959                              
 IEM                        Local  3944     I(4)            4           scalar                    3958,3978,3980,3984,3988,3999     
 IOFF                       Local  3945     I(4)            4           scalar                    4020,4022,4028                    
 IS                         Local  3944     I(4)            4           scalar                    3955,3964,3966,3970,3974,3997,4020
                                                                                                  ,4026,4039,4042                   
 ISD                        Local  3944     I(4)            4           scalar                    3956,4022,4042                    
 ISG                        Local  3944     I(4)            4           scalar                    3959,4027                         
 ISM                        Local  3944     I(4)            4           scalar                    3958,3978,3980,3984,3988,3999     
 J                          Local  3941     I(4)            4           scalar                    4025,4027,4028                    
 JE                         Local  3944     I(4)            4           scalar                    3955,3964,3966,3970,3973,3974,3977
                                                                                                  ,3987,3991,3997,4025,4039,4042    
 JED                        Local  3944     I(4)            4           scalar                    3956                              
 JEG                        Local  3944     I(4)            4           scalar                    3959                              
 JEM                        Local  3944     I(4)            4           scalar                    3958,3978,3980,3984,3988,3999     
 JOFF                       Local  3945     I(4)            4           scalar                    4020,4022,4028                    
 JS                         Local  3944     I(4)            4           scalar                    3955,3964,3966,3970,3974,3997,4020
                                                                                                  ,4025,4039,4042                   
 JSD                        Local  3944     I(4)            4           scalar                    3956,4022,4042                    
 JSG                        Local  3944     I(4)            4           scalar                    3959,4027                         
 JSM                        Local  3944     I(4)            4           scalar                    3958,3978,3980,3984,3988,3999     
 K                          Local  3941     I(4)            4           scalar                    4024,4027,4028                    
 LEN                        Local  3941     I(4)            4           scalar                    4013,4014,4016,4018,4019          

Page 153         Source Listing                  MPP_READ_2DDECOMP_R3D_R4
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_read_2Ddecomp.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LENX                       Local  3941     I(4)            4           scalar                    4010,4013,4027                    
 LENY                       Local  3941     I(4)            4           scalar                    4011,4013,4027                    
 LENZ                       Local  3941     I(4)            4           scalar                    4012,4013                         
 MPP_READ_2DDECOMP_R3D_R4   Subr   3931                                          PRIV             3927,4063                         
 MPP_TRANSMIT_REAL4_SCALAR  Subr   4018                                          PRIV             4018                              
 N                          Local  3941     I(4)            4           scalar                    4027,4028                         
 POSITION                   Local  3945     I(4)            4           scalar                    3962,3968,3971,3975,3981,3985,3989
                                                                                                  ,4040,4045                        
 PRESENT                    Func   3949                                 scalar                    3949                              
 SIZE                       Func   3964                                 scalar                    3964,3966,3970,3974,3978,3980,3984
                                                                                                  ,3988,3997,3999,4008,4010,4011,401
                                                                                                  2,4024,4039,4040,4045             
 TILE_COUNT                 Dummy  3931     I(4)            4           scalar   ARG,IN           3955,3957,3959,4040,4045          
 TINDEX                     Dummy  3931     I(4)            4           scalar   ARG,IN           3949,4008,4016,4040,4045          
 UNIT                       Dummy  3931     I(4)            4           scalar   ARG,IN           3949,3953,4006,4008,4016,4040,4045
 X_IS_GLOBAL                Local  3943     L(4)            4           scalar                    3956,4005                         
 Y_IS_GLOBAL                Local  3943     L(4)            4           scalar                    3957,4005                         

Page 154         Source Listing                  MPP_READ_2DDECOMP_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   4052 
   4053 
   4054     subroutine mpp_read_2ddecomp_r4d_r4( unit, field, domain, data, tindex, tile_count )
   4055       integer, intent(in) :: unit
   4056       type(fieldtype), intent(in) :: field
   4057       type(domain2D), intent(in) :: domain
   4058       real(KIND=r4_kind), intent(inout) :: data(:,:,:,:)
   4059       integer, intent(in), optional :: tindex, tile_count
   4060       real(KIND=r4_kind) :: data3D(size(data,1),size(data,2),size(data,3)*size(data,4))
   4061       pointer( ptr, data3D )
   4062       ptr = LOC(data)
   4063       call mpp_read( unit, field, domain, data3D, tindex, tile_count)
   4064       return
   4065     end subroutine mpp_read_2ddecomp_r4d_r4


ENTRY POINTS

  Name                                               
                                                     
 mpp_io_mod_mp_mpp_read_2ddecomp_r4d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4054     R(4)            4     4     1        ARG,INOUT        4060,4062                         
 DATA3D                     Local  4060     R(4)            4     3     0                         4063                              
 DOMAIN                     Dummy  4054     DOMAIN2D        752         scalar   ARG,IN           4063                              
 FIELD                      Dummy  4054     FIELDTYPE       1096        scalar   ARG,IN           4063                              
 LOC                        Func   4062                                 scalar                    4062                              
 MPP_READ_2DDECOMP_R4D_R4   Subr   4054                                          PRIV                                               
 PTR                        Local  4061     I(8)            8           scalar   PTR              4062                              
 SIZE                       Func   4060                                 scalar                    4060                              
 TILE_COUNT                 Dummy  4054     I(4)            4           scalar   ARG,IN           4063                              
 TINDEX                     Dummy  4054     I(4)            4           scalar   ARG,IN           4063                              
 UNIT                       Dummy  4054     I(4)            4           scalar   ARG,IN           4063                              

Page 155         Source Listing                  MPP_READ_2DDECOMP_R4D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_2Ddecomp.h

   4066 # 55 "../mpp/include/mpp_io_read.inc" 2 
   4067 
   4068 
   4069 
   4070 
   4071 
   4072 
   4073 
   4074 
   4075 
   4076 
   4077 
   4078 # 1 "../mpp/include/mpp_read_compressed.h" 1 
   4079 !***********************************************************************
   4080 !*                   GNU Lesser General Public License
   4081 !*
   4082 !* This file is part of the GFDL Flexible Modeling System (FMS).
   4083 !*
   4084 !* FMS is free software: you can redistribute it and/or modify it under
   4085 !* the terms of the GNU Lesser General Public License as published by
   4086 !* the Free Software Foundation, either version 3 of the License, or (at
   4087 !* your option) any later version.
   4088 !*
   4089 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   4090 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   4091 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   4092 !* for more details.
   4093 !*
   4094 !* You should have received a copy of the GNU Lesser General Public
   4095 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   4096 !***********************************************************************
   4097     subroutine mpp_read_compressed_r1d_r8(unit, field, domain, data, tindex)
   4098       integer, intent(in) :: unit
   4099       type(fieldtype), intent(in) :: field
   4100       type(domain2D),  intent(in) :: domain
   4101       real(KIND=r8_kind), intent(inout) :: data(:)
   4102       integer,           intent(in), optional :: tindex
   4103 
   4104       real(KIND=r8_kind) :: data2D(size(data,1),1)
   4105       pointer( ptr, data2D )
   4106       ptr = LOC(data)
   4107 
   4108       call mpp_read(unit, field, domain, data2D, tindex)
   4109       return
   4110     end subroutine mpp_read_compressed_r1d_r8

Page 156         Source Listing                  MPP_READ_COMPRESSED_R1D_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_read_compressed.h



ENTRY POINTS

  Name                                                 
                                                       
 mpp_io_mod_mp_mpp_read_compressed_r1d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4097     R(8)            8     1     1        ARG,INOUT        4104,4106                         
 DATA2D                     Local  4104     R(8)            8     2     0                         4108                              
 DOMAIN                     Dummy  4097     DOMAIN2D        752         scalar   ARG,IN           4108                              
 FIELD                      Dummy  4097     FIELDTYPE       1096        scalar   ARG,IN           4108                              
 LOC                        Func   4106                                 scalar                    4106                              
 MPP_READ_COMPRESSED_R1D_R8 Subr   4097                                          PRIV                                               
 PTR                        Local  4105     I(8)            8           scalar   PTR              4106                              
 SIZE                       Func   4104                                 scalar                    4104                              
 TINDEX                     Dummy  4097     I(4)            4           scalar   ARG,IN           4108                              
 UNIT                       Dummy  4097     I(4)            4           scalar   ARG,IN           4108                              

Page 157         Source Listing                  MPP_READ_COMPRESSED_R1D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_compressed.h

   4111 
   4112     subroutine mpp_read_compressed_r2d_r8(unit, field, domain, data, tindex, start, nread, threading)
   4113       integer,           intent(in)           :: unit
   4114       type(fieldtype),   intent(in)           :: field
   4115       type(domain2D),    intent(in)           :: domain
   4116       real(KIND=r8_kind),         intent(inout)        :: data(:,:)
   4117       integer,           intent(in), optional :: tindex
   4118       integer,           intent(in), optional :: start(:), nread(:)
   4119       integer,           intent(in), optional :: threading
   4120 
   4121       integer, allocatable :: pelist(:)
   4122       integer :: npes, p, threading_flag
   4123       type(domain2d), pointer :: io_domain=>NULL()
   4124       logical :: compute_chksum,print_compressed_chksum
   4125       integer(i8_kind) ::chk
   4126 
   4127       call mpp_clock_begin(mpp_read_clock)
   4128 
   4129       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_READ_COMPRESSED_2D_: must first call mpp_io_init.' )
   4130       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_READ_COMPRESSED_2D_: invalid unit number.' )
   4131 
   4132       print_compressed_chksum = .FALSE.
   4133 
   4134     if(size(data) > 0) then
   4135       data = 0 !! zero out data so other tiles do not contribute junk to chksum
   4136       threading_flag = MPP_SINGLE
   4137       if( PRESENT(threading) )threading_flag = threading
   4138       if( threading_flag == MPP_MULTI ) then
   4139         call read_record_r8(unit,field,size(data(:,:)),data,tindex,start_in=start, axsiz_in=nread)
   4140       else if( threading_flag == MPP_SINGLE ) then
   4141 
   4142         io_domain=>mpp_get_io_domain(domain)
   4143         if(.not. ASSOCIATED(io_domain)) call mpp_error( FATAL, 'MPP_READ_COMPRESSED_2D_: io_domain must be defined.' )
   4144         npes = mpp_get_domain_npes(io_domain)
   4145         allocate(pelist(npes))
   4146         call mpp_get_pelist(io_domain,pelist)
   4147 
   4148         if(mpp_pe() == pelist(1)) call read_record_r8(unit,field,size(data(:,:)),data,tindex,start_in=start, axsiz_in=nread)
   4149 
   4150 !--- z1l replace mpp_broadcast with mpp_send/mpp_recv to avoid hang in calling MPI_COMM_CREATE
   4151 !---     because size(pelist) might be different for different rank.
   4152 !--- prepost receive
   4153         if( mpp_pe() == pelist(1) ) then
   4154           do p = 2, npes
   4155             call mpp_send(data(1,1), plen=size(data(:,:)), to_pe=pelist(p), tag=COMM_TAG_1)
   4156           enddo
   4157           call mpp_sync_self()
   4158         else
   4159           call mpp_recv(data(1,1), glen=size(data(:,:)), from_pe=pelist(1), block=.false., tag=COMM_TAG_1)
   4160           call mpp_sync_self(check=EVENT_RECV)
   4161         endif
   4162 
   4163         deallocate(pelist)
   4164       else
   4165         call mpp_error( FATAL, 'MPP_READ_COMPRESSED_2D_: threading should be MPP_SINGLE or MPP_MULTI')
   4166       endif
   4167     endif

Page 158         Source Listing                  MPP_READ_COMPRESSED_R2D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_compressed.h

   4168 
   4169       compute_chksum = .FALSE.
   4170       if (ANY(field%checksum /= default_field%checksum) ) compute_chksum = .TRUE.
   4171 
   4172       if (compute_chksum) then
   4173 
   4174       if (field%type==NF_INT) then
   4175          if (field%fill == MPP_FILL_DOUBLE .or. field%fill == real(MPP_FILL_INT) ) then
   4176             chk = mpp_chksum( ceiling(data), mask_val=MPP_FILL_INT )
   4177          else
   4178             call mpp_error(NOTE,"During mpp_io(mpp_read_compressed_2d) int field "//trim(field%name)// &
   4179                 " found fill. Icebergs, or code using defaults can safely ignore. "// &
   4180                 " If manually overriding compressed restart fills, confirm this is what you want.")
   4181             chk = mpp_chksum( ceiling(data), mask_val=field%fill)
   4182          end if
   4183       else !!real data
   4184          chk = mpp_chksum(data,mask_val=real(field%fill,KIND(data)))
   4185       end if
   4186 
   4187 !!compare
   4188          if ( print_compressed_chksum) then
   4189             if ( mpp_pe() == mpp_root_pe() ) then
   4190                print '(A,Z16)', "mpp_read_compressed_2d chksum: "//trim(field%name)//" = ", chk
   4191 !! discuss making fatal after testing/review to match other routines.
   4192 !! Need to do some nword-counting and digging with pjp
   4193 !! this should be if ( chk /= field%checksum ) as it was tested @ulm_201505..
   4194                if ( MOD(chk, field%checksum(1)) /= 0 ) then
   4195                   print '(A,Z16)', "File stored checksum: "//trim(field%name)//" = ", field%checksum(1)
   4196                   call mpp_error(NOTE,"mpp_read_compressed_2d chksum: "//trim(field%name)//" failed!")
   4197                end if
   4198             endif
   4199          end if
   4200       end if
   4201 
   4202       call mpp_clock_end(mpp_read_clock)
   4203       return
   4204     end subroutine mpp_read_compressed_r2d_r8

Page 159         Source Listing                  MPP_READ_COMPRESSED_R2D_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_read_compressed.h



ENTRY POINTS

  Name                                                 
                                                       
 mpp_io_mod_mp_mpp_read_compressed_r2d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   4170                                 scalar                    4170                              
 ASSOCIATED                 Func   4143                                 scalar                    4143                              
 CEILING                    Func   4176                                 scalar                    4176,4181                         
 CHK                        Local  4125     I(8)            8           scalar                    4176,4181,4184,4190,4194          
 COMM_TAG_1                 Param  4155     I(4)            4           scalar   PRIV             337,4155,4159,4248,4252,4386,4390,
                                                                                                  4479,4483,10569,10577,10748,10756,
                                                                                                  10927,10935,11110,11118,11289,1129
                                                                                                  7,11468,11476                     
 COMPUTE_CHKSUM             Local  4124     L(4)            4           scalar                    4169,4170,4172                    
 DATA                       Dummy  4112     R(8)            8     2     1        ARG,INOUT        4134,4135,4139,4148,4155,4159,4176
                                                                                                  ,4181,4184                        
 DOMAIN                     Dummy  4112     DOMAIN2D        752         scalar   ARG,IN           4142                              
 EVENT_RECV                 Param  4160     I(4)            4           scalar   PRIV             337,4160,4253,4391,4484,10578,1075
                                                                                                  7,10936,11119,11298,11477         
 FIELD                      Dummy  4112     FIELDTYPE       1096        scalar   ARG,IN           4139,4148,4170,4174,4175,4178,4181
                                                                                                  ,4184,4190,4194,4195,4196         
 IO_DOMAIN                  Local  4123     DOMAIN2D        752         scalar   PTR              4123,4142,4143,4144,4146          
 KIND                       Func   4184                                 scalar   PRIV             4184,4276,4415,4507,6849,6852,6857
                                                                                                  ,6860,6868,6871,6879,6882,6891,689
                                                                                                  4,6905,6908,6917,7136,7138,7579,75
                                                                                                  81,10617,10796,10975,11158,11337,1
                                                                                                  1516                              
 MOD                        Func   4194                                 scalar                    4194                              
 MPP_CHKSUM                 Local  4176                                 scalar   PRIV             347,4176,4181,4184,4268,4273,4276,
                                                                                                  4407,4412,4415,4499,4504,4507,1060
                                                                                                  2,10613,10617,10781,10792,10796,10
                                                                                                  960,10971,10975,11143,11154,11158,
                                                                                                  11322,11333,11337,11501,11512,1151
                                                                                                  6                                 
 MPP_CHKSUM_I4_2D           Func   4176     I(8)            8           scalar   PRIV             4176,4407,10781,11322             
 MPP_CHKSUM_I4_2D_RMASK     Func   4181     I(8)            8           scalar   PRIV             4181,4412,10792,11333             
 MPP_CHKSUM_R8_2D           Func   4184     I(8)            8           scalar   PRIV             4184,10796                        
 MPP_FILL_INT               Param  4175     I(4)            4           scalar   PRIV             346,4175,4176,4267,4268,4406,4407,
                                                                                                  4498,4499,6763,10601,10603,10780,1
                                                                                                  0782,10959,10961,11142,11144,11321
                                                                                                  ,11323,11500,11502                
 MPP_GET_PELIST             Local  4146                                 scalar   PRIV             340,4146,4239,4377,4470,7979,8128,
                                                                                                  8223                              
 MPP_GET_PELIST2D           Subr   4146                                          PRIV             4146,4239,4377,4470,7979,8128,8223
 MPP_READ_COMPRESSED_R2D_R8 Subr   4112                                          PRIV                                               
 MPP_RECV                   Local  4159                                 scalar   PRIV             337,4159,4252,4390,4483,10573,1075
                                                                                                  2,10931,11114,11293,11472         
 MPP_RECV_REAL8_SCALAR      Subr   4159                                          PRIV             4159,4252                         
 MPP_SEND                   Local  4155                                 scalar   PRIV             337,4155,4248,4386,4479,10566,1074

Page 160         Source Listing                  MPP_READ_COMPRESSED_R2D_R8
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_read_compressed.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5,10924,11107,11286,11465         
 MPP_SEND_REAL8_SCALAR      Subr   4155                                          PRIV             4155,4248                         
 NPES                       Local  4122     I(4)            4           scalar                    4144,4145,4154                    
 NREAD                      Dummy  4112     I(4)            4     1     1        ARG,IN           4139,4148                         
 P                          Local  4122     I(4)            4           scalar                    4154,4155                         
 PELIST                     Local  4121     I(4)            4     1     1        ALC              4145,4146,4148,4153,4155,4159,4163
 PRESENT                    Func   4137                                 scalar                    4137                              
 PRINT_COMPRESSED_CHKSUM    Local  4124     L(4)            4           scalar                    4132,4188                         
 REAL                       Func   4175                                 scalar                    4175,4184                         
 SIZE                       Func   4134                                 scalar                    4134,4139,4148,4155,4159          
 START                      Dummy  4112     I(4)            4     1     1        ARG,IN           4139,4148                         
 THREADING                  Dummy  4112     I(4)            4           scalar   ARG,IN           4137                              
 THREADING_FLAG             Local  4122     I(4)            4           scalar                    4136,4137,4138,4140               
 TINDEX                     Dummy  4112     I(4)            4           scalar   ARG,IN           4139,4148                         
 TRIM                       Func   4178                                 scalar                    4178,4190,4195,4196               
 UNIT                       Dummy  4112     I(4)            4           scalar   ARG,IN           4130,4139,4148                    

Page 161         Source Listing                  MPP_READ_COMPRESSED_R2D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_compressed.h

   4205 
   4206     subroutine mpp_read_compressed_r3d_r8(unit, field, domain, data, tindex, start, nread, threading)
   4207       integer, intent(in)      :: unit
   4208       type(fieldtype), intent(in)      :: field
   4209       type(domain2D), intent(in)      :: domain
   4210       real(KIND=r8_kind), intent(inout)      :: data(:,:,:)
   4211       integer, intent(in), optional :: tindex
   4212       integer, intent(in), optional :: start(:), nread(:)
   4213       integer, intent(in), optional :: threading
   4214 
   4215       integer, allocatable :: pelist(:)
   4216       integer :: npes, p, threading_flag
   4217       type(domain2d), pointer :: io_domain=>NULL()
   4218       logical :: compute_chksum,print_compressed_chksum
   4219       integer(i8_kind) ::chk
   4220 
   4221       call mpp_clock_begin(mpp_read_clock)
   4222 
   4223       data = 0 !! zero out data so other tiles do not contribute junk to chksum
   4224 
   4225       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_READ_COMPRESSED_3D_: must first call mpp_io_init.' )
   4226       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_READ_COMPRESSED_3D_: invalid unit number.' )
   4227 
   4228       print_compressed_chksum = .FALSE.
   4229       threading_flag = MPP_SINGLE
   4230       if( PRESENT(threading) )threading_flag = threading
   4231       if( threading_flag == MPP_MULTI ) then
   4232          call read_record_r8(unit,field,size(data(:,:,:)),data,tindex,start_in=start, axsiz_in=nread)
   4233       else if( threading_flag == MPP_SINGLE ) then
   4234 
   4235          io_domain=>mpp_get_io_domain(domain)
   4236          if(.not. ASSOCIATED(io_domain)) call mpp_error( FATAL, 'MPP_READ_COMPRESSED_3D_: io_domain must be defined.' )
   4237          npes = mpp_get_domain_npes(io_domain)
   4238          allocate(pelist(npes))
   4239          call mpp_get_pelist(io_domain,pelist)
   4240 
   4241          if(mpp_pe() == pelist(1)) call read_record_r8(unit,field,size(data(:,:,:)),data,tindex,start_in=start, axsiz_in=nre
   4241 ad)
   4242 
   4243 !--- z1l replace mpp_broadcast with mpp_send/mpp_recv to avoid hang in calling MPI_COMM_CREATE
   4244 !---  because size(pelist) might be different for different rank.
   4245 !--- prepost receive
   4246          if( mpp_pe() == pelist(1) ) then
   4247             do p = 2, npes
   4248                call mpp_send(data(1,1,1), plen=size(data(:,:,:)), to_pe=pelist(p), tag=COMM_TAG_1)
   4249             enddo
   4250             call mpp_sync_self()
   4251          else
   4252             call mpp_recv(data(1,1,1), glen=size(data(:,:,:)), from_pe=pelist(1), block=.false., tag=COMM_TAG_1)
   4253             call mpp_sync_self(check=EVENT_RECV)
   4254          endif
   4255 
   4256          deallocate(pelist)
   4257       else
   4258          call mpp_error( FATAL, 'MPP_READ_COMPRESSED_3D_: threading should be MPP_SINGLE or MPP_MULTI')
   4259       endif
   4260 

Page 162         Source Listing                  MPP_READ_COMPRESSED_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_compressed.h

   4261       compute_chksum = .FALSE.
   4262       if (ANY(field%checksum /= default_field%checksum) ) compute_chksum = .TRUE.
   4263 
   4264       if (compute_chksum) then
   4265 
   4266       if (field%type==NF_INT) then
   4267          if (field%fill == MPP_FILL_DOUBLE .or. field%fill == real(MPP_FILL_INT) ) then
   4268             chk = mpp_chksum( ceiling(data), mask_val=MPP_FILL_INT )
   4269          else
   4270             call mpp_error(NOTE,"During mpp_io(mpp_read_compressed_3d) int field "//trim(field%name)// &
   4271                " found fill. Icebergs, or code using defaults can safely ignore. "// &
   4272                " If manually overriding compressed restart fills, confirm this is what you want.")
   4273             chk = mpp_chksum( ceiling(data), mask_val=field%fill)
   4274          end if
   4275       else !!real
   4276          chk = mpp_chksum(data,mask_val=real(field%fill,KIND(data)))
   4277       end if
   4278 
   4279 !!compare
   4280          if ( print_compressed_chksum) then
   4281             if ( mpp_pe() == mpp_root_pe() ) then
   4282                print '(A,Z16)', "mpp_read_compressed_3d chksum: "//trim(field%name)//" = ", chk
   4283 !! discuss making fatal after testing/review to match other routines.
   4284 !! Need to do some nword-counting and digging with pjp
   4285 !! this should be if ( chk /= field%checksum ) as it was tested @ulm_201505..
   4286                if ( MOD(chk, field%checksum(1)) /= 0 ) then
   4287                   print '(A,Z16)', "File stored checksum: "//trim(field%name)//" = ", field%checksum(1)
   4288                   call mpp_error(NOTE,"mpp_read_compressed_3d chksum: "//trim(field%name)//" failed!")
   4289                end if
   4290             endif
   4291          end if
   4292       end if
   4293 
   4294       call mpp_clock_end(mpp_read_clock)
   4295       return
   4296     end subroutine mpp_read_compressed_r3d_r8

Page 163         Source Listing                  MPP_READ_COMPRESSED_R3D_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_read_compressed.h



ENTRY POINTS

  Name                                                 
                                                       
 mpp_io_mod_mp_mpp_read_compressed_r3d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   4262                                 scalar                    4262                              
 ASSOCIATED                 Func   4236                                 scalar                    4236                              
 CEILING                    Func   4268                                 scalar                    4268,4273                         
 CHK                        Local  4219     I(8)            8           scalar                    4268,4273,4276,4282,4286          
 COMPUTE_CHKSUM             Local  4218     L(4)            4           scalar                    4261,4262,4264                    
 DATA                       Dummy  4206     R(8)            8     3     1        ARG,INOUT        4223,4232,4241,4248,4252,4268,4273
                                                                                                  ,4276                             
 DOMAIN                     Dummy  4206     DOMAIN2D        752         scalar   ARG,IN           4235                              
 FIELD                      Dummy  4206     FIELDTYPE       1096        scalar   ARG,IN           4232,4241,4262,4266,4267,4270,4273
                                                                                                  ,4276,4282,4286,4287,4288         
 IO_DOMAIN                  Local  4217     DOMAIN2D        752         scalar   PTR              4217,4235,4236,4237,4239          
 MOD                        Func   4286                                 scalar                    4286                              
 MPP_CHKSUM_I4_3D           Func   4268     I(8)            8           scalar   PRIV             4268,4499,10960,11501             
 MPP_CHKSUM_I4_3D_RMASK     Func   4273     I(8)            8           scalar   PRIV             4273,4504,10971,11512             
 MPP_CHKSUM_R8_3D           Func   4276     I(8)            8           scalar   PRIV             4276,10975                        
 MPP_READ_COMPRESSED_R3D_R8 Subr   4206                                          PRIV                                               
 NPES                       Local  4216     I(4)            4           scalar                    4237,4238,4247                    
 NREAD                      Dummy  4206     I(4)            4     1     1        ARG,IN           4232,4241                         
 P                          Local  4216     I(4)            4           scalar                    4247,4248                         
 PELIST                     Local  4215     I(4)            4     1     1        ALC              4238,4239,4241,4246,4248,4252,4256
 PRESENT                    Func   4230                                 scalar                    4230                              
 PRINT_COMPRESSED_CHKSUM    Local  4218     L(4)            4           scalar                    4228,4280                         
 REAL                       Func   4267                                 scalar                    4267,4276                         
 SIZE                       Func   4232                                 scalar                    4232,4241,4248,4252               
 START                      Dummy  4206     I(4)            4     1     1        ARG,IN           4232,4241                         
 THREADING                  Dummy  4206     I(4)            4           scalar   ARG,IN           4230                              
 THREADING_FLAG             Local  4216     I(4)            4           scalar                    4229,4230,4231,4233               
 TINDEX                     Dummy  4206     I(4)            4           scalar   ARG,IN           4232,4241                         
 TRIM                       Func   4270                                 scalar                    4270,4282,4287,4288               
 UNIT                       Dummy  4206     I(4)            4           scalar   ARG,IN           4226,4232,4241                    

Page 164         Source Listing                  MPP_READ_COMPRESSED_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_read_compressed.h

   4297 # 67 "../mpp/include/mpp_io_read.inc" 2 
   4298 
   4299 
   4300 
   4301 
   4302 
   4303 
   4304 
   4305 
   4306 
   4307 
   4308 
   4309 # 1 "../mpp/include/mpp_read_compressed.h" 1 
   4310 !***********************************************************************
   4311 !*                   GNU Lesser General Public License
   4312 !*
   4313 !* This file is part of the GFDL Flexible Modeling System (FMS).
   4314 !*
   4315 !* FMS is free software: you can redistribute it and/or modify it under
   4316 !* the terms of the GNU Lesser General Public License as published by
   4317 !* the Free Software Foundation, either version 3 of the License, or (at
   4318 !* your option) any later version.
   4319 !*
   4320 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   4321 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   4322 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   4323 !* for more details.
   4324 !*
   4325 !* You should have received a copy of the GNU Lesser General Public
   4326 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   4327 !***********************************************************************
   4328     subroutine mpp_read_compressed_r1d_r4(unit, field, domain, data, tindex)
   4329       integer, intent(in) :: unit
   4330       type(fieldtype), intent(in) :: field
   4331       type(domain2D),  intent(in) :: domain
   4332       real(KIND=r4_kind), intent(inout) :: data(:)
   4333       integer,           intent(in), optional :: tindex
   4334 
   4335       real(KIND=r4_kind) :: data2D(size(data,1),1)
   4336       pointer( ptr, data2D )
   4337       ptr = LOC(data)
   4338 
   4339       call mpp_read(unit, field, domain, data2D, tindex)
   4340       return
   4341     end subroutine mpp_read_compressed_r1d_r4

Page 165         Source Listing                  MPP_READ_COMPRESSED_R1D_R4
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_read_compressed.h



ENTRY POINTS

  Name                                                 
                                                       
 mpp_io_mod_mp_mpp_read_compressed_r1d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4328     R(4)            4     1     1        ARG,INOUT        4335,4337                         
 DATA2D                     Local  4335     R(4)            4     2     0                         4339                              
 DOMAIN                     Dummy  4328     DOMAIN2D        752         scalar   ARG,IN           4339                              
 FIELD                      Dummy  4328     FIELDTYPE       1096        scalar   ARG,IN           4339                              
 LOC                        Func   4337                                 scalar                    4337                              
 MPP_READ_COMPRESSED_R1D_R4 Subr   4328                                          PRIV                                               
 PTR                        Local  4336     I(8)            8           scalar   PTR              4337                              
 SIZE                       Func   4335                                 scalar                    4335                              
 TINDEX                     Dummy  4328     I(4)            4           scalar   ARG,IN           4339                              
 UNIT                       Dummy  4328     I(4)            4           scalar   ARG,IN           4339                              

Page 166         Source Listing                  MPP_READ_COMPRESSED_R1D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_compressed.h

   4342 
   4343     subroutine mpp_read_compressed_r2d_r4(unit, field, domain, data, tindex, start, nread, threading)
   4344       integer,           intent(in)           :: unit
   4345       type(fieldtype),   intent(in)           :: field
   4346       type(domain2D),    intent(in)           :: domain
   4347       real(KIND=r4_kind),         intent(inout)        :: data(:,:)
   4348       integer,           intent(in), optional :: tindex
   4349       integer,           intent(in), optional :: start(:), nread(:)
   4350       integer,           intent(in), optional :: threading
   4351 
   4352       integer, allocatable :: pelist(:)
   4353       integer :: npes, p, threading_flag
   4354       type(domain2d), pointer :: io_domain=>NULL()
   4355       logical :: compute_chksum,print_compressed_chksum
   4356       integer(i8_kind) ::chk
   4357 
   4358       call mpp_clock_begin(mpp_read_clock)
   4359 
   4360       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_READ_COMPRESSED_2D_: must first call mpp_io_init.' )
   4361       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_READ_COMPRESSED_2D_: invalid unit number.' )
   4362 
   4363       print_compressed_chksum = .FALSE.
   4364 
   4365     if(size(data) > 0) then
   4366       data = 0 !! zero out data so other tiles do not contribute junk to chksum
   4367       threading_flag = MPP_SINGLE
   4368       if( PRESENT(threading) )threading_flag = threading
   4369       if( threading_flag == MPP_MULTI ) then
   4370         call read_record_r4(unit,field,size(data(:,:)),data,tindex,start_in=start, axsiz_in=nread)
   4371       else if( threading_flag == MPP_SINGLE ) then
   4372 
   4373         io_domain=>mpp_get_io_domain(domain)
   4374         if(.not. ASSOCIATED(io_domain)) call mpp_error( FATAL, 'MPP_READ_COMPRESSED_2D_: io_domain must be defined.' )
   4375         npes = mpp_get_domain_npes(io_domain)
   4376         allocate(pelist(npes))
   4377         call mpp_get_pelist(io_domain,pelist)
   4378 
   4379         if(mpp_pe() == pelist(1)) call read_record_r4(unit,field,size(data(:,:)),data,tindex,start_in=start, axsiz_in=nread)
   4380 
   4381 !--- z1l replace mpp_broadcast with mpp_send/mpp_recv to avoid hang in calling MPI_COMM_CREATE
   4382 !---     because size(pelist) might be different for different rank.
   4383 !--- prepost receive
   4384         if( mpp_pe() == pelist(1) ) then
   4385           do p = 2, npes
   4386             call mpp_send(data(1,1), plen=size(data(:,:)), to_pe=pelist(p), tag=COMM_TAG_1)
   4387           enddo
   4388           call mpp_sync_self()
   4389         else
   4390           call mpp_recv(data(1,1), glen=size(data(:,:)), from_pe=pelist(1), block=.false., tag=COMM_TAG_1)
   4391           call mpp_sync_self(check=EVENT_RECV)
   4392         endif
   4393 
   4394         deallocate(pelist)
   4395       else
   4396         call mpp_error( FATAL, 'MPP_READ_COMPRESSED_2D_: threading should be MPP_SINGLE or MPP_MULTI')
   4397       endif
   4398     endif

Page 167         Source Listing                  MPP_READ_COMPRESSED_R2D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_compressed.h

   4399 
   4400       compute_chksum = .FALSE.
   4401       if (ANY(field%checksum /= default_field%checksum) ) compute_chksum = .TRUE.
   4402 
   4403       if (compute_chksum) then
   4404 
   4405       if (field%type==NF_INT) then
   4406          if (field%fill == MPP_FILL_DOUBLE .or. field%fill == real(MPP_FILL_INT) ) then
   4407             chk = mpp_chksum( ceiling(data), mask_val=MPP_FILL_INT )
   4408          else
   4409             call mpp_error(NOTE,"During mpp_io(mpp_read_compressed_2d) int field "//trim(field%name)// &
   4410                 " found fill. Icebergs, or code using defaults can safely ignore. "// &
   4411                 " If manually overriding compressed restart fills, confirm this is what you want.")
   4412             chk = mpp_chksum( ceiling(data), mask_val=field%fill)
   4413          end if
   4414       else !!real data
   4415          chk = mpp_chksum(data,mask_val=real(field%fill,KIND(data)))
   4416       end if
   4417 
   4418 !!compare
   4419          if ( print_compressed_chksum) then
   4420             if ( mpp_pe() == mpp_root_pe() ) then
   4421                print '(A,Z16)', "mpp_read_compressed_2d chksum: "//trim(field%name)//" = ", chk
   4422 !! discuss making fatal after testing/review to match other routines.
   4423 !! Need to do some nword-counting and digging with pjp
   4424 !! this should be if ( chk /= field%checksum ) as it was tested @ulm_201505..
   4425                if ( MOD(chk, field%checksum(1)) /= 0 ) then
   4426                   print '(A,Z16)', "File stored checksum: "//trim(field%name)//" = ", field%checksum(1)
   4427                   call mpp_error(NOTE,"mpp_read_compressed_2d chksum: "//trim(field%name)//" failed!")
   4428                end if
   4429             endif
   4430          end if
   4431       end if
   4432 
   4433       call mpp_clock_end(mpp_read_clock)
   4434       return
   4435     end subroutine mpp_read_compressed_r2d_r4

Page 168         Source Listing                  MPP_READ_COMPRESSED_R2D_R4
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_read_compressed.h



ENTRY POINTS

  Name                                                 
                                                       
 mpp_io_mod_mp_mpp_read_compressed_r2d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   4401                                 scalar                    4401                              
 ASSOCIATED                 Func   4374                                 scalar                    4374                              
 CEILING                    Func   4407                                 scalar                    4407,4412                         
 CHK                        Local  4356     I(8)            8           scalar                    4407,4412,4415,4421,4425          
 COMPUTE_CHKSUM             Local  4355     L(4)            4           scalar                    4400,4401,4403                    
 DATA                       Dummy  4343     R(4)            4     2     1        ARG,INOUT        4365,4366,4370,4379,4386,4390,4407
                                                                                                  ,4412,4415                        
 DOMAIN                     Dummy  4343     DOMAIN2D        752         scalar   ARG,IN           4373                              
 FIELD                      Dummy  4343     FIELDTYPE       1096        scalar   ARG,IN           4370,4379,4401,4405,4406,4409,4412
                                                                                                  ,4415,4421,4425,4426,4427         
 IO_DOMAIN                  Local  4354     DOMAIN2D        752         scalar   PTR              4354,4373,4374,4375,4377          
 MOD                        Func   4425                                 scalar                    4425                              
 MPP_CHKSUM_R4_2D           Func   4415     I(8)            8           scalar   PRIV             4415,11337                        
 MPP_READ_COMPRESSED_R2D_R4 Subr   4343                                          PRIV                                               
 MPP_RECV_REAL4_SCALAR      Subr   4390                                          PRIV             4390,4483                         
 MPP_SEND_REAL4_SCALAR      Subr   4386                                          PRIV             4386,4479                         
 NPES                       Local  4353     I(4)            4           scalar                    4375,4376,4385                    
 NREAD                      Dummy  4343     I(4)            4     1     1        ARG,IN           4370,4379                         
 P                          Local  4353     I(4)            4           scalar                    4385,4386                         
 PELIST                     Local  4352     I(4)            4     1     1        ALC              4376,4377,4379,4384,4386,4390,4394
 PRESENT                    Func   4368                                 scalar                    4368                              
 PRINT_COMPRESSED_CHKSUM    Local  4355     L(4)            4           scalar                    4363,4419                         
 REAL                       Func   4406                                 scalar                    4406,4415                         
 SIZE                       Func   4365                                 scalar                    4365,4370,4379,4386,4390          
 START                      Dummy  4343     I(4)            4     1     1        ARG,IN           4370,4379                         
 THREADING                  Dummy  4343     I(4)            4           scalar   ARG,IN           4368                              
 THREADING_FLAG             Local  4353     I(4)            4           scalar                    4367,4368,4369,4371               
 TINDEX                     Dummy  4343     I(4)            4           scalar   ARG,IN           4370,4379                         
 TRIM                       Func   4409                                 scalar                    4409,4421,4426,4427               
 UNIT                       Dummy  4343     I(4)            4           scalar   ARG,IN           4361,4370,4379                    

Page 169         Source Listing                  MPP_READ_COMPRESSED_R2D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_compressed.h

   4436 
   4437     subroutine mpp_read_compressed_r3d_r4(unit, field, domain, data, tindex, start, nread, threading)
   4438       integer, intent(in)      :: unit
   4439       type(fieldtype), intent(in)      :: field
   4440       type(domain2D), intent(in)      :: domain
   4441       real(KIND=r4_kind), intent(inout)      :: data(:,:,:)
   4442       integer, intent(in), optional :: tindex
   4443       integer, intent(in), optional :: start(:), nread(:)
   4444       integer, intent(in), optional :: threading
   4445 
   4446       integer, allocatable :: pelist(:)
   4447       integer :: npes, p, threading_flag
   4448       type(domain2d), pointer :: io_domain=>NULL()
   4449       logical :: compute_chksum,print_compressed_chksum
   4450       integer(i8_kind) ::chk
   4451 
   4452       call mpp_clock_begin(mpp_read_clock)
   4453 
   4454       data = 0 !! zero out data so other tiles do not contribute junk to chksum
   4455 
   4456       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_READ_COMPRESSED_3D_: must first call mpp_io_init.' )
   4457       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_READ_COMPRESSED_3D_: invalid unit number.' )
   4458 
   4459       print_compressed_chksum = .FALSE.
   4460       threading_flag = MPP_SINGLE
   4461       if( PRESENT(threading) )threading_flag = threading
   4462       if( threading_flag == MPP_MULTI ) then
   4463          call read_record_r4(unit,field,size(data(:,:,:)),data,tindex,start_in=start, axsiz_in=nread)
   4464       else if( threading_flag == MPP_SINGLE ) then
   4465 
   4466          io_domain=>mpp_get_io_domain(domain)
   4467          if(.not. ASSOCIATED(io_domain)) call mpp_error( FATAL, 'MPP_READ_COMPRESSED_3D_: io_domain must be defined.' )
   4468          npes = mpp_get_domain_npes(io_domain)
   4469          allocate(pelist(npes))
   4470          call mpp_get_pelist(io_domain,pelist)
   4471 
   4472          if(mpp_pe() == pelist(1)) call read_record_r4(unit,field,size(data(:,:,:)),data,tindex,start_in=start, axsiz_in=nre
   4472 ad)
   4473 
   4474 !--- z1l replace mpp_broadcast with mpp_send/mpp_recv to avoid hang in calling MPI_COMM_CREATE
   4475 !---  because size(pelist) might be different for different rank.
   4476 !--- prepost receive
   4477          if( mpp_pe() == pelist(1) ) then
   4478             do p = 2, npes
   4479                call mpp_send(data(1,1,1), plen=size(data(:,:,:)), to_pe=pelist(p), tag=COMM_TAG_1)
   4480             enddo
   4481             call mpp_sync_self()
   4482          else
   4483             call mpp_recv(data(1,1,1), glen=size(data(:,:,:)), from_pe=pelist(1), block=.false., tag=COMM_TAG_1)
   4484             call mpp_sync_self(check=EVENT_RECV)
   4485          endif
   4486 
   4487          deallocate(pelist)
   4488       else
   4489          call mpp_error( FATAL, 'MPP_READ_COMPRESSED_3D_: threading should be MPP_SINGLE or MPP_MULTI')
   4490       endif
   4491 

Page 170         Source Listing                  MPP_READ_COMPRESSED_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_compressed.h

   4492       compute_chksum = .FALSE.
   4493       if (ANY(field%checksum /= default_field%checksum) ) compute_chksum = .TRUE.
   4494 
   4495       if (compute_chksum) then
   4496 
   4497       if (field%type==NF_INT) then
   4498          if (field%fill == MPP_FILL_DOUBLE .or. field%fill == real(MPP_FILL_INT) ) then
   4499             chk = mpp_chksum( ceiling(data), mask_val=MPP_FILL_INT )
   4500          else
   4501             call mpp_error(NOTE,"During mpp_io(mpp_read_compressed_3d) int field "//trim(field%name)// &
   4502                " found fill. Icebergs, or code using defaults can safely ignore. "// &
   4503                " If manually overriding compressed restart fills, confirm this is what you want.")
   4504             chk = mpp_chksum( ceiling(data), mask_val=field%fill)
   4505          end if
   4506       else !!real
   4507          chk = mpp_chksum(data,mask_val=real(field%fill,KIND(data)))
   4508       end if
   4509 
   4510 !!compare
   4511          if ( print_compressed_chksum) then
   4512             if ( mpp_pe() == mpp_root_pe() ) then
   4513                print '(A,Z16)', "mpp_read_compressed_3d chksum: "//trim(field%name)//" = ", chk
   4514 !! discuss making fatal after testing/review to match other routines.
   4515 !! Need to do some nword-counting and digging with pjp
   4516 !! this should be if ( chk /= field%checksum ) as it was tested @ulm_201505..
   4517                if ( MOD(chk, field%checksum(1)) /= 0 ) then
   4518                   print '(A,Z16)', "File stored checksum: "//trim(field%name)//" = ", field%checksum(1)
   4519                   call mpp_error(NOTE,"mpp_read_compressed_3d chksum: "//trim(field%name)//" failed!")
   4520                end if
   4521             endif
   4522          end if
   4523       end if
   4524 
   4525       call mpp_clock_end(mpp_read_clock)
   4526       return
   4527     end subroutine mpp_read_compressed_r3d_r4

Page 171         Source Listing                  MPP_READ_COMPRESSED_R3D_R4
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_read_compressed.h



ENTRY POINTS

  Name                                                 
                                                       
 mpp_io_mod_mp_mpp_read_compressed_r3d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   4493                                 scalar                    4493                              
 ASSOCIATED                 Func   4467                                 scalar                    4467                              
 CEILING                    Func   4499                                 scalar                    4499,4504                         
 CHK                        Local  4450     I(8)            8           scalar                    4499,4504,4507,4513,4517          
 COMPUTE_CHKSUM             Local  4449     L(4)            4           scalar                    4492,4493,4495                    
 DATA                       Dummy  4437     R(4)            4     3     1        ARG,INOUT        4454,4463,4472,4479,4483,4499,4504
                                                                                                  ,4507                             
 DOMAIN                     Dummy  4437     DOMAIN2D        752         scalar   ARG,IN           4466                              
 FIELD                      Dummy  4437     FIELDTYPE       1096        scalar   ARG,IN           4463,4472,4493,4497,4498,4501,4504
                                                                                                  ,4507,4513,4517,4518,4519         
 IO_DOMAIN                  Local  4448     DOMAIN2D        752         scalar   PTR              4448,4466,4467,4468,4470          
 MOD                        Func   4517                                 scalar                    4517                              
 MPP_CHKSUM_R4_3D           Func   4507     I(8)            8           scalar   PRIV             4507,11516                        
 MPP_READ_COMPRESSED_R3D_R4 Subr   4437                                          PRIV                                               
 NPES                       Local  4447     I(4)            4           scalar                    4468,4469,4478                    
 NREAD                      Dummy  4437     I(4)            4     1     1        ARG,IN           4463,4472                         
 P                          Local  4447     I(4)            4           scalar                    4478,4479                         
 PELIST                     Local  4446     I(4)            4     1     1        ALC              4469,4470,4472,4477,4479,4483,4487
 PRESENT                    Func   4461                                 scalar                    4461                              
 PRINT_COMPRESSED_CHKSUM    Local  4449     L(4)            4           scalar                    4459,4511                         
 REAL                       Func   4498                                 scalar                    4498,4507                         
 SIZE                       Func   4463                                 scalar                    4463,4472,4479,4483               
 START                      Dummy  4437     I(4)            4     1     1        ARG,IN           4463,4472                         
 THREADING                  Dummy  4437     I(4)            4           scalar   ARG,IN           4461                              
 THREADING_FLAG             Local  4447     I(4)            4           scalar                    4460,4461,4462,4464               
 TINDEX                     Dummy  4437     I(4)            4           scalar   ARG,IN           4463,4472                         
 TRIM                       Func   4501                                 scalar                    4501,4513,4518,4519               
 UNIT                       Dummy  4437     I(4)            4           scalar   ARG,IN           4457,4463,4472                    

Page 172         Source Listing                  MPP_READ_COMPRESSED_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_read_compressed.h

   4528 # 79 "../mpp/include/mpp_io_read.inc" 2 
   4529 
   4530 # 1 "../mpp/include/mpp_read_distributed_ascii.inc" 1 
   4531 !***********************************************************************
   4532 !*                   GNU Lesser General Public License
   4533 !*
   4534 !* This file is part of the GFDL Flexible Modeling System (FMS).
   4535 !*
   4536 !* FMS is free software: you can redistribute it and/or modify it under
   4537 !* the terms of the GNU Lesser General Public License as published by
   4538 !* the Free Software Foundation, either version 3 of the License, or (at
   4539 !* your option) any later version.
   4540 !*
   4541 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   4542 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   4543 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   4544 !* for more details.
   4545 !*
   4546 !* You should have received a copy of the GNU Lesser General Public
   4547 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   4548 !***********************************************************************
   4549 
   4550 
   4551 
   4552 
   4553 
   4554 # 1 "../mpp/include/mpp_read_distributed_ascii.h" 1 
   4555 !***********************************************************************
   4556 !*                   GNU Lesser General Public License
   4557 !*
   4558 !* This file is part of the GFDL Flexible Modeling System (FMS).
   4559 !*
   4560 !* FMS is free software: you can redistribute it and/or modify it under
   4561 !* the terms of the GNU Lesser General Public License as published by
   4562 !* the Free Software Foundation, either version 3 of the License, or (at
   4563 !* your option) any later version.
   4564 !*
   4565 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   4566 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   4567 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   4568 !* for more details.
   4569 !*
   4570 !* You should have received a copy of the GNU Lesser General Public
   4571 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   4572 !***********************************************************************
   4573 subroutine mpp_read_distributed_ascii_r1D (unit,fmt,ssize,data,iostat)
   4574   integer, intent(in)               :: unit
   4575   character(*), intent(in)          :: fmt
   4576   integer, intent(in)               :: ssize
   4577   real, dimension(:), intent(inout) :: data
   4578   integer, intent(out)              :: iostat
   4579 
   4580   integer, allocatable :: pelist(:)
   4581   logical              :: is_ioroot=.false.
   4582 
   4583   if(.not.module_is_initialized) call mpp_error(FATAL,'MPP_READ_DISTRIBUTED_ASCII_1D_:  module not initialized')
   4584 

Page 173         Source Listing                  MPP_READ_DISTRIBUTED_ASCII_R1D
2021-06-01 08:53                                 ../mpp/include/mpp_read_distributed_ascii.h

   4585   iostat = 0
   4586   call mpp_dist_io_pelist(ssize,pelist)  ! ALLOCATE and create pelist if size of group > 1
   4587   if(.not. ALLOCATED(pelist)) &
   4588            call mpp_error(FATAL,'MPP_READ_DISTRIBUTED_ASCII_1D_:: pelist allocation failed')
   4589   is_ioroot = mpp_is_dist_ioroot(ssize)
   4590   if(is_ioroot) then
   4591     if(trim(fmt)=='*')then
   4592        read(unit,*,iostat=iostat) data
   4593     else
   4594        read(unit,fmt=trim(fmt),iostat=iostat) data
   4595     endif
   4596     if(iostat /= 0) return  ! Calling routine must handle error
   4597   endif
   4598 
   4599   call mpp_broadcast(data,size(data),pelist(1),pelist)
   4600   deallocate(pelist)  ! Don't forget to deallocate pelist
   4601 end subroutine mpp_read_distributed_ascii_r1D


ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_read_distributed_ascii_r1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   4587                                 scalar                    4587                              
 DATA                       Dummy  4573     R(8)            8     1     1        ARG,INOUT        4592,4594,4599                    
 FMT                        Dummy  4573     CHAR                        scalar   ARG,IN           4591,4594                         
 IOSTAT                     Dummy  4573     I(4)            4           scalar   ARG,OUT          4585,4592,4594,4596               
 IS_IOROOT                  Local  4581     L(4)            4           scalar                    4581,4589,4590                    
 MPP_BROADCAST              Local  4599                                 scalar   PRIV             336,4599,4653,4685,5317,5333      
 MPP_BROADCAST_REAL8        Subr   4599                                          PRIV             4599,5333                         
 MPP_READ_DISTRIBUTED_ASCII                                                                                                         
 _R1D                       Subr   4573                                          PRIV                                               
 PELIST                     Local  4580     I(4)            4     1     1        ALC              4586,4587,4599,4600               
 SIZE                       Func   4599                                 scalar                    4599                              
 SSIZE                      Dummy  4573     I(4)            4           scalar   ARG,IN           4586,4589                         
 TRIM                       Func   4591                                 scalar                    4591,4594                         
 UNIT                       Dummy  4573     I(4)            4           scalar   ARG,IN           4592,4594                         

Page 174         Source Listing                  MPP_READ_DISTRIBUTED_ASCII_R1D
2021-06-01 08:53                                 ../mpp/include/mpp_read_distributed_ascii.h

   4602 # 25 "../mpp/include/mpp_read_distributed_ascii.inc" 2 
   4603 
   4604 
   4605 
   4606 
   4607 
   4608 # 1 "../mpp/include/mpp_read_distributed_ascii.h" 1 
   4609 !***********************************************************************
   4610 !*                   GNU Lesser General Public License
   4611 !*
   4612 !* This file is part of the GFDL Flexible Modeling System (FMS).
   4613 !*
   4614 !* FMS is free software: you can redistribute it and/or modify it under
   4615 !* the terms of the GNU Lesser General Public License as published by
   4616 !* the Free Software Foundation, either version 3 of the License, or (at
   4617 !* your option) any later version.
   4618 !*
   4619 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   4620 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   4621 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   4622 !* for more details.
   4623 !*
   4624 !* You should have received a copy of the GNU Lesser General Public
   4625 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   4626 !***********************************************************************
   4627 subroutine mpp_read_distributed_ascii_i1D (unit,fmt,ssize,data,iostat)
   4628   integer, intent(in)               :: unit
   4629   character(*), intent(in)          :: fmt
   4630   integer, intent(in)               :: ssize
   4631   integer, dimension(:), intent(inout) :: data
   4632   integer, intent(out)              :: iostat
   4633 
   4634   integer, allocatable :: pelist(:)
   4635   logical              :: is_ioroot=.false.
   4636 
   4637   if(.not.module_is_initialized) call mpp_error(FATAL,'MPP_READ_DISTRIBUTED_ASCII_1D_:  module not initialized')
   4638 
   4639   iostat = 0
   4640   call mpp_dist_io_pelist(ssize,pelist)  ! ALLOCATE and create pelist if size of group > 1
   4641   if(.not. ALLOCATED(pelist)) &
   4642            call mpp_error(FATAL,'MPP_READ_DISTRIBUTED_ASCII_1D_:: pelist allocation failed')
   4643   is_ioroot = mpp_is_dist_ioroot(ssize)
   4644   if(is_ioroot) then
   4645     if(trim(fmt)=='*')then
   4646        read(unit,*,iostat=iostat) data
   4647     else
   4648        read(unit,fmt=trim(fmt),iostat=iostat) data
   4649     endif
   4650     if(iostat /= 0) return  ! Calling routine must handle error
   4651   endif
   4652 
   4653   call mpp_broadcast(data,size(data),pelist(1),pelist)
   4654   deallocate(pelist)  ! Don't forget to deallocate pelist
   4655 end subroutine mpp_read_distributed_ascii_i1D

Page 175         Source Listing                  MPP_READ_DISTRIBUTED_ASCII_I1D
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_read_distributed_ascii.h



ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_read_distributed_ascii_i1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   4641                                 scalar                    4641                              
 DATA                       Dummy  4627     I(4)            4     1     1        ARG,INOUT        4646,4648,4653                    
 FMT                        Dummy  4627     CHAR                        scalar   ARG,IN           4645,4648                         
 IOSTAT                     Dummy  4627     I(4)            4           scalar   ARG,OUT          4639,4646,4648,4650               
 IS_IOROOT                  Local  4635     L(4)            4           scalar                    4635,4643,4644                    
 MPP_BROADCAST_INT4         Subr   4653                                          PRIV             4653                              
 MPP_READ_DISTRIBUTED_ASCII                                                                                                         
 _I1D                       Subr   4627                                          PRIV                                               
 PELIST                     Local  4634     I(4)            4     1     1        ALC              4640,4641,4653,4654               
 SIZE                       Func   4653                                 scalar                    4653                              
 SSIZE                      Dummy  4627     I(4)            4           scalar   ARG,IN           4640,4643                         
 TRIM                       Func   4645                                 scalar                    4645,4648                         
 UNIT                       Dummy  4627     I(4)            4           scalar   ARG,IN           4646,4648                         

Page 176         Source Listing                  MPP_READ_DISTRIBUTED_ASCII_I1D
2021-06-01 08:53                                 ../mpp/include/mpp_read_distributed_ascii.h

   4656 # 31 "../mpp/include/mpp_read_distributed_ascii.inc" 2 
   4657 
   4658 subroutine mpp_read_distributed_ascii_a1D(unit,fmt,ssize,data,iostat)
   4659   integer, intent(in)               :: unit
   4660   character(*), intent(in)          :: fmt
   4661   integer, intent(in)               :: ssize
   4662   character(len=*), dimension(:), intent(inout) :: data
   4663   integer, intent(out)              :: iostat
   4664 
   4665   integer, allocatable :: pelist(:)
   4666   logical              :: is_ioroot=.false.
   4667 
   4668 
   4669   if(.not.module_is_initialized) call mpp_error(FATAL,'mpp_read_distributed_ascii_a1D:  module not initialized')
   4670 
   4671   iostat = 0
   4672   call mpp_dist_io_pelist(ssize,pelist)
   4673   if(.not. ALLOCATED(pelist)) &
   4674            call mpp_error(FATAL,'mpp_read_distributed_ascii_a1D: pelist allocation failed')
   4675   is_ioroot = mpp_is_dist_ioroot(ssize)
   4676   if(is_ioroot) then
   4677     if(trim(fmt)=='*')then
   4678        read(unit,*,iostat=iostat) data
   4679     else
   4680        read(unit,fmt=trim(fmt),iostat=iostat) data
   4681     endif
   4682     if(iostat /= 0) return  ! Calling routine must handle error
   4683   endif
   4684 
   4685   call mpp_broadcast(data,len(data(1)),pelist(1),pelist)
   4686   deallocate(pelist)  ! Don't forget to deallocate pelist
   4687 end subroutine mpp_read_distributed_ascii_a1D

Page 177         Source Listing                  MPP_READ_DISTRIBUTED_ASCII_A1D
2021-06-01 08:53 Entry Points                    .../mpp/include/mpp_read_distributed_ascii.inc



ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_read_distributed_ascii_a1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   4673                                 scalar                    4673                              
 DATA                       Dummy  4658     CHAR                  1     1        ARG,INOUT        4678,4680,4685                    
 FMT                        Dummy  4658     CHAR                        scalar   ARG,IN           4677,4680                         
 IOSTAT                     Dummy  4658     I(4)            4           scalar   ARG,OUT          4671,4678,4680,4682               
 IS_IOROOT                  Local  4666     L(4)            4           scalar                    4666,4675,4676                    
 LEN                        Func   4685                                 scalar                    4685                              
 MPP_BROADCAST_CHAR         Subr   4685                                          PRIV             4685                              
 MPP_READ_DISTRIBUTED_ASCII                                                                                                         
 _A1D                       Subr   4658                                          PRIV                                               
 PELIST                     Local  4665     I(4)            4     1     1        ALC              4672,4673,4685,4686               
 SSIZE                      Dummy  4658     I(4)            4           scalar   ARG,IN           4672,4675                         
 TRIM                       Func   4677                                 scalar                    4677,4680                         
 UNIT                       Dummy  4658     I(4)            4           scalar   ARG,IN           4678,4680                         

Page 178         Source Listing                  MPP_READ_DISTRIBUTED_ASCII_A1D
2021-06-01 08:53                                 .../mpp/include/mpp_read_distributed_ascii.inc

   4688 # 81 "../mpp/include/mpp_io_read.inc" 2 
   4689 
   4690 ! <SUBROUTINE NAME="mpp_read_r4D_r8" INTERFACE="mpp_read">
   4691 !   <IN NAME="unit" TYPE="integer"></IN>
   4692 !   <IN NAME="field" TYPE="type(fieldtype)"></IN>
   4693 !   <INOUT NAME="data" TYPE="real(KIND=r8_kind)" DIM="(:,:,:,:)"></INOUT>
   4694 !   <IN NAME="tindex" TYPE="integer"></IN>
   4695 ! </SUBROUTINE>
   4696     subroutine mpp_read_r4D_r8( unit, field, data, tindex)
   4697       integer, intent(in) :: unit
   4698       type(fieldtype), intent(in) :: field
   4699       real(KIND=r8_kind), intent(inout) :: data(:,:,:,:)
   4700       integer, intent(in), optional :: tindex
   4701 
   4702       call read_record_r8( unit, field, size(data(:,:,:,:)), data, tindex )
   4703     end subroutine mpp_read_r4D_r8


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_read_r4d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4696     R(8)            8     4     1        ARG,INOUT        4702                              
 FIELD                      Dummy  4696     FIELDTYPE       1096        scalar   ARG,IN           4702                              
 MPP_READ_R4D_R8            Subr   4696                                          PRIV                                               
 SIZE                       Func   4702                                 scalar                    4702                              
 TINDEX                     Dummy  4696     I(4)            4           scalar   ARG,IN           4702                              
 UNIT                       Dummy  4696     I(4)            4           scalar   ARG,IN           4702                              

Page 179         Source Listing                  MPP_READ_R4D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4704 
   4705 
   4706 ! <SUBROUTINE NAME="mpp_read_r3D_r8" INTERFACE="mpp_read">
   4707 !   <IN NAME="unit" TYPE="integer"></IN>
   4708 !   <IN NAME="field" TYPE="type(fieldtype)"></IN>
   4709 !   <INOUT NAME="data" TYPE="real(KIND=r8_kind)" DIM="(:,:,:)"></INOUT>
   4710 !   <IN NAME="tindex" TYPE="integer"></IN>
   4711 ! </SUBROUTINE>
   4712     subroutine mpp_read_r3D_r8( unit, field, data, tindex)
   4713       integer, intent(in) :: unit
   4714       type(fieldtype), intent(in) :: field
   4715       real(KIND=r8_kind), intent(inout) :: data(:,:,:)
   4716       integer, intent(in), optional :: tindex
   4717 
   4718       call read_record_r8( unit, field, size(data(:,:,:)), data, tindex )
   4719     end subroutine mpp_read_r3D_r8


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_read_r3d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4712     R(8)            8     3     1        ARG,INOUT        4718                              
 FIELD                      Dummy  4712     FIELDTYPE       1096        scalar   ARG,IN           4718                              
 MPP_READ_R3D_R8            Subr   4712                                          PRIV                                               
 SIZE                       Func   4718                                 scalar                    4718                              
 TINDEX                     Dummy  4712     I(4)            4           scalar   ARG,IN           4718                              
 UNIT                       Dummy  4712     I(4)            4           scalar   ARG,IN           4718                              

Page 180         Source Listing                  MPP_READ_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4720 
   4721 ! <SUBROUTINE NAME="mpp_read_r2D_r8" INTERFACE="mpp_read">
   4722 !   <IN NAME="unit" TYPE="integer"></IN>
   4723 !   <IN NAME="field" TYPE="type(fieldtype)"></IN>
   4724 !   <INOUT NAME="data" TYPE="real(KIND=r8_kind)" DIM="(:,:,:)"></INOUT>
   4725 !   <IN NAME="tindex" TYPE="integer"></IN>
   4726 ! </SUBROUTINE>
   4727     subroutine mpp_read_r2D_r8( unit, field, data, tindex )
   4728       integer, intent(in) :: unit
   4729       type(fieldtype), intent(in) :: field
   4730       real(KIND=r8_kind), intent(inout) :: data(:,:)
   4731       integer, intent(in), optional :: tindex
   4732 
   4733       call read_record_r8( unit, field, size(data(:,:)), data, tindex )
   4734     end subroutine mpp_read_r2D_r8


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_read_r2d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4727     R(8)            8     2     1        ARG,INOUT        4733                              
 FIELD                      Dummy  4727     FIELDTYPE       1096        scalar   ARG,IN           4733                              
 MPP_READ_R2D_R8            Subr   4727                                          PRIV                                               
 SIZE                       Func   4733                                 scalar                    4733                              
 TINDEX                     Dummy  4727     I(4)            4           scalar   ARG,IN           4733                              
 UNIT                       Dummy  4727     I(4)            4           scalar   ARG,IN           4733                              

Page 181         Source Listing                  MPP_READ_R2D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4735 
   4736 ! <SUBROUTINE NAME="mpp_read_r1D_r8" INTERFACE="mpp_read">
   4737 !   <IN NAME="unit" TYPE="integer"></IN>
   4738 !   <IN NAME="field" TYPE="type(fieldtype)"></IN>
   4739 !   <INOUT NAME="data" TYPE="real(KIND=r8_kind)" DIM="(:,:,:)"></INOUT>
   4740 !   <IN NAME="tindex" TYPE="integer"></IN>
   4741 ! </SUBROUTINE>
   4742     subroutine mpp_read_r1D_r8( unit, field, data, tindex )
   4743       integer, intent(in) :: unit
   4744       type(fieldtype), intent(in) :: field
   4745       real(KIND=r8_kind), intent(inout) :: data(:)
   4746       integer, intent(in), optional :: tindex
   4747 
   4748       call read_record_r8( unit, field, size(data(:)), data, tindex )
   4749     end subroutine mpp_read_r1D_r8


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_read_r1d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4742     R(8)            8     1     1        ARG,INOUT        4748                              
 FIELD                      Dummy  4742     FIELDTYPE       1096        scalar   ARG,IN           4748                              
 MPP_READ_R1D_R8            Subr   4742                                          PRIV                                               
 SIZE                       Func   4748                                 scalar                    4748                              
 TINDEX                     Dummy  4742     I(4)            4           scalar   ARG,IN           4748                              
 UNIT                       Dummy  4742     I(4)            4           scalar   ARG,IN           4748                              

Page 182         Source Listing                  MPP_READ_R1D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4750 
   4751 ! <SUBROUTINE NAME="mpp_read_r0D_r8" INTERFACE="mpp_read">
   4752 !   <IN NAME="unit" TYPE="integer"></IN>
   4753 !   <IN NAME="field" TYPE="type(fieldtype)"></IN>
   4754 !   <INOUT NAME="data" TYPE="real(KIND=r8_kind)" DIM="(:,:,:)"></INOUT>
   4755 !   <IN NAME="tindex" TYPE="integer"></IN>
   4756 ! </SUBROUTINE>
   4757     subroutine mpp_read_r0D_r8( unit, field, data, tindex )
   4758       integer, intent(in) :: unit
   4759       type(fieldtype), intent(in) :: field
   4760       real(KIND=r8_kind), intent(inout) :: data
   4761       integer, intent(in), optional :: tindex
   4762       real(KIND=r8_kind), dimension(1) :: data_tmp
   4763 
   4764       data_tmp(1)=data
   4765       call read_record_r8( unit, field, 1, data_tmp, tindex )
   4766       data=data_tmp(1)
   4767     end subroutine mpp_read_r0D_r8


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_read_r0d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4757     R(8)            8           scalar   ARG,INOUT        4764,4766                         
 DATA_TMP                   Local  4762     R(8)            8     1     1                         4764,4765,4766                    
 FIELD                      Dummy  4757     FIELDTYPE       1096        scalar   ARG,IN           4765                              
 MPP_READ_R0D_R8            Subr   4757                                          PRIV             5870,5876,5882                    
 TINDEX                     Dummy  4757     I(4)            4           scalar   ARG,IN           4765                              
 UNIT                       Dummy  4757     I(4)            4           scalar   ARG,IN           4765                              

Page 183         Source Listing                  MPP_READ_R0D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4768 
   4769 ! <SUBROUTINE NAME="mpp_read_r4D_r4" INTERFACE="mpp_read">
   4770 !   <IN NAME="unit" TYPE="integer"></IN>
   4771 !   <IN NAME="field" TYPE="type(fieldtype)"></IN>
   4772 !   <INOUT NAME="data" TYPE="real(KIND=r8_kind)" DIM="(:,:,:,:)"></INOUT>
   4773 !   <IN NAME="tindex" TYPE="integer"></IN>
   4774 ! </SUBROUTINEr4
   4775     subroutine mpp_read_r4D_r4( unit, field, data, tindex)
   4776       integer, intent(in) :: unit
   4777       type(fieldtype), intent(in) :: field
   4778       real(KIND=r4_kind), intent(inout) :: data(:,:,:,:)
   4779       integer, intent(in), optional :: tindex
   4780 
   4781       call read_record_r4( unit, field, size(data(:,:,:,:)), data, tindex )
   4782     end subroutine mpp_read_r4D_r4


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_read_r4d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4775     R(4)            4     4     1        ARG,INOUT        4781                              
 FIELD                      Dummy  4775     FIELDTYPE       1096        scalar   ARG,IN           4781                              
 MPP_READ_R4D_R4            Subr   4775                                          PRIV                                               
 SIZE                       Func   4781                                 scalar                    4781                              
 TINDEX                     Dummy  4775     I(4)            4           scalar   ARG,IN           4781                              
 UNIT                       Dummy  4775     I(4)            4           scalar   ARG,IN           4781                              

Page 184         Source Listing                  MPP_READ_R4D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4783 
   4784 
   4785 ! <SUBROUTINE NAME="mpp_read_r3D_r4" INTERFACE="mpp_read">
   4786 !   <IN NAME="unit" TYPE="integer"></IN>
   4787 !   <IN NAME="field" TYPE="type(fieldtype)"></IN>
   4788 !   <INOUT NAME="data" TYPE="real(KIND=r4_kind)" DIM="(:,:,:)"></INOUT>
   4789 !   <IN NAME="tindex" TYPE="integer"></IN>
   4790 ! </SUBROUTINE>
   4791     subroutine mpp_read_r3D_r4( unit, field, data, tindex)
   4792       integer, intent(in) :: unit
   4793       type(fieldtype), intent(in) :: field
   4794       real(KIND=r4_kind), intent(inout) :: data(:,:,:)
   4795       integer, intent(in), optional :: tindex
   4796 
   4797       call read_record_r4( unit, field, size(data(:,:,:)), data, tindex )
   4798     end subroutine mpp_read_r3D_r4


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_read_r3d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4791     R(4)            4     3     1        ARG,INOUT        4797                              
 FIELD                      Dummy  4791     FIELDTYPE       1096        scalar   ARG,IN           4797                              
 MPP_READ_R3D_R4            Subr   4791                                          PRIV                                               
 SIZE                       Func   4797                                 scalar                    4797                              
 TINDEX                     Dummy  4791     I(4)            4           scalar   ARG,IN           4797                              
 UNIT                       Dummy  4791     I(4)            4           scalar   ARG,IN           4797                              

Page 185         Source Listing                  MPP_READ_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4799 
   4800 ! <SUBROUTINE NAME="mpp_read_r2D_r4" INTERFACE="mpp_read">
   4801 !   <IN NAME="unit" TYPE="integer"></IN>
   4802 !   <IN NAME="field" TYPE="type(fieldtype)"></IN>
   4803 !   <INOUT NAME="data" TYPE="real(KIND=r4_kind)" DIM="(:,:,:)"></INOUT>
   4804 !   <IN NAME="tindex" TYPE="integer"></IN>
   4805 ! </SUBROUTINE>
   4806     subroutine mpp_read_r2D_r4( unit, field, data, tindex )
   4807       integer, intent(in) :: unit
   4808       type(fieldtype), intent(in) :: field
   4809       real(KIND=r4_kind), intent(inout) :: data(:,:)
   4810       integer, intent(in), optional :: tindex
   4811 
   4812       call read_record_r4( unit, field, size(data(:,:)), data, tindex )
   4813     end subroutine mpp_read_r2D_r4


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_read_r2d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4806     R(4)            4     2     1        ARG,INOUT        4812                              
 FIELD                      Dummy  4806     FIELDTYPE       1096        scalar   ARG,IN           4812                              
 MPP_READ_R2D_R4            Subr   4806                                          PRIV                                               
 SIZE                       Func   4812                                 scalar                    4812                              
 TINDEX                     Dummy  4806     I(4)            4           scalar   ARG,IN           4812                              
 UNIT                       Dummy  4806     I(4)            4           scalar   ARG,IN           4812                              

Page 186         Source Listing                  MPP_READ_R2D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4814 
   4815 ! <SUBROUTINE NAME="mpp_read_r1D_r4" INTERFACE="mpp_read">
   4816 !   <IN NAME="unit" TYPE="integer"></IN>
   4817 !   <IN NAME="field" TYPE="type(fieldtype)"></IN>
   4818 !   <INOUT NAME="data" TYPE="real(KIND=r4_kind)" DIM="(:,:,:)"></INOUT>
   4819 !   <IN NAME="tindex" TYPE="integer"></IN>
   4820 ! </SUBROUTINE>
   4821     subroutine mpp_read_r1D_r4( unit, field, data, tindex )
   4822       integer, intent(in) :: unit
   4823       type(fieldtype), intent(in) :: field
   4824       real(KIND=r4_kind), intent(inout) :: data(:)
   4825       integer, intent(in), optional :: tindex
   4826 
   4827       call read_record_r4( unit, field, size(data(:)), data, tindex )
   4828     end subroutine mpp_read_r1D_r4


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_read_r1d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4821     R(4)            4     1     1        ARG,INOUT        4827                              
 FIELD                      Dummy  4821     FIELDTYPE       1096        scalar   ARG,IN           4827                              
 MPP_READ_R1D_R4            Subr   4821                                          PRIV                                               
 SIZE                       Func   4827                                 scalar                    4827                              
 TINDEX                     Dummy  4821     I(4)            4           scalar   ARG,IN           4827                              
 UNIT                       Dummy  4821     I(4)            4           scalar   ARG,IN           4827                              

Page 187         Source Listing                  MPP_READ_R1D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4829 
   4830 ! <SUBROUTINE NAME="mpp_read_r0D_r4" INTERFACE="mpp_read">
   4831 !   <IN NAME="unit" TYPE="integer"></IN>
   4832 !   <IN NAME="field" TYPE="type(fieldtype)"></IN>
   4833 !   <INOUT NAME="data" TYPE="real(KIND=r4_kind)" DIM="(:,:,:)"></INOUT>
   4834 !   <IN NAME="tindex" TYPE="integer"></IN>
   4835 ! </SUBROUTINE>
   4836     subroutine mpp_read_r0D_r4( unit, field, data, tindex )
   4837       integer, intent(in) :: unit
   4838       type(fieldtype), intent(in) :: field
   4839       real(KIND=r4_kind), intent(inout) :: data
   4840       integer, intent(in), optional :: tindex
   4841       real(KIND=r4_kind), dimension(1) :: data_tmp
   4842 
   4843       data_tmp(1)=data
   4844       call read_record_r4( unit, field, 1, data_tmp, tindex )
   4845       data=data_tmp(1)
   4846     end subroutine mpp_read_r0D_r4


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_read_r0d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4836     R(4)            4           scalar   ARG,INOUT        4843,4845                         
 DATA_TMP                   Local  4841     R(4)            4     1     1                         4843,4844,4845                    
 FIELD                      Dummy  4836     FIELDTYPE       1096        scalar   ARG,IN           4844                              
 MPP_READ_R0D_R4            Subr   4836                                          PRIV                                               
 TINDEX                     Dummy  4836     I(4)            4           scalar   ARG,IN           4844                              
 UNIT                       Dummy  4836     I(4)            4           scalar   ARG,IN           4844                              

Page 188         Source Listing                  MPP_READ_R0D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4847 
   4848     subroutine mpp_read_region_r2D_r4(unit, field, data, start, nread)
   4849       integer,         intent(in) :: unit
   4850       type(fieldtype), intent(in) :: field
   4851       real(KIND=r4_kind),         intent(inout) :: data(:,:)
   4852       integer,         intent(in) :: start(:), nread(:)
   4853 
   4854       if(size(start(:)) .NE. 4 .OR. size(nread(:)) .NE. 4) call mpp_error(FATAL, &
   4855           "mpp_io_read.inc(mpp_read_region_r2D_r4): size of start and nread must be 4")
   4856 
   4857       if(size(data,1) .NE. nread(1) .OR. size(data,2) .NE. nread(2)) then
   4858          call mpp_error( FATAL, 'mpp_io_read.inc(mpp_read_region_r2D_r4): size mismatch between data and nread')
   4859       endif
   4860       if(nread(3) .NE. 1 .OR. nread(4) .NE. 1) call mpp_error(FATAL, &
   4861           "mpp_io_read.inc(mpp_read_region_r2D_r4): nread(3) and nread(4) must be 1")
   4862       call read_record_core_r4(unit, field, nread(1)*nread(2), data, start, nread)
   4863 
   4864       return
   4865 
   4866 
   4867     end subroutine mpp_read_region_r2D_r4


ENTRY POINTS

  Name                                             
                                                   
 mpp_io_mod_mp_mpp_read_region_r2d_r4_             

Page 189         Source Listing                  MPP_READ_REGION_R2D_R4
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_read.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4848     R(4)            4     2     1        ARG,INOUT        4857,4862                         
 FIELD                      Dummy  4848     FIELDTYPE       1096        scalar   ARG,IN           4862                              
 MPP_READ_REGION_R2D_R4     Subr   4848                                          PRIV                                               
 NREAD                      Dummy  4848     I(4)            4     1     1        ARG,IN           4854,4857,4860,4862               
 SIZE                       Func   4854                                 scalar                    4854,4857                         
 START                      Dummy  4848     I(4)            4     1     1        ARG,IN           4854,4862                         
 UNIT                       Dummy  4848     I(4)            4           scalar   ARG,IN           4862                              

Page 190         Source Listing                  MPP_READ_REGION_R2D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4868 
   4869     subroutine mpp_read_region_r3D_r4(unit, field, data, start, nread)
   4870       integer,         intent(in) :: unit
   4871       type(fieldtype), intent(in) :: field
   4872       real(KIND=r4_kind),         intent(inout) :: data(:,:,:)
   4873       integer,         intent(in) :: start(:), nread(:)
   4874 
   4875       if(size(start(:)) .NE. 4 .OR. size(nread(:)) .NE. 4) call mpp_error(FATAL, &
   4876           "mpp_io_read.inc(mpp_read_region_r3D_r4): size of start and nread must be 4")
   4877 
   4878       if(size(data,1) .NE. nread(1) .OR. size(data,2) .NE. nread(2) .OR. size(data,3) .NE. nread(3) ) then
   4879          call mpp_error( FATAL, 'mpp_io_read.inc(mpp_read_region_r3D_r4): size mismatch between data and nread')
   4880       endif
   4881       if(nread(4) .NE. 1) call mpp_error(FATAL, &
   4882           "mpp_io_read.inc(mpp_read_region_r3D_r4): nread(4) must be 1")
   4883       call read_record_core_r4(unit, field, nread(1)*nread(2)*nread(3), data, start, nread)
   4884 
   4885       return
   4886     end subroutine mpp_read_region_r3D_r4


ENTRY POINTS

  Name                                             
                                                   
 mpp_io_mod_mp_mpp_read_region_r3d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4869     R(4)            4     3     1        ARG,INOUT        4878,4883                         
 FIELD                      Dummy  4869     FIELDTYPE       1096        scalar   ARG,IN           4883                              
 MPP_READ_REGION_R3D_R4     Subr   4869                                          PRIV                                               
 NREAD                      Dummy  4869     I(4)            4     1     1        ARG,IN           4875,4878,4881,4883               
 SIZE                       Func   4875                                 scalar                    4875,4878                         
 START                      Dummy  4869     I(4)            4     1     1        ARG,IN           4875,4883                         
 UNIT                       Dummy  4869     I(4)            4           scalar   ARG,IN           4883                              

Page 191         Source Listing                  MPP_READ_REGION_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4887 
   4888     subroutine mpp_read_region_r2D_r8(unit, field, data, start, nread)
   4889       integer,                intent(in) :: unit
   4890       type(fieldtype),        intent(in) :: field
   4891       real(kind=r8_kind), intent(inout) :: data(:,:)
   4892       integer,                intent(in) :: start(:), nread(:)
   4893 
   4894       if(size(start(:)) .NE. 4 .OR. size(nread(:)) .NE. 4) call mpp_error(FATAL, &
   4895           "mpp_io_read.inc(mpp_read_region_r2D_r8): size of start and nread must be 4")
   4896 
   4897       if(size(data,1).NE.nread(1) .OR. size(data,2).NE.nread(2)) then
   4898          call mpp_error( FATAL, 'mpp_io_read.inc(mpp_read_region_r2D_r8): size mismatch between data and nread')
   4899       endif
   4900       if(nread(3) .NE. 1 .OR. nread(4) .NE. 1) call mpp_error(FATAL, &
   4901           "mpp_io_read.inc(mpp_read_region_r2D_r8): nread(3) and nread(4) must be 1")
   4902       call read_record_core_r8(unit, field, nread(1)*nread(2), data, start, nread)
   4903 
   4904       return
   4905     end subroutine mpp_read_region_r2D_r8


ENTRY POINTS

  Name                                             
                                                   
 mpp_io_mod_mp_mpp_read_region_r2d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4888     R(8)            8     2     1        ARG,INOUT        4897,4902                         
 FIELD                      Dummy  4888     FIELDTYPE       1096        scalar   ARG,IN           4902                              
 MPP_READ_REGION_R2D_R8     Subr   4888                                          PRIV                                               
 NREAD                      Dummy  4888     I(4)            4     1     1        ARG,IN           4894,4897,4900,4902               
 SIZE                       Func   4894                                 scalar                    4894,4897                         
 START                      Dummy  4888     I(4)            4     1     1        ARG,IN           4894,4902                         
 UNIT                       Dummy  4888     I(4)            4           scalar   ARG,IN           4902                              

Page 192         Source Listing                  MPP_READ_REGION_R2D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4906 
   4907     subroutine mpp_read_region_r3D_r8(unit, field, data, start, nread)
   4908       integer,                intent(in) :: unit
   4909       type(fieldtype),        intent(in) :: field
   4910       real(kind=r8_kind), intent(inout) :: data(:,:,:)
   4911       integer,                intent(in) :: start(:), nread(:)
   4912 
   4913       if(size(start(:)) .NE. 4 .OR. size(nread(:)) .NE. 4) call mpp_error(FATAL, &
   4914           "mpp_io_read.inc(mpp_read_region_r3D_r8): size of start and nread must be 4")
   4915 
   4916       if(size(data,1).NE.nread(1) .OR. size(data,2).NE.nread(2) .OR. size(data,3).NE.nread(3) ) then
   4917          call mpp_error( FATAL, 'mpp_io_read.inc(mpp_read_region_r3D_r8): size mismatch between data and nread')
   4918       endif
   4919       if(nread(4) .NE. 1) call mpp_error(FATAL, &
   4920           "mpp_io_read.inc(mpp_read_region_r3D_r8): nread(4) must be 1")
   4921       call read_record_core_r8(unit, field, nread(1)*nread(2)*nread(3), data, start, nread)
   4922 
   4923       return
   4924     end subroutine mpp_read_region_r3D_r8


ENTRY POINTS

  Name                                             
                                                   
 mpp_io_mod_mp_mpp_read_region_r3d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4907     R(8)            8     3     1        ARG,INOUT        4916,4921                         
 FIELD                      Dummy  4907     FIELDTYPE       1096        scalar   ARG,IN           4921                              
 MPP_READ_REGION_R3D_R8     Subr   4907                                          PRIV                                               
 NREAD                      Dummy  4907     I(4)            4     1     1        ARG,IN           4913,4916,4919,4921               
 SIZE                       Func   4913                                 scalar                    4913,4916                         
 START                      Dummy  4907     I(4)            4     1     1        ARG,IN           4913,4921                         
 UNIT                       Dummy  4907     I(4)            4           scalar   ARG,IN           4921                              

Page 193         Source Listing                  MPP_READ_REGION_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4925 
   4926 
   4927 !--- Assume the text field is at most two-dimensional
   4928 !--- the level is always for the first dimension
   4929     subroutine mpp_read_text( unit, field, data, level )
   4930       integer,             intent(in) :: unit
   4931       type(fieldtype),     intent(in) :: field
   4932       character(len=*), intent(inout) :: data
   4933       integer, intent(in), optional   :: level
   4934       integer                         :: lev, n
   4935       character(len=256)              :: error_msg
   4936       integer, dimension(size(field%axes(:))) :: start, axsiz
   4937       character(len=len(data))        :: text
   4938 
   4939 
   4940       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'READ_RECORD: must first call mpp_io_init.' )
   4941       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'READ_RECORD: invalid unit number.' )
   4942       if( mpp_file(unit)%threading.EQ.MPP_SINGLE .AND. pe.NE.mpp_root_pe() )return
   4943 
   4944       if( .NOT.mpp_file(unit)%initialized ) call mpp_error( FATAL, 'MPP_READ: must first call mpp_read_meta.' )
   4945       lev = 1
   4946       if(present(level)) lev = level
   4947 
   4948       if( verbose )print '(a,2i6,2i5)', 'MPP_READ: PE, unit, %id, level =', pe, unit, mpp_file(unit)%id, lev
   4949 
   4950       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   4951          start = 1
   4952          axsiz(:) = field%size(:)
   4953          if(len(data) < field%size(1) ) call mpp_error(FATAL, &
   4954                 'mpp_io(mpp_read_text): the first dimension size is greater than data length')
   4955          select case( field%ndim)
   4956          case(1)
   4957             if(lev .NE. 1) call mpp_error(FATAL,'mpp_io(mpp_read_text): level should be 1 when ndim is 1')
   4958          case(2)
   4959             if(lev<1 .OR. lev > field%size(2)) then
   4960                write(error_msg,'(I5,"/",I5)') lev, field%size(2)
   4961                call mpp_error(FATAL,'mpp_io(mpp_read_text): level out of range, level/max_level='//trim(error_msg))
   4962             end if
   4963             start(2) = lev
   4964             axsiz(2) = 1
   4965          case default
   4966             call mpp_error( FATAL, 'MPP_READ: ndim of text field should be at most 2')
   4967          end select
   4968 
   4969          if( verbose )print '(a,2i6,i6,12i4)', 'mpp_read_text: PE, unit, nwords, start, axsiz=', pe, unit, len(data), start,
   4969  axsiz
   4970 
   4971           select case (field%type)
   4972              case(NF_CHAR)
   4973                 if(field%ndim==1) then
   4974                    error = NF_GET_VAR_TEXT(mpp_file(unit)%ncid, field%id, text)
   4975                 else
   4976                    error = NF_GET_VARA_TEXT(mpp_file(unit)%ncid, field%id, start, axsiz, text)
   4977                 end if
   4978                 call netcdf_err( error, mpp_file(unit), field=field )
   4979                 do n = 1, len_trim(text)
   4980                    if(text(n:n) == CHAR(0) ) exit

Page 194         Source Listing                  MPP_READ_TEXT
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4981                 end do
   4982                 n = n-1
   4983                 data = text(1:n)
   4984              case default
   4985                 call mpp_error( FATAL, 'mpp_read_text: the field type should be NF_CHAR' )
   4986           end select
   4987       else                      !non-netCDF
   4988           call mpp_error( FATAL, 'Currently dont support non-NetCDF mpp read' )
   4989 
   4990       end if
   4991 # 385
   4992 
   4993       return
   4994     end subroutine mpp_read_text


ENTRY POINTS

  Name                                    
                                          
 mpp_io_mod_mp_mpp_read_text_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXSIZ                      Local  4936     I(4)            4     1     0                         4952,4964,4969,4976               
 CHAR                       Func   4980                                 scalar                    4980                              
 DATA                       Dummy  4929     CHAR                        scalar   ARG,INOUT        4937,4953,4969,4983               
 ERROR_MSG                  Local  4935     CHAR            256         scalar                    4960,4961                         
 FIELD                      Dummy  4929     FIELDTYPE       1096        scalar   ARG,IN           4952,4953,4955,4959,4960,4971,4973
                                                                                                  ,4974,4976,4978                   
 LEN                        Func   4937                                 scalar                    4937,4953,4969                    
 LEN_TRIM                   Func   4979                                 scalar                    4979                              
 LEV                        Local  4934     I(4)            4           scalar                    4945,4946,4948,4957,4959,4960,4963
 LEVEL                      Dummy  4929     I(4)            4           scalar   ARG,IN           4946                              
 MPP_READ_TEXT              Subr   4929                                          PRIV                                               
 N                          Local  4934     I(4)            4           scalar                    4979,4980,4982,4983               
 NF_CHAR                    Param  4972     I(4)            4           scalar   PRIV             4972,5105,5358,5629,5667,5858,8716
                                                                                                  ,8723,8821                        
 NF_GET_VARA_TEXT           Func   4976     I(4)            4           scalar   PRIV             4976                              
 NF_GET_VAR_TEXT            Func   4974     I(4)            4           scalar   PRIV             4974                              
 PRESENT                    Func   4946                                 scalar                    4946                              
 START                      Local  4936     I(4)            4     1     0                         4951,4963,4969,4976               
 TEXT                       Local  4937     CHAR                        scalar                    4974,4976,4979,4980,4983          
 TRIM                       Func   4961                                 scalar                    4961                              
 UNIT                       Dummy  4929     I(4)            4           scalar   ARG,IN           4941,4942,4944,4948,4950,4969,4974
                                                                                                  ,4976,4978                        

Page 195         Source Listing                  MPP_READ_TEXT
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   4995 
   4996 ! <SUBROUTINE NAME="mpp_read_meta">
   4997 
   4998 !   <OVERVIEW>
   4999 !     Read metadata.
   5000 !   </OVERVIEW>
   5001 !   <DESCRIPTION>
   5002 !     This routine is used to read the <LINK SRC="#metadata">metadata</LINK>
   5003 !     describing the contents of a file. Each file can contain any number of
   5004 !     fields, which are functions of 0-3 space axes and 0-1 time axes. (Only
   5005 !     one time axis can be defined per file). The basic metadata defined <LINK
   5006 !     SRC="#metadata">above</LINK> for <TT>axistype</TT> and
   5007 !     <TT>fieldtype</TT> are stored in <TT>mpp_io_mod</TT> and
   5008 !     can be accessed outside of <TT>mpp_io_mod</TT> using calls to
   5009 !     <TT>mpp_get_info</TT>, <TT>mpp_get_atts</TT>,
   5010 !     <TT>mpp_get_vars</TT> and
   5011 !     <TT>mpp_get_times</TT>.
   5012 !   </DESCRIPTION>
   5013 !   <TEMPLATE>
   5014 !     call mpp_read_meta(unit)
   5015 !   </TEMPLATE>
   5016 !   <IN NAME="unit" TYPE="integer"> </IN>
   5017 !   <NOTE>
   5018 !     <TT>mpp_read_meta</TT> must be called prior to <TT>mpp_read</TT>.
   5019 !   </NOTE>
   5020 ! </SUBROUTINE>
   5021     subroutine mpp_read_meta(unit, read_time)
   5022 !
   5023 ! read file attributes including dimension and variable attributes
   5024 ! and store in filetype structure.  All of the file information
   5025 ! with the exception of the (variable) data is stored.  Attributes
   5026 ! are supplied to the user by get_info,get_atts,get_axes and get_fields
   5027 !
   5028 ! every PE is eligible to call mpp_read_meta
   5029 !
   5030       integer, intent(in) :: unit
   5031       logical, intent(in), optional :: read_time ! read_time is set to false when file action is appending or writing.
   5032 ! This is temporary fix for MOM6 reopen_file issue.
   5033       integer         :: ncid,ndim,nvar_total,natt,recdim,nv,nvar,len
   5034       integer :: error, i, j, istat, check_exist
   5035       integer         :: type, nvdims, nvatts, dimid
   5036       integer, allocatable, dimension(:) :: dimids
   5037       character(len=128) :: name, attname, unlimname, attval, bounds_name
   5038       logical :: isdim, found_bounds, get_time_info
   5039       integer(i8_kind) :: checksumf
   5040       character(len=64)  :: checksum_char
   5041       integer :: num_checksumf, last, is, k
   5042 
   5043       integer(i2_kind), allocatable :: i2vals(:)
   5044       integer(i4_kind), allocatable :: ivals(:)
   5045       real(KIND=r4_kind), allocatable  :: rvals(:)
   5046       real(KIND=r8_kind), allocatable :: r8vals(:)
   5047 
   5048       get_time_info = .TRUE.
   5049       if(present(read_time)) get_time_info = read_time
   5050 
   5051 

Page 196         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5052 
   5053       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   5054         ncid = mpp_file(unit)%ncid
   5055         error = NF_INQ(ncid,ndim, nvar_total,&
   5056                       natt, recdim);call netcdf_err( error, mpp_file(unit) )
   5057 
   5058 
   5059         mpp_file(unit)%ndim = ndim
   5060         mpp_file(unit)%natt = natt
   5061         mpp_file(unit)%recdimid = recdim
   5062 !
   5063 ! if no recdim exists, recdimid = -1
   5064 ! variable id of unlimdim and length
   5065 !
   5066         if( recdim.NE.-1 )then
   5067            error = NF_INQ_DIM( ncid, recdim, unlimname, mpp_file(unit)%time_level )
   5068            call netcdf_err( error, mpp_file(unit) )
   5069            error = NF_INQ_VARID( ncid, unlimname, mpp_file(unit)%id )
   5070            call netcdf_err( error, mpp_file(unit), string='Field='//unlimname )
   5071         else
   5072            mpp_file(unit)%time_level = -1 ! set to zero so mpp_get_info returns ntime=0 if no time axis present
   5073         endif
   5074 
   5075         allocate(mpp_file(unit)%Att(natt))
   5076         allocate(dimids(ndim))
   5077         allocate(mpp_file(unit)%Axis(ndim))
   5078 
   5079 !
   5080 ! initialize fieldtype and axis type
   5081 !
   5082 
   5083 
   5084         do i=1,ndim
   5085            mpp_file(unit)%Axis(i) = default_axis
   5086         enddo
   5087 
   5088         do i=1,natt
   5089            mpp_file(unit)%Att(i) = default_att
   5090         enddo
   5091 
   5092 !
   5093 ! assign global attributes
   5094 !
   5095         do i=1,natt
   5096            error=NF_INQ_ATTNAME(ncid,NF_GLOBAL,i,name);call netcdf_err( error, mpp_file(unit), string=' Global attribute err
   5096 or.' )
   5097            error=NF_INQ_ATT(ncid,NF_GLOBAL,trim(name),type,len);call netcdf_err( error, mpp_file(unit), string=' Attribute='
   5097 //name )
   5098            mpp_file(unit)%Att(i)%name = name
   5099            mpp_file(unit)%Att(i)%len = len
   5100            mpp_file(unit)%Att(i)%type = type
   5101 !
   5102 !  allocate space for att data and assign
   5103 !
   5104            select case (type)
   5105               case (NF_CHAR)
   5106                  if (len.gt.MAX_ATT_LENGTH) then

Page 197         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5107                     call mpp_error(NOTE,'GLOBAL ATT too long - not reading this metadata')
   5108                     len=7
   5109                     mpp_file(unit)%Att(i)%len=len
   5110                     mpp_file(unit)%Att(i)%catt = 'unknown'
   5111                  else
   5112                      error=NF_GET_ATT_TEXT(ncid,NF_GLOBAL,name,mpp_file(unit)%Att(i)%catt)
   5113                      call netcdf_err( error, mpp_file(unit), attr=mpp_file(unit)%att(i) )
   5114                      if (verbose.and.pe == 0) print *, 'GLOBAL ATT ',trim(name),' ',mpp_file(unit)%Att(i)%catt(1:len)
   5115                  endif
   5116 !
   5117 ! store integers in float arrays
   5118 !
   5119               case (NF_SHORT)
   5120                  allocate(mpp_file(unit)%Att(i)%fatt(len), STAT=istat)
   5121                  if ( istat .ne. 0 ) then
   5122                     write(text,'(A)') istat
   5123                     call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Att%fatt, NF_SHORT case.  
   5123 "//&
   5124                          & "STAT = "//trim(text))
   5125                  end if
   5126                  allocate(i2vals(len), STAT=istat)
   5127                  if ( istat .ne. 0 ) then
   5128                     write(text,'(A)') istat
   5129                     call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate temporary array i2vals.  STAT = "&
   5130                          & //trim(text))
   5131                  end if
   5132                  error=NF_GET_ATT_INT2(ncid,NF_GLOBAL,name,i2vals)
   5133                  call netcdf_err( error, mpp_file(unit), attr=mpp_file(unit)%att(i) )
   5134                  if( verbose .and. pe == 0 )print *, 'GLOBAL ATT ',trim(name),' ',i2vals(1:len)
   5135                  mpp_file(unit)%Att(i)%fatt(1:len)=i2vals(1:len)
   5136                  deallocate(i2vals)
   5137               case (NF_INT)
   5138                  allocate(mpp_file(unit)%Att(i)%fatt(len), STAT=istat)
   5139                  if ( istat .ne. 0 ) then
   5140                     write(text,'(A)') istat
   5141                     call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Att%fatt, NF_INT case.  "/
   5141 /&
   5142                          & "STAT = "//trim(text))
   5143                  end if
   5144                  allocate(ivals(len), STAT=istat)
   5145                  if ( istat .ne. 0 ) then
   5146                     write(text,'(A)') istat
   5147                     call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate temporary array ivals.  STAT = "&
   5148                          & //trim(text))
   5149                  end if
   5150                  error=NF_GET_ATT_INT(ncid,NF_GLOBAL,name,ivals)
   5151                  call netcdf_err( error, mpp_file(unit), attr=mpp_file(unit)%att(i) )
   5152                  if( verbose .and. pe == 0 )print *, 'GLOBAL ATT ',trim(name),' ',ivals(1:len)
   5153                  mpp_file(unit)%Att(i)%fatt(1:len)=ivals(1:len)
   5154                  if(lowercase(trim(name)) == 'time_axis' .and. ivals(1)==0) &
   5155                         mpp_file(unit)%time_level = -1 ! This file is an unlimited axis restart
   5156                  deallocate(ivals)
   5157               case (NF_FLOAT)
   5158                  allocate(mpp_file(unit)%Att(i)%fatt(len), STAT=istat)
   5159                  if ( istat .ne. 0 ) then
   5160                     write(text,'(A)') istat
   5161                     call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Att%fatt, NF_FLOAT case.  

Page 198         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5161 "//&
   5162                          & "STAT = "//trim(text))
   5163                  end if
   5164                  allocate(rvals(len), STAT=istat)
   5165                  if ( istat .ne. 0 ) then
   5166                     write(text,'(A)') istat
   5167                     call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate temporary array rvals.  STAT = "&
   5168                          & //trim(text))
   5169                  end if
   5170                  error=NF_GET_ATT_REAL(ncid,NF_GLOBAL,name,rvals)
   5171                  call netcdf_err( error, mpp_file(unit), attr=mpp_file(unit)%att(i) )
   5172                  mpp_file(unit)%Att(i)%fatt(1:len)=rvals(1:len)
   5173                  if( verbose .and. pe == 0)print *, 'GLOBAL ATT ',trim(name),' ',mpp_file(unit)%Att(i)%fatt(1:len)
   5174                  deallocate(rvals)
   5175               case (NF_DOUBLE)
   5176                  allocate(mpp_file(unit)%Att(i)%fatt(len), STAT=istat)
   5177                  if ( istat .ne. 0 ) then
   5178                     write(text,'(A)') istat
   5179                     call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Att%fatt, NF_DOUBLE case. 
   5179  "//&
   5180                          & "STAT = "//trim(text))
   5181                  end if
   5182                  allocate(r8vals(len), STAT=istat)
   5183                  if ( istat .ne. 0 ) then
   5184                     write(text,'(A)') istat
   5185                     call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate temporary array r8vals.  STAT = "&
   5186                          & //trim(text))
   5187                  end if
   5188                  error=NF_GET_ATT_DOUBLE(ncid,NF_GLOBAL,name,r8vals)
   5189                  call netcdf_err( error, mpp_file(unit), attr=mpp_file(unit)%att(i) )
   5190                  mpp_file(unit)%Att(i)%fatt(1:len)=r8vals(1:len)
   5191                  if( verbose .and. pe == 0)print *, 'GLOBAL ATT ',trim(name),' ',mpp_file(unit)%Att(i)%fatt(1:len)
   5192                  deallocate(r8vals)
   5193            end select
   5194 
   5195         enddo
   5196 !
   5197 ! assign dimension name and length
   5198 !
   5199         do i=1,ndim
   5200            error = NF_INQ_DIM(ncid,i,name,len);call netcdf_err( error, mpp_file(unit) )
   5201            mpp_file(unit)%Axis(i)%name = name
   5202            mpp_file(unit)%Axis(i)%len = len
   5203         enddo
   5204 
   5205         nvar=0
   5206         do i=1, nvar_total
   5207            error=NF_INQ_VAR(ncid,i,name,type,nvdims,dimids,nvatts);call netcdf_err( error, mpp_file(unit) )
   5208            isdim=.false.
   5209            do j=1,ndim
   5210               if( trim(lowercase(name)).EQ.trim(lowercase(mpp_file(unit)%Axis(j)%name)) )isdim=.true.
   5211            enddo
   5212            if (.not.isdim) nvar=nvar+1
   5213         enddo
   5214         mpp_file(unit)%nvar = nvar
   5215         allocate(mpp_file(unit)%Var(nvar))
   5216 

Page 199         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5217         do i=1,nvar
   5218            mpp_file(unit)%Var(i) = default_field
   5219         enddo
   5220 
   5221 !
   5222 ! assign dimension info
   5223 !
   5224         do i=1, nvar_total
   5225            error=NF_INQ_VAR(ncid,i,name,type,nvdims,dimids,nvatts);call netcdf_err( error, mpp_file(unit) )
   5226            isdim=.false.
   5227            do j=1,ndim
   5228               if( trim(lowercase(name)).EQ.trim(lowercase(mpp_file(unit)%Axis(j)%name)) )isdim=.true.
   5229            enddo
   5230 
   5231            if( isdim )then
   5232               error=NF_INQ_DIMID(ncid,name,dimid);call netcdf_err( error, mpp_file(unit), string=' Axis='//name )
   5233               mpp_file(unit)%Axis(dimid)%type = type
   5234               mpp_file(unit)%Axis(dimid)%did = dimid
   5235               mpp_file(unit)%Axis(dimid)%id = i
   5236               mpp_file(unit)%Axis(dimid)%natt = nvatts
   5237 ! get axis values
   5238               if( i.NE.mpp_file(unit)%id )then   ! non-record dims
   5239                  select case (type)
   5240                  case (NF_INT)
   5241                     len=mpp_file(unit)%Axis(dimid)%len
   5242                     allocate(mpp_file(unit)%Axis(dimid)%data(len), STAT=istat)
   5243                     if ( istat .ne. 0 ) then
   5244                        write(text,'(A)') istat
   5245                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Axis%data, NF_INT case.
   5245   "//&
   5246                             & "STAT = "//trim(text))
   5247                     end if
   5248                     allocate(ivals(len), STAT=istat)
   5249                     if ( istat .ne. 0 ) then
   5250                        write(text,'(A)') istat
   5251                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate temporary array ivals.  STAT = "
   5251 &
   5252                             & //trim(text))
   5253                     end if
   5254                     error = NF_GET_VAR_INT(ncid,i,ivals);call netcdf_err( error, mpp_file(unit), mpp_file(unit)%Axis(dimid) 
   5254 )
   5255                     mpp_file(unit)%Axis(dimid)%data(1:len)=ivals(1:len)
   5256                     deallocate(ivals)
   5257                  case (NF_FLOAT)
   5258                     len=mpp_file(unit)%Axis(dimid)%len
   5259                     allocate(mpp_file(unit)%Axis(dimid)%data(len), STAT=istat)
   5260                     if ( istat .ne. 0 ) then
   5261                        write(text,'(A)') istat
   5262                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Axis%data, "//&
   5263                             & "NF_FLOAT case.  STAT = "//trim(text))
   5264                     end if
   5265                     allocate(rvals(len), STAT=istat)
   5266                     if ( istat .ne. 0 ) then
   5267                        write(text,'(A)') istat
   5268                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate temporary array rvals.  STAT = "
   5268 &
   5269                             & //trim(text))

Page 200         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5270                     end if
   5271                     error = NF_GET_VAR_REAL(ncid,i,rvals);call netcdf_err( error, mpp_file(unit), mpp_file(unit)%Axis(dimid)
   5271  )
   5272                     mpp_file(unit)%Axis(dimid)%data(1:len)=rvals(1:len)
   5273                     deallocate(rvals)
   5274                  case (NF_DOUBLE)
   5275                     len=mpp_file(unit)%Axis(dimid)%len
   5276                     allocate(mpp_file(unit)%Axis(dimid)%data(len), STAT=istat)
   5277                     if ( istat .ne. 0 ) then
   5278                        write(text,'(A)') istat
   5279                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Axis%data, "//&
   5280                             & "NF_DOUBLE case.  STAT = "//trim(text))
   5281                     end if
   5282                     allocate(r8vals(len), STAT=istat)
   5283                     if ( istat .ne. 0 ) then
   5284                        write(text,'(A)') istat
   5285                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate temporary array r8vals.  STAT = 
   5285 "&
   5286                             & //trim(text))
   5287                     end if
   5288                     error = NF_GET_VAR_DOUBLE(ncid,i,r8vals);call netcdf_err( error, mpp_file(unit), mpp_file(unit)%Axis(dim
   5288 id) )
   5289                     mpp_file(unit)%Axis(dimid)%data(1:len) = r8vals(1:len)
   5290                     deallocate(r8vals)
   5291                  case default
   5292                     call mpp_error( FATAL, 'Invalid data type for dimension' )
   5293                  end select
   5294              else if(get_time_info) then
   5295                  len = mpp_file(unit)%time_level
   5296                  if( len > 0 ) then
   5297                     allocate(mpp_file(unit)%time_values(len), STAT=istat)
   5298                     if ( istat .ne. 0 ) then
   5299                        write(text,'(A)') istat
   5300                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%time_valuse.  STAT = "&
   5301                             & //trim(text))
   5302                     end if
   5303                     select case (type)
   5304                     case (NF_FLOAT)
   5305                        allocate(rvals(len), STAT=istat)
   5306                        if ( istat .ne. 0 ) then
   5307                           write(text,'(A)') istat
   5308                           call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate temporary array rvals.  STAT 
   5308 = "&
   5309                                & //trim(text))
   5310                        end if
   5311 !z1l read from root pe and broadcast to other processor.
   5312 !In the future we will modify the code if there is performance issue for very high MPI ranks.
   5313                        if(mpp_pe()==mpp_root_pe()) then
   5314                           error = NF_GET_VAR_REAL(ncid,i,rvals)
   5315                           call netcdf_err( error, mpp_file(unit), mpp_file(unit)%Axis(dimid) )
   5316                        endif
   5317                        call mpp_broadcast(rvals, len, mpp_root_pe())
   5318                        mpp_file(unit)%time_values(1:len) = rvals(1:len)
   5319                        deallocate(rvals)
   5320                     case (NF_DOUBLE)
   5321                        allocate(r8vals(len), STAT=istat)
   5322                        if ( istat .ne. 0 ) then

Page 201         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5323                           write(text,'(A)') istat
   5324                           call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate temporary array r8vals.  STAT
   5324  = "&
   5325                             & //trim(text))
   5326                        end if
   5327 !z1l read from root pe and broadcast to other processor.
   5328 !In the future we will modify the code if there is performance issue for very high MPI ranks.
   5329                        if(mpp_pe()==mpp_root_pe()) then
   5330                          error = NF_GET_VAR_DOUBLE(ncid,i,r8vals)
   5331                          call netcdf_err( error, mpp_file(unit), mpp_file(unit)%Axis(dimid) )
   5332                        endif
   5333                        call mpp_broadcast(r8vals, len, mpp_root_pe())
   5334                        mpp_file(unit)%time_values(1:len) = r8vals(1:len)
   5335                        deallocate(r8vals)
   5336                     case default
   5337                        call mpp_error( FATAL, 'Invalid data type for dimension' )
   5338                     end select
   5339                  endif
   5340               endif
   5341 ! assign dimension atts
   5342               if( nvatts.GT.0 )allocate(mpp_file(unit)%Axis(dimid)%Att(nvatts))
   5343 
   5344               do j=1,nvatts
   5345                  mpp_file(unit)%Axis(dimid)%Att(j) = default_att
   5346               enddo
   5347 
   5348               do j=1,nvatts
   5349                  error=NF_INQ_ATTNAME(ncid,i,j,attname);call netcdf_err( error, mpp_file(unit) )
   5350                  error=NF_INQ_ATT(ncid,i,trim(attname),type,len)
   5351                  call netcdf_err( error, mpp_file(unit), string=' Attribute='//attname )
   5352 
   5353                  mpp_file(unit)%Axis(dimid)%Att(j)%name = trim(attname)
   5354                  mpp_file(unit)%Axis(dimid)%Att(j)%type = type
   5355                  mpp_file(unit)%Axis(dimid)%Att(j)%len = len
   5356 
   5357                  select case (type)
   5358                  case (NF_CHAR)
   5359                     if (len.gt.MAX_ATT_LENGTH) call mpp_error(FATAL,'DIM ATT too long')
   5360                     error=NF_GET_ATT_TEXT(ncid,i,trim(attname),mpp_file(unit)%Axis(dimid)%Att(j)%catt);
   5361                     call netcdf_err( error, mpp_file(unit), attr=mpp_file(unit)%Axis(dimid)%att(j) )
   5362                     if( verbose .and. pe == 0 ) then
   5363                          print *, 'AXIS ',trim(mpp_file(unit)%Axis(dimid)%name),' ATT ',trim(attname)
   5364                          print *, mpp_file(unit)%Axis(dimid)%Att(j)%catt(1:len)
   5365                     endif
   5366 ! store integers in float arrays
   5367 ! assume dimension data not packed
   5368                  case (NF_SHORT)
   5369                     allocate(mpp_file(unit)%Axis(dimid)%Att(j)%fatt(len), STAT=istat)
   5370                     if ( istat .ne. 0 ) then
   5371                        write(text,'(A)') istat
   5372                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Axis%Att%fatt, "//&
   5373                             & "NF_SHORT CASE.  STAT = "//trim(text))
   5374                     end if
   5375                     allocate(i2vals(len), STAT=istat)
   5376                     if ( istat .ne. 0 ) then
   5377                        write(text,'(A)') istat
   5378                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): "// &

Page 202         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5379                        "Unable to allocate temporary array i2vals.  STAT = "//trim(text))
   5380                     end if
   5381                     error=NF_GET_ATT_INT2(ncid,i,trim(attname),i2vals);
   5382                     call netcdf_err( error, mpp_file(unit), attr=mpp_file(unit)%Axis(dimid)%att(j) )
   5383                     mpp_file(unit)%Axis(dimid)%Att(j)%fatt(1:len)=i2vals(1:len)
   5384                     if( verbose .and. pe == 0  ) &
   5385                          print *, 'AXIS ',trim(mpp_file(unit)%Axis(dimid)%name),' ATT ',&
   5386                                 & trim(attname),' ',mpp_file(unit)%Axis(dimid)%Att(j)%fatt
   5387                     deallocate(i2vals)
   5388                  case (NF_INT)
   5389                     allocate(mpp_file(unit)%Axis(dimid)%Att(j)%fatt(len), STAT=istat)
   5390                     if ( istat .ne. 0 ) then
   5391                        write(text,'(A)') istat
   5392                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta):"// &
   5393                        " Unable to allocate mpp_file%Axis%Att%fatt, "// &
   5394                        "NF_INT CASE.  STAT = "//trim(text))
   5395                     end if
   5396                     allocate(ivals(len), STAT=istat)
   5397                     if ( istat .ne. 0 ) then
   5398                        write(text,'(A)') istat
   5399                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): "// &
   5400                        "Unable to allocate temporary array ivals.  STAT = "//trim(text))
   5401                     end if
   5402                     error=NF_GET_ATT_INT(ncid,i,trim(attname),ivals);
   5403                     call netcdf_err( error, mpp_file(unit), attr=mpp_file(unit)%Axis(dimid)%att(j) )
   5404                     mpp_file(unit)%Axis(dimid)%Att(j)%fatt(1:len)=ivals(1:len)
   5405                     if( verbose .and. pe == 0  ) &
   5406                          print *, 'AXIS ',trim(mpp_file(unit)%Axis(dimid)%name),' ATT ',trim(attname), ' ',&
   5407                          & mpp_file(unit)%Axis(dimid)%Att(j)%fatt
   5408                     deallocate(ivals)
   5409                  case (NF_FLOAT)
   5410                     allocate(mpp_file(unit)%Axis(dimid)%Att(j)%fatt(len), STAT=istat)
   5411                     if ( istat .ne. 0 ) then
   5412                        write(text,'(A)') istat
   5413                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): "// &
   5414                                       "Unable to allocate mpp_file%Axis%Att%fatt, "// &
   5415                             & "NF_FLOAT CASE.  STAT = "//trim(text))
   5416                     end if
   5417                     allocate(rvals(len), STAT=istat)
   5418                     if ( istat .ne. 0 ) then
   5419                        write(text,'(A)') istat
   5420                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): "// &
   5421                        "Unable to allocate temporary array rvals.  STAT = "&
   5422                             & //trim(text))
   5423                     end if
   5424                     error=NF_GET_ATT_REAL(ncid,i,trim(attname),rvals);
   5425                     call netcdf_err( error, mpp_file(unit), attr=mpp_file(unit)%Axis(dimid)%att(j) )
   5426                     mpp_file(unit)%Axis(dimid)%Att(j)%fatt(1:len)=rvals(1:len)
   5427                     if( verbose  .and. pe == 0 ) &
   5428                          print *, 'AXIS ',trim(mpp_file(unit)%Axis(dimid)%name),' ATT ',trim(attname),' ', &
   5429                          & mpp_file(unit)%Axis(dimid)%Att(j)%fatt
   5430                     deallocate(rvals)
   5431                  case (NF_DOUBLE)
   5432                     allocate(mpp_file(unit)%Axis(dimid)%Att(j)%fatt(len), STAT=istat)
   5433                     if ( istat .ne. 0 ) then
   5434                        write(text,'(A)') istat
   5435                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): "// &

Page 203         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5436                        "Unable to allocate mpp_file%Axis%Att%fatt, "//&
   5437                             & "NF_DOUBLE CASE.  STAT = "//trim(text))
   5438                     end if
   5439                     allocate(r8vals(len), STAT=istat)
   5440                     if ( istat .ne. 0 ) then
   5441                        write(text,'(A)') istat
   5442                        call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): "//&
   5443                        "Unable to allocate temporary array r8vals.  STAT = "&
   5444                             & //trim(text))
   5445                     end if
   5446                     error=NF_GET_ATT_DOUBLE(ncid,i,trim(attname),r8vals);
   5447                     call netcdf_err( error, mpp_file(unit), attr=mpp_file(unit)%Axis(dimid)%att(j) )
   5448                     mpp_file(unit)%Axis(dimid)%Att(j)%fatt(1:len)=r8vals(1:len)
   5449                     if( verbose  .and. pe == 0 ) &
   5450                          print *, 'AXIS ',trim(mpp_file(unit)%Axis(dimid)%name),' ATT ',trim(attname),' ',&
   5451                          & mpp_file(unit)%Axis(dimid)%Att(j)%fatt
   5452                     deallocate(r8vals)
   5453                  case default
   5454                     call mpp_error( FATAL, 'Invalid data type for dimension at' )
   5455                  end select
   5456 ! assign pre-defined axis attributes
   5457                  select case(trim(attname))
   5458                  case('long_name')
   5459                     mpp_file(unit)%Axis(dimid)%longname=mpp_file(unit)%Axis(dimid)%Att(j)%catt(1:len)
   5460                  case('units')
   5461                     mpp_file(unit)%Axis(dimid)%units=mpp_file(unit)%Axis(dimid)%Att(j)%catt(1:len)
   5462                  case('cartesian_axis')
   5463                     mpp_file(unit)%Axis(dimid)%cartesian=mpp_file(unit)%Axis(dimid)%Att(j)%catt(1:len)
   5464                  case('calendar')
   5465                     mpp_file(unit)%Axis(dimid)%calendar=mpp_file(unit)%Axis(dimid)%Att(j)%catt(1:len)
   5466                     mpp_file(unit)%Axis(dimid)%calendar = lowercase(cut0(mpp_file(unit)%Axis(dimid)%calendar))
   5467                     if (trim(mpp_file(unit)%Axis(dimid)%calendar) == 'none') &
   5468                          mpp_file(unit)%Axis(dimid)%calendar = 'no_calendar'
   5469                     if (trim(mpp_file(unit)%Axis(dimid)%calendar) == 'no_leap') &
   5470                          mpp_file(unit)%Axis(dimid)%calendar = 'noleap'
   5471                     if (trim(mpp_file(unit)%Axis(dimid)%calendar) == '365_days') &
   5472                          mpp_file(unit)%Axis(dimid)%calendar = '365_day'
   5473                     if (trim(mpp_file(unit)%Axis(dimid)%calendar) == '360_days') &
   5474                          mpp_file(unit)%Axis(dimid)%calendar = '360_day'
   5475                  case('calendar_type')
   5476                     mpp_file(unit)%Axis(dimid)%calendar=mpp_file(unit)%Axis(dimid)%Att(j)%catt(1:len)
   5477                     mpp_file(unit)%Axis(dimid)%calendar = lowercase(cut0(mpp_file(unit)%Axis(dimid)%calendar))
   5478                     if (trim(mpp_file(unit)%Axis(dimid)%calendar) == 'none') &
   5479                          mpp_file(unit)%Axis(dimid)%calendar = 'no_calendar'
   5480                     if (trim(mpp_file(unit)%Axis(dimid)%calendar) == 'no_leap') &
   5481                          mpp_file(unit)%Axis(dimid)%calendar = 'noleap'
   5482                     if (trim(mpp_file(unit)%Axis(dimid)%calendar) == '365_days') &
   5483                          mpp_file(unit)%Axis(dimid)%calendar = '365_day'
   5484                     if (trim(mpp_file(unit)%Axis(dimid)%calendar) == '360_days') &
   5485                          mpp_file(unit)%Axis(dimid)%calendar = '360_day'
   5486                  case('compress')
   5487                     mpp_file(unit)%Axis(dimid)%compressed=mpp_file(unit)%Axis(dimid)%Att(j)%catt(1:len)
   5488                  case('positive')
   5489                     attval = mpp_file(unit)%Axis(dimid)%Att(j)%catt(1:len)
   5490                     if( attval.eq.'down' )then
   5491                        mpp_file(unit)%Axis(dimid)%sense=-1
   5492                     else if( attval.eq.'up' )then

Page 204         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5493                        mpp_file(unit)%Axis(dimid)%sense=1
   5494                     endif
   5495                  end select
   5496 
   5497               enddo
   5498            endif
   5499         enddo
   5500 
   5501 ! assign axis bounds
   5502         do j = 1, mpp_file(unit)%ndim
   5503            if(.not. associated(mpp_file(unit)%Axis(j)%data)) cycle
   5504            len = size(mpp_file(unit)%Axis(j)%data(:))
   5505            allocate(mpp_file(unit)%Axis(j)%data_bounds(len+1))
   5506            mpp_file(unit)%Axis(j)%name_bounds = 'none'
   5507            bounds_name = 'none'
   5508            found_bounds = .false.
   5509            do i = 1, mpp_file(unit)%Axis(j)%natt
   5510               if(trim(mpp_file(unit)%Axis(j)%Att(i)%name) == 'bounds' .OR. &
   5511                    trim(mpp_file(unit)%Axis(j)%Att(i)%name) == 'edges' ) then
   5512                  bounds_name = mpp_file(unit)%Axis(j)%Att(i)%catt
   5513                  found_bounds = .true.
   5514                  exit
   5515               endif
   5516            enddo
   5517 !-- loop through all the fields to locate bounds_name
   5518            if( found_bounds ) then
   5519               found_bounds = .false.
   5520               do i = 1, mpp_file(unit)%ndim
   5521                  if(.not. associated(mpp_file(unit)%Axis(i)%data)) cycle
   5522                  if(trim(mpp_file(unit)%Axis(i)%name) == trim(bounds_name)) then
   5523                     found_bounds = .true.
   5524                     if(size(mpp_file(unit)%Axis(i)%data(:)) .NE. len+1) &
   5525                          call mpp_error(FATAL, "mpp_read_meta: improperly size bounds for field "// &
   5526                             trim(bounds_name)//" in file "// trim(mpp_file(unit)%name) )
   5527                     mpp_file(unit)%Axis(j)%data_bounds(:) = mpp_file(unit)%Axis(i)%data(:)
   5528                     exit
   5529                  endif
   5530               enddo
   5531               if( .not. found_bounds ) then
   5532                  do i=1, nvar_total
   5533                     error=NF_INQ_VAR(ncid,i,name,type,nvdims,dimids,nvatts);call netcdf_err( error, mpp_file(unit) )
   5534                     if(trim(name) == trim(bounds_name)) then
   5535                        found_bounds = .true.
   5536                        if(nvdims .NE. 2) &
   5537                             call mpp_error(FATAL, "mpp_read_meta: field "//trim(bounds_name)//" in file "//&
   5538                               trim(mpp_file(unit)%name)//" must be 2-D field")
   5539                        if(mpp_file(unit)%Axis(dimids(1))%len .NE. 2) &
   5540                             call mpp_error(FATAL, "mpp_read_meta: first dimension size of field "// &
   5541                             trim(mpp_file(unit)%Var(i)%name)//" from file "//trim(mpp_file(unit)%name)// &
   5542                             " must be 2")
   5543                        if(mpp_file(unit)%Axis(dimids(2))%len .NE. len) &
   5544                             call mpp_error(FATAL, "mpp_read_meta: second dimension size of field "// &
   5545                             trim(mpp_file(unit)%Var(i)%name)//" from file "//trim(mpp_file(unit)%name)// &
   5546                             " is not correct")
   5547                        select case (type)
   5548                        case (NF_INT)
   5549                           allocate(ivals(2*len), STAT=istat)

Page 205         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5550                           if ( istat .ne. 0 ) then
   5551                              write(text,'(A)') istat
   5552                              call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate array ivals."//&
   5553                                   "  STAT = "//trim(text))
   5554                           end if
   5555                           error = NF_GET_VAR_INT(ncid,i,ivals)
   5556                           call netcdf_err( error, mpp_file(unit), string=" Field="//trim(bounds_name) )
   5557                           mpp_file(unit)%Axis(j)%data_bounds(1:len) =ivals(1:(2*len-1):2)
   5558                           mpp_file(unit)%Axis(j)%data_bounds(len+1) = ivals(2*len)
   5559                           deallocate(ivals)
   5560                        case (NF_FLOAT)
   5561                           allocate(rvals(2*len), STAT=istat)
   5562                           if ( istat .ne. 0 ) then
   5563                              write(text,'(A)') istat
   5564                              call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate array rvals. "// &
   5565                                   "  STAT = "//trim(text))
   5566                           end if
   5567                           error = NF_GET_VAR_REAL(ncid,i,rvals)
   5568                           call netcdf_err( error, mpp_file(unit), string=" Field="//trim(bounds_name) )
   5569                           mpp_file(unit)%Axis(j)%data_bounds(1:len) =rvals(1:(2*len-1):2)
   5570                           mpp_file(unit)%Axis(j)%data_bounds(len+1) = rvals(2*len)
   5571                           deallocate(rvals)
   5572                        case (NF_DOUBLE)
   5573                           allocate(r8vals(2*len), STAT=istat)
   5574                           if ( istat .ne. 0 ) then
   5575                              write(text,'(A)') istat
   5576                              call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate array r8vals. "//&
   5577                                   "  STAT = "//trim(text))
   5578                           end if
   5579                           error = NF_GET_VAR_DOUBLE(ncid,i,r8vals)
   5580                           call netcdf_err( error, mpp_file(unit), string=" Field="//trim(bounds_name) )
   5581                           mpp_file(unit)%Axis(j)%data_bounds(1:len) =r8vals(1:(2*len-1):2)
   5582                           mpp_file(unit)%Axis(j)%data_bounds(len+1) = r8vals(2*len)
   5583                           deallocate(r8vals)
   5584                        case default
   5585                           call mpp_error( FATAL, 'mpp_io_mod(mpp_read_meta): Invalid data type for dimension' )
   5586                        end select
   5587                        exit
   5588                     endif
   5589                  enddo
   5590               endif
   5591            endif
   5592            if (found_bounds) then
   5593               mpp_file(unit)%Axis(j)%name_bounds = trim(bounds_name)
   5594            else
   5595               deallocate(mpp_file(unit)%Axis(j)%data_bounds)
   5596               mpp_file(unit)%Axis(j)%data_bounds =>NULL()
   5597            endif
   5598         enddo
   5599 
   5600 ! assign variable info
   5601         nv = 0
   5602         do i=1, nvar_total
   5603            error=NF_INQ_VAR(ncid,i,name,type,nvdims,dimids,nvatts);call netcdf_err( error, mpp_file(unit) )
   5604 !
   5605 ! is this a dimension variable?
   5606 !

Page 206         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5607            isdim=.false.
   5608            do j=1,ndim
   5609               if( trim(lowercase(name)).EQ.trim(lowercase(mpp_file(unit)%Axis(j)%name)) )isdim=.true.
   5610            enddo
   5611 
   5612            if( .not.isdim )then
   5613 ! for non-dimension variables
   5614               nv=nv+1; if( nv.GT.mpp_file(unit)%nvar )call mpp_error( FATAL, 'variable index exceeds number of defined varia
   5614 bles' )
   5615               mpp_file(unit)%Var(nv)%type = type
   5616               mpp_file(unit)%Var(nv)%id = i
   5617               mpp_file(unit)%Var(nv)%name = name
   5618               mpp_file(unit)%Var(nv)%natt = nvatts
   5619 ! determine packing attribute based on NetCDF variable type
   5620              select case (type)
   5621              case(NF_SHORT)
   5622                  mpp_file(unit)%Var(nv)%pack = 4
   5623              case(NF_FLOAT)
   5624                  mpp_file(unit)%Var(nv)%pack = 2
   5625              case(NF_DOUBLE)
   5626                  mpp_file(unit)%Var(nv)%pack = 1
   5627              case (NF_INT)
   5628                  mpp_file(unit)%Var(nv)%pack = 2
   5629              case (NF_CHAR)
   5630                  mpp_file(unit)%Var(nv)%pack = 1
   5631              case default
   5632                    call mpp_error( FATAL, 'Invalid variable type in NetCDF file' )
   5633              end select
   5634 ! assign dimension ids
   5635               mpp_file(unit)%Var(nv)%ndim = nvdims
   5636               allocate(mpp_file(unit)%Var(nv)%axes(nvdims))
   5637               do j=1,nvdims
   5638                  mpp_file(unit)%Var(nv)%axes(j) = mpp_file(unit)%Axis(dimids(j))
   5639               enddo
   5640               allocate(mpp_file(unit)%Var(nv)%size(nvdims))
   5641 
   5642               do j=1,nvdims
   5643                  if(dimids(j).eq.mpp_file(unit)%recdimid  .and. mpp_file(unit)%time_level/=-1)then
   5644                     mpp_file(unit)%Var(nv)%time_axis_index = j   !dimids(j). z1l: Should be j.
   5645 !This will cause problem when appending to existed file.
   5646                     mpp_file(unit)%Var(nv)%size(j)=1    ! dimid length set to 1 here for consistency w/ mpp_write
   5647                  else
   5648                     mpp_file(unit)%Var(nv)%size(j)=mpp_file(unit)%Axis(dimids(j))%len
   5649                  endif
   5650               enddo
   5651 ! assign variable atts
   5652               if( nvatts.GT.0 )allocate(mpp_file(unit)%Var(nv)%Att(nvatts))
   5653 
   5654               do j=1,nvatts
   5655                  mpp_file(unit)%Var(nv)%Att(j) = default_att
   5656               enddo
   5657 
   5658               do j=1,nvatts
   5659                  error=NF_INQ_ATTNAME(ncid,i,j,attname);call netcdf_err( error, mpp_file(unit), field=mpp_file(unit)%Var(nv)
   5659  )
   5660                  error=NF_INQ_ATT(ncid,i,attname,type,len)
   5661                  call netcdf_err( error, mpp_file(unit),field= mpp_file(unit)%Var(nv), string=' Attribute='//attname )

Page 207         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5662                  mpp_file(unit)%Var(nv)%Att(j)%name = trim(attname)
   5663                  mpp_file(unit)%Var(nv)%Att(j)%type = type
   5664                  mpp_file(unit)%Var(nv)%Att(j)%len = len
   5665 
   5666                  select case (type)
   5667                    case (NF_CHAR)
   5668                      if (len.gt.512) call mpp_error(FATAL,'VAR ATT too long')
   5669                      error=NF_GET_ATT_TEXT(ncid,i,trim(attname),mpp_file(unit)%Var(nv)%Att(j)%catt(1:len))
   5670                      call netcdf_err( error, mpp_file(unit), field=mpp_file(unit)%var(nv), attr=mpp_file(unit)%var(nv)%att(j
   5670 ) )
   5671                      if (verbose .and. pe == 0 )&
   5672                            print *, 'Var ',nv,' ATT ',trim(attname),' ',mpp_file(unit)%Var(nv)%Att(j)%catt(1:len)
   5673 ! store integers as float internally
   5674                    case (NF_SHORT)
   5675                      allocate(mpp_file(unit)%Var(nv)%Att(j)%fatt(len), STAT=istat)
   5676                      if ( istat .ne. 0 ) then
   5677                         write(text,'(A)') istat
   5678                         call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Var%Att%fatt, "//&
   5679                              & "NF_SHORT CASE.  STAT = "//trim(text))
   5680                      end if
   5681                      allocate(i2vals(len), STAT=istat)
   5682                      if ( istat .ne. 0 ) then
   5683                         write(text,'(A)') istat
   5684                         call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate temporary array i2vals.  STAT =
   5684  "&
   5685                              & //trim(text))
   5686                      end if
   5687                      error=NF_GET_ATT_INT2(ncid,i,trim(attname),i2vals)
   5688                      call netcdf_err( error, mpp_file(unit), field=mpp_file(unit)%var(nv), attr=mpp_file(unit)%var(nv)%att(j
   5688 ) )
   5689                      mpp_file(unit)%Var(nv)%Att(j)%fatt(1:len)= i2vals(1:len)
   5690                      if( verbose  .and. pe == 0 )&
   5691                           print *, 'Var ',nv,' ATT ',trim(attname),' ',mpp_file(unit)%Var(nv)%Att(j)%fatt
   5692                      deallocate(i2vals)
   5693                    case (NF_INT)
   5694                      allocate(mpp_file(unit)%Var(nv)%Att(j)%fatt(len), STAT=istat)
   5695                      if ( istat .ne. 0 ) then
   5696                         write(text,'(A)') istat
   5697                         call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Var%Att%fatt, "//&
   5698                              & "NF_INT CASE.  STAT = "//trim(text))
   5699                      end if
   5700                      allocate(ivals(len), STAT=istat)
   5701                      if ( istat .ne. 0 ) then
   5702                         write(text,'(A)') istat
   5703                         call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): "// &
   5704                         "Unable to allocate temporary array ivals.  STAT = "&
   5705                              & //trim(text))
   5706                      end if
   5707                      error=NF_GET_ATT_INT(ncid,i,trim(attname),ivals)
   5708                      call netcdf_err( error, mpp_file(unit), field=mpp_file(unit)%var(nv), &
   5709                                      attr=mpp_file(unit)%var(nv)%att(j) )
   5710                      mpp_file(unit)%Var(nv)%Att(j)%fatt(1:len)=ivals(1:len)
   5711                      if( verbose .and. pe == 0  )&
   5712                           print *, 'Var ',nv,' ATT ',trim(attname),' ',mpp_file(unit)%Var(nv)%Att(j)%fatt
   5713                      deallocate(ivals)
   5714                    case (NF_FLOAT)
   5715                      allocate(mpp_file(unit)%Var(nv)%Att(j)%fatt(len), STAT=istat)

Page 208         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5716                      if ( istat .ne. 0 ) then
   5717                         write(text,'(A)') istat
   5718                         call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): "// &
   5719                         "Unable to allocate mpp_file%Var%Att%fatt, "//&
   5720                              & "NF_FLOAT CASE.  STAT = "//trim(text))
   5721                      end if
   5722                      allocate(rvals(len), STAT=istat)
   5723                      if ( istat .ne. 0 ) then
   5724                         write(text,'(A)') istat
   5725                         call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): "// &
   5726                         "Unable to allocate temporary array rvals.  STAT = "&
   5727                              & //trim(text))
   5728                      end if
   5729                      error=NF_GET_ATT_REAL(ncid,i,trim(attname),rvals)
   5730                      call netcdf_err( error, mpp_file(unit), field=mpp_file(unit)%var(nv), &
   5731                                      attr=mpp_file(unit)%var(nv)%att(j) )
   5732                      mpp_file(unit)%Var(nv)%Att(j)%fatt(1:len)=rvals(1:len)
   5733                      if( verbose  .and. pe == 0 )&
   5734                           print *, 'Var ',nv,' ATT ',trim(attname),' ',mpp_file(unit)%Var(nv)%Att(j)%fatt
   5735                      deallocate(rvals)
   5736                    case (NF_DOUBLE)
   5737                      allocate(mpp_file(unit)%Var(nv)%Att(j)%fatt(len), STAT=istat)
   5738                      if ( istat .ne. 0 ) then
   5739                         write(text,'(A)') istat
   5740                         call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): Unable to allocate mpp_file%Var%Att%fatt, "//&
   5741                              & "NF_DOUBLE CASE.  STAT = "//trim(text))
   5742                      end if
   5743                      allocate(r8vals(len), STAT=istat)
   5744                      if ( istat .ne. 0 ) then
   5745                         write(text,'(A)') istat
   5746                         call mpp_error(FATAL, "mpp_io_mod(mpp_read_meta): "// &
   5747                         "Unable to allocate temporary array r8vals.  STAT = "&
   5748                              & //trim(text))
   5749                      end if
   5750                       error=NF_GET_ATT_DOUBLE(ncid,i,trim(attname),r8vals)
   5751                      call netcdf_err( error, mpp_file(unit), field=mpp_file(unit)%var(nv), &
   5752                                      attr=mpp_file(unit)%var(nv)%att(j) )
   5753                      mpp_file(unit)%Var(nv)%Att(j)%fatt(1:len)=r8vals(1:len)
   5754                      if( verbose .and. pe == 0  ) &
   5755                           print *, 'Var ',nv,' ATT ',trim(attname),' ',mpp_file(unit)%Var(nv)%Att(j)%fatt
   5756                      deallocate(r8vals)
   5757                    case default
   5758                         call mpp_error( FATAL, 'Invalid data type for variable att' )
   5759                  end select
   5760 ! assign pre-defined field attributes
   5761                  select case (trim(attname))
   5762                     case ('long_name')
   5763                       mpp_file(unit)%Var(nv)%longname=mpp_file(unit)%Var(nv)%Att(j)%catt(1:len)
   5764                     case('units')
   5765                       mpp_file(unit)%Var(nv)%units=mpp_file(unit)%Var(nv)%Att(j)%catt(1:len)
   5766                     case('scale_factor')
   5767                        mpp_file(unit)%Var(nv)%scale=mpp_file(unit)%Var(nv)%Att(j)%fatt(1)
   5768                     case('missing')
   5769                        mpp_file(unit)%Var(nv)%missing=mpp_file(unit)%Var(nv)%Att(j)%fatt(1)
   5770                     case('missing_value')
   5771                        mpp_file(unit)%Var(nv)%missing=mpp_file(unit)%Var(nv)%Att(j)%fatt(1)
   5772                     case('_FillValue')

Page 209         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5773                        mpp_file(unit)%Var(nv)%fill=mpp_file(unit)%Var(nv)%Att(j)%fatt(1)
   5774                     case('add_offset')
   5775                        mpp_file(unit)%Var(nv)%add=mpp_file(unit)%Var(nv)%Att(j)%fatt(1)
   5776                     case('packing')
   5777                        mpp_file(unit)%Var(nv)%pack=mpp_file(unit)%Var(nv)%Att(j)%fatt(1)
   5778                     case('valid_range')
   5779                        mpp_file(unit)%Var(nv)%min=mpp_file(unit)%Var(nv)%Att(j)%fatt(1)
   5780                        mpp_file(unit)%Var(nv)%max=mpp_file(unit)%Var(nv)%Att(j)%fatt(2)
   5781                     case('checksum')
   5782                          checksum_char = mpp_file(unit)%Var(nv)%Att(j)%catt
   5783 !                        Scan  checksum attribute for , delimiter. If found implies multiple time levels.
   5784                          checksumf = 0
   5785                          num_checksumf = 1
   5786 
   5787                          last = len_trim(checksum_char)
   5788                          is = index (trim(checksum_char),",") ! A value of 0 implies only 1 checksum value
   5789                          do while ((is > 0) .and. (is < (last-15)))
   5790                            is = is + scan(checksum_char(is:last), "," ) ! move starting pointer after ","
   5791                            num_checksumf = num_checksumf + 1
   5792                          enddo
   5793                          is =1
   5794                          do k = 1, num_checksumf
   5795                            read (checksum_char(is:is+15),'(Z16)') checksumf
   5796                            mpp_file(unit)%Var(nv)%checksum(k) = checksumf
   5797                            is = is + 17 ! Move index past the ,
   5798                          enddo
   5799                  end select
   5800               enddo
   5801            endif
   5802         enddo   ! end variable loop
   5803       else
   5804         call mpp_error( FATAL,  'MPP READ CURRENTLY DOES NOT SUPPORT NON-NETCDF' )
   5805       endif
   5806 
   5807       mpp_file(unit)%initialized = .TRUE.
   5808 # 1203
   5809 
   5810       return
   5811     end subroutine mpp_read_meta

Page 210         Source Listing                  MPP_READ_META
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_read.inc



ENTRY POINTS

  Name                                    
                                          
 mpp_io_mod_mp_mpp_read_meta_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   5503                                 scalar                    5503,5521                         
 ATTNAME                    Local  5037     CHAR            128         scalar                    5349,5350,5351,5353,5360,5363,5381
                                                                                                  ,5386,5402,5406,5424,5428,5446,545
                                                                                                  0,5457,5659,5660,5661,5662,5669,56
                                                                                                  72,5687,5691,5707,5712,5729,5734,5
                                                                                                  750,5755,5761                     
 ATTVAL                     Local  5037     CHAR            128         scalar                    5489,5490,5492                    
 BOUNDS_NAME                Local  5037     CHAR            128         scalar                    5507,5512,5522,5526,5534,5537,5556
                                                                                                  ,5568,5580,5593                   
 CHECKSUMF                  Local  5039     I(8)            8           scalar                    5784,5795,5796                    
 CHECKSUM_CHAR              Local  5040     CHAR            64          scalar                    5782,5787,5788,5790,5795          
 CHECK_EXIST                Local  5034     I(4)            4           scalar                                                      
 CUT0@0                     Local  5466     CHAR            256         scalar                                                      
 DIMID                      Local  5035     I(4)            4           scalar                    5232,5233,5234,5235,5236,5241,5242
                                                                                                  ,5254,5255,5258,5259,5271,5272,527
                                                                                                  5,5276,5288,5289,5315,5331,5342,53
                                                                                                  45,5353,5354,5355,5360,5361,5363,5
                                                                                                  364,5369,5382,5383,5385,5386,5389,
                                                                                                  5403,5404,5406,5407,5410,5425,5426
                                                                                                  ,5428,5429,5432,5447,5448,5450,545
                                                                                                  1,5459,5461,5463,5465,5466,5467,54
                                                                                                  68,5469,5470,5471,5472,5473,5474,5
                                                                                                  476,5477,5478,5479,5480,5481,5482,
                                                                                                  5483,5484,5485,5487,5489,5491,5493
 DIMIDS                     Local  5036     I(4)            4     1     1        ALC              5076,5207,5225,5533,5539,5543,5603
                                                                                                  ,5638,5643,5648                   
 ERROR                      Local  5034     I(4)            4           scalar                    5055,5056,5067,5068,5069,5070,5096
                                                                                                  ,5097,5112,5113,5132,5133,5150,515
                                                                                                  1,5170,5171,5188,5189,5200,5207,52
                                                                                                  25,5232,5254,5271,5288,5314,5315,5
                                                                                                  330,5331,5349,5350,5351,5360,5361,
                                                                                                  5381,5382,5402,5403,5424,5425,5446
                                                                                                  ,5447,5533,5555,5556,5567,5568,557
                                                                                                  9,5580,5603,5659,5660,5661,5669,56
                                                                                                  70,5687,5688,5707,5708,5729,5730,5
                                                                                                  750,5751                          
 FOUND_BOUNDS               Local  5038     L(4)            4           scalar                    5508,5513,5518,5519,5523,5531,5535
                                                                                                  ,5592                             
 GET_TIME_INFO              Local  5038     L(4)            4           scalar                    5048,5049,5294                    
 I                          Local  5034     I(4)            4           scalar                    5084,5085,5088,5089,5095,5096,5098
                                                                                                  ,5099,5100,5109,5110,5112,5113,511
                                                                                                  4,5120,5133,5135,5138,5151,5153,51
                                                                                                  58,5171,5172,5173,5176,5189,5190,5
                                                                                                  191,5199,5200,5201,5202,5206,5207,

Page 211         Source Listing                  MPP_READ_META
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_read.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5217,5218,5224,5225,5235,5238,5254
                                                                                                  ,5271,5288,5314,5330,5349,5350,536
                                                                                                  0,5381,5402,5424,5446,5509,5510,55
                                                                                                  11,5512,5520,5521,5522,5524,5527,5
                                                                                                  532,5533,5541,5545,5555,5567,5579,
                                                                                                  5602,5603,5616,5659,5660,5669,5687
                                                                                                  ,5707,5729,5750                   
 I2VALS                     Local  5043     I(2)            2     1     1        ALC              5126,5132,5134,5135,5136,5375,5381
                                                                                                  ,5383,5387,5681,5687,5689,5692    
 INDEX                      Func   5788                                 scalar                    5788                              
 IS                         Local  5041     I(4)            4           scalar                    5788,5789,5790,5793,5795,5797     
 ISDIM                      Local  5038     L(4)            4           scalar                    5208,5210,5212,5226,5228,5231,5607
                                                                                                  ,5609,5612                        
 ISTAT                      Local  5034     I(4)            4           scalar                    5120,5121,5122,5126,5127,5128,5138
                                                                                                  ,5139,5140,5144,5145,5146,5158,515
                                                                                                  9,5160,5164,5165,5166,5176,5177,51
                                                                                                  78,5182,5183,5184,5242,5243,5244,5
                                                                                                  248,5249,5250,5259,5260,5261,5265,
                                                                                                  5266,5267,5276,5277,5278,5282,5283
                                                                                                  ,5284,5297,5298,5299,5305,5306,530
                                                                                                  7,5321,5322,5323,5369,5370,5371,53
                                                                                                  75,5376,5377,5389,5390,5391,5396,5
                                                                                                  397,5398,5410,5411,5412,5417,5418,
                                                                                                  5419,5432,5433,5434,5439,5440,5441
                                                                                                  ,5549,5550,5551,5561,5562,5563,557
                                                                                                  3,5574,5575,5675,5676,5677,5681,56
                                                                                                  82,5683,5694,5695,5696,5700,5701,5
                                                                                                  702,5715,5716,5717,5722,5723,5724,
                                                                                                  5737,5738,5739,5743,5744,5745     
 IVALS                      Local  5044     I(4)            4     1     1        ALC              5144,5150,5152,5153,5154,5156,5248
                                                                                                  ,5254,5255,5256,5396,5402,5404,540
                                                                                                  8,5549,5555,5557,5558,5559,5700,57
                                                                                                  07,5710,5713                      
 J                          Local  5034     I(4)            4           scalar                    5209,5210,5227,5228,5344,5345,5348
                                                                                                  ,5349,5353,5354,5355,5360,5361,536
                                                                                                  4,5369,5382,5383,5386,5389,5403,54
                                                                                                  04,5407,5410,5425,5426,5429,5432,5
                                                                                                  447,5448,5451,5459,5461,5463,5465,
                                                                                                  5476,5487,5489,5502,5503,5504,5505
                                                                                                  ,5506,5509,5510,5511,5512,5527,555
                                                                                                  7,5558,5569,5570,5581,5582,5593,55
                                                                                                  95,5596,5608,5609,5637,5638,5642,5
                                                                                                  643,5644,5646,5648,5654,5655,5658,
                                                                                                  5659,5662,5663,5664,5669,5670,5672
                                                                                                  ,5675,5688,5689,5691,5694,5709,571
                                                                                                  0,5712,5715,5731,5732,5734,5737,57
                                                                                                  52,5753,5755,5763,5765,5767,5769,5
                                                                                                  771,5773,5775,5777,5779,5780,5782 
 K                          Local  5041     I(4)            4           scalar                    5794,5796                         
 LAST                       Local  5041     I(4)            4           scalar                    5787,5789,5790                    
 LEN                        Local  5033     I(4)            4           scalar                    5097,5099,5106,5108,5109,5114,5120
                                                                                                  ,5126,5134,5135,5138,5144,5152,515
                                                                                                  3,5158,5164,5172,5173,5176,5182,51
                                                                                                  90,5191,5200,5202,5241,5242,5248,5
                                                                                                  255,5258,5259,5265,5272,5275,5276,

Page 212         Source Listing                  MPP_READ_META
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_read.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5282,5289,5295,5296,5297,5305,5317
                                                                                                  ,5318,5321,5333,5334,5350,5355,535
                                                                                                  9,5364,5369,5375,5383,5389,5396,54
                                                                                                  04,5410,5417,5426,5432,5439,5448,5
                                                                                                  459,5461,5463,5465,5476,5487,5489,
                                                                                                  5504,5505,5524,5543,5549,5557,5558
                                                                                                  ,5561,5569,5570,5573,5581,5582,566
                                                                                                  0,5664,5668,5669,5672,5675,5681,56
                                                                                                  89,5694,5700,5710,5715,5722,5732,5
                                                                                                  737,5743,5753,5763,5765           
 LEN_TRIM                   Func   5787                                 scalar                    5787                              
 MAX_ATT_LENGTH             Param  5106     I(4)            4           scalar                    411,5106,5359                     
 MPP_BROADCAST_REAL4        Subr   5317                                          PRIV             5317                              
 MPP_READ_META              Subr   5021                                                                                             
 NAME                       Local  5037     CHAR            128         scalar                    5096,5097,5098,5112,5114,5132,5134
                                                                                                  ,5150,5152,5154,5170,5173,5188,519
                                                                                                  1,5200,5201,5207,5210,5225,5228,52
                                                                                                  32,5533,5534,5603,5609,5617       
 NATT                       Local  5033     I(4)            4           scalar                    5056,5060,5075,5088,5095          
 NCID                       Local  5033     I(4)            4           scalar                    5054,5055,5067,5069,5096,5097,5112
                                                                                                  ,5132,5150,5170,5188,5200,5207,522
                                                                                                  5,5232,5254,5271,5288,5314,5330,53
                                                                                                  49,5350,5360,5381,5402,5424,5446,5
                                                                                                  533,5555,5567,5579,5603,5659,5660,
                                                                                                  5669,5687,5707,5729,5750          
 NDIM                       Local  5033     I(4)            4           scalar                    5055,5059,5076,5077,5084,5199,5209
                                                                                                  ,5227,5608                        
 NF_GET_ATT_DOUBLE          Func   5188     I(4)            4           scalar   PRIV             5188,5446,5750                    
 NF_GET_ATT_INT             Func   5150     I(4)            4           scalar   PRIV             5150,5402,5707                    
 NF_GET_ATT_INT2            Func   5132     I(4)            4           scalar   PRIV             5132,5381,5687                    
 NF_GET_ATT_REAL            Func   5170     I(4)            4           scalar   PRIV             5170,5424,5729                    
 NF_GET_ATT_TEXT            Func   5112     I(4)            4           scalar   PRIV             5112,5360,5669                    
 NF_GET_VAR_DOUBLE          Func   5288     I(4)            4           scalar   PRIV             5288,5330,5579                    
 NF_GET_VAR_INT             Func   5254     I(4)            4           scalar   PRIV             5254,5555                         
 NF_GET_VAR_REAL            Func   5271     I(4)            4           scalar   PRIV             5271,5314,5567                    
 NF_GLOBAL                  Param  5096     I(4)            4           scalar   PRIV             5096,5097,5112,5132,5150,5170,5188
                                                                                                  ,6055,8718,8720                   
 NF_INQ                     Func   5055     I(4)            4           scalar   PRIV             5055                              
 NF_INQ_ATT                 Func   5097     I(4)            4           scalar   PRIV             5097,5350,5660                    
 NF_INQ_ATTNAME             Func   5096     I(4)            4           scalar   PRIV             5096,5349,5659                    
 NF_INQ_DIMID               Func   5232     I(4)            4           scalar   PRIV             5232                              
 NF_INQ_VAR                 Func   5207     I(4)            4           scalar   PRIV             5207,5225,5533,5603               
 NUM_CHECKSUMF              Local  5041     I(4)            4           scalar                    5785,5791,5794                    
 NV                         Local  5033     I(4)            4           scalar                    5601,5614,5615,5616,5617,5618,5622
                                                                                                  ,5624,5626,5628,5630,5635,5636,563
                                                                                                  8,5640,5644,5646,5648,5652,5655,56
                                                                                                  59,5661,5662,5663,5664,5669,5670,5
                                                                                                  672,5675,5688,5689,5691,5694,5708,
                                                                                                  5709,5710,5712,5715,5730,5731,5732
                                                                                                  ,5734,5737,5751,5752,5753,5755,576
                                                                                                  3,5765,5767,5769,5771,5773,5775,57
                                                                                                  77,5779,5780,5782,5796            
 NVAR                       Local  5033     I(4)            4           scalar                    5205,5212,5214,5215,5217          
 NVAR_TOTAL                 Local  5033     I(4)            4           scalar                    5055,5206,5224,5532,5602          
 NVATTS                     Local  5035     I(4)            4           scalar                    5207,5225,5236,5342,5344,5348,5533

Page 213         Source Listing                  MPP_READ_META
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_read.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,5603,5618,5652,5654,5658         
 NVDIMS                     Local  5035     I(4)            4           scalar                    5207,5225,5533,5536,5603,5635,5636
                                                                                                  ,5637,5640,5642                   
 PRESENT                    Func   5049                                 scalar                    5049                              
 R8VALS                     Local  5046     R(8)            8     1     1        ALC              5182,5188,5190,5192,5282,5288,5289
                                                                                                  ,5290,5321,5330,5333,5334,5335,543
                                                                                                  9,5446,5448,5452,5573,5579,5581,55
                                                                                                  82,5583,5743,5750,5753,5756       
 READ_TIME                  Dummy  5021     L(4)            4           scalar   ARG,IN           5049                              
 RECDIM                     Local  5033     I(4)            4           scalar                    5056,5061,5066,5067               
 RVALS                      Local  5045     R(4)            4     1     1        ALC              5164,5170,5172,5174,5265,5271,5272
                                                                                                  ,5273,5305,5314,5317,5318,5319,541
                                                                                                  7,5424,5426,5430,5561,5567,5569,55
                                                                                                  70,5571,5722,5729,5732,5735       
 SCAN                       Func   5790                                 scalar                    5790                              
 SIZE                       Func   5504                                 scalar                    5504,5524                         
 TRIM                       Func   5097                                 scalar                    5097,5114,5124,5130,5134,5142,5148
                                                                                                  ,5152,5154,5162,5168,5173,5180,518
                                                                                                  6,5191,5210,5228,5246,5252,5263,52
                                                                                                  69,5280,5286,5301,5309,5325,5350,5
                                                                                                  353,5360,5363,5373,5379,5381,5385,
                                                                                                  5386,5394,5400,5402,5406,5415,5422
                                                                                                  ,5424,5428,5437,5444,5446,5450,545
                                                                                                  7,5467,5469,5471,5473,5478,5480,54
                                                                                                  82,5484,5510,5511,5522,5526,5534,5
                                                                                                  537,5538,5541,5545,5553,5556,5565,
                                                                                                  5568,5577,5580,5593,5609,5662,5669
                                                                                                  ,5672,5679,5685,5687,5691,5698,570
                                                                                                  5,5707,5712,5720,5727,5729,5734,57
                                                                                                  41,5748,5750,5755,5761,5788       
 TYPE                       Local  5035     I(4)            4           scalar                    5097,5100,5104,5207,5225,5233,5239
                                                                                                  ,5303,5350,5354,5357,5533,5547,560
                                                                                                  3,5615,5620,5660,5663,5666        
 UNIT                       Dummy  5021     I(4)            4           scalar   ARG,IN           5053,5054,5056,5059,5060,5061,5067
                                                                                                  ,5068,5069,5070,5072,5075,5077,508
                                                                                                  5,5089,5096,5097,5098,5099,5100,51
                                                                                                  09,5110,5112,5113,5114,5120,5133,5
                                                                                                  135,5138,5151,5153,5155,5158,5171,
                                                                                                  5172,5173,5176,5189,5190,5191,5200
                                                                                                  ,5201,5202,5207,5210,5214,5215,521
                                                                                                  8,5225,5228,5232,5233,5234,5235,52
                                                                                                  36,5238,5241,5242,5254,5255,5258,5
                                                                                                  259,5271,5272,5275,5276,5288,5289,
                                                                                                  5295,5297,5315,5318,5331,5334,5342
                                                                                                  ,5345,5349,5351,5353,5354,5355,536
                                                                                                  0,5361,5363,5364,5369,5382,5383,53
                                                                                                  85,5386,5389,5403,5404,5406,5407,5
                                                                                                  410,5425,5426,5428,5429,5432,5447,
                                                                                                  5448,5450,5451,5459,5461,5463,5465
                                                                                                  ,5466,5467,5468,5469,5470,5471,547
                                                                                                  2,5473,5474,5476,5477,5478,5479,54
                                                                                                  80,5481,5482,5483,5484,5485,5487,5
                                                                                                  489,5491,5493,5502,5503,5504,5505,
                                                                                                  5506,5509,5510,5511,5512,5520,5521
                                                                                                  ,5522,5524,5526,5527,5533,5538,553

Page 214         Source Listing                  MPP_READ_META
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_read.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  9,5541,5543,5545,5556,5557,5558,55
                                                                                                  68,5569,5570,5580,5581,5582,5593,5
                                                                                                  595,5596,5603,5609,5614,5615,5616,
                                                                                                  5617,5618,5622,5624,5626,5628,5630
                                                                                                  ,5635,5636,5638,5640,5643,5644,564
                                                                                                  6,5648,5652,5655,5659,5661,5662,56
                                                                                                  63,5664,5669,5670,5672,5675,5688,5
                                                                                                  689,5691,5694,5708,5709,5710,5712,
                                                                                                  5715,5730,5731,5732,5734,5737,5751
                                                                                                  ,5752,5753,5755,5763,5765,5767,576
                                                                                                  9,5771,5773,5775,5777,5779,5780,57
                                                                                                  82,5796,5807                      
 UNLIMNAME                  Local  5037     CHAR            128         scalar                    5067,5069,5070                    

Page 215         Source Listing                  MPP_READ_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5812 
   5813 
   5814     function cut0(string)
   5815       character(len=256) :: cut0
   5816       character(len=*), intent(in) :: string
   5817       integer :: i
   5818 
   5819       cut0 = string
   5820       i = index(string,achar(0))
   5821       if(i > 0) cut0(i:i) = ' '
   5822 
   5823       return
   5824     end function cut0


ENTRY POINTS

  Name                           
                                 
 mpp_io_mod_mp_cut0_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACHAR                      Func   5820                                 scalar                    5820                              
 CUT0                       Func   5814     CHAR            256         scalar                    5466,5477,5819,5821               
 I                          Local  5817     I(4)            4           scalar                    5820,5821                         
 INDEX                      Func   5820                                 scalar                    5820                              
 STRING                     Dummy  5814     CHAR                        scalar   ARG,IN           5819,5820                         

Page 216         Source Listing                  CUT0
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5825 
   5826 
   5827     subroutine mpp_get_tavg_info(unit, field, fields, tstamp, tstart, tend, tavg)
   5828       implicit none
   5829       integer, intent(in) :: unit
   5830       type(fieldtype), intent(in) :: field
   5831       type(fieldtype), intent(in), dimension(:) :: fields
   5832       real, intent(inout), dimension(:) :: tstamp, tstart, tend, tavg
   5833 !balaji: added because mpp_read can only read default reals
   5834 !      when running with -r4 this will read a default real and then cast double
   5835       real :: t_default_real
   5836 
   5837 
   5838       integer :: n, m
   5839       logical :: tavg_info_exists
   5840 
   5841       tavg = -1.0
   5842 
   5843 
   5844       if (size(tstamp,1) /= size(tstart,1)) call mpp_error(FATAL,&
   5845             'size mismatch in mpp_get_tavg_info')
   5846 
   5847       if ((size(tstart,1) /= size(tend,1)) .OR. (size(tstart,1) /= size(tavg,1))) then
   5848           call mpp_error(FATAL,'size mismatch in mpp_get_tavg_info')
   5849       endif
   5850 
   5851       tstart = tstamp
   5852       tend = tstamp
   5853 
   5854       tavg_info_exists = .false.
   5855 
   5856 
   5857       do n= 1, field%natt
   5858          if (field%Att(n)%type .EQ. NF_CHAR) then
   5859              if (field%Att(n)%name(1:13) == 'time_avg_info') then
   5860                  tavg_info_exists = .true.
   5861                  exit
   5862              endif
   5863          endif
   5864       enddo
   5865 
   5866       if (tavg_info_exists) then
   5867           do n = 1, size(fields(:))
   5868              if (trim(fields(n)%name) == 'average_T1') then
   5869                  do m = 1, size(tstart(:))
   5870                     call mpp_read(unit, fields(n),t_default_real, m)
   5871                     tstart(m) = t_default_real
   5872                  enddo
   5873              endif
   5874              if (trim(fields(n)%name) == 'average_T2') then
   5875                  do m = 1, size(tend(:))
   5876                     call mpp_read(unit, fields(n),t_default_real, m)
   5877                     tend(m) = t_default_real
   5878                  enddo
   5879              endif
   5880              if (trim(fields(n)%name) == 'average_DT') then
   5881                  do m = 1, size(tavg(:))

Page 217         Source Listing                  MPP_GET_TAVG_INFO
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5882                     call mpp_read(unit, fields(n),t_default_real, m)
   5883                     tavg(m) = t_default_real
   5884                  enddo
   5885              endif
   5886           enddo
   5887 
   5888       end if
   5889       return
   5890     end subroutine mpp_get_tavg_info


ENTRY POINTS

  Name                                        
                                              
 mpp_io_mod_mp_mpp_get_tavg_info_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIELD                      Dummy  5827     FIELDTYPE       1096        scalar   ARG,IN           5857,5858,5859                    
 FIELDS                     Dummy  5827     RECORD          1096  1     1        ARG,IN           5867,5868,5870,5874,5876,5880,5882
 M                          Local  5838     I(4)            4           scalar                    5869,5870,5871,5875,5876,5877,5881
                                                                                                  ,5882,5883                        
 MPP_GET_TAVG_INFO          Subr   5827                                                                                             
 N                          Local  5838     I(4)            4           scalar                    5857,5858,5859,5867,5868,5870,5874
                                                                                                  ,5876,5880,5882                   
 SIZE                       Func   5844                                 scalar                    5844,5847,5867,5869,5875,5881     
 TAVG                       Dummy  5827     R(8)            8     1     1        ARG,INOUT        5841,5847,5881,5883               
 TAVG_INFO_EXISTS           Local  5839     L(4)            4           scalar                    5854,5860,5866                    
 TEND                       Dummy  5827     R(8)            8     1     1        ARG,INOUT        5847,5852,5875,5877               
 TRIM                       Func   5868                                 scalar                    5868,5874,5880                    
 TSTAMP                     Dummy  5827     R(8)            8     1     1        ARG,INOUT        5844,5851,5852                    
 TSTART                     Dummy  5827     R(8)            8     1     1        ARG,INOUT        5844,5847,5851,5869,5871          
 T_DEFAULT_REAL             Local  5835     R(8)            8           scalar                    5870,5871,5876,5877,5882,5883     
 UNIT                       Dummy  5827     I(4)            4           scalar   ARG,IN           5870,5876,5882                    

Page 218         Source Listing                  MPP_GET_TAVG_INFO
2021-06-01 08:53                                 ../mpp/include/mpp_io_read.inc

   5891 
   5892 !#######################################################################
   5893 # 1113 "mpp_io.F90" 2 
   5894 # 1 "../mpp/include/mpp_io_write.inc" 1 
   5895 ! -*-f90-*-
   5896 
   5897 !***********************************************************************
   5898 !*                   GNU Lesser General Public License
   5899 !*
   5900 !* This file is part of the GFDL Flexible Modeling System (FMS).
   5901 !*
   5902 !* FMS is free software: you can redistribute it and/or modify it under
   5903 !* the terms of the GNU Lesser General Public License as published by
   5904 !* the Free Software Foundation, either version 3 of the License, or (at
   5905 !* your option) any later version.
   5906 !*
   5907 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   5908 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   5909 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   5910 !* for more details.
   5911 !*
   5912 !* You should have received a copy of the GNU Lesser General Public
   5913 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   5914 !***********************************************************************
   5915 
   5916 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   5917 !                                                                            !
   5918 !                             MPP_WRITE_META                                 !
   5919 !                                                                            !
   5920 ! This series of routines is used to describe the contents of the file       !
   5921 ! being written on <unit>. Each file can contain any number of fields,       !
   5922 ! which can be functions of 0-3 spatial axes and 0-1 time axes. Axis         !
   5923 ! descriptors are stored in the <axistype> structure and field               !
   5924 ! descriptors in the <fieldtype> structure.                                  !
   5925 !                                                                            !
   5926 !  type, public :: axistype                                                  !
   5927 !     sequence                                                               !
   5928 !     character(len=128) :: name                                             !
   5929 !     character(len=128) :: units                                            !
   5930 !     character(len=256) :: longname                                         !
   5931 !     integer :: sense           !+/-1, depth or height?                     !
   5932 !     type(domain1D) :: domain                                               !
   5933 !     real, pointer :: data(:) !axis values (not used if time axis)          !
   5934 !     integer :: id                                                          !
   5935 !  end type axistype                                                         !
   5936 !                                                                            !
   5937 !  type, public :: fieldtype                                                 !
   5938 !     sequence                                                               !
   5939 !     character(len=128) :: name                                             !
   5940 !     character(len=128) :: units                                            !
   5941 !     character(len=256) :: longname                                         !
   5942 !     character(len=256) :: standard_name  !CF standard name                 !
   5943 !     real :: min, max, missing, fill, scale, add                            !
   5944 !     type(axistype), pointer :: axis(:)                                     !
   5945 !     integer :: id                                                          !
   5946 !  end type fieldtype                                                        !
   5947 !                                                                            !

Page 219         Source Listing                  MPP_GET_TAVG_INFO
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   5948 ! The metadata contained in the type is always written for each axis and     !
   5949 ! field. Any other metadata one wishes to attach to an axis or field         !
   5950 ! can subsequently be passed to mpp_write_meta using the ID, as shown below. !
   5951 !                                                                            !
   5952 ! mpp_write_meta can take several forms:                                     !
   5953 !                                                                            !
   5954 !  mpp_write_meta( unit, name, rval=rval, pack=pack )                        !
   5955 !  mpp_write_meta( unit, name, ival=ival )                                   !
   5956 !  mpp_write_meta( unit, name, cval=cval )                                   !
   5957 !      integer, intent(in) :: unit                                           !
   5958 !      character(len=*), intent(in) :: name                                  !
   5959 !      real, intent(in), optional :: rval(:)                                 !
   5960 !      integer, intent(in), optional :: ival(:)                              !
   5961 !      character(len=*), intent(in), optional :: cval                        !
   5962 !                                                                            !
   5963 ! This form defines global metadata associated with the file as a            !
   5964 ! whole. The attribute is named <name> and can take on a real, integer       !
   5965 ! or character value. <rval> and <ival> can be scalar or 1D arrays.          !
   5966 !                                                                            !
   5967 !  mpp_write_meta( unit, id, name, rval=rval, pack=pack )                    !
   5968 !  mpp_write_meta( unit, id, name, ival=ival )                               !
   5969 !  mpp_write_meta( unit, id, name, cval=cval )                               !
   5970 !      integer, intent(in) :: unit, id                                       !
   5971 !      character(len=*), intent(in) :: name                                  !
   5972 !      real, intent(in), optional :: rval(:)                                 !
   5973 !      integer, intent(in), optional :: ival(:)                              !
   5974 !      character(len=*), intent(in), optional :: cval                        !
   5975 !                                                                            !
   5976 ! This form defines metadata associated with a previously defined            !
   5977 ! axis or field, identified to mpp_write_meta by its unique ID <id>.         !
   5978 ! The attribute is named <name> and can take on a real, integer              !
   5979 ! or character value. <rval> and <ival> can be scalar or 1D arrays.          !
   5980 ! This need not be called for attributes already contained in                !
   5981 ! the type.                                                                  !
   5982 !                                                                            !
   5983 ! PACK can take values 1,2,4,8. This only has meaning when writing           !
   5984 ! floating point numbers. The value of PACK defines the number of words      !
   5985 ! written into 8 bytes. For pack=4 and pack=8, an integer value is           !
   5986 ! written: rval is assumed to have been scaled to the appropriate dynamic    !
   5987 ! range.                                                                     !
   5988 ! PACK currently only works for netCDF files, and is ignored otherwise.      !
   5989 !                                                                            !
   5990 !  subroutine mpp_write_meta_axis( unit, axis, name, units, longname, &      !
   5991 !        cartesian, sense, domain, data )                                    !
   5992 !     integer, intent(in) :: unit                                            !
   5993 !     type(axistype), intent(inout) :: axis                                  !
   5994 !     character(len=*), intent(in) :: name, units, longname                  !
   5995 !     character(len=*), intent(in), optional :: cartesian                    !
   5996 !     integer, intent(in), optional :: sense                                 !
   5997 !     type(domain1D), intent(in), optional :: domain                         !
   5998 !     real, intent(in), optional :: data(:)                                  !
   5999 !                                                                            !
   6000 ! This form defines a time or space axis. Metadata corresponding to the      !
   6001 ! type above are written to the file on <unit>. A unique ID for subsequent   !
   6002 ! references to this axis is returned in axis%id. If the <domain>            !
   6003 ! element is present, this is recognized as a distributed data axis          !
   6004 ! and domain decomposition information is also written if required (the      !

Page 220         Source Listing                  MPP_GET_TAVG_INFO
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6005 ! domain decomposition info is required for multi-fileset multi-threaded     !
   6006 ! I/O). If the <datLINK> element is allocated, it is considered to be a      !
   6007 ! space axis, otherwise it is a time axis with an unlimited dimension.       !
   6008 ! Only one time axis is allowed per file.                                    !
   6009 !                                                                            !
   6010 !  subroutine mpp_write_meta_field( unit, field, axes, name, units, longname !
   6011 !       stanadard_name, min, max, missing, fill, scale, add, pack)           !
   6012 !     integer, intent(in) :: unit                                            !
   6013 !     type(fieldtype), intent(out) :: field                                  !
   6014 !     type(axistype), intent(in) :: axes(:)                                  !
   6015 !     character(len=*), intent(in) :: name, units, longname, standard_name   !
   6016 !     real, intent(in), optional :: min, max, missing, fill, scale, add      !
   6017 !     integer, intent(in), optional :: pack                                  !
   6018 !                                                                            !
   6019 ! This form defines a field. Metadata corresponding to the type              !
   6020 ! above are written to the file on <unit>. A unique ID for subsequent        !
   6021 ! references to this field is returned in field%id. At least one axis        !
   6022 ! must be associated, 0D variables are not considered. mpp_write_meta        !
   6023 ! must previously have been called on all axes associated with this          !
   6024 ! field.                                                                     !
   6025 !                                                                            !
   6026 ! The mpp_write_meta package also includes subroutines write_attribute and   !
   6027 ! write_attribute_netcdf, that are private to this module.                   !
   6028 !                                                                            !
   6029 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6030     subroutine mpp_write_meta_global( unit, name, rval, ival, cval, pack)
   6031 !writes a global metadata attribute to unit <unit>
   6032 !attribute <name> can be an real, integer or character
   6033 !one and only one of rval, ival, and cval should be present
   6034 !the first found will be used
   6035 !for a non-netCDF file, it is encoded into a string "GLOBAL <name> <val>"
   6036       integer, intent(in) :: unit
   6037       character(len=*), intent(in) :: name
   6038       real,             intent(in), optional :: rval(:)
   6039       integer,          intent(in), optional :: ival(:)
   6040       character(len=*), intent(in), optional :: cval
   6041       integer, intent(in), optional :: pack
   6042 
   6043 !      call mpp_clock_begin(mpp_write_clock)
   6044       if( .NOT.module_is_initialized    )call mpp_error( FATAL, 'MPP_WRITE_META: must first call mpp_io_init.' )
   6045       if( .NOT. mpp_file(unit)%write_on_this_pe) then
   6046 !         call mpp_clock_end(mpp_write_clock)
   6047          return
   6048       endif
   6049       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE_META: invalid unit number.' )
   6050       if( mpp_file(unit)%initialized ) &
   6051            call mpp_error( FATAL, 'MPP_WRITE_META: cannot write metadata to file after an mpp_write.' )
   6052 
   6053       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   6054 
   6055           call write_attribute_netcdf( unit, NF_GLOBAL, name, rval, ival, cval, pack )
   6056 
   6057       else
   6058           call write_attribute( unit, 'GLOBAL '//trim(name), rval, ival, cval, pack )
   6059       end if
   6060 !      call mpp_clock_end(mpp_write_clock)
   6061 

Page 221         Source Listing                  MPP_WRITE_META_GLOBAL
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6062       return
   6063     end subroutine mpp_write_meta_global


ENTRY POINTS

  Name                                            
                                                  
 mpp_io_mod_mp_mpp_write_meta_global_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CVAL                       Dummy  6030     CHAR                        scalar   ARG,IN           6055,6058                         
 IVAL                       Dummy  6030     I(4)            4     1     1        ARG,IN           6055,6058                         
 MPP_WRITE_META_GLOBAL      Subr   6030                                          PRIV             2993,6072,6082,7081,7524          
 NAME                       Dummy  6030     CHAR                        scalar   ARG,IN           6055,6058                         
 PACK                       Dummy  6030     I(4)            4           scalar   ARG,IN           6055,6058                         
 RVAL                       Dummy  6030     R(8)            8     1     1        ARG,IN           6055,6058                         
 TRIM                       Func   6058                                 scalar                    6058                              
 UNIT                       Dummy  6030     I(4)            4           scalar   ARG,IN           6045,6049,6050,6053,6055,6058     

Page 222         Source Listing                  MPP_WRITE_META_GLOBAL
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6064 
   6065 !versions of above to support <rval> and <ival> as scalars (because of f90 strict rank matching)
   6066     subroutine mpp_write_meta_global_scalar_r( unit, name, rval, pack )
   6067       integer, intent(in) :: unit
   6068       character(len=*), intent(in) :: name
   6069       real, intent(in) :: rval
   6070       integer, intent(in), optional :: pack
   6071 
   6072       call mpp_write_meta_global( unit, name, rval=(/rval/), pack=pack )
   6073       return
   6074     end subroutine mpp_write_meta_global_scalar_r


ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_write_meta_global_scalar_r_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_WRITE_META_GLOBAL_SCAL                                                                                                         
 AR_R                       Subr   6066                                          PRIV                                               
 NAME                       Dummy  6066     CHAR                        scalar   ARG,IN           6072                              
 PACK                       Dummy  6066     I(4)            4           scalar   ARG,IN           6072                              
 RVAL                       Dummy  6066     R(8)            8           scalar   ARG,IN           6072                              
 UNIT                       Dummy  6066     I(4)            4           scalar   ARG,IN           6072                              

Page 223         Source Listing                  MPP_WRITE_META_GLOBAL_SCALAR_R
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6075 
   6076     subroutine mpp_write_meta_global_scalar_i( unit, name, ival, pack )
   6077       integer, intent(in) :: unit
   6078       character(len=*), intent(in) :: name
   6079       integer, intent(in) :: ival
   6080       integer, intent(in), optional :: pack
   6081 
   6082       call mpp_write_meta_global( unit, name, ival=(/ival/), pack=pack )
   6083       return
   6084     end subroutine mpp_write_meta_global_scalar_i


ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_write_meta_global_scalar_i_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IVAL                       Dummy  6076     I(4)            4           scalar   ARG,IN           6082                              
 MPP_WRITE_META_GLOBAL_SCAL                                                                                                         
 AR_I                       Subr   6076                                          PRIV             2991,3016                         
 NAME                       Dummy  6076     CHAR                        scalar   ARG,IN           6082                              
 PACK                       Dummy  6076     I(4)            4           scalar   ARG,IN           6082                              
 UNIT                       Dummy  6076     I(4)            4           scalar   ARG,IN           6082                              

Page 224         Source Listing                  MPP_WRITE_META_GLOBAL_SCALAR_I
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6085 
   6086     subroutine mpp_write_meta_var( unit, id, name, rval, ival, cval, pack)
   6087 !writes a metadata attribute for variable <id> to unit <unit>
   6088 !attribute <name> can be an real, integer or character
   6089 !one and only one of rval, ival, and cval should be present
   6090 !the first found will be used
   6091 !for a non-netCDF file, it is encoded into a string "<id> <name> <val>"
   6092       integer, intent(in) :: unit, id
   6093       character(len=*), intent(in) :: name
   6094       real,             intent(in), optional :: rval(:)
   6095       integer,          intent(in), optional :: ival(:)
   6096       character(len=*), intent(in), optional :: cval
   6097       integer,          intent(in), optional :: pack
   6098 
   6099       if( .NOT.module_is_initialized    )call mpp_error( FATAL, 'MPP_WRITE_META: must first call mpp_io_init.' )
   6100       if( .NOT. mpp_file(unit)%write_on_this_pe) then
   6101          return
   6102       endif
   6103       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE_META: invalid unit number.' )
   6104       if( mpp_file(unit)%initialized ) &
   6105            call mpp_error( FATAL, 'MPP_WRITE_META: cannot write metadata to file after an mpp_write.' )
   6106 
   6107       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   6108           call write_attribute_netcdf( unit, id, name, rval, ival, cval, pack )
   6109       else
   6110           write( text, '(a,i4,a)' )'VARIABLE ', id, ' '//name
   6111           call write_attribute( unit, trim(text), rval, ival, cval, pack )
   6112       end if
   6113 
   6114       return
   6115     end subroutine mpp_write_meta_var

Page 225         Source Listing                  MPP_WRITE_META_VAR
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_write.inc



ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_write_meta_var_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CVAL                       Dummy  6086     CHAR                        scalar   ARG,IN           6108,6111                         
 ID                         Dummy  6086     I(4)            4           scalar   ARG,IN           6108,6110                         
 IVAL                       Dummy  6086     I(4)            4     1     1        ARG,IN           6108,6111                         
 MPP_WRITE_META_VAR         Subr   6086                                          PRIV             6124,6134,6383,6385,6389,6391,6397
                                                                                                  ,6401,6408,6411,6422,6484,6486,648
                                                                                                  9,6552,6556,6717,6719,6724,6728,67
                                                                                                  82,6786,6789,8823,8825,8832,8931,8
                                                                                                  933,8938,8942                     
 NAME                       Dummy  6086     CHAR                        scalar   ARG,IN           6108,6110                         
 PACK                       Dummy  6086     I(4)            4           scalar   ARG,IN           6108,6111                         
 RVAL                       Dummy  6086     R(8)            8     1     1        ARG,IN           6108,6111                         
 TRIM                       Func   6111                                 scalar                    6111                              
 UNIT                       Dummy  6086     I(4)            4           scalar   ARG,IN           6100,6103,6104,6107,6108,6111     

Page 226         Source Listing                  MPP_WRITE_META_VAR
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6116 
   6117 !versions of above to support <rval> and <ival> as scalar (because of f90 strict rank matching)
   6118     subroutine mpp_write_meta_scalar_r( unit, id, name, rval, pack )
   6119       integer, intent(in) :: unit, id
   6120       character(len=*), intent(in) :: name
   6121       real, intent(in) :: rval
   6122       integer, intent(in), optional :: pack
   6123 
   6124       call mpp_write_meta( unit, id, name, rval=(/rval/), pack=pack )
   6125       return
   6126     end subroutine mpp_write_meta_scalar_r


ENTRY POINTS

  Name                                              
                                                    
 mpp_io_mod_mp_mpp_write_meta_scalar_r_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ID                         Dummy  6118     I(4)            4           scalar   ARG,IN           6124                              
 MPP_WRITE_META_SCALAR_R    Subr   6118                                          PRIV             6418,6732,6735,6739,6742,6748,6751
                                                                                                  ,6757,6767,6773,6774,8946,8949,895
                                                                                                  3,8956,8961,8964,8969,8972,8978,89
                                                                                                  80                                
 NAME                       Dummy  6118     CHAR                        scalar   ARG,IN           6124                              
 PACK                       Dummy  6118     I(4)            4           scalar   ARG,IN           6124                              
 RVAL                       Dummy  6118     R(8)            8           scalar   ARG,IN           6124                              
 UNIT                       Dummy  6118     I(4)            4           scalar   ARG,IN           6124                              

Page 227         Source Listing                  MPP_WRITE_META_SCALAR_R
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6127 
   6128     subroutine mpp_write_meta_scalar_i( unit, id, name, ival,pack )
   6129       integer, intent(in) :: unit, id
   6130       character(len=*), intent(in) :: name
   6131       integer, intent(in) :: ival
   6132       integer, intent(in), optional :: pack
   6133 
   6134       call mpp_write_meta( unit, id, name, ival=(/ival/),pack=pack )
   6135       return
   6136     end subroutine mpp_write_meta_scalar_i


ENTRY POINTS

  Name                                              
                                                    
 mpp_io_mod_mp_mpp_write_meta_scalar_i_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ID                         Dummy  6128     I(4)            4           scalar   ARG,IN           6134                              
 IVAL                       Dummy  6128     I(4)            4           scalar   ARG,IN           6134                              
 MPP_WRITE_META_SCALAR_I    Subr   6128                                          PRIV             6493,6763,6772,8976               
 NAME                       Dummy  6128     CHAR                        scalar   ARG,IN           6134                              
 PACK                       Dummy  6128     I(4)            4           scalar   ARG,IN           6134                              
 UNIT                       Dummy  6128     I(4)            4           scalar   ARG,IN           6134                              

Page 228         Source Listing                  MPP_WRITE_META_SCALAR_I
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6137 
   6138 
   6139     subroutine mpp_write_axis_data (unit, axes )
   6140       integer, intent(in) :: unit
   6141       type(axistype), dimension(:), intent(in) :: axes
   6142 
   6143       integer :: naxis
   6144 
   6145       naxis = size (axes)
   6146       allocate (mpp_file(unit)%axis(naxis))
   6147       mpp_file(unit)%axis(1:naxis) = axes(1:naxis)
   6148 
   6149       if( mpp_file(unit)%action.EQ.MPP_WRONLY )then
   6150          if(header_buffer_val>0) then
   6151             error = NF__ENDDEF(mpp_file(unit)%ncid,header_buffer_val,4,0,4)
   6152          else
   6153             error = NF_ENDDEF(mpp_file(unit)%ncid)
   6154          endif
   6155       endif
   6156 
   6157     end subroutine mpp_write_axis_data


ENTRY POINTS

  Name                                          
                                                
 mpp_io_mod_mp_mpp_write_axis_data_             

Page 229         Source Listing                  MPP_WRITE_AXIS_DATA
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_write.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXES                       Dummy  6139     RECORD          1424  1     1        ARG,IN           6145,6147                         
 HEADER_BUFFER_VAL          Local  6150     I(4)            4           scalar                    1060,1068,6150,6151,6195,6196,6232
                                                                                                  ,6233,7072,7073,7515,7516         
 MPP_WRITE_AXIS_DATA        Subr   6139                                                                                             
 NAXIS                      Local  6143     I(4)            4           scalar                    6145,6146,6147                    
 NF_ENDDEF                  Func   6153     I(4)            4           scalar   PRIV             6153,6198,6235,7075,7518          
 NF__ENDDEF                 Func   6151     I(4)            4           scalar   PRIV             6151,6196,6233,7073,7516          
 SIZE                       Func   6145                                 scalar                    6145                              
 UNIT                       Dummy  6139     I(4)            4           scalar   ARG,IN           6146,6147,6149,6151,6153          

Page 230         Source Listing                  MPP_WRITE_AXIS_DATA
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6158 
   6159     subroutine mpp_def_dim_nodata(unit,name,size)
   6160       integer, intent(in) :: unit
   6161       character(len=*), intent(in) :: name
   6162       integer, intent(in) :: size
   6163       integer :: error,did
   6164 
   6165 ! This routine assumes the file is in define mode
   6166       if(.NOT. mpp_file(unit)%write_on_this_pe) return
   6167 
   6168       error = NF_DEF_DIM(mpp_file(unit)%ncid,name,size,did)
   6169       call netcdf_err(error, mpp_file(unit),string='Axis='//trim(name))
   6170 
   6171     end subroutine mpp_def_dim_nodata


ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_def_dim_nodata_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DID                        Local  6163     I(4)            4           scalar                    6168                              
 ERROR                      Local  6163     I(4)            4           scalar                    6168,6169                         
 MPP_DEF_DIM_NODATA         Subr   6159                                          PRIV                                               
 NAME                       Dummy  6159     CHAR                        scalar   ARG,IN           6168,6169                         
 NF_DEF_DIM                 Func   6168     I(4)            4           scalar   PRIV             6168,6184,6221,6339,6350,6475,6542
                                                                                                  ,8780,8782,8788                   
 SIZE                       Dummy  6159     I(4)            4           scalar   ARG,IN           6168                              
 TRIM                       Func   6169                                 scalar                    6169                              
 UNIT                       Dummy  6159     I(4)            4           scalar   ARG,IN           6166,6168,6169                    

Page 231         Source Listing                  MPP_DEF_DIM_NODATA
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6172 
   6173     subroutine mpp_def_dim_int(unit,name,dsize,longname,data)
   6174       integer, intent(in) :: unit
   6175       character(len=*), intent(in) :: name
   6176       integer, intent(in) :: dsize
   6177       character(len=*), intent(in) :: longname
   6178       integer, intent(in) :: data(:)
   6179       integer :: error,did,id
   6180 
   6181 ! This routine assumes the file is in define mode
   6182 
   6183       if(.NOT. mpp_file(unit)%write_on_this_pe) return
   6184       error = NF_DEF_DIM(mpp_file(unit)%ncid,name,dsize,did)
   6185       call netcdf_err(error, mpp_file(unit),string='Axis='//trim(name))
   6186 
   6187 ! Write dimension data.
   6188       error = NF_DEF_VAR( mpp_file(unit)%ncid, name, NF_INT, 1, (/did/), id )
   6189       call netcdf_err( error, mpp_file(unit), string=' axis varable '//trim(name))
   6190 
   6191       error = NF_PUT_ATT_TEXT( mpp_file(unit)%ncid, id, 'long_name', len_trim(longname), longname )
   6192       call netcdf_err( error, mpp_file(unit), string=' Attribute=long_name' )
   6193 
   6194       if( mpp_file(unit)%action.EQ.MPP_WRONLY )then
   6195          if(header_buffer_val>0) then
   6196             error = NF__ENDDEF(mpp_file(unit)%ncid,header_buffer_val,4,0,4)
   6197          else
   6198             error = NF_ENDDEF(mpp_file(unit)%ncid)
   6199          endif
   6200       endif
   6201       call netcdf_err( error, mpp_file(unit), string=' subroutine mpp_def_dim')
   6202       error = NF_PUT_VARA_INT ( mpp_file(unit)%ncid, id, (/1/), (/size(data)/), data )
   6203       call netcdf_err( error, mpp_file(unit), string=' axis varable '//trim(name))
   6204       error = NF_REDEF(mpp_file(unit)%ncid)
   6205       call netcdf_err( error, mpp_file(unit), string=' subroutine mpp_def_dim')
   6206 
   6207     return
   6208   end subroutine mpp_def_dim_int

Page 232         Source Listing                  MPP_DEF_DIM_INT
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_write.inc



ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_mpp_def_dim_int_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  6173     I(4)            4     1     1        ARG,IN           6202                              
 DID                        Local  6179     I(4)            4           scalar                    6184,6188                         
 DSIZE                      Dummy  6173     I(4)            4           scalar   ARG,IN           6184                              
 ERROR                      Local  6179     I(4)            4           scalar                    6184,6185,6188,6189,6191,6192,6196
                                                                                                  ,6198,6201,6202,6203,6204,6205    
 ID                         Local  6179     I(4)            4           scalar                    6188,6191,6202                    
 LEN_TRIM                   Func   6191                                 scalar                    6191                              
 LONGNAME                   Dummy  6173     CHAR                        scalar   ARG,IN           6191                              
 MPP_DEF_DIM_INT            Subr   6173                                          PRIV                                               
 NAME                       Dummy  6173     CHAR                        scalar   ARG,IN           6184,6185,6188,6189,6203          
 NF_DEF_VAR                 Func   6188     I(4)            4           scalar   PRIV             6188,6225,6342,6344,6353,6355,6477
                                                                                                  ,6544,6681,6683,6685,6689,6693,878
                                                                                                  5,8790,8899,8902,8907,8912        
 NF_PUT_ATT_TEXT            Func   6191     I(4)            4           scalar   PRIV             6191,6228,6932,6934               
 NF_PUT_VARA_INT            Func   6202     I(4)            4           scalar   PRIV             6202,7144,7149,7587,7592          
 NF_REDEF                   Func   6204     I(4)            4           scalar   PRIV             6204,6241,6623,8709,8756,8863     
 SIZE                       Func   6202                                 scalar                    6202                              
 TRIM                       Func   6185                                 scalar                    6185,6189,6203                    
 UNIT                       Dummy  6173     I(4)            4           scalar   ARG,IN           6183,6184,6185,6188,6189,6191,6192
                                                                                                  ,6194,6196,6198,6201,6202,6203,620
                                                                                                  4,6205                            

Page 233         Source Listing                  MPP_DEF_DIM_INT
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6209 
   6210     subroutine mpp_def_dim_real(unit,name,dsize,longname,data)
   6211       integer, intent(in) :: unit
   6212       character(len=*), intent(in) :: name
   6213       integer, intent(in) :: dsize
   6214       character(len=*), intent(in) :: longname
   6215       real, intent(in) :: data(:)
   6216       integer :: error,did,id
   6217 
   6218 ! This routine assumes the file is in define mode
   6219 
   6220       if(.NOT. mpp_file(unit)%write_on_this_pe) return
   6221       error = NF_DEF_DIM(mpp_file(unit)%ncid,name,dsize,did)
   6222       call netcdf_err(error, mpp_file(unit),string='Axis='//trim(name))
   6223 
   6224 ! Write dimension data.
   6225       error = NF_DEF_VAR( mpp_file(unit)%ncid, name, NF_INT, 1, (/did/), id )
   6226       call netcdf_err( error, mpp_file(unit), string=' axis varable '//trim(name))
   6227 
   6228       error = NF_PUT_ATT_TEXT( mpp_file(unit)%ncid, id, 'long_name', len_trim(longname), longname )
   6229       call netcdf_err( error, mpp_file(unit), string=' Attribute=long_name' )
   6230 
   6231       if( mpp_file(unit)%action.EQ.MPP_WRONLY )then
   6232          if(header_buffer_val>0) then
   6233             error = NF__ENDDEF(mpp_file(unit)%ncid,header_buffer_val,4,0,4)
   6234          else
   6235             error = NF_ENDDEF(mpp_file(unit)%ncid)
   6236          endif
   6237       endif
   6238       call netcdf_err( error, mpp_file(unit), string=' subroutine mpp_def_dim')
   6239       error = NF90_PUT_VAR ( mpp_file(unit)%ncid, id, data, start=(/1/), count=(/size(data)/) )
   6240       call netcdf_err( error, mpp_file(unit), string=' axis varable '//trim(name))
   6241       error = NF_REDEF(mpp_file(unit)%ncid)
   6242       call netcdf_err( error, mpp_file(unit), string=' subroutine mpp_def_dim')
   6243 
   6244     return
   6245   end subroutine mpp_def_dim_real

Page 234         Source Listing                  MPP_DEF_DIM_REAL
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_write.inc



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_def_dim_real_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  6210     R(8)            8     1     1        ARG,IN           6239                              
 DID                        Local  6216     I(4)            4           scalar                    6221,6225                         
 DSIZE                      Dummy  6210     I(4)            4           scalar   ARG,IN           6221                              
 ERROR                      Local  6216     I(4)            4           scalar                    6221,6222,6225,6226,6228,6229,6233
                                                                                                  ,6235,6238,6239,6240,6241,6242    
 ID                         Local  6216     I(4)            4           scalar                    6225,6228,6239                    
 LEN_TRIM                   Func   6228                                 scalar                    6228                              
 LONGNAME                   Dummy  6210     CHAR                        scalar   ARG,IN           6228                              
 MPP_DEF_DIM_REAL           Subr   6210                                          PRIV                                               
 NAME                       Dummy  6210     CHAR                        scalar   ARG,IN           6221,6222,6225,6226,6240          
 NF90_PUT_VAR               Local  6239                                 scalar   PRIV             6239,7139,7146,7582,7589          
 NF90_PUT_VAR_1D_EIGHTBYTER                                                                                                         
 EAL                        Func   6239     I(4)            4           scalar   PRIV             6239,7146                         
 SIZE                       Func   6239                                 scalar                    6239                              
 TRIM                       Func   6222                                 scalar                    6222,6226,6240                    
 UNIT                       Dummy  6210     I(4)            4           scalar   ARG,IN           6220,6221,6222,6225,6226,6228,6229
                                                                                                  ,6231,6233,6235,6238,6239,6240,624
                                                                                                  1,6242                            

Page 235         Source Listing                  MPP_DEF_DIM_REAL
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6246 
   6247 
   6248 
   6249     subroutine mpp_write_meta_axis_r1d( unit, axis, name, units, longname, cartesian, sense, domain, data, min, calendar)
   6250 !load the values in an axistype (still need to call mpp_write)
   6251 !write metadata attributes for axis
   6252 !it is declared intent(inout) so you can nullify pointers in the incoming object if needed
   6253 !the f90 standard doesn't guarantee that intent(out) on a type guarantees that its pointer components will be unassociated
   6254       integer,          intent(in)           :: unit
   6255       type(axistype),   intent(inout)        :: axis
   6256       character(len=*), intent(in)           :: name, units, longname
   6257       character(len=*), intent(in), optional :: cartesian
   6258       integer,          intent(in), optional :: sense
   6259       type(domain1D),   intent(in), optional :: domain
   6260       real,             intent(in), optional :: data(:)
   6261       real,             intent(in), optional :: min
   6262       character(len=*), intent(in), optional :: calendar
   6263 
   6264       integer :: is, ie, isg, ieg
   6265       integer :: istat
   6266       logical :: domain_exist
   6267       type(domain2d), pointer :: io_domain => NULL()
   6268 
   6269 !      call mpp_clock_begin(mpp_write_clock)
   6270 !--- the shift and cartesian information is needed in mpp_write_meta_field from all the pe.
   6271 !--- we may revise this in the future.
   6272       axis%cartesian = 'N'
   6273       if( PRESENT(cartesian) )axis%cartesian = cartesian
   6274 
   6275       domain_exist = .false.
   6276 
   6277      if( PRESENT(domain) ) then
   6278          domain_exist = .true.
   6279          call mpp_get_global_domain( domain, isg, ieg )
   6280          if(mpp_file(unit)%io_domain_exist) then
   6281             io_domain => mpp_get_io_domain(mpp_file(unit)%domain)
   6282             if(axis%cartesian=='X') then
   6283                call mpp_get_global_domain( io_domain, xbegin=is, xend=ie)
   6284             else if(axis%cartesian=='Y') then
   6285                call mpp_get_global_domain( io_domain, ybegin=is, yend=ie)
   6286             endif
   6287          else
   6288             call mpp_get_compute_domain( domain, is, ie )
   6289          endif
   6290       else if( PRESENT(data) )then
   6291          isg=1; ieg=size(data(:)); is=isg; ie=ieg
   6292       endif
   6293 
   6294       axis%shift = 0
   6295       if( PRESENT(data) .AND. domain_exist ) then
   6296          if( size(data(:)) == ieg-isg+2 ) then
   6297             axis%shift = 1
   6298             ie = ie   + 1
   6299             ieg = ieg + 1
   6300          endif
   6301       endif
   6302 

Page 236         Source Listing                  MPP_WRITE_META_AXIS_R1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6303       if( .NOT.module_is_initialized    )call mpp_error( FATAL, 'MPP_WRITE_META: must first call mpp_io_init.' )
   6304       if( .NOT. mpp_file(unit)%write_on_this_pe) then
   6305 !         call mpp_clock_end(mpp_write_clock)
   6306          return
   6307       endif
   6308       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE_META: invalid unit number.' )
   6309       if( mpp_file(unit)%initialized ) &
   6310            call mpp_error( FATAL, 'MPP_WRITE_META: cannot write metadata to file after an mpp_write.' )
   6311 
   6312 !pre-existing pointers need to be nullified
   6313       if( ASSOCIATED(axis%data) ) then
   6314          DEALLOCATE(axis%data, stat=istat)
   6315       endif
   6316 !load axistype
   6317       axis%name     = name
   6318       axis%units    = units
   6319       axis%longname = longname
   6320       if( PRESENT(calendar)  ) axis%calendar  = calendar
   6321       if( PRESENT(sense)     ) axis%sense     = sense
   6322       if( PRESENT(data) )then
   6323          if( mpp_file(unit)%fileset.EQ.MPP_MULTI .AND. domain_exist ) then
   6324             axis%len = ie - is + 1
   6325             allocate(axis%data(axis%len))
   6326             axis%data = data(is-isg+1:ie-isg+1)
   6327          else
   6328             axis%len = size(data(:))
   6329             allocate(axis%data(axis%len))
   6330             axis%data = data
   6331          endif
   6332       endif
   6333 !write metadata
   6334       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   6335 
   6336 !write axis def
   6337 !space axes are always floats, time axis is always double
   6338           if( ASSOCIATED(axis%data) )then !space axis
   6339               error = NF_DEF_DIM( mpp_file(unit)%ncid, axis%name, axis%len, axis%did )
   6340               call netcdf_err( error, mpp_file(unit), axis )
   6341               if(pack_size == 1) then
   6342                  error = NF_DEF_VAR( mpp_file(unit)%ncid, axis%name, NF_DOUBLE, 1, (/axis%did/), axis%id )
   6343               else ! pack_size == 2
   6344                  error = NF_DEF_VAR( mpp_file(unit)%ncid, axis%name, NF_FLOAT, 1, (/axis%did/), axis%id )
   6345               endif
   6346               call netcdf_err( error, mpp_file(unit), axis )
   6347           else                            !time axis
   6348               if( mpp_file(unit)%id.NE.-1 ) &
   6349                    call mpp_error( FATAL, 'MPP_WRITE_META_AXIS: There is already a time axis for this file.' )
   6350               error = NF_DEF_DIM( mpp_file(unit)%ncid, axis%name, NF_UNLIMITED, axis%did )
   6351               call netcdf_err( error, mpp_file(unit), axis )
   6352               if(pack_size == 1) then
   6353                  error = NF_DEF_VAR( mpp_file(unit)%ncid, axis%name, NF_DOUBLE, 1, (/axis%did/), axis%id )
   6354               else ! pack_size == 2
   6355                  error = NF_DEF_VAR( mpp_file(unit)%ncid, axis%name, NF_FLOAT, 1, (/axis%did/), axis%id )
   6356               endif
   6357               call netcdf_err( error, mpp_file(unit), axis )
   6358               mpp_file(unit)%id = axis%id !file ID is the same as time axis varID
   6359           end if

Page 237         Source Listing                  MPP_WRITE_META_AXIS_R1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6360 
   6361       else
   6362           varnum = varnum + 1
   6363           axis%id = varnum
   6364           axis%did = varnum
   6365 !write axis def
   6366           write( text, '(a,i4,a)' )'AXIS ', axis%id, ' name'
   6367           call write_attribute( unit, trim(text), cval=axis%name )
   6368           write( text, '(a,i4,a)' )'AXIS ', axis%id, ' size'
   6369           if( ASSOCIATED(axis%data) )then !space axis
   6370 !              if( mpp_file(unit)%fileset.EQ.MPP_MULTI .AND. axis%domain.NE.NULL_DOMAIN1D )then
   6371 !                  call write_attribute( unit, trim(text), ival=(/ie-is+1/) )
   6372 !              else
   6373                   call write_attribute( unit, trim(text), ival=(/size(axis%data(:))/) )
   6374 !              end if
   6375           else                            !time axis
   6376               if( mpp_file(unit)%id.NE.-1 ) &
   6377                    call mpp_error( FATAL, 'MPP_WRITE_META_AXIS: There is already a time axis for this file.' )
   6378               call write_attribute( unit, trim(text), ival=(/0/) ) !a size of 0 indicates time axis
   6379               mpp_file(unit)%id = axis%id
   6380           end if
   6381       end if
   6382 !write axis attributes
   6383       call mpp_write_meta( unit, axis%id, 'long_name', cval=axis%longname) ; axis%natt = axis%natt + 1
   6384       if (lowercase(trim(axis%units)).ne.'none' .OR. .NOT.cf_compliance) then
   6385         call mpp_write_meta( unit, axis%id, 'units',     cval=axis%units) ; axis%natt = axis%natt + 1
   6386       endif
   6387       if( PRESENT(calendar) ) then
   6388         if (.NOT.cf_compliance) then
   6389           call mpp_write_meta( unit, axis%id, 'calendar', cval=axis%calendar)
   6390         else
   6391           call mpp_write_meta( unit, axis%id, 'calendar', cval=lowercase(axis%calendar))
   6392         endif
   6393         axis%natt = axis%natt + 1
   6394       endif
   6395       if( PRESENT(cartesian) ) then
   6396         if (.NOT.cf_compliance) then
   6397           call mpp_write_meta( unit, axis%id, 'cartesian_axis', cval=axis%cartesian)
   6398           axis%natt = axis%natt + 1
   6399         else
   6400           if (trim(axis%cartesian).ne.'N') then
   6401             call mpp_write_meta( unit, axis%id, 'axis', cval=axis%cartesian)
   6402             axis%natt = axis%natt + 1
   6403           endif
   6404         endif
   6405       endif
   6406       if( PRESENT(sense) )then
   6407           if( sense.EQ.-1 )then
   6408               call mpp_write_meta( unit, axis%id, 'positive', cval='down')
   6409               axis%natt = axis%natt + 1
   6410           else if( sense.EQ.1 )then
   6411               call mpp_write_meta( unit, axis%id, 'positive', cval='up')
   6412               axis%natt = axis%natt + 1
   6413           else
   6414 ! silently ignore values of sense other than +/-1.
   6415           end if
   6416       end if

Page 238         Source Listing                  MPP_WRITE_META_AXIS_R1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6417       if( PRESENT(min) ) then
   6418         call mpp_write_meta( unit, axis%id, 'valid_min', rval=min)
   6419         axis%natt = axis%natt + 1
   6420       endif
   6421       if( mpp_file(unit)%threading.EQ.MPP_MULTI .AND. mpp_file(unit)%fileset.EQ.MPP_MULTI .AND. domain_exist )then
   6422           call mpp_write_meta( unit, axis%id, 'domain_decomposition', ival=(/isg,ieg,is,ie/))
   6423           axis%natt = axis%natt + 1
   6424       end if
   6425       if( verbose )print '(a,2i6,x,a,2i3)', 'MPP_WRITE_META: Wrote axis metadata, pe, unit, axis%name, axis%id, axis%did=', 
   6425 &
   6426            pe, unit, trim(axis%name), axis%id, axis%did
   6427 
   6428       mpp_file(unit)%ndim = max(1,mpp_file(unit)%ndim + 1)
   6429 
   6430 !      call mpp_clock_end(mpp_write_clock)
   6431       return
   6432     end subroutine mpp_write_meta_axis_r1d


ENTRY POINTS

  Name                                              
                                                    
 mpp_io_mod_mp_mpp_write_meta_axis_r1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6313                                 scalar                    6313,6338,6369                    
 AXIS                       Dummy  6249     AXISTYPE        1424        scalar   ARG,INOUT        6272,6273,6282,6284,6294,6297,6313
                                                                                                  ,6314,6317,6318,6319,6320,6321,632
                                                                                                  4,6325,6326,6328,6329,6330,6338,63
                                                                                                  39,6340,6342,6344,6346,6350,6351,6
                                                                                                  353,6355,6357,6358,6363,6364,6366,
                                                                                                  6367,6368,6369,6373,6379,6383,6384
                                                                                                  ,6385,6389,6391,6393,6397,6398,640
                                                                                                  0,6401,6402,6408,6409,6411,6412,64
                                                                                                  18,6419,6422,6423,6426            
 CALENDAR                   Dummy  6249     CHAR                        scalar   ARG,IN           6320,6387                         
 CARTESIAN                  Dummy  6249     CHAR                        scalar   ARG,IN           6273,6395                         
 DATA                       Dummy  6249     R(8)            8     1     1        ARG,IN           6290,6291,6295,6296,6322,6326,6328
                                                                                                  ,6330                             
 DOMAIN                     Dummy  6249     DOMAIN1D        176         scalar   ARG,IN           6277,6279,6288                    
 DOMAIN1D                   Type   6259                                 scalar                    338,425,6259,8742                 
 DOMAIN_EXIST               Local  6266     L(4)            4           scalar                    6275,6278,6295,6323,6421          
 IE                         Local  6264     I(4)            4           scalar                    6283,6285,6288,6291,6298,6324,6326
                                                                                                  ,6422                             
 IEG                        Local  6264     I(4)            4           scalar                    6279,6291,6296,6299,6422          
 IO_DOMAIN                  Local  6267     DOMAIN2D        752         scalar   PTR              6267,6281,6283,6285               
 IS                         Local  6264     I(4)            4           scalar                    6283,6285,6288,6291,6324,6326,6422
 ISG                        Local  6264     I(4)            4           scalar                    6279,6291,6296,6326,6422          
 ISTAT                      Local  6265     I(4)            4           scalar                    6314                              
 LONGNAME                   Dummy  6249     CHAR                        scalar   ARG,IN           6319                              
 MAX                        Func   6428                                 scalar                    6428                              
 MIN                        Dummy  6249     R(8)            8           scalar   ARG,IN           6417,6418                         

Page 239         Source Listing                  MPP_WRITE_META_AXIS_R1D
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_write.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_GET_COMPUTE_DOMAIN1D   Subr   6288                                          PRIV             6288,8776,8805                    
 MPP_GET_GLOBAL_DOMAIN1D    Subr   6279                                          PRIV             6279,8777                         
 MPP_WRITE_META_AXIS_R1D    Subr   6249                                          PRIV                                               
 NAME                       Dummy  6249     CHAR                        scalar   ARG,IN           6317                              
 NF_UNLIMITED               Param  6350     I(4)            4           scalar   PRIV             6350,6542,8788                    
 PRESENT                    Func   6273                                 scalar                    6273,6277,6290,6295,6320,6321,6322
                                                                                                  ,6387,6395,6406,6417              
 SENSE                      Dummy  6249     I(4)            4           scalar   ARG,IN           6321,6406,6407,6410               
 SIZE                       Func   6291                                 scalar                    6291,6296,6328,6373               
 TRIM                       Func   6367                                 scalar                    6367,6373,6378,6384,6400,6426     
 UNIT                       Dummy  6249     I(4)            4           scalar   ARG,IN           6280,6281,6304,6308,6309,6323,6334
                                                                                                  ,6339,6340,6342,6344,6346,6348,635
                                                                                                  0,6351,6353,6355,6357,6358,6367,63
                                                                                                  73,6376,6378,6379,6383,6385,6389,6
                                                                                                  391,6397,6401,6408,6411,6418,6421,
                                                                                                  6422,6426,6428                    
 UNITS                      Dummy  6249     CHAR                        scalar   ARG,IN           6318                              
 VARNUM                     Local  6362     I(4)            4           scalar                    1050,6362,6363,6364,6707,6708,8796
                                                                                                  ,8797,8798,8920,8921              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AXISTYPE.SHIFT             I(4)            4     1344           scalar   PRIV             6294,6297,6597,6599,8778,8779,9061 
                                                                                           ,9063                              

Page 240         Source Listing                  MPP_WRITE_META_AXIS_R1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6433 
   6434     subroutine mpp_write_meta_axis_i1d(unit, axis, name, units, longname, data, min, compressed)
   6435 !load the values in an axistype (still need to call mpp_write)
   6436 !write metadata attributes for axis
   6437 !it is declared intent(inout) so you can nullify pointers in the incoming object if needed
   6438 !the f90 standard doesn't guarantee that intent(out) on a type guarantees that its pointer components will be unassociated
   6439       integer,          intent(in)           :: unit
   6440       type(axistype),   intent(inout)        :: axis
   6441       character(len=*), intent(in)           :: name, units, longname
   6442       integer,          intent(in)           :: data(:)
   6443       integer,          intent(in), optional :: min
   6444       character(len=*), intent(in), optional :: compressed
   6445 
   6446       integer :: istat
   6447       logical :: domain_exist
   6448       type(domain2d), pointer :: io_domain => NULL()
   6449 
   6450 !      call mpp_clock_begin(mpp_write_clock)
   6451       if( .NOT.module_is_initialized    )call mpp_error( FATAL, 'MPP_WRITE_META_I1D: must first call mpp_io_init.' )
   6452       if( .NOT. mpp_file(unit)%write_on_this_pe) then
   6453 !         call mpp_clock_end(mpp_write_clock)
   6454          return
   6455       endif
   6456       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE_META: invalid unit number.' )
   6457       if( mpp_file(unit)%initialized ) &
   6458            call mpp_error( FATAL, 'MPP_WRITE_META_I1D: cannot write metadata to file after an mpp_write.' )
   6459 
   6460 !pre-existing pointers need to be nullified
   6461       if( ASSOCIATED(axis%idata) ) then
   6462          DEALLOCATE(axis%idata, stat=istat)
   6463       endif
   6464 !load axistype
   6465       axis%name     = name
   6466       axis%units    = units
   6467       axis%longname = longname
   6468       if( PRESENT(compressed)) axis%compressed = trim(compressed)
   6469       axis%len = size(data(:))
   6470       allocate(axis%idata(axis%len))
   6471        axis%idata = data
   6472 !write metadata
   6473 
   6474       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   6475           error = NF_DEF_DIM( mpp_file(unit)%ncid, axis%name, axis%len, axis%did )
   6476           call netcdf_err( error, mpp_file(unit), axis )
   6477           error = NF_DEF_VAR( mpp_file(unit)%ncid, axis%name, NF_INT, 1, (/axis%did/), axis%id )
   6478           call netcdf_err( error, mpp_file(unit), axis )
   6479       else
   6480           call mpp_error( FATAL, 'MPP_WRITE_META_AXIS_I1D: Only netCDF format is currently supported.' )
   6481       end if
   6482 
   6483 !write axis attributes
   6484       call mpp_write_meta( unit, axis%id, 'long_name', cval=axis%longname) ; axis%natt = axis%natt + 1
   6485       if (lowercase(trim(axis%units)).ne.'none' .OR. .NOT.cf_compliance) then
   6486         call mpp_write_meta( unit, axis%id, 'units',     cval=axis%units) ; axis%natt = axis%natt + 1
   6487       endif
   6488       if( PRESENT(compressed) ) then
   6489         call mpp_write_meta( unit, axis%id, 'compress', cval=axis%compressed)

Page 241         Source Listing                  MPP_WRITE_META_AXIS_I1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6490         axis%natt = axis%natt + 1
   6491       endif
   6492       if( PRESENT(min) ) then
   6493         call mpp_write_meta( unit, axis%id, 'valid_min', ival=min)
   6494         axis%natt = axis%natt + 1
   6495       endif
   6496       if( verbose )print '(a,2i6,x,a,2i3)', 'MPP_WRITE_META: Wrote axis metadata, pe, unit, axis%name, axis%id, axis%did=', 
   6496 &
   6497            pe, unit, trim(axis%name), axis%id, axis%did
   6498 
   6499       mpp_file(unit)%ndim = max(1,mpp_file(unit)%ndim + 1)
   6500 
   6501 !      call mpp_clock_end(mpp_write_clock)
   6502       return
   6503     end subroutine mpp_write_meta_axis_i1d


ENTRY POINTS

  Name                                              
                                                    
 mpp_io_mod_mp_mpp_write_meta_axis_i1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6461                                 scalar                    6461                              
 AXIS                       Dummy  6434     AXISTYPE        1424        scalar   ARG,INOUT        6461,6462,6465,6466,6467,6468,6469
                                                                                                  ,6470,6471,6475,6476,6477,6478,648
                                                                                                  4,6485,6486,6489,6490,6493,6494,64
                                                                                                  97                                
 COMPRESSED                 Dummy  6434     CHAR                        scalar   ARG,IN           6468,6488                         
 DATA                       Dummy  6434     I(4)            4     1     1        ARG,IN           6469,6471                         
 DOMAIN_EXIST               Local  6447     L(4)            4           scalar                                                      
 IO_DOMAIN                  Local  6448     DOMAIN2D        752         scalar   PTR              6448                              
 ISTAT                      Local  6446     I(4)            4           scalar                    6462                              
 LONGNAME                   Dummy  6434     CHAR                        scalar   ARG,IN           6467                              
 MAX                        Func   6499                                 scalar                    6499                              
 MIN                        Dummy  6434     I(4)            4           scalar   ARG,IN           6492,6493                         
 MPP_WRITE_META_AXIS_I1D    Subr   6434                                          PRIV                                               
 NAME                       Dummy  6434     CHAR                        scalar   ARG,IN           6465                              
 PRESENT                    Func   6468                                 scalar                    6468,6488,6492                    
 SIZE                       Func   6469                                 scalar                    6469                              
 TRIM                       Func   6468                                 scalar                    6468,6485,6497                    
 UNIT                       Dummy  6434     I(4)            4           scalar   ARG,IN           6452,6456,6457,6474,6475,6476,6477
                                                                                                  ,6478,6484,6486,6489,6493,6497,649
                                                                                                  9                                 
 UNITS                      Dummy  6434     CHAR                        scalar   ARG,IN           6466                              



Page 242         Source Listing                  MPP_WRITE_META_AXIS_I1D
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_write.inc

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AXISTYPE.IDATA             I(4)            4     1256     1     1        PTR,PRIV         6461,6462,6470,6471,6537,6538,8672 
                                                                                           ,8673,8674,8676                    

Page 243         Source Listing                  MPP_WRITE_META_AXIS_I1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6504 
   6505 
   6506     subroutine mpp_write_meta_axis_unlimited(unit, axis, name, data, unlimited, units, longname)
   6507 !load the values in an axistype (still need to call mpp_write)
   6508 !write metadata attributes for axis
   6509 !it is declared intent(inout) so you can nullify pointers in the incoming object if needed
   6510 !the f90 standard doesn't guarantee that intent(out) on a type guarantees that its pointer components will be unassociated
   6511       integer,          intent(in)           :: unit
   6512       type(axistype),   intent(inout)        :: axis
   6513       character(len=*), intent(in)           :: name
   6514       integer,          intent(in)           :: data  ! Number of elements to be written
   6515       logical,          intent(in)           :: unlimited  ! Provides unique arg signature
   6516       character(len=*), intent(in), optional :: units, longname
   6517 
   6518       integer :: istat
   6519       logical :: domain_exist
   6520       type(domain2d), pointer :: io_domain => NULL()
   6521 
   6522 !      call mpp_clock_begin(mpp_write_clock)
   6523       if( .NOT.module_is_initialized    )call mpp_error( FATAL, 'MPP_WRITE_META_I1D: must first call mpp_io_init.' )
   6524       if( .NOT. mpp_file(unit)%write_on_this_pe) then
   6525 !         call mpp_clock_end(mpp_write_clock)
   6526          return
   6527       endif
   6528       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE_META: invalid unit number.' )
   6529       if( mpp_file(unit)%initialized ) &
   6530            call mpp_error( FATAL, 'MPP_WRITE_META_I1D: cannot write metadata to file after an mpp_write.' )
   6531 
   6532 !load axistype
   6533       axis%name     = name
   6534       if(present(units)) axis%units    = units
   6535       if(present(longname)) axis%longname = longname
   6536       axis%len = 1
   6537       allocate(axis%idata(1))
   6538       axis%idata = data
   6539 !write metadata
   6540 
   6541       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   6542           error = NF_DEF_DIM( mpp_file(unit)%ncid, axis%name, NF_UNLIMITED, axis%did )
   6543           call netcdf_err( error, mpp_file(unit), axis )
   6544           error = NF_DEF_VAR( mpp_file(unit)%ncid, axis%name, NF_INT, 0, (/axis%did/), axis%id )
   6545           call netcdf_err( error, mpp_file(unit), axis )
   6546       else
   6547           call mpp_error( FATAL, 'MPP_WRITE_META_AXIS_UNLIMITED: Only netCDF format is currently supported.' )
   6548       end if
   6549 
   6550 !write axis attributes
   6551       if(present(longname)) then
   6552          call mpp_write_meta(unit,axis%id,'long_name',cval=axis%longname); axis%natt=axis%natt+1
   6553       endif
   6554       if(present(units)) then
   6555          if (lowercase(trim(axis%units)).ne.'none' .OR. .NOT.cf_compliance) then
   6556            call mpp_write_meta(unit,axis%id,'units',     cval=axis%units); axis%natt=axis%natt+1
   6557          endif
   6558       endif
   6559       if( verbose )print '(a,2i6,x,a,2i3)', &
   6560           'MPP_WRITE_META_UNLIMITED: Wrote axis metadata, pe, unit, axis%name, axis%id, axis%did=', &

Page 244         Source Listing                  MPP_WRITE_META_AXIS_UNLIMITED
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6561            pe, unit, trim(axis%name), axis%id, axis%did
   6562 
   6563       mpp_file(unit)%ndim = max(1,mpp_file(unit)%ndim + 1)
   6564 
   6565 !      call mpp_clock_end(mpp_write_clock)
   6566       return
   6567     end subroutine mpp_write_meta_axis_unlimited


ENTRY POINTS

  Name                                                    
                                                          
 mpp_io_mod_mp_mpp_write_meta_axis_unlimited_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXIS                       Dummy  6506     AXISTYPE        1424        scalar   ARG,INOUT        6533,6534,6535,6536,6537,6538,6542
                                                                                                  ,6543,6544,6545,6552,6555,6556,656
                                                                                                  1                                 
 DATA                       Dummy  6506     I(4)            4           scalar   ARG,IN           6538                              
 DOMAIN_EXIST               Local  6519     L(4)            4           scalar                                                      
 IO_DOMAIN                  Local  6520     DOMAIN2D        752         scalar   PTR              6520                              
 ISTAT                      Local  6518     I(4)            4           scalar                                                      
 LONGNAME                   Dummy  6506     CHAR                        scalar   ARG,IN           6535,6551                         
 MAX                        Func   6563                                 scalar                    6563                              
 MPP_WRITE_META_AXIS_UNLIMI                                                                                                         
 TED                        Subr   6506                                          PRIV                                               
 NAME                       Dummy  6506     CHAR                        scalar   ARG,IN           6533                              
 PRESENT                    Func   6534                                 scalar                    6534,6535,6551,6554               
 TRIM                       Func   6555                                 scalar                    6555,6561                         
 UNIT                       Dummy  6506     I(4)            4           scalar   ARG,IN           6524,6528,6529,6541,6542,6543,6544
                                                                                                  ,6545,6552,6556,6561,6563         
 UNITS                      Dummy  6506     CHAR                        scalar   ARG,IN           6534,6554                         
 UNLIMITED                  Dummy  6506     L(4)            4           scalar   ARG,IN                                             

Page 245         Source Listing                  MPP_WRITE_META_AXIS_UNLIMITED
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6568 
   6569 
   6570     subroutine mpp_write_meta_field( unit, field, axes, name, units, longname,&
   6571          min, max, missing, fill, scale, add, pack, time_method, standard_name, checksum)
   6572 !define field: must have already called mpp_write_meta(axis) for each axis
   6573       integer, intent(in) :: unit
   6574       type(fieldtype), intent(inout) :: field
   6575       type(axistype), intent(in) :: axes(:)
   6576       character(len=*), intent(in) :: name, units, longname
   6577       real, intent(in), optional :: min, max, missing, fill, scale, add
   6578       integer, intent(in), optional :: pack
   6579       character(len=*), intent(in), optional :: time_method
   6580       character(len=*), intent(in), optional :: standard_name
   6581       integer(i8_kind), dimension(:), intent(in), optional :: checksum
   6582 !this array is required because of f77 binding on netCDF interface
   6583       integer, allocatable :: axis_id(:)
   6584       real :: a, b
   6585       integer :: i, istat, ishift, jshift
   6586       character(len=64) :: checksum_char
   6587 
   6588 !      call mpp_clock_begin(mpp_write_clock)
   6589 
   6590 !--- figure out the location of data, this is needed in mpp_write.
   6591 !--- for NON-symmetry domain, the position is not an issue.
   6592 !--- we may need to rethink how to address the symmetric issue.
   6593       ishift = 0; jshift = 0
   6594       do i = 1, size(axes(:))
   6595          select case ( lowercase( axes(i)%cartesian ) )
   6596          case ( 'x' )
   6597             ishift = axes(i)%shift
   6598          case ( 'y' )
   6599             jshift = axes(i)%shift
   6600          end select
   6601       end do
   6602 
   6603       field%position = CENTER
   6604       if(ishift == 1 .AND. jshift == 1) then
   6605          field%position = CORNER
   6606       else if(ishift == 1) then
   6607          field%position = EAST
   6608       else if(jshift == 1) then
   6609          field%position = NORTH
   6610       endif
   6611 
   6612       if( .NOT.module_is_initialized    )call mpp_error( FATAL, 'MPP_WRITE_META: must first call mpp_io_init.' )
   6613 
   6614       if( .NOT.mpp_file(unit)%write_on_this_pe) then
   6615          if( .NOT. ASSOCIATED(field%axes) )allocate(field%axes(1)) !temporary fix
   6616 !         call mpp_clock_end(mpp_write_clock)
   6617          return
   6618       endif
   6619       if( .NOT.mpp_file(unit)%opened ) call mpp_error( FATAL, 'MPP_WRITE_META: invalid unit number.' )
   6620       if( mpp_file(unit)%initialized )  then
   6621 !     File has already been written to and needs to be returned to define mode.
   6622 
   6623         error = NF_REDEF(mpp_file(unit)%ncid)
   6624 

Page 246         Source Listing                  MPP_WRITE_META_FIELD
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6625         mpp_file(unit)%initialized = .false.
   6626       endif
   6627 !           call mpp_error( FATAL, 'MPP_WRITE_META: cannot write metadata to file after an mpp_write.' )
   6628 
   6629 !pre-existing pointers need to be nullified
   6630       if( ASSOCIATED(field%axes) ) DEALLOCATE(field%axes, stat=istat)
   6631       if( ASSOCIATED(field%size) ) DEALLOCATE(field%size, stat=istat)
   6632 !fill in field metadata
   6633       field%name = name
   6634       field%units = units
   6635       field%longname = longname
   6636       allocate( field%axes(size(axes(:))) )
   6637       field%axes = axes
   6638       field%ndim = size(axes(:))
   6639       field%time_axis_index = -1 !this value will never match any axis index
   6640 !size is buffer area for the corresponding axis info: it is required to buffer this info in the fieldtype
   6641 !because axis might be reused in different files
   6642       allocate( field%size(size(axes(:))) )
   6643       do i = 1,size(axes(:))
   6644          if( ASSOCIATED(axes(i)%data) )then !space axis
   6645              field%size(i) = size(axes(i)%data(:))
   6646          else               !time
   6647              field%size(i) = 1
   6648              field%time_axis_index = i
   6649          end if
   6650       end do
   6651 !attributes
   6652       if( PRESENT(min) )          field%min           = min
   6653       if( PRESENT(max) )          field%max           = max
   6654       if( PRESENT(scale) )        field%scale         = scale
   6655       if( PRESENT(add) )          field%add           = add
   6656       if( PRESENT(standard_name)) field%standard_name = standard_name
   6657       if( PRESENT(missing) )      field%missing       = missing
   6658       if( PRESENT(fill) )         field%fill          = fill
   6659       field%checksum      = 0
   6660       if( PRESENT(checksum) )     field%checksum(1:size(checksum)) = checksum(:)
   6661 
   6662 ! Issue warning if fill and missing are different
   6663       if (present(fill).and.present(missing)) then
   6664           if (field%missing .ne. field%fill) then
   6665               call mpp_error(WARNING, 'MPP_WRITE_META: NetCDF attributes &
   6666                       &_FillValue and missing_value should be equal.')
   6667           end if
   6668       end if
   6669 !pack is currently used only for netCDF
   6670       field%pack = 2        !default write 32-bit floats
   6671       if( PRESENT(pack) )field%pack = pack
   6672       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   6673 
   6674           allocate( axis_id(size(field%axes(:))) )
   6675           do i = 1,size(field%axes(:))
   6676              axis_id(i) = field%axes(i)%did
   6677           end do
   6678 !write field def
   6679           select case (field%pack)
   6680               case(0)
   6681                   error = NF_DEF_VAR( mpp_file(unit)%ncid, field%name, NF_INT, size(field%axes(:)), axis_id, field%id )

Page 247         Source Listing                  MPP_WRITE_META_FIELD
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6682               case(1)
   6683                   error = NF_DEF_VAR( mpp_file(unit)%ncid, field%name, NF_DOUBLE, size(field%axes(:)), axis_id, field%id )
   6684               case(2)
   6685                   error = NF_DEF_VAR( mpp_file(unit)%ncid, field%name, NF_FLOAT,  size(field%axes(:)), axis_id, field%id )
   6686               case(4)
   6687                   if( .NOT.PRESENT(scale) .OR. .NOT.PRESENT(add) ) &
   6688                        call mpp_error( FATAL, 'MPP_WRITE_META_FIELD: scale and add must be supplied when pack=4.' )
   6689                   error = NF_DEF_VAR( mpp_file(unit)%ncid, field%name, NF_SHORT,  size(field%axes(:)), axis_id, field%id )
   6690               case(8)
   6691                   if( .NOT.PRESENT(scale) .OR. .NOT.PRESENT(add) ) &
   6692                        call mpp_error( FATAL, 'MPP_WRITE_META_FIELD: scale and add must be supplied when pack=8.' )
   6693                   error = NF_DEF_VAR( mpp_file(unit)%ncid, field%name, NF_BYTE,   size(field%axes(:)), axis_id, field%id )
   6694               case default
   6695                   call mpp_error( FATAL, 'MPP_WRITE_META_FIELD: only legal packing values are 1,2,4,8.' )
   6696           end select
   6697           call netcdf_err( error, mpp_file(unit), field=field )
   6698           deallocate(axis_id)
   6699 
   6700           if(shuffle .NE. 0 .OR. deflate .NE. 0) then
   6701              error = NF_DEF_VAR_DEFLATE(mpp_file(unit)%ncid, field%id, shuffle, deflate, deflate_level)
   6702              call netcdf_err( error, mpp_file(unit), field=field )
   6703           endif
   6704 
   6705 
   6706       else
   6707           varnum = varnum + 1
   6708           field%id = varnum
   6709           if( PRESENT(pack) )call mpp_error( WARNING, 'MPP_WRITE_META: Packing is currently available only on netCDF files.'
   6709  )
   6710 !write field def
   6711           write( text, '(a,i4,a)' )'FIELD ', field%id, ' name'
   6712           call write_attribute( unit, trim(text), cval=field%name )
   6713           write( text, '(a,i4,a)' )'FIELD ', field%id, ' axes'
   6714           call write_attribute( unit, trim(text), ival=field%axes(:)%did )
   6715       end if
   6716 !write field attributes: these names follow netCDF conventions
   6717       call mpp_write_meta( unit, field%id, 'long_name', cval=field%longname)
   6718       if (lowercase(trim(field%units)).ne.'none' .OR. .NOT.cf_compliance) then
   6719         call mpp_write_meta( unit, field%id, 'units',     cval=field%units)
   6720       endif
   6721 !all real attributes must be written as packed
   6722       if( PRESENT(min) .AND. PRESENT(max) )then
   6723           if( field%pack.EQ.1 .OR. field%pack.EQ.2 )then
   6724               call mpp_write_meta( unit, field%id, 'valid_range', rval=(/min,max/), pack=pack )
   6725           else
   6726               a = nint((min-add)/scale)
   6727               b = nint((max-add)/scale)
   6728               call mpp_write_meta( unit, field%id, 'valid_range', rval=(/a,  b  /), pack=pack )
   6729           end if
   6730       else if( PRESENT(min) )then
   6731           if( field%pack.EQ.1 .OR. field%pack.EQ.2 )then
   6732               call mpp_write_meta( unit, field%id, 'valid_min', rval=field%min, pack=pack )
   6733           else
   6734               a = nint((min-add)/scale)
   6735               call mpp_write_meta( unit, field%id, 'valid_min', rval=a, pack=pack )
   6736           end if
   6737       else if( PRESENT(max) )then

Page 248         Source Listing                  MPP_WRITE_META_FIELD
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6738           if( field%pack.EQ.1 .OR. field%pack.EQ.2 )then
   6739               call mpp_write_meta( unit, field%id, 'valid_max', rval=field%max, pack=pack )
   6740           else
   6741               a = nint((max-add)/scale)
   6742               call mpp_write_meta( unit, field%id, 'valid_max', rval=a, pack=pack )
   6743           end if
   6744       end if
   6745 ! write missing_value
   6746       if ( present(missing) ) then
   6747          if( field%pack.EQ.1 .OR. field%pack.EQ.2 )then
   6748             call mpp_write_meta( unit, field%id, 'missing_value', rval=field%missing, pack=pack )
   6749          else
   6750             a = nint((missing-add)/scale)
   6751             call mpp_write_meta( unit, field%id, 'missing_value', rval=a, pack=pack )
   6752          end if
   6753       end if
   6754 ! write _FillValue
   6755       if ( present(fill) ) then
   6756          if( field%pack.EQ.1 .OR. field%pack.EQ.2 )then
   6757             call mpp_write_meta( unit, field%id, '_FillValue', rval=field%fill, pack=pack )
   6758          else if (field%pack==0) then ! some safety checks for integer fills
   6759             if ( present(scale).OR.present(add) ) then
   6760                call mpp_error(FATAL,"add,scale not currently implimented for pack=0 int handling, try reals instead.")
   6761             else
   6762 ! Trust No One
   6763                call mpp_write_meta( unit, field%id, '_FillValue', ival=MPP_FILL_INT, pack=pack )
   6764             end if
   6765          else
   6766             a = nint((fill-add)/scale)
   6767             call mpp_write_meta( unit, field%id, '_FillValue', rval=a, pack=pack )
   6768          end if
   6769       end if
   6770 
   6771       if( field%pack.NE.1 .AND. field%pack.NE.2 )then
   6772           call mpp_write_meta( unit, field%id, 'packing', ival=field%pack )
   6773           if( PRESENT(scale) )call mpp_write_meta( unit, field%id, 'scale_factor',  rval=field%scale )
   6774           if( PRESENT(add)   )call mpp_write_meta( unit, field%id, 'add_offset',    rval=field%add   )
   6775       end if
   6776 
   6777       if( present(checksum) )then
   6778           write (checksum_char,'(Z16)') field%checksum(1)
   6779           do i = 2,size(checksum)
   6780             write (checksum_char,'(a,Z16)') trim(checksum_char)//",",checksum(i)
   6781           enddo
   6782           call mpp_write_meta( unit, field%id, 'checksum', cval=checksum_char )
   6783       end if
   6784 
   6785       if ( PRESENT(time_method) ) then
   6786           call mpp_write_meta(unit,field%id, 'cell_methods',cval='time: '//trim(time_method))
   6787       endif
   6788       if ( PRESENT(standard_name)) &
   6789            call mpp_write_meta(unit,field%id,'standard_name ', cval=field%standard_name)
   6790 
   6791       if( verbose )print '(a,2i6,x,a,i3)', 'MPP_WRITE_META: Wrote field metadata: pe, unit, field%name, field%id=', &
   6792            pe, unit, trim(field%name), field%id
   6793 
   6794 !      call mpp_clock_end(mpp_write_clock)

Page 249         Source Listing                  MPP_WRITE_META_FIELD
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6795       return
   6796     end subroutine mpp_write_meta_field


ENTRY POINTS

  Name                                           
                                                 
 mpp_io_mod_mp_mpp_write_meta_field_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  6584     R(8)            8           scalar                    6726,6728,6734,6735,6741,6742,6750
                                                                                                  ,6751,6766,6767                   
 ADD                        Dummy  6571     R(8)            8           scalar   ARG,IN           6655,6687,6691,6726,6727,6734,6741
                                                                                                  ,6750,6759,6766,6774              
 ASSOCIATED                 Func   6615                                 scalar                    6615,6630,6631,6644               
 AXES                       Dummy  6570     RECORD          1424  1     1        ARG,IN           6594,6595,6597,6599,6636,6637,6638
                                                                                                  ,6642,6643,6644,6645              
 AXIS_ID                    Local  6583     I(4)            4     1     1        ALC              6674,6676,6681,6683,6685,6689,6693
                                                                                                  ,6698                             
 B                          Local  6584     R(8)            8           scalar                    6727,6728                         
 CHECKSUM                   Dummy  6571     I(8)            8     1     1        ARG,IN           6660,6777,6779,6780               
 CHECKSUM_CHAR              Local  6586     CHAR            64          scalar                    6778,6780,6782                    
 FIELD                      Dummy  6570     FIELDTYPE       1096        scalar   ARG,INOUT        6603,6605,6607,6609,6615,6630,6631
                                                                                                  ,6633,6634,6635,6636,6637,6638,663
                                                                                                  9,6642,6645,6647,6648,6652,6653,66
                                                                                                  54,6655,6656,6657,6658,6659,6660,6
                                                                                                  664,6670,6671,6674,6675,6676,6679,
                                                                                                  6681,6683,6685,6689,6693,6697,6701
                                                                                                  ,6702,6708,6711,6712,6713,6714,671
                                                                                                  7,6718,6719,6723,6724,6728,6731,67
                                                                                                  32,6735,6738,6739,6742,6747,6748,6
                                                                                                  751,6756,6757,6758,6763,6767,6771,
                                                                                                  6772,6773,6774,6778,6782,6786,6789
                                                                                                  ,6792                             
 FILL                       Dummy  6571     R(8)            8           scalar   ARG,IN           6658,6663,6755,6766               
 I                          Local  6585     I(4)            4           scalar                    6594,6595,6597,6599,6643,6644,6645
                                                                                                  ,6647,6648,6675,6676,6779,6780    
 ISHIFT                     Local  6585     I(4)            4           scalar                    6593,6597,6604,6606               
 ISTAT                      Local  6585     I(4)            4           scalar                    6630,6631                         
 JSHIFT                     Local  6585     I(4)            4           scalar                    6593,6599,6604,6608               
 LONGNAME                   Dummy  6570     CHAR                        scalar   ARG,IN           6635                              
 MAX                        Dummy  6571     R(8)            8           scalar   ARG,IN           6653,6722,6724,6727,6737,6741     
 MIN                        Dummy  6571     R(8)            8           scalar   ARG,IN           6652,6722,6724,6726,6730,6734     
 MISSING                    Dummy  6571     R(8)            8           scalar   ARG,IN           6657,6663,6746,6750               
 MPP_WRITE_META_FIELD       Subr   6570                                          PRIV                                               
 NAME                       Dummy  6570     CHAR                        scalar   ARG,IN           6633                              
 NF_DEF_VAR_DEFLATE         Func   6701     I(4)            4           scalar   PRIV             6701                              
 NINT                       Func   6726                                 scalar                    6726,6727,6734,6741,6750,6766     
 PACK                       Dummy  6571     I(4)            4           scalar   ARG,IN           6671,6709,6724,6728,6732,6735,6739
                                                                                                  ,6742,6748,6751,6757,6763,6767    
 PRESENT                    Func   6652                                 scalar                    6652,6653,6654,6655,6656,6657,6658
                                                                                                  ,6660,6663,6671,6687,6691,6709,672

Page 250         Source Listing                  MPP_WRITE_META_FIELD
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_write.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,6730,6737,6746,6755,6759,6773,67
                                                                                                  74,6777,6785,6788                 
 SCALE                      Dummy  6571     R(8)            8           scalar   ARG,IN           6654,6687,6691,6726,6727,6734,6741
                                                                                                  ,6750,6759,6766,6773              
 SHUFFLE                    Local  6700     I(4)            4           scalar                    1063,1069,6700,6701               
 SIZE                       Func   6594                                 scalar                    6594,6636,6638,6642,6643,6645,6660
                                                                                                  ,6674,6675,6681,6683,6685,6689,669
                                                                                                  3,6779                            
 STANDARD_NAME              Dummy  6571     CHAR                        scalar   ARG,IN           6656,6788                         
 TIME_METHOD                Dummy  6571     CHAR                        scalar   ARG,IN           6785,6786                         
 TRIM                       Func   6712                                 scalar                    6712,6714,6718,6780,6786,6792     
 UNIT                       Dummy  6570     I(4)            4           scalar   ARG,IN           6614,6619,6620,6623,6625,6672,6681
                                                                                                  ,6683,6685,6689,6693,6697,6701,670
                                                                                                  2,6712,6714,6717,6719,6724,6728,67
                                                                                                  32,6735,6739,6742,6748,6751,6757,6
                                                                                                  763,6767,6772,6773,6774,6782,6786,
                                                                                                  6789,6792                         
 UNITS                      Dummy  6570     CHAR                        scalar   ARG,IN           6634                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FIELDTYPE.POSITION         I(4)            4     1088           scalar   PRIV             6603,6605,6607,6609,7230,7345,7673 
                                                                                           ,7788,9067,9069,9071,9073          
 FIELDTYPE.STANDARD_NAME    CHAR            256   512            scalar   PRIV             6656,6789,9103                     

Page 251         Source Listing                  MPP_WRITE_META_FIELD
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6797 
   6798     subroutine write_attribute( unit, name, rval, ival, cval, pack )
   6799 !called to write metadata for non-netCDF I/O
   6800       integer, intent(in) :: unit
   6801       character(len=*), intent(in) :: name
   6802       real, intent(in), optional :: rval(:)
   6803       integer, intent(in), optional :: ival(:)
   6804       character(len=*), intent(in), optional :: cval
   6805 !pack is currently ignored in this routine: only used by netCDF I/O
   6806       integer, intent(in), optional :: pack
   6807 
   6808       if( mpp_file(unit)%nohdrs )return
   6809 !encode text string
   6810       if( PRESENT(rval) )then
   6811           write( text,* )trim(name)//'=', rval
   6812       else if( PRESENT(ival) )then
   6813           write( text,* )trim(name)//'=', ival
   6814       else if( PRESENT(cval) )then
   6815           text = ' '//trim(name)//'='//trim(cval)
   6816       else
   6817           call mpp_error( FATAL, 'WRITE_ATTRIBUTE: one of rval, ival, cval must be present.' )
   6818       end if
   6819       if( mpp_file(unit)%format.EQ.MPP_ASCII )then
   6820 !implies sequential access
   6821           write( unit,fmt='(a)' )trim(text)//char(10)
   6822       else                      !MPP_IEEE32 or MPP_NATIVE
   6823           if( mpp_file(unit)%access.EQ.MPP_SEQUENTIAL )then
   6824               write(unit)trim(text)//char(10)
   6825           else                  !MPP_DIRECT
   6826               write( unit,rec=mpp_file(unit)%record )trim(text)//char(10)
   6827               if( verbose )print '(a,i6,a,i3)', 'WRITE_ATTRIBUTE: PE=', pe, ' wrote record ', mpp_file(unit)%record
   6828               mpp_file(unit)%record = mpp_file(unit)%record + 1
   6829           end if
   6830       end if
   6831       return
   6832     end subroutine write_attribute

Page 252         Source Listing                  WRITE_ATTRIBUTE
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_write.inc



ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_write_attribute_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHAR                       Func   6821                                 scalar                    6821,6824,6826                    
 CVAL                       Dummy  6798     CHAR                        scalar   ARG,IN           6814,6815                         
 IVAL                       Dummy  6798     I(4)            4     1     1        ARG,IN           6812,6813                         
 NAME                       Dummy  6798     CHAR                        scalar   ARG,IN           6811,6813,6815                    
 PACK                       Dummy  6798     I(4)            4           scalar   ARG,IN                                             
 PRESENT                    Func   6810                                 scalar                    6810,6812,6814                    
 RVAL                       Dummy  6798     R(8)            8     1     1        ARG,IN           6810,6811                         
 TRIM                       Func   6811                                 scalar                    6811,6813,6815,6821,6824,6826     
 UNIT                       Dummy  6798     I(4)            4           scalar   ARG,IN           6808,6819,6821,6823,6824,6826,6827
                                                                                                  ,6828                             
 WRITE_ATTRIBUTE            Subr   6798                                                           6058,6111,6367,6373,6378,6712,6714
                                                                                                  ,8725,8727,8801,8806,8808,8813,892
                                                                                                  6,8928                            

Page 253         Source Listing                  WRITE_ATTRIBUTE
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6833 
   6834     subroutine write_attribute_netcdf( unit, id, name, rval, ival, cval, pack )
   6835 !called to write metadata for netCDF I/O
   6836       integer, intent(in) :: unit
   6837       integer, intent(in) :: id
   6838       character(len=*), intent(in) :: name
   6839       real,             intent(in), optional :: rval(:)
   6840       integer,          intent(in), optional :: ival(:)
   6841       character(len=*), intent(in), optional :: cval
   6842       integer, intent(in), optional :: pack
   6843       integer, allocatable :: rval_i(:)
   6844 
   6845       if( PRESENT(rval) )then
   6846 !pack was only meaningful for FP numbers, but is now extended by the ival branch of this routine
   6847           if( PRESENT(pack) )then
   6848              if( pack== 0 ) then !! here be dragons, use ival branch!...
   6849                 if( KIND(rval).EQ.r8_kind )then
   6850                    call mpp_error( FATAL, &
   6851                         'WRITE_ATTRIBUTE_NETCDF: attempting to write internal NF_INT, currently int32, as double.' )
   6852                 else if( KIND(rval).EQ.r4_kind )then
   6853                    call mpp_error( FATAL, &
   6854                         'WRITE_ATTRIBUTE_NETCDF: attempting to write internal NF_INT, currently int32, as float.' )
   6855                 end if
   6856              else if( pack.EQ.1 )then
   6857                   if( KIND(rval).EQ.r8_kind )then
   6858                       error = NF_PUT_ATT_DOUBLE( mpp_file(unit)%ncid, id, name, NF_DOUBLE, &
   6859                                                 size(rval(:)), real(rval, kind=r8_kind))
   6860                   else if( KIND(rval).EQ.r4_kind )then
   6861                       call mpp_error( WARNING, &
   6862                            'WRITE_ATTRIBUTE_NETCDF: attempting to write internal 32-bit real as external 64-bit.' )
   6863                       error = NF_PUT_ATT_REAL  ( mpp_file(unit)%ncid, id, name, NF_DOUBLE, &
   6864                                                 size(rval(:)), real(rval, kind=r4_kind))
   6865                   end if
   6866                   call netcdf_err( error, mpp_file(unit), string=' Attribute='//name )
   6867               else if( pack.EQ.2 )then
   6868                   if( KIND(rval).EQ.r8_kind )then
   6869                       error = NF_PUT_ATT_DOUBLE( mpp_file(unit)%ncid, id, name, NF_FLOAT, &
   6870                                                 size(rval(:)), real(rval, kind=r8_kind))
   6871                   else if( KIND(rval).EQ.r4_kind )then
   6872                       error = NF_PUT_ATT_REAL  ( mpp_file(unit)%ncid, id, name, NF_FLOAT, &
   6873                                                 size(rval(:)), real(rval, kind=r4_kind))
   6874                   end if
   6875                   call netcdf_err( error, mpp_file(unit), string=' Attribute='//name )
   6876               else if( pack.EQ.4 )then
   6877                   allocate( rval_i(size(rval(:))) )
   6878                   rval_i = rval
   6879                   if( KIND(rval).EQ.r8_kind )then
   6880                       error = NF_PUT_ATT_DOUBLE( mpp_file(unit)%ncid, id, name, NF_SHORT, &
   6881                                                 size(rval_i(:)), real(rval, kind=r8_kind))
   6882                   else if( KIND(rval).EQ.r4_kind )then
   6883                       error = NF_PUT_ATT_REAL  ( mpp_file(unit)%ncid, id, name, NF_SHORT, &
   6884                                                 size(rval_i(:)), real(rval, kind=r4_kind))
   6885                   end if
   6886                   call netcdf_err( error, mpp_file(unit), string=' Attribute='//name )
   6887                   deallocate(rval_i)
   6888               else if( pack.EQ.8 )then
   6889                   allocate( rval_i(size(rval(:))) )

Page 254         Source Listing                  WRITE_ATTRIBUTE_NETCDF
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6890                   rval_i = rval
   6891                   if( KIND(rval).EQ.r8_kind )then
   6892                       error = NF_PUT_ATT_DOUBLE( mpp_file(unit)%ncid, id, name, NF_BYTE, &
   6893                                                 size(rval_i(:)), real(rval, kind=r8_kind))
   6894                   else if( KIND(rval).EQ.r4_kind )then
   6895                       error = NF_PUT_ATT_REAL  ( mpp_file(unit)%ncid, id, name, NF_BYTE, &
   6896                                                 size(rval_i(:)), real(rval, kind=r4_kind))
   6897                   end if
   6898                   call netcdf_err( error, mpp_file(unit), string=' Attribute='//name )
   6899                   deallocate(rval_i)
   6900               else
   6901                   call mpp_error( FATAL, 'WRITE_ATTRIBUTE_NETCDF: only legal packing values are 1,2,4,8.' )
   6902               end if
   6903           else
   6904 !default is to write FLOATs (32-bit)
   6905               if( KIND(rval).EQ.r8_kind )then
   6906                   error = NF_PUT_ATT_DOUBLE( mpp_file(unit)%ncid, id, name, NF_FLOAT, &
   6907                                             size(rval(:)), real(rval, kind=r8_kind))
   6908               else if( KIND(rval).EQ.r4_kind )then
   6909                   error = NF_PUT_ATT_REAL  ( mpp_file(unit)%ncid, id, name, NF_FLOAT, &
   6910                                             size(rval(:)), real(rval, kind=r4_kind))
   6911               end if
   6912               call netcdf_err( error, mpp_file(unit), string=' Attribute='//name )
   6913           end if
   6914       else if( PRESENT(ival) )then
   6915           if( PRESENT(pack) ) then
   6916              if (pack ==0) then
   6917                 if (KIND(ival).EQ.i8_kind) then
   6918                    call mpp_error(FATAL,'only use NF_INTs with pack=0 for now')
   6919                 end if
   6920                 error = NF_PUT_ATT_INT( mpp_file(unit)%ncid, id, name, &
   6921                                        NF_INT, size(ival(:)), ival ) !!XXX int32_t
   6922                 call netcdf_err( error, mpp_file(unit), string=' Attribute='//name )
   6923              else
   6924                 call mpp_error( FATAL, 'WRITE_ATTRIBUTE_NETCDF: only implimented ints when pack=0, else use reals.' )
   6925              endif
   6926           else
   6927           error = NF_PUT_ATT_INT ( mpp_file(unit)%ncid, id, name, NF_INT, size(ival(:)), ival )
   6928           call netcdf_err( error, mpp_file(unit), string=' Attribute='//name )
   6929           end if
   6930       else if( present(cval) )then
   6931           if (.NOT.cf_compliance .or. trim(name).NE.'calendar') then
   6932             error = NF_PUT_ATT_TEXT( mpp_file(unit)%ncid, id, name, len_trim(cval), cval )
   6933           else
   6934             error = NF_PUT_ATT_TEXT( mpp_file(unit)%ncid, id, name, len_trim(cval), lowercase(cval) )
   6935           endif
   6936           call netcdf_err( error, mpp_file(unit), string=' Attribute='//name )
   6937       else
   6938           call mpp_error( FATAL, 'WRITE_ATTRIBUTE_NETCDF: one of rval, ival, cval must be present.' )
   6939       end if
   6940 
   6941       return
   6942     end subroutine write_attribute_netcdf

Page 255         Source Listing                  WRITE_ATTRIBUTE_NETCDF
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_write.inc



ENTRY POINTS

  Name                                             
                                                   
 mpp_io_mod_mp_write_attribute_netcdf_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CVAL                       Dummy  6834     CHAR                        scalar   ARG,IN           6930,6932,6934                    
 ID                         Dummy  6834     I(4)            4           scalar   ARG,IN           6858,6863,6869,6872,6880,6883,6892
                                                                                                  ,6895,6906,6909,6920,6927,6932,693
                                                                                                  4                                 
 IVAL                       Dummy  6834     I(4)            4     1     1        ARG,IN           6914,6917,6921,6927               
 LEN_TRIM                   Func   6932                                 scalar                    6932,6934                         
 NAME                       Dummy  6834     CHAR                        scalar   ARG,IN           6858,6863,6866,6869,6872,6875,6880
                                                                                                  ,6883,6886,6892,6895,6898,6906,690
                                                                                                  9,6912,6920,6922,6927,6928,6931,69
                                                                                                  32,6934,6936                      
 NF_PUT_ATT_DOUBLE          Func   6858     I(4)            4           scalar   PRIV             6858,6869,6880,6892,6906          
 NF_PUT_ATT_INT             Func   6920     I(4)            4           scalar   PRIV             6920,6927                         
 NF_PUT_ATT_REAL            Func   6863     I(4)            4           scalar   PRIV             6863,6872,6883,6895,6909          
 PACK                       Dummy  6834     I(4)            4           scalar   ARG,IN           6847,6848,6856,6867,6876,6888,6915
                                                                                                  ,6916                             
 PRESENT                    Func   6845                                 scalar                    6845,6847,6914,6915,6930          
 REAL                       Func   6859                                 scalar                    6859,6864,6870,6873,6881,6884,6893
                                                                                                  ,6896,6907,6910                   
 RVAL                       Dummy  6834     R(8)            8     1     1        ARG,IN           6845,6849,6852,6857,6859,6860,6864
                                                                                                  ,6868,6870,6871,6873,6877,6878,687
                                                                                                  9,6881,6882,6884,6889,6890,6891,68
                                                                                                  93,6894,6896,6905,6907,6908,6910  
 RVAL_I                     Local  6843     I(4)            4     1     1        ALC              6877,6878,6881,6884,6887,6889,6890
                                                                                                  ,6893,6896,6899                   
 SIZE                       Func   6859                                 scalar                    6859,6864,6870,6873,6877,6881,6884
                                                                                                  ,6889,6893,6896,6907,6910,6921,692
                                                                                                  7                                 
 TRIM                       Func   6931                                 scalar                    6931                              
 UNIT                       Dummy  6834     I(4)            4           scalar   ARG,IN           6858,6863,6866,6869,6872,6875,6880
                                                                                                  ,6883,6886,6892,6895,6898,6906,690
                                                                                                  9,6912,6920,6922,6927,6928,6932,69
                                                                                                  34,6936                           
 WRITE_ATTRIBUTE_NETCDF     Subr   6834                                                           6055,6108,8718,8720               

Page 256         Source Listing                  WRITE_ATTRIBUTE_NETCDF
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   6943 
   6944 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6945 !                                                                      !
   6946 !                             MPP_WRITE                                !
   6947 !                                                                      !
   6948 ! mpp_write is used to write data to the file on <unit> using the      !
   6949 ! file parameters supplied by mpp_open(). Axis and field definitions   !
   6950 ! must have previously been written to the file using mpp_write_meta.  !
   6951 !                                                                      !
   6952 ! mpp_write can take 2 forms, one for distributed data and one for     !
   6953 ! non-distributed data. Distributed data refer to arrays whose two     !
   6954 ! fastest-varying indices are domain-decomposed. Distributed data      !
   6955 ! must be 2D or 3D (in space). Non-distributed data can be 0-3D.       !
   6956 !                                                                      !
   6957 ! In all calls to mpp_write, tstamp is an optional argument. It is to  !
   6958 ! be omitted if the field was defined not to be a function of time.    !
   6959 ! Results are unpredictable if the argument is supplied for a time-    !
   6960 ! independent field, or omitted for a time-dependent field. Repeated   !
   6961 ! writes of a time-independent field are also not recommended. One     !
   6962 ! time level of one field is written per call.                         !
   6963 !                                                                      !
   6964 !                                                                      !
   6965 ! For non-distributed data, use                                        !
   6966 !                                                                      !
   6967 !  mpp_write( unit, field, data, tstamp )                              !
   6968 !     integer, intent(in) :: unit                                      !
   6969 !     type(fieldtype), intent(in) :: field                             !
   6970 !     real(r8_kind), optional :: tstamp                            !
   6971 !     data is real and can be scalar or of rank 1-3.                   !
   6972 !                                                                      !
   6973 ! For distributed data, use                                            !
   6974 !                                                                      !
   6975 !  mpp_write( unit, field, domain, data, tstamp )                      !
   6976 !     integer, intent(in) :: unit                                      !
   6977 !     type(fieldtype), intent(in) :: field                             !
   6978 !     type(domain2D), intent(in) :: domain                             !
   6979 !     real(r8_kind), optional :: tstamp                            !
   6980 !     data is real and can be of rank 2 or 3.                          !
   6981 !                                                                      !
   6982 !  mpp_write( unit, axis )                                             !
   6983 !     integer, intent(in) :: unit                                      !
   6984 !     type(axistype), intent(in) :: axis                               !
   6985 !                                                                      !
   6986 ! This call writes the actual co-ordinate values along each space      !
   6987 ! axis. It must be called once for each space axis after all other     !
   6988 ! metadata has been written.                                           !
   6989 !                                                                      !
   6990 ! The mpp_write package also includes the routine write_record which   !
   6991 ! performs the actual write. This routine is private to this module.   !
   6992 !                                                                      !
   6993 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   6994 
   6995 
   6996 
   6997 
   6998 
   6999 

Page 257         Source Listing                  WRITE_ATTRIBUTE_NETCDF
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   7000 
   7001 
   7002 
   7003 
   7004 # 1 "../mpp/include/mpp_write_2Ddecomp.h" 1 
   7005 !***********************************************************************
   7006 !*                   GNU Lesser General Public License
   7007 !*
   7008 !* This file is part of the GFDL Flexible Modeling System (FMS).
   7009 !*
   7010 !* FMS is free software: you can redistribute it and/or modify it under
   7011 !* the terms of the GNU Lesser General Public License as published by
   7012 !* the Free Software Foundation, either version 3 of the License, or (at
   7013 !* your option) any later version.
   7014 !*
   7015 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   7016 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   7017 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   7018 !* for more details.
   7019 !*
   7020 !* You should have received a copy of the GNU Lesser General Public
   7021 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   7022 !***********************************************************************
   7023     subroutine write_record_r8( unit, field, nwords, data, time_in, domain, tile_count)
   7024 !routine that is finally called by all mpp_write routines to perform the write
   7025 !a non-netCDF record contains:
   7026 !      field ID
   7027 !      a set of 4 coordinates (is:ie,js:je) giving the data subdomain
   7028 !      a timelevel and a timestamp (=NULLTIME if field is static)
   7029 !      3D real data (stored as 1D)
   7030 !if you are using direct access I/O, the RECL argument to OPEN must be large enough for the above
   7031 !in a global direct access file, record position on PE is given by %record.
   7032 
   7033 !Treatment of timestamp:
   7034 !   We assume that static fields have been passed without a timestamp.
   7035 !   Here that is converted into a timestamp of NULLTIME.
   7036 !   For non-netCDF fields, field is treated no differently, but is written
   7037 !   with a timestamp of NULLTIME. There is no check in the code to prevent
   7038 !   the user from repeatedly writing a static field.
   7039 
   7040       integer,           intent(in)           :: unit, nwords
   7041       type(fieldtype),   intent(in)           :: field
   7042       real(KIND=r8_kind),         intent(in)           :: data(nwords)
   7043       real(KIND=r8_kind),         intent(in), optional :: time_in
   7044       type(domain2D),    intent(in), optional :: domain
   7045       integer,           intent(in), optional :: tile_count
   7046       integer, dimension(size(field%axes(:))) :: start, axsiz
   7047       real(r8_kind) :: time
   7048       integer :: time_level
   7049       logical :: newtime
   7050       integer :: subdomain(4)
   7051       integer :: packed_data(nwords)
   7052       integer :: i, is, ie, js, je
   7053 
   7054       real(r4_kind) :: data_r4(nwords)
   7055       pointer( ptr1, data_r4)
   7056       pointer( ptr2, packed_data)

Page 258         Source Listing                  WRITE_RECORD_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7057 
   7058       if (mpp_io_stack_size < nwords) call mpp_io_set_stack_size(nwords)
   7059 
   7060       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_WRITE: must first call mpp_io_init.' )
   7061       if( .NOT.mpp_file(unit)%write_on_this_pe) return
   7062       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE: invalid unit number.' )
   7063       if( .NOT.mpp_file(unit)%initialized )then
   7064 !this is the first call to mpp_write
   7065 !we now declare the file to be initialized
   7066 !if this is netCDF we switch file from DEFINE mode to DATA mode
   7067           if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   7068 
   7069 !NOFILL is probably required for parallel: any circumstances in which not advisable?
   7070               error = NF_SET_FILL( mpp_file(unit)%ncid, NF_NOFILL, i ); call netcdf_err( error, mpp_file(unit) )
   7071               if( mpp_file(unit)%action.EQ.MPP_WRONLY )then
   7072                  if(header_buffer_val>0) then
   7073                     error = NF__ENDDEF(mpp_file(unit)%ncid,header_buffer_val,4,0,4)
   7074                  else
   7075                     error = NF_ENDDEF(mpp_file(unit)%ncid)
   7076                  endif
   7077               endif
   7078               call netcdf_err( error, mpp_file(unit) )
   7079 
   7080           else
   7081               call mpp_write_meta( unit, 'END', cval='metadata' )
   7082           end if
   7083           mpp_file(unit)%initialized = .TRUE.
   7084           if( verbose )print '(a,i6,a)', 'MPP_WRITE: PE=', pe, ' initialized file '//trim(mpp_file(unit)%name)//'.'
   7085       end if
   7086 
   7087 !initialize time: by default assume NULLTIME
   7088       time = NULLTIME
   7089       time_level = -1
   7090       newtime = .FALSE.
   7091       if( PRESENT(time_in) )time = time_in
   7092 !increment time level if new time
   7093       if( time.GT.mpp_file(unit)%time+EPSILON(time) )then !new time
   7094           mpp_file(unit)%time_level = mpp_file(unit)%time_level + 1
   7095           mpp_file(unit)%time = time
   7096           newtime = .TRUE.
   7097       end if
   7098       if( verbose )print '(a,2i6,2i5,es13.5)', 'MPP_WRITE: PE, unit, %id, %time_level, %time=',&
   7099            pe, unit, mpp_file(unit)%id, mpp_file(unit)%time_level, mpp_file(unit)%time
   7100 
   7101       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   7102           ptr2 = LOC(mpp_io_stack(1))
   7103 !define netCDF data block to be written:
   7104 !  time axis: START = time level
   7105 !             AXSIZ = 1
   7106 !  space axis: if there is no domain info
   7107 !              START = 1
   7108 !              AXSIZ = field%size(axis)
   7109 !          if there IS domain info:
   7110 !              start of domain is compute%start_index for multi-file I/O
   7111 !                                 global%start_index for all other cases
   7112 !              this number must be converted to 1 for NF_PUT_VAR
   7113 !                  (netCDF fortran calls are with reference to 1),

Page 259         Source Listing                  WRITE_RECORD_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7114 !          So, START = compute%start_index - <start of domain> + 1
   7115 !              AXSIZ = usually compute%size
   7116 !          However, if compute%start_index-compute%end_index+1.NE.compute%size,
   7117 !              we assume that the call is passing a subdomain.
   7118 !              To pass a subdomain, you must pass a domain2D object that satisfies the following:
   7119 !                  global%start_index must contain the <start of domain> as defined above;
   7120 !                  the data domain and compute domain must refer to the subdomain being passed.
   7121 !              In this case, START = compute%start_index - <start of domain> + 1
   7122 !                            AXSIZ = compute%start_index - compute%end_index + 1
   7123 ! NOTE: passing of subdomains will fail for multi-PE single-threaded I/O,
   7124 !       since that attempts to gather all data on PE 0.
   7125           start = 1
   7126           do i = 1,size(field%axes(:))
   7127              axsiz(i) = field%size(i)
   7128              if( i.EQ.field%time_axis_index )start(i) = mpp_file(unit)%time_level
   7129              start(i) = max(start(i),1)
   7130           end do
   7131 
   7132           if( debug )print '(a,2i6,12i6)', 'WRITE_RECORD: PE, unit, start, axsiz=', pe, unit, start, axsiz
   7133 
   7134 !write time information if new time
   7135           if( newtime )then
   7136               if( KIND(time).EQ.r8_kind )then
   7137                   error = NF_PUT_VAR1_DOUBLE( mpp_file(unit)%ncid, mpp_file(unit)%id, mpp_file(unit:unit)%time_level, time )
   7138               else if( KIND(time).EQ.r4_kind )then
   7139                  error = NF90_PUT_VAR ( mpp_file(unit)%ncid, mpp_file(unit)%id, time)
   7140               end if
   7141           end if
   7142           if( field%pack == 0 )then
   7143               packed_data = CEILING(data)
   7144               error = NF_PUT_VARA_INT   ( mpp_file(unit)%ncid, field%id, start, axsiz, packed_data )
   7145           elseif( field%pack.GT.0 .and. field%pack.LE.2 )then
   7146               error = NF90_PUT_VAR      ( mpp_file(unit)%ncid, field%id, data, start=start, count=axsiz )
   7147           else              !convert to integer using scale and add: no error check on packed data representation
   7148               packed_data = nint((data-field%add)/field%scale)
   7149               error = NF_PUT_VARA_INT   ( mpp_file(unit)%ncid, field%id, start, axsiz, packed_data )
   7150           end if
   7151           call netcdf_err( error, mpp_file(unit), field=field )
   7152 
   7153       else                      !non-netCDF
   7154           ptr1 = LOC(mpp_io_stack(1))
   7155 !subdomain contains (/is,ie,js,je/)
   7156           if( PRESENT(domain) )then
   7157               call mpp_get_compute_domain(domain, is, ie, js, je)
   7158               subdomain(:) = (/ is, ie, js, je /)
   7159           else
   7160               subdomain(:) = -1    ! -1 means use global value from axis metadata
   7161           end if
   7162           if( mpp_file(unit)%format.EQ.MPP_ASCII )then
   7163 !implies sequential access
   7164               write( unit,* )field%id, subdomain, time_level, time, data
   7165           else                      !MPP_IEEE32 or MPP_NATIVE
   7166               if( mpp_file(unit)%access.EQ.MPP_SEQUENTIAL )then
   7167                   write(unit)field%id, subdomain, time_level, time, data
   7168               else                  !MPP_DIRECT
   7169                   write( unit, rec=mpp_file(unit)%record )field%id, subdomain, time_level, time, data
   7170                   if( debug )print '(a,i6,a,i6)', 'MPP_WRITE: PE=', pe, ' wrote record ', mpp_file(unit)%record

Page 260         Source Listing                  WRITE_RECORD_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7171               end if
   7172           end if
   7173       end if
   7174 
   7175 !recompute current record for direct access I/O
   7176       if( mpp_file(unit)%access.EQ.MPP_DIRECT )then
   7177           if( mpp_file(unit)%fileset.EQ.MPP_SINGLE )then
   7178 !assumes all PEs participate in I/O: modify later
   7179               mpp_file(unit)%record = mpp_file(unit)%record + records_per_pe*npes
   7180           else
   7181               mpp_file(unit)%record = mpp_file(unit)%record + records_per_pe
   7182           end if
   7183       end if
   7184 
   7185       return
   7186     end subroutine write_record_r8


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_write_record_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXSIZ                      Local  7046     I(4)            4     1     0        TGT              7127,7132,7144,7146,7149          
 CEILING                    Func   7143                                 scalar                    7143                              
 DATA                       Dummy  7023     R(8)            8     1     0        ARG,TGT,IN       7143,7146,7148,7164,7167,7169     
 DATA_R4                    Local  7054     R(4)            4     1     0                                                           
 DOMAIN                     Dummy  7023     DOMAIN2D        752         scalar   ARG,IN           7156,7157                         
 EPSILON                    Func   7093                                 scalar                    7093                              
 FIELD                      Dummy  7023     FIELDTYPE       1096        scalar   ARG,IN           7126,7127,7128,7142,7144,7145,7146
                                                                                                  ,7148,7149,7151,7164,7167,7169    
 I                          Local  7052     I(4)            4           scalar                    7070,7126,7127,7128,7129          
 IE                         Local  7052     I(4)            4           scalar                    7157,7158                         
 IS                         Local  7052     I(4)            4           scalar                    7157,7158                         
 JE                         Local  7052     I(4)            4           scalar                    7157,7158                         
 JS                         Local  7052     I(4)            4           scalar                    7157,7158                         
 LOC                        Func   7102                                 scalar                    7102,7154                         
 MAX                        Func   7129                                 scalar                    7129                              
 NEWTIME                    Local  7049     L(4)            4           scalar                    7090,7096,7135                    
 NF90_PUT_VAR_EIGHTBYTEREAL Func   7139     I(4)            4           scalar   PRIV             7139,7582                         
 NF_NOFILL                  Param  7070     I(4)            4           scalar   PRIV             7070,7513                         
 NF_PUT_VAR1_DOUBLE         Func   7137     I(4)            4           scalar   PRIV             7137,7580                         
 NF_SET_FILL                Func   7070     I(4)            4           scalar   PRIV             7070,7513                         
 NINT                       Func   7148                                 scalar                    7148                              
 NWORDS                     Dummy  7023     I(4)            4           scalar   ARG,IN           7042,7051,7054,7058               
 PACKED_DATA                Local  7051     I(4)            4     1     0                         7143,7144,7148,7149               
 PRESENT                    Func   7091                                 scalar                    7091,7156                         
 PTR1                       Local  7055     I(8)            8           scalar   PTR              7154                              
 PTR2                       Local  7056     I(8)            8           scalar   PTR              7102                              
 SIZE                       Func   7126                                 scalar                    7126                              
 START                      Local  7046     I(4)            4     1     0        TGT              7125,7128,7129,7132,7144,7146,7149

Page 261         Source Listing                  WRITE_RECORD_R8
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_write_2Ddecomp.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 SUBDOMAIN                  Local  7050     I(4)            4     1     4                         7158,7160,7164,7167,7169          
 TILE_COUNT                 Dummy  7023     I(4)            4           scalar   ARG,IN                                             
 TIME                       Local  7047     R(8)            8           scalar                    7088,7091,7093,7095,7136,7137,7138
                                                                                                  ,7139,7164,7167,7169              
 TIME_IN                    Dummy  7023     R(8)            8           scalar   ARG,IN           7091                              
 TIME_LEVEL                 Local  7048     I(4)            4           scalar                    7089,7164,7167,7169               
 TRIM                       Func   7084                                 scalar                    7084                              
 UNIT                       Dummy  7023     I(4)            4           scalar   ARG,IN           7061,7062,7063,7067,7070,7071,7073
                                                                                                  ,7075,7078,7081,7083,7084,7093,709
                                                                                                  4,7095,7099,7101,7128,7132,7137,71
                                                                                                  39,7144,7146,7149,7151,7162,7164,7
                                                                                                  166,7167,7169,7170,7176,7177,7179,
                                                                                                  7181                              
 WRITE_RECORD_R8            Subr   7023                                                           7253,7273,7281,7301,7309,7312,7368
                                                                                                  ,7388,7396,7416,7424,7427,8017,823
                                                                                                  4,8279,8319,8359,8399,8439,8671,86
                                                                                                  76,9257,9415,9584,9770            

Page 262         Source Listing                  WRITE_RECORD_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7187 
   7188     subroutine mpp_write_2ddecomp_r2d_r8( unit, field, domain, data, tstamp, tile_count, default_data)
   7189       integer, intent(in) :: unit
   7190       type(fieldtype), intent(in) :: field
   7191       type(domain2D), intent(inout) :: domain
   7192       real(KIND=r8_kind), intent(inout) :: data(:,:)
   7193       real(KIND=r8_kind),              intent(in), optional :: tstamp
   7194       integer,           intent(in), optional :: tile_count
   7195       real(KIND=r8_kind),         intent(in), optional :: default_data
   7196 
   7197       real(KIND=r8_kind) :: data3D(size(data,1),size(data,2),1)
   7198       pointer( ptr, data3D )
   7199       ptr = LOC(data)
   7200 
   7201       call mpp_write( unit, field, domain, data3D, tstamp, tile_count, default_data)
   7202       return
   7203     end subroutine mpp_write_2ddecomp_r2d_r8


ENTRY POINTS

  Name                                                
                                                      
 mpp_io_mod_mp_mpp_write_2ddecomp_r2d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7188     R(8)            8     2     1        ARG,INOUT        7197,7199                         
 DATA3D                     Local  7197     R(8)            8     3     0                         7201                              
 DEFAULT_DATA               Dummy  7188     R(8)            8           scalar   ARG,IN           7201                              
 DOMAIN                     Dummy  7188     DOMAIN2D        752         scalar   ARG,INOUT        7201                              
 FIELD                      Dummy  7188     FIELDTYPE       1096        scalar   ARG,IN           7201                              
 LOC                        Func   7199                                 scalar                    7199                              
 MPP_WRITE                  Local  7201                                 scalar                    393,7201,7644                     
 MPP_WRITE_2DDECOMP_R2D_R8  Subr   7188                                          PRIV                                               
 PTR                        Local  7198     I(8)            8           scalar   PTR              7199                              
 SIZE                       Func   7197                                 scalar                    7197                              
 TILE_COUNT                 Dummy  7188     I(4)            4           scalar   ARG,IN           7201                              
 TSTAMP                     Dummy  7188     R(8)            8           scalar   ARG,IN           7201                              
 UNIT                       Dummy  7188     I(4)            4           scalar   ARG,IN           7201                              

Page 263         Source Listing                  MPP_WRITE_2DDECOMP_R2D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7204 
   7205     subroutine mpp_write_2ddecomp_r3d_r8( unit, field, domain, data, tstamp, tile_count, default_data)
   7206 !mpp_write writes <data> which has the domain decomposition <domain>
   7207       integer,           intent(in)           :: unit
   7208       type(fieldtype),   intent(in)           :: field
   7209       type(domain2D),    intent(inout)        :: domain
   7210       real(KIND=r8_kind),         intent(inout)        :: data(:,:,:)
   7211       real(KIND=r8_kind),         intent(in), optional :: tstamp
   7212       integer,           intent(in), optional :: tile_count
   7213       real(KIND=r8_kind),         intent(in), optional :: default_data
   7214 
   7215 !cdata is used to store compute domain as contiguous data
   7216 !gdata is used to globalize data for multi-PE single-threaded I/O
   7217       real(KIND=r8_kind), allocatable, dimension(:,:,:) :: cdata, gdata
   7218 !NEW: data may be on compute OR data domain
   7219       logical :: data_has_halos, halos_are_global, x_is_global, y_is_global
   7220       integer :: is, ie, js, je, isd, ied, jsd, jed, isg, ieg, jsg, jeg, ism, iem, jsm, jem
   7221       integer :: position, errunit
   7222       type(domain2d), pointer :: io_domain=>NULL()
   7223 
   7224       call mpp_clock_begin(mpp_write_clock)
   7225 
   7226       errunit = stderr()
   7227       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_WRITE: must first call mpp_io_init.' )
   7228       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_WRITE: invalid unit number.' )
   7229 
   7230       position = field%position
   7231 
   7232       call mpp_get_compute_domain( domain, is,  ie,  js,  je, tile_count=tile_count, position=position  )
   7233       call mpp_get_data_domain   ( domain, isd, ied, jsd, jed, x_is_global=x_is_global, &
   7234                                    y_is_global=y_is_global, tile_count=tile_count, position=position )
   7235       call mpp_get_memory_domain ( domain, ism, iem, jsm, jem, position=position )
   7236 
   7237       if( size(data,1).EQ.ie-is+1 .AND. size(data,2).EQ.je-js+1 )then
   7238           data_has_halos = .FALSE.
   7239       else if( size(data,1).EQ.iem-ism+1 .AND. size(data,2).EQ.jem-jsm+1 )then
   7240           data_has_halos = .TRUE.
   7241       else
   7242           write( errunit,'(a,10i5)' )'MPP_WRITE_2DDECOMP fails on field '//trim(field%name)// &
   7243                ': is,ie,js,je, ism,iem,jsm,jem, size(data,1), size(data,2)=', &
   7244                is,ie,js,je, ism,iem,jsm,jem, size(data,1), size(data,2)
   7245           call mpp_error( FATAL, 'MPP_WRITE: data must be either on compute domain or data domain.' )
   7246       end if
   7247       halos_are_global = x_is_global .AND. y_is_global
   7248       if( npes.GT.1 .AND. mpp_file(unit)%threading.EQ.MPP_SINGLE )then
   7249           if( halos_are_global )then
   7250               call mpp_update_domains( data, domain, position = position )
   7251 !all non-0 PEs have passed their data to PE 0 and may now exit
   7252               if(mpp_file(unit)%write_on_this_pe ) then
   7253                  call write_record_r8( unit, field, size(data(:,:,:)), data, tstamp)
   7254               endif
   7255           else
   7256 !put field onto global domain
   7257               call mpp_get_global_domain ( domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   7258               if(mpp_file(unit)%write_on_this_pe .OR. .NOT. global_field_on_root_pe) then
   7259                   allocate( gdata(isg:ieg,jsg:jeg,size(data,3)) )
   7260               else

Page 264         Source Listing                  MPP_WRITE_2DDECOMP_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7261                   allocate( gdata(1,1,1))
   7262               endif
   7263               if(global_field_on_root_pe) then
   7264                  call mpp_global_field( domain, data, gdata, position = position, &
   7265                                         flags=XUPDATE+YUPDATE+GLOBAL_ROOT_ONLY,   &
   7266                                         default_data=default_data)
   7267               else
   7268                  call mpp_global_field( domain, data, gdata, position = position, &
   7269                                         default_data=default_data)
   7270               endif
   7271 !all non-0 PEs have passed their data to PE 0 and may now exit
   7272               if(mpp_file(unit)%write_on_this_pe ) then
   7273                  call write_record_r8( unit, field, size(gdata(:,:,:)), gdata, tstamp)
   7274               endif
   7275               deallocate(gdata)
   7276           end if
   7277       else if(mpp_file(unit)%io_domain_exist ) then
   7278           if( halos_are_global )then
   7279               call mpp_update_domains( data, domain, position = position )
   7280               if(mpp_file(unit)%write_on_this_pe ) then
   7281                  call write_record_r8( unit, field, size(data(:,:,:)), data, tstamp)
   7282               endif
   7283           else
   7284               io_domain=>mpp_get_io_domain(mpp_file(unit)%domain)
   7285               call mpp_get_global_domain ( io_domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   7286               if(mpp_file(unit)%write_on_this_pe .OR. .NOT. global_field_on_root_pe) then
   7287                  allocate( gdata(isg:ieg,jsg:jeg,size(data,3)) )
   7288               else
   7289                  allocate( gdata(1,1,1))
   7290               endif
   7291               if(global_field_on_root_pe) then
   7292                  call mpp_global_field( io_domain, data, gdata, position = position, &
   7293                                         flags=XUPDATE+YUPDATE+GLOBAL_ROOT_ONLY,      &
   7294                                         default_data=default_data)
   7295               else
   7296                  call mpp_global_field( io_domain, data, gdata, position = position, &
   7297                                         default_data=default_data)
   7298               endif
   7299               io_domain => NULL()
   7300               if(mpp_file(unit)%write_on_this_pe ) then
   7301                  call write_record_r8( unit, field, size(gdata(:,:,:)), gdata, tstamp)
   7302               endif
   7303               deallocate( gdata )
   7304           endif
   7305       else if( data_has_halos )then
   7306 !store compute domain as contiguous data and pass to write_record
   7307           allocate( cdata(is:ie,js:je,size(data,3)) )
   7308           cdata(:,:,:) = data(is-isd+1:ie-isd+1,js-jsd+1:je-jsd+1,:)
   7309           call write_record_r8( unit, field, size(cdata(:,:,:)), cdata, tstamp, domain, tile_count )
   7310       else
   7311 !data is already contiguous
   7312           call write_record_r8( unit, field, size(data(:,:,:)), data, tstamp, domain, tile_count )
   7313       end if
   7314 
   7315       call mpp_clock_end(mpp_write_clock)
   7316 
   7317       return

Page 265         Source Listing                  MPP_WRITE_2DDECOMP_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7318     end subroutine mpp_write_2ddecomp_r3d_r8


ENTRY POINTS

  Name                                                
                                                      
 mpp_io_mod_mp_mpp_write_2ddecomp_r3d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  7217     R(8)            8     3     1        ALC              7307,7308,7309                    
 DATA                       Dummy  7205     R(8)            8     3     1        ARG,INOUT        7237,7239,7244,7250,7253,7259,7264
                                                                                                  ,7268,7279,7281,7287,7292,7296,730
                                                                                                  7,7308,7312                       
 DATA_HAS_HALOS             Local  7219     L(4)            4           scalar                    7238,7240,7305                    
 DEFAULT_DATA               Dummy  7205     R(8)            8           scalar   ARG,IN           7266,7269,7294,7297               
 DOMAIN                     Dummy  7205     DOMAIN2D        752         scalar   ARG,INOUT        7232,7233,7235,7250,7257,7264,7268
                                                                                                  ,7279,7309,7312                   
 ERRUNIT                    Local  7221     I(4)            4           scalar                    7226,7242                         
 FIELD                      Dummy  7205     FIELDTYPE       1096        scalar   ARG,IN           7230,7242,7253,7273,7281,7301,7309
                                                                                                  ,7312                             
 GDATA                      Local  7217     R(8)            8     3     1        ALC              7259,7261,7264,7268,7273,7275,7287
                                                                                                  ,7289,7292,7296,7301,7303         
 GLOBAL_FIELD_ON_ROOT_PE    Local  7258     L(4)            4           scalar                    1061,1068,7258,7263,7286,7291,7373
                                                                                                  ,7378,7401,7406,7701,7706,7729,773
                                                                                                  4,7816,7821,7844,7849             
 GLOBAL_ROOT_ONLY           Param  7265     I(4)            4           scalar   PRIV             331,7265,7293,7380,7408,7708,7736,
                                                                                                  7823,7851                         
 HALOS_ARE_GLOBAL           Local  7219     L(4)            4           scalar                    7247,7249,7278                    
 IE                         Local  7220     I(4)            4           scalar                    7232,7237,7244,7307,7308          
 IED                        Local  7220     I(4)            4           scalar                    7233                              
 IEG                        Local  7220     I(4)            4           scalar                    7257,7259,7285,7287               
 IEM                        Local  7220     I(4)            4           scalar                    7235,7239,7244                    
 IO_DOMAIN                  Local  7222     DOMAIN2D        752         scalar   PTR              7222,7284,7285,7292,7296,7299     
 IS                         Local  7220     I(4)            4           scalar                    7232,7237,7244,7307,7308          
 ISD                        Local  7220     I(4)            4           scalar                    7233,7308                         
 ISG                        Local  7220     I(4)            4           scalar                    7257,7259,7285,7287               
 ISM                        Local  7220     I(4)            4           scalar                    7235,7239,7244                    
 JE                         Local  7220     I(4)            4           scalar                    7232,7237,7244,7307,7308          
 JED                        Local  7220     I(4)            4           scalar                    7233                              
 JEG                        Local  7220     I(4)            4           scalar                    7257,7259,7285,7287               
 JEM                        Local  7220     I(4)            4           scalar                    7235,7239,7244                    
 JS                         Local  7220     I(4)            4           scalar                    7232,7237,7244,7307,7308          
 JSD                        Local  7220     I(4)            4           scalar                    7233,7308                         
 JSG                        Local  7220     I(4)            4           scalar                    7257,7259,7285,7287               
 JSM                        Local  7220     I(4)            4           scalar                    7235,7239,7244                    
 MPP_GLOBAL_FIELD           Local  7264                                 scalar   PRIV             341,7264,7268,7292,7296,7379,7383,
                                                                                                  7407,7411,7707,7711,7735,7739,7822
                                                                                                  ,7826,7850,7854                   
 MPP_GLOBAL_FIELD2D_R8_3D   Subr   7264                                          PRIV             7264,7268,7292,7296               
 MPP_UPDATE_DOMAIN2D_R8_3D  Subr   7250                                          PRIV             7250,7279                         
 MPP_UPDATE_DOMAINS         Local  7250                                 scalar   PRIV             341,7250,7279,7365,7394,7693,7722,
                                                                                                  7808,7837                         

Page 266         Source Listing                  MPP_WRITE_2DDECOMP_R3D_R8
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_write_2Ddecomp.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_WRITE_2DDECOMP_R3D_R8  Subr   7205                                          PRIV             7201                              
 POSITION                   Local  7221     I(4)            4           scalar                    7230,7232,7234,7235,7250,7257,7264
                                                                                                  ,7268,7279,7285,7292,7296         
 SIZE                       Func   7237                                 scalar                    7237,7239,7244,7253,7259,7273,7281
                                                                                                  ,7287,7301,7307,7309,7312         
 TILE_COUNT                 Dummy  7205     I(4)            4           scalar   ARG,IN           7232,7234,7257,7285,7309,7312     
 TRIM                       Func   7242                                 scalar                    7242                              
 TSTAMP                     Dummy  7205     R(8)            8           scalar   ARG,IN           7253,7273,7281,7301,7309,7312     
 UNIT                       Dummy  7205     I(4)            4           scalar   ARG,IN           7228,7248,7252,7253,7258,7272,7273
                                                                                                  ,7277,7280,7281,7284,7286,7300,730
                                                                                                  1,7309,7312                       
 XUPDATE                    Param  7265     I(4)            4           scalar   PRIV             331,7265,7293,7380,7408,7708,7736,
                                                                                                  7823,7851                         
 X_IS_GLOBAL                Local  7219     L(4)            4           scalar                    7233,7247                         
 YUPDATE                    Param  7265     I(4)            4           scalar   PRIV             331,7265,7293,7380,7408,7708,7736,
                                                                                                  7823,7851                         
 Y_IS_GLOBAL                Local  7219     L(4)            4           scalar                    7234,7247                         

Page 267         Source Listing                  MPP_WRITE_2DDECOMP_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7319 
   7320     subroutine mpp_write_2ddecomp_r4d_r8( unit, field, domain, data, tstamp, tile_count, default_data)
   7321 !mpp_write writes <data> which has the domain decomposition <domain>
   7322       integer,           intent(in)           :: unit
   7323       type(fieldtype),   intent(in)           :: field
   7324       type(domain2D),    intent(inout)        :: domain
   7325       real(KIND=r8_kind),         intent(inout)        :: data(:,:,:,:)
   7326       real(KIND=r8_kind),         intent(in), optional :: tstamp
   7327       integer,           intent(in), optional :: tile_count
   7328       real(KIND=r8_kind),         intent(in), optional :: default_data
   7329 
   7330 !cdata is used to store compute domain as contiguous data
   7331 !gdata is used to globalize data for multi-PE single-threaded I/O
   7332       real(KIND=r8_kind), allocatable, dimension(:,:,:,:) :: cdata, gdata
   7333 !NEW: data may be on compute OR data domain
   7334       logical :: data_has_halos, halos_are_global, x_is_global, y_is_global
   7335       integer :: is, ie, js, je, isd, ied, jsd, jed, isg, ieg, jsg, jeg, ism, iem, jsm, jem
   7336       integer :: position, errunit
   7337       type(domain2d), pointer :: io_domain=>NULL()
   7338 
   7339       errunit = stderr()
   7340       call mpp_clock_begin(mpp_write_clock)
   7341 
   7342       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_WRITE: must first call mpp_io_init.' )
   7343       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_WRITE: invalid unit number.' )
   7344 
   7345       position = field%position
   7346 
   7347       call mpp_get_compute_domain( domain, is,  ie,  js,  je, tile_count=tile_count, position=position  )
   7348       call mpp_get_data_domain   ( domain, isd, ied, jsd, jed, x_is_global=x_is_global, &
   7349                                    y_is_global=y_is_global, tile_count=tile_count, position=position )
   7350       call mpp_get_memory_domain ( domain, ism, iem, jsm, jem, position=position )
   7351 
   7352       if( size(data,1).EQ.ie-is+1 .AND. size(data,2).EQ.je-js+1 )then
   7353           data_has_halos = .FALSE.
   7354       else if( size(data,1).EQ.iem-ism+1 .AND. size(data,2).EQ.jem-jsm+1 )then
   7355           data_has_halos = .TRUE.
   7356       else
   7357           write( errunit,'(a,10i5)' )'MPP_WRITE_2DDECOMP fails on field '//trim(field%name)// &
   7358                ': is,ie,js,je, ism,iem,jsm,jem, size(data,1), size(data,2)=', &
   7359                is,ie,js,je, ism,iem,jsm,jem, size(data,1), size(data,2)
   7360           call mpp_error( FATAL, 'MPP_WRITE: data must be either on compute domain or data domain.' )
   7361       end if
   7362       halos_are_global = x_is_global .AND. y_is_global
   7363       if( npes.GT.1 .AND. mpp_file(unit)%threading.EQ.MPP_SINGLE )then
   7364           if( halos_are_global )then
   7365               call mpp_update_domains( data, domain, position = position )
   7366 !all non-0 PEs have passed their data to PE 0 and may now exit
   7367               if(mpp_file(unit)%write_on_this_pe ) then
   7368                  call write_record_r8( unit, field, size(data(:,:,:,:)), data, tstamp)
   7369               endif
   7370           else
   7371 !put field onto global domain
   7372               call mpp_get_global_domain ( domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   7373               if(mpp_file(unit)%write_on_this_pe .OR. .NOT. global_field_on_root_pe) then
   7374                   allocate( gdata(isg:ieg,jsg:jeg,size(data,3),size(data,4)) )
   7375               else

Page 268         Source Listing                  MPP_WRITE_2DDECOMP_R4D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7376                   allocate( gdata(1,1,1,1))
   7377               endif
   7378               if(global_field_on_root_pe) then
   7379                  call mpp_global_field( domain, data, gdata, position = position, &
   7380                                         flags=XUPDATE+YUPDATE+GLOBAL_ROOT_ONLY, &
   7381                                         default_data=default_data)
   7382               else
   7383                  call mpp_global_field( domain, data, gdata, position = position, &
   7384                                         default_data=default_data)
   7385               endif
   7386 !all non-0 PEs have passed their data to PE 0 and may now exit
   7387               if(mpp_file(unit)%write_on_this_pe ) then
   7388                  call write_record_r8( unit, field, size(gdata(:,:,:,:)), gdata, tstamp)
   7389               endif
   7390               deallocate(gdata)
   7391           end if
   7392       else if(mpp_file(unit)%io_domain_exist ) then
   7393           if( halos_are_global )then
   7394               if(npes .GT. 1) call mpp_update_domains( data, domain, position = position )
   7395               if(mpp_file(unit)%write_on_this_pe ) then
   7396                  call write_record_r8( unit, field, size(data(:,:,:,:)), data, tstamp)
   7397               endif
   7398           else
   7399               io_domain=>mpp_get_io_domain(mpp_file(unit)%domain)
   7400               call mpp_get_global_domain ( io_domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   7401               if(mpp_file(unit)%write_on_this_pe .OR. .NOT. global_field_on_root_pe) then
   7402                  allocate( gdata(isg:ieg,jsg:jeg,size(data,3),size(data,4)) )
   7403               else
   7404                  allocate( gdata(1,1,1,1))
   7405               endif
   7406               if(global_field_on_root_pe) then
   7407                  call mpp_global_field( io_domain, data, gdata, position = position, &
   7408                                         flags=XUPDATE+YUPDATE+GLOBAL_ROOT_ONLY,      &
   7409                                         default_data=default_data)
   7410               else
   7411                  call mpp_global_field( io_domain, data, gdata, position = position, &
   7412                                         default_data=default_data)
   7413               endif
   7414               io_domain => NULL()
   7415               if(mpp_file(unit)%write_on_this_pe ) then
   7416                  call write_record_r8( unit, field, size(gdata(:,:,:,:)), gdata, tstamp)
   7417               endif
   7418               deallocate( gdata )
   7419           endif
   7420       else if( data_has_halos )then
   7421 !store compute domain as contiguous data and pass to write_record
   7422           allocate( cdata(is:ie,js:je,size(data,3),size(data,4)) )
   7423           cdata(:,:,:,:) = data(is-isd+1:ie-isd+1,js-jsd+1:je-jsd+1,:,:)
   7424           call write_record_r8( unit, field, size(cdata(:,:,:,:)), cdata, tstamp, domain, tile_count )
   7425       else
   7426 !data is already contiguous
   7427           call write_record_r8( unit, field, size(data(:,:,:,:)), data, tstamp, domain, tile_count )
   7428       end if
   7429 
   7430       call mpp_clock_end(mpp_write_clock)
   7431 
   7432       return

Page 269         Source Listing                  MPP_WRITE_2DDECOMP_R4D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7433     end subroutine mpp_write_2ddecomp_r4d_r8


ENTRY POINTS

  Name                                                
                                                      
 mpp_io_mod_mp_mpp_write_2ddecomp_r4d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  7332     R(8)            8     4     1        ALC              7422,7423,7424                    
 DATA                       Dummy  7320     R(8)            8     4     1        ARG,INOUT        7352,7354,7359,7365,7368,7374,7379
                                                                                                  ,7383,7394,7396,7402,7407,7411,742
                                                                                                  2,7423,7427                       
 DATA_HAS_HALOS             Local  7334     L(4)            4           scalar                    7353,7355,7420                    
 DEFAULT_DATA               Dummy  7320     R(8)            8           scalar   ARG,IN           7381,7384,7409,7412               
 DOMAIN                     Dummy  7320     DOMAIN2D        752         scalar   ARG,INOUT        7347,7348,7350,7365,7372,7379,7383
                                                                                                  ,7394,7424,7427                   
 ERRUNIT                    Local  7336     I(4)            4           scalar                    7339,7357                         
 FIELD                      Dummy  7320     FIELDTYPE       1096        scalar   ARG,IN           7345,7357,7368,7388,7396,7416,7424
                                                                                                  ,7427                             
 GDATA                      Local  7332     R(8)            8     4     1        ALC              7374,7376,7379,7383,7388,7390,7402
                                                                                                  ,7404,7407,7411,7416,7418         
 HALOS_ARE_GLOBAL           Local  7334     L(4)            4           scalar                    7362,7364,7393                    
 IE                         Local  7335     I(4)            4           scalar                    7347,7352,7359,7422,7423          
 IED                        Local  7335     I(4)            4           scalar                    7348                              
 IEG                        Local  7335     I(4)            4           scalar                    7372,7374,7400,7402               
 IEM                        Local  7335     I(4)            4           scalar                    7350,7354,7359                    
 IO_DOMAIN                  Local  7337     DOMAIN2D        752         scalar   PTR              7337,7399,7400,7407,7411,7414     
 IS                         Local  7335     I(4)            4           scalar                    7347,7352,7359,7422,7423          
 ISD                        Local  7335     I(4)            4           scalar                    7348,7423                         
 ISG                        Local  7335     I(4)            4           scalar                    7372,7374,7400,7402               
 ISM                        Local  7335     I(4)            4           scalar                    7350,7354,7359                    
 JE                         Local  7335     I(4)            4           scalar                    7347,7352,7359,7422,7423          
 JED                        Local  7335     I(4)            4           scalar                    7348                              
 JEG                        Local  7335     I(4)            4           scalar                    7372,7374,7400,7402               
 JEM                        Local  7335     I(4)            4           scalar                    7350,7354,7359                    
 JS                         Local  7335     I(4)            4           scalar                    7347,7352,7359,7422,7423          
 JSD                        Local  7335     I(4)            4           scalar                    7348,7423                         
 JSG                        Local  7335     I(4)            4           scalar                    7372,7374,7400,7402               
 JSM                        Local  7335     I(4)            4           scalar                    7350,7354,7359                    
 MPP_GLOBAL_FIELD2D_R8_4D   Subr   7379                                          PRIV             7379,7383,7407,7411               
 MPP_UPDATE_DOMAIN2D_R8_4D  Subr   7365                                          PRIV             7365,7394                         
 MPP_WRITE_2DDECOMP_R4D_R8  Subr   7320                                          PRIV                                               
 POSITION                   Local  7336     I(4)            4           scalar                    7345,7347,7349,7350,7365,7372,7379
                                                                                                  ,7383,7394,7400,7407,7411         
 SIZE                       Func   7352                                 scalar                    7352,7354,7359,7368,7374,7388,7396
                                                                                                  ,7402,7416,7422,7424,7427         
 TILE_COUNT                 Dummy  7320     I(4)            4           scalar   ARG,IN           7347,7349,7372,7400,7424,7427     
 TRIM                       Func   7357                                 scalar                    7357                              
 TSTAMP                     Dummy  7320     R(8)            8           scalar   ARG,IN           7368,7388,7396,7416,7424,7427     
 UNIT                       Dummy  7320     I(4)            4           scalar   ARG,IN           7343,7363,7367,7368,7373,7387,7388
                                                                                                  ,7392,7395,7396,7399,7401,7415,741

Page 270         Source Listing                  MPP_WRITE_2DDECOMP_R4D_R8
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_write_2Ddecomp.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  6,7424,7427                       
 X_IS_GLOBAL                Local  7334     L(4)            4           scalar                    7348,7362                         
 Y_IS_GLOBAL                Local  7334     L(4)            4           scalar                    7349,7362                         

Page 271         Source Listing                  MPP_WRITE_2DDECOMP_R4D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7434 
   7435 # 1111 "../mpp/include/mpp_io_write.inc" 2 
   7436 
   7437 
   7438 
   7439 
   7440 
   7441 
   7442 
   7443 
   7444 
   7445 
   7446 
   7447 # 1 "../mpp/include/mpp_write_2Ddecomp.h" 1 
   7448 !***********************************************************************
   7449 !*                   GNU Lesser General Public License
   7450 !*
   7451 !* This file is part of the GFDL Flexible Modeling System (FMS).
   7452 !*
   7453 !* FMS is free software: you can redistribute it and/or modify it under
   7454 !* the terms of the GNU Lesser General Public License as published by
   7455 !* the Free Software Foundation, either version 3 of the License, or (at
   7456 !* your option) any later version.
   7457 !*
   7458 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   7459 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   7460 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   7461 !* for more details.
   7462 !*
   7463 !* You should have received a copy of the GNU Lesser General Public
   7464 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   7465 !***********************************************************************
   7466     subroutine write_record_r4( unit, field, nwords, data, time_in, domain, tile_count)
   7467 !routine that is finally called by all mpp_write routines to perform the write
   7468 !a non-netCDF record contains:
   7469 !      field ID
   7470 !      a set of 4 coordinates (is:ie,js:je) giving the data subdomain
   7471 !      a timelevel and a timestamp (=NULLTIME if field is static)
   7472 !      3D real data (stored as 1D)
   7473 !if you are using direct access I/O, the RECL argument to OPEN must be large enough for the above
   7474 !in a global direct access file, record position on PE is given by %record.
   7475 
   7476 !Treatment of timestamp:
   7477 !   We assume that static fields have been passed without a timestamp.
   7478 !   Here that is converted into a timestamp of NULLTIME.
   7479 !   For non-netCDF fields, field is treated no differently, but is written
   7480 !   with a timestamp of NULLTIME. There is no check in the code to prevent
   7481 !   the user from repeatedly writing a static field.
   7482 
   7483       integer,           intent(in)           :: unit, nwords
   7484       type(fieldtype),   intent(in)           :: field
   7485       real(KIND=r4_kind),         intent(in)           :: data(nwords)
   7486       real(KIND=r4_kind),         intent(in), optional :: time_in
   7487       type(domain2D),    intent(in), optional :: domain
   7488       integer,           intent(in), optional :: tile_count
   7489       integer, dimension(size(field%axes(:))) :: start, axsiz
   7490       real(r8_kind) :: time

Page 272         Source Listing                  WRITE_RECORD_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7491       integer :: time_level
   7492       logical :: newtime
   7493       integer :: subdomain(4)
   7494       integer :: packed_data(nwords)
   7495       integer :: i, is, ie, js, je
   7496 
   7497       real(r4_kind) :: data_r4(nwords)
   7498       pointer( ptr1, data_r4)
   7499       pointer( ptr2, packed_data)
   7500 
   7501       if (mpp_io_stack_size < nwords) call mpp_io_set_stack_size(nwords)
   7502 
   7503       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_WRITE: must first call mpp_io_init.' )
   7504       if( .NOT.mpp_file(unit)%write_on_this_pe) return
   7505       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE: invalid unit number.' )
   7506       if( .NOT.mpp_file(unit)%initialized )then
   7507 !this is the first call to mpp_write
   7508 !we now declare the file to be initialized
   7509 !if this is netCDF we switch file from DEFINE mode to DATA mode
   7510           if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   7511 
   7512 !NOFILL is probably required for parallel: any circumstances in which not advisable?
   7513               error = NF_SET_FILL( mpp_file(unit)%ncid, NF_NOFILL, i ); call netcdf_err( error, mpp_file(unit) )
   7514               if( mpp_file(unit)%action.EQ.MPP_WRONLY )then
   7515                  if(header_buffer_val>0) then
   7516                     error = NF__ENDDEF(mpp_file(unit)%ncid,header_buffer_val,4,0,4)
   7517                  else
   7518                     error = NF_ENDDEF(mpp_file(unit)%ncid)
   7519                  endif
   7520               endif
   7521               call netcdf_err( error, mpp_file(unit) )
   7522 
   7523           else
   7524               call mpp_write_meta( unit, 'END', cval='metadata' )
   7525           end if
   7526           mpp_file(unit)%initialized = .TRUE.
   7527           if( verbose )print '(a,i6,a)', 'MPP_WRITE: PE=', pe, ' initialized file '//trim(mpp_file(unit)%name)//'.'
   7528       end if
   7529 
   7530 !initialize time: by default assume NULLTIME
   7531       time = NULLTIME
   7532       time_level = -1
   7533       newtime = .FALSE.
   7534       if( PRESENT(time_in) )time = time_in
   7535 !increment time level if new time
   7536       if( time.GT.mpp_file(unit)%time+EPSILON(time) )then !new time
   7537           mpp_file(unit)%time_level = mpp_file(unit)%time_level + 1
   7538           mpp_file(unit)%time = time
   7539           newtime = .TRUE.
   7540       end if
   7541       if( verbose )print '(a,2i6,2i5,es13.5)', 'MPP_WRITE: PE, unit, %id, %time_level, %time=',&
   7542            pe, unit, mpp_file(unit)%id, mpp_file(unit)%time_level, mpp_file(unit)%time
   7543 
   7544       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   7545           ptr2 = LOC(mpp_io_stack(1))
   7546 !define netCDF data block to be written:
   7547 !  time axis: START = time level

Page 273         Source Listing                  WRITE_RECORD_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7548 !             AXSIZ = 1
   7549 !  space axis: if there is no domain info
   7550 !              START = 1
   7551 !              AXSIZ = field%size(axis)
   7552 !          if there IS domain info:
   7553 !              start of domain is compute%start_index for multi-file I/O
   7554 !                                 global%start_index for all other cases
   7555 !              this number must be converted to 1 for NF_PUT_VAR
   7556 !                  (netCDF fortran calls are with reference to 1),
   7557 !          So, START = compute%start_index - <start of domain> + 1
   7558 !              AXSIZ = usually compute%size
   7559 !          However, if compute%start_index-compute%end_index+1.NE.compute%size,
   7560 !              we assume that the call is passing a subdomain.
   7561 !              To pass a subdomain, you must pass a domain2D object that satisfies the following:
   7562 !                  global%start_index must contain the <start of domain> as defined above;
   7563 !                  the data domain and compute domain must refer to the subdomain being passed.
   7564 !              In this case, START = compute%start_index - <start of domain> + 1
   7565 !                            AXSIZ = compute%start_index - compute%end_index + 1
   7566 ! NOTE: passing of subdomains will fail for multi-PE single-threaded I/O,
   7567 !       since that attempts to gather all data on PE 0.
   7568           start = 1
   7569           do i = 1,size(field%axes(:))
   7570              axsiz(i) = field%size(i)
   7571              if( i.EQ.field%time_axis_index )start(i) = mpp_file(unit)%time_level
   7572              start(i) = max(start(i),1)
   7573           end do
   7574 
   7575           if( debug )print '(a,2i6,12i6)', 'WRITE_RECORD: PE, unit, start, axsiz=', pe, unit, start, axsiz
   7576 
   7577 !write time information if new time
   7578           if( newtime )then
   7579               if( KIND(time).EQ.r8_kind )then
   7580                   error = NF_PUT_VAR1_DOUBLE( mpp_file(unit)%ncid, mpp_file(unit)%id, mpp_file(unit:unit)%time_level, time )
   7581               else if( KIND(time).EQ.r4_kind )then
   7582                  error = NF90_PUT_VAR ( mpp_file(unit)%ncid, mpp_file(unit)%id, time)
   7583               end if
   7584           end if
   7585           if( field%pack == 0 )then
   7586               packed_data = CEILING(data)
   7587               error = NF_PUT_VARA_INT   ( mpp_file(unit)%ncid, field%id, start, axsiz, packed_data )
   7588           elseif( field%pack.GT.0 .and. field%pack.LE.2 )then
   7589               error = NF90_PUT_VAR      ( mpp_file(unit)%ncid, field%id, data, start=start, count=axsiz )
   7590           else              !convert to integer using scale and add: no error check on packed data representation
   7591               packed_data = nint((data-field%add)/field%scale)
   7592               error = NF_PUT_VARA_INT   ( mpp_file(unit)%ncid, field%id, start, axsiz, packed_data )
   7593           end if
   7594           call netcdf_err( error, mpp_file(unit), field=field )
   7595 
   7596       else                      !non-netCDF
   7597           ptr1 = LOC(mpp_io_stack(1))
   7598 !subdomain contains (/is,ie,js,je/)
   7599           if( PRESENT(domain) )then
   7600               call mpp_get_compute_domain(domain, is, ie, js, je)
   7601               subdomain(:) = (/ is, ie, js, je /)
   7602           else
   7603               subdomain(:) = -1    ! -1 means use global value from axis metadata
   7604           end if

Page 274         Source Listing                  WRITE_RECORD_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7605           if( mpp_file(unit)%format.EQ.MPP_ASCII )then
   7606 !implies sequential access
   7607               write( unit,* )field%id, subdomain, time_level, time, data
   7608           else                      !MPP_IEEE32 or MPP_NATIVE
   7609               if( mpp_file(unit)%access.EQ.MPP_SEQUENTIAL )then
   7610                   write(unit)field%id, subdomain, time_level, time, data
   7611               else                  !MPP_DIRECT
   7612                   write( unit, rec=mpp_file(unit)%record )field%id, subdomain, time_level, time, data
   7613                   if( debug )print '(a,i6,a,i6)', 'MPP_WRITE: PE=', pe, ' wrote record ', mpp_file(unit)%record
   7614               end if
   7615           end if
   7616       end if
   7617 
   7618 !recompute current record for direct access I/O
   7619       if( mpp_file(unit)%access.EQ.MPP_DIRECT )then
   7620           if( mpp_file(unit)%fileset.EQ.MPP_SINGLE )then
   7621 !assumes all PEs participate in I/O: modify later
   7622               mpp_file(unit)%record = mpp_file(unit)%record + records_per_pe*npes
   7623           else
   7624               mpp_file(unit)%record = mpp_file(unit)%record + records_per_pe
   7625           end if
   7626       end if
   7627 
   7628       return
   7629     end subroutine write_record_r4


ENTRY POINTS

  Name                                      
                                            
 mpp_io_mod_mp_write_record_r4_             

Page 275         Source Listing                  WRITE_RECORD_R4
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_write_2Ddecomp.h



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXSIZ                      Local  7489     I(4)            4     1     0        TGT              7570,7575,7587,7589,7592          
 CEILING                    Func   7586                                 scalar                    7586                              
 DATA                       Dummy  7466     R(4)            4     1     0        ARG,TGT,IN       7586,7589,7591,7607,7610,7612     
 DATA_R4                    Local  7497     R(4)            4     1     0                                                           
 DOMAIN                     Dummy  7466     DOMAIN2D        752         scalar   ARG,IN           7599,7600                         
 EPSILON                    Func   7536                                 scalar                    7536                              
 FIELD                      Dummy  7466     FIELDTYPE       1096        scalar   ARG,IN           7569,7570,7571,7585,7587,7588,7589
                                                                                                  ,7591,7592,7594,7607,7610,7612    
 I                          Local  7495     I(4)            4           scalar                    7513,7569,7570,7571,7572          
 IE                         Local  7495     I(4)            4           scalar                    7600,7601                         
 IS                         Local  7495     I(4)            4           scalar                    7600,7601                         
 JE                         Local  7495     I(4)            4           scalar                    7600,7601                         
 JS                         Local  7495     I(4)            4           scalar                    7600,7601                         
 LOC                        Func   7545                                 scalar                    7545,7597                         
 MAX                        Func   7572                                 scalar                    7572                              
 NEWTIME                    Local  7492     L(4)            4           scalar                    7533,7539,7578                    
 NF90_PUT_VAR_1D_FOURBYTERE                                                                                                         
 AL                         Func   7589     I(4)            4           scalar   PRIV             7589                              
 NINT                       Func   7591                                 scalar                    7591                              
 NWORDS                     Dummy  7466     I(4)            4           scalar   ARG,IN           7485,7494,7497,7501               
 PACKED_DATA                Local  7494     I(4)            4     1     0                         7586,7587,7591,7592               
 PRESENT                    Func   7534                                 scalar                    7534,7599                         
 PTR1                       Local  7498     I(8)            8           scalar   PTR              7597                              
 PTR2                       Local  7499     I(8)            8           scalar   PTR              7545                              
 SIZE                       Func   7569                                 scalar                    7569                              
 START                      Local  7489     I(4)            4     1     0        TGT              7568,7571,7572,7575,7587,7589,7592
 SUBDOMAIN                  Local  7493     I(4)            4     1     4                         7601,7603,7607,7610,7612          
 TILE_COUNT                 Dummy  7466     I(4)            4           scalar   ARG,IN                                             
 TIME                       Local  7490     R(8)            8           scalar                    7531,7534,7536,7538,7579,7580,7581
                                                                                                  ,7582,7607,7610,7612              
 TIME_IN                    Dummy  7466     R(4)            4           scalar   ARG,IN           7534                              
 TIME_LEVEL                 Local  7491     I(4)            4           scalar                    7532,7607,7610,7612               
 TRIM                       Func   7527                                 scalar                    7527                              
 UNIT                       Dummy  7466     I(4)            4           scalar   ARG,IN           7504,7505,7506,7510,7513,7514,7516
                                                                                                  ,7518,7521,7524,7526,7527,7536,753
                                                                                                  7,7538,7542,7544,7571,7575,7580,75
                                                                                                  82,7587,7589,7592,7594,7605,7607,7
                                                                                                  609,7610,7612,7613,7619,7620,7622,
                                                                                                  7624                              
 WRITE_RECORD_R4            Subr   7466                                                           7696,7716,7724,7744,7752,7755,7811
                                                                                                  ,7831,7839,7859,7867,7870,8166,847
                                                                                                  9,8519,8559,8599,8639,9904,10062,1
                                                                                                  0231,10417                        

Page 276         Source Listing                  WRITE_RECORD_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7630 
   7631     subroutine mpp_write_2ddecomp_r2d_r4( unit, field, domain, data, tstamp, tile_count, default_data)
   7632       integer, intent(in) :: unit
   7633       type(fieldtype), intent(in) :: field
   7634       type(domain2D), intent(inout) :: domain
   7635       real(KIND=r4_kind), intent(inout) :: data(:,:)
   7636       real(KIND=r4_kind),              intent(in), optional :: tstamp
   7637       integer,           intent(in), optional :: tile_count
   7638       real(KIND=r4_kind),         intent(in), optional :: default_data
   7639 
   7640       real(KIND=r4_kind) :: data3D(size(data,1),size(data,2),1)
   7641       pointer( ptr, data3D )
   7642       ptr = LOC(data)
   7643 
   7644       call mpp_write( unit, field, domain, data3D, tstamp, tile_count, default_data)
   7645       return
   7646     end subroutine mpp_write_2ddecomp_r2d_r4


ENTRY POINTS

  Name                                                
                                                      
 mpp_io_mod_mp_mpp_write_2ddecomp_r2d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7631     R(4)            4     2     1        ARG,INOUT        7640,7642                         
 DATA3D                     Local  7640     R(4)            4     3     0                         7644                              
 DEFAULT_DATA               Dummy  7631     R(4)            4           scalar   ARG,IN           7644                              
 DOMAIN                     Dummy  7631     DOMAIN2D        752         scalar   ARG,INOUT        7644                              
 FIELD                      Dummy  7631     FIELDTYPE       1096        scalar   ARG,IN           7644                              
 LOC                        Func   7642                                 scalar                    7642                              
 MPP_WRITE_2DDECOMP_R2D_R4  Subr   7631                                          PRIV                                               
 PTR                        Local  7641     I(8)            8           scalar   PTR              7642                              
 SIZE                       Func   7640                                 scalar                    7640                              
 TILE_COUNT                 Dummy  7631     I(4)            4           scalar   ARG,IN           7644                              
 TSTAMP                     Dummy  7631     R(4)            4           scalar   ARG,IN           7644                              
 UNIT                       Dummy  7631     I(4)            4           scalar   ARG,IN           7644                              

Page 277         Source Listing                  MPP_WRITE_2DDECOMP_R2D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7647 
   7648     subroutine mpp_write_2ddecomp_r3d_r4( unit, field, domain, data, tstamp, tile_count, default_data)
   7649 !mpp_write writes <data> which has the domain decomposition <domain>
   7650       integer,           intent(in)           :: unit
   7651       type(fieldtype),   intent(in)           :: field
   7652       type(domain2D),    intent(inout)        :: domain
   7653       real(KIND=r4_kind),         intent(inout)        :: data(:,:,:)
   7654       real(KIND=r4_kind),         intent(in), optional :: tstamp
   7655       integer,           intent(in), optional :: tile_count
   7656       real(KIND=r4_kind),         intent(in), optional :: default_data
   7657 
   7658 !cdata is used to store compute domain as contiguous data
   7659 !gdata is used to globalize data for multi-PE single-threaded I/O
   7660       real(KIND=r4_kind), allocatable, dimension(:,:,:) :: cdata, gdata
   7661 !NEW: data may be on compute OR data domain
   7662       logical :: data_has_halos, halos_are_global, x_is_global, y_is_global
   7663       integer :: is, ie, js, je, isd, ied, jsd, jed, isg, ieg, jsg, jeg, ism, iem, jsm, jem
   7664       integer :: position, errunit
   7665       type(domain2d), pointer :: io_domain=>NULL()
   7666 
   7667       call mpp_clock_begin(mpp_write_clock)
   7668 
   7669       errunit = stderr()
   7670       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_WRITE: must first call mpp_io_init.' )
   7671       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_WRITE: invalid unit number.' )
   7672 
   7673       position = field%position
   7674 
   7675       call mpp_get_compute_domain( domain, is,  ie,  js,  je, tile_count=tile_count, position=position  )
   7676       call mpp_get_data_domain   ( domain, isd, ied, jsd, jed, x_is_global=x_is_global, &
   7677                                    y_is_global=y_is_global, tile_count=tile_count, position=position )
   7678       call mpp_get_memory_domain ( domain, ism, iem, jsm, jem, position=position )
   7679 
   7680       if( size(data,1).EQ.ie-is+1 .AND. size(data,2).EQ.je-js+1 )then
   7681           data_has_halos = .FALSE.
   7682       else if( size(data,1).EQ.iem-ism+1 .AND. size(data,2).EQ.jem-jsm+1 )then
   7683           data_has_halos = .TRUE.
   7684       else
   7685           write( errunit,'(a,10i5)' )'MPP_WRITE_2DDECOMP fails on field '//trim(field%name)// &
   7686                ': is,ie,js,je, ism,iem,jsm,jem, size(data,1), size(data,2)=', &
   7687                is,ie,js,je, ism,iem,jsm,jem, size(data,1), size(data,2)
   7688           call mpp_error( FATAL, 'MPP_WRITE: data must be either on compute domain or data domain.' )
   7689       end if
   7690       halos_are_global = x_is_global .AND. y_is_global
   7691       if( npes.GT.1 .AND. mpp_file(unit)%threading.EQ.MPP_SINGLE )then
   7692           if( halos_are_global )then
   7693               call mpp_update_domains( data, domain, position = position )
   7694 !all non-0 PEs have passed their data to PE 0 and may now exit
   7695               if(mpp_file(unit)%write_on_this_pe ) then
   7696                  call write_record_r4( unit, field, size(data(:,:,:)), data, tstamp)
   7697               endif
   7698           else
   7699 !put field onto global domain
   7700               call mpp_get_global_domain ( domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   7701               if(mpp_file(unit)%write_on_this_pe .OR. .NOT. global_field_on_root_pe) then
   7702                   allocate( gdata(isg:ieg,jsg:jeg,size(data,3)) )
   7703               else

Page 278         Source Listing                  MPP_WRITE_2DDECOMP_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7704                   allocate( gdata(1,1,1))
   7705               endif
   7706               if(global_field_on_root_pe) then
   7707                  call mpp_global_field( domain, data, gdata, position = position, &
   7708                                         flags=XUPDATE+YUPDATE+GLOBAL_ROOT_ONLY,   &
   7709                                         default_data=default_data)
   7710               else
   7711                  call mpp_global_field( domain, data, gdata, position = position, &
   7712                                         default_data=default_data)
   7713               endif
   7714 !all non-0 PEs have passed their data to PE 0 and may now exit
   7715               if(mpp_file(unit)%write_on_this_pe ) then
   7716                  call write_record_r4( unit, field, size(gdata(:,:,:)), gdata, tstamp)
   7717               endif
   7718               deallocate(gdata)
   7719           end if
   7720       else if(mpp_file(unit)%io_domain_exist ) then
   7721           if( halos_are_global )then
   7722               call mpp_update_domains( data, domain, position = position )
   7723               if(mpp_file(unit)%write_on_this_pe ) then
   7724                  call write_record_r4( unit, field, size(data(:,:,:)), data, tstamp)
   7725               endif
   7726           else
   7727               io_domain=>mpp_get_io_domain(mpp_file(unit)%domain)
   7728               call mpp_get_global_domain ( io_domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   7729               if(mpp_file(unit)%write_on_this_pe .OR. .NOT. global_field_on_root_pe) then
   7730                  allocate( gdata(isg:ieg,jsg:jeg,size(data,3)) )
   7731               else
   7732                  allocate( gdata(1,1,1))
   7733               endif
   7734               if(global_field_on_root_pe) then
   7735                  call mpp_global_field( io_domain, data, gdata, position = position, &
   7736                                         flags=XUPDATE+YUPDATE+GLOBAL_ROOT_ONLY,      &
   7737                                         default_data=default_data)
   7738               else
   7739                  call mpp_global_field( io_domain, data, gdata, position = position, &
   7740                                         default_data=default_data)
   7741               endif
   7742               io_domain => NULL()
   7743               if(mpp_file(unit)%write_on_this_pe ) then
   7744                  call write_record_r4( unit, field, size(gdata(:,:,:)), gdata, tstamp)
   7745               endif
   7746               deallocate( gdata )
   7747           endif
   7748       else if( data_has_halos )then
   7749 !store compute domain as contiguous data and pass to write_record
   7750           allocate( cdata(is:ie,js:je,size(data,3)) )
   7751           cdata(:,:,:) = data(is-isd+1:ie-isd+1,js-jsd+1:je-jsd+1,:)
   7752           call write_record_r4( unit, field, size(cdata(:,:,:)), cdata, tstamp, domain, tile_count )
   7753       else
   7754 !data is already contiguous
   7755           call write_record_r4( unit, field, size(data(:,:,:)), data, tstamp, domain, tile_count )
   7756       end if
   7757 
   7758       call mpp_clock_end(mpp_write_clock)
   7759 
   7760       return

Page 279         Source Listing                  MPP_WRITE_2DDECOMP_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7761     end subroutine mpp_write_2ddecomp_r3d_r4


ENTRY POINTS

  Name                                                
                                                      
 mpp_io_mod_mp_mpp_write_2ddecomp_r3d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  7660     R(4)            4     3     1        ALC              7750,7751,7752                    
 DATA                       Dummy  7648     R(4)            4     3     1        ARG,INOUT        7680,7682,7687,7693,7696,7702,7707
                                                                                                  ,7711,7722,7724,7730,7735,7739,775
                                                                                                  0,7751,7755                       
 DATA_HAS_HALOS             Local  7662     L(4)            4           scalar                    7681,7683,7748                    
 DEFAULT_DATA               Dummy  7648     R(4)            4           scalar   ARG,IN           7709,7712,7737,7740               
 DOMAIN                     Dummy  7648     DOMAIN2D        752         scalar   ARG,INOUT        7675,7676,7678,7693,7700,7707,7711
                                                                                                  ,7722,7752,7755                   
 ERRUNIT                    Local  7664     I(4)            4           scalar                    7669,7685                         
 FIELD                      Dummy  7648     FIELDTYPE       1096        scalar   ARG,IN           7673,7685,7696,7716,7724,7744,7752
                                                                                                  ,7755                             
 GDATA                      Local  7660     R(4)            4     3     1        ALC              7702,7704,7707,7711,7716,7718,7730
                                                                                                  ,7732,7735,7739,7744,7746         
 HALOS_ARE_GLOBAL           Local  7662     L(4)            4           scalar                    7690,7692,7721                    
 IE                         Local  7663     I(4)            4           scalar                    7675,7680,7687,7750,7751          
 IED                        Local  7663     I(4)            4           scalar                    7676                              
 IEG                        Local  7663     I(4)            4           scalar                    7700,7702,7728,7730               
 IEM                        Local  7663     I(4)            4           scalar                    7678,7682,7687                    
 IO_DOMAIN                  Local  7665     DOMAIN2D        752         scalar   PTR              7665,7727,7728,7735,7739,7742     
 IS                         Local  7663     I(4)            4           scalar                    7675,7680,7687,7750,7751          
 ISD                        Local  7663     I(4)            4           scalar                    7676,7751                         
 ISG                        Local  7663     I(4)            4           scalar                    7700,7702,7728,7730               
 ISM                        Local  7663     I(4)            4           scalar                    7678,7682,7687                    
 JE                         Local  7663     I(4)            4           scalar                    7675,7680,7687,7750,7751          
 JED                        Local  7663     I(4)            4           scalar                    7676                              
 JEG                        Local  7663     I(4)            4           scalar                    7700,7702,7728,7730               
 JEM                        Local  7663     I(4)            4           scalar                    7678,7682,7687                    
 JS                         Local  7663     I(4)            4           scalar                    7675,7680,7687,7750,7751          
 JSD                        Local  7663     I(4)            4           scalar                    7676,7751                         
 JSG                        Local  7663     I(4)            4           scalar                    7700,7702,7728,7730               
 JSM                        Local  7663     I(4)            4           scalar                    7678,7682,7687                    
 MPP_GLOBAL_FIELD2D_R4_3D   Subr   7707                                          PRIV             7707,7711,7735,7739               
 MPP_UPDATE_DOMAIN2D_R4_3D  Subr   7693                                          PRIV             7693,7722                         
 MPP_WRITE_2DDECOMP_R3D_R4  Subr   7648                                          PRIV             7644                              
 POSITION                   Local  7664     I(4)            4           scalar                    7673,7675,7677,7678,7693,7700,7707
                                                                                                  ,7711,7722,7728,7735,7739         
 SIZE                       Func   7680                                 scalar                    7680,7682,7687,7696,7702,7716,7724
                                                                                                  ,7730,7744,7750,7752,7755         
 TILE_COUNT                 Dummy  7648     I(4)            4           scalar   ARG,IN           7675,7677,7700,7728,7752,7755     
 TRIM                       Func   7685                                 scalar                    7685                              
 TSTAMP                     Dummy  7648     R(4)            4           scalar   ARG,IN           7696,7716,7724,7744,7752,7755     
 UNIT                       Dummy  7648     I(4)            4           scalar   ARG,IN           7671,7691,7695,7696,7701,7715,7716
                                                                                                  ,7720,7723,7724,7727,7729,7743,774

Page 280         Source Listing                  MPP_WRITE_2DDECOMP_R3D_R4
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_write_2Ddecomp.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  4,7752,7755                       
 X_IS_GLOBAL                Local  7662     L(4)            4           scalar                    7676,7690                         
 Y_IS_GLOBAL                Local  7662     L(4)            4           scalar                    7677,7690                         

Page 281         Source Listing                  MPP_WRITE_2DDECOMP_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7762 
   7763     subroutine mpp_write_2ddecomp_r4d_r4( unit, field, domain, data, tstamp, tile_count, default_data)
   7764 !mpp_write writes <data> which has the domain decomposition <domain>
   7765       integer,           intent(in)           :: unit
   7766       type(fieldtype),   intent(in)           :: field
   7767       type(domain2D),    intent(inout)        :: domain
   7768       real(KIND=r4_kind),         intent(inout)        :: data(:,:,:,:)
   7769       real(KIND=r4_kind),         intent(in), optional :: tstamp
   7770       integer,           intent(in), optional :: tile_count
   7771       real(KIND=r4_kind),         intent(in), optional :: default_data
   7772 
   7773 !cdata is used to store compute domain as contiguous data
   7774 !gdata is used to globalize data for multi-PE single-threaded I/O
   7775       real(KIND=r4_kind), allocatable, dimension(:,:,:,:) :: cdata, gdata
   7776 !NEW: data may be on compute OR data domain
   7777       logical :: data_has_halos, halos_are_global, x_is_global, y_is_global
   7778       integer :: is, ie, js, je, isd, ied, jsd, jed, isg, ieg, jsg, jeg, ism, iem, jsm, jem
   7779       integer :: position, errunit
   7780       type(domain2d), pointer :: io_domain=>NULL()
   7781 
   7782       errunit = stderr()
   7783       call mpp_clock_begin(mpp_write_clock)
   7784 
   7785       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_WRITE: must first call mpp_io_init.' )
   7786       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_WRITE: invalid unit number.' )
   7787 
   7788       position = field%position
   7789 
   7790       call mpp_get_compute_domain( domain, is,  ie,  js,  je, tile_count=tile_count, position=position  )
   7791       call mpp_get_data_domain   ( domain, isd, ied, jsd, jed, x_is_global=x_is_global, &
   7792                                    y_is_global=y_is_global, tile_count=tile_count, position=position )
   7793       call mpp_get_memory_domain ( domain, ism, iem, jsm, jem, position=position )
   7794 
   7795       if( size(data,1).EQ.ie-is+1 .AND. size(data,2).EQ.je-js+1 )then
   7796           data_has_halos = .FALSE.
   7797       else if( size(data,1).EQ.iem-ism+1 .AND. size(data,2).EQ.jem-jsm+1 )then
   7798           data_has_halos = .TRUE.
   7799       else
   7800           write( errunit,'(a,10i5)' )'MPP_WRITE_2DDECOMP fails on field '//trim(field%name)// &
   7801                ': is,ie,js,je, ism,iem,jsm,jem, size(data,1), size(data,2)=', &
   7802                is,ie,js,je, ism,iem,jsm,jem, size(data,1), size(data,2)
   7803           call mpp_error( FATAL, 'MPP_WRITE: data must be either on compute domain or data domain.' )
   7804       end if
   7805       halos_are_global = x_is_global .AND. y_is_global
   7806       if( npes.GT.1 .AND. mpp_file(unit)%threading.EQ.MPP_SINGLE )then
   7807           if( halos_are_global )then
   7808               call mpp_update_domains( data, domain, position = position )
   7809 !all non-0 PEs have passed their data to PE 0 and may now exit
   7810               if(mpp_file(unit)%write_on_this_pe ) then
   7811                  call write_record_r4( unit, field, size(data(:,:,:,:)), data, tstamp)
   7812               endif
   7813           else
   7814 !put field onto global domain
   7815               call mpp_get_global_domain ( domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   7816               if(mpp_file(unit)%write_on_this_pe .OR. .NOT. global_field_on_root_pe) then
   7817                   allocate( gdata(isg:ieg,jsg:jeg,size(data,3),size(data,4)) )
   7818               else

Page 282         Source Listing                  MPP_WRITE_2DDECOMP_R4D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7819                   allocate( gdata(1,1,1,1))
   7820               endif
   7821               if(global_field_on_root_pe) then
   7822                  call mpp_global_field( domain, data, gdata, position = position, &
   7823                                         flags=XUPDATE+YUPDATE+GLOBAL_ROOT_ONLY, &
   7824                                         default_data=default_data)
   7825               else
   7826                  call mpp_global_field( domain, data, gdata, position = position, &
   7827                                         default_data=default_data)
   7828               endif
   7829 !all non-0 PEs have passed their data to PE 0 and may now exit
   7830               if(mpp_file(unit)%write_on_this_pe ) then
   7831                  call write_record_r4( unit, field, size(gdata(:,:,:,:)), gdata, tstamp)
   7832               endif
   7833               deallocate(gdata)
   7834           end if
   7835       else if(mpp_file(unit)%io_domain_exist ) then
   7836           if( halos_are_global )then
   7837               if(npes .GT. 1) call mpp_update_domains( data, domain, position = position )
   7838               if(mpp_file(unit)%write_on_this_pe ) then
   7839                  call write_record_r4( unit, field, size(data(:,:,:,:)), data, tstamp)
   7840               endif
   7841           else
   7842               io_domain=>mpp_get_io_domain(mpp_file(unit)%domain)
   7843               call mpp_get_global_domain ( io_domain, isg, ieg, jsg, jeg, tile_count=tile_count, position=position )
   7844               if(mpp_file(unit)%write_on_this_pe .OR. .NOT. global_field_on_root_pe) then
   7845                  allocate( gdata(isg:ieg,jsg:jeg,size(data,3),size(data,4)) )
   7846               else
   7847                  allocate( gdata(1,1,1,1))
   7848               endif
   7849               if(global_field_on_root_pe) then
   7850                  call mpp_global_field( io_domain, data, gdata, position = position, &
   7851                                         flags=XUPDATE+YUPDATE+GLOBAL_ROOT_ONLY,      &
   7852                                         default_data=default_data)
   7853               else
   7854                  call mpp_global_field( io_domain, data, gdata, position = position, &
   7855                                         default_data=default_data)
   7856               endif
   7857               io_domain => NULL()
   7858               if(mpp_file(unit)%write_on_this_pe ) then
   7859                  call write_record_r4( unit, field, size(gdata(:,:,:,:)), gdata, tstamp)
   7860               endif
   7861               deallocate( gdata )
   7862           endif
   7863       else if( data_has_halos )then
   7864 !store compute domain as contiguous data and pass to write_record
   7865           allocate( cdata(is:ie,js:je,size(data,3),size(data,4)) )
   7866           cdata(:,:,:,:) = data(is-isd+1:ie-isd+1,js-jsd+1:je-jsd+1,:,:)
   7867           call write_record_r4( unit, field, size(cdata(:,:,:,:)), cdata, tstamp, domain, tile_count )
   7868       else
   7869 !data is already contiguous
   7870           call write_record_r4( unit, field, size(data(:,:,:,:)), data, tstamp, domain, tile_count )
   7871       end if
   7872 
   7873       call mpp_clock_end(mpp_write_clock)
   7874 
   7875       return

Page 283         Source Listing                  MPP_WRITE_2DDECOMP_R4D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7876     end subroutine mpp_write_2ddecomp_r4d_r4


ENTRY POINTS

  Name                                                
                                                      
 mpp_io_mod_mp_mpp_write_2ddecomp_r4d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  7775     R(4)            4     4     1        ALC              7865,7866,7867                    
 DATA                       Dummy  7763     R(4)            4     4     1        ARG,INOUT        7795,7797,7802,7808,7811,7817,7822
                                                                                                  ,7826,7837,7839,7845,7850,7854,786
                                                                                                  5,7866,7870                       
 DATA_HAS_HALOS             Local  7777     L(4)            4           scalar                    7796,7798,7863                    
 DEFAULT_DATA               Dummy  7763     R(4)            4           scalar   ARG,IN           7824,7827,7852,7855               
 DOMAIN                     Dummy  7763     DOMAIN2D        752         scalar   ARG,INOUT        7790,7791,7793,7808,7815,7822,7826
                                                                                                  ,7837,7867,7870                   
 ERRUNIT                    Local  7779     I(4)            4           scalar                    7782,7800                         
 FIELD                      Dummy  7763     FIELDTYPE       1096        scalar   ARG,IN           7788,7800,7811,7831,7839,7859,7867
                                                                                                  ,7870                             
 GDATA                      Local  7775     R(4)            4     4     1        ALC              7817,7819,7822,7826,7831,7833,7845
                                                                                                  ,7847,7850,7854,7859,7861         
 HALOS_ARE_GLOBAL           Local  7777     L(4)            4           scalar                    7805,7807,7836                    
 IE                         Local  7778     I(4)            4           scalar                    7790,7795,7802,7865,7866          
 IED                        Local  7778     I(4)            4           scalar                    7791                              
 IEG                        Local  7778     I(4)            4           scalar                    7815,7817,7843,7845               
 IEM                        Local  7778     I(4)            4           scalar                    7793,7797,7802                    
 IO_DOMAIN                  Local  7780     DOMAIN2D        752         scalar   PTR              7780,7842,7843,7850,7854,7857     
 IS                         Local  7778     I(4)            4           scalar                    7790,7795,7802,7865,7866          
 ISD                        Local  7778     I(4)            4           scalar                    7791,7866                         
 ISG                        Local  7778     I(4)            4           scalar                    7815,7817,7843,7845               
 ISM                        Local  7778     I(4)            4           scalar                    7793,7797,7802                    
 JE                         Local  7778     I(4)            4           scalar                    7790,7795,7802,7865,7866          
 JED                        Local  7778     I(4)            4           scalar                    7791                              
 JEG                        Local  7778     I(4)            4           scalar                    7815,7817,7843,7845               
 JEM                        Local  7778     I(4)            4           scalar                    7793,7797,7802                    
 JS                         Local  7778     I(4)            4           scalar                    7790,7795,7802,7865,7866          
 JSD                        Local  7778     I(4)            4           scalar                    7791,7866                         
 JSG                        Local  7778     I(4)            4           scalar                    7815,7817,7843,7845               
 JSM                        Local  7778     I(4)            4           scalar                    7793,7797,7802                    
 MPP_GLOBAL_FIELD2D_R4_4D   Subr   7822                                          PRIV             7822,7826,7850,7854               
 MPP_UPDATE_DOMAIN2D_R4_4D  Subr   7808                                          PRIV             7808,7837                         
 MPP_WRITE_2DDECOMP_R4D_R4  Subr   7763                                          PRIV                                               
 POSITION                   Local  7779     I(4)            4           scalar                    7788,7790,7792,7793,7808,7815,7822
                                                                                                  ,7826,7837,7843,7850,7854         
 SIZE                       Func   7795                                 scalar                    7795,7797,7802,7811,7817,7831,7839
                                                                                                  ,7845,7859,7865,7867,7870         
 TILE_COUNT                 Dummy  7763     I(4)            4           scalar   ARG,IN           7790,7792,7815,7843,7867,7870     
 TRIM                       Func   7800                                 scalar                    7800                              
 TSTAMP                     Dummy  7763     R(4)            4           scalar   ARG,IN           7811,7831,7839,7859,7867,7870     
 UNIT                       Dummy  7763     I(4)            4           scalar   ARG,IN           7786,7806,7810,7811,7816,7830,7831
                                                                                                  ,7835,7838,7839,7842,7844,7858,785

Page 284         Source Listing                  MPP_WRITE_2DDECOMP_R4D_R4
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_write_2Ddecomp.h

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  9,7867,7870                       
 X_IS_GLOBAL                Local  7777     L(4)            4           scalar                    7791,7805                         
 Y_IS_GLOBAL                Local  7777     L(4)            4           scalar                    7792,7805                         

Page 285         Source Listing                  MPP_WRITE_2DDECOMP_R4D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_2Ddecomp.h

   7877 
   7878 # 1123 "../mpp/include/mpp_io_write.inc" 2 
   7879 
   7880 
   7881 
   7882 
   7883 
   7884 
   7885 
   7886 
   7887 
   7888 
   7889 
   7890 # 1 "../mpp/include/mpp_write_compressed.h" 1 
   7891 !***********************************************************************
   7892 !*                   GNU Lesser General Public License
   7893 !*
   7894 !* This file is part of the GFDL Flexible Modeling System (FMS).
   7895 !*
   7896 !* FMS is free software: you can redistribute it and/or modify it under
   7897 !* the terms of the GNU Lesser General Public License as published by
   7898 !* the Free Software Foundation, either version 3 of the License, or (at
   7899 !* your option) any later version.
   7900 !*
   7901 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   7902 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   7903 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   7904 !* for more details.
   7905 !*
   7906 !* You should have received a copy of the GNU Lesser General Public
   7907 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   7908 !***********************************************************************
   7909     subroutine mpp_write_compressed_r1d_r8(unit, field, domain, data, nelems_io, tstamp, default_data)
   7910       integer, intent(in) :: unit
   7911       type(fieldtype), intent(inout) :: field
   7912       type(domain2D), intent(inout) :: domain
   7913       real(KIND=r8_kind), intent(inout) :: data(:)
   7914       integer, intent(in) :: nelems_io(:)  ! number of compressed elements
   7915       real(KIND=r8_kind),              intent(in), optional :: tstamp
   7916       real(KIND=r8_kind),         intent(in), optional :: default_data
   7917 
   7918       real(KIND=r8_kind) :: data2D(size(data,1),1)
   7919       pointer( ptr, data2D )
   7920       ptr = LOC(data)
   7921 
   7922       call mpp_write_compressed(unit, field, domain, data2D, nelems_io, tstamp, default_data)
   7923       return
   7924     end subroutine mpp_write_compressed_r1d_r8

Page 286         Source Listing                  MPP_WRITE_COMPRESSED_R1D_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write_compressed.h



ENTRY POINTS

  Name                                                  
                                                        
 mpp_io_mod_mp_mpp_write_compressed_r1d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7909     R(8)            8     1     1        ARG,INOUT        7918,7920                         
 DATA2D                     Local  7918     R(8)            8     2     0                         7922                              
 DEFAULT_DATA               Dummy  7909     R(8)            8           scalar   ARG,IN           7922                              
 DOMAIN                     Dummy  7909     DOMAIN2D        752         scalar   ARG,INOUT        7922                              
 FIELD                      Dummy  7909     FIELDTYPE       1096        scalar   ARG,INOUT        7922                              
 LOC                        Func   7920                                 scalar                    7920                              
 MPP_WRITE_COMPRESSED       Local  7922                                 scalar                    397,7922,7939,8071,8088           
 MPP_WRITE_COMPRESSED_R1D_R                                                                                                         
 8                          Subr   7909                                          PRIV                                               
 NELEMS_IO                  Dummy  7909     I(4)            4     1     1        ARG,IN           7922                              
 PTR                        Local  7919     I(8)            8           scalar   PTR              7920                              
 SIZE                       Func   7918                                 scalar                    7918                              
 TSTAMP                     Dummy  7909     R(8)            8           scalar   ARG,IN           7922                              
 UNIT                       Dummy  7909     I(4)            4           scalar   ARG,IN           7922                              

Page 287         Source Listing                  MPP_WRITE_COMPRESSED_R1D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_compressed.h

   7925 
   7926     subroutine mpp_write_compressed_r3d_r8(unit, field, domain, data, nelems_io, tstamp, default_data)
   7927       integer, intent(in) :: unit
   7928       type(fieldtype), intent(inout) :: field
   7929       type(domain2D), intent(inout) :: domain
   7930       real(KIND=r8_kind), intent(inout) :: data(:,:,:)
   7931       integer, intent(in) :: nelems_io(:)  ! number of compressed elements
   7932       real(KIND=r8_kind),              intent(in), optional :: tstamp
   7933       real(KIND=r8_kind),         intent(in), optional :: default_data
   7934 
   7935       real(KIND=r8_kind) :: data2D(size(data,1),size(data,2)*size(data,3))
   7936       pointer( ptr, data2D )
   7937       ptr = LOC(data)
   7938 
   7939       call mpp_write_compressed(unit, field, domain, data2D, nelems_io, tstamp, default_data)
   7940       return
   7941     end subroutine mpp_write_compressed_r3d_r8


ENTRY POINTS

  Name                                                  
                                                        
 mpp_io_mod_mp_mpp_write_compressed_r3d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  7926     R(8)            8     3     1        ARG,INOUT        7935,7937                         
 DATA2D                     Local  7935     R(8)            8     2     0                         7939                              
 DEFAULT_DATA               Dummy  7926     R(8)            8           scalar   ARG,IN           7939                              
 DOMAIN                     Dummy  7926     DOMAIN2D        752         scalar   ARG,INOUT        7939                              
 FIELD                      Dummy  7926     FIELDTYPE       1096        scalar   ARG,INOUT        7939                              
 LOC                        Func   7937                                 scalar                    7937                              
 MPP_WRITE_COMPRESSED_R3D_R                                                                                                         
 8                          Subr   7926                                          PRIV                                               
 NELEMS_IO                  Dummy  7926     I(4)            4     1     1        ARG,IN           7939                              
 PTR                        Local  7936     I(8)            8           scalar   PTR              7937                              
 SIZE                       Func   7935                                 scalar                    7935                              
 TSTAMP                     Dummy  7926     R(8)            8           scalar   ARG,IN           7939                              
 UNIT                       Dummy  7926     I(4)            4           scalar   ARG,IN           7939                              

Page 288         Source Listing                  MPP_WRITE_COMPRESSED_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_compressed.h

   7942 
   7943     subroutine mpp_write_compressed_r2d_r8(unit, field, domain, data, nelems_io, tstamp, default_data)
   7944       integer,           intent(in)           :: unit
   7945       type(fieldtype),   intent(inout)        :: field
   7946       type(domain2D),    intent(inout)        :: domain
   7947       real(KIND=r8_kind),         intent(inout)        :: data(:,:)
   7948       integer,           intent(in)           :: nelems_io(:)  ! number of compressed elements from each
   7949 ! member of the io_domain. It MUST have the
   7950 ! same order as the io_domain pelist.
   7951       real(KIND=r8_kind),              intent(in), optional :: tstamp
   7952       real(KIND=r8_kind),         intent(in), optional :: default_data
   7953 
   7954 !cdata is used to store the io-domain compressed data
   7955       real(KIND=r8_kind), allocatable, dimension(:,:) :: cdata
   7956       real(KIND=r8_kind), allocatable, dimension(:,:) :: sbuff,rbuff
   7957       real(KIND=r8_kind)                            :: fill
   7958 
   7959       real(KIND=r8_kind) :: sbuff1D(size(data))
   7960       real(KIND=r8_kind) :: rbuff1D(size(data,2)*sum(nelems_io(:)))
   7961       pointer(sptr,sbuff1D); pointer(rptr,rbuff1D)
   7962       integer, allocatable :: pelist(:)
   7963       integer, allocatable :: nz_gather(:)
   7964       integer :: i,j,nz,nelems,mynelems,idx,npes
   7965       type(domain2d), pointer :: io_domain=>NULL()
   7966 
   7967       call mpp_clock_begin(mpp_write_clock)
   7968 
   7969       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_WRITE_COMPRESSED_2D_: must first call mpp_io_init.' )
   7970       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_WRITE_COMPRESSED_2D_: invalid unit number.' )
   7971 
   7972       fill = 0
   7973       if(PRESENT(default_data)) fill = default_data
   7974 
   7975       io_domain=>mpp_get_io_domain(domain)
   7976       if (.not. ASSOCIATED(io_domain)) call mpp_error( FATAL, 'MPP_WRITE_COMPRESSED_2D_: io_domain must be defined.' )
   7977       npes = mpp_get_domain_npes(io_domain)
   7978       allocate(pelist(npes))
   7979       call mpp_get_pelist(io_domain,pelist)
   7980 
   7981       mynelems = size(data,1)
   7982       nz = size(data,2)
   7983       nelems = sum(nelems_io(:))
   7984 ! Check that nz is consistent across all PEs in io_domain
   7985       allocate(nz_gather(npes))
   7986       call mpp_gather((/nz/), nz_gather, pelist)
   7987       if ( mpp_file(unit)%write_on_this_pe.and.maxloc(nz_gather,1).ne.minloc(nz_gather,1) ) then
   7988          call mpp_error( FATAL, 'MPP_WRITE_COMPRESSED_2D_: size(data,2) must be consistent across all PEs in io_domain' )
   7989       end if
   7990       deallocate(nz_gather)
   7991 
   7992       if(mpp_file(unit)%write_on_this_pe ) allocate(rbuff(nz,nelems))
   7993       allocate(sbuff(nz,mynelems))
   7994 
   7995 ! this matrix inversion makes for easy gather to the IO root
   7996 ! and a clear, concise unpack
   7997       do j=1,mynelems
   7998         do i=1,nz

Page 289         Source Listing                  MPP_WRITE_COMPRESSED_R2D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_compressed.h

   7999           sbuff(i,j) = data(j,i)
   8000       enddo; enddo
   8001 
   8002 !  Note that the gatherV implied here is asymmetric; only root needs to know the vector of recv size
   8003       sptr = LOC(sbuff)
   8004       rptr = 0
   8005       if(mpp_file(unit)%write_on_this_pe ) rptr = LOC(rbuff)
   8006       call mpp_gather(sbuff1D,size(sbuff),rbuff1D,nz*nelems_io(:),pelist)
   8007 
   8008       if(mpp_file(unit)%write_on_this_pe ) then
   8009          allocate(cdata(nelems,nz))
   8010          cdata = fill
   8011          do j=1,nz
   8012            do i=1,nelems
   8013              cdata(i,j) = rbuff(j,i)
   8014          enddo; enddo
   8015 ! cludge for now; need resizing accessor
   8016          field%size(1) = nelems
   8017          call write_record_r8( unit, field, nelems*nz, cdata, tstamp)
   8018          deallocate(rbuff,cdata)
   8019       endif
   8020 
   8021       deallocate(sbuff,pelist)
   8022 
   8023       call mpp_clock_end(mpp_write_clock)
   8024 
   8025       return
   8026     end subroutine mpp_write_compressed_r2d_r8

Page 290         Source Listing                  MPP_WRITE_COMPRESSED_R2D_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write_compressed.h



ENTRY POINTS

  Name                                                  
                                                        
 mpp_io_mod_mp_mpp_write_compressed_r2d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7976                                 scalar                    7976                              
 CDATA                      Local  7955     R(8)            8     2     1        ALC              8009,8010,8013,8017,8018          
 DATA                       Dummy  7943     R(8)            8     2     1        ARG,INOUT        7959,7960,7981,7982,7999          
 DEFAULT_DATA               Dummy  7943     R(8)            8           scalar   ARG,IN           7973                              
 DOMAIN                     Dummy  7943     DOMAIN2D        752         scalar   ARG,INOUT        7975                              
 FIELD                      Dummy  7943     FIELDTYPE       1096        scalar   ARG,INOUT        8016,8017                         
 FILL                       Local  7957     R(8)            8           scalar                    7972,7973,8010                    
 I                          Local  7964     I(4)            4           scalar                    7998,7999,8012,8013               
 IDX                        Local  7964     I(4)            4           scalar                                                      
 IO_DOMAIN                  Local  7965     DOMAIN2D        752         scalar   PTR              7965,7975,7976,7977,7979          
 J                          Local  7964     I(4)            4           scalar                    7997,7999,8011,8013               
 LOC                        Func   8003                                 scalar                    8003,8005                         
 MAXLOC                     Func   7987                                 scalar                    7987                              
 MINLOC                     Func   7987                                 scalar                    7987                              
 MPP_GATHER                 Local  7986                                 scalar   PRIV             336,7986,8006,8135,8155,8230,9242,
                                                                                                  9388,9552,9747,9889,10035,10199,10
                                                                                                  394                               
 MPP_GATHER_INT4_1D         Subr   7986                                          PRIV             7986,8135                         
 MPP_GATHER_REAL8_1DV       Subr   8006                                          PRIV             8006,8230,9242,9388,9552,9747     
 MPP_WRITE_COMPRESSED_R2D_R                                                                                                         
 8                          Subr   7943                                          PRIV             7922,7939                         
 MYNELEMS                   Local  7964     I(4)            4           scalar                    7981,7993,7997                    
 NELEMS                     Local  7964     I(4)            4           scalar                    7983,7992,8009,8012,8016,8017     
 NELEMS_IO                  Dummy  7943     I(4)            4     1     1        ARG,IN           7960,7983,8006                    
 NPES                       Local  7964     I(4)            4           scalar                    7977,7978,7985                    
 NZ                         Local  7964     I(4)            4           scalar                    7982,7986,7992,7993,7998,8006,8009
                                                                                                  ,8011,8017                        
 NZ_GATHER                  Local  7963     I(4)            4     1     1        ALC              7985,7986,7987,7990               
 PELIST                     Local  7962     I(4)            4     1     1        ALC              7978,7979,7986,8006,8021          
 PRESENT                    Func   7973                                 scalar                    7973                              
 RBUFF                      Local  7956     R(8)            8     2     1        ALC              7992,8005,8013,8018               
 RBUFF1D                    Local  7960     R(8)            8     1     0                         8006                              
 RPTR                       Local  7961     I(8)            8           scalar   PTR              8004,8005                         
 SBUFF                      Local  7956     R(8)            8     2     1        ALC              7993,7999,8003,8006,8021          
 SBUFF1D                    Local  7959     R(8)            8     1     0                         8006                              
 SIZE                       Func   7959                                 scalar                    7959,7960,7981,7982,8006          
 SPTR                       Local  7961     I(8)            8           scalar   PTR              8003                              
 SUM                        Func   7960                                 scalar                    7960,7983                         
 TSTAMP                     Dummy  7943     R(8)            8           scalar   ARG,IN           8017                              
 UNIT                       Dummy  7943     I(4)            4           scalar   ARG,IN           7970,7987,7992,8005,8008,8017     

Page 291         Source Listing                  MPP_WRITE_COMPRESSED_R2D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write_compressed.h

   8027 # 1135 "../mpp/include/mpp_io_write.inc" 2 
   8028 
   8029 
   8030 
   8031 
   8032 
   8033 
   8034 
   8035 
   8036 
   8037 
   8038 
   8039 # 1 "../mpp/include/mpp_write_compressed.h" 1 
   8040 !***********************************************************************
   8041 !*                   GNU Lesser General Public License
   8042 !*
   8043 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8044 !*
   8045 !* FMS is free software: you can redistribute it and/or modify it under
   8046 !* the terms of the GNU Lesser General Public License as published by
   8047 !* the Free Software Foundation, either version 3 of the License, or (at
   8048 !* your option) any later version.
   8049 !*
   8050 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8051 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8052 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8053 !* for more details.
   8054 !*
   8055 !* You should have received a copy of the GNU Lesser General Public
   8056 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8057 !***********************************************************************
   8058     subroutine mpp_write_compressed_r1d_r4(unit, field, domain, data, nelems_io, tstamp, default_data)
   8059       integer, intent(in) :: unit
   8060       type(fieldtype), intent(inout) :: field
   8061       type(domain2D), intent(inout) :: domain
   8062       real(KIND=r4_kind), intent(inout) :: data(:)
   8063       integer, intent(in) :: nelems_io(:)  ! number of compressed elements
   8064       real(KIND=r4_kind),              intent(in), optional :: tstamp
   8065       real(KIND=r4_kind),         intent(in), optional :: default_data
   8066 
   8067       real(KIND=r4_kind) :: data2D(size(data,1),1)
   8068       pointer( ptr, data2D )
   8069       ptr = LOC(data)
   8070 
   8071       call mpp_write_compressed(unit, field, domain, data2D, nelems_io, tstamp, default_data)
   8072       return
   8073     end subroutine mpp_write_compressed_r1d_r4

Page 292         Source Listing                  MPP_WRITE_COMPRESSED_R1D_R4
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write_compressed.h



ENTRY POINTS

  Name                                                  
                                                        
 mpp_io_mod_mp_mpp_write_compressed_r1d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8058     R(4)            4     1     1        ARG,INOUT        8067,8069                         
 DATA2D                     Local  8067     R(4)            4     2     0                         8071                              
 DEFAULT_DATA               Dummy  8058     R(4)            4           scalar   ARG,IN           8071                              
 DOMAIN                     Dummy  8058     DOMAIN2D        752         scalar   ARG,INOUT        8071                              
 FIELD                      Dummy  8058     FIELDTYPE       1096        scalar   ARG,INOUT        8071                              
 LOC                        Func   8069                                 scalar                    8069                              
 MPP_WRITE_COMPRESSED_R1D_R                                                                                                         
 4                          Subr   8058                                          PRIV                                               
 NELEMS_IO                  Dummy  8058     I(4)            4     1     1        ARG,IN           8071                              
 PTR                        Local  8068     I(8)            8           scalar   PTR              8069                              
 SIZE                       Func   8067                                 scalar                    8067                              
 TSTAMP                     Dummy  8058     R(4)            4           scalar   ARG,IN           8071                              
 UNIT                       Dummy  8058     I(4)            4           scalar   ARG,IN           8071                              

Page 293         Source Listing                  MPP_WRITE_COMPRESSED_R1D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_compressed.h

   8074 
   8075     subroutine mpp_write_compressed_r3d_r4(unit, field, domain, data, nelems_io, tstamp, default_data)
   8076       integer, intent(in) :: unit
   8077       type(fieldtype), intent(inout) :: field
   8078       type(domain2D), intent(inout) :: domain
   8079       real(KIND=r4_kind), intent(inout) :: data(:,:,:)
   8080       integer, intent(in) :: nelems_io(:)  ! number of compressed elements
   8081       real(KIND=r4_kind),              intent(in), optional :: tstamp
   8082       real(KIND=r4_kind),         intent(in), optional :: default_data
   8083 
   8084       real(KIND=r4_kind) :: data2D(size(data,1),size(data,2)*size(data,3))
   8085       pointer( ptr, data2D )
   8086       ptr = LOC(data)
   8087 
   8088       call mpp_write_compressed(unit, field, domain, data2D, nelems_io, tstamp, default_data)
   8089       return
   8090     end subroutine mpp_write_compressed_r3d_r4


ENTRY POINTS

  Name                                                  
                                                        
 mpp_io_mod_mp_mpp_write_compressed_r3d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8075     R(4)            4     3     1        ARG,INOUT        8084,8086                         
 DATA2D                     Local  8084     R(4)            4     2     0                         8088                              
 DEFAULT_DATA               Dummy  8075     R(4)            4           scalar   ARG,IN           8088                              
 DOMAIN                     Dummy  8075     DOMAIN2D        752         scalar   ARG,INOUT        8088                              
 FIELD                      Dummy  8075     FIELDTYPE       1096        scalar   ARG,INOUT        8088                              
 LOC                        Func   8086                                 scalar                    8086                              
 MPP_WRITE_COMPRESSED_R3D_R                                                                                                         
 4                          Subr   8075                                          PRIV                                               
 NELEMS_IO                  Dummy  8075     I(4)            4     1     1        ARG,IN           8088                              
 PTR                        Local  8085     I(8)            8           scalar   PTR              8086                              
 SIZE                       Func   8084                                 scalar                    8084                              
 TSTAMP                     Dummy  8075     R(4)            4           scalar   ARG,IN           8088                              
 UNIT                       Dummy  8075     I(4)            4           scalar   ARG,IN           8088                              

Page 294         Source Listing                  MPP_WRITE_COMPRESSED_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_compressed.h

   8091 
   8092     subroutine mpp_write_compressed_r2d_r4(unit, field, domain, data, nelems_io, tstamp, default_data)
   8093       integer,           intent(in)           :: unit
   8094       type(fieldtype),   intent(inout)        :: field
   8095       type(domain2D),    intent(inout)        :: domain
   8096       real(KIND=r4_kind),         intent(inout)        :: data(:,:)
   8097       integer,           intent(in)           :: nelems_io(:)  ! number of compressed elements from each
   8098 ! member of the io_domain. It MUST have the
   8099 ! same order as the io_domain pelist.
   8100       real(KIND=r4_kind),              intent(in), optional :: tstamp
   8101       real(KIND=r4_kind),         intent(in), optional :: default_data
   8102 
   8103 !cdata is used to store the io-domain compressed data
   8104       real(KIND=r4_kind), allocatable, dimension(:,:) :: cdata
   8105       real(KIND=r4_kind), allocatable, dimension(:,:) :: sbuff,rbuff
   8106       real(KIND=r4_kind)                            :: fill
   8107 
   8108       real(KIND=r4_kind) :: sbuff1D(size(data))
   8109       real(KIND=r4_kind) :: rbuff1D(size(data,2)*sum(nelems_io(:)))
   8110       pointer(sptr,sbuff1D); pointer(rptr,rbuff1D)
   8111       integer, allocatable :: pelist(:)
   8112       integer, allocatable :: nz_gather(:)
   8113       integer :: i,j,nz,nelems,mynelems,idx,npes
   8114       type(domain2d), pointer :: io_domain=>NULL()
   8115 
   8116       call mpp_clock_begin(mpp_write_clock)
   8117 
   8118       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_WRITE_COMPRESSED_2D_: must first call mpp_io_init.' )
   8119       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_WRITE_COMPRESSED_2D_: invalid unit number.' )
   8120 
   8121       fill = 0
   8122       if(PRESENT(default_data)) fill = default_data
   8123 
   8124       io_domain=>mpp_get_io_domain(domain)
   8125       if (.not. ASSOCIATED(io_domain)) call mpp_error( FATAL, 'MPP_WRITE_COMPRESSED_2D_: io_domain must be defined.' )
   8126       npes = mpp_get_domain_npes(io_domain)
   8127       allocate(pelist(npes))
   8128       call mpp_get_pelist(io_domain,pelist)
   8129 
   8130       mynelems = size(data,1)
   8131       nz = size(data,2)
   8132       nelems = sum(nelems_io(:))
   8133 ! Check that nz is consistent across all PEs in io_domain
   8134       allocate(nz_gather(npes))
   8135       call mpp_gather((/nz/), nz_gather, pelist)
   8136       if ( mpp_file(unit)%write_on_this_pe.and.maxloc(nz_gather,1).ne.minloc(nz_gather,1) ) then
   8137          call mpp_error( FATAL, 'MPP_WRITE_COMPRESSED_2D_: size(data,2) must be consistent across all PEs in io_domain' )
   8138       end if
   8139       deallocate(nz_gather)
   8140 
   8141       if(mpp_file(unit)%write_on_this_pe ) allocate(rbuff(nz,nelems))
   8142       allocate(sbuff(nz,mynelems))
   8143 
   8144 ! this matrix inversion makes for easy gather to the IO root
   8145 ! and a clear, concise unpack
   8146       do j=1,mynelems
   8147         do i=1,nz

Page 295         Source Listing                  MPP_WRITE_COMPRESSED_R2D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_compressed.h

   8148           sbuff(i,j) = data(j,i)
   8149       enddo; enddo
   8150 
   8151 !  Note that the gatherV implied here is asymmetric; only root needs to know the vector of recv size
   8152       sptr = LOC(sbuff)
   8153       rptr = 0
   8154       if(mpp_file(unit)%write_on_this_pe ) rptr = LOC(rbuff)
   8155       call mpp_gather(sbuff1D,size(sbuff),rbuff1D,nz*nelems_io(:),pelist)
   8156 
   8157       if(mpp_file(unit)%write_on_this_pe ) then
   8158          allocate(cdata(nelems,nz))
   8159          cdata = fill
   8160          do j=1,nz
   8161            do i=1,nelems
   8162              cdata(i,j) = rbuff(j,i)
   8163          enddo; enddo
   8164 ! cludge for now; need resizing accessor
   8165          field%size(1) = nelems
   8166          call write_record_r4( unit, field, nelems*nz, cdata, tstamp)
   8167          deallocate(rbuff,cdata)
   8168       endif
   8169 
   8170       deallocate(sbuff,pelist)
   8171 
   8172       call mpp_clock_end(mpp_write_clock)
   8173 
   8174       return
   8175     end subroutine mpp_write_compressed_r2d_r4

Page 296         Source Listing                  MPP_WRITE_COMPRESSED_R2D_R4
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write_compressed.h



ENTRY POINTS

  Name                                                  
                                                        
 mpp_io_mod_mp_mpp_write_compressed_r2d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   8125                                 scalar                    8125                              
 CDATA                      Local  8104     R(4)            4     2     1        ALC              8158,8159,8162,8166,8167          
 DATA                       Dummy  8092     R(4)            4     2     1        ARG,INOUT        8108,8109,8130,8131,8148          
 DEFAULT_DATA               Dummy  8092     R(4)            4           scalar   ARG,IN           8122                              
 DOMAIN                     Dummy  8092     DOMAIN2D        752         scalar   ARG,INOUT        8124                              
 FIELD                      Dummy  8092     FIELDTYPE       1096        scalar   ARG,INOUT        8165,8166                         
 FILL                       Local  8106     R(4)            4           scalar                    8121,8122,8159                    
 I                          Local  8113     I(4)            4           scalar                    8147,8148,8161,8162               
 IDX                        Local  8113     I(4)            4           scalar                                                      
 IO_DOMAIN                  Local  8114     DOMAIN2D        752         scalar   PTR              8114,8124,8125,8126,8128          
 J                          Local  8113     I(4)            4           scalar                    8146,8148,8160,8162               
 LOC                        Func   8152                                 scalar                    8152,8154                         
 MAXLOC                     Func   8136                                 scalar                    8136                              
 MINLOC                     Func   8136                                 scalar                    8136                              
 MPP_GATHER_REAL4_1DV       Subr   8155                                          PRIV             8155,9889,10035,10199,10394       
 MPP_WRITE_COMPRESSED_R2D_R                                                                                                         
 4                          Subr   8092                                          PRIV             8071,8088                         
 MYNELEMS                   Local  8113     I(4)            4           scalar                    8130,8142,8146                    
 NELEMS                     Local  8113     I(4)            4           scalar                    8132,8141,8158,8161,8165,8166     
 NELEMS_IO                  Dummy  8092     I(4)            4     1     1        ARG,IN           8109,8132,8155                    
 NPES                       Local  8113     I(4)            4           scalar                    8126,8127,8134                    
 NZ                         Local  8113     I(4)            4           scalar                    8131,8135,8141,8142,8147,8155,8158
                                                                                                  ,8160,8166                        
 NZ_GATHER                  Local  8112     I(4)            4     1     1        ALC              8134,8135,8136,8139               
 PELIST                     Local  8111     I(4)            4     1     1        ALC              8127,8128,8135,8155,8170          
 PRESENT                    Func   8122                                 scalar                    8122                              
 RBUFF                      Local  8105     R(4)            4     2     1        ALC              8141,8154,8162,8167               
 RBUFF1D                    Local  8109     R(4)            4     1     0                         8155                              
 RPTR                       Local  8110     I(8)            8           scalar   PTR              8153,8154                         
 SBUFF                      Local  8105     R(4)            4     2     1        ALC              8142,8148,8152,8155,8170          
 SBUFF1D                    Local  8108     R(4)            4     1     0                         8155                              
 SIZE                       Func   8108                                 scalar                    8108,8109,8130,8131,8155          
 SPTR                       Local  8110     I(8)            8           scalar   PTR              8152                              
 SUM                        Func   8109                                 scalar                    8109,8132                         
 TSTAMP                     Dummy  8092     R(4)            4           scalar   ARG,IN           8166                              
 UNIT                       Dummy  8092     I(4)            4           scalar   ARG,IN           8119,8136,8141,8154,8157,8166     

Page 297         Source Listing                  MPP_WRITE_COMPRESSED_R2D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write_compressed.h

   8176 # 1147 "../mpp/include/mpp_io_write.inc" 2 
   8177 
   8178 
   8179 
   8180 
   8181 
   8182 # 1 "../mpp/include/mpp_write_unlimited_axis.h" 1 
   8183 !***********************************************************************
   8184 !*                   GNU Lesser General Public License
   8185 !*
   8186 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8187 !*
   8188 !* FMS is free software: you can redistribute it and/or modify it under
   8189 !* the terms of the GNU Lesser General Public License as published by
   8190 !* the Free Software Foundation, either version 3 of the License, or (at
   8191 !* your option) any later version.
   8192 !*
   8193 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8194 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8195 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8196 !* for more details.
   8197 !*
   8198 !* You should have received a copy of the GNU Lesser General Public
   8199 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8200 !***********************************************************************
   8201     subroutine mpp_write_unlimited_axis_r1d(unit,field,domain,data,nelems_io)
   8202       integer,           intent(in)           :: unit
   8203       type(fieldtype),   intent(inout)        :: field
   8204       type(domain2D),    intent(inout)        :: domain
   8205       real,         intent(inout)        :: data(:)
   8206       integer,           intent(in)           :: nelems_io(:)  ! number of compressed elements from each
   8207 ! member of the io_domain. It MUST have the
   8208 ! same order as the io_domain pelist.
   8209       integer, allocatable :: pelist(:)
   8210       integer :: i,j,nelems,npes
   8211       type(domain2d), pointer :: io_domain=>NULL()
   8212       real, allocatable, dimension(:) :: rbuff
   8213 
   8214       call mpp_clock_begin(mpp_write_clock)
   8215 
   8216       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_WRITE_UNLIMITED_AXIS_1D_: must first call mpp_io_init.' )
   8217       if( .NOT.mpp_file(unit)%valid )call mpp_error( FATAL, 'MPP_WRITE_UNLIMITED_AXIS_1D_: invalid unit number.' )
   8218 
   8219       io_domain=>mpp_get_io_domain(domain)
   8220       if (.not. ASSOCIATED(io_domain)) call mpp_error( FATAL, 'MPP_WRITE_UNLIMITED_AXIS_1D_: io_domain must be defined.' )
   8221       npes = mpp_get_domain_npes(io_domain)
   8222       allocate(pelist(npes))
   8223       call mpp_get_pelist(io_domain,pelist)
   8224 
   8225       nelems = sum(nelems_io(:))
   8226 
   8227       if(mpp_file(unit)%write_on_this_pe) allocate(rbuff(nelems))
   8228 
   8229 !  Note that the gatherV implied here is asymmetric; only root needs to know the vector of recv size
   8230       call mpp_gather(data,size(data),rbuff,nelems_io(:),pelist)
   8231 
   8232       if(mpp_file(unit)%write_on_this_pe) then

Page 298         Source Listing                  MPP_WRITE_UNLIMITED_AXIS_R1D
2021-06-01 08:53                                 ../mpp/include/mpp_write_unlimited_axis.h

   8233          field%size(1) = nelems  ! Correct the field size now that we have all the data
   8234          call write_record(unit, field, nelems, rbuff)
   8235          deallocate(rbuff)
   8236       endif
   8237       deallocate(pelist)
   8238 
   8239       call mpp_clock_end(mpp_write_clock)
   8240       return
   8241     end subroutine mpp_write_unlimited_axis_r1d


ENTRY POINTS

  Name                                                   
                                                         
 mpp_io_mod_mp_mpp_write_unlimited_axis_r1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   8220                                 scalar                    8220                              
 DATA                       Dummy  8201     R(8)            8     1     1        ARG,INOUT        8230                              
 DOMAIN                     Dummy  8201     DOMAIN2D        752         scalar   ARG,INOUT        8219                              
 FIELD                      Dummy  8201     FIELDTYPE       1096        scalar   ARG,INOUT        8233,8234                         
 I                          Local  8210     I(4)            4           scalar                                                      
 IO_DOMAIN                  Local  8211     DOMAIN2D        752         scalar   PTR              8211,8219,8220,8221,8223          
 J                          Local  8210     I(4)            4           scalar                                                      
 MPP_WRITE_UNLIMITED_AXIS_R                                                                                                         
 1D                         Subr   8201                                          PRIV                                               
 NELEMS                     Local  8210     I(4)            4           scalar                    8225,8227,8233,8234               
 NELEMS_IO                  Dummy  8201     I(4)            4     1     1        ARG,IN           8225,8230                         
 NPES                       Local  8210     I(4)            4           scalar                    8221,8222                         
 PELIST                     Local  8209     I(4)            4     1     1        ALC              8222,8223,8230,8237               
 RBUFF                      Local  8212     R(8)            8     1     1        ALC              8227,8230,8234,8235               
 SIZE                       Func   8230                                 scalar                    8230                              
 SUM                        Func   8225                                 scalar                    8225                              
 UNIT                       Dummy  8201     I(4)            4           scalar   ARG,IN           8217,8227,8232,8234               
 WRITE_RECORD               Local  8234                                 scalar                    8234,8671,8676                    

Page 299         Source Listing                  MPP_WRITE_UNLIMITED_AXIS_R1D
2021-06-01 08:53                                 ../mpp/include/mpp_write_unlimited_axis.h

   8242 # 1153 "../mpp/include/mpp_io_write.inc" 2 
   8243 
   8244 
   8245 
   8246 
   8247 
   8248 
   8249 
   8250 
   8251 
   8252 # 1 "../mpp/include/mpp_write.h" 1 
   8253 !***********************************************************************
   8254 !*                   GNU Lesser General Public License
   8255 !*
   8256 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8257 !*
   8258 !* FMS is free software: you can redistribute it and/or modify it under
   8259 !* the terms of the GNU Lesser General Public License as published by
   8260 !* the Free Software Foundation, either version 3 of the License, or (at
   8261 !* your option) any later version.
   8262 !*
   8263 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8264 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8265 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8266 !* for more details.
   8267 !*
   8268 !* You should have received a copy of the GNU Lesser General Public
   8269 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8270 !***********************************************************************
   8271 subroutine mpp_write_r0D_r8( unit, field, data, tstamp)
   8272       use mpp_parameter_mod, only : NULLUNIT
   8273       integer, intent(in) :: unit
   8274       type(fieldtype), intent(in) :: field
   8275       real(KIND=r8_kind), intent(in) :: data 
   8276       real(KIND=r8_kind), intent(in), optional :: tstamp
   8277 
   8278       if (unit == NULLUNIT) return
   8279       call write_record_r8( unit, field, 1, (/data/), tstamp)
   8280       return
   8281     end subroutine mpp_write_r0D_r8

Page 300         Source Listing                  MPP_WRITE_R0D_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write.h



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_write_r0d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8271     R(8)            8           scalar   ARG,IN           8279                              
 FIELD                      Dummy  8271     FIELDTYPE       1096        scalar   ARG,IN           8279                              
 MPP_PARAMETER_MOD          Module 8272                                                           8272                              
 MPP_WRITE_R0D_R8           Subr   8271                                          PRIV                                               
 NULLUNIT                   Param  8272     I(4)            4           scalar                    8272,8278                         
 TSTAMP                     Dummy  8271     R(8)            8           scalar   ARG,IN           8279                              
 UNIT                       Dummy  8271     I(4)            4           scalar   ARG,IN           8278,8279                         

Page 301         Source Listing                  MPP_WRITE_R0D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write.h

   8282 # 1163 "../mpp/include/mpp_io_write.inc" 2 
   8283 
   8284 
   8285 
   8286 
   8287 
   8288 
   8289 
   8290 
   8291 
   8292 # 1 "../mpp/include/mpp_write.h" 1 
   8293 !***********************************************************************
   8294 !*                   GNU Lesser General Public License
   8295 !*
   8296 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8297 !*
   8298 !* FMS is free software: you can redistribute it and/or modify it under
   8299 !* the terms of the GNU Lesser General Public License as published by
   8300 !* the Free Software Foundation, either version 3 of the License, or (at
   8301 !* your option) any later version.
   8302 !*
   8303 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8304 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8305 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8306 !* for more details.
   8307 !*
   8308 !* You should have received a copy of the GNU Lesser General Public
   8309 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8310 !***********************************************************************
   8311 subroutine mpp_write_r1D_r8( unit, field, data, tstamp)
   8312       use mpp_parameter_mod, only : NULLUNIT
   8313       integer, intent(in) :: unit
   8314       type(fieldtype), intent(in) :: field
   8315       real(KIND=r8_kind), intent(in) :: data (:)
   8316       real(KIND=r8_kind), intent(in), optional :: tstamp
   8317 
   8318       if (unit == NULLUNIT) return
   8319       call write_record_r8( unit, field, size(data(:)), data, tstamp)
   8320       return
   8321     end subroutine mpp_write_r1D_r8

Page 302         Source Listing                  MPP_WRITE_R1D_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write.h



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_write_r1d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8311     R(8)            8     1     1        ARG,IN           8319                              
 FIELD                      Dummy  8311     FIELDTYPE       1096        scalar   ARG,IN           8319                              
 MPP_PARAMETER_MOD          Module 8312                                                           8312                              
 MPP_WRITE_R1D_R8           Subr   8311                                          PRIV                                               
 NULLUNIT                   Param  8312     I(4)            4           scalar                    8312,8318                         
 SIZE                       Func   8319                                 scalar                    8319                              
 TSTAMP                     Dummy  8311     R(8)            8           scalar   ARG,IN           8319                              
 UNIT                       Dummy  8311     I(4)            4           scalar   ARG,IN           8318,8319                         

Page 303         Source Listing                  MPP_WRITE_R1D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write.h

   8322 # 1173 "../mpp/include/mpp_io_write.inc" 2 
   8323 
   8324 
   8325 
   8326 
   8327 
   8328 
   8329 
   8330 
   8331 
   8332 # 1 "../mpp/include/mpp_write.h" 1 
   8333 !***********************************************************************
   8334 !*                   GNU Lesser General Public License
   8335 !*
   8336 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8337 !*
   8338 !* FMS is free software: you can redistribute it and/or modify it under
   8339 !* the terms of the GNU Lesser General Public License as published by
   8340 !* the Free Software Foundation, either version 3 of the License, or (at
   8341 !* your option) any later version.
   8342 !*
   8343 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8344 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8345 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8346 !* for more details.
   8347 !*
   8348 !* You should have received a copy of the GNU Lesser General Public
   8349 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8350 !***********************************************************************
   8351 subroutine mpp_write_r2D_r8( unit, field, data, tstamp)
   8352       use mpp_parameter_mod, only : NULLUNIT
   8353       integer, intent(in) :: unit
   8354       type(fieldtype), intent(in) :: field
   8355       real(KIND=r8_kind), intent(in) :: data (:,:)
   8356       real(KIND=r8_kind), intent(in), optional :: tstamp
   8357 
   8358       if (unit == NULLUNIT) return
   8359       call write_record_r8( unit, field, size(data(:,:)), data, tstamp )
   8360       return
   8361     end subroutine mpp_write_r2D_r8

Page 304         Source Listing                  MPP_WRITE_R2D_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write.h



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_write_r2d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8351     R(8)            8     2     1        ARG,IN           8359                              
 FIELD                      Dummy  8351     FIELDTYPE       1096        scalar   ARG,IN           8359                              
 MPP_PARAMETER_MOD          Module 8352                                                           8352                              
 MPP_WRITE_R2D_R8           Subr   8351                                          PRIV                                               
 NULLUNIT                   Param  8352     I(4)            4           scalar                    8352,8358                         
 SIZE                       Func   8359                                 scalar                    8359                              
 TSTAMP                     Dummy  8351     R(8)            8           scalar   ARG,IN           8359                              
 UNIT                       Dummy  8351     I(4)            4           scalar   ARG,IN           8358,8359                         

Page 305         Source Listing                  MPP_WRITE_R2D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write.h

   8362 # 1183 "../mpp/include/mpp_io_write.inc" 2 
   8363 
   8364 
   8365 
   8366 
   8367 
   8368 
   8369 
   8370 
   8371 
   8372 # 1 "../mpp/include/mpp_write.h" 1 
   8373 !***********************************************************************
   8374 !*                   GNU Lesser General Public License
   8375 !*
   8376 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8377 !*
   8378 !* FMS is free software: you can redistribute it and/or modify it under
   8379 !* the terms of the GNU Lesser General Public License as published by
   8380 !* the Free Software Foundation, either version 3 of the License, or (at
   8381 !* your option) any later version.
   8382 !*
   8383 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8384 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8385 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8386 !* for more details.
   8387 !*
   8388 !* You should have received a copy of the GNU Lesser General Public
   8389 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8390 !***********************************************************************
   8391 subroutine mpp_write_r3D_r8( unit, field, data, tstamp)
   8392       use mpp_parameter_mod, only : NULLUNIT
   8393       integer, intent(in) :: unit
   8394       type(fieldtype), intent(in) :: field
   8395       real(KIND=r8_kind), intent(in) :: data (:,:,:)
   8396       real(KIND=r8_kind), intent(in), optional :: tstamp
   8397 
   8398       if (unit == NULLUNIT) return
   8399       call write_record_r8( unit, field, size(data(:,:,:)), data, tstamp)
   8400       return
   8401     end subroutine mpp_write_r3D_r8

Page 306         Source Listing                  MPP_WRITE_R3D_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write.h



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_write_r3d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8391     R(8)            8     3     1        ARG,IN           8399                              
 FIELD                      Dummy  8391     FIELDTYPE       1096        scalar   ARG,IN           8399                              
 MPP_PARAMETER_MOD          Module 8392                                                           8392                              
 MPP_WRITE_R3D_R8           Subr   8391                                          PRIV                                               
 NULLUNIT                   Param  8392     I(4)            4           scalar                    8392,8398                         
 SIZE                       Func   8399                                 scalar                    8399                              
 TSTAMP                     Dummy  8391     R(8)            8           scalar   ARG,IN           8399                              
 UNIT                       Dummy  8391     I(4)            4           scalar   ARG,IN           8398,8399                         

Page 307         Source Listing                  MPP_WRITE_R3D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write.h

   8402 # 1193 "../mpp/include/mpp_io_write.inc" 2 
   8403 
   8404 
   8405 
   8406 
   8407 
   8408 
   8409 
   8410 
   8411 
   8412 # 1 "../mpp/include/mpp_write.h" 1 
   8413 !***********************************************************************
   8414 !*                   GNU Lesser General Public License
   8415 !*
   8416 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8417 !*
   8418 !* FMS is free software: you can redistribute it and/or modify it under
   8419 !* the terms of the GNU Lesser General Public License as published by
   8420 !* the Free Software Foundation, either version 3 of the License, or (at
   8421 !* your option) any later version.
   8422 !*
   8423 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8424 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8425 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8426 !* for more details.
   8427 !*
   8428 !* You should have received a copy of the GNU Lesser General Public
   8429 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8430 !***********************************************************************
   8431 subroutine mpp_write_r4D_r8( unit, field, data, tstamp)
   8432       use mpp_parameter_mod, only : NULLUNIT
   8433       integer, intent(in) :: unit
   8434       type(fieldtype), intent(in) :: field
   8435       real(KIND=r8_kind), intent(in) :: data (:,:,:,:)
   8436       real(KIND=r8_kind), intent(in), optional :: tstamp
   8437 
   8438       if (unit == NULLUNIT) return
   8439       call write_record_r8( unit, field, size(data(:,:,:,:)), data, tstamp)
   8440       return
   8441     end subroutine mpp_write_r4D_r8

Page 308         Source Listing                  MPP_WRITE_R4D_R8
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write.h



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_write_r4d_r8_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8431     R(8)            8     4     1        ARG,IN           8439                              
 FIELD                      Dummy  8431     FIELDTYPE       1096        scalar   ARG,IN           8439                              
 MPP_PARAMETER_MOD          Module 8432                                                           8432                              
 MPP_WRITE_R4D_R8           Subr   8431                                          PRIV                                               
 NULLUNIT                   Param  8432     I(4)            4           scalar                    8432,8438                         
 SIZE                       Func   8439                                 scalar                    8439                              
 TSTAMP                     Dummy  8431     R(8)            8           scalar   ARG,IN           8439                              
 UNIT                       Dummy  8431     I(4)            4           scalar   ARG,IN           8438,8439                         

Page 309         Source Listing                  MPP_WRITE_R4D_R8
2021-06-01 08:53                                 ../mpp/include/mpp_write.h

   8442 # 1203 "../mpp/include/mpp_io_write.inc" 2 
   8443 
   8444 
   8445 
   8446 
   8447 
   8448 
   8449 
   8450 
   8451 
   8452 # 1 "../mpp/include/mpp_write.h" 1 
   8453 !***********************************************************************
   8454 !*                   GNU Lesser General Public License
   8455 !*
   8456 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8457 !*
   8458 !* FMS is free software: you can redistribute it and/or modify it under
   8459 !* the terms of the GNU Lesser General Public License as published by
   8460 !* the Free Software Foundation, either version 3 of the License, or (at
   8461 !* your option) any later version.
   8462 !*
   8463 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8464 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8465 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8466 !* for more details.
   8467 !*
   8468 !* You should have received a copy of the GNU Lesser General Public
   8469 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8470 !***********************************************************************
   8471 subroutine mpp_write_r0D_r4( unit, field, data, tstamp)
   8472       use mpp_parameter_mod, only : NULLUNIT
   8473       integer, intent(in) :: unit
   8474       type(fieldtype), intent(in) :: field
   8475       real(KIND=r4_kind), intent(in) :: data 
   8476       real(KIND=r4_kind), intent(in), optional :: tstamp
   8477 
   8478       if (unit == NULLUNIT) return
   8479       call write_record_r4( unit, field, 1, (/data/), tstamp)
   8480       return
   8481     end subroutine mpp_write_r0D_r4

Page 310         Source Listing                  MPP_WRITE_R0D_R4
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write.h



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_write_r0d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8471     R(4)            4           scalar   ARG,IN           8479                              
 FIELD                      Dummy  8471     FIELDTYPE       1096        scalar   ARG,IN           8479                              
 MPP_PARAMETER_MOD          Module 8472                                                           8472                              
 MPP_WRITE_R0D_R4           Subr   8471                                          PRIV                                               
 NULLUNIT                   Param  8472     I(4)            4           scalar                    8472,8478                         
 TSTAMP                     Dummy  8471     R(4)            4           scalar   ARG,IN           8479                              
 UNIT                       Dummy  8471     I(4)            4           scalar   ARG,IN           8478,8479                         

Page 311         Source Listing                  MPP_WRITE_R0D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write.h

   8482 # 1213 "../mpp/include/mpp_io_write.inc" 2 
   8483 
   8484 
   8485 
   8486 
   8487 
   8488 
   8489 
   8490 
   8491 
   8492 # 1 "../mpp/include/mpp_write.h" 1 
   8493 !***********************************************************************
   8494 !*                   GNU Lesser General Public License
   8495 !*
   8496 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8497 !*
   8498 !* FMS is free software: you can redistribute it and/or modify it under
   8499 !* the terms of the GNU Lesser General Public License as published by
   8500 !* the Free Software Foundation, either version 3 of the License, or (at
   8501 !* your option) any later version.
   8502 !*
   8503 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8504 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8505 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8506 !* for more details.
   8507 !*
   8508 !* You should have received a copy of the GNU Lesser General Public
   8509 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8510 !***********************************************************************
   8511 subroutine mpp_write_r1D_r4( unit, field, data, tstamp)
   8512       use mpp_parameter_mod, only : NULLUNIT
   8513       integer, intent(in) :: unit
   8514       type(fieldtype), intent(in) :: field
   8515       real(KIND=r4_kind), intent(in) :: data (:)
   8516       real(KIND=r4_kind), intent(in), optional :: tstamp
   8517 
   8518       if (unit == NULLUNIT) return
   8519       call write_record_r4( unit, field, size(data(:)), data, tstamp)
   8520       return
   8521     end subroutine mpp_write_r1D_r4

Page 312         Source Listing                  MPP_WRITE_R1D_R4
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write.h



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_write_r1d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8511     R(4)            4     1     1        ARG,IN           8519                              
 FIELD                      Dummy  8511     FIELDTYPE       1096        scalar   ARG,IN           8519                              
 MPP_PARAMETER_MOD          Module 8512                                                           8512                              
 MPP_WRITE_R1D_R4           Subr   8511                                          PRIV                                               
 NULLUNIT                   Param  8512     I(4)            4           scalar                    8512,8518                         
 SIZE                       Func   8519                                 scalar                    8519                              
 TSTAMP                     Dummy  8511     R(4)            4           scalar   ARG,IN           8519                              
 UNIT                       Dummy  8511     I(4)            4           scalar   ARG,IN           8518,8519                         

Page 313         Source Listing                  MPP_WRITE_R1D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write.h

   8522 # 1223 "../mpp/include/mpp_io_write.inc" 2 
   8523 
   8524 
   8525 
   8526 
   8527 
   8528 
   8529 
   8530 
   8531 
   8532 # 1 "../mpp/include/mpp_write.h" 1 
   8533 !***********************************************************************
   8534 !*                   GNU Lesser General Public License
   8535 !*
   8536 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8537 !*
   8538 !* FMS is free software: you can redistribute it and/or modify it under
   8539 !* the terms of the GNU Lesser General Public License as published by
   8540 !* the Free Software Foundation, either version 3 of the License, or (at
   8541 !* your option) any later version.
   8542 !*
   8543 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8544 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8545 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8546 !* for more details.
   8547 !*
   8548 !* You should have received a copy of the GNU Lesser General Public
   8549 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8550 !***********************************************************************
   8551 subroutine mpp_write_r2D_r4( unit, field, data, tstamp)
   8552       use mpp_parameter_mod, only : NULLUNIT
   8553       integer, intent(in) :: unit
   8554       type(fieldtype), intent(in) :: field
   8555       real(KIND=r4_kind), intent(in) :: data (:,:)
   8556       real(KIND=r4_kind), intent(in), optional :: tstamp
   8557 
   8558       if (unit == NULLUNIT) return
   8559       call write_record_r4( unit, field, size(data(:,:)), data, tstamp )
   8560       return
   8561     end subroutine mpp_write_r2D_r4

Page 314         Source Listing                  MPP_WRITE_R2D_R4
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write.h



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_write_r2d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8551     R(4)            4     2     1        ARG,IN           8559                              
 FIELD                      Dummy  8551     FIELDTYPE       1096        scalar   ARG,IN           8559                              
 MPP_PARAMETER_MOD          Module 8552                                                           8552                              
 MPP_WRITE_R2D_R4           Subr   8551                                          PRIV                                               
 NULLUNIT                   Param  8552     I(4)            4           scalar                    8552,8558                         
 SIZE                       Func   8559                                 scalar                    8559                              
 TSTAMP                     Dummy  8551     R(4)            4           scalar   ARG,IN           8559                              
 UNIT                       Dummy  8551     I(4)            4           scalar   ARG,IN           8558,8559                         

Page 315         Source Listing                  MPP_WRITE_R2D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write.h

   8562 # 1233 "../mpp/include/mpp_io_write.inc" 2 
   8563 
   8564 
   8565 
   8566 
   8567 
   8568 
   8569 
   8570 
   8571 
   8572 # 1 "../mpp/include/mpp_write.h" 1 
   8573 !***********************************************************************
   8574 !*                   GNU Lesser General Public License
   8575 !*
   8576 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8577 !*
   8578 !* FMS is free software: you can redistribute it and/or modify it under
   8579 !* the terms of the GNU Lesser General Public License as published by
   8580 !* the Free Software Foundation, either version 3 of the License, or (at
   8581 !* your option) any later version.
   8582 !*
   8583 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8584 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8585 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8586 !* for more details.
   8587 !*
   8588 !* You should have received a copy of the GNU Lesser General Public
   8589 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8590 !***********************************************************************
   8591 subroutine mpp_write_r3D_r4( unit, field, data, tstamp)
   8592       use mpp_parameter_mod, only : NULLUNIT
   8593       integer, intent(in) :: unit
   8594       type(fieldtype), intent(in) :: field
   8595       real(KIND=r4_kind), intent(in) :: data (:,:,:)
   8596       real(KIND=r4_kind), intent(in), optional :: tstamp
   8597 
   8598       if (unit == NULLUNIT) return
   8599       call write_record_r4( unit, field, size(data(:,:,:)), data, tstamp)
   8600       return
   8601     end subroutine mpp_write_r3D_r4

Page 316         Source Listing                  MPP_WRITE_R3D_R4
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write.h



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_write_r3d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8591     R(4)            4     3     1        ARG,IN           8599                              
 FIELD                      Dummy  8591     FIELDTYPE       1096        scalar   ARG,IN           8599                              
 MPP_PARAMETER_MOD          Module 8592                                                           8592                              
 MPP_WRITE_R3D_R4           Subr   8591                                          PRIV                                               
 NULLUNIT                   Param  8592     I(4)            4           scalar                    8592,8598                         
 SIZE                       Func   8599                                 scalar                    8599                              
 TSTAMP                     Dummy  8591     R(4)            4           scalar   ARG,IN           8599                              
 UNIT                       Dummy  8591     I(4)            4           scalar   ARG,IN           8598,8599                         

Page 317         Source Listing                  MPP_WRITE_R3D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write.h

   8602 # 1243 "../mpp/include/mpp_io_write.inc" 2 
   8603 
   8604 
   8605 
   8606 
   8607 
   8608 
   8609 
   8610 
   8611 
   8612 # 1 "../mpp/include/mpp_write.h" 1 
   8613 !***********************************************************************
   8614 !*                   GNU Lesser General Public License
   8615 !*
   8616 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8617 !*
   8618 !* FMS is free software: you can redistribute it and/or modify it under
   8619 !* the terms of the GNU Lesser General Public License as published by
   8620 !* the Free Software Foundation, either version 3 of the License, or (at
   8621 !* your option) any later version.
   8622 !*
   8623 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8624 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8625 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8626 !* for more details.
   8627 !*
   8628 !* You should have received a copy of the GNU Lesser General Public
   8629 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8630 !***********************************************************************
   8631 subroutine mpp_write_r4D_r4( unit, field, data, tstamp)
   8632       use mpp_parameter_mod, only : NULLUNIT
   8633       integer, intent(in) :: unit
   8634       type(fieldtype), intent(in) :: field
   8635       real(KIND=r4_kind), intent(in) :: data (:,:,:,:)
   8636       real(KIND=r4_kind), intent(in), optional :: tstamp
   8637 
   8638       if (unit == NULLUNIT) return
   8639       call write_record_r4( unit, field, size(data(:,:,:,:)), data, tstamp)
   8640       return
   8641     end subroutine mpp_write_r4D_r4

Page 318         Source Listing                  MPP_WRITE_R4D_R4
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_write.h



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_mpp_write_r4d_r4_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  8631     R(4)            4     4     1        ARG,IN           8639                              
 FIELD                      Dummy  8631     FIELDTYPE       1096        scalar   ARG,IN           8639                              
 MPP_PARAMETER_MOD          Module 8632                                                           8632                              
 MPP_WRITE_R4D_R4           Subr   8631                                          PRIV                                               
 NULLUNIT                   Param  8632     I(4)            4           scalar                    8632,8638                         
 SIZE                       Func   8639                                 scalar                    8639                              
 TSTAMP                     Dummy  8631     R(4)            4           scalar   ARG,IN           8639                              
 UNIT                       Dummy  8631     I(4)            4           scalar   ARG,IN           8638,8639                         

Page 319         Source Listing                  MPP_WRITE_R4D_R4
2021-06-01 08:53                                 ../mpp/include/mpp_write.h

   8642 # 1253 "../mpp/include/mpp_io_write.inc" 2 
   8643 
   8644     subroutine mpp_write_axis( unit, axis )
   8645       integer, intent(in) :: unit
   8646       type(axistype), intent(in) :: axis
   8647       type(fieldtype) :: field
   8648 
   8649       call mpp_clock_begin(mpp_write_clock)
   8650       if( .NOT.module_is_initialized )call mpp_error( FATAL, 'MPP_WRITE: must first call mpp_io_init.' )
   8651       if( .NOT. mpp_file(unit)%write_on_this_pe ) then
   8652          call mpp_clock_end(mpp_write_clock)
   8653          return
   8654       endif
   8655       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE: invalid unit number.' )
   8656 !we convert axis to type(fieldtype) in order to call write_record
   8657       field = default_field
   8658       allocate( field%axes(1) )
   8659       field%axes(1) = axis
   8660       allocate( field%size(1) )
   8661       field%size(1) = axis%len
   8662       field%id = axis%id
   8663 
   8664       field%name = axis%name
   8665       field%longname = axis%longname
   8666       field%units = axis%units
   8667 
   8668       if(ASSOCIATED(axis%data))then
   8669         allocate( field%axes(1)%data(size(axis%data) ))
   8670         field%axes(1)%data = axis%data
   8671         call write_record( unit, field, axis%len, axis%data )
   8672       elseif(ASSOCIATED(axis%idata))then
   8673         allocate( field%axes(1)%data(size(axis%idata) ))
   8674         field%axes(1)%data = REAL(axis%idata)
   8675         field%pack=4
   8676         call write_record( unit, field, axis%len, REAL(axis%idata) )
   8677       else
   8678         call mpp_error( FATAL, 'MPP_WRITE_AXIS: No data associated with axis.' )
   8679       endif
   8680 
   8681       deallocate(field%axes(1)%data)
   8682       deallocate(field%axes,field%size)
   8683 
   8684       call mpp_clock_end(mpp_write_clock)
   8685       return
   8686     end subroutine mpp_write_axis

Page 320         Source Listing                  MPP_WRITE_AXIS
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_write.inc



ENTRY POINTS

  Name                                     
                                           
 mpp_io_mod_mp_mpp_write_axis_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   8668                                 scalar                    8668,8672                         
 AXIS                       Dummy  8644     AXISTYPE        1424        scalar   ARG,IN           8659,8661,8662,8664,8665,8666,8668
                                                                                                  ,8669,8670,8671,8672,8673,8674,867
                                                                                                  6                                 
 FIELD                      Local  8647     FIELDTYPE       1096        scalar                    8657,8658,8659,8660,8661,8662,8664
                                                                                                  ,8665,8666,8669,8670,8671,8673,867
                                                                                                  4,8675,8676,8681,8682             
 MPP_WRITE_AXIS             Subr   8644                                          PRIV                                               
 REAL                       Func   8674                                 scalar                    8674,8676                         
 SIZE                       Func   8669                                 scalar                    8669,8673                         
 UNIT                       Dummy  8644     I(4)            4           scalar   ARG,IN           8651,8655,8671,8676               

Page 321         Source Listing                  MPP_WRITE_AXIS
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   8687 
   8688 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   8689 !                                                                      !
   8690 !                          MPP_COPY_META                               !
   8691 !                                                                      !
   8692 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   8693     subroutine mpp_copy_meta_global( unit, gatt )
   8694 !writes a global metadata attribute to unit <unit>
   8695 !attribute <name> can be an real, integer or character
   8696 !one and only one of rval, ival, and cval should be present
   8697 !the first found will be used
   8698 !for a non-netCDF file, it is encoded into a string "GLOBAL <name> <val>"
   8699       integer, intent(in) :: unit
   8700       type(atttype), intent(in) :: gatt
   8701       integer :: len, error
   8702 
   8703       if( .NOT.module_is_initialized    )call mpp_error( FATAL, 'MPP_WRITE_META: must first call mpp_io_init.' )
   8704       if( .NOT. mpp_file(unit)%write_on_this_pe )return
   8705       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE_META: invalid unit number.' )
   8706       if( mpp_file(unit)%initialized ) then
   8707 !     File has already been written to and needs to be returned to define mode.
   8708 
   8709         error = NF_REDEF(mpp_file(unit)%ncid)
   8710 
   8711         mpp_file(unit)%initialized = .false.
   8712       endif
   8713 !           call mpp_error( FATAL, 'MPP_WRITE_META: cannot write metadata to file after an mpp_write.' )
   8714 
   8715       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   8716          if( gatt%type.EQ.NF_CHAR )then
   8717             len = gatt%len
   8718             call write_attribute_netcdf( unit, NF_GLOBAL, gatt%name, cval=gatt%catt(1:len) )
   8719          else
   8720             call write_attribute_netcdf( unit, NF_GLOBAL, gatt%name, rval=gatt%fatt )
   8721          endif
   8722       else
   8723          if( gatt%type.EQ.NF_CHAR )then
   8724             len=gatt%len
   8725             call write_attribute( unit, 'GLOBAL '//trim(gatt%name), cval=gatt%catt(1:len) )
   8726          else
   8727             call write_attribute( unit, 'GLOBAL '//trim(gatt%name), rval=gatt%fatt )
   8728          endif
   8729      end if
   8730 # 1342
   8731 
   8732       return
   8733     end subroutine mpp_copy_meta_global

Page 322         Source Listing                  MPP_COPY_META_GLOBAL
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_write.inc



ENTRY POINTS

  Name                                           
                                                 
 mpp_io_mod_mp_mpp_copy_meta_global_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERROR                      Local  8701     I(4)            4           scalar                    8709                              
 GATT                       Dummy  8693     ATTTYPE         1488        scalar   ARG,IN           8716,8717,8718,8720,8723,8724,8725
                                                                                                  ,8727                             
 LEN                        Local  8701     I(4)            4           scalar                    8717,8718,8724,8725               
 MPP_COPY_META_GLOBAL       Subr   8693                                          PRIV                                               
 TRIM                       Func   8725                                 scalar                    8725,8727                         
 UNIT                       Dummy  8693     I(4)            4           scalar   ARG,IN           8704,8705,8706,8709,8711,8715,8718
                                                                                                  ,8720,8725,8727                   

Page 323         Source Listing                  MPP_COPY_META_GLOBAL
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   8734 
   8735     subroutine mpp_copy_meta_axis( unit, axis, domain )
   8736 !load the values in an axistype (still need to call mpp_write)
   8737 !write metadata attributes for axis.  axis is declared inout
   8738 !because the variable and dimension ids are altered
   8739 
   8740       integer, intent(in) :: unit
   8741       type(axistype), intent(inout) :: axis
   8742       type(domain1D), intent(in), optional :: domain
   8743       character(len=512) :: text
   8744       integer :: i, len, is, ie, isg, ieg, error
   8745 
   8746 !      call mpp_clock_begin(mpp_write_clock)
   8747       if( .NOT.module_is_initialized    )call mpp_error( FATAL, 'MPP_WRITE_META: must first call mpp_io_init.' )
   8748       if( .NOT. mpp_file(unit)%write_on_this_pe ) then
   8749 !         call mpp_clock_end(mpp_write_clock)
   8750          return
   8751       endif
   8752       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE_META: invalid unit number.' )
   8753       if( mpp_file(unit)%initialized )  then
   8754 !     File has already been written to and needs to be returned to define mode.
   8755 
   8756         error = NF_REDEF(mpp_file(unit)%ncid)
   8757 
   8758         mpp_file(unit)%initialized = .false.
   8759       endif
   8760 !           call mpp_error( FATAL, 'MPP_WRITE_META: cannot write metadata to file after an mpp_write.' )
   8761 
   8762 ! redefine domain if present
   8763       if( PRESENT(domain) )then
   8764           axis%domain = domain
   8765       else
   8766           axis%domain = NULL_DOMAIN1D
   8767       end if
   8768 
   8769 
   8770 !write metadata
   8771       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   8772 
   8773 !write axis def
   8774           if( ASSOCIATED(axis%data) )then !space axis
   8775               if( mpp_file(unit)%fileset.EQ.MPP_MULTI .AND. axis%domain.NE.NULL_DOMAIN1D )then
   8776                   call mpp_get_compute_domain( axis%domain, is, ie )
   8777                   call mpp_get_global_domain( axis%domain, isg, ieg )
   8778                   ie  = ie + axis%shift
   8779                   ieg = ieg + axis%shift
   8780                   error = NF_DEF_DIM( mpp_file(unit)%ncid, axis%name, ie-is+1, axis%did )
   8781               else
   8782                   error = NF_DEF_DIM( mpp_file(unit)%ncid, axis%name, size(axis%data(:)), axis%did )
   8783               end if
   8784               call netcdf_err( error, mpp_file(unit), axis )
   8785               error = NF_DEF_VAR( mpp_file(unit)%ncid, axis%name, NF_FLOAT, 1, (/axis%did/), axis%id )
   8786               call netcdf_err( error, mpp_file(unit), axis )
   8787           else                            !time axis
   8788               error = NF_DEF_DIM( mpp_file(unit)%ncid, axis%name, NF_UNLIMITED, axis%did )
   8789               call netcdf_err( error, mpp_file(unit), axis )
   8790               error = NF_DEF_VAR( mpp_file(unit)%ncid, axis%name, NF_DOUBLE, 1, (/axis%did/), axis%id )

Page 324         Source Listing                  MPP_COPY_META_AXIS
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   8791               call netcdf_err( error, mpp_file(unit), axis )
   8792               mpp_file(unit)%id = axis%id !file ID is the same as time axis varID
   8793               mpp_file(unit)%recdimid = axis%did ! record dimension id
   8794           end if
   8795       else
   8796           varnum = varnum + 1
   8797           axis%id = varnum
   8798           axis%did = varnum
   8799 !write axis def
   8800           write( text, '(a,i4,a)' )'AXIS ', axis%id, ' name'
   8801           call write_attribute( unit, trim(text), cval=axis%name )
   8802           write( text, '(a,i4,a)' )'AXIS ', axis%id, ' size'
   8803           if( ASSOCIATED(axis%data) )then !space axis
   8804               if( mpp_file(unit)%fileset.EQ.MPP_MULTI .AND. axis%domain.NE.NULL_DOMAIN1D )then
   8805                   call mpp_get_compute_domain(axis%domain, is, ie)
   8806                   call write_attribute( unit, trim(text), ival=(/ie-is+1/) ) ! ??? is, ie is not initialized
   8807               else
   8808                   call write_attribute( unit, trim(text), ival=(/size(axis%data(:))/) )
   8809               end if
   8810           else                            !time axis
   8811               if( mpp_file(unit)%id.NE.-1 ) &
   8812                    call mpp_error( FATAL, 'MPP_WRITE_META_AXIS: There is already a time axis for this file.' )
   8813               call write_attribute( unit, trim(text), ival=(/0/) ) !a size of 0 indicates time axis
   8814               mpp_file(unit)%id = axis%id
   8815           end if
   8816       end if
   8817 !write axis attributes
   8818 
   8819       do i=1,axis%natt
   8820          if( axis%Att(i)%name.NE.default_att%name )then
   8821             if( axis%Att(i)%type.EQ.NF_CHAR )then
   8822                len = axis%Att(i)%len
   8823                call mpp_write_meta( unit, axis%id, axis%Att(i)%name, cval=axis%Att(i)%catt(1:len) )
   8824             else
   8825                call mpp_write_meta( unit, axis%id, axis%Att(i)%name, rval=axis%Att(i)%fatt)
   8826             endif
   8827          endif
   8828       enddo
   8829 
   8830       if( mpp_file(unit)%threading.EQ.MPP_MULTI .AND. mpp_file(unit)%fileset.EQ.MPP_MULTI &
   8831          .AND. axis%domain.NE.NULL_DOMAIN1D )then
   8832           call mpp_write_meta( unit, axis%id, 'domain_decomposition', ival=(/isg,ieg,is,ie/) )
   8833       end if
   8834       if( verbose )print '(a,2i6,x,a,2i3)', 'MPP_WRITE_META: Wrote axis metadata, pe, unit, axis%name, axis%id, axis%did=', 
   8834 &
   8835            pe, unit, trim(axis%name), axis%id, axis%did
   8836 # 1449
   8837 
   8838 !      call mpp_clock_end(mpp_write_clock)
   8839       return
   8840     end subroutine mpp_copy_meta_axis

Page 325         Source Listing                  MPP_COPY_META_AXIS
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_write.inc



ENTRY POINTS

  Name                                         
                                               
 mpp_io_mod_mp_mpp_copy_meta_axis_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   8774                                 scalar                    8774,8803                         
 AXIS                       Dummy  8735     AXISTYPE        1424        scalar   ARG,INOUT        8764,8766,8774,8775,8776,8777,8778
                                                                                                  ,8779,8780,8782,8784,8785,8786,878
                                                                                                  8,8789,8790,8791,8792,8793,8797,87
                                                                                                  98,8800,8801,8802,8803,8804,8805,8
                                                                                                  808,8814,8819,8820,8821,8822,8823,
                                                                                                  8825,8831,8832,8835               
 DOMAIN                     Dummy  8735     DOMAIN1D        176         scalar   ARG,IN           8763,8764                         
 ERROR                      Local  8744     I(4)            4           scalar                    8756,8780,8782,8784,8785,8786,8788
                                                                                                  ,8789,8790,8791                   
 I                          Local  8744     I(4)            4           scalar                    8819,8820,8821,8822,8823,8825     
 IE                         Local  8744     I(4)            4           scalar                    8776,8778,8780,8805,8806,8832     
 IEG                        Local  8744     I(4)            4           scalar                    8777,8779,8832                    
 IS                         Local  8744     I(4)            4           scalar                    8776,8780,8805,8806,8832          
 ISG                        Local  8744     I(4)            4           scalar                    8777,8832                         
 LEN                        Local  8744     I(4)            4           scalar                    8822,8823                         
 MPP_COPY_META_AXIS         Subr   8735                                          PRIV                                               
 MPP_DOMAIN1D_NE            Func   8775     L(4)            4           scalar   PRIV             8775,8804,8831                    
 NULL_DOMAIN1D              Local  8766     DOMAIN1D        176         scalar   PRIV,SAVE        338,8766,8775,8804,8831           
 PRESENT                    Func   8763                                 scalar                    8763                              
 SIZE                       Func   8782                                 scalar                    8782,8808                         
 TEXT                       Local  8743     CHAR            512         scalar                    8800,8801,8802,8806,8808,8813     
 TRIM                       Func   8801                                 scalar                    8801,8806,8808,8813,8835          
 UNIT                       Dummy  8735     I(4)            4           scalar   ARG,IN           8748,8752,8753,8756,8758,8771,8775
                                                                                                  ,8780,8782,8784,8785,8786,8788,878
                                                                                                  9,8790,8791,8792,8793,8801,8804,88
                                                                                                  06,8808,8811,8813,8814,8823,8825,8
                                                                                                  830,8832,8835                     


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AXISTYPE.DOMAIN            DOMAIN1D        176   936            scalar   PRIV             8764,8766,8775,8776,8777,8804,8805 
                                                                                           ,8831                              

Page 326         Source Listing                  MPP_COPY_META_AXIS
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   8841 
   8842     subroutine mpp_copy_meta_field( unit, field, axes )
   8843 !useful for copying field metadata from a previous call to mpp_read_meta
   8844 !define field: must have already called mpp_write_meta(axis) for each axis
   8845       integer, intent(in) :: unit
   8846       type(fieldtype), intent(inout) :: field
   8847       type(axistype), intent(in), optional :: axes(:)
   8848 !this array is required because of f77 binding on netCDF interface
   8849       integer, allocatable :: axis_id(:)
   8850       real :: a, b
   8851       integer :: i, error
   8852 
   8853 !      call mpp_clock_begin(mpp_write_clock)
   8854       if( .NOT.module_is_initialized    )call mpp_error( FATAL, 'MPP_WRITE_META: must first call mpp_io_init.' )
   8855       if( .NOT. mpp_file(unit)%write_on_this_pe ) then
   8856 !         call mpp_clock_end(mpp_write_clock)
   8857          return
   8858       endif
   8859       if( .NOT.mpp_file(unit)%opened )call mpp_error( FATAL, 'MPP_WRITE_META: invalid unit number.' )
   8860       if( mpp_file(unit)%initialized )  then
   8861 !     File has already been written to and needs to be returned to define mode.
   8862 
   8863         error = NF_REDEF(mpp_file(unit)%ncid)
   8864 
   8865         mpp_file(unit)%initialized = .false.
   8866       endif
   8867 !           call mpp_error( FATAL, 'MPP_WRITE_META: cannot write metadata to file after an mpp_write.' )
   8868 
   8869        if( field%pack.NE.1 .AND. field%pack.NE.2 )then
   8870             if( field%pack.NE.4 .AND. field%pack.NE.8 ) &
   8871                call mpp_error( FATAL, 'MPP_WRITE_META_FIELD: only legal packing values are 1,2,4,8.' )
   8872       end if
   8873 
   8874       if (PRESENT(axes)) then
   8875          deallocate(field%axes)
   8876          deallocate(field%size)
   8877          allocate(field%axes(size(axes(:))))
   8878          allocate(field%size(size(axes(:))))
   8879          field%axes = axes
   8880          do i=1,size(axes(:))
   8881             if (ASSOCIATED(axes(i)%data)) then
   8882                field%size(i) = size(axes(i)%data(:))
   8883             else
   8884                field%size(i) = 1
   8885                field%time_axis_index = i
   8886             endif
   8887          enddo
   8888       endif
   8889 
   8890       if( mpp_file(unit)%format.EQ.MPP_NETCDF )then
   8891 
   8892           allocate( axis_id(size(field%axes(:))) )
   8893           do i = 1,size(field%axes(:))
   8894              axis_id(i) = field%axes(i)%did
   8895           end do
   8896 !write field def
   8897           select case (field%pack)

Page 327         Source Listing                  MPP_COPY_META_FIELD
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   8898               case(1)
   8899                   error = NF_DEF_VAR( mpp_file(unit)%ncid, field%name, NF_DOUBLE, &
   8900                                      size(field%axes(:)), axis_id, field%id )
   8901               case(2)
   8902                   error = NF_DEF_VAR( mpp_file(unit)%ncid, field%name, NF_FLOAT, &
   8903                                      size(field%axes(:)), axis_id, field%id )
   8904               case(4)
   8905 !                 if( field%scale.EQ.default_field%scale .OR. field%add.EQ.default_field%add ) &
   8906 !                      call mpp_error( FATAL, 'MPP_WRITE_META_FIELD: scale and add must be supplied when pack=4.' )
   8907                   error = NF_DEF_VAR( mpp_file(unit)%ncid, field%name, NF_SHORT, &
   8908                                      size(field%axes(:)), axis_id, field%id )
   8909               case(8)
   8910 !                 if( field%scale.EQ.default_field%scale .OR. field%add.EQ.default_field%add ) &
   8911 !                      call mpp_error( FATAL, 'MPP_WRITE_META_FIELD: scale and add must be supplied when pack=8.' )
   8912                   error = NF_DEF_VAR( mpp_file(unit)%ncid, field%name, NF_BYTE, &
   8913                                      size(field%axes(:)), axis_id, field%id )
   8914               case default
   8915                   call mpp_error( FATAL, 'MPP_WRITE_META_FIELD: only legal packing values are 1,2,4,8.' )
   8916           end select
   8917           deallocate( axis_id )
   8918 
   8919       else
   8920           varnum = varnum + 1
   8921           field%id = varnum
   8922           if( field%pack.NE.default_field%pack ) &
   8923            call mpp_error( WARNING, 'MPP_WRITE_META: Packing is currently available only on netCDF files.' )
   8924 !write field def
   8925           write( text, '(a,i4,a)' )'FIELD ', field%id, ' name'
   8926           call write_attribute( unit, trim(text), cval=field%name )
   8927           write( text, '(a,i4,a)' )'FIELD ', field%id, ' axes'
   8928           call write_attribute( unit, trim(text), ival=field%axes(:)%did )
   8929       end if
   8930 !write field attributes: these names follow netCDF conventions
   8931       call mpp_write_meta( unit, field%id, 'long_name', cval=field%longname )
   8932       if (lowercase(trim(field%units)).ne.'none' .OR. .NOT.cf_compliance) then
   8933         call mpp_write_meta( unit, field%id, 'units',     cval=field%units    )
   8934       endif
   8935 !all real attributes must be written as packed
   8936       if( (field%min.NE.default_field%min) .AND. (field%max.NE.default_field%max) )then
   8937           if( field%pack.EQ.1 .OR. field%pack.EQ.2 )then
   8938               call mpp_write_meta( unit, field%id, 'valid_range', rval=(/field%min,field%max/), pack=field%pack )
   8939           else
   8940               a = nint((field%min-field%add)/field%scale)
   8941               b = nint((field%max-field%add)/field%scale)
   8942               call mpp_write_meta( unit, field%id, 'valid_range', rval=(/a,  b  /), pack=field%pack )
   8943           end if
   8944       else if( field%min.NE.default_field%min )then
   8945           if( field%pack.EQ.1 .OR. field%pack.EQ.2 )then
   8946               call mpp_write_meta( unit, field%id, 'valid_min', rval=field%min, pack=field%pack )
   8947           else
   8948               a = nint((field%min-field%add)/field%scale)
   8949               call mpp_write_meta( unit, field%id, 'valid_min', rval=a, pack=field%pack )
   8950           end if
   8951       else if( field%max.NE.default_field%max )then
   8952           if( field%pack.EQ.1 .OR. field%pack.EQ.2 )then
   8953               call mpp_write_meta( unit, field%id, 'valid_max', rval=field%max, pack=field%pack )
   8954           else

Page 328         Source Listing                  MPP_COPY_META_FIELD
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   8955               a = nint((field%max-field%add)/field%scale)
   8956               call mpp_write_meta( unit, field%id, 'valid_max', rval=a, pack=field%pack )
   8957           end if
   8958       end if
   8959       if( field%missing.NE.default_field%missing )then
   8960           if( field%pack.EQ.1 .OR. field%pack.EQ.2 )then
   8961               call mpp_write_meta( unit, field%id, 'missing_value', rval=field%missing, pack=field%pack )
   8962           else
   8963               a = nint((field%missing-field%add)/field%scale)
   8964               call mpp_write_meta( unit, field%id, 'missing_value', rval=a, pack=field%pack )
   8965           end if
   8966       end if
   8967       if( field%fill.NE.default_field%fill )then
   8968           if( field%pack.EQ.1 .OR. field%pack.EQ.2 )then
   8969               call mpp_write_meta( unit, field%id, '_FillValue', rval=field%missing, pack=field%pack )
   8970           else
   8971               a = nint((field%fill-field%add)/field%scale)
   8972               call mpp_write_meta( unit, field%id, '_FillValue', rval=a, pack=field%pack )
   8973           end if
   8974       end if
   8975       if( field%pack.NE.1 .AND. field%pack.NE.2 )then
   8976           call mpp_write_meta( unit, field%id, 'packing', ival=field%pack )
   8977           if( field%scale.NE.default_field%scale ) &
   8978                                  call mpp_write_meta( unit, field%id, 'scale_factor',  rval=field%scale )
   8979           if( field%add.NE.default_field%add   ) &
   8980                                  call mpp_write_meta( unit, field%id, 'add_offset',    rval=field%add )
   8981       end if
   8982       if( verbose )print '(a,2i6,x,a,i3)', 'MPP_WRITE_META: Wrote field metadata: pe, unit, field%name, field%id=', &
   8983            pe, unit, trim(field%name), field%id
   8984 
   8985 !      call mpp_clock_end(mpp_write_clock)
   8986       return
   8987     end subroutine mpp_copy_meta_field

Page 329         Source Listing                  MPP_COPY_META_FIELD
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_write.inc



ENTRY POINTS

  Name                                          
                                                
 mpp_io_mod_mp_mpp_copy_meta_field_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  8850     R(8)            8           scalar                    8940,8942,8948,8949,8955,8956,8963
                                                                                                  ,8964,8971,8972                   
 ASSOCIATED                 Func   8881                                 scalar                    8881                              
 AXES                       Dummy  8842     RECORD          1424  1     1        ARG,IN           8874,8877,8878,8879,8880,8881,8882
 AXIS_ID                    Local  8849     I(4)            4     1     1        ALC              8892,8894,8900,8903,8908,8913,8917
 B                          Local  8850     R(8)            8           scalar                    8941,8942                         
 ERROR                      Local  8851     I(4)            4           scalar                    8863,8899,8902,8907,8912          
 FIELD                      Dummy  8842     FIELDTYPE       1096        scalar   ARG,INOUT        8869,8870,8875,8876,8877,8878,8879
                                                                                                  ,8882,8884,8885,8892,8893,8894,889
                                                                                                  7,8899,8900,8902,8903,8907,8908,89
                                                                                                  12,8913,8921,8922,8925,8926,8927,8
                                                                                                  928,8931,8932,8933,8936,8937,8938,
                                                                                                  8940,8941,8942,8944,8945,8946,8948
                                                                                                  ,8949,8951,8952,8953,8955,8956,895
                                                                                                  9,8960,8961,8963,8964,8967,8968,89
                                                                                                  69,8971,8972,8975,8976,8977,8978,8
                                                                                                  979,8980,8983                     
 I                          Local  8851     I(4)            4           scalar                    8880,8881,8882,8884,8885,8893,8894
 MPP_COPY_META_FIELD        Subr   8842                                          PRIV                                               
 NINT                       Func   8940                                 scalar                    8940,8941,8948,8955,8963,8971     
 PRESENT                    Func   8874                                 scalar                    8874                              
 SIZE                       Func   8877                                 scalar                    8877,8878,8880,8882,8892,8893,8900
                                                                                                  ,8903,8908,8913                   
 TRIM                       Func   8926                                 scalar                    8926,8928,8932,8983               
 UNIT                       Dummy  8842     I(4)            4           scalar   ARG,IN           8855,8859,8860,8863,8865,8890,8899
                                                                                                  ,8902,8907,8912,8926,8928,8931,893
                                                                                                  3,8938,8942,8946,8949,8953,8956,89
                                                                                                  61,8964,8969,8972,8976,8978,8980,8
                                                                                                  983                               

Page 330         Source Listing                  MPP_COPY_META_FIELD
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   8988 
   8989     subroutine mpp_modify_axis_meta( axis, name, units, longname, cartesian, data )
   8990 
   8991       type(axistype), intent(inout) :: axis
   8992       character(len=*), intent(in), optional :: name, units, longname, cartesian
   8993       real, dimension(:), intent(in), optional :: data
   8994 
   8995       if (PRESENT(name)) axis%name = trim(name)
   8996       if (PRESENT(units)) axis%units = trim(units)
   8997       if (PRESENT(longname)) axis%longname = trim(longname)
   8998       if (PRESENT(cartesian)) axis%cartesian = trim(cartesian)
   8999       if (PRESENT(data)) then
   9000          axis%len = size(data(:))
   9001          if (ASSOCIATED(axis%data)) deallocate(axis%data)
   9002          allocate(axis%data(axis%len))
   9003          axis%data = data
   9004       endif
   9005 
   9006       return
   9007     end subroutine mpp_modify_axis_meta


ENTRY POINTS

  Name                                           
                                                 
 mpp_io_mod_mp_mpp_modify_axis_meta_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   9001                                 scalar                    9001                              
 AXIS                       Dummy  8989     AXISTYPE        1424        scalar   ARG,INOUT        8995,8996,8997,8998,9000,9001,9002
                                                                                                  ,9003                             
 CARTESIAN                  Dummy  8989     CHAR                        scalar   ARG,IN           8998                              
 DATA                       Dummy  8989     R(8)            8     1     1        ARG,IN           8999,9000,9003                    
 LONGNAME                   Dummy  8989     CHAR                        scalar   ARG,IN           8997                              
 MPP_MODIFY_AXIS_META       Subr   8989                                          PRIV                                               
 NAME                       Dummy  8989     CHAR                        scalar   ARG,IN           8995                              
 PRESENT                    Func   8995                                 scalar                    8995,8996,8997,8998,8999          
 SIZE                       Func   9000                                 scalar                    9000                              
 TRIM                       Func   8995                                 scalar                    8995,8996,8997,8998               
 UNITS                      Dummy  8989     CHAR                        scalar   ARG,IN           8996                              

Page 331         Source Listing                  MPP_MODIFY_AXIS_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   9008 
   9009     subroutine mpp_modify_field_meta( field, name, units, longname, min, max, missing, axes )
   9010 
   9011       type(fieldtype), intent(inout) :: field
   9012       character(len=*), intent(in), optional :: name, units, longname
   9013       real, intent(in), optional :: min, max, missing
   9014       type(axistype), dimension(:), intent(inout), optional :: axes
   9015 
   9016       if (PRESENT(name)) field%name = trim(name)
   9017       if (PRESENT(units)) field%units = trim(units)
   9018       if (PRESENT(longname)) field%longname = trim(longname)
   9019       if (PRESENT(min)) field%min = min
   9020       if (PRESENT(max)) field%max = max
   9021       if (PRESENT(missing)) field%missing = missing
   9022 !      if (PRESENT(axes)) then
   9023 !         axis%len = size(data(:))
   9024 !         deallocate(axis%data)
   9025 !         allocate(axis%data(axis%len))
   9026 !         axis%data = data
   9027 !      endif
   9028 
   9029       return
   9030     end subroutine mpp_modify_field_meta


ENTRY POINTS

  Name                                            
                                                  
 mpp_io_mod_mp_mpp_modify_field_meta_             

Page 332         Source Listing                  MPP_MODIFY_FIELD_META
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_write.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXES                       Dummy  9009     RECORD          1424  1     1        ARG,INOUT                                          
 FIELD                      Dummy  9009     FIELDTYPE       1096        scalar   ARG,INOUT        9016,9017,9018,9019,9020,9021     
 LONGNAME                   Dummy  9009     CHAR                        scalar   ARG,IN           9018                              
 MAX                        Dummy  9009     R(8)            8           scalar   ARG,IN           9020                              
 MIN                        Dummy  9009     R(8)            8           scalar   ARG,IN           9019                              
 MISSING                    Dummy  9009     R(8)            8           scalar   ARG,IN           9021                              
 MPP_MODIFY_FIELD_META      Subr   9009                                          PRIV                                               
 NAME                       Dummy  9009     CHAR                        scalar   ARG,IN           9016                              
 PRESENT                    Func   9016                                 scalar                    9016,9017,9018,9019,9020,9021     
 TRIM                       Func   9016                                 scalar                    9016,9017,9018                    
 UNITS                      Dummy  9009     CHAR                        scalar   ARG,IN           9017                              

Page 333         Source Listing                  MPP_MODIFY_FIELD_META
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   9031 
   9032 
   9033 !> \brief Fills in a fieldtype variable, and is used with the diag_manager when using
   9034 !! fms2_io
   9035     subroutine fillin_fieldtype(field, axes, name, units, longname,&
   9036          min, max, missing, fill, scale, add, pack, time_method, standard_name, checksum)
   9037 !define field: must have already called mpp_write_meta(axis) for each axis
   9038       type(fieldtype), intent(inout) :: field
   9039       type(axistype), intent(in) :: axes(:)
   9040       character(len=*), intent(in) :: name, units, longname
   9041       real, intent(in), optional :: min, max, missing, fill, scale, add
   9042       integer, intent(in), optional :: pack
   9043       character(len=*), intent(in), optional :: time_method
   9044       character(len=*), intent(in), optional :: standard_name
   9045       integer(i8_kind), dimension(:), intent(in), optional :: checksum
   9046 !this array is required because of f77 binding on netCDF interface
   9047       integer, allocatable :: axis_id(:)
   9048       real :: a, b
   9049       integer :: i, istat, ishift, jshift
   9050       character(len=64) :: checksum_char
   9051 
   9052 !      call mpp_clock_begin(mpp_write_clock)
   9053 
   9054 !--- figure out the location of data, this is needed in mpp_write.
   9055 !--- for NON-symmetry domain, the position is not an issue.
   9056 !--- we may need to rethink how to address the symmetric issue.
   9057       ishift = 0; jshift = 0
   9058       do i = 1, size(axes(:))
   9059          select case ( lowercase( axes(i)%cartesian ) )
   9060          case ( 'x' )
   9061             ishift = axes(i)%shift
   9062          case ( 'y' )
   9063             jshift = axes(i)%shift
   9064          end select
   9065       end do
   9066 
   9067       field%position = CENTER
   9068       if(ishift == 1 .AND. jshift == 1) then
   9069          field%position = CORNER
   9070       else if(ishift == 1) then
   9071          field%position = EAST
   9072       else if(jshift == 1) then
   9073          field%position = NORTH
   9074       endif
   9075 
   9076 !pre-existing pointers need to be nullified
   9077       if( ASSOCIATED(field%axes) ) DEALLOCATE(field%axes, stat=istat)
   9078       if( ASSOCIATED(field%size) ) DEALLOCATE(field%size, stat=istat)
   9079 !fill in field metadata
   9080       field%name = name
   9081       field%units = units
   9082       field%longname = longname
   9083       allocate( field%axes(size(axes(:))) )
   9084       field%axes = axes
   9085       field%ndim = size(axes(:))
   9086       field%time_axis_index = -1 !this value will never match any axis index
   9087 !size is buffer area for the corresponding axis info: it is required to buffer this info in the fieldtype

Page 334         Source Listing                  FILLIN_FIELDTYPE
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   9088 !because axis might be reused in different files
   9089       allocate( field%size(size(axes(:))) )
   9090       do i = 1,size(axes(:))
   9091          if( ASSOCIATED(axes(i)%data) )then !space axis
   9092              field%size(i) = size(axes(i)%data(:))
   9093          else               !time
   9094              field%size(i) = 1
   9095              field%time_axis_index = i
   9096          end if
   9097       end do
   9098 !attributes
   9099       if( PRESENT(min) )          field%min           = min
   9100       if( PRESENT(max) )          field%max           = max
   9101       if( PRESENT(scale) )        field%scale         = scale
   9102       if( PRESENT(add) )          field%add           = add
   9103       if( PRESENT(standard_name)) field%standard_name = standard_name
   9104       if( PRESENT(missing) )      field%missing       = missing
   9105       if( PRESENT(fill) )         field%fill          = fill
   9106       field%checksum      = 0
   9107       if( PRESENT(checksum) )     field%checksum(1:size(checksum)) = checksum(:)
   9108 
   9109 ! Issue warning if fill and missing are different
   9110       if ( (present(fill).and.present(missing)) .and. (field%missing .ne. field%fill) ) then
   9111          call mpp_error(WARNING, 'MPP_WRITE_META: NetCDF attributes _FillValue and missing_value should be equal.')
   9112       end if
   9113 !pack is currently used only for netCDF
   9114       field%pack = 2        !default write 32-bit floats
   9115       if( PRESENT(pack) )field%pack = pack
   9116 
   9117       return
   9118     end subroutine fillin_fieldtype

Page 335         Source Listing                  FILLIN_FIELDTYPE
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_write.inc



ENTRY POINTS

  Name                                       
                                             
 mpp_io_mod_mp_fillin_fieldtype_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  9048     R(8)            8           scalar                                                      
 ADD                        Dummy  9036     R(8)            8           scalar   ARG,IN           9102                              
 ASSOCIATED                 Func   9077                                 scalar                    9077,9078,9091                    
 AXES                       Dummy  9035     RECORD          1424  1     1        ARG,IN           9058,9059,9061,9063,9083,9084,9085
                                                                                                  ,9089,9090,9091,9092              
 AXIS_ID                    Local  9047     I(4)            4     1     1        ALC                                                
 B                          Local  9048     R(8)            8           scalar                                                      
 CHECKSUM                   Dummy  9036     I(8)            8     1     1        ARG,IN           9107                              
 CHECKSUM_CHAR              Local  9050     CHAR            64          scalar                                                      
 FIELD                      Dummy  9035     FIELDTYPE       1096        scalar   ARG,INOUT        9067,9069,9071,9073,9077,9078,9080
                                                                                                  ,9081,9082,9083,9084,9085,9086,908
                                                                                                  9,9092,9094,9095,9099,9100,9101,91
                                                                                                  02,9103,9104,9105,9106,9107,9110,9
                                                                                                  114,9115                          
 FILL                       Dummy  9036     R(8)            8           scalar   ARG,IN           9105,9110                         
 FILLIN_FIELDTYPE           Subr   9035                                                                                             
 I                          Local  9049     I(4)            4           scalar                    9058,9059,9061,9063,9090,9091,9092
                                                                                                  ,9094,9095                        
 ISHIFT                     Local  9049     I(4)            4           scalar                    9057,9061,9068,9070               
 ISTAT                      Local  9049     I(4)            4           scalar                    9077,9078                         
 JSHIFT                     Local  9049     I(4)            4           scalar                    9057,9063,9068,9072               
 LONGNAME                   Dummy  9035     CHAR                        scalar   ARG,IN           9082                              
 MAX                        Dummy  9036     R(8)            8           scalar   ARG,IN           9100                              
 MIN                        Dummy  9036     R(8)            8           scalar   ARG,IN           9099                              
 MISSING                    Dummy  9036     R(8)            8           scalar   ARG,IN           9104,9110                         
 NAME                       Dummy  9035     CHAR                        scalar   ARG,IN           9080                              
 PACK                       Dummy  9036     I(4)            4           scalar   ARG,IN           9115                              
 PRESENT                    Func   9099                                 scalar                    9099,9100,9101,9102,9103,9104,9105
                                                                                                  ,9107,9110,9115                   
 SCALE                      Dummy  9036     R(8)            8           scalar   ARG,IN           9101                              
 SIZE                       Func   9058                                 scalar                    9058,9083,9085,9089,9090,9092,9107
 STANDARD_NAME              Dummy  9036     CHAR                        scalar   ARG,IN           9103                              
 TIME_METHOD                Dummy  9036     CHAR                        scalar   ARG,IN                                             
 UNITS                      Dummy  9035     CHAR                        scalar   ARG,IN           9081                              

Page 336         Source Listing                  FILLIN_FIELDTYPE
2021-06-01 08:53                                 ../mpp/include/mpp_io_write.inc

   9119 
   9120 # 1114 "mpp_io.F90" 2 
   9121 
   9122 !----------
   9123 !ug support
   9124 # 1 "../mpp/include/mpp_io_unstructured_write.inc" 1 
   9125 !***********************************************************************
   9126 !*                   GNU Lesser General Public License
   9127 !*
   9128 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9129 !*
   9130 !* FMS is free software: you can redistribute it and/or modify it under
   9131 !* the terms of the GNU Lesser General Public License as published by
   9132 !* the Free Software Foundation, either version 3 of the License, or (at
   9133 !* your option) any later version.
   9134 !*
   9135 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9136 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9137 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9138 !* for more details.
   9139 !*
   9140 !* You should have received a copy of the GNU Lesser General Public
   9141 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9142 !***********************************************************************
   9143 
   9144 !----------
   9145 !ug support
   9146 
   9147 !------------------------------------------------------------------------------
   9148 !>Write data for a 1D field associated with an unstructured mpp domain to a
   9149 !!restart file.
   9150 subroutine mpp_io_unstructured_write_r8_1D(funit, &
   9151                                            field, &
   9152                                            domain, &
   9153                                            fdata, &
   9154                                            nelems_io, &
   9155                                            tstamp, &
   9156                                            default_data)
   9157 
   9158 !Inputs/outputs
   9159     integer(i4_kind),intent(in)                   :: funit        !<A file unit for the to which the data will be written
   9160     type(fieldtype),intent(inout)                 :: field        !<A field whose data will be written
   9161     type(domainUG),intent(inout)                  :: domain       !<An unstructured mpp domain associatd with the inputted f
   9161 ile
   9162     real(KIND=r8_kind),dimension(:),intent(inout) :: fdata        !<The data that will be written to the file
   9163     integer,dimension(:),intent(in)               :: nelems_io    !<Number of grid points in the compressed dimension for ea
   9163 ch rank (correct
   9164 !!sizes only exist for the root rank of I/O domain pelist)
   9165     real(KIND=r8_kind),intent(in),optional        :: tstamp       !<A time value
   9166     real(KIND=r8_kind),intent(in), optional       :: default_data !<Fill value for the inputted field
   9167 
   9168 !Local variables
   9169     real(KIND=r8_kind)                          :: fill           !<Fill value for the inputted field (default: zero)
   9170     type(domainUG),pointer                      :: io_domain      !<Pointer to the unstructured I/O domain
   9171     integer(i4_kind)                            :: io_domain_npes !<The total number of ranks in an I/O domain pelist
   9172     integer(i4_kind),dimension(:),allocatable   :: pelist         !<A pelist
   9173     integer(i4_kind)                            :: nelems         !<Total number of data points (sum(nelems_io)) to be writt

Page 337         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_1D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9173 en
   9174 !!by the root rank of the pelist
   9175     real(KIND=r8_kind),dimension(:),allocatable :: rbuff          !<Buffer used to gather the data onto the root rank of the
   9175  pelist
   9176     real(KIND=r8_kind),dimension(:),allocatable :: cdata          !<Array used to write the data to the file after the gathe
   9176 r is performed
   9177     integer(i4_kind)                            :: i              !<Loop variable
   9178 
   9179 !Start the mpp timer.
   9180 !mpp_write_clock is a module variable.
   9181     call mpp_clock_begin(mpp_write_clock)
   9182 
   9183 !Make sure that the module is initialized.
   9184     if (.not. module_is_initialized) then
   9185         call mpp_error(FATAL, &
   9186                        "mpp_io_unstructured_write_r_1D:" &
   9187                        //" you must first call mpp_io_init.")
   9188     endif
   9189 
   9190 !Make sure that another NetCDF file is not currently using the inputted
   9191 !file unit.
   9192     if (.not. mpp_file(funit)%valid) then
   9193         call mpp_error(FATAL, &
   9194                        "mpp_io_unstructured_write_r_1D:" &
   9195                        //" the inputted file unit is already in use.")
   9196     endif
   9197 
   9198 !Set the fill value for the field.
   9199     fill = 0.0
   9200     if (present(default_data)) then
   9201         fill = default_data
   9202     endif
   9203 
   9204 !Point to the I/O domain associated with the inputted unstructured mpp
   9205 !domain.
   9206     io_domain => null()
   9207     io_domain => mpp_get_UG_io_domain(domain)
   9208 
   9209 !Get the pelist associated with the I/O domain.
   9210     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   9211     allocate(pelist(io_domain_npes))
   9212     call mpp_get_UG_domain_pelist(io_domain, &
   9213                                   pelist)
   9214 
   9215 !Make sure that only the root rank of the pelist will write to the file.
   9216 !This check is needed because data is only gathered on the lowest rank
   9217 !of the pelist.
   9218     if (mpp_pe() .eq. pelist(1) .and. .not. &
   9219         mpp_file(funit)%write_on_this_pe) then
   9220         call mpp_error(FATAL, &
   9221                        "mpp_io_unstructured_write_r_1D:" &
   9222                        //" the root rank of the pelist must be allowed" &
   9223                        //" to perform the write.")
   9224     endif
   9225     if (mpp_pe() .ne. pelist(1) .and. mpp_file(funit)%write_on_this_pe) then
   9226         call mpp_error(FATAL, &
   9227                        "mpp_io_unstructured_write_r_1D:" &

Page 338         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_1D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9228                        //" the non-root ranks of the pelist are not" &
   9229                        //" allowed to perform the write.")
   9230     endif
   9231 
   9232 !Allocate an array which will be used to gather the data to be written
   9233 !onto the root rank of the pelist.
   9234     if (mpp_pe() .eq. pelist(1)) then
   9235         nelems = sum(nelems_io)
   9236         allocate(rbuff(nelems))
   9237     else
   9238         allocate(rbuff(1))
   9239     endif
   9240 
   9241 !Perform the gather of data onto the root rank (pelist(1)).
   9242     call mpp_gather(fdata, &
   9243                     size(fdata), &
   9244                     rbuff, &
   9245                     nelems_io, &
   9246                     pelist)
   9247 
   9248 !Write out the data to the file.  This is only done by the root rank
   9249 !of the pelist.
   9250     if (mpp_pe() .eq. pelist(1)) then
   9251         allocate(cdata(nelems))
   9252         cdata = fill
   9253         do i = 1,nelems
   9254             cdata(i) = rbuff(i)
   9255         enddo
   9256         field%size(1) = nelems
   9257         call write_record_r8(funit, &
   9258                              field, &
   9259                              nelems, &
   9260                              cdata, &
   9261                              time_in=tstamp)
   9262         deallocate(cdata)
   9263     endif
   9264 
   9265 !Deallocate local allocatables.
   9266     deallocate(rbuff)
   9267     deallocate(pelist)
   9268 
   9269 !Stop the mpp timer.
   9270     call mpp_clock_end(mpp_write_clock)
   9271 
   9272     return
   9273 end subroutine mpp_io_unstructured_write_r8_1D

Page 339         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_1D
2021-06-01 08:53 Entry Points                    ..../mpp/include/mpp_io_unstructured_write.inc



ENTRY POINTS

  Name                                                      
                                                            
 mpp_io_mod_mp_mpp_io_unstructured_write_r8_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  9176     R(8)            8     1     1        ALC              9251,9252,9254,9260,9262          
 DEFAULT_DATA               Dummy  9156     R(8)            8           scalar   ARG,IN           9200,9201                         
 DOMAIN                     Dummy  9152     DOMAINUG        544         scalar   ARG,INOUT        9207                              
 FDATA                      Dummy  9153     R(8)            8     1     1        ARG,INOUT        9242,9243                         
 FIELD                      Dummy  9151     FIELDTYPE       1096        scalar   ARG,INOUT        9256,9258                         
 FILL                       Local  9169     R(8)            8           scalar                    9199,9201,9252                    
 FUNIT                      Dummy  9150     I(4)            4           scalar   ARG,IN           9192,9219,9225,9257               
 I                          Local  9177     I(4)            4           scalar                    9253,9254                         
 IO_DOMAIN                  Local  9170     DOMAINUG        544         scalar   PTR              9206,9207,9210,9212               
 IO_DOMAIN_NPES             Local  9171     I(4)            4           scalar                    9210,9211                         
 MPP_GET_UG_DOMAIN_PELIST   Subr   9212                                          PRIV             358,9212,9347,9508,9678,9859,9994,
                                                                                                  10155,10325,10547,10726,10905,1108
                                                                                                  8,11267,11446                     
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_1D                      Subr   9150                                          PRIV                                               
 NELEMS                     Local  9173     I(4)            4           scalar                    9235,9236,9251,9253,9256,9259     
 NELEMS_IO                  Dummy  9154     I(4)            4     1     1        ARG,IN           9235,9245                         
 PELIST                     Local  9172     I(4)            4     1     1        ALC              9211,9213,9218,9225,9234,9246,9250
                                                                                                  ,9267                             
 PRESENT                    Func   9200                                 scalar                    9200                              
 RBUFF                      Local  9175     R(8)            8     1     1        ALC              9236,9238,9244,9254,9266          
 SIZE                       Func   9243                                 scalar                    9243                              
 SUM                        Func   9235                                 scalar                    9235                              
 TSTAMP                     Dummy  9155     R(8)            8           scalar   ARG,IN           9261                              

Page 340         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_1D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9274 
   9275 !------------------------------------------------------------------------------
   9276 !>Write data for a 2D field associated with an unstructured mpp domain to a
   9277 !!restart file.
   9278 subroutine mpp_io_unstructured_write_r8_2D(funit, &
   9279                                            field, &
   9280                                            domain, &
   9281                                            fdata, &
   9282                                            nelems_io, &
   9283                                            tstamp, &
   9284                                            default_data)
   9285 
   9286 !Inputs/outputs
   9287     integer(i4_kind),intent(in)                     :: funit        !<A file unit for the to which the data will be written
   9288     type(fieldtype),intent(inout)                   :: field        !<A field whose data will be written
   9289     type(domainUG),intent(inout)                    :: domain       !<An unstructured mpp domain associatd with the inputted
   9289  file
   9290     real(KIND=r8_kind),dimension(:,:),intent(inout) :: fdata        !<The data that will be written to the file
   9291     integer,dimension(:),intent(in)                 :: nelems_io    !<Number of grid points in the compressed dimension for 
   9291 each rank
   9292 !!(correct sizes only exist for the root rank of I/O domain pelist)
   9293     real(KIND=r8_kind),intent(in),optional          :: tstamp       !<A time value
   9294     real(KIND=r8_kind),intent(in), optional         :: default_data !<Fill value for the inputted field
   9295 
   9296 !Local variables
   9297     real(KIND=r8_kind)                            :: fill           !<Fill value for the inputted field (default: zero)
   9298     type(domainUG),pointer                        :: io_domain      !<Pointer to the unstructured I/O domain
   9299     integer(i4_kind)                              :: io_domain_npes !<The total number of ranks in an I/O domain pelist
   9300     integer(i4_kind),dimension(:),allocatable     :: pelist         !<A pelist
   9301     integer(i4_kind)                              :: dim_size_1     !<Number of data points in the first dimension (size(fda
   9301 ta,1))
   9302     integer(i4_kind)                              :: dim_size_2     !<Number of data points in the second dimension (size(fd
   9302 ata,2))
   9303     real(KIND=r8_kind),dimension(:),allocatable   :: sbuff          !<Buffer used to gather the data onto the root rank of t
   9303 he pelist
   9304     integer(i4_kind)                              :: nelems         !<Total number of data points (sum(nelems_io)) to be wri
   9304 tten
   9305 !!by the root rank of the pelist
   9306     real(KIND=r8_kind),dimension(:),allocatable   :: rbuff          !<Buffer used to gather the data onto the root rank of t
   9306 he pelist
   9307     real(KIND=r8_kind),dimension(:,:),allocatable :: cdata          !<Array used to write the data to the file after the gat
   9307 her is performed
   9308     integer(i4_kind)                              :: offset_r       !<Offset for rbuff used to reorder data before netCDF wr
   9308 ite
   9309     integer(i4_kind)                              :: offset_c       !<Offset for cdata used to reorder data before netCDF wr
   9309 ite
   9310     integer(i4_kind)                              :: i              !<Loop variable
   9311     integer(i4_kind)                              :: j              !<Loop variable
   9312     integer(i4_kind)                              :: k              !<Loop variable
   9313 
   9314 !Start the mpp timer.
   9315 !mpp_write_clock is a module variable.
   9316     call mpp_clock_begin(mpp_write_clock)
   9317 
   9318 !Make sure that the module is initialized.
   9319     if (.not. module_is_initialized) then
   9320         call mpp_error(FATAL, &

Page 341         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_2D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9321                        "mpp_io_unstructured_write_r_2D:" &
   9322                        //" you must first call mpp_io_init.")
   9323     endif
   9324 
   9325 !Make sure that another NetCDF file is not currently using the inputted
   9326 !file unit.
   9327     if (.not. mpp_file(funit)%valid) then
   9328         call mpp_error(FATAL, &
   9329                        "mpp_io_unstructured_write_r_2D:" &
   9330                        //" the inputted file unit is already in use.")
   9331     endif
   9332 
   9333 !Set the fill value for the field.
   9334     fill = 0.0
   9335     if (present(default_data)) then
   9336         fill = default_data
   9337     endif
   9338 
   9339 !Point to the I/O domain associated with the inputted unstructured mpp
   9340 !domain.
   9341     io_domain => null()
   9342     io_domain => mpp_get_UG_io_domain(domain)
   9343 
   9344 !Get the pelist associated with the I/O domain.
   9345     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   9346     allocate(pelist(io_domain_npes))
   9347     call mpp_get_UG_domain_pelist(io_domain, &
   9348                                   pelist)
   9349 
   9350 !Make sure that only the root rank of the pelist will write to the file.
   9351 !This check is needed because data is only gathered on the lowest rank
   9352 !of the pelist.
   9353     if (mpp_pe() .eq. pelist(1) .and. .not. &
   9354         mpp_file(funit)%write_on_this_pe) then
   9355         call mpp_error(FATAL, &
   9356                        "mpp_io_unstructured_write_r_2D:" &
   9357                        //" the root rank of the pelist must be allowed" &
   9358                        //" to perform the write.")
   9359     endif
   9360     if (mpp_pe() .ne. pelist(1) .and. mpp_file(funit)%write_on_this_pe) then
   9361         call mpp_error(FATAL, &
   9362                        "mpp_io_unstructured_write_r_2D:" &
   9363                        //" the non-root ranks of the pelist are not" &
   9364                        //" allowed to perform the write.")
   9365     endif
   9366 
   9367 !Load the data elements for each rank into a one dimensional array, which
   9368 !will be used to gather the data onto the root rank of the pelist.
   9369     allocate(sbuff(size(fdata)))
   9370     dim_size_1 = size(fdata,1)
   9371     dim_size_2 = size(fdata,2)
   9372     do j = 1,dim_size_2
   9373         do i = 1,dim_size_1
   9374             sbuff((j-1)*dim_size_1+i) = fdata(i,j)
   9375         enddo
   9376     enddo
   9377 

Page 342         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_2D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9378 !Allocate an array which will be used to gather the data to be written
   9379 !onto the root rank of the pelist.
   9380     if (mpp_pe() .eq. pelist(1)) then
   9381         nelems = sum(nelems_io)
   9382         allocate(rbuff(nelems*dim_size_2))
   9383     else
   9384         allocate(rbuff(1))
   9385     endif
   9386 
   9387 !Perform the gather of data onto the root rank (pelist(1)).
   9388     call mpp_gather(sbuff, &
   9389                     size(sbuff), &
   9390                     rbuff, &
   9391                     nelems_io*dim_size_2, &
   9392                     pelist)
   9393 
   9394 !Reorder the gather data so that is of the form (nelems,dim_size_2).  Write
   9395 !out the data to the file.  This is only done by the root rank of the
   9396 !pelist.
   9397     if (mpp_pe() .eq. pelist(1)) then
   9398         allocate(cdata(nelems,dim_size_2))
   9399         cdata = fill
   9400         do j = 1,dim_size_2
   9401             offset_c = 0
   9402             do k = 1,io_domain_npes
   9403                 if (k .gt. 1) then
   9404                     offset_r = (j-1)*nelems_io(k) + dim_size_2*(sum(nelems_io(1:k-1)))
   9405                 else
   9406                     offset_r = (j-1)*nelems_io(k)
   9407                 endif
   9408                 do i = 1,nelems_io(k)
   9409                     cdata(i+offset_c,j) = rbuff(i+offset_r)
   9410                 enddo
   9411                 offset_c = offset_c + nelems_io(k)
   9412             enddo
   9413         enddo
   9414         field%size(1) = nelems
   9415         call write_record_r8(funit, &
   9416                              field, &
   9417                              nelems*dim_size_2, &
   9418                              cdata, &
   9419                              time_in=tstamp)
   9420         deallocate(cdata)
   9421     endif
   9422 
   9423 !Deallocate local allocatables.
   9424     deallocate(sbuff)
   9425     deallocate(rbuff)
   9426     deallocate(pelist)
   9427 
   9428 !Stop the mpp timer.
   9429     call mpp_clock_end(mpp_write_clock)
   9430 
   9431     return
   9432 end subroutine mpp_io_unstructured_write_r8_2D

Page 343         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_2D
2021-06-01 08:53 Entry Points                    ..../mpp/include/mpp_io_unstructured_write.inc



ENTRY POINTS

  Name                                                      
                                                            
 mpp_io_mod_mp_mpp_io_unstructured_write_r8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  9307     R(8)            8     2     1        ALC              9398,9399,9409,9418,9420          
 DEFAULT_DATA               Dummy  9284     R(8)            8           scalar   ARG,IN           9335,9336                         
 DIM_SIZE_1                 Local  9301     I(4)            4           scalar                    9370,9373,9374                    
 DIM_SIZE_2                 Local  9302     I(4)            4           scalar                    9371,9372,9382,9391,9398,9400,9404
                                                                                                  ,9417                             
 DOMAIN                     Dummy  9280     DOMAINUG        544         scalar   ARG,INOUT        9342                              
 FDATA                      Dummy  9281     R(8)            8     2     1        ARG,INOUT        9369,9370,9371,9374               
 FIELD                      Dummy  9279     FIELDTYPE       1096        scalar   ARG,INOUT        9414,9416                         
 FILL                       Local  9297     R(8)            8           scalar                    9334,9336,9399                    
 FUNIT                      Dummy  9278     I(4)            4           scalar   ARG,IN           9327,9354,9360,9415               
 I                          Local  9310     I(4)            4           scalar                    9373,9374,9408,9409               
 IO_DOMAIN                  Local  9298     DOMAINUG        544         scalar   PTR              9341,9342,9345,9347               
 IO_DOMAIN_NPES             Local  9299     I(4)            4           scalar                    9345,9346,9402                    
 J                          Local  9311     I(4)            4           scalar                    9372,9374,9400,9404,9406,9409     
 K                          Local  9312     I(4)            4           scalar                    9402,9403,9404,9406,9408,9411     
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_2D                      Subr   9278                                          PRIV                                               
 NELEMS                     Local  9304     I(4)            4           scalar                    9381,9382,9398,9414,9417          
 NELEMS_IO                  Dummy  9282     I(4)            4     1     1        ARG,IN           9381,9391,9404,9406,9408,9411     
 OFFSET_C                   Local  9309     I(4)            4           scalar                    9401,9409,9411                    
 OFFSET_R                   Local  9308     I(4)            4           scalar                    9404,9406,9409                    
 PELIST                     Local  9300     I(4)            4     1     1        ALC              9346,9348,9353,9360,9380,9392,9397
                                                                                                  ,9426                             
 PRESENT                    Func   9335                                 scalar                    9335                              
 RBUFF                      Local  9306     R(8)            8     1     1        ALC              9382,9384,9390,9409,9425          
 SBUFF                      Local  9303     R(8)            8     1     1        ALC              9369,9374,9388,9389,9424          
 SIZE                       Func   9369                                 scalar                    9369,9370,9371,9389               
 SUM                        Func   9381                                 scalar                    9381,9404                         
 TSTAMP                     Dummy  9283     R(8)            8           scalar   ARG,IN           9419                              

Page 344         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_2D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9433 
   9434 !------------------------------------------------------------------------------
   9435 !>Write data for a 3D field associated with an unstructured mpp domain to a
   9436 !!restart file.
   9437 subroutine mpp_io_unstructured_write_r8_3D(funit, &
   9438                                            field, &
   9439                                            domain, &
   9440                                            fdata, &
   9441                                            nelems_io, &
   9442                                            tstamp, &
   9443                                            default_data)
   9444 
   9445 !Inputs/outputs
   9446     integer(i4_kind),intent(in)                       :: funit        !<A file unit for the to which the data will be writte
   9446 n
   9447     type(fieldtype),intent(inout)                     :: field        !<A field whose data will be written
   9448     type(domainUG),intent(inout)                      :: domain       !<An unstructured mpp domain associatd with the inputt
   9448 ed file
   9449     real(KIND=r8_kind),dimension(:,:,:),intent(inout) :: fdata        !<The data that will be written to the file
   9450     integer,dimension(:),intent(in)                   :: nelems_io    !<Number of grid points in the compressed dimension fo
   9450 r each rank
   9451 !!(correct sizes only exist for the root rank of I/O domain pelist)
   9452     real(KIND=r8_kind),intent(in),optional            :: tstamp       !<A time value
   9453     real(KIND=r8_kind),intent(in), optional           :: default_data !<Fill value for the inputted field
   9454 
   9455 !Local variables
   9456     real(KIND=r8_kind)                              :: fill           !<Fill value for the inputted field (defaults: zero)
   9457     type(domainUG),pointer                          :: io_domain      !<Pointer to the unstructured I/O domain
   9458     integer(i4_kind)                                :: io_domain_npes !<The total number of ranks in an I/O domain pelist
   9459     integer(i4_kind),dimension(:),allocatable       :: pelist         !<A pelist
   9460     integer(i4_kind)                                :: dim_size_1     !<Number of data points in the first dimension (size(f
   9460 data,1))
   9461     integer(i4_kind)                                :: dim_size_2     !<Number of data points in the second dimension (size(
   9461 fdata,2))
   9462     integer(i4_kind)                                :: dim_size_3     !<Number of data points in the second dimension (size(
   9462 fdata,3))
   9463     real(KIND=r8_kind),dimension(:),allocatable     :: sbuff          !<Buffer used to gather the data onto the root rank of
   9463  the pelist
   9464     integer(i4_kind)                                :: nelems         !<Total number of data points (sum(nelems_io)) to be w
   9464 ritten
   9465 !!by the root rank of the pelist
   9466     real(KIND=r8_kind),dimension(:),allocatable     :: rbuff          !<Buffer used to gather the data onto the root rank of
   9466  the pelist
   9467     real(KIND=r8_kind),dimension(:,:,:),allocatable :: cdata          !<Array used to write the data to the file after the g
   9467 ather is performed
   9468     integer(i4_kind)                                :: offset_r       !<Offset for rbuff used to reorder data before netCDF 
   9468 write
   9469     integer(i4_kind)                                :: offset_c       !<Offset for cdata used to reorder data before netCDF 
   9469 write
   9470     integer(i4_kind)                                :: i              !<Loop variable
   9471     integer(i4_kind)                                :: j              !<Loop variable
   9472     integer(i4_kind)                                :: k              !<Loop variable
   9473     integer(i4_kind)                                :: m              !<Loop variable
   9474 
   9475 !Start the mpp timer.
   9476 !mpp_write_clock is a module variable.
   9477     call mpp_clock_begin(mpp_write_clock)

Page 345         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_3D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9478 
   9479 !Make sure that the module is initialized.
   9480     if (.not. module_is_initialized) then
   9481         call mpp_error(FATAL, &
   9482                        "mpp_io_unstructured_write_r_3D:" &
   9483                        //" you must first call mpp_io_init.")
   9484     endif
   9485 
   9486 !Make sure that another NetCDF file is not currently using the inputted
   9487 !file unit.
   9488     if (.not. mpp_file(funit)%valid) then
   9489         call mpp_error(FATAL, &
   9490                        "mpp_io_unstructured_write_r_3D:" &
   9491                        //" the inputted file unit is already in use.")
   9492     endif
   9493 
   9494 !Set the fill value for the field.
   9495     fill = 0.0
   9496     if (present(default_data)) then
   9497         fill = default_data
   9498     endif
   9499 
   9500 !Point to the I/O domain associated with the inputted unstructured mpp
   9501 !domain.
   9502     io_domain => null()
   9503     io_domain => mpp_get_UG_io_domain(domain)
   9504 
   9505 !Get the pelist associated with the I/O domain.
   9506     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   9507     allocate(pelist(io_domain_npes))
   9508     call mpp_get_UG_domain_pelist(io_domain, &
   9509                                   pelist)
   9510 
   9511 !Make sure that only the root rank of the pelist will write to the file.
   9512 !This check is needed because data is only gathered on the lowest rank
   9513 !of the pelist.
   9514     if (mpp_pe() .eq. pelist(1) .and. .not. &
   9515         mpp_file(funit)%write_on_this_pe) then
   9516         call mpp_error(FATAL, &
   9517                        "mpp_io_unstructured_write_r_3D:" &
   9518                        //" the root rank of the pelist must be allowed" &
   9519                        //" to perform the write.")
   9520     endif
   9521     if (mpp_pe() .ne. pelist(1) .and. mpp_file(funit)%write_on_this_pe) then
   9522         call mpp_error(FATAL, &
   9523                        "mpp_io_unstructured_write_r_3D:" &
   9524                        //" the non-root ranks of the pelist are not" &
   9525                        //" allowed to perform the write.")
   9526     endif
   9527 
   9528 !Load the data elements for each rank into a one dimensional array, which
   9529 !will be used to gather the data onto the root rank of the pelist.
   9530     allocate(sbuff(size(fdata)))
   9531     dim_size_1 = size(fdata,1)
   9532     dim_size_2 = size(fdata,2)
   9533     dim_size_3 = size(fdata,3)
   9534     do k = 1,dim_size_3

Page 346         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_3D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9535         do j = 1,dim_size_2
   9536             do i = 1,dim_size_1
   9537                 sbuff((k-1)*dim_size_2*dim_size_1+(j-1)*dim_size_1+i) = fdata(i,j,k)
   9538             enddo
   9539         enddo
   9540     enddo
   9541 
   9542 !Allocate an array which will be used to gather the data to be written
   9543 !onto the root rank of the pelist.
   9544     if (mpp_pe() .eq. pelist(1)) then
   9545         nelems = sum(nelems_io)
   9546         allocate(rbuff(nelems*dim_size_2*dim_size_3))
   9547     else
   9548         allocate(rbuff(1))
   9549     endif
   9550 
   9551 !Perform the gather of data onto the root rank (pelist(1)).
   9552     call mpp_gather(sbuff, &
   9553                     size(sbuff), &
   9554                     rbuff, &
   9555                     nelems_io*dim_size_2*dim_size_3, &
   9556                     pelist)
   9557 
   9558 !Reorder the gather data so that is of the form (nelems,dim_size_2).  Write
   9559 !out the data to the file.  This is only done by the root rank of the
   9560 !pelist.
   9561     if (mpp_pe() .eq. pelist(1)) then
   9562         allocate(cdata(nelems,dim_size_2,dim_size_3))
   9563         cdata = fill
   9564         do m = 1,dim_size_3
   9565             do j = 1,dim_size_2
   9566                 offset_c = 0
   9567                 do k = 1,io_domain_npes
   9568                     if (k .gt. 1) then
   9569                         offset_r = (m-1)*dim_size_2*nelems_io(k) + &
   9570                                    (j-1)*nelems_io(k) + &
   9571                                    dim_size_2*dim_size_3*(sum(nelems_io(1:k-1)))
   9572                     else
   9573                         offset_r = (m-1)*dim_size_2*nelems_io(k) + &
   9574                                    (j-1)*nelems_io(k)
   9575                     endif
   9576                     do i = 1,nelems_io(k)
   9577                         cdata(i+offset_c,j,m) = rbuff(i+offset_r)
   9578                     enddo
   9579                     offset_c = offset_c + nelems_io(k)
   9580                 enddo
   9581             enddo
   9582         enddo
   9583         field%size(1) = nelems
   9584         call write_record_r8(funit, &
   9585                              field, &
   9586                              nelems*dim_size_2*dim_size_3, &
   9587                              cdata, &
   9588                              time_in=tstamp)
   9589         deallocate(cdata)
   9590     endif
   9591 

Page 347         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_3D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9592 !Deallocate local allocatables.
   9593     deallocate(sbuff)
   9594     deallocate(rbuff)
   9595     deallocate(pelist)
   9596 
   9597 !Stop the mpp timer.
   9598     call mpp_clock_end(mpp_write_clock)
   9599 
   9600     return
   9601 end subroutine mpp_io_unstructured_write_r8_3D


ENTRY POINTS

  Name                                                      
                                                            
 mpp_io_mod_mp_mpp_io_unstructured_write_r8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  9467     R(8)            8     3     1        ALC              9562,9563,9577,9587,9589          
 DEFAULT_DATA               Dummy  9443     R(8)            8           scalar   ARG,IN           9496,9497                         
 DIM_SIZE_1                 Local  9460     I(4)            4           scalar                    9531,9536,9537                    
 DIM_SIZE_2                 Local  9461     I(4)            4           scalar                    9532,9535,9537,9546,9555,9562,9565
                                                                                                  ,9569,9571,9573,9586              
 DIM_SIZE_3                 Local  9462     I(4)            4           scalar                    9533,9534,9546,9555,9562,9564,9571
                                                                                                  ,9586                             
 DOMAIN                     Dummy  9439     DOMAINUG        544         scalar   ARG,INOUT        9503                              
 FDATA                      Dummy  9440     R(8)            8     3     1        ARG,INOUT        9530,9531,9532,9533,9537          
 FIELD                      Dummy  9438     FIELDTYPE       1096        scalar   ARG,INOUT        9583,9585                         
 FILL                       Local  9456     R(8)            8           scalar                    9495,9497,9563                    
 FUNIT                      Dummy  9437     I(4)            4           scalar   ARG,IN           9488,9515,9521,9584               
 I                          Local  9470     I(4)            4           scalar                    9536,9537,9576,9577               
 IO_DOMAIN                  Local  9457     DOMAINUG        544         scalar   PTR              9502,9503,9506,9508               
 IO_DOMAIN_NPES             Local  9458     I(4)            4           scalar                    9506,9507,9567                    
 J                          Local  9471     I(4)            4           scalar                    9535,9537,9565,9570,9574,9577     
 K                          Local  9472     I(4)            4           scalar                    9534,9537,9567,9568,9569,9570,9571
                                                                                                  ,9573,9574,9576,9579              
 M                          Local  9473     I(4)            4           scalar                    9564,9569,9573,9577               
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_3D                      Subr   9437                                          PRIV                                               
 NELEMS                     Local  9464     I(4)            4           scalar                    9545,9546,9562,9583,9586          
 NELEMS_IO                  Dummy  9441     I(4)            4     1     1        ARG,IN           9545,9555,9569,9570,9571,9573,9574
                                                                                                  ,9576,9579                        
 OFFSET_C                   Local  9469     I(4)            4           scalar                    9566,9577,9579                    
 OFFSET_R                   Local  9468     I(4)            4           scalar                    9569,9573,9577                    
 PELIST                     Local  9459     I(4)            4     1     1        ALC              9507,9509,9514,9521,9544,9556,9561
                                                                                                  ,9595                             
 PRESENT                    Func   9496                                 scalar                    9496                              
 RBUFF                      Local  9466     R(8)            8     1     1        ALC              9546,9548,9554,9577,9594          
 SBUFF                      Local  9463     R(8)            8     1     1        ALC              9530,9537,9552,9553,9593          
 SIZE                       Func   9530                                 scalar                    9530,9531,9532,9533,9553          
 SUM                        Func   9545                                 scalar                    9545,9571                         
 TSTAMP                     Dummy  9442     R(8)            8           scalar   ARG,IN           9588                              

Page 348         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_3D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9602 
   9603 !------------------------------------------------------------------------------
   9604 !>Write data for a 4D field associated with an unstructured mpp domain to a
   9605 !!restart file.
   9606 subroutine mpp_io_unstructured_write_r8_4D(funit, &
   9607                                            field, &
   9608                                            domain, &
   9609                                            fdata, &
   9610                                            nelems_io_in, &
   9611                                            tstamp, &
   9612                                            default_data)
   9613 
   9614 !Inputs/outputs
   9615     integer(i4_kind),intent(in)                         :: funit        !<A file unit for the to which the data will be writ
   9615 ten
   9616     type(fieldtype),intent(inout)                       :: field        !<A field whose data will be written
   9617     type(domainUG),intent(inout)                        :: domain       !<An unstructured mpp domain associatd with the inpu
   9617 tted file
   9618     real(KIND=r8_kind),dimension(:,:,:,:),intent(inout) :: fdata        !<The data that will be written to the file
   9619     integer,dimension(:),intent(in),optional            :: nelems_io_in !<Number of grid points in the unstructured dimensio
   9619 n for each rank
   9620 !!(correct sizes only exist for the root rank of I/O domain pelist)
   9621     real(KIND=r8_kind),intent(in),optional              :: tstamp       !<A time value
   9622     real(KIND=r8_kind),intent(in), optional             :: default_data !<Fill value for the inputted field
   9623 
   9624 !Local variables
   9625     real(KIND=r8_kind)                          :: fill             !<Fill value for the inputted field (default: zero)
   9626     type(domainUG),pointer                      :: io_domain        !<Pointer to the unstructured I/O domain
   9627     integer(i4_kind)                            :: io_domain_npes   !<The total number of ranks in an I/O domain pelist
   9628     integer(i4_kind),dimension(:),allocatable   :: pelist           !<A pelist
   9629     integer(i4_kind),dimension(:),allocatable   :: nelems_io        !<Number of grid points in the unstructured dimension fo
   9629 r each rank
   9630     integer(i4_kind)                            :: compute_size     !<Size of the unstructured compute domain for the curren
   9630 t rank
   9631     integer(i4_kind)                            :: size_fdata_dim_2 !<Number of data points in a non-unstructured dimension 
   9631 (size(fdata,2))
   9632     integer(i4_kind)                            :: size_fdata_dim_3 !<Number of data points in a non-unstructured dimension 
   9632 (size(fdata,3))
   9633     integer(i4_kind)                            :: size_fdata_dim_4 !<Number of data points in a non-unstructured dimension 
   9633 (size(fdata,3))
   9634     integer(i4_kind)                            :: mynelems         !<Number of data points in the unstructured dimension (s
   9634 ize(fdata,1))
   9635     real(KIND=r8_kind),dimension(:),allocatable :: sbuff            !<Buffer used to gather the data onto the root rank of t
   9635 he pelist
   9636     integer(i4_kind)                            :: nelems           !<Total number of data points (sum(nelems_io)) to be wri
   9636 tten
   9637 !!by the root rank of the pelist
   9638     real(KIND=r8_kind),dimension(:),allocatable :: rbuff            !<Buffer to gather the data onto root rank of pelist
   9639     real(KIND=r8_kind),dimension(:,:,:,:),allocatable :: cdata      !<Array  to write the data to file after gather is perfo
   9639 rmed
   9640     integer(i4_kind)                            :: i                !<Loop variable
   9641     integer(i4_kind)                            :: j                !<Loop variable
   9642     integer(i4_kind)                            :: k                !<Loop variable
   9643     integer(i4_kind)                            :: n                !<Loop variable
   9644 
   9645 !Start the mpp timer.
   9646 !mpp_write_clock is a module variable.

Page 349         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_4D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9647     call mpp_clock_begin(mpp_write_clock)
   9648 
   9649 !Make sure that the module is initialized.
   9650     if (.not. module_is_initialized) then
   9651         call mpp_error(FATAL, &
   9652                        "mpp_io_unstructured_write_compressed_r_4D:" &
   9653                        //" you must first call mpp_io_init.")
   9654     endif
   9655 
   9656 !Make sure that another NetCDF file is not currently using the inputted
   9657 !file unit.
   9658     if (.not. mpp_file(funit)%valid) then
   9659         call mpp_error(FATAL, &
   9660                        "mpp_io_unstructured_write_compressed_r_4D:" &
   9661                        //" the inputted file unit is already in use.")
   9662     endif
   9663 
   9664 !Set the fill value for the field.
   9665     fill = 0.0
   9666     if (present(default_data)) then
   9667         fill = default_data
   9668     endif
   9669 
   9670 !Point to the I/O domain associated with the inputted unstructured mpp
   9671 !domain.
   9672     io_domain => null()
   9673     io_domain => mpp_get_UG_io_domain(domain)
   9674 
   9675 !Get the pelist associated with the I/O domain.
   9676     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   9677     allocate(pelist(io_domain_npes))
   9678     call mpp_get_UG_domain_pelist(io_domain, &
   9679                                   pelist)
   9680 
   9681 !Make sure that only the root rank of the pelist will write to the file.
   9682 !This check is needed because data is only gathered on the lowest rank
   9683 !of the pelist.
   9684     if (mpp_pe() .eq. pelist(1) .and. .not. &
   9685         mpp_file(funit)%write_on_this_pe) then
   9686         call mpp_error(FATAL, &
   9687                        "mpp_io_unstructured_write_compressed_r_4D:" &
   9688                        //" the root rank of the pelist must be allowed" &
   9689                        //" to perform the write.")
   9690     endif
   9691     if (mpp_pe() .ne. pelist(1) .and. mpp_file(funit)%write_on_this_pe) then
   9692         call mpp_error(FATAL, &
   9693                        "mpp_io_unstructured_write_compressed_r_4D:" &
   9694                        //" the non-root ranks of the pelist are not" &
   9695                        //" allowed to perform the write.")
   9696     endif
   9697 
   9698 !For the 3D unstructured case, data is assumed to be of the form
   9699 !fdata = fdata(unstructured,z,cc).  The number of data elements in the
   9700 !unstructured dimension (size(fdata,1)) may differ between ranks.
   9701 !If not passed in, the number of data elements in the unstructured
   9702 !dimension must be gathered on the root rank of the pelist.  The number
   9703 !data elements in the unstructured dimension should be equal to the size

Page 350         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_4D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9704 !of the unstructured computed domain.
   9705     if (present(nelems_io_in)) then
   9706         allocate(nelems_io(size(nelems_io_in)))
   9707         nelems_io = nelems_io_in
   9708     else
   9709         allocate(nelems_io(io_domain_npes))
   9710         nelems_io = 0
   9711         call mpp_get_UG_compute_domains(io_domain, &
   9712                                        size=nelems_io)
   9713     endif
   9714 
   9715 !The number of data elements in the non-unstructured dimensions are
   9716 !required to be the same for all ranks.  Perform gathers to check this.
   9717     size_fdata_dim_2 = size(fdata,2)
   9718     size_fdata_dim_3 = size(fdata,3)
   9719     size_fdata_dim_4 = size(fdata,4)
   9720 
   9721 !Allocate arrays which will be used to gather the data to be written
   9722 !onto the root rank of the pelist.
   9723     mynelems = size(fdata,1)
   9724     allocate(sbuff(mynelems*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4))
   9725     if (mpp_pe() .eq. pelist(1)) then
   9726         nelems = sum(nelems_io)
   9727         allocate(rbuff(nelems*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4))
   9728     else
   9729         allocate(rbuff(1))
   9730     endif
   9731 
   9732 !Load the data into the sbuff array.  The data is transposed so that the
   9733 !gather may be performed more easily.
   9734     do k = 1,mynelems
   9735         do j = 1,size_fdata_dim_2
   9736             do i = 1,size_fdata_dim_3
   9737                 do n = 1,size_fdata_dim_4
   9738                     sbuff((k-1)*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4 &
   9739                           + (j-1)*size_fdata_dim_3*size_fdata_dim_4 &
   9740                           + (i-1)*size_fdata_dim_4 + n) = fdata(k,j,i,n)
   9741                 enddo
   9742             enddo
   9743         enddo
   9744     enddo
   9745 
   9746 !Perform the gather of data onto the root rank (pelist(1)).
   9747     call mpp_gather(sbuff, &
   9748                     size(sbuff), &
   9749                     rbuff, &
   9750                     nelems_io*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4, &
   9751                     pelist)
   9752 
   9753 !Write out the data to the file.  This is only done by the root rank
   9754 !of the pelist.
   9755     if (mpp_pe() .eq. pelist(1)) then
   9756         allocate(cdata(nelems,size_fdata_dim_2,size_fdata_dim_3,size_fdata_dim_4))
   9757         cdata = fill
   9758         do n = 1,size_fdata_dim_4
   9759             do k = 1,size_fdata_dim_3
   9760                 do j = 1,size_fdata_dim_2

Page 351         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_4D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9761                     do i = 1,nelems
   9762                         cdata(i,j,k,n) = rbuff((i-1)*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4 &
   9763                                                + (j-1)*size_fdata_dim_3*size_fdata_dim_4 &
   9764                                                + (k-1)*size_fdata_dim_4 + n)
   9765                     enddo
   9766                 enddo
   9767             enddo
   9768         enddo
   9769         field%size(1) = nelems
   9770         call write_record_r8(funit, &
   9771                              field, &
   9772                              nelems*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4, &
   9773                              cdata, &
   9774                              time_in=tstamp)
   9775         deallocate(cdata)
   9776     endif
   9777 
   9778 !Deallocate local allocatables.
   9779     deallocate(sbuff)
   9780     deallocate(rbuff)
   9781     deallocate(pelist)
   9782     deallocate(nelems_io)
   9783 
   9784 !Stop the mpp timer.
   9785     call mpp_clock_end(mpp_write_clock)
   9786 
   9787     return
   9788 end subroutine mpp_io_unstructured_write_r8_4D

Page 352         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_4D
2021-06-01 08:53 Entry Points                    ..../mpp/include/mpp_io_unstructured_write.inc



ENTRY POINTS

  Name                                                      
                                                            
 mpp_io_mod_mp_mpp_io_unstructured_write_r8_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  9639     R(8)            8     4     1        ALC              9756,9757,9762,9773,9775          
 COMPUTE_SIZE               Local  9630     I(4)            4           scalar                                                      
 DEFAULT_DATA               Dummy  9612     R(8)            8           scalar   ARG,IN           9666,9667                         
 DOMAIN                     Dummy  9608     DOMAINUG        544         scalar   ARG,INOUT        9673                              
 FDATA                      Dummy  9609     R(8)            8     4     1        ARG,INOUT        9717,9718,9719,9723,9740          
 FIELD                      Dummy  9607     FIELDTYPE       1096        scalar   ARG,INOUT        9769,9771                         
 FILL                       Local  9625     R(8)            8           scalar                    9665,9667,9757                    
 FUNIT                      Dummy  9606     I(4)            4           scalar   ARG,IN           9658,9685,9691,9770               
 I                          Local  9640     I(4)            4           scalar                    9736,9740,9761,9762               
 IO_DOMAIN                  Local  9626     DOMAINUG        544         scalar   PTR              9672,9673,9676,9678,9711          
 IO_DOMAIN_NPES             Local  9627     I(4)            4           scalar                    9676,9677,9709                    
 J                          Local  9641     I(4)            4           scalar                    9735,9739,9740,9760,9762,9763     
 K                          Local  9642     I(4)            4           scalar                    9734,9738,9740,9759,9762,9764     
 MPP_GET_UG_COMPUTE_DOMAINS Subr   9711                                          PRIV             342,9711,10358                    
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_4D                      Subr   9606                                          PRIV                                               
 MYNELEMS                   Local  9634     I(4)            4           scalar                    9723,9724,9734                    
 N                          Local  9643     I(4)            4           scalar                    9737,9740,9758,9762,9764          
 NELEMS                     Local  9636     I(4)            4           scalar                    9726,9727,9756,9761,9769,9772     
 NELEMS_IO                  Local  9629     I(4)            4     1     1        ALC              9706,9707,9709,9710,9712,9726,9750
                                                                                                  ,9782                             
 NELEMS_IO_IN               Dummy  9610     I(4)            4     1     1        ARG,IN           9705,9706,9707                    
 PELIST                     Local  9628     I(4)            4     1     1        ALC              9677,9679,9684,9691,9725,9751,9755
                                                                                                  ,9781                             
 PRESENT                    Func   9666                                 scalar                    9666,9705                         
 RBUFF                      Local  9638     R(8)            8     1     1        ALC              9727,9729,9749,9762,9780          
 SBUFF                      Local  9635     R(8)            8     1     1        ALC              9724,9738,9747,9748,9779          
 SIZE                       Func   9706                                 scalar                    9706,9717,9718,9719,9723,9748     
 SIZE_FDATA_DIM_2           Local  9631     I(4)            4           scalar                    9717,9724,9727,9735,9738,9750,9756
                                                                                                  ,9760,9762,9772                   
 SIZE_FDATA_DIM_3           Local  9632     I(4)            4           scalar                    9718,9724,9727,9736,9738,9739,9750
                                                                                                  ,9756,9759,9762,9763,9772         
 SIZE_FDATA_DIM_4           Local  9633     I(4)            4           scalar                    9719,9724,9727,9737,9738,9739,9740
                                                                                                  ,9750,9756,9758,9762,9763,9764,977
                                                                                                  2                                 
 SUM                        Func   9726                                 scalar                    9726                              
 TSTAMP                     Dummy  9611     R(8)            8           scalar   ARG,IN           9774                              

Page 353         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R8_4D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9789 
   9790 !------------------------------------------------------------------------------
   9791 
   9792 !----------
   9793 
   9794 !------------------------------------------------------------------------------
   9795 !>Write data for a 1D field associated with an unstructured mpp domain to a
   9796 !!restart file.
   9797 subroutine mpp_io_unstructured_write_r4_1D(funit, &
   9798                                            field, &
   9799                                            domain, &
   9800                                            fdata, &
   9801                                            nelems_io, &
   9802                                            tstamp, &
   9803                                            default_data)
   9804 
   9805 !Inputs/outputs
   9806     integer(i4_kind),intent(in)                   :: funit        !<A file unit for the to which the data will be written
   9807     type(fieldtype),intent(inout)                 :: field        !<A field whose data will be written
   9808     type(domainUG),intent(inout)                  :: domain       !<An unstructured mpp domain associatd with the inputted f
   9808 ile
   9809     real(KIND=r4_kind),dimension(:),intent(inout) :: fdata        !<The data that will be written to the file
   9810     integer,dimension(:),intent(in)               :: nelems_io    !<Number of grid points in the compressed dimension for ea
   9810 ch rank (correct
   9811 !!sizes only exist for the root rank of I/O domain pelist)
   9812     real(KIND=r4_kind),intent(in),optional        :: tstamp       !<A time value
   9813     real(KIND=r4_kind),intent(in), optional       :: default_data !<Fill value for the inputted field
   9814 
   9815 !Local variables
   9816     real(KIND=r4_kind)                          :: fill           !<Fill value for the inputted field (default: zero)
   9817     type(domainUG),pointer                      :: io_domain      !<Pointer to the unstructured I/O domain
   9818     integer(i4_kind)                            :: io_domain_npes !<The total number of ranks in an I/O domain pelist
   9819     integer(i4_kind),dimension(:),allocatable   :: pelist         !<A pelist
   9820     integer(i4_kind)                            :: nelems         !<Total number of data points (sum(nelems_io)) to be writt
   9820 en
   9821 !!by the root rank of the pelist
   9822     real(KIND=r4_kind),dimension(:),allocatable :: rbuff          !<Buffer used to gather the data onto the root rank of the
   9822  pelist
   9823     real(KIND=r4_kind),dimension(:),allocatable :: cdata          !<Array used to write the data to the file after the gathe
   9823 r is performed
   9824     integer(i4_kind)                            :: i              !<Loop variable
   9825 
   9826 !Start the mpp timer.
   9827 !mpp_write_clock is a module variable.
   9828     call mpp_clock_begin(mpp_write_clock)
   9829 
   9830 !Make sure that the module is initialized.
   9831     if (.not. module_is_initialized) then
   9832         call mpp_error(FATAL, &
   9833                        "mpp_io_unstructured_write_r_1D:" &
   9834                        //" you must first call mpp_io_init.")
   9835     endif
   9836 
   9837 !Make sure that another NetCDF file is not currently using the inputted
   9838 !file unit.
   9839     if (.not. mpp_file(funit)%valid) then
   9840         call mpp_error(FATAL, &

Page 354         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_1D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9841                        "mpp_io_unstructured_write_r_1D:" &
   9842                        //" the inputted file unit is already in use.")
   9843     endif
   9844 
   9845 !Set the fill value for the field.
   9846     fill = 0.0
   9847     if (present(default_data)) then
   9848         fill = default_data
   9849     endif
   9850 
   9851 !Point to the I/O domain associated with the inputted unstructured mpp
   9852 !domain.
   9853     io_domain => null()
   9854     io_domain => mpp_get_UG_io_domain(domain)
   9855 
   9856 !Get the pelist associated with the I/O domain.
   9857     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   9858     allocate(pelist(io_domain_npes))
   9859     call mpp_get_UG_domain_pelist(io_domain, &
   9860                                   pelist)
   9861 
   9862 !Make sure that only the root rank of the pelist will write to the file.
   9863 !This check is needed because data is only gathered on the lowest rank
   9864 !of the pelist.
   9865     if (mpp_pe() .eq. pelist(1) .and. .not. &
   9866         mpp_file(funit)%write_on_this_pe) then
   9867         call mpp_error(FATAL, &
   9868                        "mpp_io_unstructured_write_r_1D:" &
   9869                        //" the root rank of the pelist must be allowed" &
   9870                        //" to perform the write.")
   9871     endif
   9872     if (mpp_pe() .ne. pelist(1) .and. mpp_file(funit)%write_on_this_pe) then
   9873         call mpp_error(FATAL, &
   9874                        "mpp_io_unstructured_write_r_1D:" &
   9875                        //" the non-root ranks of the pelist are not" &
   9876                        //" allowed to perform the write.")
   9877     endif
   9878 
   9879 !Allocate an array which will be used to gather the data to be written
   9880 !onto the root rank of the pelist.
   9881     if (mpp_pe() .eq. pelist(1)) then
   9882         nelems = sum(nelems_io)
   9883         allocate(rbuff(nelems))
   9884     else
   9885         allocate(rbuff(1))
   9886     endif
   9887 
   9888 !Perform the gather of data onto the root rank (pelist(1)).
   9889     call mpp_gather(fdata, &
   9890                     size(fdata), &
   9891                     rbuff, &
   9892                     nelems_io, &
   9893                     pelist)
   9894 
   9895 !Write out the data to the file.  This is only done by the root rank
   9896 !of the pelist.
   9897     if (mpp_pe() .eq. pelist(1)) then

Page 355         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_1D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9898         allocate(cdata(nelems))
   9899         cdata = fill
   9900         do i = 1,nelems
   9901             cdata(i) = rbuff(i)
   9902         enddo
   9903         field%size(1) = nelems
   9904         call write_record_r4(funit, &
   9905                              field, &
   9906                              nelems, &
   9907                              cdata, &
   9908                              time_in=tstamp)
   9909         deallocate(cdata)
   9910     endif
   9911 
   9912 !Deallocate local allocatables.
   9913     deallocate(rbuff)
   9914     deallocate(pelist)
   9915 
   9916 !Stop the mpp timer.
   9917     call mpp_clock_end(mpp_write_clock)
   9918 
   9919     return
   9920 end subroutine mpp_io_unstructured_write_r4_1D


ENTRY POINTS

  Name                                                      
                                                            
 mpp_io_mod_mp_mpp_io_unstructured_write_r4_1d_             

Page 356         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_1D
2021-06-01 08:53 Symbol Table                    ..../mpp/include/mpp_io_unstructured_write.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  9823     R(4)            4     1     1        ALC              9898,9899,9901,9907,9909          
 DEFAULT_DATA               Dummy  9803     R(4)            4           scalar   ARG,IN           9847,9848                         
 DOMAIN                     Dummy  9799     DOMAINUG        544         scalar   ARG,INOUT        9854                              
 FDATA                      Dummy  9800     R(4)            4     1     1        ARG,INOUT        9889,9890                         
 FIELD                      Dummy  9798     FIELDTYPE       1096        scalar   ARG,INOUT        9903,9905                         
 FILL                       Local  9816     R(4)            4           scalar                    9846,9848,9899                    
 FUNIT                      Dummy  9797     I(4)            4           scalar   ARG,IN           9839,9866,9872,9904               
 I                          Local  9824     I(4)            4           scalar                    9900,9901                         
 IO_DOMAIN                  Local  9817     DOMAINUG        544         scalar   PTR              9853,9854,9857,9859               
 IO_DOMAIN_NPES             Local  9818     I(4)            4           scalar                    9857,9858                         
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R4_1D                      Subr   9797                                          PRIV                                               
 NELEMS                     Local  9820     I(4)            4           scalar                    9882,9883,9898,9900,9903,9906     
 NELEMS_IO                  Dummy  9801     I(4)            4     1     1        ARG,IN           9882,9892                         
 PELIST                     Local  9819     I(4)            4     1     1        ALC              9858,9860,9865,9872,9881,9893,9897
                                                                                                  ,9914                             
 PRESENT                    Func   9847                                 scalar                    9847                              
 RBUFF                      Local  9822     R(4)            4     1     1        ALC              9883,9885,9891,9901,9913          
 SIZE                       Func   9890                                 scalar                    9890                              
 SUM                        Func   9882                                 scalar                    9882                              
 TSTAMP                     Dummy  9802     R(4)            4           scalar   ARG,IN           9908                              

Page 357         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_1D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9921 
   9922 !------------------------------------------------------------------------------
   9923 !>Write data for a 2D field associated with an unstructured mpp domain to a
   9924 !!restart file.
   9925 subroutine mpp_io_unstructured_write_r4_2D(funit, &
   9926                                            field, &
   9927                                            domain, &
   9928                                            fdata, &
   9929                                            nelems_io, &
   9930                                            tstamp, &
   9931                                            default_data)
   9932 
   9933 !Inputs/outputs
   9934     integer(i4_kind),intent(in)                     :: funit        !<A file unit for the to which the data will be written
   9935     type(fieldtype),intent(inout)                   :: field        !<A field whose data will be written
   9936     type(domainUG),intent(inout)                    :: domain       !<An unstructured mpp domain associatd with the inputted
   9936  file
   9937     real(KIND=r4_kind),dimension(:,:),intent(inout) :: fdata        !<The data that will be written to the file
   9938     integer,dimension(:),intent(in)                 :: nelems_io    !<Number of grid points in the compressed dimension for 
   9938 each rank
   9939 !!(correct sizes only exist for the root rank of I/O domain pelist)
   9940     real(KIND=r4_kind),intent(in),optional          :: tstamp       !<A time value
   9941     real(KIND=r4_kind),intent(in), optional         :: default_data !<Fill value for the inputted field
   9942 
   9943 !Local variables
   9944     real(KIND=r4_kind)                            :: fill           !<Fill value for the inputted field (default: zero)
   9945     type(domainUG),pointer                        :: io_domain      !<Pointer to the unstructured I/O domain
   9946     integer(i4_kind)                              :: io_domain_npes !<The total number of ranks in an I/O domain pelist
   9947     integer(i4_kind),dimension(:),allocatable     :: pelist         !<A pelist
   9948     integer(i4_kind)                              :: dim_size_1     !<Number of data points in the first dimension (size(fda
   9948 ta,1))
   9949     integer(i4_kind)                              :: dim_size_2     !<Number of data points in the second dimension (size(fd
   9949 ata,2))
   9950     real(KIND=r4_kind),dimension(:),allocatable   :: sbuff          !<Buffer used to gather the data onto the root rank of t
   9950 he pelist
   9951     integer(i4_kind)                              :: nelems         !<Total number of data points (sum(nelems_io)) to be wri
   9951 tten
   9952 !!by the root rank of the pelist
   9953     real(KIND=r4_kind),dimension(:),allocatable   :: rbuff          !<Buffer used to gather the data onto the root rank of t
   9953 he pelist
   9954     real(KIND=r4_kind),dimension(:,:),allocatable :: cdata          !<Array used to write the data to the file after the gat
   9954 her is performed
   9955     integer(i4_kind)                              :: offset_r       !<Offset for rbuff used to reorder data before netCDF wr
   9955 ite
   9956     integer(i4_kind)                              :: offset_c       !<Offset for cdata used to reorder data before netCDF wr
   9956 ite
   9957     integer(i4_kind)                              :: i              !<Loop variable
   9958     integer(i4_kind)                              :: j              !<Loop variable
   9959     integer(i4_kind)                              :: k              !<Loop variable
   9960 
   9961 !Start the mpp timer.
   9962 !mpp_write_clock is a module variable.
   9963     call mpp_clock_begin(mpp_write_clock)
   9964 
   9965 !Make sure that the module is initialized.
   9966     if (.not. module_is_initialized) then
   9967         call mpp_error(FATAL, &

Page 358         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_2D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

   9968                        "mpp_io_unstructured_write_r_2D:" &
   9969                        //" you must first call mpp_io_init.")
   9970     endif
   9971 
   9972 !Make sure that another NetCDF file is not currently using the inputted
   9973 !file unit.
   9974     if (.not. mpp_file(funit)%valid) then
   9975         call mpp_error(FATAL, &
   9976                        "mpp_io_unstructured_write_r_2D:" &
   9977                        //" the inputted file unit is already in use.")
   9978     endif
   9979 
   9980 !Set the fill value for the field.
   9981     fill = 0.0
   9982     if (present(default_data)) then
   9983         fill = default_data
   9984     endif
   9985 
   9986 !Point to the I/O domain associated with the inputted unstructured mpp
   9987 !domain.
   9988     io_domain => null()
   9989     io_domain => mpp_get_UG_io_domain(domain)
   9990 
   9991 !Get the pelist associated with the I/O domain.
   9992     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   9993     allocate(pelist(io_domain_npes))
   9994     call mpp_get_UG_domain_pelist(io_domain, &
   9995                                   pelist)
   9996 
   9997 !Make sure that only the root rank of the pelist will write to the file.
   9998 !This check is needed because data is only gathered on the lowest rank
   9999 !of the pelist.
  10000     if (mpp_pe() .eq. pelist(1) .and. .not. &
  10001         mpp_file(funit)%write_on_this_pe) then
  10002         call mpp_error(FATAL, &
  10003                        "mpp_io_unstructured_write_r_2D:" &
  10004                        //" the root rank of the pelist must be allowed" &
  10005                        //" to perform the write.")
  10006     endif
  10007     if (mpp_pe() .ne. pelist(1) .and. mpp_file(funit)%write_on_this_pe) then
  10008         call mpp_error(FATAL, &
  10009                        "mpp_io_unstructured_write_r_2D:" &
  10010                        //" the non-root ranks of the pelist are not" &
  10011                        //" allowed to perform the write.")
  10012     endif
  10013 
  10014 !Load the data elements for each rank into a one dimensional array, which
  10015 !will be used to gather the data onto the root rank of the pelist.
  10016     allocate(sbuff(size(fdata)))
  10017     dim_size_1 = size(fdata,1)
  10018     dim_size_2 = size(fdata,2)
  10019     do j = 1,dim_size_2
  10020         do i = 1,dim_size_1
  10021             sbuff((j-1)*dim_size_1+i) = fdata(i,j)
  10022         enddo
  10023     enddo
  10024 

Page 359         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_2D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

  10025 !Allocate an array which will be used to gather the data to be written
  10026 !onto the root rank of the pelist.
  10027     if (mpp_pe() .eq. pelist(1)) then
  10028         nelems = sum(nelems_io)
  10029         allocate(rbuff(nelems*dim_size_2))
  10030     else
  10031         allocate(rbuff(1))
  10032     endif
  10033 
  10034 !Perform the gather of data onto the root rank (pelist(1)).
  10035     call mpp_gather(sbuff, &
  10036                     size(sbuff), &
  10037                     rbuff, &
  10038                     nelems_io*dim_size_2, &
  10039                     pelist)
  10040 
  10041 !Reorder the gather data so that is of the form (nelems,dim_size_2).  Write
  10042 !out the data to the file.  This is only done by the root rank of the
  10043 !pelist.
  10044     if (mpp_pe() .eq. pelist(1)) then
  10045         allocate(cdata(nelems,dim_size_2))
  10046         cdata = fill
  10047         do j = 1,dim_size_2
  10048             offset_c = 0
  10049             do k = 1,io_domain_npes
  10050                 if (k .gt. 1) then
  10051                     offset_r = (j-1)*nelems_io(k) + dim_size_2*(sum(nelems_io(1:k-1)))
  10052                 else
  10053                     offset_r = (j-1)*nelems_io(k)
  10054                 endif
  10055                 do i = 1,nelems_io(k)
  10056                     cdata(i+offset_c,j) = rbuff(i+offset_r)
  10057                 enddo
  10058                 offset_c = offset_c + nelems_io(k)
  10059             enddo
  10060         enddo
  10061         field%size(1) = nelems
  10062         call write_record_r4(funit, &
  10063                              field, &
  10064                              nelems*dim_size_2, &
  10065                              cdata, &
  10066                              time_in=tstamp)
  10067         deallocate(cdata)
  10068     endif
  10069 
  10070 !Deallocate local allocatables.
  10071     deallocate(sbuff)
  10072     deallocate(rbuff)
  10073     deallocate(pelist)
  10074 
  10075 !Stop the mpp timer.
  10076     call mpp_clock_end(mpp_write_clock)
  10077 
  10078     return
  10079 end subroutine mpp_io_unstructured_write_r4_2D

Page 360         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_2D
2021-06-01 08:53 Entry Points                    ..../mpp/include/mpp_io_unstructured_write.inc



ENTRY POINTS

  Name                                                      
                                                            
 mpp_io_mod_mp_mpp_io_unstructured_write_r4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  9954     R(4)            4     2     1        ALC              10045,10046,10056,10065,10067     
 DEFAULT_DATA               Dummy  9931     R(4)            4           scalar   ARG,IN           9982,9983                         
 DIM_SIZE_1                 Local  9948     I(4)            4           scalar                    10017,10020,10021                 
 DIM_SIZE_2                 Local  9949     I(4)            4           scalar                    10018,10019,10029,10038,10045,1004
                                                                                                  7,10051,10064                     
 DOMAIN                     Dummy  9927     DOMAINUG        544         scalar   ARG,INOUT        9989                              
 FDATA                      Dummy  9928     R(4)            4     2     1        ARG,INOUT        10016,10017,10018,10021           
 FIELD                      Dummy  9926     FIELDTYPE       1096        scalar   ARG,INOUT        10061,10063                       
 FILL                       Local  9944     R(4)            4           scalar                    9981,9983,10046                   
 FUNIT                      Dummy  9925     I(4)            4           scalar   ARG,IN           9974,10001,10007,10062            
 I                          Local  9957     I(4)            4           scalar                    10020,10021,10055,10056           
 IO_DOMAIN                  Local  9945     DOMAINUG        544         scalar   PTR              9988,9989,9992,9994               
 IO_DOMAIN_NPES             Local  9946     I(4)            4           scalar                    9992,9993,10049                   
 J                          Local  9958     I(4)            4           scalar                    10019,10021,10047,10051,10053,1005
                                                                                                  6                                 
 K                          Local  9959     I(4)            4           scalar                    10049,10050,10051,10053,10055,1005
                                                                                                  8                                 
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R4_2D                      Subr   9925                                          PRIV                                               
 NELEMS                     Local  9951     I(4)            4           scalar                    10028,10029,10045,10061,10064     
 NELEMS_IO                  Dummy  9929     I(4)            4     1     1        ARG,IN           10028,10038,10051,10053,10055,1005
                                                                                                  8                                 
 OFFSET_C                   Local  9956     I(4)            4           scalar                    10048,10056,10058                 
 OFFSET_R                   Local  9955     I(4)            4           scalar                    10051,10053,10056                 
 PELIST                     Local  9947     I(4)            4     1     1        ALC              9993,9995,10000,10007,10027,10039,
                                                                                                  10044,10073                       
 PRESENT                    Func   9982                                 scalar                    9982                              
 RBUFF                      Local  9953     R(4)            4     1     1        ALC              10029,10031,10037,10056,10072     
 SBUFF                      Local  9950     R(4)            4     1     1        ALC              10016,10021,10035,10036,10071     
 SIZE                       Func   10016                                scalar                    10016,10017,10018,10036           
 SUM                        Func   10028                                scalar                    10028,10051                       
 TSTAMP                     Dummy  9930     R(4)            4           scalar   ARG,IN           10066                             

Page 361         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_2D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

  10080 
  10081 !------------------------------------------------------------------------------
  10082 !>Write data for a 3D field associated with an unstructured mpp domain to a
  10083 !!restart file.
  10084 subroutine mpp_io_unstructured_write_r4_3D(funit, &
  10085                                            field, &
  10086                                            domain, &
  10087                                            fdata, &
  10088                                            nelems_io, &
  10089                                            tstamp, &
  10090                                            default_data)
  10091 
  10092 !Inputs/outputs
  10093     integer(i4_kind),intent(in)                       :: funit        !<A file unit for the to which the data will be writte
  10093 n
  10094     type(fieldtype),intent(inout)                     :: field        !<A field whose data will be written
  10095     type(domainUG),intent(inout)                      :: domain       !<An unstructured mpp domain associatd with the inputt
  10095 ed file
  10096     real(KIND=r4_kind),dimension(:,:,:),intent(inout) :: fdata        !<The data that will be written to the file
  10097     integer,dimension(:),intent(in)                   :: nelems_io    !<Number of grid points in the compressed dimension fo
  10097 r each rank
  10098 !!(correct sizes only exist for the root rank of I/O domain pelist)
  10099     real(KIND=r4_kind),intent(in),optional            :: tstamp       !<A time value
  10100     real(KIND=r4_kind),intent(in), optional           :: default_data !<Fill value for the inputted field
  10101 
  10102 !Local variables
  10103     real(KIND=r4_kind)                              :: fill           !<Fill value for the inputted field (defaults: zero)
  10104     type(domainUG),pointer                          :: io_domain      !<Pointer to the unstructured I/O domain
  10105     integer(i4_kind)                                :: io_domain_npes !<The total number of ranks in an I/O domain pelist
  10106     integer(i4_kind),dimension(:),allocatable       :: pelist         !<A pelist
  10107     integer(i4_kind)                                :: dim_size_1     !<Number of data points in the first dimension (size(f
  10107 data,1))
  10108     integer(i4_kind)                                :: dim_size_2     !<Number of data points in the second dimension (size(
  10108 fdata,2))
  10109     integer(i4_kind)                                :: dim_size_3     !<Number of data points in the second dimension (size(
  10109 fdata,3))
  10110     real(KIND=r4_kind),dimension(:),allocatable     :: sbuff          !<Buffer used to gather the data onto the root rank of
  10110  the pelist
  10111     integer(i4_kind)                                :: nelems         !<Total number of data points (sum(nelems_io)) to be w
  10111 ritten
  10112 !!by the root rank of the pelist
  10113     real(KIND=r4_kind),dimension(:),allocatable     :: rbuff          !<Buffer used to gather the data onto the root rank of
  10113  the pelist
  10114     real(KIND=r4_kind),dimension(:,:,:),allocatable :: cdata          !<Array used to write the data to the file after the g
  10114 ather is performed
  10115     integer(i4_kind)                                :: offset_r       !<Offset for rbuff used to reorder data before netCDF 
  10115 write
  10116     integer(i4_kind)                                :: offset_c       !<Offset for cdata used to reorder data before netCDF 
  10116 write
  10117     integer(i4_kind)                                :: i              !<Loop variable
  10118     integer(i4_kind)                                :: j              !<Loop variable
  10119     integer(i4_kind)                                :: k              !<Loop variable
  10120     integer(i4_kind)                                :: m              !<Loop variable
  10121 
  10122 !Start the mpp timer.
  10123 !mpp_write_clock is a module variable.
  10124     call mpp_clock_begin(mpp_write_clock)

Page 362         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_3D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

  10125 
  10126 !Make sure that the module is initialized.
  10127     if (.not. module_is_initialized) then
  10128         call mpp_error(FATAL, &
  10129                        "mpp_io_unstructured_write_r_3D:" &
  10130                        //" you must first call mpp_io_init.")
  10131     endif
  10132 
  10133 !Make sure that another NetCDF file is not currently using the inputted
  10134 !file unit.
  10135     if (.not. mpp_file(funit)%valid) then
  10136         call mpp_error(FATAL, &
  10137                        "mpp_io_unstructured_write_r_3D:" &
  10138                        //" the inputted file unit is already in use.")
  10139     endif
  10140 
  10141 !Set the fill value for the field.
  10142     fill = 0.0
  10143     if (present(default_data)) then
  10144         fill = default_data
  10145     endif
  10146 
  10147 !Point to the I/O domain associated with the inputted unstructured mpp
  10148 !domain.
  10149     io_domain => null()
  10150     io_domain => mpp_get_UG_io_domain(domain)
  10151 
  10152 !Get the pelist associated with the I/O domain.
  10153     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
  10154     allocate(pelist(io_domain_npes))
  10155     call mpp_get_UG_domain_pelist(io_domain, &
  10156                                   pelist)
  10157 
  10158 !Make sure that only the root rank of the pelist will write to the file.
  10159 !This check is needed because data is only gathered on the lowest rank
  10160 !of the pelist.
  10161     if (mpp_pe() .eq. pelist(1) .and. .not. &
  10162         mpp_file(funit)%write_on_this_pe) then
  10163         call mpp_error(FATAL, &
  10164                        "mpp_io_unstructured_write_r_3D:" &
  10165                        //" the root rank of the pelist must be allowed" &
  10166                        //" to perform the write.")
  10167     endif
  10168     if (mpp_pe() .ne. pelist(1) .and. mpp_file(funit)%write_on_this_pe) then
  10169         call mpp_error(FATAL, &
  10170                        "mpp_io_unstructured_write_r_3D:" &
  10171                        //" the non-root ranks of the pelist are not" &
  10172                        //" allowed to perform the write.")
  10173     endif
  10174 
  10175 !Load the data elements for each rank into a one dimensional array, which
  10176 !will be used to gather the data onto the root rank of the pelist.
  10177     allocate(sbuff(size(fdata)))
  10178     dim_size_1 = size(fdata,1)
  10179     dim_size_2 = size(fdata,2)
  10180     dim_size_3 = size(fdata,3)
  10181     do k = 1,dim_size_3

Page 363         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_3D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

  10182         do j = 1,dim_size_2
  10183             do i = 1,dim_size_1
  10184                 sbuff((k-1)*dim_size_2*dim_size_1+(j-1)*dim_size_1+i) = fdata(i,j,k)
  10185             enddo
  10186         enddo
  10187     enddo
  10188 
  10189 !Allocate an array which will be used to gather the data to be written
  10190 !onto the root rank of the pelist.
  10191     if (mpp_pe() .eq. pelist(1)) then
  10192         nelems = sum(nelems_io)
  10193         allocate(rbuff(nelems*dim_size_2*dim_size_3))
  10194     else
  10195         allocate(rbuff(1))
  10196     endif
  10197 
  10198 !Perform the gather of data onto the root rank (pelist(1)).
  10199     call mpp_gather(sbuff, &
  10200                     size(sbuff), &
  10201                     rbuff, &
  10202                     nelems_io*dim_size_2*dim_size_3, &
  10203                     pelist)
  10204 
  10205 !Reorder the gather data so that is of the form (nelems,dim_size_2).  Write
  10206 !out the data to the file.  This is only done by the root rank of the
  10207 !pelist.
  10208     if (mpp_pe() .eq. pelist(1)) then
  10209         allocate(cdata(nelems,dim_size_2,dim_size_3))
  10210         cdata = fill
  10211         do m = 1,dim_size_3
  10212             do j = 1,dim_size_2
  10213                 offset_c = 0
  10214                 do k = 1,io_domain_npes
  10215                     if (k .gt. 1) then
  10216                         offset_r = (m-1)*dim_size_2*nelems_io(k) + &
  10217                                    (j-1)*nelems_io(k) + &
  10218                                    dim_size_2*dim_size_3*(sum(nelems_io(1:k-1)))
  10219                     else
  10220                         offset_r = (m-1)*dim_size_2*nelems_io(k) + &
  10221                                    (j-1)*nelems_io(k)
  10222                     endif
  10223                     do i = 1,nelems_io(k)
  10224                         cdata(i+offset_c,j,m) = rbuff(i+offset_r)
  10225                     enddo
  10226                     offset_c = offset_c + nelems_io(k)
  10227                 enddo
  10228             enddo
  10229         enddo
  10230         field%size(1) = nelems
  10231         call write_record_r4(funit, &
  10232                              field, &
  10233                              nelems*dim_size_2*dim_size_3, &
  10234                              cdata, &
  10235                              time_in=tstamp)
  10236         deallocate(cdata)
  10237     endif
  10238 

Page 364         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_3D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

  10239 !Deallocate local allocatables.
  10240     deallocate(sbuff)
  10241     deallocate(rbuff)
  10242     deallocate(pelist)
  10243 
  10244 !Stop the mpp timer.
  10245     call mpp_clock_end(mpp_write_clock)
  10246 
  10247     return
  10248 end subroutine mpp_io_unstructured_write_r4_3D


ENTRY POINTS

  Name                                                      
                                                            
 mpp_io_mod_mp_mpp_io_unstructured_write_r4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  10114    R(4)            4     3     1        ALC              10209,10210,10224,10234,10236     
 DEFAULT_DATA               Dummy  10090    R(4)            4           scalar   ARG,IN           10143,10144                       
 DIM_SIZE_1                 Local  10107    I(4)            4           scalar                    10178,10183,10184                 
 DIM_SIZE_2                 Local  10108    I(4)            4           scalar                    10179,10182,10184,10193,10202,1020
                                                                                                  9,10212,10216,10218,10220,10233   
 DIM_SIZE_3                 Local  10109    I(4)            4           scalar                    10180,10181,10193,10202,10209,1021
                                                                                                  1,10218,10233                     
 DOMAIN                     Dummy  10086    DOMAINUG        544         scalar   ARG,INOUT        10150                             
 FDATA                      Dummy  10087    R(4)            4     3     1        ARG,INOUT        10177,10178,10179,10180,10184     
 FIELD                      Dummy  10085    FIELDTYPE       1096        scalar   ARG,INOUT        10230,10232                       
 FILL                       Local  10103    R(4)            4           scalar                    10142,10144,10210                 
 FUNIT                      Dummy  10084    I(4)            4           scalar   ARG,IN           10135,10162,10168,10231           
 I                          Local  10117    I(4)            4           scalar                    10183,10184,10223,10224           
 IO_DOMAIN                  Local  10104    DOMAINUG        544         scalar   PTR              10149,10150,10153,10155           
 IO_DOMAIN_NPES             Local  10105    I(4)            4           scalar                    10153,10154,10214                 
 J                          Local  10118    I(4)            4           scalar                    10182,10184,10212,10217,10221,1022
                                                                                                  4                                 
 K                          Local  10119    I(4)            4           scalar                    10181,10184,10214,10215,10216,1021
                                                                                                  7,10218,10220,10221,10223,10226   
 M                          Local  10120    I(4)            4           scalar                    10211,10216,10220,10224           
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R4_3D                      Subr   10084                                         PRIV                                               
 NELEMS                     Local  10111    I(4)            4           scalar                    10192,10193,10209,10230,10233     
 NELEMS_IO                  Dummy  10088    I(4)            4     1     1        ARG,IN           10192,10202,10216,10217,10218,1022
                                                                                                  0,10221,10223,10226               
 OFFSET_C                   Local  10116    I(4)            4           scalar                    10213,10224,10226                 
 OFFSET_R                   Local  10115    I(4)            4           scalar                    10216,10220,10224                 
 PELIST                     Local  10106    I(4)            4     1     1        ALC              10154,10156,10161,10168,10191,1020
                                                                                                  3,10208,10242                     
 PRESENT                    Func   10143                                scalar                    10143                             
 RBUFF                      Local  10113    R(4)            4     1     1        ALC              10193,10195,10201,10224,10241     
 SBUFF                      Local  10110    R(4)            4     1     1        ALC              10177,10184,10199,10200,10240     
 SIZE                       Func   10177                                scalar                    10177,10178,10179,10180,10200     
 SUM                        Func   10192                                scalar                    10192,10218                       

Page 365         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_3D
2021-06-01 08:53 Symbol Table                    ..../mpp/include/mpp_io_unstructured_write.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TSTAMP                     Dummy  10089    R(4)            4           scalar   ARG,IN           10235                             

Page 366         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_3D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

  10249 
  10250 !------------------------------------------------------------------------------
  10251 !>Write data for a 4D field associated with an unstructured mpp domain to a
  10252 !!restart file.
  10253 subroutine mpp_io_unstructured_write_r4_4D(funit, &
  10254                                            field, &
  10255                                            domain, &
  10256                                            fdata, &
  10257                                            nelems_io_in, &
  10258                                            tstamp, &
  10259                                            default_data)
  10260 
  10261 !Inputs/outputs
  10262     integer(i4_kind),intent(in)                         :: funit        !<A file unit for the to which the data will be writ
  10262 ten
  10263     type(fieldtype),intent(inout)                       :: field        !<A field whose data will be written
  10264     type(domainUG),intent(inout)                        :: domain       !<An unstructured mpp domain associatd with the inpu
  10264 tted file
  10265     real(KIND=r4_kind),dimension(:,:,:,:),intent(inout) :: fdata        !<The data that will be written to the file
  10266     integer,dimension(:),intent(in),optional            :: nelems_io_in !<Number of grid points in the unstructured dimensio
  10266 n for each rank
  10267 !!(correct sizes only exist for the root rank of I/O domain pelist)
  10268     real(KIND=r4_kind),intent(in),optional              :: tstamp       !<A time value
  10269     real(KIND=r4_kind),intent(in), optional             :: default_data !<Fill value for the inputted field
  10270 
  10271 !Local variables
  10272     real(KIND=r4_kind)                          :: fill             !<Fill value for the inputted field (default: zero)
  10273     type(domainUG),pointer                      :: io_domain        !<Pointer to the unstructured I/O domain
  10274     integer(i4_kind)                            :: io_domain_npes   !<The total number of ranks in an I/O domain pelist
  10275     integer(i4_kind),dimension(:),allocatable   :: pelist           !<A pelist
  10276     integer(i4_kind),dimension(:),allocatable   :: nelems_io        !<Number of grid points in the unstructured dimension fo
  10276 r each rank
  10277     integer(i4_kind)                            :: compute_size     !<Size of the unstructured compute domain for the curren
  10277 t rank
  10278     integer(i4_kind)                            :: size_fdata_dim_2 !<Number of data points in a non-unstructured dimension 
  10278 (size(fdata,2))
  10279     integer(i4_kind)                            :: size_fdata_dim_3 !<Number of data points in a non-unstructured dimension 
  10279 (size(fdata,3))
  10280     integer(i4_kind)                            :: size_fdata_dim_4 !<Number of data points in a non-unstructured dimension 
  10280 (size(fdata,3))
  10281     integer(i4_kind)                            :: mynelems         !<Number of data points in the unstructured dimension (s
  10281 ize(fdata,1))
  10282     real(KIND=r4_kind),dimension(:),allocatable :: sbuff            !<Buffer used to gather the data onto the root rank of t
  10282 he pelist
  10283     integer(i4_kind)                            :: nelems           !<Total number of data points (sum(nelems_io)) to be wri
  10283 tten
  10284 !!by the root rank of the pelist
  10285     real(KIND=r4_kind),dimension(:),allocatable :: rbuff            !<Buffer to gather the data onto root rank of pelist
  10286     real(KIND=r4_kind),dimension(:,:,:,:),allocatable :: cdata      !<Array  to write the data to file after gather is perfo
  10286 rmed
  10287     integer(i4_kind)                            :: i                !<Loop variable
  10288     integer(i4_kind)                            :: j                !<Loop variable
  10289     integer(i4_kind)                            :: k                !<Loop variable
  10290     integer(i4_kind)                            :: n                !<Loop variable
  10291 
  10292 !Start the mpp timer.
  10293 !mpp_write_clock is a module variable.

Page 367         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_4D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

  10294     call mpp_clock_begin(mpp_write_clock)
  10295 
  10296 !Make sure that the module is initialized.
  10297     if (.not. module_is_initialized) then
  10298         call mpp_error(FATAL, &
  10299                        "mpp_io_unstructured_write_compressed_r_4D:" &
  10300                        //" you must first call mpp_io_init.")
  10301     endif
  10302 
  10303 !Make sure that another NetCDF file is not currently using the inputted
  10304 !file unit.
  10305     if (.not. mpp_file(funit)%valid) then
  10306         call mpp_error(FATAL, &
  10307                        "mpp_io_unstructured_write_compressed_r_4D:" &
  10308                        //" the inputted file unit is already in use.")
  10309     endif
  10310 
  10311 !Set the fill value for the field.
  10312     fill = 0.0
  10313     if (present(default_data)) then
  10314         fill = default_data
  10315     endif
  10316 
  10317 !Point to the I/O domain associated with the inputted unstructured mpp
  10318 !domain.
  10319     io_domain => null()
  10320     io_domain => mpp_get_UG_io_domain(domain)
  10321 
  10322 !Get the pelist associated with the I/O domain.
  10323     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
  10324     allocate(pelist(io_domain_npes))
  10325     call mpp_get_UG_domain_pelist(io_domain, &
  10326                                   pelist)
  10327 
  10328 !Make sure that only the root rank of the pelist will write to the file.
  10329 !This check is needed because data is only gathered on the lowest rank
  10330 !of the pelist.
  10331     if (mpp_pe() .eq. pelist(1) .and. .not. &
  10332         mpp_file(funit)%write_on_this_pe) then
  10333         call mpp_error(FATAL, &
  10334                        "mpp_io_unstructured_write_compressed_r_4D:" &
  10335                        //" the root rank of the pelist must be allowed" &
  10336                        //" to perform the write.")
  10337     endif
  10338     if (mpp_pe() .ne. pelist(1) .and. mpp_file(funit)%write_on_this_pe) then
  10339         call mpp_error(FATAL, &
  10340                        "mpp_io_unstructured_write_compressed_r_4D:" &
  10341                        //" the non-root ranks of the pelist are not" &
  10342                        //" allowed to perform the write.")
  10343     endif
  10344 
  10345 !For the 3D unstructured case, data is assumed to be of the form
  10346 !fdata = fdata(unstructured,z,cc).  The number of data elements in the
  10347 !unstructured dimension (size(fdata,1)) may differ between ranks.
  10348 !If not passed in, the number of data elements in the unstructured
  10349 !dimension must be gathered on the root rank of the pelist.  The number
  10350 !data elements in the unstructured dimension should be equal to the size

Page 368         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_4D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

  10351 !of the unstructured computed domain.
  10352     if (present(nelems_io_in)) then
  10353         allocate(nelems_io(size(nelems_io_in)))
  10354         nelems_io = nelems_io_in
  10355     else
  10356         allocate(nelems_io(io_domain_npes))
  10357         nelems_io = 0
  10358         call mpp_get_UG_compute_domains(io_domain, &
  10359                                        size=nelems_io)
  10360     endif
  10361 
  10362 !The number of data elements in the non-unstructured dimensions are
  10363 !required to be the same for all ranks.  Perform gathers to check this.
  10364     size_fdata_dim_2 = size(fdata,2)
  10365     size_fdata_dim_3 = size(fdata,3)
  10366     size_fdata_dim_4 = size(fdata,4)
  10367 
  10368 !Allocate arrays which will be used to gather the data to be written
  10369 !onto the root rank of the pelist.
  10370     mynelems = size(fdata,1)
  10371     allocate(sbuff(mynelems*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4))
  10372     if (mpp_pe() .eq. pelist(1)) then
  10373         nelems = sum(nelems_io)
  10374         allocate(rbuff(nelems*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4))
  10375     else
  10376         allocate(rbuff(1))
  10377     endif
  10378 
  10379 !Load the data into the sbuff array.  The data is transposed so that the
  10380 !gather may be performed more easily.
  10381     do k = 1,mynelems
  10382         do j = 1,size_fdata_dim_2
  10383             do i = 1,size_fdata_dim_3
  10384                 do n = 1,size_fdata_dim_4
  10385                     sbuff((k-1)*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4 &
  10386                           + (j-1)*size_fdata_dim_3*size_fdata_dim_4 &
  10387                           + (i-1)*size_fdata_dim_4 + n) = fdata(k,j,i,n)
  10388                 enddo
  10389             enddo
  10390         enddo
  10391     enddo
  10392 
  10393 !Perform the gather of data onto the root rank (pelist(1)).
  10394     call mpp_gather(sbuff, &
  10395                     size(sbuff), &
  10396                     rbuff, &
  10397                     nelems_io*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4, &
  10398                     pelist)
  10399 
  10400 !Write out the data to the file.  This is only done by the root rank
  10401 !of the pelist.
  10402     if (mpp_pe() .eq. pelist(1)) then
  10403         allocate(cdata(nelems,size_fdata_dim_2,size_fdata_dim_3,size_fdata_dim_4))
  10404         cdata = fill
  10405         do n = 1,size_fdata_dim_4
  10406             do k = 1,size_fdata_dim_3
  10407                 do j = 1,size_fdata_dim_2

Page 369         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_4D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

  10408                     do i = 1,nelems
  10409                         cdata(i,j,k,n) = rbuff((i-1)*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4 &
  10410                                                + (j-1)*size_fdata_dim_3*size_fdata_dim_4 &
  10411                                                + (k-1)*size_fdata_dim_4 + n)
  10412                     enddo
  10413                 enddo
  10414             enddo
  10415         enddo
  10416         field%size(1) = nelems
  10417         call write_record_r4(funit, &
  10418                              field, &
  10419                              nelems*size_fdata_dim_2*size_fdata_dim_3*size_fdata_dim_4, &
  10420                              cdata, &
  10421                              time_in=tstamp)
  10422         deallocate(cdata)
  10423     endif
  10424 
  10425 !Deallocate local allocatables.
  10426     deallocate(sbuff)
  10427     deallocate(rbuff)
  10428     deallocate(pelist)
  10429     deallocate(nelems_io)
  10430 
  10431 !Stop the mpp timer.
  10432     call mpp_clock_end(mpp_write_clock)
  10433 
  10434     return
  10435 end subroutine mpp_io_unstructured_write_r4_4D

Page 370         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_4D
2021-06-01 08:53 Entry Points                    ..../mpp/include/mpp_io_unstructured_write.inc



ENTRY POINTS

  Name                                                      
                                                            
 mpp_io_mod_mp_mpp_io_unstructured_write_r4_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDATA                      Local  10286    R(4)            4     4     1        ALC              10403,10404,10409,10420,10422     
 COMPUTE_SIZE               Local  10277    I(4)            4           scalar                                                      
 DEFAULT_DATA               Dummy  10259    R(4)            4           scalar   ARG,IN           10313,10314                       
 DOMAIN                     Dummy  10255    DOMAINUG        544         scalar   ARG,INOUT        10320                             
 FDATA                      Dummy  10256    R(4)            4     4     1        ARG,INOUT        10364,10365,10366,10370,10387     
 FIELD                      Dummy  10254    FIELDTYPE       1096        scalar   ARG,INOUT        10416,10418                       
 FILL                       Local  10272    R(4)            4           scalar                    10312,10314,10404                 
 FUNIT                      Dummy  10253    I(4)            4           scalar   ARG,IN           10305,10332,10338,10417           
 I                          Local  10287    I(4)            4           scalar                    10383,10387,10408,10409           
 IO_DOMAIN                  Local  10273    DOMAINUG        544         scalar   PTR              10319,10320,10323,10325,10358     
 IO_DOMAIN_NPES             Local  10274    I(4)            4           scalar                    10323,10324,10356                 
 J                          Local  10288    I(4)            4           scalar                    10382,10386,10387,10407,10409,1041
                                                                                                  0                                 
 K                          Local  10289    I(4)            4           scalar                    10381,10385,10387,10406,10409,1041
                                                                                                  1                                 
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R4_4D                      Subr   10253                                         PRIV                                               
 MYNELEMS                   Local  10281    I(4)            4           scalar                    10370,10371,10381                 
 N                          Local  10290    I(4)            4           scalar                    10384,10387,10405,10409,10411     
 NELEMS                     Local  10283    I(4)            4           scalar                    10373,10374,10403,10408,10416,1041
                                                                                                  9                                 
 NELEMS_IO                  Local  10276    I(4)            4     1     1        ALC              10353,10354,10356,10357,10359,1037
                                                                                                  3,10397,10429                     
 NELEMS_IO_IN               Dummy  10257    I(4)            4     1     1        ARG,IN           10352,10353,10354                 
 PELIST                     Local  10275    I(4)            4     1     1        ALC              10324,10326,10331,10338,10372,1039
                                                                                                  8,10402,10428                     
 PRESENT                    Func   10313                                scalar                    10313,10352                       
 RBUFF                      Local  10285    R(4)            4     1     1        ALC              10374,10376,10396,10409,10427     
 SBUFF                      Local  10282    R(4)            4     1     1        ALC              10371,10385,10394,10395,10426     
 SIZE                       Func   10353                                scalar                    10353,10364,10365,10366,10370,1039
                                                                                                  5                                 
 SIZE_FDATA_DIM_2           Local  10278    I(4)            4           scalar                    10364,10371,10374,10382,10385,1039
                                                                                                  7,10403,10407,10409,10419         
 SIZE_FDATA_DIM_3           Local  10279    I(4)            4           scalar                    10365,10371,10374,10383,10385,1038
                                                                                                  6,10397,10403,10406,10409,10410,10
                                                                                                  419                               
 SIZE_FDATA_DIM_4           Local  10280    I(4)            4           scalar                    10366,10371,10374,10384,10385,1038
                                                                                                  6,10387,10397,10403,10405,10409,10
                                                                                                  410,10411,10419                   
 SUM                        Func   10373                                scalar                    10373                             
 TSTAMP                     Dummy  10258    R(4)            4           scalar   ARG,IN           10421                             

Page 371         Source Listing                  MPP_IO_UNSTRUCTURED_WRITE_R4_4D
2021-06-01 08:53                                 ..../mpp/include/mpp_io_unstructured_write.inc

  10436 
  10437 !------------------------------------------------------------------------------
  10438 
  10439 !----------
  10440 # 1118 "mpp_io.F90" 2 
  10441 # 1 "../mpp/include/mpp_io_unstructured_read.inc" 1 
  10442 !***********************************************************************
  10443 !*                   GNU Lesser General Public License
  10444 !*
  10445 !* This file is part of the GFDL Flexible Modeling System (FMS).
  10446 !*
  10447 !* FMS is free software: you can redistribute it and/or modify it under
  10448 !* the terms of the GNU Lesser General Public License as published by
  10449 !* the Free Software Foundation, either version 3 of the License, or (at
  10450 !* your option) any later version.
  10451 !*
  10452 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  10453 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  10454 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  10455 !* for more details.
  10456 !*
  10457 !* You should have received a copy of the GNU Lesser General Public
  10458 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  10459 !***********************************************************************
  10460 
  10461 !----------
  10462 !ug support
  10463 
  10464 !------------------------------------------------------------------------------
  10465 !>Read in one-dimensional data for a field associated with an unstructured
  10466 !!mpp domain.
  10467 subroutine mpp_io_unstructured_read_r8_1D(funit, &
  10468                                           field, &
  10469                                           domain, &
  10470                                           fdata, &
  10471                                           tindex, &
  10472                                           start, &
  10473                                           nread, &
  10474                                           threading)
  10475 
  10476 !Inputs/outputs
  10477     integer(i4_kind),intent(in)                       :: funit     !<A file unit returned by mpp_open.
  10478     type(fieldtype),intent(in)                        :: field     !<A field whose data will be read in from the file.
  10479     type(domainUG),intent(in)                         :: domain    !<An unstructured mpp domain.
  10480     real(KIND=r8_kind),dimension(:),intent(inout)     :: fdata     !<The data that will be read in from the file.
  10481     integer(i4_kind),intent(in),optional              :: tindex    !<Time level index for a NetCDF file.
  10482     integer(i4_kind),dimension(:),intent(in),optional :: start     !<Corner indices for a NetCDF file.
  10483     integer(i4_kind),dimension(:),intent(in),optional :: nread     !<Edge lengths for a NetCDF file.
  10484     integer(i4_kind),intent(in),optional              :: threading !<Flag telling whether one or multiple ranks will read th
  10484 e file.
  10485 
  10486 !Local variables
  10487     integer(i4_kind)                          :: threading_flag !<Flag telling whether one or multiple ranks will read the f
  10487 ile.  This defaults to MPP_SINGLE.
  10488     type(domainUG),pointer                     :: io_domain      !<Pointer to the unstructured I/O domain.
  10489     integer(i4_kind)                          :: io_domain_npes !<The total number of ranks in an I/O domain pelist.
  10490     integer(i4_kind),dimension(:),allocatable :: pelist         !<A pelist.

Page 372         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10491     integer(i4_kind)                          :: p              !<Loop variable.
  10492     logical(l4_kind)                          :: compute_chksum !<Flag telling whether or not a check-sum of the read-in dat
  10492 a is calculated.
  10493     integer(i8_kind)                         :: chk            !<Calculated check-sum for the read in data.
  10494 
  10495 !Start the mpp timer.
  10496 !mpp_read_clock is a module variable.
  10497     call mpp_clock_begin(mpp_read_clock)
  10498 
  10499 !Make sure that the module is initialized.
  10500     if (.not. module_is_initialized) then
  10501         call mpp_error(FATAL, &
  10502                        "mpp_io_unstructured_read_r_1D:" &
  10503                        //" you must must first call mpp_io_init.")
  10504     endif
  10505 
  10506 !Make sure that another NetCDF file is not currently using the inputted
  10507 !file unit.
  10508     if (.not. mpp_file(funit)%valid) then
  10509         call mpp_error(FATAL, &
  10510                        "mpp_io_unstructured_read_r_1D:" &
  10511                        //" the inputted file unit is already in use.")
  10512     endif
  10513 
  10514 !If the data array has more than zero elements, then read in the data.
  10515     if (size(fdata) .gt. 0) then
  10516 
  10517 !Initialize the data to zero.
  10518         fdata = 0
  10519 
  10520 !Get the value for the "threading" flag.
  10521         threading_flag = MPP_SINGLE
  10522         if (present(threading)) then
  10523             threading_flag = threading
  10524         endif
  10525 
  10526 !Read in the data.
  10527         if (threading_flag .eq. MPP_MULTI) then
  10528 
  10529 !For the multi-rank case, directly read in the data.
  10530             call read_record_r8(funit, &
  10531                                 field, &
  10532                                 size(fdata), &
  10533                                 fdata, &
  10534                                 tindex, &
  10535                                 start_in=start, &
  10536                                 axsiz_in=nread)
  10537         elseif (threading_flag .eq. MPP_SINGLE) then
  10538 
  10539 !For the single-rank, first point to the I/O domain associated with
  10540 !the inputted unstructured mpp domain.
  10541             io_domain => null()
  10542             io_domain => mpp_get_UG_io_domain(domain)
  10543 
  10544 !Get the pelist associated with the I/O domain.
  10545             io_domain_npes = mpp_get_UG_domain_npes(io_domain)
  10546             allocate(pelist(io_domain_npes))

Page 373         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10547             call mpp_get_UG_domain_pelist(io_domain, &
  10548                                           pelist)
  10549             io_domain => null()
  10550 
  10551 !Let only the root rank of the pelist read in the data.
  10552             if (mpp_pe() .eq. pelist(1)) then
  10553                 call read_record_r8(funit, &
  10554                                     field, &
  10555                                     size(fdata), &
  10556                                     fdata, &
  10557                                     tindex, &
  10558                                     start_in=start, &
  10559                                     axsiz_in=nread)
  10560             endif
  10561 
  10562 !Send the data from the root rank to the rest of the ranks on the
  10563 !pelist.
  10564             if (mpp_pe() .eq. pelist(1)) then
  10565                 do p = 2,io_domain_npes
  10566                     call mpp_send(fdata, &
  10567                                   size(fdata), &
  10568                                   pelist(p), &
  10569                                   tag=COMM_TAG_1)
  10570                 enddo
  10571                 call mpp_sync_self()
  10572             else
  10573                 call mpp_recv(fdata, &
  10574                               size(fdata), &
  10575                               pelist(1), &
  10576                               block=.false., &
  10577                               tag=COMM_TAG_1)
  10578                 call mpp_sync_self(check=EVENT_RECV)
  10579             endif
  10580             deallocate(pelist)
  10581         else
  10582             call mpp_error(FATAL, &
  10583                            "mpp_io_unstructured_read_r_1D:" &
  10584                            //" threading should be MPP_SINGLE or MPP_MULTI")
  10585         endif
  10586     endif
  10587 
  10588 !Decided whether or not to compute a check-sum of the read-in data.  The
  10589 !check-sum is calculated if the inputted field's checksum values are not
  10590 !equal to the default checksum value for a field.
  10591     compute_chksum = .false.
  10592     if (any(field%checksum .ne. default_field%checksum)) then
  10593         compute_chksum = .true.
  10594     endif
  10595 
  10596 !If necessary, compute a check-sum of the read-in data.
  10597     if (compute_chksum) then
  10598 
  10599         if (field%type .eq. NF_INT) then
  10600             if (field%fill .eq. MPP_FILL_DOUBLE .or. field%fill .eq. &
  10601                 real(MPP_FILL_INT)) then
  10602                 chk = mpp_chksum(ceiling(fdata), &
  10603                                  mask_val=MPP_FILL_INT)

Page 374         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10604             else
  10605                 call mpp_error(NOTE, &
  10606                                "mpp_io_unstructured_read_r_1D:" &
  10607                                //" int field "//trim(field%name) &
  10608                                //" found fill. Icebergs, or code using" &
  10609                                //" defaults can safely ignore." &
  10610                                //" If manually overriding compressed" &
  10611                                //" restart fills, confirm this is what you" &
  10612                                //" want.")
  10613                 chk = mpp_chksum(ceiling(fdata), &
  10614                                  mask_val=field%fill)
  10615             endif
  10616         else
  10617             chk = mpp_chksum(fdata, mask_val=real(field%fill,KIND(fdata)))
  10618         endif
  10619 
  10620 !Print out the computed check-sum for the field.  This feature is
  10621 !currently turned off.  Uncomment the following lines to turn it
  10622 !back on.
  10623 !       if (mpp_pe() .eq. mpp_root_pe()) then
  10624 !           write(stdout(),'(A,Z16)') "mpp_read_compressed_2d chksum: " &
  10625 !                                     //trim(field%name)//" = ",chk
  10626 !           if (mod(chk,field%checksum(1)) .ne. 0) then
  10627 !               write(stdout(),'(A,Z16)') "File stored checksum: " &
  10628 !                                         //trim(field%name)//" = ", &
  10629 !                                         field%checksum(1)
  10630 !               call mpp_error(NOTE, &
  10631 !                              "mpp_io_unstructured_read_r_1D: " &
  10632 !                              //trim(field%name)//" failed!")
  10633 !           endif
  10634 !       endif
  10635     endif
  10636 
  10637 !Stop the mpp timer.
  10638     call mpp_clock_end(mpp_read_clock)
  10639 
  10640     return
  10641 end subroutine mpp_io_unstructured_read_r8_1D

Page 375         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_1D
2021-06-01 08:53 Entry Points                    ../mpp/include/mpp_io_unstructured_read.inc



ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_io_unstructured_read_r8_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   10592                                scalar                    10592                             
 CEILING                    Func   10602                                scalar                    10602,10613                       
 CHK                        Local  10493    I(8)            8           scalar                    10602,10613,10617                 
 COMPUTE_CHKSUM             Local  10492    L(4)            4           scalar                    10591,10593,10597                 
 DOMAIN                     Dummy  10469    DOMAINUG        544         scalar   ARG,IN           10542                             
 FDATA                      Dummy  10470    R(8)            8     1     1        ARG,INOUT        10515,10518,10532,10533,10555,1055
                                                                                                  6,10566,10567,10573,10574,10602,10
                                                                                                  613,10617                         
 FIELD                      Dummy  10468    FIELDTYPE       1096        scalar   ARG,IN           10531,10554,10592,10599,10600,1060
                                                                                                  7,10614,10617                     
 FUNIT                      Dummy  10467    I(4)            4           scalar   ARG,IN           10508,10530,10553                 
 IO_DOMAIN                  Local  10488    DOMAINUG        544         scalar   PTR              10541,10542,10545,10547,10549     
 IO_DOMAIN_NPES             Local  10489    I(4)            4           scalar                    10545,10546,10565                 
 L4_KIND                    Param  10492    I(4)            4           scalar   PRIV             10492,10671,10850,11033,11212,1139
                                                                                                  1                                 
 MPP_CHKSUM_I4_1D           Func   10602    I(8)            8           scalar   PRIV             10602,11143                       
 MPP_CHKSUM_I4_1D_RMASK     Func   10613    I(8)            8           scalar   PRIV             10613,11154                       
 MPP_CHKSUM_R8_1D           Func   10617    I(8)            8           scalar   PRIV             10617                             
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 8_1D                       Subr   10467                                         PRIV                                               
 MPP_RECV_REAL8             Subr   10573                                         PRIV             10573                             
 MPP_SEND_REAL8             Subr   10566                                         PRIV             10566                             
 NREAD                      Dummy  10473    I(4)            4     1     1        ARG,IN           10536,10559                       
 P                          Local  10491    I(4)            4           scalar                    10565,10568                       
 PELIST                     Local  10490    I(4)            4     1     1        ALC              10546,10548,10552,10564,10568,1057
                                                                                                  5,10580                           
 PRESENT                    Func   10522                                scalar                    10522                             
 REAL                       Func   10601                                scalar                    10601,10617                       
 SIZE                       Func   10515                                scalar                    10515,10532,10555,10567,10574     
 START                      Dummy  10472    I(4)            4     1     1        ARG,IN           10535,10558                       
 THREADING                  Dummy  10474    I(4)            4           scalar   ARG,IN           10522,10523                       
 THREADING_FLAG             Local  10487    I(4)            4           scalar                    10521,10523,10527,10537           
 TINDEX                     Dummy  10471    I(4)            4           scalar   ARG,IN           10534,10557                       
 TRIM                       Func   10607                                scalar                    10607                             

Page 376         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10642 
  10643 !------------------------------------------------------------------------------
  10644 !>Read in two-dimensional data for a field associated with an unstructured
  10645 !!mpp domain.
  10646 subroutine mpp_io_unstructured_read_r8_2D(funit, &
  10647                                          field, &
  10648                                          domain, &
  10649                                          fdata, &
  10650                                          tindex, &
  10651                                          start, &
  10652                                          nread, &
  10653                                          threading)
  10654 
  10655 !Inputs/outputs
  10656     integer(i4_kind),intent(in)                       :: funit     !<A file unit returned by mpp_open.
  10657     type(fieldtype),intent(in)                        :: field     !<A field whose data will be read in from the file.
  10658     type(domainUG),intent(in)                         :: domain    !<An unstructured mpp domain.
  10659     real(KIND=r8_kind),dimension(:,:),intent(inout)   :: fdata     !<The data that will be read in from the file.
  10660     integer(i4_kind),intent(in),optional              :: tindex    !<Time level index for a NetCDF file.
  10661     integer(i4_kind),dimension(:),intent(in),optional :: start     !<Corner indices for a NetCDF file.
  10662     integer(i4_kind),dimension(:),intent(in),optional :: nread     !<Edge lengths for a NetCDF file.
  10663     integer(i4_kind),intent(in),optional              :: threading !<Flag telling whether one or multiple ranks will read th
  10663 e file.
  10664 
  10665 !Local variables
  10666     integer(i4_kind)                          :: threading_flag !<Flag telling whether one or multiple ranks will read the f
  10666 ile.  This defaults to MPP_SINGLE.
  10667     type(domainUG),pointer                     :: io_domain      !<Pointer to the unstructured I/O domain.
  10668     integer(i4_kind)                          :: io_domain_npes !<The total number of ranks in an I/O domain pelist.
  10669     integer(i4_kind),dimension(:),allocatable :: pelist         !<A pelist.
  10670     integer(i4_kind)                          :: p              !<Loop variable.
  10671     logical(l4_kind)                          :: compute_chksum !<Flag telling whether or not a check-sum of the read-in dat
  10671 a is calculated.
  10672     integer(i8_kind)                         :: chk            !<Calculated check-sum for the read in data.
  10673 
  10674 !Start the mpp timer.
  10675 !mpp_read_clock is a module variable.
  10676     call mpp_clock_begin(mpp_read_clock)
  10677 
  10678 !Make sure that the module is initialized.
  10679     if (.not. module_is_initialized) then
  10680         call mpp_error(FATAL, &
  10681                        "mpp_io_unstructured_read_r_2D:" &
  10682                        //" you must must first call mpp_io_init.")
  10683     endif
  10684 
  10685 !Make sure that another NetCDF file is not currently using the inputted
  10686 !file unit.
  10687     if (.not. mpp_file(funit)%valid) then
  10688         call mpp_error(FATAL, &
  10689                        "mpp_io_unstructured_read_r_2D:" &
  10690                        //" the inputted file unit is already in use.")
  10691     endif
  10692 
  10693 !If the data array has more than zero elements, then read in the data.
  10694     if (size(fdata) .gt. 0) then
  10695 

Page 377         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_2D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10696 !Initialize the data to zero.
  10697         fdata = 0
  10698 
  10699 !Get the value for the "threading" flag.
  10700         threading_flag = MPP_SINGLE
  10701         if (present(threading)) then
  10702             threading_flag = threading
  10703         endif
  10704 
  10705 !Read in the data.
  10706         if (threading_flag .eq. MPP_MULTI) then
  10707 
  10708 !For the multi-rank case, directly read in the data.
  10709             call read_record_r8(funit, &
  10710                                 field, &
  10711                                 size(fdata), &
  10712                                 fdata, &
  10713                                 tindex, &
  10714                                 start_in=start, &
  10715                                 axsiz_in=nread)
  10716         elseif (threading_flag .eq. MPP_SINGLE) then
  10717 
  10718 !For the single-rank, first point to the I/O domain associated with
  10719 !the inputted unstructured mpp domain.
  10720             io_domain => null()
  10721             io_domain => mpp_get_UG_io_domain(domain)
  10722 
  10723 !Get the pelist associated with the I/O domain.
  10724             io_domain_npes = mpp_get_UG_domain_npes(io_domain)
  10725             allocate(pelist(io_domain_npes))
  10726             call mpp_get_UG_domain_pelist(io_domain, &
  10727                                           pelist)
  10728             io_domain => null()
  10729 
  10730 !Let only the root rank of the pelist read in the data.
  10731             if (mpp_pe() .eq. pelist(1)) then
  10732                 call read_record_r8(funit, &
  10733                                     field, &
  10734                                     size(fdata), &
  10735                                     fdata, &
  10736                                     tindex, &
  10737                                     start_in=start, &
  10738                                     axsiz_in=nread)
  10739             endif
  10740 
  10741 !Send the data from the root rank to the rest of the ranks on the
  10742 !pelist.
  10743             if (mpp_pe() .eq. pelist(1)) then
  10744                 do p = 2,io_domain_npes
  10745                     call mpp_send(fdata, &
  10746                                   size(fdata), &
  10747                                   pelist(p), &
  10748                                   tag=COMM_TAG_1)
  10749                 enddo
  10750                 call mpp_sync_self()
  10751             else
  10752                 call mpp_recv(fdata, &

Page 378         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_2D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10753                               size(fdata), &
  10754                               pelist(1), &
  10755                               block=.false., &
  10756                               tag=COMM_TAG_1)
  10757                 call mpp_sync_self(check=EVENT_RECV)
  10758             endif
  10759             deallocate(pelist)
  10760         else
  10761             call mpp_error(FATAL, &
  10762                            "mpp_io_unstructured_read_r_2D:" &
  10763                            //" threading should be MPP_SINGLE or MPP_MULTI")
  10764         endif
  10765     endif
  10766 
  10767 !Decided whether or not to compute a check-sum of the read-in data.  The
  10768 !check-sum is calculated if the inputted field's checksum values are not
  10769 !equal to the default checksum value for a field.
  10770     compute_chksum = .false.
  10771     if (any(field%checksum .ne. default_field%checksum)) then
  10772         compute_chksum = .true.
  10773     endif
  10774 
  10775 !If necessary, compute a check-sum of the read-in data.
  10776     if (compute_chksum) then
  10777 
  10778         if (field%type .eq. NF_INT) then
  10779             if (field%fill .eq. MPP_FILL_DOUBLE .or. field%fill .eq. &
  10780                 real(MPP_FILL_INT)) then
  10781                 chk = mpp_chksum(ceiling(fdata), &
  10782                                  mask_val=MPP_FILL_INT)
  10783             else
  10784                 call mpp_error(NOTE, &
  10785                                "mpp_io_unstructured_read_r_2D:" &
  10786                                //" int field "//trim(field%name) &
  10787                                //" found fill. Icebergs, or code using" &
  10788                                //" defaults can safely ignore." &
  10789                                //" If manually overriding compressed" &
  10790                                //" restart fills, confirm this is what you" &
  10791                                //" want.")
  10792                 chk = mpp_chksum(ceiling(fdata), &
  10793                                  mask_val=field%fill)
  10794             endif
  10795         else
  10796             chk = mpp_chksum(fdata, mask_val=real(field%fill,KIND(fdata)))
  10797         endif
  10798 
  10799 !Print out the computed check-sum for the field.  This feature is
  10800 !currently turned off.  Uncomment the following lines to turn it
  10801 !back on.
  10802 !       if (mpp_pe() .eq. mpp_root_pe()) then
  10803 !           write(stdout(),'(A,Z16)') "mpp_read_compressed_2d chksum: " &
  10804 !                                     //trim(field%name)//" = ",chk
  10805 !           if (mod(chk,field%checksum(1)) .ne. 0) then
  10806 !               write(stdout(),'(A,Z16)') "File stored checksum: " &
  10807 !                                         //trim(field%name)//" = ", &
  10808 !                                         field%checksum(1)
  10809 !               call mpp_error(NOTE, &

Page 379         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_2D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10810 !                              "mpp_io_unstructured_read_r_2D: " &
  10811 !                              //trim(field%name)//" failed!")
  10812 !           endif
  10813 !       endif
  10814     endif
  10815 
  10816 !Stop the mpp timer.
  10817     call mpp_clock_end(mpp_read_clock)
  10818 
  10819     return
  10820 end subroutine mpp_io_unstructured_read_r8_2D


ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_io_unstructured_read_r8_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   10771                                scalar                    10771                             
 CEILING                    Func   10781                                scalar                    10781,10792                       
 CHK                        Local  10672    I(8)            8           scalar                    10781,10792,10796                 
 COMPUTE_CHKSUM             Local  10671    L(4)            4           scalar                    10770,10772,10776                 
 DOMAIN                     Dummy  10648    DOMAINUG        544         scalar   ARG,IN           10721                             
 FDATA                      Dummy  10649    R(8)            8     2     1        ARG,INOUT        10694,10697,10711,10712,10734,1073
                                                                                                  5,10745,10746,10752,10753,10781,10
                                                                                                  792,10796                         
 FIELD                      Dummy  10647    FIELDTYPE       1096        scalar   ARG,IN           10710,10733,10771,10778,10779,1078
                                                                                                  6,10793,10796                     
 FUNIT                      Dummy  10646    I(4)            4           scalar   ARG,IN           10687,10709,10732                 
 IO_DOMAIN                  Local  10667    DOMAINUG        544         scalar   PTR              10720,10721,10724,10726,10728     
 IO_DOMAIN_NPES             Local  10668    I(4)            4           scalar                    10724,10725,10744                 
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 8_2D                       Subr   10646                                         PRIV                                               
 MPP_RECV_REAL8_2D          Subr   10752                                         PRIV             10752                             
 MPP_SEND_REAL8_2D          Subr   10745                                         PRIV             10745                             
 NREAD                      Dummy  10652    I(4)            4     1     1        ARG,IN           10715,10738                       
 P                          Local  10670    I(4)            4           scalar                    10744,10747                       
 PELIST                     Local  10669    I(4)            4     1     1        ALC              10725,10727,10731,10743,10747,1075
                                                                                                  4,10759                           
 PRESENT                    Func   10701                                scalar                    10701                             
 REAL                       Func   10780                                scalar                    10780,10796                       
 SIZE                       Func   10694                                scalar                    10694,10711,10734,10746,10753     
 START                      Dummy  10651    I(4)            4     1     1        ARG,IN           10714,10737                       
 THREADING                  Dummy  10653    I(4)            4           scalar   ARG,IN           10701,10702                       
 THREADING_FLAG             Local  10666    I(4)            4           scalar                    10700,10702,10706,10716           
 TINDEX                     Dummy  10650    I(4)            4           scalar   ARG,IN           10713,10736                       
 TRIM                       Func   10786                                scalar                    10786                             

Page 380         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_2D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10821 
  10822 !------------------------------------------------------------------------------
  10823 !>Read in three-dimensional data for a field associated with an unstructured
  10824 !!mpp domain.
  10825 subroutine mpp_io_unstructured_read_r8_3D(funit, &
  10826                                          field, &
  10827                                          domain, &
  10828                                          fdata, &
  10829                                          tindex, &
  10830                                          start, &
  10831                                          nread, &
  10832                                          threading)
  10833 
  10834 !Inputs/outputs
  10835     integer(i4_kind),intent(in)                       :: funit     !<A file unit returned by mpp_open.
  10836     type(fieldtype),intent(in)                        :: field     !<A field whose data will be read in from the file.
  10837     type(domainUG),intent(in)                         :: domain    !<An unstructured mpp domain.
  10838     real(KIND=r8_kind),dimension(:,:,:),intent(inout) :: fdata     !<The data that will be read in from the file.
  10839     integer(i4_kind),intent(in),optional              :: tindex    !<Time level index for a NetCDF file.
  10840     integer(i4_kind),dimension(:),intent(in),optional :: start     !<Corner indices for a NetCDF file.
  10841     integer(i4_kind),dimension(:),intent(in),optional :: nread     !<Edge lengths for a NetCDF file.
  10842     integer(i4_kind),intent(in),optional              :: threading !<Flag telling whether one or multiple ranks will read th
  10842 e file.
  10843 
  10844 !Local variables
  10845     integer(i4_kind)                          :: threading_flag !<Flag telling whether one or multiple ranks will read the f
  10845 ile.  This defaults to MPP_SINGLE.
  10846     type(domainUG),pointer                     :: io_domain      !<Pointer to the unstructured I/O domain.
  10847     integer(i4_kind)                          :: io_domain_npes !<The total number of ranks in an I/O domain pelist.
  10848     integer(i4_kind),dimension(:),allocatable :: pelist         !<A pelist.
  10849     integer(i4_kind)                          :: p              !<Loop variable.
  10850     logical(l4_kind)                          :: compute_chksum !<Flag telling whether or not a check-sum of the read-in dat
  10850 a is calculated.
  10851     integer(i8_kind)                         :: chk            !<Calculated check-sum for the read in data.
  10852 
  10853 !Start the mpp timer.
  10854 !mpp_read_clock is a module variable.
  10855     call mpp_clock_begin(mpp_read_clock)
  10856 
  10857 !Make sure that the module is initialized.
  10858     if (.not. module_is_initialized) then
  10859         call mpp_error(FATAL, &
  10860                        "mpp_io_unstructured_read_r_3D:" &
  10861                        //" you must must first call mpp_io_init.")
  10862     endif
  10863 
  10864 !Make sure that another NetCDF file is not currently using the inputted
  10865 !file unit.
  10866     if (.not. mpp_file(funit)%valid) then
  10867         call mpp_error(FATAL, &
  10868                        "mpp_io_unstructured_read_r_3D:" &
  10869                        //" the inputted file unit is already in use.")
  10870     endif
  10871 
  10872 !If the data array has more than zero elements, then read in the data.
  10873     if (size(fdata) .gt. 0) then
  10874 

Page 381         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_3D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10875 !Initialize the data to zero.
  10876         fdata = 0
  10877 
  10878 !Get the value for the "threading" flag.
  10879         threading_flag = MPP_SINGLE
  10880         if (present(threading)) then
  10881             threading_flag = threading
  10882         endif
  10883 
  10884 !Read in the data.
  10885         if (threading_flag .eq. MPP_MULTI) then
  10886 
  10887 !For the multi-rank case, directly read in the data.
  10888             call read_record_r8(funit, &
  10889                                 field, &
  10890                                 size(fdata), &
  10891                                 fdata, &
  10892                                 tindex, &
  10893                                 start_in=start, &
  10894                                 axsiz_in=nread)
  10895         elseif (threading_flag .eq. MPP_SINGLE) then
  10896 
  10897 !For the single-rank, first point to the I/O domain associated with
  10898 !the inputted unstructured mpp domain.
  10899             io_domain => null()
  10900             io_domain => mpp_get_UG_io_domain(domain)
  10901 
  10902 !Get the pelist associated with the I/O domain.
  10903             io_domain_npes = mpp_get_UG_domain_npes(io_domain)
  10904             allocate(pelist(io_domain_npes))
  10905             call mpp_get_UG_domain_pelist(io_domain, &
  10906                                           pelist)
  10907             io_domain => null()
  10908 
  10909 !Let only the root rank of the pelist read in the data.
  10910             if (mpp_pe() .eq. pelist(1)) then
  10911                 call read_record_r8(funit, &
  10912                                     field, &
  10913                                     size(fdata), &
  10914                                     fdata, &
  10915                                     tindex, &
  10916                                     start_in=start, &
  10917                                     axsiz_in=nread)
  10918             endif
  10919 
  10920 !Send the data from the root rank to the rest of the ranks on the
  10921 !pelist.
  10922             if (mpp_pe() .eq. pelist(1)) then
  10923                 do p = 2,io_domain_npes
  10924                     call mpp_send(fdata, &
  10925                                   size(fdata), &
  10926                                   pelist(p), &
  10927                                   tag=COMM_TAG_1)
  10928                 enddo
  10929                 call mpp_sync_self()
  10930             else
  10931                 call mpp_recv(fdata, &

Page 382         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_3D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10932                               size(fdata), &
  10933                               pelist(1), &
  10934                               block=.false., &
  10935                               tag=COMM_TAG_1)
  10936                 call mpp_sync_self(check=EVENT_RECV)
  10937             endif
  10938             deallocate(pelist)
  10939         else
  10940             call mpp_error(FATAL, &
  10941                            "mpp_io_unstructured_read_r_3D:" &
  10942                            //" threading should be MPP_SINGLE or MPP_MULTI")
  10943         endif
  10944     endif
  10945 
  10946 !Decided whether or not to compute a check-sum of the read-in data.  The
  10947 !check-sum is calculated if the inputted field's checksum values are not
  10948 !equal to the default checksum value for a field.
  10949     compute_chksum = .false.
  10950     if (any(field%checksum .ne. default_field%checksum)) then
  10951         compute_chksum = .true.
  10952     endif
  10953 
  10954 !If necessary, compute a check-sum of the read-in data.
  10955     if (compute_chksum) then
  10956 
  10957         if (field%type .eq. NF_INT) then
  10958             if (field%fill .eq. MPP_FILL_DOUBLE .or. field%fill .eq. &
  10959                 real(MPP_FILL_INT)) then
  10960                 chk = mpp_chksum(ceiling(fdata), &
  10961                                  mask_val=MPP_FILL_INT)
  10962             else
  10963                 call mpp_error(NOTE, &
  10964                                "mpp_io_unstructured_read_r_3D:" &
  10965                                //" int field "//trim(field%name) &
  10966                                //" found fill. Icebergs, or code using" &
  10967                                //" defaults can safely ignore." &
  10968                                //" If manually overriding compressed" &
  10969                                //" restart fills, confirm this is what you" &
  10970                                //" want.")
  10971                 chk = mpp_chksum(ceiling(fdata), &
  10972                                  mask_val=field%fill)
  10973             endif
  10974         else
  10975             chk = mpp_chksum(fdata, mask_val=real(field%fill,KIND(fdata)))
  10976         endif
  10977 
  10978 !Print out the computed check-sum for the field.  This feature is
  10979 !currently turned off.  Uncomment the following lines to turn it
  10980 !back on.
  10981 !       if (mpp_pe() .eq. mpp_root_pe()) then
  10982 !           write(stdout(),'(A,Z16)') "mpp_read_compressed_2d chksum: " &
  10983 !                                     //trim(field%name)//" = ",chk
  10984 !           if (mod(chk,field%checksum(1)) .ne. 0) then
  10985 !               write(stdout(),'(A,Z16)') "File stored checksum: " &
  10986 !                                         //trim(field%name)//" = ", &
  10987 !                                         field%checksum(1)
  10988 !               call mpp_error(NOTE, &

Page 383         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_3D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  10989 !                              "mpp_io_unstructured_read_r_3D: " &
  10990 !                              //trim(field%name)//" failed!")
  10991 !           endif
  10992 !       endif
  10993     endif
  10994 
  10995 !Stop the mpp timer.
  10996     call mpp_clock_end(mpp_read_clock)
  10997 
  10998     return
  10999 end subroutine mpp_io_unstructured_read_r8_3D


ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_io_unstructured_read_r8_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   10950                                scalar                    10950                             
 CEILING                    Func   10960                                scalar                    10960,10971                       
 CHK                        Local  10851    I(8)            8           scalar                    10960,10971,10975                 
 COMPUTE_CHKSUM             Local  10850    L(4)            4           scalar                    10949,10951,10955                 
 DOMAIN                     Dummy  10827    DOMAINUG        544         scalar   ARG,IN           10900                             
 FDATA                      Dummy  10828    R(8)            8     3     1        ARG,INOUT        10873,10876,10890,10891,10913,1091
                                                                                                  4,10924,10925,10931,10932,10960,10
                                                                                                  971,10975                         
 FIELD                      Dummy  10826    FIELDTYPE       1096        scalar   ARG,IN           10889,10912,10950,10957,10958,1096
                                                                                                  5,10972,10975                     
 FUNIT                      Dummy  10825    I(4)            4           scalar   ARG,IN           10866,10888,10911                 
 IO_DOMAIN                  Local  10846    DOMAINUG        544         scalar   PTR              10899,10900,10903,10905,10907     
 IO_DOMAIN_NPES             Local  10847    I(4)            4           scalar                    10903,10904,10923                 
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 8_3D                       Subr   10825                                         PRIV                                               
 MPP_RECV_REAL8_3D          Subr   10931                                         PRIV             10931                             
 MPP_SEND_REAL8_3D          Subr   10924                                         PRIV             10924                             
 NREAD                      Dummy  10831    I(4)            4     1     1        ARG,IN           10894,10917                       
 P                          Local  10849    I(4)            4           scalar                    10923,10926                       
 PELIST                     Local  10848    I(4)            4     1     1        ALC              10904,10906,10910,10922,10926,1093
                                                                                                  3,10938                           
 PRESENT                    Func   10880                                scalar                    10880                             
 REAL                       Func   10959                                scalar                    10959,10975                       
 SIZE                       Func   10873                                scalar                    10873,10890,10913,10925,10932     
 START                      Dummy  10830    I(4)            4     1     1        ARG,IN           10893,10916                       
 THREADING                  Dummy  10832    I(4)            4           scalar   ARG,IN           10880,10881                       
 THREADING_FLAG             Local  10845    I(4)            4           scalar                    10879,10881,10885,10895           
 TINDEX                     Dummy  10829    I(4)            4           scalar   ARG,IN           10892,10915                       
 TRIM                       Func   10965                                scalar                    10965                             

Page 384         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R8_3D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11000 
  11001 !------------------------------------------------------------------------------
  11002 
  11003 !----------
  11004 
  11005 !------------------------------------------------------------------------------
  11006 !>Read in one-dimensional data for a field associated with an unstructured
  11007 !!mpp domain.
  11008 subroutine mpp_io_unstructured_read_r4_1D(funit, &
  11009                                           field, &
  11010                                           domain, &
  11011                                           fdata, &
  11012                                           tindex, &
  11013                                           start, &
  11014                                           nread, &
  11015                                           threading)
  11016 
  11017 !Inputs/outputs
  11018     integer(i4_kind),intent(in)                       :: funit     !<A file unit returned by mpp_open.
  11019     type(fieldtype),intent(in)                        :: field     !<A field whose data will be read in from the file.
  11020     type(domainUG),intent(in)                         :: domain    !<An unstructured mpp domain.
  11021     real(KIND=r4_kind),dimension(:),intent(inout)     :: fdata     !<The data that will be read in from the file.
  11022     integer(i4_kind),intent(in),optional              :: tindex    !<Time level index for a NetCDF file.
  11023     integer(i4_kind),dimension(:),intent(in),optional :: start     !<Corner indices for a NetCDF file.
  11024     integer(i4_kind),dimension(:),intent(in),optional :: nread     !<Edge lengths for a NetCDF file.
  11025     integer(i4_kind),intent(in),optional              :: threading !<Flag telling whether one or multiple ranks will read th
  11025 e file.
  11026 
  11027 !Local variables
  11028     integer(i4_kind)                          :: threading_flag !<Flag telling whether one or multiple ranks will read the f
  11028 ile.  This defaults to MPP_SINGLE.
  11029     type(domainUG),pointer                     :: io_domain      !<Pointer to the unstructured I/O domain.
  11030     integer(i4_kind)                          :: io_domain_npes !<The total number of ranks in an I/O domain pelist.
  11031     integer(i4_kind),dimension(:),allocatable :: pelist         !<A pelist.
  11032     integer(i4_kind)                          :: p              !<Loop variable.
  11033     logical(l4_kind)                          :: compute_chksum !<Flag telling whether or not a check-sum of the read-in dat
  11033 a is calculated.
  11034     integer(i8_kind)                         :: chk            !<Calculated check-sum for the read in data.
  11035 
  11036 !Start the mpp timer.
  11037 !mpp_read_clock is a module variable.
  11038     call mpp_clock_begin(mpp_read_clock)
  11039 
  11040 !Make sure that the module is initialized.
  11041     if (.not. module_is_initialized) then
  11042         call mpp_error(FATAL, &
  11043                        "mpp_io_unstructured_read_r_1D:" &
  11044                        //" you must must first call mpp_io_init.")
  11045     endif
  11046 
  11047 !Make sure that another NetCDF file is not currently using the inputted
  11048 !file unit.
  11049     if (.not. mpp_file(funit)%valid) then
  11050         call mpp_error(FATAL, &
  11051                        "mpp_io_unstructured_read_r_1D:" &
  11052                        //" the inputted file unit is already in use.")
  11053     endif

Page 385         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11054 
  11055 !If the data array has more than zero elements, then read in the data.
  11056     if (size(fdata) .gt. 0) then
  11057 
  11058 !Initialize the data to zero.
  11059         fdata = 0
  11060 
  11061 !Get the value for the "threading" flag.
  11062         threading_flag = MPP_SINGLE
  11063         if (present(threading)) then
  11064             threading_flag = threading
  11065         endif
  11066 
  11067 !Read in the data.
  11068         if (threading_flag .eq. MPP_MULTI) then
  11069 
  11070 !For the multi-rank case, directly read in the data.
  11071             call read_record_r4(funit, &
  11072                                 field, &
  11073                                 size(fdata), &
  11074                                 fdata, &
  11075                                 tindex, &
  11076                                 start_in=start, &
  11077                                 axsiz_in=nread)
  11078         elseif (threading_flag .eq. MPP_SINGLE) then
  11079 
  11080 !For the single-rank, first point to the I/O domain associated with
  11081 !the inputted unstructured mpp domain.
  11082             io_domain => null()
  11083             io_domain => mpp_get_UG_io_domain(domain)
  11084 
  11085 !Get the pelist associated with the I/O domain.
  11086             io_domain_npes = mpp_get_UG_domain_npes(io_domain)
  11087             allocate(pelist(io_domain_npes))
  11088             call mpp_get_UG_domain_pelist(io_domain, &
  11089                                           pelist)
  11090             io_domain => null()
  11091 
  11092 !Let only the root rank of the pelist read in the data.
  11093             if (mpp_pe() .eq. pelist(1)) then
  11094                 call read_record_r4(funit, &
  11095                                     field, &
  11096                                     size(fdata), &
  11097                                     fdata, &
  11098                                     tindex, &
  11099                                     start_in=start, &
  11100                                     axsiz_in=nread)
  11101             endif
  11102 
  11103 !Send the data from the root rank to the rest of the ranks on the
  11104 !pelist.
  11105             if (mpp_pe() .eq. pelist(1)) then
  11106                 do p = 2,io_domain_npes
  11107                     call mpp_send(fdata, &
  11108                                   size(fdata), &
  11109                                   pelist(p), &
  11110                                   tag=COMM_TAG_1)

Page 386         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11111                 enddo
  11112                 call mpp_sync_self()
  11113             else
  11114                 call mpp_recv(fdata, &
  11115                               size(fdata), &
  11116                               pelist(1), &
  11117                               block=.false., &
  11118                               tag=COMM_TAG_1)
  11119                 call mpp_sync_self(check=EVENT_RECV)
  11120             endif
  11121             deallocate(pelist)
  11122         else
  11123             call mpp_error(FATAL, &
  11124                            "mpp_io_unstructured_read_r_1D:" &
  11125                            //" threading should be MPP_SINGLE or MPP_MULTI")
  11126         endif
  11127     endif
  11128 
  11129 !Decided whether or not to compute a check-sum of the read-in data.  The
  11130 !check-sum is calculated if the inputted field's checksum values are not
  11131 !equal to the default checksum value for a field.
  11132     compute_chksum = .false.
  11133     if (any(field%checksum .ne. default_field%checksum)) then
  11134         compute_chksum = .true.
  11135     endif
  11136 
  11137 !If necessary, compute a check-sum of the read-in data.
  11138     if (compute_chksum) then
  11139 
  11140         if (field%type .eq. NF_INT) then
  11141             if (field%fill .eq. MPP_FILL_DOUBLE .or. field%fill .eq. &
  11142                 real(MPP_FILL_INT)) then
  11143                 chk = mpp_chksum(ceiling(fdata), &
  11144                                  mask_val=MPP_FILL_INT)
  11145             else
  11146                 call mpp_error(NOTE, &
  11147                                "mpp_io_unstructured_read_r_1D:" &
  11148                                //" int field "//trim(field%name) &
  11149                                //" found fill. Icebergs, or code using" &
  11150                                //" defaults can safely ignore." &
  11151                                //" If manually overriding compressed" &
  11152                                //" restart fills, confirm this is what you" &
  11153                                //" want.")
  11154                 chk = mpp_chksum(ceiling(fdata), &
  11155                                  mask_val=field%fill)
  11156             endif
  11157         else
  11158             chk = mpp_chksum(fdata, mask_val=real(field%fill,KIND(fdata)))
  11159         endif
  11160 
  11161 !Print out the computed check-sum for the field.  This feature is
  11162 !currently turned off.  Uncomment the following lines to turn it
  11163 !back on.
  11164 !       if (mpp_pe() .eq. mpp_root_pe()) then
  11165 !           write(stdout(),'(A,Z16)') "mpp_read_compressed_2d chksum: " &
  11166 !                                     //trim(field%name)//" = ",chk
  11167 !           if (mod(chk,field%checksum(1)) .ne. 0) then

Page 387         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11168 !               write(stdout(),'(A,Z16)') "File stored checksum: " &
  11169 !                                         //trim(field%name)//" = ", &
  11170 !                                         field%checksum(1)
  11171 !               call mpp_error(NOTE, &
  11172 !                              "mpp_io_unstructured_read_r_1D: " &
  11173 !                              //trim(field%name)//" failed!")
  11174 !           endif
  11175 !       endif
  11176     endif
  11177 
  11178 !Stop the mpp timer.
  11179     call mpp_clock_end(mpp_read_clock)
  11180 
  11181     return
  11182 end subroutine mpp_io_unstructured_read_r4_1D


ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_io_unstructured_read_r4_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11133                                scalar                    11133                             
 CEILING                    Func   11143                                scalar                    11143,11154                       
 CHK                        Local  11034    I(8)            8           scalar                    11143,11154,11158                 
 COMPUTE_CHKSUM             Local  11033    L(4)            4           scalar                    11132,11134,11138                 
 DOMAIN                     Dummy  11010    DOMAINUG        544         scalar   ARG,IN           11083                             
 FDATA                      Dummy  11011    R(4)            4     1     1        ARG,INOUT        11056,11059,11073,11074,11096,1109
                                                                                                  7,11107,11108,11114,11115,11143,11
                                                                                                  154,11158                         
 FIELD                      Dummy  11009    FIELDTYPE       1096        scalar   ARG,IN           11072,11095,11133,11140,11141,1114
                                                                                                  8,11155,11158                     
 FUNIT                      Dummy  11008    I(4)            4           scalar   ARG,IN           11049,11071,11094                 
 IO_DOMAIN                  Local  11029    DOMAINUG        544         scalar   PTR              11082,11083,11086,11088,11090     
 IO_DOMAIN_NPES             Local  11030    I(4)            4           scalar                    11086,11087,11106                 
 MPP_CHKSUM_R4_1D           Func   11158    I(8)            8           scalar   PRIV             11158                             
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 4_1D                       Subr   11008                                         PRIV                                               
 MPP_RECV_REAL4             Subr   11114                                         PRIV             11114                             
 MPP_SEND_REAL4             Subr   11107                                         PRIV             11107                             
 NREAD                      Dummy  11014    I(4)            4     1     1        ARG,IN           11077,11100                       
 P                          Local  11032    I(4)            4           scalar                    11106,11109                       
 PELIST                     Local  11031    I(4)            4     1     1        ALC              11087,11089,11093,11105,11109,1111
                                                                                                  6,11121                           
 PRESENT                    Func   11063                                scalar                    11063                             
 REAL                       Func   11142                                scalar                    11142,11158                       
 SIZE                       Func   11056                                scalar                    11056,11073,11096,11108,11115     
 START                      Dummy  11013    I(4)            4     1     1        ARG,IN           11076,11099                       
 THREADING                  Dummy  11015    I(4)            4           scalar   ARG,IN           11063,11064                       
 THREADING_FLAG             Local  11028    I(4)            4           scalar                    11062,11064,11068,11078           
 TINDEX                     Dummy  11012    I(4)            4           scalar   ARG,IN           11075,11098                       

Page 388         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_1D
2021-06-01 08:53 Symbol Table                    ../mpp/include/mpp_io_unstructured_read.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TRIM                       Func   11148                                scalar                    11148                             

Page 389         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_1D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11183 
  11184 !------------------------------------------------------------------------------
  11185 !>Read in two-dimensional data for a field associated with an unstructured
  11186 !!mpp domain.
  11187 subroutine mpp_io_unstructured_read_r4_2D(funit, &
  11188                                          field, &
  11189                                          domain, &
  11190                                          fdata, &
  11191                                          tindex, &
  11192                                          start, &
  11193                                          nread, &
  11194                                          threading)
  11195 
  11196 !Inputs/outputs
  11197     integer(i4_kind),intent(in)                       :: funit     !<A file unit returned by mpp_open.
  11198     type(fieldtype),intent(in)                        :: field     !<A field whose data will be read in from the file.
  11199     type(domainUG),intent(in)                         :: domain    !<An unstructured mpp domain.
  11200     real(KIND=r4_kind),dimension(:,:),intent(inout)   :: fdata     !<The data that will be read in from the file.
  11201     integer(i4_kind),intent(in),optional              :: tindex    !<Time level index for a NetCDF file.
  11202     integer(i4_kind),dimension(:),intent(in),optional :: start     !<Corner indices for a NetCDF file.
  11203     integer(i4_kind),dimension(:),intent(in),optional :: nread     !<Edge lengths for a NetCDF file.
  11204     integer(i4_kind),intent(in),optional              :: threading !<Flag telling whether one or multiple ranks will read th
  11204 e file.
  11205 
  11206 !Local variables
  11207     integer(i4_kind)                          :: threading_flag !<Flag telling whether one or multiple ranks will read the f
  11207 ile.  This defaults to MPP_SINGLE.
  11208     type(domainUG),pointer                     :: io_domain      !<Pointer to the unstructured I/O domain.
  11209     integer(i4_kind)                          :: io_domain_npes !<The total number of ranks in an I/O domain pelist.
  11210     integer(i4_kind),dimension(:),allocatable :: pelist         !<A pelist.
  11211     integer(i4_kind)                          :: p              !<Loop variable.
  11212     logical(l4_kind)                          :: compute_chksum !<Flag telling whether or not a check-sum of the read-in dat
  11212 a is calculated.
  11213     integer(i8_kind)                         :: chk            !<Calculated check-sum for the read in data.
  11214 
  11215 !Start the mpp timer.
  11216 !mpp_read_clock is a module variable.
  11217     call mpp_clock_begin(mpp_read_clock)
  11218 
  11219 !Make sure that the module is initialized.
  11220     if (.not. module_is_initialized) then
  11221         call mpp_error(FATAL, &
  11222                        "mpp_io_unstructured_read_r_2D:" &
  11223                        //" you must must first call mpp_io_init.")
  11224     endif
  11225 
  11226 !Make sure that another NetCDF file is not currently using the inputted
  11227 !file unit.
  11228     if (.not. mpp_file(funit)%valid) then
  11229         call mpp_error(FATAL, &
  11230                        "mpp_io_unstructured_read_r_2D:" &
  11231                        //" the inputted file unit is already in use.")
  11232     endif
  11233 
  11234 !If the data array has more than zero elements, then read in the data.
  11235     if (size(fdata) .gt. 0) then
  11236 

Page 390         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_2D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11237 !Initialize the data to zero.
  11238         fdata = 0
  11239 
  11240 !Get the value for the "threading" flag.
  11241         threading_flag = MPP_SINGLE
  11242         if (present(threading)) then
  11243             threading_flag = threading
  11244         endif
  11245 
  11246 !Read in the data.
  11247         if (threading_flag .eq. MPP_MULTI) then
  11248 
  11249 !For the multi-rank case, directly read in the data.
  11250             call read_record_r4(funit, &
  11251                                 field, &
  11252                                 size(fdata), &
  11253                                 fdata, &
  11254                                 tindex, &
  11255                                 start_in=start, &
  11256                                 axsiz_in=nread)
  11257         elseif (threading_flag .eq. MPP_SINGLE) then
  11258 
  11259 !For the single-rank, first point to the I/O domain associated with
  11260 !the inputted unstructured mpp domain.
  11261             io_domain => null()
  11262             io_domain => mpp_get_UG_io_domain(domain)
  11263 
  11264 !Get the pelist associated with the I/O domain.
  11265             io_domain_npes = mpp_get_UG_domain_npes(io_domain)
  11266             allocate(pelist(io_domain_npes))
  11267             call mpp_get_UG_domain_pelist(io_domain, &
  11268                                           pelist)
  11269             io_domain => null()
  11270 
  11271 !Let only the root rank of the pelist read in the data.
  11272             if (mpp_pe() .eq. pelist(1)) then
  11273                 call read_record_r4(funit, &
  11274                                     field, &
  11275                                     size(fdata), &
  11276                                     fdata, &
  11277                                     tindex, &
  11278                                     start_in=start, &
  11279                                     axsiz_in=nread)
  11280             endif
  11281 
  11282 !Send the data from the root rank to the rest of the ranks on the
  11283 !pelist.
  11284             if (mpp_pe() .eq. pelist(1)) then
  11285                 do p = 2,io_domain_npes
  11286                     call mpp_send(fdata, &
  11287                                   size(fdata), &
  11288                                   pelist(p), &
  11289                                   tag=COMM_TAG_1)
  11290                 enddo
  11291                 call mpp_sync_self()
  11292             else
  11293                 call mpp_recv(fdata, &

Page 391         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_2D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11294                               size(fdata), &
  11295                               pelist(1), &
  11296                               block=.false., &
  11297                               tag=COMM_TAG_1)
  11298                 call mpp_sync_self(check=EVENT_RECV)
  11299             endif
  11300             deallocate(pelist)
  11301         else
  11302             call mpp_error(FATAL, &
  11303                            "mpp_io_unstructured_read_r_2D:" &
  11304                            //" threading should be MPP_SINGLE or MPP_MULTI")
  11305         endif
  11306     endif
  11307 
  11308 !Decided whether or not to compute a check-sum of the read-in data.  The
  11309 !check-sum is calculated if the inputted field's checksum values are not
  11310 !equal to the default checksum value for a field.
  11311     compute_chksum = .false.
  11312     if (any(field%checksum .ne. default_field%checksum)) then
  11313         compute_chksum = .true.
  11314     endif
  11315 
  11316 !If necessary, compute a check-sum of the read-in data.
  11317     if (compute_chksum) then
  11318 
  11319         if (field%type .eq. NF_INT) then
  11320             if (field%fill .eq. MPP_FILL_DOUBLE .or. field%fill .eq. &
  11321                 real(MPP_FILL_INT)) then
  11322                 chk = mpp_chksum(ceiling(fdata), &
  11323                                  mask_val=MPP_FILL_INT)
  11324             else
  11325                 call mpp_error(NOTE, &
  11326                                "mpp_io_unstructured_read_r_2D:" &
  11327                                //" int field "//trim(field%name) &
  11328                                //" found fill. Icebergs, or code using" &
  11329                                //" defaults can safely ignore." &
  11330                                //" If manually overriding compressed" &
  11331                                //" restart fills, confirm this is what you" &
  11332                                //" want.")
  11333                 chk = mpp_chksum(ceiling(fdata), &
  11334                                  mask_val=field%fill)
  11335             endif
  11336         else
  11337             chk = mpp_chksum(fdata, mask_val=real(field%fill,KIND(fdata)))
  11338         endif
  11339 
  11340 !Print out the computed check-sum for the field.  This feature is
  11341 !currently turned off.  Uncomment the following lines to turn it
  11342 !back on.
  11343 !       if (mpp_pe() .eq. mpp_root_pe()) then
  11344 !           write(stdout(),'(A,Z16)') "mpp_read_compressed_2d chksum: " &
  11345 !                                     //trim(field%name)//" = ",chk
  11346 !           if (mod(chk,field%checksum(1)) .ne. 0) then
  11347 !               write(stdout(),'(A,Z16)') "File stored checksum: " &
  11348 !                                         //trim(field%name)//" = ", &
  11349 !                                         field%checksum(1)
  11350 !               call mpp_error(NOTE, &

Page 392         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_2D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11351 !                              "mpp_io_unstructured_read_r_2D: " &
  11352 !                              //trim(field%name)//" failed!")
  11353 !           endif
  11354 !       endif
  11355     endif
  11356 
  11357 !Stop the mpp timer.
  11358     call mpp_clock_end(mpp_read_clock)
  11359 
  11360     return
  11361 end subroutine mpp_io_unstructured_read_r4_2D


ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_io_unstructured_read_r4_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11312                                scalar                    11312                             
 CEILING                    Func   11322                                scalar                    11322,11333                       
 CHK                        Local  11213    I(8)            8           scalar                    11322,11333,11337                 
 COMPUTE_CHKSUM             Local  11212    L(4)            4           scalar                    11311,11313,11317                 
 DOMAIN                     Dummy  11189    DOMAINUG        544         scalar   ARG,IN           11262                             
 FDATA                      Dummy  11190    R(4)            4     2     1        ARG,INOUT        11235,11238,11252,11253,11275,1127
                                                                                                  6,11286,11287,11293,11294,11322,11
                                                                                                  333,11337                         
 FIELD                      Dummy  11188    FIELDTYPE       1096        scalar   ARG,IN           11251,11274,11312,11319,11320,1132
                                                                                                  7,11334,11337                     
 FUNIT                      Dummy  11187    I(4)            4           scalar   ARG,IN           11228,11250,11273                 
 IO_DOMAIN                  Local  11208    DOMAINUG        544         scalar   PTR              11261,11262,11265,11267,11269     
 IO_DOMAIN_NPES             Local  11209    I(4)            4           scalar                    11265,11266,11285                 
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 4_2D                       Subr   11187                                         PRIV                                               
 MPP_RECV_REAL4_2D          Subr   11293                                         PRIV             11293                             
 MPP_SEND_REAL4_2D          Subr   11286                                         PRIV             11286                             
 NREAD                      Dummy  11193    I(4)            4     1     1        ARG,IN           11256,11279                       
 P                          Local  11211    I(4)            4           scalar                    11285,11288                       
 PELIST                     Local  11210    I(4)            4     1     1        ALC              11266,11268,11272,11284,11288,1129
                                                                                                  5,11300                           
 PRESENT                    Func   11242                                scalar                    11242                             
 REAL                       Func   11321                                scalar                    11321,11337                       
 SIZE                       Func   11235                                scalar                    11235,11252,11275,11287,11294     
 START                      Dummy  11192    I(4)            4     1     1        ARG,IN           11255,11278                       
 THREADING                  Dummy  11194    I(4)            4           scalar   ARG,IN           11242,11243                       
 THREADING_FLAG             Local  11207    I(4)            4           scalar                    11241,11243,11247,11257           
 TINDEX                     Dummy  11191    I(4)            4           scalar   ARG,IN           11254,11277                       
 TRIM                       Func   11327                                scalar                    11327                             

Page 393         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_2D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11362 
  11363 !------------------------------------------------------------------------------
  11364 !>Read in three-dimensional data for a field associated with an unstructured
  11365 !!mpp domain.
  11366 subroutine mpp_io_unstructured_read_r4_3D(funit, &
  11367                                          field, &
  11368                                          domain, &
  11369                                          fdata, &
  11370                                          tindex, &
  11371                                          start, &
  11372                                          nread, &
  11373                                          threading)
  11374 
  11375 !Inputs/outputs
  11376     integer(i4_kind),intent(in)                       :: funit     !<A file unit returned by mpp_open.
  11377     type(fieldtype),intent(in)                        :: field     !<A field whose data will be read in from the file.
  11378     type(domainUG),intent(in)                         :: domain    !<An unstructured mpp domain.
  11379     real(KIND=r4_kind),dimension(:,:,:),intent(inout) :: fdata     !<The data that will be read in from the file.
  11380     integer(i4_kind),intent(in),optional              :: tindex    !<Time level index for a NetCDF file.
  11381     integer(i4_kind),dimension(:),intent(in),optional :: start     !<Corner indices for a NetCDF file.
  11382     integer(i4_kind),dimension(:),intent(in),optional :: nread     !<Edge lengths for a NetCDF file.
  11383     integer(i4_kind),intent(in),optional              :: threading !<Flag telling whether one or multiple ranks will read th
  11383 e file.
  11384 
  11385 !Local variables
  11386     integer(i4_kind)                          :: threading_flag !<Flag telling whether one or multiple ranks will read the f
  11386 ile.  This defaults to MPP_SINGLE.
  11387     type(domainUG),pointer                     :: io_domain      !<Pointer to the unstructured I/O domain.
  11388     integer(i4_kind)                          :: io_domain_npes !<The total number of ranks in an I/O domain pelist.
  11389     integer(i4_kind),dimension(:),allocatable :: pelist         !<A pelist.
  11390     integer(i4_kind)                          :: p              !<Loop variable.
  11391     logical(l4_kind)                          :: compute_chksum !<Flag telling whether or not a check-sum of the read-in dat
  11391 a is calculated.
  11392     integer(i8_kind)                         :: chk            !<Calculated check-sum for the read in data.
  11393 
  11394 !Start the mpp timer.
  11395 !mpp_read_clock is a module variable.
  11396     call mpp_clock_begin(mpp_read_clock)
  11397 
  11398 !Make sure that the module is initialized.
  11399     if (.not. module_is_initialized) then
  11400         call mpp_error(FATAL, &
  11401                        "mpp_io_unstructured_read_r_3D:" &
  11402                        //" you must must first call mpp_io_init.")
  11403     endif
  11404 
  11405 !Make sure that another NetCDF file is not currently using the inputted
  11406 !file unit.
  11407     if (.not. mpp_file(funit)%valid) then
  11408         call mpp_error(FATAL, &
  11409                        "mpp_io_unstructured_read_r_3D:" &
  11410                        //" the inputted file unit is already in use.")
  11411     endif
  11412 
  11413 !If the data array has more than zero elements, then read in the data.
  11414     if (size(fdata) .gt. 0) then
  11415 

Page 394         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11416 !Initialize the data to zero.
  11417         fdata = 0
  11418 
  11419 !Get the value for the "threading" flag.
  11420         threading_flag = MPP_SINGLE
  11421         if (present(threading)) then
  11422             threading_flag = threading
  11423         endif
  11424 
  11425 !Read in the data.
  11426         if (threading_flag .eq. MPP_MULTI) then
  11427 
  11428 !For the multi-rank case, directly read in the data.
  11429             call read_record_r4(funit, &
  11430                                 field, &
  11431                                 size(fdata), &
  11432                                 fdata, &
  11433                                 tindex, &
  11434                                 start_in=start, &
  11435                                 axsiz_in=nread)
  11436         elseif (threading_flag .eq. MPP_SINGLE) then
  11437 
  11438 !For the single-rank, first point to the I/O domain associated with
  11439 !the inputted unstructured mpp domain.
  11440             io_domain => null()
  11441             io_domain => mpp_get_UG_io_domain(domain)
  11442 
  11443 !Get the pelist associated with the I/O domain.
  11444             io_domain_npes = mpp_get_UG_domain_npes(io_domain)
  11445             allocate(pelist(io_domain_npes))
  11446             call mpp_get_UG_domain_pelist(io_domain, &
  11447                                           pelist)
  11448             io_domain => null()
  11449 
  11450 !Let only the root rank of the pelist read in the data.
  11451             if (mpp_pe() .eq. pelist(1)) then
  11452                 call read_record_r4(funit, &
  11453                                     field, &
  11454                                     size(fdata), &
  11455                                     fdata, &
  11456                                     tindex, &
  11457                                     start_in=start, &
  11458                                     axsiz_in=nread)
  11459             endif
  11460 
  11461 !Send the data from the root rank to the rest of the ranks on the
  11462 !pelist.
  11463             if (mpp_pe() .eq. pelist(1)) then
  11464                 do p = 2,io_domain_npes
  11465                     call mpp_send(fdata, &
  11466                                   size(fdata), &
  11467                                   pelist(p), &
  11468                                   tag=COMM_TAG_1)
  11469                 enddo
  11470                 call mpp_sync_self()
  11471             else
  11472                 call mpp_recv(fdata, &

Page 395         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11473                               size(fdata), &
  11474                               pelist(1), &
  11475                               block=.false., &
  11476                               tag=COMM_TAG_1)
  11477                 call mpp_sync_self(check=EVENT_RECV)
  11478             endif
  11479             deallocate(pelist)
  11480         else
  11481             call mpp_error(FATAL, &
  11482                            "mpp_io_unstructured_read_r_3D:" &
  11483                            //" threading should be MPP_SINGLE or MPP_MULTI")
  11484         endif
  11485     endif
  11486 
  11487 !Decided whether or not to compute a check-sum of the read-in data.  The
  11488 !check-sum is calculated if the inputted field's checksum values are not
  11489 !equal to the default checksum value for a field.
  11490     compute_chksum = .false.
  11491     if (any(field%checksum .ne. default_field%checksum)) then
  11492         compute_chksum = .true.
  11493     endif
  11494 
  11495 !If necessary, compute a check-sum of the read-in data.
  11496     if (compute_chksum) then
  11497 
  11498         if (field%type .eq. NF_INT) then
  11499             if (field%fill .eq. MPP_FILL_DOUBLE .or. field%fill .eq. &
  11500                 real(MPP_FILL_INT)) then
  11501                 chk = mpp_chksum(ceiling(fdata), &
  11502                                  mask_val=MPP_FILL_INT)
  11503             else
  11504                 call mpp_error(NOTE, &
  11505                                "mpp_io_unstructured_read_r_3D:" &
  11506                                //" int field "//trim(field%name) &
  11507                                //" found fill. Icebergs, or code using" &
  11508                                //" defaults can safely ignore." &
  11509                                //" If manually overriding compressed" &
  11510                                //" restart fills, confirm this is what you" &
  11511                                //" want.")
  11512                 chk = mpp_chksum(ceiling(fdata), &
  11513                                  mask_val=field%fill)
  11514             endif
  11515         else
  11516             chk = mpp_chksum(fdata, mask_val=real(field%fill,KIND(fdata)))
  11517         endif
  11518 
  11519 !Print out the computed check-sum for the field.  This feature is
  11520 !currently turned off.  Uncomment the following lines to turn it
  11521 !back on.
  11522 !       if (mpp_pe() .eq. mpp_root_pe()) then
  11523 !           write(stdout(),'(A,Z16)') "mpp_read_compressed_2d chksum: " &
  11524 !                                     //trim(field%name)//" = ",chk
  11525 !           if (mod(chk,field%checksum(1)) .ne. 0) then
  11526 !               write(stdout(),'(A,Z16)') "File stored checksum: " &
  11527 !                                         //trim(field%name)//" = ", &
  11528 !                                         field%checksum(1)
  11529 !               call mpp_error(NOTE, &

Page 396         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11530 !                              "mpp_io_unstructured_read_r_3D: " &
  11531 !                              //trim(field%name)//" failed!")
  11532 !           endif
  11533 !       endif
  11534     endif
  11535 
  11536 !Stop the mpp timer.
  11537     call mpp_clock_end(mpp_read_clock)
  11538 
  11539     return
  11540 end subroutine mpp_io_unstructured_read_r4_3D


ENTRY POINTS

  Name                                                     
                                                           
 mpp_io_mod_mp_mpp_io_unstructured_read_r4_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   11491                                scalar                    11491                             
 CEILING                    Func   11501                                scalar                    11501,11512                       
 CHK                        Local  11392    I(8)            8           scalar                    11501,11512,11516                 
 COMPUTE_CHKSUM             Local  11391    L(4)            4           scalar                    11490,11492,11496                 
 DOMAIN                     Dummy  11368    DOMAINUG        544         scalar   ARG,IN           11441                             
 FDATA                      Dummy  11369    R(4)            4     3     1        ARG,INOUT        11414,11417,11431,11432,11454,1145
                                                                                                  5,11465,11466,11472,11473,11501,11
                                                                                                  512,11516                         
 FIELD                      Dummy  11367    FIELDTYPE       1096        scalar   ARG,IN           11430,11453,11491,11498,11499,1150
                                                                                                  6,11513,11516                     
 FUNIT                      Dummy  11366    I(4)            4           scalar   ARG,IN           11407,11429,11452                 
 IO_DOMAIN                  Local  11387    DOMAINUG        544         scalar   PTR              11440,11441,11444,11446,11448     
 IO_DOMAIN_NPES             Local  11388    I(4)            4           scalar                    11444,11445,11464                 
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 4_3D                       Subr   11366                                         PRIV                                               
 MPP_RECV_REAL4_3D          Subr   11472                                         PRIV             11472                             
 MPP_SEND_REAL4_3D          Subr   11465                                         PRIV             11465                             
 NREAD                      Dummy  11372    I(4)            4     1     1        ARG,IN           11435,11458                       
 P                          Local  11390    I(4)            4           scalar                    11464,11467                       
 PELIST                     Local  11389    I(4)            4     1     1        ALC              11445,11447,11451,11463,11467,1147
                                                                                                  4,11479                           
 PRESENT                    Func   11421                                scalar                    11421                             
 REAL                       Func   11500                                scalar                    11500,11516                       
 SIZE                       Func   11414                                scalar                    11414,11431,11454,11466,11473     
 START                      Dummy  11371    I(4)            4     1     1        ARG,IN           11434,11457                       
 THREADING                  Dummy  11373    I(4)            4           scalar   ARG,IN           11421,11422                       
 THREADING_FLAG             Local  11386    I(4)            4           scalar                    11420,11422,11426,11436           
 TINDEX                     Dummy  11370    I(4)            4           scalar   ARG,IN           11433,11456                       
 TRIM                       Func   11506                                scalar                    11506                             

Page 397         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53                                 ../mpp/include/mpp_io_unstructured_read.inc

  11541 
  11542 !------------------------------------------------------------------------------
  11543 
  11544 !----------
  11545 # 1119 "mpp_io.F90" 2 
  11546 !----------
  11547 
  11548 end module mpp_io_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOCK_ROUTINE              Param  335      I(4)            4           scalar   PRIV             335                               
 DO_CF_COMPLIANCE@0         Local  2377     L(4)            4           scalar                                                      
 FILE_TYPE_USED             Local  405      I(4)            4           scalar                    369                               
 FILLIN_FIELDTYPE           Subr   401                                                            401                               
 MAX_FILE_SIZE              Param  331      I(8)            8           scalar                    331,370                           
 MPP_ATTRIBUTE_EXIST@0      Local  2017     L(4)            4           scalar                                                      
 MPP_CLOCK_DETAILED         Param  335      I(4)            4           scalar   PRIV             335                               
 MPP_CLOCK_SYNC             Param  335      I(4)            4           scalar   PRIV             335                               
 MPP_CLOSE                  Subr   400                                                            400                               
 MPP_COPY_META              Local  813                                  scalar                    393                               
 MPP_DEF_DIM                Local  1034                                 scalar                    393                               
 MPP_DOMAINS_MOD            Module 338                                                            338,339,340,341,342,343,344,345,35
                                                                                                  1                                 
 MPP_FILE_IS_OPENED@0       Local  1959     L(4)            4           scalar                                                      
 MPP_FLUSH                  Subr   390                                                            390                               
 MPP_GET_ATTS               Local  513                                  scalar                    379                               
 MPP_GET_ATT_CHAR@0         Local  1903     CHAR                        scalar                                                      
 MPP_GET_ATT_LENGTH@0       Local  1890     I(4)            4           scalar                                                      
 MPP_GET_ATT_NAME@0         Local  1866     CHAR            128         scalar                                                      
 MPP_GET_ATT_REAL@0         Local  1915     R(8)            8     1     0                                                           
 MPP_GET_ATT_REAL_SCALAR@0  Local  1927     R(8)            8           scalar                                                      
 MPP_GET_ATT_TYPE@0         Local  1878     I(4)            4           scalar                                                      
 MPP_GET_ATT_VALUE          Local  519                                  scalar                    382                               
 MPP_GET_AXES               Subr   380                                                            380                               
 MPP_GET_AXIS_BOUNDS@0      Local  1600     L(4)            4           scalar                                                      
 MPP_GET_AXIS_BY_NAME@0     Local  1551     AXISTYPE        1424        scalar                                                      
 MPP_GET_AXIS_DATA          Subr   380                                                            380                               
 MPP_GET_AXIS_ID@0          Local  1680     I(4)            4           scalar                                                      
 MPP_GET_AXIS_INDEX@0       Local  1530     I(4)            4           scalar                                                      
 MPP_GET_AXIS_LENGTH@0      Local  1589     I(4)            4           scalar                                                      
 MPP_GET_DEFAULT_CALENDAR@0 Local  1452     CHAR            24          scalar                                                      
 MPP_GET_DIMENSION_LENGTH@0 Local  1410     I(4)            4           scalar                                                      
 MPP_GET_DOMAIN_NAME        Func   345      CHAR            64          scalar   PRIV             345                               
 MPP_GET_DOMAIN_SHIFT       Subr   342                                           PRIV             342                               
 MPP_GET_DOMAIN_TILE_ROOT_P                                                                                                         
 E                          Func   343      I(4)            4           scalar   PRIV             343                               
 MPP_GET_FIELDS             Subr   379                                                            379                               
 MPP_GET_FIELD_ID@0         Local  1688     I(4)            4           scalar                                                      
 MPP_GET_FIELD_INDEX@0      Local  1509     I(4)            4           scalar                                                      
 MPP_GET_FIELD_NAME@0       Local  1938     CHAR            128         scalar                                                      
 MPP_GET_FIELD_SIZE@0       Local  1572     I(4)            4     1     4                                                           
 MPP_GET_FILE_NAME@0        Local  1948     CHAR            256         scalar                                                      
 MPP_GET_ID                 Local  495                                  scalar                    378                               

Page 398         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53 Symbol Table                    mpp_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_GET_INFO               Subr   379                                                            379                               
 MPP_GET_MAXUNITS@0         Local  2373     I(4)            4           scalar                                                      
 MPP_GET_NCID@0             Local  1671     I(4)            4           scalar                                                      
 MPP_GET_RECDIMID@0         Local  1640     I(4)            4           scalar                                                      
 MPP_GET_TAVG_INFO          Subr   396                                                            396                               
 MPP_GET_TILE_NPES          Func   344      I(4)            4           scalar   PRIV             344                               
 MPP_GET_TIMES              Subr   380                                                            380                               
 MPP_GET_TIME_AXIS          Subr   386                                                            386                               
 MPP_GET_UG_COMPUTE_DOMAIN  Subr   357                                           PRIV             357                               
 MPP_GET_UNIT_RANGE         Subr   378                                                            378                               
 MPP_IO_CLOCK_ON@0          Local  2008     L(4)            4           scalar                                                      
 MPP_IO_INIT                Subr   390                                                            390                               
 MPP_IO_MOD                 Module 315                                                                                              
 MPP_IO_STACK_HWM           Local  1049     I(4)            4           scalar                    1049                              
 MPP_IO_UNSTRUCTURED_READ   Local  1123                                 scalar                    1110                              
 MPP_IO_UNSTRUCTURED_WRITE  Local  1112                                 scalar                    1109                              
 MPP_IS_VALID@0             Local  1834     L(4)            4           scalar                                                      
 MPP_MOD                    Module 332                                                            332,333,334,335,336,337,347       
 MPP_MODIFY_META            Local  819                                  scalar                    393                               
 MPP_OPEN                   Subr   400                                                            400                               
 MPP_PARAMETER_MOD          Module 326                                                            326,327,328,329,330,331,346       
 MPP_READ_COMPRESSED        Local  680                                  scalar                    397                               
 MPP_READ_DISTRIBUTED_ASCII Local  638                                  scalar                    397                               
 MPP_WRITE_AXIS_DATA        Subr   393                                                            393                               
 MPP_WRITE_UNLIMITED_AXIS   Local  1012                                 scalar                    397                               
 NETCDF                     Module 320                                                            320                               
 NETCDF4_NF_INTERFACES      Module 323                                                            323                               
 NETCDF_NF_DATA             Module 321                                                            321                               
 NETCDF_NF_INTERFACES       Module 322                                                            322                               
 Operator (/=)                     342                                                                                              
 PLATFORM_MOD               Module 359                                                            359                               

Page 399         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53 Subprograms/Common Blocks       mpp_io.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CUT0                       Func   5814     CHAR            256         scalar                    5466,5477,5819,5821               
 DO_CF_COMPLIANCE           Func   2377     L(4)            4           scalar                                                      
 FILE_SIZE                  Subr   3190                                                           2892                              
 FILLIN_FIELDTYPE           Subr   9035                                                                                             
 MPP_ATTRIBUTE_EXIST        Func   2017     L(4)            4           scalar                                                      
 MPP_CLOSE                  Subr   3052                                                                                             
 MPP_COPY_META_AXIS         Subr   8735                                          PRIV                                               
 MPP_COPY_META_FIELD        Subr   8842                                          PRIV                                               
 MPP_COPY_META_GLOBAL       Subr   8693                                          PRIV                                               
 MPP_DEF_DIM_INT            Subr   6173                                          PRIV                                               
 MPP_DEF_DIM_NODATA         Subr   6159                                          PRIV                                               
 MPP_DEF_DIM_REAL           Subr   6210                                          PRIV                                               
 MPP_DIST_IO_PELIST         Subr   2031                                                           4586,4640,4672                    
 MPP_FILE_IS_OPENED         Func   1959     L(4)            4           scalar                                                      
 MPP_FIND_ATT               Func   1848     I(4)            4           scalar                    1295,1745,1746,1747,1748,1749,1755
                                                                                                  ,1757,1855,1858,2023              
 MPP_FLUSH                  Subr   2349                                                                                             
 MPP_GET_ATT_CHAR           Func   1903     CHAR                        scalar                                                      
 MPP_GET_ATT_LENGTH         Func   1890     I(4)            4           scalar                                                      
 MPP_GET_ATT_NAME           Func   1866     CHAR            128         scalar                                                      
 MPP_GET_ATT_REAL           Func   1915     R(8)            8     1     0                                                           
 MPP_GET_ATT_REAL_SCALAR    Func   1927     R(8)            8           scalar                                                      
 MPP_GET_ATT_TYPE           Func   1878     I(4)            4           scalar                                                      
 MPP_GET_AXES               Subr   1373                                                                                             
 MPP_GET_AXIS_ATTS          Subr   1306                                          PRIV                                               
 MPP_GET_AXIS_BOUNDS        Func   1600     L(4)            4           scalar                                                      
 MPP_GET_AXIS_BY_NAME       Func   1551     AXISTYPE        1424        scalar                                                      
 MPP_GET_AXIS_DATA          Subr   1620                                                                                             
 MPP_GET_AXIS_ID            Func   1680     I(4)            4           scalar   PRIV             1683                              
 MPP_GET_AXIS_INDEX         Func   1530     I(4)            4           scalar                                                      
 MPP_GET_AXIS_LENGTH        Func   1589     I(4)            4           scalar                                                      
 MPP_GET_DEFAULT_CALENDAR   Func   1452     CHAR            24          scalar                                                      
 MPP_GET_DIMENSION_LENGTH   Func   1410     I(4)            4           scalar                                                      
 MPP_GET_FIELDS             Subr   1343                                                                                             
 MPP_GET_FIELD_ATTS         Subr   1230                                          PRIV                                               
 MPP_GET_FIELD_ATT_TEXT     Subr   1970                                          PRIV                                               
 MPP_GET_FIELD_ID           Func   1688     I(4)            4           scalar   PRIV             1691                              
 MPP_GET_FIELD_INDEX        Func   1509     I(4)            4           scalar                                                      
 MPP_GET_FIELD_NAME         Func   1938     CHAR            128         scalar                                                      
 MPP_GET_FIELD_SIZE         Func   1572     I(4)            4     1     4                         1577,1579,1580,1581,1582          
 MPP_GET_FILE_NAME          Func   1948     CHAR            256         scalar                                                      
 MPP_GET_GLOBAL_ATTS        Subr   1200                                          PRIV                                               
 MPP_GET_INFO               Subr   1176                                                                                             
 MPP_GET_MAXUNITS           Func   2373     I(4)            4           scalar                                                      
 MPP_GET_NCID               Func   1671     I(4)            4           scalar                                                      
 MPP_GET_RECDIMID           Func   1640     I(4)            4           scalar                                                      
 MPP_GET_TAVG_INFO          Subr   5827                                                                                             
 MPP_GET_TIMES              Subr   1474                                                                                             
 MPP_GET_TIME_AXIS          Subr   1438                                                                                             
 MPP_GET_UNIT_RANGE         Subr   1696                                                                                             
 MPP_GET_VALID              Subr   1734                                                           1288                              

Page 400         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53 Subprograms/Common Blocks       mpp_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_IO_CLOCK_ON            Func   2008     L(4)            4           scalar                                                      
 MPP_IO_EXIT                Subr   2288                                                                                             
 MPP_IO_INIT                Subr   2128                                                                                             
 MPP_IO_MOD                 Module 315                                                                                              
 MPP_IO_SET_STACK_SIZE      Subr   1715                                                                                             
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 4_1D                       Subr   11008                                         PRIV                                               
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 4_2D                       Subr   11187                                         PRIV                                               
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 4_3D                       Subr   11366                                         PRIV                                               
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 8_1D                       Subr   10467                                         PRIV                                               
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 8_2D                       Subr   10646                                         PRIV                                               
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 8_3D                       Subr   10825                                         PRIV                                               
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R4_1D                      Subr   9797                                          PRIV                                               
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R4_2D                      Subr   9925                                          PRIV                                               
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R4_3D                      Subr   10084                                         PRIV                                               
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R4_4D                      Subr   10253                                         PRIV                                               
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_1D                      Subr   9150                                          PRIV                                               
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_2D                      Subr   9278                                          PRIV                                               
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_3D                      Subr   9437                                          PRIV                                               
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_4D                      Subr   9606                                          PRIV                                               
 MPP_IS_DIST_IOROOT         Func   2052     L(4)            4           scalar                                                      
 MPP_IS_VALID               Func   1834     L(4)            4           scalar                                                      
 MPP_MODIFY_AXIS_META       Subr   8989                                          PRIV                                               
 MPP_MODIFY_FIELD_META      Subr   9009                                          PRIV                                               
 MPP_OPEN                   Subr   2539                                                                                             
 MPP_READ_2DDECOMP_R2D_R4   Subr   3918                                          PRIV             4339                              
 MPP_READ_2DDECOMP_R2D_R8   Subr   3524                                          PRIV             4108                              
 MPP_READ_2DDECOMP_R3D_R4   Subr   3931                                          PRIV             3927,4063                         
 MPP_READ_2DDECOMP_R3D_R8   Subr   3537                                          PRIV             3533,3669                         
 MPP_READ_2DDECOMP_R4D_R4   Subr   4054                                          PRIV                                               
 MPP_READ_2DDECOMP_R4D_R8   Subr   3660                                          PRIV                                               
 MPP_READ_COMPRESSED_R1D_R4 Subr   4328                                          PRIV                                               
 MPP_READ_COMPRESSED_R1D_R8 Subr   4097                                          PRIV                                               
 MPP_READ_COMPRESSED_R2D_R4 Subr   4343                                          PRIV                                               
 MPP_READ_COMPRESSED_R2D_R8 Subr   4112                                          PRIV                                               
 MPP_READ_COMPRESSED_R3D_R4 Subr   4437                                          PRIV                                               
 MPP_READ_COMPRESSED_R3D_R8 Subr   4206                                          PRIV                                               
 MPP_READ_DISTRIBUTED_ASCII                                                                                                         
 _A1D                       Subr   4658                                          PRIV                                               
 MPP_READ_DISTRIBUTED_ASCII                                                                                                         
 _I1D                       Subr   4627                                          PRIV                                               
 MPP_READ_DISTRIBUTED_ASCII                                                                                                         

Page 401         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53 Subprograms/Common Blocks       mpp_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 _R1D                       Subr   4573                                          PRIV                                               
 MPP_READ_META              Subr   5021                                                                                             
 MPP_READ_R0D_R4            Subr   4836                                          PRIV                                               
 MPP_READ_R0D_R8            Subr   4757                                          PRIV             5870,5876,5882                    
 MPP_READ_R1D_R4            Subr   4821                                          PRIV                                               
 MPP_READ_R1D_R8            Subr   4742                                          PRIV                                               
 MPP_READ_R2D_R4            Subr   4806                                          PRIV                                               
 MPP_READ_R2D_R8            Subr   4727                                          PRIV                                               
 MPP_READ_R3D_R4            Subr   4791                                          PRIV                                               
 MPP_READ_R3D_R8            Subr   4712                                          PRIV                                               
 MPP_READ_R4D_R4            Subr   4775                                          PRIV                                               
 MPP_READ_R4D_R8            Subr   4696                                          PRIV                                               
 MPP_READ_REGION_R2D_R4     Subr   4848                                          PRIV                                               
 MPP_READ_REGION_R2D_R8     Subr   4888                                          PRIV                                               
 MPP_READ_REGION_R3D_R4     Subr   4869                                          PRIV                                               
 MPP_READ_REGION_R3D_R8     Subr   4907                                          PRIV                                               
 MPP_READ_TEXT              Subr   4929                                          PRIV                                               
 MPP_SET_UNIT_RANGE         Subr   1704                                                                                             
 MPP_WRITE_2DDECOMP_R2D_R4  Subr   7631                                          PRIV                                               
 MPP_WRITE_2DDECOMP_R2D_R8  Subr   7188                                          PRIV                                               
 MPP_WRITE_2DDECOMP_R3D_R4  Subr   7648                                          PRIV             7644                              
 MPP_WRITE_2DDECOMP_R3D_R8  Subr   7205                                          PRIV             7201                              
 MPP_WRITE_2DDECOMP_R4D_R4  Subr   7763                                          PRIV                                               
 MPP_WRITE_2DDECOMP_R4D_R8  Subr   7320                                          PRIV                                               
 MPP_WRITE_AXIS             Subr   8644                                          PRIV                                               
 MPP_WRITE_AXIS_DATA        Subr   6139                                                                                             
 MPP_WRITE_COMPRESSED_R1D_R                                                                                                         
 4                          Subr   8058                                          PRIV                                               
 MPP_WRITE_COMPRESSED_R1D_R                                                                                                         
 8                          Subr   7909                                          PRIV                                               
 MPP_WRITE_COMPRESSED_R2D_R                                                                                                         
 4                          Subr   8092                                          PRIV             8071,8088                         
 MPP_WRITE_COMPRESSED_R2D_R                                                                                                         
 8                          Subr   7943                                          PRIV             7922,7939                         
 MPP_WRITE_COMPRESSED_R3D_R                                                                                                         
 4                          Subr   8075                                          PRIV                                               
 MPP_WRITE_COMPRESSED_R3D_R                                                                                                         
 8                          Subr   7926                                          PRIV                                               
 MPP_WRITE_META_AXIS_I1D    Subr   6434                                          PRIV                                               
 MPP_WRITE_META_AXIS_R1D    Subr   6249                                          PRIV                                               
 MPP_WRITE_META_AXIS_UNLIMI                                                                                                         
 TED                        Subr   6506                                          PRIV                                               
 MPP_WRITE_META_FIELD       Subr   6570                                          PRIV                                               
 MPP_WRITE_META_GLOBAL      Subr   6030                                          PRIV             2993,6072,6082,7081,7524          
 MPP_WRITE_META_GLOBAL_SCAL                                                                                                         
 AR_I                       Subr   6076                                          PRIV             2991,3016                         
 MPP_WRITE_META_GLOBAL_SCAL                                                                                                         
 AR_R                       Subr   6066                                          PRIV                                               
 MPP_WRITE_META_SCALAR_I    Subr   6128                                          PRIV             6493,6763,6772,8976               
 MPP_WRITE_META_SCALAR_R    Subr   6118                                          PRIV             6418,6732,6735,6739,6742,6748,6751
                                                                                                  ,6757,6767,6773,6774,8946,8949,895
                                                                                                  3,8956,8961,8964,8969,8972,8978,89
                                                                                                  80                                
 MPP_WRITE_META_VAR         Subr   6086                                          PRIV             6124,6134,6383,6385,6389,6391,6397
                                                                                                  ,6401,6408,6411,6422,6484,6486,648

Page 402         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53 Subprograms/Common Blocks       mpp_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  9,6552,6556,6717,6719,6724,6728,67
                                                                                                  82,6786,6789,8823,8825,8832,8931,8
                                                                                                  933,8938,8942                     
 MPP_WRITE_R0D_R4           Subr   8471                                          PRIV                                               
 MPP_WRITE_R0D_R8           Subr   8271                                          PRIV                                               
 MPP_WRITE_R1D_R4           Subr   8511                                          PRIV                                               
 MPP_WRITE_R1D_R8           Subr   8311                                          PRIV                                               
 MPP_WRITE_R2D_R4           Subr   8551                                          PRIV                                               
 MPP_WRITE_R2D_R8           Subr   8351                                          PRIV                                               
 MPP_WRITE_R3D_R4           Subr   8591                                          PRIV                                               
 MPP_WRITE_R3D_R8           Subr   8391                                          PRIV                                               
 MPP_WRITE_R4D_R4           Subr   8631                                          PRIV                                               
 MPP_WRITE_R4D_R8           Subr   8431                                          PRIV                                               
 MPP_WRITE_UNLIMITED_AXIS_R                                                                                                         
 1D                         Subr   8201                                          PRIV                                               
 NETCDF_ERR                 Subr   2325                                                                                             
 READ_RECORD_CORE_R4        Subr   3705                                                           3913,4862,4883                    
 READ_RECORD_CORE_R8        Subr   3311                                                           3519,4902,4921                    
 READ_RECORD_R4             Subr   3796                                                           4008,4016,4040,4045,4370,4379,4463
                                                                                                  ,4472,4781,4797,4812,4827,4844,110
                                                                                                  71,11094,11250,11273,11429,11452  
 READ_RECORD_R8             Subr   3402                                                           3614,3622,3646,3651,4139,4148,4232
                                                                                                  ,4241,4702,4718,4733,4748,4765,105
                                                                                                  30,10553,10709,10732,10888,10911  
 WRITE_ATTRIBUTE            Subr   6798                                                           6058,6111,6367,6373,6378,6712,6714
                                                                                                  ,8725,8727,8801,8806,8808,8813,892
                                                                                                  6,8928                            
 WRITE_ATTRIBUTE_NETCDF     Subr   6834                                                           6055,6108,8718,8720               
 WRITE_RECORD_R4            Subr   7466                                                           7696,7716,7724,7744,7752,7755,7811
                                                                                                  ,7831,7839,7859,7867,7870,8166,847
                                                                                                  9,8519,8559,8599,8639,9904,10062,1
                                                                                                  0231,10417                        
 WRITE_RECORD_R8            Subr   7023                                                           7253,7273,7281,7301,7309,7312,7368
                                                                                                  ,7388,7396,7416,7424,7427,8017,823
                                                                                                  4,8279,8319,8359,8399,8439,8671,86
                                                                                                  76,9257,9415,9584,9770            

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases

Page 403         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53                                 mpp_io.F90

       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals

Page 404         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53                                 mpp_io.F90

  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : ./,/opt/intel/2020/compilers_and_libraries/linux/mkl/include/,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/,
           /usr/include/,./,./,../include/,../mpp/include/,./,/opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/,/opt/intel/2020/compilers_and_libraries/linux/daal/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,/usr/local/include/,/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/,

Page 405         Source Listing                  MPP_IO_UNSTRUCTURED_READ_R4_3D
2021-06-01 08:53                                 mpp_io.F90

           /usr/include/,/usr/include/,/usr/include/
       -list filename : mpp_io.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
