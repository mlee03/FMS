Page 1           Source Listing                  TIME_INTERP_INIT
2021-06-01 08:55                                 /tmp/ifortnbjkXp.i90

      1 # 1 "time_interp.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 module time_interp_mod
     22 
     23 ! <CONTACT EMAIL="Bruce.Wyman@noaa.gov">
     24 !   Bruce Wyman
     25 ! </CONTACT>
     26 
     27 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/"/>
     28 
     29 ! <OVERVIEW>
     30 !   Computes a weight and dates/indices for linearly interpolating between two dates.
     31 ! </OVERVIEW>
     32 
     33 ! <DESCRIPTION>
     34 !     A time type is converted into two consecutive dates plus
     35 !     a fraction representing the distance between the dates.
     36 !     This information can be used to interpolate between the dates.
     37 !     The dates may be expressed as years, months, or days or
     38 !     as indices in an array.
     39 ! </DESCRIPTION>
     40 
     41 ! <PUBLIC>
     42 !   Description summarizing public interface.
     43 ! </PUBLIC>
     44 
     45 !-----------------------------------------------------------------------
     46 
     47 use time_manager_mod, only: time_type, get_date, set_date, set_time, &
     48                             days_in_year, days_in_month, leap_year,  &
     49                             time_type_to_real, real_to_time_type,    &
     50                             get_calendar_type, JULIAN, GREGORIAN, NO_CALENDAR, &
     51                             operator(+), operator(-), operator(>),   &
     52                             operator(<), operator( // ), operator( / ),  &
     53                             operator(>=), operator(<=), operator( * ), &
     54                             operator(==), print_date, print_time,&
     55                             time_list_error, date_to_string
     56 
     57 use          fms_mod, only: write_version_number, &

Page 2           Source Listing                  TIME_INTERP_INIT
2021-06-01 08:55                                 time_interp.F90

     58                             error_mesg, FATAL, stdout, stdlog, &
     59                             open_namelist_file, close_file, check_nml_error, &
     60                             fms_error_handler
     61 use          mpp_mod, only: input_nml_file
     62 
     63 implicit none
     64 private
     65 
     66 !-----------------------------------------------------------------------
     67 
     68 public :: time_interp_init, time_interp, fraction_of_year
     69 
     70 ! <INTERFACE NAME="time_interp">
     71 
     72 !   <OVERVIEW>
     73 !      Returns a weight and dates or indices for interpolating between two dates. The
     74 !      interface fraction_of_year is provided for backward compatibility with the
     75 !      previous version.
     76 !   </OVERVIEW>
     77 !   <DESCRIPTION>
     78 !      Returns weight by interpolating Time between Time1 and Time2.
     79 !      i.e. weight = (Time-Time1)/(Time2-Time1)
     80 !      Time1 and Time2 may be specified by any of several different ways,
     81 !      which is the reason for multiple interfaces.
     82 
     83 !      If Time1 and Time2 are the begining and end of the year in which
     84 !      Time falls, use first interface.
     85 
     86 !      If Time1 and Time2 fall on year boundaries, use second interface.
     87 
     88 !      If Time1 and Time2 fall on month boundaries, use third.
     89 
     90 !      If Time1 and Time2 fall on day boundaries, use fourth.
     91 
     92 !      If Time1 and Time2 are consecutive elements of an assending list, use fifth.
     93 !      The fifth also returns the indices of Timelist between which Time falls.
     94 
     95 !      The sixth interface is for cyclical data. Time_beg and Time_end specify the
     96 !      begining and end of a repeating period. In this case:
     97 !      weight = (Time_adjusted - Time1) / (Time2 - Time1)
     98 !      Where:
     99 !      Time1 = Timelist(index1)
    100 !      Time2 = Timelist(index2)
    101 !      Time_adjusted = Time - N*Period
    102 !      Period = Time_end-Time_beg
    103 !      N is between (Time-Time_end)/Period and (Time-Time_beg)/Period
    104 !      That is, N is the integer that results in Time_adjusted that is between Time_beg and Time_end.
    105 !
    106 !   </DESCRIPTION>
    107 !   <TEMPLATE>
    108 !     1. call time_interp( Time, weight )
    109 !   </TEMPLATE>
    110 !   <TEMPLATE>
    111 !     2. call time_interp( Time, weight, year1, year2 )
    112 !   </TEMPLATE>
    113 !   <TEMPLATE>
    114 !     3. call time_interp( Time, weight, year1, year2, month1, month2 )

Page 3           Source Listing                  TIME_INTERP_INIT
2021-06-01 08:55                                 time_interp.F90

    115 !   </TEMPLATE>
    116 !   <TEMPLATE>
    117 !     4. call time_interp( Time, weight, year1, year2, month1, month2, day1, day2 )
    118 !   </TEMPLATE>
    119 !   <TEMPLATE>
    120 !     5. call time_interp( Time, Timelist, weight, index1, index2 [, modtime] )
    121 !   </TEMPLATE>
    122 !   <TEMPLATE>
    123 !     6. call time_interp( Time, Time_beg, Time_end, Timelist, weight, index1, index2 [,correct_leap_year_inconsistency])
    124 !   </TEMPLATE>
    125 !   <IN NAME="Time">
    126 !      The time at which the the weight is computed.
    127 !   </IN>
    128 !   <IN NAME="Time_beg">
    129 !      For cyclical interpolation: Time_beg specifies the begining time of a cycle.
    130 !   </IN>
    131 !   <IN NAME="Time_end">
    132 !      For cyclical interpolation: Time_end specifies the ending time of a cycle.
    133 !   </IN>
    134 !   <IN NAME="Timelist">
    135 !      For cyclical interpolation: Timelist is an array of times between Time_beg and Time_end.
    136 !                                  Must be monotonically increasing.
    137 !   </IN>
    138 !   <IN NAME="modtime">
    139 !   </IN>
    140 !   <IN NAME="index1">
    141 !      Timelist(index1) = The largest value of Timelist which is less than mod(Time,Time_end-Time_beg)
    142 !   </IN>
    143 !   <IN NAME="index2">
    144 !      Timelist(index2) = The smallest value of Timelist which is greater than mod(Time,Time_end-Time_beg)
    145 !   </IN>
    146 !   <IN NAME="correct_leap_year_inconsistency">
    147 !       Turns on a kluge for an inconsistency which may occur in a special case.
    148 !       When the modulo time period (i.e. Time_end - Time_beg) is a whole number of years
    149 !       and is not a multiple of 4, and the calendar in use has leap years, then it is
    150 !       likely that the interpolation will involve mapping a common year onto a leap year.
    151 !       In this case it is often desirable, but not absolutely necessary, to use data for
    152 !       Feb 28 of the leap year when it is mapped onto a common year.
    153 !       To turn this on, set correct_leap_year_inconsistency=.true.
    154 !   </IN>
    155 !   <OUT NAME="weight">
    156 !     weight = (mod(Time,Time_end-Time_beg) - Timelist(index1)) / (Timelist(index2) - Timelist(index1))
    157 !   </OUT>
    158 !   <OUT NAME="year1"> </OUT>
    159 !   <OUT NAME="year2"> </OUT>
    160 !   <OUT NAME="month1"> </OUT>
    161 !   <OUT NAME="month2"> </OUT>
    162 !   <OUT NAME="day1"> </OUT>
    163 !   <OUT NAME="day2"> </OUT>
    164 !   <OUT NAME="index1"> </OUT>
    165 !   <OUT NAME="index2"> </OUT>
    166 !   <ERROR MSG="input time list not ascending order" STATUS="ERROR">
    167 !     The list of input time types must have ascending dates.
    168 !   </ERROR>
    169 !   <ERROR MSG="modulo months must have same length" STATUS="ERROR">
    170 !     The length of the current month for input Time and Time_list
    171 !     must be the same when using the modulo month option. The

Page 4           Source Listing                  TIME_INTERP_INIT
2021-06-01 08:55                                 time_interp.F90

    172 !     modulo month option is available but not supported.
    173 !   </ERROR>
    174 !   <ERROR MSG="invalid value for argument modtime" STATUS="ERROR">
    175 !     The optional argument modtime must have a value set by one
    176 !     of the public parameters: NONE, YEAR, MONTH, DAY. The
    177 !     MONTH and DAY options are available but not supported.
    178 !   </ERROR>
    179 !   <ERROR MSG="period of list exceeds modulo period" STATUS="ERROR">
    180 !     The difference between the last and first values in the input
    181 !     Time list/array exceeds the length of the modulo period.
    182 !   </ERROR>
    183 !   <ERROR MSG="time before range of list or time after range of list" STATUS="ERROR">
    184 !     The difference between the last and first values in the input
    185 !     These errors occur when you are not using a modulo axis and
    186 !     the input Time occurs before the first value in the Time
    187 !     list/array or after the last value in the Time list/array.
    188 !   </ERROR>
    189 !   <NOTE>
    190 !     Examples:
    191 !     <PRE>
    192 !       Time: Jan 01 00z    weight = 0.0
    193 !       Time: Jul 01        weight ~ 0.5
    194 !       Time: Dec 31 23z    weight ~ 1.0
    195 !     </PRE>
    196 !   </NOTE>
    197 
    198 interface time_interp
    199     module procedure time_interp_frac,  time_interp_year, &
    200                      time_interp_month, time_interp_day,  &
    201                      time_interp_list,  time_interp_modulo
    202 end interface
    203 ! </INTERFACE>
    204 
    205 integer, public, parameter :: NONE=0, YEAR=1, MONTH=2, DAY=3
    206 
    207 !-----------------------------------------------------------------------
    208 
    209    integer, parameter ::  secmin = 60, minhour = 60, hourday = 24,  &
    210                          sechour = secmin*minhour,                  &
    211                           secday = secmin*minhour*hourday
    212 
    213    integer, parameter :: monyear = 12
    214    integer, parameter :: halfday = secday/2
    215 
    216    integer :: yrmod, momod, dymod
    217    logical :: mod_leapyear
    218 
    219 ! Include variable "version" to be written to log file.
    220 # 1 "../include/file_version.h" 1 
    221 ! -*-f90-*-
    222 !***********************************************************************
    223 !*                   GNU Lesser General Public License
    224 !*
    225 !* This file is part of the GFDL Flexible Modeling System (FMS).
    226 !*
    227 !* FMS is free software: you can redistribute it and/or modify it under
    228 !* the terms of the GNU Lesser General Public License as published by

Page 5           Source Listing                  TIME_INTERP_INIT
2021-06-01 08:55                                 ../include/file_version.h

    229 !* the Free Software Foundation, either version 3 of the License, or (at
    230 !* your option) any later version.
    231 !*
    232 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    233 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    234 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    235 !* for more details.
    236 !*
    237 !* You should have received a copy of the GNU Lesser General Public
    238 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    239 !***********************************************************************
    240 
    241 # 23
    242 
    243   character(len=*), parameter :: version = 'unknown'
    244 
    245 # 220 "time_interp.F90" 2 
    246 
    247    logical :: module_is_initialized=.FALSE.
    248    logical :: perthlike_behavior=.FALSE.
    249 
    250    namelist / time_interp_nml / perthlike_behavior
    251 
    252 contains
    253 
    254 
    255  subroutine time_interp_init()
    256    integer :: ierr, io, namelist_unit, logunit
    257 
    258    if ( module_is_initialized ) return
    259 
    260 
    261       read (input_nml_file, time_interp_nml, iostat=io)
    262       ierr = check_nml_error (io, 'time_interp_nml')
    263 # 245
    264 
    265 
    266    call write_version_number("TIME_INTERP_MOD", version)
    267    logunit = stdlog()
    268    write(logunit,time_interp_nml)
    269 
    270    module_is_initialized = .TRUE.
    271 
    272  end subroutine time_interp_init

Page 6           Source Listing                  TIME_INTERP_INIT
2021-06-01 08:55 Entry Points                    time_interp.F90



ENTRY POINTS

  Name                                            
                                                  
 time_interp_mod_mp_time_interp_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_NML_ERROR            Func   262      I(4)            4           scalar   PRIV             59,262                            
 IERR                       Local  256      I(4)            4           scalar                    262                               
 INPUT_NML_FILE             Local  261      CHAR                  1     1        ALC,TGT,PRIV     61,261                            
 IO                         Local  256      I(4)            4           scalar                    261,262                           
 LOGUNIT                    Local  256      I(4)            4           scalar                    267,268                           
 MODULE_IS_INITIALIZED      Local  258      L(4)            4           scalar                    247,258,270,291,338,381,442,516,71
                                                                                                  4                                 
 NAMELIST_UNIT              Local  256      I(4)            4           scalar                                                      
 STDLOG                     Func   267      I(4)            4           scalar   PRIV             58,267                            
 TIME_INTERP_INIT           Subr   255                                                                                              
 TIME_INTERP_NML            Local  261                                  scalar                    261,268                           
 VERSION                    Param  266      CHAR            7           scalar                    266                               
 WRITE_VERSION_NUMBER       Subr   266                                           PRIV             57,266                            

Page 7           Source Listing                  TIME_INTERP_INIT
2021-06-01 08:55                                 time_interp.F90

    273 
    274 !#######################################################################
    275 
    276 ! <SUBROUTINE NAME="time_interp_frac" INTERFACE="time_interp">
    277 !   <IN NAME="Time" TYPE="time_type" > </IN>
    278 !   <OUT NAME="weight" TYPE="real"> </OUT>
    279 ! </SUBROUTINE>
    280 !  returns the fractional time into the current year
    281 
    282  subroutine time_interp_frac ( Time, weight )
    283 
    284    type(time_type), intent(in)  :: Time
    285    real           , intent(out) :: weight
    286 
    287    integer         :: year, month, day, hour, minute, second
    288    type(time_type) :: Year_beg, Year_end
    289 
    290 
    291    if ( .not. module_is_initialized ) call time_interp_init
    292 
    293 !  ---- compute fractional time of year -----
    294 
    295      call get_date (Time, year, month, day, hour, minute, second)
    296 
    297      Year_beg = set_date(year  , 1, 1)
    298      Year_end = set_date(year+1, 1, 1)
    299 
    300      weight = (Time - Year_beg) // (Year_end - Year_beg)
    301 
    302  end subroutine time_interp_frac

Page 8           Source Listing                  TIME_INTERP_FRAC
2021-06-01 08:55 Entry Points                    time_interp.F90



ENTRY POINTS

  Name                                            
                                                  
 time_interp_mod_mp_time_interp_frac_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Local  287      I(4)            4           scalar                    295                               
 GET_DATE                   Subr   295                                           PRIV             47,295,340,383,444,550,551,559,726
                                                                                                  ,884,892,896                      
 HOUR                       Local  287      I(4)            4           scalar                    295                               
 MINUTE                     Local  287      I(4)            4           scalar                    295                               
 MONTH                      Local  287      I(4)            4           scalar                    295                               
 SECOND                     Local  287      I(4)            4           scalar                    295                               
 SET_DATE                   Local  297                                  scalar   PRIV             47,297,298,398,408,413,473,563,564
                                                                                                  ,568,569,838,839,853,857,859,890,8
                                                                                                  94,898                            
 SET_DATE_I                 Func   297      RECORD          16          scalar   PRIV             297,298,398,408,413,473,563,564,56
                                                                                                  8,569,838,839,853,857,859,890,894,
                                                                                                  898                               
 TIME                       Dummy  282      TIME_TYPE       16          scalar   ARG,IN           295,300                           
 TIME_INTERP_FRAC           Subr   282                                           PRIV             315                               
 TIME_INTERP_INIT           Subr   291                                                            68,291,338,381,442,516,714        
 TIME_MINUS                 Func   300      RECORD          16          scalar   PRIV             300,350,356,529,573,644,648,651,75
                                                                                                  1,760,773,787,788,820,821         
 TIME_REAL_DIVIDE           Func   300      R(8)            8           scalar   PRIV             300,350,356,644,648,651,773,788,82
                                                                                                  1                                 
 TIME_TYPE                  Type   284                                  scalar                    47,284,288,312,330,335,374,436,500
                                                                                                  ,506,663,664,704,711,835,850,869,8
                                                                                                  71                                
 WEIGHT                     Dummy  282      R(8)            8           scalar   ARG,OUT          300                               
 YEAR                       Local  287      I(4)            4           scalar                    295,297,298                       
 YEAR_BEG                   Local  288      TIME_TYPE       16          scalar                    297,300                           
 YEAR_END                   Local  288      TIME_TYPE       16          scalar                    298,300                           

Page 9           Source Listing                  TIME_INTERP_FRAC
2021-06-01 08:55                                 time_interp.F90

    303 
    304 !#######################################################################
    305 ! <SUBROUTINE NAME="fraction_of_year">
    306 ! <OVERVIEW>
    307 !  Wrapper for backward compatibility
    308 ! </OVERVIEW>
    309 ! </SUBROUTINE>
    310 
    311  function fraction_of_year (Time)
    312  type(time_type), intent(in)  :: Time
    313  real :: fraction_of_year
    314 
    315   call time_interp_frac ( Time, fraction_of_year )
    316 
    317  end function fraction_of_year


ENTRY POINTS

  Name                                            
                                                  
 time_interp_mod_mp_fraction_of_year_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FRACTION_OF_YEAR           Func   311      R(8)            8           scalar                                                      
 TIME                       Dummy  311      TIME_TYPE       16          scalar   ARG,IN           315                               

Page 10          Source Listing                  FRACTION_OF_YEAR
2021-06-01 08:55                                 time_interp.F90

    318 
    319 !#######################################################################
    320 ! <SUBROUTINE NAME="time_interp_year" INTERFACE="time_interp">
    321 !   <IN NAME="Time" TYPE="time_type" > </IN>
    322 !   <OUT NAME="weight" TYPE="real"> </OUT>
    323 !   <OUT NAME="year1" TYPE="integer"> </OUT>
    324 !   <OUT NAME="year2" TYPE="integer"> </OUT>
    325 ! </SUBROUTINE>
    326 !  returns fractional time between mid points of consecutive years
    327 
    328  subroutine time_interp_year ( Time, weight, year1, year2 )
    329 
    330    type(time_type), intent(in)  :: Time
    331    real           , intent(out) :: weight
    332    integer        , intent(out) :: year1, year2
    333 
    334    integer :: year, month, day, hour, minute, second
    335    type (time_type) :: Mid_year, Mid_year1, Mid_year2
    336 
    337 
    338    if ( .not. module_is_initialized ) call time_interp_init()
    339 
    340       call get_date (Time, year, month, day, hour, minute, second)
    341 
    342 ! mid point of current year
    343       Mid_year = year_midpt(year)
    344 
    345       if ( Time >= Mid_year ) then
    346 ! current time is after mid point of current year
    347            year1  = year
    348            year2  = year+1
    349            Mid_year2 = year_midpt(year2)
    350            weight = (Time - Mid_year) // (Mid_year2 - Mid_year)
    351       else
    352 ! current time is before mid point of current year
    353            year2  = year
    354            year1  = year-1
    355            Mid_year1 = year_midpt(year1)
    356            weight = (Time - Mid_year1) // (Mid_year - Mid_year1)
    357       endif
    358 
    359  end subroutine time_interp_year

Page 11          Source Listing                  TIME_INTERP_YEAR
2021-06-01 08:55 Entry Points                    time_interp.F90



ENTRY POINTS

  Name                                            
                                                  
 time_interp_mod_mp_time_interp_year_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Local  334      I(4)            4           scalar                    340                               
 HOUR                       Local  334      I(4)            4           scalar                    340                               
 MID_YEAR                   Local  335      TIME_TYPE       16          scalar                    343,345,350,356                   
 MID_YEAR1                  Local  335      TIME_TYPE       16          scalar                    355,356                           
 MID_YEAR2                  Local  335      TIME_TYPE       16          scalar                    349,350                           
 MINUTE                     Local  334      I(4)            4           scalar                    340                               
 MONTH                      Local  334      I(4)            4           scalar                    340                               
 SECOND                     Local  334      I(4)            4           scalar                    340                               
 TIME                       Dummy  328      TIME_TYPE       16          scalar   ARG,IN           340,345,350,356                   
 TIME_GE                    Func   345      L(4)            4           scalar   PRIV             345,522,572,582,641,771           
 TIME_INTERP_YEAR           Subr   328                                           PRIV                                               
 WEIGHT                     Dummy  328      R(8)            8           scalar   ARG,OUT          350,356                           
 YEAR                       Local  334      I(4)            4           scalar                    340,343,347,348,353,354           
 YEAR1                      Dummy  328      I(4)            4           scalar   ARG,OUT          347,354,355                       
 YEAR2                      Dummy  328      I(4)            4           scalar   ARG,OUT          348,349,353                       
 YEAR_MIDPT@0               Local  343      TIME_TYPE       16          scalar                                                      

Page 12          Source Listing                  TIME_INTERP_YEAR
2021-06-01 08:55                                 time_interp.F90

    360 
    361 !#######################################################################
    362 ! <SUBROUTINE NAME="time_interp_month" INTERFACE="time_interp">
    363 !   <IN NAME="Time" TYPE="time_type" > </IN>
    364 !   <OUT NAME="weight" TYPE="real"> </OUT>
    365 !   <OUT NAME="year1" TYPE="integer"> </OUT>
    366 !   <OUT NAME="year2" TYPE="integer"> </OUT>
    367 !   <OUT NAME="month1" TYPE="integer"> </OUT>
    368 !   <OUT NAME="month2" TYPE="integer"> </OUT>
    369 ! </SUBROUTINE>
    370 !  returns fractional time between mid points of consecutive months
    371 
    372  subroutine time_interp_month ( Time, weight, year1, year2, month1, month2 )
    373 
    374    type(time_type), intent(in)  :: Time
    375    real           , intent(out) :: weight
    376    integer        , intent(out) :: year1, year2, month1, month2
    377 
    378    integer :: year, month, day, hour, minute, second,  &
    379               mid_month, cur_month, mid1, mid2
    380 
    381    if ( .not. module_is_initialized ) call time_interp_init()
    382 
    383       call get_date (Time, year, month, day, hour, minute, second)
    384 
    385 ! mid point of current month in seconds
    386       mid_month = days_in_month(Time) * halfday
    387 ! time into current month in seconds
    388       cur_month = second + secmin*minute + sechour*hour + secday*(day-1)
    389 
    390       if ( cur_month >= mid_month ) then
    391 ! current time is after mid point of current month
    392            year1  = year;  month1 = month
    393            year2  = year;  month2 = month+1
    394            if (month2 > monyear)  then
    395               year2 = year2+1;  month2 = 1
    396            endif
    397            mid1 = mid_month
    398            mid2 = days_in_month(set_date(year2,month2,2)) * halfday
    399            weight = real(cur_month - mid1) / real(mid1+mid2)
    400       else
    401 ! current time is before mid point of current month
    402            year2  = year;  month2 = month
    403            year1  = year;  month1 = month-1
    404            if (month1 < 1)  then
    405               year1 = year1-1;  month1 = monyear
    406            endif
    407            if (year1>0) then
    408               mid1 = days_in_month(set_date(year1,month1,2)) * halfday
    409            else
    410 ! this can happen if we are at the beginning of year 1. In this case
    411 ! use December 0001 to calculate the duration of December 0000.
    412 ! This should work for all calendars
    413               mid1 = days_in_month(set_date(1,month1,2)) * halfday
    414            endif
    415            mid2 = mid_month
    416            weight = real(cur_month + mid1) / real(mid1+mid2)

Page 13          Source Listing                  TIME_INTERP_MONTH
2021-06-01 08:55                                 time_interp.F90

    417       endif
    418 
    419  end subroutine time_interp_month


ENTRY POINTS

  Name                                             
                                                   
 time_interp_mod_mp_time_interp_month_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CUR_MONTH                  Local  379      I(4)            4           scalar                    388,390,399,416                   
 DAY                        Local  378      I(4)            4           scalar                    383,388                           
 DAYS_IN_MONTH              Func   386      I(4)            4           scalar   PRIV             48,386,398,408,413,455,473,738,741
 HALFDAY                    Param  386      I(4)            4           scalar                    386,398,408,413,449,453,466       
 HOUR                       Local  378      I(4)            4           scalar                    383,388                           
 MID1                       Local  379      I(4)            4           scalar                    397,399,408,413,416               
 MID2                       Local  379      I(4)            4           scalar                    398,399,415,416                   
 MID_MONTH                  Local  379      I(4)            4           scalar                    386,390,397,415                   
 MINUTE                     Local  378      I(4)            4           scalar                    383,388                           
 MONTH                      Local  378      I(4)            4           scalar                    383,392,393,402,403               
 MONTH1                     Dummy  372      I(4)            4           scalar   ARG,OUT          392,403,404,405,408,413           
 MONTH2                     Dummy  372      I(4)            4           scalar   ARG,OUT          393,394,395,398,402               
 MONYEAR                    Param  394      I(4)            4           scalar                    394,405,458,471                   
 REAL                       Func   399                                  scalar                    399,416                           
 SECDAY                     Param  388      I(4)            4           scalar                    214,388,453,466                   
 SECHOUR                    Param  388      I(4)            4           scalar                    388,447                           
 SECMIN                     Param  388      I(4)            4           scalar                    210,211,388,447                   
 SECOND                     Local  378      I(4)            4           scalar                    383,388                           
 TIME                       Dummy  372      TIME_TYPE       16          scalar   ARG,IN           383,386                           
 TIME_INTERP_MONTH          Subr   372                                           PRIV                                               
 WEIGHT                     Dummy  372      R(8)            8           scalar   ARG,OUT          399,416                           
 YEAR                       Local  378      I(4)            4           scalar                    383,392,393,402,403               
 YEAR1                      Dummy  372      I(4)            4           scalar   ARG,OUT          392,403,405,407,408               
 YEAR2                      Dummy  372      I(4)            4           scalar   ARG,OUT          393,395,398,402                   

Page 14          Source Listing                  TIME_INTERP_MONTH
2021-06-01 08:55                                 time_interp.F90

    420 
    421 !#######################################################################
    422 ! <SUBROUTINE NAME="time_interp_day" INTERFACE="time_interp">
    423 !   <IN NAME="Time" TYPE="time_type" > </IN>
    424 !   <OUT NAME="weight" TYPE="real"> </OUT>
    425 !   <OUT NAME="year1" TYPE="integer"> </OUT>
    426 !   <OUT NAME="year2" TYPE="integer"> </OUT>
    427 !   <OUT NAME="month1" TYPE="integer"> </OUT>
    428 !   <OUT NAME="month2" TYPE="integer"> </OUT>
    429 !   <OUT NAME="day1" TYPE="integer"> </OUT>
    430 !   <OUT NAME="day2" TYPE="integer"> </OUT>
    431 ! </SUBROUTINE>
    432 !  returns fractional time between mid points of consecutive days
    433 
    434  subroutine time_interp_day ( Time, weight, year1, year2, month1, month2, day1, day2 )
    435 
    436    type(time_type), intent(in)  :: Time
    437    real           , intent(out) :: weight
    438    integer        , intent(out) :: year1, year2, month1, month2, day1, day2
    439 
    440    integer :: year, month, day, hour, minute, second, sday
    441 
    442    if ( .not. module_is_initialized ) call time_interp_init()
    443 
    444       call get_date (Time, year, month, day, hour, minute, second)
    445 
    446 ! time into current day in seconds
    447       sday = second + secmin*minute + sechour*hour
    448 
    449       if ( sday >= halfday ) then
    450 ! current time is after mid point of day
    451            year1 = year;  month1 = month;  day1 = day
    452            year2 = year;  month2 = month;  day2 = day + 1
    453            weight  = real(sday - halfday) / real(secday)
    454 
    455            if (day2 > days_in_month(Time)) then
    456                month2 = month2 + 1
    457                day2 = 1
    458                if (month2 > monyear) then
    459                     month2 = 1;  year2 = year2+1
    460                endif
    461            endif
    462       else
    463 ! current time is before mid point of day
    464            year2 = year;  month2 = month;  day2 = day
    465            year1 = year;  month1 = month;  day1 = day - 1
    466            weight  = real(sday + halfday) / real(secday)
    467 
    468            if (day1 < 1) then
    469                month1 = month1 - 1
    470                if (month1 < 1) then
    471                    month1 = monyear;  year1 = year1-1
    472                endif
    473                day1 = days_in_month(set_date(year1,month1,2))
    474            endif
    475       endif
    476 

Page 15          Source Listing                  TIME_INTERP_DAY
2021-06-01 08:55                                 time_interp.F90

    477  end subroutine time_interp_day


ENTRY POINTS

  Name                                           
                                                 
 time_interp_mod_mp_time_interp_day_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Local  440      I(4)            4           scalar                    444,451,452,464,465               
 DAY1                       Dummy  434      I(4)            4           scalar   ARG,OUT          451,465,468,473                   
 DAY2                       Dummy  434      I(4)            4           scalar   ARG,OUT          452,455,457,464                   
 HOUR                       Local  440      I(4)            4           scalar                    444,447                           
 MINUTE                     Local  440      I(4)            4           scalar                    444,447                           
 MONTH                      Local  440      I(4)            4           scalar                    444,451,452,464,465               
 MONTH1                     Dummy  434      I(4)            4           scalar   ARG,OUT          451,465,469,470,471,473           
 MONTH2                     Dummy  434      I(4)            4           scalar   ARG,OUT          452,456,458,459,464               
 REAL                       Func   453                                  scalar                    453,466                           
 SDAY                       Local  440      I(4)            4           scalar                    447,449,453,466                   
 SECOND                     Local  440      I(4)            4           scalar                    444,447                           
 TIME                       Dummy  434      TIME_TYPE       16          scalar   ARG,IN           444,455                           
 TIME_INTERP_DAY            Subr   434                                           PRIV                                               
 WEIGHT                     Dummy  434      R(8)            8           scalar   ARG,OUT          453,466                           
 YEAR                       Local  440      I(4)            4           scalar                    444,451,452,464,465               
 YEAR1                      Dummy  434      I(4)            4           scalar   ARG,OUT          451,465,471,473                   
 YEAR2                      Dummy  434      I(4)            4           scalar   ARG,OUT          452,459,464                       

Page 16          Source Listing                  TIME_INTERP_DAY
2021-06-01 08:55                                 time_interp.F90

    478 
    479 !#######################################################################
    480 ! <SUBROUTINE NAME="time_interp_modulo" INTERFACE="time_interp">
    481 !   <IN NAME="Time" TYPE="time_type" > </IN>
    482 !   <IN NAME="Time_beg" TYPE="time_type"> </IN>
    483 !   <IN NAME="Time_end" TYPE="time_type"> </IN>
    484 !   <IN NAME="Timelist" TYPE="time_type" DIM="(:)"> </IN>
    485 !   <IN NAME="correct_leap_year_inconsistency" TYPE="logical, optional" DEFAULT=".false.">
    486 !       Turns on a kluge for an inconsistency which may occur in a special case.
    487 !       When the modulo time period (i.e. Time_end - Time_beg) is a whole number of years
    488 !       and is not a multiple of 4, and the calendar in use has leap years, then it is
    489 !       likely that the interpolation will involve mapping a common year onto a leap year.
    490 !       In this case it is often desirable, but not absolutely necessary, to use data for
    491 !       Feb 28 of the leap year when it is mapped onto a common year.
    492 !       To turn this on, set correct_leap_year_inconsistency=.true. </IN>
    493 !   <OUT NAME="weight" TYPE="real"> </OUT>
    494 !   <OUT NAME="index1" TYPE="real"> </OUT>
    495 !   <OUT NAME="index2" TYPE="real"> </OUT>
    496 ! </SUBROUTINE>
    497 
    498 subroutine time_interp_modulo(Time, Time_beg, Time_end, Timelist, weight, index1, index2, &
    499                               correct_leap_year_inconsistency, err_msg)
    500 type(time_type), intent(in)  :: Time, Time_beg, Time_end, Timelist(:)
    501 real           , intent(out) :: weight
    502 integer        , intent(out) :: index1, index2
    503 logical, intent(in), optional :: correct_leap_year_inconsistency
    504 character(len=*), intent(out), optional :: err_msg
    505 
    506   type(time_type) :: Period, T
    507   integer :: is, ie,i1,i2
    508   integer :: ys,ms,ds,hs,mins,ss ! components of the starting date
    509   integer :: ye,me,de,he,mine,se ! components of the ending date
    510   integer :: yt,mt,dt,ht,mint,st ! components of the current date
    511   integer :: dt1                 ! temporary value for day
    512   integer :: n                   ! size of Timelist
    513   integer :: stdoutunit
    514   logical :: correct_lyr, calendar_has_leap_years, do_the_lyr_correction
    515 
    516   if ( .not. module_is_initialized ) call time_interp_init
    517   if( present(err_msg) ) err_msg = ''
    518 
    519   stdoutunit = stdout()
    520   n = size(Timelist)
    521 
    522   if (Time_beg>=Time_end) then
    523      if(fms_error_handler('time_interp_modulo', &
    524      'end of the specified time loop interval must be later than its beginning',err_msg)) return
    525   endif
    526 
    527   calendar_has_leap_years = (get_calendar_type() == JULIAN .or. get_calendar_type() == GREGORIAN)
    528 
    529   Period = Time_end-Time_beg ! period of the time axis
    530 
    531   if(present(correct_leap_year_inconsistency)) then
    532     correct_lyr = correct_leap_year_inconsistency
    533   else
    534     correct_lyr = .false.

Page 17          Source Listing                  TIME_INTERP_MODULO
2021-06-01 08:55                                 time_interp.F90

    535   endif
    536 
    537 ! bring the requested time inside the specified time period
    538   T = Time
    539 
    540   do_the_lyr_correction = .false.
    541 
    542 ! Determine if the leap year correction needs to be done.
    543 ! It never needs to be done unless 3 conditions are met:
    544 ! 1) We are using a calendar with leap years
    545 ! 2) optional argument correct_leap_year_inconsistency is present and equals .true.
    546 ! 3) The modulo time period is an integer number of years
    547 ! If all of these are true then set do_the_lyr_correction to .true.
    548 
    549   if(calendar_has_leap_years .and. correct_lyr) then
    550     call get_date(Time_beg,ys,ms,ds,hs,mins,ss)
    551     call get_date(Time_end,ye,me,de,he,mine,se)
    552     if(ms==me.and.ds==de.and.hs==he.and.mins==mine.and.ss==se) then
    553 ! whole number of years
    554       do_the_lyr_correction = .true.
    555     endif
    556   endif
    557 
    558   if(do_the_lyr_correction) then
    559      call get_date(T,yt,mt,dt,ht,mint,st)
    560      yt = ys+modulo(yt-ys,ye-ys)
    561      dt1 = dt
    562 ! If it is Feb 29, but we map into a common year, use Feb 28
    563      if(mt==2.and.dt==29.and..not.leap_year(set_date(yt,1,1))) dt1=28
    564      T = set_date(yt,mt,dt1,ht,mint,st)
    565      if (T < Time_beg) then
    566 ! the requested time is within the first year,
    567 ! but before the starting date. So we shift it to the last year.
    568        if(mt==2.and.dt==29.and..not.leap_year(set_date(ye,1,1))) dt=28
    569        T = set_date(ye,mt,dt,ht,mint,st)
    570      endif
    571   else
    572      do while ( T >= Time_end )
    573         T = T-Period
    574      enddo
    575      do while ( T < Time_beg )
    576         T = T+Period
    577      enddo
    578   endif
    579 
    580 ! find indices of the first and last records in the Timelist that are within
    581 ! the requested time period.
    582   if (Time_end<=Timelist(1).or.Time_beg>=Timelist(n)) then
    583      if(get_calendar_type() == NO_CALENDAR) then
    584        call print_time(Time_beg,    'Time_beg'    )
    585        call print_time(Time_end,    'Time_end'    )
    586        call print_time(Timelist(1), 'Timelist(1)' )
    587        call print_time(Timelist(n), 'Timelist(n)' )
    588      else
    589        call print_date(Time_beg,    'Time_beg'    )
    590        call print_date(Time_end,    'Time_end'    )
    591        call print_date(Timelist(1), 'Timelist(1)' )

Page 18          Source Listing                  TIME_INTERP_MODULO
2021-06-01 08:55                                 time_interp.F90

    592        call print_date(Timelist(n), 'Timelist(n)' )
    593      endif
    594      write(stdoutunit,*)'where n = size(Timelist) =',n
    595      if(fms_error_handler('time_interp_modulo', &
    596      'the entire time list is outside the specified time loop interval',err_msg)) return
    597   endif
    598 
    599   call bisect(Timelist,Time_beg,index1=i1,index2=i2)
    600   if (i1 < 1) then
    601      is = 1 ! Time_beg before lower boundary
    602   else if (Time_beg == Timelist(i1)) then
    603      is = i1 ! Time_beg right on the lower boundary
    604   else
    605      is = i2 ! Time_beg inside the interval or on upper boundary
    606   endif
    607   call bisect(Timelist,Time_end,index1=i1,index2=i2)
    608   if (Time_end > Timelist(i1)) then
    609     ie = i1
    610   else if (Time_end == Timelist(i1)) then
    611     if(Time_beg == Timelist(is)) then
    612 ! Timelist includes time levels at both the lower and upper ends of the period.
    613 ! The endpoints of Timelist specify the same point in the cycle.
    614 ! This ambiguity is resolved by ignoring the last time level.
    615       ie = i1-1
    616     else
    617       ie = i1
    618     endif
    619   else
    620 !   This should never happen because bisect does not return i1 such that Time_end < Timelist(i1)
    621   endif
    622   if (is>=ie) then
    623      if(get_calendar_type() == NO_CALENDAR) then
    624        call print_time(Time_beg,    'Time_beg   =')
    625        call print_time(Time_end,    'Time_end   =')
    626        call print_time(Timelist(1), 'Timelist(1)=')
    627        call print_time(Timelist(n), 'Timelist(n)=')
    628      else
    629        call print_date(Time_beg,    'Time_beg   =')
    630        call print_date(Time_end,    'Time_end   =')
    631        call print_date(Timelist(1), 'Timelist(1)=')
    632        call print_date(Timelist(n), 'Timelist(n)=')
    633      endif
    634      write(stdoutunit,*)'where n = size(Timelist) =',n
    635      write(stdoutunit,*)'is =',is,'ie =',ie
    636      if(fms_error_handler('time_interp_modulo', &
    637      'error in calculation of time list bounds within the specified time loop interval',err_msg)) return
    638   endif
    639 
    640 ! handle special cases:
    641   if( T>=Timelist(ie) ) then
    642 ! time is after the end of the portion of the time list within the requested period
    643      index1 = ie;   index2 = is
    644      weight = (T-Timelist(ie))//(Period-(Timelist(ie)-Timelist(is)))
    645   else if (T<Timelist(is)) then
    646 ! time is before the beginning of the portion of the time list within the requested period
    647      index1 = ie;   index2 = is
    648      weight = 1.0-((Timelist(is)-T)//(Period-(Timelist(ie)-Timelist(is))))

Page 19          Source Listing                  TIME_INTERP_MODULO
2021-06-01 08:55                                 time_interp.F90

    649   else
    650      call bisect(Timelist,T,index1,index2)
    651      weight = (T-Timelist(index1)) // (Timelist(index2)-Timelist(index1))
    652   endif
    653 
    654 end subroutine time_interp_modulo


ENTRY POINTS

  Name                                              
                                                    
 time_interp_mod_mp_time_interp_modulo_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALENDAR_HAS_LEAP_YEARS    Local  514      L(4)            4           scalar                    527,549                           
 CORRECT_LEAP_YEAR_INCONSIS                                                                                                         
 TENCY                      Dummy  499      L(4)            4           scalar   ARG,IN           531,532                           
 CORRECT_LYR                Local  514      L(4)            4           scalar                    532,534,549                       
 DE                         Local  509      I(4)            4           scalar                    551,552                           
 DO_THE_LYR_CORRECTION      Local  514      L(4)            4           scalar                    540,554,558                       
 DS                         Local  508      I(4)            4           scalar                    550,552                           
 DT                         Local  510      I(4)            4           scalar                    559,561,563,568,569               
 DT1                        Local  511      I(4)            4           scalar                    561,563,564                       
 ERR_MSG                    Dummy  499      CHAR                        scalar   ARG,OUT          517,524,596,637                   
 FMS_ERROR_HANDLER          Func   523      L(4)            4           scalar   PRIV             60,523,595,636,739,745,766,781,814
 GET_CALENDAR_TYPE          Func   527      I(4)            4           scalar   PRIV             50,527,583,623                    
 GREGORIAN                  Param  527      I(4)            4           scalar   PRIV             50,527                            
 HE                         Local  509      I(4)            4           scalar                    551,552                           
 HS                         Local  508      I(4)            4           scalar                    550,552                           
 HT                         Local  510      I(4)            4           scalar                    559,564,569                       
 I1                         Local  507      I(4)            4           scalar                    599,600,602,603,607,608,609,610,61
                                                                                                  5,617                             
 I2                         Local  507      I(4)            4           scalar                    599,605,607                       
 IE                         Local  507      I(4)            4           scalar                    609,615,617,622,635,641,643,644,64
                                                                                                  7,648                             
 INDEX1                     Dummy  498      I(4)            4           scalar   ARG,OUT          643,647,650,651                   
 INDEX2                     Dummy  498      I(4)            4           scalar   ARG,OUT          643,647,650,651                   
 IS                         Local  507      I(4)            4           scalar                    601,603,605,611,622,635,643,644,64
                                                                                                  5,647,648                         
 JULIAN                     Param  527      I(4)            4           scalar   PRIV             50,527                            
 LEAP_YEAR                  Func   563      L(4)            4           scalar   PRIV             48,563,568,727                    
 ME                         Local  509      I(4)            4           scalar                    551,552                           
 MINE                       Local  509      I(4)            4           scalar                    551,552                           
 MINS                       Local  508      I(4)            4           scalar                    550,552                           
 MINT                       Local  510      I(4)            4           scalar                    559,564,569                       
 MODULO                     Func   560                                  scalar                    560                               
 MS                         Local  508      I(4)            4           scalar                    550,552                           
 MT                         Local  510      I(4)            4           scalar                    559,563,564,568,569               
 N                          Local  512      I(4)            4           scalar                    520,582,587,592,594,627,632,634   
 NO_CALENDAR                Param  583      I(4)            4           scalar   PRIV             50,583,623                        
 PERIOD                     Local  506      TIME_TYPE       16          scalar                    529,573,576,644,648               
 PRESENT                    Func   517                                  scalar                    517,531                           

Page 20          Source Listing                  TIME_INTERP_MODULO
2021-06-01 08:55 Symbol Table                    time_interp.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PRINT_DATE                 Subr   589                                           PRIV             54,589,590,591,592,629,630,631,632
 PRINT_TIME                 Subr   584                                           PRIV             54,584,585,586,587,624,625,626,627
 SE                         Local  509      I(4)            4           scalar                    551,552                           
 SIZE                       Func   520                                  scalar                    520                               
 SS                         Local  508      I(4)            4           scalar                    550,552                           
 ST                         Local  510      I(4)            4           scalar                    559,564,569                       
 STDOUT                     Func   519      I(4)            4           scalar   PRIV             58,519                            
 STDOUTUNIT                 Local  513      I(4)            4           scalar                    519,594,634,635                   
 T                          Local  506      TIME_TYPE       16          scalar                    538,559,564,565,569,572,573,575,57
                                                                                                  6,641,644,645,648,650,651         
 TIME                       Dummy  498      TIME_TYPE       16          scalar   ARG,IN           538                               
 TIMELIST                   Dummy  498      RECORD          16    1     1        ARG,IN           520,582,586,587,591,592,599,602,60
                                                                                                  7,608,610,611,626,627,631,632,641,
                                                                                                  644,645,648,650,651               
 TIME_BEG                   Dummy  498      TIME_TYPE       16          scalar   ARG,IN           522,529,550,565,575,582,584,589,59
                                                                                                  9,602,611,624,629                 
 TIME_END                   Dummy  498      TIME_TYPE       16          scalar   ARG,IN           522,529,551,572,582,585,590,607,60
                                                                                                  8,610,625,630                     
 TIME_EQ                    Func   602      L(4)            4           scalar   PRIV             602,610,611,671,673,751,793       
 TIME_GT                    Func   608      L(4)            4           scalar   PRIV             608,679,765,809                   
 TIME_INTERP_MODULO         Subr   498                                           PRIV                                               
 TIME_LE                    Func   582      L(4)            4           scalar   PRIV             582                               
 TIME_LT                    Func   565      L(4)            4           scalar   PRIV             565,575,645,771,776               
 TIME_PLUS                  Func   576      RECORD          16          scalar   PRIV             576,725,841,862                   
 WEIGHT                     Dummy  498      R(8)            8           scalar   ARG,OUT          644,648,651                       
 YE                         Local  509      I(4)            4           scalar                    551,560,568,569                   
 YS                         Local  508      I(4)            4           scalar                    550,560                           
 YT                         Local  510      I(4)            4           scalar                    559,560,563,564                   

Page 21          Source Listing                  TIME_INTERP_MODULO
2021-06-01 08:55                                 time_interp.F90

    655 
    656 !#######################################################################
    657 ! given an array of times in ascending order and a specific time returns
    658 ! values of index1 and index2 such that the Timelist(index1)<=Time and
    659 ! Time<=Timelist(index2), and index2=index1+1
    660 ! index1=0, index2=1 or index=n, index2=n+1 are returned to indicate that
    661 ! the time is out of range
    662 subroutine bisect(Timelist,Time,index1,index2)
    663   type(time_type)  , intent(in)  :: Timelist(:)
    664   type(time_type)  , intent(in)  :: Time
    665   integer, optional, intent(out) :: index1, index2
    666 
    667   integer :: i,il,iu,n,i1,i2
    668 
    669   n = size(Timelist(:))
    670 
    671   if (Time==Timelist(1)) then
    672      i1 = 1 ; i2 = 2
    673   else if (Time==Timelist(n)) then
    674      i1 = n ; i2 = n+1
    675   else
    676      il = 0; iu=n+1
    677      do while(iu-il > 1)
    678         i = (iu+il)/2
    679         if(Timelist(i) > Time) then
    680            iu = i
    681         else
    682            il = i
    683         endif
    684      enddo
    685      i1 = il ; i2 = il+1
    686   endif
    687 
    688   if(PRESENT(index1)) index1 = i1
    689   if(PRESENT(index2)) index2 = i2
    690 end subroutine bisect

Page 22          Source Listing                  BISECT
2021-06-01 08:55 Entry Points                    time_interp.F90



ENTRY POINTS

  Name                                  
                                        
 time_interp_mod_mp_bisect_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BISECT                     Subr   662                                                            599,607,650,772                   
 I                          Local  667      I(4)            4           scalar                    678,679,680,682                   
 I1                         Local  667      I(4)            4           scalar                    672,674,685,688                   
 I2                         Local  667      I(4)            4           scalar                    672,674,685,689                   
 IL                         Local  667      I(4)            4           scalar                    676,677,678,682,685               
 INDEX1                     Dummy  662      I(4)            4           scalar   ARG,OUT          688                               
 INDEX2                     Dummy  662      I(4)            4           scalar   ARG,OUT          689                               
 IU                         Local  667      I(4)            4           scalar                    676,677,678,680                   
 N                          Local  667      I(4)            4           scalar                    669,673,674,676                   
 PRESENT                    Func   688                                  scalar                    688,689                           
 SIZE                       Func   669                                  scalar                    669                               
 TIME                       Dummy  662      TIME_TYPE       16          scalar   ARG,IN           671,673,679                       
 TIMELIST                   Dummy  662      RECORD          16    1     1        ARG,IN           669,671,673,679                   

Page 23          Source Listing                  BISECT
2021-06-01 08:55                                 time_interp.F90

    691 
    692 
    693 !#######################################################################
    694 ! <SUBROUTINE NAME="time_interp_list" INTERFACE="time_interp">
    695 !   <IN NAME="Time" TYPE="time_type" > </IN>
    696 !   <IN NAME="Timelist" TYPE="time_type" DIM="(:)"> </IN>
    697 !   <OUT NAME="weight" TYPE="real"> </OUT>
    698 !   <OUT NAME="index1" TYPE="real"> </OUT>
    699 !   <OUT NAME="index2" TYPE="real"> </OUT>
    700 !   <IN NAME="modtime" TYPE="integer" > </IN>
    701 ! </SUBROUTINE>
    702 
    703 subroutine time_interp_list ( Time, Timelist, weight, index1, index2, modtime, err_msg )
    704 type(time_type)  , intent(in)  :: Time, Timelist(:)
    705 real             , intent(out) :: weight
    706 integer          , intent(out) :: index1, index2
    707 integer, optional, intent(in)  :: modtime
    708 character(len=*), intent(out), optional :: err_msg
    709 
    710 integer :: n, hr, mn, se, mtime
    711 type(time_type) :: T, Ts, Te, Td, Period, Time_mod
    712 character(len=:),allocatable :: terr, tserr, teerr
    713 
    714   if ( .not. module_is_initialized ) call time_interp_init
    715 
    716   if( present(err_msg) ) err_msg = ''
    717 
    718   weight = 0.; index1 = 0; index2 = 0
    719   n = size(Timelist(:))
    720 
    721 ! setup modular time axis?
    722   mtime = NONE
    723   if (present(modtime)) then
    724      mtime = modtime
    725      Time_mod = (Timelist(1)+Timelist(n))/2
    726      call get_date (Time_mod, yrmod, momod, dymod, hr, mn, se)
    727      mod_leapyear = leap_year(Time_mod)
    728   endif
    729 
    730 ! set period for modulo axis
    731   select case (mtime)
    732      case (NONE)
    733 ! do nothing
    734      case (YEAR)
    735          Period = set_time(0,days_in_year(Time_mod))
    736      case (MONTH)
    737 ! month length must be equal
    738          if (days_in_month(Time_mod) /= days_in_month(Time)) then
    739             if(fms_error_handler ('time_interp_list','modulo months must have same length',err_msg)) return
    740          endif
    741          Period = set_time(0,days_in_month(Time_mod))
    742      case (DAY)
    743          Period = set_time(0,1)
    744      case default
    745          if(fms_error_handler ('time_interp_list','invalid value for argument modtime',err_msg)) return
    746   end select
    747 

Page 24          Source Listing                  TIME_INTERP_LIST
2021-06-01 08:55                                 time_interp.F90

    748 ! If modulo time is in effect and Timelist spans a time interval exactly equal to
    749 ! the modulo period, then the endpoints of Timelist specify the same point in the cycle.
    750 ! This ambiguity is resolved by ignoring the last time level.
    751   if (mtime /= NONE .and. Timelist(size(Timelist))-Timelist(1) == Period) then
    752      n = size(Timelist) - 1
    753   else
    754      n = size(Timelist)
    755   endif
    756 
    757 ! starting and ending times from list
    758   Ts = Timelist(1)
    759   Te = Timelist(n)
    760   Td = Te-Ts
    761   T  = set_modtime(Time,mtime)
    762 
    763 ! Check that Timelist does not span a time interval greater than the modulo period
    764   if (mtime /= NONE) then
    765      if (Td > Period) then
    766         if(fms_error_handler ('time_interp_list','period of list exceeds modulo period',err_msg)) return
    767      endif
    768   endif
    769 
    770 ! time falls on start or between start and end list values
    771   if ( T >= Ts .and. T < Te ) then
    772      call bisect(Timelist(1:n),T,index1,index2)
    773      weight = (T-Timelist(index1)) // (Timelist(index2)-Timelist(index1))
    774 
    775 ! time falls before starting list value
    776   else if ( T < Ts ) then
    777      if (mtime == NONE) then
    778         call time_list_error(T,terr)
    779         call time_list_error(Ts,tserr)
    780         call time_list_error(Te,teerr)
    781         if(fms_error_handler ('time_interp_list',&
    782            'time '//trim(terr)//' ('//date_to_string(T)//' is before range of list '//trim(tserr)//'-'//trim(teerr)//&
    783            '('//date_to_string(Ts)//' - '//date_to_string(Te)//')',&
    784            err_msg)) return
    785         deallocate(terr,tserr,teerr)
    786      endif
    787      Td = Te-Ts
    788      weight = 1. - ((Ts-T) // (Period-Td))
    789      index1 = n
    790      index2 = 1
    791 
    792 ! time falls on ending list value
    793   else if ( T == Te ) then
    794     if(perthlike_behavior) then
    795        weight = 1.0
    796        index1 = n-1
    797        index2 = n
    798     else
    799        weight = 0.
    800        index1 = n
    801        if (mtime == NONE) then
    802          index2 = n
    803        else
    804          index2 = 1

Page 25          Source Listing                  TIME_INTERP_LIST
2021-06-01 08:55                                 time_interp.F90

    805        endif
    806     endif
    807 
    808 ! time falls after ending list value
    809   else if ( T > Te ) then
    810      if (mtime == NONE) then
    811         call time_list_error(T,terr)
    812         call time_list_error(Ts,tserr)
    813         call time_list_error(Te,teerr)
    814         if(fms_error_handler ('time_interp_list',&
    815            'time '//trim(terr)//' ('//date_to_string(T)//' is after range of list '//trim(tserr)//'-'//trim(teerr)//&
    816            '('//date_to_string(Ts)//' - '//date_to_string(Te)//')',&
    817            err_msg)) return
    818         deallocate(terr,tserr,teerr)
    819      endif
    820      Td = Te-Ts
    821      weight = (T-Te) // (Period-Td)
    822      index1 = n
    823      index2 = 1
    824   endif
    825 
    826 end subroutine time_interp_list


ENTRY POINTS

  Name                                            
                                                  
 time_interp_mod_mp_time_interp_list_             

Page 26          Source Listing                  TIME_INTERP_LIST
2021-06-01 08:55 Symbol Table                    time_interp.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATE_TO_STRING             Func   782      CHAR            15          scalar   PRIV             55,782,783,815,816                
 DAY                        Param  742      I(4)            4           scalar                    205,742,895                       
 DAYS_IN_YEAR               Func   735      I(4)            4           scalar   PRIV             48,735                            
 DYMOD                      Local  726      I(4)            4           scalar                    726,897                           
 ERR_MSG                    Dummy  703      CHAR                        scalar   ARG,OUT          716,739,745,766,784,817           
 HR                         Local  710      I(4)            4           scalar                    726                               
 INDEX1                     Dummy  703      I(4)            4           scalar   ARG,OUT          718,772,773,789,796,800,822       
 INDEX2                     Dummy  703      I(4)            4           scalar   ARG,OUT          718,772,773,790,797,802,804,823   
 MN                         Local  710      I(4)            4           scalar                    726                               
 MODTIME                    Dummy  703      I(4)            4           scalar   ARG,IN           723,724                           
 MOD_LEAPYEAR               Local  727      L(4)            4           scalar                    727,887                           
 MOMOD                      Local  726      I(4)            4           scalar                    726,893,897                       
 MONTH                      Param  736      I(4)            4           scalar                    205,736,891                       
 MTIME                      Local  710      I(4)            4           scalar                    722,724,731,751,761,764,777,801,81
                                                                                                  0                                 
 N                          Local  710      I(4)            4           scalar                    719,725,752,754,759,772,789,796,79
                                                                                                  7,800,802,822                     
 NONE                       Param  722      I(4)            4           scalar                    205,722,732,751,764,777,801,810,87
                                                                                                  7,881                             
 PERIOD                     Local  711      TIME_TYPE       16          scalar                    735,741,743,751,765,788,821       
 PERTHLIKE_BEHAVIOR         Local  794      L(4)            4           scalar                    248,250,794                       
 PRESENT                    Func   716                                  scalar                    716,723                           
 SE                         Local  710      I(4)            4           scalar                    726                               
 SET_TIME                   Local  735                                  scalar   PRIV             47,735,741,743                    
 SET_TIME_I                 Func   735      RECORD          16          scalar   PRIV             735,741,743                       
 SIZE                       Func   719                                  scalar                    719,751,752,754                   
 T                          Local  711      TIME_TYPE       16          scalar                    761,771,772,773,776,778,782,788,79
                                                                                                  3,809,811,815,821                 
 TD                         Local  711      TIME_TYPE       16          scalar                    760,765,787,788,820,821           
 TE                         Local  711      TIME_TYPE       16          scalar                    759,760,771,780,783,787,793,809,81
                                                                                                  3,816,820,821                     
 TEERR                      Local  712      CHAR                        scalar   ALC              780,782,785,813,815,818           
 TERR                       Local  712      CHAR                        scalar   ALC              778,782,785,811,815,818           
 TIME                       Dummy  703      TIME_TYPE       16          scalar   ARG,IN           738,761                           
 TIMELIST                   Dummy  703      RECORD          16    1     1        ARG,IN           719,725,751,752,754,758,759,772,77
                                                                                                  3                                 
 TIME_INTERP_LIST           Subr   703                                           PRIV                                               
 TIME_LIST_ERROR            Subr   778                                           PRIV             55,778,779,780,811,812,813        
 TIME_MOD                   Local  711      TIME_TYPE       16          scalar                    725,726,727,735,738,741           
 TIME_SCALAR_DIVIDE         Func   725      RECORD          16          scalar   PRIV             725,841,862                       
 TRIM                       Func   782                                  scalar                    782,815                           
 TS                         Local  711      TIME_TYPE       16          scalar                    758,760,771,776,779,783,787,788,81
                                                                                                  2,816,820                         
 TSERR                      Local  712      CHAR                        scalar   ALC              779,782,785,812,815,818           
 WEIGHT                     Dummy  703      R(8)            8           scalar   ARG,OUT          718,773,788,795,799,821           
 YEAR                       Param  734      I(4)            4           scalar                    205,734,883                       
 YRMOD                      Local  726      I(4)            4           scalar                    726,885,893,897                   

Page 27          Source Listing                  TIME_INTERP_LIST
2021-06-01 08:55                                 time_interp.F90

    827 
    828 !#######################################################################
    829 !  private routines
    830 !#######################################################################
    831 
    832  function year_midpt (year)
    833 
    834    integer, intent(in) :: year
    835    type (time_type)    :: year_midpt, year_beg, year_end
    836 
    837 
    838    year_beg = set_date(year  , 1, 1)
    839    year_end = set_date(year+1, 1, 1)
    840 
    841    year_midpt = (year_beg + year_end) / 2
    842 
    843  end function year_midpt


ENTRY POINTS

  Name                                      
                                            
 time_interp_mod_mp_year_midpt_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 YEAR                       Dummy  832      I(4)            4           scalar   ARG,IN           838,839                           
 YEAR_BEG                   Local  835      TIME_TYPE       16          scalar                    838,841                           
 YEAR_END                   Local  835      TIME_TYPE       16          scalar                    839,841                           
 YEAR_MIDPT                 Func   832      RECORD          16          scalar                    343,349,355,841                   

Page 28          Source Listing                  YEAR_MIDPT
2021-06-01 08:55                                 time_interp.F90

    844 
    845 !#######################################################################
    846 
    847  function month_midpt (year, month)
    848 
    849    integer, intent(in) :: year, month
    850    type (time_type)    :: month_midpt, month_beg, month_end
    851 
    852 !  --- beginning of this month ---
    853    month_beg = set_date(year, month, 1)
    854 
    855 !  --- start of next month ---
    856    if (month < 12) then
    857       month_end = set_date(year, month+1, 1)
    858    else
    859       month_end = set_date(year+1, 1, 1)
    860    endif
    861 
    862    month_midpt = (month_beg + month_end) / 2
    863 
    864  end function month_midpt


ENTRY POINTS

  Name                                       
                                             
 time_interp_mod_mp_month_midpt_             

Page 29          Source Listing                  MONTH_MIDPT
2021-06-01 08:55 Symbol Table                    time_interp.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MONTH                      Dummy  847      I(4)            4           scalar   ARG,IN           853,856,857                       
 MONTH_BEG                  Local  850      TIME_TYPE       16          scalar                    853,862                           
 MONTH_END                  Local  850      TIME_TYPE       16          scalar                    857,859,862                       
 MONTH_MIDPT                Func   847      RECORD          16          scalar                    862                               
 YEAR                       Dummy  847      I(4)            4           scalar   ARG,IN           853,857,859                       

Page 30          Source Listing                  MONTH_MIDPT
2021-06-01 08:55                                 time_interp.F90

    865 
    866 !#######################################################################
    867 
    868 function set_modtime (Tin, modtime) result (Tout)
    869 type(time_type), intent(in) :: Tin
    870 integer, intent(in), optional :: modtime
    871 type(time_type)             :: Tout
    872 integer :: yr, mo, dy, hr, mn, se, mtime
    873 
    874   if(present(modtime)) then
    875     mtime = modtime
    876   else
    877     mtime = NONE
    878   endif
    879 
    880   select case (mtime)
    881     case (NONE)
    882        Tout = Tin
    883     case (YEAR)
    884        call get_date (Tin, yr, mo, dy, hr, mn, se)
    885        yr = yrmod
    886 ! correct leap year dates
    887           if (.not.mod_leapyear .and. mo == 2 .and. dy > 28) then
    888              mo = 3; dy = dy-28
    889           endif
    890        Tout = set_date (yr, mo, dy, hr, mn, se)
    891     case (MONTH)
    892        call get_date (Tin, yr, mo, dy, hr, mn, se)
    893        yr = yrmod; mo = momod
    894        Tout = set_date (yr, mo, dy, hr, mn, se)
    895     case (DAY)
    896        call get_date (Tin, yr, mo, dy, hr, mn, se)
    897        yr = yrmod; mo = momod; dy = dymod
    898        Tout = set_date (yr, mo, dy, hr, mn, se)
    899   end select
    900 
    901 end function set_modtime

Page 31          Source Listing                  SET_MODTIME
2021-06-01 08:55 Entry Points                    time_interp.F90



ENTRY POINTS

  Name                                       
                                             
 time_interp_mod_mp_set_modtime_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DY                         Local  872      I(4)            4           scalar                    884,887,888,890,892,894,896,897,89
                                                                                                  8                                 
 HR                         Local  872      I(4)            4           scalar                    884,890,892,894,896,898           
 MN                         Local  872      I(4)            4           scalar                    884,890,892,894,896,898           
 MO                         Local  872      I(4)            4           scalar                    884,887,888,890,892,893,894,896,89
                                                                                                  7,898                             
 MODTIME                    Dummy  868      I(4)            4           scalar   ARG,IN           874,875                           
 MTIME                      Local  872      I(4)            4           scalar                    875,877,880                       
 PRESENT                    Func   874                                  scalar                    874                               
 SE                         Local  872      I(4)            4           scalar                    884,890,892,894,896,898           
 SET_MODTIME                Func   868      RECORD          16          scalar                    761                               
 TIN                        Dummy  868      TIME_TYPE       16          scalar   ARG,IN           882,884,892,896                   
 TOUT                       Local  871      TIME_TYPE       16          scalar                    882,890,894,898                   
 YR                         Local  872      I(4)            4           scalar                    884,885,890,892,893,894,896,897,89
                                                                                                  8                                 

Page 32          Source Listing                  SET_MODTIME
2021-06-01 08:55                                 time_interp.F90

    902 
    903 !#######################################################################
    904 
    905 subroutine error_handler (string)
    906 character(len=*), intent(in) :: string
    907 
    908   call error_mesg ('time_interp_mod', trim(string), FATAL)
    909 
    910 ! write (*,'(a)') 'ERROR in time_interp: ' // trim(string)
    911 ! stop 111
    912 
    913 end subroutine error_handler


ENTRY POINTS

  Name                                         
                                               
 time_interp_mod_mp_error_handler_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERROR_HANDLER              Subr   905                                                                                              
 ERROR_MESG                 Subr   908                                           PRIV             58,908                            
 FATAL                      Param  908      I(4)            4           scalar   PRIV             58,908                            
 STRING                     Dummy  905      CHAR                        scalar   ARG,IN           908                               
 TRIM                       Func   908                                  scalar                    908                               

Page 33          Source Listing                  ERROR_HANDLER
2021-06-01 08:55                                 time_interp.F90

    914 
    915 !#######################################################################
    916 
    917 end module time_interp_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOSE_FILE                 Subr   59                                            PRIV             59                                
 FMS_MOD                    Module 57                                                             57                                
 FRACTION_OF_YEAR@0         Local  311      R(8)            8           scalar                                                      
 HOURDAY                    Param  209      I(4)            4           scalar                    211                               
 MINHOUR                    Param  209      I(4)            4           scalar                    210,211                           
 MONTH_MIDPT@0              Local  847      TIME_TYPE       16          scalar                                                      
 MPP_MOD                    Module 61                                                             61                                
 OPEN_NAMELIST_FILE         Func   59       I(4)            4           scalar   PRIV             59                                
 Operator (+)                      51                                                                                               
 REAL_TO_TIME_TYPE          Func   49       RECORD          16          scalar   PRIV             49                                
 TIME_INTERP                Local  198                                  scalar                    68                                
 TIME_INTERP_MOD            Module 21                                                                                               
 TIME_MANAGER_MOD           Module 47                                                             47                                
 TIME_TYPE_TO_REAL          Func   49       R(8)            8           scalar   PRIV             49                                

Page 34          Source Listing                  ERROR_HANDLER
2021-06-01 08:55                                 time_interp.F90

    918 
    919 ! <INFO>
    920 
    921 !   <ERROR MSG="input time list not ascending order" STATUS="">
    922 !     The list of input time types must have ascending dates.
    923 !   </ERROR> *
    924 !   <ERROR MSG="modulo months must have same length" STATUS="">
    925 !     The length of the current month for input Time and Time_list
    926 !     must be the same when using the modulo month option.
    927 !     The modulo month option is available but not supported.
    928 !   </ERROR> *
    929 !   <ERROR MSG="invalid value for argument modtime" STATUS="">
    930 !     The optional argument modtime must have a value set by one
    931 !     of the public parameters: NONE, YEAR, MONTH, DAY.
    932 !     The MONTH and DAY options are available but not supported.
    933 !   </ERROR> *
    934 !   <ERROR MSG="period of list exceeds modulo period" STATUS="">
    935 !     The difference between the last and first values in the
    936 !     input Time list/array exceeds the length of the modulo period.
    937 !   </ERROR> *
    938 !   <ERROR MSG="time before range of list or time after range of list" STATUS="">
    939 !     These errors occur when you are not using a modulo axis and the
    940 !     input Time occurs before the first value in the Time list/array
    941 !     or after the last value in the Time list/array.
    942 !   </ERROR> *
    943 !   <NOTE>
    944 !   For all routines in this module the calendar type in module
    945 !   time_manager must be set.
    946 !   </NOTE>
    947 !   <NOTE>
    948 !     The following private parameters are set by this module:
    949 ! <PRE>
    950 !           seconds per minute = 60
    951 !           minutes per hour   = 60
    952 !           hours   per day    = 24
    953 !           months  per year   = 12
    954 ! </PRE>
    955 !   </NOTE>
    956 
    957 ! </INFO>

Page 35          Source Listing                  ERROR_HANDLER
2021-06-01 08:55 Subprograms/Common Blocks       time_interp.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BISECT                     Subr   662                                                            599,607,650,772                   
 ERROR_HANDLER              Subr   905                                                                                              
 FRACTION_OF_YEAR           Func   311      R(8)            8           scalar                                                      
 MONTH_MIDPT                Func   847      RECORD          16          scalar                    862                               
 SET_MODTIME                Func   868      RECORD          16          scalar                    761                               
 TIME_INTERP_DAY            Subr   434                                           PRIV                                               
 TIME_INTERP_FRAC           Subr   282                                           PRIV             315                               
 TIME_INTERP_INIT           Subr   255                                                                                              
 TIME_INTERP_LIST           Subr   703                                           PRIV                                               
 TIME_INTERP_MOD            Module 21                                                                                               
 TIME_INTERP_MODULO         Subr   498                                           PRIV                                               
 TIME_INTERP_MONTH          Subr   372                                           PRIV                                               
 TIME_INTERP_YEAR           Subr   328                                           PRIV                                               
 YEAR_MIDPT                 Func   832      RECORD          16          scalar                    343,349,355,841                   

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion

Page 36          Source Listing                  ERROR_HANDLER
2021-06-01 08:55                                 time_interp.F90

       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy

Page 37          Source Listing                  ERROR_HANDLER
2021-06-01 08:55                                 time_interp.F90

       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : time_interp.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
