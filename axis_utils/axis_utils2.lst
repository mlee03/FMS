Page 1           Source Listing                  GET_AXIS_CART
2021-06-01 08:54                                 /tmp/ifortERfZoR.i90

      1 # 1 "axis_utils2.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 !> @file
     22 !! @brief A set of utilities for manipulating axes and extracting axis attributes
     23 !! @author M.J. Harrison
     24 !! @email gfdl.climate.model.info@noaa.gov
     25 module axis_utils2_mod
     26   use, intrinsic :: iso_fortran_env
     27   use mpp_mod,    only: mpp_error, FATAL, stdout
     28   use fms_mod,    only: lowercase, uppercase, string_array_index, fms_error_handler
     29   use fms2_io_mod, only: FmsNetcdfDomainFile_t, variable_att_exists, FmsNetcdfFile_t, &
     30                          get_variable_num_dimensions, get_variable_attribute,  &
     31                          get_variable_size, read_data, variable_exists
     32   use platform_mod
     33 
     34   implicit none
     35 
     36   public get_axis_cart, get_axis_modulo, lon_in_range, &
     37          tranlon, frac_index, nearest_index, interp_1d, get_axis_modulo_times, axis_edges
     38 
     39   private
     40 
     41   integer, parameter :: maxatts = 100
     42   real, parameter    :: epsln= 1.e-10
     43   real, parameter    :: fp5 = 0.5, f360 = 360.0
     44 
     45 ! Include variable "version" to be written to log file.
     46 # 1 "../include/file_version.h" 1 
     47 ! -*-f90-*-
     48 !***********************************************************************
     49 !*                   GNU Lesser General Public License
     50 !*
     51 !* This file is part of the GFDL Flexible Modeling System (FMS).
     52 !*
     53 !* FMS is free software: you can redistribute it and/or modify it under
     54 !* the terms of the GNU Lesser General Public License as published by
     55 !* the Free Software Foundation, either version 3 of the License, or (at
     56 !* your option) any later version.
     57 !*

Page 2           Source Listing                  GET_AXIS_CART
2021-06-01 08:54                                 ../include/file_version.h

     58 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     59 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     60 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     61 !* for more details.
     62 !*
     63 !* You should have received a copy of the GNU Lesser General Public
     64 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     65 !***********************************************************************
     66 
     67 # 23
     68 
     69   character(len=*), parameter :: version = 'unknown'
     70 
     71 # 46 "axis_utils2.F90" 2 
     72 
     73   interface interp_1d
     74      module procedure interp_1d_1d
     75      module procedure interp_1d_2d
     76      module procedure interp_1d_3d
     77   end interface
     78 
     79 contains
     80 
     81 !> @brief Returns X,Y,Z or T cartesian attribute
     82   subroutine get_axis_cart(fileobj, axisname, cart)
     83     type(FmsNetcdfFile_t), intent(in) :: fileobj
     84     character(len=*), intent(in) :: axisname
     85     character(len=1), intent(out) :: cart
     86 
     87     character(len=1) :: axis_cart
     88     character(len=16), dimension(2) :: lon_names, lat_names
     89     character(len=16), dimension(3) :: z_names
     90     character(len=16), dimension(2) :: t_names
     91     character(len=16), dimension(3) :: lon_units, lat_units
     92     character(len=8) , dimension(4) :: z_units
     93     character(len=3) , dimension(6) :: t_units
     94     character(len=32) :: name
     95     integer :: i
     96 
     97     lon_names = (/'lon','x  '/)
     98     lat_names = (/'lat','y  '/)
     99     z_names = (/'depth ','height','z     '/)
    100     t_names = (/'time','t   '/)
    101     lon_units = (/'degrees_e   ', 'degrees_east', 'degreese    '/)
    102     lat_units = (/'degrees_n    ', 'degrees_north', 'degreesn     '/)
    103     z_units = (/'cm ','m  ','pa ','hpa'/)
    104     t_units = (/'sec', 'min','hou','day','mon','yea'/)
    105 
    106     cart = "N"
    107     if (variable_exists(fileobj, axisname)) then
    108       if (variable_att_exists(fileobj, axisname, "cartesian_axis")) then
    109         call get_variable_attribute(fileobj, axisname, "cartesian_axis", cart(1:1))
    110       elseif (variable_att_exists(fileobj, axisname, "axis")) then
    111         call get_variable_attribute(fileobj, axisname, "axis", cart(1:1))
    112       endif
    113       axis_cart = uppercase(cart)
    114       if (axis_cart .eq. 'X' .or. axis_cart .eq. 'Y' .or. axis_cart .eq. 'Z' &

Page 3           Source Listing                  GET_AXIS_CART
2021-06-01 08:54                                 axis_utils2.F90

    115           .or. axis_cart .eq. 'T') then
    116         cart = axis_cart
    117         return
    118       endif
    119     endif
    120 
    121     if (cart /= 'X' .and. cart /= 'Y' .and. cart /= 'Z' .and. cart /= 'T') then
    122        name = lowercase(axisname)
    123        do i=1,size(lon_names(:))
    124           if (trim(name(1:3)) == trim(lon_names(i))) cart = 'X'
    125        enddo
    126        do i=1,size(lat_names(:))
    127           if (trim(name(1:3)) == trim(lat_names(i))) cart = 'Y'
    128        enddo
    129        do i=1,size(z_names(:))
    130           if (trim(name) == trim(z_names(i))) cart = 'Z'
    131        enddo
    132        do i=1,size(t_names(:))
    133           if (trim(name) == t_names(i)) cart = 'T'
    134        enddo
    135     end if
    136 
    137     if (cart /= 'X' .and. cart /= 'Y' .and. cart /= 'Z' .and. cart /= 'T') then
    138        name = lowercase(axisname)
    139        do i=1,size(lon_units(:))
    140           if (trim(name) == trim(lon_units(i))) cart = 'X'
    141        enddo
    142        do i=1,size(lat_units(:))
    143           if (trim(name) == trim(lat_units(i))) cart = 'Y'
    144        enddo
    145        do i=1,size(z_units(:))
    146           if (trim(name) == trim(z_units(i))) cart = 'Z'
    147        enddo
    148        do i=1,size(t_units(:))
    149           if (name(1:3) == trim(t_units(i))) cart = 'T'
    150        enddo
    151     end if
    152   end subroutine get_axis_cart

Page 4           Source Listing                  GET_AXIS_CART
2021-06-01 08:54 Entry Points                    axis_utils2.F90



ENTRY POINTS

  Name                                         
                                               
 axis_utils2_mod_mp_get_axis_cart_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXISNAME                   Dummy  82       CHAR                        scalar   ARG,IN           107,108,109,110,111,122,138       
 AXIS_CART                  Local  87       CHAR            1           scalar                    113,114,115,116                   
 CART                       Dummy  82       CHAR            1           scalar   ARG,OUT          106,109,111,113,116,121,124,127,13
                                                                                                  0,133,137,140,143,146,149         
 FILEOBJ                    Dummy  82       FMSNETCDFFILE_T 872         scalar   ARG,IN           107,108,109,110,111               
 FMSNETCDFFILE_T            Type   83                                   scalar   PRIV             29,83,156,278,287                 
 GET_AXIS_CART              Subr   82                                                                                               
 GET_VARIABLE_ATTRIBUTE     Local  109                                  scalar   PRIV             30,109,111,190,200,304,305        
 GET_VARIABLE_ATTRIBUTE_0D  Subr   109                                           PRIV             109,111,190,200,304,305           
 I                          Local  95       I(4)            4           scalar                    123,124,126,127,129,130,132,133,13
                                                                                                  9,140,142,143,145,146,148,149     
 LAT_NAMES                  Local  88       CHAR            16    1     2                         98,126,127                        
 LAT_UNITS                  Local  91       CHAR            16    1     3                         102,142,143                       
 LON_NAMES                  Local  88       CHAR            16    1     2                         97,123,124                        
 LON_UNITS                  Local  91       CHAR            16    1     3                         101,139,140                       
 LOWERCASE                  Func   122      CHAR                        scalar   TGT,PRIV         28,122,138                        
 NAME                       Local  94       CHAR            32          scalar                    122,124,127,130,133,138,140,143,14
                                                                                                  6,149                             
 SIZE                       Func   123                                  scalar                    123,126,129,132,139,142,145,148   
 TRIM                       Func   124                                  scalar                    124,127,130,133,140,143,146,149   
 T_NAMES                    Local  90       CHAR            16    1     2                         100,132,133                       
 T_UNITS                    Local  93       CHAR            3     1     6                         104,148,149                       
 UPPERCASE                  Func   113      CHAR                        scalar   TGT,PRIV         28,113                            
 VARIABLE_ATT_EXISTS        Func   108      L(4)            4           scalar   PRIV             29,108,110,188,198,282,293,294    
 VARIABLE_EXISTS            Func   107      L(4)            4           scalar   PRIV             31,107                            
 Z_NAMES                    Local  89       CHAR            16    1     3                         99,129,130                        
 Z_UNITS                    Local  92       CHAR            8     1     4                         103,145,146                       

Page 5           Source Listing                  GET_AXIS_CART
2021-06-01 08:54                                 axis_utils2.F90

    153 
    154   subroutine axis_edges(fileobj, name, edge_data, reproduce_null_char_bug_flag)
    155 
    156   class(FmsNetcdfFile_t), intent(in) :: fileobj
    157   character(len=*), intent(in) :: name
    158   class(*), dimension(:), intent(out) :: edge_data
    159   logical, intent(in), optional :: reproduce_null_char_bug_flag !< Flag indicating to reproduce
    160 !! the mpp_io bug where the null characters were not removed
    161 !! after reading a string attribute
    162 
    163   integer :: ndims
    164   character(len=128) :: buffer
    165   integer, dimension(:), allocatable :: dim_sizes
    166   real(kind=r4_kind), dimension(:), allocatable :: r32
    167   real(kind=r4_kind), dimension(:,:), allocatable :: r322d
    168   real(kind=r8_kind), dimension(:), allocatable :: r64
    169   real(kind=r8_kind), dimension(:,:), allocatable :: r642d
    170   integer :: i
    171   integer :: n
    172   logical :: reproduce_null_char_bug !< Local flag indicating to reproduce the mpp_io bug where
    173 !! the null characters were not removed after reading a string attribute
    174 
    175   ndims = get_variable_num_dimensions(fileobj, name)
    176   allocate(dim_sizes(ndims))
    177   call get_variable_size(fileobj, name, dim_sizes)
    178   n = dim_sizes(1)
    179   if (size(edge_data) .ne. n+1) then
    180     call mpp_error(FATAL, "axis_edge: incorrect size of edge_data array.")
    181   endif
    182   deallocate(dim_sizes)
    183 
    184   reproduce_null_char_bug = .false.
    185   if (present(reproduce_null_char_bug_flag)) reproduce_null_char_bug = reproduce_null_char_bug_flag
    186 
    187   buffer = ""
    188   if (variable_att_exists(fileobj, name, "edges")) then
    189 !! If the reproduce_null_char_bug flag is turned on fms2io will not remove the null character
    190     call get_variable_attribute(fileobj, name, "edges", buffer, reproduce_null_char_bug_flag=reproduce_null_char_bug)
    191 
    192 !! Check for a null character here, if it exists *_bnds will be calculated instead of read in
    193     if (reproduce_null_char_bug) then
    194         i = 0
    195         i = index(buffer, char(0))
    196         if (i > 0) buffer = ""
    197     endif
    198   elseif (variable_att_exists(fileobj, name, "bounds")) then
    199 !! If the reproduce_null_char_bug flag is turned on fms2io will not remove the null character
    200     call get_variable_attribute(fileobj, name, "bounds", buffer, reproduce_null_char_bug_flag=reproduce_null_char_bug)
    201 
    202 !! Check for a null character here, if it exists *_bnds will be calculated instead of read in
    203     if (reproduce_null_char_bug) then
    204         i = 0
    205         i = index(buffer, char(0))
    206         if (i > 0) buffer = ""
    207     endif
    208   endif
    209   if (trim(buffer) .ne. "") then

Page 6           Source Listing                  AXIS_EDGES
2021-06-01 08:54                                 axis_utils2.F90

    210     ndims = get_variable_num_dimensions(fileobj, buffer)
    211     allocate(dim_sizes(ndims))
    212     call get_variable_size(fileobj, buffer, dim_sizes)
    213     if (size(dim_sizes) .eq. 1) then
    214       if (dim_sizes(1) .ne. n+1) then
    215         call mpp_error(FATAL, "axis_edges: incorrect size of edge data.")
    216       endif
    217       call read_data(fileobj, buffer, edge_data)
    218     elseif (size(dim_sizes) .eq. 2) then
    219       if (dim_sizes(1) .ne. 2) then
    220         call mpp_error(FATAL, "axis_edges: first dimension of edge must be of size 2")
    221       endif
    222       if (dim_sizes(2) .ne. n) then
    223         call mpp_error(FATAL, "axis_edges: incorrect size of edge data.")
    224       endif
    225       select type (edge_data)
    226         type is (real(kind=r4_kind))
    227           allocate(r322d(dim_sizes(1), dim_sizes(2)))
    228           call read_data(fileobj, buffer, r322d)
    229           edge_data(1:dim_sizes(2)) = r322d(1,:)
    230           edge_data(dim_sizes(2)+1) = r322d(2,dim_sizes(2))
    231           deallocate(r322d)
    232         type is (real(kind=r8_kind))
    233           allocate(r642d(dim_sizes(1), dim_sizes(2)))
    234           call read_data(fileobj, buffer, r642d)
    235           edge_data(1:dim_sizes(2)) = r642d(1,:)
    236           edge_data(dim_sizes(2)+1) = r642d(2,dim_sizes(2))
    237           deallocate(r642d)
    238         class default
    239           call mpp_error(FATAL, "axis_edges: unsupported kind.")
    240       end select
    241     endif
    242     deallocate(dim_sizes)
    243   else
    244     select type (edge_data)
    245       type is (real(kind=r4_kind))
    246         allocate(r32(n))
    247         call read_data(fileobj, name, r32)
    248         do i = 2, n
    249           edge_data(i) = r32(i-1) + 0.5_r4_kind*(r32(i) - r32(i-1))
    250         enddo
    251         edge_data(1) = r32(1) - 0.5_r4_kind*(r32(2) - r32(1))
    252         if (abs(edge_data(1)) .lt. 1.e-10) then
    253           edge_data(1) = 0._r4_kind
    254         endif
    255         edge_data(n+1) = r32(n) + 0.5_r4_kind*(r32(n) - r32(n-1))
    256         deallocate(r32)
    257       type is (real(kind=r8_kind))
    258         allocate(r64(n))
    259         call read_data(fileobj, name, r64)
    260         do i = 2, n
    261           edge_data(i) = r64(i-1) + 0.5_r8_kind*(r64(i) - r64(i-1))
    262         enddo
    263         edge_data(1) = r64(1) - 0.5_r8_kind*(r64(2) - r64(1))
    264         if (abs(edge_data(1)) .lt. 1.d-10) then
    265           edge_data(1) = 0._r8_kind
    266         endif

Page 7           Source Listing                  AXIS_EDGES
2021-06-01 08:54                                 axis_utils2.F90

    267         edge_data(n+1) = r64(n) + 0.5_r8_kind*(r64(n) - r64(n-1))
    268         deallocate(r64)
    269       class default
    270         call mpp_error(FATAL, "axis_edges: unsupported kind.")
    271     end select
    272   endif
    273 end subroutine axis_edges


ENTRY POINTS

  Name                                      
                                            
 axis_utils2_mod_mp_axis_edges_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   252                                  scalar                    252,264                           
 AXIS_EDGES                 Subr   154                                                                                              
 BUFFER                     Local  164      CHAR            128         scalar                    187,190,195,196,200,205,206,209,21
                                                                                                  0,212,217,228,234                 
 CHAR                       Func   195                                  scalar                    195,205                           
 COMPRESSED_READ_1D         Subr   217                                           PRIV             217,247,259                       
 COMPRESSED_READ_2D         Subr   228                                           PRIV             228,234                           
 DIM_SIZES                  Local  165      I(4)            4     1     1        ALC              176,177,178,182,211,212,213,214,21
                                                                                                  8,219,222,227,229,230,233,235,236,
                                                                                                  242                               
 EDGE_DATA                  Dummy  154      RECORD                1     1        ARG,OUT          179,217,225,244                   
 EDGE_DATA                  Local  225      R(4)            4     1     1                         229,230                           
 EDGE_DATA                  Local  225      R(8)            8     1     1                         235,236                           
 EDGE_DATA                  Local  225      RECORD                1     1                                                           
 EDGE_DATA                  Local  244      R(4)            4     1     1                         249,251,252,253,255               
 EDGE_DATA                  Local  244      R(8)            8     1     1                         261,263,264,265,267               
 EDGE_DATA                  Local  244      RECORD                1     1                                                           
 FATAL                      Param  180      I(4)            4           scalar   PRIV             27,180,215,220,223,239,270,297,300
                                                                                                  ,452,532,567,571,574,575,613,617,6
                                                                                                  20,621,701,723,760,778,810,811    
 FILEOBJ                    Dummy  154      RECORD          872         scalar   ARG,IN           175,177,188,190,198,200,210,212,21
                                                                                                  7,228,234,247,259                 
 GET_VARIABLE_NUM_DIMENSION                                                                                                         
 S                          Func   175      I(4)            4           scalar   PRIV             30,175,210                        
 GET_VARIABLE_SIZE          Subr   177                                           PRIV             31,177,212                        
 I                          Local  170      I(4)            4           scalar                    194,195,196,204,205,206,248,249,26
                                                                                                  0,261                             
 INDEX                      Func   195                                  scalar                    195,205                           
 MPP_ERROR                  Local  180                                  scalar   PRIV             27,180,215,220,223,239,270,297,300
                                                                                                  ,452,532,567,571,574,575,613,617,6
                                                                                                  20,621,701,723,760,778,810,811    
 MPP_ERROR_BASIC            Subr   180                                           PRIV             180,215,220,223,239,270,297,300,45
                                                                                                  2,532,567,571,574,575,613,617,620,
                                                                                                  621,701,723,760,778,810,811       
 N                          Local  171      I(4)            4           scalar                    178,179,214,222,246,248,255,258,26
                                                                                                  0,267                             
 NAME                       Dummy  154      CHAR                        scalar   ARG,IN           175,177,188,190,198,200,247,259   

Page 8           Source Listing                  AXIS_EDGES
2021-06-01 08:54 Symbol Table                    axis_utils2.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NDIMS                      Local  163      I(4)            4           scalar                    175,176,210,211                   
 PRESENT                    Func   185                                  scalar                    185                               
 R32                        Local  166      R(4)            4     1     1        ALC              246,247,249,251,255,256           
 R322D                      Local  167      R(4)            4     2     1        ALC              227,228,229,230,231               
 R4_KIND                    Param  166      I(4)            4           scalar   PRIV             166,167,226,245,249,251,253,255   
 R64                        Local  168      R(8)            8     1     1        ALC              258,259,261,263,267,268           
 R642D                      Local  169      R(8)            8     2     1        ALC              233,234,235,236,237               
 R8_KIND                    Param  168      I(4)            4           scalar   PRIV             168,169,232,257,261,263,265,267   
 READ_DATA                  Local  217                                  scalar   PRIV             31,217,228,234,247,259            
 REPRODUCE_NULL_CHAR_BUG    Local  172      L(4)            4           scalar                    184,185,190,193,200,203           
 REPRODUCE_NULL_CHAR_BUG_FL                                                                                                         
 AG                         Dummy  154      L(4)            4           scalar   ARG,IN           185                               
 SIZE                       Func   179                                  scalar                    179,213,218                       
 TRIM                       Func   209                                  scalar                    209                               

Page 9           Source Listing                  AXIS_EDGES
2021-06-01 08:54                                 axis_utils2.F90

    274 
    275 !> @brief Returns true if axis has the modulo attribute
    276 !! @return logical get_axis_modulo
    277   function get_axis_modulo(fileobj, axisname)
    278     type(FmsNetcdfFile_t), intent(in) :: fileobj
    279     character(len=*), intent(in) :: axisname
    280     logical :: get_axis_modulo
    281 
    282     get_axis_modulo = variable_att_exists(fileobj, axisname, "modulo")
    283   end function get_axis_modulo


ENTRY POINTS

  Name                                           
                                                 
 axis_utils2_mod_mp_get_axis_modulo_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXISNAME                   Dummy  277      CHAR                        scalar   ARG,IN           282                               
 FILEOBJ                    Dummy  277      FMSNETCDFFILE_T 872         scalar   ARG,IN           282                               
 GET_AXIS_MODULO            Func   277      L(4)            4           scalar                                                      

Page 10          Source Listing                  GET_AXIS_MODULO
2021-06-01 08:54                                 axis_utils2.F90

    284 
    285 !> @return logical get_axis_modulo_times
    286   function get_axis_modulo_times(fileobj, axisname, tbeg, tend)
    287     type(FmsNetcdfFile_t), intent(in) :: fileobj
    288     character(len=*), intent(in) :: axisname
    289     character(len=*), intent(out) :: tbeg, tend
    290     logical :: get_axis_modulo_times
    291     logical :: found_tbeg, found_tend
    292 
    293     found_tbeg = variable_att_exists(fileobj, axisname, "modulo_beg")
    294     found_tend = variable_att_exists(fileobj, axisname, "modulo_end")
    295 
    296     if (found_tbeg .and. .not. found_tend) then
    297       call mpp_error(FATAL,'error in get: Found modulo_beg but not modulo_end')
    298     endif
    299     if (.not. found_tbeg .and. found_tend) then
    300       call mpp_error(FATAL,'error in get: Found modulo_end but not modulo_beg')
    301     endif
    302 
    303     if (found_tbeg) then
    304       call get_variable_attribute(fileobj, axisname, "modulo_beg", tbeg)
    305       call get_variable_attribute(fileobj, axisname, "modulo_end", tend)
    306     else
    307       tbeg = ""
    308       tend = ""
    309     endif
    310     get_axis_modulo_times = found_tbeg
    311   end function get_axis_modulo_times

Page 11          Source Listing                  GET_AXIS_MODULO_TIMES
2021-06-01 08:54 Entry Points                    axis_utils2.F90



ENTRY POINTS

  Name                                                 
                                                       
 axis_utils2_mod_mp_get_axis_modulo_times_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXISNAME                   Dummy  286      CHAR                        scalar   ARG,IN           293,294,304,305                   
 FILEOBJ                    Dummy  286      FMSNETCDFFILE_T 872         scalar   ARG,IN           293,294,304,305                   
 FOUND_TBEG                 Local  291      L(4)            4           scalar                    293,296,299,303,310               
 FOUND_TEND                 Local  291      L(4)            4           scalar                    294,296,299                       
 GET_AXIS_MODULO_TIMES      Func   286      L(4)            4           scalar                                                      
 TBEG                       Dummy  286      CHAR                        scalar   ARG,OUT          304,307                           
 TEND                       Dummy  286      CHAR                        scalar   ARG,OUT          305,308                           

Page 12          Source Listing                  GET_AXIS_MODULO_TIMES
2021-06-01 08:54                                 axis_utils2.F90

    312 
    313 !> @brief Returns lon_strt <= longitude <= lon_strt+360
    314 !! @return real lon_in_range
    315   function lon_in_range(lon, l_strt)
    316     real, intent(in) :: lon, l_strt
    317     real :: lon_in_range
    318     real :: l_end
    319 
    320     lon_in_range = lon
    321     l_end = l_strt+360.
    322 
    323     if (abs(lon_in_range - l_strt) < 1.e-4) then
    324       lon_in_range = l_strt
    325       return
    326     endif
    327 
    328     if (abs(lon_in_range - l_end) < 1.e-4) then
    329       lon_in_range = l_strt
    330       return
    331     endif
    332 
    333     do
    334       if (lon_in_range < l_strt) then
    335         lon_in_range = lon_in_range +  f360
    336       else if (lon_in_range  >  l_end) then
    337         lon_in_range  = lon_in_range - f360
    338       else
    339         exit
    340       end if
    341     end do
    342 
    343   end function lon_in_range

Page 13          Source Listing                  LON_IN_RANGE
2021-06-01 08:54 Entry Points                    axis_utils2.F90



ENTRY POINTS

  Name                                        
                                              
 axis_utils2_mod_mp_lon_in_range_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   323                                  scalar                    323,328                           
 F360                       Param  335      R(8)            8           scalar                    335,337                           
 LON                        Dummy  315      R(8)            8           scalar   ARG,IN           320                               
 LON_IN_RANGE               Func   315      R(8)            8           scalar                                                      
 L_END                      Local  318      R(8)            8           scalar                    321,328,336                       
 L_STRT                     Dummy  315      R(8)            8           scalar   ARG,IN           321,323,324,329,334               

Page 14          Source Listing                  LON_IN_RANGE
2021-06-01 08:54                                 axis_utils2.F90

    344 
    345 !> @brief Returns monotonic array of longitudes s.t., lon_strt <= lon(:) <= lon_strt+360.
    346   subroutine tranlon(lon, lon_start, istrt)
    347 
    348 ! returns array of longitudes s.t.  lon_strt <= lon < lon_strt+360.
    349 ! also, the first istrt-1 entries are moved to the end of the array
    350 !
    351 ! e.g.
    352 !        lon =      0 1 2 3 4 5  ...  358 359; lon_strt = 3 ==>
    353 !        tranlon =  3 4 5 6 7 8  ...  359 360 361 362; istrt = 4
    354 
    355     real, intent(inout), dimension(:) :: lon
    356     real, intent(in) :: lon_start
    357     integer, intent(out) :: istrt
    358 
    359 
    360     integer :: len, i
    361     real :: lon_strt, tmp(size(lon(:))-1)
    362 
    363     len = size(lon(:))
    364 
    365     do i=1,len
    366        lon(i) = lon_in_range(lon(i),lon_start)
    367     enddo
    368 
    369     istrt=0
    370     do i=1,len-1
    371        if (lon(i+1) < lon(i)) then
    372           istrt=i+1
    373           exit
    374        endif
    375     enddo
    376 
    377     if (istrt>1) then ! grid is not monotonic
    378        if (abs(lon(len)-lon(1)) < epsln) then
    379           tmp = cshift(lon(1:len-1),istrt-1)
    380           lon(1:len-1) = tmp
    381           lon(len) = lon(1)
    382        else
    383           lon = cshift(lon,istrt-1)
    384        endif
    385        lon_strt = lon(1)
    386        do i=2,len+1
    387           lon(i) = lon_in_range(lon(i),lon_strt)
    388           lon_strt = lon(i)
    389        enddo
    390     endif
    391 
    392     return
    393   end subroutine tranlon

Page 15          Source Listing                  TRANLON
2021-06-01 08:54 Entry Points                    axis_utils2.F90



ENTRY POINTS

  Name                                   
                                         
 axis_utils2_mod_mp_tranlon_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   378                                  scalar                    378                               
 CSHIFT                     Func   379                                  scalar                    379,383                           
 EPSLN                      Param  378      R(8)            8           scalar                    378                               
 I                          Local  360      I(4)            4           scalar                    365,366,370,371,372,386,387,388   
 ISTRT                      Dummy  346      I(4)            4           scalar   ARG,OUT          369,372,377,379,383               
 LEN                        Local  360      I(4)            4           scalar                    363,365,370,378,379,380,381,386   
 LON                        Dummy  346      R(8)            8     1     1        ARG,INOUT        361,363,366,371,378,379,380,381,38
                                                                                                  3,385,387,388                     
 LON_IN_RANGE               Func   366      R(8)            8           scalar                    36,320,323,324,328,329,334,335,336
                                                                                                  ,337,366,387                      
 LON_START                  Dummy  346      R(8)            8           scalar   ARG,IN           366                               
 LON_STRT                   Local  361      R(8)            8           scalar                    385,387,388                       
 SIZE                       Func   361                                  scalar                    361,363                           
 TMP                        Local  361      R(8)            8     1     0                         379,380                           
 TRANLON                    Subr   346                                                                                              

Page 16          Source Listing                  TRANLON
2021-06-01 08:54                                 axis_utils2.F90

    394 
    395 !> @return real frac_index
    396   function frac_index (value, array)
    397 !=======================================================================
    398 !
    399 !     nearest_index = index of nearest data point within "array" corresponding to
    400 !            "value".
    401 !
    402 !     inputs:
    403 !
    404 !     value  = arbitrary data...same units as elements in "array"
    405 !     array  = array of data points  (must be monotonically increasing)
    406 !
    407 !     output:
    408 !
    409 !     nearest_index =  index of nearest data point to "value"
    410 !             if "value" is outside the domain of "array" then nearest_index = 1
    411 !             or "ia" depending on whether array(1) or array(ia) is
    412 !             closest to "value"
    413 !
    414 !             note: if "array" is dimensioned array(0:ia) in the calling
    415 !                   program, then the returned index should be reduced
    416 !                   by one to account for the zero base.
    417 !
    418 !     example:
    419 !
    420 !     let model depths be defined by the following:
    421 !     parameter (km=5)
    422 !     dimension z(km)
    423 !     data z /5.0, 10.0, 50.0, 100.0, 250.0/
    424 !
    425 !     k1 = nearest_index (12.5, z, km)
    426 !     k2 = nearest_index (0.0, z, km)
    427 !
    428 !     k1 would be set to 2, and k2 would be set to 1 so that
    429 !     z(k1) would be the nearest data point to 12.5 and z(k2) would
    430 !     be the nearest data point to 0.0
    431 !
    432 !=======================================================================
    433 
    434     integer :: ia, i, ii, unit
    435     real :: value !< arbitrary data...same units as elements in "array"
    436     real :: frac_index
    437     real, dimension(:) :: array !< array of data points  (must be monotonically increasing)
    438     logical keep_going
    439 
    440     ia = size(array(:))
    441 
    442     do i=2,ia
    443        if (array(i) < array(i-1)) then
    444           unit = stdout()
    445           write (unit,*) '=> Error: "frac_index" array must be monotonically increasing when searching for nearest value to 
    445 ',&
    446                               value
    447           write (unit,*) '          array(i) < array(i-1) for i=',i
    448           write (unit,*) '          array(i) for i=1..ia follows:'
    449           do ii=1,ia

Page 17          Source Listing                  FRAC_INDEX
2021-06-01 08:54                                 axis_utils2.F90

    450              write (unit,*) 'i=',ii, ' array(i)=',array(ii)
    451           enddo
    452           call mpp_error(FATAL,' "frac_index" array must be monotonically increasing.')
    453        endif
    454     enddo
    455     if (value < array(1) .or. value > array(ia)) then
    456 !       if (value < array(1))  frac_index = 1.
    457 !       if (value > array(ia)) frac_index = float(ia)
    458         frac_index = -1.0
    459     else
    460        i=1
    461        keep_going = .true.
    462        do while (i <= ia .and. keep_going)
    463           i = i+1
    464           if (value <= array(i)) then
    465              frac_index = float(i-1) + (value-array(i-1))/(array(i)-array(i-1))
    466              keep_going = .false.
    467           endif
    468        enddo
    469     endif
    470   end function frac_index


ENTRY POINTS

  Name                                      
                                            
 axis_utils2_mod_mp_frac_index_             

Page 18          Source Listing                  FRAC_INDEX
2021-06-01 08:54 Symbol Table                    axis_utils2.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  396      R(8)            8     1     1        ARG,INOUT        440,443,450,455,464,465           
 FLOAT                      Func   465                                  scalar                    465                               
 FRAC_INDEX                 Func   396      R(8)            8           scalar                                                      
 I                          Local  434      I(4)            4           scalar                    442,443,447,460,462,463,464,465   
 IA                         Local  434      I(4)            4           scalar                    440,442,449,455,462               
 II                         Local  434      I(4)            4           scalar                    449,450                           
 KEEP_GOING                 Local  438      L(4)            4           scalar                    461,462,466                       
 SIZE                       Func   440                                  scalar                    440                               
 STDOUT                     Func   444      I(4)            4           scalar   PRIV             27,444,524                        
 UNIT                       Local  434      I(4)            4           scalar                    444,445,447,448,450               
 VALUE                      Dummy  396      R(8)            8           scalar   ARG,INOUT        446,455,464,465                   

Page 19          Source Listing                  FRAC_INDEX
2021-06-01 08:54                                 axis_utils2.F90

    471 
    472 !> @brief Return index of nearest point along axis
    473 !! @return integer nearest_index
    474   function nearest_index (value, array)
    475 !=======================================================================
    476 !
    477 !     nearest_index = index of nearest data point within "array" corresponding to
    478 !            "value".
    479 !
    480 !     inputs:
    481 !
    482 !     value  = arbitrary data...same units as elements in "array"
    483 !     array  = array of data points  (must be monotonically increasing)
    484 !     ia     = dimension of "array"
    485 !
    486 !     output:
    487 !
    488 !     nearest_index =  index of nearest data point to "value"
    489 !             if "value" is outside the domain of "array" then nearest_index = 1
    490 !             or "ia" depending on whether array(1) or array(ia) is
    491 !             closest to "value"
    492 !
    493 !             note: if "array" is dimensioned array(0:ia) in the calling
    494 !                   program, then the returned index should be reduced
    495 !                   by one to account for the zero base.
    496 !
    497 !     example:
    498 !
    499 !     let model depths be defined by the following:
    500 !     parameter (km=5)
    501 !     dimension z(km)
    502 !     data z /5.0, 10.0, 50.0, 100.0, 250.0/
    503 !
    504 !     k1 = nearest_index (12.5, z, km)
    505 !     k2 = nearest_index (0.0, z, km)
    506 !
    507 !     k1 would be set to 2, and k2 would be set to 1 so that
    508 !     z(k1) would be the nearest data point to 12.5 and z(k2) would
    509 !     be the nearest data point to 0.0
    510 !
    511 !=======================================================================
    512 
    513     integer :: nearest_index
    514     integer :: ia !< dimension of "array"
    515     integer :: i, ii, unit
    516     real :: value !< arbitrary data...same units as elements in "array"
    517     real, dimension(:) :: array !< array of data points  (must be monotonically increasing)
    518     logical keep_going
    519 
    520     ia = size(array(:))
    521 
    522     do i=2,ia
    523        if (array(i) < array(i-1)) then
    524           unit = stdout()
    525           write (unit,*) '=> Error: "nearest_index" array must be monotonically increasing &
    526                          &when searching for nearest value to ',value
    527           write (unit,*) '          array(i) < array(i-1) for i=',i

Page 20          Source Listing                  NEAREST_INDEX
2021-06-01 08:54                                 axis_utils2.F90

    528           write (unit,*) '          array(i) for i=1..ia follows:'
    529           do ii=1,ia
    530              write (unit,*) 'i=',ii, ' array(i)=',array(ii)
    531           enddo
    532           call mpp_error(FATAL,' "nearest_index" array must be monotonically increasing.')
    533        endif
    534     enddo
    535     if (value < array(1) .or. value > array(ia)) then
    536        if (value < array(1))  nearest_index = 1
    537        if (value > array(ia)) nearest_index = ia
    538     else
    539        i=1
    540        keep_going = .true.
    541        do while (i <= ia .and. keep_going)
    542           i = i+1
    543           if (value <= array(i)) then
    544              nearest_index = i
    545              if (array(i)-value > value-array(i-1)) nearest_index = i-1
    546              keep_going = .false.
    547           endif
    548        enddo
    549     endif
    550   end function nearest_index


ENTRY POINTS

  Name                                         
                                               
 axis_utils2_mod_mp_nearest_index_             

Page 21          Source Listing                  NEAREST_INDEX
2021-06-01 08:54 Symbol Table                    axis_utils2.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  474      R(8)            8     1     1        ARG,INOUT        520,523,530,535,536,537,543,545   
 I                          Local  515      I(4)            4           scalar                    522,523,527,539,541,542,543,544,54
                                                                                                  5                                 
 IA                         Local  514      I(4)            4           scalar                    520,522,529,535,537,541           
 II                         Local  515      I(4)            4           scalar                    529,530                           
 KEEP_GOING                 Local  518      L(4)            4           scalar                    540,541,546                       
 NEAREST_INDEX              Func   474      I(4)            4           scalar                                                      
 SIZE                       Func   520                                  scalar                    520                               
 UNIT                       Local  515      I(4)            4           scalar                    524,525,527,528,530               
 VALUE                      Dummy  474      R(8)            8           scalar   ARG,INOUT        526,535,536,537,543,545           

Page 22          Source Listing                  NEAREST_INDEX
2021-06-01 08:54                                 axis_utils2.F90

    551 
    552 !#############################################################################
    553 
    554   subroutine interp_1d_linear(grid1,grid2,data1,data2)
    555 
    556     real, dimension(:),    intent(in) :: grid1, data1, grid2
    557     real, dimension(:), intent(inout) :: data2
    558 
    559     integer :: n1, n2, i, n, ext
    560     real :: w
    561 
    562     n1 = size(grid1(:))
    563     n2 = size(grid2(:))
    564 
    565 
    566     do i=2,n1
    567        if (grid1(i) <= grid1(i-1)) call mpp_error(FATAL, 'grid1 not monotonic')
    568     enddo
    569 
    570     do i=2,n2
    571        if (grid2(i) <= grid2(i-1)) call mpp_error(FATAL, 'grid2 not monotonic')
    572     enddo
    573 
    574     if (grid1(1) > grid2(1) ) call mpp_error(FATAL, 'grid2 lies outside grid1')
    575     if (grid1(n1) < grid2(n2) ) call mpp_error(FATAL, 'grid2 lies outside grid1')
    576 
    577     do i=1,n2
    578        n = nearest_index(grid2(i),grid1)
    579 
    580        if (grid1(n) < grid2(i)) then
    581           w = (grid2(i)-grid1(n))/(grid1(n+1)-grid1(n))
    582           data2(i) = (1.-w)*data1(n) + w*data1(n+1)
    583        else
    584           if(n==1) then
    585              data2(i) = data1(n)
    586           else
    587              w = (grid2(i)-grid1(n-1))/(grid1(n)-grid1(n-1))
    588              data2(i) = (1.-w)*data1(n-1) + w*data1(n)
    589           endif
    590        endif
    591     enddo
    592 
    593 
    594     return
    595 
    596   end subroutine interp_1d_linear

Page 23          Source Listing                  INTERP_1D_LINEAR
2021-06-01 08:54 Entry Points                    axis_utils2.F90



ENTRY POINTS

  Name                                            
                                                  
 axis_utils2_mod_mp_interp_1d_linear_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  554      R(8)            8     1     1        ARG,IN           582,585,588                       
 DATA2                      Dummy  554      R(8)            8     1     1        ARG,INOUT        582,585,588                       
 EXT                        Local  559      I(4)            4           scalar                                                      
 GRID1                      Dummy  554      R(8)            8     1     1        ARG,IN           562,567,574,575,578,580,581,587   
 GRID2                      Dummy  554      R(8)            8     1     1        ARG,IN           563,571,574,575,578,580,581,587   
 I                          Local  559      I(4)            4           scalar                    566,567,570,571,577,578,580,581,58
                                                                                                  2,585,587,588                     
 INTERP_1D_LINEAR           Subr   554                                                            697,727,767                       
 N                          Local  559      I(4)            4           scalar                    578,580,581,582,584,585,587,588   
 N1                         Local  559      I(4)            4           scalar                    562,566,575                       
 N2                         Local  559      I(4)            4           scalar                    563,570,575,577                   
 NEAREST_INDEX              Func   578      I(4)            4           scalar                    37,536,537,544,545,578,654        
 SIZE                       Func   562                                  scalar                    562,563                           
 W                          Local  560      R(8)            8           scalar                    581,582,587,588                   

Page 24          Source Listing                  INTERP_1D_LINEAR
2021-06-01 08:54                                 axis_utils2.F90

    597 
    598 !###################################################################
    599   subroutine interp_1d_cubic_spline(grid1, grid2, data1, data2, yp1, ypn)
    600 
    601     real, dimension(:),    intent(in) :: grid1, grid2, data1
    602     real, dimension(:), intent(inout) :: data2
    603     real,                  intent(in) :: yp1, ypn
    604 
    605     real, dimension(size(grid1))      :: y2, u
    606     real                              :: sig, p, qn, un, h, a ,b
    607     integer                           :: n, m, i, k, klo, khi
    608 
    609     n = size(grid1(:))
    610     m = size(grid2(:))
    611 
    612     do i=2,n
    613        if (grid1(i) <= grid1(i-1)) call mpp_error(FATAL, 'grid1 not monotonic')
    614     enddo
    615 
    616     do i=2,m
    617        if (grid2(i) <= grid2(i-1)) call mpp_error(FATAL, 'grid2 not monotonic')
    618     enddo
    619 
    620     if (grid1(1) > grid2(1) ) call mpp_error(FATAL, 'grid2 lies outside grid1')
    621     if (grid1(n) < grid2(m) ) call mpp_error(FATAL, 'grid2 lies outside grid1')
    622 
    623     if (yp1 >.99e30) then
    624        y2(1)=0.
    625        u(1)=0.
    626     else
    627        y2(1)=-0.5
    628        u(1)=(3./(grid1(2)-grid1(1)))*((data1(2)-data1(1))/(grid1(2)-grid1(1))-yp1)
    629     endif
    630 
    631     do i=2,n-1
    632        sig=(grid1(i)-grid1(i-1))/(grid1(i+1)-grid1(i-1))
    633        p=sig*y2(i-1)+2.
    634        y2(i)=(sig-1.)/p
    635        u(i)=(6.*((data1(i+1)-data1(i))/(grid1(i+1)-grid1(i))-(data1(i)-data1(i-1)) &
    636              /(grid1(i)-grid1(i-1)))/(grid1(i+1)-grid1(i-1))-sig*u(i-1))/p
    637     enddo
    638 
    639     if (ypn > .99e30) then
    640        qn=0.
    641        un=0.
    642     else
    643        qn=0.5
    644        un=(3./(grid1(n)-grid1(n-1)))*(ypn-(data1(n)-data1(n-1))/(grid1(n)-grid1(n-1)))
    645     endif
    646 
    647     y2(n)=(un-qn*u(n-1))/(qn*y2(n-1)+1.)
    648 
    649     do  k=n-1,1,-1
    650        y2(k)=y2(k)*y2(k+1)+u(k)
    651     enddo
    652 
    653     do k = 1, m

Page 25          Source Listing                  INTERP_1D_CUBIC_SPLINE
2021-06-01 08:54                                 axis_utils2.F90

    654        n = nearest_index(grid2(k),grid1)
    655        if (grid1(n) < grid2(k)) then
    656           klo = n
    657        else
    658           if(n==1) then
    659             klo = n
    660           else
    661             klo = n -1
    662           endif
    663        endif
    664        khi = klo+1
    665        h   = grid1(khi)-grid1(klo)
    666        a   = (grid1(khi) - grid2(k))/h
    667        b   = (grid2(k) - grid1(klo))/h
    668        data2(k) = a*data1(klo) + b*data1(khi)+ ((a**3-a)*y2(klo) + (b**3-b)*y2(khi))*(h**2)/6.
    669     enddo
    670 
    671   end subroutine interp_1d_cubic_spline


ENTRY POINTS

  Name                                                  
                                                        
 axis_utils2_mod_mp_interp_1d_cubic_spline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  606      R(8)            8           scalar                    666,668                           
 B                          Local  606      R(8)            8           scalar                    667,668                           
 DATA1                      Dummy  599      R(8)            8     1     1        ARG,IN           628,635,644,668                   
 DATA2                      Dummy  599      R(8)            8     1     1        ARG,INOUT        668                               
 GRID1                      Dummy  599      R(8)            8     1     1        ARG,IN           609,613,620,621,628,632,635,636,64
                                                                                                  4,654,655,665,666,667             
 GRID2                      Dummy  599      R(8)            8     1     1        ARG,IN           610,617,620,621,654,655,666,667   
 H                          Local  606      R(8)            8           scalar                    665,666,667,668                   
 I                          Local  607      I(4)            4           scalar                    612,613,616,617,631,632,633,634,63
                                                                                                  5,636                             
 INTERP_1D_CUBIC_SPLINE     Subr   599                                                            699,774                           
 K                          Local  607      I(4)            4           scalar                    649,650,653,654,655,666,667,668   
 KHI                        Local  607      I(4)            4           scalar                    664,665,666,668                   
 KLO                        Local  607      I(4)            4           scalar                    656,659,661,664,665,667,668       
 M                          Local  607      I(4)            4           scalar                    610,616,621,653                   
 N                          Local  607      I(4)            4           scalar                    609,612,621,631,644,647,649,654,65
                                                                                                  5,656,658,659,661                 
 P                          Local  606      R(8)            8           scalar                    633,634,636                       
 QN                         Local  606      R(8)            8           scalar                    640,643,647                       
 SIG                        Local  606      R(8)            8           scalar                    632,633,634,636                   
 SIZE                       Func   609                                  scalar                    609,610                           
 U                          Local  605      R(8)            8     1     0                         625,628,635,636,647,650           
 UN                         Local  606      R(8)            8           scalar                    641,644,647                       
 Y2                         Local  605      R(8)            8     1     0                         624,627,633,634,647,650,668       
 YP1                        Dummy  599      R(8)            8           scalar   ARG,IN           623,628                           
 YPN                        Dummy  599      R(8)            8           scalar   ARG,IN           639,644                           

Page 26          Source Listing                  INTERP_1D_CUBIC_SPLINE
2021-06-01 08:54                                 axis_utils2.F90

    672 
    673 !###################################################################
    674 
    675   subroutine interp_1d_1d(grid1,grid2,data1,data2, method, yp1, yp2)
    676 
    677     real, dimension(:),      intent(in)    :: grid1, data1, grid2
    678     real, dimension(:),      intent(inout) :: data2
    679     character(len=*), optional, intent(in) :: method
    680     real,             optional, intent(in) :: yp1, yp2
    681 
    682     real              :: y1, y2
    683     character(len=32) :: interp_method
    684     integer           :: k2, ks, ke
    685 
    686     k2 = size(grid2(:))
    687 
    688     interp_method = "linear"
    689     if(present(method)) interp_method = method
    690     y1 = 1.0e30
    691     if(present(yp1)) y1 = yp1
    692     y2 = 1.0e30
    693     if(present(yp2)) y2 = yp2
    694     call find_index(grid1, grid2(1), grid2(k2), ks, ke)
    695     select case(trim(interp_method))
    696     case("linear")
    697        call interp_1d_linear(grid1(ks:ke),grid2,data1(ks:ke),data2)
    698     case("cubic_spline")
    699        call interp_1d_cubic_spline(grid1(ks:ke),grid2,data1(ks:ke),data2, y1, y2)
    700     case default
    701        call mpp_error(FATAL,"axis_utils: interp_method should be linear or cubic_spline")
    702     end select
    703 
    704     return
    705 
    706   end subroutine interp_1d_1d

Page 27          Source Listing                  INTERP_1D_1D
2021-06-01 08:54 Entry Points                    axis_utils2.F90



ENTRY POINTS

  Name                                        
                                              
 axis_utils2_mod_mp_interp_1d_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  675      R(8)            8     1     1        ARG,IN           697,699                           
 DATA2                      Dummy  675      R(8)            8     1     1        ARG,INOUT        697,699                           
 GRID1                      Dummy  675      R(8)            8     1     1        ARG,IN           694,697,699                       
 GRID2                      Dummy  675      R(8)            8     1     1        ARG,IN           686,694,697,699                   
 INTERP_1D_1D               Subr   675                                           PRIV                                               
 INTERP_METHOD              Local  683      CHAR            32          scalar                    688,689,695                       
 K2                         Local  684      I(4)            4           scalar                    686,694                           
 KE                         Local  684      I(4)            4           scalar                    694,697,699                       
 KS                         Local  684      I(4)            4           scalar                    694,697,699                       
 METHOD                     Dummy  675      CHAR                        scalar   ARG,IN           689                               
 PRESENT                    Func   689                                  scalar                    689,691,693                       
 SIZE                       Func   686                                  scalar                    686                               
 TRIM                       Func   695                                  scalar                    695                               
 Y1                         Local  682      R(8)            8           scalar                    690,691,699                       
 Y2                         Local  682      R(8)            8           scalar                    692,693,699                       
 YP1                        Dummy  675      R(8)            8           scalar   ARG,IN           691                               
 YP2                        Dummy  675      R(8)            8           scalar   ARG,IN           693                               

Page 28          Source Listing                  INTERP_1D_1D
2021-06-01 08:54                                 axis_utils2.F90

    707 
    708 !###################################################################
    709 
    710 
    711   subroutine interp_1d_2d(grid1,grid2,data1,data2)
    712 
    713     real, dimension(:,:),    intent(in) :: grid1, data1, grid2
    714     real, dimension(:,:), intent(inout) :: data2
    715 
    716     integer :: n1, n2, i, n, k2, ks, ke
    717     real :: w
    718 
    719     n1 = size(grid1,1)
    720     n2 = size(grid2,1)
    721     k2 = size(grid2,2)
    722 
    723     if (n1 /= n2) call mpp_error(FATAL,'grid size mismatch')
    724 
    725     do n=1,n1
    726        call find_index(grid1(n,:), grid2(n,1), grid2(n,k2), ks, ke)
    727        call interp_1d_linear(grid1(n,ks:ke),grid2(n,:),data1(n,ks:ke),data2(n,:))
    728     enddo
    729 
    730     return
    731 
    732   end subroutine interp_1d_2d


ENTRY POINTS

  Name                                        
                                              
 axis_utils2_mod_mp_interp_1d_2d_             

Page 29          Source Listing                  INTERP_1D_2D
2021-06-01 08:54 Symbol Table                    axis_utils2.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  711      R(8)            8     2     1        ARG,IN           727                               
 DATA2                      Dummy  711      R(8)            8     2     1        ARG,INOUT        727                               
 GRID1                      Dummy  711      R(8)            8     2     1        ARG,IN           719,726,727                       
 GRID2                      Dummy  711      R(8)            8     2     1        ARG,IN           720,721,726,727                   
 I                          Local  716      I(4)            4           scalar                                                      
 INTERP_1D_2D               Subr   711                                           PRIV                                               
 K2                         Local  716      I(4)            4           scalar                    721,726                           
 KE                         Local  716      I(4)            4           scalar                    726,727                           
 KS                         Local  716      I(4)            4           scalar                    726,727                           
 N                          Local  716      I(4)            4           scalar                    725,726,727                       
 N1                         Local  716      I(4)            4           scalar                    719,723,725                       
 N2                         Local  716      I(4)            4           scalar                    720,723                           
 SIZE                       Func   719                                  scalar                    719,720,721                       
 W                          Local  717      R(8)            8           scalar                                                      

Page 30          Source Listing                  INTERP_1D_2D
2021-06-01 08:54                                 axis_utils2.F90

    733 
    734 !###################################################################
    735 
    736   subroutine interp_1d_3d(grid1,grid2,data1,data2, method, yp1, yp2)
    737 
    738     real, dimension(:,:,:),  intent(in)    :: grid1, data1, grid2
    739     real, dimension(:,:,:),  intent(inout) :: data2
    740     character(len=*), optional, intent(in) :: method
    741     real,             optional, intent(in) :: yp1, yp2
    742 
    743     integer           :: n1, n2, m1, m2, k2, i, n, m
    744     real              :: w, y1, y2
    745     character(len=32) :: interp_method
    746     integer           :: ks, ke
    747     n1 = size(grid1,1)
    748     n2 = size(grid2,1)
    749     m1 = size(grid1,2)
    750     m2 = size(grid2,2)
    751     k2 = size(grid2,3)
    752 
    753     interp_method = "linear"
    754     if(present(method)) interp_method = method
    755     y1 = 1.0e30
    756     if(present(yp1)) y1 = yp1
    757     y2 = 1.0e30
    758     if(present(yp2)) y2 = yp2
    759 
    760     if (n1 /= n2 .or. m1 /= m2) call mpp_error(FATAL,'grid size mismatch')
    761 
    762     select case(trim(interp_method))
    763     case("linear")
    764        do m=1,m1
    765           do n=1,n1
    766             call find_index(grid1(n,m,:), grid2(n,m,1), grid2(n,m,k2), ks, ke)
    767              call interp_1d_linear(grid1(n,m,ks:ke),grid2(n,m,:),data1(n,m,ks:ke),data2(n,m,:))
    768           enddo
    769        enddo
    770     case("cubic_spline")
    771        do m=1,m1
    772           do n=1,n1
    773             call find_index(grid1(n,m,:), grid2(n,m,1), grid2(n,m,k2), ks, ke)
    774             call interp_1d_cubic_spline(grid1(n,m,ks:ke),grid2(n,m,:), data1(n,m,ks:ke),data2(n,m,:), y1, y2)
    775           enddo
    776        enddo
    777     case default
    778        call mpp_error(FATAL,"axis_utils: interp_method should be linear or cubic_spline")
    779     end select
    780 
    781     return
    782 
    783   end subroutine interp_1d_3d

Page 31          Source Listing                  INTERP_1D_3D
2021-06-01 08:54 Entry Points                    axis_utils2.F90



ENTRY POINTS

  Name                                        
                                              
 axis_utils2_mod_mp_interp_1d_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  736      R(8)            8     3     1        ARG,IN           767,774                           
 DATA2                      Dummy  736      R(8)            8     3     1        ARG,INOUT        767,774                           
 GRID1                      Dummy  736      R(8)            8     3     1        ARG,IN           747,749,766,767,773,774           
 GRID2                      Dummy  736      R(8)            8     3     1        ARG,IN           748,750,751,766,767,773,774       
 I                          Local  743      I(4)            4           scalar                                                      
 INTERP_1D_3D               Subr   736                                           PRIV                                               
 INTERP_METHOD              Local  745      CHAR            32          scalar                    753,754,762                       
 K2                         Local  743      I(4)            4           scalar                    751,766,773                       
 KE                         Local  746      I(4)            4           scalar                    766,767,773,774                   
 KS                         Local  746      I(4)            4           scalar                    766,767,773,774                   
 M                          Local  743      I(4)            4           scalar                    764,766,767,771,773,774           
 M1                         Local  743      I(4)            4           scalar                    749,760,764,771                   
 M2                         Local  743      I(4)            4           scalar                    750,760                           
 METHOD                     Dummy  736      CHAR                        scalar   ARG,IN           754                               
 N                          Local  743      I(4)            4           scalar                    765,766,767,772,773,774           
 N1                         Local  743      I(4)            4           scalar                    747,760,765,772                   
 N2                         Local  743      I(4)            4           scalar                    748,760                           
 PRESENT                    Func   754                                  scalar                    754,756,758                       
 SIZE                       Func   747                                  scalar                    747,748,749,750,751               
 TRIM                       Func   762                                  scalar                    762                               
 W                          Local  744      R(8)            8           scalar                                                      
 Y1                         Local  744      R(8)            8           scalar                    755,756,774                       
 Y2                         Local  744      R(8)            8           scalar                    757,758,774                       
 YP1                        Dummy  736      R(8)            8           scalar   ARG,IN           756                               
 YP2                        Dummy  736      R(8)            8           scalar   ARG,IN           758                               

Page 32          Source Listing                  INTERP_1D_3D
2021-06-01 08:54                                 axis_utils2.F90

    784 
    785 
    786 !#####################################################################
    787   subroutine find_index(grid1, xs, xe, ks, ke)
    788     real, dimension(:), intent(in) :: grid1
    789     real,               intent(in) :: xs, xe
    790     integer,           intent(out) :: ks, ke
    791 
    792     integer :: k, nk
    793 
    794     nk = size(grid1(:))
    795 
    796     ks = 0; ke = 0
    797     do k = 1, nk-1
    798        if(grid1(k) <= xs .and. grid1(k+1) > xs ) then
    799           ks = k
    800           exit
    801        endif
    802     enddo
    803     do k = nk, 2, -1
    804        if(grid1(k) >= xe .and. grid1(k-1) < xe ) then
    805           ke = k
    806           exit
    807        endif
    808     enddo
    809 
    810     if(ks == 0 ) call mpp_error(FATAL,' xs locate outside of grid1')
    811     if(ke == 0 ) call mpp_error(FATAL,' xe locate outside of grid1')
    812 
    813   end subroutine find_index

Page 33          Source Listing                  FIND_INDEX
2021-06-01 08:54 Entry Points                    axis_utils2.F90



ENTRY POINTS

  Name                                      
                                            
 axis_utils2_mod_mp_find_index_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIND_INDEX                 Subr   787                                                            694,726,766,773                   
 GRID1                      Dummy  787      R(8)            8     1     1        ARG,IN           794,798,804                       
 K                          Local  792      I(4)            4           scalar                    797,798,799,803,804,805           
 KE                         Dummy  787      I(4)            4           scalar   ARG,OUT          796,805,811                       
 KS                         Dummy  787      I(4)            4           scalar   ARG,OUT          796,799,810                       
 NK                         Local  792      I(4)            4           scalar                    794,797,803                       
 SIZE                       Func   794                                  scalar                    794                               
 XE                         Dummy  787      R(8)            8           scalar   ARG,IN           804                               
 XS                         Dummy  787      R(8)            8           scalar   ARG,IN           798                               

Page 34          Source Listing                  FIND_INDEX
2021-06-01 08:54                                 axis_utils2.F90

    814 
    815 end module axis_utils2_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXIS_EDGES                 Subr   37                                                             37                                
 AXIS_UTILS2_MOD            Module 25                                                                                               
 FMS2_IO_MOD                Module 29                                                             29                                
 FMSNETCDFDOMAINFILE_T      Type   29                                   scalar                    29                                
 FMS_ERROR_HANDLER          Func   28       L(4)            4           scalar   PRIV             28                                
 FMS_MOD                    Module 28                                                             28                                
 FP5                        Param  43       R(8)            8           scalar                                                      
 FRAC_INDEX@0               Local  396      R(8)            8           scalar                                                      
 GET_AXIS_CART              Subr   36                                                             36                                
 GET_AXIS_MODULO@0          Local  277      L(4)            4           scalar                                                      
 GET_AXIS_MODULO_TIMES@0    Local  286      L(4)            4           scalar                                                      
 INTERP_1D                  Local  73                                   scalar                    37                                
 ISO_FORTRAN_ENV            Module 26                                                             26                                
 LON_IN_RANGE@0             Local  315      R(8)            8           scalar                                                      
 MAXATTS                    Param  41       I(4)            4           scalar                                                      
 MPP_MOD                    Module 27                                                             27                                
 NEAREST_INDEX@0            Local  474      I(4)            4           scalar                                                      
 PLATFORM_MOD               Module 32                                                             32                                
 STRING_ARRAY_INDEX         Func   28       L(4)            4           scalar   PRIV             28                                
 TRANLON                    Subr   37                                                             37                                
 VERSION                    Param  69       CHAR            7           scalar                                                      

Page 35          Source Listing                  FIND_INDEX
2021-06-01 08:54 Subprograms/Common Blocks       axis_utils2.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXIS_EDGES                 Subr   154                                                                                              
 AXIS_UTILS2_MOD            Module 25                                                                                               
 FIND_INDEX                 Subr   787                                                            694,726,766,773                   
 FRAC_INDEX                 Func   396      R(8)            8           scalar                                                      
 GET_AXIS_CART              Subr   82                                                                                               
 GET_AXIS_MODULO            Func   277      L(4)            4           scalar                                                      
 GET_AXIS_MODULO_TIMES      Func   286      L(4)            4           scalar                                                      
 INTERP_1D_1D               Subr   675                                           PRIV                                               
 INTERP_1D_2D               Subr   711                                           PRIV                                               
 INTERP_1D_3D               Subr   736                                           PRIV                                               
 INTERP_1D_CUBIC_SPLINE     Subr   599                                                            699,774                           
 INTERP_1D_LINEAR           Subr   554                                                            697,727,767                       
 LON_IN_RANGE               Func   315      R(8)            8           scalar                                                      
 NEAREST_INDEX              Func   474      I(4)            4           scalar                                                      
 TRANLON                    Subr   346                                                                                              

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous

Page 36          Source Listing                  FIND_INDEX
2021-06-01 08:54                                 axis_utils2.F90

       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion

Page 37          Source Listing                  FIND_INDEX
2021-06-01 08:54                                 axis_utils2.F90

       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : axis_utils2.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
