Page 1           Source Listing                  GET_AXIS_CART
2021-06-01 08:54                                 /tmp/ifortsQRjkD.i90

      1 # 1 "axis_utils.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 !> @file
     22 !! @brief A set of utilities for manipulating axes and extracting axis attributes
     23 !! @author M.J. Harrison
     24 !! @email gfdl.climate.model.info@noaa.gov
     25 module axis_utils_mod
     26   use netcdf
     27   use mpp_io_mod, only: axistype, atttype, default_axis, default_att,         &
     28                         mpp_get_atts, mpp_get_axis_data, mpp_modify_meta,     &
     29                         mpp_get_att_name, mpp_get_att_type, mpp_get_att_char, &
     30                         mpp_get_att_length, mpp_get_axis_bounds
     31   use mpp_mod,    only: mpp_error, FATAL, stdout
     32   use fms_mod,    only: lowercase, string_array_index, fms_error_handler
     33 
     34   implicit none
     35 
     36   public get_axis_cart, get_axis_bounds, get_axis_modulo, get_axis_fold, lon_in_range, &
     37          tranlon, frac_index, nearest_index, interp_1d, get_axis_modulo_times
     38 
     39   private
     40 
     41   integer, parameter :: maxatts = 100
     42   real, parameter    :: epsln= 1.e-10
     43   real, parameter    :: fp5 = 0.5, f360 = 360.0
     44 
     45 ! Include variable "version" to be written to log file.
     46 # 1 "../include/file_version.h" 1 
     47 ! -*-f90-*-
     48 !***********************************************************************
     49 !*                   GNU Lesser General Public License
     50 !*
     51 !* This file is part of the GFDL Flexible Modeling System (FMS).
     52 !*
     53 !* FMS is free software: you can redistribute it and/or modify it under
     54 !* the terms of the GNU Lesser General Public License as published by
     55 !* the Free Software Foundation, either version 3 of the License, or (at
     56 !* your option) any later version.
     57 !*

Page 2           Source Listing                  GET_AXIS_CART
2021-06-01 08:54                                 ../include/file_version.h

     58 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     59 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     60 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     61 !* for more details.
     62 !*
     63 !* You should have received a copy of the GNU Lesser General Public
     64 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     65 !***********************************************************************
     66 
     67 # 23
     68 
     69   character(len=*), parameter :: version = 'unknown'
     70 
     71 # 46 "axis_utils.F90" 2 
     72 
     73   interface interp_1d
     74      module procedure interp_1d_1d
     75      module procedure interp_1d_2d
     76      module procedure interp_1d_3d
     77   end interface
     78 
     79 contains
     80 
     81 !> @brief Returns X,Y,Z or T cartesian attribute
     82   subroutine get_axis_cart(axis, cart)
     83 
     84     type(axistype), intent(in) :: axis
     85     character(len=1), intent(out) :: cart
     86     character(len=1) :: axis_cart
     87     character(len=16), dimension(2) :: lon_names, lat_names
     88     character(len=16), dimension(3) :: z_names
     89     character(len=16), dimension(2) :: t_names
     90     character(len=16), dimension(3) :: lon_units, lat_units
     91     character(len=8) , dimension(4) :: z_units
     92     character(len=3) , dimension(6) :: t_units
     93     character(len=32) :: name
     94     integer :: i,j
     95 
     96     lon_names = (/'lon','x  '/)
     97     lat_names = (/'lat','y  '/)
     98     z_names = (/'depth ','height','z     '/)
     99     t_names = (/'time','t   '/)
    100     lon_units = (/'degrees_e   ', 'degrees_east', 'degreese    '/)
    101     lat_units = (/'degrees_n    ', 'degrees_north', 'degreesn     '/)
    102     z_units = (/'cm ','m  ','pa ','hpa'/)
    103     t_units = (/'sec', 'min','hou','day','mon','yea'/)
    104 
    105     call mpp_get_atts(axis,cartesian=axis_cart)
    106     cart = 'N'
    107 
    108     if ( lowercase(axis_cart) == 'x' ) cart = 'X'
    109     if ( lowercase(axis_cart) == 'y' ) cart = 'Y'
    110     if ( lowercase(axis_cart) == 'z' ) cart = 'Z'
    111     if ( lowercase(axis_cart) == 't' ) cart = 'T'
    112 
    113     if (cart /= 'X' .and. cart /= 'Y' .and. cart /= 'Z' .and. cart /= 'T') then
    114        call mpp_get_atts(axis,name=name)

Page 3           Source Listing                  GET_AXIS_CART
2021-06-01 08:54                                 axis_utils.F90

    115        name = lowercase(name)
    116        do i=1,size(lon_names(:))
    117           if (trim(name(1:3)) == trim(lon_names(i))) cart = 'X'
    118        enddo
    119        do i=1,size(lat_names(:))
    120           if (trim(name(1:3)) == trim(lat_names(i))) cart = 'Y'
    121        enddo
    122        do i=1,size(z_names(:))
    123           if (trim(name) == trim(z_names(i))) cart = 'Z'
    124        enddo
    125        do i=1,size(t_names(:))
    126           if (trim(name) == t_names(i)) cart = 'T'
    127        enddo
    128     end if
    129 
    130     if (cart /= 'X' .and. cart /= 'Y' .and. cart /= 'Z' .and. cart /= 'T') then
    131        call mpp_get_atts(axis,units=name)
    132        name = lowercase(name)
    133        do i=1,size(lon_units(:))
    134           if (trim(name) == trim(lon_units(i))) cart = 'X'
    135        enddo
    136        do i=1,size(lat_units(:))
    137           if (trim(name) == trim(lat_units(i))) cart = 'Y'
    138        enddo
    139        do i=1,size(z_units(:))
    140           if (trim(name) == trim(z_units(i))) cart = 'Z'
    141        enddo
    142        do i=1,size(t_units(:))
    143           if (name(1:3) == trim(t_units(i))) cart = 'T'
    144        enddo
    145     end if
    146 
    147     return
    148 
    149   end subroutine get_axis_cart

Page 4           Source Listing                  GET_AXIS_CART
2021-06-01 08:54 Entry Points                    axis_utils.F90



ENTRY POINTS

  Name                                        
                                              
 axis_utils_mod_mp_get_axis_cart_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXIS                       Dummy  82       AXISTYPE        1424        scalar   ARG,IN           105,114,131                       
 AXISTYPE                   Type   84                                   scalar   PRIV             27,84,154,155,156,210,234,279     
 AXIS_CART                  Local  86       CHAR            1           scalar                    105,108,109,110,111               
 CART                       Dummy  82       CHAR            1           scalar   ARG,OUT          106,108,109,110,111,113,117,120,12
                                                                                                  3,126,130,134,137,140,143         
 GET_AXIS_CART              Subr   82                                                                                               
 I                          Local  94       I(4)            4           scalar                    116,117,119,120,122,123,125,126,13
                                                                                                  3,134,136,137,139,140,142,143     
 J                          Local  94       I(4)            4           scalar                                                      
 LAT_NAMES                  Local  87       CHAR            16    1     2                         97,119,120                        
 LAT_UNITS                  Local  90       CHAR            16    1     3                         101,136,137                       
 LON_NAMES                  Local  87       CHAR            16    1     2                         96,116,117                        
 LON_UNITS                  Local  90       CHAR            16    1     3                         100,133,134                       
 LOWERCASE                  Func   108      CHAR                        scalar   TGT,PRIV         32,108,109,110,111,115,132,222,248
                                                                                                  ,255                              
 MPP_GET_ATTS               Local  105                                  scalar   PRIV             28,105,114,131,172,182,216,218,240
                                                                                                  ,242,285,287                      
 MPP_GET_AXIS_ATTS          Subr   105                                           PRIV             105,114,131,172,182,216,218,240,24
                                                                                                  2,285,287                         
 NAME                       Local  93       CHAR            32          scalar                    114,115,117,120,123,126,131,132,13
                                                                                                  4,137,140,143                     
 SIZE                       Func   116                                  scalar                    116,119,122,125,133,136,139,142   
 TRIM                       Func   117                                  scalar                    117,120,123,126,134,137,140,143   
 T_NAMES                    Local  89       CHAR            16    1     2                         99,125,126                        
 T_UNITS                    Local  92       CHAR            3     1     6                         103,142,143                       
 Z_NAMES                    Local  88       CHAR            16    1     3                         98,122,123                        
 Z_UNITS                    Local  91       CHAR            8     1     4                         102,139,140                       

Page 5           Source Listing                  GET_AXIS_CART
2021-06-01 08:54                                 axis_utils.F90

    150 
    151 !> @brief Return axis_bound either from an array of available axes, or defined based on axis mid-points
    152   subroutine get_axis_bounds(axis,axis_bound,axes,bnd_name,err_msg)
    153 
    154     type(axistype), intent(in) :: axis
    155     type(axistype), intent(inout) :: axis_bound
    156     type(axistype), intent(in), dimension(:) :: axes
    157     character(len=*), intent(inout), optional :: bnd_name
    158     character(len=*), intent(out), optional :: err_msg
    159 
    160     real, dimension(:), allocatable :: data, tmp
    161 
    162     integer :: i, len
    163     character(len=128) :: name, units
    164     character(len=256) :: longname
    165     character(len=1) :: cartesian
    166     logical :: bounds_found
    167 
    168     if(present(err_msg)) then
    169       err_msg = ''
    170     endif
    171     axis_bound = default_axis
    172     call mpp_get_atts(axis,units=units,longname=longname,&
    173             cartesian=cartesian, len=len)
    174     if(len .LE. 0) return
    175     allocate(data(len+1))
    176 
    177     bounds_found = mpp_get_axis_bounds(axis, data, name=name)
    178     longname = trim(longname)//' bounds'
    179 
    180     if(.not.bounds_found .and. len>1 ) then
    181 ! The following calculation can not be done for len=1
    182        call mpp_get_atts(axis,name=name)
    183        name = trim(name)//'_bnds'
    184        allocate(tmp(len))
    185        call mpp_get_axis_data(axis,tmp)
    186        do i=2,len
    187           data(i)= tmp(i-1)+fp5*(tmp(i)-tmp(i-1))
    188        enddo
    189        data(1)= tmp(1)- fp5*(tmp(2)-tmp(1))
    190        if (abs(data(1)) < epsln) data(1) = 0.0
    191        data(len+1)= tmp(len)+ fp5*(tmp(len)-tmp(len-1))
    192        if (data(1) == 0.0) then
    193           if (abs(data(len+1)-360.) > epsln) data(len+1)=360.0
    194        endif
    195     endif
    196     if(bounds_found .OR. len>1) then
    197        call mpp_modify_meta(axis_bound,name=name,units=units,longname=&
    198                  longname,cartesian=cartesian,data=data)
    199     endif
    200     if(allocated(tmp)) deallocate(tmp)
    201     deallocate(data)
    202 
    203     return
    204   end subroutine get_axis_bounds

Page 6           Source Listing                  GET_AXIS_BOUNDS
2021-06-01 08:54 Entry Points                    axis_utils.F90



ENTRY POINTS

  Name                                          
                                                
 axis_utils_mod_mp_get_axis_bounds_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   190                                  scalar                    190,193                           
 ALLOCATED                  Func   200                                  scalar                    200                               
 AXES                       Dummy  152      RECORD          1424  1     1        ARG,IN                                             
 AXIS                       Dummy  152      AXISTYPE        1424        scalar   ARG,IN           172,177,182,185                   
 AXIS_BOUND                 Dummy  152      AXISTYPE        1424        scalar   ARG,INOUT        171,197                           
 BND_NAME                   Dummy  152      CHAR                        scalar   ARG,INOUT                                          
 BOUNDS_FOUND               Local  166      L(4)            4           scalar                    177,180,196                       
 CARTESIAN                  Local  165      CHAR            1           scalar                    173,198                           
 DATA                       Local  160      R(8)            8     1     1        ALC              175,177,187,189,190,191,192,193,19
                                                                                                  8,201                             
 DEFAULT_AXIS               Local  171      AXISTYPE        1424        scalar   PRIV,SAVE        27,171                            
 EPSLN                      Param  190      R(8)            8           scalar                    190,193,362                       
 ERR_MSG                    Dummy  152      CHAR                        scalar   ARG,OUT          168,169                           
 FP5                        Param  187      R(8)            8           scalar                    187,189,191                       
 GET_AXIS_BOUNDS            Subr   152                                                                                              
 I                          Local  162      I(4)            4           scalar                    186,187                           
 LEN                        Local  162      I(4)            4           scalar                    173,174,175,180,184,186,191,193,19
                                                                                                  6                                 
 LONGNAME                   Local  164      CHAR            256         scalar                    172,178,198                       
 MPP_GET_AXIS_BOUNDS        Func   177      L(4)            4           scalar   PRIV             30,177                            
 MPP_GET_AXIS_DATA          Subr   185                                           PRIV             28,185                            
 MPP_MODIFY_AXIS_META       Subr   197                                           PRIV             197                               
 MPP_MODIFY_META            Local  197                                  scalar   PRIV             28,197                            
 NAME                       Local  163      CHAR            128         scalar                    177,182,183,197                   
 PRESENT                    Func   168                                  scalar                    168                               
 TMP                        Local  160      R(8)            8     1     1        ALC              184,185,187,189,191,200           
 TRIM                       Func   178                                  scalar                    178,183                           
 UNITS                      Local  163      CHAR            128         scalar                    172,197                           

Page 7           Source Listing                  GET_AXIS_BOUNDS
2021-06-01 08:54                                 axis_utils.F90

    205 
    206 !> @brief Returns true if axis has the modulo attribute
    207 !! @return logical get_axis_modulo
    208   function get_axis_modulo(axis)
    209 
    210     type(axistype) :: axis
    211     logical :: get_axis_modulo
    212     integer :: natt, i
    213     type(atttype), dimension(:), allocatable :: atts
    214 
    215 
    216     call mpp_get_atts(axis,natts=natt)
    217     allocate(atts(natt))
    218     call mpp_get_atts(axis,atts=atts)
    219 
    220     get_axis_modulo=.false.
    221     do i = 1,natt
    222        if (lowercase(trim(mpp_get_att_name(atts(i)))) == 'modulo') get_axis_modulo = .true.
    223     enddo
    224 
    225     deallocate(atts)
    226 
    227     return
    228   end function get_axis_modulo


ENTRY POINTS

  Name                                          
                                                
 axis_utils_mod_mp_get_axis_modulo_             

Page 8           Source Listing                  GET_AXIS_MODULO
2021-06-01 08:54 Symbol Table                    axis_utils.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTS                       Local  213      RECORD          1488  1     1        ALC              217,218,222,225                   
 ATTTYPE                    Type   213                                  scalar                    27,213,237,282                    
 AXIS                       Dummy  208      AXISTYPE        1424        scalar   ARG,INOUT        216,218                           
 GET_AXIS_MODULO            Func   208      L(4)            4           scalar                                                      
 I                          Local  212      I(4)            4           scalar                    221,222                           
 MPP_GET_ATT_NAME           Func   222      CHAR            128         scalar   PRIV             29,222,248,255                    
 NATT                       Local  212      I(4)            4           scalar                    216,217,221                       
 TRIM                       Func   222                                  scalar                    222                               

Page 9           Source Listing                  GET_AXIS_MODULO
2021-06-01 08:54                                 axis_utils.F90

    229 
    230 !> @return logical get_axis_modulo_times
    231   function get_axis_modulo_times(axis, tbeg, tend)
    232 
    233     logical :: get_axis_modulo_times
    234     type(axistype), intent(in) :: axis
    235     character(len=*), intent(out) :: tbeg, tend
    236     integer :: natt, i
    237     type(atttype), dimension(:), allocatable :: atts
    238     logical :: found_tbeg, found_tend
    239 
    240     call mpp_get_atts(axis,natts=natt)
    241     allocate(atts(natt))
    242     call mpp_get_atts(axis,atts=atts)
    243 
    244     found_tbeg = .false.
    245     found_tend = .false.
    246 
    247     do i = 1,natt
    248       if(lowercase(trim(mpp_get_att_name(atts(i)))) == 'modulo_beg') then
    249         if(mpp_get_att_length(atts(i)) > len(tbeg)) then
    250           call mpp_error(FATAL,'error in get: len(tbeg) too small to hold attribute')
    251         endif
    252         tbeg = trim(mpp_get_att_char(atts(i)))
    253         found_tbeg = .true.
    254       endif
    255       if(lowercase(trim(mpp_get_att_name(atts(i)))) == 'modulo_end') then
    256         if(mpp_get_att_length(atts(i)) > len(tend)) then
    257           call mpp_error(FATAL,'error in get: len(tend) too small to hold attribute')
    258         endif
    259         tend = trim(mpp_get_att_char(atts(i)))
    260         found_tend = .true.
    261       endif
    262     enddo
    263 
    264     if(found_tbeg .and. .not.found_tend) then
    265       call mpp_error(FATAL,'error in get: Found modulo_beg but not modulo_end')
    266     endif
    267     if(.not.found_tbeg .and. found_tend) then
    268       call mpp_error(FATAL,'error in get: Found modulo_end but not modulo_beg')
    269     endif
    270 
    271     get_axis_modulo_times = found_tbeg
    272 
    273   end function get_axis_modulo_times

Page 10          Source Listing                  GET_AXIS_MODULO_TIMES
2021-06-01 08:54 Entry Points                    axis_utils.F90



ENTRY POINTS

  Name                                                
                                                      
 axis_utils_mod_mp_get_axis_modulo_times_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTS                       Local  237      RECORD          1488  1     1        ALC              241,242,248,249,252,255,256,259   
 AXIS                       Dummy  231      AXISTYPE        1424        scalar   ARG,IN           240,242                           
 FATAL                      Param  250      I(4)            4           scalar   PRIV             31,250,257,265,268,435,518,553,557
                                                                                                  ,560,561,599,603,606,607,687,709,7
                                                                                                  46,764,796,797                    
 FOUND_TBEG                 Local  238      L(4)            4           scalar                    244,253,264,267,271               
 FOUND_TEND                 Local  238      L(4)            4           scalar                    245,260,264,267                   
 GET_AXIS_MODULO_TIMES      Func   231      L(4)            4           scalar                                                      
 I                          Local  236      I(4)            4           scalar                    247,248,249,252,255,256,259       
 LEN                        Func   249                                  scalar                    249,256                           
 MPP_ERROR                  Local  250                                  scalar   PRIV             31,250,257,265,268,435,518,553,557
                                                                                                  ,560,561,599,603,606,607,687,709,7
                                                                                                  46,764,796,797                    
 MPP_ERROR_BASIC            Subr   250                                           PRIV             250,257,265,268,435,518,553,557,56
                                                                                                  0,561,599,603,606,607,687,709,746,
                                                                                                  764,796,797                       
 MPP_GET_ATT_CHAR           Func   252      CHAR                        scalar   PRIV             29,252,259,291                    
 MPP_GET_ATT_LENGTH         Func   249      I(4)            4           scalar   PRIV             30,249,256                        
 NATT                       Local  236      I(4)            4           scalar                    240,241,247                       
 TBEG                       Dummy  231      CHAR                        scalar   ARG,OUT          249,252                           
 TEND                       Dummy  231      CHAR                        scalar   ARG,OUT          256,259                           
 TRIM                       Func   248                                  scalar                    248,252,255,259                   

Page 11          Source Listing                  GET_AXIS_MODULO_TIMES
2021-06-01 08:54                                 axis_utils.F90

    274 
    275 !> @brief Returns if axis is folded at a boundary (non-standard meta-data)
    276 !! @return logical get_axis_fold
    277   function get_axis_fold(axis)
    278 
    279     type(axistype) :: axis
    280     logical :: get_axis_fold
    281     integer :: natt, i
    282     type(atttype), dimension(:), allocatable :: atts
    283 
    284 
    285     call mpp_get_atts(axis,natts=natt)
    286     allocate(atts(natt))
    287     call mpp_get_atts(axis,atts=atts)
    288 
    289     get_axis_fold=.false.
    290     do i = 1,natt
    291        if (mpp_get_att_char(atts(i)) == 'fold_top') get_axis_fold = .true.
    292     enddo
    293 
    294     deallocate(atts)
    295 
    296     return
    297   end function get_axis_fold


ENTRY POINTS

  Name                                        
                                              
 axis_utils_mod_mp_get_axis_fold_             

Page 12          Source Listing                  GET_AXIS_FOLD
2021-06-01 08:54 Symbol Table                    axis_utils.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTS                       Local  282      RECORD          1488  1     1        ALC              286,287,291,294                   
 AXIS                       Dummy  277      AXISTYPE        1424        scalar   ARG,INOUT        285,287                           
 GET_AXIS_FOLD              Func   277      L(4)            4           scalar                                                      
 I                          Local  281      I(4)            4           scalar                    290,291                           
 NATT                       Local  281      I(4)            4           scalar                    285,286,290                       

Page 13          Source Listing                  GET_AXIS_FOLD
2021-06-01 08:54                                 axis_utils.F90

    298 
    299 !> @brief Returns lon_strt <= longitude <= lon_strt+360
    300 !! @return real lon_in_range
    301   function lon_in_range(lon, l_strt)
    302     real :: lon, l_strt, lon_in_range, l_end
    303 
    304     lon_in_range = lon
    305     l_end = l_strt+360.
    306 
    307     if (abs(lon_in_range - l_strt) < 1.e-4) then
    308        lon_in_range = l_strt
    309        return
    310     endif
    311 
    312     if (abs(lon_in_range - l_end) < 1.e-4) then
    313        lon_in_range = l_strt
    314        return
    315     endif
    316 
    317     do
    318        if (lon_in_range < l_strt) then
    319           lon_in_range = lon_in_range +  f360;
    320        else if (lon_in_range  >  l_end) then
    321           lon_in_range  = lon_in_range - f360;
    322        else
    323           exit
    324        end if
    325     end do
    326 
    327   end function lon_in_range

Page 14          Source Listing                  LON_IN_RANGE
2021-06-01 08:54 Entry Points                    axis_utils.F90



ENTRY POINTS

  Name                                       
                                             
 axis_utils_mod_mp_lon_in_range_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   307                                  scalar                    307,312                           
 F360                       Param  319      R(8)            8           scalar                    319,321                           
 LON                        Dummy  301      R(8)            8           scalar   ARG,INOUT        304                               
 LON_IN_RANGE               Func   301      R(8)            8           scalar                                                      
 L_END                      Local  302      R(8)            8           scalar                    305,312,320                       
 L_STRT                     Dummy  301      R(8)            8           scalar   ARG,INOUT        305,307,308,313,318               

Page 15          Source Listing                  LON_IN_RANGE
2021-06-01 08:54                                 axis_utils.F90

    328 
    329 !> @brief Returns monotonic array of longitudes s.t., lon_strt <= lon(:) <= lon_strt+360.
    330   subroutine tranlon(lon, lon_start, istrt)
    331 
    332 ! returns array of longitudes s.t.  lon_strt <= lon < lon_strt+360.
    333 ! also, the first istrt-1 entries are moved to the end of the array
    334 !
    335 ! e.g.
    336 !        lon =      0 1 2 3 4 5  ...  358 359; lon_strt = 3 ==>
    337 !        tranlon =  3 4 5 6 7 8  ...  359 360 361 362; istrt = 4
    338 
    339     real, intent(inout), dimension(:) :: lon
    340     real, intent(in) :: lon_start
    341     integer, intent(out) :: istrt
    342 
    343 
    344     integer :: len, i
    345     real :: lon_strt, tmp(size(lon(:))-1)
    346 
    347     len = size(lon(:))
    348 
    349     do i=1,len
    350        lon(i) = lon_in_range(lon(i),lon_start)
    351     enddo
    352 
    353     istrt=0
    354     do i=1,len-1
    355        if (lon(i+1) < lon(i)) then
    356           istrt=i+1
    357           exit
    358        endif
    359     enddo
    360 
    361     if (istrt>1) then ! grid is not monotonic
    362        if (abs(lon(len)-lon(1)) < epsln) then
    363           tmp = cshift(lon(1:len-1),istrt-1)
    364           lon(1:len-1) = tmp
    365           lon(len) = lon(1)
    366        else
    367           lon = cshift(lon,istrt-1)
    368        endif
    369        lon_strt = lon(1)
    370        do i=2,len+1
    371           lon(i) = lon_in_range(lon(i),lon_strt)
    372           lon_strt = lon(i)
    373        enddo
    374     endif
    375 
    376     return
    377   end subroutine tranlon

Page 16          Source Listing                  TRANLON
2021-06-01 08:54 Entry Points                    axis_utils.F90



ENTRY POINTS

  Name                                  
                                        
 axis_utils_mod_mp_tranlon_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   362                                  scalar                    362                               
 CSHIFT                     Func   363                                  scalar                    363,367                           
 I                          Local  344      I(4)            4           scalar                    349,350,354,355,356,370,371,372   
 ISTRT                      Dummy  330      I(4)            4           scalar   ARG,OUT          353,356,361,363,367               
 LEN                        Local  344      I(4)            4           scalar                    347,349,354,362,363,364,365,370   
 LON                        Dummy  330      R(8)            8     1     1        ARG,INOUT        345,347,350,355,362,363,364,365,36
                                                                                                  7,369,371,372                     
 LON_IN_RANGE               Func   350      R(8)            8           scalar                    36,304,307,308,312,313,318,319,320
                                                                                                  ,321,350,371                      
 LON_START                  Dummy  330      R(8)            8           scalar   ARG,IN           350                               
 LON_STRT                   Local  345      R(8)            8           scalar                    369,371,372                       
 SIZE                       Func   345                                  scalar                    345,347                           
 TMP                        Local  345      R(8)            8     1     0                         363,364                           
 TRANLON                    Subr   330                                                                                              

Page 17          Source Listing                  TRANLON
2021-06-01 08:54                                 axis_utils.F90

    378 
    379 !> @return real frac_index
    380   function frac_index (value, array)
    381 !=======================================================================
    382 !
    383 !     nearest_index = index of nearest data point within "array" corresponding to
    384 !            "value".
    385 !
    386 !     inputs:
    387 !
    388 !     value  = arbitrary data...same units as elements in "array"
    389 !     array  = array of data points  (must be monotonically increasing)
    390 !
    391 !     output:
    392 !
    393 !     nearest_index =  index of nearest data point to "value"
    394 !             if "value" is outside the domain of "array" then nearest_index = 1
    395 !             or "ia" depending on whether array(1) or array(ia) is
    396 !             closest to "value"
    397 !
    398 !             note: if "array" is dimensioned array(0:ia) in the calling
    399 !                   program, then the returned index should be reduced
    400 !                   by one to account for the zero base.
    401 !
    402 !     example:
    403 !
    404 !     let model depths be defined by the following:
    405 !     parameter (km=5)
    406 !     dimension z(km)
    407 !     data z /5.0, 10.0, 50.0, 100.0, 250.0/
    408 !
    409 !     k1 = nearest_index (12.5, z, km)
    410 !     k2 = nearest_index (0.0, z, km)
    411 !
    412 !     k1 would be set to 2, and k2 would be set to 1 so that
    413 !     z(k1) would be the nearest data point to 12.5 and z(k2) would
    414 !     be the nearest data point to 0.0
    415 !
    416 !=======================================================================
    417     integer :: ia, i, ii, unit
    418     real :: value !< arbitrary data...same units as elements in "array"
    419     real :: frac_index
    420     real, dimension(:) :: array !< array of data points  (must be monotonically increasing)
    421     logical keep_going
    422 
    423     ia = size(array(:))
    424 
    425     do i=2,ia
    426        if (array(i) < array(i-1)) then
    427           unit = stdout()
    428           write (unit,*) '=> Error: "frac_index" array must be monotonically increasing when searching for nearest value to 
    428 ',&
    429                               value
    430           write (unit,*) '          array(i) < array(i-1) for i=',i
    431           write (unit,*) '          array(i) for i=1..ia follows:'
    432           do ii=1,ia
    433              write (unit,*) 'i=',ii, ' array(i)=',array(ii)

Page 18          Source Listing                  FRAC_INDEX
2021-06-01 08:54                                 axis_utils.F90

    434           enddo
    435           call mpp_error(FATAL,' "frac_index" array must be monotonically increasing.')
    436        endif
    437     enddo
    438     if (value < array(1) .or. value > array(ia)) then
    439 !       if (value < array(1))  frac_index = 1.
    440 !       if (value > array(ia)) frac_index = float(ia)
    441         frac_index = -1.0
    442     else
    443        i=1
    444        keep_going = .true.
    445        do while (i <= ia .and. keep_going)
    446           i = i+1
    447           if (value <= array(i)) then
    448              frac_index = float(i-1) + (value-array(i-1))/(array(i)-array(i-1))
    449              keep_going = .false.
    450           endif
    451        enddo
    452     endif
    453   end function frac_index


ENTRY POINTS

  Name                                     
                                           
 axis_utils_mod_mp_frac_index_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  380      R(8)            8     1     1        ARG,INOUT        423,426,433,438,447,448           
 FLOAT                      Func   448                                  scalar                    448                               
 FRAC_INDEX                 Func   380      R(8)            8           scalar                                                      
 I                          Local  417      I(4)            4           scalar                    425,426,430,443,445,446,447,448   
 IA                         Local  417      I(4)            4           scalar                    423,425,432,438,445               
 II                         Local  417      I(4)            4           scalar                    432,433                           
 KEEP_GOING                 Local  421      L(4)            4           scalar                    444,445,449                       
 SIZE                       Func   423                                  scalar                    423                               
 STDOUT                     Func   427      I(4)            4           scalar   PRIV             31,427,510                        
 UNIT                       Local  417      I(4)            4           scalar                    427,428,430,431,433               
 VALUE                      Dummy  380      R(8)            8           scalar   ARG,INOUT        429,438,447,448                   

Page 19          Source Listing                  FRAC_INDEX
2021-06-01 08:54                                 axis_utils.F90

    454 
    455 !> @brief Return index of nearest point along axis
    456 !! @return integer nearest_index
    457   function nearest_index (value, array)
    458 !=======================================================================
    459 !
    460 !     nearest_index = index of nearest data point within "array" corresponding to
    461 !            "value".
    462 !
    463 !     inputs:
    464 !
    465 !     value  = arbitrary data...same units as elements in "array"
    466 !     array  = array of data points  (must be monotonically increasing)
    467 !     ia     = dimension of "array"
    468 !
    469 !     output:
    470 !
    471 !     nearest_index =  index of nearest data point to "value"
    472 !             if "value" is outside the domain of "array" then nearest_index = 1
    473 !             or "ia" depending on whether array(1) or array(ia) is
    474 !             closest to "value"
    475 !
    476 !             note: if "array" is dimensioned array(0:ia) in the calling
    477 !                   program, then the returned index should be reduced
    478 !                   by one to account for the zero base.
    479 !
    480 !     example:
    481 !
    482 !     let model depths be defined by the following:
    483 !     parameter (km=5)
    484 !     dimension z(km)
    485 !     data z /5.0, 10.0, 50.0, 100.0, 250.0/
    486 !
    487 !     k1 = nearest_index (12.5, z, km)
    488 !     k2 = nearest_index (0.0, z, km)
    489 !
    490 !     k1 would be set to 2, and k2 would be set to 1 so that
    491 !     z(k1) would be the nearest data point to 12.5 and z(k2) would
    492 !     be the nearest data point to 0.0
    493 !
    494 !=======================================================================
    495 
    496     integer :: nearest_index !< index of nearest data point to "value"
    497 !! if "value" is outside the domain of "array" then nearest_index = 1
    498 !! or "ia" depending on whether array(1) or array(ia) is
    499 !! closest to "value"
    500     Integer :: i, ii, unit
    501     integer :: ia !< dimension of "array"
    502     real :: value !< arbitrary data...same units as elements in "array"
    503     real, dimension(:) :: array !< array of data points  (must be monotonically increasing)
    504     logical keep_going
    505 
    506     ia = size(array(:))
    507 
    508     do i=2,ia
    509        if (array(i) < array(i-1)) then
    510           unit = stdout()

Page 20          Source Listing                  NEAREST_INDEX
2021-06-01 08:54                                 axis_utils.F90

    511           write (unit,*) '=> Error: "nearest_index" array must be monotonically increasing &
    512                          &when searching for nearest value to ',value
    513           write (unit,*) '          array(i) < array(i-1) for i=',i
    514           write (unit,*) '          array(i) for i=1..ia follows:'
    515           do ii=1,ia
    516              write (unit,*) 'i=',ii, ' array(i)=',array(ii)
    517           enddo
    518           call mpp_error(FATAL,' "nearest_index" array must be monotonically increasing.')
    519        endif
    520     enddo
    521     if (value < array(1) .or. value > array(ia)) then
    522        if (value < array(1))  nearest_index = 1
    523        if (value > array(ia)) nearest_index = ia
    524     else
    525        i=1
    526        keep_going = .true.
    527        do while (i <= ia .and. keep_going)
    528           i = i+1
    529           if (value <= array(i)) then
    530              nearest_index = i
    531              if (array(i)-value > value-array(i-1)) nearest_index = i-1
    532              keep_going = .false.
    533           endif
    534        enddo
    535     endif
    536   end function nearest_index


ENTRY POINTS

  Name                                        
                                              
 axis_utils_mod_mp_nearest_index_             

Page 21          Source Listing                  NEAREST_INDEX
2021-06-01 08:54 Symbol Table                    axis_utils.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  457      R(8)            8     1     1        ARG,INOUT        506,509,516,521,522,523,529,531   
 I                          Local  500      I(4)            4           scalar                    508,509,513,525,527,528,529,530,53
                                                                                                  1                                 
 IA                         Local  501      I(4)            4           scalar                    506,508,515,521,523,527           
 II                         Local  500      I(4)            4           scalar                    515,516                           
 KEEP_GOING                 Local  504      L(4)            4           scalar                    526,527,532                       
 NEAREST_INDEX              Func   457      I(4)            4           scalar                                                      
 SIZE                       Func   506                                  scalar                    506                               
 UNIT                       Local  500      I(4)            4           scalar                    510,511,513,514,516               
 VALUE                      Dummy  457      R(8)            8           scalar   ARG,INOUT        512,521,522,523,529,531           

Page 22          Source Listing                  NEAREST_INDEX
2021-06-01 08:54                                 axis_utils.F90

    537 
    538 !#############################################################################
    539 
    540   subroutine interp_1d_linear(grid1,grid2,data1,data2)
    541 
    542     real, dimension(:),    intent(in) :: grid1, data1, grid2
    543     real, dimension(:), intent(inout) :: data2
    544 
    545     integer :: n1, n2, i, n, ext
    546     real :: w
    547 
    548     n1 = size(grid1(:))
    549     n2 = size(grid2(:))
    550 
    551 
    552     do i=2,n1
    553        if (grid1(i) <= grid1(i-1)) call mpp_error(FATAL, 'grid1 not monotonic')
    554     enddo
    555 
    556     do i=2,n2
    557        if (grid2(i) <= grid2(i-1)) call mpp_error(FATAL, 'grid2 not monotonic')
    558     enddo
    559 
    560     if (grid1(1) > grid2(1) ) call mpp_error(FATAL, 'grid2 lies outside grid1')
    561     if (grid1(n1) < grid2(n2) ) call mpp_error(FATAL, 'grid2 lies outside grid1')
    562 
    563     do i=1,n2
    564        n = nearest_index(grid2(i),grid1)
    565 
    566        if (grid1(n) < grid2(i)) then
    567           w = (grid2(i)-grid1(n))/(grid1(n+1)-grid1(n))
    568           data2(i) = (1.-w)*data1(n) + w*data1(n+1)
    569        else
    570           if(n==1) then
    571              data2(i) = data1(n)
    572           else
    573              w = (grid2(i)-grid1(n-1))/(grid1(n)-grid1(n-1))
    574              data2(i) = (1.-w)*data1(n-1) + w*data1(n)
    575           endif
    576        endif
    577     enddo
    578 
    579 
    580     return
    581 
    582   end subroutine interp_1d_linear

Page 23          Source Listing                  INTERP_1D_LINEAR
2021-06-01 08:54 Entry Points                    axis_utils.F90



ENTRY POINTS

  Name                                           
                                                 
 axis_utils_mod_mp_interp_1d_linear_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  540      R(8)            8     1     1        ARG,IN           568,571,574                       
 DATA2                      Dummy  540      R(8)            8     1     1        ARG,INOUT        568,571,574                       
 EXT                        Local  545      I(4)            4           scalar                                                      
 GRID1                      Dummy  540      R(8)            8     1     1        ARG,IN           548,553,560,561,564,566,567,573   
 GRID2                      Dummy  540      R(8)            8     1     1        ARG,IN           549,557,560,561,564,566,567,573   
 I                          Local  545      I(4)            4           scalar                    552,553,556,557,563,564,566,567,56
                                                                                                  8,571,573,574                     
 INTERP_1D_LINEAR           Subr   540                                                            683,713,753                       
 N                          Local  545      I(4)            4           scalar                    564,566,567,568,570,571,573,574   
 N1                         Local  545      I(4)            4           scalar                    548,552,561                       
 N2                         Local  545      I(4)            4           scalar                    549,556,561,563                   
 NEAREST_INDEX              Func   564      I(4)            4           scalar                    37,522,523,530,531,564,640        
 SIZE                       Func   548                                  scalar                    548,549                           
 W                          Local  546      R(8)            8           scalar                    567,568,573,574                   

Page 24          Source Listing                  INTERP_1D_LINEAR
2021-06-01 08:54                                 axis_utils.F90

    583 
    584 !###################################################################
    585   subroutine interp_1d_cubic_spline(grid1, grid2, data1, data2, yp1, ypn)
    586 
    587     real, dimension(:),    intent(in) :: grid1, grid2, data1
    588     real, dimension(:), intent(inout) :: data2
    589     real,                  intent(in) :: yp1, ypn
    590 
    591     real, dimension(size(grid1))      :: y2, u
    592     real                              :: sig, p, qn, un, h, a ,b
    593     integer                           :: n, m, i, k, klo, khi
    594 
    595     n = size(grid1(:))
    596     m = size(grid2(:))
    597 
    598     do i=2,n
    599        if (grid1(i) <= grid1(i-1)) call mpp_error(FATAL, 'grid1 not monotonic')
    600     enddo
    601 
    602     do i=2,m
    603        if (grid2(i) <= grid2(i-1)) call mpp_error(FATAL, 'grid2 not monotonic')
    604     enddo
    605 
    606     if (grid1(1) > grid2(1) ) call mpp_error(FATAL, 'grid2 lies outside grid1')
    607     if (grid1(n) < grid2(m) ) call mpp_error(FATAL, 'grid2 lies outside grid1')
    608 
    609     if (yp1 >.99e30) then
    610        y2(1)=0.
    611        u(1)=0.
    612     else
    613        y2(1)=-0.5
    614        u(1)=(3./(grid1(2)-grid1(1)))*((data1(2)-data1(1))/(grid1(2)-grid1(1))-yp1)
    615     endif
    616 
    617     do i=2,n-1
    618        sig=(grid1(i)-grid1(i-1))/(grid1(i+1)-grid1(i-1))
    619        p=sig*y2(i-1)+2.
    620        y2(i)=(sig-1.)/p
    621        u(i)=(6.*((data1(i+1)-data1(i))/(grid1(i+1)-grid1(i))-(data1(i)-data1(i-1)) &
    622              /(grid1(i)-grid1(i-1)))/(grid1(i+1)-grid1(i-1))-sig*u(i-1))/p
    623     enddo
    624 
    625     if (ypn > .99e30) then
    626        qn=0.
    627        un=0.
    628     else
    629        qn=0.5
    630        un=(3./(grid1(n)-grid1(n-1)))*(ypn-(data1(n)-data1(n-1))/(grid1(n)-grid1(n-1)))
    631     endif
    632 
    633     y2(n)=(un-qn*u(n-1))/(qn*y2(n-1)+1.)
    634 
    635     do  k=n-1,1,-1
    636        y2(k)=y2(k)*y2(k+1)+u(k)
    637     enddo
    638 
    639     do k = 1, m

Page 25          Source Listing                  INTERP_1D_CUBIC_SPLINE
2021-06-01 08:54                                 axis_utils.F90

    640        n = nearest_index(grid2(k),grid1)
    641        if (grid1(n) < grid2(k)) then
    642           klo = n
    643        else
    644           if(n==1) then
    645             klo = n
    646           else
    647             klo = n -1
    648           endif
    649        endif
    650        khi = klo+1
    651        h   = grid1(khi)-grid1(klo)
    652        a   = (grid1(khi) - grid2(k))/h
    653        b   = (grid2(k) - grid1(klo))/h
    654        data2(k) = a*data1(klo) + b*data1(khi)+ ((a**3-a)*y2(klo) + (b**3-b)*y2(khi))*(h**2)/6.
    655     enddo
    656 
    657   end subroutine interp_1d_cubic_spline


ENTRY POINTS

  Name                                                 
                                                       
 axis_utils_mod_mp_interp_1d_cubic_spline_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  592      R(8)            8           scalar                    652,654                           
 B                          Local  592      R(8)            8           scalar                    653,654                           
 DATA1                      Dummy  585      R(8)            8     1     1        ARG,IN           614,621,630,654                   
 DATA2                      Dummy  585      R(8)            8     1     1        ARG,INOUT        654                               
 GRID1                      Dummy  585      R(8)            8     1     1        ARG,IN           595,599,606,607,614,618,621,622,63
                                                                                                  0,640,641,651,652,653             
 GRID2                      Dummy  585      R(8)            8     1     1        ARG,IN           596,603,606,607,640,641,652,653   
 H                          Local  592      R(8)            8           scalar                    651,652,653,654                   
 I                          Local  593      I(4)            4           scalar                    598,599,602,603,617,618,619,620,62
                                                                                                  1,622                             
 INTERP_1D_CUBIC_SPLINE     Subr   585                                                            685,760                           
 K                          Local  593      I(4)            4           scalar                    635,636,639,640,641,652,653,654   
 KHI                        Local  593      I(4)            4           scalar                    650,651,652,654                   
 KLO                        Local  593      I(4)            4           scalar                    642,645,647,650,651,653,654       
 M                          Local  593      I(4)            4           scalar                    596,602,607,639                   
 N                          Local  593      I(4)            4           scalar                    595,598,607,617,630,633,635,640,64
                                                                                                  1,642,644,645,647                 
 P                          Local  592      R(8)            8           scalar                    619,620,622                       
 QN                         Local  592      R(8)            8           scalar                    626,629,633                       
 SIG                        Local  592      R(8)            8           scalar                    618,619,620,622                   
 SIZE                       Func   595                                  scalar                    595,596                           
 U                          Local  591      R(8)            8     1     0                         611,614,621,622,633,636           
 UN                         Local  592      R(8)            8           scalar                    627,630,633                       
 Y2                         Local  591      R(8)            8     1     0                         610,613,619,620,633,636,654       
 YP1                        Dummy  585      R(8)            8           scalar   ARG,IN           609,614                           
 YPN                        Dummy  585      R(8)            8           scalar   ARG,IN           625,630                           

Page 26          Source Listing                  INTERP_1D_CUBIC_SPLINE
2021-06-01 08:54                                 axis_utils.F90

    658 
    659 !###################################################################
    660 
    661   subroutine interp_1d_1d(grid1,grid2,data1,data2, method, yp1, yp2)
    662 
    663     real, dimension(:),      intent(in)    :: grid1, data1, grid2
    664     real, dimension(:),      intent(inout) :: data2
    665     character(len=*), optional, intent(in) :: method
    666     real,             optional, intent(in) :: yp1, yp2
    667 
    668     real              :: y1, y2
    669     character(len=32) :: interp_method
    670     integer           :: k2, ks, ke
    671 
    672     k2 = size(grid2(:))
    673 
    674     interp_method = "linear"
    675     if(present(method)) interp_method = method
    676     y1 = 1.0e30
    677     if(present(yp1)) y1 = yp1
    678     y2 = 1.0e30
    679     if(present(yp2)) y2 = yp2
    680     call find_index(grid1, grid2(1), grid2(k2), ks, ke)
    681     select case(trim(interp_method))
    682     case("linear")
    683        call interp_1d_linear(grid1(ks:ke),grid2,data1(ks:ke),data2)
    684     case("cubic_spline")
    685        call interp_1d_cubic_spline(grid1(ks:ke),grid2,data1(ks:ke),data2, y1, y2)
    686     case default
    687        call mpp_error(FATAL,"axis_utils: interp_method should be linear or cubic_spline")
    688     end select
    689 
    690     return
    691 
    692   end subroutine interp_1d_1d

Page 27          Source Listing                  INTERP_1D_1D
2021-06-01 08:54 Entry Points                    axis_utils.F90



ENTRY POINTS

  Name                                       
                                             
 axis_utils_mod_mp_interp_1d_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  661      R(8)            8     1     1        ARG,IN           683,685                           
 DATA2                      Dummy  661      R(8)            8     1     1        ARG,INOUT        683,685                           
 GRID1                      Dummy  661      R(8)            8     1     1        ARG,IN           680,683,685                       
 GRID2                      Dummy  661      R(8)            8     1     1        ARG,IN           672,680,683,685                   
 INTERP_1D_1D               Subr   661                                           PRIV                                               
 INTERP_METHOD              Local  669      CHAR            32          scalar                    674,675,681                       
 K2                         Local  670      I(4)            4           scalar                    672,680                           
 KE                         Local  670      I(4)            4           scalar                    680,683,685                       
 KS                         Local  670      I(4)            4           scalar                    680,683,685                       
 METHOD                     Dummy  661      CHAR                        scalar   ARG,IN           675                               
 PRESENT                    Func   675                                  scalar                    675,677,679                       
 SIZE                       Func   672                                  scalar                    672                               
 TRIM                       Func   681                                  scalar                    681                               
 Y1                         Local  668      R(8)            8           scalar                    676,677,685                       
 Y2                         Local  668      R(8)            8           scalar                    678,679,685                       
 YP1                        Dummy  661      R(8)            8           scalar   ARG,IN           677                               
 YP2                        Dummy  661      R(8)            8           scalar   ARG,IN           679                               

Page 28          Source Listing                  INTERP_1D_1D
2021-06-01 08:54                                 axis_utils.F90

    693 
    694 !###################################################################
    695 
    696 
    697   subroutine interp_1d_2d(grid1,grid2,data1,data2)
    698 
    699     real, dimension(:,:),    intent(in) :: grid1, data1, grid2
    700     real, dimension(:,:), intent(inout) :: data2
    701 
    702     integer :: n1, n2, i, n, k2, ks, ke
    703     real :: w
    704 
    705     n1 = size(grid1,1)
    706     n2 = size(grid2,1)
    707     k2 = size(grid2,2)
    708 
    709     if (n1 /= n2) call mpp_error(FATAL,'grid size mismatch')
    710 
    711     do n=1,n1
    712        call find_index(grid1(n,:), grid2(n,1), grid2(n,k2), ks, ke)
    713        call interp_1d_linear(grid1(n,ks:ke),grid2(n,:),data1(n,ks:ke),data2(n,:))
    714     enddo
    715 
    716     return
    717 
    718   end subroutine interp_1d_2d


ENTRY POINTS

  Name                                       
                                             
 axis_utils_mod_mp_interp_1d_2d_             

Page 29          Source Listing                  INTERP_1D_2D
2021-06-01 08:54 Symbol Table                    axis_utils.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  697      R(8)            8     2     1        ARG,IN           713                               
 DATA2                      Dummy  697      R(8)            8     2     1        ARG,INOUT        713                               
 GRID1                      Dummy  697      R(8)            8     2     1        ARG,IN           705,712,713                       
 GRID2                      Dummy  697      R(8)            8     2     1        ARG,IN           706,707,712,713                   
 I                          Local  702      I(4)            4           scalar                                                      
 INTERP_1D_2D               Subr   697                                           PRIV                                               
 K2                         Local  702      I(4)            4           scalar                    707,712                           
 KE                         Local  702      I(4)            4           scalar                    712,713                           
 KS                         Local  702      I(4)            4           scalar                    712,713                           
 N                          Local  702      I(4)            4           scalar                    711,712,713                       
 N1                         Local  702      I(4)            4           scalar                    705,709,711                       
 N2                         Local  702      I(4)            4           scalar                    706,709                           
 SIZE                       Func   705                                  scalar                    705,706,707                       
 W                          Local  703      R(8)            8           scalar                                                      

Page 30          Source Listing                  INTERP_1D_2D
2021-06-01 08:54                                 axis_utils.F90

    719 
    720 !###################################################################
    721 
    722   subroutine interp_1d_3d(grid1,grid2,data1,data2, method, yp1, yp2)
    723 
    724     real, dimension(:,:,:),  intent(in)    :: grid1, data1, grid2
    725     real, dimension(:,:,:),  intent(inout) :: data2
    726     character(len=*), optional, intent(in) :: method
    727     real,             optional, intent(in) :: yp1, yp2
    728 
    729     integer           :: n1, n2, m1, m2, k2, i, n, m
    730     real              :: w, y1, y2
    731     character(len=32) :: interp_method
    732     integer           :: ks, ke
    733     n1 = size(grid1,1)
    734     n2 = size(grid2,1)
    735     m1 = size(grid1,2)
    736     m2 = size(grid2,2)
    737     k2 = size(grid2,3)
    738 
    739     interp_method = "linear"
    740     if(present(method)) interp_method = method
    741     y1 = 1.0e30
    742     if(present(yp1)) y1 = yp1
    743     y2 = 1.0e30
    744     if(present(yp2)) y2 = yp2
    745 
    746     if (n1 /= n2 .or. m1 /= m2) call mpp_error(FATAL,'grid size mismatch')
    747 
    748     select case(trim(interp_method))
    749     case("linear")
    750        do m=1,m1
    751           do n=1,n1
    752             call find_index(grid1(n,m,:), grid2(n,m,1), grid2(n,m,k2), ks, ke)
    753              call interp_1d_linear(grid1(n,m,ks:ke),grid2(n,m,:),data1(n,m,ks:ke),data2(n,m,:))
    754           enddo
    755        enddo
    756     case("cubic_spline")
    757        do m=1,m1
    758           do n=1,n1
    759             call find_index(grid1(n,m,:), grid2(n,m,1), grid2(n,m,k2), ks, ke)
    760             call interp_1d_cubic_spline(grid1(n,m,ks:ke),grid2(n,m,:), data1(n,m,ks:ke),data2(n,m,:), y1, y2)
    761           enddo
    762        enddo
    763     case default
    764        call mpp_error(FATAL,"axis_utils: interp_method should be linear or cubic_spline")
    765     end select
    766 
    767     return
    768 
    769   end subroutine interp_1d_3d

Page 31          Source Listing                  INTERP_1D_3D
2021-06-01 08:54 Entry Points                    axis_utils.F90



ENTRY POINTS

  Name                                       
                                             
 axis_utils_mod_mp_interp_1d_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  722      R(8)            8     3     1        ARG,IN           753,760                           
 DATA2                      Dummy  722      R(8)            8     3     1        ARG,INOUT        753,760                           
 GRID1                      Dummy  722      R(8)            8     3     1        ARG,IN           733,735,752,753,759,760           
 GRID2                      Dummy  722      R(8)            8     3     1        ARG,IN           734,736,737,752,753,759,760       
 I                          Local  729      I(4)            4           scalar                                                      
 INTERP_1D_3D               Subr   722                                           PRIV                                               
 INTERP_METHOD              Local  731      CHAR            32          scalar                    739,740,748                       
 K2                         Local  729      I(4)            4           scalar                    737,752,759                       
 KE                         Local  732      I(4)            4           scalar                    752,753,759,760                   
 KS                         Local  732      I(4)            4           scalar                    752,753,759,760                   
 M                          Local  729      I(4)            4           scalar                    750,752,753,757,759,760           
 M1                         Local  729      I(4)            4           scalar                    735,746,750,757                   
 M2                         Local  729      I(4)            4           scalar                    736,746                           
 METHOD                     Dummy  722      CHAR                        scalar   ARG,IN           740                               
 N                          Local  729      I(4)            4           scalar                    751,752,753,758,759,760           
 N1                         Local  729      I(4)            4           scalar                    733,746,751,758                   
 N2                         Local  729      I(4)            4           scalar                    734,746                           
 PRESENT                    Func   740                                  scalar                    740,742,744                       
 SIZE                       Func   733                                  scalar                    733,734,735,736,737               
 TRIM                       Func   748                                  scalar                    748                               
 W                          Local  730      R(8)            8           scalar                                                      
 Y1                         Local  730      R(8)            8           scalar                    741,742,760                       
 Y2                         Local  730      R(8)            8           scalar                    743,744,760                       
 YP1                        Dummy  722      R(8)            8           scalar   ARG,IN           742                               
 YP2                        Dummy  722      R(8)            8           scalar   ARG,IN           744                               

Page 32          Source Listing                  INTERP_1D_3D
2021-06-01 08:54                                 axis_utils.F90

    770 
    771 
    772 !#####################################################################
    773   subroutine find_index(grid1, xs, xe, ks, ke)
    774     real, dimension(:), intent(in) :: grid1
    775     real,               intent(in) :: xs, xe
    776     integer,           intent(out) :: ks, ke
    777 
    778     integer :: k, nk
    779 
    780     nk = size(grid1(:))
    781 
    782     ks = 0; ke = 0
    783     do k = 1, nk-1
    784        if(grid1(k) <= xs .and. grid1(k+1) > xs ) then
    785           ks = k
    786           exit
    787        endif
    788     enddo
    789     do k = nk, 2, -1
    790        if(grid1(k) >= xe .and. grid1(k-1) < xe ) then
    791           ke = k
    792           exit
    793        endif
    794     enddo
    795 
    796     if(ks == 0 ) call mpp_error(FATAL,' xs locate outside of grid1')
    797     if(ke == 0 ) call mpp_error(FATAL,' xe locate outside of grid1')
    798 
    799   end subroutine find_index

Page 33          Source Listing                  FIND_INDEX
2021-06-01 08:54 Entry Points                    axis_utils.F90



ENTRY POINTS

  Name                                     
                                           
 axis_utils_mod_mp_find_index_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIND_INDEX                 Subr   773                                                            680,712,752,759                   
 GRID1                      Dummy  773      R(8)            8     1     1        ARG,IN           780,784,790                       
 K                          Local  778      I(4)            4           scalar                    783,784,785,789,790,791           
 KE                         Dummy  773      I(4)            4           scalar   ARG,OUT          782,791,797                       
 KS                         Dummy  773      I(4)            4           scalar   ARG,OUT          782,785,796                       
 NK                         Local  778      I(4)            4           scalar                    780,783,789                       
 SIZE                       Func   780                                  scalar                    780                               
 XE                         Dummy  773      R(8)            8           scalar   ARG,IN           790                               
 XS                         Dummy  773      R(8)            8           scalar   ARG,IN           784                               

Page 34          Source Listing                  FIND_INDEX
2021-06-01 08:54                                 axis_utils.F90

    800 
    801 end module axis_utils_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXIS_UTILS_MOD             Module 25                                                                                               
 DEFAULT_ATT                Local  27       ATTTYPE         1488        scalar   PRIV,SAVE        27                                
 FMS_ERROR_HANDLER          Func   32       L(4)            4           scalar   PRIV             32                                
 FMS_MOD                    Module 32                                                             32                                
 FRAC_INDEX@0               Local  380      R(8)            8           scalar                                                      
 GET_AXIS_BOUNDS            Subr   36                                                             36                                
 GET_AXIS_CART              Subr   36                                                             36                                
 GET_AXIS_FOLD@0            Local  277      L(4)            4           scalar                                                      
 GET_AXIS_MODULO@0          Local  208      L(4)            4           scalar                                                      
 GET_AXIS_MODULO_TIMES@0    Local  231      L(4)            4           scalar                                                      
 INTERP_1D                  Local  73                                   scalar                    37                                
 LON_IN_RANGE@0             Local  301      R(8)            8           scalar                                                      
 MAXATTS                    Param  41       I(4)            4           scalar                                                      
 MPP_GET_ATT_TYPE           Func   29       I(4)            4           scalar   PRIV             29                                
 MPP_IO_MOD                 Module 27                                                             27                                
 MPP_MOD                    Module 31                                                             31                                
 NEAREST_INDEX@0            Local  457      I(4)            4           scalar                                                      
 NETCDF                     Module 26                                                             26                                
 STRING_ARRAY_INDEX         Func   32       L(4)            4           scalar   PRIV             32                                
 TRANLON                    Subr   37                                                             37                                
 VERSION                    Param  69       CHAR            7           scalar                                                      

Page 35          Source Listing                  FIND_INDEX
2021-06-01 08:54 Subprograms/Common Blocks       axis_utils.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXIS_UTILS_MOD             Module 25                                                                                               
 FIND_INDEX                 Subr   773                                                            680,712,752,759                   
 FRAC_INDEX                 Func   380      R(8)            8           scalar                                                      
 GET_AXIS_BOUNDS            Subr   152                                                                                              
 GET_AXIS_CART              Subr   82                                                                                               
 GET_AXIS_FOLD              Func   277      L(4)            4           scalar                                                      
 GET_AXIS_MODULO            Func   208      L(4)            4           scalar                                                      
 GET_AXIS_MODULO_TIMES      Func   231      L(4)            4           scalar                                                      
 INTERP_1D_1D               Subr   661                                           PRIV                                               
 INTERP_1D_2D               Subr   697                                           PRIV                                               
 INTERP_1D_3D               Subr   722                                           PRIV                                               
 INTERP_1D_CUBIC_SPLINE     Subr   585                                                            685,760                           
 INTERP_1D_LINEAR           Subr   540                                                            683,713,753                       
 LON_IN_RANGE               Func   301      R(8)            8           scalar                                                      
 NEAREST_INDEX              Func   457      I(4)            4           scalar                                                      
 TRANLON                    Subr   330                                                                                              

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume

Page 36          Source Listing                  FIND_INDEX
2021-06-01 08:54                                 axis_utils.F90

       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion

Page 37          Source Listing                  FIND_INDEX
2021-06-01 08:54                                 axis_utils.F90

       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : axis_utils.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
