Page 1           Source Listing                  MIXBITS
2021-06-01 08:56                                 /tmp/ifort3atI6j.i90

      1 # 1 "mersennetwister.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 ! Fortran-95 implementation of the Mersenne Twister 19937, following
     22 !   the C implementation described below (code mt19937ar-cok.c, dated 2002/2/10),
     23 !   adapted cosmetically by making the names more general.
     24 ! Users must declare one or more variables of type randomNumberSequence in the calling
     25 !   procedure which are then initialized using a required seed. If the
     26 !   variable is not initialized the random numbers will all be 0.
     27 ! For example:
     28 ! program testRandoms
     29 !   use RandomNumbers
     30 !   type(randomNumberSequence) :: randomNumbers
     31 !   integer                    :: i
     32 !
     33 !   randomNumbers = new_RandomNumberSequence(seed = 100)
     34 !   do i = 1, 10
     35 !     print ('(f12.10, 2x)'), getRandomReal(randomNumbers)
     36 !   end do
     37 ! end program testRandoms
     38 !
     39 ! Fortran-95 implementation by
     40 !   Robert Pincus
     41 !   NOAA-CIRES Climate Diagnostics Center
     42 !   Boulder, CO 80305
     43 !   email: Robert.Pincus@colorado.edu
     44 !
     45 ! This documentation in the original C program reads:
     46 ! -------------------------------------------------------------
     47 !    A C-program for MT19937, with initialization improved 2002/2/10.
     48 !    Coded by Takuji Nishimura and Makoto Matsumoto.
     49 !    This is a faster version by taking Shawn Cokus's optimization,
     50 !    Matthe Bellew's simplification, Isaku Wada's real version.
     51 !
     52 !    Before using, initialize the state by using init_genrand(seed)
     53 !    or init_by_array(init_key, key_length).
     54 !
     55 !    Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
     56 !    All rights reserved.
     57 !

Page 2           Source Listing                  MIXBITS
2021-06-01 08:56                                 mersennetwister.F90

     58 !    Redistribution and use in source and binary forms, with or without
     59 !    modification, are permitted provided that the following conditions
     60 !    are met:
     61 !
     62 !      1. Redistributions of source code must retain the above copyright
     63 !         notice, this list of conditions and the following disclaimer.
     64 !
     65 !      2. Redistributions in binary form must reproduce the above copyright
     66 !         notice, this list of conditions and the following disclaimer in the
     67 !         documentation and/or other materials provided with the distribution.
     68 !
     69 !      3. The names of its contributors may not be used to endorse or promote
     70 !         products derived from this software without specific prior written
     71 !         permission.
     72 !
     73 !    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     74 !    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     75 !    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     76 !    A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     77 !    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     78 !    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     79 !    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     80 !    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     81 !    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     82 !    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     83 !    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     84 !
     85 !
     86 !    Any feedback is very welcome.
     87 !    http://www.math.keio.ac.jp/matumoto/emt.html
     88 !    email: matumoto@math.keio.ac.jp
     89 ! -------------------------------------------------------------
     90 
     91 module MersenneTwister_mod
     92 ! -------------------------------------------------------------
     93   implicit none
     94   private
     95 
     96 ! Algorithm parameters
     97 ! -------
     98 ! Period parameters
     99   integer, parameter :: blockSize = 624,         &
    100                         M         = 397,         &
    101                         MATRIX_A  = -1727483681, & ! constant vector a         (0x9908b0dfUL)
    102                         UMASK     = -2147483648_8, & ! most significant w-r bits (0x80000000UL)
    103                         LMASK     =  2147483647    ! least significant r bits  (0x7fffffffUL)
    104 ! Tempering parameters
    105   integer, parameter :: TMASKB= -1658038656, & ! (0x9d2c5680UL)
    106                         TMASKC= -272236544     ! (0xefc60000UL)
    107 ! -------
    108 
    109 ! The type containing the state variable
    110   type randomNumberSequence
    111     integer                            :: currentElement ! = blockSize
    112     integer, dimension(0:blockSize -1) :: state ! = 0
    113   end type randomNumberSequence
    114 

Page 3           Source Listing                  MIXBITS
2021-06-01 08:56                                 mersennetwister.F90

    115   interface new_RandomNumberSequence
    116     module procedure initialize_scalar, initialize_vector
    117   end interface new_RandomNumberSequence
    118 
    119   public :: randomNumberSequence
    120   public :: new_RandomNumberSequence, finalize_RandomNumberSequence, &
    121             getRandomInt, getRandomPositiveInt, getRandomReal
    122 ! -------------------------------------------------------------
    123 contains
    124 ! -------------------------------------------------------------
    125 ! Private functions
    126 ! ---------------------------
    127   function mixbits(u, v)
    128     integer, intent( in) :: u, v
    129     integer              :: mixbits
    130 
    131     mixbits = ior(iand(u, UMASK), iand(v, LMASK))
    132   end function mixbits


ENTRY POINTS

  Name                                       
                                             
 mersennetwister_mod_mp_mixbits_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IAND                       Func   131                                  scalar                    131                               
 IOR                        Func   131                                  scalar                    131                               
 LMASK                      Param  131      I(4)            4           scalar                    131                               
 MIXBITS                    Func   127      I(4)            4           scalar                    131,141,142                       
 U                          Dummy  127      I(4)            4           scalar   ARG,IN           131                               
 UMASK                      Param  131      I(4)            4           scalar                    131,247                           
 V                          Dummy  127      I(4)            4           scalar   ARG,IN           131                               

Page 4           Source Listing                  MIXBITS
2021-06-01 08:56                                 mersennetwister.F90

    133 ! ---------------------------
    134   function twist(u, v)
    135     integer, intent( in) :: u, v
    136     integer              :: twist
    137 
    138 ! Local variable
    139     integer, parameter, dimension(0:1) :: t_matrix = (/ 0, MATRIX_A /)
    140 
    141     twist = ieor(ishft(mixbits(u, v), -1), t_matrix(iand(v, 1)))
    142     twist = ieor(ishft(mixbits(u, v), -1), t_matrix(iand(v, 1)))
    143   end function twist


ENTRY POINTS

  Name                                     
                                           
 mersennetwister_mod_mp_twist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IAND                       Func   141                                  scalar                    141,142                           
 IEOR                       Func   141                                  scalar                    141,142                           
 ISHFT                      Func   141                                  scalar                    141,142                           
 MATRIX_A                   Param  139      I(4)            4           scalar                    139                               
 TWIST                      Func   134      I(4)            4           scalar                    141,142,153,157,160               
 T_MATRIX                   Param  139      I(4)            4     1     2                         141,142                           
 U                          Dummy  134      I(4)            4           scalar   ARG,IN           141,142                           
 V                          Dummy  134      I(4)            4           scalar   ARG,IN           141,142                           

Page 5           Source Listing                  TWIST
2021-06-01 08:56                                 mersennetwister.F90

    144 ! ---------------------------
    145   subroutine nextState(twister)
    146     type(randomNumberSequence), intent(inout) :: twister
    147 
    148 ! Local variables
    149     integer :: k
    150 
    151     do k = 0, blockSize - M - 1
    152       twister%state(k) = ieor(twister%state(k + M), &
    153                               twist(twister%state(k), twister%state(k + 1)))
    154     end do
    155     do k = blockSize - M, blockSize - 2
    156       twister%state(k) = ieor(twister%state(k + M - blockSize), &
    157                               twist(twister%state(k), twister%state(k + 1)))
    158     end do
    159     twister%state(blockSize - 1) = ieor(twister%state(M - 1), &
    160                                         twist(twister%state(blockSize - 1), twister%state(0)))
    161     twister%currentElement = 0
    162 
    163   end subroutine nextState


ENTRY POINTS

  Name                                         
                                               
 mersennetwister_mod_mp_nextstate_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLOCKSIZE                  Param  151      I(4)            4           scalar                    112,151,155,156,159,160,190,195,20
                                                                                                  7,209,212,231,238,240,248,264,306 
 IEOR                       Func   152                                  scalar                    152,156,159                       
 K                          Local  149      I(4)            4           scalar                    151,152,153,155,156,157           
 M                          Param  151      I(4)            4           scalar                    151,152,155,156,159               
 NEXTSTATE                  Subr   145                                                            264                               
 RANDOMNUMBERSEQUENCE       Type   146                      2500        scalar                    113,119,146,182,200,255,272,287,30
                                                                                                  4                                 
 TWISTER                    Dummy  145      RANDOMNUMBERSEQUENCE                                                                    
                                                            2500        scalar   ARG,INOUT        152,153,156,157,159,160,161       


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 RANDOMNUMBERSEQUENCE.CURRENTELEMENT                                                                                       ...
                            I(4)            4     0              scalar                    161,195,248,264,266,267,306        
 RANDOMNUMBERSEQUENCE.STATE I(4)            4     4        1     624                       152,153,156,157,159,160,189,191,19 
                                                                                           2,193,212,213,214,215,217,220,221, 
                                                                                           222,224,232,233,234,235,238,241,24 
                                                                                           2,243,244,247,266,307              

Page 6           Source Listing                  NEXTSTATE
2021-06-01 08:56                                 mersennetwister.F90

    164 ! ---------------------------
    165   elemental function temper(y)
    166     integer, intent(in) :: y
    167     integer             :: temper
    168 
    169     integer :: x
    170 
    171 ! Tempering
    172     x      = ieor(y, ishft(y, -11))
    173     x      = ieor(x, iand(ishft(x,  7), TMASKB))
    174     x      = ieor(x, iand(ishft(x, 15), TMASKC))
    175     temper = ieor(x, ishft(x, -18))
    176   end function temper


ENTRY POINTS

  Name                                      
                                            
 mersennetwister_mod_mp_temper_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IAND                       Func   173                                  scalar                    173,174                           
 IEOR                       Func   172                                  scalar                    172,173,174,175                   
 ISHFT                      Func   172                                  scalar                    172,173,174,175                   
 TEMPER                     Func   165      I(4)            4           scalar                    175,266                           
 TMASKB                     Param  173      I(4)            4           scalar                    173                               
 TMASKC                     Param  174      I(4)            4           scalar                    174                               
 X                          Local  169      I(4)            4           scalar                    172,173,174,175                   
 Y                          Dummy  165      I(4)            4           scalar   ARG,IN           172                               

Page 7           Source Listing                  TEMPER
2021-06-01 08:56                                 mersennetwister.F90

    177 ! -------------------------------------------------------------
    178 ! Public (but hidden) functions
    179 ! --------------------
    180   function initialize_scalar(seed) result(twister)
    181     integer,       intent(in   ) :: seed
    182     type(randomNumberSequence)                :: twister
    183 
    184     integer :: i
    185 ! See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. In the previous versions,
    186 !   MSBs of the seed affect only MSBs of the array state[].
    187 !   2002/01/09 modified by Makoto Matsumoto
    188 
    189     twister%state(0) = iand(seed, -1)
    190     do i = 1,  blockSize - 1 ! ubound(twister%state)
    191        twister%state(i) = 1812433253 * ieor(twister%state(i-1), &
    192                                             ishft(twister%state(i-1), -30)) + i
    193        twister%state(i) = iand(twister%state(i), -1) ! for >32 bit machines
    194     end do
    195     twister%currentElement = blockSize
    196   end function initialize_scalar


ENTRY POINTS

  Name                                                 
                                                       
 mersennetwister_mod_mp_initialize_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  184      I(4)            4           scalar                    190,191,192,193                   
 IAND                       Func   189                                  scalar                    189,193                           
 IEOR                       Func   191                                  scalar                    191                               
 INITIALIZE_SCALAR          Func   180      RECORD          2500        scalar   PRIV             205                               
 ISHFT                      Func   192                                  scalar                    192                               
 SEED                       Dummy  180      I(4)            4           scalar   ARG,IN           189                               
 TWISTER                    Local  182      RANDOMNUMBERSEQUENCE                                                                    
                                                            2500        scalar                    189,191,192,193,195               

Page 8           Source Listing                  INITIALIZE_SCALAR
2021-06-01 08:56                                 mersennetwister.F90

    197 ! -------------------------------------------------------------
    198   function initialize_vector(seed) result(twister)
    199     integer, dimension(0:), intent(in) :: seed
    200     type(randomNumberSequence)                      :: twister
    201 
    202     integer :: i, j, k, nFirstLoop, nWraps
    203 
    204     nWraps  = 0
    205     twister = initialize_scalar(19650218)
    206 
    207     nFirstLoop = max(blockSize, size(seed))
    208     do k = 1, nFirstLoop
    209        i = mod(k + nWraps, blockSize)
    210        j = mod(k - 1,      size(seed))
    211        if(i == 0) then
    212          twister%state(i) = twister%state(blockSize - 1)
    213          twister%state(1) = ieor(twister%state(1),                                 &
    214                                  ieor(twister%state(1-1),                          &
    215                                       ishft(twister%state(1-1), -30)) * 1664525) + &
    216                             seed(j) + j ! Non-linear
    217          twister%state(i) = iand(twister%state(i), -1) ! for >32 bit machines
    218          nWraps = nWraps + 1
    219        else
    220          twister%state(i) = ieor(twister%state(i),                                 &
    221                                  ieor(twister%state(i-1),                          &
    222                                       ishft(twister%state(i-1), -30)) * 1664525) + &
    223                             seed(j) + j ! Non-linear
    224          twister%state(i) = iand(twister%state(i), -1) ! for >32 bit machines
    225       end if
    226     end do
    227 
    228 !
    229 ! Walk through the state array, beginning where we left off in the block above
    230 !
    231     do i = mod(nFirstLoop, blockSize) + nWraps + 1, blockSize - 1
    232       twister%state(i) = ieor(twister%state(i),                                 &
    233                               ieor(twister%state(i-1),                          &
    234                                    ishft(twister%state(i-1), -30)) * 1566083941) - i ! Non-linear
    235       twister%state(i) = iand(twister%state(i), -1) ! for >32 bit machines
    236     end do
    237 
    238     twister%state(0) = twister%state(blockSize - 1)
    239 
    240     do i = 1, mod(nFirstLoop, blockSize) + nWraps
    241       twister%state(i) = ieor(twister%state(i),                                 &
    242                               ieor(twister%state(i-1),                          &
    243                                    ishft(twister%state(i-1), -30)) * 1566083941) - i ! Non-linear
    244       twister%state(i) = iand(twister%state(i), -1) ! for >32 bit machines
    245     end do
    246 
    247     twister%state(0) = UMASK
    248     twister%currentElement = blockSize
    249 
    250   end function initialize_vector

Page 9           Source Listing                  INITIALIZE_VECTOR
2021-06-01 08:56 Entry Points                    mersennetwister.F90



ENTRY POINTS

  Name                                                 
                                                       
 mersennetwister_mod_mp_initialize_vector_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  202      I(4)            4           scalar                    209,211,212,217,220,221,222,224,23
                                                                                                  1,232,233,234,235,240,241,242,243,
                                                                                                  244                               
 IAND                       Func   217                                  scalar                    217,224,235,244                   
 IEOR                       Func   213                                  scalar                    213,214,220,221,232,233,241,242   
 INITIALIZE_VECTOR          Func   198      RECORD          2500        scalar   PRIV                                               
 ISHFT                      Func   215                                  scalar                    215,222,234,243                   
 J                          Local  202      I(4)            4           scalar                    210,216,223                       
 K                          Local  202      I(4)            4           scalar                    208,209,210                       
 MAX                        Func   207                                  scalar                    207                               
 MOD                        Func   209                                  scalar                    209,210,231,240                   
 NFIRSTLOOP                 Local  202      I(4)            4           scalar                    207,208,231,240                   
 NWRAPS                     Local  202      I(4)            4           scalar                    204,209,218,231,240               
 SEED                       Dummy  198      I(4)            4     1     1        ARG,IN           207,210,216,223                   
 SIZE                       Func   207                                  scalar                    207,210                           
 TWISTER                    Local  200      RANDOMNUMBERSEQUENCE                                                                    
                                                            2500        scalar                    205,212,213,214,215,217,220,221,22
                                                                                                  2,224,232,233,234,235,238,241,242,
                                                                                                  243,244,247,248                   

Page 10          Source Listing                  INITIALIZE_VECTOR
2021-06-01 08:56                                 mersennetwister.F90

    251 ! -------------------------------------------------------------
    252 ! Public functions
    253 ! --------------------
    254   function getRandomInt(twister)
    255     type(randomNumberSequence), intent(inout) :: twister
    256     integer                      :: getRandomInt
    257 ! Generate a random integer on the interval [0,0xffffffff]
    258 !   Equivalent to genrand_int32 in the C code.
    259 !   Fortran doesn't have a type that's unsigned like C does,
    260 !   so this is integers in the range -2**31 - 2**31
    261 ! All functions for getting random numbers call this one,
    262 !   then manipulate the result
    263 
    264     if(twister%currentElement >= blockSize) call nextState(twister)
    265 
    266     getRandomInt = temper(twister%state(twister%currentElement))
    267     twister%currentElement = twister%currentElement + 1
    268 
    269   end function getRandomInt


ENTRY POINTS

  Name                                            
                                                  
 mersennetwister_mod_mp_getrandomint_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GETRANDOMINT               Func   254      I(4)            4           scalar                                                      
 TWISTER                    Dummy  254      RANDOMNUMBERSEQUENCE                                                                    
                                                            2500        scalar   ARG,INOUT        264,266,267                       

Page 11          Source Listing                  GETRANDOMINT
2021-06-01 08:56                                 mersennetwister.F90

    270 ! --------------------
    271   function getRandomPositiveInt(twister)
    272     type(randomNumberSequence), intent(inout) :: twister
    273     integer                      :: getRandomPositiveInt
    274 ! Generate a random integer on the interval [0,0x7fffffff]
    275 !   or [0,2**31]
    276 !   Equivalent to genrand_int31 in the C code.
    277 
    278 ! Local integers
    279     integer :: localInt
    280 
    281     localInt = getRandomInt(twister)
    282     getRandomPositiveInt = ishft(localInt, -1)
    283 
    284   end function getRandomPositiveInt


ENTRY POINTS

  Name                                                    
                                                          
 mersennetwister_mod_mp_getrandompositiveint_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GETRANDOMINT               Func   281      I(4)            4           scalar                    121,266,281,295                   
 GETRANDOMPOSITIVEINT       Func   271      I(4)            4           scalar                                                      
 ISHFT                      Func   282                                  scalar                    282                               
 LOCALINT                   Local  279      I(4)            4           scalar                    281,282                           
 TWISTER                    Dummy  271      RANDOMNUMBERSEQUENCE                                                                    
                                                            2500        scalar   ARG,INOUT        281                               

Page 12          Source Listing                  GETRANDOMPOSITIVEINT
2021-06-01 08:56                                 mersennetwister.F90

    285 ! --------------------
    286   function getRandomReal(twister)
    287     type(randomNumberSequence), intent(inout) :: twister
    288     double precision             :: getRandomReal
    289 ! Generate a random number on [0,1]
    290 !   Equivalent to genrand_real1 in the C code
    291 !   The result is stored as double precision but has 32 bit resolution
    292 
    293     integer :: localInt
    294 
    295     localInt = getRandomInt(twister)
    296     if(localInt < 0) then
    297       getRandomReal = dble(localInt + 2.0d0**32)/(2.0d0**32 - 1.0d0)
    298     else
    299       getRandomReal = dble(localInt            )/(2.0d0**32 - 1.0d0)
    300     end if
    301   end function getRandomReal


ENTRY POINTS

  Name                                             
                                                   
 mersennetwister_mod_mp_getrandomreal_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DBLE                       Func   297                                  scalar                    297,299                           
 GETRANDOMREAL              Func   286      R(8)            8           scalar                                                      
 LOCALINT                   Local  293      I(4)            4           scalar                    295,296,297,299                   
 TWISTER                    Dummy  286      RANDOMNUMBERSEQUENCE                                                                    
                                                            2500        scalar   ARG,INOUT        295                               

Page 13          Source Listing                  GETRANDOMREAL
2021-06-01 08:56                                 mersennetwister.F90

    302 ! --------------------
    303   subroutine finalize_RandomNumberSequence(twister)
    304     type(randomNumberSequence), intent(inout) :: twister
    305 
    306       twister%currentElement = blockSize
    307       twister%state(:) = 0
    308   end subroutine finalize_RandomNumberSequence


ENTRY POINTS

  Name                                                             
                                                                   
 mersennetwister_mod_mp_finalize_randomnumbersequence_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FINALIZE_RANDOMNUMBERSEQUE                                                                                                         
 NCE                        Subr   303                                                                                              
 TWISTER                    Dummy  303      RANDOMNUMBERSEQUENCE                                                                    
                                                            2500        scalar   ARG,INOUT        306,307                           

Page 14          Source Listing                  FINALIZE_RANDOMNUMBERSEQUENCE
2021-06-01 08:56                                 mersennetwister.F90

    309 ! --------------------
    310 end module MersenneTwister_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FINALIZE_RANDOMNUMBERSEQUE                                                                                                         
 NCE                        Subr   120                                                            120                               
 GETRANDOMINT@0             Local  254      I(4)            4           scalar                                                      
 GETRANDOMPOSITIVEINT@0     Local  271      I(4)            4           scalar                                                      
 GETRANDOMREAL@0            Local  286      R(8)            8           scalar                                                      
 MERSENNETWISTER_MOD        Module 91                                                                                               
 MIXBITS@0                  Local  127      I(4)            4           scalar                                                      
 NEW_RANDOMNUMBERSEQUENCE   Local  115                                  scalar                    120                               
 TEMPER@0                   Local  165      I(4)            4           scalar                                                      
 TWIST@0                    Local  134      I(4)            4           scalar                                                      

Page 15          Source Listing                  FINALIZE_RANDOMNUMBERSEQUENCE
2021-06-01 08:56 Subprograms/Common Blocks       mersennetwister.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FINALIZE_RANDOMNUMBERSEQUE                                                                                                         
 NCE                        Subr   303                                                                                              
 GETRANDOMINT               Func   254      I(4)            4           scalar                                                      
 GETRANDOMPOSITIVEINT       Func   271      I(4)            4           scalar                                                      
 GETRANDOMREAL              Func   286      R(8)            8           scalar                                                      
 INITIALIZE_SCALAR          Func   180      RECORD          2500        scalar   PRIV             205                               
 INITIALIZE_VECTOR          Func   198      RECORD          2500        scalar   PRIV                                               
 MERSENNETWISTER_MOD        Module 91                                                                                               
 MIXBITS                    Func   127      I(4)            4           scalar                    131,141,142                       
 NEXTSTATE                  Subr   145                                                            264                               
 TEMPER                     Func   165      I(4)            4           scalar                    175,266                           
 TWIST                      Func   134      I(4)            4           scalar                    141,142,153,157,160               

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack

Page 16          Source Listing                  FINALIZE_RANDOMNUMBERSEQUENCE
2021-06-01 08:56                                 mersennetwister.F90

       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions

Page 17          Source Listing                  FINALIZE_RANDOMNUMBERSEQUENCE
2021-06-01 08:56                                 mersennetwister.F90

       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : mersennetwister.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
