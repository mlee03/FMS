Page 1           Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55                                 /tmp/ifortZlnKjO.i90

      1 # 1 "interpolator.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 !> \author William Cooke <William.Cooke@noaa.gov>
     22 !!
     23 !! \brief interpolator_mod is a module to interpolate climatology data to model the grid.
     24 !!
     25 !! Modules Included:
     26 !!
     27 !! <table>
     28 !!   <tr>
     29 !!     <th>Module Name</th>
     30 !!     <th>Functions Included</th>
     31 !!   </tr>
     32 !!      <tr>
     33 !!     <td>mpp_mod</td>
     34 !!     <td>mpp_error, FATAL, mpp_pe, mpp_init, mpp_exit, mpp_npes,
     35 !!         WARNING, NOTE, input_nml_file</td>
     36 !!   </tr>
     37 !!      <tr>
     38 !!     <td>mpp_io_mod</td>
     39 !!     <td>mpp_open, mpp_close, mpp_get_times, mpp_get_atts, mpp_get_info,
     40 !!             mpp_read, mpp_get_axes, mpp_get_axis_data, mpp_get_fields,
     41 !!                fieldtype, atttype, axistype, MPP_RDONLY, MPP_NETCDF, MPP_MULTI,
     42 !!             MPP_APPEND, MPP_SINGLE</td>
     43 !!   </tr>
     44 !!      <tr>
     45 !!     <td>mpp_domains_mod</td>
     46 !!     <td>mpp_update_domains, mpp_define_domains, mpp_global_field,
     47 !!             domain2d, mpp_define_layout, mpp_get_compute_domain</td>
     48 !!   </tr>
     49 !!      <tr>
     50 !!     <td>diag_manager_mod</td>
     51 !!     <td>diag_manager_init, get_base_time, register_diag_field,
     52 !!             send_data, diag_axis_init</td>
     53 !!   </tr>
     54 !!   <tr>
     55 !!     <td>fms_mod</td>
     56 !!     <td>open_namelist_file, fms_init, mpp_pe, mpp_root_pe, stdlog,
     57 !!         file_exist, write_version_number, check_nml_error, error_mesg,

Page 2           Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55                                 interpolator.F90

     58 !!         FATAL, NOTE, WARNING, close_file</td>
     59 !!   </tr>
     60 !!      <tr>
     61 !!     <td>horiz_interp_mod</td>
     62 !!     <td>horiz_interp_type, horiz_interp_new, horiz_interp_init,
     63 !!             horiz_interp, horiz_interp_del</td>
     64 !!   </tr>
     65 !!   <tr>
     66 !!     <td>time_manager_mod</td>
     67 !!     <td>time_type, set_time, set_date, get_date, get_calendar_type,
     68 !!             JULIAN, NOLEAP, get_date_julian, set_date_no_leap,
     69 !!             set_date_julian, get_date_no_leap, print_date,
     70 !!             operator(+), operator(-), operator(*), operator(>),
     71 !!             operator(<), decrement_time</td>
     72 !!   </tr>
     73 !!      <tr>
     74 !!     <td>time_interp_mod</td>
     75 !!     <td>time_interp, YEAR</td>
     76 !!   </tr>
     77 !!      <tr>
     78 !!     <td>constants_mod</td>
     79 !!     <td>grav, PI, SECONDS_PER_DAY</td>
     80 !!   </tr>
     81 !! </table>
     82 module interpolator_mod
     83 
     84 use mpp_mod,           only : mpp_error, &
     85                               FATAL,     &
     86                               mpp_pe,    &
     87                               mpp_init,  &
     88                               mpp_exit,  &
     89                               mpp_npes,  &
     90                               WARNING,   &
     91                               NOTE,      &
     92                               input_nml_file
     93 use mpp_io_mod,        only : mpp_open,          &
     94                               mpp_close,         &
     95                               mpp_get_times,     &
     96                               mpp_get_atts,      &
     97                               mpp_get_info,      &
     98                               mpp_read,          &
     99                               mpp_get_axes,      &
    100                               mpp_get_axis_data, &
    101                               mpp_get_fields,    &
    102                               fieldtype,         &
    103                               atttype,           &
    104                               axistype,          &
    105                               MPP_RDONLY,        &
    106                               MPP_NETCDF,        &
    107                               MPP_MULTI,         &
    108                               MPP_APPEND,        &
    109                               MPP_SINGLE
    110 use mpp_domains_mod,   only : mpp_domains_init,      &
    111                               mpp_update_domains,    &
    112                               mpp_define_domains,    &
    113                               mpp_global_field,      &
    114                               domain2d,              &

Page 3           Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55                                 interpolator.F90

    115                               mpp_define_layout,     &
    116                               mpp_get_compute_domain
    117 use diag_manager_mod,  only : diag_manager_init, get_base_time, &
    118                               register_diag_field, send_data, &
    119                               diag_axis_init
    120 use fms_mod,           only : lowercase, write_version_number, &
    121                               fms_init, &
    122                               mpp_root_pe, stdlog, &
    123                               check_nml_error
    124 use fms_mod,           only : fms_io_file_exist => file_exist
    125 use fms2_io_mod,       only : FmsNetcdfFile_t, fms2_io_file_exist => file_exists, dimension_exists, &
    126                               open_file, fms2_io_read_data=>read_data,    &
    127                               variable_exists, get_variable_num_dimensions, &
    128                               get_num_variables, get_dimension_size,   &
    129                               get_variable_units, get_variable_names,  &
    130                               get_time_calendar, close_file,           &
    131                               get_variable_dimension_names, get_variable_sense
    132 
    133 use horiz_interp_mod,  only : horiz_interp_type, &
    134                               horiz_interp_new,  &
    135                               horiz_interp_init, &
    136                               assignment(=), &
    137                               horiz_interp,      &
    138                               horiz_interp_del
    139 use time_manager_mod,  only : time_type,   &
    140                               set_time,    &
    141                               set_date,    &
    142                               get_date,    &
    143                               get_calendar_type, &
    144                               JULIAN, NOLEAP, &
    145                               get_date_julian, set_date_no_leap, &
    146                               set_date_julian, get_date_no_leap, &
    147                               print_date, &
    148                               operator(+), &
    149                               operator(-), &
    150                               operator(*), &
    151                               operator(>), &
    152                               operator(<), &
    153                               assignment(=), &
    154                               decrement_time
    155 use time_interp_mod,   only : time_interp, YEAR
    156 use constants_mod,     only : grav, PI, SECONDS_PER_DAY
    157 
    158 !--------------------------------------------------------------------
    159 
    160 implicit none
    161 private
    162 
    163 !---------------------------------------------------------------------
    164 !-------  interfaces --------
    165 
    166 public interpolator_init, &
    167        interpolator,      &
    168        interpolate_type_eq, &
    169        obtain_interpolator_time_slices, &
    170        unset_interpolator_time_flag, &
    171        interpolator_end,  &

Page 4           Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55                                 interpolator.F90

    172        init_clim_diag,    &
    173        query_interpolator,&
    174        read_data
    175 
    176 !> \page interpolator interpolator Interface
    177 !!
    178 !! ~~~~~~~~~~{.f90}
    179 !! call interpolator (sulfate, model_time, p_half, model_data, name, is, js, clim_units)
    180 !! call interpolator (o3, model_time, p_half, model_data, "ozone", is, js)
    181 !! ~~~~~~~~~~
    182 !!
    183 !! The first option is used to generate sulfate models.
    184 !!
    185 !! The sulfate data is set by
    186 !! ~~~~~~~~~~{.f90}
    187 !! type(interpolate_type), intent(inout) :: sulfate
    188 !! ~~~~~~~~~~
    189 !! The name of the model is set by
    190 !! ~~~~~~~~~~{.f90}
    191 !! character(len=*), intent(in) :: name
    192 !! ~~~~~~~~~~
    193 !! The units used in this model are outputted to
    194 !! ~~~~~~~~~~{.f90}
    195 !! character(len=*), intent(out), optional :: clim_units
    196 !! ~~~~~~~~~~
    197 !!
    198 !! The second option is generate ozone models.
    199 !!
    200 !! The ozone data is set by
    201 !! ~~~~~~~~~~{.f90}
    202 !! type(interpolate_type), intent(inout) :: o3
    203 !! ~~~~~~~~~~
    204 !!
    205 !! Both of these options use the following variables in the model.
    206 !!
    207 !! The time used in the model is set by
    208 !!
    209 !! ~~~~~~~~~~{.f90}
    210 !! type(time_type), intent(in) :: model_time
    211 !! ~~~~~~~~~~
    212 !! The model pressure field is set by
    213 !! ~~~~~~~~~~{.f90}
    214 !! real, intent(in), dimension(:,:,:) :: p_half
    215 !! ~~~~~~~~~~
    216 !!
    217 !! \param [inout] <clim_type> The interpolate type previously defined by a call to interpolator_init
    218 !! \param [in] <field_name> The name of a field that you wish to interpolate
    219 !! \param [in] <Time> The model time that you wish to interpolate to
    220 !! \param [in] <phalf> The half level model pressure field
    221 !! \param [in] <is> Index for the physics window
    222 !! \param [in] <js> Index for the physics window
    223 !! \param [out] <interp_data> The model fields with the interpolated climatology data
    224 !! \param [out] <clim_units> The units of field_name
    225 interface interpolator
    226    module procedure interpolator_4D
    227    module procedure interpolator_3D
    228    module procedure interpolator_2D

Page 5           Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55                                 interpolator.F90

    229    module procedure interpolator_4D_no_time_axis
    230    module procedure interpolator_3D_no_time_axis
    231    module procedure interpolator_2D_no_time_axis
    232 end interface
    233 
    234 !> \page assignment assignment Interface
    235 !!
    236 !! \param [in] <In> No description
    237 !! \param [inout] <Out> No description
    238 interface assignment(=)
    239    module procedure interpolate_type_eq
    240 end interface
    241 
    242 !> \page interp_weighted_scalar interp_weighted_scalar Interface
    243 !!
    244 !! ~~~~~~~~~~{.f90}
    245 !! call interp_weighted_scalar (pclim, phalf(ilon,j,:),hinterp_data(ilon,j,:,:),interp_data(ilon,j,:,:))
    246 !! call interp_weighted_scalar (pclim, phalf(ilon,j,:),hinterp_data(ilon,j,:),interp_data(ilon,j,:))
    247 !! ~~~~~~~~~~
    248 !!
    249 !! \param [in] <grdin> No description
    250 !! \param [in] <grdout> No description
    251 !! \param [in] <datin> No description
    252 !! \param [out] <datout> No description
    253 interface interp_weighted_scalar
    254    module procedure interp_weighted_scalar_1D
    255    module procedure interp_weighted_scalar_2D
    256 end interface interp_weighted_scalar
    257 
    258 !---------------------------------------------------------------------
    259 !----------- version number for this module --------------------------
    260 
    261 ! Include variable "version" to be written to log file.
    262 # 1 "../include/file_version.h" 1 
    263 ! -*-f90-*-
    264 !***********************************************************************
    265 !*                   GNU Lesser General Public License
    266 !*
    267 !* This file is part of the GFDL Flexible Modeling System (FMS).
    268 !*
    269 !* FMS is free software: you can redistribute it and/or modify it under
    270 !* the terms of the GNU Lesser General Public License as published by
    271 !* the Free Software Foundation, either version 3 of the License, or (at
    272 !* your option) any later version.
    273 !*
    274 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    275 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    276 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    277 !* for more details.
    278 !*
    279 !* You should have received a copy of the GNU Lesser General Public
    280 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    281 !***********************************************************************
    282 
    283 # 23
    284 
    285   character(len=*), parameter :: version = 'unknown'

Page 6           Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55                                 ../include/file_version.h

    286 
    287 # 262 "interpolator.F90" 2 
    288 logical            :: module_is_initialized = .false.
    289 logical            :: clim_diag_initialized = .false.
    290 
    291 type, public  :: interpolate_type          !< Redundant climatology data between fields
    292 private
    293 !Redundant data between fields
    294 !All climatology data
    295 real, pointer            :: lat(:) =>NULL()               !< No description
    296 real, pointer            :: lon(:) =>NULL()               !< No description
    297 real, pointer            :: latb(:) =>NULL()          !< No description
    298 real, pointer            :: lonb(:) =>NULL()          !< No description
    299 real, pointer            :: levs(:) =>NULL()          !< No description
    300 real, pointer            :: halflevs(:) =>NULL()     !< No description
    301 type(horiz_interp_type)  :: interph                         !< No description
    302 type(time_type), pointer :: time_slice(:) =>NULL() !< An array of the times within the climatology.
    303 type(FmsNetcdfFile_t)    :: fileobj       ! object that stores opened file information
    304 character(len=64)        :: file_name     !< Climatology filename
    305 integer                  :: TIME_FLAG     !< Linear or seaonal interpolation?
    306 integer                  :: level_type    !< Pressure or Sigma level
    307 integer                  :: is,ie,js,je       !< No description
    308 integer                  :: vertical_indices !< direction of vertical
    309 !! data axis
    310 logical                  :: climatological_year !< Is data for year = 0000?
    311 
    312 !Field specific data  for nfields
    313 character(len=64), pointer :: field_name(:) =>NULL()   !< name of this field
    314 logical,           pointer :: has_level(:) =>NULL()    !< indicate if the variable has level dimension
    315 integer,           pointer :: time_init(:,:) =>NULL()  !< second index is the number of time_slices being kept. 2 or ntime.
    316 integer,           pointer :: mr(:) =>NULL()           !< Flag for conversion of climatology to mixing ratio.
    317 integer,           pointer :: out_of_bounds(:) =>NULL()!< Flag for when surface pressure is out of bounds.
    318 !++lwh
    319 integer,           pointer :: vert_interp(:) =>NULL()  !< Flag for type of vertical interpolation.
    320 !--lwh
    321 real,              pointer :: data(:,:,:,:,:) =>NULL() !< (nlatmod,nlonmod,nlevclim,size(time_init,2),nfields)
    322 
    323 real,              pointer :: pmon_pyear(:,:,:,:) =>NULL()          !< No description
    324 real,              pointer :: pmon_nyear(:,:,:,:) =>NULL()          !< No description
    325 real,              pointer :: nmon_nyear(:,:,:,:) =>NULL()          !< No description
    326 real,              pointer :: nmon_pyear(:,:,:,:) =>NULL()          !< No description
    327 !integer                    :: indexm, indexp, climatology
    328 integer,dimension(:),  pointer :: indexm =>NULL()                    !< No description
    329 integer,dimension(:),  pointer :: indexp =>NULL()                    !< No description
    330 integer,dimension(:),  pointer :: climatology =>NULL()               !< No description
    331 
    332 type(time_type), pointer :: clim_times(:,:) => NULL()               !< No description
    333 logical :: separate_time_vary_calc                                        !< No description
    334 real :: tweight          !< No description
    335 real :: tweight1     !< The time weight between the climatology years
    336 real :: tweight2     !< No description
    337 real :: tweight3     !< The time weight between the month
    338 integer :: itaum     !< No description
    339 integer :: itaup     !< No description
    340 
    341 !< These are fms_io specific
    342 integer                  :: unit          !< Unit number on which file is being read.

Page 7           Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55                                 interpolator.F90

    343 type(fieldtype),   pointer :: field_type(:) =>NULL()   !< NetCDF field type
    344 
    345 end type interpolate_type
    346 
    347 
    348 integer :: ndim          !< No description
    349 integer :: nvar          !< No description
    350 integer :: ntime     !< No description
    351 integer :: nlat          !< No description
    352 integer :: nlatb     !< No description
    353 integer :: nlon          !< No description
    354 integer :: nlonb     !< No description
    355 integer :: nlev          !< No description
    356 integer :: nlevh     !< No description
    357 integer ::          len, ntime_in, num_fields               !< No description
    358 
    359 !< These are fms_io specific
    360 integer :: natt          !< No description
    361 type(axistype), allocatable :: axes(:)                         !< No description
    362 type(axistype),save          :: time_axis                    !< No description
    363 type(fieldtype), allocatable :: varfields(:)               !< No description
    364 
    365 ! pletzer real, allocatable :: time_in(:)
    366 ! sjs real, allocatable :: climdata(:,:,:), climdata2(:,:,:)
    367 
    368 character(len=64) :: name, units                              !< No description
    369 integer           :: sense                                        !< No description
    370 
    371 integer, parameter :: max_diag_fields = 30                    !< No description
    372 
    373 ! flags to indicate direction of vertical axis in  data file
    374 integer, parameter :: INCREASING_DOWNWARD = 1, INCREASING_UPWARD = -1          !< Flags to indicate direction of vertical ax
    374 is in  data file
    375 !++lwh
    376 ! Flags to indicate whether the time interpolation should be linear or some other scheme for seasonal data.
    377 ! NOTIME indicates that data file has no time axis.
    378 integer, parameter :: LINEAR = 1, SEASONAL = 2, BILINEAR = 3, NOTIME = 4     !< Flags to indicate whether the time interpola
    378 tion
    379 !! should be linear or some other scheme for seasonal data.
    380 !! NOTIME indicates that data file has no time axis.
    381 
    382 ! Flags to indicate where climatology pressure levels are pressure or sigma levels
    383 integer, parameter :: PRESSURE = 1, SIGMA = 2          !< Flags to indicate where climatology pressure levels are pressure o
    383 r sigma levels
    384 
    385 ! Flags to indicate whether the climatology units are mixing ratio (kg/kg) or column integral (kg/m2).
    386 ! Vertical interpolation scheme requires mixing ratio at this time.
    387 integer, parameter :: NO_CONV = 1, KG_M2 = 2          !< Flags to indicate whether the climatology units are mixing ratio (k
    387 g/kg) or column integral (kg/m2).
    388 !< Vertical interpolation scheme requires mixing ratio at this time.
    389 
    390 ! Flags to indicate what to do when the model surface pressure exceeds the  climatology surface pressure level.
    391 integer, parameter, public :: CONSTANT = 1, ZERO = 2          !< Flags to indicate what to do when the model surface pressur
    391 e
    392 !< exceeds the  climatology surface pressure level.
    393 
    394 ! Flags to indicate the type of vertical interpolation

Page 8           Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55                                 interpolator.F90

    395 integer, parameter, public :: INTERP_WEIGHTED_P = 10, INTERP_LINEAR_P = 20, INTERP_LOG_P = 30     !< Flags to indicate the t
    395 ype of vertical interpolation
    396 !--lwh
    397 
    398 real, parameter :: TPI = (2.0*PI) ! 4.*acos(0.)
    399 real, parameter :: DTR = TPI/360.
    400 
    401 
    402 
    403 integer :: num_clim_diag = 0                                                       !< No description
    404 character(len=64) :: climo_diag_name(max_diag_fields)                         !< No description
    405 integer :: climo_diag_id(max_diag_fields), hinterp_id(max_diag_fields)     !< No description
    406 real ::  missing_value = -1.e10                                                       !< No description
    407 ! sjs integer :: itaum, itaup
    408 
    409 # 386
    410 
    411 ! 64-bit precision (kind=8)
    412  integer, parameter:: f_p = selected_real_kind(15)     !< 64-bit precision (kind=8)
    413 
    414 
    415 logical :: read_all_on_init = .false.          !< No description
    416 integer :: verbose = 0                              !< No description
    417 logical :: conservative_interp = .true.          !< No description
    418 logical :: retain_cm3_bug = .true.               !< No description
    419 logical :: use_mpp_io = .false. !< Set to true to use mpp_io, otherwise fms2io is used
    420 
    421 namelist /interpolator_nml/    &
    422                              read_all_on_init, verbose, conservative_interp, retain_cm3_bug, use_mpp_io
    423 
    424 contains
    425 
    426 !#####################################################################
    427 !
    428 !---------------------------------------------------------------------
    429 !> \brief interpolator_type_eq receives the variable In and Out as
    430 !!        input and returns Out.
    431 !!
    432 !! \param [in] <In> No description
    433 !! \param [inout] <Out> No description
    434 subroutine interpolate_type_eq (Out, In)
    435 
    436 type(interpolate_type), intent(in) :: In
    437 type(interpolate_type), intent(inout) :: Out
    438 
    439 
    440      if (associated(In%lat))      Out%lat      =>  In%lat
    441      if (associated(In%lon))      Out%lon      =>  In%lon
    442      if (associated(In%latb))     Out%latb     =>  In%latb
    443      if (associated(In%lonb))     Out%lonb     =>  In%lonb
    444      if (associated(In%levs))     Out%levs     =>  In%levs
    445      if (associated(In%halflevs)) Out%halflevs =>  In%halflevs
    446 
    447      Out%interph = In%interph
    448      if (associated(In%time_slice)) Out%time_slice =>  In%time_slice
    449      Out%file_name = In%file_name
    450      Out%time_flag = In%time_flag

Page 9           Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55                                 interpolator.F90

    451      Out%level_type = In%level_type
    452      Out%is = In%is
    453      Out%ie = In%ie
    454      Out%js = In%js
    455      Out%je = In%je
    456      Out%vertical_indices = In%vertical_indices
    457      Out%climatological_year = In%climatological_year
    458      if (associated(In%has_level    )) Out%has_level     =>  In%has_level
    459      if (associated(In%field_name   )) Out%field_name    =>  In%field_name
    460      if (associated(In%time_init    )) Out%time_init     =>  In%time_init
    461      if (associated(In%mr           )) Out%mr            =>  In%mr
    462      if (associated(In%out_of_bounds)) Out%out_of_bounds =>  In%out_of_bounds
    463      if (associated(In%vert_interp  )) Out%vert_interp   =>  In%vert_interp
    464      if (associated(In%data         )) Out%data          =>  In%data
    465      if (associated(In%pmon_pyear   )) Out%pmon_pyear    =>  In%pmon_pyear
    466      if (associated(In%pmon_nyear   )) Out%pmon_nyear    =>  In%pmon_nyear
    467      if (associated(In%nmon_nyear   )) Out%nmon_nyear    =>  In%nmon_nyear
    468      if (associated(In%nmon_pyear   )) Out%nmon_pyear    =>  In%nmon_pyear
    469      if (associated(In%indexm       )) Out%indexm        =>  In%indexm
    470      if (associated(In%indexp       )) Out%indexp        =>  In%indexp
    471      if (associated(In%climatology  )) Out%climatology   =>  In%climatology
    472      if (associated(In%clim_times   )) Out%clim_times    =>  In%clim_times
    473       Out%separate_time_vary_calc = In%separate_time_vary_calc
    474       Out%tweight = In%tweight
    475       Out%tweight1 = In%tweight1
    476       Out%tweight2 = In%tweight2
    477       Out%tweight3 = In%tweight3
    478       Out%itaum = In%itaum
    479       Out%itaup = In%itaup
    480 
    481 !< These are fms_io specific
    482       if(associated(Out%field_type)) Out%field_type => In%field_type
    483       Out%unit = In%unit
    484 
    485 end subroutine interpolate_type_eq

Page 10          Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                                
                                                      
 interpolator_mod_mp_interpolate_type_eq_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   440                                  scalar                    440,441,442,443,444,445,448,458,45
                                                                                                  9,460,461,462,463,464,465,466,467,
                                                                                                  468,469,470,471,472,482           
 HORIZ_INTERP_TYPE_EQ       Subr   447                                           PRIV             447                               
 IN                         Dummy  434      INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,IN           440,441,442,443,444,445,447,448,44
                                                                                                  9,450,451,452,453,454,455,456,457,
                                                                                                  458,459,460,461,462,463,464,465,46
                                                                                                  6,467,468,469,470,471,472,473,474,
                                                                                                  475,476,477,478,479,482,483       
 INTERPOLATE_TYPE           Type   436                      5320        scalar                    345,436,437,512,584,1520,1598,1890
                                                                                                  ,1952,2476,2934,3343,3507,3637,369
                                                                                                  5,3771,3836,3892,3939,4158,4897,49
                                                                                                  60                                
 INTERPOLATE_TYPE_EQ        Subr   434                                                                                              
 OUT                        Dummy  434      INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        440,441,442,443,444,445,447,448,44
                                                                                                  9,450,451,452,453,454,455,456,457,
                                                                                                  458,459,460,461,462,463,464,465,46
                                                                                                  6,467,468,469,470,471,472,473,474,
                                                                                                  475,476,477,478,479,482,483       


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 INTERPOLATE_TYPE.CLIMATOLOGICAL_YEAR                                                                                      ...
                            L(4)            4     3676           scalar   PRIV             457,828,830,901,913,1264,1612,2033 
                                                                                           ,2533,2987,4397,4399,4466,4475,486 
                                                                                           3                                  
 INTERPOLATE_TYPE.CLIMATOLOGY                                                                                              ...
                            I(4)            4     5024     1     1        PTR,PRIV         471,1127,1131,1721,1725,1730,1734, 
                                                                                           1737,1740,1746,1750,1753,1756,1803 
                                                                                           ,2141,2145,2150,2154,2157,2160,216 
                                                                                           6,2170,2173,2176,2224,2649,2653,26 
                                                                                           57,2661,2664,2667,2671,2675,2678,2 
                                                                                           681,2713,3129,3133,3137,3141,3144, 
                                                                                           3147,3151,3155,3158,3161,3193,4730 
                                                                                           ,4734                              
 INTERPOLATE_TYPE.CLIM_TIMES                                                                                               ...
                            RECORD          16    5096     2     1        PTR,PRIV         472,885,888,996,1000,1003,1650,165 
                                                                                           2,1657,2071,2073,2078,2577,2579,25 
                                                                                           84,3057,3059,3064,4450,4453,4551,4 

Page 11          Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           555,4558                           
 INTERPOLATE_TYPE.DATA      R(8)            8     4136     5     1        PTR,PRIV         464,1075,1077,1080,1092,1094,1097, 
                                                                                           1111,1237,1247,1258,1830,1833,1839 
                                                                                           ,1842,1859,1864,2251,2254,2260,226 
                                                                                           3,2280,2285,2302,2304,2743,2746,27 
                                                                                           50,2753,2768,2770,2781,2782,3222,3 
                                                                                           225,3229,3232,3247,3249,3261,3262, 
                                                                                           3393,3540,3668,3715,3716,4682,4684 
                                                                                           ,4687,4698,4700,4703,4717,4836,484 
                                                                                           6,4857                             
 INTERPOLATE_TYPE.FIELD_NAME                                                                                               ...
                            CHAR            64    3680     1     1        PTR,PRIV         459,1134,1165,1209,1236,1246,1257, 
                                                                                           1550,1552,1553,1554,1555,1556,1557 
                                                                                           ,1561,1727,1743,1744,1748,1751,175 
                                                                                           4,1765,1780,1785,1788,1829,1838,18 
                                                                                           39,1842,1858,1863,1864,1960,1963,1 
                                                                                           981,2003,2005,2018,2147,2163,2164, 
                                                                                           2168,2171,2174,2186,2201,2206,2209 
                                                                                           ,2250,2259,2260,2263,2279,2284,228 
                                                                                           5,2300,2309,2331,2349,2352,2402,24 
                                                                                           11,2514,2516,2520,2669,2673,2676,2 
                                                                                           679,2698,2700,2750,2753,2770,2823, 
                                                                                           2966,2968,2974,3149,3153,3156,3159 
                                                                                           ,3178,3180,3229,3232,3249,3276,335 
                                                                                           0,3360,3379,3380,3388,3392,3403,34 
                                                                                           43,3450,3532,3533,3536,3658,3659,3 
                                                                                           664,3712,3904,3943,3944,4735,4766, 
                                                                                           4806                               
 INTERPOLATE_TYPE.FIELD_TYPE                                                                                               ...
                            RECORD          1096  5248     1     1        PTR,PRIV         482,1728,1732,1735,1738,1770,1773, 
                                                                                           1830,1833,1859,2015,2148,2152,2155 
                                                                                           ,2158,2191,2194,2251,2254,2280,265 
                                                                                           5,2659,2662,2665,2694,2696,2743,27 
                                                                                           46,2768,3135,3139,3142,3145,3174,3 
                                                                                           176,3222,3225,3247,3726,4736,4767, 
                                                                                           4807,4835,4845,4856                
 INTERPOLATE_TYPE.FILE_NAME CHAR            64    3584           scalar   PRIV             449,637,1541,1542,1617,1628,1692,1 
                                                                                           704,1716,1985,2038,2049,2113,2125, 
                                                                                           2136,2376,2389,2538,2549,2619,2631 
                                                                                           ,2643,2844,2857,2992,3003,3099,311 
                                                                                           1,3123,3364,3421,3432,3563,3574,42 
                                                                                           15                                 
 INTERPOLATE_TYPE.HALFLEVS  R(8)            8     360      1     1        PTR,PRIV         445,759,760,763,764,767,768,770,77 
                                                                                           2,775,1964,2337,2344,2371,2487,281 
                                                                                           0,2817,2839,3352,3407,3416,3516,35 
                                                                                           52,3558,3708,3916,4320,4321,4325,4 
                                                                                           334,4337,4350,4351,4571,4572,4573, 
                                                                                           4575,4577,4580                     
 INTERPOLATE_TYPE.HAS_LEVEL L(4)            4     3752     1     1        PTR,PRIV         458,1133,1157,1160,1201,1204,3711, 
                                                                                           3784,3847                          
 INTERPOLATE_TYPE.IE        I(4)            4     3660           scalar   PRIV             453,1544,3918                      
 INTERPOLATE_TYPE.INDEXM    I(4)            4     4880     1     1        PTR,PRIV         469,1125,1129,1719,1723,1730,1737, 
                                                                                           1746,1753,1801,2139,2143,2150,2157 
                                                                                           ,2166,2173,2222,2647,2651,2657,266 
                                                                                           4,2671,2678,2711,3127,3131,3137,31 

Page 12          Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           44,3151,3158,3191,4728,4732        
 INTERPOLATE_TYPE.INDEXP    I(4)            4     4952     1     1        PTR,PRIV         470,1126,1130,1720,1724,1734,1740, 
                                                                                           1750,1756,1802,2140,2144,2154,2160 
                                                                                           ,2170,2176,2223,2648,2652,2661,266 
                                                                                           7,2675,2681,2712,3128,3132,3141,31 
                                                                                           47,3155,3161,3192,4729,4733        
 INTERPOLATE_TYPE.INTERPH   HORIZ_INTERP_TYPE                                                                                 
                                            2208  432            scalar   PRIV             447,1013,1037,3709,3804,3867,4626, 
                                                                                           4646,4928,4988                     
 INTERPOLATE_TYPE.IS        I(4)            4     3656           scalar   PRIV             452,1543,3918                      
 INTERPOLATE_TYPE.ITAUM     I(4)            4     5232           scalar   PRIV             478,1638,1816,1819,1823,1832,1841, 
                                                                                           1848,1853,1856,2059,2237,2240,2244 
                                                                                           ,2253,2262,2269,2274,2277,2302,255 
                                                                                           5,2565,2730,2733,2737,2745,2752,27 
                                                                                           58,2763,2766,2781,3011,3045,3209,3 
                                                                                           212,3216,3224,3231,3237,3242,3245, 
                                                                                           3261                               
 INTERPOLATE_TYPE.ITAUP     I(4)            4     5236           scalar   PRIV             479,1639,1817,1820,1823,1835,1844, 
                                                                                           1848,1853,1855,1856,1859,1860,1864 
                                                                                           ,1865,2060,2238,2241,2244,2256,226 
                                                                                           5,2269,2274,2276,2277,2280,2281,22 
                                                                                           85,2286,2304,2556,2566,2731,2734,2 
                                                                                           737,2748,2755,2758,2763,2765,2766, 
                                                                                           2768,2770,2772,2782,3012,3046,3210 
                                                                                           ,3213,3216,3227,3234,3237,3242,324 
                                                                                           4,3245,3247,3249,3251,3262         
 INTERPOLATE_TYPE.JE        I(4)            4     3668           scalar   PRIV             455,1546,3918                      
 INTERPOLATE_TYPE.JS        I(4)            4     3664           scalar   PRIV             454,1545,3918                      
 INTERPOLATE_TYPE.LAT       R(8)            8     0        1     1        PTR,PRIV         440,680,681,702,704,705,706,708,15 
                                                                                           35,1542,3703,3782,3795,3845,3857,4 
                                                                                           250,4251,4254,4607,4614,4616,4617, 
                                                                                           4618,4620,4908,4918,4969,4978      
 INTERPOLATE_TYPE.LATB      R(8)            8     144      1     1        PTR,PRIV         442,695,696,701,704,705,708,1014,1 
                                                                                           038,3705,4272,4273,4276,4607,4612, 
                                                                                           4613,4616,4617,4620,4627,4647      
 INTERPOLATE_TYPE.LEVEL_TYPE                                                                                               ...
                            I(4)            4     3652           scalar   PRIV             451,663,735,740,745,760,765,769,77 
                                                                                           1,2323,2796,3396,3542,4233,4296,43 
                                                                                           22,4347,4352,4574,4576             
 INTERPOLATE_TYPE.LEVS      R(8)            8     288      1     1        PTR,PRIV         444,739,740,743,744,752,753,775,77 
                                                                                           6,1960,2484,2941,3350,3514,3642,37 
                                                                                           07,3783,3796,3797,3845,3858,3859,4 
                                                                                           294,4295,4299,4308,4311,4345,4346, 
                                                                                           4567,4568,4569,4580,4581,4909,4919 
                                                                                           ,4920,4969,4979,4980               
 INTERPOLATE_TYPE.LON       R(8)            8     72       1     1        PTR,PRIV         441,689,690,719,720,721,722,723,73 
                                                                                           0,1529,1534,1541,1978,2503,2955,33 
                                                                                           57,3521,3647,3704,3782,3794,3845,3 
                                                                                           856,4261,4262,4265,4588,4591,4592, 
                                                                                           4593,4594,4595,4602,4908,4917,4969 
                                                                                           ,4977                              
 INTERPOLATE_TYPE.LONB      R(8)            8     216      1     1        PTR,PRIV         443,714,715,720,722,723,727,728,72 
                                                                                           9,1014,1038,3706,4283,4284,4287,45 
                                                                                           88,4590,4592,4594,4595,4599,4600,4 
                                                                                           601,4627,4647                      

Page 13          Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 INTERPOLATE_TYPE.MR        I(4)            4     3920     1     1        PTR,PRIV         461,1135,1166,1210,2333,2413,2806, 
                                                                                           2877,3404,3452,3549,3590,3714,4737 
                                                                                           ,4768,4808                         
 INTERPOLATE_TYPE.NMON_NYEAR                                                                                               ...
                            R(8)            8     4592     4     1        PTR,PRIV         467,1065,1069,1739,1755,2159,2175, 
                                                                                           2317,2666,2680,2790,3146,3160,3270 
                                                                                           ,3721,4672,4676                    
 INTERPOLATE_TYPE.NMON_PYEAR                                                                                               ...
                            R(8)            8     4736     4     1        PTR,PRIV         468,1066,1070,1733,1749,1774,1789, 
                                                                                           2153,2169,2195,2210,2313,2660,2674 
                                                                                           ,2696,2700,2788,3140,3154,3176,318 
                                                                                           0,3268,3722,4673,4677              
 INTERPOLATE_TYPE.OUT_OF_BOUNDS                                                                                            ...
                            I(4)            4     3992     1     1        PTR,PRIV         462,1136,1137,1168,1169,1212,1213, 
                                                                                           1214,1983,2378,2391,2846,2859,3362 
                                                                                           ,3423,3434,3565,3576,4738,4739,477 
                                                                                           1,4772,4773,4810,4811,4812         
 INTERPOLATE_TYPE.PMON_NYEAR                                                                                               ...
                            R(8)            8     4448     4     1        PTR,PRIV         466,1064,1068,1736,1752,2156,2172, 
                                                                                           2315,2663,2677,2789,3143,3157,3269 
                                                                                           ,3720,4671,4675                    
 INTERPOLATE_TYPE.PMON_PYEAR                                                                                               ...
                            R(8)            8     4304     4     1        PTR,PRIV         465,1063,1067,1729,1745,1771,1786, 
                                                                                           2149,2165,2192,2207,2311,2656,2670 
                                                                                           ,2694,2698,2787,3136,3150,3174,317 
                                                                                           8,3267,3718,3719,4670,4674         
 INTERPOLATE_TYPE.SEPARATE_TIME_VARY_CALC                                                                                  ...
                            L(4)            4     5192           scalar   PRIV             473,618,1873,1893,2029,2530,2984,4 
                                                                                           192                                
 INTERPOLATE_TYPE.TIME_FLAG I(4)            4     3648           scalar   PRIV             450,1071,1081,1098,1110,1120,1232, 
                                                                                           1242,1254,1632,1813,2053,2234,2298 
                                                                                           ,2554,2559,2727,2779,3010,3039,320 
                                                                                           6,3259,3729,4678,4688,4704,4716,47 
                                                                                           23,4831,4841,4853                  
 INTERPOLATE_TYPE.TIME_INIT I(4)            4     3824     2     1        PTR,PRIV         460,1121,1123,1128,1766,1767,1775, 
                                                                                           1776,1781,1782,1790,1791,1818,1819 
                                                                                           ,1820,1831,1834,1840,1843,1860,186 
                                                                                           5,2187,2188,2196,2197,2202,2203,22 
                                                                                           11,2212,2239,2240,2241,2252,2255,2 
                                                                                           261,2264,2281,2286,2690,2691,2716, 
                                                                                           2717,2732,2733,2734,2744,2747,2751 
                                                                                           ,2754,2772,3170,3171,3196,3197,321 
                                                                                           1,3212,3213,3223,3226,3230,3233,32 
                                                                                           51,3713,4724,4726,4731             
 INTERPOLATE_TYPE.TIME_SLICE                                                                                               ...
                            RECORD          16    2640     1     1        PTR,PRIV         448,884,887,919,941,954,957,962,97 
                                                                                           5,978,983,996,999,1002,1614,1615,1 
                                                                                           626,1634,1635,1647,1674,1683,1695, 
                                                                                           1696,1707,1708,2035,2036,2047,2055 
                                                                                           ,2056,2068,2095,2104,2116,2117,212 
                                                                                           7,2128,2535,2536,2547,2561,2562,25 
                                                                                           74,2601,2610,2622,2623,2634,2635,2 
                                                                                           989,2990,3001,3041,3042,3054,3081, 
                                                                                           3090,3102,3103,3114,3115,3710,4449 
                                                                                           ,4452,4481,4501,4513,4516,4521,453 

Page 14          Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           2,4535,4540,4551,4554,4557         
 INTERPOLATE_TYPE.TWEIGHT   R(8)            8     5200           scalar   PRIV             474,1615,1622,1626,1809,2036,2043, 
                                                                                           2047,2230,2301,2303,2536,2543,2547 
                                                                                           ,2721,2781,2782,2990,2997,3001,320 
                                                                                           1,3261,3262                        
 INTERPOLATE_TYPE.TWEIGHT1  R(8)            8     5208           scalar   PRIV             475,1699,1701,1807,2120,2122,2228, 
                                                                                           2310,2314,2626,2628,2720,2787,2789 
                                                                                           ,3106,3108,3200,3267,3269          
 INTERPOLATE_TYPE.TWEIGHT2  R(8)            8     5216           scalar   PRIV             476,1711,1713,1808,2131,2133,2229, 
                                                                                           2312,2316,2638,2640,2720,2788,2790 
                                                                                           ,3118,3120,3200,3268,3270          
 INTERPOLATE_TYPE.TWEIGHT3  R(8)            8     5224           scalar   PRIV             477,1687,1689,1809,2108,2110,2230, 
                                                                                           2310,2312,2314,2316,2614,2616,2721 
                                                                                           ,2787,2788,2789,2790,3094,3096,320 
                                                                                           1,3267,3268,3269,3270              
 INTERPOLATE_TYPE.UNIT      I(4)            4     5240           scalar   PRIV             483,3733,4214,4454,4747,4911,4971  
 INTERPOLATE_TYPE.VERTICAL_INDICES                                                                                         ...
                            I(4)            4     3672           scalar   PRIV             456,672,736,740,760,3793,3855,4242 
                                                                                           ,4305,4315,4331,4341,4916,4976     
 INTERPOLATE_TYPE.VERT_INTERP                                                                                              ...
                            I(4)            4     4064     1     1        PTR,PRIV         463,1138,1139,1173,1174,1178,1218, 
                                                                                           1219,1220,1224,1982,2398,2866,3361 
                                                                                           ,3439,3581,4740,4741,4777,4778,477 
                                                                                           9,4783,4816,4817,4818,4822         

Page 15          Source Listing                  INTERPOLATE_TYPE_EQ
2021-06-01 08:55                                 interpolator.F90

    486 
    487 
    488 
    489 
    490 !#######################################################################
    491 !
    492 !---------------------------------------------------------------------
    493 !> \brief interpolator_init receives various data as input in order
    494 !!        to initialize interpolating.
    495 !!
    496 !! \param [inout] <clim_type> An interpolate type containing the necessary file and field
    497 !!                                     data to be passed to the interpolator routine
    498 !! \param [in] <file_name> Climatology filename
    499 !! \param [in] <lonb_mod> The corners of the model grid-box longitudes
    500 !! \param [in] <latb_mod> The corners of the model grid_box latitudes
    501 !! \param [in] <data_names> OPTIONAL: A list of the names of components within the climatology
    502 !!                                               file which you wish to read
    503 !! \param [in] <data_out_of_bounds> A list of the flags that are to be used in determining
    504 !!                                             what to do if the pressure levels in the model go out of
    505 !!                                      bounds from those of the climatology
    506 !! \param [in] <vert_interp> OPTIONAL: Flag to determine type of vertical interpolation
    507 !! \param [out] <clim_units> OPTIONAL: A list of the units for the components listed in data_names
    508 !! \param [out] <single_year_file> OPTIONAL: No description
    509 subroutine interpolator_init( clim_type, file_name, lonb_mod, latb_mod, &
    510                               data_names, data_out_of_bounds,           &
    511                               vert_interp, clim_units, single_year_file)
    512 type(interpolate_type), intent(inout) :: clim_type
    513 character(len=*), intent(in)            :: file_name
    514 real            , intent(in)            :: lonb_mod(:,:), latb_mod(:,:)
    515 character(len=*), intent(in) , optional :: data_names(:)
    516 !++lwh
    517 integer         , intent(in)            :: data_out_of_bounds(:)
    518 integer         , intent(in), optional  :: vert_interp(:)
    519 !--lwh
    520 character(len=*), intent(out), optional :: clim_units(:)
    521 logical,          intent(out), optional :: single_year_file
    522 !
    523 ! INTENT IN
    524 !  file_name  :: Climatology filename
    525 !  lonb_mod   :: The corners of the model grid-box longitudes.
    526 !  latb_mod   :: The corners of the model grid_box latitudes.
    527 !  data_names :: A list of the names of components within the climatology file which you wish to read.
    528 !  data_out_of_bounds :: A list of the flags that are to be used in determining what to do if the pressure levels in the mod
    528 el
    529 !                        go out of bounds from those of the climatology.
    530 !  vert_interp:: Flag to determine type of vertical interpolation
    531 !
    532 ! INTENT OUT
    533 !  clim_type  :: An interpolate type containing the necessary file and field data to be passed to the interpolator routine.
    534 !  clim_units :: A list of the units for the components listed in data_names.
    535 !
    536 integer :: io, ierr
    537 logical :: the_file_exists
    538 
    539 if (.not. module_is_initialized) then
    540   call fms_init
    541   call diag_manager_init

Page 16          Source Listing                  INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

    542   call horiz_interp_init
    543 
    544 !--------------------------------------------------------------------
    545 ! namelist input
    546 !--------------------------------------------------------------------
    547 
    548 the_file_exists = fms2_io_file_exist('input.nml')
    549 
    550 if (the_file_exists) then
    551     read (input_nml_file, nml=interpolator_nml, iostat=io)
    552     ierr = check_nml_error(io,'interpolator_nml')
    553 end if
    554 
    555 !---------------------------------------------------------------------
    556 !    write version number and namelist to logfile.
    557 !---------------------------------------------------------------------
    558 call write_version_number("INTERPOLATOR_MOD", version)
    559 
    560 if (mpp_pe() == mpp_root_pe() ) write (stdlog(), nml=interpolator_nml)
    561 
    562 module_is_initialized = .true.
    563 
    564 endif !> if (module_is_initilized)
    565 
    566 if (use_mpp_io) then
    567    call mpp_error(WARNING, "Interpolator::nml=interpolator_nml " //&
    568            'MPP_IO is no longer supported.  Please remove from namelist')
    569    call mppio_interpolator_init(clim_type, file_name, lonb_mod, latb_mod, &
    570                               data_names, data_out_of_bounds,           &
    571                               vert_interp, clim_units, single_year_file)
    572 else
    573     call fms2io_interpolator_init(clim_type, file_name, lonb_mod, latb_mod, &
    574                               data_names, data_out_of_bounds,           &
    575                               vert_interp, clim_units, single_year_file)
    576 endif
    577 
    578 end subroutine interpolator_init

Page 17          Source Listing                  INTERPOLATOR_INIT
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                              
                                                    
 interpolator_mod_mp_interpolator_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_NML_ERROR            Func   552      I(4)            4           scalar   PRIV             123,552                           
 CLIM_TYPE                  Dummy  509      INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        569,573                           
 CLIM_UNITS                 Dummy  511      CHAR                  1     1        ARG,OUT          571,575                           
 DATA_NAMES                 Dummy  510      CHAR                  1     1        ARG,IN           570,574                           
 DATA_OUT_OF_BOUNDS         Dummy  510      I(4)            4     1     1        ARG,IN           570,574                           
 DIAG_MANAGER_INIT          Subr   541                                           PRIV             117,541                           
 FILE_NAME                  Dummy  509      CHAR                        scalar   ARG,IN           569,573                           
 FMS2_IO_FILE_EXIST         Func   548      L(4)            4           scalar   PRIV             548,627                           
 FMS_INIT                   Subr   540                                           PRIV             121,540                           
 HORIZ_INTERP_INIT          Subr   542                                           PRIV             135,542                           
 IERR                       Local  536      I(4)            4           scalar                    552                               
 INPUT_NML_FILE             Local  551      CHAR                  1     1        ALC,TGT,PRIV     92,551                            
 INTERPOLATOR_INIT          Subr   509                                                                                              
 INTERPOLATOR_NML           Local  551                                  scalar                    551,560                           
 IO                         Local  536      I(4)            4           scalar                    551,552                           
 LATB_MOD                   Dummy  509      R(8)            8     2     1        ARG,IN           569,573                           
 LONB_MOD                   Dummy  509      R(8)            8     2     1        ARG,IN           569,573                           
 MODULE_IS_INITIALIZED      Local  539      L(4)            4           scalar                    288,539,562,1529,1978,2503,2955,33
                                                                                                  57,3521,3647,3740                 
 MPP_ERROR                  Local  567                                  scalar   PRIV             84,567,629,633,678,687,698,801,816
                                                                                                  ,825,840,848,856,863,902,905,1007,
                                                                                                  1018,1145,1149,1170,1175,1181,1187
                                                                                                  ,1191,1215,1221,1227,1278,1286,130
                                                                                                  3,1530,1551,1617,1628,1692,1704,17
                                                                                                  16,1850,1979,1987,2038,2049,2113,2
                                                                                                  125,2136,2271,2374,2387,2423,2504,
                                                                                                  2538,2549,2619,2631,2643,2760,2842
                                                                                                  ,2855,2886,2956,2992,3003,3099,311
                                                                                                  1,3123,3239,3294,3358,3366,3419,34
                                                                                                  30,3462,3522,3561,3572,3600,3648,3
                                                                                                  676,3991,3993,4059,4061,4120,4122,
                                                                                                  4209,4257,4268,4279,4290,4370,4385
                                                                                                  ,4394,4409,4417,4425,4432,4467,447
                                                                                                  0,4589,4608,4630,4751,4755,4774,47
                                                                                                  80,4788,4794,4798,4813,4819       
 MPP_ERROR_BASIC            Subr   567                                           PRIV             567,629,633,678,687,698,801,816,82
                                                                                                  5,840,848,856,863,902,905,1007,101
                                                                                                  8,1145,1149,1170,1175,1181,1187,11
                                                                                                  91,1215,1221,1227,1278,1286,1303,1
                                                                                                  530,1551,1850,1979,1987,2271,2374,
                                                                                                  2387,2423,2504,2760,2842,2855,2886
                                                                                                  ,2956,3239,3294,3358,3366,3419,343
                                                                                                  0,3462,3522,3561,3572,3600,3648,36

Page 18          Source Listing                  INTERPOLATOR_INIT
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  76,3991,3993,4059,4061,4120,4122,4
                                                                                                  209,4257,4268,4279,4290,4370,4385,
                                                                                                  4394,4409,4417,4425,4432,4467,4470
                                                                                                  ,4589,4608,4630,4751,4755,4774,478
                                                                                                  0,4788,4794,4798,4813,4819        
 MPP_PE                     Func   560      I(4)            4           scalar   PRIV             86,560,1164,1208,1984,3363,3699,47
                                                                                                  65,4805                           
 MPP_ROOT_PE                Func   560      I(4)            4           scalar   PRIV             122,560,1984,3363,3699            
 SINGLE_YEAR_FILE           Dummy  511      L(4)            4           scalar   ARG,OUT          571,575                           
 STDLOG                     Func   560      I(4)            4           scalar   PRIV             122,560,3698                      
 THE_FILE_EXISTS            Local  537      L(4)            4           scalar                    548,550                           
 USE_MPP_IO                 Local  566      L(4)            4           scalar                    419,422,566,1726,1764,1828,1857,20
                                                                                                  14,2146,2185,2249,2278,2654,2693,2
                                                                                                  742,2767,3134,3173,3221,3246,3732 
 VERSION                    Param  558      CHAR            7           scalar                    558                               
 VERT_INTERP                Dummy  511      I(4)            4     1     1        ARG,IN           571,575                           
 WARNING                    Param  567      I(4)            4           scalar   PRIV             90,567                            
 WRITE_VERSION_NUMBER       Subr   558                                           PRIV             120,558                           

Page 19          Source Listing                  INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

    579 
    580 subroutine fms2io_interpolator_init(clim_type, file_name, lonb_mod, latb_mod, &
    581                               data_names, data_out_of_bounds,           &
    582                               vert_interp, clim_units, single_year_file)
    583 
    584 type(interpolate_type), intent(inout) :: clim_type
    585 character(len=*), intent(in)            :: file_name
    586 real            , intent(in)            :: lonb_mod(:,:), latb_mod(:,:)
    587 character(len=*), intent(in) , optional :: data_names(:)
    588 !++lwh
    589 integer         , intent(in)            :: data_out_of_bounds(:)
    590 integer         , intent(in), optional  :: vert_interp(:)
    591 !--lwh
    592 character(len=*), intent(out), optional :: clim_units(:)
    593 logical,          intent(out), optional :: single_year_file
    594 
    595 character(len=64)            :: src_file
    596 !++lwh
    597 real                         :: dlat, dlon
    598 !--lwh
    599 type(time_type)              :: base_time
    600 integer                      :: fileday, filemon, fileyr, filehr, filemin,filesec, m,m1
    601 character(len= 20)           :: fileunits
    602 character(len=128)           :: var_dimname(6)
    603 character(len=128), allocatable :: var_names(:)
    604 integer,            allocatable :: var_ndims(:)
    605 integer   :: j, i
    606 logical :: non_monthly
    607 character(len=24) :: file_calendar
    608 character(len=256) :: error_mesg
    609 integer :: model_calendar
    610 integer :: yr, mo, dy, hr, mn, sc
    611 integer :: n
    612 type(time_type) :: Julian_time, Noleap_time
    613 real, allocatable :: time_in(:)
    614 real, allocatable, save :: agrid_mod(:,:,:)
    615 integer :: nx, ny
    616 type(FmsNetcdfFile_t) :: fileobj
    617 
    618 clim_type%separate_time_vary_calc = .false.
    619 
    620 num_fields = 0
    621 
    622 !--------------------------------------------------------------------
    623 ! open source file containing fields to be interpolated
    624 !--------------------------------------------------------------------
    625 src_file = 'INPUT/'//trim(file_name)
    626 
    627 if(fms2_io_file_exist(trim(src_file))) then
    628    if(.not. open_file(clim_type%fileobj, trim(src_file), 'read')) &
    629         call mpp_error(FATAL, 'Interpolator_init: Error in opening file '//trim(src_file))
    630    fileobj = clim_type%fileobj
    631 else
    632 !Climatology file doesn't exist, so exit
    633    call mpp_error(FATAL,'Interpolator_init : Data file '//trim(src_file)//' does not exist')
    634 endif
    635 

Page 20          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

    636 !Find the number of variables (nvar) in this file
    637 clim_type%file_name = trim(file_name)
    638 nvar = get_num_variables(fileobj)
    639 num_fields = nvar
    640 if(present(data_names)) then
    641    num_fields= size(data_names(:))
    642 else
    643    allocate(var_names(nvar), var_ndims(nvar))
    644    call get_variable_names(fileobj, var_names)
    645 !--- loop through all the vars to exclude scalar or 1-D array
    646    do i=1,nvar
    647       var_ndims(i) = get_variable_num_dimensions(fileobj, var_names(i))
    648    enddo
    649    num_fields = count(var_ndims>1)
    650 endif
    651 
    652 ! -------------------------------------------------------------------
    653 ! Allocate space for the number of axes in the data file.
    654 ! -------------------------------------------------------------------
    655 
    656 nlon=0 ! Number of longitudes (center-points) in the climatology.
    657 nlat=0 ! Number of latitudes (center-points) in the climatology.
    658 nlev=0 ! Number of levels (center-points) in the climatology.
    659 nlatb=0 ! Number of longitudes (boundaries) in the climatology.
    660 nlonb=0 ! Number of latitudes (boundaries) in the climatology.
    661 nlevh=0 ! Number of levels (boundaries) in the climatology.
    662 
    663 clim_type%level_type = 0 ! Default value
    664 
    665 !++lwh
    666 ! -------------------------------------------------------------------
    667 ! For 2-D fields, set a default value of nlev=nlevh=1
    668 ! -------------------------------------------------------------------
    669 nlev = 1
    670 nlevh = 1
    671 !--lwh
    672         clim_type%vertical_indices = 0  ! initial value
    673 
    674 !--- get clim_type%lat
    675 if(dimension_exists(fileobj, "lat")) then
    676    call get_dimension_size(fileobj, "lat", nlat)
    677 else
    678    call mpp_error(FATAL,'Interpolator_init : dimension lat does not exist in file '//trim(src_file) )
    679 endif
    680 allocate(clim_type%lat(nlat))
    681 call get_axis_latlon_data(fileobj, 'lat', clim_type%lat)
    682 
    683 !--- get clim_type%lon
    684 if(dimension_exists(fileobj, "lon")) then
    685    call get_dimension_size(fileobj, "lon", nlon)
    686 else
    687    call mpp_error(FATAL,'Interpolator_init : dimension lon does not exist in file '//trim(src_file) )
    688 endif
    689 allocate(clim_type%lon(nlon))
    690 call get_axis_latlon_data(fileobj, 'lon', clim_type%lon)
    691 
    692 !--- get clim_type%latb

Page 21          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

    693 if(dimension_exists(fileobj, "latb")) then
    694    call get_dimension_size(fileobj, "latb", nlatb)
    695    allocate(clim_type%latb(nlatb))
    696    call get_axis_latlon_data(fileobj, 'latb', clim_type%latb)
    697 else
    698    if(nlat == 1) call mpp_error(FATAL,'Interpolator_init : nlat is 1')
    699 ! In the case where only the grid midpoints of the latitudes are defined we force the
    700 ! definition of the boundaries to be half-way between the midpoints.
    701    allocate(clim_type%latb(nlat+1))
    702    dlat = (clim_type%lat(2)-clim_type%lat(1)) * 0.5
    703 !  clim_type%latb(1) = min( 90., max(-90., clim_type%lat(1) - dlat) )
    704    clim_type%latb(1) = min( PI/2., max(-PI/2., clim_type%lat(1) - dlat) )
    705    clim_type%latb(2:nlat) = ( clim_type%lat(1:nlat-1) + clim_type%lat(2:nlat) ) * 0.5
    706    dlat = ( clim_type%lat(nlat) - clim_type%lat(nlat-1) ) * 0.5
    707 !  clim_type%latb(nlat+1) = min( 90., max(-90., clim_type%lat(nlat) + dlat) )
    708    clim_type%latb(nlat+1) = min( PI/2., max(-PI/2., clim_type%lat(nlat) + dlat) )
    709 endif
    710 
    711 !--- get clim_type%lonb
    712 if(dimension_exists(fileobj, "lonb")) then
    713    call get_dimension_size(fileobj, "lonb", nlonb)
    714    allocate(clim_type%lonb(nlonb))
    715    call get_axis_latlon_data(fileobj, 'lonb', clim_type%lonb)
    716 else
    717 ! In the case where only the midpoints of the longitudes are defined we force the definition
    718 ! of the boundaries to be half-way between the midpoints.
    719   if (size(clim_type%lon(:)) /= 1) then
    720     allocate(clim_type%lonb(size(clim_type%lon(:))+1))
    721     dlon = (clim_type%lon(2)-clim_type%lon(1))/2.0
    722     clim_type%lonb(1) = clim_type%lon(1) - dlon
    723     clim_type%lonb(2:) = clim_type%lon(1:) + dlon
    724   else
    725 !! this is the case for zonal mean data, lon = 1, lonb not present
    726 !! in file.
    727     allocate(clim_type%lonb(2))
    728     clim_type%lonb(1) = -360.*dtr
    729     clim_type%lonb(2) = 360.0*dtr
    730     clim_type%lon(1) = 0.0
    731   endif
    732 endif
    733 
    734 !--- get clim_type%levs
    735 clim_type%level_type = 0
    736 clim_type%vertical_indices = 0
    737 if(dimension_exists(fileobj, "pfull")) then
    738    call get_dimension_size(fileobj, "pfull", nlev)
    739    allocate(clim_type%levs(nlev))
    740    call get_axis_level_data(fileobj, 'pfull', clim_type%levs, clim_type%level_type, clim_type%vertical_indices)
    741 else if(dimension_exists(fileobj, "sigma_full")) then
    742    call get_dimension_size(fileobj, "sigma_full", nlev)
    743    allocate(clim_type%levs(nlev))
    744    call fms2_io_read_data(fileobj, "sigma_full", clim_type%levs)
    745    clim_type%level_type = SIGMA
    746 else
    747 ! -------------------------------------------------------------------
    748 ! For 2-D fields, allocate levs and halflevs here
    749 !  code is still needed for case when only halflevs are in data file.

Page 22          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

    750 ! -------------------------------------------------------------------
    751    nlev = 1
    752    allocate( clim_type%levs(nlev) )
    753    clim_type%levs = 0.0
    754 endif
    755 
    756 !--- get clim_type%halflevs
    757 if(dimension_exists(fileobj, "phalf")) then
    758    call get_dimension_size(fileobj, "phalf", nlevh)
    759    allocate(clim_type%halflevs(nlevh))
    760    call get_axis_level_data(fileobj, 'phalf', clim_type%halflevs, clim_type%level_type, clim_type%vertical_indices)
    761 else if(dimension_exists(fileobj, "sigma_half")) then
    762    call get_dimension_size(fileobj, "sigma_half", nlevh)
    763    allocate(clim_type%halflevs(nlevh))
    764    call fms2_io_read_data(fileobj, "sigma_half", clim_type%halflevs)
    765    clim_type%level_type = SIGMA
    766 else
    767    allocate( clim_type%halflevs(nlev+1) )
    768    clim_type%halflevs(1) = 0.0
    769    if (clim_type%level_type == PRESSURE) then
    770       clim_type%halflevs(nlev+1) = 1013.25* 100.0   ! MKS
    771    else if (clim_type%level_type == SIGMA   ) then
    772       clim_type%halflevs(nlev+1) = 1.0
    773    endif
    774       do n=2,nlev
    775          clim_type%halflevs(n) = 0.5*(clim_type%levs(n) + &
    776                                          clim_type%levs(n-1))
    777       end do
    778 endif
    779 
    780 !get time informaiton
    781 if(dimension_exists(fileobj, "time")) then
    782    call get_dimension_size(fileobj, "time", ntime)
    783 
    784    call get_variable_units(fileobj, "time", units)
    785    call get_time_calendar(fileobj, "time", file_calendar)
    786    model_calendar = get_calendar_type()
    787    fileday = 0
    788    filemon = 0
    789    fileyr = 0
    790    filehr = 0
    791    filemin= 0
    792    filesec = 0
    793    select case(units(:3))
    794      case('day')
    795        fileunits = units(12:) !Assuming "days since YYYY-MM-DD HH:MM:SS"
    796        if ( len_trim(fileunits) < 19 ) then
    797          write(error_mesg, '(A49,A,A49,A)' ) &
    798            'Interpolator_init : Incorrect time units in file ', &
    799            trim(file_name), '. Expecting days since YYYY-MM-DD HH:MM:SS, found', &
    800            trim(units)
    801          call mpp_error(FATAL,error_mesg)
    802        endif
    803        read(fileunits(1:4)  , *)  fileyr
    804        read(fileunits(6:7)  , *)  filemon
    805        read(fileunits(9:10) , *)  fileday
    806        read(fileunits(12:13), *)  filehr

Page 23          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

    807        read(fileunits(15:16), *)  filemin
    808        read(fileunits(18:19), *)  filesec
    809      case('mon')
    810        fileunits = units(14:) !Assuming "months since YYYY-MM-DD HH:MM:SS"
    811        if ( len_trim(fileunits) < 19 ) then
    812          write(error_mesg, '(A49,A,A51,A)' ) &
    813            'Interpolator_init : Incorrect time units in file ', &
    814            trim(file_name), '. Expecting months since YYYY-MM-DD HH:MM:SS, found', &
    815            trim(units)
    816          call mpp_error(FATAL,error_mesg)
    817        endif
    818        read(fileunits(1:4)  , *)  fileyr
    819        read(fileunits(6:7)  , *)  filemon
    820        read(fileunits(9:10) , *)  fileday
    821        read(fileunits(12:13), *)  filehr
    822        read(fileunits(15:16), *)  filemin
    823        read(fileunits(18:19), *)  filesec
    824      case default
    825        call mpp_error(FATAL,'Interpolator_init : Time units not recognised in file '//file_name)
    826    end select
    827 
    828    clim_type%climatological_year = (fileyr == 0)
    829 
    830    if (.not. clim_type%climatological_year) then
    831 
    832 !----------------------------------------------------------------------
    833 !    if file date has a non-zero year in the base time, determine that
    834 !    base_time based on the netcdf info.
    835 !----------------------------------------------------------------------
    836       if ( (model_calendar == JULIAN .and.   &
    837            & trim(adjustl(lowercase(file_calendar))) == 'julian')  .or. &
    838            & (model_calendar == NOLEAP .and.   &
    839            & trim(adjustl(lowercase(file_calendar))) == 'noleap') )  then
    840         call mpp_error (NOTE, 'interpolator_mod: Model and file&
    841                   & calendars are the same for file ' //   &
    842                   & trim(file_name) // '; no calendar conversion  &
    843                   &needed')
    844         base_time = set_date (fileyr, filemon, fileday, filehr, &
    845                               filemin,filesec)
    846       else if ( (model_calendar == JULIAN .and.   &
    847            & trim(adjustl(lowercase(file_calendar))) == 'noleap')) then
    848         call mpp_error (NOTE, 'interpolator_mod: Using julian &
    849                           &model calendar and noleap file calendar&
    850                           & for file ' // trim(file_name) //   &
    851                           &'; calendar conversion needed')
    852         base_time = set_date_no_leap (fileyr, filemon, fileday,  &
    853              & filehr, filemin, filesec)
    854       else if ( (model_calendar == NOLEAP .and.   &
    855            & trim(adjustl(lowercase(file_calendar))) == 'julian')) then
    856         call mpp_error (NOTE, 'interpolator_mod: Using noleap &
    857                           &model calendar and julian file calendar&
    858                           & for file ' // trim(file_name) //  &
    859                           &'; calendar conversion needed')
    860         base_time = set_date_julian (fileyr, filemon, fileday,  &
    861              & filehr, filemin, filesec)
    862       else
    863         call mpp_error (FATAL , 'interpolator_mod: Model and file&

Page 24          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

    864              & calendars ( ' // trim(file_calendar) // ' ) differ  &
    865              &for file ' // trim(file_name) // ';  this calendar  &
    866              &conversion not currently available')
    867       endif
    868 
    869    else
    870 
    871 !! if the year is specified as '0000', then the file is intended to
    872 !! apply to all years -- the time variables within the file refer to
    873 !! the displacement from the start of each year to the time of the
    874 !! associated data. Time interpolation is to be done with interface
    875 !! time_interp_list, with the optional argument modtime=YEAR. base_time
    876 !! is set to an arbitrary value here; it's only use will be as a
    877 !! timestamp for optionally generated diagnostics.
    878        base_time = get_base_time ()
    879    endif
    880 
    881 
    882    ntime_in = 1
    883    if (ntime > 0) then
    884       allocate(time_in(ntime), clim_type%time_slice(ntime))
    885       allocate(clim_type%clim_times(12,(ntime+11)/12))
    886       time_in = 0.0
    887       clim_type%time_slice = set_time(0,0) + base_time
    888       clim_type%clim_times = set_time(0,0) + base_time
    889       call fms2_io_read_data(fileobj, "time", time_in)
    890       ntime_in = ntime
    891 ! determine whether the data is a continuous set of monthly values or
    892 ! a series of annual cycles spread throughout the period of data
    893       non_monthly = .false.
    894      do n = 1, ntime-1
    895 !  Assume that the times in the data file correspond to days only.
    896          if (time_in(n+1) > (time_in(n) + 32.)) then
    897            non_monthly = .true.
    898            exit
    899          endif
    900       end do
    901       if (clim_type%climatological_year) then
    902          call mpp_error (NOTE, 'interpolator_mod :'  // &
    903          trim(file_name) // ' is a year-independent climatology file')
    904       else
    905          call mpp_error (NOTE, 'interpolator_mod :' // &
    906            trim(file_name) // ' is a timeseries file')
    907       endif
    908 
    909       do n = 1, ntime
    910 !Assume that the times in the data file correspond to days only.
    911 
    912 
    913          if (clim_type%climatological_year) then
    914 !! RSH NOTE:
    915 !! for this case, do not add base_time. time_slice will be sent to
    916 !! time_interp_list with the optional argument modtime=YEAR, so that
    917 !! the time that is needed in time_slice is the displacement into the
    918 !! year, not the displacement from a base_time.
    919            clim_type%time_slice(n) = &
    920                set_time(INT( ( time_in(n) - INT(time_in(n)) ) * SECONDS_PER_DAY ), &

Page 25          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

    921                               INT(time_in(n)))
    922          else
    923 
    924 !--------------------------------------------------------------------
    925 !    if fileyr /= 0 (i.e., climatological_year=F),
    926 !    then define the times associated with each time-
    927 !    slice. if calendar conversion between data file and model calendar
    928 !    is needed, do it so that data from the file is associated with the
    929 !    same calendar time in the model. here the time_slice needs to
    930 !    include the base_time; values will be generated relative to the
    931 !    "real" time.
    932 !--------------------------------------------------------------------
    933            if ( (model_calendar == JULIAN .and.   &
    934                 & trim(adjustl(lowercase(file_calendar))) == 'julian')  .or. &
    935                 & (model_calendar == NOLEAP .and.   &
    936                 & trim(adjustl(lowercase(file_calendar))) == 'noleap') )  then
    937 
    938 !---------------------------------------------------------------------
    939 !    no calendar conversion needed.
    940 !---------------------------------------------------------------------
    941              clim_type%time_slice(n) = &
    942                 set_time(INT( ( time_in(n) - INT(time_in(n)) ) * SECONDS_PER_DAY ),&
    943                                 INT(time_in(n)))  &
    944                  + base_time
    945 
    946 !---------------------------------------------------------------------
    947 !    convert file times from noleap to julian.
    948 !---------------------------------------------------------------------
    949            else if ( (model_calendar == JULIAN .and.   &
    950                 & trim(adjustl(lowercase(file_calendar))) == 'noleap')) then
    951              Noleap_time = set_time (0, INT(time_in(n))) + base_time
    952              call get_date_no_leap (Noleap_time, yr, mo, dy, hr,  &
    953                                     mn, sc)
    954              clim_type%time_slice(n) = set_date_julian (yr, mo, dy,  &
    955                                                         hr, mn, sc)
    956              if (n == 1) then
    957                call print_date (clim_type%time_slice(1), &
    958                        str= 'for file ' // trim(file_name) // ', the &
    959                              &first time slice is mapped to :')
    960              endif
    961              if (n == ntime) then
    962                call print_date (clim_type%time_slice(ntime), &
    963                         str= 'for file ' // trim(file_name) // ', the &
    964                               &last time slice is mapped to:')
    965              endif
    966 
    967 
    968 !---------------------------------------------------------------------
    969 !    convert file times from julian to noleap.
    970 !---------------------------------------------------------------------
    971            else if ( (model_calendar == NOLEAP .and.   &
    972                 & trim(adjustl(lowercase(file_calendar))) == 'julian')) then
    973              Julian_time = set_time (0, INT(time_in(n))) + base_time
    974              call get_date_julian (Julian_time, yr, mo, dy, hr, mn, sc)
    975              clim_type%time_slice(n) = set_date_no_leap (yr, mo, dy, &
    976                                                          hr, mn, sc)
    977              if (n == 1) then

Page 26          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

    978                call print_date (clim_type%time_slice(1), &
    979                         str= 'for file ' // trim(file_name) // ', the &
    980                               &first time slice is mapped to :')
    981              endif
    982              if (n == ntime) then
    983                call print_date (clim_type%time_slice(ntime), &
    984                         str= 'for file ' // trim(file_name) // ', the &
    985                               &last time slice is mapped to:')
    986              endif
    987 
    988 !---------------------------------------------------------------------
    989 !    any other calendar combinations would have caused a fatal error
    990 !    above.
    991 !---------------------------------------------------------------------
    992            endif
    993          endif
    994 
    995          m = (n-1)/12 +1 ; m1 = n- (m-1)*12
    996          clim_type%clim_times(m1,m) = clim_type%time_slice(n)
    997       enddo
    998    else
    999       allocate(time_in(1), clim_type%time_slice(1))
   1000       allocate(clim_type%clim_times(1,1))
   1001       time_in = 0.0
   1002       clim_type%time_slice = set_time(0,0) + base_time
   1003       clim_type%clim_times(1,1) = set_time(0,0) + base_time
   1004    endif
   1005    deallocate(time_in)
   1006 else
   1007    call mpp_error(FATAL, 'Interpolator_init: time axis does not exist in file '//trim(src_file))
   1008 endif
   1009 
   1010 !Assume that the horizontal interpolation within a file is the same for each variable.
   1011 
   1012  if (conservative_interp) then
   1013     call horiz_interp_new (clim_type%interph, &
   1014                         clim_type%lonb, clim_type%latb, &
   1015                         lonb_mod, latb_mod)
   1016  else
   1017 
   1018     call mpp_error(NOTE, "Using Bilinear interpolation")
   1019 
   1020 !!! DEBUG CODE
   1021     if (.not. allocated(agrid_mod)) then
   1022        nx = size(lonb_mod,1)-1
   1023        ny = size(latb_mod,2)-1
   1024        allocate(agrid_mod(nx,ny,2))
   1025        do j=1,ny
   1026        do i=1,nx
   1027           call cell_center2((/lonb_mod(i,j),latb_mod(i,j)/), &
   1028                (/lonb_mod(i+1,j),latb_mod(i+1,j)/), &
   1029                (/lonb_mod(i,j+1),latb_mod(i,j+1)/), &
   1030                (/lonb_mod(i+1,j+1),latb_mod(i+1,j+1)/),  agrid_mod(i,j,:))
   1031        enddo
   1032        enddo
   1033     endif
   1034 

Page 27          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   1035 !!! END DEBUG CODE
   1036 
   1037     call horiz_interp_new (clim_type%interph, &
   1038                         clim_type%lonb, clim_type%latb, &
   1039                         agrid_mod(:,:,1), agrid_mod(:,:,2), interp_method="bilinear")
   1040  endif
   1041 
   1042 !--------------------------------------------------------------------
   1043 !  allocate the variable clim_type%data . This will be the climatology
   1044 !  data horizontally interpolated, so it will be on the model horizontal
   1045 !  grid, but it will still be on the climatology vertical grid.
   1046 !--------------------------------------------------------------------
   1047 
   1048 select case(ntime)
   1049  case (13:)
   1050 ! This may  be data that does not have a continous time-line
   1051 ! i.e. IPCC data where decadal data is present but we wish to retain
   1052 ! the seasonal nature of the data.
   1053 !! RSH: the following test will not always work; instead use the
   1054 !! RSH: non-monthly variable to test on.
   1055 !RSHlast_time = clim_type%time_slice(1) + ( ntime -1 ) * &
   1056 !RSH        ( clim_type%time_slice(2) - clim_type%time_slice(1) )
   1057 
   1058 !RSHif ( last_time < clim_type%time_slice(ntime)) then
   1059 
   1060  if (non_monthly) then
   1061 ! We have a broken time-line. e.g. We have monthly data but only for years ending in 0. 1960,1970 etc.
   1062 !   allocate(clim_type%data(size(lonb_mod(:))-1, size(latb_mod(:))-1, nlev, 2, num_fields))
   1063    allocate(clim_type%pmon_pyear(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, num_fields))
   1064    allocate(clim_type%pmon_nyear(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, num_fields))
   1065    allocate(clim_type%nmon_nyear(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, num_fields))
   1066    allocate(clim_type%nmon_pyear(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, num_fields))
   1067    clim_type%pmon_pyear = 0.0
   1068    clim_type%pmon_nyear = 0.0
   1069    clim_type%nmon_nyear = 0.0
   1070    clim_type%nmon_pyear = 0.0
   1071    clim_type%TIME_FLAG = BILINEAR
   1072 else
   1073 ! We have a continuous time-line so treat as for 5-12 timelevels as below.
   1074    if ( .not. read_all_on_init) then
   1075    allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, 2, num_fields))
   1076    else
   1077    allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, &
   1078                ntime, num_fields))
   1079    endif
   1080    clim_type%data = 0.0
   1081    clim_type%TIME_FLAG = LINEAR
   1082 endif
   1083 
   1084 
   1085 !++lwh
   1086  case (1:12)
   1087 !--lwh
   1088 ! We have more than 4 timelevels
   1089 ! Assume we have monthly or higher time resolution datasets (climatology or time series)
   1090 ! So we only need to read 2 datasets and apply linear temporal interpolation.
   1091    if ( .not. read_all_on_init) then

Page 28          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   1092    allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, 2, num_fields))
   1093    else
   1094    allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, &
   1095                ntime, num_fields))
   1096    endif
   1097    clim_type%data = 0.0
   1098    clim_type%TIME_FLAG = LINEAR
   1099 !++lwh
   1100 !case (1:4)
   1101 ! Assume we have seasonal data and read in all the data.
   1102 ! We can apply sine curves to these data.
   1103 
   1104 !  allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, ntime, num_fields))
   1105 !  clim_type%data = 0.0
   1106 !  clim_type%TIME_FLAG = SEASONAL
   1107 !--lwh
   1108 ! case (default)
   1109  case(:0)
   1110    clim_type%TIME_FLAG = NOTIME
   1111    allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, 1, num_fields))
   1112 end select
   1113 
   1114 
   1115 !------------------------------------------------------------------
   1116 !    Allocate space for the single time level of the climatology on its
   1117 !    grid size.
   1118 !----------------------------------------------------------------------
   1119 
   1120    if(clim_type%TIME_FLAG .eq. LINEAR ) then
   1121    allocate(clim_type%time_init(num_fields,2))
   1122    else
   1123    allocate(clim_type%time_init(num_fields,ntime))
   1124    endif
   1125    allocate (clim_type%indexm(num_fields),   &
   1126              clim_type%indexp(num_fields),   &
   1127              clim_type%climatology(num_fields))
   1128    clim_type%time_init(:,:) = 0
   1129    clim_type%indexm(:)      = 0
   1130    clim_type%indexp(:)      = 0
   1131    clim_type%climatology(:) = 0
   1132 
   1133 allocate(clim_type%has_level(num_fields))
   1134 allocate(clim_type%field_name(num_fields))
   1135 allocate(clim_type%mr(num_fields))
   1136 allocate(clim_type%out_of_bounds(num_fields))
   1137 clim_type%out_of_bounds(:)=0
   1138 allocate(clim_type%vert_interp(num_fields))
   1139 clim_type%vert_interp(:)=0
   1140 
   1141 if(present(data_names)) then
   1142 
   1143 !++lwh
   1144    if ( size(data_out_of_bounds(:)) /= size(data_names(:)) .and. size(data_out_of_bounds(:)) /= 1 ) &
   1145       call mpp_error(FATAL,'interpolator_init : The size of the data_out_of_bounds array must be 1&
   1146                             & or size(data_names)')
   1147    if (present(vert_interp)) then
   1148       if( size(vert_interp(:)) /= size(data_names(:)) .and. size(vert_interp(:)) /= 1 ) &

Page 29          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   1149       call mpp_error(FATAL,'interpolator_init : The size of the vert_interp array must be 1&
   1150                             & or size(data_names)')
   1151    endif
   1152 ! Only read the fields named in data_names
   1153    do j=1,size(data_names(:))
   1154       if(variable_exists(fileobj, data_names(j)) ) then
   1155          call get_variable_units(fileobj, data_names(j), units)
   1156          ndim = get_variable_num_dimensions(fileobj, data_names(j))
   1157          clim_type%has_level(j) = .false.
   1158          if(ndim > 2) then
   1159             call get_variable_dimension_names(fileobj, data_names(j), var_dimname(1:ndim))
   1160             if(trim(var_dimname(3)) == "pfull" .OR. trim(var_dimname(3)) == "sigma_full") clim_type%has_level(j) = .true.
   1161          endif
   1162 
   1163          units=chomp(units)
   1164          if (mpp_pe() == 0 ) write(*,*) 'Initializing src field : ',trim(data_names(j))
   1165          clim_type%field_name(j) = data_names(j)
   1166          clim_type%mr(j)         = check_climo_units(units)
   1167          if (present(clim_units)) clim_units(j) = units
   1168          clim_type%out_of_bounds(j) = data_out_of_bounds( MIN(j,SIZE(data_out_of_bounds(:))) )
   1169          if( clim_type%out_of_bounds(j) /= CONSTANT .and. clim_type%out_of_bounds(j) /= ZERO ) &
   1170              call mpp_error(FATAL,"Interpolator_init: data_out_of_bounds must be&
   1171                                     & set to ZERO or CONSTANT")
   1172          if( present(vert_interp) ) then
   1173             clim_type%vert_interp(j) = vert_interp( MIN(j,SIZE(vert_interp(:))) )
   1174             if( clim_type%vert_interp(j) /= INTERP_WEIGHTED_P .and. clim_type%vert_interp(j) /= INTERP_LINEAR_P ) &
   1175                call mpp_error(FATAL,"Interpolator_init: vert_interp must be&
   1176                                     & set to INTERP_WEIGHTED_P or INTERP_LINEAR_P")
   1177          else
   1178             clim_type%vert_interp(j) = INTERP_WEIGHTED_P
   1179          end if
   1180       else
   1181          call mpp_error(FATAL,'interpolator_init : Check names of fields being passed. ' &
   1182                               //trim(data_names(j))//' does not exist.')
   1183       endif
   1184    enddo
   1185 else
   1186    if ( size(data_out_of_bounds(:)) /= nvar .and. size(data_out_of_bounds(:)) /= 1 ) &
   1187       call mpp_error(FATAL,'interpolator_init : The size of the out of bounds array must be 1&
   1188                            & or the number of fields in the climatology dataset')
   1189    if ( present(vert_interp) ) then
   1190       if (size(vert_interp(:)) /= nvar .and. size(vert_interp(:)) /= 1 ) &
   1191       call mpp_error(FATAL,'interpolator_init : The size of the vert_interp array must be 1&
   1192                            & or the number of fields in the climatology dataset')
   1193    endif
   1194 
   1195 ! Read all the fields within the climatology data file.
   1196    j = 0
   1197    do i=1,nvar
   1198       ndim = var_ndims(i)
   1199       if(ndim .LE. 1) cycle
   1200       j = j + 1
   1201       clim_type%has_level(j) = .false.
   1202       if(ndim > 2) then
   1203          call get_variable_dimension_names(fileobj, var_names(i), var_dimname(1:ndim))
   1204          if(trim(var_dimname(3)) == "pfull" .OR. trim(var_dimname(3)) == "sigma_full") clim_type%has_level(j) = .true.
   1205       endif

Page 30          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   1206 
   1207       call get_variable_units(fileobj, var_names(i), units)
   1208       if (mpp_pe() ==0 ) write(*,*) 'Initializing src field : ',trim(var_names(i))
   1209       clim_type%field_name(j) = trim(var_names(i))
   1210       clim_type%mr(j)         = check_climo_units(units)
   1211       if (present(clim_units)) clim_units(j) = units
   1212       clim_type%out_of_bounds(j) = data_out_of_bounds( MIN(i,SIZE(data_out_of_bounds(:))) )
   1213       if( clim_type%out_of_bounds(j) /= CONSTANT .and. &
   1214           clim_type%out_of_bounds(j) /= ZERO ) &
   1215          call mpp_error(FATAL,"Interpolator_init: data_out_of_bounds must be&
   1216                               & set to ZERO or CONSTANT")
   1217       if( present(vert_interp) ) then
   1218          clim_type%vert_interp(j) = vert_interp( MIN(i,SIZE(vert_interp(:))) )
   1219          if( clim_type%vert_interp(j) /= INTERP_WEIGHTED_P .and. &
   1220              clim_type%vert_interp(j) /= INTERP_LINEAR_P ) &
   1221             call mpp_error(FATAL,"Interpolator_init: vert_interp must be&
   1222                                  & set to INTERP_WEIGHTED_P or INTERP_LINEAR_P")
   1223       else
   1224          clim_type%vert_interp(j) = INTERP_WEIGHTED_P
   1225       end if
   1226    end do
   1227    if(j .NE. num_fields) call mpp_error(FATAL,"Interpolator_init: j does not equal to num_fields")
   1228    deallocate(var_names, var_ndims)
   1229 !--lwh
   1230 endif
   1231 
   1232 if( clim_type%TIME_FLAG .eq. SEASONAL ) then
   1233 ! Read all the data at this point.
   1234    do i=1,num_fields
   1235       do n = 1, ntime
   1236          call read_data( clim_type, clim_type%field_name(i), &
   1237                          clim_type%data(:,:,:,n,i), n, i, base_time )
   1238       enddo
   1239    enddo
   1240 endif
   1241 
   1242 if( clim_type%TIME_FLAG .eq. LINEAR  .and. read_all_on_init) then
   1243 ! Read all the data at this point.
   1244    do i=1,num_fields
   1245       do n = 1, ntime
   1246          call read_data( clim_type, clim_type%field_name(i), &
   1247                          clim_type%data(:,:,:,n,i), n, i, base_time )
   1248       enddo
   1249    enddo
   1250 
   1251    call close_file (fileobj)
   1252 endif
   1253 
   1254 if( clim_type%TIME_FLAG .eq. NOTIME ) then
   1255 ! Read all the data at this point.
   1256    do i=1,num_fields
   1257      call read_data_no_time_axis( clim_type, clim_type%field_name(i), &
   1258                                   clim_type%data(:,:,:,1,i), i )
   1259    enddo
   1260    call close_file (fileobj)
   1261 endif
   1262 

Page 31          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   1263 if (present (single_year_file)) then
   1264   single_year_file = clim_type%climatological_year
   1265 endif
   1266 
   1267 end subroutine fms2io_interpolator_init


ENTRY POINTS

  Name                                                     
                                                           
 interpolator_mod_mp_fms2io_interpolator_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   837                                  scalar                    837,839,847,855,934,936,950,972   
 AGRID_MOD                  Local  614      R(8)            8     3     1        ALC,SAVE         1021,1024,1030,1039               
 ALLOCATED                  Func   1021                                 scalar                    1021                              
 BASE_TIME                  Local  599      TIME_TYPE       16          scalar                    844,852,860,878,887,888,944,951,97
                                                                                                  3,1002,1003,1237,1247             
 BILINEAR                   Param  1071     I(4)            4           scalar                    1071,1632,2053,2308,2559,2785,3039
                                                                                                  ,3265,4678                        
 CHECK_CLIMO_UNITS@0        Local  1166     I(4)            4           scalar                                                      
 CHOMP@0                    Local  1163     CHAR            64          scalar                                                      
 CLIM_TYPE                  Dummy  580      INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        618,628,630,637,663,672,680,681,68
                                                                                                  9,690,695,696,701,702,704,705,706,
                                                                                                  708,714,715,719,720,721,722,723,72
                                                                                                  7,728,729,730,735,736,739,740,743,
                                                                                                  744,745,752,753,759,760,763,764,76
                                                                                                  5,767,768,769,770,771,772,775,776,
                                                                                                  828,830,884,885,887,888,901,913,91
                                                                                                  9,941,954,957,962,975,978,983,996,
                                                                                                  999,1000,1002,1003,1013,1014,1037,
                                                                                                  1038,1063,1064,1065,1066,1067,1068
                                                                                                  ,1069,1070,1071,1075,1077,1080,108
                                                                                                  1,1092,1094,1097,1098,1110,1111,11
                                                                                                  20,1121,1123,1125,1126,1127,1128,1
                                                                                                  129,1130,1131,1133,1134,1135,1136,
                                                                                                  1137,1138,1139,1157,1160,1165,1166
                                                                                                  ,1168,1169,1173,1174,1178,1201,120
                                                                                                  4,1209,1210,1212,1213,1214,1218,12
                                                                                                  19,1220,1224,1232,1236,1237,1242,1
                                                                                                  246,1247,1254,1257,1258,1264      
 CLIM_UNITS                 Dummy  582      CHAR                  1     1        ARG,OUT          1167,1211                         
 CLOSE_FILE                 Local  1251                                 scalar   PRIV             130,1251,1260,3735                
 COMPRESSED_READ_1D         Subr   744                                           PRIV             744,764,889,1276,1301             
 CONSERVATIVE_INTERP        Local  1012     L(4)            4           scalar                    417,422,1012,4625                 
 CONSTANT                   Param  1169     I(4)            4           scalar                    391,1169,1213,2379,2392,2847,2860,
                                                                                                  3424,3435,3566,3577,4772,4811     
 COUNT                      Func   649                                  scalar                    649                               
 DATA_NAMES                 Dummy  581      CHAR                  1     1        ARG,IN           640,641,1141,1144,1148,1153,1154,1
                                                                                                  155,1156,1159,1164,1165,1182      
 DATA_OUT_OF_BOUNDS         Dummy  581      I(4)            4     1     1        ARG,IN           1144,1168,1186,1212               

Page 32          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIMENSION_EXISTS           Func   675      L(4)            4           scalar   PRIV             125,675,684,693,712,737,741,757,76
                                                                                                  1,781                             
 DLAT                       Local  597      R(8)            8           scalar                    702,704,706,708                   
 DLON                       Local  597      R(8)            8           scalar                    721,722,723                       
 DTR                        Param  728      R(8)            8           scalar                    728,729,1283                      
 DY                         Local  610      I(4)            4           scalar                    952,954,974,975                   
 ERROR_MESG                 Local  608      CHAR            256         scalar                    797,801,812,816                   
 FATAL                      Param  629      I(4)            4           scalar   PRIV             85,629,633,678,687,698,801,816,825
                                                                                                  ,863,1007,1145,1149,1170,1175,1181
                                                                                                  ,1187,1191,1215,1221,1227,1278,128
                                                                                                  6,1303,1530,1551,1617,1628,1692,17
                                                                                                  04,1716,1850,1979,1987,2038,2049,2
                                                                                                  113,2125,2136,2271,2423,2504,2538,
                                                                                                  2549,2619,2631,2643,2760,2886,2956
                                                                                                  ,2992,3003,3099,3111,3123,3239,329
                                                                                                  4,3358,3366,3462,3522,3600,3648,36
                                                                                                  76,3991,3993,4059,4061,4120,4122,4
                                                                                                  209,4257,4268,4279,4290,4370,4385,
                                                                                                  4394,4432,4589,4608,4751,4755,4774
                                                                                                  ,4780,4788,4794,4798,4813,4819    
 FILEDAY                    Local  600      I(4)            4           scalar                    787,805,820,844,852,860           
 FILEHR                     Local  600      I(4)            4           scalar                    790,806,821,844,853,861           
 FILEMIN                    Local  600      I(4)            4           scalar                    791,807,822,845,853,861           
 FILEMON                    Local  600      I(4)            4           scalar                    788,804,819,844,852,860           
 FILEOBJ                    Local  616      FMSNETCDFFILE_T 872         scalar                    630,638,644,647,675,676,681,684,68
                                                                                                  5,690,693,694,696,712,713,715,737,
                                                                                                  738,740,741,742,744,757,758,760,76
                                                                                                  1,762,764,781,782,784,785,889,1154
                                                                                                  ,1155,1156,1159,1203,1207,1251,126
                                                                                                  0                                 
 FILESEC                    Local  600      I(4)            4           scalar                    792,808,823,845,853,861           
 FILEUNITS                  Local  601      CHAR            20          scalar                    795,796,803,804,805,806,807,808,81
                                                                                                  0,811,818,819,820,821,822,823     
 FILEYR                     Local  600      I(4)            4           scalar                    789,803,818,828,844,852,860       
 FILE_CALENDAR              Local  607      CHAR            24          scalar                    785,837,839,847,855,864,934,936,95
                                                                                                  0,972                             
 FILE_NAME                  Dummy  580      CHAR                        scalar   ARG,IN           625,637,799,814,825,842,850,858,86
                                                                                                  5,903,906,958,963,979,984         
 FMS2IO_INTERPOLATOR_INIT   Subr   580                                                            573                               
 FMS2_IO_READ_DATA          Local  744                                  scalar   PRIV             744,764,889,1276,1301,3785,3787,38
                                                                                                  48,3850                           
 FMSNETCDFFILE_T            Type   616                                  scalar                    125,303,616,1270,1293             
 GET_BASE_TIME              Func   878      RECORD          16          scalar   PRIV             117,878,4445                      
 GET_CALENDAR_TYPE          Func   786      I(4)            4           scalar   PRIV             143,786,4355                      
 GET_DATE_JULIAN            Subr   974                                           PRIV             145,974,4531                      
 GET_DATE_NO_LEAP           Subr   952                                           PRIV             146,952,4511                      
 GET_DIMENSION_SIZE         Subr   676                                           PRIV             128,676,685,694,713,738,742,758,76
                                                                                                  2,782                             
 GET_NUM_VARIABLES          Func   638      I(4)            4           scalar   PRIV             128,638                           
 GET_TIME_CALENDAR          Subr   785                                           PRIV             130,785                           
 GET_VARIABLE_DIMENSION_NAM                                                                                                         
 ES                         Subr   1159                                          PRIV             131,1159,1203                     
 GET_VARIABLE_NAMES         Subr   644                                           PRIV             129,644                           
 GET_VARIABLE_NUM_DIMENSION                                                                                                         
 S                          Func   647      I(4)            4           scalar   PRIV             127,647,1156                      

Page 33          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_VARIABLE_UNITS         Subr   784                                           PRIV             129,784,1155,1207,1280,1305,2018,2
                                                                                                  520,2974,3388,3536,3664           
 HORIZ_INTERP_NEW           Local  1013                                 scalar   PRIV             134,1013,1037,4626,4646           
 HORIZ_INTERP_NEW_1D_SRC    Subr   1013                                          PRIV             1013,1037,4626,4646               
 HR                         Local  610      I(4)            4           scalar                    952,955,974,976                   
 I                          Local  605      I(4)            4           scalar                    646,647,1026,1027,1028,1029,1030,1
                                                                                                  197,1198,1203,1207,1208,1209,1212,
                                                                                                  1218,1234,1236,1237,1244,1246,1247
                                                                                                  ,1256,1257,1258                   
 INT                        Func   920                                  scalar                    920,921,942,943,951,973           
 INTERP_LINEAR_P            Param  1174     I(4)            4           scalar                    395,1174,1220,2401,2869,3442,3584,
                                                                                                  4779,4818                         
 INTERP_WEIGHTED_P          Param  1174     I(4)            4           scalar                    395,1174,1178,1219,1224,2399,2867,
                                                                                                  3440,3582,4778,4783,4817,4822     
 J                          Local  605      I(4)            4           scalar                    1025,1027,1028,1029,1030,1153,1154
                                                                                                  ,1155,1156,1157,1159,1160,1164,116
                                                                                                  5,1166,1167,1168,1169,1173,1174,11
                                                                                                  78,1182,1196,1200,1201,1204,1209,1
                                                                                                  210,1211,1212,1213,1214,1218,1219,
                                                                                                  1220,1224,1227                    
 JULIAN                     Param  836      I(4)            4           scalar   PRIV             144,836,846,933,949,4405,4415,4494
                                                                                                  ,4508                             
 JULIAN_TIME                Local  612      TIME_TYPE       16          scalar                    973,974                           
 LATB_MOD                   Dummy  580      R(8)            8     2     1        ARG,IN           1015,1023,1027,1028,1029,1030,1063
                                                                                                  ,1064,1065,1066,1075,1077,1092,109
                                                                                                  4,1111                            
 LEN_TRIM                   Func   796                                  scalar                    796,811                           
 LINEAR                     Param  1081     I(4)            4           scalar                    1081,1098,1120,1242,1813,2234,2299
                                                                                                  ,2554,2727,2780,3010,3206,3260,372
                                                                                                  9,4688,4704,4723,4841             
 LONB_MOD                   Dummy  580      R(8)            8     2     1        ARG,IN           1015,1022,1027,1028,1029,1030,1063
                                                                                                  ,1064,1065,1066,1075,1077,1092,109
                                                                                                  4,1111                            
 LOWERCASE                  Func   837      CHAR                        scalar   TGT,PRIV         120,837,839,847,855,934,936,950,97
                                                                                                  2,1308,2005,2352,2516,2823,2968,32
                                                                                                  76,3380,3533,3659,3904,4298,4324,4
                                                                                                  406,4408,4416,4424,4495,4497,4509,
                                                                                                  4529,4763,4806                    
 M                          Local  600      I(4)            4           scalar                    995,996                           
 M1                         Local  600      I(4)            4           scalar                    995,996                           
 MAX                        Func   704                                  scalar                    704,708                           
 MIN                        Func   704                                  scalar                    704,708,1168,1173,1212,1218       
 MN                         Local  610      I(4)            4           scalar                    953,955,974,976                   
 MO                         Local  610      I(4)            4           scalar                    952,954,974,975                   
 MODEL_CALENDAR             Local  609      I(4)            4           scalar                    786,836,838,846,854,933,935,949,97
                                                                                                  1                                 
 N                          Local  611      I(4)            4           scalar                    774,775,776,894,896,909,919,920,92
                                                                                                  1,941,942,943,951,954,956,961,973,
                                                                                                  975,977,982,995,996,1235,1237,1245
                                                                                                  ,1247                             
 NDIM                       Local  1156     I(4)            4           scalar                    1156,1158,1159,1198,1199,1202,1203
                                                                                                  ,4213,4223,4244,4762,4804         
 NETCDF_FILE_CLOSE_WRAP     Subr   1251                                          PRIV             1251,1260,3735                    
 NETCDF_FILE_OPEN_WRAP      Func   628      L(4)            4           scalar   PRIV             628                               
 NLAT                       Local  657      I(4)            4           scalar                    657,676,680,698,701,705,706,708,42

Page 34          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  27,4249,4250,4613,4617,4618,4620  
 NLATB                      Local  659      I(4)            4           scalar                    659,694,695,4229,4271,4272        
 NLEV                       Local  658      I(4)            4           scalar                    658,669,738,739,742,743,751,752,76
                                                                                                  7,770,772,774,1063,1064,1065,1066,
                                                                                                  1075,1077,1092,1094,1111,4228,4239
                                                                                                  ,4293,4294,4306,4307,4308,4310,434
                                                                                                  4,4345,4568,4572,4575,4577,4579,46
                                                                                                  70,4671,4672,4673,4682,4684,4698,4
                                                                                                  700,4717                          
 NLEVH                      Local  661      I(4)            4           scalar                    661,670,758,759,762,763,4231,4240,
                                                                                                  4319,4320,4332,4333,4334,4336,4349
                                                                                                  ,4350                             
 NLON                       Local  656      I(4)            4           scalar                    656,685,689,4226,4260,4261        
 NLONB                      Local  660      I(4)            4           scalar                    660,713,714,4230,4282,4283        
 NOLEAP                     Param  838      I(4)            4           scalar   PRIV             144,838,854,935,971,4407,4423,4496
                                                                                                  ,4528                             
 NOLEAP_TIME                Local  612      TIME_TYPE       16          scalar                    951,952                           
 NON_MONTHLY                Local  606      L(4)            4           scalar                    893,897,1060                      
 NOTE                       Param  840      I(4)            4           scalar   PRIV             91,840,848,856,902,905,1018,2374,2
                                                                                                  387,2842,2855,3419,3430,3561,3572,
                                                                                                  4409,4417,4425,4467,4470,4630     
 NOTIME                     Param  1110     I(4)            4           scalar                    1110,1254,4716,4853               
 NTIME                      Local  782      I(4)            4           scalar                    782,883,884,885,890,894,909,961,96
                                                                                                  2,982,983,1048,1078,1095,1123,1235
                                                                                                  ,1245,4213,4448,4449,4450,4455,445
                                                                                                  9,4473,4520,4521,4539,4540,4655,46
                                                                                                  85,4701,4726,4834,4844            
 NTIME_IN                   Local  882      I(4)            4           scalar                    882,890,4447,4455                 
 NUM_FIELDS                 Local  620      I(4)            4           scalar                    620,639,641,649,1063,1064,1065,106
                                                                                                  6,1075,1078,1092,1095,1111,1121,11
                                                                                                  23,1125,1126,1127,1133,1134,1135,1
                                                                                                  136,1138,1227,1234,1244,1256,4197,
                                                                                                  4217,4218,4670,4671,4672,4673,4682
                                                                                                  ,4685,4698,4701,4717,4724,4726,472
                                                                                                  8,4729,4730,4735,4736,4737,4738,47
                                                                                                  40,4833,4843,4855                 
 NVAR                       Local  638      I(4)            4           scalar                    638,639,643,646,1186,1190,1197,421
                                                                                                  3,4217,4744,4761,4793,4797,4803   
 NX                         Local  615      I(4)            4           scalar                    1022,1024,1026                    
 NY                         Local  615      I(4)            4           scalar                    1023,1024,1025                    
 OPEN_FILE                  Local  628                                  scalar   PRIV             126,628                           
 PI                         Param  704      R(8)            8           scalar   PRIV             156,398,704,708,1406,4194,4616,462
                                                                                                  0                                 
 PRESENT                    Func   640                                  scalar                    640,1141,1147,1167,1172,1189,1211,
                                                                                                  1217,1263                         
 PRESSURE                   Param  769      I(4)            4           scalar                    769,1306,2324,2797,3397,3543,4296,
                                                                                                  4322,4574                         
 PRINT_DATE                 Subr   957                                           PRIV             147,957,962,978,983,4516,4521,4535
                                                                                                  ,4540                             
 READ_ALL_ON_INIT           Local  1074     L(4)            4           scalar                    415,422,1074,1091,1242,1814,2235,2
                                                                                                  554,2728,3010,3207,3731,4681,4697,
                                                                                                  4841                              
 READ_DATA                  Subr   1236                                                           174,1236,1246,1744,1748,1751,1754,
                                                                                                  1785,1788,1839,1842,1864,2164,2168
                                                                                                  ,2171,2174,2206,2209,2260,2263,228

Page 35          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5,2669,2673,2676,2679,2698,2700,27
                                                                                                  50,2753,2770,3149,3153,3156,3159,3
                                                                                                  178,3180,3229,3232,3249           
 SC                         Local  610      I(4)            4           scalar                    953,955,974,976                   
 SEASONAL                   Param  1232     I(4)            4           scalar                    1232,4831                         
 SECONDS_PER_DAY            Param  920      R(8)            8           scalar   PRIV             156,920,942,4482,4502             
 SET_DATE                   Local  844                                  scalar   PRIV             141,844,1676,1685,1698,1710,2097,2
                                                                                                  106,2119,2130,2603,2612,2625,2637,
                                                                                                  3083,3092,3105,3117,4413          
 SET_DATE_I                 Func   844      RECORD          16          scalar   PRIV             844,1676,1685,1698,1710,2097,2106,
                                                                                                  2119,2130,2603,2612,2625,2637,3083
                                                                                                  ,3092,3105,3117,4413              
 SET_DATE_JULIAN            Func   860      RECORD          16          scalar   PRIV             146,860,954,4429,4513             
 SET_DATE_NO_LEAP           Func   852      RECORD          16          scalar   PRIV             145,852,975,4421,4532             
 SET_TIME                   Local  887                                  scalar   PRIV             140,887,888,920,942,951,973,1002,1
                                                                                                  003,4452,4453,4482,4502,4510,4530,
                                                                                                  4557,4558                         
 SET_TIME_I                 Func   887      RECORD          16          scalar   PRIV             887,888,920,942,951,973,1002,1003,
                                                                                                  4452,4453,4482,4502,4510,4530,4557
                                                                                                  ,4558                             
 SIGMA                      Param  745      I(4)            4           scalar                    745,765,771,2326,2799,3399,3545,43
                                                                                                  47,4352,4576                      
 SINGLE_YEAR_FILE           Dummy  582      L(4)            4           scalar   ARG,OUT          1263,1264                         
 SIZE                       Func   641                                  scalar                    641,719,720,1022,1023,1063,1064,10
                                                                                                  65,1066,1075,1077,1092,1094,1111,1
                                                                                                  144,1148,1153,1168,1173,1186,1190,
                                                                                                  1212,1218                         
 SRC_FILE                   Local  595      CHAR            64          scalar                    625,627,628,629,633,678,687,1007  
 TIME_ASSIGNMENT            Subr   844                                           PRIV             844,852,860,878,919,941,951,954,97
                                                                                                  3,975,996,1003,1676,1685,1695,1696
                                                                                                  ,1698,1707,1708,1710,2097,2106,211
                                                                                                  6,2117,2119,2127,2128,2130,2603,26
                                                                                                  12,2622,2623,2625,2634,2635,2637,3
                                                                                                  083,3092,3102,3103,3105,3114,3115,
                                                                                                  3117,4413,4421,4429,4445,4481,4501
                                                                                                  ,4510,4513,4530,4532,4551,4558    
 TIME_IN                    Local  613      R(8)            8     1     1        ALC              884,886,889,896,920,921,942,943,95
                                                                                                  1,973,999,1001,1005               
 TIME_PLUS                  Func   887      RECORD          16          scalar   PRIV             887,888,944,951,973,1002,1003,4452
                                                                                                  ,4453,4504,4510,4530,4557,4558    
 TIME_TYPE                  Type   599                                  scalar                    139,302,332,599,612,1522,1599,1606
                                                                                                  ,1607,1954,1972,1973,2478,2495,249
                                                                                                  6,2936,2949,2950,3776,3895,4174,41
                                                                                                  87,4902                           
 TRIM                       Func   625                                  scalar                    625,627,628,629,633,637,678,687,79
                                                                                                  9,800,814,815,837,839,842,847,850,
                                                                                                  855,858,864,865,903,906,934,936,95
                                                                                                  0,958,963,972,979,984,1007,1160,11
                                                                                                  64,1182,1204,1208,1209            
 UNITS                      Local  784      CHAR            64          scalar                    784,793,795,800,810,815,1155,1163,
                                                                                                  1166,1167,1207,1210,1211,1280,1281
                                                                                                  ,1305,1308,4245,4252,4263,4274,428
                                                                                                  5,4298,4324,4362,4364,4369,4379,43
                                                                                                  84,4762,4764,4768,4770,4804,4808,4
                                                                                                  809                               

Page 36          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 VARIABLE_EXISTS            Func   1154     L(4)            4           scalar   PRIV             127,1154,1275,1300                
 VAR_DIMNAME                Local  602      CHAR            128   1     6        TGT              1159,1160,1203,1204               
 VAR_NAMES                  Local  603      CHAR            128   1     1        ALC              643,644,647,1203,1207,1208,1209,12
                                                                                                  28                                
 VAR_NDIMS                  Local  604      I(4)            4     1     1        ALC              643,647,649,1198,1228             
 VERT_INTERP                Dummy  582      I(4)            4     1     1        ARG,IN           1147,1148,1172,1173,1189,1190,1217
                                                                                                  ,1218                             
 YR                         Local  610      I(4)            4           scalar                    952,954,974,975                   
 ZERO                       Param  1169     I(4)            4           scalar                    391,1169,1214,4773,4812           


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 INTERPOLATE_TYPE.FILEOBJ   FMSNETCDFFILE_T 872   2712           scalar   PRIV             628,630,2018,2520,2974,3388,3536,3 
                                                                                           664,3735,3785,3787,3848,3850       

Page 37          Source Listing                  FMS2IO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   1268 
   1269 subroutine get_axis_latlon_data(fileobj, name, data)
   1270    type(FmsNetcdfFile_t), intent(in) :: fileobj
   1271    character(len=*),      intent(in) :: name
   1272    real, dimension(:),   intent(out) :: data
   1273 
   1274 
   1275    if(variable_exists(fileobj, name)) then
   1276       call fms2_io_read_data(fileobj, name, data)
   1277    else
   1278       call mpp_error(FATAL,'get_axis_latlon_data: variable '//trim(name)//' does not exist in file '//trim(fileobj%path) )
   1279    endif
   1280    call get_variable_units(fileobj, name, units)
   1281    select case(units(1:6))
   1282    case('degree')
   1283       data = data*dtr
   1284    case('radian')
   1285    case default
   1286       call mpp_error(FATAL, "get_axis_latlon_data : Units for '//trim(name)//' not recognised in file "//trim(fileobj%path))
   1287    end select
   1288 
   1289 end subroutine get_axis_latlon_data


ENTRY POINTS

  Name                                                 
                                                       
 interpolator_mod_mp_get_axis_latlon_data_             

Page 38          Source Listing                  GET_AXIS_LATLON_DATA
2021-06-01 08:55 Symbol Table                    interpolator.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1269     R(8)            8     1     1        ARG,OUT          1276,1283                         
 FILEOBJ                    Dummy  1269     FMSNETCDFFILE_T 872         scalar   ARG,IN           1275,1276,1278,1280,1286          
 GET_AXIS_LATLON_DATA       Subr   1269                                                           681,690,696,715                   
 NAME                       Dummy  1269     CHAR                        scalar   ARG,IN           1275,1276,1278,1280               
 TRIM                       Func   1278                                 scalar                    1278,1286                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FMSNETCDFFILE_T.PATH       CHAR            256   0              scalar                    1278,1286,1303                     

Page 39          Source Listing                  GET_AXIS_LATLON_DATA
2021-06-01 08:55                                 interpolator.F90

   1290 
   1291 
   1292 subroutine get_axis_level_data(fileobj, name, data, level_type, vertical_indices)
   1293    type(FmsNetcdfFile_t), intent(in) :: fileobj
   1294    character(len=*),      intent(in) :: name
   1295    real, dimension(:),   intent(out) :: data
   1296    integer,              intent(out) :: level_type, vertical_indices
   1297    real, dimension(:), allocatable   :: alpha
   1298    integer                           :: n, nlev
   1299 
   1300    if(variable_exists(fileobj, name)) then
   1301       call fms2_io_read_data(fileobj, name, data)
   1302    else
   1303       call mpp_error(FATAL,'get_axis_level_data: variable '//trim(name)//' does not exist in file '//trim(fileobj%path) )
   1304    endif
   1305    call get_variable_units(fileobj, name, units)
   1306    level_type = PRESSURE
   1307 ! Convert to Pa
   1308    if( trim(adjustl(lowercase(chomp(units)))) == "mb" .or. trim(adjustl(lowercase(chomp(units)))) == "hpa") then
   1309       data = data * 100.
   1310    endif
   1311    nlev = size(data(:))
   1312    sense = get_variable_sense(fileobj, name)
   1313 ! define the direction of the vertical data axis
   1314 ! switch index order if necessary so that indx 1 is at lowest pressure,
   1315 ! index nlev at highest pressure.
   1316       if( sense == 1 ) then
   1317         vertical_indices = INCREASING_UPWARD
   1318         allocate (alpha(nlev))
   1319         do n = 1, nlev
   1320           alpha(n) = data(nlev-n+1)
   1321         end do
   1322         do n = 1, nlev
   1323           data(n) = alpha(n)
   1324         end do
   1325         deallocate (alpha)
   1326       else
   1327         vertical_indices = INCREASING_DOWNWARD
   1328       endif
   1329 
   1330 
   1331 end subroutine get_axis_level_data

Page 40          Source Listing                  GET_AXIS_LEVEL_DATA
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                                
                                                      
 interpolator_mod_mp_get_axis_level_data_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   1308                                 scalar                    1308                              
 ALPHA                      Local  1297     R(8)            8     1     1        ALC              1318,1320,1323,1325               
 DATA                       Dummy  1292     R(8)            8     1     1        ARG,OUT          1301,1309,1311,1320,1323          
 FILEOBJ                    Dummy  1292     FMSNETCDFFILE_T 872         scalar   ARG,IN           1300,1301,1303,1305,1312          
 GET_AXIS_LEVEL_DATA        Subr   1292                                                           740,760                           
 GET_VARIABLE_SENSE         Func   1312     I(4)            4           scalar   PRIV             131,1312                          
 INCREASING_DOWNWARD        Param  1327     I(4)            4           scalar                    1327,4315,4341                    
 INCREASING_UPWARD          Param  1317     I(4)            4           scalar                    1317,3793,3855,4305,4331,4916,4976
 LEVEL_TYPE                 Dummy  1292     I(4)            4           scalar   ARG,OUT          1306                              
 N                          Local  1298     I(4)            4           scalar                    1319,1320,1322,1323               
 NAME                       Dummy  1292     CHAR                        scalar   ARG,IN           1300,1301,1303,1305,1312          
 NLEV                       Local  1298     I(4)            4           scalar                    1311,1318,1319,1320,1322          
 SENSE                      Local  1312     I(4)            4           scalar                    1312,1316,4246,4304,4330          
 SIZE                       Func   1311                                 scalar                    1311                              
 TRIM                       Func   1303                                 scalar                    1303,1308                         
 VERTICAL_INDICES           Dummy  1292     I(4)            4           scalar   ARG,OUT          1317,1327                         

Page 41          Source Listing                  GET_AXIS_LEVEL_DATA
2021-06-01 08:55                                 interpolator.F90

   1332 
   1333 
   1334 !
   1335 !---------------------------------------------------------------------
   1336 !
   1337 !> \brief cell_center2 receives the variables q1, q2, q3, and q4
   1338 !!        as inputs and returns e2.
   1339 !!
   1340 !! \param [in] <q1> No description
   1341 !! \param [in] <q2> No description
   1342 !! \param [in] <q3> No description
   1343 !! \param [in] <q4> No description
   1344 !! \param [out] <e2> No description
   1345  subroutine cell_center2(q1, q2, q3, q4, e2)
   1346       real , intent(in ) :: q1(2), q2(2), q3(2), q4(2)
   1347       real , intent(out) :: e2(2)
   1348 ! Local
   1349       real p1(3), p2(3), p3(3), p4(3)
   1350       real ec(3)
   1351       real dd
   1352       integer k
   1353 
   1354       call latlon2xyz(q1, p1)
   1355       call latlon2xyz(q2, p2)
   1356       call latlon2xyz(q3, p3)
   1357       call latlon2xyz(q4, p4)
   1358 
   1359       do k=1,3
   1360          ec(k) = p1(k) + p2(k) + p3(k) + p4(k)
   1361       enddo
   1362       dd = sqrt( ec(1)**2 + ec(2)**2 + ec(3)**2 )
   1363 
   1364       do k=1,3
   1365          ec(k) = ec(k) / dd
   1366       enddo
   1367 
   1368       call cart_to_latlon(1, ec, e2(1), e2(2))
   1369 
   1370  end subroutine cell_center2

Page 42          Source Listing                  CELL_CENTER2
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                         
                                               
 interpolator_mod_mp_cell_center2_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CELL_CENTER2               Subr   1345                                                           1027,4638                         
 DD                         Local  1351     R(8)            8           scalar                    1362,1365                         
 E2                         Dummy  1345     R(8)            8     1     2        ARG,OUT          1368                              
 EC                         Local  1350     R(8)            8     1     3                         1360,1362,1365,1368               
 K                          Local  1352     I(4)            4           scalar                    1359,1360,1364,1365               
 P1                         Local  1349     R(8)            8     1     3                         1354,1360                         
 P2                         Local  1349     R(8)            8     1     3                         1355,1360                         
 P3                         Local  1349     R(8)            8     1     3                         1356,1360                         
 P4                         Local  1349     R(8)            8     1     3                         1357,1360                         
 Q1                         Dummy  1345     R(8)            8     1     2        ARG,IN           1354                              
 Q2                         Dummy  1345     R(8)            8     1     2        ARG,IN           1355                              
 Q3                         Dummy  1345     R(8)            8     1     2        ARG,IN           1356                              
 Q4                         Dummy  1345     R(8)            8     1     2        ARG,IN           1357                              
 SQRT                       Func   1362                                 scalar                    1362                              

Page 43          Source Listing                  CELL_CENTER2
2021-06-01 08:55                                 interpolator.F90

   1371 !
   1372 !---------------------------------------------------------------------
   1373 !> \brief car_to_latlon receives the variables np, q, xs, and ys
   1374 !!        as inputs and returns q, xs, and ys.
   1375 !!
   1376 !! \param [in] <np> No description
   1377 !! \param [inout] <q> No description
   1378 !! \param [inout] <xs> No description
   1379 !! \param [inout] <ys> No description
   1380  subroutine cart_to_latlon(np, q, xs, ys)
   1381 ! vector version of cart_to_latlon1
   1382   integer, intent(in):: np
   1383   real, intent(inout):: q(3,np)
   1384   real, intent(inout):: xs(np), ys(np)
   1385 ! local
   1386   real, parameter:: esl=1.e-10
   1387   real (f_p):: p(3)
   1388   real (f_p):: dist, lat, lon
   1389   integer i,k
   1390 
   1391   do i=1,np
   1392      do k=1,3
   1393         p(k) = q(k,i)
   1394      enddo
   1395      dist = sqrt(p(1)**2 + p(2)**2 + p(3)**2)
   1396      do k=1,3
   1397         p(k) = p(k) / dist
   1398      enddo
   1399 
   1400      if ( (abs(p(1))+abs(p(2)))  < esl ) then
   1401           lon = 0.
   1402      else
   1403           lon = atan2( p(2), p(1) )   ! range [-pi,pi]
   1404      endif
   1405 
   1406      if ( lon < 0.) lon = 2.*pi + lon
   1407      lat = asin(p(3))
   1408 
   1409      xs(i) = lon
   1410      ys(i) = lat
   1411 ! q Normalized:
   1412      do k=1,3
   1413         q(k,i) = p(k)
   1414      enddo
   1415   enddo
   1416 
   1417  end  subroutine cart_to_latlon

Page 44          Source Listing                  CART_TO_LATLON
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                           
                                                 
 interpolator_mod_mp_cart_to_latlon_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   1400                                 scalar                    1400                              
 ASIN                       Func   1407                                 scalar                    1407                              
 ATAN2                      Func   1403                                 scalar                    1403                              
 CART_TO_LATLON             Subr   1380                                                           1368                              
 DIST                       Local  1388     R(8)            8           scalar                    1395,1397                         
 ESL                        Param  1386     R(8)            8           scalar                    1400                              
 F_P                        Param  1387     I(4)            4           scalar                    1387,1388,1433,1434               
 I                          Local  1389     I(4)            4           scalar                    1391,1393,1409,1410,1413          
 K                          Local  1389     I(4)            4           scalar                    1392,1393,1396,1397,1412,1413     
 LAT                        Local  1388     R(8)            8           scalar                    1407,1410                         
 LON                        Local  1388     R(8)            8           scalar                    1401,1403,1406,1409               
 NP                         Dummy  1380     I(4)            4           scalar   ARG,IN           1383,1384,1391                    
 P                          Local  1387     R(8)            8     1     3                         1393,1395,1397,1400,1403,1407,1413
 Q                          Dummy  1380     R(8)            8     2     0        ARG,INOUT        1393,1413                         
 SQRT                       Func   1395                                 scalar                    1395                              
 XS                         Dummy  1380     R(8)            8     1     0        ARG,INOUT        1409                              
 YS                         Dummy  1380     R(8)            8     1     0        ARG,INOUT        1410                              

Page 45          Source Listing                  CART_TO_LATLON
2021-06-01 08:55                                 interpolator.F90

   1418 !
   1419 !---------------------------------------------------------------------
   1420 !> \brief latlon2xyz receives the variable p as input and returns e
   1421 !!        as output in order to map (lon, lat) to (x,y,z).
   1422 !!
   1423 !! \param [in] <p> No description
   1424 !! \param [out] <e> No description
   1425  subroutine latlon2xyz(p, e)
   1426 !
   1427 ! Routine to map (lon, lat) to (x,y,z)
   1428 !
   1429  real, intent(in) :: p(2)
   1430  real, intent(out):: e(3)
   1431 
   1432  integer n
   1433  real (f_p):: q(2)
   1434  real (f_p):: e1, e2, e3
   1435 
   1436     do n=1,2
   1437        q(n) = p(n)
   1438     enddo
   1439 
   1440     e1 = cos(q(2)) * cos(q(1))
   1441     e2 = cos(q(2)) * sin(q(1))
   1442     e3 = sin(q(2))
   1443 !-----------------------------------
   1444 ! Truncate to the desired precision:
   1445 !-----------------------------------
   1446     e(1) = e1
   1447     e(2) = e2
   1448     e(3) = e3
   1449 
   1450  end subroutine latlon2xyz

Page 46          Source Listing                  LATLON2XYZ
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                       
                                             
 interpolator_mod_mp_latlon2xyz_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COS                        Func   1440                                 scalar                    1440,1441                         
 E                          Dummy  1425     R(8)            8     1     3        ARG,OUT          1446,1447,1448                    
 E1                         Local  1434     R(8)            8           scalar                    1440,1446                         
 E2                         Local  1434     R(8)            8           scalar                    1441,1447                         
 E3                         Local  1434     R(8)            8           scalar                    1442,1448                         
 LATLON2XYZ                 Subr   1425                                                           1354,1355,1356,1357               
 N                          Local  1432     I(4)            4           scalar                    1436,1437                         
 P                          Dummy  1425     R(8)            8     1     2        ARG,IN           1437                              
 Q                          Local  1433     R(8)            8     1     2                         1437,1440,1441,1442               
 SIN                        Func   1441                                 scalar                    1441,1442                         

Page 47          Source Listing                  LATLON2XYZ
2021-06-01 08:55                                 interpolator.F90

   1451 
   1452 !
   1453 !#######################################################################
   1454 !
   1455 !---------------------------------------------------------------------
   1456 !> \brief check_climo_units checks the units that the climatology
   1457 !!        data is using. This is needed to allow for conversion of
   1458 !!        datasets to mixing ratios which is what the vertical
   1459 !!        interpolation scheme requires. The default is to assume no
   1460 !!        conversion is needed. If the units are those of a column
   1461 !!        burden (kg/m2) then conversion to mixing ratio is flagged.
   1462 !!
   1463 !! \param [in] <units> The units which you will be checking
   1464 function check_climo_units(units)
   1465 ! Function to check the units that the climatology data is using.
   1466 ! This is needed to allow for conversion of datasets to mixing ratios which is what the
   1467 ! vertical interpolation scheme requires
   1468 ! The default is to assume no conversion is needed.
   1469 ! If the units are those of a column burden (kg/m2) then conversion to mixing ratio is flagged.
   1470 !
   1471 character(len=*), intent(in) :: units
   1472 
   1473 integer :: check_climo_units
   1474 
   1475 check_climo_units = NO_CONV
   1476 select case(chomp(units))
   1477   case('kg/m2', 'kg/m^2', 'kg/m**2', 'kg m^-2', 'kg m**-2')
   1478      check_climo_units = KG_M2
   1479   case('molecules/cm2/s', 'molecule/cm2/s', 'molec/cm2/s')
   1480      check_climo_units = KG_M2
   1481   case('kg/m2/s')
   1482      check_climo_units = KG_M2
   1483 end select
   1484 
   1485 end function check_climo_units

Page 48          Source Listing                  CHECK_CLIMO_UNITS
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                              
                                                    
 interpolator_mod_mp_check_climo_units_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_CLIMO_UNITS          Func   1464     I(4)            4           scalar                    1166,1210,1475,1478,1480,1482,4768
                                                                                                  ,4808                             
 KG_M2                      Param  1478     I(4)            4           scalar                    1478,1480,1482,2340,2414,2813,2878
                                                                                                  ,3405,3453,3550,3591              
 NO_CONV                    Param  1475     I(4)            4           scalar                    1475,2334,2807                    
 UNITS                      Dummy  1464     CHAR                        scalar   ARG,IN           1476                              

Page 49          Source Listing                  CHECK_CLIMO_UNITS
2021-06-01 08:55                                 interpolator.F90

   1486 !
   1487 !#######################################################################
   1488 !
   1489 !---------------------------------------------------------------------
   1490 !> \brief init_clim_diag is a routine to register diagnostic fields
   1491 !!        for the climatology file. This routine calculates the domain
   1492 !!        decompostion of the climatology fields for later export
   1493 !!        through send_data. The ids created here are for column
   1494 !!        burdens that will diagnose the vertical interpolation
   1495 !!        routine.
   1496 !!
   1497 !! \param [inout] <clim_type> The interpolate type containing the
   1498 !!                      names of the fields in the climatology file
   1499 !! \param [in] <mod_axes> The axes of the model
   1500 !! \param [in] <init_time> The model initialization time
   1501 !!
   1502 !! \throw FATAL, "init_clim_diag : You must call interpolator_init before calling init_clim_diag"
   1503 !! \throw FATAL, "init_clim_diag : Trying to set up too many diagnostic fields for the climatology data"
   1504 subroutine init_clim_diag(clim_type, mod_axes, init_time)
   1505 !
   1506 ! Routine to register diagnostic fields for the climatology file.
   1507 ! This routine calculates the domain decompostion of the climatology fields
   1508 ! for later export through send_data.
   1509 ! The ids created here are for column burdens that will diagnose the vertical interpolation routine.
   1510 ! climo_diag_id : 'module_name = climo' is intended for use with the model vertical resolution.
   1511 ! hinterp_id    : 'module_name = 'hinterp' is intended for use with the climatology vertical resolution.
   1512 
   1513 ! INTENT INOUT :
   1514 !    clim_type : The interpolate type containing the names of the fields in the climatology file.
   1515 !
   1516 ! INTENT IN    :
   1517 !   mod_axes   : The axes of the model.
   1518 !   init_time  : The model initialization time.
   1519 !
   1520 type(interpolate_type), intent(inout)  :: clim_type
   1521 integer               , intent(in)     :: mod_axes(:)
   1522 type(time_type)       , intent(in)     :: init_time
   1523 
   1524 integer :: axes(2),nxd,nyd,ndivs,i
   1525 type(domain2d) :: domain
   1526 integer :: domain_layout(2), iscomp, iecomp,jscomp,jecomp
   1527 
   1528 
   1529 if (.not. module_is_initialized .or. .not. associated(clim_type%lon)) &
   1530    call mpp_error(FATAL, "init_clim_diag : You must call interpolator_init before calling init_clim_diag")
   1531 
   1532 
   1533 ndivs = mpp_npes()
   1534 nxd = size(clim_type%lon(:))
   1535 nyd = size(clim_type%lat(:))
   1536 
   1537 ! Define the domain decomposition of the climatology file. This may be (probably is) different from the model domain.
   1538 call mpp_define_layout ((/1,nxd,1,nyd/), ndivs, domain_layout)
   1539 call mpp_define_domains((/1,nxd,1,nyd/),domain_layout, domain,xhalo=0,yhalo=0)
   1540 call mpp_get_compute_domain (domain, iscomp, iecomp, jscomp, jecomp)
   1541    axes(1) = diag_axis_init(clim_type%file_name(1:5)//'x',clim_type%lon,units='degrees',cart_name='x',domain2=domain)
   1542    axes(2) = diag_axis_init(clim_type%file_name(1:5)//'y',clim_type%lat,units='degrees',cart_name='y',domain2=domain)

Page 50          Source Listing                  INIT_CLIM_DIAG
2021-06-01 08:55                                 interpolator.F90

   1543 clim_type%is = iscomp
   1544 clim_type%ie = iecomp
   1545 clim_type%js = jscomp
   1546 clim_type%je = jecomp
   1547 
   1548 !init_time = set_date(1980,1,1,0,0,0)
   1549 
   1550 if ((num_clim_diag + size(clim_type%field_name(:))) .gt. max_diag_fields )  &
   1551    call mpp_error(FATAL, "init_clim_diag : Trying to set up too many diagnostic fields for the climatology data")
   1552 do i=1,size(clim_type%field_name(:))
   1553 climo_diag_name(i+num_clim_diag) = clim_type%field_name(i)
   1554 climo_diag_id(i+num_clim_diag) =  register_diag_field('climo',clim_type%field_name(i),axes(1:2),init_time,&
   1555                                 'climo_'//clim_type%field_name(i), 'kg/kg', missing_value)
   1556 hinterp_id(i+num_clim_diag) =  register_diag_field('hinterp',clim_type%field_name(i),mod_axes(1:2),init_time,&
   1557                                 'interp_'//clim_type%field_name(i),'kg/kg' , missing_value)
   1558 enddo
   1559 ! Total number of climatology diagnostics (num_clim_diag). This can be from multiple climatology fields with different spati
   1559 al axes.
   1560 ! It is simply a holder for the diagnostic indices.
   1561 num_clim_diag = num_clim_diag+size(clim_type%field_name(:))
   1562 
   1563 clim_diag_initialized = .true.
   1564 
   1565 end subroutine init_clim_diag


ENTRY POINTS

  Name                                           
                                                 
 interpolator_mod_mp_init_clim_diag_             

Page 51          Source Listing                  INIT_CLIM_DIAG
2021-06-01 08:55 Symbol Table                    interpolator.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   1529                                 scalar                    1529                              
 AXES                       Local  1524     I(4)            4     1     2        TGT              1541,1542,1554                    
 CLIMO_DIAG_ID              Local  1554     I(4)            4     1     30                        1554,3911,3918                    
 CLIMO_DIAG_NAME            Local  1553     CHAR            64    1     30                        1553,2351,2352,2822,2823,3275,3276
                                                                                                  ,3903,3904                        
 CLIM_DIAG_INITIALIZED      Local  1563     L(4)            4           scalar                    289,1563,3805,4929                
 CLIM_TYPE                  Dummy  1504     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        1529,1534,1535,1541,1542,1543,1544
                                                                                                  ,1545,1546,1550,1552,1553,1554,155
                                                                                                  5,1556,1557,1561                  
 DIAG_AXIS_INIT             Func   1541     I(4)            4           scalar   PRIV             119,1541,1542                     
 DOMAIN                     Local  1525     DOMAIN2D        752         scalar                    1539,1540,1541,1542               
 DOMAIN2D                   Type   1525                                 scalar                    114,1525                          
 DOMAIN_LAYOUT              Local  1526     I(4)            4     1     2        TGT              1538,1539                         
 HINTERP_ID                 Local  1556     I(4)            4     1     30                        1556,2359,2360,2830,2831,3283,3284
 I                          Local  1524     I(4)            4           scalar                    1552,1553,1554,1555,1556,1557     
 IECOMP                     Local  1526     I(4)            4           scalar                    1540,1544                         
 INIT_CLIM_DIAG             Subr   1504                                                                                             
 INIT_TIME                  Dummy  1504     TIME_TYPE       16          scalar   ARG,IN           1554,1556                         
 ISCOMP                     Local  1526     I(4)            4           scalar                    1540,1543                         
 JECOMP                     Local  1526     I(4)            4           scalar                    1540,1546                         
 JSCOMP                     Local  1526     I(4)            4           scalar                    1540,1545                         
 MAX_DIAG_FIELDS            Param  1550     I(4)            4           scalar                    404,405,1550                      
 MISSING_VALUE              Local  1555     R(8)            8           scalar                    406,1555,1557                     
 MOD_AXES                   Dummy  1504     I(4)            4     1     1        ARG,IN           1556                              
 MPP_DEFINE_DOMAINS         Local  1539                                 scalar   PRIV             112,1539                          
 MPP_DEFINE_DOMAINS2D       Subr   1539                                          PRIV             1539                              
 MPP_DEFINE_LAYOUT          Local  1538                                 scalar   PRIV             115,1538                          
 MPP_DEFINE_LAYOUT2D        Subr   1538                                          PRIV             1538                              
 MPP_GET_COMPUTE_DOMAIN     Local  1540                                 scalar   PRIV             116,1540                          
 MPP_GET_COMPUTE_DOMAIN2D   Subr   1540                                          PRIV             1540                              
 MPP_NPES                   Func   1533     I(4)            4           scalar   PRIV             89,1533                           
 NDIVS                      Local  1524     I(4)            4           scalar                    1533,1538                         
 NUM_CLIM_DIAG              Local  1550     I(4)            4           scalar                    403,1550,1553,1554,1556,1561      
 NXD                        Local  1524     I(4)            4           scalar                    1534,1538,1539                    
 NYD                        Local  1524     I(4)            4           scalar                    1535,1538,1539                    
 REGISTER_DIAG_FIELD        Local  1554                                 scalar   PRIV             118,1554,1556                     
 REGISTER_DIAG_FIELD_ARRAY  Func   1554     I(4)            4           scalar   PRIV             1554,1556                         
 SIZE                       Func   1534                                 scalar                    1534,1535,1550,1552,1561          

Page 52          Source Listing                  INIT_CLIM_DIAG
2021-06-01 08:55                                 interpolator.F90

   1566 
   1567 
   1568 
   1569 !
   1570 !---------------------------------------------------------------------
   1571 !> \brief obtain_interpolator_time_slices makes sure that the
   1572 !!        appropriate time slices are available for interpolation on
   1573 !!        this time step.
   1574 !!
   1575 !! \param [inout] <clim_type> The interpolate type previously defined
   1576 !!                      by a call to interpolator_init
   1577 !! \param [in] <Time> The model time that you wish to interpolate to
   1578 !!
   1579 !! \throw FATAL "interpolator_timeslice 1:  file="
   1580 !! \throw FATAL "interpolator_timeslice 2:  file="
   1581 !! \throw FATAL "interpolator_timeslice 3:  file="
   1582 !! \throw FATAL "interpolator_timeslice 4:  file="
   1583 !! \throw FATAL "interpolator_timeslice 5:  file="
   1584 !! \throw FATAL "interpolator_timeslice : No data from the previous
   1585 !!                    climatology time but we have the next time. How did
   1586 !!                    this happen?"
   1587 subroutine obtain_interpolator_time_slices (clim_type, Time)
   1588 
   1589 !  Makes sure that appropriate time slices are available for interpolation
   1590 !  on this time step
   1591 !
   1592 ! INTENT INOUT
   1593 !   clim_type   : The interpolate type previously defined by a call to interpolator_init
   1594 !
   1595 ! INTENT IN
   1596 !   Time        : The model time that you wish to interpolate to.
   1597 
   1598 type(interpolate_type), intent(inout)  :: clim_type
   1599 type(time_type)       , intent(in)  :: Time
   1600 
   1601 integer :: taum, taup
   1602 integer :: modyear, modmonth, modday, modhour, modminute, modsecond
   1603 integer :: climyear, climmonth, climday, climhour, climminute, climsecond
   1604 integer :: year1, month1, day, hour, minute, second
   1605 integer :: climatology, m
   1606 type(time_type) :: t_prev, t_next
   1607 type(time_type), dimension(2) :: month
   1608 integer :: indexm, indexp, yearm, yearp
   1609 integer :: i, n
   1610 character(len=256) :: err_msg
   1611 
   1612     if (clim_type%climatological_year) then
   1613 !++lwh
   1614        if (size(clim_type%time_slice) > 1) then
   1615           call time_interp(Time, clim_type%time_slice, clim_type%tweight, taum, taup, modtime=YEAR, err_msg=err_msg )
   1616           if(trim(err_msg) /= '') then
   1617              call mpp_error(FATAL,'interpolator_timeslice 1: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   1618           endif
   1619        else
   1620           taum = 1
   1621           taup = 1
   1622           clim_type%tweight = 0.

Page 53          Source Listing                  OBTAIN_INTERPOLATOR_TIME_SLICES
2021-06-01 08:55                                 interpolator.F90

   1623        end if
   1624 !--lwh
   1625     else
   1626        call time_interp(Time, clim_type%time_slice, clim_type%tweight, taum, taup, err_msg=err_msg )
   1627        if(trim(err_msg) /= '') then
   1628           call mpp_error(FATAL,'interpolator_timeslice 2: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   1629        endif
   1630     endif
   1631 
   1632     if(clim_type%TIME_FLAG .eq. BILINEAR ) then
   1633 ! Check if delta-time is greater than delta of first two climatology time-slices.
   1634       if ( (Time - clim_type%time_slice(taum) ) > ( clim_type%time_slice(2)- clim_type%time_slice(1) ) .or. &
   1635            (clim_type%time_slice(taup)  - Time) > ( clim_type%time_slice(2)- clim_type%time_slice(1) ) ) then
   1636 ! The difference between the model time and the last climatology time-slice previous to the model time.
   1637 ! We need 2 time levels.
   1638         clim_type%itaum=0
   1639         clim_type%itaup=0
   1640 ! Assume this is monthly data. So we need to get the data applicable to the model date but substitute
   1641 ! the climatology year into the appropriate place.
   1642 
   1643 
   1644 ! We need to get the previous months data for the climatology year before
   1645 ! and after the model year.
   1646         call get_date(Time, modyear, modmonth, modday, modhour, modminute, modsecond)
   1647         call get_date(clim_type%time_slice(taum), climyear, climmonth, climday, climhour, climminute, climsecond)
   1648 
   1649         climatology = 1
   1650         do m = 1, size(clim_type%clim_times(:,:),2)
   1651 !Assume here that a climatology is for 1 year and consists of 12 months starting in January.
   1652           call get_date(clim_type%clim_times(1,m), year1, month1, day, hour, minute, second)
   1653           if (year1 == climyear) climatology = m
   1654         enddo
   1655         do m = 1,12
   1656 !Find which month we are trying to look at and set clim_date[mp] to the dates spanning that.
   1657           call get_date(clim_type%clim_times(m,climatology), year1, month1, day, hour, minute, second)
   1658           if ( month1 == modmonth ) then
   1659 !RSHBUGFX   if ( modday <= day ) then
   1660             if ( modday <  day ) then
   1661               indexm = m-1 ; indexp = m
   1662             else
   1663               indexm = m ; indexp = m+1
   1664             endif
   1665           endif
   1666 
   1667         enddo
   1668         if ( indexm == 0 ) then
   1669           indexm = 12
   1670           yearm = modyear - 1
   1671         else
   1672           yearm = modyear
   1673         endif
   1674           call get_date(clim_type%time_slice(indexm+(climatology-1)*12), &
   1675                         climyear, climmonth, climday, climhour, climminute, climsecond)
   1676           month(1) = set_date(yearm, indexm, climday, climhour, climminute, climsecond)
   1677         if ( indexp == 13 ) then
   1678           indexp = 1
   1679           yearp = modyear + 1

Page 54          Source Listing                  OBTAIN_INTERPOLATOR_TIME_SLICES
2021-06-01 08:55                                 interpolator.F90

   1680         else
   1681           yearp = modyear
   1682         endif
   1683           call get_date(clim_type%time_slice(indexp+(climatology-1)*12), &
   1684                         climyear, climmonth, climday, climhour, climminute, climsecond)
   1685           month(2) = set_date(yearp, indexp, climday, climhour, climminute, climsecond)
   1686 
   1687         call time_interp(Time, month, clim_type%tweight3, taum, taup, err_msg=err_msg ) ! tweight3 is the time weight betwee
   1687 n the months.
   1688         if ( .not. retain_cm3_bug ) then
   1689            if (taum==2 .and. taup==2) clim_type%tweight3 = 1. ! protect against post-perth time_interp behavior
   1690         end if
   1691         if(trim(err_msg) /= '') then
   1692           call mpp_error(FATAL,'interpolator_timeslice 3: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   1693         endif
   1694 
   1695         month(1) = clim_type%time_slice(indexm+(climatology-1)*12)
   1696         month(2) = clim_type%time_slice(indexm+climatology*12)
   1697         call get_date(month(1), climyear, climmonth, climday, climhour, climminute, climsecond)
   1698         t_prev = set_date(yearm, climmonth, climday, climhour, climminute, climsecond)
   1699         call time_interp(t_prev, month, clim_type%tweight1, taum, taup, err_msg=err_msg ) !tweight1 is the time weight betwe
   1699 en the climatology years.
   1700         if ( .not. retain_cm3_bug ) then
   1701            if (taum==2 .and. taup==2) clim_type%tweight1 = 1. ! protect against post-perth time_interp behavior
   1702         end if
   1703         if(trim(err_msg) /= '') then
   1704            call mpp_error(FATAL,'interpolator_timeslice 4: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   1705         endif
   1706 
   1707         month(1) = clim_type%time_slice(indexp+(climatology-1)*12)
   1708         month(2) = clim_type%time_slice(indexp+climatology*12)
   1709         call get_date(month(1), climyear, climmonth, climday, climhour, climminute, climsecond)
   1710         t_next = set_date(yearp, climmonth, climday, climhour, climminute, climsecond)
   1711         call time_interp(t_next, month, clim_type%tweight2, taum, taup, err_msg=err_msg ) !tweight1 is the time weight betwe
   1711 en the climatology years.
   1712         if ( .not. retain_cm3_bug ) then
   1713            if (taum==2 .and. taup==2) clim_type%tweight2 = 1. ! protect against post-perth time_interp behavior
   1714         end if
   1715         if(trim(err_msg) /= '') then
   1716            call mpp_error(FATAL,'interpolator_timeslice 5: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   1717         endif
   1718 
   1719         if (indexm == clim_type%indexm(1) .and.  &
   1720             indexp == clim_type%indexp(1) .and. &
   1721             climatology == clim_type%climatology(1)) then
   1722         else
   1723           clim_type%indexm(:) = indexm
   1724           clim_type%indexp(:) = indexp
   1725           clim_type%climatology(:) = climatology
   1726           if (use_mpp_io) then
   1727             do i=1, size(clim_type%field_name(:))
   1728                call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   1729                     clim_type%pmon_pyear(:,:,:,i),   &
   1730                     clim_type%indexm(i)+(clim_type%climatology(i)-1)*12,i,Time)
   1731 ! Read the data for the next month in the previous climatology.
   1732                call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   1733                     clim_type%nmon_pyear(:,:,:,i),   &

Page 55          Source Listing                  OBTAIN_INTERPOLATOR_TIME_SLICES
2021-06-01 08:55                                 interpolator.F90

   1734                     clim_type%indexp(i)+(clim_type%climatology(i)-1)*12,i,Time)
   1735                call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   1736                     clim_type%pmon_nyear(:,:,:,i),  &
   1737                     clim_type%indexm(i)+clim_type%climatology(i)*12,i,Time)
   1738                call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   1739                     clim_type%nmon_nyear(:,:,:,i),  &
   1740                     clim_type%indexp(i)+clim_type%climatology(i)*12,i,Time)
   1741              end do
   1742           else
   1743             do i=1, size(clim_type%field_name(:))
   1744                call read_data(clim_type,clim_type%field_name(i),  &
   1745                     clim_type%pmon_pyear(:,:,:,i),   &
   1746                     clim_type%indexm(i)+(clim_type%climatology(i)-1)*12,i,Time)
   1747 ! Read the data for the next month in the previous climatology.
   1748                call read_data(clim_type,clim_type%field_name(i),  &
   1749                     clim_type%nmon_pyear(:,:,:,i),   &
   1750                     clim_type%indexp(i)+(clim_type%climatology(i)-1)*12,i,Time)
   1751                call read_data(clim_type,clim_type%field_name(i),  &
   1752                     clim_type%pmon_nyear(:,:,:,i),  &
   1753                     clim_type%indexm(i)+clim_type%climatology(i)*12,i,Time)
   1754                call read_data(clim_type,clim_type%field_name(i),  &
   1755                     clim_type%nmon_nyear(:,:,:,i),  &
   1756                     clim_type%indexp(i)+clim_type%climatology(i)*12,i,Time)
   1757              end do
   1758            endif ! if (use_mpp_io)
   1759          endif
   1760 
   1761 
   1762       else ! We are within a climatology data set
   1763 
   1764         if (use_mpp_io) then
   1765           do i=1, size(clim_type%field_name(:))
   1766              if (taum /= clim_type%time_init(i,1) .or. &
   1767                  taup /= clim_type%time_init(i,2) ) then
   1768 
   1769 
   1770               call interp_read_data_mppio(clim_type,clim_type%field_type(i),   &
   1771                            clim_type%pmon_pyear(:,:,:,i), taum,i,Time)
   1772 ! Read the data for the next month in the previous climatology.
   1773               call interp_read_data_mppio(clim_type,clim_type%field_type(i),   &
   1774                            clim_type%nmon_pyear(:,:,:,i), taup,i,Time)
   1775               clim_type%time_init(i,1) = taum
   1776               clim_type%time_init(i,2) = taup
   1777             endif
   1778           end do
   1779         else
   1780           do i=1, size(clim_type%field_name(:))
   1781              if (taum /= clim_type%time_init(i,1) .or. &
   1782                 taup /= clim_type%time_init(i,2) ) then
   1783 
   1784 
   1785               call read_data(clim_type,clim_type%field_name(i),   &
   1786                            clim_type%pmon_pyear(:,:,:,i), taum,i,Time)
   1787 ! Read the data for the next month in the previous climatology.
   1788               call read_data(clim_type,clim_type%field_name(i),   &
   1789                            clim_type%nmon_pyear(:,:,:,i), taup,i,Time)
   1790               clim_type%time_init(i,1) = taum

Page 56          Source Listing                  OBTAIN_INTERPOLATOR_TIME_SLICES
2021-06-01 08:55                                 interpolator.F90

   1791               clim_type%time_init(i,2) = taup
   1792              endif
   1793            end do
   1794         endif !(use_mpp_io)
   1795 !       clim_type%pmon_nyear = 0.0
   1796 !       clim_type%nmon_nyear = 0.0
   1797 
   1798 ! set to zero so when next return to bilinear section will be sure to
   1799 ! have proper data (relevant when running fixed_year case for more than
   1800 ! one year in a single job)
   1801           clim_type%indexm(:) = 0
   1802           clim_type%indexp(:) = 0
   1803           clim_type%climatology(:) = 0
   1804 
   1805 
   1806 !       clim_type%tweight3 = 0.0 ! This makes [pn]mon_nyear irrelevant. Set them to 0 to test.
   1807         clim_type%tweight1 = 0.0
   1808         clim_type%tweight2 = 0.0
   1809         clim_type%tweight3 = clim_type%tweight
   1810       endif
   1811     endif   !(BILINEAR)
   1812 
   1813     if(clim_type%TIME_FLAG .eq. LINEAR  .and.   &
   1814         (.not. read_all_on_init) ) then
   1815 ! We need 2 time levels. Check we have the correct data.
   1816       clim_type%itaum=0
   1817       clim_type%itaup=0
   1818       do n=1,size(clim_type%time_init,2)
   1819         if (clim_type%time_init(1,n) .eq. taum ) clim_type%itaum = n
   1820         if (clim_type%time_init(1,n) .eq. taup ) clim_type%itaup = n
   1821       enddo
   1822 
   1823       if (clim_type%itaum.eq.0 .and. clim_type%itaup.eq.0) then
   1824 !Neither time is set so we need to read 2 time slices.
   1825 !Set up
   1826 ! field(:,:,:,1) as the previous time slice.
   1827 ! field(:,:,:,2) as the next time slice.
   1828     if (use_mpp_io) then
   1829         do i=1, size(clim_type%field_name(:))
   1830            call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,1,i), taum,i,Time)
   1831                 clim_type%time_init(i,1) = taum
   1832                 clim_type%itaum = 1
   1833            call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,2,i), taup,i,Time)
   1834                 clim_type%time_init(i,2) = taup
   1835                 clim_type%itaup = 2
   1836         end do
   1837     else
   1838        do i=1, size(clim_type%field_name(:))
   1839           call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,1,i), taum,i,Time)
   1840                clim_type%time_init(i,1) = taum
   1841                clim_type%itaum = 1
   1842           call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,2,i), taup,i,Time)
   1843                clim_type%time_init(i,2) = taup
   1844                clim_type%itaup = 2
   1845        end do
   1846     endif ! if (use_mpp_io)
   1847       endif ! clim_type%itaum.eq.clim_type%itaup.eq.0

Page 57          Source Listing                  OBTAIN_INTERPOLATOR_TIME_SLICES
2021-06-01 08:55                                 interpolator.F90

   1848       if (clim_type%itaum.eq.0 .and. clim_type%itaup.ne.0) then
   1849 ! Can't think of a situation where we would have the next time level but not the previous.
   1850  call mpp_error(FATAL,'interpolator_timeslice : No data from the previous climatology time &
   1851                          & but we have the next time. How did this happen?')
   1852       endif
   1853       if (clim_type%itaum.ne.0 .and. clim_type%itaup.eq.0) then
   1854 !We have the previous time step but not the next time step data
   1855         clim_type%itaup = 1
   1856         if (clim_type%itaum .eq. 1 ) clim_type%itaup = 2
   1857     if (use_mpp_io) then
   1858         do i=1, size(clim_type%field_name(:))
   1859            call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,clim_type%itaup,i), taup,i, T
   1859 ime)
   1860            clim_type%time_init(i,clim_type%itaup)=taup
   1861         end do
   1862     else
   1863         do i=1, size(clim_type%field_name(:))
   1864            call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,clim_type%itaup,i), taup,i, Time)
   1865            clim_type%time_init(i,clim_type%itaup)=taup
   1866         end do
   1867     endif ! if (use_mpp_io)
   1868       endif
   1869 
   1870 
   1871     endif! TIME_FLAG
   1872 
   1873     clim_type%separate_time_vary_calc = .true.
   1874 
   1875 !-------------------------------------------------------------------
   1876 
   1877 
   1878 end subroutine obtain_interpolator_time_slices

Page 58          Source Listing                  OBTAIN_INTERPOLATOR_TIME_SLICES
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                                            
                                                                  
 interpolator_mod_mp_obtain_interpolator_time_slices_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLIMATOLOGY                Local  1605     I(4)            4           scalar                    1649,1653,1657,1674,1683,1695,1696
                                                                                                  ,1707,1708,1721,1725              
 CLIMDAY                    Local  1603     I(4)            4           scalar                    1647,1675,1676,1684,1685,1697,1698
                                                                                                  ,1709,1710                        
 CLIMHOUR                   Local  1603     I(4)            4           scalar                    1647,1675,1676,1684,1685,1697,1698
                                                                                                  ,1709,1710                        
 CLIMMINUTE                 Local  1603     I(4)            4           scalar                    1647,1675,1676,1684,1685,1697,1698
                                                                                                  ,1709,1710                        
 CLIMMONTH                  Local  1603     I(4)            4           scalar                    1647,1675,1684,1697,1698,1709,1710
 CLIMSECOND                 Local  1603     I(4)            4           scalar                    1647,1675,1676,1684,1685,1697,1698
                                                                                                  ,1709,1710                        
 CLIMYEAR                   Local  1603     I(4)            4           scalar                    1647,1653,1675,1684,1697,1709     
 CLIM_TYPE                  Dummy  1587     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        1612,1614,1615,1617,1622,1626,1628
                                                                                                  ,1632,1634,1635,1638,1639,1647,165
                                                                                                  0,1652,1657,1674,1683,1687,1689,16
                                                                                                  92,1695,1696,1699,1701,1704,1707,1
                                                                                                  708,1711,1713,1716,1719,1720,1721,
                                                                                                  1723,1724,1725,1727,1728,1729,1730
                                                                                                  ,1732,1733,1734,1735,1736,1737,173
                                                                                                  8,1739,1740,1743,1744,1745,1746,17
                                                                                                  48,1749,1750,1751,1752,1753,1754,1
                                                                                                  755,1756,1765,1766,1767,1770,1771,
                                                                                                  1773,1774,1775,1776,1780,1781,1782
                                                                                                  ,1785,1786,1788,1789,1790,1791,180
                                                                                                  1,1802,1803,1807,1808,1809,1813,18
                                                                                                  16,1817,1818,1819,1820,1823,1829,1
                                                                                                  830,1831,1832,1833,1834,1835,1838,
                                                                                                  1839,1840,1841,1842,1843,1844,1848
                                                                                                  ,1853,1855,1856,1858,1859,1860,186
                                                                                                  3,1864,1865,1873                  
 DAY                        Local  1604     I(4)            4           scalar                    1652,1657,1660                    
 ERR_MSG                    Local  1610     CHAR            256         scalar                    1615,1616,1617,1626,1627,1628,1687
                                                                                                  ,1691,1692,1699,1703,1704,1711,171
                                                                                                  5,1716                            
 GET_DATE                   Subr   1646                                          PRIV             142,1646,1647,1652,1657,1674,1683,
                                                                                                  1697,1709,2067,2068,2073,2078,2095
                                                                                                  ,2104,2118,2129,2573,2574,2579,258
                                                                                                  4,2601,2610,2624,2636,3053,3054,30
                                                                                                  59,3064,3081,3090,3104,3116       
 HOUR                       Local  1604     I(4)            4           scalar                    1652,1657                         
 I                          Local  1609     I(4)            4           scalar                    1727,1728,1729,1730,1732,1733,1734
                                                                                                  ,1735,1736,1737,1738,1739,1740,174
                                                                                                  3,1744,1745,1746,1748,1749,1750,17

Page 59          Source Listing                  OBTAIN_INTERPOLATOR_TIME_SLICES
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  51,1752,1753,1754,1755,1756,1765,1
                                                                                                  766,1767,1770,1771,1773,1774,1775,
                                                                                                  1776,1780,1781,1782,1785,1786,1788
                                                                                                  ,1789,1790,1791,1829,1830,1831,183
                                                                                                  3,1834,1838,1839,1840,1842,1843,18
                                                                                                  58,1859,1860,1863,1864,1865       
 INDEXM                     Local  1608     I(4)            4           scalar                    1661,1663,1668,1669,1674,1676,1695
                                                                                                  ,1696,1719,1723                   
 INDEXP                     Local  1608     I(4)            4           scalar                    1661,1663,1677,1678,1683,1685,1707
                                                                                                  ,1708,1720,1724                   
 M                          Local  1605     I(4)            4           scalar                    1650,1652,1653,1655,1657,1661,1663
 MINUTE                     Local  1604     I(4)            4           scalar                    1652,1657                         
 MODDAY                     Local  1602     I(4)            4           scalar                    1646,1660                         
 MODHOUR                    Local  1602     I(4)            4           scalar                    1646                              
 MODMINUTE                  Local  1602     I(4)            4           scalar                    1646                              
 MODMONTH                   Local  1602     I(4)            4           scalar                    1646,1658                         
 MODSECOND                  Local  1602     I(4)            4           scalar                    1646                              
 MODYEAR                    Local  1602     I(4)            4           scalar                    1646,1670,1672,1679,1681          
 MONTH                      Local  1607     RECORD          16    1     2        TGT              1676,1685,1687,1695,1696,1697,1699
                                                                                                  ,1707,1708,1709,1711              
 MONTH1                     Local  1604     I(4)            4           scalar                    1652,1657,1658                    
 MPP_ERROR_IS               Subr   1617                                          PRIV             1617,1628,1692,1704,1716,2038,2049
                                                                                                  ,2113,2125,2136,2538,2549,2619,263
                                                                                                  1,2643,2992,3003,3099,3111,3123   
 N                          Local  1609     I(4)            4           scalar                    1818,1819,1820                    
 OBTAIN_INTERPOLATOR_TIME_S                                                                                                         
 LICES                      Subr   1587                                                                                             
 RETAIN_CM3_BUG             Local  1688     L(4)            4           scalar                    418,422,1688,1700,1712,2109,2121,2
                                                                                                  132,2615,2627,2639,3095,3107,3119 
 SECOND                     Local  1604     I(4)            4           scalar                    1652,1657                         
 SIZE                       Func   1614                                 scalar                    1614,1650,1727,1743,1765,1780,1818
                                                                                                  ,1829,1838,1858,1863              
 TAUM                       Local  1601     I(4)            4           scalar                    1615,1620,1626,1634,1647,1687,1689
                                                                                                  ,1699,1701,1711,1713,1766,1771,177
                                                                                                  5,1781,1786,1790,1819,1830,1831,18
                                                                                                  39,1840                           
 TAUP                       Local  1601     I(4)            4           scalar                    1615,1621,1626,1635,1687,1689,1699
                                                                                                  ,1701,1711,1713,1767,1774,1776,178
                                                                                                  2,1789,1791,1820,1833,1834,1842,18
                                                                                                  43,1859,1860,1864,1865            
 TIME                       Dummy  1587     TIME_TYPE       16          scalar   ARG,IN           1615,1626,1634,1635,1646,1687,1730
                                                                                                  ,1734,1737,1740,1746,1750,1753,175
                                                                                                  6,1771,1774,1786,1789,1830,1833,18
                                                                                                  39,1842,1859,1864                 
 TIME_GT                    Func   1634     L(4)            4           scalar   PRIV             1634,1635,2055,2056,2561,2562,3041
                                                                                                  ,3042                             
 TIME_INTERP                Local  1615                                 scalar   PRIV             155,1615,1626,1687,1699,1711,2036,
                                                                                                  2047,2108,2120,2131,2536,2547,2614
                                                                                                  ,2626,2638,2990,3001,3094,3106,311
                                                                                                  8                                 
 TIME_INTERP_LIST           Subr   1615                                          PRIV             1615,1626,1687,1699,1711,2036,2047
                                                                                                  ,2108,2120,2131,2536,2547,2614,262
                                                                                                  6,2638,2990,3001,3094,3106,3118   
 TIME_MINUS                 Func   1634     RECORD          16          scalar   PRIV             1634,1635,2055,2056,2561,2562,3041
                                                                                                  ,3042                             

Page 60          Source Listing                  OBTAIN_INTERPOLATOR_TIME_SLICES
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TRIM                       Func   1616                                 scalar                    1616,1617,1627,1628,1691,1692,1703
                                                                                                  ,1704,1715,1716                   
 T_NEXT                     Local  1606     TIME_TYPE       16          scalar                    1710,1711                         
 T_PREV                     Local  1606     TIME_TYPE       16          scalar                    1698,1699                         
 YEAR                       Param  1615     I(4)            4           scalar   PRIV             155,1615,2036,2536,2990           
 YEAR1                      Local  1604     I(4)            4           scalar                    1652,1653,1657                    
 YEARM                      Local  1608     I(4)            4           scalar                    1670,1672,1676,1698               
 YEARP                      Local  1608     I(4)            4           scalar                    1679,1681,1685,1710               

Page 61          Source Listing                  OBTAIN_INTERPOLATOR_TIME_SLICES
2021-06-01 08:55                                 interpolator.F90

   1879 
   1880 
   1881 !#####################################################################
   1882 !
   1883 !---------------------------------------------------------------------
   1884 !> \brief unset_interpolator_time_flag sets a flag in clim_type to
   1885 !!        false.
   1886 !!
   1887 !! \param [inout] <clim_type> The interpolate type containing the names of the fields in the climatology file
   1888 subroutine unset_interpolator_time_flag (clim_type)
   1889 
   1890 type(interpolate_type), intent(inout) :: clim_type
   1891 
   1892 
   1893       clim_type%separate_time_vary_calc = .false.
   1894 
   1895 
   1896 end subroutine unset_interpolator_time_flag


ENTRY POINTS

  Name                                                         
                                                               
 interpolator_mod_mp_unset_interpolator_time_flag_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLIM_TYPE                  Dummy  1888     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        1893                              
 UNSET_INTERPOLATOR_TIME_FL                                                                                                         
 AG                         Subr   1888                                                                                             

Page 62          Source Listing                  UNSET_INTERPOLATOR_TIME_FLAG
2021-06-01 08:55                                 interpolator.F90

   1897 
   1898 
   1899 
   1900 !#####################################################################
   1901 !
   1902 !---------------------------------------------------------------------
   1903 !> \brief interpolator_4D receives a field name as input and
   1904 !!        interpolates the field to model a 4D grid and time axis.
   1905 !!
   1906 !! \param [inout] <clim_type> The interpolate type previously defined by a call to interpolator_init
   1907 !! \param [in] <field_name> The name of a field that you wish to interpolate
   1908 !! \param [in] <Time> The model time that you wish to interpolate to
   1909 !! \param [in] <phalf> The half level model pressure field
   1910 !! \param [in] <is> OPTIONAL: Index for the physics window
   1911 !! \param [in] <js> OPTIONAL: Index for the physics window
   1912 !! \param [out] <interp_data> The model fields with the interpolated climatology data
   1913 !! \param [out] <clim_units> OPTIONAL: The units of field_name
   1914 !!
   1915 !! \throw FATAL "interpolator_4D : You must call interpolator_init
   1916 !!                    before calling interpolator"
   1917 !! \throw FATAL "interpolator_mod: cannot use 4D interface to interpolator for this file"
   1918 !! \throw FATAL "interpolator_4D 1:  file="
   1919 !! \throw FATAL "interpolator_4D 2:  file="
   1920 !! \throw FATAL "interpolator_4D 3:  file="
   1921 !! \throw FATAL "interpolator_4D 4:  file="
   1922 !! \throw FATAL "interpolator_4D 5:  file="
   1923 !! \throw FATAL "interpolator_3D : No data from the previous climatology
   1924 !!                    time but we have the next time. How did this happen?"
   1925 !! \throw NOTE "Interpolator: model surface pressure is greater than
   1926 !!              climatology surface pressure for "
   1927 !! \throw NOTE "Interpolator: model top pressure is less than
   1928 !!                    climatology top pressure for "
   1929 !! \throw FATAL "Interpolator: the field name is not contained in this
   1930 !!                    intepolate_type: "
   1931 subroutine interpolator_4D(clim_type, Time, phalf, interp_data,  &
   1932                            field_name, is,js, clim_units)
   1933 !
   1934 ! Return 4-D field interpolated to model grid and time
   1935 !
   1936 ! INTENT INOUT
   1937 !   clim_type   : The interpolate type previously defined by a call to interpolator_init
   1938 !
   1939 ! INTENT IN
   1940 !   field_name  : The name of a field that you wish to interpolate.
   1941 !                 all variables within this interpolate_type variable
   1942 !                 will be interpolated on this call. field_name may
   1943 !                 be any one of the variables.
   1944 !   Time        : The model time that you wish to interpolate to.
   1945 !   phalf       : The half level model pressure field.
   1946 !   is, js      : The indices of the physics window.
   1947 !
   1948 ! INTENT OUT
   1949 !   interp_data : The model fields with the interpolated climatology data.
   1950 !   clim_units  : The units of field_name
   1951 !
   1952 type(interpolate_type), intent(inout)  :: clim_type
   1953 character(len=*)      , intent(in)  :: field_name

Page 63          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55                                 interpolator.F90

   1954 type(time_type)       , intent(in)  :: Time
   1955 real, dimension(:,:,:), intent(in)  :: phalf
   1956 real, dimension(:,:,:,:), intent(out) :: interp_data
   1957 integer               , intent(in) , optional :: is,js
   1958 character(len=*)      , intent(out), optional :: clim_units
   1959 integer :: taum, taup, ilon
   1960 real :: hinterp_data(size(interp_data,1),size(interp_data,2),size(clim_type%levs(:)),size(clim_type%field_name(:)))
   1961 real :: p_fact(size(interp_data,1),size(interp_data,2))
   1962 real :: col_data(size(interp_data,1),size(interp_data,2),   &
   1963                            size(clim_type%field_name(:)))
   1964 real :: pclim(size(clim_type%halflevs(:)))
   1965 integer :: istart,iend,jstart,jend
   1966 logical :: result, found
   1967 logical :: found_field=.false.
   1968 integer :: modyear, modmonth, modday, modhour, modminute, modsecond
   1969 integer :: climyear, climmonth, climday, climhour, climminute, climsecond
   1970 integer :: year1, month1, day, hour, minute, second
   1971 integer :: climatology, m
   1972 type(time_type) :: t_prev, t_next
   1973 type(time_type), dimension(2) :: month
   1974 integer :: indexm, indexp, yearm, yearp
   1975 integer :: i, j, k, n
   1976 character(len=256) :: err_msg
   1977 
   1978 if (.not. module_is_initialized .or. .not. associated(clim_type%lon)) &
   1979    call mpp_error(FATAL, "interpolator_4D : You must call interpolator_init before calling interpolator")
   1980 
   1981    do n=2,size(clim_type%field_name(:))
   1982      if (clim_type%vert_interp(n) /= clim_type%vert_interp(n-1) .or. &
   1983       clim_type%out_of_bounds(n) /= clim_type%out_of_bounds(n-1)) then
   1984        if (mpp_pe() == mpp_root_pe() ) then
   1985          print *, 'processing file ' // trim(clim_type%file_name)
   1986        endif
   1987        call mpp_error (FATAL, 'interpolator_mod: &
   1988                &cannot use 4D interface to interpolator for this file')
   1989      endif
   1990    end do
   1991 
   1992 
   1993 
   1994 
   1995 istart = 1
   1996 if (present(is)) istart = is
   1997 iend = istart - 1 + size(interp_data,1)
   1998 
   1999 jstart = 1
   2000 if (present(js)) jstart = js
   2001 jend = jstart - 1 + size(interp_data,2)
   2002 
   2003   do i= 1,size(clim_type%field_name(:))
   2004 !!++lwh
   2005    if ( trim(adjustl(lowercase(field_name))) == trim(adjustl(lowercase(clim_type%field_name(i)))) ) then
   2006 !--lwh
   2007     found_field=.true.
   2008     exit
   2009  endif
   2010 end do

Page 64          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55                                 interpolator.F90

   2011    i = 1
   2012 
   2013     if(present(clim_units)) then
   2014       if (use_mpp_io) then
   2015          call mpp_get_atts(clim_type%field_type(i),units=clim_units)
   2016          clim_units = chomp(clim_units)
   2017       else
   2018          call get_variable_units(clim_type%fileobj, clim_type%field_name(i), clim_units)
   2019       endif
   2020     endif
   2021 
   2022 
   2023 !----------------------------------------------------------------------
   2024 !   skip the time interpolation portion of this routine if subroutine
   2025 !   obtain_interpolator_time_slices has already been called on this
   2026 !   stewp for this interpolate_type variable.
   2027 !----------------------------------------------------------------------
   2028 
   2029 if ( .not. clim_type%separate_time_vary_calc) then
   2030 !   print *, 'TIME INTERPOLATION NOT SEPARATED 4d--',  &
   2031 !                                trim(clim_type%file_name), mpp_pe()
   2032 
   2033     if (clim_type%climatological_year) then
   2034 !++lwh
   2035        if (size(clim_type%time_slice) > 1) then
   2036           call time_interp(Time, clim_type%time_slice, clim_type%tweight, taum, taup, modtime=YEAR, err_msg=err_msg )
   2037           if(trim(err_msg) /= '') then
   2038              call mpp_error(FATAL,'interpolator_4D 1: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2039           endif
   2040        else
   2041           taum = 1
   2042           taup = 1
   2043           clim_type%tweight = 0.
   2044        end if
   2045 !--lwh
   2046     else
   2047        call time_interp(Time, clim_type%time_slice, clim_type%tweight, taum, taup, err_msg=err_msg )
   2048        if(trim(err_msg) /= '') then
   2049           call mpp_error(FATAL,'interpolator_4D 2: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2050        endif
   2051     endif
   2052 
   2053     if(clim_type%TIME_FLAG .eq. BILINEAR ) then
   2054 ! Check if delta-time is greater than delta of first two climatology time-slices.
   2055       if ( (Time - clim_type%time_slice(taum) ) > ( clim_type%time_slice(2)- clim_type%time_slice(1) ) .or. &
   2056            (clim_type%time_slice(taup)  - Time) > ( clim_type%time_slice(2)- clim_type%time_slice(1) ) ) then
   2057 ! The difference between the model time and the last climatology time-slice previous to the model time.
   2058 ! We need 2 time levels.
   2059         clim_type%itaum=0
   2060         clim_type%itaup=0
   2061 ! Assume this is monthly data. So we need to get the data applicable to the model date but substitute
   2062 ! the climatology year into the appropriate place.
   2063 
   2064 
   2065 ! We need to get the previous months data for the climatology year before
   2066 ! and after the model year.
   2067         call get_date(Time, modyear, modmonth, modday, modhour, modminute, modsecond)

Page 65          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55                                 interpolator.F90

   2068         call get_date(clim_type%time_slice(taum), climyear, climmonth, climday, climhour, climminute, climsecond)
   2069 
   2070         climatology = 1
   2071         do m = 1, size(clim_type%clim_times(:,:),2)
   2072 !Assume here that a climatology is for 1 year and consists of 12 months starting in January.
   2073           call get_date(clim_type%clim_times(1,m), year1, month1, day, hour, minute, second)
   2074           if (year1 == climyear) climatology = m
   2075         enddo
   2076         do m = 1,12
   2077 !Find which month we are trying to look at and set clim_date[mp] to the dates spanning that.
   2078           call get_date(clim_type%clim_times(m,climatology), year1, month1, day, hour, minute, second)
   2079           if ( month1 == modmonth ) then
   2080 !RSHBUGFX   if ( modday <= day ) then
   2081             if ( modday <  day ) then
   2082               indexm = m-1 ; indexp = m
   2083             else
   2084               indexm = m ; indexp = m+1
   2085             endif
   2086           endif
   2087 
   2088         enddo
   2089         if ( indexm == 0 ) then
   2090           indexm = 12
   2091           yearm = modyear - 1
   2092         else
   2093           yearm = modyear
   2094         endif
   2095           call get_date(clim_type%time_slice(indexm+(climatology-1)*12), &
   2096                         climyear, climmonth, climday, climhour, climminute, climsecond)
   2097           month(1) = set_date(yearm, indexm, climday, climhour, climminute, climsecond)
   2098         if ( indexp == 13 ) then
   2099           indexp = 1
   2100           yearp = modyear + 1
   2101         else
   2102           yearp = modyear
   2103         endif
   2104           call get_date(clim_type%time_slice(indexp+(climatology-1)*12), &
   2105                         climyear, climmonth, climday, climhour, climminute, climsecond)
   2106           month(2) = set_date(yearp, indexp, climday, climhour, climminute, climsecond)
   2107 
   2108         call time_interp(Time, month, clim_type%tweight3, taum, taup, err_msg=err_msg ) ! tweight3 is the time weight betwee
   2108 n the months.
   2109         if ( .not. retain_cm3_bug ) then
   2110            if (taum==2 .and. taup==2) clim_type%tweight3 = 1. ! protect against post-perth time_interp behavior
   2111         end if
   2112         if(trim(err_msg) /= '') then
   2113            call mpp_error(FATAL,'interpolator_4D 3: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2114         endif
   2115 
   2116         month(1) = clim_type%time_slice(indexm+(climatology-1)*12)
   2117         month(2) = clim_type%time_slice(indexm+climatology*12)
   2118         call get_date(month(1), climyear, climmonth, climday, climhour, climminute, climsecond)
   2119         t_prev = set_date(yearm, climmonth, climday, climhour, climminute, climsecond)
   2120         call time_interp(t_prev, month, clim_type%tweight1, taum, taup, err_msg=err_msg ) !tweight1 is the time weight betwe
   2120 en the climatology years.
   2121         if ( .not. retain_cm3_bug ) then
   2122            if (taum==2 .and. taup==2) clim_type%tweight1 = 1. ! protect against post-perth time_interp behavior

Page 66          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55                                 interpolator.F90

   2123         end if
   2124         if(trim(err_msg) /= '') then
   2125            call mpp_error(FATAL,'interpolator_4D 4: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2126         endif
   2127         month(1) = clim_type%time_slice(indexp+(climatology-1)*12)
   2128         month(2) = clim_type%time_slice(indexp+climatology*12)
   2129         call get_date(month(1), climyear, climmonth, climday, climhour, climminute, climsecond)
   2130         t_next = set_date(yearp, climmonth, climday, climhour, climminute, climsecond)
   2131         call time_interp(t_next, month, clim_type%tweight2, taum, taup, err_msg=err_msg ) !tweight1 is the time weight betwe
   2131 en the climatology years.
   2132         if ( .not. retain_cm3_bug ) then
   2133            if (taum==2 .and. taup==2) clim_type%tweight2 = 1. ! protect against post-perth time_interp behavior
   2134         end if
   2135         if(trim(err_msg) /= '') then
   2136            call mpp_error(FATAL,'interpolator_4D 5: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2137         endif
   2138 
   2139         if (indexm == clim_type%indexm(1) .and.  &
   2140             indexp == clim_type%indexp(1) .and. &
   2141             climatology == clim_type%climatology(1)) then
   2142         else
   2143           clim_type%indexm(:) = indexm
   2144           clim_type%indexp(:) = indexp
   2145           clim_type%climatology(:) = climatology
   2146           if (use_mpp_io) then
   2147           do i=1, size(clim_type%field_name(:))
   2148             call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   2149              clim_type%pmon_pyear(:,:,:,i),   &
   2150              clim_type%indexm(i)+(clim_type%climatology(i)-1)*12,i,Time)
   2151 ! Read the data for the next month in the previous climatology.
   2152             call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   2153              clim_type%nmon_pyear(:,:,:,i),   &
   2154              clim_type%indexp(i)+(clim_type%climatology(i)-1)*12,i,Time)
   2155             call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   2156               clim_type%pmon_nyear(:,:,:,i),  &
   2157               clim_type%indexm(i)+clim_type%climatology(i)*12,i,Time)
   2158             call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   2159               clim_type%nmon_nyear(:,:,:,i),  &
   2160               clim_type%indexp(i)+clim_type%climatology(i)*12,i,Time)
   2161           end do
   2162           else
   2163           do i=1, size(clim_type%field_name(:))
   2164             call read_data(clim_type,clim_type%field_name(i),  &
   2165              clim_type%pmon_pyear(:,:,:,i),   &
   2166              clim_type%indexm(i)+(clim_type%climatology(i)-1)*12,i,Time)
   2167 ! Read the data for the next month in the previous climatology.
   2168             call read_data(clim_type,clim_type%field_name(i),  &
   2169              clim_type%nmon_pyear(:,:,:,i),   &
   2170              clim_type%indexp(i)+(clim_type%climatology(i)-1)*12,i,Time)
   2171             call read_data(clim_type,clim_type%field_name(i),  &
   2172               clim_type%pmon_nyear(:,:,:,i),  &
   2173               clim_type%indexm(i)+clim_type%climatology(i)*12,i,Time)
   2174             call read_data(clim_type,clim_type%field_name(i),  &
   2175               clim_type%nmon_nyear(:,:,:,i),  &
   2176               clim_type%indexp(i)+clim_type%climatology(i)*12,i,Time)
   2177           end do
   2178           endif !if (use_mpp_io)

Page 67          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55                                 interpolator.F90

   2179         endif
   2180 
   2181 
   2182 
   2183       else ! We are within a climatology data set
   2184 
   2185         if (use_mpp_io) then
   2186         do i=1, size(clim_type%field_name(:))
   2187           if (taum /= clim_type%time_init(i,1) .or. &
   2188               taup /= clim_type%time_init(i,2) ) then
   2189 
   2190 
   2191             call interp_read_data_mppio(clim_type,clim_type%field_type(i),   &
   2192                            clim_type%pmon_pyear(:,:,:,i), taum,i,Time)
   2193 ! Read the data for the next month in the previous climatology.
   2194             call interp_read_data_mppio(clim_type,clim_type%field_type(i),   &
   2195                            clim_type%nmon_pyear(:,:,:,i), taup,i,Time)
   2196             clim_type%time_init(i,1) = taum
   2197             clim_type%time_init(i,2) = taup
   2198           endif
   2199         end do
   2200         else
   2201         do i=1, size(clim_type%field_name(:))
   2202           if (taum /= clim_type%time_init(i,1) .or. &
   2203               taup /= clim_type%time_init(i,2) ) then
   2204 
   2205 
   2206             call read_data(clim_type,clim_type%field_name(i),   &
   2207                            clim_type%pmon_pyear(:,:,:,i), taum,i,Time)
   2208 ! Read the data for the next month in the previous climatology.
   2209             call read_data(clim_type,clim_type%field_name(i),   &
   2210                            clim_type%nmon_pyear(:,:,:,i), taup,i,Time)
   2211             clim_type%time_init(i,1) = taum
   2212             clim_type%time_init(i,2) = taup
   2213           endif
   2214         end do
   2215         endif
   2216 !       clim_type%pmon_nyear = 0.0
   2217 !       clim_type%nmon_nyear = 0.0
   2218 
   2219 ! set to zero so when next return to bilinear section will be sure to
   2220 ! have proper data (relevant when running fixed_year case for more than
   2221 ! one year in a single job)
   2222           clim_type%indexm(:) = 0
   2223           clim_type%indexp(:) = 0
   2224           clim_type%climatology(:) = 0
   2225 
   2226 
   2227 !       clim_type%tweight3 = 0.0 ! This makes [pn]mon_nyear irrelevant. Set them to 0 to test.
   2228         clim_type%tweight1 = 0.0
   2229         clim_type%tweight2 = 0.0
   2230         clim_type%tweight3 = clim_type%tweight
   2231       endif
   2232     endif   !(BILINEAR)
   2233 
   2234     if(clim_type%TIME_FLAG .eq. LINEAR  .and.   &
   2235         (.not. read_all_on_init) ) then

Page 68          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55                                 interpolator.F90

   2236 ! We need 2 time levels. Check we have the correct data.
   2237       clim_type%itaum=0
   2238       clim_type%itaup=0
   2239       do n=1,size(clim_type%time_init,2)
   2240         if (clim_type%time_init(1,n) .eq. taum ) clim_type%itaum = n
   2241         if (clim_type%time_init(1,n) .eq. taup ) clim_type%itaup = n
   2242       enddo
   2243 
   2244       if (clim_type%itaum.eq.0 .and. clim_type%itaup.eq.0) then
   2245 !Neither time is set so we need to read 2 time slices.
   2246 !Set up
   2247 ! field(:,:,:,1) as the previous time slice.
   2248 ! field(:,:,:,2) as the next time slice.
   2249     if (use_mpp_io) then
   2250     do i=1, size(clim_type%field_name(:))
   2251     call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,1,i), taum,i,Time)
   2252           clim_type%time_init(i,1) = taum
   2253           clim_type%itaum = 1
   2254     call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,2,i), taup,i,Time)
   2255           clim_type%time_init(i,2) = taup
   2256           clim_type%itaup = 2
   2257     end do
   2258     else
   2259     do i=1, size(clim_type%field_name(:))
   2260     call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,1,i), taum,i,Time)
   2261           clim_type%time_init(i,1) = taum
   2262           clim_type%itaum = 1
   2263     call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,2,i), taup,i,Time)
   2264           clim_type%time_init(i,2) = taup
   2265           clim_type%itaup = 2
   2266     end do
   2267     endif !if (use_mpp_io)
   2268       endif ! clim_type%itaum.eq.clim_type%itaup.eq.0
   2269       if (clim_type%itaum.eq.0 .and. clim_type%itaup.ne.0) then
   2270 ! Can't think of a situation where we would have the next time level but not the previous.
   2271  call mpp_error(FATAL,'interpolator_3D : No data from the previous climatology time &
   2272                          & but we have the next time. How did this happen?')
   2273       endif
   2274       if (clim_type%itaum.ne.0 .and. clim_type%itaup.eq.0) then
   2275 !We have the previous time step but not the next time step data
   2276         clim_type%itaup = 1
   2277         if (clim_type%itaum .eq. 1 ) clim_type%itaup = 2
   2278     if (use_mpp_io) then
   2279     do i=1, size(clim_type%field_name(:))
   2280         call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,clim_type%itaup,i), taup,i, Time
   2280 )
   2281         clim_type%time_init(i,clim_type%itaup)=taup
   2282      end do
   2283     else
   2284     do i=1, size(clim_type%field_name(:))
   2285         call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,clim_type%itaup,i), taup,i, Time)
   2286         clim_type%time_init(i,clim_type%itaup)=taup
   2287      end do
   2288      endif !if (use_mpp_io)
   2289       endif
   2290 
   2291 

Page 69          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55                                 interpolator.F90

   2292     endif! TIME_FLAG
   2293 
   2294 
   2295 endif ! (.not. separate_time_vary_calc)
   2296 
   2297 
   2298 select case(clim_type%TIME_FLAG)
   2299   case (LINEAR)
   2300     do n=1, size(clim_type%field_name(:))
   2301       hinterp_data(:,:,:,n) = (1.-clim_type%tweight)*  &
   2302                 clim_type%data(istart:iend,jstart:jend,:,clim_type%itaum,n)  +  &
   2303                                  clim_type%tweight*   &
   2304                 clim_type%data(istart:iend,jstart:jend,:,clim_type%itaup,n)
   2305     end do
   2306 ! case (SEASONAL)
   2307 ! Do sine fit to data at this point
   2308   case (BILINEAR)
   2309     do n=1, size(clim_type%field_name(:))
   2310       hinterp_data(:,:,:,n) = (1.-clim_type%tweight1)*(1.-clim_type%tweight3)*   &
   2311                    clim_type%pmon_pyear(istart:iend,jstart:jend,:,n) + &
   2312                               (1.-clim_type%tweight2)*clim_type%tweight3*    &
   2313                    clim_type%nmon_pyear(istart:iend,jstart:jend,:,n) + &
   2314                                clim_type%tweight1* (1.-clim_type%tweight3)*  &
   2315                    clim_type%pmon_nyear(istart:iend,jstart:jend,:,n) + &
   2316                                clim_type%tweight2* clim_type%tweight3*   &
   2317                    clim_type%nmon_nyear(istart:iend,jstart:jend,:,n)
   2318 
   2319     end do
   2320 
   2321 end select
   2322 
   2323 select case(clim_type%level_type)
   2324   case(PRESSURE)
   2325     p_fact = 1.0
   2326   case(SIGMA)
   2327     p_fact = maxval(phalf,3)! max pressure in the column !(:,:,size(phalf,3))
   2328 end select
   2329 
   2330 col_data(:,:,:)=0.0
   2331      do i= 1, size(clim_type%field_name(:))
   2332 
   2333 select case(clim_type%mr(i))
   2334   case(NO_CONV)
   2335     do k = 1,size(hinterp_data,3)
   2336    col_data(:,:,i) = col_data(:,:,i) + hinterp_data(:,:,k,i)* &
   2337       (clim_type%halflevs(k+1)-clim_type%halflevs(k))/grav
   2338     enddo
   2339 
   2340   case(KG_M2)
   2341     do k = 1,size(hinterp_data,3)
   2342        col_data(:,:,i) = col_data(:,:,i) + hinterp_data(:,:,k,i)
   2343        hinterp_data(:,:,k,i) = hinterp_data(:,:,k,i)/ &
   2344          ((clim_type%halflevs(k+1)-clim_type%halflevs(k))*p_fact)
   2345     enddo
   2346 end select
   2347     enddo
   2348 

Page 70          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55                                 interpolator.F90

   2349      do i= 1, size(clim_type%field_name(:))
   2350 found = .false.
   2351 do j = 1,size(climo_diag_name(:))
   2352   if ( trim(adjustl(lowercase(climo_diag_name(j)))) .eq. trim(adjustl(lowercase(clim_type%field_name(i))))) then
   2353     found = .true.
   2354     exit
   2355   endif
   2356 enddo
   2357 
   2358 if (found) then
   2359   if (hinterp_id(j) > 0 ) then
   2360        result = send_data(hinterp_id(j),col_data(:,:,i),Time,is_in=istart,js_in=jstart)
   2361   endif
   2362 endif
   2363 
   2364   end do
   2365 
   2366    i = 1
   2367 
   2368 !++lwh
   2369 do j = 1, size(phalf,2)
   2370    do ilon=1,size(phalf,1)
   2371       pclim = p_fact(ilon,j)*clim_type%halflevs
   2372       if ( maxval(phalf(ilon,j,:)) > maxval(pclim) ) then
   2373          if (verbose > 3) then
   2374          call mpp_error(NOTE,"Interpolator: model surface pressure&
   2375                              & is greater than climatology surface pressure for "&
   2376                              // trim(clim_type%file_name))
   2377          endif
   2378          select case(clim_type%out_of_bounds(i))
   2379             case(CONSTANT)
   2380                pclim( maxloc(pclim) ) = maxval( phalf(ilon,j,:) )
   2381 !           case(ZERO)
   2382 !              pclim( maxloc(pclim)) = 0
   2383          end select
   2384       endif
   2385       if ( minval(phalf(ilon,j,:)) < minval(pclim) ) then
   2386          if (verbose > 3) then
   2387          call mpp_error(NOTE,"Interpolator: model top pressure&
   2388                              & is less than climatology top pressure for "&
   2389                              // trim(clim_type%file_name))
   2390          endif
   2391          select case(clim_type%out_of_bounds(i))
   2392             case(CONSTANT)
   2393                pclim( minloc(pclim) ) = minval( phalf(ilon,j,:) )
   2394 !           case(ZERO)
   2395 !              pclim( maxloc(pclim)) = 0
   2396          end select
   2397       endif
   2398       select case(clim_type%vert_interp(i))
   2399          case(INTERP_WEIGHTED_P)
   2400             call interp_weighted_scalar(pclim, phalf(ilon,j,:),hinterp_data(ilon,j,:,:),interp_data(ilon,j,:,:))
   2401          case(INTERP_LINEAR_P)
   2402           do n=1, size(clim_type%field_name(:))
   2403             call interp_linear(pclim, phalf(ilon,j,:),hinterp_data(ilon,j,:,n),interp_data(ilon,j,:,n))
   2404           end do
   2405 !        case(INTERP_LOG)

Page 71          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55                                 interpolator.F90

   2406       end select
   2407    enddo
   2408 enddo
   2409 
   2410 !--lwh
   2411      do i= 1, size(clim_type%field_name(:))
   2412 
   2413 select case(clim_type%mr(i))
   2414   case(KG_M2)
   2415     do k = 1,size(interp_data,3)
   2416        interp_data(:,:,k,i) = interp_data(:,:,k,i)*(phalf(:,:,k+1)-phalf(:,:,k))
   2417     enddo
   2418 end select
   2419 
   2420      end do
   2421 
   2422 if( .not. found_field) then !field name is not in interpolator file.ERROR.
   2423   call mpp_error(FATAL,"Interpolator: the field name is not contained in this &
   2424                    &intepolate_type: "//trim(field_name))
   2425 endif
   2426 end subroutine interpolator_4D


ENTRY POINTS

  Name                                            
                                                  
 interpolator_mod_mp_interpolator_4d_             

Page 72          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55 Symbol Table                    interpolator.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   2005                                 scalar                    2005,2352                         
 ASSOCIATED                 Func   1978                                 scalar                    1978                              
 CLIMATOLOGY                Local  1971     I(4)            4           scalar                    2070,2074,2078,2095,2104,2116,2117
                                                                                                  ,2127,2128,2141,2145              
 CLIMDAY                    Local  1969     I(4)            4           scalar                    2068,2096,2097,2105,2106,2118,2119
                                                                                                  ,2129,2130                        
 CLIMHOUR                   Local  1969     I(4)            4           scalar                    2068,2096,2097,2105,2106,2118,2119
                                                                                                  ,2129,2130                        
 CLIMMINUTE                 Local  1969     I(4)            4           scalar                    2068,2096,2097,2105,2106,2118,2119
                                                                                                  ,2129,2130                        
 CLIMMONTH                  Local  1969     I(4)            4           scalar                    2068,2096,2105,2118,2119,2129,2130
 CLIMSECOND                 Local  1969     I(4)            4           scalar                    2068,2096,2097,2105,2106,2118,2119
                                                                                                  ,2129,2130                        
 CLIMYEAR                   Local  1969     I(4)            4           scalar                    2068,2074,2096,2105,2118,2129     
 CLIM_TYPE                  Dummy  1931     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        1960,1963,1964,1978,1981,1982,1983
                                                                                                  ,1985,2003,2005,2015,2018,2029,203
                                                                                                  3,2035,2036,2038,2043,2047,2049,20
                                                                                                  53,2055,2056,2059,2060,2068,2071,2
                                                                                                  073,2078,2095,2104,2108,2110,2113,
                                                                                                  2116,2117,2120,2122,2125,2127,2128
                                                                                                  ,2131,2133,2136,2139,2140,2141,214
                                                                                                  3,2144,2145,2147,2148,2149,2150,21
                                                                                                  52,2153,2154,2155,2156,2157,2158,2
                                                                                                  159,2160,2163,2164,2165,2166,2168,
                                                                                                  2169,2170,2171,2172,2173,2174,2175
                                                                                                  ,2176,2186,2187,2188,2191,2192,219
                                                                                                  4,2195,2196,2197,2201,2202,2203,22
                                                                                                  06,2207,2209,2210,2211,2212,2222,2
                                                                                                  223,2224,2228,2229,2230,2234,2237,
                                                                                                  2238,2239,2240,2241,2244,2250,2251
                                                                                                  ,2252,2253,2254,2255,2256,2259,226
                                                                                                  0,2261,2262,2263,2264,2265,2269,22
                                                                                                  74,2276,2277,2279,2280,2281,2284,2
                                                                                                  285,2286,2298,2300,2301,2302,2303,
                                                                                                  2304,2309,2310,2311,2312,2313,2314
                                                                                                  ,2315,2316,2317,2323,2331,2333,233
                                                                                                  7,2344,2349,2352,2371,2376,2378,23
                                                                                                  89,2391,2398,2402,2411,2413       
 CLIM_UNITS                 Dummy  1932     CHAR                        scalar   ARG,OUT          2013,2015,2016,2018               
 COL_DATA                   Local  1962     R(8)            8     3     0        TGT              2330,2336,2342,2360               
 DAY                        Local  1970     I(4)            4           scalar                    2073,2078,2081                    
 ERR_MSG                    Local  1976     CHAR            256         scalar                    2036,2037,2038,2047,2048,2049,2108
                                                                                                  ,2112,2113,2120,2124,2125,2131,213
                                                                                                  5,2136                            
 FIELD_NAME                 Dummy  1932     CHAR                        scalar   ARG,IN           2005,2424                         
 FOUND                      Local  1966     L(4)            4           scalar                    2350,2353,2358                    
 FOUND_FIELD                Local  1967     L(4)            4           scalar                    1967,2007,2422                    
 GRAV                       Param  2337     R(8)            8           scalar   PRIV             156,2337,2810,3916                
 HINTERP_DATA               Local  1960     R(8)            8     4     0        TGT              2301,2310,2335,2336,2341,2342,2343
                                                                                                  ,2400,2403                        

Page 73          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 HOUR                       Local  1970     I(4)            4           scalar                    2073,2078                         
 I                          Local  1975     I(4)            4           scalar                    2003,2005,2011,2015,2018,2147,2148
                                                                                                  ,2149,2150,2152,2153,2154,2155,215
                                                                                                  6,2157,2158,2159,2160,2163,2164,21
                                                                                                  65,2166,2168,2169,2170,2171,2172,2
                                                                                                  173,2174,2175,2176,2186,2187,2188,
                                                                                                  2191,2192,2194,2195,2196,2197,2201
                                                                                                  ,2202,2203,2206,2207,2209,2210,221
                                                                                                  1,2212,2250,2251,2252,2254,2255,22
                                                                                                  59,2260,2261,2263,2264,2279,2280,2
                                                                                                  281,2284,2285,2286,2331,2333,2336,
                                                                                                  2342,2343,2349,2352,2360,2366,2378
                                                                                                  ,2391,2398,2411,2413,2416         
 IEND                       Local  1965     I(4)            4           scalar                    1997,2302,2304,2311,2313,2315,2317
 ILON                       Local  1959     I(4)            4           scalar                    2370,2371,2372,2380,2385,2393,2400
                                                                                                  ,2403                             
 INDEXM                     Local  1974     I(4)            4           scalar                    2082,2084,2089,2090,2095,2097,2116
                                                                                                  ,2117,2139,2143                   
 INDEXP                     Local  1974     I(4)            4           scalar                    2082,2084,2098,2099,2104,2106,2127
                                                                                                  ,2128,2140,2144                   
 INTERPOLATOR_4D            Subr   1931                                          PRIV                                               
 INTERP_DATA                Dummy  1931     R(8)            8     4     1        ARG,OUT          1960,1961,1962,1997,2001,2400,2403
                                                                                                  ,2415,2416                        
 INTERP_WEIGHTED_SCALAR     Local  2400                                 scalar                    2400,2868,3441,3583               
 IS                         Dummy  1932     I(4)            4           scalar   ARG,IN           1996                              
 ISTART                     Local  1965     I(4)            4           scalar                    1995,1996,1997,2302,2304,2311,2313
                                                                                                  ,2315,2317,2360                   
 J                          Local  1975     I(4)            4           scalar                    2351,2352,2359,2360,2369,2371,2372
                                                                                                  ,2380,2385,2393,2400,2403         
 JEND                       Local  1965     I(4)            4           scalar                    2001,2302,2304,2311,2313,2315,2317
 JS                         Dummy  1932     I(4)            4           scalar   ARG,IN           2000                              
 JSTART                     Local  1965     I(4)            4           scalar                    1999,2000,2001,2302,2304,2311,2313
                                                                                                  ,2315,2317,2360                   
 K                          Local  1975     I(4)            4           scalar                    2335,2336,2337,2341,2342,2343,2344
                                                                                                  ,2415,2416                        
 M                          Local  1971     I(4)            4           scalar                    2071,2073,2074,2076,2078,2082,2084
 MAXLOC                     Func   2380                                 scalar                    2380                              
 MAXVAL                     Func   2327                                 scalar                    2327,2372,2380                    
 MINLOC                     Func   2393                                 scalar                    2393                              
 MINUTE                     Local  1970     I(4)            4           scalar                    2073,2078                         
 MINVAL                     Func   2385                                 scalar                    2385,2393                         
 MODDAY                     Local  1968     I(4)            4           scalar                    2067,2081                         
 MODHOUR                    Local  1968     I(4)            4           scalar                    2067                              
 MODMINUTE                  Local  1968     I(4)            4           scalar                    2067                              
 MODMONTH                   Local  1968     I(4)            4           scalar                    2067,2079                         
 MODSECOND                  Local  1968     I(4)            4           scalar                    2067                              
 MODYEAR                    Local  1968     I(4)            4           scalar                    2067,2091,2093,2100,2102          
 MONTH                      Local  1973     RECORD          16    1     2        TGT              2097,2106,2108,2116,2117,2118,2120
                                                                                                  ,2127,2128,2129,2131              
 MONTH1                     Local  1970     I(4)            4           scalar                    2073,2078,2079                    
 MPP_GET_ATTS               Local  2015                                 scalar   PRIV             96,2015,4245,4762,4804            
 MPP_GET_FIELD_ATTS         Subr   2015                                          PRIV             2015,4762,4804                    
 N                          Local  1975     I(4)            4           scalar                    1981,1982,1983,2239,2240,2241,2300
                                                                                                  ,2301,2302,2304,2309,2310,2311,231
                                                                                                  3,2315,2317,2402,2403             

Page 74          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PCLIM                      Local  1964     R(8)            8     1     0        TGT              2371,2372,2380,2385,2393,2400,2403
 PHALF                      Dummy  1931     R(8)            8     3     1        ARG,IN           2327,2369,2370,2372,2380,2385,2393
                                                                                                  ,2400,2403,2416                   
 PRESENT                    Func   1996                                 scalar                    1996,2000,2013                    
 P_FACT                     Local  1961     R(8)            8     2     0                         2325,2327,2344,2371               
 RESULT                     Local  1966     L(4)            4           scalar                    2360                              
 SECOND                     Local  1970     I(4)            4           scalar                    2073,2078                         
 SEND_DATA                  Local  2360                                 scalar   PRIV             118,2360,2831,3284,3918           
 SEND_DATA_2D               Func   2360     L(4)            4           scalar   PRIV             2360,2831,3918                    
 SIZE                       Func   1960                                 scalar                    1960,1961,1962,1963,1964,1981,1997
                                                                                                  ,2001,2003,2035,2071,2147,2163,218
                                                                                                  6,2201,2239,2250,2259,2279,2284,23
                                                                                                  00,2309,2331,2335,2341,2349,2351,2
                                                                                                  369,2370,2402,2411,2415           
 TAUM                       Local  1959     I(4)            4           scalar                    2036,2041,2047,2055,2068,2108,2110
                                                                                                  ,2120,2122,2131,2133,2187,2192,219
                                                                                                  6,2202,2207,2211,2240,2251,2252,22
                                                                                                  60,2261                           
 TAUP                       Local  1959     I(4)            4           scalar                    2036,2042,2047,2056,2108,2110,2120
                                                                                                  ,2122,2131,2133,2188,2195,2197,220
                                                                                                  3,2210,2212,2241,2254,2255,2263,22
                                                                                                  64,2280,2281,2285,2286            
 TIME                       Dummy  1931     TIME_TYPE       16          scalar   ARG,IN           2036,2047,2055,2056,2067,2108,2150
                                                                                                  ,2154,2157,2160,2166,2170,2173,217
                                                                                                  6,2192,2195,2207,2210,2251,2254,22
                                                                                                  60,2263,2280,2285,2360            
 TRIM                       Func   1985                                 scalar                    1985,2005,2037,2038,2048,2049,2112
                                                                                                  ,2113,2124,2125,2135,2136,2352,237
                                                                                                  6,2389,2424                       
 T_NEXT                     Local  1972     TIME_TYPE       16          scalar                    2130,2131                         
 T_PREV                     Local  1972     TIME_TYPE       16          scalar                    2119,2120                         
 VERBOSE                    Local  2373     I(4)            4           scalar                    416,422,2373,2386,2841,2854,3418,3
                                                                                                  429,3560,3571                     
 YEAR1                      Local  1970     I(4)            4           scalar                    2073,2074,2078                    
 YEARM                      Local  1974     I(4)            4           scalar                    2091,2093,2097,2119               
 YEARP                      Local  1974     I(4)            4           scalar                    2100,2102,2106,2130               

Page 75          Source Listing                  INTERPOLATOR_4D
2021-06-01 08:55                                 interpolator.F90

   2427 !
   2428 !#######################################################################
   2429 !#######################################################################
   2430 !
   2431 !---------------------------------------------------------------------
   2432 !> \brief interpolator_3D receives a field name as input and
   2433 !!        interpolates the field to model a 3D grid and time axis.
   2434 !!
   2435 !! \param [inout] <clim_type> The interpolate type previously defined by a call to interpolator_init
   2436 !! \param [in] <field_name> The name of a field that you wish to interpolate
   2437 !! \param [in] <Time> The model time that you wish to interpolate to
   2438 !! \param [in] <phalf> The half level model pressure field
   2439 !! \param [in] <is> OPTIONAL: Index for the physics window
   2440 !! \param [in] <js> OPTIONAL: Index for the physics window
   2441 !! \param [out] <interp_data> The model fields with the interpolated climatology data
   2442 !! \param [out] <clim_units> OPTIONAL: The units of field_name
   2443 !!
   2444 !! \throw FATAL "interpolator_3D : You must call interpolator_init
   2445 !!                    before calling interpolator"
   2446 !! \throw FATAL "interpolator_3D 1:  file="
   2447 !! \throw FATAL "interpolator_3D 2:  file="
   2448 !! \throw FATAL "interpolator_3D 3:  file="
   2449 !! \throw FATAL "interpolator_3D 4:  file="
   2450 !! \throw FATAL "interpolator_3D 5:  file="
   2451 !! \throw FATAL "interpolator_3D : No data from the previous climatology
   2452 !!                    time but we have the next time. How did this happen?"
   2453 !! \throw NOTE "Interpolator: model surface pressure is greater than
   2454 !!              climatology surface pressure for "
   2455 !! \throw NOTE "Interpolator: model top pressure is less than
   2456 !!                    climatology top pressure for "
   2457 !! \throw FATAL "Interpolator: the field name is not contained in this
   2458 !!                    intepolate_type: "
   2459 subroutine interpolator_3D(clim_type, Time, phalf, interp_data,field_name, is,js, clim_units)
   2460 !
   2461 ! Return 3-D field interpolated to model grid and time
   2462 !
   2463 ! INTENT INOUT
   2464 !   clim_type   : The interpolate type previously defined by a call to interpolator_init
   2465 !
   2466 ! INTENT IN
   2467 !   field_name  : The name of the field that you wish to interpolate.
   2468 !   Time        : The model time that you wish to interpolate to.
   2469 !   phalf       : The half level model pressure field.
   2470 !   is, js      : The indices of the physics window.
   2471 !
   2472 ! INTENT OUT
   2473 !   interp_data : The model field with the interpolated climatology data.
   2474 !   clim_units  : The units of field_name
   2475 !
   2476 type(interpolate_type), intent(inout)  :: clim_type
   2477 character(len=*)      , intent(in)  :: field_name
   2478 type(time_type)       , intent(in)  :: Time
   2479 real, dimension(:,:,:), intent(in)  :: phalf
   2480 real, dimension(:,:,:), intent(out) :: interp_data
   2481 integer               , intent(in) , optional :: is,js
   2482 character(len=*)      , intent(out), optional :: clim_units
   2483 integer :: taum, taup, ilon

Page 76          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55                                 interpolator.F90

   2484 real :: hinterp_data(size(interp_data,1),size(interp_data,2),size(clim_type%levs(:)))
   2485 real :: p_fact(size(interp_data,1),size(interp_data,2))
   2486 real :: col_data(size(interp_data,1),size(interp_data,2))
   2487 real :: pclim(size(clim_type%halflevs(:)))
   2488 integer :: istart,iend,jstart,jend
   2489 logical :: result, found
   2490 logical :: found_field=.false.
   2491 integer :: modyear, modmonth, modday, modhour, modminute, modsecond
   2492 integer :: climyear, climmonth, climday, climhour, climminute, climsecond
   2493 integer :: year1, month1, day, hour, minute, second
   2494 integer :: climatology, m
   2495 type(time_type) :: t_prev, t_next
   2496 type(time_type), dimension(2) :: month
   2497 integer :: indexm, indexp, yearm, yearp
   2498 integer :: i, j, k, n
   2499 character(len=256) :: err_msg
   2500 
   2501 
   2502 
   2503 if (.not. module_is_initialized .or. .not. associated(clim_type%lon)) &
   2504    call mpp_error(FATAL, "interpolator_3D : You must call interpolator_init before calling interpolator")
   2505 
   2506 istart = 1
   2507 if (present(is)) istart = is
   2508 iend = istart - 1 + size(interp_data,1)
   2509 
   2510 jstart = 1
   2511 if (present(js)) jstart = js
   2512 jend = jstart - 1 + size(interp_data,2)
   2513 
   2514 do i= 1,size(clim_type%field_name(:))
   2515 !++lwh
   2516   if ( trim(adjustl(lowercase(field_name))) == trim(adjustl(lowercase(clim_type%field_name(i)))) ) then
   2517 !--lwh
   2518     found_field=.true.
   2519     if(present(clim_units)) then
   2520       call get_variable_units(clim_type%fileobj, clim_type%field_name(i), clim_units)
   2521       clim_units = chomp(clim_units)
   2522     endif
   2523 
   2524 !----------------------------------------------------------------------
   2525 !   skip the time interpolation portion of this routine if subroutine
   2526 !   obtain_interpolator_time_slices has already been called on this
   2527 !   stewp for this interpolate_type variable.
   2528 !----------------------------------------------------------------------
   2529 
   2530 if ( .not. clim_type%separate_time_vary_calc) then
   2531 !   print *, 'TIME INTERPOLATION NOT SEPARATED 3d--',  &
   2532 !                                trim(clim_type%file_name), mpp_pe()
   2533     if (clim_type%climatological_year) then
   2534 !++lwh
   2535        if (size(clim_type%time_slice) > 1) then
   2536           call time_interp(Time, clim_type%time_slice, clim_type%tweight, taum, taup, modtime=YEAR, err_msg=err_msg )
   2537           if(trim(err_msg) /= '') then
   2538              call mpp_error(FATAL,'interpolator_3D 1: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2539           endif
   2540        else

Page 77          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55                                 interpolator.F90

   2541           taum = 1
   2542           taup = 1
   2543           clim_type%tweight = 0.
   2544        end if
   2545 !--lwh
   2546     else
   2547        call time_interp(Time, clim_type%time_slice, clim_type%tweight, taum, taup, err_msg=err_msg )
   2548        if(trim(err_msg) /= '') then
   2549           call mpp_error(FATAL,'interpolator_3D 2: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2550        endif
   2551     endif
   2552 
   2553 !   if(clim_type%TIME_FLAG .ne. LINEAR ) then
   2554     if(clim_type%TIME_FLAG .ne. LINEAR .or. read_all_on_init ) then
   2555       clim_type%itaum=taum
   2556       clim_type%itaup=taup
   2557     endif
   2558 
   2559     if(clim_type%TIME_FLAG .eq. BILINEAR ) then
   2560 ! Check if delta-time is greater than delta of first two climatology time-slices.
   2561       if ( (Time - clim_type%time_slice(taum) ) > ( clim_type%time_slice(2)- clim_type%time_slice(1) ) .or. &
   2562            (clim_type%time_slice(taup)  - Time) > ( clim_type%time_slice(2)- clim_type%time_slice(1) ) ) then
   2563 ! The difference between the model time and the last climatology time-slice previous to the model time.
   2564 ! We need 2 time levels.
   2565         clim_type%itaum=0
   2566         clim_type%itaup=0
   2567 ! Assume this is monthly data. So we need to get the data applicable to the model date but substitute
   2568 ! the climatology year into the appropriate place.
   2569 
   2570 
   2571 ! We need to get the previous months data for the climatology year before
   2572 ! and after the model year.
   2573         call get_date(Time, modyear, modmonth, modday, modhour, modminute, modsecond)
   2574         call get_date(clim_type%time_slice(taum), climyear, climmonth, climday, climhour, climminute, climsecond)
   2575 
   2576         climatology = 1
   2577         do m = 1, size(clim_type%clim_times(:,:),2)
   2578 !Assume here that a climatology is for 1 year and consists of 12 months starting in January.
   2579           call get_date(clim_type%clim_times(1,m), year1, month1, day, hour, minute, second)
   2580           if (year1 == climyear) climatology = m
   2581         enddo
   2582         do m = 1,12
   2583 !Find which month we are trying to look at and set clim_date[mp] to the dates spanning that.
   2584           call get_date(clim_type%clim_times(m,climatology), year1, month1, day, hour, minute, second)
   2585           if ( month1 == modmonth ) then
   2586 !RSHBUGFX   if ( modday <= day ) then
   2587             if ( modday <  day ) then
   2588               indexm = m-1 ; indexp = m
   2589             else
   2590               indexm = m ; indexp = m+1
   2591             endif
   2592           endif
   2593 
   2594         enddo
   2595         if ( indexm == 0 ) then
   2596           indexm = 12
   2597           yearm = modyear - 1

Page 78          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55                                 interpolator.F90

   2598         else
   2599           yearm = modyear
   2600         endif
   2601         call get_date(clim_type%time_slice(indexm+(climatology-1)*12), &
   2602                       climyear, climmonth, climday, climhour, climminute, climsecond)
   2603         month(1) = set_date(yearm, indexm, climday, climhour, climminute, climsecond)
   2604         if ( indexp == 13 ) then
   2605           indexp = 1
   2606           yearp = modyear + 1
   2607         else
   2608           yearp = modyear
   2609         endif
   2610         call get_date(clim_type%time_slice(indexp+(climatology-1)*12), &
   2611                       climyear, climmonth, climday, climhour, climminute, climsecond)
   2612         month(2) = set_date(yearp, indexp, climday, climhour, climminute, climsecond)
   2613 
   2614         call time_interp(Time, month, clim_type%tweight3, taum, taup, err_msg=err_msg ) ! tweight3 is the time weight betwee
   2614 n the months.
   2615         if ( .not. retain_cm3_bug ) then
   2616            if (taum==2 .and. taup==2) clim_type%tweight3 = 1. ! protect against post-perth time_interp behavior
   2617         end if
   2618         if(trim(err_msg) /= '') then
   2619            call mpp_error(FATAL,'interpolator_3D 3: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2620         endif
   2621 
   2622         month(1) = clim_type%time_slice(indexm+(climatology-1)*12)
   2623         month(2) = clim_type%time_slice(indexm+climatology*12)
   2624         call get_date(month(1), climyear, climmonth, climday, climhour, climminute, climsecond)
   2625         t_prev = set_date(yearm, climmonth, climday, climhour, climminute, climsecond)
   2626         call time_interp(t_prev, month, clim_type%tweight1, taum, taup, err_msg=err_msg ) !tweight1 is the time weight betwe
   2626 en the climatology years.
   2627         if ( .not. retain_cm3_bug ) then
   2628            if (taum==2 .and. taup==2) clim_type%tweight1 = 1. ! protect against post-perth time_interp behavior
   2629         end if
   2630         if(trim(err_msg) /= '') then
   2631            call mpp_error(FATAL,'interpolator_3D 4: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2632         endif
   2633 
   2634         month(1) = clim_type%time_slice(indexp+(climatology-1)*12)
   2635         month(2) = clim_type%time_slice(indexp+climatology*12)
   2636         call get_date(month(1), climyear, climmonth, climday, climhour, climminute, climsecond)
   2637         t_next = set_date(yearp, climmonth, climday, climhour, climminute, climsecond)
   2638         call time_interp(t_next, month, clim_type%tweight2, taum, taup, err_msg=err_msg ) !tweight1 is the time weight betwe
   2638 en the climatology years.
   2639         if ( .not. retain_cm3_bug ) then
   2640            if (taum==2 .and. taup==2) clim_type%tweight2 = 1. ! protect against post-perth time_interp behavior
   2641         end if
   2642         if(trim(err_msg) /= '') then
   2643            call mpp_error(FATAL,'interpolator_3D 5: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2644         endif
   2645 
   2646 
   2647         if (indexm == clim_type%indexm(i) .and.  &
   2648           indexp == clim_type%indexp(i) .and. &
   2649           climatology == clim_type%climatology(i)) then
   2650         else
   2651           clim_type%indexm(i) = indexm

Page 79          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55                                 interpolator.F90

   2652           clim_type%indexp(i) = indexp
   2653           clim_type%climatology(i) = climatology
   2654           if (use_mpp_io) then
   2655           call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   2656             clim_type%pmon_pyear(:,:,:,i),  &
   2657             clim_type%indexm(i)+(clim_type%climatology(i)-1)*12,i,Time)
   2658 ! Read the data for the next month in the previous climatology.
   2659           call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   2660             clim_type%nmon_pyear(:,:,:,i),   &
   2661             clim_type%indexp(i)+(clim_type%climatology(i)-1)*12,i,Time)
   2662           call interp_read_data_mppio(clim_type,clim_type%field_type(i),   &
   2663             clim_type%pmon_nyear(:,:,:,i),  &
   2664             clim_type%indexm(i)+clim_type%climatology(i)*12,i,Time)
   2665           call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   2666             clim_type%nmon_nyear(:,:,:,i),  &
   2667             clim_type%indexp(i)+clim_type%climatology(i)*12,i,Time)
   2668           else
   2669           call read_data(clim_type,clim_type%field_name(i),  &
   2670             clim_type%pmon_pyear(:,:,:,i),  &
   2671             clim_type%indexm(i)+(clim_type%climatology(i)-1)*12,i,Time)
   2672 ! Read the data for the next month in the previous climatology.
   2673           call read_data(clim_type,clim_type%field_name(i),  &
   2674             clim_type%nmon_pyear(:,:,:,i),   &
   2675             clim_type%indexp(i)+(clim_type%climatology(i)-1)*12,i,Time)
   2676           call read_data(clim_type,clim_type%field_name(i),   &
   2677             clim_type%pmon_nyear(:,:,:,i),  &
   2678             clim_type%indexm(i)+clim_type%climatology(i)*12,i,Time)
   2679           call read_data(clim_type,clim_type%field_name(i),  &
   2680             clim_type%nmon_nyear(:,:,:,i),  &
   2681             clim_type%indexp(i)+clim_type%climatology(i)*12,i,Time)
   2682           endif !if (use_mpp_io)
   2683         endif
   2684 
   2685 
   2686 
   2687 
   2688       else ! We are within a climatology data set
   2689 
   2690         if (taum /= clim_type%time_init(i,1) .or. &
   2691             taup /= clim_type%time_init(i,2) ) then
   2692 
   2693           if (use_mpp_io) then
   2694           call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%pmon_pyear(:,:,:,i), taum,i,Time)
   2695 ! Read the data for the next month in the previous climatology.
   2696           call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%nmon_pyear(:,:,:,i), taup,i,Time)
   2697           else
   2698           call read_data(clim_type,clim_type%field_name(i), clim_type%pmon_pyear(:,:,:,i), taum,i,Time)
   2699 ! Read the data for the next month in the previous climatology.
   2700           call read_data(clim_type,clim_type%field_name(i), clim_type%nmon_pyear(:,:,:,i), taup,i,Time)
   2701           endif !if (use_mpp_io)
   2702 !RSHbug   clim_type%pmon_nyear = 0.0
   2703 !RSHbug   clim_type%nmon_nyear = 0.0
   2704 
   2705 !         clim_type%pmon_nyear(:,:,:,i) = 0.0
   2706 !         clim_type%nmon_nyear(:,:,:,i) = 0.0
   2707 
   2708 ! set to zero so when next return to bilinear section will be sure to

Page 80          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55                                 interpolator.F90

   2709 ! have proper data (relevant when running fixed_year case for more than
   2710 ! one year in a single job)
   2711           clim_type%indexm(i) = 0
   2712           clim_type%indexp(i) = 0
   2713           clim_type%climatology(i) = 0
   2714 
   2715 
   2716           clim_type%time_init(i,1) = taum
   2717           clim_type%time_init(i,2) = taup
   2718         endif
   2719 !       clim_type%tweight3 = 0.0 ! This makes [pn]mon_nyear irrelevant. Set them to 0 to test.
   2720         clim_type%tweight1 = 0.0 ; clim_type%tweight2 = 0.0
   2721         clim_type%tweight3 = clim_type%tweight
   2722       endif
   2723 
   2724     endif ! (BILINEAR)
   2725 
   2726 
   2727     if(clim_type%TIME_FLAG .eq. LINEAR  .and.   &
   2728         (.not. read_all_on_init) ) then
   2729 ! We need 2 time levels. Check we have the correct data.
   2730       clim_type%itaum=0
   2731       clim_type%itaup=0
   2732       do n=1,size(clim_type%time_init,2)
   2733         if (clim_type%time_init(i,n) .eq. taum ) clim_type%itaum = n
   2734         if (clim_type%time_init(i,n) .eq. taup ) clim_type%itaup = n
   2735       enddo
   2736 
   2737       if (clim_type%itaum.eq.0 .and. clim_type%itaup.eq.0) then
   2738 !Neither time is set so we need to read 2 time slices.
   2739 !Set up
   2740 ! field(:,:,:,1) as the previous time slice.
   2741 ! field(:,:,:,2) as the next time slice.
   2742     if (use_mpp_io) then
   2743     call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,1,i), taum,i,Time)
   2744           clim_type%time_init(i,1) = taum
   2745           clim_type%itaum = 1
   2746     call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,2,i), taup,i,Time)
   2747           clim_type%time_init(i,2) = taup
   2748           clim_type%itaup = 2
   2749     else
   2750     call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,1,i), taum,i,Time)
   2751           clim_type%time_init(i,1) = taum
   2752           clim_type%itaum = 1
   2753     call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,2,i), taup,i,Time)
   2754           clim_type%time_init(i,2) = taup
   2755           clim_type%itaup = 2
   2756     endif !if (use_mpp_io)
   2757       endif ! clim_type%itaum.eq.clim_type%itaup.eq.0
   2758       if (clim_type%itaum.eq.0 .and. clim_type%itaup.ne.0) then
   2759 ! Can't think of a situation where we would have the next time level but not the previous.
   2760  call mpp_error(FATAL,'interpolator_3D : No data from the previous climatology time &
   2761                          & but we have the next time. How did this happen?')
   2762       endif
   2763       if (clim_type%itaum.ne.0 .and. clim_type%itaup.eq.0) then
   2764 !We have the previous time step but not the next time step data
   2765         clim_type%itaup = 1

Page 81          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55                                 interpolator.F90

   2766         if (clim_type%itaum .eq. 1 ) clim_type%itaup = 2
   2767         if (use_mpp_io) then
   2768         call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,clim_type%itaup,i), taup,i, Time
   2768 )
   2769         else
   2770         call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,clim_type%itaup,i), taup,i, Time)
   2771         endif !if (use_mpp_io)
   2772         clim_type%time_init(i,clim_type%itaup)=taup
   2773       endif
   2774 
   2775 
   2776     endif! TIME_FLAG
   2777 
   2778     endif   !( .not. clim_type%separate_time_vary_calc)
   2779 select case(clim_type%TIME_FLAG)
   2780   case (LINEAR)
   2781     hinterp_data = (1.-clim_type%tweight) * clim_type%data(istart:iend,jstart:jend,:,clim_type%itaum,i) + &
   2782                        clim_type%tweight * clim_type%data(istart:iend,jstart:jend,:,clim_type%itaup,i)
   2783 ! case (SEASONAL)
   2784 ! Do sine fit to data at this point
   2785   case (BILINEAR)
   2786     hinterp_data = &
   2787     (1.-clim_type%tweight1) * (1.-clim_type%tweight3) * clim_type%pmon_pyear(istart:iend,jstart:jend,:,i) + &
   2788     (1.-clim_type%tweight2) *     clim_type%tweight3  * clim_type%nmon_pyear(istart:iend,jstart:jend,:,i) + &
   2789         clim_type%tweight1  * (1.-clim_type%tweight3) * clim_type%pmon_nyear(istart:iend,jstart:jend,:,i) + &
   2790         clim_type%tweight2  *     clim_type%tweight3  * clim_type%nmon_nyear(istart:iend,jstart:jend,:,i)
   2791 
   2792 
   2793 
   2794 end select
   2795 
   2796 select case(clim_type%level_type)
   2797   case(PRESSURE)
   2798     p_fact = 1.0
   2799   case(SIGMA)
   2800     p_fact = maxval(phalf,3)! max pressure in the column !(:,:,size(phalf,3))
   2801 end select
   2802 
   2803 
   2804 
   2805 col_data(:,:)=0.0
   2806 select case(clim_type%mr(i))
   2807   case(NO_CONV)
   2808     do k = 1,size(hinterp_data,3)
   2809    col_data(:,:) = col_data(:,:) + hinterp_data(:,:,k)* &
   2810       (clim_type%halflevs(k+1)-clim_type%halflevs(k))/grav
   2811     enddo
   2812 
   2813   case(KG_M2)
   2814     do k = 1,size(hinterp_data,3)
   2815        col_data(:,:) = col_data(:,:) + hinterp_data(:,:,k)
   2816        hinterp_data(:,:,k) = hinterp_data(:,:,k)/ &
   2817          ((clim_type%halflevs(k+1)-clim_type%halflevs(k))*p_fact)
   2818     enddo
   2819 end select
   2820 
   2821 found = .false.

Page 82          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55                                 interpolator.F90

   2822 do j = 1,size(climo_diag_name(:))
   2823   if ( trim(adjustl(lowercase(climo_diag_name(j)))) .eq. trim(adjustl(lowercase(clim_type%field_name(i))))) then
   2824     found = .true.
   2825     exit
   2826   endif
   2827 enddo
   2828 
   2829 if (found) then
   2830   if (hinterp_id(j) > 0 ) then
   2831        result = send_data(hinterp_id(j),col_data,Time,is_in=istart,js_in=jstart)
   2832   endif
   2833 endif
   2834 
   2835 
   2836 !++lwh
   2837 do j = 1, size(phalf,2)
   2838    do ilon=1,size(phalf,1)
   2839       pclim = p_fact(ilon,j)*clim_type%halflevs
   2840       if ( maxval(phalf(ilon,j,:)) > maxval(pclim) ) then
   2841          if (verbose > 3) then
   2842          call mpp_error(NOTE,"Interpolator: model surface pressure&
   2843                              & is greater than climatology surface pressure for "&
   2844                              // trim(clim_type%file_name))
   2845          endif
   2846          select case(clim_type%out_of_bounds(i))
   2847             case(CONSTANT)
   2848                pclim( maxloc(pclim) ) = maxval( phalf(ilon,j,:) )
   2849 !           case(ZERO)
   2850 !              pclim( maxloc(pclim)) = 0
   2851          end select
   2852       endif
   2853       if ( minval(phalf(ilon,j,:)) < minval(pclim) ) then
   2854          if (verbose > 3) then
   2855          call mpp_error(NOTE,"Interpolator: model top pressure&
   2856                              & is less than climatology top pressure for "&
   2857                              // trim(clim_type%file_name))
   2858          endif
   2859          select case(clim_type%out_of_bounds(i))
   2860             case(CONSTANT)
   2861                pclim( minloc(pclim) ) = minval( phalf(ilon,j,:) )
   2862 !           case(ZERO)
   2863 !              pclim( maxloc(pclim)) = 0
   2864          end select
   2865       endif
   2866       select case(clim_type%vert_interp(i))
   2867          case(INTERP_WEIGHTED_P)
   2868             call interp_weighted_scalar(pclim, phalf(ilon,j,:),hinterp_data(ilon,j,:),interp_data(ilon,j,:))
   2869          case(INTERP_LINEAR_P)
   2870             call interp_linear(pclim, phalf(ilon,j,:),hinterp_data(ilon,j,:),interp_data(ilon,j,:))
   2871 !        case(INTERP_LOG)
   2872       end select
   2873    enddo
   2874 enddo
   2875 !--lwh
   2876 
   2877 select case(clim_type%mr(i))
   2878   case(KG_M2)

Page 83          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55                                 interpolator.F90

   2879     do k = 1,size(interp_data,3)
   2880        interp_data(:,:,k) = interp_data(:,:,k)*(phalf(:,:,k+1)-phalf(:,:,k))
   2881     enddo
   2882 end select
   2883   endif !field_name
   2884 enddo !End of i loop
   2885 if( .not. found_field) then !field name is not in interpolator file.ERROR.
   2886   call mpp_error(FATAL,"Interpolator: the field name is not contained in this &
   2887                    &intepolate_type: "//trim(field_name))
   2888 endif
   2889 end subroutine interpolator_3D


ENTRY POINTS

  Name                                            
                                                  
 interpolator_mod_mp_interpolator_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   2516                                 scalar                    2516,2823                         
 ASSOCIATED                 Func   2503                                 scalar                    2503                              
 CLIMATOLOGY                Local  2494     I(4)            4           scalar                    2576,2580,2584,2601,2610,2622,2623
                                                                                                  ,2634,2635,2649,2653              
 CLIMDAY                    Local  2492     I(4)            4           scalar                    2574,2602,2603,2611,2612,2624,2625
                                                                                                  ,2636,2637                        
 CLIMHOUR                   Local  2492     I(4)            4           scalar                    2574,2602,2603,2611,2612,2624,2625
                                                                                                  ,2636,2637                        
 CLIMMINUTE                 Local  2492     I(4)            4           scalar                    2574,2602,2603,2611,2612,2624,2625
                                                                                                  ,2636,2637                        
 CLIMMONTH                  Local  2492     I(4)            4           scalar                    2574,2602,2611,2624,2625,2636,2637
 CLIMSECOND                 Local  2492     I(4)            4           scalar                    2574,2602,2603,2611,2612,2624,2625
                                                                                                  ,2636,2637                        
 CLIMYEAR                   Local  2492     I(4)            4           scalar                    2574,2580,2602,2611,2624,2636     
 CLIM_TYPE                  Dummy  2459     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        2484,2487,2503,2514,2516,2520,2530
                                                                                                  ,2533,2535,2536,2538,2543,2547,254
                                                                                                  9,2554,2555,2556,2559,2561,2562,25
                                                                                                  65,2566,2574,2577,2579,2584,2601,2
                                                                                                  610,2614,2616,2619,2622,2623,2626,
                                                                                                  2628,2631,2634,2635,2638,2640,2643
                                                                                                  ,2647,2648,2649,2651,2652,2653,265
                                                                                                  5,2656,2657,2659,2660,2661,2662,26
                                                                                                  63,2664,2665,2666,2667,2669,2670,2
                                                                                                  671,2673,2674,2675,2676,2677,2678,
                                                                                                  2679,2680,2681,2690,2691,2694,2696
                                                                                                  ,2698,2700,2711,2712,2713,2716,271
                                                                                                  7,2720,2721,2727,2730,2731,2732,27
                                                                                                  33,2734,2737,2743,2744,2745,2746,2
                                                                                                  747,2748,2750,2751,2752,2753,2754,
                                                                                                  2755,2758,2763,2765,2766,2768,2770
                                                                                                  ,2772,2779,2781,2782,2787,2788,278
                                                                                                  9,2790,2796,2806,2810,2817,2823,28

Page 84          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  39,2844,2846,2857,2859,2866,2877  
 CLIM_UNITS                 Dummy  2459     CHAR                        scalar   ARG,OUT          2519,2520,2521                    
 COL_DATA                   Local  2486     R(8)            8     2     0        TGT              2805,2809,2815,2831               
 DAY                        Local  2493     I(4)            4           scalar                    2579,2584,2587                    
 ERR_MSG                    Local  2499     CHAR            256         scalar                    2536,2537,2538,2547,2548,2549,2614
                                                                                                  ,2618,2619,2626,2630,2631,2638,264
                                                                                                  2,2643                            
 FIELD_NAME                 Dummy  2459     CHAR                        scalar   ARG,IN           2516,2887                         
 FOUND                      Local  2489     L(4)            4           scalar                    2821,2824,2829                    
 FOUND_FIELD                Local  2490     L(4)            4           scalar                    2490,2518,2885                    
 HINTERP_DATA               Local  2484     R(8)            8     3     0        TGT              2781,2786,2808,2809,2814,2815,2816
                                                                                                  ,2868,2870                        
 HOUR                       Local  2493     I(4)            4           scalar                    2579,2584                         
 I                          Local  2498     I(4)            4           scalar                    2514,2516,2520,2647,2648,2649,2651
                                                                                                  ,2652,2653,2655,2656,2657,2659,266
                                                                                                  0,2661,2662,2663,2664,2665,2666,26
                                                                                                  67,2669,2670,2671,2673,2674,2675,2
                                                                                                  676,2677,2678,2679,2680,2681,2690,
                                                                                                  2691,2694,2696,2698,2700,2711,2712
                                                                                                  ,2713,2716,2717,2733,2734,2743,274
                                                                                                  4,2746,2747,2750,2751,2753,2754,27
                                                                                                  68,2770,2772,2781,2782,2787,2788,2
                                                                                                  789,2790,2806,2823,2846,2859,2866,
                                                                                                  2877                              
 IEND                       Local  2488     I(4)            4           scalar                    2508,2781,2782,2787,2788,2789,2790
 ILON                       Local  2483     I(4)            4           scalar                    2838,2839,2840,2848,2853,2861,2868
                                                                                                  ,2870                             
 INDEXM                     Local  2497     I(4)            4           scalar                    2588,2590,2595,2596,2601,2603,2622
                                                                                                  ,2623,2647,2651                   
 INDEXP                     Local  2497     I(4)            4           scalar                    2588,2590,2604,2605,2610,2612,2634
                                                                                                  ,2635,2648,2652                   
 INTERPOLATOR_3D            Subr   2459                                          PRIV                                               
 INTERP_DATA                Dummy  2459     R(8)            8     3     1        ARG,OUT          2484,2485,2486,2508,2512,2868,2870
                                                                                                  ,2879,2880                        
 IS                         Dummy  2459     I(4)            4           scalar   ARG,IN           2507                              
 ISTART                     Local  2488     I(4)            4           scalar                    2506,2507,2508,2781,2782,2787,2788
                                                                                                  ,2789,2790,2831                   
 J                          Local  2498     I(4)            4           scalar                    2822,2823,2830,2831,2837,2839,2840
                                                                                                  ,2848,2853,2861,2868,2870         
 JEND                       Local  2488     I(4)            4           scalar                    2512,2781,2782,2787,2788,2789,2790
 JS                         Dummy  2459     I(4)            4           scalar   ARG,IN           2511                              
 JSTART                     Local  2488     I(4)            4           scalar                    2510,2511,2512,2781,2782,2787,2788
                                                                                                  ,2789,2790,2831                   
 K                          Local  2498     I(4)            4           scalar                    2808,2809,2810,2814,2815,2816,2817
                                                                                                  ,2879,2880                        
 M                          Local  2494     I(4)            4           scalar                    2577,2579,2580,2582,2584,2588,2590
 MAXLOC                     Func   2848                                 scalar                    2848                              
 MAXVAL                     Func   2800                                 scalar                    2800,2840,2848                    
 MINLOC                     Func   2861                                 scalar                    2861                              
 MINUTE                     Local  2493     I(4)            4           scalar                    2579,2584                         
 MINVAL                     Func   2853                                 scalar                    2853,2861                         
 MODDAY                     Local  2491     I(4)            4           scalar                    2573,2587                         
 MODHOUR                    Local  2491     I(4)            4           scalar                    2573                              
 MODMINUTE                  Local  2491     I(4)            4           scalar                    2573                              
 MODMONTH                   Local  2491     I(4)            4           scalar                    2573,2585                         

Page 85          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MODSECOND                  Local  2491     I(4)            4           scalar                    2573                              
 MODYEAR                    Local  2491     I(4)            4           scalar                    2573,2597,2599,2606,2608          
 MONTH                      Local  2496     RECORD          16    1     2        TGT              2603,2612,2614,2622,2623,2624,2626
                                                                                                  ,2634,2635,2636,2638              
 MONTH1                     Local  2493     I(4)            4           scalar                    2579,2584,2585                    
 N                          Local  2498     I(4)            4           scalar                    2732,2733,2734                    
 PCLIM                      Local  2487     R(8)            8     1     0        TGT              2839,2840,2848,2853,2861,2868,2870
 PHALF                      Dummy  2459     R(8)            8     3     1        ARG,IN           2800,2837,2838,2840,2848,2853,2861
                                                                                                  ,2868,2870,2880                   
 PRESENT                    Func   2507                                 scalar                    2507,2511,2519                    
 P_FACT                     Local  2485     R(8)            8     2     0                         2798,2800,2817,2839               
 RESULT                     Local  2489     L(4)            4           scalar                    2831                              
 SECOND                     Local  2493     I(4)            4           scalar                    2579,2584                         
 SIZE                       Func   2484                                 scalar                    2484,2485,2486,2487,2508,2512,2514
                                                                                                  ,2535,2577,2732,2808,2814,2822,283
                                                                                                  7,2838,2879                       
 TAUM                       Local  2483     I(4)            4           scalar                    2536,2541,2547,2555,2561,2574,2614
                                                                                                  ,2616,2626,2628,2638,2640,2690,269
                                                                                                  4,2698,2716,2733,2743,2744,2750,27
                                                                                                  51                                
 TAUP                       Local  2483     I(4)            4           scalar                    2536,2542,2547,2556,2562,2614,2616
                                                                                                  ,2626,2628,2638,2640,2691,2696,270
                                                                                                  0,2717,2734,2746,2747,2753,2754,27
                                                                                                  68,2770,2772                      
 TIME                       Dummy  2459     TIME_TYPE       16          scalar   ARG,IN           2536,2547,2561,2562,2573,2614,2657
                                                                                                  ,2661,2664,2667,2671,2675,2678,268
                                                                                                  1,2694,2696,2698,2700,2743,2746,27
                                                                                                  50,2753,2768,2770,2831            
 TRIM                       Func   2516                                 scalar                    2516,2537,2538,2548,2549,2618,2619
                                                                                                  ,2630,2631,2642,2643,2823,2844,285
                                                                                                  7,2887                            
 T_NEXT                     Local  2495     TIME_TYPE       16          scalar                    2637,2638                         
 T_PREV                     Local  2495     TIME_TYPE       16          scalar                    2625,2626                         
 YEAR1                      Local  2493     I(4)            4           scalar                    2579,2580,2584                    
 YEARM                      Local  2497     I(4)            4           scalar                    2597,2599,2603,2625               
 YEARP                      Local  2497     I(4)            4           scalar                    2606,2608,2612,2637               

Page 86          Source Listing                  INTERPOLATOR_3D
2021-06-01 08:55                                 interpolator.F90

   2890 !
   2891 !#######################################################################
   2892 !
   2893 !++lwh
   2894 !---------------------------------------------------------------------
   2895 !> \brief interpolator_2D receives a field name as input and
   2896 !!        interpolates the field to model a 2D grid and time axis.
   2897 !!
   2898 !! \param [inout] <clim_type> The interpolate type previously defined by a call to interpolator_init
   2899 !! \param [in] <field_name> The name of a field that you wish to interpolate
   2900 !! \param [in] <Time> The model time that you wish to interpolate to
   2901 !! \param [in] <is> OPTIONAL: Index for the physics window
   2902 !! \param [in] <js> OPTIONAL: Index for the physics window
   2903 !! \param [out] <interp_data> The model fields with the interpolated climatology data
   2904 !! \param [out] <clim_units> OPTIONAL: The units of field_name
   2905 !!
   2906 !! \throw FATAL "interpolator_2D : You must call interpolator_init
   2907 !!                    before calling interpolator"
   2908 !! \throw FATAL "interpolator_2D 1:  file="
   2909 !! \throw FATAL "interpolator_2D 2:  file="
   2910 !! \throw FATAL "interpolator_2D 3:  file="
   2911 !! \throw FATAL "interpolator_2D 4:  file="
   2912 !! \throw FATAL "interpolator_2D 5:  file="
   2913 !! \throw FATAL "interpolator_2D : No data from the previous climatology
   2914 !!                    time but we have the next time. How did this happen?"
   2915 !! \throw FATAL "Interpolator: the field name is not contained in this
   2916 !!                    intepolate_type: "
   2917 subroutine interpolator_2D(clim_type, Time, interp_data, field_name, is, js, clim_units)
   2918 !
   2919 ! Return 2-D field interpolated to model grid and time
   2920 !
   2921 !
   2922 ! INTENT INOUT
   2923 !   clim_type   : The interpolate type previously defined by a call to interpolator_init
   2924 !
   2925 ! INTENT IN
   2926 !   field_name  : The name of the field that you wish to interpolate.
   2927 !   Time        : The model time that you wish to interpolate to.
   2928 !   is, js      : The indices of the physics window.
   2929 !
   2930 ! INTENT OUT
   2931 !   interp_data : The model field with the interpolated climatology data.
   2932 !   clim_units  : The units of field_name
   2933 !
   2934 type(interpolate_type), intent(inout)  :: clim_type
   2935 character(len=*)      , intent(in)     :: field_name
   2936 type(time_type)       , intent(in)     :: Time
   2937 real, dimension(:,:),   intent(out)    :: interp_data
   2938 integer               , intent(in) , optional :: is,js
   2939 character(len=*)      , intent(out), optional :: clim_units
   2940 integer :: taum, taup
   2941 real :: hinterp_data(size(interp_data,1),size(interp_data,2),size(clim_type%levs(:)))
   2942 integer :: istart,iend,jstart,jend
   2943 logical :: result, found
   2944 logical :: found_field=.false.
   2945 integer :: modyear, modmonth, modday, modhour, modminute, modsecond
   2946 integer :: climyear, climmonth, climday, climhour, climminute, climsecond

Page 87          Source Listing                  INTERPOLATOR_2D
2021-06-01 08:55                                 interpolator.F90

   2947 integer :: year1, month1, day, hour, minute, second
   2948 integer :: climatology, m
   2949 type(time_type) :: t_prev, t_next
   2950 type(time_type), dimension(2) :: month
   2951 integer :: indexm, indexp, yearm, yearp
   2952 integer :: j, i, n
   2953 character(len=256) :: err_msg
   2954 
   2955 if (.not. module_is_initialized .or. .not. associated(clim_type%lon)) &
   2956    call mpp_error(FATAL, "interpolator_2D : You must call interpolator_init before calling interpolator")
   2957 
   2958 istart = 1
   2959 if (present(is)) istart = is
   2960 iend = istart - 1 + size(interp_data,1)
   2961 
   2962 jstart = 1
   2963 if (present(js)) jstart = js
   2964 jend = jstart - 1 + size(interp_data,2)
   2965 
   2966 do i= 1,size(clim_type%field_name(:))
   2967 !++lwh
   2968   if ( trim(adjustl(lowercase(field_name))) == trim(adjustl(lowercase(clim_type%field_name(i)))) ) then
   2969 !--lwh
   2970 
   2971     found_field=.true.
   2972 
   2973     if(present(clim_units)) then
   2974       call get_variable_units(clim_type%fileobj, clim_type%field_name(i), clim_units)
   2975       clim_units = chomp(clim_units)
   2976     endif
   2977 
   2978 !----------------------------------------------------------------------
   2979 !   skip the time interpolation portion of this routine if subroutine
   2980 !   obtain_interpolator_time_slices has already been called on this
   2981 !   stewp for this interpolate_type variable.
   2982 !----------------------------------------------------------------------
   2983 
   2984 if ( .not. clim_type%separate_time_vary_calc) then
   2985 !   print *, 'TIME INTERPOLATION NOT SEPARATED 2d--',  &
   2986 !                                   trim(clim_type%file_name), mpp_pe()
   2987     if (clim_type%climatological_year) then
   2988 !++lwh
   2989        if (size(clim_type%time_slice) > 1) then
   2990           call time_interp(Time, clim_type%time_slice, clim_type%tweight, taum, taup, modtime=YEAR, err_msg=err_msg )
   2991           if(trim(err_msg) /= '') then
   2992              call mpp_error(FATAL,'interpolator_2D 1: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   2993           endif
   2994        else
   2995           taum = 1
   2996           taup = 1
   2997           clim_type%tweight = 0.
   2998        end if
   2999 !--lwh
   3000     else
   3001        call time_interp(Time, clim_type%time_slice, clim_type%tweight, taum, taup, err_msg=err_msg )
   3002        if(trim(err_msg) /= '') then
   3003           call mpp_error(FATAL,'interpolator_2D 2: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)

Page 88          Source Listing                  INTERPOLATOR_2D
2021-06-01 08:55                                 interpolator.F90

   3004        endif
   3005     endif
   3006 
   3007 ! If the climatology file has seasonal, a split time-line or has all the data
   3008 ! read in then enter this loop.
   3009 !
   3010     if(clim_type%TIME_FLAG .ne. LINEAR .or. read_all_on_init) then
   3011       clim_type%itaum=taum
   3012       clim_type%itaup=taup
   3013     endif
   3014 
   3015 !    if(clim_type%TIME_FLAG .eq. BILINEAR ) then
   3016 !      ! Check if delta-time is greater than delta of first two climatology time-slices.
   3017 !      if ( (Time - clim_type%time_slice(taum) ) > ( clim_type%time_slice(2)- clim_type%time_slice(1) ) .or. &
   3018 !           (clim_type%time_slice(taup)  - Time) > ( clim_type%time_slice(2)- clim_type%time_slice(1) ) ) then
   3019 !      ! The difference between the model time and the last climatology time-slice previous to the model time.
   3020 !      ! We need 2 time levels. Check we have the correct data.
   3021 !        itaum=0
   3022 !        itaup=0
   3023 !      ! Assume this is monthly data. So we need to get the data applicable to the model date but substitute
   3024 !      ! the climatology year into the appropriate place.
   3025 !
   3026 !        call get_date(Time, modyear, modmonth, modday, modhour, modminute, modsecond)
   3027 !        call get_date(clim_type%time_slice(taum), climyear, climmonth, climday, climhour, climminute, climsecond)
   3028 !        clim_datem = set_date(climyear, modmonth, modday, modhour, modminute, modsecond)
   3029 !        call time_interp(clim_datem, clim_type%time_slice, tweight1, taum1, taup1 )
   3030 !
   3031 !
   3032 !        call get_date(clim_type%time_slice(taup), climyear, climmonth, climday, climhour, climminute, climsecond)
   3033 !        clim_datep = set_date(climyear, modmonth, modday, modhour, modminute, modsecond)
   3034 !
   3035 !
   3036 !      endif
   3037 !
   3038 !    endif
   3039     if(clim_type%TIME_FLAG .eq. BILINEAR ) then
   3040 ! Check if delta-time is greater than delta of first two climatology time-slices.
   3041       if ( (Time - clim_type%time_slice(taum) ) > ( clim_type%time_slice(2)- clim_type%time_slice(1) ) .or. &
   3042            (clim_type%time_slice(taup)  - Time) > ( clim_type%time_slice(2)- clim_type%time_slice(1) ) ) then
   3043 ! The difference between the model time and the last climatology time-slice previous to the model time.
   3044 ! We need 2 time levels.
   3045         clim_type%itaum=0
   3046         clim_type%itaup=0
   3047 ! Assume this is monthly data. So we need to get the data applicable to the model date but substitute
   3048 ! the climatology year into the appropriate place.
   3049 
   3050 
   3051 ! We need to get the previous months data for the climatology year before
   3052 ! and after the model year.
   3053         call get_date(Time, modyear, modmonth, modday, modhour, modminute, modsecond)
   3054         call get_date(clim_type%time_slice(taum), climyear, climmonth, climday, climhour, climminute, climsecond)
   3055 
   3056         climatology = 1
   3057         do m = 1, size(clim_type%clim_times(:,:),2)
   3058 !Assume here that a climatology is for 1 year and consists of 12 months starting in January.
   3059           call get_date(clim_type%clim_times(1,m), year1, month1, day, hour, minute, second)
   3060           if (year1 == climyear) climatology = m

Page 89          Source Listing                  INTERPOLATOR_2D
2021-06-01 08:55                                 interpolator.F90

   3061         enddo
   3062         do m = 1,12
   3063 !Find which month we are trying to look at and set clim_date[mp] to the dates spanning that.
   3064           call get_date(clim_type%clim_times(m,climatology), year1, month1, day, hour, minute, second)
   3065           if ( month1 == modmonth ) then
   3066 !RSHBUGFX   if ( modday <= day ) then
   3067             if ( modday <  day ) then
   3068               indexm = m-1 ; indexp = m
   3069             else
   3070               indexm = m ; indexp = m+1
   3071             endif
   3072           endif
   3073 
   3074         enddo
   3075         if ( indexm == 0 ) then
   3076           indexm = 12
   3077           yearm = modyear - 1
   3078         else
   3079           yearm = modyear
   3080         endif
   3081         call get_date(clim_type%time_slice(indexm+(climatology-1)*12), &
   3082                       climyear, climmonth, climday, climhour, climminute, climsecond)
   3083         month(1) = set_date(yearm, indexm, climday, climhour, climminute, climsecond)
   3084         if ( indexp == 13 ) then
   3085           indexp = 1
   3086           yearp = modyear + 1
   3087         else
   3088           yearp = modyear
   3089         endif
   3090         call get_date(clim_type%time_slice(indexp+(climatology-1)*12), &
   3091                       climyear, climmonth, climday, climhour, climminute, climsecond)
   3092         month(2) = set_date(yearp, indexp, climday, climhour, climminute, climsecond)
   3093 
   3094         call time_interp(Time, month, clim_type%tweight3, taum, taup, err_msg=err_msg ) ! tweight3 is the time weight betwee
   3094 n the months.
   3095         if ( .not. retain_cm3_bug ) then
   3096            if (taum==2 .and. taup==2) clim_type%tweight3 = 1. ! protect against post-perth time_interp behavior
   3097         end if
   3098         if(trim(err_msg) /= '') then
   3099            call mpp_error(FATAL,'interpolator_2D 3: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   3100         endif
   3101 
   3102         month(1) = clim_type%time_slice(indexm+(climatology-1)*12)
   3103         month(2) = clim_type%time_slice(indexm+climatology*12)
   3104         call get_date(month(1), climyear, climmonth, climday, climhour, climminute, climsecond)
   3105         t_prev = set_date(yearm, climmonth, climday, climhour, climminute, climsecond)
   3106         call time_interp(t_prev, month, clim_type%tweight1, taum, taup, err_msg=err_msg ) !tweight1 is the time weight betwe
   3106 en the climatology years.
   3107         if ( .not. retain_cm3_bug ) then
   3108            if (taum==2 .and. taup==2) clim_type%tweight1 = 1. ! protect against post-perth time_interp behavior
   3109         end if
   3110         if(trim(err_msg) /= '') then
   3111            call mpp_error(FATAL,'interpolator_2D 4: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   3112         endif
   3113 
   3114         month(1) = clim_type%time_slice(indexp+(climatology-1)*12)
   3115         month(2) = clim_type%time_slice(indexp+climatology*12)

Page 90          Source Listing                  INTERPOLATOR_2D
2021-06-01 08:55                                 interpolator.F90

   3116         call get_date(month(1), climyear, climmonth, climday, climhour, climminute, climsecond)
   3117         t_next = set_date(yearp, climmonth, climday, climhour, climminute, climsecond)
   3118         call time_interp(t_next, month, clim_type%tweight2, taum, taup, err_msg=err_msg ) !tweight1 is the time weight betwe
   3118 en the climatology years.
   3119         if ( .not. retain_cm3_bug ) then
   3120            if (taum==2 .and. taup==2) clim_type%tweight2 = 1. ! protect against post-perth time_interp behavior
   3121         end if
   3122         if(trim(err_msg) /= '') then
   3123            call mpp_error(FATAL,'interpolator_2D 5: '//trim(err_msg)//' file='//trim(clim_type%file_name), FATAL)
   3124         endif
   3125 
   3126 
   3127         if (indexm == clim_type%indexm(i) .and.  &
   3128           indexp == clim_type%indexp(i) .and. &
   3129           climatology == clim_type%climatology(i)) then
   3130         else
   3131           clim_type%indexm(i) = indexm
   3132           clim_type%indexp(i) = indexp
   3133           clim_type%climatology(i) = climatology
   3134           if (use_mpp_io) then
   3135           call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   3136             clim_type%pmon_pyear(:,:,:,i),  &
   3137             clim_type%indexm(i)+(clim_type%climatology(i)-1)*12,i,Time)
   3138 ! Read the data for the next month in the previous climatology.
   3139           call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   3140             clim_type%nmon_pyear(:,:,:,i),   &
   3141             clim_type%indexp(i)+(clim_type%climatology(i)-1)*12,i,Time)
   3142           call interp_read_data_mppio(clim_type,clim_type%field_type(i),   &
   3143             clim_type%pmon_nyear(:,:,:,i),  &
   3144             clim_type%indexm(i)+clim_type%climatology(i)*12,i,Time)
   3145           call interp_read_data_mppio(clim_type,clim_type%field_type(i),  &
   3146             clim_type%nmon_nyear(:,:,:,i),  &
   3147             clim_type%indexp(i)+clim_type%climatology(i)*12,i,Time)
   3148           else
   3149           call read_data(clim_type,clim_type%field_name(i),  &
   3150             clim_type%pmon_pyear(:,:,:,i),  &
   3151             clim_type%indexm(i)+(clim_type%climatology(i)-1)*12,i,Time)
   3152 ! Read the data for the next month in the previous climatology.
   3153           call read_data(clim_type,clim_type%field_name(i),  &
   3154             clim_type%nmon_pyear(:,:,:,i),   &
   3155             clim_type%indexp(i)+(clim_type%climatology(i)-1)*12,i,Time)
   3156           call read_data(clim_type,clim_type%field_name(i),   &
   3157             clim_type%pmon_nyear(:,:,:,i),  &
   3158             clim_type%indexm(i)+clim_type%climatology(i)*12,i,Time)
   3159           call read_data(clim_type,clim_type%field_name(i),  &
   3160             clim_type%nmon_nyear(:,:,:,i),  &
   3161             clim_type%indexp(i)+clim_type%climatology(i)*12,i,Time)
   3162            endif !if (use_mpp_io)
   3163         endif
   3164 
   3165 
   3166 
   3167 
   3168       else ! We are within a climatology data set
   3169 
   3170         if (taum /= clim_type%time_init(i,1) .or. &
   3171             taup /= clim_type%time_init(i,2) ) then

Page 91          Source Listing                  INTERPOLATOR_2D
2021-06-01 08:55                                 interpolator.F90

   3172 
   3173           if (use_mpp_io) then
   3174           call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%pmon_pyear(:,:,:,i), taum,i,Time)
   3175 ! Read the data for the next month in the previous climatology.
   3176           call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%nmon_pyear(:,:,:,i), taup,i,Time)
   3177           else
   3178           call read_data(clim_type,clim_type%field_name(i), clim_type%pmon_pyear(:,:,:,i), taum,i,Time)
   3179 ! Read the data for the next month in the previous climatology.
   3180           call read_data(clim_type,clim_type%field_name(i), clim_type%nmon_pyear(:,:,:,i), taup,i,Time)
   3181           endif
   3182 !RSHbug   clim_type%pmon_nyear = 0.0
   3183 !RSHbug   clim_type%nmon_nyear = 0.0
   3184 
   3185 !         clim_type%pmon_nyear(:,:,:,i) = 0.0
   3186 !         clim_type%nmon_nyear(:,:,:,i) = 0.0
   3187 
   3188 ! set to zero so when next return to bilinear section will be sure to
   3189 ! have proper data (relevant when running fixed_year case for more than
   3190 ! one year in a single job)
   3191           clim_type%indexm(i) = 0
   3192           clim_type%indexp(i) = 0
   3193           clim_type%climatology(i) = 0
   3194 
   3195 
   3196           clim_type%time_init(i,1) = taum
   3197           clim_type%time_init(i,2) = taup
   3198         endif
   3199 !       clim_type%tweight3 = 0.0 ! This makes [pn]mon_nyear irrelevant. Set them to 0 to test.
   3200         clim_type%tweight1 = 0.0 ; clim_type%tweight2 = 0.0
   3201         clim_type%tweight3 = clim_type%tweight
   3202       endif
   3203 
   3204     endif ! (BILINEAR)
   3205 
   3206     if(clim_type%TIME_FLAG .eq. LINEAR .and. &
   3207         (.not. read_all_on_init) ) then
   3208 ! We need 2 time levels. Check we have the correct data.
   3209       clim_type%itaum=0
   3210       clim_type%itaup=0
   3211       do n=1,size(clim_type%time_init,2)
   3212         if (clim_type%time_init(i,n) .eq. taum ) clim_type%itaum = n
   3213         if (clim_type%time_init(i,n) .eq. taup ) clim_type%itaup = n
   3214       enddo
   3215 
   3216       if (clim_type%itaum.eq.0 .and. clim_type%itaup.eq.0) then
   3217 !Neither time is set so we need to read 2 time slices.
   3218 !Set up
   3219 ! field(:,:,:,1) as the previous time slice.
   3220 ! field(:,:,:,2) as the next time slice.
   3221         if (use_mpp_io) then
   3222         call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,1,i), taum,i,Time)
   3223           clim_type%time_init(i,1) = taum
   3224           clim_type%itaum = 1
   3225         call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,2,i), taup,i,Time)
   3226           clim_type%time_init(i,2) = taup
   3227           clim_type%itaup = 2
   3228         else

Page 92          Source Listing                  INTERPOLATOR_2D
2021-06-01 08:55                                 interpolator.F90

   3229         call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,1,i), taum,i,Time)
   3230           clim_type%time_init(i,1) = taum
   3231           clim_type%itaum = 1
   3232         call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,2,i), taup,i,Time)
   3233           clim_type%time_init(i,2) = taup
   3234           clim_type%itaup = 2
   3235         endif !(use_mpp_io)
   3236       endif ! clim_type%itaum.eq.clim_type%itaup.eq.0
   3237       if (clim_type%itaum.eq.0 .and. clim_type%itaup.ne.0) then
   3238 ! Can't think of a situation where we would have the next time level but not the previous.
   3239         call mpp_error(FATAL,'interpolator_2D : No data from the previous climatology time but we have&
   3240                             & the next time. How did this happen?')
   3241       endif
   3242       if (clim_type%itaum.ne.0 .and. clim_type%itaup.eq.0) then
   3243 !We have the previous time step but not the next time step data
   3244         clim_type%itaup = 1
   3245         if (clim_type%itaum .eq. 1 ) clim_type%itaup = 2
   3246         if (use_mpp_io) then
   3247         call interp_read_data_mppio(clim_type,clim_type%field_type(i), clim_type%data(:,:,:,clim_type%itaup,i), taup,i, Time
   3247 )
   3248         else
   3249         call read_data(clim_type,clim_type%field_name(i), clim_type%data(:,:,:,clim_type%itaup,i), taup,i, Time)
   3250         endif
   3251         clim_type%time_init(i,clim_type%itaup)=taup
   3252       endif
   3253     endif! TIME_FLAG .eq. LINEAR .and. (.not. read_all_on_init)
   3254 
   3255   endif ! (.not. separate_time_vary_calc)
   3256 
   3257 
   3258 
   3259 select case(clim_type%TIME_FLAG)
   3260   case (LINEAR)
   3261     hinterp_data = (1.-clim_type%tweight)*clim_type%data(istart:iend,jstart:jend,:,clim_type%itaum,i) &
   3262                      + clim_type%tweight*clim_type%data(istart:iend,jstart:jend,:,clim_type%itaup,i)
   3263 ! case (SEASONAL)
   3264 ! Do sine fit to data at this point
   3265   case (BILINEAR)
   3266     hinterp_data = &
   3267     (1.-clim_type%tweight1) * (1.-clim_type%tweight3) * clim_type%pmon_pyear(istart:iend,jstart:jend,:,i) + &
   3268     (1.-clim_type%tweight2) *     clim_type%tweight3  * clim_type%nmon_pyear(istart:iend,jstart:jend,:,i) + &
   3269          clim_type%tweight1 * (1.-clim_type%tweight3) * clim_type%pmon_nyear(istart:iend,jstart:jend,:,i) + &
   3270          clim_type%tweight2 *     clim_type%tweight3  * clim_type%nmon_nyear(istart:iend,jstart:jend,:,i)
   3271 
   3272 end select
   3273 
   3274 found = .false.
   3275 do j = 1,size(climo_diag_name(:))
   3276   if (trim(adjustl(lowercase(climo_diag_name(j)))) .eq. trim(adjustl(lowercase(clim_type%field_name(i))))) then
   3277     found = .true.
   3278     exit
   3279   endif
   3280 enddo
   3281 
   3282 if (found) then
   3283   if (hinterp_id(j) > 0 ) then
   3284        result = send_data(hinterp_id(j),hinterp_data,Time,is_in=istart,js_in=jstart)

Page 93          Source Listing                  INTERPOLATOR_2D
2021-06-01 08:55                                 interpolator.F90

   3285   endif
   3286 endif
   3287 
   3288   interp_data(:,:) = hinterp_data(:,:,1)
   3289 
   3290   endif !field_name
   3291 enddo !End of i loop
   3292 
   3293 if( .not. found_field) then !field name is not in interpolator file.ERROR.
   3294   call mpp_error(FATAL,"Interpolator: the field name is not contained in this &
   3295                    &intepolate_type: "//trim(field_name))
   3296 endif
   3297 end subroutine interpolator_2D


ENTRY POINTS

  Name                                            
                                                  
 interpolator_mod_mp_interpolator_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   2968                                 scalar                    2968,3276                         
 ASSOCIATED                 Func   2955                                 scalar                    2955                              
 CLIMATOLOGY                Local  2948     I(4)            4           scalar                    3056,3060,3064,3081,3090,3102,3103
                                                                                                  ,3114,3115,3129,3133              
 CLIMDAY                    Local  2946     I(4)            4           scalar                    3054,3082,3083,3091,3092,3104,3105
                                                                                                  ,3116,3117                        
 CLIMHOUR                   Local  2946     I(4)            4           scalar                    3054,3082,3083,3091,3092,3104,3105
                                                                                                  ,3116,3117                        
 CLIMMINUTE                 Local  2946     I(4)            4           scalar                    3054,3082,3083,3091,3092,3104,3105
                                                                                                  ,3116,3117                        
 CLIMMONTH                  Local  2946     I(4)            4           scalar                    3054,3082,3091,3104,3105,3116,3117
 CLIMSECOND                 Local  2946     I(4)            4           scalar                    3054,3082,3083,3091,3092,3104,3105
                                                                                                  ,3116,3117                        
 CLIMYEAR                   Local  2946     I(4)            4           scalar                    3054,3060,3082,3091,3104,3116     
 CLIM_TYPE                  Dummy  2917     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        2941,2955,2966,2968,2974,2984,2987
                                                                                                  ,2989,2990,2992,2997,3001,3003,301
                                                                                                  0,3011,3012,3039,3041,3042,3045,30
                                                                                                  46,3054,3057,3059,3064,3081,3090,3
                                                                                                  094,3096,3099,3102,3103,3106,3108,
                                                                                                  3111,3114,3115,3118,3120,3123,3127
                                                                                                  ,3128,3129,3131,3132,3133,3135,313
                                                                                                  6,3137,3139,3140,3141,3142,3143,31
                                                                                                  44,3145,3146,3147,3149,3150,3151,3
                                                                                                  153,3154,3155,3156,3157,3158,3159,
                                                                                                  3160,3161,3170,3171,3174,3176,3178
                                                                                                  ,3180,3191,3192,3193,3196,3197,320
                                                                                                  0,3201,3206,3209,3210,3211,3212,32
                                                                                                  13,3216,3222,3223,3224,3225,3226,3
                                                                                                  227,3229,3230,3231,3232,3233,3234,
                                                                                                  3237,3242,3244,3245,3247,3249,3251

Page 94          Source Listing                  INTERPOLATOR_2D
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,3259,3261,3262,3267,3268,3269,327
                                                                                                  0,3276                            
 CLIM_UNITS                 Dummy  2917     CHAR                        scalar   ARG,OUT          2973,2974,2975                    
 DAY                        Local  2947     I(4)            4           scalar                    3059,3064,3067                    
 ERR_MSG                    Local  2953     CHAR            256         scalar                    2990,2991,2992,3001,3002,3003,3094
                                                                                                  ,3098,3099,3106,3110,3111,3118,312
                                                                                                  2,3123                            
 FIELD_NAME                 Dummy  2917     CHAR                        scalar   ARG,IN           2968,3295                         
 FOUND                      Local  2943     L(4)            4           scalar                    3274,3277,3282                    
 FOUND_FIELD                Local  2944     L(4)            4           scalar                    2944,2971,3293                    
 HINTERP_DATA               Local  2941     R(8)            8     3     0        TGT              3261,3266,3284,3288               
 HOUR                       Local  2947     I(4)            4           scalar                    3059,3064                         
 I                          Local  2952     I(4)            4           scalar                    2966,2968,2974,3127,3128,3129,3131
                                                                                                  ,3132,3133,3135,3136,3137,3139,314
                                                                                                  0,3141,3142,3143,3144,3145,3146,31
                                                                                                  47,3149,3150,3151,3153,3154,3155,3
                                                                                                  156,3157,3158,3159,3160,3161,3170,
                                                                                                  3171,3174,3176,3178,3180,3191,3192
                                                                                                  ,3193,3196,3197,3212,3213,3222,322
                                                                                                  3,3225,3226,3229,3230,3232,3233,32
                                                                                                  47,3249,3251,3261,3262,3267,3268,3
                                                                                                  269,3270,3276                     
 IEND                       Local  2942     I(4)            4           scalar                    2960,3261,3262,3267,3268,3269,3270
 INDEXM                     Local  2951     I(4)            4           scalar                    3068,3070,3075,3076,3081,3083,3102
                                                                                                  ,3103,3127,3131                   
 INDEXP                     Local  2951     I(4)            4           scalar                    3068,3070,3084,3085,3090,3092,3114
                                                                                                  ,3115,3128,3132                   
 INTERPOLATOR_2D            Subr   2917                                          PRIV                                               
 INTERP_DATA                Dummy  2917     R(8)            8     2     1        ARG,OUT          2941,2960,2964,3288               
 IS                         Dummy  2917     I(4)            4           scalar   ARG,IN           2959                              
 ISTART                     Local  2942     I(4)            4           scalar                    2958,2959,2960,3261,3262,3267,3268
                                                                                                  ,3269,3270,3284                   
 J                          Local  2952     I(4)            4           scalar                    3275,3276,3283,3284               
 JEND                       Local  2942     I(4)            4           scalar                    2964,3261,3262,3267,3268,3269,3270
 JS                         Dummy  2917     I(4)            4           scalar   ARG,IN           2963                              
 JSTART                     Local  2942     I(4)            4           scalar                    2962,2963,2964,3261,3262,3267,3268
                                                                                                  ,3269,3270,3284                   
 M                          Local  2948     I(4)            4           scalar                    3057,3059,3060,3062,3064,3068,3070
 MINUTE                     Local  2947     I(4)            4           scalar                    3059,3064                         
 MODDAY                     Local  2945     I(4)            4           scalar                    3053,3067                         
 MODHOUR                    Local  2945     I(4)            4           scalar                    3053                              
 MODMINUTE                  Local  2945     I(4)            4           scalar                    3053                              
 MODMONTH                   Local  2945     I(4)            4           scalar                    3053,3065                         
 MODSECOND                  Local  2945     I(4)            4           scalar                    3053                              
 MODYEAR                    Local  2945     I(4)            4           scalar                    3053,3077,3079,3086,3088          
 MONTH                      Local  2950     RECORD          16    1     2        TGT              3083,3092,3094,3102,3103,3104,3106
                                                                                                  ,3114,3115,3116,3118              
 MONTH1                     Local  2947     I(4)            4           scalar                    3059,3064,3065                    
 N                          Local  2952     I(4)            4           scalar                    3211,3212,3213                    
 PRESENT                    Func   2959                                 scalar                    2959,2963,2973                    
 RESULT                     Local  2943     L(4)            4           scalar                    3284                              
 SECOND                     Local  2947     I(4)            4           scalar                    3059,3064                         
 SEND_DATA_3D               Func   3284     L(4)            4           scalar   PRIV             3284                              
 SIZE                       Func   2941                                 scalar                    2941,2960,2964,2966,2989,3057,3211
                                                                                                  ,3275                             

Page 95          Source Listing                  INTERPOLATOR_2D
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TAUM                       Local  2940     I(4)            4           scalar                    2990,2995,3001,3011,3041,3054,3094
                                                                                                  ,3096,3106,3108,3118,3120,3170,317
                                                                                                  4,3178,3196,3212,3222,3223,3229,32
                                                                                                  30                                
 TAUP                       Local  2940     I(4)            4           scalar                    2990,2996,3001,3012,3042,3094,3096
                                                                                                  ,3106,3108,3118,3120,3171,3176,318
                                                                                                  0,3197,3213,3225,3226,3232,3233,32
                                                                                                  47,3249,3251                      
 TIME                       Dummy  2917     TIME_TYPE       16          scalar   ARG,IN           2990,3001,3041,3042,3053,3094,3137
                                                                                                  ,3141,3144,3147,3151,3155,3158,316
                                                                                                  1,3174,3176,3178,3180,3222,3225,32
                                                                                                  29,3232,3247,3249,3284            
 TRIM                       Func   2968                                 scalar                    2968,2991,2992,3002,3003,3098,3099
                                                                                                  ,3110,3111,3122,3123,3276,3295    
 T_NEXT                     Local  2949     TIME_TYPE       16          scalar                    3117,3118                         
 T_PREV                     Local  2949     TIME_TYPE       16          scalar                    3105,3106                         
 YEAR1                      Local  2947     I(4)            4           scalar                    3059,3060,3064                    
 YEARM                      Local  2951     I(4)            4           scalar                    3077,3079,3083,3105               
 YEARP                      Local  2951     I(4)            4           scalar                    3086,3088,3092,3117               

Page 96          Source Listing                  INTERPOLATOR_2D
2021-06-01 08:55                                 interpolator.F90

   3298 !--lwh
   3299 !
   3300 !#######################################################################
   3301 !
   3302 !---------------------------------------------------------------------
   3303 !> \brief interpolator_4D_no_time_axis receives a field name as input and
   3304 !!        interpolates the field to model a 4D grid.
   3305 !!
   3306 !! \param [inout] <clim_type> The interpolate type previously defined by a call to interpolator_init
   3307 !! \param [in] <field_name> The name of a field that you wish to interpolate
   3308 !! \param [in] <phalf> The half level model pressure field
   3309 !! \param [in] <is> OPTIONAL: Index for the physics window
   3310 !! \param [in] <js> OPTIONAL: Index for the physics window
   3311 !! \param [out] <interp_data> The model fields with the interpolated climatology data
   3312 !! \param [out] <clim_units> OPTIONAL: The units of field_name
   3313 !!
   3314 !! \throw FATAL "interpolator_4D_no_time_axis : You must call
   3315 !!                    interpolator_init before calling interpolator"
   3316 !! \throw FATAL "interpolator_mod: cannot use 4D interface to
   3317 !!                    interpolator for this file"
   3318 !! \throw NOTE "Interpolator: model surface pressure is greater than
   3319 !!                    surface pressure of input data for "
   3320 !! \throw NOTE "Interpolator: model top pressure is less than surface
   3321 !!                    pressure of input data for "
   3322 !! \throw FATAL "Interpolator: the field name is not contained in this
   3323 !!                    intepolate_type: "
   3324 subroutine interpolator_4D_no_time_axis(clim_type, phalf, interp_data, field_name, is,js, clim_units)
   3325 
   3326 ! Return 4-D field interpolated to model grid
   3327 
   3328 ! INTENT INOUT
   3329 !   clim_type   : The interpolate type previously defined by a call to interpolator_init
   3330 
   3331 ! INTENT IN
   3332 !   field_name  : The name of a field that you wish to interpolate.
   3333 !                 all variables within this interpolate_type variable
   3334 !                 will be interpolated on this call. field_name may
   3335 !                 be any one of the variables.
   3336 !   phalf       : The half level model pressure field.
   3337 !   is, js      : The indices of the physics window.
   3338 
   3339 ! INTENT OUT
   3340 !   interp_data : The model fields
   3341 !   clim_units  : The units of field_name
   3342 
   3343 type(interpolate_type), intent(inout)  :: clim_type
   3344 character(len=*)      , intent(in)  :: field_name
   3345 real, dimension(:,:,:), intent(in)  :: phalf
   3346 real, dimension(:,:,:,:), intent(out) :: interp_data
   3347 integer               , intent(in) , optional :: is,js
   3348 character(len=*)      , intent(out), optional :: clim_units
   3349 integer :: ilon
   3350 real :: hinterp_data(size(interp_data,1),size(interp_data,2),size(clim_type%levs(:)),size(clim_type%field_name(:)))
   3351 real :: p_fact(size(interp_data,1),size(interp_data,2))
   3352 real :: pclim(size(clim_type%halflevs(:)))
   3353 integer :: istart,iend,jstart,jend
   3354 logical :: found_field=.false.

Page 97          Source Listing                  INTERPOLATOR_4D_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   3355 integer :: i, j, k, n
   3356 
   3357 if (.not. module_is_initialized .or. .not. associated(clim_type%lon)) &
   3358    call mpp_error(FATAL, "interpolator_4D_no_time_axis : You must call interpolator_init before calling interpolator")
   3359 
   3360 do n=2,size(clim_type%field_name(:))
   3361   if (clim_type%vert_interp(n) /= clim_type%vert_interp(n-1) .or. &
   3362    clim_type%out_of_bounds(n) /= clim_type%out_of_bounds(n-1)) then
   3363     if (mpp_pe() == mpp_root_pe() ) then
   3364       print *, 'processing file ' // trim(clim_type%file_name)
   3365     endif
   3366     call mpp_error (FATAL, 'interpolator_mod: &
   3367             &cannot use 4D interface to interpolator for this file')
   3368   endif
   3369 end do
   3370 
   3371 istart = 1
   3372 if (present(is)) istart = is
   3373 iend = istart - 1 + size(interp_data,1)
   3374 
   3375 jstart = 1
   3376 if (present(js)) jstart = js
   3377 jend = jstart - 1 + size(interp_data,2)
   3378 
   3379 do i= 1,size(clim_type%field_name(:))
   3380   if ( trim(adjustl(lowercase(field_name))) == trim(adjustl(lowercase(clim_type%field_name(i)))) ) then
   3381     found_field=.true.
   3382     exit
   3383   endif
   3384 end do
   3385 i = 1
   3386 
   3387 if(present(clim_units)) then
   3388   call get_variable_units(clim_type%fileobj, clim_type%field_name(i), clim_units)
   3389   clim_units = chomp(clim_units)
   3390 endif
   3391 
   3392 do n=1, size(clim_type%field_name(:))
   3393   hinterp_data(:,:,:,n) = clim_type%data(istart:iend,jstart:jend,:,1,n)
   3394 end do
   3395 
   3396 select case(clim_type%level_type)
   3397   case(PRESSURE)
   3398     p_fact = 1.0
   3399   case(SIGMA)
   3400     p_fact = maxval(phalf,3)! max pressure in the column !(:,:,size(phalf,3))
   3401 end select
   3402 
   3403     do i= 1, size(clim_type%field_name(:))
   3404       select case(clim_type%mr(i))
   3405       case(KG_M2)
   3406         do k = 1,size(hinterp_data,3)
   3407           hinterp_data(:,:,k,i) = hinterp_data(:,:,k,i)/((clim_type%halflevs(k+1)-clim_type%halflevs(k))*p_fact)
   3408         enddo
   3409       end select
   3410     enddo
   3411 

Page 98          Source Listing                  INTERPOLATOR_4D_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   3412    i = 1
   3413 
   3414 do j = 1, size(phalf,2)
   3415    do ilon=1,size(phalf,1)
   3416       pclim = p_fact(ilon,j)*clim_type%halflevs
   3417       if ( maxval(phalf(ilon,j,:)) > maxval(pclim) ) then
   3418          if (verbose > 3) then
   3419          call mpp_error(NOTE,"Interpolator: model surface pressure&
   3420                              & is greater than surface pressure of input data for "&
   3421                              // trim(clim_type%file_name))
   3422          endif
   3423          select case(clim_type%out_of_bounds(i))
   3424             case(CONSTANT)
   3425                pclim( maxloc(pclim) ) = maxval( phalf(ilon,j,:) )
   3426          end select
   3427       endif
   3428       if ( minval(phalf(ilon,j,:)) < minval(pclim) ) then
   3429          if (verbose > 3) then
   3430          call mpp_error(NOTE,"Interpolator: model top pressure&
   3431                              & is less than top pressure of input data for "&
   3432                              // trim(clim_type%file_name))
   3433          endif
   3434          select case(clim_type%out_of_bounds(i))
   3435             case(CONSTANT)
   3436                pclim( minloc(pclim) ) = minval( phalf(ilon,j,:) )
   3437          end select
   3438       endif
   3439       select case(clim_type%vert_interp(i))
   3440          case(INTERP_WEIGHTED_P)
   3441             call interp_weighted_scalar(pclim, phalf(ilon,j,:),hinterp_data(ilon,j,:,:),interp_data(ilon,j,:,:))
   3442          case(INTERP_LINEAR_P)
   3443           do n=1, size(clim_type%field_name(:))
   3444             call interp_linear(pclim, phalf(ilon,j,:),hinterp_data(ilon,j,:,n),interp_data(ilon,j,:,n))
   3445           end do
   3446       end select
   3447    enddo
   3448 enddo
   3449 
   3450      do i= 1, size(clim_type%field_name(:))
   3451 
   3452 select case(clim_type%mr(i))
   3453   case(KG_M2)
   3454     do k = 1,size(interp_data,3)
   3455        interp_data(:,:,k,i) = interp_data(:,:,k,i)*(phalf(:,:,k+1)-phalf(:,:,k))
   3456     enddo
   3457 end select
   3458 
   3459      end do
   3460 
   3461 if( .not. found_field) then !field name is not in interpolator file.ERROR.
   3462   call mpp_error(FATAL,"Interpolator: the field name is not contained in this &
   3463                    &intepolate_type: "//trim(field_name))
   3464 endif
   3465 end subroutine interpolator_4D_no_time_axis

Page 99          Source Listing                  INTERPOLATOR_4D_NO_TIME_AXIS
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                                         
                                                               
 interpolator_mod_mp_interpolator_4d_no_time_axis_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   3380                                 scalar                    3380                              
 ASSOCIATED                 Func   3357                                 scalar                    3357                              
 CLIM_TYPE                  Dummy  3324     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        3350,3352,3357,3360,3361,3362,3364
                                                                                                  ,3379,3380,3388,3392,3393,3396,340
                                                                                                  3,3404,3407,3416,3421,3423,3432,34
                                                                                                  34,3439,3443,3450,3452            
 CLIM_UNITS                 Dummy  3324     CHAR                        scalar   ARG,OUT          3387,3388,3389                    
 FIELD_NAME                 Dummy  3324     CHAR                        scalar   ARG,IN           3380,3463                         
 FOUND_FIELD                Local  3354     L(4)            4           scalar                    3354,3381,3461                    
 HINTERP_DATA               Local  3350     R(8)            8     4     0        TGT              3393,3406,3407,3441,3444          
 I                          Local  3355     I(4)            4           scalar                    3379,3380,3385,3388,3403,3404,3407
                                                                                                  ,3412,3423,3434,3439,3450,3452,345
                                                                                                  5                                 
 IEND                       Local  3353     I(4)            4           scalar                    3373,3393                         
 ILON                       Local  3349     I(4)            4           scalar                    3415,3416,3417,3425,3428,3436,3441
                                                                                                  ,3444                             
 INTERPOLATOR_4D_NO_TIME_AX                                                                                                         
 IS                         Subr   3324                                          PRIV                                               
 INTERP_DATA                Dummy  3324     R(8)            8     4     1        ARG,OUT          3350,3351,3373,3377,3441,3444,3454
                                                                                                  ,3455                             
 IS                         Dummy  3324     I(4)            4           scalar   ARG,IN           3372                              
 ISTART                     Local  3353     I(4)            4           scalar                    3371,3372,3373,3393               
 J                          Local  3355     I(4)            4           scalar                    3414,3416,3417,3425,3428,3436,3441
                                                                                                  ,3444                             
 JEND                       Local  3353     I(4)            4           scalar                    3377,3393                         
 JS                         Dummy  3324     I(4)            4           scalar   ARG,IN           3376                              
 JSTART                     Local  3353     I(4)            4           scalar                    3375,3376,3377,3393               
 K                          Local  3355     I(4)            4           scalar                    3406,3407,3454,3455               
 MAXLOC                     Func   3425                                 scalar                    3425                              
 MAXVAL                     Func   3400                                 scalar                    3400,3417,3425                    
 MINLOC                     Func   3436                                 scalar                    3436                              
 MINVAL                     Func   3428                                 scalar                    3428,3436                         
 N                          Local  3355     I(4)            4           scalar                    3360,3361,3362,3392,3393,3443,3444
 PCLIM                      Local  3352     R(8)            8     1     0        TGT              3416,3417,3425,3428,3436,3441,3444
 PHALF                      Dummy  3324     R(8)            8     3     1        ARG,IN           3400,3414,3415,3417,3425,3428,3436
                                                                                                  ,3441,3444,3455                   
 PRESENT                    Func   3372                                 scalar                    3372,3376,3387                    
 P_FACT                     Local  3351     R(8)            8     2     0                         3398,3400,3407,3416               
 SIZE                       Func   3350                                 scalar                    3350,3351,3352,3360,3373,3377,3379
                                                                                                  ,3392,3403,3406,3414,3415,3443,345
                                                                                                  0,3454                            
 TRIM                       Func   3364                                 scalar                    3364,3380,3421,3432,3463          

Page 100         Source Listing                  INTERPOLATOR_4D_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   3466 
   3467 !#######################################################################
   3468 !
   3469 !---------------------------------------------------------------------
   3470 !> \brief interpolator_3D_no_time_axis receives a field name as input and
   3471 !!        interpolates the field to model a 3D grid.
   3472 !!
   3473 !! \param [inout] <clim_type> The interpolate type previously defined by a call to interpolator_init
   3474 !! \param [in] <field_name> The name of a field that you wish to interpolate
   3475 !! \param [in] <phalf> The half level model pressure field
   3476 !! \param [in] <is> OPTIONAL: Index for the physics window
   3477 !! \param [in] <js> OPTIONAL: Index for the physics window
   3478 !! \param [out] <interp_data> The model fields with the interpolated climatology data
   3479 !! \param [out] <clim_units> OPTIONAL: The units of field_name
   3480 !!
   3481 !! \throw FATAL "interpolator_3D_no_time_axis : You must call
   3482 !!                    interpolator_init before calling interpolator"
   3483 !! \throw FATAL "interpolator_mod: cannot use 4D interface to
   3484 !!                    interpolator for this file"
   3485 !! \throw NOTE "Interpolator: model surface pressure is greater than
   3486 !!                    climatology surface pressure for "
   3487 !! \throw NOTE "Interpolator: model top pressure is less than
   3488 !!                    climatology top pressure for "
   3489 !! \throw FATAL "Interpolator: the field name is not contained in this
   3490 !!                    intepolate_type: "
   3491 subroutine interpolator_3D_no_time_axis(clim_type, phalf, interp_data, field_name, is,js, clim_units)
   3492 
   3493 ! Return 3-D field interpolated to model grid
   3494 
   3495 ! INTENT INOUT
   3496 !   clim_type   : The interpolate type previously defined by a call to interpolator_init
   3497 
   3498 ! INTENT IN
   3499 !   field_name  : The name of the field that you wish to interpolate.
   3500 !   phalf       : The half level model pressure field.
   3501 !   is, js      : The indices of the physics window.
   3502 
   3503 ! INTENT OUT
   3504 !   interp_data : The model field with the interpolated climatology data.
   3505 !   clim_units  : The units of field_name
   3506 
   3507 type(interpolate_type), intent(inout)  :: clim_type
   3508 character(len=*)      , intent(in)  :: field_name
   3509 real, dimension(:,:,:), intent(in)  :: phalf
   3510 real, dimension(:,:,:), intent(out) :: interp_data
   3511 integer               , intent(in) , optional :: is,js
   3512 character(len=*)      , intent(out), optional :: clim_units
   3513 integer :: ilon          !< No description
   3514 real :: hinterp_data(size(interp_data,1),size(interp_data,2),size(clim_type%levs(:)))     !< No description
   3515 real :: p_fact(size(interp_data,1),size(interp_data,2))          !< No description
   3516 real :: pclim(size(clim_type%halflevs(:)))                         !< No description
   3517 integer :: istart,iend,jstart,jend                                   !< No description
   3518 logical :: found_field=.false.          !< No description
   3519 integer :: i, j, k                   !< No description
   3520 
   3521 if (.not. module_is_initialized .or. .not. associated(clim_type%lon)) &
   3522    call mpp_error(FATAL, "interpolator_3D_no_time_axis : You must call interpolator_init before calling interpolator")

Page 101         Source Listing                  INTERPOLATOR_3D_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   3523 
   3524 istart = 1
   3525 if (present(is)) istart = is
   3526 iend = istart - 1 + size(interp_data,1)
   3527 
   3528 jstart = 1
   3529 if (present(js)) jstart = js
   3530 jend = jstart - 1 + size(interp_data,2)
   3531 
   3532 do i= 1,size(clim_type%field_name(:))
   3533   if ( trim(adjustl(lowercase(field_name))) == trim(adjustl(lowercase(clim_type%field_name(i)))) ) then
   3534     found_field=.true.
   3535     if(present(clim_units)) then
   3536       call get_variable_units(clim_type%fileobj, clim_type%field_name(i), clim_units)
   3537       clim_units = chomp(clim_units)
   3538     endif
   3539 
   3540     hinterp_data = clim_type%data(istart:iend,jstart:jend,:,1,i)
   3541 
   3542 select case(clim_type%level_type)
   3543   case(PRESSURE)
   3544     p_fact = 1.0
   3545   case(SIGMA)
   3546     p_fact = maxval(phalf,3)! max pressure in the column !(:,:,size(phalf,3))
   3547 end select
   3548 
   3549 select case(clim_type%mr(i))
   3550   case(KG_M2)
   3551     do k = 1,size(hinterp_data,3)
   3552        hinterp_data(:,:,k) = hinterp_data(:,:,k)/((clim_type%halflevs(k+1)-clim_type%halflevs(k))*p_fact)
   3553     enddo
   3554 end select
   3555 
   3556 do j = 1, size(phalf,2)
   3557    do ilon=1,size(phalf,1)
   3558       pclim = p_fact(ilon,j)*clim_type%halflevs
   3559       if ( maxval(phalf(ilon,j,:)) > maxval(pclim) ) then
   3560          if (verbose > 3) then
   3561          call mpp_error(NOTE,"Interpolator: model surface pressure&
   3562                              & is greater than climatology surface pressure for "&
   3563                              // trim(clim_type%file_name))
   3564          endif
   3565          select case(clim_type%out_of_bounds(i))
   3566             case(CONSTANT)
   3567                pclim( maxloc(pclim) ) = maxval( phalf(ilon,j,:) )
   3568          end select
   3569       endif
   3570       if ( minval(phalf(ilon,j,:)) < minval(pclim) ) then
   3571          if (verbose > 3) then
   3572          call mpp_error(NOTE,"Interpolator: model top pressure&
   3573                              & is less than climatology top pressure for "&
   3574                              // trim(clim_type%file_name))
   3575          endif
   3576          select case(clim_type%out_of_bounds(i))
   3577             case(CONSTANT)
   3578                pclim( minloc(pclim) ) = minval( phalf(ilon,j,:) )
   3579          end select

Page 102         Source Listing                  INTERPOLATOR_3D_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   3580       endif
   3581       select case(clim_type%vert_interp(i))
   3582          case(INTERP_WEIGHTED_P)
   3583             call interp_weighted_scalar(pclim, phalf(ilon,j,:),hinterp_data(ilon,j,:),interp_data(ilon,j,:))
   3584          case(INTERP_LINEAR_P)
   3585             call interp_linear(pclim, phalf(ilon,j,:),hinterp_data(ilon,j,:),interp_data(ilon,j,:))
   3586       end select
   3587    enddo
   3588 enddo
   3589 
   3590 select case(clim_type%mr(i))
   3591   case(KG_M2)
   3592     do k = 1,size(interp_data,3)
   3593        interp_data(:,:,k) = interp_data(:,:,k)*(phalf(:,:,k+1)-phalf(:,:,k))
   3594     enddo
   3595 end select
   3596 
   3597   endif !field_name
   3598 enddo !End of i loop
   3599 if( .not. found_field) then !field name is not in interpolator file.ERROR.
   3600   call mpp_error(FATAL,"Interpolator: the field name is not contained in this &
   3601                    &intepolate_type: "//trim(field_name))
   3602 endif
   3603 end subroutine interpolator_3D_no_time_axis


ENTRY POINTS

  Name                                                         
                                                               
 interpolator_mod_mp_interpolator_3d_no_time_axis_             

Page 103         Source Listing                  INTERPOLATOR_3D_NO_TIME_AXIS
2021-06-01 08:55 Symbol Table                    interpolator.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   3533                                 scalar                    3533                              
 ASSOCIATED                 Func   3521                                 scalar                    3521                              
 CLIM_TYPE                  Dummy  3491     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        3514,3516,3521,3532,3533,3536,3540
                                                                                                  ,3542,3549,3552,3558,3563,3565,357
                                                                                                  4,3576,3581,3590                  
 CLIM_UNITS                 Dummy  3491     CHAR                        scalar   ARG,OUT          3535,3536,3537                    
 FIELD_NAME                 Dummy  3491     CHAR                        scalar   ARG,IN           3533,3601                         
 FOUND_FIELD                Local  3518     L(4)            4           scalar                    3518,3534,3599                    
 HINTERP_DATA               Local  3514     R(8)            8     3     0        TGT              3540,3551,3552,3583,3585          
 I                          Local  3519     I(4)            4           scalar                    3532,3533,3536,3540,3549,3565,3576
                                                                                                  ,3581,3590                        
 IEND                       Local  3517     I(4)            4           scalar                    3526,3540                         
 ILON                       Local  3513     I(4)            4           scalar                    3557,3558,3559,3567,3570,3578,3583
                                                                                                  ,3585                             
 INTERPOLATOR_3D_NO_TIME_AX                                                                                                         
 IS                         Subr   3491                                          PRIV                                               
 INTERP_DATA                Dummy  3491     R(8)            8     3     1        ARG,OUT          3514,3515,3526,3530,3583,3585,3592
                                                                                                  ,3593                             
 IS                         Dummy  3491     I(4)            4           scalar   ARG,IN           3525                              
 ISTART                     Local  3517     I(4)            4           scalar                    3524,3525,3526,3540               
 J                          Local  3519     I(4)            4           scalar                    3556,3558,3559,3567,3570,3578,3583
                                                                                                  ,3585                             
 JEND                       Local  3517     I(4)            4           scalar                    3530,3540                         
 JS                         Dummy  3491     I(4)            4           scalar   ARG,IN           3529                              
 JSTART                     Local  3517     I(4)            4           scalar                    3528,3529,3530,3540               
 K                          Local  3519     I(4)            4           scalar                    3551,3552,3592,3593               
 MAXLOC                     Func   3567                                 scalar                    3567                              
 MAXVAL                     Func   3546                                 scalar                    3546,3559,3567                    
 MINLOC                     Func   3578                                 scalar                    3578                              
 MINVAL                     Func   3570                                 scalar                    3570,3578                         
 PCLIM                      Local  3516     R(8)            8     1     0        TGT              3558,3559,3567,3570,3578,3583,3585
 PHALF                      Dummy  3491     R(8)            8     3     1        ARG,IN           3546,3556,3557,3559,3567,3570,3578
                                                                                                  ,3583,3585,3593                   
 PRESENT                    Func   3525                                 scalar                    3525,3529,3535                    
 P_FACT                     Local  3515     R(8)            8     2     0                         3544,3546,3552,3558               
 SIZE                       Func   3514                                 scalar                    3514,3515,3516,3526,3530,3532,3551
                                                                                                  ,3556,3557,3592                   
 TRIM                       Func   3533                                 scalar                    3533,3563,3574,3601               

Page 104         Source Listing                  INTERPOLATOR_3D_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   3604 
   3605 !#######################################################################
   3606 !
   3607 !---------------------------------------------------------------------
   3608 !> \brief interpolator_2D_no_time_axis receives a field name as input and
   3609 !!        interpolates the field to model a 2D grid.
   3610 !!
   3611 !! \param [inout] <clim_type> The interpolate type previously defined by a call to interpolator_init
   3612 !! \param [in] <field_name> The name of a field that you wish to interpolate
   3613 !! \param [in] <is> OPTIONAL: Index for the physics window
   3614 !! \param [in] <js> OPTIONAL: Index for the physics window
   3615 !! \param [out] <interp_data> The model fields with the interpolated climatology data
   3616 !! \param [out] <clim_units> OPTIONAL: The units of field_name
   3617 !!
   3618 !! \throw FATAL "interpolator_2D_no_time_axis : You must call
   3619 !!                    interpolator_init before calling interpolator"
   3620 !! \throw FATAL "Interpolator: the field name is not contained in this
   3621 !!                    intepolate_type: "
   3622 subroutine interpolator_2D_no_time_axis(clim_type, interp_data, field_name, is, js, clim_units)
   3623 
   3624 ! Return 2-D field interpolated to model grid
   3625 
   3626 ! INTENT INOUT
   3627 !   clim_type   : The interpolate type previously defined by a call to interpolator_init
   3628 
   3629 ! INTENT IN
   3630 !   field_name  : The name of the field that you wish to interpolate.
   3631 !   is, js      : The indices of the physics window.
   3632 
   3633 ! INTENT OUT
   3634 !   interp_data : The model field with the interpolated climatology data.
   3635 !   clim_units  : The units of field_name
   3636 
   3637 type(interpolate_type), intent(inout)  :: clim_type
   3638 character(len=*)      , intent(in)     :: field_name
   3639 real, dimension(:,:),   intent(out)    :: interp_data
   3640 integer               , intent(in) , optional :: is,js
   3641 character(len=*)      , intent(out), optional :: clim_units
   3642 real :: hinterp_data(size(interp_data,1),size(interp_data,2),size(clim_type%levs(:)))
   3643 integer :: istart,iend,jstart,jend
   3644 logical :: found_field=.false.
   3645 integer :: i
   3646 
   3647 if (.not. module_is_initialized .or. .not. associated(clim_type%lon)) &
   3648    call mpp_error(FATAL, "interpolator_2D_no_time_axis : You must call interpolator_init before calling interpolator")
   3649 
   3650 istart = 1
   3651 if (present(is)) istart = is
   3652 iend = istart - 1 + size(interp_data,1)
   3653 
   3654 jstart = 1
   3655 if (present(js)) jstart = js
   3656 jend = jstart - 1 + size(interp_data,2)
   3657 
   3658 do i= 1,size(clim_type%field_name(:))
   3659   if ( trim(adjustl(lowercase(field_name))) == trim(adjustl(lowercase(clim_type%field_name(i)))) ) then
   3660 

Page 105         Source Listing                  INTERPOLATOR_2D_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   3661     found_field=.true.
   3662 
   3663     if(present(clim_units)) then
   3664       call get_variable_units(clim_type%fileobj, clim_type%field_name(i), clim_units)
   3665       clim_units = chomp(clim_units)
   3666     endif
   3667 
   3668     hinterp_data = clim_type%data(istart:iend,jstart:jend,:,1,i)
   3669 
   3670     interp_data(:,:) = hinterp_data(:,:,1)
   3671 
   3672   endif !field_name
   3673 enddo !End of i loop
   3674 
   3675 if( .not. found_field) then !field name is not in interpolator file.ERROR.
   3676   call mpp_error(FATAL,"Interpolator: the field name is not contained in this &
   3677                    &intepolate_type: "//trim(field_name))
   3678 endif
   3679 
   3680 end subroutine interpolator_2D_no_time_axis


ENTRY POINTS

  Name                                                         
                                                               
 interpolator_mod_mp_interpolator_2d_no_time_axis_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   3659                                 scalar                    3659                              
 ASSOCIATED                 Func   3647                                 scalar                    3647                              
 CLIM_TYPE                  Dummy  3622     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        3642,3647,3658,3659,3664,3668     
 CLIM_UNITS                 Dummy  3622     CHAR                        scalar   ARG,OUT          3663,3664,3665                    
 FIELD_NAME                 Dummy  3622     CHAR                        scalar   ARG,IN           3659,3677                         
 FOUND_FIELD                Local  3644     L(4)            4           scalar                    3644,3661,3675                    
 HINTERP_DATA               Local  3642     R(8)            8     3     0                         3668,3670                         
 I                          Local  3645     I(4)            4           scalar                    3658,3659,3664,3668               
 IEND                       Local  3643     I(4)            4           scalar                    3652,3668                         
 INTERPOLATOR_2D_NO_TIME_AX                                                                                                         
 IS                         Subr   3622                                          PRIV                                               
 INTERP_DATA                Dummy  3622     R(8)            8     2     1        ARG,OUT          3642,3652,3656,3670               
 IS                         Dummy  3622     I(4)            4           scalar   ARG,IN           3651                              
 ISTART                     Local  3643     I(4)            4           scalar                    3650,3651,3652,3668               
 JEND                       Local  3643     I(4)            4           scalar                    3656,3668                         
 JS                         Dummy  3622     I(4)            4           scalar   ARG,IN           3655                              
 JSTART                     Local  3643     I(4)            4           scalar                    3654,3655,3656,3668               
 PRESENT                    Func   3651                                 scalar                    3651,3655,3663                    
 SIZE                       Func   3642                                 scalar                    3642,3652,3656,3658               
 TRIM                       Func   3659                                 scalar                    3659,3677                         

Page 106         Source Listing                  INTERPOLATOR_2D_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   3681 
   3682 !#######################################################################
   3683 !
   3684 !---------------------------------------------------------------------
   3685 !> \brief interpolator_end receives interpolate data as input
   3686 !!        and deallocates its memory.
   3687 !!
   3688 !! \param [inout] <clim_type> The interpolate type whose components will be deallocated
   3689 subroutine interpolator_end(clim_type)
   3690 ! Subroutine to deallocate the interpolate type clim_type.
   3691 !
   3692 ! INTENT INOUT
   3693 !  clim_type : allocate type whose components will be deallocated.
   3694 !
   3695 type(interpolate_type), intent(inout) :: clim_type
   3696 integer :: logunit
   3697 
   3698 logunit=stdlog()
   3699 if ( mpp_pe() == mpp_root_pe() ) then
   3700    write (logunit,'(/,(a))') 'Exiting interpolator, have a nice day ...'
   3701 end if
   3702 
   3703 if (associated (clim_type%lat     )) deallocate(clim_type%lat)
   3704 if (associated (clim_type%lon     )) deallocate(clim_type%lon)
   3705 if (associated (clim_type%latb    )) deallocate(clim_type%latb)
   3706 if (associated (clim_type%lonb    )) deallocate(clim_type%lonb)
   3707 if (associated (clim_type%levs    )) deallocate(clim_type%levs)
   3708 if (associated (clim_type%halflevs)) deallocate(clim_type%halflevs)
   3709 call horiz_interp_del(clim_type%interph)
   3710 if (associated (clim_type%time_slice)) deallocate(clim_type%time_slice)
   3711 if (associated (clim_type%has_level))  deallocate(clim_type%has_level)
   3712 if (associated (clim_type%field_name)) deallocate(clim_type%field_name)
   3713 if (associated (clim_type%time_init )) deallocate(clim_type%time_init)
   3714 if (associated (clim_type%mr        )) deallocate(clim_type%mr)
   3715 if (associated (clim_type%data)) then
   3716   deallocate(clim_type%data)
   3717 endif
   3718 if (associated (clim_type%pmon_pyear)) then
   3719   deallocate(clim_type%pmon_pyear)
   3720   deallocate(clim_type%pmon_nyear)
   3721   deallocate(clim_type%nmon_nyear)
   3722   deallocate(clim_type%nmon_pyear)
   3723 endif
   3724 
   3725 !< These are fms_io specific
   3726 if (associated (clim_type%field_type)) deallocate(clim_type%field_type)
   3727 
   3728 !! RSH mod
   3729 if(  .not. (clim_type%TIME_FLAG .eq. LINEAR  .and.    &
   3730 !     read_all_on_init)) .or. clim_type%TIME_FLAG .eq. BILINEAR  ) then
   3731       read_all_on_init)  ) then
   3732  if (use_mpp_io) then
   3733     call mpp_close(clim_type%unit)
   3734  else
   3735      call close_file(clim_type%fileobj)
   3736  endif !if (use_mpp_io)
   3737 endif

Page 107         Source Listing                  INTERPOLATOR_END
2021-06-01 08:55                                 interpolator.F90

   3738 
   3739 
   3740 module_is_initialized = .false.
   3741 
   3742 end subroutine interpolator_end


ENTRY POINTS

  Name                                             
                                                   
 interpolator_mod_mp_interpolator_end_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   3703                                 scalar                    3703,3704,3705,3706,3707,3708,3710
                                                                                                  ,3711,3712,3713,3714,3715,3718,372
                                                                                                  6                                 
 CLIM_TYPE                  Dummy  3689     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        3703,3704,3705,3706,3707,3708,3709
                                                                                                  ,3710,3711,3712,3713,3714,3715,371
                                                                                                  6,3718,3719,3720,3721,3722,3726,37
                                                                                                  29,3733,3735                      
 HORIZ_INTERP_DEL           Subr   3709                                          PRIV             138,3709                          
 INTERPOLATOR_END           Subr   3689                                                                                             
 LOGUNIT                    Local  3696     I(4)            4           scalar                    3698,3700                         
 MPP_CLOSE                  Subr   3733                                          PRIV             94,3733,4850,4859                 

Page 108         Source Listing                  INTERPOLATOR_END
2021-06-01 08:55                                 interpolator.F90

   3743 !
   3744 !#######################################################################
   3745 !
   3746 !---------------------------------------------------------------------
   3747 !> \brief read_data receives various climate data as inputs and
   3748 !!        returns a horizontally interpolated climatology field.
   3749 !!
   3750 !! \param [in] <clim_type> The interpolate type which contains the data
   3751 !! \param [in] <src_field> The field type
   3752 !! \param [in] <nt> The index of the time slice of the climatology that you wish to read
   3753 !! \param [in] <i> OPTIONAL: The index of the field name that you are trying to read
   3754 !! \param [in] <Time> OPTIONAL: The model time. Used for diagnostic purposes only
   3755 !! \param [out] <hdata> The horizontally interpolated climatology field. This
   3756 !                       field will still be on the climatology vertical grid
   3757 subroutine read_data(clim_type,field_name, hdata, nt,i, Time)
   3758 !
   3759 !  INTENT IN
   3760 !    clim_type : The interpolate type which contains the data
   3761 !    src_field : The field type
   3762 !    nt        : The index of the time slice of the climatology that you wish to read.
   3763 !    i         : The index of the field name that you are trying to read. (optional)
   3764 !    Time      : The model time. Used for diagnostic purposes only. (optional)
   3765 !
   3766 !  INTENT OUT
   3767 !
   3768 !    hdata     : The horizontally interpolated climatology field. This
   3769 !                field will still be on the climatology vertical grid.
   3770 !
   3771 type(interpolate_type)   , intent(in)  :: clim_type
   3772 character(len=*)         , intent(in)  :: field_name
   3773 integer                  , intent(in)  :: nt
   3774 real                     , intent(out) :: hdata(:,:,:)
   3775 integer                  , intent(in)  :: i
   3776 type(time_type), optional, intent(in)  :: Time
   3777 
   3778 integer   :: k, km
   3779 ! sjs
   3780 real, allocatable :: climdata(:,:,:), climdata2(:,:,:)
   3781 
   3782       allocate(climdata(size(clim_type%lon(:)),size(clim_type%lat(:)), &
   3783                         size(clim_type%levs(:))))
   3784       if(clim_type%has_level(i)) then ! has vertical level
   3785           call fms2_io_read_data(clim_type%fileobj,field_name, climdata,nt)
   3786       else  ! no vertical level
   3787           call fms2_io_read_data(clim_type%fileobj,field_name, climdata(:,:,1),nt)
   3788       endif
   3789 
   3790 !  if vertical index increases upward, flip the data so that lowest
   3791 !  pressure level data is at index 1, rather than the highest pressure
   3792 !  level data. the indices themselves were previously flipped.
   3793       if (clim_type%vertical_indices == INCREASING_UPWARD) then
   3794         allocate(climdata2(size(clim_type%lon(:)),   &
   3795                            size(clim_type%lat(:)), &
   3796                            size(clim_type%levs(:))))
   3797         km = size(clim_type%levs(:))
   3798         do k=1, km
   3799           climdata2(:,:,k) = climdata(:,:,km+1-k)

Page 109         Source Listing                  READ_DATA
2021-06-01 08:55                                 interpolator.F90

   3800         end do
   3801         climdata = climdata2
   3802         deallocate (climdata2)
   3803       endif
   3804       call horiz_interp(clim_type%interph, climdata, hdata)
   3805       if (clim_diag_initialized) &
   3806         call diag_read_data(clim_type,climdata,i, Time)
   3807       deallocate(climdata)
   3808 
   3809 
   3810 end subroutine read_data


ENTRY POINTS

  Name                                      
                                            
 interpolator_mod_mp_read_data_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLIMDATA                   Local  3780     R(8)            8     3     1        ALC              3782,3785,3787,3799,3801,3804,3806
                                                                                                  ,3807                             
 CLIMDATA2                  Local  3780     R(8)            8     3     1        ALC              3794,3799,3801,3802               
 CLIM_TYPE                  Dummy  3757     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,IN           3782,3783,3784,3785,3787,3793,3794
                                                                                                  ,3795,3796,3797,3804,3806         
 COMPRESSED_READ_2D         Subr   3787                                          PRIV             3787,3850                         
 COMPRESSED_READ_3D         Subr   3785                                          PRIV             3785,3848                         
 FIELD_NAME                 Dummy  3757     CHAR                        scalar   ARG,IN           3785,3787                         
 HDATA                      Dummy  3757     R(8)            8     3     1        ARG,OUT          3804                              
 HORIZ_INTERP               Local  3804                                 scalar   PRIV             137,3804,3867,4928,4988           
 HORIZ_INTERP_BASE_3D       Subr   3804                                          PRIV             3804,3867,4928,4988               
 I                          Dummy  3757     I(4)            4           scalar   ARG,IN           3784,3806                         
 K                          Local  3778     I(4)            4           scalar                    3798,3799                         
 KM                         Local  3778     I(4)            4           scalar                    3797,3798,3799                    
 NT                         Dummy  3757     I(4)            4           scalar   ARG,IN           3785,3787                         
 READ_DATA                  Subr   3757                                                                                             
 SIZE                       Func   3782                                 scalar                    3782,3783,3794,3795,3796,3797     
 TIME                       Dummy  3757     TIME_TYPE       16          scalar   ARG,IN           3806                              

Page 110         Source Listing                  READ_DATA
2021-06-01 08:55                                 interpolator.F90

   3811 
   3812 !#######################################################################
   3813 !
   3814 !---------------------------------------------------------------------
   3815 !> \brief read_data_no_time_axis receives various climate data as inputs and
   3816 !!        returns a horizontally interpolated climatology field without the
   3817 !!            time axis.
   3818 !!
   3819 !! \param [in] <clim_type> The interpolate type which contains the data
   3820 !! \param [in] <src_field> The field type
   3821 !! \param [in] <i> OPTIONAL: The index of the field name that you are trying to read
   3822 !! \param [out] <hdata> The horizontally interpolated climatology field. This
   3823 !                       field will still be on the climatology vertical grid
   3824 subroutine read_data_no_time_axis(clim_type,field_name, hdata, i)
   3825 
   3826 !  INTENT IN
   3827 !    clim_type : The interpolate type which contains the data
   3828 !    src_field : The field type
   3829 !    i         : The index of the field name that you are trying to read. (optional)
   3830 
   3831 !  INTENT OUT
   3832 
   3833 !    hdata     : The horizontally interpolated climatology field. This
   3834 !                field will still be on the climatology vertical grid.
   3835 
   3836 type(interpolate_type)   , intent(in)  :: clim_type
   3837 character(len=*)         , intent(in)  :: field_name
   3838 real                     , intent(out) :: hdata(:,:,:)
   3839 integer        , intent(in)  :: i
   3840 
   3841 integer   :: k, km
   3842 ! sjs
   3843 real, allocatable :: climdata(:,:,:), climdata2(:,:,:)
   3844 
   3845       allocate(climdata(size(clim_type%lon(:)),size(clim_type%lat(:)), size(clim_type%levs(:))))
   3846 
   3847       if(clim_type%has_level(i)) then ! has vertical level
   3848          call fms2_io_read_data(clim_type%fileobj,field_name, climdata)
   3849       else  ! no vertical level
   3850          call fms2_io_read_data(clim_type%fileobj,field_name, climdata(:,:,1))
   3851       endif
   3852 !  if vertical index increases upward, flip the data so that lowest
   3853 !  pressure level data is at index 1, rather than the highest pressure
   3854 !  level data. the indices themselves were previously flipped.
   3855       if (clim_type%vertical_indices == INCREASING_UPWARD) then
   3856         allocate(climdata2(size(clim_type%lon(:)),   &
   3857                            size(clim_type%lat(:)), &
   3858                            size(clim_type%levs(:))))
   3859         km = size(clim_type%levs(:))
   3860         do k=1, km
   3861           climdata2(:,:,k) = climdata(:,:,km+1-k)
   3862         end do
   3863         climdata = climdata2
   3864         deallocate (climdata2)
   3865       endif
   3866 
   3867       call horiz_interp(clim_type%interph, climdata, hdata)

Page 111         Source Listing                  READ_DATA_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   3868       deallocate(climdata)
   3869 
   3870 end subroutine read_data_no_time_axis


ENTRY POINTS

  Name                                                   
                                                         
 interpolator_mod_mp_read_data_no_time_axis_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLIMDATA                   Local  3843     R(8)            8     3     1        ALC              3845,3848,3850,3861,3863,3867,3868
 CLIMDATA2                  Local  3843     R(8)            8     3     1        ALC              3856,3861,3863,3864               
 CLIM_TYPE                  Dummy  3824     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,IN           3845,3847,3848,3850,3855,3856,3857
                                                                                                  ,3858,3859,3867                   
 FIELD_NAME                 Dummy  3824     CHAR                        scalar   ARG,IN           3848,3850                         
 HDATA                      Dummy  3824     R(8)            8     3     1        ARG,OUT          3867                              
 I                          Dummy  3824     I(4)            4           scalar   ARG,IN           3847                              
 K                          Local  3841     I(4)            4           scalar                    3860,3861                         
 KM                         Local  3841     I(4)            4           scalar                    3859,3860,3861                    
 READ_DATA_NO_TIME_AXIS     Subr   3824                                                           1257                              
 SIZE                       Func   3845                                 scalar                    3845,3856,3857,3858,3859          

Page 112         Source Listing                  READ_DATA_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   3871 
   3872 !#######################################################################
   3873 !
   3874 !---------------------------------------------------------------------
   3875 !> \brief diag_read_data receives the data read in by read_data as
   3876 !!            inputs and runs a diagnosis.
   3877 !!
   3878 !! \param [in] <clim_type> The interpolate type which contains the data
   3879 !! \param [in] <model_data> The data read in from file that is being diagnosed
   3880 !! \param [in] <i> The index of the field name that you are diagnosing
   3881 !! \param [in] <Time> The model time.
   3882 subroutine diag_read_data(clim_type,model_data, i, Time)
   3883 !
   3884 ! A routine to diagnose the data read in by read_data
   3885 !
   3886 !  INTENT IN
   3887 !    clim_type  : The interpolate type.
   3888 !    model_data : The data read in from file that is being diagnosed.
   3889 !    i          : The index of the field name that you are diagnosing.
   3890 !    Time       : The model time
   3891 !
   3892 type(interpolate_type), intent(in) :: clim_type
   3893 real                  , intent(in) :: model_data(:,:,:)
   3894 integer               , intent(in) :: i
   3895 type(time_type)       , intent(in) :: Time
   3896 
   3897 integer :: j,k
   3898 real :: col_data(size(model_data,1),size(model_data,2))
   3899 logical :: result, found
   3900 
   3901 
   3902 found = .false.
   3903 do j = 1,size(climo_diag_name(:))
   3904   if (trim(adjustl(lowercase(climo_diag_name(j)))) .eq. trim(adjustl(lowercase(clim_type%field_name(i))))) then
   3905       found = .true.
   3906       exit
   3907   endif
   3908 enddo
   3909 
   3910 if(found) then
   3911   if(climo_diag_id(j)>0) then
   3912   col_data(:,:)=0.0
   3913     do k=1,size(model_data,3)
   3914       col_data(:,:) = col_data(:,:) + &
   3915         model_data(:,:,k)* &
   3916         (clim_type%halflevs(k+1)-clim_type%halflevs(k))/grav
   3917     enddo
   3918     result = send_data(climo_diag_id(j),col_data(clim_type%is:clim_type%ie,clim_type%js:clim_type%je),Time)
   3919   endif
   3920 endif
   3921 
   3922 end subroutine diag_read_data

Page 113         Source Listing                  DIAG_READ_DATA
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                           
                                                 
 interpolator_mod_mp_diag_read_data_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   3904                                 scalar                    3904                              
 CLIM_TYPE                  Dummy  3882     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,IN           3904,3916,3918                    
 COL_DATA                   Local  3898     R(8)            8     2     0        TGT              3912,3914,3918                    
 DIAG_READ_DATA             Subr   3882                                                           3806,4930                         
 FOUND                      Local  3899     L(4)            4           scalar                    3902,3905,3910                    
 I                          Dummy  3882     I(4)            4           scalar   ARG,IN           3904                              
 J                          Local  3897     I(4)            4           scalar                    3903,3904,3911,3918               
 K                          Local  3897     I(4)            4           scalar                    3913,3915,3916                    
 MODEL_DATA                 Dummy  3882     R(8)            8     3     1        ARG,IN           3898,3913,3915                    
 RESULT                     Local  3899     L(4)            4           scalar                    3918                              
 SIZE                       Func   3898                                 scalar                    3898,3903,3913                    
 TIME                       Dummy  3882     TIME_TYPE       16          scalar   ARG,IN           3918                              
 TRIM                       Func   3904                                 scalar                    3904                              

Page 114         Source Listing                  DIAG_READ_DATA
2021-06-01 08:55                                 interpolator.F90

   3923 !
   3924 !#######################################################################
   3925 !
   3926 !++lwh
   3927 !
   3928 !---------------------------------------------------------------------
   3929 !> \brief query_interpolator receives an interpolate type as input
   3930 !!        and returns the number of fields and field names.
   3931 !!
   3932 !! \param [in] <clim_type> The interpolate type which contains the data
   3933 !! \param [out] <nfields> OPTIONAL: No description
   3934 !! \param [out] <field_names> OPTIONAL: No description
   3935 subroutine query_interpolator( clim_type, nfields, field_names )
   3936 !
   3937 ! Query an interpolate_type variable to find the number of fields and field names.
   3938 !
   3939 type(interpolate_type), intent(in)                    :: clim_type
   3940 integer, intent(out), optional                        :: nfields
   3941 character(len=*), dimension(:), intent(out), optional :: field_names
   3942 
   3943 if( present( nfields ) )     nfields     = SIZE( clim_type%field_name(:) )
   3944 if( present( field_names ) ) field_names = clim_type%field_name
   3945 
   3946 end subroutine query_interpolator


ENTRY POINTS

  Name                                               
                                                     
 interpolator_mod_mp_query_interpolator_             

Page 115         Source Listing                  QUERY_INTERPOLATOR
2021-06-01 08:55 Symbol Table                    interpolator.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLIM_TYPE                  Dummy  3935     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,IN           3943,3944                         
 FIELD_NAMES                Dummy  3935     CHAR                  1     1        ARG,OUT          3944                              
 NFIELDS                    Dummy  3935     I(4)            4           scalar   ARG,OUT          3943                              
 PRESENT                    Func   3943                                 scalar                    3943,3944                         
 QUERY_INTERPOLATOR         Subr   3935                                                                                             
 SIZE                       Func   3943                                 scalar                    3943                              

Page 116         Source Listing                  QUERY_INTERPOLATOR
2021-06-01 08:55                                 interpolator.F90

   3947 !--lwh
   3948 !
   3949 !#######################################################################
   3950 !
   3951 !---------------------------------------------------------------------
   3952 !> \brief chomp receives a string from NetCDF files and removes
   3953 !!        CHAR(0) from the end of this string.
   3954 !!
   3955 !! \param [in] <string> The string from the NetCDF file
   3956 function chomp(string)
   3957 !
   3958 ! A function to remove CHAR(0) from the end of strings read from NetCDF files.
   3959 !
   3960 character(len=*), intent(in) :: string
   3961 character(len=64) :: chomp
   3962 
   3963 integer :: len
   3964 
   3965 len = len_trim(string)
   3966 if (string(len:len) == CHAR(0)) len = len -1
   3967 
   3968 chomp = string(:len)
   3969 
   3970 end function chomp


ENTRY POINTS

  Name                                  
                                        
 interpolator_mod_mp_chomp_             

Page 117         Source Listing                  CHOMP
2021-06-01 08:55 Symbol Table                    interpolator.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHAR                       Func   3966                                 scalar                    3966                              
 CHOMP                      Func   3956     CHAR            64          scalar                    1163,1308,1476,2016,2521,2975,3389
                                                                                                  ,3537,3665,3968,4298,4324,4764    
 LEN                        Local  3963     I(4)            4           scalar                    3965,3966,3968                    
 LEN_TRIM                   Func   3965                                 scalar                    3965                              
 STRING                     Dummy  3956     CHAR                        scalar   ARG,IN           3965,3966,3968                    

Page 118         Source Listing                  CHOMP
2021-06-01 08:55                                 interpolator.F90

   3971 !
   3972 !#################################################################
   3973 !
   3974 !
   3975 !---------------------------------------------------------------------
   3976 !> \brief interp_weighted_scalar_2D receives the variables grdin,
   3977 !!            grdout, and datin as inputs and returns datout.
   3978 !!
   3979 !! \param [in] <grdin> No description
   3980 !! \param [in] <grdout> No description
   3981 !! \param [in] <datin> No description
   3982 !! \param [out] <datout> No description
   3983  subroutine interp_weighted_scalar_2D (grdin, grdout, datin, datout )
   3984 real, intent(in),  dimension(:) :: grdin, grdout
   3985 real, intent(in),  dimension(:,:) :: datin
   3986 real, intent(out), dimension(:,:) :: datout
   3987 
   3988 integer :: j, k, n
   3989 
   3990 if (size(grdin(:)).ne. (size(datin,1)+1)) &
   3991  call mpp_error(FATAL,'interp_weighted_scalar : input data and pressure do not have the same number of levels')
   3992 if (size(grdout(:)).ne. (size(datout,1 )+1)) &
   3993  call mpp_error(FATAL,'interp_weighted_scalar : output data and pressure do not have the same number of levels')
   3994 
   3995   do k = 1, size(datout,1 )
   3996    datout(k,:) = 0.0
   3997 
   3998      do j = 1, size(datin,1 )
   3999 
   4000         if ( grdin(j)   <= grdout(k) .and. &
   4001              grdin(j+1) >= grdout(k) .and. &
   4002              grdin(j+1) <= grdout(k+1) ) then
   4003 
   4004           do n= 1, size(datin,2)
   4005            datout(k,n) = datout(k,n) + datin(j,n)*(grdin(j+1)-grdout(k))
   4006           end do
   4007 
   4008         else if ( grdin(j)   >= grdout(k)   .and. &
   4009                   grdin(j)   <= grdout(k+1) .and. &
   4010                   grdin(j+1) >= grdout(k+1) ) then
   4011 
   4012           do n= 1, size(datin,2)
   4013            datout(k,n) = datout(k,n) + datin(j,n)*(grdout(k+1)-grdin(j))
   4014           end do
   4015 
   4016         else if ( grdin(j)   >= grdout(k)   .and. &
   4017                   grdin(j+1) <= grdout(k+1) ) then
   4018 
   4019           do n= 1, size(datin,2)
   4020            datout(k,n) = datout(k,n) + datin(j,n)*(grdin(j+1)-grdin(j))
   4021           end do
   4022 
   4023         else if ( grdin(j)   <= grdout(k)   .and. &
   4024                   grdin(j+1) >= grdout(k+1) ) then
   4025 
   4026           do n= 1, size(datin,2)
   4027           datout(k,n) = datout(k,n) + datin(j,n)*(grdout(k+1)-grdout(k))

Page 119         Source Listing                  INTERP_WEIGHTED_SCALAR_2D
2021-06-01 08:55                                 interpolator.F90

   4028 
   4029           end do
   4030         endif
   4031 
   4032      enddo
   4033 
   4034      do n= 1, size(datin,2)
   4035        datout(k,n) = datout(k,n)/(grdout(k+1)-grdout(k))
   4036      end do
   4037 
   4038   enddo
   4039 
   4040 end subroutine interp_weighted_scalar_2D


ENTRY POINTS

  Name                                                      
                                                            
 interpolator_mod_mp_interp_weighted_scalar_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATIN                      Dummy  3983     R(8)            8     2     1        ARG,IN           3990,3998,4004,4005,4012,4013,4019
                                                                                                  ,4020,4026,4027,4034              
 DATOUT                     Dummy  3983     R(8)            8     2     1        ARG,OUT          3992,3995,3996,4005,4013,4020,4027
                                                                                                  ,4035                             
 GRDIN                      Dummy  3983     R(8)            8     1     1        ARG,IN           3990,4000,4001,4002,4005,4008,4009
                                                                                                  ,4010,4013,4016,4017,4020,4023,402
                                                                                                  4                                 
 GRDOUT                     Dummy  3983     R(8)            8     1     1        ARG,IN           3992,4000,4001,4002,4005,4008,4009
                                                                                                  ,4010,4013,4016,4017,4023,4024,402
                                                                                                  7,4035                            
 INTERP_WEIGHTED_SCALAR_2D  Subr   3983                                                           2400,3441                         
 J                          Local  3988     I(4)            4           scalar                    3998,4000,4001,4002,4005,4008,4009
                                                                                                  ,4010,4013,4016,4017,4020,4023,402
                                                                                                  4,4027                            
 K                          Local  3988     I(4)            4           scalar                    3995,3996,4000,4001,4002,4005,4008
                                                                                                  ,4009,4010,4013,4016,4017,4020,402
                                                                                                  3,4024,4027,4035                  
 N                          Local  3988     I(4)            4           scalar                    4004,4005,4012,4013,4019,4020,4026
                                                                                                  ,4027,4034,4035                   
 SIZE                       Func   3990                                 scalar                    3990,3992,3995,3998,4004,4012,4019
                                                                                                  ,4026,4034                        

Page 120         Source Listing                  INTERP_WEIGHTED_SCALAR_2D
2021-06-01 08:55                                 interpolator.F90

   4041 
   4042 
   4043 !
   4044 !---------------------------------------------------------------------
   4045 !> \brief interp_weighted_scalar_1D receives the variables grdin,
   4046 !!        grdout, and datin as inputs and returns datout.
   4047 !!
   4048 !! \param [in] <grdin> No description
   4049 !! \param [in] <grdout> No description
   4050 !! \param [in] <datin> No description
   4051 !! \param [out] <datout> No description
   4052  subroutine interp_weighted_scalar_1D (grdin, grdout, datin, datout )
   4053 real, intent(in),  dimension(:) :: grdin, grdout, datin
   4054 real, intent(out), dimension(:) :: datout
   4055 
   4056 integer :: j, k
   4057 
   4058 if (size(grdin(:)).ne. (size(datin(:))+1)) &
   4059  call mpp_error(FATAL,'interp_weighted_scalar : input data and pressure do not have the same number of levels')
   4060 if (size(grdout(:)).ne. (size(datout(:))+1)) &
   4061  call  mpp_error(FATAL,'interp_weighted_scalar : output data and pressure do not have the same number of levels')
   4062 
   4063   do k = 1, size(datout(:))
   4064    datout(k) = 0.0
   4065 
   4066      do j = 1, size(datin(:))
   4067 
   4068         if ( grdin(j)   <= grdout(k) .and. &
   4069              grdin(j+1) >= grdout(k) .and. &
   4070              grdin(j+1) <= grdout(k+1) ) then
   4071 
   4072            datout(k) = datout(k) + datin(j)*(grdin(j+1)-grdout(k))
   4073 
   4074         else if ( grdin(j)   >= grdout(k)   .and. &
   4075                   grdin(j)   <= grdout(k+1) .and. &
   4076                   grdin(j+1) >= grdout(k+1) ) then
   4077 
   4078            datout(k) = datout(k) + datin(j)*(grdout(k+1)-grdin(j))
   4079 
   4080         else if ( grdin(j)   >= grdout(k)   .and. &
   4081                   grdin(j+1) <= grdout(k+1) ) then
   4082 
   4083            datout(k) = datout(k) + datin(j)*(grdin(j+1)-grdin(j))
   4084 
   4085         else if ( grdin(j)   <= grdout(k)   .and. &
   4086                   grdin(j+1) >= grdout(k+1) ) then
   4087 
   4088            datout(k) = datout(k) + datin(j)*(grdout(k+1)-grdout(k))
   4089 
   4090         endif
   4091 
   4092      enddo
   4093 
   4094      datout(k) = datout(k)/(grdout(k+1)-grdout(k))
   4095 
   4096   enddo
   4097 

Page 121         Source Listing                  INTERP_WEIGHTED_SCALAR_1D
2021-06-01 08:55                                 interpolator.F90

   4098 end subroutine interp_weighted_scalar_1D


ENTRY POINTS

  Name                                                      
                                                            
 interpolator_mod_mp_interp_weighted_scalar_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATIN                      Dummy  4052     R(8)            8     1     1        ARG,IN           4058,4066,4072,4078,4083,4088     
 DATOUT                     Dummy  4052     R(8)            8     1     1        ARG,OUT          4060,4063,4064,4072,4078,4083,4088
                                                                                                  ,4094                             
 GRDIN                      Dummy  4052     R(8)            8     1     1        ARG,IN           4058,4068,4069,4070,4072,4074,4075
                                                                                                  ,4076,4078,4080,4081,4083,4085,408
                                                                                                  6                                 
 GRDOUT                     Dummy  4052     R(8)            8     1     1        ARG,IN           4060,4068,4069,4070,4072,4074,4075
                                                                                                  ,4076,4078,4080,4081,4085,4086,408
                                                                                                  8,4094                            
 INTERP_WEIGHTED_SCALAR_1D  Subr   4052                                                           2868,3583                         
 J                          Local  4056     I(4)            4           scalar                    4066,4068,4069,4070,4072,4074,4075
                                                                                                  ,4076,4078,4080,4081,4083,4085,408
                                                                                                  6,4088                            
 K                          Local  4056     I(4)            4           scalar                    4063,4064,4068,4069,4070,4072,4074
                                                                                                  ,4075,4076,4078,4080,4081,4083,408
                                                                                                  5,4086,4088,4094                  
 SIZE                       Func   4058                                 scalar                    4058,4060,4063,4066               

Page 122         Source Listing                  INTERP_WEIGHTED_SCALAR_1D
2021-06-01 08:55                                 interpolator.F90

   4099 !
   4100 !#################################################################
   4101 !
   4102 !---------------------------------------------------------------------
   4103 !> \brief interp_linear receives the variables grdin,
   4104 !!            grdout, and datin as inputs and returns a linear
   4105 !!            interpolation.
   4106 !!
   4107 !! \param [in] <grdin> No description
   4108 !! \param [in] <grdout> No description
   4109 !! \param [in] <datin> No description
   4110 !! \param [out] <datout> No description
   4111 subroutine interp_linear ( grdin, grdout, datin, datout )
   4112 real, intent(in),  dimension(:) :: grdin, grdout, datin
   4113 real, intent(out), dimension(:) :: datout
   4114 
   4115 integer :: j, k, n
   4116 real    :: wt
   4117 
   4118 
   4119 if (size(grdin(:)).ne. (size(datin(:))+1)) &
   4120  call mpp_error(FATAL,'interp_linear : input data and pressure do not have the same number of levels')
   4121 if (size(grdout(:)).ne. (size(datout(:))+1)) &
   4122  call mpp_error(FATAL,'interp_linear : output data and pressure do not have the same number of levels')
   4123 
   4124 
   4125   n = size(grdin(:))
   4126 
   4127   do k= 1, size(datout(:))
   4128 
   4129 ! ascending grid values
   4130      if (grdin(1) < grdin(n)) then
   4131          do j = 2, size(grdin(:))-1
   4132            if (grdout(k) <= grdin(j)) exit
   4133          enddo
   4134 ! descending grid values
   4135      else
   4136          do j = size(grdin(:)), 3, -1
   4137            if (grdout(k) <= grdin(j-1)) exit
   4138          enddo
   4139      endif
   4140 
   4141 ! linear interpolation
   4142      wt = (grdout(k)-grdin(j-1)) / (grdin(j)-grdin(j-1))
   4143 !print '(a,2i3,4f6.1)', 'k,j=',k,j,grdout(k),grdin(j-1),grdin(j),wt
   4144 ! constant value extrapolation
   4145 ! wt = min(max(wt,0.),1.)
   4146 
   4147      datout(k) = (1.-wt)*datin(j-1) + wt*datin(j)
   4148 
   4149   enddo
   4150 
   4151 end subroutine interp_linear

Page 123         Source Listing                  INTERP_LINEAR
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                          
                                                
 interpolator_mod_mp_interp_linear_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATIN                      Dummy  4111     R(8)            8     1     1        ARG,IN           4119,4147                         
 DATOUT                     Dummy  4111     R(8)            8     1     1        ARG,OUT          4121,4127,4147                    
 GRDIN                      Dummy  4111     R(8)            8     1     1        ARG,IN           4119,4125,4130,4131,4132,4136,4137
                                                                                                  ,4142                             
 GRDOUT                     Dummy  4111     R(8)            8     1     1        ARG,IN           4121,4132,4137,4142               
 INTERP_LINEAR              Subr   4111                                                           2403,2870,3444,3585               
 J                          Local  4115     I(4)            4           scalar                    4131,4132,4136,4137,4142,4147     
 K                          Local  4115     I(4)            4           scalar                    4127,4132,4137,4142,4147          
 N                          Local  4115     I(4)            4           scalar                    4125,4130                         
 SIZE                       Func   4119                                 scalar                    4119,4121,4125,4127,4131,4136     
 WT                         Local  4116     R(8)            8           scalar                    4142,4147                         

Page 124         Source Listing                  INTERP_LINEAR
2021-06-01 08:55                                 interpolator.F90

   4152 !
   4153 !########################################################################
   4154 subroutine mppio_interpolator_init(clim_type, file_name, lonb_mod, latb_mod, &
   4155                               data_names, data_out_of_bounds,           &
   4156                               vert_interp, clim_units, single_year_file)
   4157 
   4158 type(interpolate_type), intent(inout) :: clim_type
   4159 character(len=*), intent(in)            :: file_name
   4160 real            , intent(in)            :: lonb_mod(:,:), latb_mod(:,:)
   4161 character(len=*), intent(in) , optional :: data_names(:)
   4162 !++lwh
   4163 integer         , intent(in)            :: data_out_of_bounds(:)
   4164 integer         , intent(in), optional  :: vert_interp(:)
   4165 !--lwh
   4166 character(len=*), intent(out), optional :: clim_units(:)
   4167 logical,          intent(out), optional :: single_year_file
   4168 
   4169 integer                      :: unit
   4170 character(len=64)            :: src_file
   4171 !++lwh
   4172 real                         :: dlat, dlon
   4173 !--lwh
   4174 type(time_type)              :: base_time
   4175 logical                      :: NAME_PRESENT
   4176 real                         :: dtr,tpi
   4177 integer                      :: fileday, filemon, fileyr, filehr, filemin,filesec, m,m1
   4178 character(len= 20)           :: fileunits
   4179 real, dimension(:), allocatable  :: alpha
   4180 integer   :: j, i
   4181 logical :: non_monthly
   4182 character(len=24) :: file_calendar
   4183 character(len=256) :: error_mesg
   4184 integer :: model_calendar
   4185 integer :: yr, mo, dy, hr, mn, sc
   4186 integer :: n
   4187 type(time_type) :: Julian_time, Noleap_time
   4188 real, allocatable :: time_in(:)
   4189 real, allocatable, save :: agrid_mod(:,:,:)
   4190 integer :: nx, ny
   4191 
   4192 clim_type%separate_time_vary_calc = .false.
   4193 
   4194 tpi = 2.0*PI ! 4.*acos(0.)
   4195 dtr = tpi/360.
   4196 
   4197 num_fields = 0
   4198 
   4199 !--------------------------------------------------------------------
   4200 ! open source file containing fields to be interpolated
   4201 !--------------------------------------------------------------------
   4202 src_file = 'INPUT/'//trim(file_name)
   4203 
   4204 if(fms_io_file_exist(trim(src_file))) then
   4205    call mpp_open( unit, trim(src_file), action=MPP_RDONLY, &
   4206                   form=MPP_NETCDF, threading=MPP_MULTI, fileset=MPP_SINGLE )
   4207 else
   4208 !Climatology file doesn't exist, so exit

Page 125         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4209    call mpp_error(FATAL,'Interpolator_init : Data file '//trim(src_file)//' does not exist')
   4210 endif
   4211 
   4212 !Find the number of variables (nvar) in this file
   4213 call mpp_get_info(unit, ndim, nvar, natt, ntime)
   4214 clim_type%unit      = unit
   4215 clim_type%file_name = trim(file_name)
   4216 
   4217 num_fields = nvar
   4218 if(present(data_names)) num_fields= size(data_names(:))
   4219 
   4220 ! -------------------------------------------------------------------
   4221 ! Allocate space for the number of axes in the data file.
   4222 ! -------------------------------------------------------------------
   4223 allocate(axes(ndim))
   4224 call mpp_get_axes(unit, axes, time_axis)
   4225 
   4226 nlon=0 ! Number of longitudes (center-points) in the climatology.
   4227 nlat=0 ! Number of latitudes (center-points) in the climatology.
   4228 nlev=0 ! Number of levels (center-points) in the climatology.
   4229 nlatb=0 ! Number of longitudes (boundaries) in the climatology.
   4230 nlonb=0 ! Number of latitudes (boundaries) in the climatology.
   4231 nlevh=0 ! Number of levels (boundaries) in the climatology.
   4232 
   4233 clim_type%level_type = 0 ! Default value
   4234 
   4235 !++lwh
   4236 ! -------------------------------------------------------------------
   4237 ! For 2-D fields, set a default value of nlev=nlevh=1
   4238 ! -------------------------------------------------------------------
   4239 nlev = 1
   4240 nlevh = 1
   4241 !--lwh
   4242         clim_type%vertical_indices = 0  ! initial value
   4243 
   4244 do i = 1, ndim
   4245   call mpp_get_atts(axes(i), name=name,len=len,units=units,  &
   4246                     calendar=file_calendar, sense=sense)
   4247   select case(trim(name))
   4248     case('lat')
   4249       nlat=len
   4250       allocate(clim_type%lat(nlat))
   4251       call mpp_get_axis_data(axes(i),clim_type%lat)
   4252       select case(units(1:6))
   4253         case('degree')
   4254           clim_type%lat = clim_type%lat*dtr
   4255         case('radian')
   4256         case default
   4257           call mpp_error(FATAL, "interpolator_init : Units for lat not recognised in file "//file_name)
   4258       end select
   4259     case('lon')
   4260       nlon=len
   4261       allocate(clim_type%lon(nlon))
   4262       call mpp_get_axis_data(axes(i),clim_type%lon)
   4263       select case(units(1:6))
   4264         case('degree')
   4265           clim_type%lon = clim_type%lon*dtr

Page 126         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4266         case('radian')
   4267         case default
   4268           call mpp_error(FATAL, "interpolator_init : Units for lon not recognised in file "//file_name)
   4269       end select
   4270     case('latb')
   4271       nlatb=len
   4272       allocate(clim_type%latb(nlatb))
   4273       call mpp_get_axis_data(axes(i),clim_type%latb)
   4274       select case(units(1:6))
   4275         case('degree')
   4276           clim_type%latb = clim_type%latb*dtr
   4277         case('radian')
   4278         case default
   4279           call mpp_error(FATAL, "interpolator_init : Units for latb not recognised in file "//file_name)
   4280       end select
   4281     case('lonb')
   4282       nlonb=len
   4283       allocate(clim_type%lonb(nlonb))
   4284       call mpp_get_axis_data(axes(i),clim_type%lonb)
   4285       select case(units(1:6))
   4286         case('degree')
   4287           clim_type%lonb = clim_type%lonb*dtr
   4288         case('radian')
   4289         case default
   4290           call mpp_error(FATAL, "interpolator_init : Units for lonb not recognised in file "//file_name)
   4291       end select
   4292     case('pfull')
   4293       nlev=len
   4294       allocate(clim_type%levs(nlev))
   4295       call mpp_get_axis_data(axes(i),clim_type%levs)
   4296       clim_type%level_type = PRESSURE
   4297 ! Convert to Pa
   4298       if( trim(adjustl(lowercase(chomp(units)))) == "mb" .or. trim(adjustl(lowercase(chomp(units)))) == "hpa") then
   4299          clim_type%levs = clim_type%levs * 100.
   4300       end if
   4301 ! define the direction of the vertical data axis
   4302 ! switch index order if necessary so that indx 1 is at lowest pressure,
   4303 ! index nlev at highest pressure.
   4304       if( sense == 1 ) then
   4305         clim_type%vertical_indices = INCREASING_UPWARD
   4306           allocate (alpha(nlev))
   4307           do n = 1, nlev
   4308           alpha(n) = clim_type%levs(nlev-n+1)
   4309           end do
   4310           do n = 1, nlev
   4311           clim_type%levs(n) = alpha(n)
   4312           end do
   4313           deallocate (alpha)
   4314       else
   4315         clim_type%vertical_indices = INCREASING_DOWNWARD
   4316       endif
   4317 
   4318     case('phalf')
   4319       nlevh=len
   4320       allocate(clim_type%halflevs(nlevh))
   4321       call mpp_get_axis_data(axes(i),clim_type%halflevs)
   4322       clim_type%level_type = PRESSURE

Page 127         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4323 ! Convert to Pa
   4324       if( trim(adjustl(lowercase(chomp(units)))) == "mb" .or. trim(adjustl(lowercase(chomp(units)))) == "hpa") then
   4325          clim_type%halflevs = clim_type%halflevs * 100.
   4326       end if
   4327 ! define the direction of the vertical data axis
   4328 ! switch index order if necessary so that indx 1 is at lowest pressure,
   4329 ! index nlev at highest pressure.
   4330       if( sense == 1 ) then
   4331         clim_type%vertical_indices = INCREASING_UPWARD
   4332           allocate (alpha(nlevh))
   4333           do n = 1, nlevh
   4334           alpha(n) = clim_type%halflevs(nlevh-n+1)
   4335           end do
   4336           do n = 1, nlevh
   4337           clim_type%halflevs(n) = alpha(n)
   4338           end do
   4339           deallocate (alpha)
   4340       else
   4341         clim_type%vertical_indices = INCREASING_DOWNWARD
   4342       endif
   4343     case('sigma_full')
   4344       nlev=len
   4345       allocate(clim_type%levs(nlev))
   4346       call mpp_get_axis_data(axes(i),clim_type%levs)
   4347       clim_type%level_type = SIGMA
   4348     case('sigma_half')
   4349       nlevh=len
   4350       allocate(clim_type%halflevs(nlevh))
   4351       call mpp_get_axis_data(axes(i),clim_type%halflevs)
   4352       clim_type%level_type = SIGMA
   4353 
   4354     case('time')
   4355       model_calendar = get_calendar_type()
   4356       fileday = 0
   4357       filemon = 0
   4358       fileyr = 0
   4359       filehr = 0
   4360       filemin= 0
   4361       filesec = 0
   4362       select case(units(:3))
   4363         case('day')
   4364           fileunits = units(12:) !Assuming "days since YYYY-MM-DD HH:MM:SS"
   4365           if ( len_trim(fileunits) < 19 ) then
   4366             write(error_mesg, '(A49,A,A49,A)' ) &
   4367               'Interpolator_init : Incorrect time units in file ', &
   4368               trim(file_name), '. Expecting days since YYYY-MM-DD HH:MM:SS, found', &
   4369               trim(units)
   4370             call mpp_error(FATAL,error_mesg)
   4371           endif
   4372           read(fileunits(1:4)  , *)  fileyr
   4373           read(fileunits(6:7)  , *)  filemon
   4374           read(fileunits(9:10) , *)  fileday
   4375           read(fileunits(12:13), *)  filehr
   4376           read(fileunits(15:16), *)  filemin
   4377           read(fileunits(18:19), *)  filesec
   4378         case('mon')
   4379           fileunits = units(14:) !Assuming "months since YYYY-MM-DD HH:MM:SS"

Page 128         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4380           if ( len_trim(fileunits) < 19 ) then
   4381             write(error_mesg, '(A49,A,A51,A)' ) &
   4382               'Interpolator_init : Incorrect time units in file ', &
   4383               trim(file_name), '. Expecting months since YYYY-MM-DD HH:MM:SS, found', &
   4384               trim(units)
   4385             call mpp_error(FATAL,error_mesg)
   4386           endif
   4387           read(fileunits(1:4)  , *)  fileyr
   4388           read(fileunits(6:7)  , *)  filemon
   4389           read(fileunits(9:10) , *)  fileday
   4390           read(fileunits(12:13), *)  filehr
   4391           read(fileunits(15:16), *)  filemin
   4392           read(fileunits(18:19), *)  filesec
   4393         case default
   4394           call mpp_error(FATAL,'Interpolator_init : Time units not recognised in file '//file_name)
   4395       end select
   4396 
   4397        clim_type%climatological_year = (fileyr == 0)
   4398 
   4399       if (.not. clim_type%climatological_year) then
   4400 
   4401 !----------------------------------------------------------------------
   4402 !    if file date has a non-zero year in the base time, determine that
   4403 !    base_time based on the netcdf info.
   4404 !----------------------------------------------------------------------
   4405         if ( (model_calendar == JULIAN .and.   &
   4406              & trim(adjustl(lowercase(file_calendar))) == 'julian')  .or. &
   4407              & (model_calendar == NOLEAP .and.   &
   4408              & trim(adjustl(lowercase(file_calendar))) == 'noleap') )  then
   4409           call mpp_error (NOTE, 'interpolator[1]_mod: Model and file&
   4410                     & calendars are the same for file ' //   &
   4411                     & trim(file_name) // '; no calendar conversion  &
   4412                     &needed')
   4413           base_time = set_date (fileyr, filemon, fileday, filehr, &
   4414                                 filemin,filesec)
   4415         else if ( (model_calendar == JULIAN .and.   &
   4416              & trim(adjustl(lowercase(file_calendar))) == 'noleap')) then
   4417           call mpp_error (NOTE, 'interpolator[1]_mod: Using julian &
   4418                             &model calendar and noleap file calendar&
   4419                             & for file ' // trim(file_name) //   &
   4420                             &'; calendar conversion needed')
   4421           base_time = set_date_no_leap (fileyr, filemon, fileday,  &
   4422                & filehr, filemin, filesec)
   4423         else if ( (model_calendar == NOLEAP .and.   &
   4424              & trim(adjustl(lowercase(file_calendar))) == 'julian')) then
   4425           call mpp_error (NOTE, 'interpolator[1]_mod: Using noleap &
   4426                             &model calendar and julian file calendar&
   4427                             & for file ' // trim(file_name) //  &
   4428                             &'; calendar conversion needed')
   4429           base_time = set_date_julian (fileyr, filemon, fileday,  &
   4430                & filehr, filemin, filesec)
   4431         else
   4432           call mpp_error (FATAL , 'interpolator[1]_mod: Model and file&
   4433                & calendars ( ' // trim(file_calendar) // ' ) differ  &
   4434                &for file ' // trim(file_name) // ';  this calendar  &
   4435                &conversion not currently available')
   4436         endif

Page 129         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4437       else
   4438 !! if the year is specified as '0000', then the file is intended to
   4439 !! apply to all years -- the time variables within the file refer to
   4440 !! the displacement from the start of each year to the time of the
   4441 !! associated data. Time interpolation is to be done with interface
   4442 !! time_interp_list, with the optional argument modtime=YEAR. base_time
   4443 !! is set to an arbitrary value here; it's only use will be as a
   4444 !! timestamp for optionally generated diagnostics.
   4445         base_time = get_base_time ()
   4446       endif
   4447       ntime_in = 1
   4448       if (ntime > 0) then
   4449         allocate(time_in(ntime), clim_type%time_slice(ntime))
   4450         allocate(clim_type%clim_times(12,(ntime+11)/12))
   4451         time_in = 0.0
   4452         clim_type%time_slice = set_time(0,0) + base_time
   4453         clim_type%clim_times = set_time(0,0) + base_time
   4454         call mpp_get_times(clim_type%unit, time_in)
   4455         ntime_in = ntime
   4456 ! determine whether the data is a continuous set of monthly values or
   4457 ! a series of annual cycles spread throughout the period of data
   4458         non_monthly = .false.
   4459         do n = 1, ntime-1
   4460 !  Assume that the times in the data file correspond to days only.
   4461           if (time_in(n+1) > (time_in(n) + 32.)) then
   4462             non_monthly = .true.
   4463             exit
   4464           endif
   4465         end do
   4466         if (clim_type%climatological_year) then
   4467           call mpp_error (NOTE, 'interpolator[1]_mod :'  // &
   4468           trim(file_name) // ' is a year-independent climatology file')
   4469         else
   4470           call mpp_error (NOTE, 'interpolator[1]_mod :' // &
   4471             trim(file_name) // ' is a timeseries file')
   4472         endif
   4473         do n = 1, ntime
   4474 !Assume that the times in the data file correspond to days only.
   4475           if (clim_type%climatological_year) then
   4476 !! RSH NOTE:
   4477 !! for this case, do not add base_time. time_slice will be sent to
   4478 !! time_interp_list with the optional argument modtime=YEAR, so that
   4479 !! the time that is needed in time_slice is the displacement into the
   4480 !! year, not the displacement from a base_time.
   4481             clim_type%time_slice(n) = &
   4482                 set_time(INT( ( time_in(n) - INT(time_in(n)) ) * SECONDS_PER_DAY), &
   4483                                INT(time_in(n)))
   4484           else
   4485 !--------------------------------------------------------------------
   4486 !    if fileyr /= 0 (i.e., climatological_year=F),
   4487 !    then define the times associated with each time-
   4488 !    slice. if calendar conversion between data file and model calendar
   4489 !    is needed, do it so that data from the file is associated with the
   4490 !    same calendar time in the model. here the time_slice needs to
   4491 !    include the base_time; values will be generated relative to the
   4492 !    "real" time.
   4493 !--------------------------------------------------------------------

Page 130         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4494             if ( (model_calendar == JULIAN .and.   &
   4495                  & trim(adjustl(lowercase(file_calendar))) == 'julian')  .or. &
   4496                  & (model_calendar == NOLEAP .and.   &
   4497                  & trim(adjustl(lowercase(file_calendar))) == 'noleap') )  then
   4498 !---------------------------------------------------------------------
   4499 !    no calendar conversion needed.
   4500 !---------------------------------------------------------------------
   4501               clim_type%time_slice(n) = &
   4502                  set_time(INT( ( time_in(n) - INT(time_in(n)) ) * SECONDS_PER_DAY ),&
   4503                                  INT(time_in(n)))  &
   4504                   + base_time
   4505 !---------------------------------------------------------------------
   4506 !    convert file times from noleap to julian.
   4507 !---------------------------------------------------------------------
   4508             else if ( (model_calendar == JULIAN .and.   &
   4509                  & trim(adjustl(lowercase(file_calendar))) == 'noleap')) then
   4510               Noleap_time = set_time (0, INT(time_in(n))) + base_time
   4511               call get_date_no_leap (Noleap_time, yr, mo, dy, hr,  &
   4512                                      mn, sc)
   4513               clim_type%time_slice(n) = set_date_julian (yr, mo, dy,  &
   4514                                                          hr, mn, sc)
   4515               if (n == 1) then
   4516                 call print_date (clim_type%time_slice(1), &
   4517                         str= 'for file ' // trim(file_name) // ', the &
   4518                               &first time slice is mapped to :')
   4519               endif
   4520               if (n == ntime) then
   4521                 call print_date (clim_type%time_slice(ntime), &
   4522                          str= 'for file ' // trim(file_name) // ', the &
   4523                                &last time slice is mapped to:')
   4524               endif
   4525 !---------------------------------------------------------------------
   4526 !    convert file times from julian to noleap.
   4527 !---------------------------------------------------------------------
   4528             else if ( (model_calendar == NOLEAP .and.   &
   4529                  & trim(adjustl(lowercase(file_calendar))) == 'julian')) then
   4530               Julian_time = set_time (0, INT(time_in(n))) + base_time
   4531               call get_date_julian (Julian_time, yr, mo, dy, hr, mn, sc)
   4532               clim_type%time_slice(n) = set_date_no_leap (yr, mo, dy, &
   4533                                                           hr, mn, sc)
   4534               if (n == 1) then
   4535                 call print_date (clim_type%time_slice(1), &
   4536                          str= 'for file ' // trim(file_name) // ', the &
   4537                                &first time slice is mapped to :')
   4538               endif
   4539               if (n == ntime) then
   4540                 call print_date (clim_type%time_slice(ntime), &
   4541                          str= 'for file ' // trim(file_name) // ', the &
   4542                                &last time slice is mapped to:')
   4543               endif
   4544 !---------------------------------------------------------------------
   4545 !    any other calendar combinations would have caused a fatal error
   4546 !    above.
   4547 !---------------------------------------------------------------------
   4548             endif
   4549           endif
   4550           m = (n-1)/12 +1 ; m1 = n- (m-1)*12

Page 131         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4551           clim_type%clim_times(m1,m) = clim_type%time_slice(n)
   4552         enddo
   4553       else
   4554         allocate(time_in(1), clim_type%time_slice(1))
   4555         allocate(clim_type%clim_times(1,1))
   4556         time_in = 0.0
   4557         clim_type%time_slice = set_time(0,0) + base_time
   4558         clim_type%clim_times(1,1) = set_time(0,0) + base_time
   4559       endif
   4560       deallocate(time_in)
   4561   end select ! case(name)
   4562 enddo
   4563 ! -------------------------------------------------------------------
   4564 ! For 2-D fields, allocate levs and halflevs here
   4565 !  code is still needed for case when only halflevs are in data file.
   4566 ! -------------------------------------------------------------------
   4567     if( .not. associated(clim_type%levs) ) then
   4568         allocate( clim_type%levs(nlev) )
   4569         clim_type%levs = 0.0
   4570     endif
   4571     if( .not. associated(clim_type%halflevs) )  then
   4572         allocate( clim_type%halflevs(nlev+1) )
   4573         clim_type%halflevs(1) = 0.0
   4574         if (clim_type%level_type == PRESSURE) then
   4575           clim_type%halflevs(nlev+1) = 1013.25* 100.0   ! MKS
   4576         else if (clim_type%level_type == SIGMA   ) then
   4577           clim_type%halflevs(nlev+1) = 1.0
   4578         endif
   4579         do n=2,nlev
   4580            clim_type%halflevs(n) = 0.5*(clim_type%levs(n) + &
   4581                                          clim_type%levs(n-1))
   4582         end do
   4583     endif
   4584 deallocate(axes)
   4585 ! In the case where only the midpoints of the longitudes are defined we force
   4586 ! the definition
   4587 ! of the boundaries to be half-way between the midpoints.
   4588 if (.not. associated(clim_type%lon) .and. .not. associated(clim_type%lonb)) &
   4589    call mpp_error(FATAL,'Interpolator_init : There appears to be no longitude axis in file '//file_name)
   4590 if (.not. associated(clim_type%lonb) ) then
   4591   if (size(clim_type%lon(:)) /= 1) then
   4592     allocate(clim_type%lonb(size(clim_type%lon(:))+1))
   4593     dlon = (clim_type%lon(2)-clim_type%lon(1))/2.0
   4594     clim_type%lonb(1) = clim_type%lon(1) - dlon
   4595     clim_type%lonb(2:) = clim_type%lon(1:) + dlon
   4596   else
   4597 !! this is the case for zonal mean data, lon = 1, lonb not present
   4598 !! in file.
   4599     allocate(clim_type%lonb(2))
   4600     clim_type%lonb(1) = -360.*dtr
   4601     clim_type%lonb(2) = 360.0*dtr
   4602     clim_type%lon(1) = 0.0
   4603   endif
   4604 endif
   4605 !clim_type%lonb=clim_type%lonb*dtr
   4606 ! This assumes the lonb are in degrees in the NetCDF file!
   4607 if (.not. associated(clim_type%lat) .and. .not. associated(clim_type%latb)) &

Page 132         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4608    call mpp_error(FATAL,'Interpolator_init : There appears to be no latitude axis in file '//file_name)
   4609 ! In the case where only the grid midpoints of the latitudes are defined we
   4610 ! force the
   4611 ! definition of the boundaries to be half-way between the midpoints.
   4612 if (.not. associated(clim_type%latb) ) then
   4613    allocate(clim_type%latb(nlat+1))
   4614    dlat = (clim_type%lat(2)-clim_type%lat(1)) * 0.5
   4615 !  clim_type%latb(1) = min( 90., max(-90., clim_type%lat(1) - dlat) )
   4616    clim_type%latb(1) = min( PI/2., max(-PI/2., clim_type%lat(1) - dlat) )
   4617    clim_type%latb(2:nlat) = ( clim_type%lat(1:nlat-1) + clim_type%lat(2:nlat) )* 0.5
   4618    dlat = ( clim_type%lat(nlat) - clim_type%lat(nlat-1) ) * 0.5
   4619 !  clim_type%latb(nlat+1) = min( 90., max(-90., clim_type%lat(nlat) + dlat) )
   4620    clim_type%latb(nlat+1) = min( PI/2., max(-PI/2., clim_type%lat(nlat) + dlat))
   4621 endif
   4622 !clim_type%latb=clim_type%latb*dtr
   4623 !Assume that the horizontal interpolation within a file is the same for each
   4624 !variable.
   4625  if (conservative_interp) then
   4626     call horiz_interp_new (clim_type%interph, &
   4627                         clim_type%lonb, clim_type%latb, &
   4628                         lonb_mod, latb_mod)
   4629  else
   4630     call mpp_error(NOTE, "Using Bilinear interpolation")
   4631 !!! DEBUG CODE
   4632     if (.not. allocated(agrid_mod)) then
   4633        nx = size(lonb_mod,1)-1
   4634        ny = size(latb_mod,2)-1
   4635        allocate(agrid_mod(nx,ny,2))
   4636        do j=1,ny
   4637        do i=1,nx
   4638           call cell_center2((/lonb_mod(i,j),latb_mod(i,j)/), &
   4639                (/lonb_mod(i+1,j),latb_mod(i+1,j)/), &
   4640                (/lonb_mod(i,j+1),latb_mod(i,j+1)/), &
   4641                (/lonb_mod(i+1,j+1),latb_mod(i+1,j+1)/),  agrid_mod(i,j,:))
   4642        enddo
   4643        enddo
   4644     endif
   4645 !!! END DEBUG CODE
   4646     call horiz_interp_new (clim_type%interph, &
   4647                         clim_type%lonb, clim_type%latb, &
   4648                         agrid_mod(:,:,1), agrid_mod(:,:,2), interp_method="bilinear")
   4649  endif
   4650 !--------------------------------------------------------------------
   4651 !  allocate the variable clim_type%data . This will be the climatology
   4652 !  data horizontally interpolated, so it will be on the model horizontal
   4653 !  grid, but it will still be on the climatology vertical grid.
   4654 !--------------------------------------------------------------------
   4655 select case(ntime)
   4656  case (13:)
   4657 ! This may  be data that does not have a continous time-line
   4658 ! i.e. IPCC data where decadal data is present but we wish to retain
   4659 ! the seasonal nature of the data.
   4660 !! RSH: the following test will not always work; instead use the
   4661 !! RSH: non-monthly variable to test on.
   4662 !RSHlast_time = clim_type%time_slice(1) + ( ntime -1 ) * &
   4663 !RSH        ( clim_type%time_slice(2) - clim_type%time_slice(1) )
   4664 !RSHif ( last_time < clim_type%time_slice(ntime)) then

Page 133         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4665  if (non_monthly) then
   4666 ! We have a broken time-line. e.g. We have monthly data but only for years
   4667 ! ending in 0. 1960,1970 etc.
   4668 !   allocate(clim_type%data(size(lonb_mod(:))-1, size(latb_mod(:))-1, nlev, 2,
   4669 !   num_fields))
   4670    allocate(clim_type%pmon_pyear(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, num_fields))
   4671    allocate(clim_type%pmon_nyear(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, num_fields))
   4672    allocate(clim_type%nmon_nyear(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, num_fields))
   4673    allocate(clim_type%nmon_pyear(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, num_fields))
   4674    clim_type%pmon_pyear = 0.0
   4675    clim_type%pmon_nyear = 0.0
   4676    clim_type%nmon_nyear = 0.0
   4677    clim_type%nmon_pyear = 0.0
   4678    clim_type%TIME_FLAG = BILINEAR
   4679 else
   4680 ! We have a continuous time-line so treat as for 5-12 timelevels as below.
   4681    if ( .not. read_all_on_init) then
   4682    allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, 2, num_fields))
   4683    else
   4684    allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, &
   4685                ntime, num_fields))
   4686    endif
   4687    clim_type%data = 0.0
   4688    clim_type%TIME_FLAG = LINEAR
   4689 endif
   4690 !++lwh
   4691  case (1:12)
   4692 !--lwh
   4693 ! We have more than 4 timelevels
   4694 ! Assume we have monthly or higher time resolution datasets (climatology or time
   4695 ! series)
   4696 ! So we only need to read 2 datasets and apply linear temporal interpolation.
   4697    if ( .not. read_all_on_init) then
   4698    allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, 2, num_fields))
   4699    else
   4700    allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, &
   4701                ntime, num_fields))
   4702    endif
   4703    clim_type%data = 0.0
   4704    clim_type%TIME_FLAG = LINEAR
   4705 !++lwh
   4706 !case (1:4)
   4707 ! Assume we have seasonal data and read in all the data.
   4708 ! We can apply sine curves to these data.
   4709 !  allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, ntime,
   4710 !  num_fields))
   4711 !  clim_type%data = 0.0
   4712 !  clim_type%TIME_FLAG = SEASONAL
   4713 !--lwh
   4714 ! case (default)
   4715  case(:0)
   4716    clim_type%TIME_FLAG = NOTIME
   4717    allocate(clim_type%data(size(lonb_mod,1)-1, size(latb_mod,2)-1, nlev, 1, num_fields))
   4718 end select
   4719 !------------------------------------------------------------------
   4720 !    Allocate space for the single time level of the climatology on its
   4721 !    grid size.

Page 134         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4722 !----------------------------------------------------------------------
   4723    if(clim_type%TIME_FLAG .eq. LINEAR ) then
   4724    allocate(clim_type%time_init(num_fields,2))
   4725    else
   4726    allocate(clim_type%time_init(num_fields,ntime))
   4727    endif
   4728    allocate (clim_type%indexm(num_fields),   &
   4729              clim_type%indexp(num_fields),   &
   4730              clim_type%climatology(num_fields))
   4731    clim_type%time_init(:,:) = 0
   4732    clim_type%indexm(:)      = 0
   4733    clim_type%indexp(:)      = 0
   4734    clim_type%climatology(:) = 0
   4735 allocate(clim_type%field_name(num_fields))
   4736 allocate(clim_type%field_type(num_fields))
   4737 allocate(clim_type%mr(num_fields))
   4738 allocate(clim_type%out_of_bounds(num_fields))
   4739 clim_type%out_of_bounds(:)=0
   4740 allocate(clim_type%vert_interp(num_fields))
   4741 clim_type%vert_interp(:)=0
   4742 !--------------------------------------------------------------------
   4743 !Allocate the space for the fields within the climatology data file.
   4744 allocate(varfields(nvar))
   4745 !--------------------------------------------------------------------
   4746 ! Get the variable names out of the file.
   4747 call mpp_get_fields(clim_type%unit, varfields)
   4748 if(present(data_names)) then
   4749 !++lwh
   4750    if ( size(data_out_of_bounds(:)) /= size(data_names(:)) .and. size(data_out_of_bounds(:)) /= 1 ) &
   4751       call mpp_error(FATAL,'interpolator_init : The size of the data_out_of_bounds array must be 1&
   4752                             & or size(data_names)')
   4753    if (present(vert_interp)) then
   4754       if( size(vert_interp(:)) /= size(data_names(:)) .and. size(vert_interp(:)) /= 1 ) &
   4755       call mpp_error(FATAL,'interpolator_init : The size of the vert_interp array must be 1&
   4756                             & or size(data_names)')
   4757    endif
   4758 ! Only read the fields named in data_names
   4759    do j=1,size(data_names(:))
   4760       NAME_PRESENT = .FALSE.
   4761       do i=1,nvar
   4762          call mpp_get_atts(varfields(i),name=name,ndim=ndim,units=units)
   4763          if( trim(adjustl(lowercase(name))) == trim(adjustl(lowercase(data_names(j)))) ) then
   4764             units=chomp(units)
   4765             if (mpp_pe() == 0 ) write(*,*) 'Initializing src field : ',trim(name)
   4766             clim_type%field_name(j) = name
   4767             clim_type%field_type(j) = varfields(i)
   4768             clim_type%mr(j)         = check_climo_units(units)
   4769             NAME_PRESENT = .TRUE.
   4770             if (present(clim_units)) clim_units(j) = units
   4771             clim_type%out_of_bounds(j) = data_out_of_bounds(MIN(j,SIZE(data_out_of_bounds(:))) )
   4772             if( clim_type%out_of_bounds(j) /= CONSTANT .and. &
   4773                 clim_type%out_of_bounds(j) /= ZERO ) &
   4774                call mpp_error(FATAL,"Interpolator_init: data_out_of_bounds must be&
   4775                                     & set to ZERO or CONSTANT")
   4776             if( present(vert_interp) ) then
   4777                clim_type%vert_interp(j) = vert_interp(MIN(j,SIZE(vert_interp(:))) )
   4778                if( clim_type%vert_interp(j) /= INTERP_WEIGHTED_P .and. &

Page 135         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4779                    clim_type%vert_interp(j) /= INTERP_LINEAR_P ) &
   4780                   call mpp_error(FATAL,"Interpolator_init: vert_interp must be&
   4781                                        & set to INTERP_WEIGHTED_P or INTERP_LINEAR_P")
   4782             else
   4783                clim_type%vert_interp(j) = INTERP_WEIGHTED_P
   4784             end if
   4785          endif
   4786       enddo
   4787       if(.not. NAME_PRESENT) &
   4788          call mpp_error(FATAL,'interpolator_init : Check names of fields being passed. ' &
   4789                               //trim(data_names(j))//' does not exist.')
   4790    enddo
   4791 else
   4792 
   4793    if ( size(data_out_of_bounds(:)) /= nvar .and. size(data_out_of_bounds(:)) /= 1 ) &
   4794       call mpp_error(FATAL,'interpolator_init : The size of the out of bounds array must be 1&
   4795                            & or the number of fields in the climatology dataset')
   4796    if ( present(vert_interp) ) then
   4797       if (size(vert_interp(:)) /= nvar .and. size(vert_interp(:)) /= 1 ) &
   4798       call mpp_error(FATAL,'interpolator_init : The size of the vert_interp array must be 1&
   4799                            & or the number of fields in the climatology dataset')
   4800    endif
   4801 
   4802 ! Read all the fields within the climatology data file.
   4803    do i=1,nvar
   4804       call mpp_get_atts(varfields(i),name=name,ndim=ndim,units=units)
   4805          if (mpp_pe() ==0 ) write(*,*) 'Initializing src field : ',trim(name)
   4806          clim_type%field_name(i) = lowercase(trim(name))
   4807          clim_type%field_type(i) = varfields(i)
   4808          clim_type%mr(i)         = check_climo_units(units)
   4809          if (present(clim_units)) clim_units(i) = units
   4810          clim_type%out_of_bounds(i) = data_out_of_bounds(MIN(i,SIZE(data_out_of_bounds(:))) )
   4811          if( clim_type%out_of_bounds(i) /= CONSTANT .and. &
   4812              clim_type%out_of_bounds(i) /= ZERO ) &
   4813             call mpp_error(FATAL,"Interpolator_init: data_out_of_bounds must be&
   4814                                  & set to ZERO or CONSTANT")
   4815          if( present(vert_interp) ) then
   4816             clim_type%vert_interp(i) = vert_interp( MIN(i,SIZE(vert_interp(:))))
   4817             if( clim_type%vert_interp(i) /= INTERP_WEIGHTED_P .and. &
   4818                 clim_type%vert_interp(i) /= INTERP_LINEAR_P ) &
   4819                call mpp_error(FATAL,"Interpolator_init: vert_interp must be&
   4820                                     & set to INTERP_WEIGHTED_P or INTERP_LINEAR_P")
   4821          else
   4822             clim_type%vert_interp(i) = INTERP_WEIGHTED_P
   4823          end if
   4824    end do
   4825 !--lwh
   4826 endif
   4827 
   4828 deallocate(varfields)
   4829 
   4830 
   4831 if( clim_type%TIME_FLAG .eq. SEASONAL ) then
   4832 ! Read all the data at this point.
   4833    do i=1,num_fields
   4834       do n = 1, ntime
   4835          call interp_read_data_mppio( clim_type, clim_type%field_type(i), &

Page 136         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4836                          clim_type%data(:,:,:,n,i), n, i, base_time )
   4837       enddo
   4838    enddo
   4839 endif
   4840 
   4841 if( clim_type%TIME_FLAG .eq. LINEAR  .and. read_all_on_init) then
   4842 ! Read all the data at this point.
   4843    do i=1,num_fields
   4844       do n = 1, ntime
   4845          call interp_read_data_mppio( clim_type, clim_type%field_type(i), &
   4846                          clim_type%data(:,:,:,n,i), n, i, base_time )
   4847       enddo
   4848    enddo
   4849 
   4850    call mpp_close (unit)
   4851 endif
   4852 
   4853 if( clim_type%TIME_FLAG .eq. NOTIME ) then
   4854 ! Read all the data at this point.
   4855    do i=1,num_fields
   4856      call interp_read_data_mppio_no_time_axis( clim_type, clim_type%field_type(i),&
   4857                                   clim_type%data(:,:,:,1,i), i )
   4858    enddo
   4859    call mpp_close (unit)
   4860 endif
   4861 
   4862 if (present (single_year_file)) then
   4863   single_year_file = clim_type%climatological_year
   4864 endif
   4865 
   4866 end subroutine mppio_interpolator_init

Page 137         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                                    
                                                          
 interpolator_mod_mp_mppio_interpolator_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   4298                                 scalar                    4298,4324,4406,4408,4416,4424,4495
                                                                                                  ,4497,4509,4529,4763              
 AGRID_MOD                  Local  4189     R(8)            8     3     1        ALC,SAVE         4632,4635,4641,4648               
 ALLOCATED                  Func   4632                                 scalar                    4632                              
 ALPHA                      Local  4179     R(8)            8     1     1        ALC              4306,4308,4311,4313,4332,4334,4337
                                                                                                  ,4339                             
 ASSOCIATED                 Func   4567                                 scalar                    4567,4571,4588,4590,4607,4612     
 AXES                       Local  4223     RECORD          1424  1     1        ALC              4223,4224,4245,4251,4262,4273,4284
                                                                                                  ,4295,4321,4346,4351,4584         
 BASE_TIME                  Local  4174     TIME_TYPE       16          scalar                    4413,4421,4429,4445,4452,4453,4504
                                                                                                  ,4510,4530,4557,4558,4836,4846    
 CLIM_TYPE                  Dummy  4154     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,INOUT        4192,4214,4215,4233,4242,4250,4251
                                                                                                  ,4254,4261,4262,4265,4272,4273,427
                                                                                                  6,4283,4284,4287,4294,4295,4296,42
                                                                                                  99,4305,4308,4311,4315,4320,4321,4
                                                                                                  322,4325,4331,4334,4337,4341,4345,
                                                                                                  4346,4347,4350,4351,4352,4397,4399
                                                                                                  ,4449,4450,4452,4453,4454,4466,447
                                                                                                  5,4481,4501,4513,4516,4521,4532,45
                                                                                                  35,4540,4551,4554,4555,4557,4558,4
                                                                                                  567,4568,4569,4571,4572,4573,4574,
                                                                                                  4575,4576,4577,4580,4581,4588,4590
                                                                                                  ,4591,4592,4593,4594,4595,4599,460
                                                                                                  0,4601,4602,4607,4612,4613,4614,46
                                                                                                  16,4617,4618,4620,4626,4627,4646,4
                                                                                                  647,4670,4671,4672,4673,4674,4675,
                                                                                                  4676,4677,4678,4682,4684,4687,4688
                                                                                                  ,4698,4700,4703,4704,4716,4717,472
                                                                                                  3,4724,4726,4728,4729,4730,4731,47
                                                                                                  32,4733,4734,4735,4736,4737,4738,4
                                                                                                  739,4740,4741,4747,4766,4767,4768,
                                                                                                  4771,4772,4773,4777,4778,4779,4783
                                                                                                  ,4806,4807,4808,4810,4811,4812,481
                                                                                                  6,4817,4818,4822,4831,4835,4836,48
                                                                                                  41,4845,4846,4853,4856,4857,4863  
 CLIM_UNITS                 Dummy  4156     CHAR                  1     1        ARG,OUT          4770,4809                         
 DATA_NAMES                 Dummy  4155     CHAR                  1     1        ARG,IN           4218,4748,4750,4754,4759,4763,4789
 DATA_OUT_OF_BOUNDS         Dummy  4155     I(4)            4     1     1        ARG,IN           4750,4771,4793,4810               
 DLAT                       Local  4172     R(8)            8           scalar                    4614,4616,4618,4620               
 DLON                       Local  4172     R(8)            8           scalar                    4593,4594,4595                    
 DTR                        Local  4176     R(8)            8           scalar                    4195,4254,4265,4276,4287,4600,4601
 DY                         Local  4185     I(4)            4           scalar                    4511,4513,4531,4532               
 ERROR_MESG                 Local  4183     CHAR            256         scalar                    4366,4370,4381,4385               

Page 138         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILEDAY                    Local  4177     I(4)            4           scalar                    4356,4374,4389,4413,4421,4429     
 FILEHR                     Local  4177     I(4)            4           scalar                    4359,4375,4390,4413,4422,4430     
 FILEMIN                    Local  4177     I(4)            4           scalar                    4360,4376,4391,4414,4422,4430     
 FILEMON                    Local  4177     I(4)            4           scalar                    4357,4373,4388,4413,4421,4429     
 FILESEC                    Local  4177     I(4)            4           scalar                    4361,4377,4392,4414,4422,4430     
 FILEUNITS                  Local  4178     CHAR            20          scalar                    4364,4365,4372,4373,4374,4375,4376
                                                                                                  ,4377,4379,4380,4387,4388,4389,439
                                                                                                  0,4391,4392                       
 FILEYR                     Local  4177     I(4)            4           scalar                    4358,4372,4387,4397,4413,4421,4429
 FILE_CALENDAR              Local  4182     CHAR            24          scalar                    4246,4406,4408,4416,4424,4433,4495
                                                                                                  ,4497,4509,4529                   
 FILE_NAME                  Dummy  4154     CHAR                        scalar   ARG,IN           4202,4215,4257,4268,4279,4290,4368
                                                                                                  ,4383,4394,4411,4419,4427,4434,446
                                                                                                  8,4471,4517,4522,4536,4541,4589,46
                                                                                                  08                                
 FMS_IO_FILE_EXIST          Func   4204     L(4)            4           scalar   PRIV             4204                              
 HR                         Local  4185     I(4)            4           scalar                    4511,4514,4531,4533               
 I                          Local  4180     I(4)            4           scalar                    4244,4245,4251,4262,4273,4284,4295
                                                                                                  ,4321,4346,4351,4637,4638,4639,464
                                                                                                  0,4641,4761,4762,4767,4803,4804,48
                                                                                                  06,4807,4808,4809,4810,4811,4812,4
                                                                                                  816,4817,4818,4822,4833,4835,4836,
                                                                                                  4843,4845,4846,4855,4856,4857     
 INT                        Func   4482                                 scalar                    4482,4483,4502,4503,4510,4530     
 J                          Local  4180     I(4)            4           scalar                    4636,4638,4639,4640,4641,4759,4763
                                                                                                  ,4766,4767,4768,4770,4771,4772,477
                                                                                                  3,4777,4778,4779,4783,4789        
 JULIAN_TIME                Local  4187     TIME_TYPE       16          scalar                    4530,4531                         
 LATB_MOD                   Dummy  4154     R(8)            8     2     1        ARG,IN           4628,4634,4638,4639,4640,4641,4670
                                                                                                  ,4671,4672,4673,4682,4684,4698,470
                                                                                                  0,4717                            
 LEN                        Local  4245     I(4)            4           scalar                    4245,4249,4260,4271,4282,4293,4319
                                                                                                  ,4344,4349                        
 LEN_TRIM                   Func   4365                                 scalar                    4365,4380                         
 LONB_MOD                   Dummy  4154     R(8)            8     2     1        ARG,IN           4628,4633,4638,4639,4640,4641,4670
                                                                                                  ,4671,4672,4673,4682,4684,4698,470
                                                                                                  0,4717                            
 M                          Local  4177     I(4)            4           scalar                    4550,4551                         
 M1                         Local  4177     I(4)            4           scalar                    4550,4551                         
 MAX                        Func   4616                                 scalar                    4616,4620                         
 MIN                        Func   4616                                 scalar                    4616,4620,4771,4777,4810,4816     
 MN                         Local  4185     I(4)            4           scalar                    4512,4514,4531,4533               
 MO                         Local  4185     I(4)            4           scalar                    4511,4513,4531,4532               
 MODEL_CALENDAR             Local  4184     I(4)            4           scalar                    4355,4405,4407,4415,4423,4494,4496
                                                                                                  ,4508,4528                        
 MPPIO_INTERPOLATOR_INIT    Subr   4154                                                           569                               
 MPP_GET_AXES               Subr   4224                                          PRIV             99,4224                           
 MPP_GET_AXIS_ATTS          Subr   4245                                          PRIV             4245                              
 MPP_GET_AXIS_DATA          Subr   4251                                          PRIV             100,4251,4262,4273,4284,4295,4321,
                                                                                                  4346,4351                         
 MPP_GET_FIELDS             Subr   4747                                          PRIV             101,4747                          
 MPP_GET_INFO               Subr   4213                                          PRIV             97,4213                           
 MPP_GET_TIMES              Subr   4454                                          PRIV             95,4454                           
 MPP_MULTI                  Param  4206     I(4)            4           scalar   PRIV             107,4206                          
 MPP_NETCDF                 Param  4206     I(4)            4           scalar   PRIV             106,4206                          

Page 139         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55 Symbol Table                    interpolator.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_OPEN                   Subr   4205                                          PRIV             93,4205                           
 MPP_RDONLY                 Param  4205     I(4)            4           scalar   PRIV             105,4205                          
 MPP_SINGLE                 Param  4206     I(4)            4           scalar   PRIV             109,4206                          
 N                          Local  4186     I(4)            4           scalar                    4307,4308,4310,4311,4333,4334,4336
                                                                                                  ,4337,4459,4461,4473,4481,4482,448
                                                                                                  3,4501,4502,4503,4510,4513,4515,45
                                                                                                  20,4530,4532,4534,4539,4550,4551,4
                                                                                                  579,4580,4581,4834,4836,4844,4846 
 NAME                       Local  4245     CHAR            64          scalar                    4245,4247,4762,4763,4765,4766,4804
                                                                                                  ,4805,4806                        
 NAME_PRESENT               Local  4175     L(4)            4           scalar                    4760,4769,4787                    
 NATT                       Local  4213     I(4)            4           scalar                    4213                              
 NOLEAP_TIME                Local  4187     TIME_TYPE       16          scalar                    4510,4511                         
 NON_MONTHLY                Local  4181     L(4)            4           scalar                    4458,4462,4665                    
 NX                         Local  4190     I(4)            4           scalar                    4633,4635,4637                    
 NY                         Local  4190     I(4)            4           scalar                    4634,4635,4636                    
 PRESENT                    Func   4218                                 scalar                    4218,4748,4753,4770,4776,4796,4809
                                                                                                  ,4815,4862                        
 SC                         Local  4185     I(4)            4           scalar                    4512,4514,4531,4533               
 SINGLE_YEAR_FILE           Dummy  4156     L(4)            4           scalar   ARG,OUT          4862,4863                         
 SIZE                       Func   4218                                 scalar                    4218,4591,4592,4633,4634,4670,4671
                                                                                                  ,4672,4673,4682,4684,4698,4700,471
                                                                                                  7,4750,4754,4759,4771,4777,4793,47
                                                                                                  97,4810,4816                      
 SRC_FILE                   Local  4170     CHAR            64          scalar                    4202,4204,4205,4209               
 TIME_AXIS                  Local  4224     AXISTYPE        1424        scalar   SAVE             4224                              
 TIME_IN                    Local  4188     R(8)            8     1     1        ALC              4449,4451,4454,4461,4482,4483,4502
                                                                                                  ,4503,4510,4530,4554,4556,4560    
 TPI                        Local  4176     R(8)            8           scalar                    4194,4195                         
 TRIM                       Func   4202                                 scalar                    4202,4204,4205,4209,4215,4247,4298
                                                                                                  ,4324,4368,4369,4383,4384,4406,440
                                                                                                  8,4411,4416,4419,4424,4427,4433,44
                                                                                                  34,4468,4471,4495,4497,4509,4517,4
                                                                                                  522,4529,4536,4541,4763,4765,4789,
                                                                                                  4805,4806                         
 UNIT                       Local  4169     I(4)            4           scalar                    4205,4213,4214,4224,4850,4859     
 VARFIELDS                  Local  4744     RECORD          1096  1     1        ALC              4744,4747,4762,4767,4804,4807,4828
 VERT_INTERP                Dummy  4156     I(4)            4     1     1        ARG,IN           4753,4754,4776,4777,4796,4797,4815
                                                                                                  ,4816                             
 YR                         Local  4185     I(4)            4           scalar                    4511,4513,4531,4532               

Page 140         Source Listing                  MPPIO_INTERPOLATOR_INIT
2021-06-01 08:55                                 interpolator.F90

   4867 
   4868 !> \brief interp_read_data_mppio receives various climate data as inputs and
   4869 !!        returns a horizontally interpolated climatology field.
   4870 !!
   4871 !! \param [in] <clim_type> The interpolate type which contains the data
   4872 !! \param [in] <src_field> The field type
   4873 !! \param [in] <nt> The index of the time slice of the climatology that you wish
   4874 !to read
   4875 !! \param [in] <i> OPTIONAL: The index of the field name that you are trying to
   4876 !read
   4877 !! \param [in] <Time> OPTIONAL: The model time. Used for diagnostic purposes
   4878 !only
   4879 !! \param [out] <hdata> The horizontally interpolated climatology field. This
   4880 !                       field will still be on the climatology vertical grid
   4881 subroutine interp_read_data_mppio(clim_type,src_field, hdata, nt,i, Time)
   4882 !
   4883 !  INTENT IN
   4884 !    clim_type : The interpolate type which contains the data
   4885 !    src_field : The field type
   4886 !    nt        : The index of the time slice of the climatology that you wish to
   4887 !    read.
   4888 !    i         : The index of the field name that you are trying to read.
   4889 !    (optional)
   4890 !    Time      : The model time. Used for diagnostic purposes only. (optional)
   4891 !
   4892 !  INTENT OUT
   4893 !
   4894 !    hdata     : The horizontally interpolated climatology field. This
   4895 !                field will still be on the climatology vertical grid.
   4896 !
   4897 type(interpolate_type)   , intent(in)  :: clim_type
   4898 type(fieldtype)          , intent(in)  :: src_field
   4899 integer                  , intent(in)  :: nt
   4900 real                     , intent(out) :: hdata(:,:,:)
   4901 integer        , optional, intent(in)  :: i
   4902 type(time_type), optional, intent(in)  :: Time
   4903 
   4904 integer   :: k, km
   4905 ! sjs
   4906 real, allocatable :: climdata(:,:,:), climdata2(:,:,:)
   4907 
   4908       allocate(climdata(size(clim_type%lon(:)),size(clim_type%lat(:)), &
   4909                         size(clim_type%levs(:))))
   4910 
   4911       call mpp_read(clim_type%unit,src_field, climdata,nt)
   4912 
   4913 !  if vertical index increases upward, flip the data so that lowest
   4914 !  pressure level data is at index 1, rather than the highest pressure
   4915 !  level data. the indices themselves were previously flipped.
   4916       if (clim_type%vertical_indices == INCREASING_UPWARD) then
   4917         allocate(climdata2(size(clim_type%lon(:)),   &
   4918                            size(clim_type%lat(:)), &
   4919                            size(clim_type%levs(:))))
   4920         km = size(clim_type%levs(:))
   4921         do k=1, km
   4922           climdata2(:,:,k) = climdata(:,:,km+1-k)
   4923         end do

Page 141         Source Listing                  INTERP_READ_DATA_MPPIO
2021-06-01 08:55                                 interpolator.F90

   4924         climdata = climdata2
   4925         deallocate (climdata2)
   4926       endif
   4927 
   4928       call horiz_interp(clim_type%interph, climdata, hdata)
   4929       if (clim_diag_initialized) &
   4930         call diag_read_data(clim_type,climdata,i, Time)
   4931       deallocate(climdata)
   4932 
   4933 
   4934 end subroutine interp_read_data_mppio


ENTRY POINTS

  Name                                                   
                                                         
 interpolator_mod_mp_interp_read_data_mppio_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLIMDATA                   Local  4906     R(8)            8     3     1        ALC              4908,4911,4922,4924,4928,4930,4931
 CLIMDATA2                  Local  4906     R(8)            8     3     1        ALC              4917,4922,4924,4925               
 CLIM_TYPE                  Dummy  4881     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,IN           4908,4909,4911,4916,4917,4918,4919
                                                                                                  ,4920,4928,4930                   
 FIELDTYPE                  Type   4898                                 scalar                    102,343,363,4898,4961             
 HDATA                      Dummy  4881     R(8)            8     3     1        ARG,OUT          4928                              
 I                          Dummy  4881     I(4)            4           scalar   ARG,IN           4930                              
 INTERP_READ_DATA_MPPIO     Subr   4881                                                           1728,1732,1735,1738,1770,1773,1830
                                                                                                  ,1833,1859,2148,2152,2155,2158,219
                                                                                                  1,2194,2251,2254,2280,2655,2659,26
                                                                                                  62,2665,2694,2696,2743,2746,2768,3
                                                                                                  135,3139,3142,3145,3174,3176,3222,
                                                                                                  3225,3247,4835,4845               
 K                          Local  4904     I(4)            4           scalar                    4921,4922                         
 KM                         Local  4904     I(4)            4           scalar                    4920,4921,4922                    
 MPP_READ                   Local  4911                                 scalar   PRIV             98,4911,4971                      
 MPP_READ_R3D_R8            Subr   4911                                          PRIV             4911,4971                         
 NT                         Dummy  4881     I(4)            4           scalar   ARG,IN           4911                              
 SIZE                       Func   4908                                 scalar                    4908,4909,4917,4918,4919,4920     
 SRC_FIELD                  Dummy  4881     FIELDTYPE       1096        scalar   ARG,IN           4911                              
 TIME                       Dummy  4881     TIME_TYPE       16          scalar   ARG,IN           4930                              

Page 142         Source Listing                  INTERP_READ_DATA_MPPIO
2021-06-01 08:55                                 interpolator.F90

   4935 
   4936 !> \brief interp_read_data_mppio_no_time_axis receives various climate data as
   4937 !inputs and
   4938 !!        returns a horizontally interpolated climatology field without the
   4939 !!            time axis.
   4940 !!
   4941 !! \param [in] <clim_type> The interpolate type which contains the data
   4942 !! \param [in] <src_field> The field type
   4943 !! \param [in] <i> OPTIONAL: The index of the field name that you are trying to
   4944 !read
   4945 !! \param [out] <hdata> The horizontally interpolated climatology field. This
   4946 !                       field will still be on the climatology vertical grid
   4947 subroutine interp_read_data_mppio_no_time_axis(clim_type,src_field, hdata, i)
   4948 
   4949 !  INTENT IN
   4950 !    clim_type : The interpolate type which contains the data
   4951 !    src_field : The field type
   4952 !    i         : The index of the field name that you are trying to read.
   4953 !    (optional)
   4954 
   4955 !  INTENT OUT
   4956 
   4957 !    hdata     : The horizontally interpolated climatology field. This
   4958 !                field will still be on the climatology vertical grid.
   4959 
   4960 type(interpolate_type)   , intent(in)  :: clim_type
   4961 type(fieldtype)          , intent(in)  :: src_field
   4962 real                     , intent(out) :: hdata(:,:,:)
   4963 integer        , optional, intent(in)  :: i
   4964 
   4965 integer   :: k, km
   4966 ! sjs
   4967 real, allocatable :: climdata(:,:,:), climdata2(:,:,:)
   4968 
   4969       allocate(climdata(size(clim_type%lon(:)),size(clim_type%lat(:)), size(clim_type%levs(:))))
   4970 
   4971       call mpp_read(clim_type%unit,src_field, climdata)
   4972 
   4973 !  if vertical index increases upward, flip the data so that lowest
   4974 !  pressure level data is at index 1, rather than the highest pressure
   4975 !  level data. the indices themselves were previously flipped.
   4976       if (clim_type%vertical_indices == INCREASING_UPWARD) then
   4977         allocate(climdata2(size(clim_type%lon(:)),   &
   4978                            size(clim_type%lat(:)), &
   4979                            size(clim_type%levs(:))))
   4980         km = size(clim_type%levs(:))
   4981         do k=1, km
   4982           climdata2(:,:,k) = climdata(:,:,km+1-k)
   4983         end do
   4984         climdata = climdata2
   4985         deallocate (climdata2)
   4986       endif
   4987 
   4988       call horiz_interp(clim_type%interph, climdata, hdata)
   4989       deallocate(climdata)
   4990 
   4991 end subroutine interp_read_data_mppio_no_time_axis

Page 143         Source Listing                  INTERP_READ_DATA_MPPIO_NO_TIME_AXIS
2021-06-01 08:55 Entry Points                    interpolator.F90



ENTRY POINTS

  Name                                                                
                                                                      
 interpolator_mod_mp_interp_read_data_mppio_no_time_axis_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLIMDATA                   Local  4967     R(8)            8     3     1        ALC              4969,4971,4982,4984,4988,4989     
 CLIMDATA2                  Local  4967     R(8)            8     3     1        ALC              4977,4982,4984,4985               
 CLIM_TYPE                  Dummy  4947     INTERPOLATE_TYPE                                                                        
                                                            5320        scalar   ARG,IN           4969,4971,4976,4977,4978,4979,4980
                                                                                                  ,4988                             
 HDATA                      Dummy  4947     R(8)            8     3     1        ARG,OUT          4988                              
 I                          Dummy  4947     I(4)            4           scalar   ARG,IN                                             
 INTERP_READ_DATA_MPPIO_NO_                                                                                                         
 TIME_AXIS                  Subr   4947                                                           4856                              
 K                          Local  4965     I(4)            4           scalar                    4981,4982                         
 KM                         Local  4965     I(4)            4           scalar                    4980,4981,4982                    
 SIZE                       Func   4969                                 scalar                    4969,4977,4978,4979,4980          
 SRC_FIELD                  Dummy  4947     FIELDTYPE       1096        scalar   ARG,IN           4971                              

Page 144         Source Listing                  INTERP_READ_DATA_MPPIO_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   4992 
   4993 
   4994 end module interpolator_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTTYPE                    Type   103                                  scalar                    103                               
 AXISTYPE                   Type   104                                  scalar   PRIV             104,361,362                       
 Assignment (=)                    136                                                                                              
 CONSTANTS_MOD              Module 156                                                            156                               
 DECREMENT_TIME             Func   154      RECORD          16          scalar   PRIV             154                               
 DIAG_MANAGER_MOD           Module 117                                                            117                               
 FMS2_IO_MOD                Module 125                                                            125                               
 FMS_MOD                    Module 120                                                            120,124                           
 HORIZ_INTERP_MOD           Module 133                                                            133                               
 HORIZ_INTERP_TYPE          Type   133                                  scalar   PRIV             133,301                           
 INIT_CLIM_DIAG             Subr   172                                                            172                               
 INTERPOLATE_TYPE_EQ        Subr   239                                                            168                               
 INTERPOLATOR               Local  225                                  scalar                    167                               
 INTERPOLATOR_END           Subr   171                                                            171                               
 INTERPOLATOR_INIT          Subr   166                                                            166                               
 INTERPOLATOR_MOD           Module 82                                                                                               
 INTERP_LOG_P               Param  395      I(4)            4           scalar                    395                               
 MPP_APPEND                 Param  108      I(4)            4           scalar   PRIV             108                               
 MPP_DOMAINS_INIT           Subr   110                                           PRIV             110                               
 MPP_DOMAINS_MOD            Module 110                                                            110                               
 MPP_EXIT                   Subr   88                                            PRIV             88                                
 MPP_GLOBAL_FIELD           Local  113                                  scalar   PRIV             113                               
 MPP_INIT                   Subr   87                                            PRIV             87                                
 MPP_IO_MOD                 Module 93                                                             93                                
 MPP_MOD                    Module 84                                                             84                                
 MPP_UPDATE_DOMAINS         Local  111                                  scalar   PRIV             111                               
 NULL                       Func   295                                  scalar   PTR              295,296,297,298,299,300,302,313,31
                                                                                                  4,315,316,317,319,321,323,324,325,
                                                                                                  326,328,329,330,332,343           
 OBTAIN_INTERPOLATOR_TIME_S                                                                                                         
 LICES                      Subr   169                                                            169                               
 QUERY_INTERPOLATOR         Subr   173                                                            173                               
 SELECTED_REAL_KIND         Func   412                                  scalar                    412                               
 TIME_INTERP_MOD            Module 155                                                            155                               
 TIME_MANAGER_MOD           Module 139                                                            139                               
 TPI                        Param  398      R(8)            8           scalar                    399                               
 UNSET_INTERPOLATOR_TIME_FL                                                                                                         
 AG                         Subr   170                                                            170                               

Page 145         Source Listing                  INTERP_READ_DATA_MPPIO_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

   4995 !
   4996 !#######################################################################

Page 146         Source Listing                  INTERP_READ_DATA_MPPIO_NO_TIME_AXIS
2021-06-01 08:55 Subprograms/Common Blocks       interpolator.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CART_TO_LATLON             Subr   1380                                                           1368                              
 CELL_CENTER2               Subr   1345                                                           1027,4638                         
 CHECK_CLIMO_UNITS          Func   1464     I(4)            4           scalar                    1166,1210,1475,1478,1480,1482,4768
                                                                                                  ,4808                             
 CHOMP                      Func   3956     CHAR            64          scalar                    1163,1308,1476,2016,2521,2975,3389
                                                                                                  ,3537,3665,3968,4298,4324,4764    
 DIAG_READ_DATA             Subr   3882                                                           3806,4930                         
 FMS2IO_INTERPOLATOR_INIT   Subr   580                                                            573                               
 GET_AXIS_LATLON_DATA       Subr   1269                                                           681,690,696,715                   
 GET_AXIS_LEVEL_DATA        Subr   1292                                                           740,760                           
 INIT_CLIM_DIAG             Subr   1504                                                                                             
 INTERPOLATE_TYPE_EQ        Subr   434                                                                                              
 INTERPOLATOR_2D            Subr   2917                                          PRIV                                               
 INTERPOLATOR_2D_NO_TIME_AX                                                                                                         
 IS                         Subr   3622                                          PRIV                                               
 INTERPOLATOR_3D            Subr   2459                                          PRIV                                               
 INTERPOLATOR_3D_NO_TIME_AX                                                                                                         
 IS                         Subr   3491                                          PRIV                                               
 INTERPOLATOR_4D            Subr   1931                                          PRIV                                               
 INTERPOLATOR_4D_NO_TIME_AX                                                                                                         
 IS                         Subr   3324                                          PRIV                                               
 INTERPOLATOR_END           Subr   3689                                                                                             
 INTERPOLATOR_INIT          Subr   509                                                                                              
 INTERPOLATOR_MOD           Module 82                                                                                               
 INTERP_LINEAR              Subr   4111                                                           2403,2870,3444,3585               
 INTERP_READ_DATA_MPPIO     Subr   4881                                                           1728,1732,1735,1738,1770,1773,1830
                                                                                                  ,1833,1859,2148,2152,2155,2158,219
                                                                                                  1,2194,2251,2254,2280,2655,2659,26
                                                                                                  62,2665,2694,2696,2743,2746,2768,3
                                                                                                  135,3139,3142,3145,3174,3176,3222,
                                                                                                  3225,3247,4835,4845               
 INTERP_READ_DATA_MPPIO_NO_                                                                                                         
 TIME_AXIS                  Subr   4947                                                           4856                              
 INTERP_WEIGHTED_SCALAR_1D  Subr   4052                                                           2868,3583                         
 INTERP_WEIGHTED_SCALAR_2D  Subr   3983                                                           2400,3441                         
 LATLON2XYZ                 Subr   1425                                                           1354,1355,1356,1357               
 MPPIO_INTERPOLATOR_INIT    Subr   4154                                                           569                               
 OBTAIN_INTERPOLATOR_TIME_S                                                                                                         
 LICES                      Subr   1587                                                                                             
 QUERY_INTERPOLATOR         Subr   3935                                                                                             
 READ_DATA                  Subr   3757                                                                                             
 READ_DATA_NO_TIME_AXIS     Subr   3824                                                           1257                              
 UNSET_INTERPOLATOR_TIME_FL                                                                                                         
 AG                         Subr   1888                                                                                             

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence

Page 147         Source Listing                  INTERP_READ_DATA_MPPIO_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1

Page 148         Source Listing                  INTERP_READ_DATA_MPPIO_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc

Page 149         Source Listing                  INTERP_READ_DATA_MPPIO_NO_TIME_AXIS
2021-06-01 08:55                                 interpolator.F90

       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : interpolator.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
