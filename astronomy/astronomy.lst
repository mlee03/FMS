Page 1           Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 /tmp/ifortnBtuDJ.i90

      1 # 1 "astronomy.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 !> @file
     22 !! @brief astronomy_mod provides astronomical variables for use
     23 !!        by other modules within fms. The only currently used interface is
     24 !!        for determination of astronomical values needed by the shortwave
     25 !!        radiation packages.
     26 !! @author Fei Liu
     27 !! @email gfdl.climate.model.info@noaa.gov
     28 !!
     29 !! \link http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/ \endlink
     30 !!
     31 !! Modules Included:
     32 !!
     33 !! <table>
     34 !!   <tr>
     35 !!     <th>Module Name</th>
     36 !!     <th>Functions Included</th>
     37 !!   </tr>
     38 !!   <tr>
     39 !!     <td>fms_mod</td>
     40 !!     <td>fms_init, mpp_pe, mpp_root_pe, stdlog,
     41 !!         write_version_number, check_nml_error, error_mesg,
     42 !!         FATAL, NOTE, WARNING</td>
     43 !!   </tr>
     44 !!   <tr>
     45 !!     <td>time_manager_mod</td>
     46 !!     <td>time_type, set_time, get_time, get_date_julian, set_date_julian,
     47 !!         set_date, length_of_year, time_manager_init, operator(-),
     48 !!         operator(+), operator( // ), operator(<)</td>
     49 !!   </tr>
     50 !!   <tr>
     51 !!     <td>constants_mod</td>
     52 !!     <td>constants_init, PI</td>
     53 !!   </tr>
     54 !!   <tr>
     55 !!     <td>mpp_mod</td>
     56 !!     <td>input_nml_file</td>
     57 !!   </tr>

Page 2           Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 astronomy.F90

     58 !! </table>
     59                       module astronomy_mod
     60 
     61 
     62 use fms_mod,           only: fms_init, &
     63                              mpp_pe, mpp_root_pe, stdlog, &
     64                              write_version_number, &
     65                              check_nml_error, error_mesg, &
     66                              FATAL, NOTE, WARNING
     67 use time_manager_mod,  only: time_type, set_time, get_time, &
     68                              get_date_julian, set_date_julian, &
     69                              set_date, length_of_year, &
     70                              time_manager_init, &
     71                              operator(-), operator(+), &
     72                              operator( // ), operator(<)
     73 use constants_mod,     only: constants_init, PI
     74 use mpp_mod,           only: input_nml_file
     75 
     76 !--------------------------------------------------------------------
     77 
     78 implicit none
     79 private
     80 
     81 !---------------------------------------------------------------------
     82 !----------- version number for this module --------------------------
     83 
     84 ! Include variable "version" to be written to log file.
     85 # 1 "../include/file_version.h" 1 
     86 ! -*-f90-*-
     87 !***********************************************************************
     88 !*                   GNU Lesser General Public License
     89 !*
     90 !* This file is part of the GFDL Flexible Modeling System (FMS).
     91 !*
     92 !* FMS is free software: you can redistribute it and/or modify it under
     93 !* the terms of the GNU Lesser General Public License as published by
     94 !* the Free Software Foundation, either version 3 of the License, or (at
     95 !* your option) any later version.
     96 !*
     97 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     98 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     99 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    100 !* for more details.
    101 !*
    102 !* You should have received a copy of the GNU Lesser General Public
    103 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    104 !***********************************************************************
    105 
    106 # 23
    107 
    108   character(len=*), parameter :: version = 'unknown'
    109 
    110 # 85 "astronomy.F90" 2 
    111 
    112 
    113 !---------------------------------------------------------------------
    114 !-------  interfaces --------

Page 3           Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 astronomy.F90

    115 
    116 public       &
    117               astronomy_init, get_period, set_period, &
    118               set_orbital_parameters, get_orbital_parameters, &
    119               set_ref_date_of_ae, get_ref_date_of_ae,  &
    120               diurnal_solar, daily_mean_solar, annual_mean_solar,  &
    121               astronomy_end, universal_time, orbital_time
    122 
    123 !> \page diurnal_solar diurnal_solar Interface
    124 !!
    125 !! ~~~~~~~~~~{.f90}
    126 !! call diurnal_solar (lat, lon, time, cosz, fracday, rrsun, dt_time)
    127 !! call diurnal_solar (lat, lon, gmt, time_since_ae, cosz, fracday, rrsun, dt)
    128 !! ~~~~~~~~~~
    129 !!
    130 !! The first option (used in conjunction with time_manager_mod)
    131 !! generates the real variables gmt and time_since_ae from the
    132 !! time_type input, and then calls diurnal_solar with these real inputs.
    133 !!
    134 !! The time of day is set by
    135 !! ~~~~~~~~~~{.f90}
    136 !! real, intent(in) :: gmt
    137 !! ~~~~~~~~~~
    138 !! The time of year is set by
    139 !! ~~~~~~~~~~{.f90}
    140 !! real, intent(in) :: time_since_ae
    141 !! ~~~~~~~~~~
    142 !! with time_type input, both of these are extracted from
    143 !! ~~~~~~~~~~{.f90}
    144 !! type(time_type), intent(in) :: time
    145 !! ~~~~~~~~~~
    146 !!
    147 !! Separate routines exist within this interface for scalar,
    148 !! 1D or 2D input and output fields:
    149 !!
    150 !! ~~~~~~~~~~{.f90}
    151 !! real, intent(in), dimension(:,:) :: lat, lon
    152 !! real, intent(in), dimension(:)   :: lat, lon
    153 !! real, intent(in)                 :: lat, lon
    154 !!
    155 !! real, intent(out), dimension(:,:) :: cosz, fracday
    156 !! real, intent(out), dimension(:)   :: cosz, fracday
    157 !! real, intent(out)                 :: cosz, fracday
    158 !! ~~~~~~~~~~
    159 !!
    160 !! One may also average the output fields over the time interval
    161 !! between gmt and gmt + dt by including the optional argument dt (or
    162 !! dt_time). dt is measured in radians and must be less than pi
    163 !! (1/2 day). This average is computed analytically, and should be
    164 !! exact except for the fact that changes in earth-sun distance over
    165 !! the time interval dt are ignored. In the context of a diurnal GCM,
    166 !! this option should always be employed to insure that the total flux
    167 !! at the top of the atmosphere is not modified by time truncation error.
    168 !!
    169 !! ~~~~~~~~~~{.f90}
    170 !! real, intent(in), optional :: dt
    171 !! type(time_type), optional :: dt_time

Page 4           Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 astronomy.F90

    172 !! ~~~~~~~~~~
    173 !! (see test.90 for examples of the use of these types)
    174 !!
    175 !! \param [in] <lat> Latitudes of model grid points [radians]
    176 !! \param [in] <lon> Longitudes of model grid points [radians]
    177 !! \param [in] <gmt> Time of day at longitude 0.0; midnight = 0.0, one day = 2 * pi [radians]
    178 !! \param [in] <time_since_ae> Time of year; autumnal equinox = 0.0, one year = 2 * pi [radians]
    179 !! \param [in] <time> Time at which astronomical values are desired (time_type variable) [seconds, days]
    180 !! \param [out] <cosz> Cosine of solar zenith angle, set to zero when entire period is in darkness [dimensionless]
    181 !! \param [out] <fracday> Daylight fraction of time interval [dimensionless]
    182 !! \param [out] <rrsun> Earth-Sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2 [dimensionless]
    183 !! \param [in] <dt> OPTIONAL: Time interval after gmt over which the astronomical variables are to be
    184 !!                  averaged. this produces averaged output rather than instantaneous. [radians], (1 day = 2 * pi)
    185 !! \param [in] <dt_time> OPTIONAL: Time interval after gmt over which the astronomical variables are to be
    186 !!                       averaged. this produces averaged output rather than instantaneous. time_type, [days, seconds]
    187 !! \param [in] <allow_negative_cosz> Allow negative values for cosz?
    188 !! \param [out] <half_day_out> half_day_out
    189 interface diurnal_solar
    190    module procedure diurnal_solar_2d
    191    module procedure diurnal_solar_1d
    192    module procedure diurnal_solar_0d
    193    module procedure diurnal_solar_cal_2d
    194    module procedure diurnal_solar_cal_1d
    195    module procedure diurnal_solar_cal_0d
    196 end interface
    197 
    198 !> \page daily_mean_solar daily_mean_solar Interface
    199 !!
    200 !! ~~~~~~~~~~{.f90}
    201 !! call daily_mean_solar (lat, time, cosz, fracday, rrsun)
    202 !! call daily_mean_solar (lat, time_since_ae, cosz, fracday, rrsun)
    203 !! call daily_mean_solar (lat, time, cosz, solar)
    204 !! call daily_mean_solar (lat, time_since_ae, cosz, solar)
    205 !! ~~~~~~~~~~
    206 !!
    207 !! The first option (used in conjunction with time_manager_mod)
    208 !! generates the real variable time_since_ae from the time_type
    209 !! input time, and then calls daily_mean_solar with this real input
    210 !! (option 2). The third and fourth options correspond to the first
    211 !! and second and are used with then spectral 2-layer model, where
    212 !! only cosz and solar are desired as output. These routines generate
    213 !! dummy arguments and then call option 2, where the calculation is done.
    214 !!
    215 !! The time of year is set by
    216 !! ~~~~~~~~~~{.f90}
    217 !!    real, intent(in) :: time_since_ae
    218 !! ~~~~~~~~~~
    219 !! With time_type input, the time of year is extracted from
    220 !! ~~~~~~~~~~{.f90}
    221 !!    type(time_type), intent(in) :: time
    222 !! ~~~~~~~~~~
    223 !!
    224 !! Separate routines exist within this interface for scalar,
    225 !! 1D or 2D input and output fields:
    226 !!
    227 !! ~~~~~~~~~~{.f90}
    228 !! real, intent(in), dimension(:,:) :: lat

Page 5           Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 astronomy.F90

    229 !! real, intent(in), dimension(:)   :: lat
    230 !! real, intent(in)                 :: lat
    231 !!
    232 !! real, intent(out), dimension(:,:) :: cosz, fracday
    233 !! real, intent(out), dimension(:)   :: cosz, fracday
    234 !! real, intent(out)                 :: cosz, fracday
    235 !! ~~~~~~~~~~
    236 !!
    237 !! \param [in] <lat> Latitudes of model grid points [radians]
    238 !! \param [in] <time_since_ae> Time of year; autumnal equinox = 0.0, one year = 2 * pi [radians]
    239 !! \param [in] <time> Time at which astronomical values are desired (time_type variable) [seconds, days]
    240 !! \param [out] <cosz> Cosine of solar zenith angle, set to zero when entire period is in darkness [dimensionless]
    241 !! \param [out] <fracday> Daylight fraction of time interval [dimensionless]
    242 !! \param [out] <rrsun> Earth-Sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2 [dimensionless]
    243 !! \param [out] <solar> shortwave flux factor: cosine of zenith angle * daylight fraction / (earth-sun distance squared) [di
    243 mensionless]
    244 interface daily_mean_solar
    245    module procedure daily_mean_solar_2d
    246    module procedure daily_mean_solar_1d
    247    module procedure daily_mean_solar_2level
    248    module procedure daily_mean_solar_0d
    249    module procedure daily_mean_solar_cal_2d
    250    module procedure daily_mean_solar_cal_1d
    251    module procedure daily_mean_solar_cal_2level
    252    module procedure daily_mean_solar_cal_0d
    253 end interface
    254 
    255 !! \page annual_mean_solar annual_mean_solar Interface
    256 !!
    257 !! ~~~~~~~~~~{.f90}
    258 !! call annual_mean_solar (js, je, lat, cosz, solar, fracday, rrsun)
    259 !! call annual_mean_solar (lat, cosz, solar)
    260 !! ~~~~~~~~~~
    261 !!
    262 !! The second interface above is used by the spectral 2-layer model,
    263 !! which requires only cosz and solar as output arguments, and which
    264 !! makes this call during the initialization phase of the model.
    265 !! Separate routines exist within this interface for 1D or 2D input
    266 !! and output fields:
    267 !!
    268 !! ~~~~~~~~~~{.f90}
    269 !! real, intent(in), dimension(:,:) :: lat
    270 !! real, intent(in), dimension(:)   :: lat
    271 !!
    272 !! real, intent(out), dimension(:,:) :: cosz, solar, fracday
    273 !! real, intent(out), dimension(:)   :: cosz, solar, fracday
    274 !! ~~~~~~~~~~
    275 !!
    276 !! \param [in] <jst> Starting subdomain j indices of data in the physics wiondow being integrated
    277 !! \param [in] <jnd> Ending subdomain j indices of data in the physics wiondow being integrated
    278 !! \param [in] <lat> Latitudes of model grid points [radians]
    279 !! \param [out] <cosz> cosz is the average over the year of the cosine of an effective zenith angle
    280 !!                     that would produce the correct daily solar flux if the sun were fixed at that
    281 !!                     single position for the period of daylight on the given day. in this average,
    282 !!                     the daily mean effective cosz is weighted by the daily mean solar flux. [dimensionless]
    283 !! \param [out] <solar> Normalized solar flux, averaged over the year, equal to the product of
    284 !!                      fracday*cosz*rrsun [dimensionless]

Page 6           Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 astronomy.F90

    285 !! \param [out] <fracday> Daylight fraction calculated so as to make the average flux (solar) equal to the
    286 !!                        product of the flux-weighted avg cosz * this fracday * assumed annual mean avg
    287 !!                        Earth-Sun distance of 1.0. [dimensionless]
    288 !! \param [out] <rrsun> Annual mean Earth-Sun distance (r) relative to semi-major axis of orbital ellipse
    289 !!                      (a):(a/r)**2 [dimensionless]
    290 interface annual_mean_solar
    291    module procedure annual_mean_solar_2d
    292    module procedure annual_mean_solar_1d
    293    module procedure annual_mean_solar_2level
    294 end interface
    295 
    296 !> \page get_period get_period Interface
    297 !!
    298 !! ~~~~~~~~~~{.f90}
    299 !! call get_period (period)
    300 !! ~~~~~~~~~~
    301 !!
    302 !! Separate routines exist within this interface for integer
    303 !! and time_type output:
    304 !!
    305 !! ~~~~~~~~~~{.f90}
    306 !! integer, intent(out)         :: period
    307 !! type(time_type), intent(out) :: period
    308 !! ~~~~~~~~~~
    309 !!
    310 !! \param [out] <period_out> Length of year for calendar in use
    311 interface get_period
    312    module procedure get_period_time_type, get_period_integer
    313 end interface
    314 
    315 !> \page set_period set_period Interface
    316 !!
    317 !! ~~~~~~~~~~{.f90}
    318 !! call set_period (period_in)
    319 !! ~~~~~~~~~~
    320 !!
    321 !! Separate routines exist within this interface for integer
    322 !! and time_type output:
    323 !!
    324 !! ~~~~~~~~~~{.f90}
    325 !! integer, intent(out)         :: period_in
    326 !! type(time_type), intent(out) :: period_in
    327 !! ~~~~~~~~~~
    328 !!
    329 !! \param [in] <period_in> Length of year for calendar in use
    330 interface set_period
    331    module procedure set_period_time_type, set_period_integer
    332 end interface
    333 
    334 
    335 private &
    336               orbit,  & ! Called from astronomy_init and set_orbital_parameters
    337               r_inv_squared, & ! Called from diurnal_solar, daily_mean_solar and orbit
    338               angle,  declination, half_day ! called from  diurnal_solar and daily_mean_solar
    339 !             half_day, orbital_time, & ! called from  diurnal_solar and daily_mean_solar
    340 !             universal_time ! called from  diurnal_solar:
    341 

Page 7           Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 astronomy.F90

    342 !> \page half_day half_day Interface
    343 !!
    344 !! ~~~~~~~~~~{.f90}
    345 !! half_day (latitude, dec) result (h)
    346 !! ~~~~~~~~~~
    347 !!
    348 !! Separate routines exist within this interface for scalar,
    349 !! or 2D input and output fields:
    350 !!
    351 !! ~~~~~~~~~~{.f90}
    352 !! real, intent(in), dimension(:,:) :: latitude
    353 !! real, intent(in)                 :: latitude
    354 !!
    355 !! real, dimension(size(latitude,1),size(latitude,2))  :: h
    356 !! real                                                :: h
    357 !! ~~~~~~~~~~
    358 !!
    359 !! \param [in] <latitude> Latitudes of model grid points [radians]
    360 !! \param [in] <dec> Solar declination [radians]
    361 !! \param [out] <h> Half of the length of daylight at the given latitude and orbital position (dec); value
    362 !!                  ranges between 0 (all darkness) and pi (all daylight) [dimensionless]
    363 interface half_day
    364    module procedure half_day_2d, half_day_0d
    365 end interface
    366 
    367 
    368 !---------------------------------------------------------------------
    369 !-------- namelist  ---------
    370 
    371 real    :: ecc   = 0.01671   !< Eccentricity of Earth's orbit [dimensionless]
    372 real    :: obliq = 23.439    !< Obliquity [degrees]
    373 real    :: per   = 102.932   !< Longitude of perihelion with respect
    374 !! to autumnal equinox in NH [degrees]
    375 integer :: period = 0        !< Specified length of year [seconds];
    376 !! must be specified to override default
    377 !! value given by length_of_year in
    378 !! time_manager_mod
    379 integer :: day_ae    = 23    !< Day of specified autumnal equinox
    380 integer :: month_ae  = 9     !< Month of specified autumnal equinox
    381 integer :: year_ae   = 1998  !< Year of specified autumnal equinox
    382 integer :: hour_ae   = 5     !< Hour of specified autumnal equinox
    383 integer :: minute_ae = 37    !< Minute of specified autumnal equinox
    384 integer :: second_ae = 0     !< Second of specified autumnal equinox
    385 integer :: num_angles = 3600 !< Number of intervals into which the year
    386 !! is divided to compute orbital positions
    387 
    388 
    389 namelist /astronomy_nml/ ecc, obliq, per, period, &
    390                          year_ae, month_ae,  day_ae,         &
    391                          hour_ae, minute_ae, second_ae, &
    392                          num_angles
    393 
    394 !--------------------------------------------------------------------
    395 !------   public data ----------
    396 
    397 
    398 !--------------------------------------------------------------------

Page 8           Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 astronomy.F90

    399 !------   private data ----------
    400 
    401 type(time_type) :: autumnal_eq_ref  !< time_type variable containing
    402 !! specified time of reference
    403 !! NH autumnal equinox
    404 
    405 type(time_type) :: period_time_type !< time_type variable containing
    406 !! period of one orbit
    407 
    408 real, dimension(:), allocatable :: orb_angle !< table of orbital positions (0 to
    409 !! 2*pi) as a function of time  used
    410 !! to find actual orbital position
    411 !! via interpolation
    412 
    413 real    :: seconds_per_day=86400.   !< seconds in a day
    414 real    :: deg_to_rad               !< conversion from degrees to radians
    415 real    :: twopi                    !< 2 *PI
    416 logical :: module_is_initialized=.false. !< has the module been initialized ?
    417 
    418 real, dimension(:,:), allocatable ::       &
    419                        cosz_ann, &  !< annual mean cos of zenith angle
    420                        solar_ann, & !< annual mean solar factor
    421                        fracday_ann  !< annual mean daylight fraction
    422 real    :: rrsun_ann                !< annual mean earth-sun distance
    423 logical :: annual_mean_calculated=.false.  !< have the annual mean values been calculated?
    424 integer :: num_pts = 0              !< count of grid_boxes for which
    425 !! annual mean astronomy values have
    426 !! been calculated
    427 integer :: total_pts                !< number of grid boxes owned by the processor
    428 
    429 !--------------------------------------------------------------------
    430 
    431 
    432 
    433                            contains
    434 
    435 
    436 
    437 !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    438 !
    439 !                     PUBLIC SUBROUTINES
    440 !
    441 !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    442 
    443 !> \brief astronomy_init is the constructor for astronomy_mod.
    444 !!
    445 !! \throw FATAL, "astronomy_mod ecc must be between 0 and 0.99"
    446 !! \throw FATAL, "astronomy_mod obliquity must be between -90 and 90 degrees"
    447 !! \throw FATAL, "astronomy_mod perihelion must be between 0 and 360 degrees"
    448 subroutine astronomy_init (latb, lonb)
    449 
    450 real, dimension(:,:), intent(in), optional :: latb !< 2d array of model latitudes at cell corners [radians]
    451 real, dimension(:,:), intent(in), optional :: lonb !< 2d array of model longitudes at cell corners [radians]
    452 
    453 !-------------------------------------------------------------------
    454 !  local variables:
    455 !-------------------------------------------------------------------

Page 9           Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 astronomy.F90

    456 integer :: unit, ierr, io, seconds, days, jd, id
    457 
    458 !-------------------------------------------------------------------
    459 !    if module has already been initialized, exit.
    460 !-------------------------------------------------------------------
    461       if (module_is_initialized) return
    462 
    463 !-------------------------------------------------------------------
    464 !>    Verify that modules used by this module have been initialized.
    465 !-------------------------------------------------------------------
    466       call fms_init
    467       call time_manager_init
    468       call constants_init
    469 
    470 !-----------------------------------------------------------------------
    471 !>    Read namelist.
    472 !-----------------------------------------------------------------------
    473       read (input_nml_file, astronomy_nml, iostat=io)
    474       ierr = check_nml_error(io,'astronomy_nml')
    475 !---------------------------------------------------------------------
    476 !>    Write version number and namelist to logfile.
    477 !---------------------------------------------------------------------
    478       call write_version_number("ASTRONOMY_MOD", version)
    479       if (mpp_pe() == mpp_root_pe() ) then
    480         unit = stdlog()
    481         write (unit, nml=astronomy_nml)
    482       endif
    483 !--------------------------------------------------------------------
    484 !>    Be sure input values are within valid ranges.
    485 !    QUESTION : ARE THESE THE RIGHT LIMITS ???
    486 !---------------------------------------------------------------------
    487       if (ecc < 0.0 .or. ecc > 0.99) &
    488         call error_mesg ('astronomy_mod', &
    489                       'ecc must be between 0 and 0.99', FATAL)
    490       if (obliq < -90. .or. obliq > 90.) &
    491         call error_mesg ('astronomy_mod', &
    492                   'obliquity must be between -90 and 90 degrees', FATAL)
    493       if (per <  0.0 .or. per > 360.0) &
    494         call error_mesg ('astronomy_mod', &
    495                  'perihelion must be between 0 and 360 degrees', FATAL)
    496 
    497 !----------------------------------------------------------------------
    498 !>    Set up time-type variable defining specified time of autumnal equinox.
    499 !----------------------------------------------------------------------
    500       autumnal_eq_ref = set_date (year_ae,month_ae,day_ae, &
    501                                   hour_ae,minute_ae,second_ae)
    502 
    503 !---------------------------------------------------------------------
    504 !>    Set up time-type variable defining length of year.
    505 !----------------------------------------------------------------------
    506       if (period == 0) then
    507         period_time_type = length_of_year()
    508         call get_time (period_time_type, seconds, days)
    509         period = seconds_per_day*days + seconds
    510       else
    511         period_time_type = set_time(period,0)
    512       endif

Page 10          Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 astronomy.F90

    513 
    514 !---------------------------------------------------------------------
    515 !>    Define useful module variables.
    516 !----------------------------------------------------------------------
    517       twopi = 2.*PI
    518       deg_to_rad = twopi/360.
    519 
    520 !---------------------------------------------------------------------
    521 !>    Call orbit to define table of orbital angles as function of
    522 !!    orbital time.
    523 !----------------------------------------------------------------------
    524 ! wfc moved here from orbit
    525       allocate ( orb_angle(0:num_angles) )
    526       call orbit
    527 
    528 !--------------------------------------------------------------------
    529 !>    If annual mean radiation is desired, then latb will be present.
    530 !!    allocate arrays to hold the needed astronomical factors. define
    531 !!    the total number of points that the processor is responsible for.
    532 !--------------------------------------------------------------------
    533       if (present(latb)) then
    534         jd = size(latb,2) - 1
    535         id = size(lonb,1) - 1
    536         allocate (cosz_ann(id, jd))
    537         allocate (solar_ann(id, jd))
    538         allocate (fracday_ann(id, jd))
    539         total_pts = jd*id
    540       endif
    541 
    542 !---------------------------------------------------------------------
    543 !>    Mark the module as initialized.
    544 !---------------------------------------------------------------------
    545       module_is_initialized=.true.
    546 
    547 !---------------------------------------------------------------------
    548 
    549 end subroutine astronomy_init

Page 11          Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                        
                                              
 astronomy_mod_mp_astronomy_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASTRONOMY_INIT             Subr   448                                                                                              
 ASTRONOMY_NML              Local  473                                  scalar                    473,481                           
 AUTUMNAL_EQ_REF            Local  500      TIME_TYPE       16          scalar                    500,789,2260,2262                 
 CHECK_NML_ERROR            Func   474      I(4)            4           scalar   PRIV             65,474                            
 CONSTANTS_INIT             Subr   468                                           PRIV             73,468                            
 COSZ_ANN                   Local  536      R(8)            8     2     1        ALC              536,1846,1847,1866,1867,1934,2018,
                                                                                                  2019                              
 DAYS                       Local  456      I(4)            4           scalar                    508,509                           
 DAY_AE                     Local  500      I(4)            4           scalar                    379,390,500,775,789,825           
 DEG_TO_RAD                 Local  518      R(8)            8           scalar                    518,2099,2161                     
 ECC                        Local  487      R(8)            8           scalar                    371,389,487,690,731,2058,2100     
 ERROR_MESG                 Subr   488                                           PRIV             65,488,491,494,569,593,615,639,670
                                                                                                  ,678,681,684,724,768,819,899,906,1
                                                                                                  247,1252,1441,1629,1995           
 FATAL                      Param  489      I(4)            4           scalar   PRIV             66,489,492,495,570,594,616,640,671
                                                                                                  ,679,682,685,725,769,820,900,907,1
                                                                                                  249,1254,1442,1630,1997           
 FMS_INIT                   Subr   466                                           PRIV             62,466                            
 FRACDAY_ANN                Local  538      R(8)            8     2     1        ALC              538,1849,1869,1936,2020           
 GET_TIME                   Subr   508                                           PRIV             67,508,575,2280                   
 HOUR_AE                    Local  501      I(4)            4           scalar                    382,391,501,782,786,790,830       
 ID                         Local  456      I(4)            4           scalar                    535,536,537,538,539               
 IERR                       Local  456      I(4)            4           scalar                    474                               
 INPUT_NML_FILE             Local  473      CHAR                  1     1        ALC,TGT,PRIV     74,473                            
 IO                         Local  456      I(4)            4           scalar                    473,474                           
 JD                         Local  456      I(4)            4           scalar                    534,536,537,538,539               
 LATB                       Dummy  448      R(8)            8     2     1        ARG,IN           533,534                           
 LENGTH_OF_YEAR             Func   507      RECORD          16          scalar   PRIV             69,507                            
 LONB                       Dummy  448      R(8)            8     2     1        ARG,IN           535                               
 MINUTE_AE                  Local  501      I(4)            4           scalar                    383,391,501,781,785,790,829       
 MODULE_IS_INITIALIZED      Local  461      L(4)            4           scalar                    416,461,545,568,592,614,638,669,72
                                                                                                  3,767,818,2010,2027               
 MONTH_AE                   Local  500      I(4)            4           scalar                    380,390,500,776,789,826           
 MPP_PE                     Func   479      I(4)            4           scalar   PRIV             63,479                            
 MPP_ROOT_PE                Func   479      I(4)            4           scalar   PRIV             63,479                            
 NUM_ANGLES                 Local  525      I(4)            4           scalar                    385,392,525,1810,1811,1817,1818,20
                                                                                                  57,2065,2132,2134                 
 OBLIQ                      Local  490      R(8)            8           scalar                    372,389,490,680,691,732,2161      
 ORBIT                      Subr   526                                           PRIV             336,526,698                       
 ORB_ANGLE                  Local  525      R(8)            8     1     1        ALC              525,2017,2056,2066,2067,2068,2069,
                                                                                                  2071,2137                         
 PER                        Local  493      R(8)            8           scalar                    373,389,493,692,733,2099          
 PERIOD                     Local  506      I(4)            4           scalar                    375,389,506,509,511               
 PERIOD_TIME_TYPE           Local  507      TIME_TYPE       16          scalar                    507,508,511,575,599,622,646,2260  

Page 12          Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55 Symbol Table                    astronomy.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PI                         Param  517      R(8)            8           scalar   PRIV             73,517,926,927,928,1246,1464,2197,
                                                                                                  2198,2205                         
 PRESENT                    Func   533                                  scalar                    533                               
 SECONDS                    Local  456      I(4)            4           scalar                    508,509                           
 SECONDS_PER_DAY            Local  509      R(8)            8           scalar                    413,509,576,2281                  
 SECOND_AE                  Local  501      I(4)            4           scalar                    384,391,501,780,784,790,828       
 SET_DATE                   Local  500                                  scalar   PRIV             69,500,789                        
 SET_DATE_I                 Func   500      RECORD          16          scalar   PRIV             500,789                           
 SET_TIME                   Local  511                                  scalar   PRIV             67,511,622                        
 SET_TIME_I                 Func   511      RECORD          16          scalar   PRIV             511,622                           
 SIZE                       Func   534                                  scalar                    534,535                           
 SOLAR_ANN                  Local  537      R(8)            8     2     1        ALC              537,1848,1868,1935,2021           
 STDLOG                     Func   480      I(4)            4           scalar   PRIV             63,480                            
 TIME_MANAGER_INIT          Subr   467                                           PRIV             70,467                            
 TOTAL_PTS                  Local  539      I(4)            4           scalar                    539,1858                          
 TWOPI                      Local  517      R(8)            8           scalar                    517,518,898,905,927,928,992,993,99
                                                                                                  4,1000,1008,1009,1028,1030,1440,16
                                                                                                  28,1811,2057,2132,2138,2261,2262,2
                                                                                                  281                               
 UNIT                       Local  456      I(4)            4           scalar                    480,481                           
 VERSION                    Param  478      CHAR            7           scalar                    478                               
 WRITE_VERSION_NUMBER       Subr   478                                           PRIV             64,478                            
 YEAR_AE                    Local  500      I(4)            4           scalar                    381,390,500,777,789,827           

Page 13          Source Listing                  ASTRONOMY_INIT
2021-06-01 08:55                                 astronomy.F90

    550 
    551 
    552 !> \brief get_period_integer returns the length of the year as an
    553 !!        integer number of seconds.
    554 !!
    555 !! \throw FATAL, "astronomy_mod module has not been initialized"
    556 subroutine get_period_integer (period_out)
    557 
    558 integer, intent(out) :: period_out !< Length of year [seconds]
    559 
    560 !--------------------------------------------------------------------
    561 !   local variables:
    562 
    563       integer :: seconds, days
    564 
    565 !---------------------------------------------------------------------
    566 !    exit if module has not been initialized.
    567 !---------------------------------------------------------------------
    568       if (.not. module_is_initialized)   &
    569         call error_mesg ( 'astronomy_mod',  &
    570          ' module has not been initialized', FATAL)
    571 
    572 !--------------------------------------------------------------------
    573 !    define length of year in seconds.
    574 !--------------------------------------------------------------------
    575       call get_time (period_time_type, seconds, days)
    576       period_out = seconds_per_day*days + seconds
    577 
    578 
    579 end subroutine get_period_integer

Page 14          Source Listing                  GET_PERIOD_INTEGER
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                            
                                                  
 astronomy_mod_mp_get_period_integer_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS                       Local  563      I(4)            4           scalar                    575,576                           
 GET_PERIOD_INTEGER         Subr   556                                           PRIV                                               
 PERIOD_OUT                 Dummy  556      I(4)            4           scalar   ARG,OUT          576                               
 SECONDS                    Local  563      I(4)            4           scalar                    575,576                           

Page 15          Source Listing                  GET_PERIOD_INTEGER
2021-06-01 08:55                                 astronomy.F90

    580 
    581 !> \brief get_period_time_type returns the length of the year as a time_type
    582 !!        variable.
    583 !!
    584 !! \throw FATAL, "astronomy_mod module has not been initialized"
    585 subroutine get_period_time_type (period_out)
    586 
    587 type(time_type), intent(inout) :: period_out !< Length of year as time_type variable
    588 
    589 !---------------------------------------------------------------------
    590 !    exit if module has not been initialized.
    591 !---------------------------------------------------------------------
    592       if (.not. module_is_initialized)   &
    593           call error_mesg ( 'astronomy_mod',  &
    594               ' module has not been initialized', FATAL)
    595 
    596 !--------------------------------------------------------------------
    597 !    define length of year as a time_type variable.
    598 !--------------------------------------------------------------------
    599       period_out = period_time_type
    600 
    601 end subroutine get_period_time_type


ENTRY POINTS

  Name                                              
                                                    
 astronomy_mod_mp_get_period_time_type_             

Page 16          Source Listing                  GET_PERIOD_TIME_TYPE
2021-06-01 08:55 Symbol Table                    astronomy.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_PERIOD_TIME_TYPE       Subr   585                                           PRIV                                               
 PERIOD_OUT                 Dummy  585      TIME_TYPE       16          scalar   ARG,INOUT        599                               
 TIME_TYPE                  Type   587                                  scalar                    67,401,405,587,633,1214,1217,1296,
                                                                                                  1299,1364,1366,1614,1653,1696,1740
                                                                                                  ,2257,2272                        

Page 17          Source Listing                  GET_PERIOD_TIME_TYPE
2021-06-01 08:55                                 astronomy.F90

    602 
    603 !> \brief set_period_integer saves as the input length of the year (an
    604 !!        integer) in a time_type module variable.
    605 !!
    606 !! \throw FATAL, "astronomy_mod module has not been initialized"
    607 subroutine set_period_integer (period_in)
    608 
    609 integer, intent(in) :: period_in !< Length of year as a time_type
    610 
    611 !---------------------------------------------------------------------
    612 !    exit if module has not been initialized.
    613 !---------------------------------------------------------------------
    614       if (.not. module_is_initialized)   &
    615         call error_mesg ( 'astronomy_mod',  &
    616          ' module has not been initialized', FATAL)
    617 
    618 !---------------------------------------------------------------------
    619 !    define time_type variable defining the length of year from the
    620 !    input value (integer seconds).
    621 !---------------------------------------------------------------------
    622       period_time_type = set_time(period_in, 0)
    623 
    624 end subroutine set_period_integer


ENTRY POINTS

  Name                                            
                                                  
 astronomy_mod_mp_set_period_integer_             

Page 18          Source Listing                  SET_PERIOD_INTEGER
2021-06-01 08:55 Symbol Table                    astronomy.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PERIOD_IN                  Dummy  607      I(4)            4           scalar   ARG,IN           622                               
 SET_PERIOD_INTEGER         Subr   607                                           PRIV                                               

Page 19          Source Listing                  SET_PERIOD_INTEGER
2021-06-01 08:55                                 astronomy.F90

    625 
    626 
    627 !> \brief Set_period_time_type saves the length of the year (input as a
    628 !!        time_type variable) into a time_type module variable.
    629 !!
    630 !! \throw FATAL, "astronomy_mod module has not been initialized"
    631 subroutine set_period_time_type(period_in)
    632 
    633 type(time_type), intent(in) :: period_in
    634 
    635 !---------------------------------------------------------------------
    636 !    exit if module has not been initialized.
    637 !---------------------------------------------------------------------
    638       if (.not. module_is_initialized)   &
    639         call error_mesg ( 'astronomy_mod',  &
    640          ' module has not been initialized', FATAL)
    641 
    642 !---------------------------------------------------------------------
    643 !    define time_type variable defining the length of year from the
    644 !    input value (time_type).
    645 !---------------------------------------------------------------------
    646       period_time_type = period_in
    647 
    648 
    649 end subroutine set_period_time_type


ENTRY POINTS

  Name                                              
                                                    
 astronomy_mod_mp_set_period_time_type_             

Page 20          Source Listing                  SET_PERIOD_TIME_TYPE
2021-06-01 08:55 Symbol Table                    astronomy.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PERIOD_IN                  Dummy  631      TIME_TYPE       16          scalar   ARG,IN           646                               
 SET_PERIOD_TIME_TYPE       Subr   631                                           PRIV                                               

Page 21          Source Listing                  SET_PERIOD_TIME_TYPE
2021-06-01 08:55                                 astronomy.F90

    650 
    651 !> \brief set_orbital_parameters saves the input values of eccentricity,
    652 !!        obliquity and perihelion time as module variables for use by
    653 !!        astronomy_mod.
    654 !!
    655 !! \throw FATAL, "astronomy_mod module has not been initialized"
    656 !! \throw FATAL, "astronomy_mod ecc must be between 0 and 0.99"
    657 !! \throw FATAL, "astronomy_mod obliquity must be between -90. and 90. degrees"
    658 !! \throw FATAL, "astronomy_mod perihelion must be between 0.0 and 360. degrees"
    659 subroutine set_orbital_parameters (ecc_in, obliq_in, per_in)
    660 
    661 real, intent(in) :: ecc_in !< Eccentricity of orbital ellipse [dimensionless]
    662 real, intent(in) :: obliq_in !< Obliquity [degrees]
    663 real, intent(in) :: per_in !< Longitude of perihelion with respect to autumnal
    664 !! equinox in northern hemisphere [degrees]
    665 
    666 !---------------------------------------------------------------------
    667 !    exit if module has not been initialized.
    668 !---------------------------------------------------------------------
    669       if (.not. module_is_initialized)   &
    670         call error_mesg ( 'astronomy_mod',  &
    671          ' module has not been initialized', FATAL)
    672 
    673 !--------------------------------------------------------------------
    674 !    be sure input values are within valid ranges.
    675 !    QUESTION : ARE THESE THE RIGHT LIMITS ???
    676 !---------------------------------------------------------------------
    677       if (ecc_in < 0.0 .or. ecc_in > 0.99) &
    678         call error_mesg ('astronomy_mod', &
    679                       'ecc must be between 0 and 0.99', FATAL)
    680       if (obliq_in < -90.0 .or. obliq > 90.0) &
    681         call error_mesg ('astronomy_mod', &
    682                 'obliquity must be between -90. and 90. degrees', FATAL)
    683       if (per_in < 0.0 .or. per_in > 360.0) &
    684         call error_mesg ('astronomy_mod', &
    685               'perihelion must be between 0.0 and 360. degrees', FATAL)
    686 
    687 !---------------------------------------------------------------------
    688 !    save input values into module variables.
    689 !---------------------------------------------------------------------
    690       ecc   = ecc_in
    691       obliq = obliq_in
    692       per   = per_in
    693 
    694 !---------------------------------------------------------------------
    695 !    call orbit to define table of orbital angles as function of
    696 !    orbital time using the input values of parameters just supplied.
    697 !----------------------------------------------------------------------
    698       call orbit
    699 
    700 !----------------------------------------------------------------------
    701 
    702 end subroutine set_orbital_parameters

Page 22          Source Listing                  SET_ORBITAL_PARAMETERS
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                                
                                                      
 astronomy_mod_mp_set_orbital_parameters_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ECC_IN                     Dummy  659      R(8)            8           scalar   ARG,IN           677,690                           
 OBLIQ_IN                   Dummy  659      R(8)            8           scalar   ARG,IN           680,691                           
 PER_IN                     Dummy  659      R(8)            8           scalar   ARG,IN           683,692                           
 SET_ORBITAL_PARAMETERS     Subr   659                                                                                              

Page 23          Source Listing                  SET_ORBITAL_PARAMETERS
2021-06-01 08:55                                 astronomy.F90

    703 
    704 !> \brief get_orbital_parameters retrieves the orbital parameters for use
    705 !!        by another module.
    706 !!
    707 !! \throw FATAL, "astronomy_mod module has not been initialized"
    708 subroutine get_orbital_parameters (ecc_out, obliq_out, per_out)
    709 
    710 !-------------------------------------------------------------------
    711 !    get_orbital_parameters retrieves the orbital parameters for use
    712 !    by another module.
    713 !--------------------------------------------------------------------
    714 
    715 real, intent(out) :: ecc_out !< Eccentricity of orbital ellipse [dimensionless]
    716 real, intent(out) :: obliq_out !< Obliquity [degrees]
    717 real, intent(out) :: per_out !< Longitude of perihelion with respect to autumnal
    718 !! equinox in northern hemisphere [degrees]
    719 
    720 !---------------------------------------------------------------------
    721 !    exit if module has not been initialized.
    722 !---------------------------------------------------------------------
    723       if (.not. module_is_initialized)   &
    724         call error_mesg ( 'astronomy_mod',  &
    725          ' module has not been initialized', FATAL)
    726 
    727 !--------------------------------------------------------------------
    728 !    fill the output arguments with the eccentricity, obliquity and
    729 !    perihelion angle.
    730 !--------------------------------------------------------------------
    731       ecc_out = ecc
    732       obliq_out = obliq
    733       per_out = per
    734 
    735 
    736 end subroutine get_orbital_parameters

Page 24          Source Listing                  GET_ORBITAL_PARAMETERS
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                                
                                                      
 astronomy_mod_mp_get_orbital_parameters_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ECC_OUT                    Dummy  708      R(8)            8           scalar   ARG,OUT          731                               
 GET_ORBITAL_PARAMETERS     Subr   708                                                                                              
 OBLIQ_OUT                  Dummy  708      R(8)            8           scalar   ARG,OUT          732                               
 PER_OUT                    Dummy  708      R(8)            8           scalar   ARG,OUT          733                               

Page 25          Source Listing                  GET_ORBITAL_PARAMETERS
2021-06-01 08:55                                 astronomy.F90

    737 
    738 
    739 !> \brief set_ref_date_of_ae provides a means of specifying the reference
    740 !!        date of the NH autumnal equinox for a particular year.
    741 !!
    742 !! \details set_ref_date_of_ae provides a means of specifying the reference
    743 !!          date of the NH autumnal equinox for a particular year.  It is only
    744 !!          used if calls are made to the calandar versions of the routines
    745 !!          diurnal_solar and daily_mean_solar. If the NOLEAP calendar is
    746 !!          used, then the date of autumnal equinox will be the same every
    747 !!          year. If JULIAN is used, then the date of autumnal equinox will
    748 !!          return to the same value every 4th year.
    749 !!
    750 !! \param [in] <day_in> Day of reference autumnal equinox
    751 !! \param [in] <month_in> Month of reference autumnal equinox
    752 !! \param [in] <year_in> Year of reference autumnal equinox
    753 !! \param [out] <second_in> OPTIONAL: Second of reference autumnal equinox
    754 !! \param [out] <minute_in> OPTIONAL: Minute of reference autumnal equinox
    755 !! \param [out] <hour_in> OPTIONAL: Hour of reference autumnal equinox
    756 !!
    757 !! \throw FATAL, "astronomy_mod module has not been initialized"
    758 subroutine set_ref_date_of_ae (day_in,month_in,year_in, &
    759                                second_in,minute_in,hour_in)
    760 
    761 integer, intent(in)           :: day_in, month_in, year_in
    762 integer, intent(in), optional :: second_in, minute_in, hour_in
    763 
    764 !---------------------------------------------------------------------
    765 !    exit if module has not been initialized.
    766 !---------------------------------------------------------------------
    767       if (.not. module_is_initialized)   &
    768         call error_mesg ( 'astronomy_mod',  &
    769          ' module has not been initialized', FATAL)
    770 
    771 !--------------------------------------------------------------------
    772 !    save the input time of ae specification into a time_type module
    773 !    variable autumnal_eq_ref.
    774 !--------------------------------------------------------------------
    775       day_ae =    day_in
    776       month_ae =  month_in
    777       year_ae =   year_in
    778 
    779       if (present(second_in)) then
    780         second_ae = second_in
    781         minute_ae = minute_in
    782         hour_ae =   hour_in
    783       else
    784         second_ae = 0
    785         minute_ae = 0
    786         hour_ae   = 0
    787       endif
    788 
    789       autumnal_eq_ref = set_date (year_ae,month_ae,day_ae, &
    790                                   hour_ae,minute_ae,second_ae)
    791 
    792 !---------------------------------------------------------------------
    793 

Page 26          Source Listing                  SET_REF_DATE_OF_AE
2021-06-01 08:55                                 astronomy.F90

    794 
    795 end subroutine set_ref_date_of_ae


ENTRY POINTS

  Name                                            
                                                  
 astronomy_mod_mp_set_ref_date_of_ae_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY_IN                     Dummy  758      I(4)            4           scalar   ARG,IN           775                               
 HOUR_IN                    Dummy  759      I(4)            4           scalar   ARG,IN           782                               
 MINUTE_IN                  Dummy  759      I(4)            4           scalar   ARG,IN           781                               
 MONTH_IN                   Dummy  758      I(4)            4           scalar   ARG,IN           776                               
 PRESENT                    Func   779                                  scalar                    779                               
 SECOND_IN                  Dummy  759      I(4)            4           scalar   ARG,IN           779,780                           
 SET_REF_DATE_OF_AE         Subr   758                                                                                              
 YEAR_IN                    Dummy  758      I(4)            4           scalar   ARG,IN           777                               

Page 27          Source Listing                  SET_REF_DATE_OF_AE
2021-06-01 08:55                                 astronomy.F90

    796 
    797 
    798 !> \brief get_ref_date_of_ae retrieves the reference date of the autumnal
    799 !!        equinox as integer variables.
    800 !!
    801 !! \throw FATAL, "astronomy_mod module has not been initialized"
    802 !!
    803 !! \param [out] <day_out> Day of reference autumnal equinox
    804 !! \param [out] <month_out> Month of reference autumnal equinox
    805 !! \param [out] <year_out> Year of reference autumnal equinox
    806 !! \param [out] <second_out> Second of reference autumnal equinox
    807 !! \param [out] <minute_out> Minute of reference autumnal equinox
    808 !! \param [out] <hour_out> Hour of reference autumnal equinox
    809 subroutine get_ref_date_of_ae (day_out,month_out,year_out,&
    810                                second_out,minute_out,hour_out)
    811 
    812 integer, intent(out) :: day_out, month_out, year_out,  &
    813                         second_out, minute_out, hour_out
    814 
    815 !---------------------------------------------------------------------
    816 !    exit if module has not been initialized.
    817 !---------------------------------------------------------------------
    818       if (.not. module_is_initialized)   &
    819         call error_mesg ( 'astronomy_mod',  &
    820          ' module has not been initialized', FATAL)
    821 
    822 !---------------------------------------------------------------------
    823 !    fill the output fields with the proper module data.
    824 !---------------------------------------------------------------------
    825       day_out    =  day_ae
    826       month_out  =  month_ae
    827       year_out   =  year_ae
    828       second_out =  second_ae
    829       minute_out =  minute_ae
    830       hour_out   =  hour_ae
    831 
    832 
    833 end subroutine get_ref_date_of_ae

Page 28          Source Listing                  GET_REF_DATE_OF_AE
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                            
                                                  
 astronomy_mod_mp_get_ref_date_of_ae_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY_OUT                    Dummy  809      I(4)            4           scalar   ARG,OUT          825                               
 GET_REF_DATE_OF_AE         Subr   809                                                                                              
 HOUR_OUT                   Dummy  810      I(4)            4           scalar   ARG,OUT          830                               
 MINUTE_OUT                 Dummy  810      I(4)            4           scalar   ARG,OUT          829                               
 MONTH_OUT                  Dummy  809      I(4)            4           scalar   ARG,OUT          826                               
 SECOND_OUT                 Dummy  810      I(4)            4           scalar   ARG,OUT          828                               
 YEAR_OUT                   Dummy  809      I(4)            4           scalar   ARG,OUT          827                               

Page 29          Source Listing                  GET_REF_DATE_OF_AE
2021-06-01 08:55                                 astronomy.F90

    834 
    835 
    836 !> \brief diurnal_solar_2d returns 2d fields of cosine of zenith angle,
    837 !!        daylight fraction and earth-sun distance at the specified latitudes,
    838 !!        longitudes and time. These values may be instantaneous or averaged
    839 !!        over a specified time interval.
    840 !!
    841 !! \param [in] <lat> Latitudes of model grid points
    842 !! \param [in] <lon> Longitudes of model grid points
    843 !! \param [in] <gmt> Time of day at longitude 0.0; midnight = 0.0, one day = 2 * pi
    844 !! \param [in] <time_since_ae> Time of year; autumnal equinox = 0.0, one year = 2 * pi
    845 !! \param [out] <cosz> Cosine of solar zenith angle
    846 !! \param [out] <fracday> Daylight fraction of time interval
    847 !! \param [out] <rrsun> earth-sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2
    848 !! \param [in] <dt> OPTIONAL: time interval after gmt over which the astronomical variables are to be
    849 !!                  averaged. this produces averaged output rather than instantaneous.
    850 !! \param [in] <allow_negative_cosz> Allow negative values for cosz?
    851 !! \param [out] <half_day_out> half_day_out
    852 !!
    853 !! \throw FATAL, "astronomy_mod time_since_ae not between 0 and 2pi"
    854 !! \throw FATAL, "astronomy_mod gmt not between 0 and 2pi"
    855 subroutine diurnal_solar_2d (lat, lon, gmt, time_since_ae, cosz, &
    856                              fracday, rrsun, dt, allow_negative_cosz, &
    857                              half_day_out)
    858 
    859 real, dimension(:,:), intent(in)           :: lat, lon
    860 real,                 intent(in)           :: gmt, time_since_ae
    861 real, dimension(:,:), intent(out)          :: cosz, fracday
    862 real,                 intent(out)          :: rrsun
    863 real,                 intent(in), optional :: dt
    864 logical,              intent(in), optional :: allow_negative_cosz
    865 real, dimension(:,:), intent(out), optional :: half_day_out
    866 
    867 
    868 !---------------------------------------------------------------------
    869 !   local variables
    870 
    871       real, dimension(size(lat,1),size(lat,2)) :: t, tt, h, aa, bb,  &
    872                                                   st, stt, sh
    873       real                                     :: ang, dec
    874       logical :: Lallow_negative
    875 
    876 !---------------------------------------------------------------------
    877 !   local variables
    878 !
    879 !    t           time of day with respect to local noon (2 pi = 1 day)
    880 !                [ radians ]
    881 !    tt          end of averaging period [ radians ]
    882 !    h           half of the daily period of daylight, centered at noon
    883 !                [ radians, -pi --> pi ]
    884 !    aa          sin(lat) * sin(declination)
    885 !    bb          cos(lat) * cos(declination)
    886 !    st          sine of time of day
    887 !    stt         sine of time of day at end of averaging period
    888 !    sh          sine of half-day period
    889 !    ang         position of earth in its orbit wrt autumnal equinox
    890 !                [ radians ]

Page 30          Source Listing                  DIURNAL_SOLAR_2D
2021-06-01 08:55                                 astronomy.F90

    891 !    dec         earth's declination [ radians ]
    892 !
    893 !--------------------------------------------------------------------
    894 
    895 !--------------------------------------------------------------------
    896 !    be sure the time in the annual cycle is legitimate.
    897 !---------------------------------------------------------------------
    898       if (time_since_ae < 0.0 .or. time_since_ae > twopi) &
    899           call error_mesg('astronomy_mod', &
    900                     'time_since_ae not between 0 and 2pi', FATAL)
    901 
    902 !--------------------------------------------------------------------
    903 !    be sure the time at longitude = 0.0 is legitimate.
    904 !---------------------------------------------------------------------
    905       if (gmt < 0.0 .or. gmt > twopi) &
    906          call error_mesg('astronomy_mod', &
    907                     'gmt not between 0 and 2pi', FATAL)
    908 
    909 !---------------------------------------------------------------------
    910 !>    define the orbital angle (location in year), solar declination and
    911 !!    earth sun distance factor. use functions contained in this module.
    912 !---------------------------------------------------------------------
    913       ang = angle(time_since_ae)
    914       dec = declination(ang)
    915       rrsun  = r_inv_squared(ang)
    916 
    917 !---------------------------------------------------------------------
    918 !>    define terms needed in the cosine zenith angle equation.
    919 !--------------------------------------------------------------------
    920       aa = sin(lat)*sin(dec)
    921       bb = cos(lat)*cos(dec)
    922 
    923 !---------------------------------------------------------------------
    924 !>    define local time. force it to be between -pi and pi.
    925 !--------------------------------------------------------------------
    926       t = gmt + lon - PI
    927       where(t >= PI) t = t - twopi
    928       where(t < -PI) t = t + twopi
    929 
    930       Lallow_negative = .false.
    931       if (present(allow_negative_cosz)) then
    932          if (allow_negative_cosz) Lallow_negative = .true.
    933       end if
    934 
    935 !---------------------------------------------------------------------
    936 !>    perform a time integration to obtain cosz and fracday if desired.
    937 !!    output is valid over the period from t to t + dt.
    938 !--------------------------------------------------------------------
    939       h   = half_day   (lat,dec)
    940 
    941       if ( present(half_day_out) ) then
    942          half_day_out = h
    943       end if
    944 
    945       if ( present(dt) ) then   ! (perform time averaging)
    946         tt = t + dt
    947         st  = sin(t)

Page 31          Source Listing                  DIURNAL_SOLAR_2D
2021-06-01 08:55                                 astronomy.F90

    948         stt = sin(tt)
    949         sh  = sin(h)
    950         cosz = 0.0
    951 
    952         if (.not. Lallow_negative) then
    953 !-------------------------------------------------------------------
    954 !    case 1: entire averaging period is before sunrise.
    955 !-------------------------------------------------------------------
    956         where (t < -h .and. tt < -h) cosz = 0.0
    957 
    958 !-------------------------------------------------------------------
    959 !    case 2: averaging period begins before sunrise, ends after sunrise
    960 !    but before sunset
    961 !-------------------------------------------------------------------
    962         where ( (tt+h) /= 0.0 .and.   t < -h .and. abs(tt) <= h)   &
    963              cosz = aa + bb*(stt + sh)/ (tt + h)
    964 
    965 !-------------------------------------------------------------------
    966 !    case 3: averaging period begins before sunrise, ends after sunset,
    967 !    but before the next sunrise. modify if averaging period extends
    968 !    past the next day's sunrise, but if averaging period is less than
    969 !    a half- day (pi) that circumstance will never occur.
    970 !-------------------------------------------------------------------
    971         where (t < -h .and. h /= 0.0 .and. h < tt)    &
    972               cosz = aa + bb*( sh + sh)/(h+h)
    973 
    974 !-------------------------------------------------------------------
    975 !    case 4: averaging period begins after sunrise, ends before sunset.
    976 !-------------------------------------------------------------------
    977         where ( abs(t) <= h .and. abs(tt) <= h)    &
    978              cosz = aa + bb*(stt - st)/ (tt - t)
    979 
    980 !-------------------------------------------------------------------
    981 !    case 5: averaging period begins after sunrise, ends after sunset.
    982 !    modify when averaging period extends past the next day's sunrise.
    983 !-------------------------------------------------------------------
    984         where ((h-t) /= 0.0 .and. abs(t) <= h .and.  h < tt)    &
    985               cosz = aa + bb*(sh - st)/(h-t)
    986 
    987 !-------------------------------------------------------------------
    988 !    case 6: averaging period begins after sunrise , ends after the
    989 !    next day's sunrise. note that this includes the case when the
    990 !    day length is one day (h = pi).
    991 !-------------------------------------------------------------------
    992         where (twopi - h < tt .and. (tt+h-twopi) /= 0.0 .and. t <= h ) &
    993            cosz = (cosz*(h - t) + (aa*(tt + h - twopi) +     &
    994             bb*(stt + sh))) / ((h - t) + (tt + h - twopi))
    995 
    996 !-------------------------------------------------------------------
    997 !    case 7: averaging period begins after sunset and ends before the
    998 !    next day's sunrise
    999 !-------------------------------------------------------------------
   1000         where(  h <  t .and. twopi - h >= tt  ) cosz = 0.0
   1001 
   1002 !-------------------------------------------------------------------
   1003 !    case 8: averaging period begins after sunset and ends after the
   1004 !    next day's sunrise but before the next day's sunset. if the

Page 32          Source Listing                  DIURNAL_SOLAR_2D
2021-06-01 08:55                                 astronomy.F90

   1005 !    averaging period is less than a half-day (pi) the latter
   1006 !    circumstance will never occur.
   1007 !-----------------------------------------------------------------
   1008         where(  h <  t .and. twopi - h < tt  )
   1009           cosz = aa + bb*(stt + sh) / (tt + h - twopi)
   1010         end where
   1011 
   1012         else
   1013            cosz = aa + bb*(stt - st)/ (tt - t)
   1014         end if
   1015 
   1016 
   1017 
   1018 !-------------------------------------------------------------------
   1019 !    day fraction is the fraction of the averaging period contained
   1020 !    within the (-h,h) period.
   1021 !-------------------------------------------------------------------
   1022         where (t < -h .and.      tt < -h)      fracday = 0.0
   1023         where (t < -h .and. abs(tt) <= h)      fracday = (tt + h )/dt
   1024         where (t < -h .and.       h < tt)      fracday = ( h + h )/dt
   1025         where (abs(t) <= h .and. abs(tt) <= h) fracday = (tt - t )/dt
   1026         where (abs(t) <= h .and.       h < tt) fracday = ( h - t )/dt
   1027         where (      h <  t                 )  fracday = 0.0
   1028         where (twopi - h < tt)                 fracday = fracday +  &
   1029                                                          (tt + h - &
   1030                                                          twopi)/dt
   1031 !----------------------------------------------------------------------
   1032 !>    if instantaneous values are desired, define cosz at time t.
   1033 !----------------------------------------------------------------------
   1034       else  ! (no time averaging)
   1035         if (.not. Lallow_negative) then
   1036            where (abs(t) < h)
   1037              cosz = aa + bb*cos(t)
   1038              fracday = 1.0
   1039            elsewhere
   1040              cosz = 0.0
   1041              fracday = 0.0
   1042            end where
   1043         else
   1044            cosz = aa + bb*cos(t)
   1045            where (abs(t) < h)
   1046              fracday = 1.0
   1047            elsewhere
   1048              fracday = 0.0
   1049            end where
   1050         end if
   1051       end if
   1052 
   1053 !----------------------------------------------------------------------
   1054 !>    Check that cosz is not negative, if desired.
   1055 !----------------------------------------------------------------------
   1056       if (.not. Lallow_negative) then
   1057          cosz = max(0.0, cosz)
   1058       end if
   1059 
   1060 end subroutine diurnal_solar_2d

Page 33          Source Listing                  DIURNAL_SOLAR_2D
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                          
                                                
 astronomy_mod_mp_diurnal_solar_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AA                         Local  871      R(8)            8     2     0                         920,963,972,978,985,993,1009,1013,
                                                                                                  1037,1044                         
 ABS                        Func   962                                  scalar                    962,977,984,1023,1025,1026,1036,10
                                                                                                  45                                
 ALLOW_NEGATIVE_COSZ        Dummy  856      L(4)            4           scalar   ARG,IN           931,932                           
 ANG                        Local  873      R(8)            8           scalar                    913,914,915                       
 ANGLE                      Func   913      R(8)            8           scalar   PRIV             338,913,1449,2137,2138            
 ANGLE@0                    Local  913      R(8)            8           scalar                                                      
 BB                         Local  871      R(8)            8     2     0                         921,963,972,978,985,994,1009,1013,
                                                                                                  1037,1044                         
 COS                        Func   921                                  scalar                    921,1037,1044                     
 COSZ                       Dummy  855      R(8)            8     2     1        ARG,OUT          950,956,963,972,978,985,993,1000,1
                                                                                                  009,1013,1037,1040,1044,1057      
 DEC                        Local  873      R(8)            8           scalar                    914,920,921,939                   
 DECLINATION                Func   914      R(8)            8           scalar   PRIV             338,914,1450,2163                 
 DECLINATION@0              Local  914      R(8)            8           scalar                                                      
 DIURNAL_SOLAR_2D           Subr   855                                           PRIV             1107,1169,1261,1266               
 DT                         Dummy  856      R(8)            8           scalar   ARG,IN           945,946,1023,1024,1025,1026,1030  
 FRACDAY                    Dummy  856      R(8)            8     2     1        ARG,OUT          1022,1023,1024,1025,1026,1027,1028
                                                                                                  ,1038,1041,1046,1048              
 GMT                        Dummy  855      R(8)            8           scalar   ARG,IN           905,926                           
 H                          Local  871      R(8)            8     2     0                         939,942,949,956,962,963,971,972,97
                                                                                                  7,984,985,992,993,994,1000,1008,10
                                                                                                  09,1022,1023,1024,1025,1026,1027,1
                                                                                                  028,1029,1036,1045                
 HALF_DAY                   Local  939                                  scalar   PRIV             338,939,1451,2237                 
 HALF_DAY_OUT               Dummy  857      R(8)            8     2     1        ARG,OUT          941,942                           
 LALLOW_NEGATIVE            Local  874      L(4)            4           scalar                    930,932,952,1035,1056             
 LAT                        Dummy  855      R(8)            8     2     1        ARG,IN           920,921,939                       
 LON                        Dummy  855      R(8)            8     2     1        ARG,IN           926                               
 MAX                        Func   1057                                 scalar                    1057                              
 PRESENT                    Func   931                                  scalar                    931,941,945                       
 RRSUN                      Dummy  856      R(8)            8           scalar   ARG,OUT          915                               
 R_INV_SQUARED              Func   915      R(8)            8           scalar   PRIV             337,915,1452,2066,2067,2068,2069,2
                                                                                                  101                               
 R_INV_SQUARED@0            Local  915      R(8)            8           scalar                                                      
 SH                         Local  872      R(8)            8     2     0                         949,963,972,985,994,1009          
 SIN                        Func   920                                  scalar                    920,947,948,949                   
 ST                         Local  872      R(8)            8     2     0                         947,978,985,1013                  
 STT                        Local  872      R(8)            8     2     0                         948,963,978,994,1009,1013         
 T                          Local  871      R(8)            8     2     0                         926,927,928,946,947,956,962,971,97
                                                                                                  7,978,984,985,992,993,994,1000,100
                                                                                                  8,1013,1022,1023,1024,1025,1026,10
                                                                                                  27,1036,1037,1044,1045            

Page 34          Source Listing                  DIURNAL_SOLAR_2D
2021-06-01 08:55 Symbol Table                    astronomy.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME_SINCE_AE              Dummy  855      R(8)            8           scalar   ARG,IN           898,913                           
 TT                         Local  871      R(8)            8     2     0                         946,948,956,962,963,971,977,978,98
                                                                                                  4,992,993,994,1000,1008,1009,1013,
                                                                                                  1022,1023,1024,1025,1026,1028,1029

Page 35          Source Listing                  DIURNAL_SOLAR_2D
2021-06-01 08:55                                 astronomy.F90

   1061 
   1062 
   1063 !> \brief diurnal_solar_1d takes 1-d input fields, adds a second dimension
   1064 !!        and calls diurnal_solar_2d. on return, the 2d fields are returned
   1065 !!        to the original 1d fields.
   1066 !!
   1067 !! \param [in] <lat> Latitudes of model grid points
   1068 !! \param [in] <lon> Longitudes of model grid points
   1069 !! \param [in] <gmt> Time of day at longitude 0.0; midnight = 0.0, one day = 2 * pi
   1070 !! \param [in] <time_since_ae> Time of year; autumnal equinox = 0.0, one year = 2 * pi
   1071 !! \param [out] <cosz> Cosine of solar zenith angle
   1072 !! \param [out] <fracday> Daylight fraction of time interval
   1073 !! \param [out] <rrsun> earth-sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2
   1074 !! \param [in] <dt> OPTIONAL: time interval after gmt over which the astronomical variables are to be
   1075 !!                  averaged. this produces averaged output rather than instantaneous.
   1076 !! \param [in] <allow_negative_cosz> Allow negative values for cosz?
   1077 !! \param [out] <half_day_out> half_day_out
   1078 subroutine diurnal_solar_1d (lat, lon, gmt, time_since_ae, cosz, &
   1079                              fracday, rrsun, dt, allow_negative_cosz, &
   1080                              half_day_out)
   1081 
   1082 !---------------------------------------------------------------------
   1083 real, dimension(:),  intent(in)           :: lat, lon
   1084 real,                intent(in)           :: gmt, time_since_ae
   1085 real, dimension(:),  intent(out)          :: cosz, fracday
   1086 real,                intent(out)          :: rrsun
   1087 real,                intent(in), optional :: dt
   1088 logical,             intent(in), optional :: allow_negative_cosz
   1089 real, dimension(:),  intent(out), optional :: half_day_out
   1090 
   1091 !---------------------------------------------------------------------
   1092 !  local variables
   1093 !---------------------------------------------------------------------
   1094       real, dimension(size(lat),1) :: lat_2d, lon_2d, cosz_2d,   &
   1095                                       fracday_2d,halfday_2d
   1096 
   1097 !--------------------------------------------------------------------
   1098 !>    define 2-d versions of input data arrays.
   1099 !--------------------------------------------------------------------
   1100       lat_2d(:,1) = lat
   1101       lon_2d(:,1) = lon
   1102 
   1103 !--------------------------------------------------------------------
   1104 !>    call diurnal_solar_2d to calculate astronomy fields.
   1105 !--------------------------------------------------------------------
   1106 !     if (present(dt)) then
   1107         call diurnal_solar_2d (lat_2d, lon_2d, gmt, time_since_ae,&
   1108                                cosz_2d, fracday_2d, rrsun, dt=dt, &
   1109                                allow_negative_cosz=allow_negative_cosz, &
   1110                                half_day_out=halfday_2d)
   1111 !     else
   1112 !       call diurnal_solar_2d (lat_2d, lon_2d, gmt, time_since_ae, &
   1113 !                              cosz_2d, fracday_2d, rrsun)
   1114 !     endif
   1115 
   1116 !-------------------------------------------------------------------
   1117 !>    place output fields into 1-d arguments for return to

Page 36          Source Listing                  DIURNAL_SOLAR_1D
2021-06-01 08:55                                 astronomy.F90

   1118 !!    calling routine.
   1119 !-------------------------------------------------------------------
   1120       fracday = fracday_2d(:,1)
   1121       cosz  = cosz_2d (:,1)
   1122       if (present(half_day_out)) then
   1123          half_day_out = halfday_2d(:,1)
   1124       end if
   1125 
   1126 end subroutine diurnal_solar_1d


ENTRY POINTS

  Name                                          
                                                
 astronomy_mod_mp_diurnal_solar_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOW_NEGATIVE_COSZ        Dummy  1079     L(4)            4           scalar   ARG,IN           1109                              
 COSZ                       Dummy  1078     R(8)            8     1     1        ARG,OUT          1121                              
 COSZ_2D                    Local  1094     R(8)            8     2     0        TGT              1108,1121                         
 DIURNAL_SOLAR_1D           Subr   1078                                          PRIV                                               
 DT                         Dummy  1079     R(8)            8           scalar   ARG,IN           1108                              
 FRACDAY                    Dummy  1079     R(8)            8     1     1        ARG,OUT          1120                              
 FRACDAY_2D                 Local  1095     R(8)            8     2     0        TGT              1108,1120                         
 GMT                        Dummy  1078     R(8)            8           scalar   ARG,IN           1107                              
 HALFDAY_2D                 Local  1095     R(8)            8     2     0        TGT              1110,1123                         
 HALF_DAY_OUT               Dummy  1080     R(8)            8     1     1        ARG,OUT          1122,1123                         
 LAT                        Dummy  1078     R(8)            8     1     1        ARG,IN           1100                              
 LAT_2D                     Local  1094     R(8)            8     2     0        TGT              1100,1107                         
 LON                        Dummy  1078     R(8)            8     1     1        ARG,IN           1101                              
 LON_2D                     Local  1094     R(8)            8     2     0        TGT              1101,1107                         
 PRESENT                    Func   1122                                 scalar                    1122                              
 RRSUN                      Dummy  1079     R(8)            8           scalar   ARG,OUT          1108                              
 TIME_SINCE_AE              Dummy  1078     R(8)            8           scalar   ARG,IN           1107                              

Page 37          Source Listing                  DIURNAL_SOLAR_1D
2021-06-01 08:55                                 astronomy.F90

   1127 
   1128 
   1129 !> \brief diurnal_solar_0d takes scalar input fields, makes them into 2d
   1130 !!        arrays dimensioned (1,1), and calls diurnal_solar_2d. on return,
   1131 !!        the 2d fields are converted back to the desired scalar output.
   1132 !!
   1133 !! \param [in] <lat> Latitudes of model grid points
   1134 !! \param [in] <lon> Longitudes of model grid points
   1135 !! \param [in] <gmt> Time of day at longitude 0.0; midnight = 0.0, one day = 2 * pi
   1136 !! \param [in] <time_since_ae> Time of year; autumnal equinox = 0.0, one year = 2 * pi
   1137 !! \param [out] <cosz> Cosine of solar zenith angle
   1138 !! \param [out] <fracday> Daylight fraction of time interval
   1139 !! \param [out] <rrsun> earth-sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2
   1140 !! \param [in] <dt> OPTIONAL: time interval after gmt over which the astronomical variables are to be
   1141 !!                  averaged. this produces averaged output rather than instantaneous.
   1142 !! \param [in] <allow_negative_cosz> Allow negative values for cosz?
   1143 !! \param [out] <half_day_out> half_day_out
   1144 subroutine diurnal_solar_0d (lat, lon, gmt, time_since_ae, cosz,  &
   1145                              fracday, rrsun, dt, allow_negative_cosz, &
   1146                              half_day_out)
   1147 
   1148 real, intent(in)           :: lat, lon, gmt, time_since_ae
   1149 real, intent(out)          :: cosz, fracday, rrsun
   1150 real, intent(in), optional :: dt
   1151 logical,intent(in),optional :: allow_negative_cosz
   1152 real, intent(out), optional :: half_day_out
   1153 
   1154 !--------------------------------------------------------------------
   1155 !  local variables:
   1156 !--------------------------------------------------------------------
   1157       real, dimension(1,1) :: lat_2d, lon_2d, cosz_2d, fracday_2d, halfday_2d
   1158 
   1159 !---------------------------------------------------------------------
   1160 !>    create 2d arrays from the scalar input fields.
   1161 !---------------------------------------------------------------------
   1162       lat_2d = lat
   1163       lon_2d = lon
   1164 
   1165 !--------------------------------------------------------------------
   1166 !>    call diurnal_solar_2d to calculate astronomy fields.
   1167 !--------------------------------------------------------------------
   1168 !     if (present(dt)) then
   1169         call diurnal_solar_2d (lat_2d, lon_2d, gmt, time_since_ae,  &
   1170                                cosz_2d, fracday_2d, rrsun, dt=dt, &
   1171                                allow_negative_cosz=allow_negative_cosz, &
   1172                                half_day_out=halfday_2d)
   1173 !     else
   1174 !       call diurnal_solar_2d (lat_2d, lon_2d, gmt, time_since_ae, &
   1175 !                              cosz_2d, fracday_2d, rrsun)
   1176 !     end if
   1177 
   1178 !-------------------------------------------------------------------
   1179 !>    place output fields into scalars for return to calling routine.
   1180 !-------------------------------------------------------------------
   1181       fracday = fracday_2d(1,1)
   1182       cosz = cosz_2d(1,1)
   1183       if (present(half_day_out)) then

Page 38          Source Listing                  DIURNAL_SOLAR_0D
2021-06-01 08:55                                 astronomy.F90

   1184          half_day_out = halfday_2d(1,1)
   1185       end if
   1186 
   1187 end subroutine diurnal_solar_0d


ENTRY POINTS

  Name                                          
                                                
 astronomy_mod_mp_diurnal_solar_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOW_NEGATIVE_COSZ        Dummy  1145     L(4)            4           scalar   ARG,IN           1171                              
 COSZ                       Dummy  1144     R(8)            8           scalar   ARG,OUT          1182                              
 COSZ_2D                    Local  1157     R(8)            8     2     1        TGT              1170,1182                         
 DIURNAL_SOLAR_0D           Subr   1144                                          PRIV                                               
 DT                         Dummy  1145     R(8)            8           scalar   ARG,IN           1170                              
 FRACDAY                    Dummy  1145     R(8)            8           scalar   ARG,OUT          1181                              
 FRACDAY_2D                 Local  1157     R(8)            8     2     1        TGT              1170,1181                         
 GMT                        Dummy  1144     R(8)            8           scalar   ARG,IN           1169                              
 HALFDAY_2D                 Local  1157     R(8)            8     2     1        TGT              1172,1184                         
 HALF_DAY_OUT               Dummy  1146     R(8)            8           scalar   ARG,OUT          1183,1184                         
 LAT                        Dummy  1144     R(8)            8           scalar   ARG,IN           1162                              
 LAT_2D                     Local  1157     R(8)            8     2     1        TGT              1162,1169                         
 LON                        Dummy  1144     R(8)            8           scalar   ARG,IN           1163                              
 LON_2D                     Local  1157     R(8)            8     2     1        TGT              1163,1169                         
 PRESENT                    Func   1183                                 scalar                    1183                              
 RRSUN                      Dummy  1145     R(8)            8           scalar   ARG,OUT          1170                              
 TIME_SINCE_AE              Dummy  1144     R(8)            8           scalar   ARG,IN           1169                              

Page 39          Source Listing                  DIURNAL_SOLAR_0D
2021-06-01 08:55                                 astronomy.F90

   1188 
   1189 
   1190 !> \brief diurnal_solar_cal_2d receives time_type inputs, converts
   1191 !!        them to real variables and then calls diurnal_solar_2d to
   1192 !!        compute desired astronomical variables.
   1193 !!
   1194 !! \param [in] <lat> Latitudes of model grid points
   1195 !! \param [in] <lon> Longitudes of model grid points
   1196 !! \param [in] <gmt> Time of day at longitude 0.0; midnight = 0.0, one day = 2 * pi
   1197 !! \param [in] <time> Time of year (time_type)
   1198 !! \param [out] <cosz> Cosine of solar zenith angle
   1199 !! \param [out] <fracday> Daylight fraction of time interval
   1200 !! \param [out] <rrsun> earth-sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2
   1201 !! \param [in] <dt> OPTIONAL: time interval after gmt over which the astronomical variables are to be
   1202 !!                  averaged. this produces averaged output rather than instantaneous.
   1203 !! \param [in] <allow_negative_cosz> Allow negative values for cosz?
   1204 !! \param [out] <half_day_out> half_day_out
   1205 !!
   1206 !! \throw FATAL, "astronomy_mod radiation time step must be no longer than 12 hrs"
   1207 !! \throw FATAL, "astronomy_mod radiation time step must not be an integral number of days"
   1208 subroutine diurnal_solar_cal_2d (lat, lon, time, cosz, fracday,   &
   1209                                  rrsun, dt_time, allow_negative_cosz, &
   1210                                  half_day_out)
   1211 
   1212 !-------------------------------------------------------------------
   1213 real, dimension(:,:), intent(in)            :: lat, lon
   1214 type(time_type),      intent(in)            :: time
   1215 real, dimension(:,:), intent(out)           :: cosz, fracday
   1216 real,                 intent(out)           :: rrsun
   1217 type(time_type),      intent(in), optional  :: dt_time
   1218 logical,              intent(in), optional  :: allow_negative_cosz
   1219 real, dimension(:,:), intent(out), optional  :: half_day_out
   1220 !---------------------------------------------------------------------
   1221 
   1222 !---------------------------------------------------------------------
   1223 !   local variables
   1224 !---------------------------------------------------------------------
   1225       real :: dt
   1226       real :: gmt, time_since_ae
   1227 
   1228 !---------------------------------------------------------------------
   1229 !>    Extract time of day (gmt) from time_type variable time with
   1230 !!    function universal_time.
   1231 !---------------------------------------------------------------------
   1232       gmt = universal_time(time)
   1233 
   1234 !---------------------------------------------------------------------
   1235 !>   Extract the time of year (time_since_ae) from time_type variable
   1236 !!   time using the function orbital_time.
   1237 !---------------------------------------------------------------------
   1238       time_since_ae = orbital_time(time)
   1239 
   1240 !---------------------------------------------------------------------
   1241 !>    Convert optional time_type variable dt_time (length of averaging
   1242 !!    period) to a real variable dt with the function universal_time.
   1243 !---------------------------------------------------------------------
   1244       if (present(dt_time))  then

Page 40          Source Listing                  DIURNAL_SOLAR_CAL_2D
2021-06-01 08:55                                 astronomy.F90

   1245         dt = universal_time(dt_time)
   1246         if (dt > PI) then
   1247           call error_mesg ( 'astronomy_mod', &
   1248              'radiation time step must be no longer than 12 hrs', &
   1249                                                           FATAL)
   1250         endif
   1251         if (dt == 0.0) then
   1252           call error_mesg ( 'astronomy_mod', &
   1253               'radiation time step must not be an integral &
   1254                                      &number of days', FATAL)
   1255         endif
   1256 
   1257 !--------------------------------------------------------------------
   1258 !>    Call diurnal_solar_2d to calculate astronomy fields, with or
   1259 !!    without the optional argument dt.
   1260 !--------------------------------------------------------------------
   1261         call diurnal_solar_2d (lat, lon, gmt, time_since_ae, cosz, &
   1262                fracday, rrsun, dt=dt, &
   1263                allow_negative_cosz=allow_negative_cosz, &
   1264                half_day_out=half_day_out)
   1265       else
   1266         call diurnal_solar_2d (lat, lon, gmt, time_since_ae, cosz, &
   1267                fracday, rrsun, &
   1268                allow_negative_cosz=allow_negative_cosz, &
   1269                half_day_out=half_day_out)
   1270       end if
   1271 
   1272 end subroutine diurnal_solar_cal_2d

Page 41          Source Listing                  DIURNAL_SOLAR_CAL_2D
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                              
                                                    
 astronomy_mod_mp_diurnal_solar_cal_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOW_NEGATIVE_COSZ        Dummy  1209     L(4)            4           scalar   ARG,IN           1263,1268                         
 COSZ                       Dummy  1208     R(8)            8     2     1        ARG,OUT          1261,1266                         
 DIURNAL_SOLAR_CAL_2D       Subr   1208                                          PRIV             1321,1326,1387,1392               
 DT                         Local  1225     R(8)            8           scalar                    1245,1246,1251,1262               
 DT_TIME                    Dummy  1209     TIME_TYPE       16          scalar   ARG,IN           1244,1245                         
 FRACDAY                    Dummy  1208     R(8)            8     2     1        ARG,OUT          1262,1267                         
 GMT                        Local  1226     R(8)            8           scalar                    1232,1261,1266                    
 HALF_DAY_OUT               Dummy  1210     R(8)            8     2     1        ARG,OUT          1264,1269                         
 LAT                        Dummy  1208     R(8)            8     2     1        ARG,IN           1261,1266                         
 LON                        Dummy  1208     R(8)            8     2     1        ARG,IN           1261,1266                         
 ORBITAL_TIME               Func   1238     R(8)            8           scalar                    121,1238,1627                     
 PRESENT                    Func   1244                                 scalar                    1244                              
 RRSUN                      Dummy  1209     R(8)            8           scalar   ARG,OUT          1262,1267                         
 TIME                       Dummy  1208     TIME_TYPE       16          scalar   ARG,IN           1232,1238                         
 TIME_SINCE_AE              Local  1226     R(8)            8           scalar                    1238,1261,1266                    
 UNIVERSAL_TIME             Func   1232     R(8)            8           scalar                    121,1232,1245                     

Page 42          Source Listing                  DIURNAL_SOLAR_CAL_2D
2021-06-01 08:55                                 astronomy.F90

   1273 
   1274 
   1275 !> \brief diurnal_solar_cal_1d receives time_type inputs, converts
   1276 !!        them to real variables and then calls diurnal_solar_2d to
   1277 !!        compute desired astronomical variables.
   1278 !!
   1279 !! \param [in] <lat> Latitudes of model grid points
   1280 !! \param [in] <lon> Longitudes of model grid points
   1281 !! \param [in] <gmt> Time of day at longitude 0.0; midnight = 0.0, one day = 2 * pi
   1282 !! \param [in] <time> Time of year (time_type)
   1283 !! \param [out] <cosz> Cosine of solar zenith angle
   1284 !! \param [out] <fracday> Daylight fraction of time interval
   1285 !! \param [out] <rrsun> earth-sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2
   1286 !! \param [in] <dt> OPTIONAL: time interval after gmt over which the astronomical variables are to be
   1287 !!                  averaged. this produces averaged output rather than instantaneous.
   1288 !! \param [in] <allow_negative_cosz> Allow negative values for cosz?
   1289 !! \param [out] <half_day_out> half_day_out
   1290 subroutine diurnal_solar_cal_1d (lat, lon, time, cosz, fracday,   &
   1291                                  rrsun, dt_time, allow_negative_cosz, &
   1292                                  half_day_out)
   1293 
   1294 !--------------------------------------------------------------------
   1295 real, dimension(:), intent(in)           :: lat, lon
   1296 type(time_type),    intent(in)           :: time
   1297 real, dimension(:), intent(out)          :: cosz, fracday
   1298 real,               intent(out)          :: rrsun
   1299 type(time_type),    intent(in), optional :: dt_time
   1300 logical,            intent(in), optional :: allow_negative_cosz
   1301 real, dimension(:), intent(out), optional :: half_day_out
   1302 !--------------------------------------------------------------------
   1303 
   1304 !-------------------------------------------------------------------
   1305 !   local variables
   1306 !-------------------------------------------------------------------
   1307       real, dimension(size(lat),1) :: lat_2d, lon_2d, cosz_2d, &
   1308                                       fracday_2d, halfday_2d
   1309 
   1310 !--------------------------------------------------------------------
   1311 !>    Define 2-d versions of input data arrays.
   1312 !--------------------------------------------------------------------
   1313       lat_2d(:,1) = lat
   1314       lon_2d(:,1) = lon
   1315 
   1316 !--------------------------------------------------------------------
   1317 !>    Call diurnal_solar_cal_2d to convert the time_types to reals and
   1318 !!    then calculate the astronomy fields.
   1319 !--------------------------------------------------------------------
   1320       if (present(dt_time)) then
   1321         call diurnal_solar_cal_2d (lat_2d, lon_2d, time, cosz_2d,    &
   1322            fracday_2d, rrsun, dt_time=dt_time, &
   1323            allow_negative_cosz=allow_negative_cosz, &
   1324            half_day_out=halfday_2d)
   1325       else
   1326         call diurnal_solar_cal_2d (lat_2d, lon_2d, time, cosz_2d,    &
   1327            fracday_2d, rrsun, &
   1328            allow_negative_cosz=allow_negative_cosz, &
   1329            half_day_out=halfday_2d)

Page 43          Source Listing                  DIURNAL_SOLAR_CAL_1D
2021-06-01 08:55                                 astronomy.F90

   1330       end if
   1331 
   1332 !-------------------------------------------------------------------
   1333 !>    Place output fields into 1-d arguments for return to
   1334 !!    calling routine.
   1335 !-------------------------------------------------------------------
   1336       fracday = fracday_2d(:,1)
   1337       cosz  = cosz_2d (:,1)
   1338       if (present(half_day_out)) then
   1339          half_day_out = halfday_2d(:,1)
   1340       end if
   1341 
   1342 end subroutine diurnal_solar_cal_1d


ENTRY POINTS

  Name                                              
                                                    
 astronomy_mod_mp_diurnal_solar_cal_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOW_NEGATIVE_COSZ        Dummy  1291     L(4)            4           scalar   ARG,IN           1323,1328                         
 COSZ                       Dummy  1290     R(8)            8     1     1        ARG,OUT          1337                              
 COSZ_2D                    Local  1307     R(8)            8     2     0        TGT              1321,1326,1337                    
 DIURNAL_SOLAR_CAL_1D       Subr   1290                                          PRIV                                               
 DT_TIME                    Dummy  1291     TIME_TYPE       16          scalar   ARG,IN           1320,1322                         
 FRACDAY                    Dummy  1290     R(8)            8     1     1        ARG,OUT          1336                              
 FRACDAY_2D                 Local  1308     R(8)            8     2     0        TGT              1322,1327,1336                    
 HALFDAY_2D                 Local  1308     R(8)            8     2     0        TGT              1324,1329,1339                    
 HALF_DAY_OUT               Dummy  1292     R(8)            8     1     1        ARG,OUT          1338,1339                         
 LAT                        Dummy  1290     R(8)            8     1     1        ARG,IN           1313                              
 LAT_2D                     Local  1307     R(8)            8     2     0        TGT              1313,1321,1326                    
 LON                        Dummy  1290     R(8)            8     1     1        ARG,IN           1314                              
 LON_2D                     Local  1307     R(8)            8     2     0        TGT              1314,1321,1326                    
 PRESENT                    Func   1320                                 scalar                    1320,1338                         
 RRSUN                      Dummy  1291     R(8)            8           scalar   ARG,OUT          1322,1327                         
 TIME                       Dummy  1290     TIME_TYPE       16          scalar   ARG,IN           1321,1326                         

Page 44          Source Listing                  DIURNAL_SOLAR_CAL_1D
2021-06-01 08:55                                 astronomy.F90

   1343 
   1344 
   1345 !> \brief diurnal_solar_cal_0d receives time_type inputs, converts them to real variables
   1346 !!        and then calls diurnal_solar_2d to compute desired astronomical variables.
   1347 !!
   1348 !! \param [in] <lat> Latitudes of model grid points
   1349 !! \param [in] <lon> Longitudes of model grid points
   1350 !! \param [in] <time> Time of year (time_type)
   1351 !! \param [out] <cosz> Cosine of solar zenith angle
   1352 !! \param [out] <fracday> Daylight fraction of time interval
   1353 !! \param [out] <rrsun> Earth-Sun distance (r) relative to semi-major axis of orbital ellipse (a) : (a/r)**2
   1354 !! \param [out] <dt_time> OPTIONAL: time interval after gmt over which the astronomical variables are
   1355 !!                        to be averaged. this produces averaged output rather than instantaneous.
   1356 !! \param [in] <allow_negative_cosz> allow_negative_cosz
   1357 !! \param [out] <half_day_out> half_day_out
   1358 subroutine diurnal_solar_cal_0d (lat, lon, time, cosz, fracday,   &
   1359                                  rrsun, dt_time, allow_negative_cosz, &
   1360                                  half_day_out)
   1361 
   1362 !---------------------------------------------------------------------
   1363 real,            intent(in)           :: lat, lon
   1364 type(time_type), intent(in)           :: time
   1365 real,            intent(out)          :: cosz, fracday, rrsun
   1366 type(time_type), intent(in), optional :: dt_time
   1367 logical,         intent(in), optional :: allow_negative_cosz
   1368 real,            intent(out), optional :: half_day_out
   1369 !---------------------------------------------------------------------
   1370 
   1371 !---------------------------------------------------------------------
   1372 !  local variables
   1373 !---------------------------------------------------------------------
   1374       real, dimension(1,1) :: lat_2d, lon_2d, cosz_2d, fracday_2d, halfday_2d
   1375 
   1376 !--------------------------------------------------------------------
   1377 !>    Define 2-d versions of input data arrays.
   1378 !--------------------------------------------------------------------
   1379       lat_2d = lat
   1380       lon_2d = lon
   1381 
   1382 !--------------------------------------------------------------------
   1383 !>    Call diurnal_solar_cal_2d to convert the time_types to reals and
   1384 !!    then calculate the astronomy fields.
   1385 !--------------------------------------------------------------------
   1386       if (present(dt_time)) then
   1387         call diurnal_solar_cal_2d (lat_2d, lon_2d, time, cosz_2d,   &
   1388            fracday_2d, rrsun, dt_time=dt_time, &
   1389            allow_negative_cosz=allow_negative_cosz, &
   1390            half_day_out=halfday_2d)
   1391       else
   1392         call diurnal_solar_cal_2d (lat_2d, lon_2d, time, cosz_2d,   &
   1393            fracday_2d, rrsun, &
   1394            allow_negative_cosz=allow_negative_cosz, &
   1395            half_day_out=halfday_2d)
   1396       end if
   1397 
   1398 !-------------------------------------------------------------------
   1399 !>    Place output fields into 1-d arguments for return to

Page 45          Source Listing                  DIURNAL_SOLAR_CAL_0D
2021-06-01 08:55                                 astronomy.F90

   1400 !!    calling routine.
   1401 !-------------------------------------------------------------------
   1402       fracday= fracday_2d(1,1)
   1403       cosz = cosz_2d(1,1)
   1404       if (present(half_day_out)) then
   1405          half_day_out = halfday_2d(1,1)
   1406       end if
   1407 
   1408 end subroutine diurnal_solar_cal_0d


ENTRY POINTS

  Name                                              
                                                    
 astronomy_mod_mp_diurnal_solar_cal_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOW_NEGATIVE_COSZ        Dummy  1359     L(4)            4           scalar   ARG,IN           1389,1394                         
 COSZ                       Dummy  1358     R(8)            8           scalar   ARG,OUT          1403                              
 COSZ_2D                    Local  1374     R(8)            8     2     1        TGT              1387,1392,1403                    
 DIURNAL_SOLAR_CAL_0D       Subr   1358                                          PRIV                                               
 DT_TIME                    Dummy  1359     TIME_TYPE       16          scalar   ARG,IN           1386,1388                         
 FRACDAY                    Dummy  1358     R(8)            8           scalar   ARG,OUT          1402                              
 FRACDAY_2D                 Local  1374     R(8)            8     2     1        TGT              1388,1393,1402                    
 HALFDAY_2D                 Local  1374     R(8)            8     2     1        TGT              1390,1395,1405                    
 HALF_DAY_OUT               Dummy  1360     R(8)            8           scalar   ARG,OUT          1404,1405                         
 LAT                        Dummy  1358     R(8)            8           scalar   ARG,IN           1379                              
 LAT_2D                     Local  1374     R(8)            8     2     1        TGT              1379,1387,1392                    
 LON                        Dummy  1358     R(8)            8           scalar   ARG,IN           1380                              
 LON_2D                     Local  1374     R(8)            8     2     1        TGT              1380,1387,1392                    
 PRESENT                    Func   1386                                 scalar                    1386,1404                         
 RRSUN                      Dummy  1359     R(8)            8           scalar   ARG,OUT          1388,1393                         
 TIME                       Dummy  1358     TIME_TYPE       16          scalar   ARG,IN           1387,1392                         

Page 46          Source Listing                  DIURNAL_SOLAR_CAL_0D
2021-06-01 08:55                                 astronomy.F90

   1409 
   1410 
   1411 !> \brief daily_mean_solar_2d computes the daily mean astronomical parameters for
   1412 !!        the input points at latitude lat and time of year time_since_ae.
   1413 !!
   1414 !! \param [in] <lat> Latitudes of model grid points
   1415 !! \param [in] <time_since_ae> Time of year; autumnal equinox = 0.0, one year = 2 * pi
   1416 !! \param [out] <cosz> Cosine of solar zenith angle
   1417 !! \param [out] <h_out> 2-d array of half-day lengths at the latitudes
   1418 !! \param [out] <rr_out> the inverse of the square of the earth-sun distance relative
   1419 !!                       to the mean distance at angle ang in the earth's orbit.
   1420 !!
   1421 !! \throw FATAL, "astronomy_mod time_since_ae not between 0 and 2pi"
   1422 subroutine daily_mean_solar_2d (lat, time_since_ae, cosz, h_out, rr_out)
   1423 
   1424 !----------------------------------------------------------------------
   1425 real, dimension(:,:), intent(in)   :: lat
   1426 real,                 intent(in)   :: time_since_ae
   1427 real, dimension(:,:), intent(out)  :: cosz, h_out
   1428 real,                 intent(out)  :: rr_out
   1429 !----------------------------------------------------------------------
   1430 
   1431 !--------------------------------------------------------------------
   1432 !   local variables
   1433 !--------------------------------------------------------------------
   1434       real, dimension(size(lat,1),size(lat,2)) :: h
   1435       real :: ang, dec, rr
   1436 
   1437 !--------------------------------------------------------------------
   1438 !    be sure the time in the annual cycle is legitimate.
   1439 !---------------------------------------------------------------------
   1440       if (time_since_ae < 0.0 .or. time_since_ae > twopi) &
   1441         call error_mesg('astronomy_mod', &
   1442                         'time_since_ae not between 0 and 2pi', FATAL)
   1443 
   1444 !---------------------------------------------------------------------
   1445 !>    Define the orbital angle (location in year), solar declination,
   1446 !!    half-day length and earth sun distance factor. Use functions
   1447 !!    contained in this module.
   1448 !---------------------------------------------------------------------
   1449       ang = angle (time_since_ae)
   1450       dec = declination(ang)
   1451       h   = half_day    (lat, dec)
   1452       rr  = r_inv_squared (ang)
   1453 
   1454 !---------------------------------------------------------------------
   1455 !>    Where the entire day is dark, define cosz to be zero. otherwise
   1456 !!    use the standard formula. Define the daylight fraction and earth-
   1457 !!    sun distance.
   1458 !---------------------------------------------------------------------
   1459       where (h == 0.0)
   1460         cosz = 0.0
   1461       elsewhere
   1462         cosz = sin(lat)*sin(dec) + cos(lat)*cos(dec)*sin(h)/h
   1463       end where
   1464       h_out = h/PI
   1465       rr_out = rr

Page 47          Source Listing                  DAILY_MEAN_SOLAR_2D
2021-06-01 08:55                                 astronomy.F90

   1466 
   1467 end subroutine daily_mean_solar_2d


ENTRY POINTS

  Name                                             
                                                   
 astronomy_mod_mp_daily_mean_solar_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANG                        Local  1435     R(8)            8           scalar                    1449,1450,1452                    
 COS                        Func   1462                                 scalar                    1462                              
 COSZ                       Dummy  1422     R(8)            8     2     1        ARG,OUT          1460,1462                         
 DAILY_MEAN_SOLAR_2D        Subr   1422                                          PRIV             1503,1546,1587,1635,1812          
 DEC                        Local  1435     R(8)            8           scalar                    1450,1451,1462                    
 H                          Local  1434     R(8)            8     2     0                         1451,1459,1462,1464               
 H_OUT                      Dummy  1422     R(8)            8     2     1        ARG,OUT          1464                              
 LAT                        Dummy  1422     R(8)            8     2     1        ARG,IN           1434,1451,1462                    
 RR                         Local  1435     R(8)            8           scalar                    1452,1465                         
 RR_OUT                     Dummy  1422     R(8)            8           scalar   ARG,OUT          1465                              
 SIN                        Func   1462                                 scalar                    1462                              
 SIZE                       Func   1434                                 scalar                    1434                              
 TIME_SINCE_AE              Dummy  1422     R(8)            8           scalar   ARG,IN           1440,1449                         

Page 48          Source Listing                  DAILY_MEAN_SOLAR_2D
2021-06-01 08:55                                 astronomy.F90

   1468 
   1469 
   1470 !> \brief daily_mean_solar_1d takes 1-d input fields, adds a second dimension
   1471 !!        and calls daily_mean_solar_2d. on return, the 2d fields are
   1472 !!        returned to the original 1d fields.
   1473 !!
   1474 !! \param [in] <lat> Latitudes of model grid points
   1475 !! \param [in] <time_since_ae> Time of year; autumnal equinox = 0.0, one year = 2 * pi
   1476 !! \param [out] <cosz> Cosine of solar zenith angle
   1477 !! \param [out] <h_out> 2-d array of half-day lengths at the latitudes
   1478 !! \param [out] <rr_out> the inverse of the square of the earth-sun distance relative
   1479 !!                       to the mean distance at angle ang in the earth's orbit.
   1480 subroutine daily_mean_solar_1d (lat, time_since_ae, cosz, h_out, rr_out)
   1481 
   1482 !----------------------------------------------------------------------
   1483 real, intent(in), dimension(:) :: lat
   1484 real, intent(in) :: time_since_ae
   1485 real, intent(out), dimension(size(lat(:))) ::        cosz
   1486 real, intent(out), dimension(size(lat(:)))           :: h_out
   1487 real, intent(out)           :: rr_out
   1488 !----------------------------------------------------------------------
   1489 
   1490 !----------------------------------------------------------------------
   1491 !   local variables
   1492 !----------------------------------------------------------------------
   1493       real, dimension(size(lat),1) :: lat_2d, cosz_2d, hout_2d
   1494 
   1495 !--------------------------------------------------------------------
   1496 !>    define 2-d versions of input data array.
   1497 !--------------------------------------------------------------------
   1498       lat_2d(:,1) = lat
   1499 
   1500 !--------------------------------------------------------------------
   1501 !>    call daily_mean_solar_2d to calculate astronomy fields.
   1502 !--------------------------------------------------------------------
   1503       call daily_mean_solar_2d (lat_2d, time_since_ae, cosz_2d,      &
   1504                                 hout_2d, rr_out)
   1505 
   1506 !-------------------------------------------------------------------
   1507 !>    place output fields into 1-d arguments for return to
   1508 !!    calling routine.
   1509 !-------------------------------------------------------------------
   1510       h_out = hout_2d(:,1)
   1511       cosz  = cosz_2d(:,1)
   1512 
   1513 end subroutine daily_mean_solar_1d

Page 49          Source Listing                  DAILY_MEAN_SOLAR_1D
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                             
                                                   
 astronomy_mod_mp_daily_mean_solar_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COSZ                       Dummy  1480     R(8)            8     1     0        ARG,OUT          1511                              
 COSZ_2D                    Local  1493     R(8)            8     2     0        TGT              1503,1511                         
 DAILY_MEAN_SOLAR_1D        Subr   1480                                          PRIV                                               
 HOUT_2D                    Local  1493     R(8)            8     2     0        TGT              1504,1510                         
 H_OUT                      Dummy  1480     R(8)            8     1     0        ARG,OUT          1510                              
 LAT                        Dummy  1480     R(8)            8     1     1        ARG,IN           1485,1486,1498                    
 LAT_2D                     Local  1493     R(8)            8     2     0        TGT              1498,1503                         
 RR_OUT                     Dummy  1480     R(8)            8           scalar   ARG,OUT          1504                              
 SIZE                       Func   1485                                 scalar   PRIV             1485,1486                         
 TIME_SINCE_AE              Dummy  1480     R(8)            8           scalar   ARG,IN           1503                              

Page 50          Source Listing                  DAILY_MEAN_SOLAR_1D
2021-06-01 08:55                                 astronomy.F90

   1514 
   1515 
   1516 !> \brief daily_mean_solar_2level takes 1-d input fields, adds a second
   1517 !!        dimension and calls daily_mean_solar_2d. on return, the 2d fields
   1518 !!        are returned to the original 1d fields.
   1519 !!
   1520 !! \param [in] <lat> Latitudes of model grid points
   1521 !! \param [in] <time_since_ae> Time of year; autumnal equinox = 0.0, one year = 2 * pi
   1522 !! \param [out] <cosz> Cosine of solar zenith angle
   1523 !! \param [out] <solar> Shortwave flux factor: cosine of zenith angle * daylight fraction / (earth-sun distance squared)
   1524 subroutine daily_mean_solar_2level (lat, time_since_ae, cosz, solar)
   1525 
   1526 !----------------------------------------------------------------------
   1527 real, intent(in), dimension(:)          :: lat
   1528 real, intent(in)                        :: time_since_ae
   1529 real, intent(out), dimension(size(lat(:))) :: cosz, solar
   1530 !----------------------------------------------------------------------
   1531 
   1532 !----------------------------------------------------------------------
   1533 !   local variables
   1534 !----------------------------------------------------------------------
   1535       real, dimension(size(lat),1) :: lat_2d, cosz_2d, hout_2d
   1536       real                         :: rr_out
   1537 
   1538 !--------------------------------------------------------------------
   1539 !>    define 2-d versions of input data array.
   1540 !--------------------------------------------------------------------
   1541       lat_2d(:,1) = lat
   1542 
   1543 !--------------------------------------------------------------------
   1544 !>    call daily_mean_solar_2d to calculate astronomy fields.
   1545 !--------------------------------------------------------------------
   1546       call daily_mean_solar_2d (lat_2d, time_since_ae, cosz_2d,      &
   1547                                 hout_2d, rr_out)
   1548 
   1549 !-------------------------------------------------------------------
   1550 !>    place output fields into 1-d arguments for return to
   1551 !!    calling routine.
   1552 !-------------------------------------------------------------------
   1553       solar = cosz_2d(:,1)*hout_2d(:,1)*rr_out
   1554       cosz  = cosz_2d(:,1)
   1555 
   1556 end subroutine daily_mean_solar_2level

Page 51          Source Listing                  DAILY_MEAN_SOLAR_2LEVEL
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                                 
                                                       
 astronomy_mod_mp_daily_mean_solar_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COSZ                       Dummy  1524     R(8)            8     1     0        ARG,OUT          1554                              
 COSZ_2D                    Local  1535     R(8)            8     2     0        TGT              1546,1553,1554                    
 DAILY_MEAN_SOLAR_2LEVEL    Subr   1524                                          PRIV                                               
 HOUT_2D                    Local  1535     R(8)            8     2     0        TGT              1547,1553                         
 LAT                        Dummy  1524     R(8)            8     1     1        ARG,IN           1541                              
 LAT_2D                     Local  1535     R(8)            8     2     0        TGT              1541,1546                         
 RR_OUT                     Local  1536     R(8)            8           scalar                    1547,1553                         
 SOLAR                      Dummy  1524     R(8)            8     1     0        ARG,OUT          1553                              
 TIME_SINCE_AE              Dummy  1524     R(8)            8           scalar   ARG,IN           1546                              

Page 52          Source Listing                  DAILY_MEAN_SOLAR_2LEVEL
2021-06-01 08:55                                 astronomy.F90

   1557 
   1558 
   1559 !> \brief daily_mean_solar_1d takes 1-d input fields, adds a second dimension
   1560 !!        and calls daily_mean_solar_2d. on return, the 2d fields are
   1561 !!        returned to the original 1d fields.
   1562 !!
   1563 !! \param [in] <lat> Latitudes of model grid points
   1564 !! \param [in] <time_since_ae> Time of year; autumnal equinox = 0.0, one year = 2 * pi
   1565 !! \param [out] <cosz> Cosine of solar zenith angle
   1566 !! \param [out] <h_out> 2-d array of half-day lengths at the latitudes
   1567 !! \param [out] <rr_out> the inverse of the square of the earth-sun distance relative to
   1568 !!                       the mean distance at angle ang in the earth's orbit.
   1569 subroutine daily_mean_solar_0d (lat, time_since_ae, cosz, h_out, rr_out)
   1570 
   1571 real, intent(in)         :: lat, time_since_ae
   1572 real, intent(out)        :: cosz, h_out, rr_out
   1573 
   1574 !--------------------------------------------------------------------
   1575 !   local variables
   1576 !--------------------------------------------------------------------
   1577       real, dimension(1,1) :: lat_2d, cosz_2d, hout_2d
   1578 
   1579 !--------------------------------------------------------------------
   1580 !>    define 2-d versions of input data array.
   1581 !--------------------------------------------------------------------
   1582       lat_2d = lat
   1583 
   1584 !--------------------------------------------------------------------
   1585 !>    call daily_mean_solar_2d to calculate astronomy fields.
   1586 !--------------------------------------------------------------------
   1587       call daily_mean_solar_2d (lat_2d, time_since_ae, cosz_2d,     &
   1588                                 hout_2d, rr_out)
   1589 
   1590 !-------------------------------------------------------------------
   1591 !>    return output fields to scalars for return to calling routine.
   1592 !-------------------------------------------------------------------
   1593       h_out = hout_2d(1,1)
   1594       cosz  = cosz_2d(1,1)
   1595 
   1596 end subroutine daily_mean_solar_0d

Page 53          Source Listing                  DAILY_MEAN_SOLAR_0D
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                             
                                                   
 astronomy_mod_mp_daily_mean_solar_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COSZ                       Dummy  1569     R(8)            8           scalar   ARG,OUT          1594                              
 COSZ_2D                    Local  1577     R(8)            8     2     1        TGT              1587,1594                         
 DAILY_MEAN_SOLAR_0D        Subr   1569                                          PRIV                                               
 HOUT_2D                    Local  1577     R(8)            8     2     1        TGT              1588,1593                         
 H_OUT                      Dummy  1569     R(8)            8           scalar   ARG,OUT          1593                              
 LAT                        Dummy  1569     R(8)            8           scalar   ARG,IN           1582                              
 LAT_2D                     Local  1577     R(8)            8     2     1        TGT              1582,1587                         
 RR_OUT                     Dummy  1569     R(8)            8           scalar   ARG,OUT          1588                              
 TIME_SINCE_AE              Dummy  1569     R(8)            8           scalar   ARG,IN           1587                              

Page 54          Source Listing                  DAILY_MEAN_SOLAR_0D
2021-06-01 08:55                                 astronomy.F90

   1597 
   1598 
   1599 !> \brief daily_mean_solar_cal_2d receives time_type inputs, converts
   1600 !!        them to real variables and then calls daily_mean_solar_2d to
   1601 !!        compute desired astronomical variables.
   1602 !!
   1603 !! \param [in] <lat> Latitudes of model grid points
   1604 !! \param [in] <time> Time of year (time_type)
   1605 !! \param [out] <cosz> Cosine of solar zenith angle
   1606 !! \param [out] <fracday> Daylight fraction of time interval
   1607 !! \param [out] <rrsun> Earth-Sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2
   1608 !!
   1609 !! \throw FATAL, "astronomy_mod time_since_ae not between 0 and 2pi"
   1610 subroutine daily_mean_solar_cal_2d (lat, time, cosz, fracday, rrsun)
   1611 
   1612 !-------------------------------------------------------------------
   1613 real, dimension(:,:), intent(in)  :: lat
   1614 type(time_type),      intent(in)  :: time
   1615 real, dimension(:,:), intent(out) :: cosz, fracday
   1616 real,                 intent(out) :: rrsun
   1617 !-------------------------------------------------------------------
   1618 
   1619 !-------------------------------------------------------------------
   1620 !  local variables
   1621 !-------------------------------------------------------------------
   1622       real :: time_since_ae
   1623 
   1624 !--------------------------------------------------------------------
   1625 !    be sure the time in the annual cycle is legitimate.
   1626 !---------------------------------------------------------------------
   1627       time_since_ae = orbital_time(time)
   1628       if (time_since_ae < 0.0 .or. time_since_ae > twopi) &
   1629           call error_mesg ('astronomy_mod', &
   1630                          'time_since_ae not between 0 and 2pi', FATAL)
   1631 
   1632 !--------------------------------------------------------------------
   1633 !    call daily_mean_solar_2d to calculate astronomy fields.
   1634 !--------------------------------------------------------------------
   1635       call daily_mean_solar_2d (lat, time_since_ae, cosz,        &
   1636                                 fracday, rrsun)
   1637 
   1638 end subroutine daily_mean_solar_cal_2d

Page 55          Source Listing                  DAILY_MEAN_SOLAR_CAL_2D
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                                 
                                                       
 astronomy_mod_mp_daily_mean_solar_cal_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COSZ                       Dummy  1610     R(8)            8     2     1        ARG,OUT          1635                              
 DAILY_MEAN_SOLAR_CAL_2D    Subr   1610                                          PRIV             1672,1715,1758                    
 FRACDAY                    Dummy  1610     R(8)            8     2     1        ARG,OUT          1636                              
 LAT                        Dummy  1610     R(8)            8     2     1        ARG,IN           1635                              
 RRSUN                      Dummy  1610     R(8)            8           scalar   ARG,OUT          1636                              
 TIME                       Dummy  1610     TIME_TYPE       16          scalar   ARG,IN           1627                              
 TIME_SINCE_AE              Local  1622     R(8)            8           scalar                    1627,1628,1635                    

Page 56          Source Listing                  DAILY_MEAN_SOLAR_CAL_2D
2021-06-01 08:55                                 astronomy.F90

   1639 
   1640 
   1641 !> \brief daily_mean_solar_cal_1d receives time_type inputs, converts
   1642 !!        them to real, 2d variables and then calls daily_mean_solar_2d to
   1643 !!        compute desired astronomical variables.
   1644 !!
   1645 !! \param [in] <lat> Latitudes of model grid points
   1646 !! \param [in] <time> Time of year (time_type)
   1647 !! \param [out] <cosz> Cosine of solar zenith angle
   1648 !! \param [out] <fracday> Daylight fraction of time interval
   1649 !! \param [out] <rrsun> Earth-Sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2
   1650 subroutine daily_mean_solar_cal_1d (lat, time, cosz, fracday, rrsun)
   1651 
   1652 real, dimension(:),  intent(in)   :: lat
   1653 type(time_type),     intent(in)   :: time
   1654 real, dimension(:),  intent(out)  :: cosz, fracday
   1655 real,                intent(out)  :: rrsun
   1656 
   1657 !---------------------------------------------------------------------
   1658 !  local variables
   1659 !---------------------------------------------------------------------
   1660       real, dimension(size(lat),1) :: lat_2d, cosz_2d, fracday_2d
   1661 
   1662 
   1663 !--------------------------------------------------------------------
   1664 !>    define 2-d versions of input data array.
   1665 !--------------------------------------------------------------------
   1666       lat_2d(:,1) = lat
   1667 
   1668 !--------------------------------------------------------------------
   1669 !>    call daily_mean_solar_cal_2d to convert the time_types to reals and
   1670 !!    then calculate the astronomy fields.
   1671 !--------------------------------------------------------------------
   1672       call daily_mean_solar_cal_2d (lat_2d, time, cosz_2d,   &
   1673                                     fracday_2d, rrsun)
   1674 
   1675 !-------------------------------------------------------------------
   1676 !>    place output fields into 1-d arguments for return to
   1677 !!    calling routine.
   1678 !-------------------------------------------------------------------
   1679       fracday = fracday_2d(:,1)
   1680       cosz  = cosz_2d(:,1)
   1681 
   1682 end subroutine daily_mean_solar_cal_1d

Page 57          Source Listing                  DAILY_MEAN_SOLAR_CAL_1D
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                                 
                                                       
 astronomy_mod_mp_daily_mean_solar_cal_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COSZ                       Dummy  1650     R(8)            8     1     1        ARG,OUT          1680                              
 COSZ_2D                    Local  1660     R(8)            8     2     0        TGT              1672,1680                         
 DAILY_MEAN_SOLAR_CAL_1D    Subr   1650                                          PRIV                                               
 FRACDAY                    Dummy  1650     R(8)            8     1     1        ARG,OUT          1679                              
 FRACDAY_2D                 Local  1660     R(8)            8     2     0        TGT              1673,1679                         
 LAT                        Dummy  1650     R(8)            8     1     1        ARG,IN           1666                              
 LAT_2D                     Local  1660     R(8)            8     2     0        TGT              1666,1672                         
 RRSUN                      Dummy  1650     R(8)            8           scalar   ARG,OUT          1673                              
 TIME                       Dummy  1650     TIME_TYPE       16          scalar   ARG,IN           1672                              

Page 58          Source Listing                  DAILY_MEAN_SOLAR_CAL_1D
2021-06-01 08:55                                 astronomy.F90

   1683 
   1684 
   1685 !> \brief daily_mean_solar_cal_2level receives 1d arrays and time_type input,
   1686 !!        converts them to real, 2d variables and then calls
   1687 !!        daily_mean_solar_2d to compute desired astronomical variables.
   1688 !!
   1689 !! \param [in] <lat> Latitudes of model grid points
   1690 !! \param [in] <time> Time of year (time_type)
   1691 !! \param [out] <cosz> Cosine of solar zenith angle
   1692 !! \param [out] <solar> Shortwave flux factor: cosine of zenith angle * daylight fraction / (earth-sun distance squared)
   1693 subroutine daily_mean_solar_cal_2level (lat, time, cosz, solar)
   1694 
   1695 real, dimension(:),  intent(in)   :: lat
   1696 type(time_type),     intent(in)   :: time
   1697 real, dimension(:),  intent(out)  :: cosz, solar
   1698 
   1699 !---------------------------------------------------------------------
   1700 !  local variables
   1701 !---------------------------------------------------------------------
   1702       real, dimension(size(lat),1) :: lat_2d, cosz_2d, fracday_2d
   1703       real                         :: rrsun
   1704 
   1705 
   1706 !--------------------------------------------------------------------
   1707 !>    define 2-d versions of input data array.
   1708 !--------------------------------------------------------------------
   1709       lat_2d(:,1) = lat
   1710 
   1711 !--------------------------------------------------------------------
   1712 !>    call daily_mean_solar_cal_2d to convert the time_types to reals and
   1713 !!    then calculate the astronomy fields.
   1714 !--------------------------------------------------------------------
   1715       call daily_mean_solar_cal_2d (lat_2d, time, cosz_2d,   &
   1716                                     fracday_2d, rrsun)
   1717 
   1718 !-------------------------------------------------------------------
   1719 !>    place output fields into 1-d arguments for return to
   1720 !!    calling routine.
   1721 !-------------------------------------------------------------------
   1722       solar = cosz_2d(:,1)*fracday_2d(:,1)*rrsun
   1723       cosz  = cosz_2d(:,1)
   1724 
   1725 end subroutine daily_mean_solar_cal_2level

Page 59          Source Listing                  DAILY_MEAN_SOLAR_CAL_2LEVEL
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                                     
                                                           
 astronomy_mod_mp_daily_mean_solar_cal_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COSZ                       Dummy  1693     R(8)            8     1     1        ARG,OUT          1723                              
 COSZ_2D                    Local  1702     R(8)            8     2     0        TGT              1715,1722,1723                    
 DAILY_MEAN_SOLAR_CAL_2LEVE                                                                                                         
 L                          Subr   1693                                          PRIV                                               
 FRACDAY_2D                 Local  1702     R(8)            8     2     0        TGT              1716,1722                         
 LAT                        Dummy  1693     R(8)            8     1     1        ARG,IN           1709                              
 LAT_2D                     Local  1702     R(8)            8     2     0        TGT              1709,1715                         
 RRSUN                      Local  1703     R(8)            8           scalar                    1716,1722                         
 SOLAR                      Dummy  1693     R(8)            8     1     1        ARG,OUT          1722                              
 TIME                       Dummy  1693     TIME_TYPE       16          scalar   ARG,IN           1715                              

Page 60          Source Listing                  DAILY_MEAN_SOLAR_CAL_2LEVEL
2021-06-01 08:55                                 astronomy.F90

   1726 
   1727 
   1728 !> \brief daily_mean_solar_cal_0d converts scalar input fields to real, 2d variables and
   1729 !!        then calls daily_mean_solar_2d to compute desired astronomical variables.
   1730 !!
   1731 !! \param [in] <lat> Latitudes of model grid points
   1732 !! \param [in] <time> Time of year (time_type)
   1733 !! \param [out] <cosz> Cosine of solar zenith angle
   1734 !! \param [out] <fracday> Daylight fraction of time interval
   1735 !! \param [out] <rrsun> Earth-Sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2
   1736 subroutine daily_mean_solar_cal_0d (lat, time, cosz, fracday, rrsun)
   1737 
   1738 !--------------------------------------------------------------------
   1739 real,             intent(in)  :: lat
   1740 type(time_type),  intent(in)  :: time
   1741 real,             intent(out) :: cosz, fracday, rrsun
   1742 !--------------------------------------------------------------------
   1743 
   1744 !--------------------------------------------------------------------
   1745 !  local variables
   1746 !--------------------------------------------------------------------
   1747       real, dimension(1,1) :: lat_2d, cosz_2d, fracday_2d
   1748 
   1749 !--------------------------------------------------------------------
   1750 !>    define 2-d versions of input data array.
   1751 !--------------------------------------------------------------------
   1752       lat_2d = lat
   1753 
   1754 !--------------------------------------------------------------------
   1755 !>    call daily_mean_solar_cal_2d to convert the time_types to reals and
   1756 !!    then calculate the astronomy fields.
   1757 !--------------------------------------------------------------------
   1758       call daily_mean_solar_cal_2d (lat_2d, time, cosz_2d,           &
   1759                                     fracday_2d, rrsun)
   1760 
   1761 !-------------------------------------------------------------------
   1762 !>    place output fields into scalar arguments for return to
   1763 !!    calling routine.
   1764 !-------------------------------------------------------------------
   1765       fracday = fracday_2d(1,1)
   1766       cosz  = cosz_2d(1,1)
   1767 
   1768 end subroutine daily_mean_solar_cal_0d

Page 61          Source Listing                  DAILY_MEAN_SOLAR_CAL_0D
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                                 
                                                       
 astronomy_mod_mp_daily_mean_solar_cal_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COSZ                       Dummy  1736     R(8)            8           scalar   ARG,OUT          1766                              
 COSZ_2D                    Local  1747     R(8)            8     2     1        TGT              1758,1766                         
 DAILY_MEAN_SOLAR_CAL_0D    Subr   1736                                          PRIV                                               
 FRACDAY                    Dummy  1736     R(8)            8           scalar   ARG,OUT          1765                              
 FRACDAY_2D                 Local  1747     R(8)            8     2     1        TGT              1759,1765                         
 LAT                        Dummy  1736     R(8)            8           scalar   ARG,IN           1752                              
 LAT_2D                     Local  1747     R(8)            8     2     1        TGT              1752,1758                         
 RRSUN                      Dummy  1736     R(8)            8           scalar   ARG,OUT          1759                              
 TIME                       Dummy  1736     TIME_TYPE       16          scalar   ARG,IN           1758                              

Page 62          Source Listing                  DAILY_MEAN_SOLAR_CAL_0D
2021-06-01 08:55                                 astronomy.F90

   1769 
   1770 
   1771 !> \brief annual_mean_solar_2d returns 2d fields of annual mean values of the cosine of
   1772 !!        zenith angle, daylight fraction and earth-sun distance at the specified latitude.
   1773 !!
   1774 !! \param [in] <jst> Starting index of latitude window
   1775 !! \param [in] <jnd> Ending index of latitude window
   1776 !! \param [in] <lat> Latitudes of model grid points
   1777 !! \param [out] <cosz> Cosine of solar zenith angle
   1778 !! \param [out] <solar> Shortwave flux factor: cosine of zenith angle * daylight fraction / (earth-sun distance squared)
   1779 !! \param [out] <fracday> Daylight fraction of time interval
   1780 !! \param [out] <rrsun> Earth-Sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2
   1781 subroutine annual_mean_solar_2d (js, je, lat, cosz, solar, fracday,  &
   1782                                  rrsun)
   1783 
   1784 !--------------------------------------------------------------------
   1785 integer,                 intent(in)    :: js, je
   1786 real, dimension(:,:),    intent(in)    :: lat
   1787 real, dimension(:,:),    intent(out)   :: solar, cosz, fracday
   1788 real,                    intent(out)   :: rrsun
   1789 !--------------------------------------------------------------------
   1790 
   1791 !--------------------------------------------------------------------
   1792 !  local variables
   1793 !--------------------------------------------------------------------
   1794       real, dimension(size(lat,1),size(lat,2)) :: s,z
   1795       real    :: t
   1796       integer :: n, i
   1797 
   1798 !--------------------------------------------------------------------
   1799 !    if the calculation has not yet been done, do it here.
   1800 !--------------------------------------------------------------------
   1801       if (.not. annual_mean_calculated) then
   1802 
   1803 !----------------------------------------------------------------------
   1804 !>    determine annual mean values of solar flux and product of cosz
   1805 !!    and solar flux by integrating the annual cycle in num_angles
   1806 !!    orbital increments.
   1807 !----------------------------------------------------------------------
   1808         solar = 0.0
   1809         cosz = 0.0
   1810         do n =1, num_angles
   1811           t = float(n-1)*twopi/float(num_angles)
   1812           call daily_mean_solar(lat,t, z, fracday, rrsun)
   1813           s = z*rrsun*fracday
   1814           solar = solar + s
   1815           cosz  = cosz  + z*s
   1816         end do
   1817         solar = solar/float(num_angles)
   1818         cosz  = cosz/float(num_angles)
   1819 
   1820 !--------------------------------------------------------------------
   1821 !>   define the flux-weighted annual mean cosine of the zenith angle.
   1822 !--------------------------------------------------------------------
   1823         where(solar.eq.0.0)
   1824           cosz = 0.0
   1825         elsewhere

Page 63          Source Listing                  ANNUAL_MEAN_SOLAR_2D
2021-06-01 08:55                                 astronomy.F90

   1826           cosz = cosz/solar
   1827         end where
   1828 
   1829 !-------------------------------------------------------------------
   1830 !>    define avg fracday such as to make the avg flux (solar) equal to
   1831 !!    the product of the avg cosz * avg fracday * assumed mean avg
   1832 !!    radius of 1.0. it is unlikely that these avg fracday and avg rr
   1833 !!    will ever be used.
   1834 !--------------------------------------------------------------------
   1835         where(solar  .eq.0.0)
   1836           fracday = 0.0
   1837         elsewhere
   1838           fracday = solar/cosz
   1839         end where
   1840         rrsun = 1.00
   1841 
   1842 !---------------------------------------------------------------------
   1843 !>    save the values that have been calculated as module variables, if
   1844 !!    those variables are present; i.e., not the spectral 2-layer model.
   1845 !---------------------------------------------------------------------
   1846         if (allocated (cosz_ann)) then
   1847           cosz_ann    = cosz
   1848           solar_ann   = solar
   1849           fracday_ann = fracday
   1850           rrsun_ann = rrsun
   1851 
   1852 !--------------------------------------------------------------------
   1853 !>    increment the points computed counter. set flag to end execution
   1854 !!    once values have been calculated for all points owned by the
   1855 !!    processor.
   1856 !--------------------------------------------------------------------
   1857           num_pts = num_pts + size(lat,1)*size(lat,2)
   1858           if ( num_pts == total_pts)  annual_mean_calculated = .true.
   1859         endif
   1860 
   1861 !--------------------------------------------------------------------
   1862 !>    if the calculation has been done, return the appropriate module
   1863 !!    variables.
   1864 !--------------------------------------------------------------------
   1865       else
   1866         if (allocated (cosz_ann)) then
   1867           cosz    = cosz_ann
   1868           solar   = solar_ann
   1869           fracday = fracday_ann
   1870           rrsun = rrsun_ann
   1871         endif
   1872       endif
   1873 
   1874 end subroutine annual_mean_solar_2d

Page 64          Source Listing                  ANNUAL_MEAN_SOLAR_2D
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                              
                                                    
 astronomy_mod_mp_annual_mean_solar_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1846                                 scalar                    1846,1866                         
 ANNUAL_MEAN_CALCULATED     Local  1801     L(4)            4           scalar                    423,1801,1858,1908,1969,1999      
 ANNUAL_MEAN_SOLAR_2D       Subr   1781                                          PRIV             1918,1981                         
 COSZ                       Dummy  1781     R(8)            8     2     1        ARG,OUT          1809,1815,1818,1824,1826,1838,1847
                                                                                                  ,1867                             
 DAILY_MEAN_SOLAR           Local  1812                                 scalar                    120,1812                          
 FLOAT                      Func   1811                                 scalar                    1811,1817,1818                    
 FRACDAY                    Dummy  1781     R(8)            8     2     1        ARG,OUT          1812,1813,1836,1838,1849,1869     
 I                          Local  1796     I(4)            4           scalar                                                      
 JE                         Dummy  1781     I(4)            4           scalar   ARG,IN                                             
 JS                         Dummy  1781     I(4)            4           scalar   ARG,IN                                             
 LAT                        Dummy  1781     R(8)            8     2     1        ARG,IN           1812,1857                         
 N                          Local  1796     I(4)            4           scalar                    1810,1811                         
 NUM_PTS                    Local  1857     I(4)            4           scalar                    424,1857,1858                     
 RRSUN                      Dummy  1782     R(8)            8           scalar   ARG,OUT          1812,1813,1840,1850,1870          
 RRSUN_ANN                  Local  1850     R(8)            8           scalar                    1850,1870,1937                    
 S                          Local  1794     R(8)            8     2     0                         1813,1814,1815                    
 SIZE                       Func   1857                                 scalar                    1857                              
 SOLAR                      Dummy  1781     R(8)            8     2     1        ARG,OUT          1808,1814,1817,1823,1826,1835,1838
                                                                                                  ,1848,1868                        
 T                          Local  1795     R(8)            8           scalar                    1811,1812                         
 Z                          Local  1794     R(8)            8     2     0        TGT              1812,1813,1815                    

Page 65          Source Listing                  ANNUAL_MEAN_SOLAR_2D
2021-06-01 08:55                                 astronomy.F90

   1875 
   1876 
   1877 !> \brief annual_mean_solar_1d creates 2-d input fields from 1-d input fields and then calls
   1878 !!        annual_mean_solar_2d to obtain 2-d output fields which are then stored into 1-d
   1879 !!        fields for return to the calling subroutine.
   1880 !!
   1881 !! \param [in] <jst> Starting index of latitude window
   1882 !! \param [in] <jnd> Ending index of latitude window
   1883 !! \param [in] <lat> Latitudes of model grid points
   1884 !! \param [out] <cosz> Cosine of solar zenith angle
   1885 !! \param [out] <solar> Shortwave flux factor: cosine of zenith angle * daylight fraction / (earth-sun distance squared)
   1886 !! \param [out] <fracday> Daylight fraction of time interval
   1887 !! \param [out] <rrsun_out> Earth-Sun distance (r) relative to semi-major axis of orbital ellipse (a):(a/r)**2
   1888 subroutine annual_mean_solar_1d (jst, jnd, lat, cosz, solar,  &
   1889                                  fracday, rrsun_out)
   1890 
   1891 !---------------------------------------------------------------------
   1892 integer,            intent(in)     :: jst, jnd
   1893 real, dimension(:), intent(in)     :: lat(:)
   1894 real, dimension(:), intent(out)    :: cosz, solar, fracday
   1895 real,               intent(out)    :: rrsun_out
   1896 !---------------------------------------------------------------------
   1897 
   1898 !---------------------------------------------------------------------
   1899 !  local variables
   1900 
   1901       real, dimension(size(lat),1) :: lat_2d, solar_2d, cosz_2d,   &
   1902                                       fracday_2d
   1903       real :: rrsun
   1904 
   1905 !--------------------------------------------------------------------
   1906 !    if the calculation has not been done, do it here.
   1907 !--------------------------------------------------------------------
   1908       if ( .not. annual_mean_calculated) then
   1909 
   1910 !--------------------------------------------------------------------
   1911 !>    define 2-d versions of input data array.
   1912 !--------------------------------------------------------------------
   1913         lat_2d(:,1) = lat
   1914 
   1915 !--------------------------------------------------------------------
   1916 !>    call annual_mean_solar_2d to calculate the astronomy fields.
   1917 !--------------------------------------------------------------------
   1918         call annual_mean_solar_2d (jst, jnd, lat_2d, cosz_2d,   &
   1919                                    solar_2d, fracday_2d, rrsun)
   1920 
   1921 !-------------------------------------------------------------------
   1922 !>    place output fields into 1-D arrays for return to calling routine.
   1923 !-------------------------------------------------------------------
   1924         fracday = fracday_2d(:,1)
   1925         rrsun_out = rrsun
   1926         solar = solar_2d(:,1)
   1927         cosz  =  cosz_2d(:,1)
   1928 
   1929 !--------------------------------------------------------------------
   1930 !>    if the calculation has been done, simply return the module
   1931 !!    variables contain the results at the desired latitudes.

Page 66          Source Listing                  ANNUAL_MEAN_SOLAR_1D
2021-06-01 08:55                                 astronomy.F90

   1932 !--------------------------------------------------------------------
   1933       else
   1934         cosz(:)    = cosz_ann(1,jst:jnd)
   1935         solar(:)   = solar_ann(1,jst:jnd)
   1936         fracday(:) = fracday_ann(1,jst:jnd)
   1937         rrsun      = rrsun_ann
   1938       endif
   1939 
   1940 end subroutine annual_mean_solar_1d


ENTRY POINTS

  Name                                              
                                                    
 astronomy_mod_mp_annual_mean_solar_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANNUAL_MEAN_SOLAR_1D       Subr   1888                                          PRIV                                               
 COSZ                       Dummy  1888     R(8)            8     1     1        ARG,OUT          1927,1934                         
 COSZ_2D                    Local  1901     R(8)            8     2     0        TGT              1918,1927                         
 FRACDAY                    Dummy  1889     R(8)            8     1     1        ARG,OUT          1924,1936                         
 FRACDAY_2D                 Local  1902     R(8)            8     2     0        TGT              1919,1924                         
 JND                        Dummy  1888     I(4)            4           scalar   ARG,IN           1918,1934,1935,1936               
 JST                        Dummy  1888     I(4)            4           scalar   ARG,IN           1918,1934,1935,1936               
 LAT                        Dummy  1888     R(8)            8     1     1        ARG,IN           1913                              
 LAT_2D                     Local  1901     R(8)            8     2     0        TGT              1913,1918                         
 RRSUN                      Local  1903     R(8)            8           scalar                    1919,1925,1937                    
 RRSUN_OUT                  Dummy  1889     R(8)            8           scalar   ARG,OUT          1925                              
 SOLAR                      Dummy  1888     R(8)            8     1     1        ARG,OUT          1926,1935                         
 SOLAR_2D                   Local  1901     R(8)            8     2     0        TGT              1919,1926                         

Page 67          Source Listing                  ANNUAL_MEAN_SOLAR_1D
2021-06-01 08:55                                 astronomy.F90

   1941 
   1942 
   1943 !> \brief annual_mean_solar_2level creates 2-d input fields from 1-d input fields
   1944 !!        and then calls annual_mean_solar_2d to obtain 2-d output fields which are
   1945 !!        then stored into 1-d fields for return to the calling subroutine. This
   1946 !!        subroutine will be called during model initialization.
   1947 !!
   1948 !! \throw FATAL, "astronomy_mod annual_mean_solar_2level should be called only once"
   1949 subroutine annual_mean_solar_2level (lat, cosz, solar)
   1950 
   1951 !---------------------------------------------------------------------
   1952 real, dimension(:), intent(in)     :: lat !< Latitudes of model grid points
   1953 real, dimension(:), intent(out)    :: cosz !< Cosine of solar zenith angle
   1954 real, dimension(:), intent(out)    :: solar !< shortwave flux factor: cosine of zenith angle *
   1955 !! daylight fraction / (earth-sun distance squared)
   1956 !---------------------------------------------------------------------
   1957 
   1958 !---------------------------------------------------------------------
   1959 !  local variables
   1960 
   1961       real, dimension(size(lat),1) :: lat_2d, solar_2d, cosz_2d,   &
   1962                                       fracday_2d
   1963       integer :: jst, jnd
   1964       real    :: rrsun
   1965 
   1966 !--------------------------------------------------------------------
   1967 !    if the calculation has not been done, do it here.
   1968 !--------------------------------------------------------------------
   1969       if ( .not. annual_mean_calculated) then
   1970 
   1971 !--------------------------------------------------------------------
   1972 !>    define 2-d versions of input data array.
   1973 !--------------------------------------------------------------------
   1974         lat_2d(:,1) = lat
   1975         jst = 1
   1976         jnd = size(lat(:))
   1977 
   1978 !--------------------------------------------------------------------
   1979 !>    call annual_mean_solar_2d to calculate the astronomy fields.
   1980 !--------------------------------------------------------------------
   1981         call annual_mean_solar_2d (jst, jnd, lat_2d, cosz_2d,   &
   1982                                    solar_2d, fracday_2d, rrsun)
   1983 
   1984 !-------------------------------------------------------------------
   1985 !>    place output fields into 1-D arrays for return to calling routine.
   1986 !-------------------------------------------------------------------
   1987         solar = solar_2d(:,1)
   1988         cosz  =  cosz_2d(:,1)
   1989 
   1990 !--------------------------------------------------------------------
   1991 !>    if the calculation has been done, print an error message since
   1992 !!    this subroutine should be called only once.
   1993 !--------------------------------------------------------------------
   1994       else
   1995         call error_mesg ('astronomy_mod', &
   1996             'annual_mean_solar_2level should be called only once', &
   1997                                                                  FATAL)

Page 68          Source Listing                  ANNUAL_MEAN_SOLAR_2LEVEL
2021-06-01 08:55                                 astronomy.F90

   1998       endif
   1999       annual_mean_calculated = .true.
   2000 
   2001 end subroutine annual_mean_solar_2level


ENTRY POINTS

  Name                                                  
                                                        
 astronomy_mod_mp_annual_mean_solar_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANNUAL_MEAN_SOLAR_2LEVEL   Subr   1949                                          PRIV                                               
 COSZ                       Dummy  1949     R(8)            8     1     1        ARG,OUT          1988                              
 COSZ_2D                    Local  1961     R(8)            8     2     0        TGT              1981,1988                         
 FRACDAY_2D                 Local  1962     R(8)            8     2     0        TGT              1982                              
 JND                        Local  1963     I(4)            4           scalar                    1976,1981                         
 JST                        Local  1963     I(4)            4           scalar                    1975,1981                         
 LAT                        Dummy  1949     R(8)            8     1     1        ARG,IN           1974,1976                         
 LAT_2D                     Local  1961     R(8)            8     2     0        TGT              1974,1981                         
 RRSUN                      Local  1964     R(8)            8           scalar                    1982                              
 SIZE                       Func   1976                                 scalar                    1976                              
 SOLAR                      Dummy  1949     R(8)            8     1     1        ARG,OUT          1987                              
 SOLAR_2D                   Local  1961     R(8)            8     2     0        TGT              1982,1987                         

Page 69          Source Listing                  ANNUAL_MEAN_SOLAR_2LEVEL
2021-06-01 08:55                                 astronomy.F90

   2002 
   2003 
   2004 !> \brief astronomy_end is the destructor for astronomy_mod.
   2005 subroutine astronomy_end
   2006 
   2007 !----------------------------------------------------------------------
   2008 !>    check if the module has been initialized.
   2009 !----------------------------------------------------------------------
   2010       if (.not. module_is_initialized)  return
   2011 !                call error_mesg ( 'astronomy_mod',  &
   2012 !                         ' module has not been initialized', FATAL)
   2013 
   2014 !----------------------------------------------------------------------
   2015 !>    deallocate module variables.
   2016 !----------------------------------------------------------------------
   2017       deallocate (orb_angle)
   2018       if (allocated(cosz_ann) ) then
   2019         deallocate (cosz_ann)
   2020         deallocate (fracday_ann)
   2021         deallocate (solar_ann)
   2022       endif
   2023 
   2024 !----------------------------------------------------------------------
   2025 !>    mark the module as uninitialized.
   2026 !----------------------------------------------------------------------
   2027       module_is_initialized = .false.
   2028 
   2029 end subroutine astronomy_end

Page 70          Source Listing                  ASTRONOMY_END
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                       
                                             
 astronomy_mod_mp_astronomy_end_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   2018                                 scalar                    2018                              
 ASTRONOMY_END              Subr   2005                                                                                             

Page 71          Source Listing                  ASTRONOMY_END
2021-06-01 08:55                                 astronomy.F90

   2030 
   2031 
   2032 !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   2033 !
   2034 !                    PRIVATE SUBROUTINES
   2035 !
   2036 !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   2037 
   2038 !> \brief Orbit computes and stores a table of value of orbital angles as a
   2039 !!        function of orbital time (both the angle and time are zero at
   2040 !!        autumnal equinox in the NH, and range from 0 to 2*pi).
   2041 subroutine orbit
   2042 
   2043 !---------------------------------------------------------------------
   2044 !   local variables
   2045 
   2046       integer :: n
   2047       real    :: d1, d2, d3, d4, d5, dt, norm
   2048 
   2049 !--------------------------------------------------------------------
   2050 !>    allocate the orbital angle array, sized by the namelist parameter
   2051 !!    num_angles, defining the annual cycle resolution of the earth's
   2052 !!    orbit. define some constants to be used.
   2053 !--------------------------------------------------------------------
   2054 ! wfc moving to astronomy_init
   2055 !     allocate ( orb_angle(0:num_angles) )
   2056       orb_angle(0) = 0.0
   2057       dt = twopi/float(num_angles)
   2058       norm = sqrt(1.0 - ecc**2)
   2059       dt = dt*norm
   2060 
   2061 !---------------------------------------------------------------------
   2062 !>    define the orbital angle at each of the num_angles locations in
   2063 !!    the orbit.
   2064 !---------------------------------------------------------------------
   2065       do n = 1, num_angles
   2066         d1 = dt*r_inv_squared(orb_angle(n-1))
   2067         d2 = dt*r_inv_squared(orb_angle(n-1)+0.5*d1)
   2068         d3 = dt*r_inv_squared(orb_angle(n-1)+0.5*d2)
   2069         d4 = dt*r_inv_squared(orb_angle(n-1)+d3)
   2070         d5 = d1/6.0 + d2/3.0 +d3/3.0 +d4/6.0
   2071         orb_angle(n) = orb_angle(n-1) + d5
   2072       end do
   2073 
   2074 end subroutine orbit

Page 72          Source Listing                  ORBIT
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                               
                                     
 astronomy_mod_mp_orbit_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D1                         Local  2047     R(8)            8           scalar                    2066,2067,2070                    
 D2                         Local  2047     R(8)            8           scalar                    2067,2068,2070                    
 D3                         Local  2047     R(8)            8           scalar                    2068,2069,2070                    
 D4                         Local  2047     R(8)            8           scalar                    2069,2070                         
 D5                         Local  2047     R(8)            8           scalar                    2070,2071                         
 DT                         Local  2047     R(8)            8           scalar                    2057,2059,2066,2067,2068,2069     
 FLOAT                      Func   2057                                 scalar                    2057                              
 N                          Local  2046     I(4)            4           scalar                    2065,2066,2067,2068,2069,2071     
 NORM                       Local  2047     R(8)            8           scalar                    2058,2059                         
 ORBIT                      Subr   2041                                                                                             
 SQRT                       Func   2058                                 scalar                    2058                              

Page 73          Source Listing                  ORBIT
2021-06-01 08:55                                 astronomy.F90

   2075 
   2076 
   2077 !> \brief r_inv_squared returns the inverse of the square of the earth-sun
   2078 !!        distance relative to the mean distance at angle ang in the Earth's orbit.
   2079 function r_inv_squared (ang)
   2080 
   2081 !--------------------------------------------------------------------
   2082 real, intent(in) :: ang !< angular position of earth in its orbit, relative to a
   2083 !! value of 0.0 at the NH autumnal equinox, value between
   2084 !! 0.0 and 2 * pi [radians]
   2085 !--------------------------------------------------------------------
   2086 
   2087 !---------------------------------------------------------------------
   2088 !  local variables
   2089 
   2090 real :: r_inv_squared !< The inverse of the square of the earth-sun distance relative
   2091 !! to the mean distance [dimensionless]
   2092 real :: r             !< Earth-Sun distance relative to mean distance [dimensionless]
   2093 real :: rad_per       !< Angular position of perihelion [radians]
   2094 
   2095 !--------------------------------------------------------------------
   2096 !>    define the earth-sun distance (r) and then return the inverse of
   2097 !!    its square (r_inv_squared) to the calling routine.
   2098 !--------------------------------------------------------------------
   2099       rad_per       = per*deg_to_rad
   2100       r             = (1. - ecc**2)/(1. + ecc*cos(ang - rad_per))
   2101       r_inv_squared = r**(-2)
   2102 
   2103 
   2104 end function r_inv_squared

Page 74          Source Listing                  R_INV_SQUARED
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                       
                                             
 astronomy_mod_mp_r_inv_squared_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANG                        Dummy  2079     R(8)            8           scalar   ARG,IN           2100                              
 COS                        Func   2100                                 scalar                    2100                              
 R                          Local  2092     R(8)            8           scalar                    2100,2101                         
 RAD_PER                    Local  2093     R(8)            8           scalar                    2099,2100                         
 R_INV_SQUARED              Func   2079     R(8)            8           scalar                                                      

Page 75          Source Listing                  R_INV_SQUARED
2021-06-01 08:55                                 astronomy.F90

   2105 
   2106 
   2107 !> \brief angle determines the position within the earth's orbit at time t
   2108 !!        in the year (t = 0 at NH autumnal equinox) by interpolating
   2109 !!        into the orbital position table.
   2110 function angle (t)
   2111 
   2112 !--------------------------------------------------------------------
   2113 real, intent(in) :: t !< time of year (between 0 and 2*pi; t=0 at NH autumnal equinox
   2114 !--------------------------------------------------------------------
   2115 
   2116 !--------------------------------------------------------------------
   2117 !   local variables
   2118 !--------------------------------------------------------------------
   2119       real :: angle !< Orbital position relative to NH autumnal equinox [radians]
   2120       real :: norm_time !< Index into orbital table corresponding to input time [dimensionless]
   2121       real :: x !< Fractional distance between the orbital table entries bracketing the input time [dimensionless]
   2122       integer :: int !< Table index which is lower than actual position, but closest to it [dimensionless]
   2123       integer :: int_1 !< Next table index just larger than actual orbital position [dimensionless]
   2124 
   2125 !--------------------------------------------------------------------
   2126 !>    Define orbital tables indices bracketing current orbital time
   2127 !!    (int and int_1). Define table index distance between the lower
   2128 !!    table value (int) and the actual orbital time (x). Define orbital
   2129 !!    position as being x of the way between int and int_1. Renormalize
   2130 !!    angle to be within the range 0 to 2*pi.
   2131 !--------------------------------------------------------------------
   2132       norm_time = t*float(num_angles)/twopi
   2133       int = floor(norm_time)
   2134       int = modulo(int,num_angles)
   2135       int_1 = int+1
   2136       x = norm_time - floor(norm_time)
   2137       angle = (1.0 -x)*orb_angle(int) + x*orb_angle(int_1)
   2138       angle = modulo(angle, twopi)
   2139 
   2140 end function angle

Page 76          Source Listing                  ANGLE
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                               
                                     
 astronomy_mod_mp_angle_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANGLE                      Func   2110     R(8)            8           scalar                                                      
 FLOAT                      Func   2132                                 scalar                    2132                              
 FLOOR                      Func   2133                                 scalar                    2133,2136                         
 INT                        Local  2122     I(4)            4           scalar                    2133,2134,2135,2137               
 INT_1                      Local  2123     I(4)            4           scalar                    2135,2137                         
 MODULO                     Func   2134                                 scalar                    2134,2138                         
 NORM_TIME                  Local  2120     R(8)            8           scalar                    2132,2133,2136                    
 T                          Dummy  2110     R(8)            8           scalar   ARG,IN           2132                              
 X                          Local  2121     R(8)            8           scalar                    2136,2137                         

Page 77          Source Listing                  ANGLE
2021-06-01 08:55                                 astronomy.F90

   2141 
   2142 
   2143 !> \brief Declination returns the solar declination angle at orbital
   2144 !!        position ang in earth's orbit.
   2145 function declination (ang)
   2146 
   2147 !--------------------------------------------------------------------
   2148 real, intent(in) :: ang !< solar orbital position ang in earth's orbit
   2149 !--------------------------------------------------------------------
   2150 
   2151 !--------------------------------------------------------------------
   2152 !   local variables
   2153 
   2154       real :: declination !< Solar declination angle [radians]
   2155       real :: rad_obliq !< Obliquity of the ecliptic [radians]
   2156       real :: sin_dec !< Sine of the solar declination [dimensionless]
   2157 
   2158 !---------------------------------------------------------------------
   2159 !    compute the solar declination.
   2160 !---------------------------------------------------------------------
   2161       rad_obliq   =   obliq*deg_to_rad
   2162       sin_dec     = - sin(rad_obliq)*sin(ang)
   2163       declination =   asin(sin_dec)
   2164 
   2165 end function declination


ENTRY POINTS

  Name                                     
                                           
 astronomy_mod_mp_declination_             

Page 78          Source Listing                  DECLINATION
2021-06-01 08:55 Symbol Table                    astronomy.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANG                        Dummy  2145     R(8)            8           scalar   ARG,IN           2162                              
 ASIN                       Func   2163                                 scalar                    2163                              
 DECLINATION                Func   2145     R(8)            8           scalar                                                      
 RAD_OBLIQ                  Local  2155     R(8)            8           scalar                    2161,2162                         
 SIN                        Func   2162                                 scalar                    2162                              
 SIN_DEC                    Local  2156     R(8)            8           scalar                    2162,2163                         

Page 79          Source Listing                  DECLINATION
2021-06-01 08:55                                 astronomy.F90

   2166 
   2167 
   2168 !> \brief half_day_2d returns a 2-d array of half-day lengths at the
   2169 !!        latitudes and declination provided.
   2170 !!
   2171 function half_day_2d (latitude, dec) result(h)
   2172 
   2173 !---------------------------------------------------------------------
   2174 real, dimension(:,:), intent(in)                     :: latitude !< Latitutde of view point
   2175 real,                 intent(in)                     :: dec !< Solar declination angle at view point
   2176 real, dimension(size(latitude,1),size(latitude,2))   :: h
   2177 !---------------------------------------------------------------------
   2178 
   2179 !---------------------------------------------------------------------
   2180 !   local variables
   2181 !---------------------------------------------------------------------
   2182       real, dimension (size(latitude,1),size(latitude,2)):: &
   2183                                                   cos_half_day, & !< Cosine of half-day length [dimensionless]
   2184                                                                                                   lat !< Model latitude, adj
   2184 usted so that it is never 0.5*pi or -0.5*pi
   2185       real :: tan_dec !< tangent of solar declination [dimensionless]
   2186       real :: eps = 1.0E-05 !< small increment
   2187 
   2188 !--------------------------------------------------------------------
   2189 !>    define tangent of the declination.
   2190 !--------------------------------------------------------------------
   2191       tan_dec = tan(dec)
   2192 
   2193 !--------------------------------------------------------------------
   2194 !>    adjust latitude so that its tangent will be defined.
   2195 !--------------------------------------------------------------------
   2196       lat = latitude
   2197       where (latitude ==  0.5*PI) lat= latitude - eps
   2198       where (latitude == -0.5*PI) lat= latitude + eps
   2199 
   2200 !--------------------------------------------------------------------
   2201 !>    define the cosine of the half-day length. adjust for cases of
   2202 !!    all daylight or all night.
   2203 !--------------------------------------------------------------------
   2204       cos_half_day = -tan(lat)*tan_dec
   2205       where (cos_half_day <= -1.0)  h = PI
   2206       where (cos_half_day >= +1.0)  h = 0.0
   2207       where(cos_half_day > -1.0 .and. cos_half_day < 1.0) &
   2208                                                h = acos(cos_half_day)
   2209 
   2210 end function half_day_2d

Page 80          Source Listing                  HALF_DAY_2D
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                     
                                           
 astronomy_mod_mp_half_day_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACOS                       Func   2208                                 scalar                    2208                              
 COS_HALF_DAY               Local  2183     R(8)            8     2     0                         2204,2205,2206,2207,2208          
 DEC                        Dummy  2171     R(8)            8           scalar   ARG,IN           2191                              
 EPS                        Local  2186     R(8)            8           scalar                    2186,2197,2198                    
 H                          Local  2176     R(8)            8     2     0                         2205,2206,2208                    
 HALF_DAY_2D                Func   2171     R(8)            8     2     0                         939,1451,2237                     
 LAT                        Local  2184     R(8)            8     2     0                         2196,2197,2198,2204               
 LATITUDE                   Dummy  2171     R(8)            8     2     1        ARG,IN           2176,2196,2197,2198               
 SIZE                       Func   2176                                 scalar                    2176                              
 TAN                        Func   2191                                 scalar                    2191,2204                         
 TAN_DEC                    Local  2185     R(8)            8           scalar                    2191,2204                         

Page 81          Source Listing                  HALF_DAY_2D
2021-06-01 08:55                                 astronomy.F90

   2211 
   2212 
   2213 !> \brief half_day_0d takes scalar input fields, makes them into 2-d fields
   2214 !!        dimensioned (1,1), and calls half_day_2d. On return, the 2-d
   2215 !!        fields are converted to the desired scalar output.
   2216 !!
   2217 !! \param [in] <latitude> Latitutde of view point
   2218 !! \param [in] <dec> Solar declination angle at view point
   2219 function half_day_0d(latitude, dec) result(h)
   2220 
   2221 real, intent(in) :: latitude, dec
   2222 real             :: h
   2223 
   2224 !----------------------------------------------------------------------
   2225 !  local variables
   2226 !----------------------------------------------------------------------
   2227       real, dimension(1,1) :: lat_2d, h_2d
   2228 
   2229 !---------------------------------------------------------------------
   2230 !    create 2d array from the input latitude field.
   2231 !---------------------------------------------------------------------
   2232       lat_2d = latitude
   2233 
   2234 !---------------------------------------------------------------------
   2235 !    call half_day with the 2d arguments to calculate half-day length.
   2236 !---------------------------------------------------------------------
   2237       h_2d = half_day (lat_2d, dec)
   2238 
   2239 !---------------------------------------------------------------------
   2240 !    create scalar from 2d array.
   2241 !---------------------------------------------------------------------
   2242       h = h_2d(1,1)
   2243 
   2244 end function half_day_0d

Page 82          Source Listing                  HALF_DAY_0D
2021-06-01 08:55 Entry Points                    astronomy.F90



ENTRY POINTS

  Name                                     
                                           
 astronomy_mod_mp_half_day_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DEC                        Dummy  2219     R(8)            8           scalar   ARG,IN           2237                              
 H                          Local  2222     R(8)            8           scalar                    2242                              
 HALF_DAY_0D                Func   2219     R(8)            8           scalar                                                      
 H_2D                       Local  2227     R(8)            8     2     1                         2237,2242                         
 LATITUDE                   Dummy  2219     R(8)            8           scalar   ARG,IN           2232                              
 LAT_2D                     Local  2227     R(8)            8     2     1        TGT              2232,2237                         

Page 83          Source Listing                  HALF_DAY_0D
2021-06-01 08:55                                 astronomy.F90

   2245 
   2246 
   2247 !> \brief Orbital time returns the time (1 year = 2*pi) since autumnal
   2248 !!        equinox
   2249 !!
   2250 !! \details Orbital time returns the time (1 year = 2*pi) since autumnal
   2251 !!          equinox; autumnal_eq_ref is a module variable of time_type and
   2252 !!          will have been defined by default or by a call to
   2253 !!          set_ref_date_of_ae; length_of_year is available through the time
   2254 !!          manager and is set at the value approriate for the calandar being used
   2255 function orbital_time(time) result(t)
   2256 
   2257 type(time_type), intent(in) :: time !< time (1 year = 2*pi) since autumnal equinox
   2258 real                        :: t
   2259 
   2260       t = real ( (time - autumnal_eq_ref)//period_time_type)
   2261       t = twopi*(t - floor(t))
   2262       if (time < autumnal_eq_ref) t = twopi - t
   2263 
   2264 
   2265 end function orbital_time


ENTRY POINTS

  Name                                      
                                            
 astronomy_mod_mp_orbital_time_             

Page 84          Source Listing                  ORBITAL_TIME
2021-06-01 08:55 Symbol Table                    astronomy.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FLOOR                      Func   2261                                 scalar                    2261                              
 ORBITAL_TIME               Func   2255     R(8)            8           scalar                                                      
 REAL                       Func   2260                                 scalar                    2260                              
 T                          Local  2258     R(8)            8           scalar                    2260,2261,2262                    
 TIME                       Dummy  2255     TIME_TYPE       16          scalar   ARG,IN           2260,2262                         
 TIME_LT                    Func   2262     L(4)            4           scalar   PRIV             2262                              
 TIME_MINUS                 Func   2260     RECORD          16          scalar   PRIV             2260                              
 TIME_REAL_DIVIDE           Func   2260     R(8)            8           scalar   PRIV             2260                              

Page 85          Source Listing                  ORBITAL_TIME
2021-06-01 08:55                                 astronomy.F90

   2266 
   2267 
   2268 !> \brief universal_time returns the time of day at longitude = 0.0
   2269 !!        (1 day = 2*pi)
   2270 function universal_time(time) result(t)
   2271 
   2272 type(time_type), intent(in) :: time !< Time (1 year = 2*pi) since autumnal equinox
   2273 real                        :: t
   2274 
   2275 !--------------------------------------------------------------------
   2276 !   local variables
   2277 !--------------------------------------------------------------------
   2278       integer ::  seconds, days
   2279 
   2280       call get_time (time, seconds, days)
   2281       t = twopi*real(seconds)/seconds_per_day
   2282 
   2283 end function universal_time


ENTRY POINTS

  Name                                        
                                              
 astronomy_mod_mp_universal_time_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS                       Local  2278     I(4)            4           scalar                    2280                              
 REAL                       Func   2281                                 scalar                    2281                              
 SECONDS                    Local  2278     I(4)            4           scalar                    2280,2281                         
 T                          Local  2273     R(8)            8           scalar                    2281                              
 TIME                       Dummy  2270     TIME_TYPE       16          scalar   ARG,IN           2280                              
 UNIVERSAL_TIME             Func   2270     R(8)            8           scalar                                                      

Page 86          Source Listing                  UNIVERSAL_TIME
2021-06-01 08:55                                 astronomy.F90

   2284 
   2285 
   2286                    end module astronomy_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANNUAL_MEAN_SOLAR          Local  290                                  scalar                    120                               
 ASTRONOMY_END              Subr   121                                                            121                               
 ASTRONOMY_INIT             Subr   117                                                            117                               
 ASTRONOMY_MOD              Module 59                                                                                               
 CONSTANTS_MOD              Module 73                                                             73                                
 DIURNAL_SOLAR              Local  189                                  scalar                    120                               
 FMS_MOD                    Module 62                                                             62                                
 GET_DATE_JULIAN            Subr   68                                            PRIV             68                                
 GET_ORBITAL_PARAMETERS     Subr   118                                                            118                               
 GET_PERIOD                 Local  311                                  scalar                    117                               
 GET_REF_DATE_OF_AE         Subr   119                                                            119                               
 MPP_MOD                    Module 74                                                             74                                
 NOTE                       Param  66       I(4)            4           scalar   PRIV             66                                
 Operator (-)                      71                                                                                               
 SET_DATE_JULIAN            Func   68       RECORD          16          scalar   PRIV             68                                
 SET_ORBITAL_PARAMETERS     Subr   118                                                            118                               
 SET_PERIOD                 Local  330                                  scalar                    117                               
 SET_REF_DATE_OF_AE         Subr   119                                                            119                               
 TIME_MANAGER_MOD           Module 67                                                             67                                
 WARNING                    Param  66       I(4)            4           scalar   PRIV             66                                

Page 87          Source Listing                  UNIVERSAL_TIME
2021-06-01 08:55 Subprograms/Common Blocks       astronomy.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANGLE                      Func   2110     R(8)            8           scalar                                                      
 ANNUAL_MEAN_SOLAR_1D       Subr   1888                                          PRIV                                               
 ANNUAL_MEAN_SOLAR_2D       Subr   1781                                          PRIV             1918,1981                         
 ANNUAL_MEAN_SOLAR_2LEVEL   Subr   1949                                          PRIV                                               
 ASTRONOMY_END              Subr   2005                                                                                             
 ASTRONOMY_INIT             Subr   448                                                                                              
 ASTRONOMY_MOD              Module 59                                                                                               
 DAILY_MEAN_SOLAR_0D        Subr   1569                                          PRIV                                               
 DAILY_MEAN_SOLAR_1D        Subr   1480                                          PRIV                                               
 DAILY_MEAN_SOLAR_2D        Subr   1422                                          PRIV             1503,1546,1587,1635,1812          
 DAILY_MEAN_SOLAR_2LEVEL    Subr   1524                                          PRIV                                               
 DAILY_MEAN_SOLAR_CAL_0D    Subr   1736                                          PRIV                                               
 DAILY_MEAN_SOLAR_CAL_1D    Subr   1650                                          PRIV                                               
 DAILY_MEAN_SOLAR_CAL_2D    Subr   1610                                          PRIV             1672,1715,1758                    
 DAILY_MEAN_SOLAR_CAL_2LEVE                                                                                                         
 L                          Subr   1693                                          PRIV                                               
 DECLINATION                Func   2145     R(8)            8           scalar                                                      
 DIURNAL_SOLAR_0D           Subr   1144                                          PRIV                                               
 DIURNAL_SOLAR_1D           Subr   1078                                          PRIV                                               
 DIURNAL_SOLAR_2D           Subr   855                                           PRIV             1107,1169,1261,1266               
 DIURNAL_SOLAR_CAL_0D       Subr   1358                                          PRIV                                               
 DIURNAL_SOLAR_CAL_1D       Subr   1290                                          PRIV                                               
 DIURNAL_SOLAR_CAL_2D       Subr   1208                                          PRIV             1321,1326,1387,1392               
 GET_ORBITAL_PARAMETERS     Subr   708                                                                                              
 GET_PERIOD_INTEGER         Subr   556                                           PRIV                                               
 GET_PERIOD_TIME_TYPE       Subr   585                                           PRIV                                               
 GET_REF_DATE_OF_AE         Subr   809                                                                                              
 HALF_DAY_0D                Func   2219     R(8)            8           scalar                                                      
 HALF_DAY_2D                Func   2171     R(8)            8     2     0                         939,1451,2237                     
 ORBIT                      Subr   2041                                                                                             
 ORBITAL_TIME               Func   2255     R(8)            8           scalar                                                      
 R_INV_SQUARED              Func   2079     R(8)            8           scalar                                                      
 SET_ORBITAL_PARAMETERS     Subr   659                                                                                              
 SET_PERIOD_INTEGER         Subr   607                                           PRIV                                               
 SET_PERIOD_TIME_TYPE       Subr   631                                           PRIV                                               
 SET_REF_DATE_OF_AE         Subr   758                                                                                              
 UNIVERSAL_TIME             Func   2270     R(8)            8           scalar                                                      

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam

Page 88          Source Listing                  UNIVERSAL_TIME
2021-06-01 08:55                                 astronomy.F90

       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines

Page 89          Source Listing                  UNIVERSAL_TIME
2021-06-01 08:55                                 astronomy.F90

  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,

Page 90          Source Listing                  UNIVERSAL_TIME
2021-06-01 08:55                                 astronomy.F90

           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : astronomy.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
