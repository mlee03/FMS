Page 1           Source Listing                  GRID_INIT
2021-06-01 08:53                                 /tmp/ifortLfakRx.i90

      1 # 1 "grid2.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 module grid2_mod
     21 
     22 use mpp_mod, only : mpp_root_pe, mpp_error, uppercase, lowercase, FATAL, NOTE
     23 use constants_mod, only : PI, radius
     24 use fms2_io_mod, only : get_global_attribute, read_data, global_att_exists, &
     25                         variable_exists, file_exists,  open_file, close_file, get_variable_size, &
     26                         FmsNetcdfFile_t, string => string2
     27 use mosaic2_mod, only : get_mosaic_ntiles, get_mosaic_xgrid_size, get_mosaic_grid_sizes, &
     28      get_mosaic_xgrid, calc_mosaic_grid_area, calc_mosaic_grid_great_circle_area
     29 
     30 ! the following two use statement are only needed for define_cube_mosaic
     31 use mpp_domains_mod, only : domain2d, mpp_define_mosaic, mpp_get_compute_domain, &
     32                             mpp_get_global_domain, domainUG, mpp_pass_SG_to_UG
     33 use mosaic2_mod, only : get_mosaic_ncontacts, get_mosaic_contact
     34 
     35 implicit none;private
     36 
     37 ! ==== public interfaces =====================================================
     38 ! grid dimension inquiry subroutines
     39 public :: get_great_circle_algorithm ! returns great_circle_algorithm
     40 public :: get_grid_ntiles ! returns number of tiles
     41 public :: get_grid_size   ! returns horizontal sizes of the grid
     42 ! grid geometry inquiry subroutines
     43 public :: get_grid_cell_centers
     44 public :: get_grid_cell_vertices
     45 ! grid area inquiry subroutines
     46 public :: get_grid_cell_area
     47 public :: get_grid_comp_area
     48 ! decompose cubed sphere domains -- probably does not belong here, but it should
     49 ! be in some place available for component models
     50 public :: define_cube_mosaic
     51 public :: grid_init
     52 public :: grid_end
     53 ! ==== end of public interfaces ==============================================
     54 
     55 interface get_grid_size
     56    module procedure get_grid_size_for_all_tiles
     57    module procedure get_grid_size_for_one_tile

Page 2           Source Listing                  GRID_INIT
2021-06-01 08:53                                 grid2.F90

     58 end interface
     59 
     60 interface get_grid_cell_vertices
     61    module procedure get_grid_cell_vertices_1D
     62    module procedure get_grid_cell_vertices_2D
     63    module procedure get_grid_cell_vertices_UG
     64 end interface
     65 
     66 interface get_grid_cell_centers
     67    module procedure get_grid_cell_centers_1D
     68    module procedure get_grid_cell_centers_2D
     69    module procedure get_grid_cell_centers_UG
     70 end interface
     71 
     72 interface get_grid_cell_area
     73    module procedure get_grid_cell_area_SG
     74    module procedure get_grid_cell_area_UG
     75 end interface get_grid_cell_area
     76 
     77 interface get_grid_comp_area
     78    module procedure get_grid_comp_area_SG
     79    module procedure get_grid_comp_area_UG
     80 end interface get_grid_comp_area
     81 
     82 ! ==== module constants ======================================================
     83 character(len=*), parameter :: &
     84      module_name = 'grid2_mod'
     85 
     86 ! Include variable "version" to be written to log file.
     87 # 1 "../include/file_version.h" 1 
     88 ! -*-f90-*-
     89 !***********************************************************************
     90 !*                   GNU Lesser General Public License
     91 !*
     92 !* This file is part of the GFDL Flexible Modeling System (FMS).
     93 !*
     94 !* FMS is free software: you can redistribute it and/or modify it under
     95 !* the terms of the GNU Lesser General Public License as published by
     96 !* the Free Software Foundation, either version 3 of the License, or (at
     97 !* your option) any later version.
     98 !*
     99 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    100 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    101 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    102 !* for more details.
    103 !*
    104 !* You should have received a copy of the GNU Lesser General Public
    105 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    106 !***********************************************************************
    107 
    108 # 23
    109 
    110   character(len=*), parameter :: version = 'unknown'
    111 
    112 # 87 "grid2.F90" 2 
    113 
    114 character(len=*), parameter :: &

Page 3           Source Listing                  GRID_INIT
2021-06-01 08:53                                 grid2.F90

    115      grid_dir  = 'INPUT/',     &      ! root directory for all grid files
    116      grid_file = 'INPUT/grid_spec.nc' ! name of the grid spec file
    117 
    118 integer, parameter :: &
    119      MAX_NAME = 256,  & ! max length of the variable names
    120      MAX_FILE = 1024, & ! max length of the file names
    121      VERSION_0 = 0,   &
    122      VERSION_1 = 1,   &
    123      VERSION_2 = 2,   &
    124      VERSION_3 = 3
    125 
    126 integer, parameter :: BUFSIZE = 1048576  ! This is used to control memory usage in get_grid_comp_area
    127 ! We may change this to a namelist variable is needed.
    128 
    129 ! ==== module variables ======================================================
    130 integer :: grid_version = -1
    131 logical :: great_circle_algorithm = .FALSE.
    132 logical :: module_is_initialized = .FALSE.
    133 logical :: grid_spec_exists = .TRUE.
    134 type(FmsNetcdfFile_t) :: gridfileobj
    135 type(FmsNetcdfFile_t), dimension(3) :: mosaic_fileobj
    136 
    137 contains
    138 
    139 !> @brief Initialize the grid2 module
    140 subroutine grid_init
    141    if (module_is_initialized) return
    142    if (.not. file_exists(grid_file)) then
    143        module_is_initialized = .TRUE.
    144        grid_spec_exists = .FALSE.
    145        return
    146    endif
    147    call open_grid_file(gridfileobj, grid_file)
    148    great_circle_algorithm = get_great_circle_algorithm()
    149    grid_version = get_grid_version(gridfileobj)
    150    if (grid_version == VERSION_2) call open_component_mosaics
    151    if (grid_version == VERSION_3) call assign_component_mosaics
    152    module_is_initialized = .TRUE.
    153 end subroutine grid_init

Page 4           Source Listing                  GRID_INIT
2021-06-01 08:53 Entry Points                    grid2.F90



ENTRY POINTS

  Name                               
                                     
 grid2_mod_mp_grid_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILE_EXISTS                Func   142      L(4)            4           scalar   PRIV             25,142                            
 GET_GREAT_CIRCLE_ALGORITHM Func   148      L(4)            4           scalar                    39,148,169,173                    
 GET_GREAT_CIRCLE_ALGORITHM                                                                                                         
 @0                         Local  148      L(4)            4           scalar                                                      
 GET_GRID_VERSION@0         Local  149      I(4)            4           scalar                                                      
 GREAT_CIRCLE_ALGORITHM     Local  148      L(4)            4           scalar                    131,148,362                       
 GRIDFILEOBJ                Local  147      FMSNETCDFFILE_T 872         scalar                    147,149,159,170,171,196,241,242,24
                                                                                                  3,248,249,250,255,256,257,301,345,
                                                                                                  347,406,409,410,414,427,431,451,47
                                                                                                  1,473,479,598,599,601,602,607,608,
                                                                                                  613,615,618,620,697,703,715,716,71
                                                                                                  8,719,727,733,743,744,864,865,867,
                                                                                                  868,873,874,876,877,948,954,962,96
                                                                                                  3,970,976,984,985                 
 GRID_FILE                  Param  142      CHAR            18          scalar                    142,147,176,234                   
 GRID_INIT                  Subr   140                                                                                              
 GRID_SPEC_EXISTS           Local  144      L(4)            4           scalar                    133,144,157                       
 GRID_VERSION               Local  149      I(4)            4           scalar                    130,149,150,151,158,223,280,299,34
                                                                                                  1,402,594,691,860,942             
 MODULE_IS_INITIALIZED      Local  141      L(4)            4           scalar                    132,141,143,152                   
 VERSION_2                  Param  150      I(4)            4           scalar                    150,158,229,283,303,354,419,627,75
                                                                                                  5,879,987                         
 VERSION_3                  Param  151      I(4)            4           scalar                    151,231,283,303,354,419,627,755,87
                                                                                                  9,987                             

Page 5           Source Listing                  GRID_INIT
2021-06-01 08:53                                 grid2.F90

    154 
    155 !> @brief Shutdown the grid2 module
    156 subroutine grid_end
    157    if (grid_spec_exists) then
    158        if (grid_version == VERSION_2) call close_component_mosaics
    159        call close_file(gridfileobj)
    160    endif
    161 end subroutine grid_end


ENTRY POINTS

  Name                              
                                    
 grid2_mod_mp_grid_end_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOSE_FILE                 Local  159                                  scalar   PRIV             25,159,255,256,257,468,520,645,793
                                                                                                  ,897,1026                         
 GRID_END                   Subr   156                                                                                              
 NETCDF_FILE_CLOSE_WRAP     Subr   159                                           PRIV             159,255,256,257,468,520,645,793,89
                                                                                                  7,1026                            

Page 6           Source Listing                  GRID_END
2021-06-01 08:53                                 grid2.F90

    162 
    163 !> @brief Determine if we are using the great circle algorithm
    164 !! @return Logical flag describing if we are using the great circlealgorithm
    165 function get_great_circle_algorithm()
    166    character(len=128)     :: attvalue
    167    logical :: get_great_circle_algorithm
    168 
    169    get_great_circle_algorithm = .false.
    170    if (global_att_exists(gridfileobj, "great_circle_algorithm")) then
    171       call get_global_attribute(gridfileobj, "great_circle_algorithm", attvalue)
    172       if(trim(attvalue) == "TRUE") then
    173          get_great_circle_algorithm = .true. 
    174       else if(trim(attvalue) .NE. "FALSE") then
    175          call mpp_error(FATAL, module_name//'/get_great_circle_algorithm value of global attribute "great_circle_algorthm" i
    175 n file'// &
    176                    trim(grid_file)//' should be TRUE or FALSE')
    177       endif
    178    endif
    179 end function get_great_circle_algorithm


ENTRY POINTS

  Name                                                
                                                      
 grid2_mod_mp_get_great_circle_algorithm_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTVALUE                   Local  166      CHAR            128         scalar                    171,172,174                       
 FATAL                      Param  175      I(4)            4           scalar   PRIV             22,175,186,233,325,349,416,434,447
                                                                                                  ,464,523,584,587,590,681,684,687,8
                                                                                                  50,853,856,932,935,938            
 GET_GLOBAL_ATTRIBUTE       Local  171                                  scalar   PRIV             24,171,459                        
 GET_GLOBAL_ATTRIBUTE_0D    Subr   171                                           PRIV             171,459                           
 GET_GREAT_CIRCLE_ALGORITHM Func   165      L(4)            4           scalar                                                      
 GLOBAL_ATT_EXISTS          Func   170      L(4)            4           scalar   PRIV             24,170,458                        
 MODULE_NAME                Param  175      CHAR            9           scalar                    175,233,349,416,434,447,464,584,58
                                                                                                  7,590,674,681,684,687,850,853,856,
                                                                                                  925,932,935,938                   
 MPP_ERROR                  Local  175                                  scalar   PRIV             22,175,186,233,325,349,416,434,447
                                                                                                  ,464,523,584,587,590,674,681,684,6
                                                                                                  87,850,853,856,925,932,935,938    
 MPP_ERROR_BASIC            Subr   175                                           PRIV             175,186,233,325,349,416,434,447,46
                                                                                                  4,523,584,587,590,674,681,684,687,
                                                                                                  850,853,856,925,932,935,938       
 TRIM                       Func   172                                  scalar                    172,174,176                       

Page 7           Source Listing                  GET_GREAT_CIRCLE_ALGORITHM
2021-06-01 08:53                                 grid2.F90

    180 
    181 !> @brief Open a grid file
    182 subroutine open_grid_file(myfileobj, myfilename)
    183   type(FmsNetcdfFile_t), intent(out)  :: myfileobj !< File object of grid file
    184   character(len=*), intent(in) :: myfilename!< Name of the grid file
    185    if(.not. open_file(myfileobj, myfilename, 'read')) then
    186       call mpp_error(FATAL, 'grid2_mod(open_grid_file):Error in opening file '//trim(myfilename))
    187    endif
    188 end subroutine open_grid_file


ENTRY POINTS

  Name                                    
                                          
 grid2_mod_mp_open_grid_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FMSNETCDFFILE_T            Type   183                                  scalar   PRIV             26,134,135,183,192,203,220,400,580
                                                                                                  ,665,846,916                      
 MYFILENAME                 Dummy  182      CHAR                        scalar   ARG,IN           185,186                           
 MYFILEOBJ                  Dummy  182      FMSNETCDFFILE_T 872         scalar   ARG,OUT          185                               
 NETCDF_FILE_OPEN_WRAP      Func   185      L(4)            4           scalar   PRIV             185                               
 OPEN_FILE                  Local  185                                  scalar   PRIV             25,185                            
 OPEN_GRID_FILE             Subr   182                                                            147,197,457,480,630,758,882,990   
 TRIM                       Func   186                                  scalar                    186                               

Page 8           Source Listing                  OPEN_GRID_FILE
2021-06-01 08:53                                 grid2.F90

    189 
    190 !> @brief Open a mosaic file
    191 subroutine open_mosaic_file(mymosaicfileobj, component)
    192   type(FmsNetcdfFile_t), intent(out)  :: mymosaicfileobj !< File object returned
    193   character(len=3), intent(in)        :: component !< Component (atm, lnd, etc.)
    194 
    195   character(len=MAX_FILE) :: mosaicfilename
    196   call read_data(gridfileobj,trim(lowercase(component))//'_mosaic_file', mosaicfilename)
    197   call open_grid_file(mymosaicfileobj, grid_dir//trim(mosaicfilename))
    198 end subroutine open_mosaic_file


ENTRY POINTS

  Name                                      
                                            
 grid2_mod_mp_open_mosaic_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  191      CHAR            3           scalar   ARG,IN           196                               
 COMPRESSED_READ_0D         Subr   196                                           PRIV             196,427,431,451                   
 GRID_DIR                   Param  197      CHAR            6           scalar                    197,457,480,630,758,882,990       
 LOWERCASE                  Func   196      CHAR                        scalar   TGT,PRIV         22,196,265,598,599,607,608,697,703
                                                                                                  ,727,733,864,865,873,874,948,954,9
                                                                                                  70,976                            
 MAX_FILE                   Param  195      I(4)            4           scalar                    195,207,208,579,664,845,915       
 MOSAICFILENAME             Local  195      CHAR            1024        scalar                    196,197                           
 MYMOSAICFILEOBJ            Dummy  191      FMSNETCDFFILE_T 872         scalar   ARG,OUT          197                               
 OPEN_MOSAIC_FILE           Subr   191                                                            248,249,250                       
 READ_DATA                  Local  196                                  scalar   PRIV             24,196,212,345,347,406,409,410,414
                                                                                                  ,427,431,451,598,599,601,602,607,6
                                                                                                  08,613,615,618,620,635,642,697,703
                                                                                                  ,715,716,718,719,727,733,743,744,7
                                                                                                  65,771,779,785,864,865,867,868,873
                                                                                                  ,874,876,877,887,894,948,954,962,9
                                                                                                  63,970,976,984,985,998,1004,1012,1
                                                                                                  018                               
 TRIM                       Func   196                                  scalar                    196,197                           

Page 9           Source Listing                  OPEN_MOSAIC_FILE
2021-06-01 08:53                                 grid2.F90

    199 
    200 !> @brief Read a tile file name from a netcdf file
    201 !! @return Name of the file as a string
    202 function read_file_name(thisfileobj, filevar, level)
    203   type(FmsNetcdfFile_t), intent(in)  :: thisfileobj !< File object of file
    204   character(len=*), intent(in) :: filevar!< Variable containing file names
    205   integer, intent(in) :: level !< Level of tile file
    206   integer, dimension(2) :: file_list_size
    207   character(len=MAX_FILE) :: read_file_name
    208   character(len=MAX_FILE), dimension(:), allocatable :: file_names
    209 
    210   call get_variable_size(thisfileobj, filevar, file_list_size)
    211   allocate(file_names(file_list_size(2)))
    212   call read_data(thisfileobj, filevar, file_names)
    213   read_file_name = file_names(level)
    214   deallocate(file_names)
    215 end function read_file_name


ENTRY POINTS

  Name                                    
                                          
 grid2_mod_mp_read_file_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPRESSED_READ_1D         Subr   212                                           PRIV             212,598,599,601,602,607,608,697,70
                                                                                                  3,727,733,864,865,867,868,873,874,
                                                                                                  876,877,948,954,970,976           
 FILEVAR                    Dummy  202      CHAR                        scalar   ARG,IN           210,212                           
 FILE_LIST_SIZE             Local  206      I(4)            4     1     2        TGT              210,211                           
 FILE_NAMES                 Local  208      CHAR            1024  1     1        ALC              211,212,213,214                   
 GET_VARIABLE_SIZE          Subr   210                                           PRIV             25,210,301,473                    
 LEVEL                      Dummy  202      I(4)            4           scalar   ARG,IN           213                               
 READ_FILE_NAME             Func   202      CHAR            1024        scalar                    213,456,479,629,757,881,989       
 THISFILEOBJ                Dummy  202      FMSNETCDFFILE_T 872         scalar   ARG,IN           210,212                           

Page 10          Source Listing                  READ_FILE_NAME
2021-06-01 08:53                                 grid2.F90

    216 
    217 !> @brief Get the grid version from a file object
    218 !! @return An integer representation of the grid version
    219 function get_grid_version(fileobj)
    220   type(FmsNetcdfFile_t), intent(in) :: fileobj !< File object of grid file
    221   integer :: get_grid_version
    222 
    223   if(grid_version<0) then
    224     if(variable_exists(fileobj, 'geolon_t')) then
    225        get_grid_version = VERSION_0
    226     else if(variable_exists(fileobj, 'x_T')) then
    227        get_grid_version = VERSION_1
    228     else if(variable_exists(fileobj, 'ocn_mosaic_file') ) then
    229        get_grid_version = VERSION_2
    230     else if(variable_exists(fileobj, 'gridfiles') ) then
    231        get_grid_version = VERSION_3
    232     else
    233        call mpp_error(FATAL, module_name//'/get_grid_version '//&
    234             'Can''t determine the version of the grid spec: none of "x_T", "geolon_t", or "ocn_mosaic_file" exist in file "'
    234 //trim(grid_file)//'"')
    235     endif
    236   endif
    237 end function get_grid_version


ENTRY POINTS

  Name                                      
                                            
 grid2_mod_mp_get_grid_version_             

Page 11          Source Listing                  GET_GRID_VERSION
2021-06-01 08:53 Symbol Table                    grid2.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILEOBJ                    Dummy  219      FMSNETCDFFILE_T 872         scalar   ARG,IN           224,226,228,230                   
 GET_GRID_VERSION           Func   219      I(4)            4           scalar                    149,225,227,229,231               
 TRIM                       Func   234                                  scalar                    234                               
 VARIABLE_EXISTS            Func   224      L(4)            4           scalar   PRIV             25,224,226,228,230,248,249,250,255
                                                                                                  ,256,257,471                      
 VERSION_0                  Param  225      I(4)            4           scalar                    225,281,300,342,403,595,692,861,94
                                                                                                  3                                 
 VERSION_1                  Param  227      I(4)            4           scalar                    227,281,300,342,403,604,722,870,96
                                                                                                  5                                 

Page 12          Source Listing                  GET_GRID_VERSION
2021-06-01 08:53                                 grid2.F90

    238 
    239 !> @brief Assign the component mosaic files if grid_spec is Version 3
    240 subroutine assign_component_mosaics
    241     mosaic_fileobj(1) = gridfileobj
    242     mosaic_fileobj(2) = gridfileobj
    243     mosaic_fileobj(3) = gridfileobj
    244 end subroutine assign_component_mosaics


ENTRY POINTS

  Name                                              
                                                    
 grid2_mod_mp_assign_component_mosaics_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSIGN_COMPONENT_MOSAICS   Subr   240                                                            151                               
 MOSAIC_FILEOBJ             Local  241      RECORD          872   1     3                         241,242,243,248,249,250,255,256,25
                                                                                                  7,284,304,456,629,757,881,989,1092
                                                                                                  ,1096                             

Page 13          Source Listing                  ASSIGN_COMPONENT_MOSAICS
2021-06-01 08:53                                 grid2.F90

    245 
    246 !> @brief Open the component mosaic files for atm, lnd, and ocn
    247 subroutine open_component_mosaics
    248     if (variable_exists(gridfileobj, 'atm_mosaic_file')) call open_mosaic_file(mosaic_fileobj(1), 'atm')
    249     if (variable_exists(gridfileobj, 'ocn_mosaic_file')) call open_mosaic_file(mosaic_fileobj(2), 'ocn')
    250     if (variable_exists(gridfileobj, 'lnd_mosaic_file')) call open_mosaic_file(mosaic_fileobj(3), 'lnd')
    251 end subroutine open_component_mosaics


ENTRY POINTS

  Name                                            
                                                  
 grid2_mod_mp_open_component_mosaics_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 OPEN_COMPONENT_MOSAICS     Subr   247                                                            150                               

Page 14          Source Listing                  OPEN_COMPONENT_MOSAICS
2021-06-01 08:53                                 grid2.F90

    252 
    253 !> @brief Close the component mosaic files for atm, lnd, and ocn
    254 subroutine close_component_mosaics
    255     if (variable_exists(gridfileobj, 'atm_mosaic_file')) call close_file(mosaic_fileobj(1))
    256     if (variable_exists(gridfileobj, 'ocn_mosaic_file')) call close_file(mosaic_fileobj(2))
    257     if (variable_exists(gridfileobj, 'lnd_mosaic_file')) call close_file(mosaic_fileobj(3))
    258 end subroutine close_component_mosaics


ENTRY POINTS

  Name                                             
                                                   
 grid2_mod_mp_close_component_mosaics_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOSE_COMPONENT_MOSAICS    Subr   254                                                            158                               

Page 15          Source Listing                  CLOSE_COMPONENT_MOSAICS
2021-06-01 08:53                                 grid2.F90

    259 
    260 !> @brief Get the component number of a model component (atm, lnd, ocn)
    261 !! @return Integer component number
    262 function get_component_number(component)
    263   character(len=*), intent(in) :: component !< Component model (atm, lnd, ocn)
    264   integer :: get_component_number
    265     select case(lowercase(component))
    266     case('atm')
    267         get_component_number = 1
    268     case('ocn')
    269         get_component_number = 2
    270     case('lnd')
    271         get_component_number = 3
    272     end select
    273 end function get_component_number


ENTRY POINTS

  Name                                          
                                                
 grid2_mod_mp_get_component_number_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  262      CHAR                        scalar   ARG,IN           265                               
 GET_COMPONENT_NUMBER       Func   262      I(4)            4           scalar                    267,269,271,284,304,629,757,881,98
                                                                                                  9,1092,1096                       

Page 16          Source Listing                  GET_COMPONENT_NUMBER
2021-06-01 08:53                                 grid2.F90

    274 
    275 !> @brief returns number of tiles for a given component
    276 subroutine get_grid_ntiles(component,ntiles)
    277   character(len=*)     :: component !< Component model (atm, lnd, ocn)
    278   integer, intent(out) :: ntiles !< Number of tiles
    279 
    280   select case (grid_version)
    281   case(VERSION_0,VERSION_1)
    282      ntiles = 1
    283   case(VERSION_2, VERSION_3)
    284      ntiles = get_mosaic_ntiles(mosaic_fileobj(get_component_number(trim(component))))
    285   end select
    286 end subroutine get_grid_ntiles


ENTRY POINTS

  Name                                     
                                           
 grid2_mod_mp_get_grid_ntiles_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  276      CHAR                        scalar   ARG,INOUT        284                               
 GET_GRID_NTILES            Subr   276                                                                                              
 GET_MOSAIC_NTILES          Func   284      I(4)            4           scalar   PRIV             27,284                            
 NTILES                     Dummy  276      I(4)            4           scalar   ARG,OUT          282,284                           
 TRIM                       Func   284                                  scalar                    284                               

Page 17          Source Listing                  GET_GRID_NTILES
2021-06-01 08:53                                 grid2.F90

    287 
    288 !> @brief returns size of the grid for each of the tiles
    289 subroutine get_grid_size_for_all_tiles(component,nx,ny)
    290   character(len=*)     :: component !< Component model (atm, lnd, ocn)
    291   integer, intent(inout) :: nx(:),ny(:) !< Grid size in x and y
    292 
    293 ! local vars
    294   integer :: siz(2) ! for the size of external fields
    295   character(len=MAX_NAME) :: varname1, varname2
    296 
    297   varname1 = 'AREA_'//trim(uppercase(component))
    298 
    299   select case (grid_version)
    300   case(VERSION_0,VERSION_1)
    301      call get_variable_size(gridfileobj, varname1, siz)
    302      nx(1) = siz(1); ny(1)=siz(2)
    303   case(VERSION_2, VERSION_3) ! mosaic file
    304      call get_mosaic_grid_sizes(mosaic_fileobj(get_component_number(trim(component))),nx,ny)
    305   end select
    306 end subroutine get_grid_size_for_all_tiles


ENTRY POINTS

  Name                                                 
                                                       
 grid2_mod_mp_get_grid_size_for_all_tiles_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  289      CHAR                        scalar   ARG,INOUT        297,304                           
 GET_GRID_SIZE_FOR_ALL_TILE                                                                                                         
 S                          Subr   289                                           PRIV             321,1075                          
 GET_MOSAIC_GRID_SIZES      Subr   304                                           PRIV             27,304                            
 MAX_NAME                   Param  295      I(4)            4           scalar                    295,385,392,393                   
 NX                         Dummy  289      I(4)            4     1     1        ARG,INOUT        302,304                           
 NY                         Dummy  289      I(4)            4     1     1        ARG,INOUT        302,304                           
 SIZ                        Local  294      I(4)            4     1     2        TGT              301,302                           
 TRIM                       Func   297                                  scalar                    297,304                           
 UPPERCASE                  Func   297      CHAR                        scalar   TGT,PRIV         22,297,347                        
 VARNAME1                   Local  295      CHAR            256         scalar                    297,301                           
 VARNAME2                   Local  295      CHAR            256         scalar                                                      

Page 18          Source Listing                  GET_GRID_SIZE_FOR_ALL_TILES
2021-06-01 08:53                                 grid2.F90

    307 
    308 !> @brief returns size of the grid for one of the tiles
    309 subroutine get_grid_size_for_one_tile(component,tile,nx,ny)
    310   character(len=*)       :: component !< Component model (atm, lnd, ocn)
    311   integer, intent(in)    :: tile !< Tile number
    312   integer, intent(inout) :: nx,ny !< Grid size in x and y
    313 
    314 ! local vars
    315   integer, allocatable :: nnx(:), nny(:)
    316   integer :: ntiles
    317 
    318   call get_grid_ntiles(component, ntiles)
    319   if(tile>0.and.tile<=ntiles) then
    320      allocate(nnx(ntiles),nny(ntiles))
    321      call get_grid_size_for_all_tiles(component,nnx,nny)
    322      nx = nnx(tile); ny = nny(tile)
    323      deallocate(nnx,nny)
    324   else
    325      call mpp_error(FATAL, 'get_grid_size'//&
    326           'requested tile index '//trim(string(tile))//' is out of bounds (1:'//trim(string(ntiles))//')')
    327   endif
    328 end subroutine get_grid_size_for_one_tile


ENTRY POINTS

  Name                                                
                                                      
 grid2_mod_mp_get_grid_size_for_one_tile_             

Page 19          Source Listing                  GET_GRID_SIZE_FOR_ONE_TILE
2021-06-01 08:53 Symbol Table                    grid2.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  309      CHAR                        scalar   ARG,INOUT        318,321                           
 GET_GRID_NTILES            Subr   318                                                            40,318,452,1070                   
 GET_GRID_SIZE_FOR_ONE_TILE Subr   309                                           PRIV             358,442,582,667,848,918           
 NNX                        Local  315      I(4)            4     1     1        ALC              320,321,322,323                   
 NNY                        Local  315      I(4)            4     1     1        ALC              320,321,322,323                   
 NTILES                     Local  316      I(4)            4           scalar                    318,319,320,326                   
 NX                         Dummy  309      I(4)            4           scalar   ARG,INOUT        322                               
 NY                         Dummy  309      I(4)            4           scalar   ARG,INOUT        322                               
 STRING                     Local  326                                  scalar   PRIV             326                               
 STRING_FROM_INTEGER2       Func   326      CHAR            16          scalar   PRIV             326                               
 TILE                       Dummy  309      I(4)            4           scalar   ARG,IN           319,322,326                       
 TRIM                       Func   326                                  scalar                    326                               

Page 20          Source Listing                  GET_GRID_SIZE_FOR_ONE_TILE
2021-06-01 08:53                                 grid2.F90

    329 
    330 !> @brief return grid cell area for the specified model component and tile
    331 subroutine get_grid_cell_area_SG(component, tile, cellarea, domain)
    332   character(len=*), intent(in)    :: component !< Component model (atm, lnd, ocn)
    333   integer         , intent(in)    :: tile !< Tile number
    334   real            , intent(inout) :: cellarea(:,:) !< Cell area
    335   type(domain2d)  , intent(in), optional :: domain !< Domain
    336 
    337 ! local vars
    338   integer :: nlon, nlat
    339   real, allocatable :: glonb(:,:), glatb(:,:)
    340 
    341   select case(grid_version)
    342   case(VERSION_0,VERSION_1)
    343      select case(trim(component))
    344      case('LND')
    345         call read_data(gridfileobj, 'AREA_LND_CELL', cellarea)
    346      case('ATM','OCN')
    347         call read_data(gridfileobj, 'AREA_'//trim(uppercase(component)),cellarea)
    348      case default
    349         call mpp_error(FATAL, module_name//'/get_grid_cell_area'//&
    350              'Illegal component name "'//trim(component)//'": must be one of ATM, LND, or OCN')
    351      end select
    352 ! convert area to m2
    353      cellarea = cellarea*4.*PI*radius**2
    354   case(VERSION_2, VERSION_3)
    355      if (present(domain)) then
    356         call mpp_get_compute_domain(domain,xsize=nlon,ysize=nlat)
    357      else
    358         call get_grid_size(component,tile,nlon,nlat)
    359      endif
    360      allocate(glonb(nlon+1,nlat+1),glatb(nlon+1,nlat+1))
    361      call get_grid_cell_vertices(component, tile, glonb, glatb, domain)
    362      if (great_circle_algorithm) then
    363         call calc_mosaic_grid_great_circle_area(glonb*pi/180.0, glatb*pi/180.0, cellarea)
    364      else
    365         call calc_mosaic_grid_area(glonb*pi/180.0, glatb*pi/180.0, cellarea)
    366      end if
    367      deallocate(glonb,glatb)
    368   end select
    369 
    370 end subroutine get_grid_cell_area_SG

Page 21          Source Listing                  GET_GRID_CELL_AREA_SG
2021-06-01 08:53 Entry Points                    grid2.F90



ENTRY POINTS

  Name                                           
                                                 
 grid2_mod_mp_get_grid_cell_area_sg_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALC_MOSAIC_GRID_AREA      Subr   365                                           PRIV             28,365                            
 CALC_MOSAIC_GRID_GREAT_CIR                                                                                                         
 CLE_AREA                   Subr   363                                           PRIV             28,363                            
 CELLAREA                   Dummy  331      R(8)            8     2     1        ARG,INOUT        345,347,353,363,365               
 COMPONENT                  Dummy  331      CHAR                        scalar   ARG,IN           343,347,350,358,361               
 COMPRESSED_READ_2D         Subr   345                                           PRIV             345,347,406,409,410,414,613,615,61
                                                                                                  8,620,635,642,715,716,718,719,765,
                                                                                                  771,779,785,887,894,962,963,984,98
                                                                                                  5,998,1004,1012,1018              
 DOMAIN                     Dummy  331      DOMAIN2D        752         scalar   ARG,IN           355,356,361                       
 DOMAIN2D                   Type   335                                  scalar   PRIV             31,335,377,539,556,654,803,906,103
                                                                                                  6,1054                            
 GET_GRID_CELL_AREA_SG      Subr   331                                           PRIV             423,546                           
 GET_GRID_CELL_VERTICES     Local  361                                  scalar                    44,361                            
 GET_GRID_SIZE              Local  358                                  scalar                    41,358,442,1075                   
 GLATB                      Local  339      R(8)            8     2     1        ALC              360,361,363,365,367               
 GLONB                      Local  339      R(8)            8     2     1        ALC              360,361,363,365,367               
 MPP_GET_COMPUTE_DOMAIN     Local  356                                  scalar   PRIV             31,356,439,544,561,669,808,920,104
                                                                                                  1                                 
 MPP_GET_COMPUTE_DOMAIN2D   Subr   356                                           PRIV             356,439,544,561,669,808,920,1041  
 NLAT                       Local  338      I(4)            4           scalar                    356,358,360                       
 NLON                       Local  338      I(4)            4           scalar                    356,358,360                       
 PI                         Param  353      R(8)            8           scalar   PRIV             23,353,363,365,530                
 PRESENT                    Func   355                                  scalar                    355                               
 RADIUS                     Param  353      R(8)            8           scalar   PRIV             23,353,530                        
 TILE                       Dummy  331      I(4)            4           scalar   ARG,IN           358,361                           
 TRIM                       Func   343                                  scalar                    343,347,350                       

Page 22          Source Listing                  GET_GRID_CELL_AREA_SG
2021-06-01 08:53                                 grid2.F90

    371 
    372 !> @brief get the area of the component per grid cell
    373 subroutine get_grid_comp_area_SG(component,tile,area,domain)
    374   character(len=*) :: component !< Component model (atm, lnd, ocn)
    375   integer, intent(in) :: tile !< Tile number
    376   real, intent(inout) :: area(:,:) !< Area of grid cell
    377   type(domain2d), intent(in), optional :: domain !< Domain
    378 ! local vars
    379   integer :: n_xgrid_files ! number of exchange grid files in the mosaic
    380   integer :: siz(2), nxgrid
    381   integer :: i,j,m,n
    382   integer, allocatable :: i1(:), j1(:), i2(:), j2(:)
    383   real, allocatable :: xgrid_area(:)
    384   real, allocatable :: rmask(:,:)
    385   character(len=MAX_NAME) :: &
    386      xgrid_name, & ! name of the variable holding xgrid names
    387      tile_name,  & ! name of the tile
    388      xgrid_file, & ! name of the current xgrid file
    389      mosaic_name,& ! name of the mosaic
    390      tilefile
    391   character(len=4096)     :: attvalue
    392   character(len=MAX_NAME), allocatable :: nest_tile_name(:)
    393   character(len=MAX_NAME) :: varname1, varname2
    394   integer :: is,ie,js,je ! boundaries of our domain
    395   integer :: i0, j0 ! offsets for x and y, respectively
    396   integer :: num_nest_tile, ntiles
    397   logical :: is_nest
    398   integer :: found_xgrid_files ! how many xgrid files we actually found in the grid spec
    399   integer :: ibegin, iend, bsize, l
    400   type(FmsNetcdfFile_t) :: tilefileobj, xgrid_fileobj
    401 
    402   select case (grid_version)
    403   case(VERSION_0,VERSION_1)
    404      select case(component)
    405      case('ATM')
    406         call read_data(gridfileobj,'AREA_ATM',area)
    407      case('OCN')
    408         allocate(rmask(size(area,1),size(area,2)))
    409         call read_data(gridfileobj,'AREA_OCN',area)
    410         call read_data(gridfileobj,'wet',     rmask)
    411         area = area*rmask
    412         deallocate(rmask)
    413      case('LND')
    414         call read_data(gridfileobj,'AREA_LND',area)
    415      case default
    416         call mpp_error(FATAL, module_name//'/get_grid_comp_area'//&
    417              'Illegal component name "'//trim(component)//'": must be one of ATM, LND, or OCN')
    418      end select
    419   case(VERSION_2, VERSION_3) ! mosaic gridspec
    420      select case (component)
    421      case ('ATM')
    422 ! just read the grid cell area and return
    423         call get_grid_cell_area(component,tile,area)
    424         return
    425      case ('LND')
    426         xgrid_name = 'aXl_file'
    427         call read_data(gridfileobj, 'lnd_mosaic', mosaic_name)

Page 23          Source Listing                  GET_GRID_COMP_AREA_SG
2021-06-01 08:53                                 grid2.F90

    428         tile_name  = trim(mosaic_name)//'_tile'//char(tile+ichar('0'))
    429      case ('OCN')
    430         xgrid_name = 'aXo_file'
    431         call read_data(gridfileobj, 'ocn_mosaic', mosaic_name)
    432         tile_name  = trim(mosaic_name)//'_tile'//char(tile+ichar('0'))
    433      case default
    434         call mpp_error(FATAL, module_name//'/get_grid_comp_area'//&
    435              'Illegal component name "'//trim(component)//'": must be one of ATM, LND, or OCN')
    436      end select
    437 ! get the boundaries of the requested domain
    438      if(present(domain)) then
    439         call mpp_get_compute_domain(domain,is,ie,js,je)
    440         i0 = 1-is ; j0=1-js
    441      else
    442         call get_grid_size(component,tile,ie,je)
    443         is = 1 ; i0 = 0
    444         js = 1 ; j0 = 0
    445      endif
    446      if (size(area,1)/=ie-is+1.or.size(area,2)/=je-js+1) &
    447         call mpp_error(FATAL, module_name//'/get_grid_comp_area '//&
    448         'size of the output argument "area" is not consistent with the domain')
    449 
    450 ! find the nest tile
    451      call read_data(gridfileobj, 'atm_mosaic', mosaic_name)
    452      call get_grid_ntiles('atm', ntiles)
    453      allocate(nest_tile_name(ntiles))
    454      num_nest_tile = 0
    455      do n = 1, ntiles
    456         tilefile = read_file_name(mosaic_fileobj(1), 'gridfiles', n)
    457         call open_grid_file(tilefileobj, grid_dir//tilefile)
    458         if (global_att_exists(tilefileobj, "nest_grid")) then
    459            call get_global_attribute(tilefileobj, "nest_grid", attvalue)
    460            if(trim(attvalue) == "TRUE") then
    461               num_nest_tile = num_nest_tile + 1
    462               nest_tile_name(num_nest_tile) = trim(mosaic_name)//'_tile'//char(n+ichar('0'))
    463            else if(trim(attvalue) .NE. "FALSE") then
    464               call mpp_error(FATAL, module_name//'/get_grid_comp_area value of global attribute nest_grid in file'// &
    465                    trim(tilefile)//' should be TRUE or FALSE')
    466            endif
    467         end if
    468         call close_file(tilefileobj)
    469      end do
    470      area(:,:) = 0.
    471      if(variable_exists(gridfileobj,xgrid_name)) then
    472 ! get the number of the exchange-grid files
    473         call get_variable_size(gridfileobj,xgrid_name,siz)
    474         n_xgrid_files = siz(2)
    475         found_xgrid_files = 0
    476 ! loop through all exchange grid files
    477         do n = 1, n_xgrid_files
    478 ! get the name of the current exchange grid file
    479            xgrid_file = read_file_name(gridfileobj,xgrid_name,n)
    480            call open_grid_file(xgrid_fileobj, grid_dir//xgrid_file)
    481 ! skip the rest of the loop if the name of the current tile isn't found
    482 ! in the file name, but check this only if there is more than 1 tile
    483            if(n_xgrid_files>1) then
    484               if(index(xgrid_file,trim(tile_name))==0) cycle

Page 24          Source Listing                  GET_GRID_COMP_AREA_SG
2021-06-01 08:53                                 grid2.F90

    485            endif
    486            found_xgrid_files = found_xgrid_files + 1
    487 !---make sure the atmosphere grid is not a nested grid
    488            is_nest = .false.
    489            do m = 1, num_nest_tile
    490               if(index(xgrid_file, trim(nest_tile_name(m))) .NE. 0) then
    491                  is_nest = .true.
    492                  exit
    493               end if
    494            end do
    495            if(is_nest) cycle
    496 
    497 ! finally read the exchange grid
    498            nxgrid = get_mosaic_xgrid_size(xgrid_fileobj)
    499            if(nxgrid < BUFSIZE) then
    500               allocate(i1(nxgrid), j1(nxgrid), i2(nxgrid), j2(nxgrid), xgrid_area(nxgrid))
    501            else
    502               allocate(i1(BUFSIZE), j1(BUFSIZE), i2(BUFSIZE), j2(BUFSIZE), xgrid_area(BUFSIZE))
    503            endif
    504            ibegin = 1
    505            do l = 1,nxgrid,BUFSIZE
    506               bsize = min(BUFSIZE, nxgrid-l+1)
    507               iend = ibegin + bsize - 1
    508               call get_mosaic_xgrid(xgrid_fileobj, i1(1:bsize), j1(1:bsize), i2(1:bsize), j2(1:bsize), &
    509                                     xgrid_area(1:bsize), ibegin, iend)
    510 ! and sum the exchange grid areas
    511               do m = 1, bsize
    512                  i = i2(m); j = j2(m)
    513                  if (i<is.or.i>ie) cycle
    514                  if (j<js.or.j>je) cycle
    515                  area(i+i0,j+j0) = area(i+i0,j+j0) + xgrid_area(m)
    516               end do
    517               ibegin = iend + 1
    518            enddo
    519            deallocate(i1, j1, i2, j2, xgrid_area)
    520            call close_file(xgrid_fileobj)
    521         enddo
    522         if (found_xgrid_files == 0) &
    523            call mpp_error(FATAL, 'get_grid_comp_area no xgrid files were found for component '&
    524                  //trim(component)//' (mosaic name is '//trim(mosaic_name)//')')
    525 
    526      endif
    527      deallocate(nest_tile_name)
    528   end select ! version
    529 ! convert area to m2
    530   area = area*4.*PI*radius**2
    531 end subroutine get_grid_comp_area_SG

Page 25          Source Listing                  GET_GRID_COMP_AREA_SG
2021-06-01 08:53 Entry Points                    grid2.F90



ENTRY POINTS

  Name                                           
                                                 
 grid2_mod_mp_get_grid_comp_area_sg_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AREA                       Dummy  373      R(8)            8     2     1        ARG,INOUT        406,408,409,411,414,423,446,470,51
                                                                                                  5,530                             
 ATTVALUE                   Local  391      CHAR            4096        scalar                    459,460,463                       
 BSIZE                      Local  399      I(4)            4           scalar                    506,507,508,509,511               
 BUFSIZE                    Param  499      I(4)            4           scalar                    499,502,505,506                   
 CHAR                       Func   428                                  scalar                    428,432,462                       
 COMPONENT                  Dummy  373      CHAR                        scalar   ARG,INOUT        404,417,420,423,435,442,524       
 DOMAIN                     Dummy  373      DOMAIN2D        752         scalar   ARG,IN           438,439                           
 FOUND_XGRID_FILES          Local  398      I(4)            4           scalar                    475,486,522                       
 GET_GRID_CELL_AREA         Local  423                                  scalar                    46,423                            
 GET_GRID_COMP_AREA_SG      Subr   373                                           PRIV             563                               
 GET_MOSAIC_XGRID           Subr   508                                           PRIV             28,508                            
 GET_MOSAIC_XGRID_SIZE      Func   498      I(4)            4           scalar   PRIV             27,498                            
 I                          Local  381      I(4)            4           scalar                    512,513,515                       
 I0                         Local  395      I(4)            4           scalar                    440,443,515                       
 I1                         Local  382      I(4)            4     1     1        ALC              500,502,508,519                   
 I2                         Local  382      I(4)            4     1     1        ALC              500,502,508,512,519               
 IBEGIN                     Local  399      I(4)            4           scalar                    504,507,509,517                   
 ICHAR                      Func   428                                  scalar                    428,432,462                       
 IE                         Local  394      I(4)            4           scalar                    439,442,446,513                   
 IEND                       Local  399      I(4)            4           scalar                    507,509,517                       
 INDEX                      Func   484                                  scalar                    484,490                           
 IS                         Local  394      I(4)            4           scalar                    439,440,443,446,513               
 IS_NEST                    Local  397      L(4)            4           scalar                    488,491,495                       
 J                          Local  381      I(4)            4           scalar                    512,514,515                       
 J0                         Local  395      I(4)            4           scalar                    440,444,515                       
 J1                         Local  382      I(4)            4     1     1        ALC              500,502,508,519                   
 J2                         Local  382      I(4)            4     1     1        ALC              500,502,508,512,519               
 JE                         Local  394      I(4)            4           scalar                    439,442,446,514                   
 JS                         Local  394      I(4)            4           scalar                    439,440,444,446,514               
 L                          Local  399      I(4)            4           scalar                    505,506                           
 M                          Local  381      I(4)            4           scalar                    489,490,511,512,515               
 MIN                        Func   506                                  scalar                    506                               
 MOSAIC_NAME                Local  389      CHAR            256         scalar                    427,428,431,432,451,462,524       
 N                          Local  381      I(4)            4           scalar                    455,456,462,477,479               
 NEST_TILE_NAME             Local  392      CHAR            256   1     1        ALC              453,462,490,527                   
 NTILES                     Local  396      I(4)            4           scalar                    452,453,455                       
 NUM_NEST_TILE              Local  396      I(4)            4           scalar                    454,461,462,489                   
 NXGRID                     Local  380      I(4)            4           scalar                    498,499,500,505,506               
 N_XGRID_FILES              Local  379      I(4)            4           scalar                    474,477,483                       
 PRESENT                    Func   438                                  scalar                    438                               
 RMASK                      Local  384      R(8)            8     2     1        ALC              408,410,411,412                   
 SIZ                        Local  380      I(4)            4     1     2        TGT              473,474                           
 SIZE                       Func   408                                  scalar                    408,446                           

Page 26          Source Listing                  GET_GRID_COMP_AREA_SG
2021-06-01 08:53 Symbol Table                    grid2.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TILE                       Dummy  373      I(4)            4           scalar   ARG,IN           423,428,432,442                   
 TILEFILE                   Local  390      CHAR            256         scalar                    456,457,465                       
 TILEFILEOBJ                Local  400      FMSNETCDFFILE_T 872         scalar                    457,458,459,468                   
 TILE_NAME                  Local  387      CHAR            256         scalar                    428,432,484                       
 TRIM                       Func   417                                  scalar                    417,428,432,435,460,462,463,465,48
                                                                                                  4,490,524                         
 VARNAME1                   Local  393      CHAR            256         scalar                                                      
 VARNAME2                   Local  393      CHAR            256         scalar                                                      
 XGRID_AREA                 Local  383      R(8)            8     1     1        ALC              500,502,509,515,519               
 XGRID_FILE                 Local  388      CHAR            256         scalar                    479,480,484,490                   
 XGRID_FILEOBJ              Local  400      FMSNETCDFFILE_T 872         scalar                    480,498,508,520                   
 XGRID_NAME                 Local  386      CHAR            256         scalar                    426,430,471,473,479               

Page 27          Source Listing                  GET_GRID_COMP_AREA_SG
2021-06-01 08:53                                 grid2.F90

    532 
    533 !> @brief return grid cell area for the specified model component and tile on an
    534 !! unstructured domain
    535 subroutine get_grid_cell_area_UG(component, tile, cellarea, SG_domain, UG_domain)
    536   character(len=*),   intent(in)    :: component !< Component model (atm, lnd, ocn)
    537   integer         ,   intent(in)    :: tile !< Tile number
    538   real            ,   intent(inout) :: cellarea(:) !< Cell area
    539   type(domain2d)  ,   intent(in)    :: SG_domain !< Structured Domain
    540   type(domainUG)  ,   intent(in)    :: UG_domain !< Unstructured Domain
    541   integer :: is, ie, js, je
    542   real, allocatable :: SG_area(:,:)
    543 
    544   call mpp_get_compute_domain(SG_domain, is, ie, js, je)
    545   allocate(SG_area(is:ie, js:je))
    546   call get_grid_cell_area_SG(component, tile, SG_area, SG_domain)
    547   call mpp_pass_SG_to_UG(UG_domain, SG_area, cellarea)
    548   deallocate(SG_area)
    549 end subroutine get_grid_cell_area_UG


ENTRY POINTS

  Name                                           
                                                 
 grid2_mod_mp_get_grid_cell_area_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CELLAREA                   Dummy  535      R(8)            8     1     1        ARG,INOUT        547                               
 COMPONENT                  Dummy  535      CHAR                        scalar   ARG,IN           546                               
 DOMAINUG                   Type   540                                  scalar                    32,540,557,804,1037               
 GET_GRID_CELL_AREA_UG      Subr   535                                           PRIV                                               
 IE                         Local  541      I(4)            4           scalar                    544,545                           
 IS                         Local  541      I(4)            4           scalar                    544,545                           
 JE                         Local  541      I(4)            4           scalar                    544,545                           
 JS                         Local  541      I(4)            4           scalar                    544,545                           
 MPP_PASS_SG_TO_UG          Local  547                                  scalar   PRIV             32,547,564,821,830,1045,1046      
 MPP_PASS_SG_TO_UG_R8_2D    Subr   547                                           PRIV             547,564,1045,1046                 
 SG_AREA                    Local  542      R(8)            8     2     1        ALC              545,546,547,548                   
 SG_DOMAIN                  Dummy  535      DOMAIN2D        752         scalar   ARG,IN           544,546                           
 TILE                       Dummy  535      I(4)            4           scalar   ARG,IN           546                               
 UG_DOMAIN                  Dummy  535      DOMAINUG        544         scalar   ARG,IN           547                               

Page 28          Source Listing                  GET_GRID_CELL_AREA_UG
2021-06-01 08:53                                 grid2.F90

    550 
    551 !> @brief get the area of the component per grid cell for an unstructured domain
    552 subroutine get_grid_comp_area_UG(component, tile, area, SG_domain, UG_domain)
    553   character(len=*),   intent(in)    :: component !< Component model (atm, lnd, ocn)
    554   integer         ,   intent(in)    :: tile !< Tile number
    555   real            ,   intent(inout) :: area(:) !< Area of the component
    556   type(domain2d)  ,   intent(in)    :: SG_domain !< Structured domain
    557   type(domainUG)  ,   intent(in)    :: UG_domain !< Unstructured domain
    558   integer :: is, ie, js, je
    559   real, allocatable :: SG_area(:,:)
    560 
    561   call mpp_get_compute_domain(SG_domain, is, ie, js, je)
    562   allocate(SG_area(is:ie, js:je))
    563   call get_grid_comp_area_SG(component, tile, SG_area, SG_domain)
    564   call mpp_pass_SG_to_UG(UG_domain, SG_area, area)
    565   deallocate(SG_area)
    566 
    567 end subroutine get_grid_comp_area_UG


ENTRY POINTS

  Name                                           
                                                 
 grid2_mod_mp_get_grid_comp_area_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AREA                       Dummy  552      R(8)            8     1     1        ARG,INOUT        564                               
 COMPONENT                  Dummy  552      CHAR                        scalar   ARG,IN           563                               
 GET_GRID_COMP_AREA_UG      Subr   552                                           PRIV                                               
 IE                         Local  558      I(4)            4           scalar                    561,562                           
 IS                         Local  558      I(4)            4           scalar                    561,562                           
 JE                         Local  558      I(4)            4           scalar                    561,562                           
 JS                         Local  558      I(4)            4           scalar                    561,562                           
 SG_AREA                    Local  559      R(8)            8     2     1        ALC              562,563,564,565                   
 SG_DOMAIN                  Dummy  552      DOMAIN2D        752         scalar   ARG,IN           561,563                           
 TILE                       Dummy  552      I(4)            4           scalar   ARG,IN           563                               
 UG_DOMAIN                  Dummy  552      DOMAINUG        544         scalar   ARG,IN           564                               

Page 29          Source Listing                  GET_GRID_COMP_AREA_UG
2021-06-01 08:53                                 grid2.F90

    568 
    569 !> @brief returns arrays of global grid cell boundaries for given model component and
    570 !! mosaic tile number.
    571 subroutine get_grid_cell_vertices_1D(component, tile, glonb, glatb)
    572   character(len=*), intent(in) :: component !< Component model (atm, lnd, ocn)
    573   integer,          intent(in) :: tile !< Tile number
    574   real,          intent(inout) :: glonb(:),glatb(:) !< Grid cell vertices
    575 
    576   integer                      :: nlon, nlat
    577   integer                      :: start(4), nread(4)
    578   real, allocatable            :: tmp(:,:), x_vert_t(:,:,:), y_vert_t(:,:,:)
    579   character(len=MAX_FILE)      :: tilefile
    580   type(FmsNetcdfFile_t)  :: tilefileobj
    581 
    582   call get_grid_size_for_one_tile(component, tile, nlon, nlat)
    583   if (size(glonb(:))/=nlon+1) &
    584        call mpp_error (FATAL, module_name//'/get_grid_cell_vertices_1D '//&
    585        'Size of argument "glonb" is not consistent with the grid size')
    586   if (size(glatb(:))/=nlat+1) &
    587        call mpp_error (FATAL, module_name//'/get_grid_cell_vertices_1D '//&
    588        'Size of argument "glatb" is not consistent with the grid size')
    589   if(trim(component) .NE. 'ATM' .AND. component .NE. 'LND' .AND. component .NE. 'OCN') then
    590      call mpp_error(FATAL, module_name//'/get_grid_cell_vertices_1D '//&
    591           'Illegal component name "'//trim(component)//'": must be one of ATM, LND, or OCN')
    592   endif
    593 
    594   select case(grid_version)
    595   case(VERSION_0)
    596      select case(trim(component))
    597      case('ATM','LND')
    598         call read_data(gridfileobj, 'xb'//lowercase(component(1:1)), glonb)
    599         call read_data(gridfileobj, 'yb'//lowercase(component(1:1)), glatb)
    600      case('OCN')
    601         call read_data(gridfileobj, "gridlon_vert_t", glonb)
    602         call read_data(gridfileobj, "gridlat_vert_t", glatb)
    603      end select
    604   case(VERSION_1)
    605      select case(trim(component))
    606      case('ATM','LND')
    607         call read_data(gridfileobj, 'xb'//lowercase(component(1:1)), glonb)
    608         call read_data(gridfileobj, 'yb'//lowercase(component(1:1)), glatb)
    609      case('OCN')
    610         allocate (x_vert_t(nlon,1,2), y_vert_t(1,nlat,2) )
    611         start = 1; nread = 1
    612         nread(1) = nlon; nread(2) = 1; start(3) = 1
    613         call read_data(gridfileobj, "x_vert_T", x_vert_t(:,:,1), corner=start, edge_lengths=nread)
    614         nread(1) = nlon; nread(2) = 1; start(3) = 2
    615         call read_data(gridfileobj, "x_vert_T", x_vert_t(:,:,2), corner=start, edge_lengths=nread)
    616 
    617         nread(1) = 1; nread(2) = nlat; start(3) = 1
    618         call read_data(gridfileobj, "y_vert_T", y_vert_t(:,:,1), corner=start, edge_lengths=nread)
    619         nread(1) = 1; nread(2) = nlat; start(3) = 4
    620         call read_data(gridfileobj, "y_vert_T", y_vert_t(:,:,2), corner=start, edge_lengths=nread)
    621         glonb(1:nlon) = x_vert_t(1:nlon,1,1)
    622         glonb(nlon+1) = x_vert_t(nlon,1,2)
    623         glatb(1:nlat) = y_vert_t(1,1:nlat,1)
    624         glatb(nlat+1) = y_vert_t(1,nlat,2)

Page 30          Source Listing                  GET_GRID_CELL_VERTICES_1D
2021-06-01 08:53                                 grid2.F90

    625         deallocate(x_vert_t, y_vert_t)
    626      end select
    627   case(VERSION_2, VERSION_3)
    628 ! get the name of the grid file for the component and tile
    629      tilefile = read_file_name(mosaic_fileobj(get_component_number(trim(component))), 'gridfiles',tile)
    630      call open_grid_file(tilefileobj, grid_dir//tilefile)
    631 
    632      start = 1; nread = 1
    633      nread(1) = 2*nlon+1
    634      allocate( tmp(2*nlon+1,1) )
    635      call read_data(tilefileobj, "x", tmp, corner=start, edge_lengths=nread)
    636      glonb(1:nlon+1) = tmp(1:2*nlon+1:2,1)
    637      deallocate(tmp)
    638      allocate(tmp(1,2*nlat+1))
    639 
    640      start = 1; nread = 1
    641      nread(2) = 2*nlat+1
    642      call read_data(tilefileobj, "y", tmp, corner=start, edge_lengths=nread)
    643      glatb(1:nlat+1) = tmp(1,1:2*nlat+1:2)
    644      deallocate(tmp)
    645      call close_file(tilefileobj)
    646   end select
    647 end subroutine get_grid_cell_vertices_1D


ENTRY POINTS

  Name                                               
                                                     
 grid2_mod_mp_get_grid_cell_vertices_1d_             

Page 31          Source Listing                  GET_GRID_CELL_VERTICES_1D
2021-06-01 08:53 Symbol Table                    grid2.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  571      CHAR                        scalar   ARG,IN           582,589,591,596,598,599,605,607,60
                                                                                                  8,629                             
 GET_GRID_CELL_VERTICES_1D  Subr   571                                           PRIV                                               
 GLATB                      Dummy  571      R(8)            8     1     1        ARG,INOUT        586,599,602,608,623,624,643       
 GLONB                      Dummy  571      R(8)            8     1     1        ARG,INOUT        583,598,601,607,621,622,636       
 NLAT                       Local  576      I(4)            4           scalar                    582,586,610,617,619,623,624,638,64
                                                                                                  1,643                             
 NLON                       Local  576      I(4)            4           scalar                    582,583,610,612,614,621,622,633,63
                                                                                                  4,636                             
 NREAD                      Local  577      I(4)            4     1     4        TGT              611,612,613,614,615,617,618,619,62
                                                                                                  0,632,633,635,640,641,642         
 SIZE                       Func   583                                  scalar                    583,586                           
 START                      Local  577      I(4)            4     1     4        TGT              611,612,613,614,615,617,618,619,62
                                                                                                  0,632,635,640,642                 
 TILE                       Dummy  571      I(4)            4           scalar   ARG,IN           582,629                           
 TILEFILE                   Local  579      CHAR            1024        scalar                    629,630                           
 TILEFILEOBJ                Local  580      FMSNETCDFFILE_T 872         scalar                    630,635,642,645                   
 TMP                        Local  578      R(8)            8     2     1        ALC              634,635,636,637,638,642,643,644   
 TRIM                       Func   589                                  scalar                    589,591,596,605,629               
 X_VERT_T                   Local  578      R(8)            8     3     1        ALC              610,613,615,621,622,625           
 Y_VERT_T                   Local  578      R(8)            8     3     1        ALC              610,618,620,623,624,625           

Page 32          Source Listing                  GET_GRID_CELL_VERTICES_1D
2021-06-01 08:53                                 grid2.F90

    648 
    649 !> @brief returns cell vertices for the specified model component and mosaic tile number
    650 subroutine get_grid_cell_vertices_2D(component, tile, lonb, latb, domain)
    651   character(len=*),         intent(in) :: component !< Component model (atm, lnd, ocn)
    652   integer,                  intent(in) :: tile !< Tile number
    653   real,                  intent(inout) :: lonb(:,:),latb(:,:) !< Cell vertices
    654   type(domain2d), optional, intent(in) :: domain !< Domain
    655 
    656 ! local vars
    657   integer :: nlon, nlat
    658   integer :: i,j
    659   real, allocatable :: buffer(:), tmp(:,:), x_vert_t(:,:,:), y_vert_t(:,:,:)
    660   integer :: is,ie,js,je ! boundaries of our domain
    661   integer :: i0,j0 ! offsets for coordinates
    662   integer :: isg, jsg
    663   integer :: start(4), nread(4)
    664   character(len=MAX_FILE)      :: tilefile
    665   type(FmsNetcdfFile_t)  :: tilefileobj
    666 
    667   call get_grid_size_for_one_tile(component, tile, nlon, nlat)
    668   if (present(domain)) then
    669     call mpp_get_compute_domain(domain,is,ie,js,je)
    670   else
    671     is = 1 ; ie = nlon
    672     js = 1 ; je = nlat
    673 !--- domain normally should be present
    674     call mpp_error (NOTE, module_name//'/get_grid_cell_vertices '//&
    675        'domain is not present, global data will be read')
    676   endif
    677   i0 = -is+1; j0 = -js+1
    678 
    679 ! verify that lonb and latb sizes are consistent with the size of domain
    680   if (size(lonb,1)/=ie-is+2.or.size(lonb,2)/=je-js+2) &
    681        call mpp_error (FATAL, module_name//'/get_grid_cell_vertices '//&
    682        'Size of argument "lonb" is not consistent with the domain size')
    683   if (size(latb,1)/=ie-is+2.or.size(latb,2)/=je-js+2) &
    684        call mpp_error (FATAL, module_name//'/get_grid_cell_vertices '//&
    685        'Size of argument "latb" is not consistent with the domain size')
    686   if(trim(component) .NE. 'ATM' .AND. component .NE. 'LND' .AND. component .NE. 'OCN') then
    687      call mpp_error(FATAL, module_name//'/get_grid_cell_vertices '//&
    688           'Illegal component name "'//trim(component)//'": must be one of ATM, LND, or OCN')
    689   endif
    690 
    691   select case(grid_version)
    692   case(VERSION_0)
    693      select case(component)
    694      case('ATM','LND')
    695         allocate(buffer(max(nlon,nlat)+1))
    696 ! read coordinates of grid cell vertices
    697         call read_data(gridfileobj, 'xb'//lowercase(component(1:1)), buffer(1:nlon+1))
    698         do j = js, je+1
    699            do i = is, ie+1
    700               lonb(i+i0,j+j0) = buffer(i)
    701            enddo
    702         enddo
    703         call read_data(gridfileobj, 'yb'//lowercase(component(1:1)), buffer(1:nlat+1))
    704         do j = js, je+1

Page 33          Source Listing                  GET_GRID_CELL_VERTICES_2D
2021-06-01 08:53                                 grid2.F90

    705            do i = is, ie+1
    706               latb(i+i0,j+j0) = buffer(j)
    707            enddo
    708         enddo
    709         deallocate(buffer)
    710      case('OCN')
    711         if (present(domain)) then
    712            start = 1; nread = 1
    713            start(1) = is; start(2) = js
    714            nread(1) = ie-is+2; nread(2) = je-js+2
    715            call read_data(gridfileobj, "geolon_vert_t", lonb, corner=start, edge_lengths=nread)
    716            call read_data(gridfileobj, "geolat_vert_t", latb, corner=start, edge_lengths=nread)
    717          else
    718            call read_data(gridfileobj, "geolon_vert_t", lonb)
    719            call read_data(gridfileobj, "geolat_vert_t", latb)
    720          endif
    721      end select
    722   case(VERSION_1)
    723      select case(component)
    724      case('ATM','LND')
    725         allocate(buffer(max(nlon,nlat)+1))
    726 ! read coordinates of grid cell vertices
    727         call read_data(gridfileobj, 'xb'//lowercase(component(1:1)), buffer(1:nlon+1))
    728         do j = js, je+1
    729            do i = is, ie+1
    730               lonb(i+i0,j+j0) = buffer(i)
    731            enddo
    732         enddo
    733         call read_data(gridfileobj, 'yb'//lowercase(component(1:1)), buffer(1:nlat+1))
    734         do j = js, je+1
    735            do i = is, ie+1
    736               latb(i+i0,j+j0) = buffer(j)
    737            enddo
    738         enddo
    739         deallocate(buffer)
    740      case('OCN')
    741         nlon=ie-is+1; nlat=je-js+1
    742         allocate (x_vert_t(nlon,nlat,4), y_vert_t(nlon,nlat,4) )
    743         call read_data(gridfileobj, 'x_vert_T', x_vert_t)
    744         call read_data(gridfileobj, 'y_vert_T', y_vert_t)
    745         lonb(1:nlon,1:nlat) = x_vert_t(1:nlon,1:nlat,1)
    746         lonb(nlon+1,1:nlat) = x_vert_t(nlon,1:nlat,2)
    747         lonb(1:nlon,nlat+1) = x_vert_t(1:nlon,nlat,4)
    748         lonb(nlon+1,nlat+1) = x_vert_t(nlon,nlat,3)
    749         latb(1:nlon,1:nlat) = y_vert_t(1:nlon,1:nlat,1)
    750         latb(nlon+1,1:nlat) = y_vert_t(nlon,1:nlat,2)
    751         latb(1:nlon,nlat+1) = y_vert_t(1:nlon,nlat,4)
    752         latb(nlon+1,nlat+1) = y_vert_t(nlon,nlat,3)
    753         deallocate(x_vert_t, y_vert_t)
    754      end select
    755   case(VERSION_2, VERSION_3)
    756 ! get the name of the grid file for the component and tile
    757      tilefile = read_file_name(mosaic_fileobj(get_component_number(trim(component))), 'gridfiles',tile)
    758      call open_grid_file(tilefileobj, grid_dir//tilefile)
    759      if(PRESENT(domain)) then
    760         call mpp_get_global_domain(domain, xbegin=isg, ybegin=jsg)
    761         start = 1; nread = 1

Page 34          Source Listing                  GET_GRID_CELL_VERTICES_2D
2021-06-01 08:53                                 grid2.F90

    762         start(1) = 2*(is-isg+1) - 1; nread(1) = 2*(ie-is)+3
    763         start(2) = 2*(js-jsg+1) - 1; nread(2) = 2*(je-js)+3
    764         allocate(tmp(nread(1), nread(2)) )
    765         call read_data(tilefileobj, "x", tmp, corner=start, edge_lengths=nread)
    766         do j = 1, je-js+2
    767            do i = 1, ie-is+2
    768               lonb(i,j) = tmp(2*i-1,2*j-1)
    769            enddo
    770         enddo
    771         call read_data(tilefileobj, "y", tmp, corner=start, edge_lengths=nread)
    772         do j = 1, je-js+2
    773            do i = 1, ie-is+2
    774               latb(i,j) = tmp(2*i-1,2*j-1)
    775            enddo
    776         enddo
    777      else
    778         allocate(tmp(2*nlon+1,2*nlat+1))
    779         call read_data(tilefileobj, "x", tmp)
    780         do j = js, je+1
    781            do i = is, ie+1
    782               lonb(i+i0,j+j0) = tmp(2*i-1,2*j-1)
    783            end do
    784         end do
    785         call read_data(tilefileobj, "y", tmp)
    786         do j = js, je+1
    787            do i = is, ie+1
    788               latb(i+i0,j+j0) = tmp(2*i-1,2*j-1)
    789            end do
    790         end do
    791      endif
    792      deallocate(tmp)
    793      call close_file(tilefileobj)
    794   end select
    795 end subroutine get_grid_cell_vertices_2D

Page 35          Source Listing                  GET_GRID_CELL_VERTICES_2D
2021-06-01 08:53 Entry Points                    grid2.F90



ENTRY POINTS

  Name                                               
                                                     
 grid2_mod_mp_get_grid_cell_vertices_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BUFFER                     Local  659      R(8)            8     1     1        ALC              695,697,700,703,706,709,725,727,73
                                                                                                  0,733,736,739                     
 COMPONENT                  Dummy  650      CHAR                        scalar   ARG,IN           667,686,688,693,697,703,723,727,73
                                                                                                  3,757                             
 COMPRESSED_READ_3D         Subr   743                                           PRIV             743,744                           
 DOMAIN                     Dummy  650      DOMAIN2D        752         scalar   ARG,IN           668,669,711,759,760               
 GET_GRID_CELL_VERTICES_2D  Subr   650                                           PRIV             361,812                           
 I                          Local  658      I(4)            4           scalar                    699,700,705,706,729,730,735,736,76
                                                                                                  7,768,773,774,781,782,787,788     
 I0                         Local  661      I(4)            4           scalar                    677,700,706,730,736,782,788       
 IE                         Local  660      I(4)            4           scalar                    669,671,680,683,699,705,714,729,73
                                                                                                  5,741,762,767,773,781,787         
 IS                         Local  660      I(4)            4           scalar                    669,671,677,680,683,699,705,713,71
                                                                                                  4,729,735,741,762,767,773,781,787 
 ISG                        Local  662      I(4)            4           scalar                    760,762                           
 J                          Local  658      I(4)            4           scalar                    698,700,704,706,728,730,734,736,76
                                                                                                  6,768,772,774,780,782,786,788     
 J0                         Local  661      I(4)            4           scalar                    677,700,706,730,736,782,788       
 JE                         Local  660      I(4)            4           scalar                    669,672,680,683,698,704,714,728,73
                                                                                                  4,741,763,766,772,780,786         
 JS                         Local  660      I(4)            4           scalar                    669,672,677,680,683,698,704,713,71
                                                                                                  4,728,734,741,763,766,772,780,786 
 JSG                        Local  662      I(4)            4           scalar                    760,763                           
 LATB                       Dummy  650      R(8)            8     2     1        ARG,INOUT        683,706,716,719,736,749,750,751,75
                                                                                                  2,774,788                         
 LONB                       Dummy  650      R(8)            8     2     1        ARG,INOUT        680,700,715,718,730,745,746,747,74
                                                                                                  8,768,782                         
 MAX                        Func   695                                  scalar                    695,725                           
 MPP_GET_GLOBAL_DOMAIN      Local  760                                  scalar   PRIV             32,760,993                        
 MPP_GET_GLOBAL_DOMAIN2D    Subr   760                                           PRIV             760,993                           
 NLAT                       Local  657      I(4)            4           scalar                    667,672,695,703,725,733,741,742,74
                                                                                                  5,746,747,748,749,750,751,752,778 
 NLON                       Local  657      I(4)            4           scalar                    667,671,695,697,725,727,741,742,74
                                                                                                  5,746,747,748,749,750,751,752,778 
 NOTE                       Param  674      I(4)            4           scalar   PRIV             22,674,925                        
 NREAD                      Local  663      I(4)            4     1     4        TGT              712,714,715,716,761,762,763,764,76
                                                                                                  5,771                             
 PRESENT                    Func   668                                  scalar                    668,711,759                       
 SIZE                       Func   680                                  scalar                    680,683                           
 START                      Local  663      I(4)            4     1     4        TGT              712,713,715,716,761,762,763,765,77
                                                                                                  1                                 
 TILE                       Dummy  650      I(4)            4           scalar   ARG,IN           667,757                           
 TILEFILE                   Local  664      CHAR            1024        scalar                    757,758                           
 TILEFILEOBJ                Local  665      FMSNETCDFFILE_T 872         scalar                    758,765,771,779,785,793           

Page 36          Source Listing                  GET_GRID_CELL_VERTICES_2D
2021-06-01 08:53 Symbol Table                    grid2.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TMP                        Local  659      R(8)            8     2     1        ALC              764,765,768,771,774,778,779,782,78
                                                                                                  5,788,792                         
 TRIM                       Func   686                                  scalar                    686,688,757                       
 X_VERT_T                   Local  659      R(8)            8     3     1        ALC              742,743,745,746,747,748,753       
 Y_VERT_T                   Local  659      R(8)            8     3     1        ALC              742,744,749,750,751,752,753       

Page 37          Source Listing                  GET_GRID_CELL_VERTICES_2D
2021-06-01 08:53                                 grid2.F90

    796 
    797 !> @brief returns cell vertices for the specified model component and mosaic tile number for
    798 !! an unstructured domain
    799 subroutine get_grid_cell_vertices_UG(component, tile, lonb, latb, SG_domain, UG_domain)
    800   character(len=*),         intent(in) :: component !< Component model (atm, lnd, ocn)
    801   integer,                  intent(in) :: tile !< Tile number
    802   real,                  intent(inout) :: lonb(:,:),latb(:,:) ! The second dimension is 4
    803   type(domain2d)  ,   intent(in)       :: SG_domain !< Structured domain
    804   type(domainUG)  ,   intent(in)       :: UG_domain !< Unstructured domain
    805   integer :: is, ie, js, je, i, j
    806   real, allocatable :: SG_lonb(:,:), SG_latb(:,:), tmp(:,:,:)
    807 
    808   call mpp_get_compute_domain(SG_domain, is, ie, js, je)
    809   allocate(SG_lonb(is:ie+1, js:je+1))
    810   allocate(SG_latb(is:ie+1, js:je+1))
    811   allocate(tmp(is:ie,js:je,4))
    812   call get_grid_cell_vertices_2D(component, tile, SG_lonb, SG_latb, SG_domain)
    813   do j = js, je
    814      do i = is, ie
    815         tmp(i,j,1) = SG_lonb(i,j)
    816         tmp(i,j,2) = SG_lonb(i+1,j)
    817         tmp(i,j,3) = SG_lonb(i+1,j+1)
    818         tmp(i,j,4) = SG_lonb(i,j+1)
    819      enddo
    820   enddo
    821   call mpp_pass_SG_to_UG(UG_domain, tmp, lonb)
    822   do j = js, je
    823      do i = is, ie
    824         tmp(i,j,1) = SG_latb(i,j)
    825         tmp(i,j,2) = SG_latb(i+1,j)
    826         tmp(i,j,3) = SG_latb(i+1,j+1)
    827         tmp(i,j,4) = SG_latb(i,j+1)
    828      enddo
    829   enddo
    830   call mpp_pass_SG_to_UG(UG_domain, tmp, latb)
    831 
    832 
    833   deallocate(SG_lonb, SG_latb, tmp)
    834 end subroutine get_grid_cell_vertices_UG

Page 38          Source Listing                  GET_GRID_CELL_VERTICES_UG
2021-06-01 08:53 Entry Points                    grid2.F90



ENTRY POINTS

  Name                                               
                                                     
 grid2_mod_mp_get_grid_cell_vertices_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  799      CHAR                        scalar   ARG,IN           812                               
 GET_GRID_CELL_VERTICES_UG  Subr   799                                           PRIV                                               
 I                          Local  805      I(4)            4           scalar                    814,815,816,817,818,823,824,825,82
                                                                                                  6,827                             
 IE                         Local  805      I(4)            4           scalar                    808,809,810,811,814,823           
 IS                         Local  805      I(4)            4           scalar                    808,809,810,811,814,823           
 J                          Local  805      I(4)            4           scalar                    813,815,816,817,818,822,824,825,82
                                                                                                  6,827                             
 JE                         Local  805      I(4)            4           scalar                    808,809,810,811,813,822           
 JS                         Local  805      I(4)            4           scalar                    808,809,810,811,813,822           
 LATB                       Dummy  799      R(8)            8     2     1        ARG,INOUT        830                               
 LONB                       Dummy  799      R(8)            8     2     1        ARG,INOUT        821                               
 MPP_PASS_SG_TO_UG_R8_3D    Subr   821                                           PRIV             821,830                           
 SG_DOMAIN                  Dummy  799      DOMAIN2D        752         scalar   ARG,IN           808,812                           
 SG_LATB                    Local  806      R(8)            8     2     1        ALC              810,812,824,825,826,827,833       
 SG_LONB                    Local  806      R(8)            8     2     1        ALC              809,812,815,816,817,818,833       
 TILE                       Dummy  799      I(4)            4           scalar   ARG,IN           812                               
 TMP                        Local  806      R(8)            8     3     1        ALC              811,815,816,817,818,821,824,825,82
                                                                                                  6,827,830,833                     
 UG_DOMAIN                  Dummy  799      DOMAINUG        544         scalar   ARG,IN           821,830                           

Page 39          Source Listing                  GET_GRID_CELL_VERTICES_UG
2021-06-01 08:53                                 grid2.F90

    835 
    836 !> @brief returns grid cell centers given model component and mosaic tile number
    837 subroutine get_grid_cell_centers_1D(component, tile, glon, glat)
    838   character(len=*), intent(in) :: component !< Component model (atm, lnd, ocn)
    839   integer, intent(in) :: tile !< Tile number
    840   real, intent(inout) :: glon(:),glat(:) !< Grid cell centers
    841 
    842   integer                      :: nlon, nlat
    843   integer                      :: start(4), nread(4)
    844   real, allocatable            :: tmp(:,:)
    845   character(len=MAX_FILE)      :: tilefile
    846   type(FmsNetcdfFile_t)  :: tilefileobj
    847 
    848   call get_grid_size_for_one_tile(component, tile, nlon, nlat)
    849   if (size(glon(:))/=nlon) &
    850        call mpp_error (FATAL, module_name//'/get_grid_cell_centers_1D '//&
    851        'Size of argument "glon" is not consistent with the grid size')
    852   if (size(glat(:))/=nlat) &
    853        call mpp_error (FATAL, module_name//'/get_grid_cell_centers_1D '//&
    854        'Size of argument "glat" is not consistent with the grid size')
    855   if(trim(component) .NE. 'ATM' .AND. component .NE. 'LND' .AND. component .NE. 'OCN') then
    856      call mpp_error(FATAL, module_name//'/get_grid_cell_centers_1D '//&
    857           'Illegal component name "'//trim(component)//'": must be one of ATM, LND, or OCN')
    858   endif
    859 
    860   select case(grid_version)
    861   case(VERSION_0)
    862      select case(trim(component))
    863      case('ATM','LND')
    864         call read_data(gridfileobj, 'xt'//lowercase(component(1:1)), glon)
    865         call read_data(gridfileobj, 'yt'//lowercase(component(1:1)), glat)
    866      case('OCN')
    867         call read_data(gridfileobj, "gridlon_t", glon)
    868         call read_data(gridfileobj, "gridlat_t", glat)
    869      end select
    870   case(VERSION_1)
    871      select case(trim(component))
    872      case('ATM','LND')
    873         call read_data(gridfileobj, 'xt'//lowercase(component(1:1)), glon)
    874         call read_data(gridfileobj, 'yt'//lowercase(component(1:1)), glat)
    875      case('OCN')
    876         call read_data(gridfileobj, "grid_x_T", glon)
    877         call read_data(gridfileobj, "grid_y_T", glat)
    878      end select
    879   case(VERSION_2, VERSION_3)
    880 ! get the name of the grid file for the component and tile
    881      tilefile = read_file_name(mosaic_fileobj(get_component_number(trim(component))), 'gridfiles',tile)
    882      call open_grid_file(tilefileobj, grid_dir//tilefile)
    883 
    884      start = 1; nread = 1
    885      nread(1) = 2*nlon+1; start(2) = 2
    886      allocate( tmp(2*nlon+1,1) )
    887      call read_data(tilefileobj, "x", tmp, corner=start, edge_lengths=nread)
    888      glon(1:nlon) = tmp(2:2*nlon:2,1)
    889      deallocate(tmp)
    890      allocate(tmp(1, 2*nlat+1))
    891 

Page 40          Source Listing                  GET_GRID_CELL_CENTERS_1D
2021-06-01 08:53                                 grid2.F90

    892      start = 1; nread = 1
    893      nread(2) = 2*nlat+1; start(1) = 2
    894      call read_data(tilefileobj, "y", tmp, corner=start, edge_lengths=nread)
    895      glat(1:nlat) = tmp(1,2:2*nlat:2)
    896      deallocate(tmp)
    897      call close_file(tilefileobj)
    898   end select
    899 end subroutine get_grid_cell_centers_1D


ENTRY POINTS

  Name                                              
                                                    
 grid2_mod_mp_get_grid_cell_centers_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  837      CHAR                        scalar   ARG,IN           848,855,857,862,864,865,871,873,87
                                                                                                  4,881                             
 GET_GRID_CELL_CENTERS_1D   Subr   837                                           PRIV                                               
 GLAT                       Dummy  837      R(8)            8     1     1        ARG,INOUT        852,865,868,874,877,895           
 GLON                       Dummy  837      R(8)            8     1     1        ARG,INOUT        849,864,867,873,876,888           
 NLAT                       Local  842      I(4)            4           scalar                    848,852,890,893,895               
 NLON                       Local  842      I(4)            4           scalar                    848,849,885,886,888               
 NREAD                      Local  843      I(4)            4     1     4        TGT              884,885,887,892,893,894           
 SIZE                       Func   849                                  scalar                    849,852                           
 START                      Local  843      I(4)            4     1     4        TGT              884,885,887,892,893,894           
 TILE                       Dummy  837      I(4)            4           scalar   ARG,IN           848,881                           
 TILEFILE                   Local  845      CHAR            1024        scalar                    881,882                           
 TILEFILEOBJ                Local  846      FMSNETCDFFILE_T 872         scalar                    882,887,894,897                   
 TMP                        Local  844      R(8)            8     2     1        ALC              886,887,888,889,890,894,895,896   
 TRIM                       Func   855                                  scalar                    855,857,862,871,881               

Page 41          Source Listing                  GET_GRID_CELL_CENTERS_1D
2021-06-01 08:53                                 grid2.F90

    900 
    901 !> @brief returns grid cell centers given model component and mosaic tile number
    902 subroutine get_grid_cell_centers_2D(component, tile, lon, lat, domain)
    903   character(len=*), intent(in) :: component !< Component model (atm, lnd, ocn)
    904   integer, intent(in) :: tile !< Tile number
    905   real, intent(inout) :: lon(:,:),lat(:,:) !< Grid cell centers
    906   type(domain2d), intent(in), optional :: domain !< Domain
    907 ! local vars
    908   integer :: nlon, nlat
    909   integer :: i,j
    910   real, allocatable :: buffer(:),tmp(:,:)
    911   integer :: is,ie,js,je ! boundaries of our domain
    912   integer :: i0,j0 ! offsets for coordinates
    913   integer :: isg, jsg
    914   integer :: start(4), nread(4)
    915   character(len=MAX_FILE)      :: tilefile
    916   type(FmsNetcdfFile_t)  :: tilefileobj
    917 
    918   call get_grid_size_for_one_tile(component, tile, nlon, nlat)
    919   if (present(domain)) then
    920     call mpp_get_compute_domain(domain,is,ie,js,je)
    921   else
    922     is = 1 ; ie = nlon
    923     js = 1 ; je = nlat
    924 !--- domain normally should be present
    925     call mpp_error (NOTE, module_name//'/get_grid_cell_centers '//&
    926        'domain is not present, global data will be read')
    927   endif
    928   i0 = -is+1; j0 = -js+1
    929 
    930 ! verify that lon and lat sizes are consistent with the size of domain
    931   if (size(lon,1)/=ie-is+1.or.size(lon,2)/=je-js+1) &
    932        call mpp_error (FATAL, module_name//'/get_grid_cell_centers '//&
    933        'Size of array "lon" is not consistent with the domain size')
    934   if (size(lat,1)/=ie-is+1.or.size(lat,2)/=je-js+1) &
    935        call mpp_error (FATAL, module_name//'/get_grid_cell_centers '//&
    936        'Size of array "lat" is not consistent with the domain size')
    937   if(trim(component) .NE. 'ATM' .AND. component .NE. 'LND' .AND. component .NE. 'OCN') then
    938      call mpp_error(FATAL, module_name//'/get_grid_cell_vertices '//&
    939           'Illegal component name "'//trim(component)//'": must be one of ATM, LND, or OCN')
    940   endif
    941 
    942   select case(grid_version)
    943   case(VERSION_0)
    944      select case (trim(component))
    945      case('ATM','LND')
    946         allocate(buffer(max(nlon,nlat)))
    947 ! read coordinates of grid cell vertices
    948         call read_data(gridfileobj, 'xt'//lowercase(component(1:1)), buffer(1:nlon))
    949         do j = js,je
    950         do i = is,ie
    951            lon(i+i0,j+j0) = buffer(i)
    952         enddo
    953         enddo
    954         call read_data(gridfileobj, 'yt'//lowercase(component(1:1)), buffer(1:nlat))
    955         do j = js,je
    956         do i = is,ie

Page 42          Source Listing                  GET_GRID_CELL_CENTERS_2D
2021-06-01 08:53                                 grid2.F90

    957            lat(i+i0,j+j0) = buffer(j)
    958         enddo
    959         enddo
    960         deallocate(buffer)
    961      case('OCN')
    962         call read_data(gridfileobj, 'geolon_t', lon)
    963         call read_data(gridfileobj, 'geolat_t', lat)
    964      end select
    965   case(VERSION_1)
    966      select case(trim(component))
    967      case('ATM','LND')
    968         allocate(buffer(max(nlon,nlat)))
    969 ! read coordinates of grid cell vertices
    970         call read_data(gridfileobj, 'xt'//lowercase(component(1:1)), buffer(1:nlon))
    971         do j = js,je
    972         do i = is,ie
    973            lon(i+i0,j+j0) = buffer(i)
    974         enddo
    975         enddo
    976         call read_data(gridfileobj, 'yt'//lowercase(component(1:1)), buffer(1:nlat))
    977         do j = js,je
    978         do i = is,ie
    979            lat(i+i0,j+j0) = buffer(j)
    980         enddo
    981         enddo
    982         deallocate(buffer)
    983      case('OCN')
    984         call read_data(gridfileobj, 'x_T', lon)
    985         call read_data(gridfileobj, 'y_T', lat)
    986      end select
    987   case(VERSION_2, VERSION_3) ! mosaic grid file
    988 ! get the name of the grid file for the component and tile
    989      tilefile = read_file_name(mosaic_fileobj(get_component_number(trim(component))), 'gridfiles',tile)
    990      call open_grid_file(tilefileobj, grid_dir//tilefile)
    991 
    992      if(PRESENT(domain)) then
    993         call mpp_get_global_domain(domain, xbegin=isg, ybegin=jsg)
    994         start = 1; nread = 1
    995         start(1) = 2*(is-isg+1) - 1; nread(1) = 2*(ie-is)+3
    996         start(2) = 2*(js-jsg+1) - 1; nread(2) = 2*(je-js)+3
    997         allocate(tmp(nread(1), nread(2)))
    998         call read_data(tilefileobj, "x", tmp, corner=start, edge_lengths=nread)
    999         do j = 1, je-js+1
   1000            do i = 1, ie-is+1
   1001               lon(i,j) = tmp(2*i,2*j)
   1002            enddo
   1003         enddo
   1004         call read_data(tilefileobj, "y", tmp, corner=start, edge_lengths=nread)
   1005         do j = 1, je-js+1
   1006            do i = 1, ie-is+1
   1007               lat(i,j) = tmp(2*i,2*j)
   1008            enddo
   1009         enddo
   1010      else
   1011         allocate(tmp(2*nlon+1,2*nlat+1))
   1012         call read_data(tilefileobj, 'x', tmp)
   1013         do j = js,je

Page 43          Source Listing                  GET_GRID_CELL_CENTERS_2D
2021-06-01 08:53                                 grid2.F90

   1014            do i = is,ie
   1015               lon(i+i0,j+j0) = tmp(2*i,2*j)
   1016            end do
   1017         end do
   1018         call read_data(tilefileobj, 'y', tmp)
   1019         do j = js,je
   1020            do i = is,ie
   1021               lat(i+i0,j+j0) = tmp(2*i,2*j)
   1022            end do
   1023         end do
   1024         deallocate(tmp)
   1025      endif
   1026      call close_file(tilefileobj)
   1027   end select
   1028 end subroutine get_grid_cell_centers_2D


ENTRY POINTS

  Name                                              
                                                    
 grid2_mod_mp_get_grid_cell_centers_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BUFFER                     Local  910      R(8)            8     1     1        ALC              946,948,951,954,957,960,968,970,97
                                                                                                  3,976,979,982                     
 COMPONENT                  Dummy  902      CHAR                        scalar   ARG,IN           918,937,939,944,948,954,966,970,97
                                                                                                  6,989                             
 DOMAIN                     Dummy  902      DOMAIN2D        752         scalar   ARG,IN           919,920,992,993                   
 GET_GRID_CELL_CENTERS_2D   Subr   902                                           PRIV             1044                              
 I                          Local  909      I(4)            4           scalar                    950,951,956,957,972,973,978,979,10
                                                                                                  00,1001,1006,1007,1014,1015,1020,1
                                                                                                  021                               
 I0                         Local  912      I(4)            4           scalar                    928,951,957,973,979,1015,1021     
 IE                         Local  911      I(4)            4           scalar                    920,922,931,934,950,956,972,978,99
                                                                                                  5,1000,1006,1014,1020             
 IS                         Local  911      I(4)            4           scalar                    920,922,928,931,934,950,956,972,97
                                                                                                  8,995,1000,1006,1014,1020         
 ISG                        Local  913      I(4)            4           scalar                    993,995                           
 J                          Local  909      I(4)            4           scalar                    949,951,955,957,971,973,977,979,99
                                                                                                  9,1001,1005,1007,1013,1015,1019,10
                                                                                                  21                                
 J0                         Local  912      I(4)            4           scalar                    928,951,957,973,979,1015,1021     
 JE                         Local  911      I(4)            4           scalar                    920,923,931,934,949,955,971,977,99
                                                                                                  6,999,1005,1013,1019              
 JS                         Local  911      I(4)            4           scalar                    920,923,928,931,934,949,955,971,97
                                                                                                  7,996,999,1005,1013,1019          
 JSG                        Local  913      I(4)            4           scalar                    993,996                           
 LAT                        Dummy  902      R(8)            8     2     1        ARG,INOUT        934,957,963,979,985,1007,1021     
 LON                        Dummy  902      R(8)            8     2     1        ARG,INOUT        931,951,962,973,984,1001,1015     
 MAX                        Func   946                                  scalar                    946,968                           
 NLAT                       Local  908      I(4)            4           scalar                    918,923,946,954,968,976,1011      
 NLON                       Local  908      I(4)            4           scalar                    918,922,946,948,968,970,1011      

Page 44          Source Listing                  GET_GRID_CELL_CENTERS_2D
2021-06-01 08:53 Symbol Table                    grid2.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NREAD                      Local  914      I(4)            4     1     4        TGT              994,995,996,997,998,1004          
 PRESENT                    Func   919                                  scalar                    919,992                           
 SIZE                       Func   931                                  scalar                    931,934                           
 START                      Local  914      I(4)            4     1     4        TGT              994,995,996,998,1004              
 TILE                       Dummy  902      I(4)            4           scalar   ARG,IN           918,989                           
 TILEFILE                   Local  915      CHAR            1024        scalar                    989,990                           
 TILEFILEOBJ                Local  916      FMSNETCDFFILE_T 872         scalar                    990,998,1004,1012,1018,1026       
 TMP                        Local  910      R(8)            8     2     1        ALC              997,998,1001,1004,1007,1011,1012,1
                                                                                                  015,1018,1021,1024                
 TRIM                       Func   937                                  scalar                    937,939,944,966,989               

Page 45          Source Listing                  GET_GRID_CELL_CENTERS_2D
2021-06-01 08:53                                 grid2.F90

   1029 
   1030 !> @brief returns grid cell centers given model component and mosaic tile number
   1031 !! for unstructured domain
   1032 subroutine get_grid_cell_centers_UG(component, tile, lon, lat, SG_domain, UG_domain)
   1033   character(len=*), intent(in) :: component !< Component model (atm, lnd, ocn)
   1034   integer, intent(in) :: tile !< Tile number
   1035   real, intent(inout) :: lon(:),lat(:) !< Grid cell centers
   1036   type(domain2d)  ,   intent(in) :: SG_domain !< Structured domain
   1037   type(domainUG)  ,   intent(in) :: UG_domain !< Unstructured domain
   1038   integer :: is, ie, js, je
   1039   real, allocatable :: SG_lon(:,:), SG_lat(:,:)
   1040 
   1041   call mpp_get_compute_domain(SG_domain, is, ie, js, je)
   1042   allocate(SG_lon(is:ie, js:je))
   1043   allocate(SG_lat(is:ie, js:je))
   1044   call get_grid_cell_centers_2D(component, tile, SG_lon, SG_lat, SG_domain)
   1045   call mpp_pass_SG_to_UG(UG_domain, SG_lon, lon)
   1046   call mpp_pass_SG_to_UG(UG_domain, SG_lat, lat)
   1047   deallocate(SG_lon, SG_lat)
   1048 end subroutine get_grid_cell_centers_UG


ENTRY POINTS

  Name                                              
                                                    
 grid2_mod_mp_get_grid_cell_centers_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  1032     CHAR                        scalar   ARG,IN           1044                              
 GET_GRID_CELL_CENTERS_UG   Subr   1032                                          PRIV                                               
 IE                         Local  1038     I(4)            4           scalar                    1041,1042,1043                    
 IS                         Local  1038     I(4)            4           scalar                    1041,1042,1043                    
 JE                         Local  1038     I(4)            4           scalar                    1041,1042,1043                    
 JS                         Local  1038     I(4)            4           scalar                    1041,1042,1043                    
 LAT                        Dummy  1032     R(8)            8     1     1        ARG,INOUT        1046                              
 LON                        Dummy  1032     R(8)            8     1     1        ARG,INOUT        1045                              
 SG_DOMAIN                  Dummy  1032     DOMAIN2D        752         scalar   ARG,IN           1041,1044                         
 SG_LAT                     Local  1039     R(8)            8     2     1        ALC              1043,1044,1046,1047               
 SG_LON                     Local  1039     R(8)            8     2     1        ALC              1042,1044,1045,1047               
 TILE                       Dummy  1032     I(4)            4           scalar   ARG,IN           1044                              
 UG_DOMAIN                  Dummy  1032     DOMAINUG        544         scalar   ARG,IN           1045,1046                         

Page 46          Source Listing                  GET_GRID_CELL_CENTERS_UG
2021-06-01 08:53                                 grid2.F90

   1049 
   1050 !> @brief given a model component, a layout, and (optionally) a halo size, returns a
   1051 !! domain for current processor
   1052 subroutine define_cube_mosaic(component, domain, layout, halo, maskmap)
   1053   character(len=*) , intent(in)    :: component !< Component model (atm, lnd, ocn)
   1054   type(domain2d)   , intent(inout) :: domain !< Domain
   1055   integer          , intent(in)    :: layout(2) !< Layout
   1056   integer, optional, intent(in)    :: halo !< Halo
   1057   logical, optional, intent(in)    :: maskmap(:,:,:) !< Maskmap
   1058 
   1059 ! ---- local vars
   1060   integer :: ntiles     ! number of tiles
   1061   integer :: ncontacts  ! number of contacts between mosaic tiles
   1062   integer :: n
   1063   integer :: ng, pe_pos, npes         ! halo size
   1064   integer, allocatable :: nlon(:), nlat(:), global_indices(:,:)
   1065   integer, allocatable :: pe_start(:), pe_end(:), layout_2d(:,:)
   1066   integer, allocatable :: tile1(:),tile2(:)
   1067   integer, allocatable :: is1(:),ie1(:),js1(:),je1(:)
   1068   integer, allocatable :: is2(:),ie2(:),js2(:),je2(:)
   1069 
   1070   call get_grid_ntiles(component,ntiles)
   1071   allocate(nlon(ntiles), nlat(ntiles))
   1072   allocate(global_indices(4,ntiles))
   1073   allocate(pe_start(ntiles),pe_end(ntiles))
   1074   allocate(layout_2d(2,ntiles))
   1075   call get_grid_size(component,nlon,nlat)
   1076 
   1077   pe_pos = mpp_root_pe()
   1078   do n = 1, ntiles
   1079      global_indices(:,n) = (/ 1, nlon(n), 1, nlat(n) /)
   1080      layout_2d     (:,n) = layout
   1081      if(present(maskmap)) then
   1082         npes = count(maskmap(:,:,n))
   1083      else
   1084         npes = layout(1)*layout(2)
   1085      endif
   1086      pe_start(n) = pe_pos
   1087      pe_end  (n) = pe_pos + npes - 1
   1088      pe_pos      = pe_end(n) + 1
   1089   enddo
   1090 
   1091 ! get the contact information from mosaic file
   1092   ncontacts = get_mosaic_ncontacts(mosaic_fileobj(get_component_number(trim(component))))
   1093   allocate(tile1(ncontacts),tile2(ncontacts))
   1094   allocate(is1(ncontacts),ie1(ncontacts),js1(ncontacts),je1(ncontacts))
   1095   allocate(is2(ncontacts),ie2(ncontacts),js2(ncontacts),je2(ncontacts))
   1096   call get_mosaic_contact(mosaic_fileobj(get_component_number(trim(component))), tile1, tile2, &
   1097        is1, ie1, js1, je1, is2, ie2, js2, je2)
   1098 
   1099   ng = 0
   1100   if(present(halo)) ng = halo
   1101 ! create the domain2d variable
   1102   call mpp_define_mosaic ( global_indices, layout_2d, domain, &
   1103        ntiles, ncontacts, tile1, tile2,                  &
   1104        is1, ie1, js1, je1, &
   1105        is2, ie2, js2, je2, &

Page 47          Source Listing                  DEFINE_CUBE_MOSAIC
2021-06-01 08:53                                 grid2.F90

   1106        pe_start=pe_start, pe_end=pe_end, symmetry=.true.,  &
   1107        shalo = ng, nhalo = ng, whalo = ng, ehalo = ng,     &
   1108        maskmap = maskmap,                                  &
   1109        name = trim(component)//'Cubic-Sphere Grid' )
   1110 
   1111   deallocate(nlon,nlat,global_indices,pe_start,pe_end,layout_2d)
   1112   deallocate(tile1,tile2)
   1113   deallocate(is1,ie1,js1,je1)
   1114   deallocate(is2,ie2,js2,je2)
   1115 end subroutine define_cube_mosaic


ENTRY POINTS

  Name                                        
                                              
 grid2_mod_mp_define_cube_mosaic_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  1052     CHAR                        scalar   ARG,IN           1070,1075,1092,1096,1109          
 COUNT                      Func   1082                                 scalar                    1082                              
 DEFINE_CUBE_MOSAIC         Subr   1052                                                                                             
 DOMAIN                     Dummy  1052     DOMAIN2D        752         scalar   ARG,INOUT        1102                              
 GET_MOSAIC_CONTACT         Subr   1096                                          PRIV             33,1096                           
 GET_MOSAIC_NCONTACTS       Func   1092     I(4)            4           scalar   PRIV             33,1092                           
 GLOBAL_INDICES             Local  1064     I(4)            4     2     1        ALC              1072,1079,1102,1111               
 HALO                       Dummy  1052     I(4)            4           scalar   ARG,IN           1100                              
 IE1                        Local  1067     I(4)            4     1     1        ALC              1094,1097,1104,1113               
 IE2                        Local  1068     I(4)            4     1     1        ALC              1095,1097,1105,1114               
 IS1                        Local  1067     I(4)            4     1     1        ALC              1094,1097,1104,1113               
 IS2                        Local  1068     I(4)            4     1     1        ALC              1095,1097,1105,1114               
 JE1                        Local  1067     I(4)            4     1     1        ALC              1094,1097,1104,1113               
 JE2                        Local  1068     I(4)            4     1     1        ALC              1095,1097,1105,1114               
 JS1                        Local  1067     I(4)            4     1     1        ALC              1094,1097,1104,1113               
 JS2                        Local  1068     I(4)            4     1     1        ALC              1095,1097,1105,1114               
 LAYOUT                     Dummy  1052     I(4)            4     1     2        ARG,IN           1080,1084                         
 LAYOUT_2D                  Local  1065     I(4)            4     2     1        ALC              1074,1080,1102,1111               
 MASKMAP                    Dummy  1052     L(4)            4     3     1        ARG,IN           1081,1082,1108                    
 MPP_DEFINE_MOSAIC          Subr   1102                                          PRIV             31,1102                           
 MPP_ROOT_PE                Func   1077     I(4)            4           scalar   PRIV             22,1077                           
 N                          Local  1062     I(4)            4           scalar                    1078,1079,1080,1082,1086,1087,1088
 NCONTACTS                  Local  1061     I(4)            4           scalar                    1092,1093,1094,1095,1103          
 NG                         Local  1063     I(4)            4           scalar                    1099,1100,1107                    
 NLAT                       Local  1064     I(4)            4     1     1        ALC              1071,1075,1079,1111               
 NLON                       Local  1064     I(4)            4     1     1        ALC              1071,1075,1079,1111               
 NPES                       Local  1063     I(4)            4           scalar                    1082,1084,1087                    
 NTILES                     Local  1060     I(4)            4           scalar                    1070,1071,1072,1073,1074,1078,1103
 PE_END                     Local  1065     I(4)            4     1     1        ALC              1073,1087,1088,1106,1111          
 PE_POS                     Local  1063     I(4)            4           scalar                    1077,1086,1087,1088               
 PE_START                   Local  1065     I(4)            4     1     1        ALC              1073,1086,1106,1111               
 PRESENT                    Func   1081                                 scalar                    1081,1100                         
 TILE1                      Local  1066     I(4)            4     1     1        ALC              1093,1096,1103,1112               
 TILE2                      Local  1066     I(4)            4     1     1        ALC              1093,1096,1103,1112               

Page 48          Source Listing                  DEFINE_CUBE_MOSAIC
2021-06-01 08:53 Symbol Table                    grid2.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TRIM                       Func   1092                                 scalar                    1092,1096,1109                    

Page 49          Source Listing                  DEFINE_CUBE_MOSAIC
2021-06-01 08:53                                 grid2.F90

   1116 
   1117 end module grid2_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONSTANTS_MOD              Module 23                                                             23                                
 DEFINE_CUBE_MOSAIC         Subr   50                                                             50                                
 FMS2_IO_MOD                Module 24                                                             24                                
 GET_COMPONENT_NUMBER@0     Local  262      I(4)            4           scalar                                                      
 GET_GRID_CELL_CENTERS      Local  66                                   scalar                    43                                
 GET_GRID_COMP_AREA         Local  77                                   scalar                    47                                
 GRID2_MOD                  Module 20                                                                                               
 GRID_END                   Subr   52                                                             52                                
 GRID_INIT                  Subr   51                                                             51                                
 MOSAIC2_MOD                Module 27                                                             27,33                             
 MPP_DOMAINS_MOD            Module 31                                                             31                                
 MPP_MOD                    Module 22                                                             22                                
 READ_FILE_NAME@0           Local  202      CHAR            1024        scalar                                                      
 VERSION                    Param  110      CHAR            7           scalar                                                      

Page 50          Source Listing                  DEFINE_CUBE_MOSAIC
2021-06-01 08:53 Subprograms/Common Blocks       grid2.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSIGN_COMPONENT_MOSAICS   Subr   240                                                            151                               
 CLOSE_COMPONENT_MOSAICS    Subr   254                                                            158                               
 DEFINE_CUBE_MOSAIC         Subr   1052                                                                                             
 GET_COMPONENT_NUMBER       Func   262      I(4)            4           scalar                    267,269,271,284,304,629,757,881,98
                                                                                                  9,1092,1096                       
 GET_GREAT_CIRCLE_ALGORITHM Func   165      L(4)            4           scalar                                                      
 GET_GRID_CELL_AREA_SG      Subr   331                                           PRIV             423,546                           
 GET_GRID_CELL_AREA_UG      Subr   535                                           PRIV                                               
 GET_GRID_CELL_CENTERS_1D   Subr   837                                           PRIV                                               
 GET_GRID_CELL_CENTERS_2D   Subr   902                                           PRIV             1044                              
 GET_GRID_CELL_CENTERS_UG   Subr   1032                                          PRIV                                               
 GET_GRID_CELL_VERTICES_1D  Subr   571                                           PRIV                                               
 GET_GRID_CELL_VERTICES_2D  Subr   650                                           PRIV             361,812                           
 GET_GRID_CELL_VERTICES_UG  Subr   799                                           PRIV                                               
 GET_GRID_COMP_AREA_SG      Subr   373                                           PRIV             563                               
 GET_GRID_COMP_AREA_UG      Subr   552                                           PRIV                                               
 GET_GRID_NTILES            Subr   276                                                                                              
 GET_GRID_SIZE_FOR_ALL_TILE                                                                                                         
 S                          Subr   289                                           PRIV             321,1075                          
 GET_GRID_SIZE_FOR_ONE_TILE Subr   309                                           PRIV             358,442,582,667,848,918           
 GET_GRID_VERSION           Func   219      I(4)            4           scalar                    149,225,227,229,231               
 GRID2_MOD                  Module 20                                                                                               
 GRID_END                   Subr   156                                                                                              
 GRID_INIT                  Subr   140                                                                                              
 OPEN_COMPONENT_MOSAICS     Subr   247                                                            150                               
 OPEN_GRID_FILE             Subr   182                                                            147,197,457,480,630,758,882,990   
 OPEN_MOSAIC_FILE           Subr   191                                                            248,249,250                       
 READ_FILE_NAME             Func   202      CHAR            1024        scalar                    213,456,479,629,757,881,989       

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format

Page 51          Source Listing                  DEFINE_CUBE_MOSAIC
2021-06-01 08:53                                 grid2.F90

       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource

Page 52          Source Listing                  DEFINE_CUBE_MOSAIC
2021-06-01 08:53                                 grid2.F90

       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : ./,/opt/intel/2020/compilers_and_libraries/linux/mkl/include/,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/,
           /usr/include/,./,./,../include/,../mosaic/,./,/opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/,/opt/intel/2020/compilers_and_libraries/linux/daal/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,/usr/local/include/,/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/,
           /usr/include/,/usr/include/,/usr/include/
       -list filename : grid2.lst
  no   -o


Page 53          Source Listing                  DEFINE_CUBE_MOSAIC
2021-06-01 08:53                                 grid2.F90

COMPILER: Intel(R) Fortran 19.1-1555
