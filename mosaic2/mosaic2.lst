Page 1           Source Listing                  MOSAIC_INIT
2021-06-01 08:53                                 /tmp/ifortRenNY5.i90

      1 # 1 "mosaic2.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 module mosaic2_mod
     21 
     22 ! <CONTACT EMAIL="Zhi.Liang@noaa.gov">
     23 !   Zhi Liang
     24 ! </CONTACT>
     25 
     26 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/"/>
     27 
     28 ! <OVERVIEW>
     29 !    <TT>mosaic_mod</TT> implements some utility routines to read mosaic information.
     30 ! </OVERVIEW>
     31 
     32 ! <DESCRIPTION>
     33 !    <TT>mosaic_mod</TT> implements some utility routines to read mosaic information.
     34 !    The information includes number of tiles and contacts in the mosaic,
     35 !    mosaic grid resolution of each tile, mosaic contact information, mosaic exchange
     36 !    grid information. Each routine will call a C-version routine to get these information.
     37 ! </DESCRIPTION>
     38 
     39 !use fms_mod,    only : write_version_number
     40 use mpp_mod,    only : mpp_error, FATAL, mpp_pe, mpp_root_pe
     41 use mpp_domains_mod, only : domain2D, mpp_get_current_ntile, mpp_get_tile_id
     42 use constants_mod, only : PI, RADIUS
     43 use fms2_io_mod,   only : FmsNetcdfFile_t, open_file, close_file, get_dimension_size
     44 use fms2_io_mod,   only : read_data, variable_exists
     45 
     46 implicit none
     47 private
     48 
     49 character(len=*), parameter :: &
     50      grid_dir  = 'INPUT/'      ! root directory for all grid files
     51 
     52 integer, parameter :: &
     53      MAX_NAME = 256,  & ! max length of the variable names
     54      MAX_FILE = 1024, & ! max length of the file names
     55      X_REFINE = 2,    & ! supergrid size/model grid size in x-direction
     56      Y_REFINE = 2       ! supergrid size/model grid size in y-direction
     57 

Page 2           Source Listing                  MOSAIC_INIT
2021-06-01 08:53                                 mosaic2.F90

     58 ! --- public interface
     59 
     60 
     61 public :: get_mosaic_ntiles
     62 public :: get_mosaic_ncontacts
     63 public :: get_mosaic_grid_sizes
     64 public :: get_mosaic_contact
     65 public :: get_mosaic_xgrid_size
     66 public :: get_mosaic_xgrid
     67 public :: get_mosaic_tile_grid
     68 public :: calc_mosaic_grid_area
     69 public :: calc_mosaic_grid_great_circle_area
     70 public :: is_inside_polygon
     71 
     72 logical :: module_is_initialized = .true.
     73 ! Include variable "version" to be written to log file.
     74 # 1 "../include/file_version.h" 1 
     75 ! -*-f90-*-
     76 !***********************************************************************
     77 !*                   GNU Lesser General Public License
     78 !*
     79 !* This file is part of the GFDL Flexible Modeling System (FMS).
     80 !*
     81 !* FMS is free software: you can redistribute it and/or modify it under
     82 !* the terms of the GNU Lesser General Public License as published by
     83 !* the Free Software Foundation, either version 3 of the License, or (at
     84 !* your option) any later version.
     85 !*
     86 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     87 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     88 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     89 !* for more details.
     90 !*
     91 !* You should have received a copy of the GNU Lesser General Public
     92 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     93 !***********************************************************************
     94 
     95 # 23
     96 
     97   character(len=*), parameter :: version = 'unknown'
     98 
     99 # 74 "mosaic2.F90" 2 
    100 
    101 contains
    102 
    103 !#######################################################################
    104 
    105 ! <SUBROUTINE NAME="mosaic_init">
    106 !   <OVERVIEW>
    107 !     Initialize the mosaic_mod.
    108 !   </OVERVIEW>
    109 !   <DESCRIPTION>
    110 !     Initialization routine for the mosaic module. It writes the
    111 !     version information to the log file.
    112 !   </DESCRIPTION>
    113 !   <TEMPLATE>
    114 !     call mosaic_init ( )

Page 3           Source Listing                  MOSAIC_INIT
2021-06-01 08:53                                 mosaic2.F90

    115 !   </TEMPLATE>
    116 subroutine mosaic_init()
    117 
    118   if (module_is_initialized) return
    119   module_is_initialized = .TRUE.
    120 
    121 !--------- write version number and namelist ------------------
    122 !  call write_version_number("MOSAIC_MOD", version)
    123 
    124 end subroutine mosaic_init


ENTRY POINTS

  Name                                   
                                         
 mosaic2_mod_mp_mosaic_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MODULE_IS_INITIALIZED      Local  118      L(4)            4           scalar                    72,118,119                        
 MOSAIC_INIT                Subr   116                                                                                              

Page 4           Source Listing                  MOSAIC_INIT
2021-06-01 08:53                                 mosaic2.F90

    125 ! </SUBROUTINE>
    126 
    127 !#######################################################################
    128 ! <FUNCTION NAME="get_mosaic_xgrid_size">
    129 !   <OVERVIEW>
    130 !     return exchange grid size of mosaic xgrid file.
    131 !   </OVERVIEW>
    132 !   <DESCRIPTION>
    133 !     return exchange grid size of mosaic xgrid file.
    134 !   </DESCRIPTION>
    135 !   <TEMPLATE>
    136 !    nxgrid = get_mosaic_xgrid_size(xgrid_file)
    137 !   </TEMPLATE>
    138 !   <IN NAME="xgrid_file" TYPE="character(len=*)">
    139 !     The file that contains exchange grid information.
    140 !   </IN>
    141   function get_mosaic_xgrid_size(fileobj)
    142     type(FmsNetcdfFile_t), intent(in) :: fileobj
    143     integer                           :: get_mosaic_xgrid_size
    144 
    145     call get_dimension_size(fileobj, "ncells", get_mosaic_xgrid_size)
    146 
    147     return
    148 
    149   end function get_mosaic_xgrid_size


ENTRY POINTS

  Name                                             
                                                   
 mosaic2_mod_mp_get_mosaic_xgrid_size_             

Page 5           Source Listing                  GET_MOSAIC_XGRID_SIZE
2021-06-01 08:53 Symbol Table                    mosaic2.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILEOBJ                    Dummy  141      FMSNETCDFFILE_T 872         scalar   ARG,IN           145                               
 FMSNETCDFFILE_T            Type   142                                  scalar                    43,142,178,242,267,304,309,384,677
 GET_DIMENSION_SIZE         Subr   145                                           PRIV             43,145,245,272,323,324            
 GET_MOSAIC_XGRID_SIZE      Func   141      I(4)            4           scalar                                                      

Page 6           Source Listing                  GET_MOSAIC_XGRID_SIZE
2021-06-01 08:53                                 mosaic2.F90

    150 ! </FUNCTION>
    151 !#######################################################################
    152 ! <SUBROUTINE NAME="get_mosaic_xgrid">
    153 !   <OVERVIEW>
    154 !     get exchange grid information from mosaic xgrid file.
    155 !   </OVERVIEW>
    156 !   <DESCRIPTION>
    157 !     get exchange grid information from mosaic xgrid file.
    158 !   </DESCRIPTION>
    159 !   <TEMPLATE>
    160 !     call get_mosaic_xgrid(fileobj, nxgrid, i1, j1, i2, j2, area)
    161 !   </TEMPLATE>
    162 !   <IN NAME="xgrid_file" TYPE="character(len=*)">
    163 !     The file that contains exchange grid information.
    164 !   </IN>
    165 !   <INOUT NAME="nxgrid" TYPE="integer">
    166 !     number of exchange grid in xgrid_file
    167 !   </INOUT>
    168 !   <INOUT NAME="i1, j1" TYPE="integer, dimension(:)">
    169 !     i and j-index in grid 1 of exchange grid.
    170 !   </INOUT>
    171 !   <INOUT NAME="i2, j2" TYPE="integer, dimension(:)">
    172 !     i and j-index in grid 2 of exchange grid.
    173 !   </INOUT>
    174 !   <INOUT NAME="area" TYPE="real, dimension(:)">
    175 !     area of the exchange grid. The area is scaled to represent unit earth area.
    176 !   </INOUT>
    177   subroutine get_mosaic_xgrid(fileobj, i1, j1, i2, j2, area, ibegin, iend)
    178     type(FmsNetcdfFile_t), intent(in) :: fileobj
    179     integer,       intent(inout) :: i1(:), j1(:), i2(:), j2(:)
    180     real,          intent(inout) :: area(:)
    181     integer, optional, intent(in) :: ibegin, iend
    182 
    183     integer                            :: start(4), nread(4), istart
    184     real,    dimension(2, size(i1(:))) :: tile1_cell, tile2_cell
    185     integer                            :: nxgrid, n
    186     real                               :: garea
    187     real                               :: get_global_area;
    188 
    189     garea = get_global_area();
    190 
    191 ! When start and nread present, make sure nread(1) is the same as the size of the data
    192     if(present(ibegin) .and. present(iend)) then
    193        istart = ibegin
    194        nxgrid = iend - ibegin + 1
    195        if(nxgrid .NE. size(i1(:))) call mpp_error(FATAL, "get_mosaic_xgrid: nxgrid .NE. size(i1(:))")
    196        if(nxgrid .NE. size(j1(:))) call mpp_error(FATAL, "get_mosaic_xgrid: nxgrid .NE. size(j1(:))")
    197        if(nxgrid .NE. size(i2(:))) call mpp_error(FATAL, "get_mosaic_xgrid: nxgrid .NE. size(i2(:))")
    198        if(nxgrid .NE. size(j2(:))) call mpp_error(FATAL, "get_mosaic_xgrid: nxgrid .NE. size(j2(:))")
    199        if(nxgrid .NE. size(area(:))) call mpp_error(FATAL, "get_mosaic_xgrid: nxgrid .NE. size(area(:))")
    200     else
    201        istart = 1
    202        nxgrid = size(i1(:))
    203     endif
    204 
    205     start  = 1; nread = 1
    206     start(1) = istart; nread(1) = nxgrid

Page 7           Source Listing                  GET_MOSAIC_XGRID
2021-06-01 08:53                                 mosaic2.F90

    207     call read_data(fileobj, 'xgrid_area', area, corner=start, edge_lengths=nread)
    208     start = 1; nread = 1
    209     nread(1) = 2
    210     start(2) = istart; nread(2) = nxgrid
    211     call read_data(fileobj, 'tile1_cell', tile1_cell, corner=start, edge_lengths=nread)
    212     call read_data(fileobj, 'tile2_cell', tile2_cell, corner=start, edge_lengths=nread)
    213 
    214      do n = 1, nxgrid
    215        i1(n) = tile1_cell(1,n)
    216        j1(n) = tile1_cell(2,n)
    217        i2(n) = tile2_cell(1,n)
    218        j2(n) = tile2_cell(2,n)
    219        area(n) = area(n)/garea
    220     end do
    221 
    222     return
    223 
    224   end subroutine get_mosaic_xgrid


ENTRY POINTS

  Name                                        
                                              
 mosaic2_mod_mp_get_mosaic_xgrid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AREA                       Dummy  177      R(8)            8     1     1        ARG,INOUT        199,207,219                       
 COMPRESSED_READ_1D         Subr   207                                           PRIV             207,398,403,404,692               
 COMPRESSED_READ_2D         Subr   211                                           PRIV             211,212                           
 FATAL                      Param  195      I(4)            4           scalar   PRIV             40,195,196,197,198,199,313,321,326
                                                                                                  ,327,408,419,431,443,447,450,453,4
                                                                                                  56,459,462,465,468,476,478,480,514
                                                                                                  ,556,558,597,599,646,654          
 FILEOBJ                    Dummy  177      FMSNETCDFFILE_T 872         scalar   ARG,IN           207,211,212                       
 GAREA                      Local  186      R(8)            8           scalar                    189,219                           
 GET_GLOBAL_AREA            Func   187      R(8)            8           scalar                    189                               
 GET_MOSAIC_XGRID           Subr   177                                                                                              
 I1                         Dummy  177      I(4)            4     1     1        ARG,INOUT        195,202,215                       
 I2                         Dummy  177      I(4)            4     1     1        ARG,INOUT        197,217                           
 IBEGIN                     Dummy  177      I(4)            4           scalar   ARG,IN           192,193,194                       
 IEND                       Dummy  177      I(4)            4           scalar   ARG,IN           192,194                           
 ISTART                     Local  183      I(4)            4           scalar                    193,201,206,210                   
 J1                         Dummy  177      I(4)            4     1     1        ARG,INOUT        196,216                           
 J2                         Dummy  177      I(4)            4     1     1        ARG,INOUT        198,218                           
 MPP_ERROR                  Local  195                                  scalar   PRIV             40,195,196,197,198,199,313,321,326
                                                                                                  ,327,408,419,431,443,447,450,453,4
                                                                                                  56,459,462,465,468,476,478,480,514
                                                                                                  ,556,558,597,599,646,654          
 MPP_ERROR_BASIC            Subr   195                                           PRIV             195,196,197,198,199,313,321,326,32
                                                                                                  7,408,419,431,443,447,450,453,456,
                                                                                                  459,462,465,468,476,478,480,514,55
                                                                                                  6,558,597,599,646,654             

Page 8           Source Listing                  GET_MOSAIC_XGRID
2021-06-01 08:53 Symbol Table                    mosaic2.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 N                          Local  185      I(4)            4           scalar                    214,215,216,217,218,219           
 NREAD                      Local  183      I(4)            4     1     4        TGT              205,206,207,208,209,210,211,212   
 NXGRID                     Local  185      I(4)            4           scalar                    194,195,196,197,198,199,202,206,21
                                                                                                  0,214                             
 PRESENT                    Func   192                                  scalar                    192                               
 READ_DATA                  Local  207                                  scalar   PRIV             44,207,211,212,317,398,403,404,692
 SIZE                       Func   195                                  scalar                    195,196,197,198,199,202           
 START                      Local  183      I(4)            4     1     4        TGT              205,206,207,208,210,211,212       
 TILE1_CELL                 Local  184      R(8)            8     2     0        TGT              211,215,216                       
 TILE2_CELL                 Local  184      R(8)            8     2     0        TGT              212,217,218                       

Page 9           Source Listing                  GET_MOSAIC_XGRID
2021-06-01 08:53                                 mosaic2.F90

    225 ! </SUBROUTINE>
    226 
    227 !###############################################################################
    228 ! <SUBROUTINE NAME="get_mosaic_ntiles">
    229 !   <OVERVIEW>
    230 !     get number of tiles in the mosaic_file.
    231 !   </OVERVIEW>
    232 !   <DESCRIPTION>
    233 !     get number of tiles in the mosaic_file.
    234 !   </DESCRIPTION>
    235 !   <TEMPLATE>
    236 !     ntiles = get_mosaic_ntiles( mosaic_file)
    237 !   </TEMPLATE>
    238 !   <IN NAME="mosaic_file" TYPE="character(len=*)">
    239 !     The file that contains mosaic information.
    240 !   </IN>
    241   function get_mosaic_ntiles(fileobj)
    242     type(FmsNetcdfFile_t), intent(in) :: fileobj
    243     integer                           :: get_mosaic_ntiles
    244 
    245     call get_dimension_size(fileobj, "ntiles", get_mosaic_ntiles)
    246 
    247     return
    248 
    249   end function get_mosaic_ntiles


ENTRY POINTS

  Name                                         
                                               
 mosaic2_mod_mp_get_mosaic_ntiles_             

Page 10          Source Listing                  GET_MOSAIC_NTILES
2021-06-01 08:53 Symbol Table                    mosaic2.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILEOBJ                    Dummy  241      FMSNETCDFFILE_T 872         scalar   ARG,IN           245                               
 GET_MOSAIC_NTILES          Func   241      I(4)            4           scalar                                                      

Page 11          Source Listing                  GET_MOSAIC_NTILES
2021-06-01 08:53                                 mosaic2.F90

    250 ! </SUBROUTINE>
    251 
    252 !###############################################################################
    253 ! <SUBROUTINE NAME="get_mosaic_ncontacts">
    254 !   <OVERVIEW>
    255 !     get number of contacts in the mosaic_file.
    256 !   </OVERVIEW>
    257 !   <DESCRIPTION>
    258 !     get number of contacts in the mosaic_file.
    259 !   </DESCRIPTION>
    260 !   <TEMPLATE>
    261 !     ntiles = get_mosaic_ncontacts( mosaic_file)
    262 !   </TEMPLATE>
    263 !   <IN NAME="mosaic_file" TYPE="character(len=*)">
    264 !     The file that contains mosaic information.
    265 !   </IN>
    266   function get_mosaic_ncontacts(fileobj)
    267     type(FmsNetcdfFile_t), intent(in) :: fileobj
    268     integer                           :: get_mosaic_ncontacts
    269 
    270 
    271     if(variable_exists(fileobj, "contacts") ) then
    272       call get_dimension_size(fileobj, "ncontact", get_mosaic_ncontacts)
    273     else
    274       get_mosaic_ncontacts = 0
    275     endif
    276 
    277     return
    278 
    279   end function get_mosaic_ncontacts

Page 12          Source Listing                  GET_MOSAIC_NCONTACTS
2021-06-01 08:53 Entry Points                    mosaic2.F90



ENTRY POINTS

  Name                                            
                                                  
 mosaic2_mod_mp_get_mosaic_ncontacts_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILEOBJ                    Dummy  266      FMSNETCDFFILE_T 872         scalar   ARG,IN           271,272                           
 GET_MOSAIC_NCONTACTS       Func   266      I(4)            4           scalar                                                      
 VARIABLE_EXISTS            Func   271      L(4)            4           scalar   PRIV             44,271                            

Page 13          Source Listing                  GET_MOSAIC_NCONTACTS
2021-06-01 08:53                                 mosaic2.F90

    280 ! </SUBROUTINE>
    281 
    282 
    283 !###############################################################################
    284 ! <SUBROUTINE NAME="get_mosaic_grid_sizes">
    285 !   <OVERVIEW>
    286 !     get grid size of each tile from mosaic_file
    287 !   </OVERVIEW>
    288 !   <DESCRIPTION>
    289 !     get grid size of each tile from mosaic_file
    290 !   </DESCRIPTION>
    291 !   <TEMPLATE>
    292 !     call get_mosaic_grid_sizes(mosaic_file, nx, ny)
    293 !   </TEMPLATE>
    294 !   <IN NAME="mosaic_file" TYPE="character(len=*)">
    295 !     The file that contains mosaic information.
    296 !   </IN>
    297 !   <INOUT NAME="nx" TYPE="integer, dimension(:)">
    298 !     List of grid size in x-direction of each tile.
    299 !   </INOUT>
    300 !   <INOUT NAME="ny" TYPE="integer, dimension(:)">
    301 !     List of grid size in y-direction of each tile.
    302 !   </INOUT>
    303   subroutine get_mosaic_grid_sizes( fileobj, nx, ny)
    304     type(FmsNetcdfFile_t), intent(in)    :: fileobj
    305     integer, dimension(:), intent(inout) :: nx, ny
    306 
    307     character(len=MAX_FILE) :: gridfile
    308     integer                 :: ntiles, n
    309     type(FmsNetcdfFile_t)   :: gridobj
    310 
    311     ntiles = get_mosaic_ntiles(fileobj)
    312     if(ntiles .NE. size(nx(:)) .OR. ntiles .NE. size(ny(:)) ) then
    313       call mpp_error(FATAL, "get_mosaic_grid_sizes: size of nx/ny does not equal to ntiles")
    314     endif
    315 
    316     do n = 1, ntiles
    317       call read_data(fileobj, 'gridfiles', gridfile, corner=n)
    318       gridfile = grid_dir//trim(gridfile)
    319 
    320       if(.not. open_file(gridobj, gridfile, 'read')) then
    321          call mpp_error(FATAL, 'mosaic_mod(get_mosaic_grid_sizes):Error in opening file '//trim(gridfile))
    322       endif
    323       call get_dimension_size(gridobj, "nx", nx(n))
    324       call get_dimension_size(gridobj, "ny", ny(n))
    325       call close_file(gridobj)
    326       if(mod(nx(n),x_refine) .NE. 0) call mpp_error(FATAL, "get_mosaic_grid_sizes: nx is not divided by x_refine");
    327       if(mod(ny(n),y_refine) .NE. 0) call mpp_error(FATAL, "get_mosaic_grid_sizes: ny is not divided by y_refine");
    328       nx(n) = nx(n)/x_refine;
    329       ny(n) = ny(n)/y_refine;
    330     enddo
    331 
    332     return
    333 
    334   end subroutine get_mosaic_grid_sizes

Page 14          Source Listing                  GET_MOSAIC_GRID_SIZES
2021-06-01 08:53 Entry Points                    mosaic2.F90



ENTRY POINTS

  Name                                             
                                                   
 mosaic2_mod_mp_get_mosaic_grid_sizes_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOSE_FILE                 Local  325                                  scalar   PRIV             43,325                            
 COMPRESSED_READ_0D         Subr   317                                           PRIV             317                               
 FILEOBJ                    Dummy  303      FMSNETCDFFILE_T 872         scalar   ARG,IN           311,317                           
 GET_MOSAIC_GRID_SIZES      Subr   303                                                                                              
 GET_MOSAIC_NTILES          Func   311      I(4)            4           scalar                    61,245,311,396,685                
 GRIDFILE                   Local  307      CHAR            1024        scalar                    317,318,320,321                   
 GRIDOBJ                    Local  309      FMSNETCDFFILE_T 872         scalar                    320,323,324,325                   
 GRID_DIR                   Param  318      CHAR            6           scalar                    318                               
 MAX_FILE                   Param  307      I(4)            4           scalar                    307                               
 MOD                        Func   326                                  scalar                    326,327                           
 N                          Local  308      I(4)            4           scalar                    316,317,323,324,326,327,328,329   
 NETCDF_FILE_CLOSE_WRAP     Subr   325                                           PRIV             325                               
 NETCDF_FILE_OPEN_WRAP      Func   320      L(4)            4           scalar   PRIV             320                               
 NTILES                     Local  308      I(4)            4           scalar                    311,312,316                       
 NX                         Dummy  303      I(4)            4     1     1        ARG,INOUT        312,323,326,328                   
 NY                         Dummy  303      I(4)            4     1     1        ARG,INOUT        312,324,327,329                   
 OPEN_FILE                  Local  320                                  scalar   PRIV             43,320                            
 SIZE                       Func   312                                  scalar                    312                               
 TRIM                       Func   318                                  scalar                    318,321                           
 X_REFINE                   Param  326      I(4)            4           scalar                    326,328,471,473                   
 Y_REFINE                   Param  327      I(4)            4           scalar                    327,329,472,474                   

Page 15          Source Listing                  GET_MOSAIC_GRID_SIZES
2021-06-01 08:53                                 mosaic2.F90

    335 ! </SUBROUTINE>
    336 
    337 !###############################################################################
    338 ! <SUBROUTINE NAME="get_mosaic_contact">
    339 !   <OVERVIEW>
    340 !     get contact information from mosaic_file
    341 !   </OVERVIEW>
    342 !   <DESCRIPTION>
    343 !     get contact information from mosaic_file
    344 !   </DESCRIPTION>
    345 !   <TEMPLATE>
    346 !     call get_mosaic_contact(mosaic_file, tile1, tile2, istart1, iend1, jstart1, jend1,
    347 !                             istart2, iend2, jstart2, jend2)
    348 !   </TEMPLATE>
    349 !   <IN NAME="mosaic_file" TYPE="character(len=*)">
    350 !     The file that contains mosaic information.
    351 !   </IN>
    352 !   <INOUT NAME="tile1" TYPE="integer, dimension(:)">
    353 !     list tile number in tile 1 of each contact.
    354 !   </INOUT>
    355 !   <INOUT NAME="tile1" TYPE="integer, dimension(:)">
    356 !     list tile number in tile 2 of each contact.
    357 !   </INOUT>
    358 !   <INOUT NAME="istart1" TYPE="integer, dimension(:)">
    359 !     list starting i-index in tile 1 of each contact.
    360 !   </INOUT>
    361 !   <INOUT NAME="iend1" TYPE="integer, dimension(:)">
    362 !     list ending i-index in tile 1 of each contact.
    363 !   </INOUT>
    364 !   <INOUT NAME="jstart1" TYPE="integer, dimension(:)">
    365 !     list starting j-index in tile 1 of each contact.
    366 !   </INOUT>
    367 !   <INOUT NAME="jend1" TYPE="integer, dimension(:)">
    368 !     list ending j-index in tile 1 of each contact.
    369 !   </INOUT>
    370 !   <INOUT NAME="istart2" TYPE="integer, dimension(:)">
    371 !     list starting i-index in tile 2 of each contact.
    372 !   </INOUT>
    373 !   <INOUT NAME="iend2" TYPE="integer, dimension(:)">
    374 !     list ending i-index in tile 2 of each contact.
    375 !   </INOUT>
    376 !   <INOUT NAME="jstart2" TYPE="integer, dimension(:)">
    377 !     list starting j-index in tile 2 of each contact.
    378 !   </INOUT>
    379 !   <INOUT NAME="jend2" TYPE="integer, dimension(:)">
    380 !     list ending j-index in tile 2 of each contact.
    381 !   </INOUT>
    382   subroutine get_mosaic_contact( fileobj, tile1, tile2, istart1, iend1, jstart1, jend1, &
    383                                    istart2, iend2, jstart2, jend2)
    384     type(FmsNetcdfFile_t),    intent(in) :: fileobj
    385     integer, dimension(:), intent(inout) :: tile1, tile2
    386     integer, dimension(:), intent(inout) :: istart1, iend1, jstart1, jend1
    387     integer, dimension(:), intent(inout) :: istart2, iend2, jstart2, jend2
    388     character(len=MAX_NAME), allocatable :: gridtiles(:)
    389     character(len=MAX_NAME), allocatable :: contacts(:)
    390     character(len=MAX_NAME), allocatable :: contacts_index(:)
    391     character(len=MAX_NAME)              :: strlist(8)

Page 16          Source Listing                  GET_MOSAIC_CONTACT
2021-06-01 08:53                                 mosaic2.F90

    392     integer :: ntiles, n, m, ncontacts, nstr, ios
    393     integer :: i1_type, j1_type, i2_type, j2_type
    394     logical :: found
    395 
    396     ntiles = get_mosaic_ntiles(fileobj)
    397     allocate(gridtiles(ntiles))
    398     call read_data(fileobj, 'gridtiles', gridtiles)
    399 
    400     ncontacts = get_mosaic_ncontacts(fileobj)
    401     if(ncontacts>0) then
    402        allocate(contacts(ncontacts), contacts_index(ncontacts))
    403        call read_data(fileobj, "contacts", contacts)
    404        call read_data(fileobj, "contact_index", contacts_index)
    405     endif
    406     do n = 1, ncontacts
    407       nstr = parse_string(contacts(n), ":", strlist)
    408       if(nstr .NE. 4) call mpp_error(FATAL, &
    409          "mosaic_mod(get_mosaic_contact): number of elements in contact seperated by :/:: should be 4")
    410       found = .false.
    411       do m = 1, ntiles
    412         if(trim(gridtiles(m)) == trim(strlist(2)) ) then !found the tile name
    413           found = .true.
    414           tile1(n) = m
    415           exit
    416         endif
    417       enddo
    418 
    419       if(.not.found) call mpp_error(FATAL, &
    420          "mosaic_mod(get_mosaic_contact):the first tile name specified in contact is not found in tile list")
    421 
    422       found = .false.
    423       do m = 1, ntiles
    424         if(trim(gridtiles(m)) == trim(strlist(4)) ) then !found the tile name
    425           found = .true.
    426           tile2(n) = m
    427           exit
    428         endif
    429       enddo
    430 
    431       if(.not.found) call mpp_error(FATAL, &
    432          "mosaic_mod(get_mosaic_contact):the second tile name specified in contact is not found in tile list")
    433 
    434       nstr = parse_string(contacts_index(n), ":,", strlist)
    435       if(nstr .NE. 8) then
    436         if(mpp_pe()==mpp_root_pe()) then
    437           print*, "nstr is ", nstr
    438           print*, "contacts is ", contacts_index(n)
    439           do m = 1, nstr
    440             print*, "strlist is ", trim(strlist(m))
    441           enddo
    442         endif
    443         call mpp_error(FATAL, &
    444                "mosaic_mod(get_mosaic_contact): number of elements in contact_index seperated by :/, should be 8")
    445       endif
    446       read(strlist(1), *, iostat=ios) istart1(n)
    447       if(ios .NE. 0) call mpp_error(FATAL, &
    448          "mosaic_mod(get_mosaic_contact): Error in reading istart1")

Page 17          Source Listing                  GET_MOSAIC_CONTACT
2021-06-01 08:53                                 mosaic2.F90

    449       read(strlist(2), *, iostat=ios) iend1(n)
    450       if(ios .NE. 0) call mpp_error(FATAL, &
    451          "mosaic_mod(get_mosaic_contact): Error in reading iend1")
    452       read(strlist(3), *, iostat=ios) jstart1(n)
    453       if(ios .NE. 0) call mpp_error(FATAL, &
    454          "mosaic_mod(get_mosaic_contact): Error in reading jstart1")
    455       read(strlist(4), *, iostat=ios) jend1(n)
    456       if(ios .NE. 0) call mpp_error(FATAL, &
    457          "mosaic_mod(get_mosaic_contact): Error in reading jend1")
    458       read(strlist(5), *, iostat=ios) istart2(n)
    459       if(ios .NE. 0) call mpp_error(FATAL, &
    460          "mosaic_mod(get_mosaic_contact): Error in reading istart2")
    461       read(strlist(6), *, iostat=ios) iend2(n)
    462       if(ios .NE. 0) call mpp_error(FATAL, &
    463          "mosaic_mod(get_mosaic_contact): Error in reading iend2")
    464       read(strlist(7), *, iostat=ios) jstart2(n)
    465       if(ios .NE. 0) call mpp_error(FATAL, &
    466          "mosaic_mod(get_mosaic_contact): Error in reading jstart2")
    467       read(strlist(8), *, iostat=ios) jend2(n)
    468       if(ios .NE. 0) call mpp_error(FATAL, &
    469          "mosaic_mod(get_mosaic_contact): Error in reading jend2")
    470 
    471       i1_type = transfer_to_model_index(istart1(n), iend1(n), x_refine)
    472       j1_type = transfer_to_model_index(jstart1(n), jend1(n), y_refine)
    473       i2_type = transfer_to_model_index(istart2(n), iend2(n), x_refine)
    474       j2_type = transfer_to_model_index(jstart2(n), jend2(n), y_refine)
    475 
    476       if( i1_type == 0 .AND. j1_type == 0 ) call mpp_error(FATAL, &
    477          "mosaic_mod(get_mosaic_contact): istart1==iend1 and jstart1==jend1")
    478       if( i2_type == 0 .AND. j2_type == 0 ) call mpp_error(FATAL, &
    479          "mosaic_mod(get_mosaic_contact): istart2==iend2 and jstart2==jend2")
    480       if( i1_type + j1_type .NE. i2_type + j2_type ) call mpp_error(FATAL, &
    481          "mosaic_mod(get_mosaic_contact): It is not a line or overlap contact")
    482 
    483    enddo
    484 
    485    deallocate(gridtiles)
    486    if(ncontacts>0) deallocate(contacts, contacts_index)
    487 
    488   end subroutine get_mosaic_contact

Page 18          Source Listing                  GET_MOSAIC_CONTACT
2021-06-01 08:53 Entry Points                    mosaic2.F90



ENTRY POINTS

  Name                                          
                                                
 mosaic2_mod_mp_get_mosaic_contact_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONTACTS                   Local  389      CHAR            256   1     1        ALC              402,403,407,486                   
 CONTACTS_INDEX             Local  390      CHAR            256   1     1        ALC              402,404,434,438,486               
 FILEOBJ                    Dummy  382      FMSNETCDFFILE_T 872         scalar   ARG,IN           396,398,400,403,404               
 FOUND                      Local  394      L(4)            4           scalar                    410,413,419,422,425,431           
 GET_MOSAIC_CONTACT         Subr   382                                                                                              
 GET_MOSAIC_NCONTACTS       Func   400      I(4)            4           scalar                    62,272,274,400                    
 GRIDTILES                  Local  388      CHAR            256   1     1        ALC              397,398,412,424,485               
 I1_TYPE                    Local  393      I(4)            4           scalar                    471,476,480                       
 I2_TYPE                    Local  393      I(4)            4           scalar                    473,478,480                       
 IEND1                      Dummy  382      I(4)            4     1     1        ARG,INOUT        449,471                           
 IEND2                      Dummy  383      I(4)            4     1     1        ARG,INOUT        461,473                           
 IOS                        Local  392      I(4)            4           scalar                    446,447,449,450,452,453,455,456,45
                                                                                                  8,459,461,462,464,465,467,468     
 ISTART1                    Dummy  382      I(4)            4     1     1        ARG,INOUT        446,471                           
 ISTART2                    Dummy  383      I(4)            4     1     1        ARG,INOUT        458,473                           
 J1_TYPE                    Local  393      I(4)            4           scalar                    472,476,480                       
 J2_TYPE                    Local  393      I(4)            4           scalar                    474,478,480                       
 JEND1                      Dummy  382      I(4)            4     1     1        ARG,INOUT        455,472                           
 JEND2                      Dummy  383      I(4)            4     1     1        ARG,INOUT        467,474                           
 JSTART1                    Dummy  382      I(4)            4     1     1        ARG,INOUT        452,472                           
 JSTART2                    Dummy  383      I(4)            4     1     1        ARG,INOUT        464,474                           
 M                          Local  392      I(4)            4           scalar                    411,412,414,423,424,426,439,440   
 MAX_NAME                   Param  388      I(4)            4           scalar                    388,389,390,391                   
 MPP_PE                     Func   436      I(4)            4           scalar   PRIV             40,436                            
 MPP_ROOT_PE                Func   436      I(4)            4           scalar   PRIV             40,436                            
 N                          Local  392      I(4)            4           scalar                    406,407,414,426,434,438,446,449,45
                                                                                                  2,455,458,461,464,467,471,472,473,
                                                                                                  474                               
 NCONTACTS                  Local  392      I(4)            4           scalar                    400,401,402,406,486               
 NSTR                       Local  392      I(4)            4           scalar                    407,408,434,435,437,439           
 NTILES                     Local  392      I(4)            4           scalar                    396,397,411,423                   
 PARSE_STRING@0             Local  407      I(4)            4           scalar                                                      
 STRLIST                    Local  391      CHAR            256   1     8        TGT              407,412,424,434,440,446,449,452,45
                                                                                                  5,458,461,464,467                 
 TILE1                      Dummy  382      I(4)            4     1     1        ARG,INOUT        414                               
 TILE2                      Dummy  382      I(4)            4     1     1        ARG,INOUT        426                               
 TRANSFER_TO_MODEL_INDEX@0  Local  471      I(4)            4           scalar                                                      
 TRIM                       Func   412                                  scalar                    412,424,440                       

Page 19          Source Listing                  GET_MOSAIC_CONTACT
2021-06-01 08:53                                 mosaic2.F90

    489 ! </SUBROUTINE>
    490 
    491 
    492 function transfer_to_model_index(istart, iend, refine_ratio)
    493    integer, intent(inout) :: istart, iend
    494    integer                :: refine_ratio
    495    integer                :: transfer_to_model_index
    496    integer                :: istart_in, iend_in
    497 
    498    istart_in = istart
    499    iend_in = iend
    500 
    501    if( istart_in == iend_in ) then
    502       transfer_to_model_index = 0
    503       istart = (istart_in + 1)/refine_ratio
    504       iend   = istart
    505    else
    506       transfer_to_model_index = 1
    507       if( iend_in > istart_in ) then
    508         istart = istart_in + 1
    509         iend   = iend_in
    510       else
    511         istart = istart_in
    512         iend   = iend_in + 1
    513       endif
    514       if( mod(istart, refine_ratio) .NE. 0 .OR. mod(iend,refine_ratio) .NE. 0) call mpp_error(FATAL, &
    515          "mosaic_mod(transfer_to_model_index): mismatch between refine_ratio and istart/iend")
    516       istart = istart/refine_ratio
    517       iend = iend/refine_ratio
    518 
    519    endif
    520 
    521    return
    522 
    523 end function transfer_to_model_index

Page 20          Source Listing                  TRANSFER_TO_MODEL_INDEX
2021-06-01 08:53 Entry Points                    mosaic2.F90



ENTRY POINTS

  Name                                               
                                                     
 mosaic2_mod_mp_transfer_to_model_index_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IEND                       Dummy  492      I(4)            4           scalar   ARG,INOUT        499,504,509,512,514,517           
 IEND_IN                    Local  496      I(4)            4           scalar                    499,501,507,509,512               
 ISTART                     Dummy  492      I(4)            4           scalar   ARG,INOUT        498,503,504,508,511,514,516       
 ISTART_IN                  Local  496      I(4)            4           scalar                    498,501,503,507,508,511           
 MOD                        Func   514                                  scalar                    514                               
 REFINE_RATIO               Dummy  492      I(4)            4           scalar   ARG,INOUT        503,514,516,517                   
 TRANSFER_TO_MODEL_INDEX    Func   492      I(4)            4           scalar                    471,472,473,474,502,506           

Page 21          Source Listing                  TRANSFER_TO_MODEL_INDEX
2021-06-01 08:53                                 mosaic2.F90

    524 
    525 !###############################################################################
    526 ! <SUBROUTINE NAME="calc_mosaic_grid_area">
    527 !   <OVERVIEW>
    528 !     calculate grid cell area.
    529 !   </OVERVIEW>
    530 !   <DESCRIPTION>
    531 !     calculate the grid cell area. The purpose of this routine is to make
    532 !     sure the consistency between model grid area and exchange grid area.
    533 !   </DESCRIPTION>
    534 !   <TEMPLATE>
    535 !     call calc_mosaic_grid_area(lon, lat, area)
    536 !   </TEMPLATE>
    537 !   <IN NAME="lon" TYPE="real, dimension(:,:)">
    538 !     geographical longitude of grid cell vertices.
    539 !   </IN>
    540 !   <IN NAME="lat" TYPE="real, dimension(:,:)">
    541 !     geographical latitude of grid cell vertices.
    542 !   </IN>
    543 !   <INOUT NAME="area" TYPE="real, dimension(:,:)">
    544 !     grid cell area.
    545 !   </INOUT>
    546   subroutine calc_mosaic_grid_area(lon, lat, area)
    547      real, dimension(:,:), intent(in)    :: lon
    548      real, dimension(:,:), intent(in)    :: lat
    549      real, dimension(:,:), intent(inout) :: area
    550      integer                             :: nlon, nlat
    551 
    552      nlon = size(area,1)
    553      nlat = size(area,2)
    554 ! make sure size of lon, lat and area are consitency
    555      if( size(lon,1) .NE. nlon+1 .OR. size(lat,1) .NE. nlon+1 ) &
    556         call mpp_error(FATAL, "mosaic_mod: size(lon,1) and size(lat,1) should equal to size(area,1)+1")
    557      if( size(lon,2) .NE. nlat+1 .OR. size(lat,2) .NE. nlat+1 ) &
    558         call mpp_error(FATAL, "mosaic_mod: size(lon,2) and size(lat,2) should equal to size(area,2)+1")
    559 
    560      call get_grid_area( nlon, nlat, lon, lat, area)
    561 
    562   end subroutine calc_mosaic_grid_area

Page 22          Source Listing                  CALC_MOSAIC_GRID_AREA
2021-06-01 08:53 Entry Points                    mosaic2.F90



ENTRY POINTS

  Name                                             
                                                   
 mosaic2_mod_mp_calc_mosaic_grid_area_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AREA                       Dummy  546      R(8)            8     2     1        ARG,INOUT        552,553,560                       
 CALC_MOSAIC_GRID_AREA      Subr   546                                                                                              
 GET_GRID_AREA              Subr   560                                                            560                               
 LAT                        Dummy  546      R(8)            8     2     1        ARG,IN           555,557,560                       
 LON                        Dummy  546      R(8)            8     2     1        ARG,IN           555,557,560                       
 NLAT                       Local  550      I(4)            4           scalar                    553,557,560                       
 NLON                       Local  550      I(4)            4           scalar                    552,555,560                       
 SIZE                       Func   552                                  scalar                    552,553,555,557                   

Page 23          Source Listing                  CALC_MOSAIC_GRID_AREA
2021-06-01 08:53                                 mosaic2.F90

    563 ! </SUBROUTINE>
    564 
    565 !###############################################################################
    566 ! <SUBROUTINE NAME="calc_mosaic_grid_great_circle_area">
    567 !   <OVERVIEW>
    568 !     calculate grid cell area using great cirlce algorithm
    569 !   </OVERVIEW>
    570 !   <DESCRIPTION>
    571 !     calculate the grid cell area. The purpose of this routine is to make
    572 !     sure the consistency between model grid area and exchange grid area.
    573 !   </DESCRIPTION>
    574 !   <TEMPLATE>
    575 !     call calc_mosaic_grid_great_circle_area(lon, lat, area)
    576 !   </TEMPLATE>
    577 !   <IN NAME="lon" TYPE="real, dimension(:,:)">
    578 !     geographical longitude of grid cell vertices.
    579 !   </IN>
    580 !   <IN NAME="lat" TYPE="real, dimension(:,:)">
    581 !     geographical latitude of grid cell vertices.
    582 !   </IN>
    583 !   <INOUT NAME="area" TYPE="real, dimension(:,:)">
    584 !     grid cell area.
    585 !   </INOUT>
    586   subroutine calc_mosaic_grid_great_circle_area(lon, lat, area)
    587      real, dimension(:,:), intent(in)    :: lon
    588      real, dimension(:,:), intent(in)    :: lat
    589      real, dimension(:,:), intent(inout) :: area
    590      integer                             :: nlon, nlat
    591 
    592 
    593      nlon = size(area,1)
    594      nlat = size(area,2)
    595 ! make sure size of lon, lat and area are consitency
    596      if( size(lon,1) .NE. nlon+1 .OR. size(lat,1) .NE. nlon+1 ) &
    597         call mpp_error(FATAL, "mosaic_mod: size(lon,1) and size(lat,1) should equal to size(area,1)+1")
    598      if( size(lon,2) .NE. nlat+1 .OR. size(lat,2) .NE. nlat+1 ) &
    599         call mpp_error(FATAL, "mosaic_mod: size(lon,2) and size(lat,2) should equal to size(area,2)+1")
    600 
    601      call get_grid_great_circle_area( nlon, nlat, lon, lat, area)
    602 
    603   end subroutine calc_mosaic_grid_great_circle_area

Page 24          Source Listing                  CALC_MOSAIC_GRID_GREAT_CIRCLE_AREA
2021-06-01 08:53 Entry Points                    mosaic2.F90



ENTRY POINTS

  Name                                                          
                                                                
 mosaic2_mod_mp_calc_mosaic_grid_great_circle_area_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AREA                       Dummy  586      R(8)            8     2     1        ARG,INOUT        593,594,601                       
 CALC_MOSAIC_GRID_GREAT_CIR                                                                                                         
 CLE_AREA                   Subr   586                                                                                              
 GET_GRID_GREAT_CIRCLE_AREA Subr   601                                                            601                               
 LAT                        Dummy  586      R(8)            8     2     1        ARG,IN           596,598,601                       
 LON                        Dummy  586      R(8)            8     2     1        ARG,IN           596,598,601                       
 NLAT                       Local  590      I(4)            4           scalar                    594,598,601                       
 NLON                       Local  590      I(4)            4           scalar                    593,596,601                       
 SIZE                       Func   593                                  scalar                    593,594,596,598                   

Page 25          Source Listing                  CALC_MOSAIC_GRID_GREAT_CIRCLE_AREA
2021-06-01 08:53                                 mosaic2.F90

    604 ! </SUBROUTINE>
    605 
    606 !#####################################################################
    607 ! This function check if a point (lon1,lat1) is inside a polygon (lon2(:), lat2(:))
    608 ! lon1, lat1, lon2, lat2 are in radians.
    609   function is_inside_polygon(lon1, lat1, lon2, lat2 )
    610      real, intent(in) :: lon1, lat1
    611      real, intent(in) :: lon2(:), lat2(:)
    612      logical          :: is_inside_polygon
    613      real, dimension(size(lon2(:))) :: x2, y2, z2
    614      integer                        :: npts, isinside
    615      integer                        :: inside_a_polygon
    616 
    617      npts = size(lon2(:))
    618 
    619      isinside = inside_a_polygon(lon1, lat1, npts, lon2, lat2)
    620      if(isinside == 1) then
    621         is_inside_polygon = .TRUE.
    622      else
    623         is_inside_polygon = .FALSE.
    624      endif
    625 
    626      return
    627 
    628   end function is_inside_polygon


ENTRY POINTS

  Name                                         
                                               
 mosaic2_mod_mp_is_inside_polygon_             

Page 26          Source Listing                  IS_INSIDE_POLYGON
2021-06-01 08:53 Symbol Table                    mosaic2.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INSIDE_A_POLYGON           Func   615      I(4)            4           scalar                    619                               
 ISINSIDE                   Local  614      I(4)            4           scalar                    619,620                           
 IS_INSIDE_POLYGON          Func   609      L(4)            4           scalar                                                      
 LAT1                       Dummy  609      R(8)            8           scalar   ARG,IN           619                               
 LAT2                       Dummy  609      R(8)            8     1     1        ARG,IN           619                               
 LON1                       Dummy  609      R(8)            8           scalar   ARG,IN           619                               
 LON2                       Dummy  609      R(8)            8     1     1        ARG,IN           617,619                           
 NPTS                       Local  614      I(4)            4           scalar                    617,619                           
 SIZE                       Func   617                                  scalar                    617                               
 X2                         Local  613      R(8)            8     1     0                                                           
 Y2                         Local  613      R(8)            8     1     0                                                           
 Z2                         Local  613      R(8)            8     1     0                                                           

Page 27          Source Listing                  IS_INSIDE_POLYGON
2021-06-01 08:53                                 mosaic2.F90

    629 
    630   function parse_string(string, set, value)
    631   character(len=*),  intent(in) :: string
    632   character(len=*),  intent(in) :: set
    633   character(len=*), intent(out) :: value(:)
    634   integer                       :: parse_string
    635   integer :: nelem, length, first, last
    636 
    637      nelem = size(value(:))
    638      length = len_trim(string)
    639 
    640      first = 1; last = 0
    641      parse_string = 0
    642 
    643      do while(first .LE. length)
    644        parse_string = parse_string + 1
    645        if(parse_string>nelem) then
    646          call mpp_error(FATAL, "mosaic_mod(parse_string) : number of element is greater than size(value(:))")
    647        endif
    648        last = first - 1 + scan(string(first:length), set)
    649        if(last == first-1 ) then  ! not found, end of string
    650          value(parse_string) = string(first:length)
    651          exit
    652        else
    653          if(last <= first) then
    654            call mpp_error(FATAL, "mosaic_mod(parse_string) : last <= first")
    655          endif
    656          value(parse_string) = string(first:(last-1))
    657          first = last + 1
    658 ! scan to make sure the next is not the character in the set
    659          do while (first == last+1)
    660            last = first - 1 + scan(string(first:length), set)
    661            if(last == first) then
    662              first = first+1
    663            else
    664              exit
    665            endif
    666          end do
    667        endif
    668      enddo
    669 
    670      return
    671 
    672   end function parse_string

Page 28          Source Listing                  PARSE_STRING
2021-06-01 08:53 Entry Points                    mosaic2.F90



ENTRY POINTS

  Name                                    
                                          
 mosaic2_mod_mp_parse_string_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIRST                      Local  635      I(4)            4           scalar                    640,643,648,649,650,653,656,657,65
                                                                                                  9,660,661,662                     
 LAST                       Local  635      I(4)            4           scalar                    640,648,649,653,656,657,659,660,66
                                                                                                  1                                 
 LENGTH                     Local  635      I(4)            4           scalar                    638,643,648,650,660               
 LEN_TRIM                   Func   638                                  scalar                    638                               
 NELEM                      Local  635      I(4)            4           scalar                    637,645                           
 PARSE_STRING               Func   630      I(4)            4           scalar                    407,434,641,644,645,650,656       
 SCAN                       Func   648                                  scalar                    648,660                           
 SET                        Dummy  630      CHAR                        scalar   ARG,IN           648,660                           
 SIZE                       Func   637                                  scalar                    637                               
 STRING                     Dummy  630      CHAR                        scalar   ARG,IN           638,648,650,656,660               
 VALUE                      Dummy  630      CHAR                  1     1        ARG,OUT          637,650,656                       

Page 29          Source Listing                  PARSE_STRING
2021-06-01 08:53                                 mosaic2.F90

    673 
    674 !#############################################################################
    675   subroutine get_mosaic_tile_grid(grid_file, fileobj, domain, tile_count)
    676     character(len=*), intent(out)          :: grid_file
    677     type(FmsNetcdfFile_t), intent(in)      :: fileobj
    678     type(domain2D),   intent(in)           :: domain
    679     integer,          intent(in), optional :: tile_count
    680     integer                                :: tile, ntileMe
    681     integer, dimension(:), allocatable     :: tile_id
    682     character(len=256), allocatable        :: filelist(:)
    683     integer :: ntiles
    684 
    685     ntiles = get_mosaic_ntiles(fileobj)
    686     allocate(filelist(ntiles))
    687     tile = 1
    688     if(present(tile_count)) tile = tile_count
    689     ntileMe = mpp_get_current_ntile(domain)
    690     allocate(tile_id(ntileMe))
    691     tile_id = mpp_get_tile_id(domain)
    692     call read_data(fileobj, "gridfiles", filelist)
    693     grid_file = 'INPUT/'//trim(filelist(tile_id(tile)))
    694     deallocate(tile_id, filelist)
    695 
    696   end subroutine get_mosaic_tile_grid


ENTRY POINTS

  Name                                            
                                                  
 mosaic2_mod_mp_get_mosaic_tile_grid_             

Page 30          Source Listing                  GET_MOSAIC_TILE_GRID
2021-06-01 08:53 Symbol Table                    mosaic2.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOMAIN                     Dummy  675      DOMAIN2D        752         scalar   ARG,IN           689,691                           
 DOMAIN2D                   Type   678                                  scalar   PRIV             41,678                            
 FILELIST                   Local  682      CHAR            256   1     1        ALC              686,692,693,694                   
 FILEOBJ                    Dummy  675      FMSNETCDFFILE_T 872         scalar   ARG,IN           685,692                           
 GET_MOSAIC_TILE_GRID       Subr   675                                                                                              
 GRID_FILE                  Dummy  675      CHAR                        scalar   ARG,OUT          693                               
 MPP_GET_CURRENT_NTILE      Func   689      I(4)            4           scalar   PRIV             41,689                            
 MPP_GET_TILE_ID            Func   691      I(4)            4     1     0        PRIV             41,691                            
 NTILEME                    Local  680      I(4)            4           scalar                    689,690                           
 NTILES                     Local  683      I(4)            4           scalar                    685,686                           
 PRESENT                    Func   688                                  scalar                    688                               
 TILE                       Local  680      I(4)            4           scalar                    687,688,693                       
 TILE_COUNT                 Dummy  675      I(4)            4           scalar   ARG,IN           688                               
 TILE_ID                    Local  681      I(4)            4     1     1        ALC              690,691,693,694                   
 TRIM                       Func   693                                  scalar                    693                               

Page 31          Source Listing                  GET_MOSAIC_TILE_GRID
2021-06-01 08:53                                 mosaic2.F90

    697 
    698 
    699 end module mosaic2_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALC_MOSAIC_GRID_AREA      Subr   68                                                             68                                
 CALC_MOSAIC_GRID_GREAT_CIR                                                                                                         
 CLE_AREA                   Subr   69                                                             69                                
 CONSTANTS_MOD              Module 42                                                             42                                
 FMS2_IO_MOD                Module 43                                                             43,44                             
 GET_MOSAIC_CONTACT         Subr   64                                                             64                                
 GET_MOSAIC_GRID_SIZES      Subr   63                                                             63                                
 GET_MOSAIC_NCONTACTS@0     Local  266      I(4)            4           scalar                                                      
 GET_MOSAIC_NTILES@0        Local  241      I(4)            4           scalar                                                      
 GET_MOSAIC_TILE_GRID       Subr   67                                                             67                                
 GET_MOSAIC_XGRID           Subr   66                                                             66                                
 GET_MOSAIC_XGRID_SIZE@0    Local  141      I(4)            4           scalar                                                      
 IS_INSIDE_POLYGON@0        Local  609      L(4)            4           scalar                                                      
 MOSAIC2_MOD                Module 20                                                                                               
 MPP_DOMAINS_MOD            Module 41                                                             41                                
 MPP_MOD                    Module 40                                                             40                                
 PI                         Param  42       R(8)            8           scalar   PRIV             42                                
 RADIUS                     Param  42       R(8)            8           scalar   PRIV             42                                
 VERSION                    Param  97       CHAR            7           scalar                                                      

Page 32          Source Listing                  GET_MOSAIC_TILE_GRID
2021-06-01 08:53 Subprograms/Common Blocks       mosaic2.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALC_MOSAIC_GRID_AREA      Subr   546                                                                                              
 CALC_MOSAIC_GRID_GREAT_CIR                                                                                                         
 CLE_AREA                   Subr   586                                                                                              
 GET_MOSAIC_CONTACT         Subr   382                                                                                              
 GET_MOSAIC_GRID_SIZES      Subr   303                                                                                              
 GET_MOSAIC_NCONTACTS       Func   266      I(4)            4           scalar                                                      
 GET_MOSAIC_NTILES          Func   241      I(4)            4           scalar                                                      
 GET_MOSAIC_TILE_GRID       Subr   675                                                                                              
 GET_MOSAIC_XGRID           Subr   177                                                                                              
 GET_MOSAIC_XGRID_SIZE      Func   141      I(4)            4           scalar                                                      
 IS_INSIDE_POLYGON          Func   609      L(4)            4           scalar                                                      
 MOSAIC2_MOD                Module 20                                                                                               
 MOSAIC_INIT                Subr   116                                                                                              
 PARSE_STRING               Func   630      I(4)            4           scalar                    407,434,641,644,645,650,656       
 TRANSFER_TO_MODEL_INDEX    Func   492      I(4)            4           scalar                    471,472,473,474,502,506           

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous

Page 33          Source Listing                  GET_MOSAIC_TILE_GRID
2021-06-01 08:53                                 mosaic2.F90

       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion

Page 34          Source Listing                  GET_MOSAIC_TILE_GRID
2021-06-01 08:53                                 mosaic2.F90

       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : ./,/opt/intel/2020/compilers_and_libraries/linux/mkl/include/,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/,
           /usr/include/,./,./,../include/,../mosaic/,./,/opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/,/opt/intel/2020/compilers_and_libraries/linux/daal/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,/usr/local/include/,/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/,
           /usr/include/,/usr/include/,/usr/include/
       -list filename : mosaic2.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
