Page 1           Source Listing                  TOPOGRAPHY_INIT
2021-06-01 08:56                                 /tmp/ifortWMFOwN.i90

      1 # 1 "topography.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 module topography_mod
     22 
     23 ! <CONTACT EMAIL="Bruce.Wyman@noaa.gov">
     24 !   Bruce Wyman
     25 ! </CONTACT>
     26 
     27 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/"/>
     28 
     29 ! <OVERVIEW>
     30 !   Routines for creating land surface topography fields and land-water masks
     31 !   for latitude-longitude grids.
     32 ! </OVERVIEW>
     33 
     34 ! <DESCRIPTION>
     35 !   This module generates realistic mountains and land-water masks
     36 !   on a specified latitude-longitude grid by interpolating from the
     37 !   1/6 degree Navy mean topography and percent water data sets.
     38 !   The fields that can be generated are mean and standard deviation
     39 !   of topography within the specified grid boxes; and land-ocean (or
     40 !   water) mask and land-ocean (or water) fractional area.
     41 !
     42 !   The interpolation scheme conserves the area-weighted average
     43 !   of the input data by using module horiz_interp.
     44 !
     45 !   The interfaces get_gaussian_topog and gaussian_topog_init are documented in <LINK SRC="gaussian_topog.html">gaussian_top
     45 og_mod</LINK>.
     46 ! </DESCRIPTION>
     47 
     48 use gaussian_topog_mod, only: gaussian_topog_init, get_gaussian_topog
     49 use   horiz_interp_mod, only: horiz_interp_type, horiz_interp_new, &
     50                               horiz_interp, horiz_interp_del
     51 
     52 use            fms_mod, only: check_nml_error, stdlog,    &
     53                               mpp_pe, mpp_root_pe, write_version_number, &
     54                               error_mesg, FATAL, NOTE, &
     55                               mpp_error
     56 !  required for fms2_io

Page 2           Source Listing                  TOPOGRAPHY_INIT
2021-06-01 08:56                                 topography.F90

     57 use        fms2_io_mod, only: read_data, FmsNetcdfFile_t, file_exists, open_file
     58 !  required for mpp_io
     59 use         fms_io_mod, only: read_data_mpp_io=>read_data, file_exist, open_ieee32_file
     60 use            fms_mod, only: close_file
     61 !-----------------------------------------------------------------------
     62 
     63 use      constants_mod, only: PI
     64 use            mpp_mod, only: input_nml_file
     65 
     66 implicit none
     67 private
     68 
     69 public :: topography_init,                 &
     70           get_topog_mean, get_topog_stdev, &
     71           get_ocean_frac, get_ocean_mask,  &
     72           get_water_frac, get_water_mask,  &
     73           gaussian_topog_init, get_gaussian_topog
     74 
     75 interface get_topog_mean
     76   module procedure get_topog_mean_1d, get_topog_mean_2d
     77 end interface
     78 interface get_topog_stdev
     79   module procedure get_topog_stdev_1d, get_topog_stdev_2d
     80 end interface
     81 interface get_ocean_frac
     82   module procedure get_ocean_frac_1d, get_ocean_frac_2d
     83 end interface
     84 interface get_ocean_mask
     85   module procedure get_ocean_mask_1d, get_ocean_mask_2d
     86 end interface
     87 interface get_water_frac
     88   module procedure get_water_frac_1d, get_water_frac_2d
     89 end interface
     90 interface get_water_mask
     91   module procedure get_water_mask_1d, get_water_mask_2d
     92 end interface
     93 
     94 !-----------------------------------------------------------------------
     95 ! <NAMELIST NAME="topography_nml">
     96 !   <DATA NAME="topog_file" TYPE="character" DEFAULT="DATA/navy_topography.data">
     97 !       Name of topography file.
     98 !   </DATA>
     99 !   <DATA NAME="water_file" TYPE="character" DEFAULT="DATA/navy_pctwater.data">
    100 !       Name of percent water file.
    101 !   </DATA>
    102 
    103    character(len=128) :: topog_file = 'DATA/navy_topography.data', &
    104                          water_file = 'DATA/navy_pctwater.data'
    105    namelist /topography_nml/ topog_file, water_file, use_mpp_io
    106 ! </NAMELIST>
    107    integer, parameter    :: TOPOG_INDEX = 1
    108    integer, parameter    :: WATER_INDEX = 2
    109    logical :: file_is_opened(2) = .false.
    110    type(FmsNetcdfFile_t) :: fileobj(2) !< needed for fms2_io
    111    logical :: use_mpp_io=.false.!>@var Namelist flag to enable usage of mpp_io subroutines if true
    112 !-----------------------------------------------------------------------
    113 ! --- resolution of the topography data set ---

Page 3           Source Listing                  TOPOGRAPHY_INIT
2021-06-01 08:56                                 topography.F90

    114 ! <DATASET NAME="">
    115 !   This module uses the 1/6 degree U.S. Navy mean topography
    116 !   and percent water data sets.
    117 !
    118 !   These data sets have been re-formatted to separate 32-bit IEEE files.
    119 !   The names of these files is specified by the <LINK SRC="#NAMELIST">namelist</LINK> input.
    120 !
    121 !The format for both files is as follows:
    122 ! <PRE>
    123 !     record = 1    nlon, nlat
    124 !     record = 2    blon, blat
    125 !     record = 3    data
    126 ! </PRE>
    127 !where:
    128 ! <PRE>
    129 !     nlon, nlat = The number of longitude and latitude points
    130 !                  in the horizontal grid.  For the 1/6 degree
    131 !                  data sets this is 2160 x 1080. [integer]
    132 !     blon, blat = The longitude and latitude grid box boundaries in degrees.
    133 !                     [real :: blon(nlon+1), blat(nlat+1)]
    134 !
    135 !     data       = The topography or percent water data.
    136 !                    [real :: data(nlon,nlat)]
    137 ! </PRE>
    138 ! </DATASET>
    139   integer :: ipts, jpts
    140   integer, parameter :: COMPUTE_STDEV = 123  ! use this flag to
    141 !   compute st dev
    142 
    143 !-----------------------------------------------------------------------
    144 
    145 ! Include variable "version" to be written to log file.
    146 # 1 "../include/file_version.h" 1 
    147 ! -*-f90-*-
    148 !***********************************************************************
    149 !*                   GNU Lesser General Public License
    150 !*
    151 !* This file is part of the GFDL Flexible Modeling System (FMS).
    152 !*
    153 !* FMS is free software: you can redistribute it and/or modify it under
    154 !* the terms of the GNU Lesser General Public License as published by
    155 !* the Free Software Foundation, either version 3 of the License, or (at
    156 !* your option) any later version.
    157 !*
    158 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    159 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    160 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    161 !* for more details.
    162 !*
    163 !* You should have received a copy of the GNU Lesser General Public
    164 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    165 !***********************************************************************
    166 
    167 # 23
    168 
    169   character(len=*), parameter :: version = 'unknown'
    170 

Page 4           Source Listing                  TOPOGRAPHY_INIT
2021-06-01 08:56                                 ../include/file_version.h

    171 # 146 "topography.F90" 2 
    172 
    173  logical :: module_is_initialized = .FALSE.
    174 
    175 !-----------------------------------------------------------------------
    176 
    177  contains
    178 
    179 !#######################################################################
    180 
    181    subroutine topography_init ()
    182      integer :: std_log !> @var standard log unit number to output which io is being used
    183      if ( module_is_initialized ) return
    184 
    185      call write_version_number("TOPOGRAPHY_MOD", version)
    186      call read_namelist
    187      module_is_initialized = .TRUE.
    188      std_log = stdlog()
    189      if ( use_mpp_io ) then
    190        call error_mesg('topography_init',"Using mpp_io in topography_mod",NOTE)
    191        if( mpp_pe() == mpp_root_pe()) write(std_log, '(a)')"Using mpp_io in topography_mod"
    192        if( mpp_pe() == mpp_root_pe()) write(std_log, '(a)')&
    193         'WARNING:: MPP_IO is no longer supported.  Please remove from namelist'
    194      else
    195        call error_mesg('topography_init',"Using fms2_io in topography_mod",NOTE)
    196        if( mpp_pe() == mpp_root_pe()) write(std_log, '(a)')"Using fms2_io in topography_mod"
    197      endif
    198    end subroutine topography_init

Page 5           Source Listing                  TOPOGRAPHY_INIT
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                          
                                                
 topography_mod_mp_topography_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERROR_MESG                 Subr   190                                           PRIV             54,190,195,247,274,331,358,412,441
                                                                                                  ,580,608,1035,1062                
 MODULE_IS_INITIALIZED      Local  183      L(4)            4           scalar                    173,183,187,244,270,328,354,409,43
                                                                                                  7,495,520,577,604,661,699,1032,105
                                                                                                  8                                 
 MPP_PE                     Func   191      I(4)            4           scalar   PRIV             53,191,192,196,742,769,1016,1084,1
                                                                                                  093                               
 MPP_ROOT_PE                Func   191      I(4)            4           scalar   PRIV             53,191,192,196,742,769,1016,1084,1
                                                                                                  093                               
 NOTE                       Param  190      I(4)            4           scalar   PRIV             54,190,195,743,770,1085,1094      
 STDLOG                     Func   188      I(4)            4           scalar   PRIV             52,188,1017                       
 STD_LOG                    Local  182      I(4)            4           scalar                    188,191,192,196                   
 TOPOGRAPHY_INIT            Subr   181                                                                                              
 USE_MPP_IO                 Local  189      L(4)            4           scalar                    105,111,189,250,277,334,361,415,44
                                                                                                  4,583,611,663,701,801,838         
 VERSION                    Param  185      CHAR            7           scalar                    185                               
 WRITE_VERSION_NUMBER       Subr   185                                           PRIV             53,185                            

Page 6           Source Listing                  TOPOGRAPHY_INIT
2021-06-01 08:56                                 topography.F90

    199 
    200 !#######################################################################
    201 
    202 ! <FUNCTION NAME="get_topog_mean">
    203 
    204 !   <OVERVIEW>
    205 !     Returns a "realistic" mean surface height field.
    206 !   </OVERVIEW>
    207 !   <DESCRIPTION>
    208 !     Returns realistic mountains on a latitude-longtude grid.
    209 !     The returned field is the mean topography for the given grid boxes.
    210 !     Computed using a conserving area-weighted interpolation.
    211 !     The current input data set is the 1/6 degree Navy mean topography.
    212 !   </DESCRIPTION>
    213 !   <TEMPLATE>
    214 !     flag = <B>get_topog_mean</B> ( blon, blat, zmean )
    215 !   </TEMPLATE>
    216 
    217 !   <IN NAME="blon" TYPE="real" DIM="(:)">
    218 !     The longitude (in radians) at grid box boundaries.
    219 !   </IN>
    220 !   <IN NAME="blat" TYPE="real" DIM="(:)">
    221 !     The latitude (in radians) at grid box boundaries.
    222 !   </IN>
    223 !   <OUT NAME="zmean" UNIT=" meter" TYPE="real" DIM="(:,:)">
    224 !     The mean surface height (meters).
    225 !     The size of this field must be size(blon)-1 by size(blat)-1.
    226 !   </OUT>
    227 !   <OUT NAME="get_topog_mean" TYPE="logical">
    228 !     A logical value of TRUE is returned if the surface height field
    229 !     was successfully created. A value of FALSE may be returned if the
    230 !     input topography data set was not readable.
    231 !   </OUT>
    232 
    233 !   <ERROR MSG="shape(zmean) is not equal to (/size(blon)-1,size(blat)-1/))" STATUS="FATAL">
    234 !     Check the input grid size and output field size.
    235 !   </ERROR>
    236 
    237  function get_topog_mean_1d (blon, blat, zmean)
    238 
    239    real, intent(in),  dimension(:)   :: blon, blat
    240    real, intent(out), dimension(:,:) :: zmean
    241    logical :: get_topog_mean_1d
    242 
    243 !-----------------------------------------------------------------------
    244    if (.not. module_is_initialized) call topography_init()
    245 
    246    if ( any(shape(zmean(:,:)) /= (/size(blon(:))-1,size(blat(:))-1/)) ) &
    247         call error_mesg('get_topog_mean_1d','shape(zmean) is not&
    248             & equal to (/size(blon)-1,size(blat)-1/))', FATAL)
    249 
    250    if( use_mpp_io ) then
    251      get_topog_mean_1d = open_topog_file_mpp_io(topog_file)
    252    else
    253      get_topog_mean_1d = open_topog_file()
    254    endif
    255 

Page 7           Source Listing                  GET_TOPOG_MEAN_1D
2021-06-01 08:56                                 topography.F90

    256    if ( get_topog_mean_1d ) call interp_topog_1d ( blon, blat, zmean)
    257 
    258 !-----------------------------------------------------------------------
    259 
    260  end function get_topog_mean_1d


ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_get_topog_mean_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   246                                  scalar                    246                               
 BLAT                       Dummy  237      R(8)            8     1     1        ARG,IN           246,256                           
 BLON                       Dummy  237      R(8)            8     1     1        ARG,IN           246,256                           
 FATAL                      Param  248      I(4)            4           scalar   PRIV             54,248,275,332,359,413,442,581,609
                                                                                                  ,746,773,1036,1063                
 GET_TOPOG_MEAN_1D          Func   237      L(4)            4           scalar   PRIV             251,253,256                       
 OPEN_TOPOG_FILE@0          Local  253      L(4)            4           scalar                                                      
 OPEN_TOPOG_FILE_MPP_IO@0   Local  251      L(4)            4           scalar                                                      
 SHAPE                      Func   246                                  scalar                    246                               
 SIZE                       Func   246                                  scalar                    246                               
 TOPOGRAPHY_INIT            Subr   244                                                            69,244,270,328,354,409,437,495,520
                                                                                                  ,577,604,661,699,1032,1058        
 TOPOG_FILE                 Local  251      CHAR            128         scalar                    103,105,251,278,335,362,740,741,74
                                                                                                  3,745,746,802,839                 
 ZMEAN                      Dummy  237      R(8)            8     2     1        ARG,OUT          246,256                           

Page 8           Source Listing                  GET_TOPOG_MEAN_1D
2021-06-01 08:56                                 topography.F90

    261 
    262 !############################################################
    263 
    264  function get_topog_mean_2d (blon, blat, zmean)
    265 
    266    real, intent(in),  dimension(:,:) :: blon, blat
    267    real, intent(out), dimension(:,:) :: zmean
    268    logical :: get_topog_mean_2d
    269 !-----------------------------------------------------------------------
    270    if (.not. module_is_initialized) call topography_init()
    271 
    272    if ( any(shape(zmean(:,:)) /= (/size(blon,1)-1,size(blon,2)-1/)) .or. &
    273         any(shape(zmean(:,:)) /= (/size(blat,1)-1,size(blat,2)-1/)) ) &
    274         call error_mesg('get_topog_mean_2d','shape(zmean) is not&
    275             & equal to (/size(blon,1)-1,size(blon,2)-1/))', FATAL)
    276 
    277    if( use_mpp_io ) then
    278      get_topog_mean_2d = open_topog_file_mpp_io(topog_file)
    279    else
    280      get_topog_mean_2d = open_topog_file()
    281    endif
    282 
    283    if ( get_topog_mean_2d ) call interp_topog_2d ( blon, blat, zmean)
    284 !-----------------------------------------------------------------------
    285 
    286  end function get_topog_mean_2d


ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_get_topog_mean_2d_             

Page 9           Source Listing                  GET_TOPOG_MEAN_2D
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   272                                  scalar                    272,273                           
 BLAT                       Dummy  264      R(8)            8     2     1        ARG,IN           273,283                           
 BLON                       Dummy  264      R(8)            8     2     1        ARG,IN           272,283                           
 GET_TOPOG_MEAN_2D          Func   264      L(4)            4           scalar   PRIV             278,280,283                       
 SHAPE                      Func   272                                  scalar                    272,273                           
 SIZE                       Func   272                                  scalar                    272,273                           
 ZMEAN                      Dummy  264      R(8)            8     2     1        ARG,OUT          272,273,283                       

Page 10          Source Listing                  GET_TOPOG_MEAN_2D
2021-06-01 08:56                                 topography.F90

    287 
    288 ! </FUNCTION>
    289 !#######################################################################
    290 
    291 ! <FUNCTION NAME="get_topog_stdev">
    292 
    293 !   <OVERVIEW>
    294 !     Returns a standard deviation of higher resolution topography with
    295 !     the given model grid boxes.
    296 !   </OVERVIEW>
    297 !   <DESCRIPTION>
    298 !     Returns the standard deviation of the "finer" input topography data set,
    299 !     currently the Navy 1/6 degree mean topography data, within the
    300 !     boundaries of the given input grid.
    301 !   </DESCRIPTION>
    302 !   <TEMPLATE>
    303 !     flag = <B>get_topog_stdev</B> ( blon, blat, stdev )
    304 !   </TEMPLATE>
    305 !   <IN NAME="blon" TYPE="real" DIM="(:)">
    306 !     The longitude (in radians) at grid box boundaries.
    307 !   </IN>
    308 !   <IN NAME="blat" TYPE="real" DIM="(:)">
    309 !     The latitude (in radians) at grid box boundaries.
    310 !   </IN>
    311 !   <OUT NAME="stdev" UNITS="meter" TYPE="real" DIM="(:,:)">
    312 !     The standard deviation of surface height (in meters) within
    313 !     given input model grid boxes.
    314 !     The size of this field must be size(blon)-1 by size(blat)-1.
    315 !   </OUT>
    316 !   <OUT NAME="get_topog_stdev" TYPE="logical">
    317 !     A logical value of TRUE is returned if the output field was
    318 !     successfully created. A value of FALSE may be returned if the
    319 !     input topography data set was not readable.
    320 !   </OUT>
    321 
    322  function get_topog_stdev_1d (blon, blat, stdev)
    323 
    324    real, intent(in),  dimension(:)   :: blon, blat
    325    real, intent(out), dimension(:,:) :: stdev
    326    logical :: get_topog_stdev_1d
    327 !-----------------------------------------------------------------------
    328    if (.not. module_is_initialized) call topography_init()
    329 
    330    if ( any(shape(stdev(:,:)) /= (/size(blon(:))-1,size(blat(:))-1/)) ) &
    331        call error_mesg('get_topog_stdev','shape(stdev) is not&
    332             & equal to (/size(blon)-1,size(blat)-1/))', FATAL)
    333 
    334    if( use_mpp_io ) then
    335      get_topog_stdev_1d = open_topog_file_mpp_io(topog_file)
    336    else
    337      get_topog_stdev_1d = open_topog_file()
    338    endif
    339    if ( get_topog_stdev_1d ) call interp_topog_1d ( blon, blat, &
    340               stdev, flag=COMPUTE_STDEV)
    341 
    342 !-----------------------------------------------------------------------
    343 

Page 11          Source Listing                  GET_TOPOG_STDEV_1D
2021-06-01 08:56                                 topography.F90

    344  end function get_topog_stdev_1d


ENTRY POINTS

  Name                                             
                                                   
 topography_mod_mp_get_topog_stdev_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   330                                  scalar                    330                               
 BLAT                       Dummy  322      R(8)            8     1     1        ARG,IN           330,339                           
 BLON                       Dummy  322      R(8)            8     1     1        ARG,IN           330,339                           
 COMPUTE_STDEV              Param  340      I(4)            4           scalar                    340,367,811,851                   
 GET_TOPOG_STDEV_1D         Func   322      L(4)            4           scalar   PRIV             335,337,339                       
 SHAPE                      Func   330                                  scalar                    330                               
 SIZE                       Func   330                                  scalar                    330                               
 STDEV                      Dummy  322      R(8)            8     2     1        ARG,OUT          330,340                           

Page 12          Source Listing                  GET_TOPOG_STDEV_1D
2021-06-01 08:56                                 topography.F90

    345 
    346 !#######################################################################
    347 
    348  function get_topog_stdev_2d (blon, blat, stdev)
    349 
    350    real, intent(in),  dimension(:,:) :: blon, blat
    351    real, intent(out), dimension(:,:) :: stdev
    352    logical :: get_topog_stdev_2d
    353 !-----------------------------------------------------------------------
    354    if (.not. module_is_initialized) call topography_init()
    355 
    356    if ( any(shape(stdev(:,:)) /= (/size(blon,1)-1,size(blon,2)-1/)) .or. &
    357         any(shape(stdev(:,:)) /= (/size(blat,1)-1,size(blat,2)-1/)) ) &
    358         call error_mesg('get_topog_stdev_2d','shape(stdev) is not&
    359             & equal to (/size(blon,1)-1,size(blon,2)-1/))', FATAL)
    360 
    361    if( use_mpp_io ) then
    362      get_topog_stdev_2d = open_topog_file_mpp_io(topog_file)
    363    else
    364      get_topog_stdev_2d = open_topog_file()
    365    endif
    366    if ( get_topog_stdev_2d ) call interp_topog_2d ( blon, blat, &
    367               stdev, flag=COMPUTE_STDEV)
    368 !-----------------------------------------------------------------------
    369 
    370  end function get_topog_stdev_2d


ENTRY POINTS

  Name                                             
                                                   
 topography_mod_mp_get_topog_stdev_2d_             

Page 13          Source Listing                  GET_TOPOG_STDEV_2D
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   356                                  scalar                    356,357                           
 BLAT                       Dummy  348      R(8)            8     2     1        ARG,IN           357,366                           
 BLON                       Dummy  348      R(8)            8     2     1        ARG,IN           356,366                           
 GET_TOPOG_STDEV_2D         Func   348      L(4)            4           scalar   PRIV             362,364,366                       
 SHAPE                      Func   356                                  scalar                    356,357                           
 SIZE                       Func   356                                  scalar                    356,357                           
 STDEV                      Dummy  348      R(8)            8     2     1        ARG,OUT          356,357,367                       

Page 14          Source Listing                  GET_TOPOG_STDEV_2D
2021-06-01 08:56                                 topography.F90

    371 
    372 ! </FUNCTION>
    373 !#######################################################################
    374 
    375 ! <FUNCTION NAME="get_ocean_frac">
    376 
    377 !   <OVERVIEW>
    378 !      Returns fractional area covered by ocean in a grid box.
    379 !   </OVERVIEW>
    380 !   <DESCRIPTION>
    381 !     Returns fractional area covered by ocean in the given model grid boxes.
    382 !   </DESCRIPTION>
    383 !   <TEMPLATE>
    384 !     flag = <B>get_ocean_frac</B> ( blon, blat, ocean_frac )
    385 !   </TEMPLATE>
    386 
    387 !   <IN NAME="blon" UNITS="radians" TYPE="real" DIM="(:)">
    388 !     The longitude (in radians) at grid box boundaries.
    389 !   </IN>
    390 !   <IN NAME="blat" UNITS="radians" TYPE="real" DIM="(:)">
    391 !     The latitude (in radians) at grid box boundaries.
    392 !   </IN>
    393 !   <OUT NAME="ocean_frac" TYPE="real" DIM="(:,:)">
    394 !     The fractional amount (0 to 1) of ocean in a grid box.
    395 !     The size of this field must be size(blon)-1 by size(blat)-1.
    396 !   </OUT>
    397 !   <OUT NAME="get_ocean_frac" TYPE="logical">
    398 !     A logical value of TRUE is returned if the output field
    399 !     was successfully created. A value of FALSE may be returned
    400 !     if the Navy 1/6 degree percent water data set was not readable.
    401 !   </OUT>
    402 
    403  function get_ocean_frac_1d (blon, blat, ocean_frac)
    404 
    405  real, intent(in),  dimension(:)   :: blon, blat
    406  real, intent(out), dimension(:,:) :: ocean_frac
    407  logical :: get_ocean_frac_1d
    408 !-----------------------------------------------------------------------
    409    if (.not. module_is_initialized) call topography_init()
    410 
    411    if ( any(shape(ocean_frac(:,:)) /= (/size(blon(:))-1,size(blat(:))-1/)) ) &
    412         call error_mesg('get_ocean_frac','shape(ocean_frac) is not&
    413                  & equal to (/size(blon)-1,size(blat)-1/))', FATAL)
    414 
    415    if( use_mpp_io) then
    416      get_ocean_frac_1d = open_topog_file_mpp_io(water_file)
    417      if( get_ocean_frac_1d) call interp_water_1d_mpp_io ( blon, blat, &
    418                  ocean_frac, do_ocean=.true. )
    419    else
    420      get_ocean_frac_1d = open_water_file()
    421      if( get_ocean_frac_1d )  call interp_water_1d ( blon, blat, &
    422                   ocean_frac, do_ocean=.true. )
    423    endif
    424 
    425 !-----------------------------------------------------------------------
    426 
    427  end function get_ocean_frac_1d

Page 15          Source Listing                  GET_OCEAN_FRAC_1D
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_get_ocean_frac_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   411                                  scalar                    411                               
 BLAT                       Dummy  403      R(8)            8     1     1        ARG,IN           411,417,421                       
 BLON                       Dummy  403      R(8)            8     1     1        ARG,IN           411,417,421                       
 GET_OCEAN_FRAC_1D          Func   403      L(4)            4           scalar   PRIV             416,417,420,421,497               
 OCEAN_FRAC                 Dummy  403      R(8)            8     2     1        ARG,OUT          411,418,422                       
 OPEN_WATER_FILE@0          Local  420      L(4)            4           scalar                                                      
 SHAPE                      Func   411                                  scalar                    411                               
 SIZE                       Func   411                                  scalar                    411                               
 WATER_FILE                 Local  416      CHAR            128         scalar                    104,105,416,445,584,612,767,768,77
                                                                                                  0,772,773,1038,1065,1136,1157     

Page 16          Source Listing                  GET_OCEAN_FRAC_1D
2021-06-01 08:56                                 topography.F90

    428 
    429 !#######################################################################
    430 
    431  function get_ocean_frac_2d (blon, blat, ocean_frac)
    432 
    433  real, intent(in),  dimension(:,:) :: blon, blat
    434  real, intent(out), dimension(:,:) :: ocean_frac
    435  logical :: get_ocean_frac_2d
    436 !-----------------------------------------------------------------------
    437    if (.not. module_is_initialized) call topography_init()
    438 
    439    if ( any(shape(ocean_frac(:,:)) /= (/size(blon,1)-1,size(blon,2)-1/)) .or. &
    440         any(shape(ocean_frac(:,:)) /= (/size(blat,1)-1,size(blat,2)-1/)) ) &
    441         call error_mesg('get_ocean_frac_2d','shape(ocean_frac) is not&
    442             & equal to (/size(blon,1)-1,size(blon,2)-1/))', FATAL)
    443 
    444    if( use_mpp_io) then
    445      get_ocean_frac_2d = open_topog_file_mpp_io(water_file)
    446      if( get_ocean_frac_2d) call interp_water_2d_mpp_io ( blon, blat, &
    447                  ocean_frac, do_ocean=.true. )
    448    else
    449      get_ocean_frac_2d = open_water_file()
    450      if( get_ocean_frac_2d )  call interp_water_2d ( blon, blat, &
    451                   ocean_frac, do_ocean=.true. )
    452    endif
    453 
    454 !-----------------------------------------------------------------------
    455 
    456  end function get_ocean_frac_2d

Page 17          Source Listing                  GET_OCEAN_FRAC_2D
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_get_ocean_frac_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   439                                  scalar                    439,440                           
 BLAT                       Dummy  431      R(8)            8     2     1        ARG,IN           440,446,450                       
 BLON                       Dummy  431      R(8)            8     2     1        ARG,IN           439,446,450                       
 GET_OCEAN_FRAC_2D          Func   431      L(4)            4           scalar   PRIV             445,446,449,450,522               
 OCEAN_FRAC                 Dummy  431      R(8)            8     2     1        ARG,OUT          439,440,447,451                   
 SHAPE                      Func   439                                  scalar                    439,440                           
 SIZE                       Func   439                                  scalar                    439,440                           

Page 18          Source Listing                  GET_OCEAN_FRAC_2D
2021-06-01 08:56                                 topography.F90

    457 
    458 ! </FUNCTION>
    459 !#######################################################################
    460 ! <FUNCTION NAME="get_ocean_mask">
    461 
    462 !   <OVERVIEW>
    463 !     Returns a land-ocean mask in a grid box.
    464 !   </OVERVIEW>
    465 !   <DESCRIPTION>
    466 !     Returns a land-ocean mask in the given model grid boxes.
    467 !   </DESCRIPTION>
    468 !   <TEMPLATE>
    469 !     flag = <B>get_ocean_mask</B> ( blon, blat, ocean_mask )
    470 !   </TEMPLATE>
    471 
    472 !   <IN NAME="blon" UNITS="radians" TYPE="real" DIM="(:)">
    473 !     The longitude (in radians) at grid box boundaries.
    474 !   </IN>
    475 !   <IN NAME="blat" UNITS="radians" TYPE="real" DIM="(:)">
    476 !     The latitude (in radians) at grid box boundaries.
    477 !   </IN>
    478 !   <OUT NAME="ocean_frac" TYPE="real" DIM="(:,:)">
    479 !     The fractional amount (0 to 1) of ocean in a grid box.
    480 !     The size of this field must be size(blon)-1 by size(blat)-1.
    481 !   </OUT>
    482 !   <OUT NAME="get_ocean_mask" TYPE="logical">
    483 !     A logical value of TRUE is returned if the output field
    484 !     was successfully created. A value of FALSE may be returned
    485 !     if the Navy 1/6 degree percent water data set was not readable.
    486 !   </OUT>
    487 
    488  function get_ocean_mask_1d (blon, blat, ocean_mask)
    489 
    490  real   , intent(in),  dimension(:)   :: blon, blat
    491  logical, intent(out), dimension(:,:) :: ocean_mask
    492  logical :: get_ocean_mask_1d
    493  real, dimension(size(ocean_mask,1),size(ocean_mask,2)) :: ocean_frac
    494 !-----------------------------------------------------------------------
    495    if (.not. module_is_initialized) call topography_init()
    496 
    497    if ( get_ocean_frac_1d(blon, blat, ocean_frac) ) then
    498      where (ocean_frac > 0.50)
    499        ocean_mask = .true.
    500      elsewhere
    501        ocean_mask = .false.
    502      end where
    503      get_ocean_mask_1d = .true.
    504    else
    505      get_ocean_mask_1d = .false.
    506    endif
    507 !-----------------------------------------------------------------------
    508 
    509  end function get_ocean_mask_1d

Page 19          Source Listing                  GET_OCEAN_MASK_1D
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_get_ocean_mask_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLAT                       Dummy  488      R(8)            8     1     1        ARG,IN           497                               
 BLON                       Dummy  488      R(8)            8     1     1        ARG,IN           497                               
 GET_OCEAN_MASK_1D          Func   488      L(4)            4           scalar   PRIV             503,505                           
 OCEAN_FRAC                 Local  493      R(8)            8     2     0        TGT              497,498                           
 OCEAN_MASK                 Dummy  488      L(4)            4     2     1        ARG,OUT          493,499,501                       
 SIZE                       Func   493                                  scalar                    493                               

Page 20          Source Listing                  GET_OCEAN_MASK_1D
2021-06-01 08:56                                 topography.F90

    510 
    511 !#######################################################################
    512 
    513  function get_ocean_mask_2d (blon, blat, ocean_mask)
    514 
    515  real   , intent(in),  dimension(:,:) :: blon, blat
    516  logical, intent(out), dimension(:,:) :: ocean_mask
    517  logical :: get_ocean_mask_2d
    518  real, dimension(size(ocean_mask,1),size(ocean_mask,2)) :: ocean_frac
    519 !-----------------------------------------------------------------------
    520    if (.not. module_is_initialized) call topography_init()
    521 
    522    if ( get_ocean_frac_2d(blon, blat, ocean_frac) ) then
    523      where (ocean_frac > 0.50)
    524        ocean_mask = .true.
    525      elsewhere
    526        ocean_mask = .false.
    527      end where
    528      get_ocean_mask_2d = .true.
    529    else
    530      get_ocean_mask_2d = .false.
    531    endif
    532 
    533 !-----------------------------------------------------------------------
    534 
    535  end function get_ocean_mask_2d


ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_get_ocean_mask_2d_             

Page 21          Source Listing                  GET_OCEAN_MASK_2D
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLAT                       Dummy  513      R(8)            8     2     1        ARG,IN           522                               
 BLON                       Dummy  513      R(8)            8     2     1        ARG,IN           522                               
 GET_OCEAN_MASK_2D          Func   513      L(4)            4           scalar   PRIV             528,530                           
 OCEAN_FRAC                 Local  518      R(8)            8     2     0        TGT              522,523                           
 OCEAN_MASK                 Dummy  513      L(4)            4     2     1        ARG,OUT          518,524,526                       
 SIZE                       Func   518                                  scalar                    518                               

Page 22          Source Listing                  GET_OCEAN_MASK_2D
2021-06-01 08:56                                 topography.F90

    536 
    537 ! </FUNCTION>
    538 !#######################################################################
    539 ! <FUNCTION NAME="get_water_frac">
    540 
    541 !   <OVERVIEW>
    542 !     Returns fractional area covered by water.
    543 !   </OVERVIEW>
    544 !   <DESCRIPTION>
    545 !     Returns the percent of water in a grid box.
    546 !   </DESCRIPTION>
    547 !   <TEMPLATE>
    548 !     flag = <B>get_water_frac</B> ( blon, blat, water_frac )
    549 !   </TEMPLATE>
    550 
    551 !   <IN NAME="blon" UNITS="radians" TYPE="real" DIM="(:)">
    552 !     The longitude (in radians) at grid box boundaries.
    553 !   </IN>
    554 !   <IN NAME="blat" UNITS="radians" TYPE="real" DIM="(:)">
    555 !     The latitude (in radians) at grid box boundaries.
    556 !   </IN>
    557 !   <OUT NAME="water_frac" TYPE="real" DIM="(:,:)">
    558 !     The fractional amount (0 to 1) of water in a grid box.
    559 !     The size of this field must be size(blon)-1 by size(blat)-1.
    560 !   </OUT>
    561 !   <OUT NAME="get_water_frac" TYPE="logical">
    562 !     A logical value of TRUE is returned if the output field
    563 !     was successfully created. A value of FALSE may be returned
    564 !     if the Navy 1/6 degree percent water data set was not readable.
    565 !   </OUT>
    566 !   <ERROR MSG="shape(water_frac) is not equal to (/size(blon)-1,size(blat)-1/))" STATUS="FATAL">
    567 !      Check the input grid size and output field size.
    568 !   </ERROR>
    569 
    570  function get_water_frac_1d (blon, blat, water_frac)
    571 
    572  real, intent(in),  dimension(:)   :: blon, blat
    573  real, intent(out), dimension(:,:) :: water_frac
    574  logical :: get_water_frac_1d
    575 
    576 !-----------------------------------------------------------------------
    577    if (.not. module_is_initialized) call topography_init()
    578 
    579    if ( any(shape(water_frac(:,:)) /= (/size(blon(:))-1,size(blat(:))-1/)) ) &
    580         call error_mesg('get_water_frac_1d','shape(water_frac) is not&
    581                  & equal to (/size(blon)-1,size(blat)-1/))', FATAL)
    582 
    583    if(use_mpp_io) then
    584      get_water_frac_1d = open_topog_file_mpp_io(water_file)
    585      if( get_water_frac_1d ) call interp_water_1d_mpp_io ( blon, blat, water_frac )
    586    else
    587      get_water_frac_1d = open_water_file()
    588      if(get_water_frac_1d) call interp_water_1d ( blon, blat, water_frac )
    589    endif
    590 
    591 !-----------------------------------------------------------------------
    592 

Page 23          Source Listing                  GET_WATER_FRAC_1D
2021-06-01 08:56                                 topography.F90

    593  end function get_water_frac_1d


ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_get_water_frac_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   579                                  scalar                    579                               
 BLAT                       Dummy  570      R(8)            8     1     1        ARG,IN           579,585,588                       
 BLON                       Dummy  570      R(8)            8     1     1        ARG,IN           579,585,588                       
 GET_WATER_FRAC_1D          Func   570      L(4)            4           scalar   PRIV             584,585,587,588,675               
 SHAPE                      Func   579                                  scalar                    579                               
 SIZE                       Func   579                                  scalar                    579                               
 WATER_FRAC                 Dummy  570      R(8)            8     2     1        ARG,OUT          579,585,588                       

Page 24          Source Listing                  GET_WATER_FRAC_1D
2021-06-01 08:56                                 topography.F90

    594 
    595 !#######################################################################
    596 
    597  function get_water_frac_2d (blon, blat, water_frac)
    598 
    599  real, intent(in),  dimension(:,:) :: blon, blat
    600  real, intent(out), dimension(:,:) :: water_frac
    601  logical :: get_water_frac_2d
    602 
    603 !-----------------------------------------------------------------------
    604    if (.not. module_is_initialized) call topography_init()
    605 
    606    if ( any(shape(water_frac(:,:)) /= (/size(blon,1)-1,size(blon,2)-1/)) .or. &
    607         any(shape(water_frac(:,:)) /= (/size(blat,1)-1,size(blat,2)-1/)) ) &
    608         call error_mesg('get_water_frac_2d','shape(water_frac) is not&
    609             & equal to (/size(blon,1)-1,size(blon,2)-1/))', FATAL)
    610 
    611    if(use_mpp_io) then
    612      get_water_frac_2d = open_topog_file_mpp_io(water_file)
    613      if( get_water_frac_2d ) call interp_water_2d_mpp_io ( blon, blat, water_frac )
    614    else
    615      get_water_frac_2d = open_water_file()
    616      if(get_water_frac_2d) call interp_water_2d ( blon, blat, water_frac )
    617    endif
    618 
    619 !-----------------------------------------------------------------------
    620 
    621  end function get_water_frac_2d

Page 25          Source Listing                  GET_WATER_FRAC_2D
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_get_water_frac_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   606                                  scalar                    606,607                           
 BLAT                       Dummy  597      R(8)            8     2     1        ARG,IN           607,613,616                       
 BLON                       Dummy  597      R(8)            8     2     1        ARG,IN           606,613,616                       
 GET_WATER_FRAC_2D          Func   597      L(4)            4           scalar   PRIV             612,613,615,616,713               
 SHAPE                      Func   606                                  scalar                    606,607                           
 SIZE                       Func   606                                  scalar                    606,607                           
 WATER_FRAC                 Dummy  597      R(8)            8     2     1        ARG,OUT          606,607,613,616                   

Page 26          Source Listing                  GET_WATER_FRAC_2D
2021-06-01 08:56                                 topography.F90

    622 
    623 ! </FUNCTION>
    624 !#######################################################################
    625 ! <FUNCTION NAME="get_water_mask">
    626 
    627 !   <OVERVIEW>
    628 !     Returns a land-water mask in a grid box.
    629 !   </OVERVIEW>
    630 !   <DESCRIPTION>
    631 !     Returns a land-water mask in the given model grid boxes.
    632 !   </DESCRIPTION>
    633 !   <TEMPLATE>
    634 !     flag = <B>get_water_mask</B> ( blon, blat, water_mask )
    635 !   </TEMPLATE>
    636 
    637 !   <IN NAME="blon" UNITS="radians" TYPE="real" DIM="(:)">
    638 !     The longitude (in radians) at grid box boundaries.
    639 !   </IN>
    640 !   <IN NAME="blat" UNITS="radians" TYPE="real" DIM="(:)">
    641 !     The latitude (in radians) at grid box boundaries.
    642 !   </IN>
    643 !   <OUT NAME="water_mask" TYPE="real" DIM="(:,:)">
    644 !     A binary mask for water (true) or land (false).
    645 !     The size of this field must be size(blon)-1 by size(blat)-1.
    646 !   </OUT>
    647 !   <OUT NAME="get_water_mask" TYPE="logical">
    648 !     A logical value of TRUE is returned if the output field
    649 !     was successfully created. A value of FALSE may be returned
    650 !     if the Navy 1/6 degree percent water data set was not readable.
    651 !   </OUT>
    652 
    653  function get_water_mask_1d (blon, blat, water_mask)
    654 
    655  real   , intent(in),  dimension(:)   :: blon, blat
    656  logical, intent(out), dimension(:,:) :: water_mask
    657  logical :: get_water_mask_1d
    658 
    659  real, dimension(size(water_mask,1),size(water_mask,2)) :: water_frac
    660 !-----------------------------------------------------------------------
    661    if (.not. module_is_initialized) call topography_init()
    662 
    663    if(use_mpp_io) then
    664      if ( get_water_frac_1d_mpp_io(blon, blat, water_frac) ) then
    665        where (water_frac > 0.50)
    666          water_mask = .true.
    667        elsewhere
    668          water_mask = .false.
    669        end where
    670        get_water_mask_1d = .true.
    671      else
    672        get_water_mask_1d = .false.
    673      endif
    674    else
    675      if ( get_water_frac_1d(blon, blat, water_frac) ) then
    676        where (water_frac > 0.50)
    677          water_mask = .true.
    678        elsewhere

Page 27          Source Listing                  GET_WATER_MASK_1D
2021-06-01 08:56                                 topography.F90

    679          water_mask = .false.
    680        end where
    681        get_water_mask_1d = .true.
    682      else
    683        get_water_mask_1d = .false.
    684      endif
    685    endif
    686 !-----------------------------------------------------------------------
    687 
    688  end function get_water_mask_1d


ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_get_water_mask_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLAT                       Dummy  653      R(8)            8     1     1        ARG,IN           664,675                           
 BLON                       Dummy  653      R(8)            8     1     1        ARG,IN           664,675                           
 GET_WATER_FRAC_1D_MPP_IO@0 Local  664      L(4)            4           scalar                                                      
 GET_WATER_MASK_1D          Func   653      L(4)            4           scalar   PRIV             670,672,681,683                   
 SIZE                       Func   659                                  scalar                    659                               
 WATER_FRAC                 Local  659      R(8)            8     2     0        TGT              664,665,675,676                   
 WATER_MASK                 Dummy  653      L(4)            4     2     1        ARG,OUT          659,666,668,677,679               

Page 28          Source Listing                  GET_WATER_MASK_1D
2021-06-01 08:56                                 topography.F90

    689 
    690 !#######################################################################
    691 
    692  function get_water_mask_2d (blon, blat, water_mask)
    693 
    694  real   , intent(in),  dimension(:,:) :: blon, blat
    695  logical, intent(out), dimension(:,:) :: water_mask
    696  logical :: get_water_mask_2d
    697  real, dimension(size(water_mask,1),size(water_mask,2)) :: water_frac
    698 !-----------------------------------------------------------------------
    699    if (.not. module_is_initialized) call topography_init()
    700 
    701    if(use_mpp_io) then
    702      if ( get_water_frac_2d_mpp_io(blon, blat, water_frac) ) then
    703        where (water_frac > 0.50)
    704          water_mask = .true.
    705        elsewhere
    706          water_mask = .false.
    707        end where
    708        get_water_mask_2d = .true.
    709      else
    710        get_water_mask_2d = .false.
    711      endif
    712    else
    713      if ( get_water_frac_2d(blon, blat, water_frac) ) then
    714        where (water_frac > 0.50)
    715          water_mask = .true.
    716        elsewhere
    717          water_mask = .false.
    718        end where
    719        get_water_mask_2d = .true.
    720      else
    721        get_water_mask_2d = .false.
    722      endif
    723    endif
    724 
    725 !-----------------------------------------------------------------------
    726 
    727  end function get_water_mask_2d

Page 29          Source Listing                  GET_WATER_MASK_2D
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_get_water_mask_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLAT                       Dummy  692      R(8)            8     2     1        ARG,IN           702,713                           
 BLON                       Dummy  692      R(8)            8     2     1        ARG,IN           702,713                           
 GET_WATER_FRAC_2D_MPP_IO@0 Local  702      L(4)            4           scalar                                                      
 GET_WATER_MASK_2D          Func   692      L(4)            4           scalar   PRIV             708,710,719,721                   
 SIZE                       Func   697                                  scalar                    697                               
 WATER_FRAC                 Local  697      R(8)            8     2     0        TGT              702,703,713,714                   
 WATER_MASK                 Dummy  692      L(4)            4     2     1        ARG,OUT          697,704,706,715,717               

Page 30          Source Listing                  GET_WATER_MASK_2D
2021-06-01 08:56                                 topography.F90

    728 
    729 ! </FUNCTION>
    730 
    731 !#######################################################################
    732 !##################   private interfaces below here   ##################
    733 !#######################################################################
    734 
    735  function open_topog_file ( )
    736  logical :: open_topog_file
    737  real    :: r_ipts, r_jpts
    738  integer :: namelen
    739 
    740   namelen = len(trim(topog_file))
    741   if ( file_exists(topog_file) .AND. topog_file(namelen-2:namelen) == '.nc') then
    742      if (mpp_pe() == mpp_root_pe()) call mpp_error ('topography_mod', &
    743             'Reading NetCDF formatted input data file: '//trim(topog_file), NOTE)
    744      if(.not. file_is_opened(TOPOG_INDEX) ) then
    745         if(.not. open_file(fileobj(TOPOG_INDEX), topog_file, 'read' )) then
    746            call mpp_error(FATAL, 'topography_mod: Error in opening file '//trim(topog_file))
    747         endif
    748      endif
    749 
    750      call read_data(fileobj(TOPOG_INDEX), 'ipts', r_ipts)
    751      call read_data(fileobj(TOPOG_INDEX), 'jpts', r_jpts)
    752      ipts = nint(r_ipts)
    753      jpts = nint(r_jpts)
    754      open_topog_file = .true.
    755      file_is_opened(TOPOG_INDEX) = .true.
    756   else
    757      open_topog_file = .false.
    758   endif
    759 
    760  end function open_topog_file

Page 31          Source Listing                  OPEN_TOPOG_FILE
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                          
                                                
 topography_mod_mp_open_topog_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPRESSED_READ_0D         Subr   750                                           PRIV             750,751,777,778                   
 FILEOBJ                    Local  745      RECORD          872   1     2                         745,750,751,772,777,778,901,902,90
                                                                                                  3                                 
 FILE_EXISTS                Func   741      L(4)            4           scalar   PRIV             57,741,768                        
 FILE_IS_OPENED             Local  744      L(4)            4     1     2                         109,744,755,771,782,900           
 IPTS                       Local  752      I(4)            4           scalar                    752,779,797,798,832,833,897,914,93
                                                                                                  3,1088,1096,1108,1134,1155        
 JPTS                       Local  753      I(4)            4           scalar                    753,780,797,798,832,833,897,914,93
                                                                                                  3,1089,1096,1108,1134,1155        
 LEN                        Func   740                                  scalar                    740                               
 MPP_ERROR                  Local  742                                  scalar   PRIV             55,742,746,769,773,1084,1093      
 MPP_ERROR_BASIC            Subr   746                                           PRIV             746,773                           
 MPP_ERROR_MESG             Subr   742                                           PRIV             742,769,1084,1093                 
 NAMELEN                    Local  738      I(4)            4           scalar                    740,741                           
 NETCDF_FILE_OPEN_WRAP      Func   745      L(4)            4           scalar   PRIV             745,772                           
 NINT                       Func   752                                  scalar                    752,753                           
 OPEN_FILE                  Local  745                                  scalar   PRIV             57,745,772                        
 OPEN_TOPOG_FILE            Func   735      L(4)            4           scalar                    253,280,337,364,754,757           
 READ_DATA                  Local  750                                  scalar   PRIV             57,750,751,777,778,901,902,903    
 R_IPTS                     Local  737      R(8)            8           scalar                    750,752                           
 R_JPTS                     Local  737      R(8)            8           scalar                    751,753                           
 TOPOG_INDEX                Param  744      I(4)            4           scalar                    744,745,750,751,755,804,841       
 TRIM                       Func   740                                  scalar                    740,743,746                       

Page 32          Source Listing                  OPEN_TOPOG_FILE
2021-06-01 08:56                                 topography.F90

    761 
    762  function open_water_file ( )
    763  logical :: open_water_file
    764  real    :: r_ipts, r_jpts
    765  integer :: namelen
    766 
    767   namelen = len(trim(water_file))
    768   if ( file_exists(water_file) .AND. water_file(namelen-2:namelen) == '.nc') then
    769      if (mpp_pe() == mpp_root_pe()) call mpp_error ('topography_mod', &
    770             'Reading NetCDF formatted input data file: '//trim(water_file), NOTE)
    771      if(.not. file_is_opened(WATER_INDEX) ) then
    772         if(.not. open_file(fileobj(WATER_INDEX), water_file, 'read' )) then
    773            call mpp_error(FATAL, 'topography_mod: Error in opening file '//trim(water_file))
    774         endif
    775      endif
    776 
    777      call read_data(fileobj(WATER_INDEX), 'ipts', r_ipts)
    778      call read_data(fileobj(WATER_INDEX), 'jpts', r_jpts)
    779      ipts = nint(r_ipts)
    780      jpts = nint(r_jpts)
    781      open_water_file = .true.
    782      file_is_opened(WATER_INDEX) = .true.
    783   else
    784      open_water_file = .false.
    785   endif
    786 
    787  end function open_water_file


ENTRY POINTS

  Name                                          
                                                
 topography_mod_mp_open_water_file_             

Page 33          Source Listing                  OPEN_WATER_FILE
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LEN                        Func   767                                  scalar                    767                               
 NAMELEN                    Local  765      I(4)            4           scalar                    767,768                           
 NINT                       Func   779                                  scalar                    779,780                           
 OPEN_WATER_FILE            Func   762      L(4)            4           scalar                    420,449,587,615,781,784           
 R_IPTS                     Local  764      R(8)            8           scalar                    777,779                           
 R_JPTS                     Local  764      R(8)            8           scalar                    778,780                           
 TRIM                       Func   767                                  scalar                    767,770,773                       
 WATER_INDEX                Param  771      I(4)            4           scalar                    771,772,777,778,782,915,935       

Page 34          Source Listing                  OPEN_WATER_FILE
2021-06-01 08:56                                 topography.F90

    788 
    789 
    790 !#######################################################################
    791 
    792  subroutine interp_topog_1d ( blon, blat, zout, flag)
    793  real   , intent(in)  :: blon(:), blat(:)
    794  real   , intent(out) :: zout(:,:)
    795  integer, intent(in), optional :: flag
    796 
    797  real :: xdat(ipts+1), ydat(jpts+1)
    798  real :: zdat(ipts,jpts)
    799  real :: zout2(size(zout,1),size(zout,2))
    800 
    801    if(use_mpp_io) then
    802      call input_data_mpp_io( topog_file, xdat, ydat, zdat )
    803    else
    804      call input_data( TOPOG_INDEX, xdat, ydat, zdat)
    805    endif
    806 
    807     call horiz_interp ( zdat, xdat, ydat, blon, blat, zout )
    808 
    809 ! compute standard deviation if necessary
    810     if (present(flag)) then
    811        if (flag == COMPUTE_STDEV) then
    812            zdat = zdat*zdat
    813            call horiz_interp ( zdat, xdat, ydat, blon, blat, zout2 )
    814            zout = zout2 - zout*zout
    815            where (zout > 0.0)
    816              zout = sqrt ( zout )
    817            elsewhere
    818              zout = 0.0
    819            endwhere
    820        endif
    821     endif
    822 
    823  end subroutine interp_topog_1d

Page 35          Source Listing                  INTERP_TOPOG_1D
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                          
                                                
 topography_mod_mp_interp_topog_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLAT                       Dummy  792      R(8)            8     1     1        ARG,IN           807,813                           
 BLON                       Dummy  792      R(8)            8     1     1        ARG,IN           807,813                           
 FLAG                       Dummy  792      I(4)            4           scalar   ARG,IN           810,811                           
 HORIZ_INTERP               Local  807                                  scalar   PRIV             50,807,813,847,853,923,943,1144,11
                                                                                                  65                                
 HORIZ_INTERP_SOLO_1D       Subr   807                                           PRIV             807,813,923,1144                  
 INTERP_TOPOG_1D            Subr   792                                                            256,339                           
 PRESENT                    Func   810                                  scalar                    810                               
 SIZE                       Func   799                                  scalar                    799                               
 SQRT                       Func   816                                  scalar                    816                               
 XDAT                       Local  797      R(8)            8     1     0        TGT              802,804,807,813                   
 YDAT                       Local  797      R(8)            8     1     0        TGT              802,804,807,813                   
 ZDAT                       Local  798      R(8)            8     2     0        TGT              802,804,807,812,813               
 ZOUT                       Dummy  792      R(8)            8     2     1        ARG,OUT          799,807,814,815,816,818           
 ZOUT2                      Local  799      R(8)            8     2     0        TGT              813,814                           

Page 36          Source Listing                  INTERP_TOPOG_1D
2021-06-01 08:56                                 topography.F90

    824 
    825 !#######################################################################
    826 
    827  subroutine interp_topog_2d ( blon, blat, zout, flag )
    828  real   , intent(in)  :: blon(:,:), blat(:,:)
    829  real   , intent(out) :: zout(:,:)
    830  integer, intent(in), optional :: flag
    831 
    832  real :: xdat(ipts+1), ydat(jpts+1)
    833  real :: zdat(ipts,jpts)
    834  real :: zout2(size(zout,1),size(zout,2))
    835  integer :: js, je
    836  type (horiz_interp_type) :: Interp
    837 
    838     if( use_mpp_io) then
    839       call input_data_mpp_io(topog_file, xdat, ydat, zdat)
    840     else
    841       call input_data( TOPOG_INDEX, xdat, ydat, zdat)
    842     endif
    843 
    844     call find_indices ( minval(blat), maxval(blat), ydat, js, je )
    845 
    846     call horiz_interp_new ( Interp, xdat, ydat(js:je+1), blon, blat )
    847     call horiz_interp     ( Interp, zdat(:,js:je), zout )
    848 
    849 ! compute standard deviation if necessary
    850     if (present(flag)) then
    851        if (flag == COMPUTE_STDEV) then
    852            zdat = zdat*zdat
    853            call horiz_interp ( Interp, zdat(:,js:je), zout2 )
    854            zout = zout2 - zout*zout
    855            where (zout > 0.0)
    856              zout = sqrt ( zout )
    857            elsewhere
    858              zout = 0.0
    859            endwhere
    860        endif
    861     endif
    862 
    863     call horiz_interp_del ( Interp )
    864 
    865  end subroutine interp_topog_2d

Page 37          Source Listing                  INTERP_TOPOG_2D
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                          
                                                
 topography_mod_mp_interp_topog_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLAT                       Dummy  827      R(8)            8     2     1        ARG,IN           844,846                           
 BLON                       Dummy  827      R(8)            8     2     1        ARG,IN           846                               
 FLAG                       Dummy  827      I(4)            4           scalar   ARG,IN           850,851                           
 HORIZ_INTERP_BASE_2D       Subr   847                                           PRIV             847,853                           
 HORIZ_INTERP_DEL           Subr   863                                           PRIV             50,863                            
 HORIZ_INTERP_NEW           Local  846                                  scalar   PRIV             49,846                            
 HORIZ_INTERP_NEW_1D_SRC    Subr   846                                           PRIV             846                               
 HORIZ_INTERP_TYPE          Type   836                                  scalar                    49,836                            
 INTERP                     Local  836      HORIZ_INTERP_TYPE                                                                       
                                                            2208        scalar                    846,847,853,863                   
 INTERP_TOPOG_2D            Subr   827                                                            283,366                           
 JE                         Local  835      I(4)            4           scalar                    844,846,847,853                   
 JS                         Local  835      I(4)            4           scalar                    844,846,847,853                   
 MAXVAL                     Func   844                                  scalar                    844                               
 MINVAL                     Func   844                                  scalar                    844                               
 PRESENT                    Func   850                                  scalar                    850                               
 SIZE                       Func   834                                  scalar                    834                               
 SQRT                       Func   856                                  scalar                    856                               
 XDAT                       Local  832      R(8)            8     1     0        TGT              839,841,846                       
 YDAT                       Local  832      R(8)            8     1     0        TGT              839,841,844,846                   
 ZDAT                       Local  833      R(8)            8     2     0        TGT              839,841,847,852,853               
 ZOUT                       Dummy  827      R(8)            8     2     1        ARG,OUT          834,847,854,855,856,858           
 ZOUT2                      Local  834      R(8)            8     2     0        TGT              853,854                           

Page 38          Source Listing                  INTERP_TOPOG_2D
2021-06-01 08:56                                 topography.F90

    866 
    867 !#######################################################################
    868 
    869  subroutine find_indices ( ybeg, yend, ydat, js, je )
    870  real,    intent(in)  :: ybeg, yend, ydat(:)
    871  integer, intent(out) :: js, je
    872  integer :: j
    873 
    874    js = 1
    875    do j = 1, size(ydat(:))-1
    876       if (ybeg >= ydat(j) .and. ybeg <= ydat(j+1)) then
    877          js = j
    878          exit
    879       endif
    880    enddo
    881 
    882    je = size(ydat(:))-1
    883    do j = js, size(ydat(:))-1
    884       if (yend >= ydat(j) .and. yend <= ydat(j+1)) then
    885          je = j
    886          exit
    887       endif
    888    enddo
    889 
    890 !print '(a,i2,2(a,f10.5),2(a,i4))', "PE=",mpp_pe(),"  phs=",ybeg,"  phn=",yend,"  js=",js,"  je=",je
    891 
    892  end subroutine find_indices


ENTRY POINTS

  Name                                       
                                             
 topography_mod_mp_find_indices_             

Page 39          Source Listing                  FIND_INDICES
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIND_INDICES               Subr   869                                                            844                               
 J                          Local  872      I(4)            4           scalar                    875,876,877,883,884,885           
 JE                         Dummy  869      I(4)            4           scalar   ARG,OUT          882,885                           
 JS                         Dummy  869      I(4)            4           scalar   ARG,OUT          874,877,883                       
 SIZE                       Func   875                                  scalar                    875,882,883                       
 YBEG                       Dummy  869      R(8)            8           scalar   ARG,IN           876                               
 YDAT                       Dummy  869      R(8)            8     1     1        ARG,IN           875,876,882,883,884               
 YEND                       Dummy  869      R(8)            8           scalar   ARG,IN           884                               

Page 40          Source Listing                  FIND_INDICES
2021-06-01 08:56                                 topography.F90

    893 
    894 !#######################################################################
    895  subroutine input_data ( indx, xdat, ydat, zdat )
    896  integer, intent(in) :: indx
    897  real, intent(out) :: xdat(ipts+1), ydat(jpts+1), zdat(ipts,jpts)
    898  integer :: nc
    899 
    900   if( file_is_opened(indx) ) then
    901      call read_data(fileobj(indx), 'xdat', xdat)
    902      call read_data(fileobj(indx), 'ydat', ydat)
    903      call read_data(fileobj(indx), 'zdat', zdat)
    904   endif
    905 
    906  end subroutine input_data


ENTRY POINTS

  Name                                     
                                           
 topography_mod_mp_input_data_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPRESSED_READ_1D         Subr   901                                           PRIV             901,902                           
 COMPRESSED_READ_2D         Subr   903                                           PRIV             903                               
 INDX                       Dummy  895      I(4)            4           scalar   ARG,IN           900,901,902,903                   
 INPUT_DATA                 Subr   895                                                            804,841,915,935                   
 NC                         Local  898      I(4)            4           scalar                                                      
 XDAT                       Dummy  895      R(8)            8     1     0        ARG,TGT,OUT      901                               
 YDAT                       Dummy  895      R(8)            8     1     0        ARG,TGT,OUT      902                               
 ZDAT                       Dummy  895      R(8)            8     2     0        ARG,TGT,OUT      903                               

Page 41          Source Listing                  INPUT_DATA
2021-06-01 08:56                                 topography.F90

    907 
    908 !#######################################################################
    909 
    910  subroutine interp_water_1d ( blon, blat, zout, do_ocean )
    911  real   , intent(in)  :: blon(:), blat(:)
    912  real   , intent(out) :: zout(:,:)
    913  logical, intent(in), optional :: do_ocean
    914  real :: xdat(ipts+1), ydat(jpts+1), zdat(ipts,jpts)
    915     call input_data ( WATER_INDEX, xdat, ydat, zdat )
    916 
    917 ! only use designated ocean points
    918     if (present(do_ocean)) then
    919         if (do_ocean) call determine_ocean_points (zdat)
    920     endif
    921 
    922 ! interpolate onto output grid
    923     call horiz_interp ( zdat, xdat, ydat, blon, blat, zout )
    924 
    925  end subroutine interp_water_1d


ENTRY POINTS

  Name                                          
                                                
 topography_mod_mp_interp_water_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLAT                       Dummy  910      R(8)            8     1     1        ARG,IN           923                               
 BLON                       Dummy  910      R(8)            8     1     1        ARG,IN           923                               
 DO_OCEAN                   Dummy  910      L(4)            4           scalar   ARG,IN           918,919                           
 INTERP_WATER_1D            Subr   910                                                            421,588                           
 PRESENT                    Func   918                                  scalar                    918                               
 XDAT                       Local  914      R(8)            8     1     0        TGT              915,923                           
 YDAT                       Local  914      R(8)            8     1     0        TGT              915,923                           
 ZDAT                       Local  914      R(8)            8     2     0        TGT              915,919,923                       
 ZOUT                       Dummy  910      R(8)            8     2     1        ARG,OUT          923                               

Page 42          Source Listing                  INTERP_WATER_1D
2021-06-01 08:56                                 topography.F90

    926 
    927 !#######################################################################
    928 
    929  subroutine interp_water_2d ( blon, blat, zout, do_ocean )
    930  real   , intent(in)  :: blon(:,:), blat(:,:)
    931  real   , intent(out) :: zout(:,:)
    932  logical, intent(in), optional :: do_ocean
    933  real :: xdat(ipts+1), ydat(jpts+1), zdat(ipts,jpts)
    934 
    935     call input_data ( WATER_INDEX, xdat, ydat, zdat )
    936 
    937 ! only use designated ocean points
    938     if (present(do_ocean)) then
    939         if (do_ocean) call determine_ocean_points (zdat)
    940     endif
    941 
    942 ! interpolate onto output grid
    943     call horiz_interp ( zdat, xdat, ydat, blon, blat, zout )
    944 
    945  end subroutine interp_water_2d


ENTRY POINTS

  Name                                          
                                                
 topography_mod_mp_interp_water_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLAT                       Dummy  929      R(8)            8     2     1        ARG,IN           943                               
 BLON                       Dummy  929      R(8)            8     2     1        ARG,IN           943                               
 DO_OCEAN                   Dummy  929      L(4)            4           scalar   ARG,IN           938,939                           
 HORIZ_INTERP_SOLO_1D_SRC   Subr   943                                           PRIV             943,1165                          
 INTERP_WATER_2D            Subr   929                                                            450,616                           
 PRESENT                    Func   938                                  scalar                    938                               
 XDAT                       Local  933      R(8)            8     1     0        TGT              935,943                           
 YDAT                       Local  933      R(8)            8     1     0        TGT              935,943                           
 ZDAT                       Local  933      R(8)            8     2     0        TGT              935,939,943                       
 ZOUT                       Dummy  929      R(8)            8     2     1        ARG,OUT          943                               

Page 43          Source Listing                  INTERP_WATER_2D
2021-06-01 08:56                                 topography.F90

    946 
    947 !#######################################################################
    948 
    949  subroutine determine_ocean_points ( pctwater )
    950  real, intent(inout) :: pctwater(:,:)
    951  logical :: ocean(size(pctwater,1),size(pctwater,2))
    952  integer :: i, j, m, n, im, ip, jm, jp, new
    953 
    954  real :: ocean_pct_crit = .500
    955 
    956 ! resolution of the grid
    957     m = size(pctwater,1)
    958     n = size(pctwater,2)
    959 
    960 ! the 1/6 degree navy percent water data set
    961 ! designates ocean grid boxes as 100 percent water
    962 ! all other grid boxes have <= 99 percent water
    963 
    964 ! set a mask for ocean grid boxes
    965     ocean = (pctwater > .999)
    966     new = count(ocean)
    967 
    968 ! set land grid boxes that have sufficient amount of water
    969 ! to ocean grid boxes when they are adjacent to ocean points
    970 ! iterate until there are no new ocean points
    971     do
    972     if (new == 0) exit
    973     new = 0
    974 
    975        do j = 1, n
    976        do i = 1, m
    977           if (.not.ocean(i,j) .and. pctwater(i,j) > ocean_pct_crit) then
    978              im = i-1; ip = i+1; jm = j-1; jp = j+1
    979              if (im == 0)   im = m
    980              if (ip == m+1) ip = 1
    981              if (jm == 0)   jm = 1
    982              if (jp == n+1) jp = n
    983 ! check the 8 grid boxes that surround this grid box
    984              if (ocean(im,j ) .or. ocean(ip,j ) .or. ocean(i ,jm) .or. ocean(i ,jp) .or. &
    985                  ocean(im,jm) .or. ocean(ip,jm) .or. ocean(ip,jp) .or. ocean(im,jp)) then
    986                  ocean(i,j) = .true.
    987                  new = new + 1
    988              endif
    989           endif
    990        enddo
    991        enddo
    992 !print *, 'new=',new
    993 
    994     enddo
    995 
    996 ! final step is to elimate water percentage if land
    997     where (.not.ocean) pctwater = 0.
    998 
    999  end subroutine determine_ocean_points

Page 44          Source Listing                  DETERMINE_OCEAN_POINTS
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                                 
                                                       
 topography_mod_mp_determine_ocean_points_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COUNT                      Func   966                                  scalar                    966                               
 DETERMINE_OCEAN_POINTS     Subr   949                                                            919,939,1140,1161                 
 I                          Local  952      I(4)            4           scalar                    976,977,978,984,986               
 IM                         Local  952      I(4)            4           scalar                    978,979,984,985                   
 IP                         Local  952      I(4)            4           scalar                    978,980,984,985                   
 J                          Local  952      I(4)            4           scalar                    975,977,978,984,986               
 JM                         Local  952      I(4)            4           scalar                    978,981,984,985                   
 JP                         Local  952      I(4)            4           scalar                    978,982,984,985                   
 M                          Local  952      I(4)            4           scalar                    957,976,979,980                   
 N                          Local  952      I(4)            4           scalar                    958,975,982                       
 NEW                        Local  952      I(4)            4           scalar                    966,972,973,987                   
 OCEAN                      Local  951      L(4)            4     2     0                         965,966,977,984,985,986,997       
 OCEAN_PCT_CRIT             Local  954      R(8)            8           scalar                    954,977                           
 PCTWATER                   Dummy  949      R(8)            8     2     1        ARG,INOUT        951,957,958,965,977,997           
 SIZE                       Func   951                                  scalar                    951,957,958                       

Page 45          Source Listing                  DETERMINE_OCEAN_POINTS
2021-06-01 08:56                                 topography.F90

   1000 
   1001 !#######################################################################
   1002 ! reads the namelist file, write namelist to log file,
   1003 ! and initializes constants
   1004 
   1005 subroutine read_namelist
   1006 
   1007    integer :: unit, ierr, io
   1008 
   1009 !  read namelist
   1010 
   1011    read (input_nml_file, topography_nml, iostat=io)
   1012    ierr = check_nml_error(io,'topography_nml')
   1013 
   1014 !  write version and namelist to log file
   1015 
   1016    if (mpp_pe() == mpp_root_pe()) then
   1017      unit = stdlog()
   1018      write (unit, nml=topography_nml)
   1019    endif
   1020 
   1021 end subroutine read_namelist


ENTRY POINTS

  Name                                        
                                              
 topography_mod_mp_read_namelist_             

Page 46          Source Listing                  READ_NAMELIST
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_NML_ERROR            Func   1012     I(4)            4           scalar   PRIV             52,1012                           
 IERR                       Local  1007     I(4)            4           scalar                    1012                              
 INPUT_NML_FILE             Local  1011     CHAR                  1     1        ALC,TGT,PRIV     64,1011                           
 IO                         Local  1007     I(4)            4           scalar                    1011,1012                         
 READ_NAMELIST              Subr   1005                                                           186                               
 TOPOGRAPHY_NML             Local  1011                                 scalar                    1011,1018                         
 UNIT                       Local  1007     I(4)            4           scalar                    1017,1018                         

Page 47          Source Listing                  READ_NAMELIST
2021-06-01 08:56                                 topography.F90

   1022 
   1023 !!-------- functions added for mpp_io --------
   1024 
   1025  function get_water_frac_1d_mpp_io (blon, blat, water_frac)
   1026 
   1027  real, intent(in),  dimension(:)   :: blon, blat
   1028  real, intent(out), dimension(:,:) :: water_frac
   1029  logical :: get_water_frac_1d_mpp_io
   1030 
   1031 !-----------------------------------------------------------------------
   1032    if (.not. module_is_initialized) call topography_init()
   1033 
   1034    if ( any(shape(water_frac(:,:)) /= (/size(blon(:))-1,size(blat(:))-1/)) ) &
   1035         call error_mesg('get_water_frac_1d_mpp_io','shape(water_frac) is not&
   1036                  & equal to (/size(blon)-1,size(blat)-1/))', FATAL)
   1037 
   1038    if ( open_topog_file_mpp_io(water_file) ) then
   1039        call interp_water_1d_mpp_io ( blon, blat, water_frac )
   1040        get_water_frac_1d_mpp_io = .true.
   1041    else
   1042        get_water_frac_1d_mpp_io = .false.
   1043    endif
   1044 
   1045 !-----------------------------------------------------------------------
   1046 
   1047  end function get_water_frac_1d_mpp_io


ENTRY POINTS

  Name                                                   
                                                         
 topography_mod_mp_get_water_frac_1d_mpp_io_             

Page 48          Source Listing                  GET_WATER_FRAC_1D_MPP_IO
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   1034                                 scalar                    1034                              
 BLAT                       Dummy  1025     R(8)            8     1     1        ARG,IN           1034,1039                         
 BLON                       Dummy  1025     R(8)            8     1     1        ARG,IN           1034,1039                         
 GET_WATER_FRAC_1D_MPP_IO   Func   1025     L(4)            4           scalar                    664,1040,1042                     
 SHAPE                      Func   1034                                 scalar                    1034                              
 SIZE                       Func   1034                                 scalar                    1034                              
 WATER_FRAC                 Dummy  1025     R(8)            8     2     1        ARG,OUT          1034,1039                         

Page 49          Source Listing                  GET_WATER_FRAC_1D_MPP_IO
2021-06-01 08:56                                 topography.F90

   1048 
   1049 !#######################################################################
   1050 
   1051  function get_water_frac_2d_mpp_io (blon, blat, water_frac)
   1052 
   1053  real, intent(in),  dimension(:,:) :: blon, blat
   1054  real, intent(out), dimension(:,:) :: water_frac
   1055  logical :: get_water_frac_2d_mpp_io
   1056 
   1057 !-----------------------------------------------------------------------
   1058    if (.not. module_is_initialized) call topography_init()
   1059 
   1060    if ( any(shape(water_frac(:,:)) /= (/size(blon,1)-1,size(blon,2)-1/)) .or. &
   1061         any(shape(water_frac(:,:)) /= (/size(blat,1)-1,size(blat,2)-1/)) ) &
   1062         call error_mesg('get_water_frac_2d_mpp_io','shape(water_frac) is not&
   1063             & equal to (/size(blon,1)-1,size(blon,2)-1/))', FATAL)
   1064 
   1065    if ( open_topog_file_mpp_io(water_file) ) then
   1066        call interp_water_2d_mpp_io ( blon, blat, water_frac )
   1067        get_water_frac_2d_mpp_io = .true.
   1068    else
   1069        get_water_frac_2d_mpp_io = .false.
   1070    endif
   1071  end function get_water_frac_2d_mpp_io


ENTRY POINTS

  Name                                                   
                                                         
 topography_mod_mp_get_water_frac_2d_mpp_io_             

Page 50          Source Listing                  GET_WATER_FRAC_2D_MPP_IO
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   1060                                 scalar                    1060,1061                         
 BLAT                       Dummy  1051     R(8)            8     2     1        ARG,IN           1061,1066                         
 BLON                       Dummy  1051     R(8)            8     2     1        ARG,IN           1060,1066                         
 GET_WATER_FRAC_2D_MPP_IO   Func   1051     L(4)            4           scalar                    702,1067,1069                     
 SHAPE                      Func   1060                                 scalar                    1060,1061                         
 SIZE                       Func   1060                                 scalar                    1060,1061                         
 WATER_FRAC                 Dummy  1051     R(8)            8     2     1        ARG,OUT          1060,1061,1066                    

Page 51          Source Listing                  GET_WATER_FRAC_2D_MPP_IO
2021-06-01 08:56                                 topography.F90

   1072 
   1073 !#######################################################################
   1074 
   1075  function open_topog_file_mpp_io ( filename )
   1076  character(len=*), intent(in) :: filename
   1077  logical :: open_topog_file_mpp_io
   1078  real    :: r_ipts, r_jpts
   1079  integer :: namelen
   1080  integer :: unit
   1081 
   1082  namelen = len(trim(filename))
   1083   if ( file_exist(filename) .AND. filename(namelen-2:namelen) == '.nc') then
   1084      if (mpp_pe() == mpp_root_pe()) call mpp_error ('topography_mod', &
   1085             'Reading NetCDF formatted input data file: '//filename, NOTE)
   1086      call read_data_mpp_io(filename, 'ipts', r_ipts, no_domain=.true.)
   1087      call read_data_mpp_io(filename, 'jpts', r_jpts, no_domain=.true.)
   1088      ipts = nint(r_ipts)
   1089      jpts = nint(r_jpts)
   1090      open_topog_file_mpp_io = .true.
   1091   else
   1092      if ( file_exist(filename) ) then
   1093         if (mpp_pe() == mpp_root_pe()) call mpp_error ('topography_mod', &
   1094              'Reading native formatted input data file: '//filename, NOTE)
   1095         unit = open_ieee32_file(trim(filename), 'read')
   1096         read (unit) ipts, jpts
   1097         open_topog_file_mpp_io = .true.
   1098      else
   1099         open_topog_file_mpp_io = .false.
   1100      endif
   1101   endif
   1102 
   1103  end function open_topog_file_mpp_io

Page 52          Source Listing                  OPEN_TOPOG_FILE_MPP_IO
2021-06-01 08:56 Entry Points                    topography.F90



ENTRY POINTS

  Name                                                 
                                                       
 topography_mod_mp_open_topog_file_mpp_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILENAME                   Dummy  1075     CHAR                        scalar   ARG,IN           1082,1083,1085,1086,1087,1092,1094
                                                                                                  ,1095                             
 FILE_EXIST                 Func   1083     L(4)            4           scalar   PRIV             59,1083,1092,1115                 
 LEN                        Func   1082                                 scalar                    1082                              
 NAMELEN                    Local  1079     I(4)            4           scalar                    1082,1083                         
 NINT                       Func   1088                                 scalar                    1088,1089                         
 OPEN_IEEE32_FILE           Func   1095     I(4)            4           scalar   PRIV             59,1095                           
 OPEN_TOPOG_FILE_MPP_IO     Func   1075     L(4)            4           scalar                    251,278,335,362,416,445,584,612,10
                                                                                                  38,1065,1090,1097,1099            
 READ_DATA_MPP_IO           Local  1086                                 scalar   PRIV             1086,1087,1116,1117,1118          
 READ_DATA_SCALAR_NEW       Subr   1086                                          PRIV             1086,1087                         
 R_IPTS                     Local  1078     R(8)            8           scalar                    1086,1088                         
 R_JPTS                     Local  1078     R(8)            8           scalar                    1087,1089                         
 TRIM                       Func   1082                                 scalar                    1082,1095                         
 UNIT                       Local  1080     I(4)            4           scalar                    1095,1096                         

Page 53          Source Listing                  OPEN_TOPOG_FILE_MPP_IO
2021-06-01 08:56                                 topography.F90

   1104 
   1105 
   1106  subroutine input_data_mpp_io ( ifile, xdat, ydat, zdat )
   1107  character(len=*), intent(in) :: ifile
   1108  real, intent(out) :: xdat(ipts+1), ydat(jpts+1), zdat(ipts,jpts)
   1109  integer :: nc
   1110  integer :: unit
   1111    nc = len_trim(ifile)
   1112 
   1113 ! note: ipts,jpts,unit are global
   1114 
   1115   if ( file_exist(trim(ifile)) .AND. ifile(nc-2:nc) == '.nc') then
   1116      call read_data_mpp_io(trim(ifile), 'xdat', xdat, no_domain=.true.)
   1117      call read_data_mpp_io(trim(ifile), 'ydat', ydat, no_domain=.true.)
   1118      call read_data_mpp_io(trim(ifile), 'zdat', zdat, no_domain=.true.)
   1119   else
   1120     read (unit) xdat, ydat    ! read lon/lat edges in radians
   1121     read (unit) zdat          ! read land surface height in meters
   1122     call close_file (unit)
   1123  endif
   1124 
   1125  end subroutine input_data_mpp_io


ENTRY POINTS

  Name                                            
                                                  
 topography_mod_mp_input_data_mpp_io_             

Page 54          Source Listing                  INPUT_DATA_MPP_IO
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOSE_FILE                 Subr   1122                                          PRIV             60,1122                           
 IFILE                      Dummy  1106     CHAR                        scalar   ARG,IN           1111,1115,1116,1117,1118          
 INPUT_DATA_MPP_IO          Subr   1106                                                           802,839,1136,1157                 
 LEN_TRIM                   Func   1111                                 scalar                    1111                              
 NC                         Local  1109     I(4)            4           scalar                    1111,1115                         
 READ_DATA_1D_NEW           Subr   1116                                          PRIV             1116,1117                         
 READ_DATA_2D_NEW           Subr   1118                                          PRIV             1118                              
 TRIM                       Func   1115                                 scalar                    1115,1116,1117,1118               
 UNIT                       Local  1110     I(4)            4           scalar                    1120,1121,1122                    
 XDAT                       Dummy  1106     R(8)            8     1     0        ARG,TGT,OUT      1116,1120                         
 YDAT                       Dummy  1106     R(8)            8     1     0        ARG,TGT,OUT      1117,1120                         
 ZDAT                       Dummy  1106     R(8)            8     2     0        ARG,TGT,OUT      1118,1121                         

Page 55          Source Listing                  INPUT_DATA_MPP_IO
2021-06-01 08:56                                 topography.F90

   1126 
   1127 !#######################################################################
   1128 
   1129  subroutine interp_water_1d_mpp_io ( blon, blat, zout, do_ocean )
   1130  real   , intent(in)  :: blon(:), blat(:)
   1131  real   , intent(out) :: zout(:,:)
   1132  logical, intent(in), optional :: do_ocean
   1133 
   1134  real :: xdat(ipts+1), ydat(jpts+1), zdat(ipts,jpts)
   1135 
   1136     call input_data_mpp_io ( water_file, xdat, ydat, zdat )
   1137 
   1138 ! only use designated ocean points
   1139     if (present(do_ocean)) then
   1140         if (do_ocean) call determine_ocean_points (zdat)
   1141     endif
   1142 
   1143 ! interpolate onto output grid
   1144     call horiz_interp ( zdat, xdat, ydat, blon, blat, zout )
   1145 
   1146  end subroutine interp_water_1d_mpp_io


ENTRY POINTS

  Name                                                 
                                                       
 topography_mod_mp_interp_water_1d_mpp_io_             

Page 56          Source Listing                  INTERP_WATER_1D_MPP_IO
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLAT                       Dummy  1129     R(8)            8     1     1        ARG,IN           1144                              
 BLON                       Dummy  1129     R(8)            8     1     1        ARG,IN           1144                              
 DO_OCEAN                   Dummy  1129     L(4)            4           scalar   ARG,IN           1139,1140                         
 INTERP_WATER_1D_MPP_IO     Subr   1129                                                           417,585,1039                      
 PRESENT                    Func   1139                                 scalar                    1139                              
 XDAT                       Local  1134     R(8)            8     1     0        TGT              1136,1144                         
 YDAT                       Local  1134     R(8)            8     1     0        TGT              1136,1144                         
 ZDAT                       Local  1134     R(8)            8     2     0        TGT              1136,1140,1144                    
 ZOUT                       Dummy  1129     R(8)            8     2     1        ARG,OUT          1144                              

Page 57          Source Listing                  INTERP_WATER_1D_MPP_IO
2021-06-01 08:56                                 topography.F90

   1147 
   1148 !#######################################################################
   1149 
   1150  subroutine interp_water_2d_mpp_io ( blon, blat, zout, do_ocean )
   1151  real   , intent(in)  :: blon(:,:), blat(:,:)
   1152  real   , intent(out) :: zout(:,:)
   1153  logical, intent(in), optional :: do_ocean
   1154 
   1155  real :: xdat(ipts+1), ydat(jpts+1), zdat(ipts,jpts)
   1156 
   1157     call input_data_mpp_io ( water_file, xdat, ydat, zdat )
   1158 
   1159 ! only use designated ocean points
   1160     if (present(do_ocean)) then
   1161         if (do_ocean) call determine_ocean_points (zdat)
   1162     endif
   1163 
   1164 ! interpolate onto output grid
   1165     call horiz_interp ( zdat, xdat, ydat, blon, blat, zout )
   1166 
   1167  end subroutine interp_water_2d_mpp_io


ENTRY POINTS

  Name                                                 
                                                       
 topography_mod_mp_interp_water_2d_mpp_io_             

Page 58          Source Listing                  INTERP_WATER_2D_MPP_IO
2021-06-01 08:56 Symbol Table                    topography.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BLAT                       Dummy  1150     R(8)            8     2     1        ARG,IN           1165                              
 BLON                       Dummy  1150     R(8)            8     2     1        ARG,IN           1165                              
 DO_OCEAN                   Dummy  1150     L(4)            4           scalar   ARG,IN           1160,1161                         
 INTERP_WATER_2D_MPP_IO     Subr   1150                                                           446,613,1066                      
 PRESENT                    Func   1160                                 scalar                    1160                              
 XDAT                       Local  1155     R(8)            8     1     0        TGT              1157,1165                         
 YDAT                       Local  1155     R(8)            8     1     0        TGT              1157,1165                         
 ZDAT                       Local  1155     R(8)            8     2     0        TGT              1157,1161,1165                    
 ZOUT                       Dummy  1150     R(8)            8     2     1        ARG,OUT          1165                              

Page 59          Source Listing                  INTERP_WATER_2D_MPP_IO
2021-06-01 08:56                                 topography.F90

   1168 
   1169 !#######################################################################
   1170 
   1171 end module topography_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONSTANTS_MOD              Module 63                                                             63                                
 FMS2_IO_MOD                Module 57                                                             57                                
 FMSNETCDFFILE_T            Type   57                                   scalar                    57,110                            
 FMS_IO_MOD                 Module 59                                                             59                                
 FMS_MOD                    Module 52                                                             52,60                             
 GAUSSIAN_TOPOG_INIT        Subr   48                                                             48,73                             
 GAUSSIAN_TOPOG_MOD         Module 48                                                             48                                
 GET_GAUSSIAN_TOPOG         Func   48       R(8)            8     2     0                         48,73                             
 GET_OCEAN_FRAC             Local  81                                   scalar                    71                                
 GET_OCEAN_FRAC_1D@0        Local  403      L(4)            4           scalar                                                      
 GET_OCEAN_FRAC_2D@0        Local  431      L(4)            4           scalar                                                      
 GET_OCEAN_MASK             Local  84                                   scalar                    71                                
 GET_OCEAN_MASK_1D@0        Local  488      L(4)            4           scalar                                                      
 GET_OCEAN_MASK_2D@0        Local  513      L(4)            4           scalar                                                      
 GET_TOPOG_MEAN             Local  75                                   scalar                    70                                
 GET_TOPOG_MEAN_1D@0        Local  237      L(4)            4           scalar                                                      
 GET_TOPOG_MEAN_2D@0        Local  264      L(4)            4           scalar                                                      
 GET_TOPOG_STDEV            Local  78                                   scalar                    70                                
 GET_TOPOG_STDEV_1D@0       Local  322      L(4)            4           scalar                                                      
 GET_TOPOG_STDEV_2D@0       Local  348      L(4)            4           scalar                                                      
 GET_WATER_FRAC             Local  87                                   scalar                    72                                
 GET_WATER_FRAC_1D@0        Local  570      L(4)            4           scalar                                                      
 GET_WATER_FRAC_2D@0        Local  597      L(4)            4           scalar                                                      
 GET_WATER_MASK             Local  90                                   scalar                    72                                
 GET_WATER_MASK_1D@0        Local  653      L(4)            4           scalar                                                      
 GET_WATER_MASK_2D@0        Local  692      L(4)            4           scalar                                                      
 HORIZ_INTERP_MOD           Module 49                                                             49                                
 MPP_MOD                    Module 64                                                             64                                
 PI                         Param  63       R(8)            8           scalar   PRIV             63                                
 TOPOGRAPHY_MOD             Module 21                                                                                               

Page 60          Source Listing                  INTERP_WATER_2D_MPP_IO
2021-06-01 08:56                                 topography.F90

   1172 
   1173 ! <INFO>
   1174 
   1175 !   <TESTPROGRAM NAME="">
   1176 !
   1177 !  To run this program you will need the topography and percent water
   1178 !  data sets and use the following namelist (in file input.nml).
   1179 !
   1180 !   &amp;gaussian_topog_nml
   1181 !     height = 5000., 3000., 3000., 3000.,
   1182 !     olon   =   90.,  255.,  285.,    0.,
   1183 !     olat   =   45.,   45.,  -15.,  -90.,
   1184 !     wlon   =   15.,   10.,    5.,  180.,
   1185 !     wlat   =   15.,   25.,   25.,   20., /
   1186 !
   1187 !  program test
   1188 !
   1189 !  ! test program for topography and gaussian_topog modules
   1190 !  <PRE>
   1191 !  use topography_mod
   1192 !  implicit none
   1193 !
   1194 !  integer, parameter :: nlon=24, nlat=18
   1195 !  real :: x(nlon), y(nlat), xb(nlon+1), yb(nlat+1), z(nlon,nlat)
   1196 !  real :: hpi, rtd
   1197 !  integer :: i,j
   1198 !  logical :: a
   1199 !
   1200 !  ! gaussian mountain parameters
   1201 !  real, parameter :: ht=4000.
   1202 !  real, parameter :: x0=90., y0=45. ! origin in degrees
   1203 !  real, parameter :: xw=15., yw=15. ! half-width in degees
   1204 !  real, parameter :: xr=30., yr= 0. ! ridge-width in degrees
   1205 !
   1206 !  ! create lat/lon grid in radians
   1207 !    hpi = acos(0.0)
   1208 !    rtd = 90./hpi ! rad to deg
   1209 !    do i=1,nlon
   1210 !      xb(i) = 4.*hpi*real(i-1)/real(nlon)
   1211 !    enddo
   1212 !      xb(nlon+1) = xb(1)+4.*hpi
   1213 !      yb(1) = -hpi
   1214 !    do j=2,nlat
   1215 !      yb(j) = yb(j-1) + 2.*hpi/real(nlat)
   1216 !    enddo
   1217 !      yb(nlat+1) = hpi
   1218 !  ! mid-point of grid boxes
   1219 !    x(1:nlon) = 0.5*(xb(1:nlon)+xb(2:nlon+1))
   1220 !    y(1:nlat) = 0.5*(yb(1:nlat)+yb(2:nlat+1))
   1221 !  ! test topography_mod routines
   1222 !    a = get_topog_mean(xb,yb,z)
   1223 !    call printz ('get_topog_mean')
   1224 !
   1225 !    a = get_water_frac(xb,yb,z)
   1226 !    z = z*100. ! in percent
   1227 !    call printz ('get_water_frac')
   1228 !

Page 61          Source Listing                  INTERP_WATER_2D_MPP_IO
2021-06-01 08:56                                 topography.F90

   1229 !    a = get_ocean_frac(xb,yb,z)
   1230 !    z = z*100. ! in percent
   1231 !    call printz ('get_ocean_frac')
   1232 !
   1233 !  ! test gaussian_topog_mod routines
   1234 !    a = .true.
   1235 !    z = get_gaussian_topog(x,y,ht,x0,y0,xw,yw,xr,yr)
   1236 !    call printz ('get_gaussian_topog')
   1237 !
   1238 !    call gaussian_topog_init (x,y,z)
   1239 !    call printz ('gaussian_topog_init')
   1240 !
   1241 !  contains
   1242 !
   1243 !  ! simple printout of topog/water array
   1244 !    subroutine printz (lab)
   1245 !    character(len=*), intent(in) :: lab
   1246 !     if (a) then
   1247 !        print '(/a)', trim(lab)
   1248 !     else
   1249 !        print '(/a)', 'no data available: '//trim(lab)
   1250 !        return
   1251 !     endif
   1252 !      ! print full grid
   1253 !        print '(3x,25i5)', (nint(x(i)*rtd),i=1,nlon)
   1254 !      do j=nlat,1,-1
   1255 !        print '(i3,25i5)', nint(y(j)*rtd), (nint(z(i,j)),i=1,nlon)
   1256 !      enddo
   1257 !    end subroutine printz
   1258 !
   1259 !  end program test
   1260 !   </PRE>
   1261 !   </TESTPROGRAM>
   1262 
   1263 !   <BUG>
   1264 !      Water mask produces some possible erroneous water points along
   1265 !      the coast of Antarctic (at about 90W).
   1266 !   </BUG>
   1267 
   1268 !   <FUTURE>Use of netcdf data sets. </FUTURE>
   1269 !   <FUTURE>Incorporate other topography and ocean data sets. </FUTURE>
   1270 !
   1271 ! </INFO>

Page 62          Source Listing                  INTERP_WATER_2D_MPP_IO
2021-06-01 08:56 Subprograms/Common Blocks       topography.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DETERMINE_OCEAN_POINTS     Subr   949                                                            919,939,1140,1161                 
 FIND_INDICES               Subr   869                                                            844                               
 GET_OCEAN_FRAC_1D          Func   403      L(4)            4           scalar   PRIV             416,417,420,421,497               
 GET_OCEAN_FRAC_2D          Func   431      L(4)            4           scalar   PRIV             445,446,449,450,522               
 GET_OCEAN_MASK_1D          Func   488      L(4)            4           scalar   PRIV             503,505                           
 GET_OCEAN_MASK_2D          Func   513      L(4)            4           scalar   PRIV             528,530                           
 GET_TOPOG_MEAN_1D          Func   237      L(4)            4           scalar   PRIV             251,253,256                       
 GET_TOPOG_MEAN_2D          Func   264      L(4)            4           scalar   PRIV             278,280,283                       
 GET_TOPOG_STDEV_1D         Func   322      L(4)            4           scalar   PRIV             335,337,339                       
 GET_TOPOG_STDEV_2D         Func   348      L(4)            4           scalar   PRIV             362,364,366                       
 GET_WATER_FRAC_1D          Func   570      L(4)            4           scalar   PRIV             584,585,587,588,675               
 GET_WATER_FRAC_1D_MPP_IO   Func   1025     L(4)            4           scalar                    664,1040,1042                     
 GET_WATER_FRAC_2D          Func   597      L(4)            4           scalar   PRIV             612,613,615,616,713               
 GET_WATER_FRAC_2D_MPP_IO   Func   1051     L(4)            4           scalar                    702,1067,1069                     
 GET_WATER_MASK_1D          Func   653      L(4)            4           scalar   PRIV             670,672,681,683                   
 GET_WATER_MASK_2D          Func   692      L(4)            4           scalar   PRIV             708,710,719,721                   
 INPUT_DATA                 Subr   895                                                            804,841,915,935                   
 INPUT_DATA_MPP_IO          Subr   1106                                                           802,839,1136,1157                 
 INTERP_TOPOG_1D            Subr   792                                                            256,339                           
 INTERP_TOPOG_2D            Subr   827                                                            283,366                           
 INTERP_WATER_1D            Subr   910                                                            421,588                           
 INTERP_WATER_1D_MPP_IO     Subr   1129                                                           417,585,1039                      
 INTERP_WATER_2D            Subr   929                                                            450,616                           
 INTERP_WATER_2D_MPP_IO     Subr   1150                                                           446,613,1066                      
 OPEN_TOPOG_FILE            Func   735      L(4)            4           scalar                    253,280,337,364,754,757           
 OPEN_TOPOG_FILE_MPP_IO     Func   1075     L(4)            4           scalar                    251,278,335,362,416,445,584,612,10
                                                                                                  38,1065,1090,1097,1099            
 OPEN_WATER_FILE            Func   762      L(4)            4           scalar                    420,449,587,615,781,784           
 READ_NAMELIST              Subr   1005                                                           186                               
 TOPOGRAPHY_INIT            Subr   181                                                                                              
 TOPOGRAPHY_MOD             Module 21                                                                                               

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags

Page 63          Source Listing                  INTERP_WATER_2D_MPP_IO
2021-06-01 08:56                                 topography.F90

       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3

Page 64          Source Listing                  INTERP_WATER_2D_MPP_IO
2021-06-01 08:56                                 topography.F90

       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,

Page 65          Source Listing                  INTERP_WATER_2D_MPP_IO
2021-06-01 08:56                                 topography.F90

           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : topography.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
