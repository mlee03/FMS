Page 1           Source Listing                  GAUSSIAN_TOPOG_INIT
2021-06-01 08:56                                 /tmp/ifort1fk3TM.i90

      1 # 1 "gaussian_topog.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 module gaussian_topog_mod
     22 
     23 ! <CONTACT EMAIL="Bruce.Wyman@noaa.gov">
     24 !   Bruce Wyman
     25 ! </CONTACT>
     26 
     27 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/"/>
     28 
     29 ! <OVERVIEW>
     30 !   Routines for creating Gaussian-shaped land surface topography
     31 !   for latitude-longitude grids.
     32 ! </OVERVIEW>
     33 
     34 ! <DESCRIPTION>
     35 !   Interfaces generate simple Gaussian-shaped mountains from
     36 !   parameters specified by either argument list or namelist input.
     37 !   The mountain shapes are controlled by the height, half-width,
     38 !   and ridge-width parameters.
     39 ! </DESCRIPTION>
     40 
     41 use  fms_mod, only: check_nml_error,                 &
     42                     stdlog, write_version_number,    &
     43                     mpp_pe, mpp_root_pe,             &
     44                     error_mesg, FATAL
     45 
     46 use constants_mod, only: pi
     47 
     48 use mpp_mod,       only: input_nml_file
     49 
     50 implicit none
     51 private
     52 
     53 public :: gaussian_topog_init, get_gaussian_topog
     54 
     55 !-----------------------------------------------------------------------
     56 ! <NAMELIST NAME="gaussian_topog_nml">
     57 !   <DATA NAME="height" UNITS="meter" TYPE="real" DIM="(mxmtns)" DEFAULT="0.">

Page 2           Source Listing                  GAUSSIAN_TOPOG_INIT
2021-06-01 08:56                                 gaussian_topog.F90

     58 !     Height in meters of the Gaussian mountains.
     59 !    </DATA>
     60 !   <DATA NAME="olon, olat" UNITS="degree" TYPE="real" DIM="(mxmtns)" DEFAULT="0.">
     61 !     The longitude and latitude of mountain origins (in degrees).
     62 !    </DATA>
     63 !   <DATA NAME="wlon, wlat" UNITS="degree" TYPE="real" DIM="(mxmtns)" DEFAULT="0.">
     64 !     The longitude and latitude half-width of mountain tails (in degrees).
     65 !    </DATA>
     66 !   <DATA NAME="rlon, rlat" UNITS="degree" TYPE="real" DIM="(mxmtns)" DEFAULT="0.">
     67 !     The longitude and latitude half-width of mountain ridges (in degrees).  For a
     68 !     "standard" Gaussian mountain set rlon=rlat=0.
     69 !    </DATA>
     70 !
     71 !    <DATA NAME="NOTE">
     72 !     The variables in this namelist are only used when routine
     73 !     <TT>gaussian_topog_init</TT> is called.  The namelist variables
     74 !     are dimensioned (by 10), so that multiple mountains can be generated.
     75 !
     76 !     Internal parameter mxmtns = 10. By default no mountains are generated.
     77 !    </DATA>
     78 
     79    integer, parameter :: maxmts = 10
     80 
     81    real, dimension(maxmts) :: height = 0.
     82    real, dimension(maxmts) ::  olon  = 0.
     83    real, dimension(maxmts) ::  olat  = 0.
     84    real, dimension(maxmts) ::  wlon  = 0.
     85    real, dimension(maxmts) ::  wlat  = 0.
     86    real, dimension(maxmts) ::  rlon  = 0.
     87    real, dimension(maxmts) ::  rlat  = 0.
     88 
     89    namelist /gaussian_topog_nml/ height, olon, olat, wlon, wlat, rlon, rlat
     90 ! </NAMELIST>
     91 
     92 !-----------------------------------------------------------------------
     93 
     94 ! Include variable "version" to be written to log file.
     95 # 1 "../include/file_version.h" 1 
     96 ! -*-f90-*-
     97 !***********************************************************************
     98 !*                   GNU Lesser General Public License
     99 !*
    100 !* This file is part of the GFDL Flexible Modeling System (FMS).
    101 !*
    102 !* FMS is free software: you can redistribute it and/or modify it under
    103 !* the terms of the GNU Lesser General Public License as published by
    104 !* the Free Software Foundation, either version 3 of the License, or (at
    105 !* your option) any later version.
    106 !*
    107 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    108 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    109 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    110 !* for more details.
    111 !*
    112 !* You should have received a copy of the GNU Lesser General Public
    113 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    114 !***********************************************************************

Page 3           Source Listing                  GAUSSIAN_TOPOG_INIT
2021-06-01 08:56                                 ../include/file_version.h

    115 
    116 # 23
    117 
    118   character(len=*), parameter :: version = 'unknown'
    119 
    120 # 95 "gaussian_topog.F90" 2 
    121 
    122 logical :: do_nml = .true.
    123 logical :: module_is_initialized = .FALSE.
    124 
    125 !-----------------------------------------------------------------------
    126 
    127 contains
    128 
    129 !#######################################################################
    130 
    131 ! <SUBROUTINE NAME="gaussian_topog_init">
    132 
    133 !   <OVERVIEW>
    134 !     Returns a surface height field that consists
    135 !     of the sum of one or more Gaussian-shaped mountains.
    136 !   </OVERVIEW>
    137 !   <DESCRIPTION>
    138 !     Returns a land surface topography that consists of a "set" of
    139 !     simple Gaussian-shaped mountains.  The height, position,
    140 !     width, and elongation of the mountains can be controlled
    141 !     by variables in namelist <LINK SRC="#NAMELIST">&#38;gaussian_topog_nml</LINK>.
    142 !   </DESCRIPTION>
    143 !   <TEMPLATE>
    144 !     <B>call gaussian_topog_init</B> ( lon, lat, zsurf )
    145 !   </TEMPLATE>
    146 
    147 !   <IN NAME="lon" UNITS="radians" TYPE="real" DIM="(:)">
    148 !     The mean grid box longitude in radians.
    149 !   </IN>
    150 !   <IN NAME="lat" UNITS="radians" TYPE="real" DIM="(:)">
    151 !     The mean grid box latitude in radians.
    152 !   </IN>
    153 !   <OUT NAME="zsurf" UNITS="meter" TYPE="real" DIM="(:,:)">
    154 !     The surface height (in meters).
    155 !     The size of this field must be size(lon) by size(lat).
    156 !   </OUT>
    157 
    158 subroutine gaussian_topog_init ( lon, lat, zsurf )
    159 
    160 real, intent(in)  :: lon(:), lat(:)
    161 real, intent(out) :: zsurf(:,:)
    162 
    163 integer :: n
    164 
    165   if (.not.module_is_initialized) then
    166      call write_version_number("GAUSSIAN_TOPOG_MOD", version)
    167   endif
    168 
    169   if(any(shape(zsurf) /= (/size(lon(:)),size(lat(:))/))) then
    170     call error_mesg ('get_gaussian_topog in topography_mod', &
    171      'shape(zsurf) is not equal to (/size(lon),size(lat)/)', FATAL)

Page 4           Source Listing                  GAUSSIAN_TOPOG_INIT
2021-06-01 08:56                                 gaussian_topog.F90

    172   endif
    173 
    174   if (do_nml) call read_namelist
    175 
    176 ! compute sum of all non-zero mountains
    177   zsurf(:,:) = 0.
    178   do n = 1, maxmts
    179     if ( height(n) == 0. ) cycle
    180     zsurf = zsurf + get_gaussian_topog ( lon, lat, height(n), &
    181                 olon(n), olat(n), wlon(n), wlat(n), rlon(n), rlat(n))
    182   enddo
    183  module_is_initialized = .TRUE.
    184 
    185 end subroutine gaussian_topog_init


ENTRY POINTS

  Name                                                  
                                                        
 gaussian_topog_mod_mp_gaussian_topog_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   169                                  scalar                    169                               
 DO_NML                     Local  174      L(4)            4           scalar                    122,174,251,304                   
 ERROR_MESG                 Subr   170                                           PRIV             44,170                            
 FATAL                      Param  171      I(4)            4           scalar   PRIV             44,171                            
 GAUSSIAN_TOPOG_INIT        Subr   158                                                                                              
 GET_GAUSSIAN_TOPOG         Func   180      R(8)            8     2     0                         53,180                            
 HEIGHT                     Local  179      R(8)            8     1     10                        81,89,179,180                     
 LAT                        Dummy  158      R(8)            8     1     1        ARG,IN           169,180                           
 LON                        Dummy  158      R(8)            8     1     1        ARG,IN           169,180                           
 MAXMTS                     Param  178      I(4)            4           scalar                    81,82,83,84,85,86,87,178          
 MODULE_IS_INITIALIZED      Local  165      L(4)            4           scalar                    123,165,183                       
 N                          Local  163      I(4)            4           scalar                    178,179,180,181                   
 OLAT                       Local  181      R(8)            8     1     10                        83,89,181                         
 OLON                       Local  181      R(8)            8     1     10                        82,89,181                         
 RLAT                       Local  181      R(8)            8     1     10                        87,89,181                         
 RLON                       Local  181      R(8)            8     1     10                        86,89,181                         
 SHAPE                      Func   169                                  scalar                    169                               
 SIZE                       Func   169                                  scalar                    169                               
 VERSION                    Param  166      CHAR            7           scalar                    166                               
 WLAT                       Local  181      R(8)            8     1     10                        85,89,181                         
 WLON                       Local  181      R(8)            8     1     10                        84,89,181                         
 WRITE_VERSION_NUMBER       Subr   166                                           PRIV             42,166                            
 ZSURF                      Dummy  158      R(8)            8     2     1        ARG,OUT          169,177,180                       

Page 5           Source Listing                  GAUSSIAN_TOPOG_INIT
2021-06-01 08:56                                 gaussian_topog.F90

    186 ! </SUBROUTINE>
    187 
    188 !#######################################################################
    189 
    190 ! <FUNCTION NAME="get_gaussian_topog">
    191 
    192 !   <OVERVIEW>
    193 !     Returns a simple surface height field that consists of a single
    194 !     Gaussian-shaped mountain.
    195 !   </OVERVIEW>
    196 !   <DESCRIPTION>
    197 !     Returns a single Gaussian-shaped mountain.
    198 !     The height, position, width, and elongation of the mountain
    199 !     is controlled by optional arguments.
    200 !   </DESCRIPTION>
    201 !   <TEMPLATE>
    202 !     zsurf = <B>get_gaussian_topog</B> ( lon, lat, height
    203 !                    [, olond, olatd, wlond, wlatd, rlond, rlatd ] )
    204 !   </TEMPLATE>
    205 
    206 !   <IN NAME="lon" UNITS="radians" TYPE="real" DIM="(:)">
    207 !     The mean grid box longitude in radians.
    208 !   </IN>
    209 !   <IN NAME="lat" UNITS="radians" TYPE="real" DIM="(:)">
    210 !     The mean grid box latitude in radians.
    211 !   </IN>
    212 !   <IN NAME="height" UNITS="meter" TYPE="real" DIM="(scalar)">
    213 !     Maximum surface height in meters.
    214 !   </IN>
    215 !   <IN NAME="olond, olatd" UNITS="degrees" TYPE="real" DIM="(scalar)">
    216 !     Position/origin of mountain in degrees longitude and latitude.
    217 !     This is the location of the maximum height.
    218 !   </IN>
    219 !   <IN NAME="wlond, wlatd" UNITS="degrees" TYPE="real" DIM="(scalar)" DEFAULT="15.">
    220 !     Gaussian half-width of mountain in degrees longitude and latitude.
    221 !   </IN>
    222 !   <IN NAME="rlond, rlatd" UNITS="degrees" TYPE="real" DIM="(scalar)" DEFAULT="0.">
    223 !     Ridge half-width of mountain in degrees longitude and latitude.
    224 !                    This is the elongation of the maximum height.
    225 !   </IN>
    226 !   <OUT NAME="zsurf" UNITS="meter" TYPE="real" DIM="(:,:)">
    227 !     The surface height (in meters).
    228 !              The size of the returned field is size(lon) by size(lat).
    229 !   </OUT>
    230 !   <ERROR MSG="shape(zsurf) is not equal to (/size(lon),size(lat)/)" STATUS="FATAL">
    231 !     Check the input grid size and output field size.
    232 !     The input grid is defined at the midpoint of grid boxes.
    233 !   </ERROR>
    234 !   <NOTE>
    235 !     Mountains do not wrap around the poles.
    236 !   </NOTE>
    237 
    238 function get_gaussian_topog ( lon, lat, height,                          &
    239                               olond, olatd, wlond, wlatd, rlond, rlatd ) &
    240                      result ( zsurf )
    241 
    242 real, intent(in)  :: lon(:), lat(:)

Page 6           Source Listing                  GET_GAUSSIAN_TOPOG
2021-06-01 08:56                                 gaussian_topog.F90

    243 real, intent(in)  :: height
    244 real, intent(in), optional :: olond, olatd, wlond, wlatd, rlond, rlatd
    245 real :: zsurf(size(lon,1),size(lat,1))
    246 
    247 integer :: i, j
    248 real    :: olon, olat, wlon, wlat, rlon, rlat
    249 real    :: tpi, dtr, dx, dy, xx, yy
    250 
    251   if (do_nml) call read_namelist
    252 
    253 ! no need to compute mountain if height=0
    254   if ( height == 0. ) then
    255        zsurf(:,:) = 0.
    256        return
    257   endif
    258 
    259   tpi = 2.0*pi
    260   dtr = tpi/360.
    261 
    262 ! defaults and convert degrees to radians (dtr)
    263   olon = 90.*dtr;  if (present(olond)) olon=olond*dtr
    264   olat = 45.*dtr;  if (present(olatd)) olat=olatd*dtr
    265   wlon = 15.*dtr;  if (present(wlond)) wlon=wlond*dtr
    266   wlat = 15.*dtr;  if (present(wlatd)) wlat=wlatd*dtr
    267   rlon =  0.    ;  if (present(rlond)) rlon=rlond*dtr
    268   rlat =  0.    ;  if (present(rlatd)) rlat=rlatd*dtr
    269 
    270 ! compute gaussian-shaped mountain
    271     do j=1,size(lat(:))
    272       dy = abs(lat(j) - olat)   ! dist from y origin
    273       yy = max(0., dy-rlat)/wlat
    274       do i=1,size(lon(:))
    275         dx = abs(lon(i) - olon) ! dist from x origin
    276         dx = min(dx, abs(dx-tpi))  ! To ensure that: -pi <= dx <= pi
    277         xx = max(0., dx-rlon)/wlon
    278         zsurf(i,j) = height*exp(-xx**2 - yy**2)
    279       enddo
    280     enddo
    281 
    282 end function get_gaussian_topog

Page 7           Source Listing                  GET_GAUSSIAN_TOPOG
2021-06-01 08:56 Entry Points                    gaussian_topog.F90



ENTRY POINTS

  Name                                                 
                                                       
 gaussian_topog_mod_mp_get_gaussian_topog_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   272                                  scalar                    272,275,276                       
 DTR                        Local  249      R(8)            8           scalar                    260,263,264,265,266,267,268       
 DX                         Local  249      R(8)            8           scalar                    275,276,277                       
 DY                         Local  249      R(8)            8           scalar                    272,273                           
 EXP                        Func   278                                  scalar                    278                               
 GET_GAUSSIAN_TOPOG         Func   238      R(8)            8     2     0                                                           
 HEIGHT                     Dummy  238      R(8)            8           scalar   ARG,IN           254,278                           
 I                          Local  247      I(4)            4           scalar                    274,275,278                       
 J                          Local  247      I(4)            4           scalar                    271,272,278                       
 LAT                        Dummy  238      R(8)            8     1     1        ARG,IN           245,271,272                       
 LON                        Dummy  238      R(8)            8     1     1        ARG,IN           245,274,275                       
 MAX                        Func   273                                  scalar                    273,277                           
 MIN                        Func   276                                  scalar                    276                               
 OLAT                       Local  248      R(8)            8           scalar                    264,272                           
 OLATD                      Dummy  239      R(8)            8           scalar   ARG,IN           264                               
 OLON                       Local  248      R(8)            8           scalar                    263,275                           
 OLOND                      Dummy  239      R(8)            8           scalar   ARG,IN           263                               
 PI                         Param  259      R(8)            8           scalar   PRIV             46,259                            
 PRESENT                    Func   263                                  scalar                    263,264,265,266,267,268           
 RLAT                       Local  248      R(8)            8           scalar                    268,273                           
 RLATD                      Dummy  239      R(8)            8           scalar   ARG,IN           268                               
 RLON                       Local  248      R(8)            8           scalar                    267,277                           
 RLOND                      Dummy  239      R(8)            8           scalar   ARG,IN           267                               
 SIZE                       Func   245                                  scalar   PRIV             245,271,274                       
 TPI                        Local  249      R(8)            8           scalar                    259,260,276                       
 WLAT                       Local  248      R(8)            8           scalar                    266,273                           
 WLATD                      Dummy  239      R(8)            8           scalar   ARG,IN           266                               
 WLON                       Local  248      R(8)            8           scalar                    265,277                           
 WLOND                      Dummy  239      R(8)            8           scalar   ARG,IN           265                               
 XX                         Local  249      R(8)            8           scalar                    277,278                           
 YY                         Local  249      R(8)            8           scalar                    273,278                           
 ZSURF                      Local  245      R(8)            8     2     0                         255,278                           

Page 8           Source Listing                  GET_GAUSSIAN_TOPOG
2021-06-01 08:56                                 gaussian_topog.F90

    283 ! </FUNCTION>
    284 
    285 !#######################################################################
    286 
    287 subroutine read_namelist
    288 
    289    integer :: unit, ierr, io
    290    real    :: dtr
    291 
    292 !  read namelist
    293 
    294    read (input_nml_file, gaussian_topog_nml, iostat=io)
    295    ierr = check_nml_error(io,'gaussian_topog_nml')
    296 
    297 !  write version and namelist to log file
    298 
    299    if (mpp_pe() == mpp_root_pe()) then
    300       unit = stdlog()
    301       write (unit, nml=gaussian_topog_nml)
    302    endif
    303 
    304    do_nml = .false.
    305 
    306 end subroutine read_namelist


ENTRY POINTS

  Name                                            
                                                  
 gaussian_topog_mod_mp_read_namelist_             

Page 9           Source Listing                  READ_NAMELIST
2021-06-01 08:56 Symbol Table                    gaussian_topog.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_NML_ERROR            Func   295      I(4)            4           scalar   PRIV             41,295                            
 DTR                        Local  290      R(8)            8           scalar                                                      
 GAUSSIAN_TOPOG_NML         Local  294                                  scalar                    294,301                           
 IERR                       Local  289      I(4)            4           scalar                    295                               
 INPUT_NML_FILE             Local  294      CHAR                  1     1        ALC,TGT,PRIV     48,294                            
 IO                         Local  289      I(4)            4           scalar                    294,295                           
 MPP_PE                     Func   299      I(4)            4           scalar   PRIV             43,299                            
 MPP_ROOT_PE                Func   299      I(4)            4           scalar   PRIV             43,299                            
 READ_NAMELIST              Subr   287                                                            174,251                           
 STDLOG                     Func   300      I(4)            4           scalar   PRIV             42,300                            
 UNIT                       Local  289      I(4)            4           scalar                    300,301                           

Page 10          Source Listing                  READ_NAMELIST
2021-06-01 08:56                                 gaussian_topog.F90

    307 
    308 !#######################################################################
    309 
    310 end module gaussian_topog_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONSTANTS_MOD              Module 46                                                             46                                
 FMS_MOD                    Module 41                                                             41                                
 GAUSSIAN_TOPOG_INIT        Subr   53                                                             53                                
 GAUSSIAN_TOPOG_MOD         Module 21                                                                                               
 MPP_MOD                    Module 48                                                             48                                

Page 11          Source Listing                  READ_NAMELIST
2021-06-01 08:56                                 gaussian_topog.F90

    311 
    312 ! <INFO>
    313 !   <NOTE>
    314 !     NAMELIST FOR GENERATING GAUSSIAN MOUNTAINS
    315 !
    316 !  * multiple mountains can be generated
    317 !  * the final mountains are the sum of all
    318 !
    319 !       height = height in meters
    320 !       olon, olat = longitude,latitude origin              (degrees)
    321 !       rlon, rlat = longitude,latitude half-width of ridge (degrees)
    322 !       wlon, wlat = longitude,latitude half-width of tail  (degrees)
    323 !
    324 !       Note: For the standard gaussian mountain
    325 !             set rlon = rlat = 0 .
    326 !
    327 ! <PRE>
    328 !
    329 !       height -->   ___________________________
    330 !                   /                           \
    331 !                  /              |              \
    332 !    gaussian     /               |               \
    333 !      sides --> /                |                \
    334 !               /               olon                \
    335 !         _____/                olat                 \______
    336 !
    337 !              |    |             |
    338 !              |<-->|<----------->|
    339 !              |wlon|    rlon     |
    340 !               wlat     rlat
    341 !
    342 ! </PRE>
    343 !
    344 !See the <LINK SRC="topography.html#TEST PROGRAM">topography </LINK>module documentation for a test program.
    345 !   </NOTE>
    346 ! </INFO>

Page 12          Source Listing                  READ_NAMELIST
2021-06-01 08:56 Subprograms/Common Blocks       gaussian_topog.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GAUSSIAN_TOPOG_INIT        Subr   158                                                                                              
 GAUSSIAN_TOPOG_MOD         Module 21                                                                                               
 GET_GAUSSIAN_TOPOG         Func   238      R(8)            8     2     0                                                           
 READ_NAMELIST              Subr   287                                                            174,251                           

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__

Page 13          Source Listing                  READ_NAMELIST
2021-06-01 08:56                                 gaussian_topog.F90

       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny

Page 14          Source Listing                  READ_NAMELIST
2021-06-01 08:56                                 gaussian_topog.F90

       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : gaussian_topog.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
