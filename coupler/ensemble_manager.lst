Page 1           Source Listing                  ENSEMBLE_MANAGER_INIT
2021-06-01 08:55                                 /tmp/ifortHznQih.i90

      1 # 1 "ensemble_manager.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 !> @file
     22 !! @brief ensemble_manager_mod
     23 !! @email gfdl.climate.model.info@noaa.gov
     24 module ensemble_manager_mod
     25 
     26 
     27   use fms_mod, only : check_nml_error
     28   use mpp_mod, only : mpp_npes, stdout, stdlog, mpp_error, FATAL
     29   use mpp_mod, only : mpp_pe, mpp_declare_pelist
     30   use mpp_mod, only : input_nml_file
     31   use fms2_io_mod, only : fms2_io_set_filename_appendix=>set_filename_appendix
     32   use fms_io_mod, only  : fms_io_set_filename_appendix=>set_filename_appendix
     33 
     34   IMPLICIT NONE
     35 
     36   private
     37 
     38   integer, parameter :: MAX_ENSEMBLE_SIZE = 100
     39 
     40 
     41   integer, allocatable, dimension(:,:) :: ensemble_pelist
     42   integer, allocatable, dimension(:,:) :: ensemble_pelist_ocean
     43   integer, allocatable, dimension(:,:) :: ensemble_pelist_atmos
     44   integer, allocatable, dimension(:,:) :: ensemble_pelist_land
     45   integer, allocatable, dimension(:,:) :: ensemble_pelist_ice
     46   integer, allocatable, dimension(:)   :: ensemble_pelist_ocean_filter
     47   integer, allocatable, dimension(:)   :: ensemble_pelist_atmos_filter
     48   integer, allocatable, dimension(:)   :: ensemble_pelist_land_filter
     49   integer, allocatable, dimension(:)   :: ensemble_pelist_ice_filter
     50 
     51   integer :: ensemble_size = 1
     52   integer :: ensemble_id = 1
     53   integer :: pe, total_npes_pm=0,ocean_npes_pm=0,atmos_npes_pm=0
     54   integer :: land_npes_pm=0,ice_npes_pm=0
     55 
     56   public :: ensemble_manager_init, get_ensemble_id, get_ensemble_size, get_ensemble_pelist
     57   public :: ensemble_pelist_setup

Page 2           Source Listing                  ENSEMBLE_MANAGER_INIT
2021-06-01 08:55                                 ensemble_manager.F90

     58   public :: get_ensemble_filter_pelist
     59 contains
     60 
     61 !> @brief ensemble_manager_init
     62 !! @throw FATAL, "ensemble_manager_mod: ensemble_nml variable ensemble_size must be a positive integer"
     63 !! @throw FATAL, "ensemble_manager_mod: ensemble_nml variable ensemble_size should be no larger than MAX_ENSEMBLE_SIZE, chan
     63 ge ensemble_size or increase MAX_ENSEMBLE_SIZE"
     64 !! @throw FATAL, "ensemble_size must be divis by npes"
     65 !! @throw FATAL, "get_ensemble_pelist: size of pelist 1st index < ensemble_size"
     66 !! @throw FATAL, "get_ensemble_pelist: size of pelist 2nd index < ocean_npes_pm"
     67 !! @throw FATAL, "get_ensemble_pelist: size of pelist 2nd index < atmos_npes_pm"
     68 !! @throw FATAL, "get_ensemble_pelist: size of pelist 2nd index < land_npes_pm"
     69 !! @throw FATAL, "get_ensemble_pelist: size of pelist 2nd index < ice_npes_pm"
     70 !! @throw FATAL, "get_ensemble_pelist: unknown argument name=[name]"
     71 !! @throw FATAL, "get_ensemble_pelist: size of pelist 2nd index < total_npes_pm"
     72   subroutine ensemble_manager_init()
     73 
     74 
     75     integer :: i, io_status, ioun, npes, ierr
     76 
     77     namelist /ensemble_nml/ ensemble_size
     78 
     79     read (input_nml_file, ensemble_nml, iostat=io_status)
     80     ierr = check_nml_error(io_status, 'ensemble_nml')
     81 
     82     if(ensemble_size < 1) call mpp_error(FATAL, &
     83        'ensemble_manager_mod: ensemble_nml variable ensemble_size must be a positive integer')
     84     if(ensemble_size > max_ensemble_size)  call mpp_error(FATAL, &
     85        'ensemble_manager_mod: ensemble_nml variable ensemble_size should be no larger than MAX_ENSEMBLE_SIZE, '// &
     86        'change ensemble_size or increase MAX_ENSEMBLE_SIZE')
     87 
     88     pe = mpp_pe()
     89     npes = mpp_npes()
     90     if (npes < ensemble_size) then
     91       call mpp_error(FATAL,'npes must be >= ensemble_size')
     92     endif
     93     total_npes_pm = npes/ensemble_size
     94     if (mod(npes, total_npes_pm) /= 0) call mpp_error(FATAL,'ensemble_size must be divis by npes')
     95 
     96     call mpp_declare_pelist((/(i,i=0,npes-1)/),'_ens0') ! for ensemble driver
     97 
     98   end subroutine ensemble_manager_init

Page 3           Source Listing                  ENSEMBLE_MANAGER_INIT
2021-06-01 08:55 Entry Points                    ensemble_manager.F90



ENTRY POINTS

  Name                                                      
                                                            
 ensemble_manager_mod_mp_ensemble_manager_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_NML_ERROR            Func   80       I(4)            4           scalar   PRIV             27,80                             
 ENSEMBLE_MANAGER_INIT      Subr   72                                                                                               
 ENSEMBLE_NML               Local  77                                   scalar                    79                                
 ENSEMBLE_SIZE              Local  77       I(4)            4           scalar                    51,77,82,84,90,93,113,128,137,138,
                                                                                                  144,145,151,152,158,159,168,169,18
                                                                                                  9,192,193,196,199,200,203,206,207,
                                                                                                  210,213,214,248,249,250,251,252,25
                                                                                                  9,261,335,362,363,364,365,366,402 
 FATAL                      Param  82       I(4)            4           scalar   PRIV             28,82,84,91,94,129,135,142,149,156
                                                                                                  ,162,166,190,197,204,211,217,245,2
                                                                                                  46                                
 I                          Local  75       I(4)            4           scalar                                                      
 IERR                       Local  75       I(4)            4           scalar                    80                                
 INPUT_NML_FILE             Local  79       CHAR                  1     1        ALC,TGT,PRIV     30,79                             
 IOUN                       Local  75       I(4)            4           scalar                                                      
 IO_STATUS                  Local  75       I(4)            4           scalar                    79,80                             
 MAX_ENSEMBLE_SIZE          Param  84       I(4)            4           scalar                    84                                
 MOD                        Func   94                                   scalar                    94                                
 MPP_DECLARE_PELIST         Subr   96                                            PRIV             29,96,275,337,339,341,343,347,349,
                                                                                                  351,353,386,389,392,395           
 MPP_ERROR                  Local  82                                   scalar   PRIV             28,82,84,91,94,129,135,142,149,156
                                                                                                  ,162,166,190,197,204,211,217,245,2
                                                                                                  46                                
 MPP_ERROR_BASIC            Subr   82                                            PRIV             82,84,91,94,129,135,142,149,156,16
                                                                                                  2,166,190,197,204,211,217,245,246 
 MPP_NPES                   Func   89       I(4)            4           scalar   PRIV             28,89                             
 MPP_PE                     Func   88       I(4)            4           scalar   PRIV             29,88                             
 NPES                       Local  75       I(4)            4           scalar                    89,90,93,94,96                    
 PE                         Local  88       I(4)            4           scalar                    88,273                            
 TOTAL_NPES_PM              Local  93       I(4)            4           scalar                    53,93,94,114,165,168,169,242,248  

Page 4           Source Listing                  ENSEMBLE_MANAGER_INIT
2021-06-01 08:55                                 ensemble_manager.F90

     99 
    100 !> @brief Getter function for ensemble_id
    101 !! @return Integer
    102   function get_ensemble_id()
    103     integer :: get_ensemble_id
    104     get_ensemble_id = ensemble_id
    105   end function get_ensemble_id


ENTRY POINTS

  Name                                                
                                                      
 ensemble_manager_mod_mp_get_ensemble_id_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ENSEMBLE_ID                Local  104      I(4)            4           scalar                    52,104,273,282,283,284,285,346,348
                                                                                                  ,350,352,403                      
 GET_ENSEMBLE_ID            Func   102      I(4)            4           scalar                                                      

Page 5           Source Listing                  GET_ENSEMBLE_ID
2021-06-01 08:55                                 ensemble_manager.F90

    106 
    107 !> @brief Returns ensemble size integer array
    108 !! @return Integer array
    109   function get_ensemble_size()
    110 
    111     integer, dimension(6) :: get_ensemble_size
    112 
    113     get_ensemble_size(1) = ensemble_size
    114     get_ensemble_size(2) = total_npes_pm
    115     get_ensemble_size(3) = ocean_npes_pm
    116     get_ensemble_size(4) = atmos_npes_pm
    117     get_ensemble_size(5) = land_npes_pm
    118     get_ensemble_size(6) = ice_npes_pm
    119 
    120   end function get_ensemble_size


ENTRY POINTS

  Name                                                  
                                                        
 ensemble_manager_mod_mp_get_ensemble_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATMOS_NPES_PM              Local  116      I(4)            4           scalar                    53,116,141,144,145,196,199,200,357
                                                                                                  ,363,371,372                      
 GET_ENSEMBLE_SIZE          Func   109      I(4)            4     1     6                                                           
 GET_ENSEMBLE_SIZE          Func   113      I(4)            4     1     6                         56,114,115,116,117,118            
 ICE_NPES_PM                Local  118      I(4)            4           scalar                    54,118,155,158,159,210,213,214,359
                                                                                                  ,365,379,380                      
 LAND_NPES_PM               Local  117      I(4)            4           scalar                    54,117,148,151,152,203,206,207,358
                                                                                                  ,364,375,376                      
 OCEAN_NPES_PM              Local  115      I(4)            4           scalar                    53,115,134,137,138,189,192,193,356
                                                                                                  ,362,367,368                      

Page 6           Source Listing                  GET_ENSEMBLE_SIZE
2021-06-01 08:55                                 ensemble_manager.F90

    121 
    122 
    123   subroutine get_ensemble_pelist(pelist, name)
    124 
    125     integer, intent(inout) :: pelist(:,:)
    126     character(len=*), intent(in), optional  :: name
    127 
    128     if (size(pelist,1) < ensemble_size) &
    129          call mpp_error(FATAL,'get_ensemble_pelist: size of pelist 1st index < ensemble_size')
    130 
    131     if(present(name)) then
    132        select case(name)
    133        case('ocean')
    134           if (size(pelist,2) < ocean_npes_pm)&
    135                call mpp_error(FATAL,'get_ensemble_pelist: size of pelist 2nd index < ocean_npes_pm')
    136           pelist = 0
    137           pelist(1:ensemble_size,1:ocean_npes_pm) = &
    138                ensemble_pelist_ocean(1:ensemble_size,1:ocean_npes_pm)
    139 
    140        case('atmos')
    141           if (size(pelist,2) < atmos_npes_pm)&
    142                call mpp_error(FATAL,'get_ensemble_pelist: size of pelist 2nd index < atmos_npes_pm')
    143           pelist = 0
    144           pelist(1:ensemble_size,1:atmos_npes_pm) = &
    145                ensemble_pelist_atmos(1:ensemble_size,1:atmos_npes_pm)
    146 
    147        case('land')
    148           if (size(pelist,2) < land_npes_pm)&
    149                call mpp_error(FATAL,'get_ensemble_pelist: size of pelist 2nd index < land_npes_pm')
    150           pelist = 0
    151           pelist(1:ensemble_size,1:land_npes_pm) = &
    152                ensemble_pelist_land(1:ensemble_size,1:land_npes_pm)
    153 
    154        case('ice')
    155           if (size(pelist,2) < ice_npes_pm)&
    156                call mpp_error(FATAL,'get_ensemble_pelist: size of pelist 2nd index < ice_npes_pm')
    157           pelist = 0
    158           pelist(1:ensemble_size,1:ice_npes_pm) = &
    159                ensemble_pelist_ice(1:ensemble_size,1:ice_npes_pm)
    160 
    161        case default
    162           call mpp_error(FATAL,'get_ensemble_pelist: unknown argument name='//name)
    163        end select
    164     else
    165        if (size(pelist,2) < total_npes_pm)&
    166             call mpp_error(FATAL,'get_ensemble_pelist: size of pelist 2nd index < total_npes_pm')
    167        pelist = 0
    168        pelist(1:ensemble_size,1:total_npes_pm) = &
    169             ensemble_pelist(1:ensemble_size,1:total_npes_pm)
    170     endif
    171 
    172     return
    173   end subroutine get_ensemble_pelist

Page 7           Source Listing                  GET_ENSEMBLE_PELIST
2021-06-01 08:55 Entry Points                    ensemble_manager.F90



ENTRY POINTS

  Name                                                    
                                                          
 ensemble_manager_mod_mp_get_ensemble_pelist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ENSEMBLE_PELIST            Local  169      I(4)            4     2     1        ALC              169,248,270,272,273,275           
 ENSEMBLE_PELIST_ATMOS      Local  145      I(4)            4     2     1        ALC              145,250,266,270,282,337,373       
 ENSEMBLE_PELIST_ICE        Local  159      I(4)            4     2     1        ALC              159,252,269,285,343,381           
 ENSEMBLE_PELIST_LAND       Local  152      I(4)            4     2     1        ALC              152,251,268,284,341,377           
 ENSEMBLE_PELIST_OCEAN      Local  138      I(4)            4     2     1        ALC              138,249,267,272,283,339,369       
 GET_ENSEMBLE_PELIST        Subr   123                                                                                              
 NAME                       Dummy  123      CHAR                        scalar   ARG,IN           131,132,162                       
 PELIST                     Dummy  123      I(4)            4     2     1        ARG,INOUT        128,134,136,137,141,143,144,148,15
                                                                                                  0,151,155,157,158,165,167,168     
 PRESENT                    Func   131                                  scalar                    131                               
 SIZE                       Func   128                                  scalar                    128,134,141,148,155,165           

Page 8           Source Listing                  GET_ENSEMBLE_PELIST
2021-06-01 08:55                                 ensemble_manager.F90

    174 
    175 !> @brief get_ensemble_filter_pelist
    176 !!
    177 !! @throw FATAL, "get_ensemble_filter_pelist: size of pelist argument < ensemble_size * ocean_npes_pm"
    178 !! @throw FATAL, "get_ensemble_filter_pelist: size of pelist argument < ensemble_size * atmos_npes_pm"
    179 !! @throw FATAL, "get_ensemble_filter_pelist: size of pelist argument < ensemble_size * land_npes_pm"
    180 !! @throw FATAL, "get_ensemble_filter_pelist: size of pelist argument < ensemble_size * ice_npes_pm"
    181 !! @throw FATAL, "get_ensemble_filter_pelist: unknown argument name=[name]"
    182   subroutine get_ensemble_filter_pelist(pelist, name)
    183 
    184     integer, intent(inout) :: pelist(:)
    185     character(len=*), intent(in)  :: name
    186 
    187     select case(name)
    188     case('ocean')
    189        if (size(pelist) < ensemble_size * ocean_npes_pm)&
    190             call mpp_error(FATAL,'get_ensemble_filter_pelist: size of pelist argument < ensemble_size * ocean_npes_pm')
    191        pelist = 0
    192        pelist(1:ensemble_size*ocean_npes_pm) = &
    193             ensemble_pelist_ocean_filter(1:ensemble_size*ocean_npes_pm)
    194 
    195     case('atmos')
    196        if (size(pelist) < ensemble_size * atmos_npes_pm)&
    197             call mpp_error(FATAL,'get_ensemble_filter_pelist: size of pelist argument < ensemble_size * atmos_npes_pm')
    198        pelist = 0
    199        pelist(1:ensemble_size*atmos_npes_pm) = &
    200             ensemble_pelist_atmos_filter(1:ensemble_size*atmos_npes_pm)
    201 
    202     case('land')
    203        if (size(pelist) < ensemble_size * land_npes_pm)&
    204             call mpp_error(FATAL,'get_ensemble_filter_pelist: size of pelist argument < ensemble_size * land_npes_pm')
    205        pelist = 0
    206        pelist(1:ensemble_size*land_npes_pm) = &
    207             ensemble_pelist_land_filter(1:ensemble_size*land_npes_pm)
    208 
    209     case('ice')
    210        if (size(pelist) < ensemble_size * ice_npes_pm)&
    211             call mpp_error(FATAL,'get_ensemble_filter_pelist: size of pelist argument < ensemble_size * ice_npes_pm')
    212        pelist = 0
    213        pelist(1:ensemble_size*ice_npes_pm) = &
    214             ensemble_pelist_ice_filter(1:ensemble_size*ice_npes_pm)
    215 
    216     case default
    217        call mpp_error(FATAL,'get_ensemble_filter_pelist: unknown argument name='//name)
    218     end select
    219 
    220 
    221     return
    222   end subroutine get_ensemble_filter_pelist

Page 9           Source Listing                  GET_ENSEMBLE_FILTER_PELIST
2021-06-01 08:55 Entry Points                    ensemble_manager.F90



ENTRY POINTS

  Name                                                           
                                                                 
 ensemble_manager_mod_mp_get_ensemble_filter_pelist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ENSEMBLE_PELIST_ATMOS_FILT                                                                                                         
 ER                         Local  200      I(4)            4     1     1        ALC              200,363,373,389                   
 ENSEMBLE_PELIST_ICE_FILTER Local  214      I(4)            4     1     1        ALC              214,365,381,395                   
 ENSEMBLE_PELIST_LAND_FILTE                                                                                                         
 R                          Local  207      I(4)            4     1     1        ALC              207,364,377,392                   
 ENSEMBLE_PELIST_OCEAN_FILT                                                                                                         
 ER                         Local  193      I(4)            4     1     1        ALC              193,362,369,386                   
 GET_ENSEMBLE_FILTER_PELIST Subr   182                                                                                              
 NAME                       Dummy  182      CHAR                        scalar   ARG,IN           187,217                           
 PELIST                     Dummy  182      I(4)            4     1     1        ARG,INOUT        189,191,192,196,198,199,203,205,20
                                                                                                  6,210,212,213                     
 SIZE                       Func   189                                  scalar                    189,196,203,210                   

Page 10          Source Listing                  GET_ENSEMBLE_FILTER_PELIST
2021-06-01 08:55                                 ensemble_manager.F90

    223 
    224 !nnz: I think the following block of code should be contained in a subroutine
    225 !     to consolidate and ensure the consistency of declaring the various pelists.
    226 !> @brief ensemble_pelist_setup
    227 !!
    228 !! @throw FATAL, "ensemble_manager_mod: land_npes > atmos_npes"
    229 !! @throw FATAL, "ensemble_manager_mod: ice_npes > atmos_npes"
    230   subroutine ensemble_pelist_setup(concurrent, atmos_npes, ocean_npes, land_npes, ice_npes, &
    231                                    Atm_pelist, Ocean_pelist, Land_pelist, Ice_pelist)
    232     logical, intent(in)                  :: concurrent
    233     integer, intent(in)                  :: atmos_npes, ocean_npes
    234     integer, intent(in)                  :: land_npes, ice_npes
    235     integer, dimension(:), intent(inout) :: Atm_pelist, Ocean_pelist
    236     integer, dimension(:), intent(inout) :: Land_pelist, Ice_pelist
    237     integer           :: atmos_pe_start, atmos_pe_end, ocean_pe_start, ocean_pe_end
    238     integer           :: land_pe_start, land_pe_end, ice_pe_start, ice_pe_end
    239     character(len=10) :: pelist_name, text
    240     integer           :: npes, n, m ,i
    241 
    242     npes = total_npes_pm
    243 
    244 ! make sure land_npes and ice_npes are not greater than atmos_npes
    245     if(land_npes > atmos_npes) call mpp_error(FATAL, 'ensemble_manager_mod: land_npes > atmos_npes')
    246     if(ice_npes  > atmos_npes) call mpp_error(FATAL, 'ensemble_manager_mod: ice_npes > atmos_npes')
    247 
    248     allocate(ensemble_pelist(ensemble_size,total_npes_pm))
    249     allocate(ensemble_pelist_ocean(1:ensemble_size, 1:ocean_npes) )
    250     allocate(ensemble_pelist_atmos(1:ensemble_size, 1:atmos_npes) )
    251     allocate(ensemble_pelist_land (1:ensemble_size, 1:land_npes) )
    252     allocate(ensemble_pelist_ice  (1:ensemble_size, 1:ice_npes) )
    253 
    254     atmos_pe_start = 0
    255     ocean_pe_start = 0
    256     land_pe_start = 0
    257     ice_pe_start = 0
    258     if( concurrent .OR. atmos_npes+ocean_npes == npes )then
    259        ocean_pe_start = ensemble_size*atmos_npes
    260     endif
    261     do n=1,ensemble_size
    262        atmos_pe_end = atmos_pe_start + atmos_npes - 1
    263        ocean_pe_end = ocean_pe_start + ocean_npes - 1
    264        land_pe_end  = land_pe_start  + land_npes  - 1
    265        ice_pe_end   = ice_pe_start   + ice_npes   - 1
    266        ensemble_pelist_atmos(n, 1:atmos_npes) = (/(i,i=atmos_pe_start,atmos_pe_end)/)
    267        ensemble_pelist_ocean(n, 1:ocean_npes) = (/(i,i=ocean_pe_start,ocean_pe_end)/)
    268        ensemble_pelist_land (n, 1:land_npes) = (/(i,i=land_pe_start, land_pe_end)/)
    269        ensemble_pelist_ice  (n, 1:ice_npes) = (/(i,i=ice_pe_start,  ice_pe_end)/)
    270        ensemble_pelist(n, 1:atmos_npes)       = ensemble_pelist_atmos(n, 1:atmos_npes)
    271        if( concurrent .OR. atmos_npes+ocean_npes == npes ) &
    272             ensemble_pelist(n, atmos_npes+1:npes)  = ensemble_pelist_ocean(n, 1:ocean_npes)
    273        if(ANY(ensemble_pelist(n,:) == pe)) ensemble_id = n
    274        write(pelist_name,'(a,i2.2)')  '_ens',n
    275        call mpp_declare_pelist(ensemble_pelist(n,:), trim(pelist_name))
    276        atmos_pe_start = atmos_pe_end + 1
    277        ocean_pe_start = ocean_pe_end + 1
    278        land_pe_start  = atmos_pe_start
    279        ice_pe_start   = atmos_pe_start

Page 11          Source Listing                  ENSEMBLE_PELIST_SETUP
2021-06-01 08:55                                 ensemble_manager.F90

    280     enddo
    281 
    282     Atm_pelist(:)   = ensemble_pelist_atmos(ensemble_id,:)
    283     Ocean_pelist(:) = ensemble_pelist_ocean(ensemble_id,:)
    284     Land_pelist(:)  = ensemble_pelist_land (ensemble_id,:)
    285     Ice_pelist(:)   = ensemble_pelist_ice  (ensemble_id,:)
    286 
    287 !    write(pelist_name,'(a,i2.2)')  '_ocn_ens',ensemble_id
    288 !    call mpp_declare_pelist(Ocean%pelist , trim(pelist_name) )
    289 
    290 !    write(pelist_name,'(a,i2.2)')  '_atm_ens',ensemble_id
    291 !    call mpp_declare_pelist(Atm%pelist , trim(pelist_name) )
    292 !
    293 !nnz: The above is sufficient for non-concurrent mode.
    294 !     BUT
    295 !     For atmosphere_init to work in ensemble, concurrent mode
    296 !     the following Atm_pelist should be declared (per ensemble member)
    297 !     instead of the above Atm%pelist!
    298 !
    299 !   allocate( Atm_pelist(1:ensemble_size, 1:atmos_npes) )
    300 !   do n=1,ensemble_size
    301 !       do i=1, atmos_npes
    302 !          Atm_pelist(n, i) = ensemble_pelist(n, i)
    303 !       enddo
    304 !       write(pelist_name,'(a,i2.2)')  '_atm_ens',n
    305 !       call mpp_declare_pelist(Atm_pelist(n,:) , trim(pelist_name) )
    306 !    enddo
    307 !
    308 !     The way I understand this with the help of Totalview is:
    309 !     With mpp_declare_pelist(Atm%pelist)
    310 !     When we are in fv_arrays_init when mp_init(comID) is called
    311 !     comID is the same for the atmospheric PE's for both ensemble members
    312 !     since peset(5)%id is the same (7) for those PE's, so the PE count is double what it should be inside
    313 !     mp_init().
    314 !     It is also true that for Ocean PE's, peset(4)%id is the same (6) for Ocean PE's in both ensemble members
    315 !     but for Ocean it is not a problem because Ocean is not trying to create new communicators
    316 !     from this peset whereas ATM does (vis mp_init).
    317 !
    318 !     Who sets peset(i)%id ? Can it be modified to assign different %id for the two subsets.
    319 !     peset(i)%id = 0 for Ocean PE's on ATM pesets and for ATM PE's on Ocean pesets.
    320 !
    321 !     With mpp_declare_pelist(Atm_pelist(n,:)) n=1,...,ensemble_size
    322 !     we get separate pesets for each ATM ensemble member and each with a different %id and mp_init is cured.
    323 !
    324 !     There is also a matter of precedence. If we have both calls
    325 !     call mpp_declare_pelist(Atm%pelist , trim(pelist_name) )
    326 !     and
    327 !     call mpp_declare_pelist(Atm_pelist(n,:) , trim(pelist_name) )
    328 !     then concurrent run fails because with call mpp_set_current_pelist( Atm%pelist   )
    329 !     peset(i) is searched for i=1,2,... and the first pelist that matches argument, its peset is set as current.
    330 !
    331 !     To be consistent with ATM and OCEAN we can do the following
    332 !     (eventhough mpp_declare_pelist(Ocean%pelist) is adequate right now.)
    333 
    334     if( concurrent )then
    335        do n=1,ensemble_size
    336           write(pelist_name,'(a,i2.2)')  'atm_ens',n

Page 12          Source Listing                  ENSEMBLE_PELIST_SETUP
2021-06-01 08:55                                 ensemble_manager.F90

    337           call mpp_declare_pelist(ensemble_pelist_atmos(n,:) , trim(pelist_name) )
    338           write(pelist_name,'(a,i2.2)')  'ocn_ens',n
    339           call mpp_declare_pelist(ensemble_pelist_ocean(n,:) , trim(pelist_name) )
    340           write(pelist_name,'(a,i2.2)')  'lnd_ens',n
    341           call mpp_declare_pelist(ensemble_pelist_land(n,:) , trim(pelist_name) )
    342           write(pelist_name,'(a,i2.2)')  'ice_ens',n
    343           call mpp_declare_pelist(ensemble_pelist_ice(n,:) , trim(pelist_name) )
    344        enddo
    345     else
    346        write(pelist_name,'(a,i2.2)')  'atm_ens',ensemble_id
    347        call mpp_declare_pelist(Atm_pelist , trim(pelist_name) )
    348        write(pelist_name,'(a,i2.2)')  'ocn_ens',ensemble_id
    349        call mpp_declare_pelist(Ocean_pelist , trim(pelist_name) )
    350        write(pelist_name,'(a,i2.2)')  'lnd_ens',ensemble_id
    351        call mpp_declare_pelist(Land_pelist , trim(pelist_name) )
    352        write(pelist_name,'(a,i2.2)')  'ice_ens',ensemble_id
    353        call mpp_declare_pelist(Ice_pelist , trim(pelist_name) )
    354     endif
    355 
    356     ocean_npes_pm = ocean_npes
    357     atmos_npes_pm = atmos_npes
    358     land_npes_pm  = land_npes
    359     ice_npes_pm   = ice_npes
    360 
    361 !Declare pelist of all Ocean, Atmos, Land and Ice pes across all ensembles ( filters )
    362     allocate(ensemble_pelist_ocean_filter(ensemble_size * ocean_npes_pm))
    363     allocate(ensemble_pelist_atmos_filter(ensemble_size * atmos_npes_pm))
    364     allocate(ensemble_pelist_land_filter (ensemble_size * land_npes_pm))
    365     allocate(ensemble_pelist_ice_filter  (ensemble_size * ice_npes_pm))
    366     do n=1,ensemble_size
    367        do m=1,ocean_npes_pm
    368           i=(n-1)*ocean_npes_pm + m
    369           ensemble_pelist_ocean_filter(i) = ensemble_pelist_ocean(n,m)
    370        enddo
    371        do m=1,atmos_npes_pm
    372           i=(n-1)*atmos_npes_pm + m
    373           ensemble_pelist_atmos_filter(i) = ensemble_pelist_atmos(n,m)
    374        enddo
    375        do m=1,land_npes_pm
    376           i=(n-1)*land_npes_pm + m
    377           ensemble_pelist_land_filter(i)  = ensemble_pelist_land(n,m)
    378        enddo
    379        do m=1,ice_npes_pm
    380           i=(n-1)*ice_npes_pm + m
    381           ensemble_pelist_ice_filter(i)   = ensemble_pelist_ice(n,m)
    382        enddo
    383     enddo
    384 
    385     write(pelist_name,'(a)')  'ocn_filter'
    386     call mpp_declare_pelist(ensemble_pelist_ocean_filter, trim(pelist_name) )
    387 
    388     write(pelist_name,'(a)')  'atm_filter'
    389     call mpp_declare_pelist(ensemble_pelist_atmos_filter, trim(pelist_name) )
    390 
    391     write(pelist_name,'(a)')  'lnd_filter'
    392     call mpp_declare_pelist(ensemble_pelist_land_filter,  trim(pelist_name) )
    393 

Page 13          Source Listing                  ENSEMBLE_PELIST_SETUP
2021-06-01 08:55                                 ensemble_manager.F90

    394     write(pelist_name,'(a)')  'ice_filter'
    395     call mpp_declare_pelist(ensemble_pelist_ice_filter,   trim(pelist_name) )
    396 
    397 !
    398 !Rename output files to identify the ensemble
    399 !If ensemble_size=1 do not rename files so that the same coupler
    400 !can be used for non-ensemble experiments
    401 !
    402     if (ensemble_size > 1) then
    403        write( text,'(a,i2.2)' ) 'ens_', ensemble_id
    404 !Append ensemble_id to the restart filenames
    405 
    406 !< Both calls are needed for cases where both fms2io/fmsio are used
    407        call fms2_io_set_filename_appendix(trim(text))
    408        call fms_io_set_filename_appendix(trim(text))
    409     endif
    410 
    411   end subroutine ensemble_pelist_setup


ENTRY POINTS

  Name                                                      
                                                            
 ensemble_manager_mod_mp_ensemble_pelist_setup_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   273                                  scalar                    273                               
 ATMOS_NPES                 Dummy  230      I(4)            4           scalar   ARG,IN           245,246,250,258,259,262,266,270,27
                                                                                                  1,272,357                         
 ATMOS_PE_END               Local  237      I(4)            4           scalar                    262,266,276                       
 ATMOS_PE_START             Local  237      I(4)            4           scalar                    254,262,266,276,278,279           
 ATM_PELIST                 Dummy  231      I(4)            4     1     1        ARG,INOUT        282,347                           
 CONCURRENT                 Dummy  230      L(4)            4           scalar   ARG,IN           258,271,334                       
 ENSEMBLE_PELIST_SETUP      Subr   230                                                                                              
 FMS2_IO_SET_FILENAME_APPEN                                                                                                         
 DIX                        Subr   407                                           PRIV             407                               
 FMS_IO_SET_FILENAME_APPEND                                                                                                         
 IX                         Subr   408                                           PRIV             408                               
 I                          Local  240      I(4)            4           scalar                    368,369,372,373,376,377,380,381   
 ICE_NPES                   Dummy  230      I(4)            4           scalar   ARG,IN           246,252,265,269,359               
 ICE_PELIST                 Dummy  231      I(4)            4     1     1        ARG,INOUT        285,353                           
 ICE_PE_END                 Local  238      I(4)            4           scalar                    265,269                           
 ICE_PE_START               Local  238      I(4)            4           scalar                    257,265,269,279                   
 LAND_NPES                  Dummy  230      I(4)            4           scalar   ARG,IN           245,251,264,268,358               
 LAND_PELIST                Dummy  231      I(4)            4     1     1        ARG,INOUT        284,351                           
 LAND_PE_END                Local  238      I(4)            4           scalar                    264,268                           
 LAND_PE_START              Local  238      I(4)            4           scalar                    256,264,268,278                   
 M                          Local  240      I(4)            4           scalar                    367,368,369,371,372,373,375,376,37
                                                                                                  7,379,380,381                     
 N                          Local  240      I(4)            4           scalar                    261,266,267,268,269,270,272,273,27
                                                                                                  4,275,335,336,337,338,339,340,341,
                                                                                                  342,343,366,368,369,372,373,376,37

Page 14          Source Listing                  ENSEMBLE_PELIST_SETUP
2021-06-01 08:55 Symbol Table                    ensemble_manager.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7,380,381                         
 NPES                       Local  240      I(4)            4           scalar                    242,258,271,272                   
 OCEAN_NPES                 Dummy  230      I(4)            4           scalar   ARG,IN           249,258,263,267,271,272,356       
 OCEAN_PELIST               Dummy  231      I(4)            4     1     1        ARG,INOUT        283,349                           
 OCEAN_PE_END               Local  237      I(4)            4           scalar                    263,267,277                       
 OCEAN_PE_START             Local  237      I(4)            4           scalar                    255,259,263,267,277               
 PELIST_NAME                Local  239      CHAR            10          scalar                    274,275,336,337,338,339,340,341,34
                                                                                                  2,343,346,347,348,349,350,351,352,
                                                                                                  353,385,386,388,389,391,392,394,39
                                                                                                  5                                 
 TEXT                       Local  239      CHAR            10          scalar                    403,407,408                       
 TRIM                       Func   275                                  scalar                    275,337,339,341,343,347,349,351,35
                                                                                                  3,386,389,392,395,407,408         

Page 15          Source Listing                  ENSEMBLE_PELIST_SETUP
2021-06-01 08:55                                 ensemble_manager.F90

    412 
    413 
    414 end module ensemble_manager_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ENSEMBLE_MANAGER_INIT      Subr   56                                                             56                                
 ENSEMBLE_MANAGER_MOD       Module 24                                                                                               
 ENSEMBLE_PELIST_SETUP      Subr   57                                                             57                                
 FMS2_IO_MOD                Module 31                                                             31                                
 FMS_IO_MOD                 Module 32                                                             32                                
 FMS_MOD                    Module 27                                                             27                                
 GET_ENSEMBLE_FILTER_PELIST Subr   58                                                             58                                
 GET_ENSEMBLE_ID@0          Local  102      I(4)            4           scalar                                                      
 GET_ENSEMBLE_PELIST        Subr   56                                                             56                                
 GET_ENSEMBLE_SIZE@0        Local  109      I(4)            4     1     6                                                           
 MPP_MOD                    Module 28                                                             28,29,30                          
 STDLOG                     Func   28       I(4)            4           scalar   PRIV             28                                
 STDOUT                     Func   28       I(4)            4           scalar   PRIV             28                                

Page 16          Source Listing                  ENSEMBLE_PELIST_SETUP
2021-06-01 08:55 Subprograms/Common Blocks       ensemble_manager.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ENSEMBLE_MANAGER_INIT      Subr   72                                                                                               
 ENSEMBLE_MANAGER_MOD       Module 24                                                                                               
 ENSEMBLE_PELIST_SETUP      Subr   230                                                                                              
 GET_ENSEMBLE_FILTER_PELIST Subr   182                                                                                              
 GET_ENSEMBLE_ID            Func   102      I(4)            4           scalar                                                      
 GET_ENSEMBLE_PELIST        Subr   123                                                                                              
 GET_ENSEMBLE_SIZE          Func   109      I(4)            4     1     6                                                           

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix

Page 17          Source Listing                  ENSEMBLE_PELIST_SETUP
2021-06-01 08:55                                 ensemble_manager.F90

       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity

Page 18          Source Listing                  ENSEMBLE_PELIST_SETUP
2021-06-01 08:55                                 ensemble_manager.F90

       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : ensemble_manager.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
