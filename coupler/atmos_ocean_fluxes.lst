Page 1           Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55                                 /tmp/ifortU3oOCG.i90

      1 # 1 "atmos_ocean_fluxes.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 !> @file
     22 !! @brief Ocean Carbon Model Intercomparison Study II: Gas exchange coupler.
     23 !! Implementation of routines to solve the gas fluxes at the
     24 !! ocean surface for a coupled model as outlined in the Biotic-HOWTO
     25 !! documentation, revision 1.7, 1999/10/05.
     26 !! @author Richard Slater, John Dunne
     27 !! @email gfdl.climate.model.info@noaa.gov
     28 !! @description This module will take fields from an atmospheric and an
     29 !! oceanic model and calculate ocean surface fluxes for
     30 !! CO2, O2, CFC-11 or CFC-12 as outlined in the various
     31 !! HOWTO documents at the OCMIP2 website. Multiple instances
     32 !! of a given tracer may be given, resulting in multiple
     33 !! surface fluxes. Additionally, data may be overridden at
     34 !! the individual fields, or fluxes. This could be used in
     35 !! the absence of an atmospheric or oceanic model.
     36 !! http://ocmip5.ipsl.fr/documentation/OCMIP/phase2/simulations/Biotic/HOWTO-Biotic.html
     37 module  atmos_ocean_fluxes_mod
     38   use mpp_mod,           only: stdout, mpp_error, FATAL, mpp_sum, mpp_npes
     39   use fms_mod,           only: write_version_number
     40 
     41   use coupler_types_mod, only: coupler_1d_bc_type
     42   use coupler_types_mod, only: ind_alpha, ind_csurf, ind_sc_no
     43   use coupler_types_mod, only: ind_pcair, ind_u10, ind_psurf
     44   use coupler_types_mod, only: ind_deposition
     45   use coupler_types_mod, only: ind_runoff
     46   use coupler_types_mod, only: ind_flux, ind_deltap, ind_kw, ind_flux0
     47 
     48   use field_manager_mod, only: fm_path_name_len, fm_string_len, fm_exists, fm_get_index
     49   use field_manager_mod, only: fm_new_list, fm_get_current_list, fm_change_list
     50   use field_manager_mod, only: fm_field_name_len, fm_type_name_len, fm_dump_list
     51   use field_manager_mod, only: fm_loop_over_list
     52 
     53   use fm_util_mod,       only: fm_util_default_caller
     54   use fm_util_mod,       only: fm_util_get_length
     55   use fm_util_mod,       only: fm_util_set_value, fm_util_set_good_name_list
     56   use fm_util_mod,       only: fm_util_set_no_overwrite, fm_util_set_caller
     57   use fm_util_mod,       only: fm_util_reset_good_name_list, fm_util_reset_no_overwrite

Page 2           Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

     58   use fm_util_mod,       only: fm_util_reset_caller, fm_util_get_string_array
     59   use fm_util_mod,       only: fm_util_check_for_bad_fields, fm_util_get_string
     60   use fm_util_mod,       only: fm_util_get_real_array, fm_util_get_real, fm_util_get_integer
     61   use fm_util_mod,       only: fm_util_get_logical, fm_util_get_logical_array
     62 
     63   implicit none
     64   private
     65 
     66   public :: atmos_ocean_fluxes_init
     67   public :: atmos_ocean_type_fluxes_init
     68   public :: aof_set_coupler_flux
     69 
     70   character(len=*), parameter :: mod_name = 'atmos_ocean_fluxes_mod'
     71   real, parameter :: epsln=1.0e-30
     72 
     73 
     74 ! Include variable "version" to be written to log file.
     75 # 1 "../include/file_version.h" 1 
     76 ! -*-f90-*-
     77 !***********************************************************************
     78 !*                   GNU Lesser General Public License
     79 !*
     80 !* This file is part of the GFDL Flexible Modeling System (FMS).
     81 !*
     82 !* FMS is free software: you can redistribute it and/or modify it under
     83 !* the terms of the GNU Lesser General Public License as published by
     84 !* the Free Software Foundation, either version 3 of the License, or (at
     85 !* your option) any later version.
     86 !*
     87 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     88 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     89 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     90 !* for more details.
     91 !*
     92 !* You should have received a copy of the GNU Lesser General Public
     93 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     94 !***********************************************************************
     95 
     96 # 23
     97 
     98   character(len=*), parameter :: version = 'unknown'
     99 
    100 # 75 "atmos_ocean_fluxes.F90" 2 
    101 
    102 contains
    103 
    104 !> @brief Set the values for a coupler flux
    105 !! @return its index (0 on error)
    106 !! @throw FATAL, "Empty name given"
    107 !!     Name is empty
    108 !! @throw FATAL, "Could not get coupler flux"
    109 !!     coupler_index is less than 1
    110 !! @throw FATAL, "Could not set coupler flux"
    111 !!     coupler_index is less than 1
    112 !! @throw FATAL, "Could not get the current list"
    113 !!     Current list is empty
    114 !! @throw FATAL, "Could not change to the new list"

Page 3           Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    115 !!     fm_change_list(coupler_list) returns false
    116 !! @throw FATAL, "Blank flux_type given"
    117 !!     flux_type or implementation is empty
    118 !! @throw FATAL, "Undefined flux_type given from field_table"
    119 !! @throw FATAL, "Undefined flux_type given as argument to the subroutine"
    120 !! @throw FATAL, "Undefined flux_type/implementation (implementation given from field_table)"
    121 !!     flux_type does not equal flux_type_test
    122 !! @throw FATAL, "Undefined flux_type/implementation (flux_type given from field_table)"
    123 !! @throw FATAL, "Undefined flux_type/implementation (both given from field_table)"
    124 !! @throw FATAL, "Undefined flux_type/implementation given as argument to the subroutine"
    125 !! @throw NOTE, "Number of parameters provided for [variable] does not match the number of parameters required"
    126 !!     Mismatch between parameter input and the parameters being replaced
    127 !! @throw FATAL, "Could not change back to [current_list]"
    128 !! @throw FATAL, "Empty [name] list"
    129   function aof_set_coupler_flux(name, flux_type, implementation, atm_tr_index, param, flag,&
    130       & mol_wt, ice_restart_file, ocean_restart_file, units, caller, verbosity) &
    131       & result (coupler_index)
    132     character(len=*), intent(in)                :: name !< name
    133     character(len=*), intent(in)                :: flux_type !< flux_type
    134     character(len=*), intent(in)                :: implementation !< implementation
    135     integer, intent(in), optional               :: atm_tr_index !< atm_tr_index
    136     real, intent(in), dimension(:), optional    :: param !< param
    137     logical, intent(in), dimension(:), optional :: flag !< flag
    138     real, intent(in), optional                  :: mol_wt !< mol_wt
    139     character(len=*), intent(in), optional      :: ice_restart_file !< ice_restart_file
    140     character(len=*), intent(in), optional      :: ocean_restart_file !< ocean_restart_file
    141     character(len=*), intent(in), optional      :: units !< units
    142     character(len=*), intent(in), optional      :: caller !< caller
    143     integer,          intent(in), optional      :: verbosity  !< A 0-9 integer indicating a level of verbosity.
    144 
    145     integer :: coupler_index
    146 
    147     character(len=*), parameter  :: sub_name = 'aof_set_coupler_flux'
    148 
    149     integer                                                 :: n
    150     integer                                                 :: length
    151     integer                                                 :: num_parameters
    152     integer                                                 :: outunit
    153     character(len=fm_path_name_len)                         :: coupler_list
    154     character(len=fm_path_name_len)                         :: current_list
    155     character(len=fm_string_len)                            :: flux_type_test
    156     character(len=fm_string_len)                            :: implementation_test
    157     character(len=256)                                      :: error_header
    158     character(len=256)                                      :: warn_header
    159     character(len=256)                                      :: note_header
    160     character(len=128)                                      :: flux_list
    161     character(len=128)                                      :: caller_str
    162     character(len=fm_string_len), pointer, dimension(:)     :: good_list => NULL()
    163     character(len=256)                                      :: long_err_msg
    164     integer :: verbose !< An integer indicating the level of verbosity.
    165 
    166     verbose = 5 ! Default verbosity level
    167     if (present(verbosity)) verbose = verbosity
    168 
    169 ! Set the caller string and headers.
    170     if (present(caller)) then
    171       caller_str = '[' // trim(caller) // ']'

Page 4           Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    172     else
    173       caller_str = fm_util_default_caller
    174     endif
    175 
    176     error_header = '==>Error from ' // trim(mod_name) //&
    177         & '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    178     warn_header = '==>Warning from ' // trim(mod_name) //&
    179         & '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    180     note_header = '==>Note from ' // trim(mod_name) //&
    181         & '(' // trim(sub_name) // ')' // trim(caller_str) // ':'
    182 
    183 ! Check that a name is given (fatal if not).
    184     if (name .eq. ' ') then
    185       call mpp_error(FATAL, trim(error_header) // ' Empty name given')
    186     endif
    187     outunit = stdout()
    188     if (verbose >= 5) then
    189       write (outunit,*)
    190       write (outunit,*) trim(note_header), ' Processing coupler fluxes ', trim(name)
    191     endif
    192 
    193 ! Define the coupler list name.
    194     coupler_list = '/coupler_mod/fluxes/' // trim(name)
    195 
    196 ! Check whether a flux has already been set for this name, and if so, return the index for it
    197 ! (this is because the fluxes may be defined in both the atmosphere and ocean models) (check
    198 ! whether the good_list list exists, since this will indicate that this routine has already been
    199 ! called, and not just that the field table input has this list defined)
    200     if (fm_exists('/coupler_mod/GOOD/fluxes/' // trim(name) // '/good_list')) then
    201       if (verbose >= 5) then
    202         write (outunit,*)
    203         write (outunit,*) trim(note_header), ' Using previously defined coupler flux'
    204       endif
    205       coupler_index = fm_get_index(coupler_list)
    206       if (coupler_index .le. 0) then
    207         call mpp_error(FATAL, trim(error_header) // ' Could not get coupler flux ')
    208       endif
    209 
    210 ! Allow atm_tr_index to be set here, since it will only be set from atmospheric
    211 ! PEs, and the atmospheric routines call this routine last, thus overwriting the
    212 ! current value is safe (furthermore, this is not a value which could have any meaningful
    213 ! value set from the run script.
    214       if (present(atm_tr_index)) then
    215         if (verbose >= 5) &
    216             write (outunit,*) trim(note_header), ' Redefining atm_tr_index to ', atm_tr_index
    217         call fm_util_set_value(trim(coupler_list) // '/atm_tr_index', atm_tr_index,&
    218             & no_create = .true., no_overwrite = .false., caller = caller_str)
    219       endif
    220       return
    221     endif
    222 
    223 ! Set a new coupler flux and get its index.
    224     coupler_index = fm_new_list(coupler_list)
    225     if (coupler_index .le. 0) then
    226       call mpp_error(FATAL, trim(error_header) // ' Could not set coupler flux ')
    227     endif
    228 

Page 5           Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    229 ! Change to the new list, first saving the current list.
    230     current_list = fm_get_current_list()
    231     if (current_list .eq. ' ') then
    232       call mpp_error(FATAL, trim(error_header) // ' Could not get the current list')
    233     endif
    234 
    235     if (.not. fm_change_list(coupler_list)) then
    236       call mpp_error(FATAL, trim(error_header) // ' Could not change to the new list')
    237     endif
    238 
    239 ! Set the array in which to save the valid names for this list,
    240 ! used later for a consistency check. This is used in the fm_util_set_value
    241 ! routines to make the list of valid values.
    242     call fm_util_set_good_name_list('/coupler_mod/GOOD/fluxes/' // trim(name) // '/good_list')
    243 
    244 ! Set other defaults for the fm_util_set_value routines.
    245     call fm_util_set_no_overwrite(.true.)
    246     call fm_util_set_caller(caller_str)
    247 
    248 ! Set various values to given values, or to defaults if not given.
    249     if (flux_type .eq. ' ') then
    250       call mpp_error(FATAL, trim(error_header) // ' Blank flux_type given')
    251     else
    252       if (fm_exists('/coupler_mod/types/' // trim(flux_type))) then
    253         call fm_util_set_value('flux_type', flux_type)
    254 
    255 ! Check that the flux_type that we will use (possibly given from the field_table)
    256 ! is defined.
    257         flux_type_test = fm_util_get_string('flux_type', scalar = .true.)
    258         if (.not. fm_exists('/coupler_mod/types/' // trim(flux_type_test))) then
    259           call mpp_error(FATAL, trim(error_header) //&
    260               & ' Undefined flux_type given from field_table: ' // trim(flux_type_test))
    261         endif
    262       else
    263         call mpp_error(FATAL, trim(error_header) //&
    264             & ' Undefined flux_type given as argument to the subroutine: ' // trim(flux_type))
    265       endif
    266     endif
    267 
    268     if (implementation .eq. ' ') then
    269       call mpp_error(FATAL, trim(error_header) // ' Blank flux_type given')
    270     else
    271       if (fm_exists('/coupler_mod/types/' // trim(flux_type) // '/implementation/' // trim(implementation))) then
    272         call fm_util_set_value('implementation', implementation)
    273 
    274 ! Check that the flux_type/implementation that we will use
    275 ! (both possibly given from the field_table) is defined
    276         implementation_test = fm_util_get_string('implementation', scalar = .true.)
    277         if (.not. fm_exists('/coupler_mod/types/' // trim(flux_type_test) //  '/implementation/' // trim(implementation_test
    277 ))) then
    278           if (flux_type .eq. flux_type_test) then
    279             if (implementation .eq. implementation_test) then
    280               call mpp_error(FATAL, trim(error_header) // ' Should not get here, as it is tested for above')
    281             else
    282               call mpp_error(FATAL, trim(error_header) //&
    283                   & ' Undefined flux_type/implementation (implementation given from field_table): ' //&
    284                   & trim(flux_type_test) // '/implementation/' // trim(implementation_test))

Page 6           Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    285             endif
    286           else
    287             if (implementation .eq. implementation_test) then
    288               long_err_msg = 'Undefined flux_type/implementation (flux_type given from field_table): '
    289               long_err_msg = long_err_msg // trim(flux_type_test) // '/implementation/'&
    290                   & // trim(implementation_test)
    291               call mpp_error(FATAL, trim(error_header) // long_err_msg)
    292             else
    293               long_err_msg = ' Undefined flux_type/implementation (both given from field_table): '
    294               long_err_msg = long_err_msg //  trim(flux_type_test) // '/implementation/'&
    295                   & // trim(implementation_test)
    296               call mpp_error(FATAL, trim(error_header) // long_err_msg)
    297             endif
    298           endif
    299         endif
    300       else
    301         call mpp_error(FATAL, trim(error_header) //&
    302             & ' Undefined flux_type/implementation given as argument to the subroutine: ' //&
    303             & trim(flux_type) // '/implementation/' // trim(implementation))
    304       endif
    305     endif
    306 
    307     if (present(atm_tr_index)) then
    308       call fm_util_set_value('atm_tr_index', atm_tr_index)
    309     else
    310       call fm_util_set_value('atm_tr_index', 0)
    311     endif
    312 
    313     if (present(mol_wt)) then
    314       call fm_util_set_value('mol_wt', mol_wt)
    315     else
    316       call fm_util_set_value('mol_wt', 0.0)
    317     endif
    318 
    319     if (present(ice_restart_file)) then
    320       call fm_util_set_value('ice_restart_file', ice_restart_file)
    321     else
    322       call fm_util_set_value('ice_restart_file', 'ice_coupler_fluxes.res.nc')
    323     endif
    324 
    325     if (present(ocean_restart_file)) then
    326       call fm_util_set_value('ocean_restart_file', ocean_restart_file)
    327     else
    328       call fm_util_set_value('ocean_restart_file', 'ocean_coupler_fluxes.res.nc')
    329     endif
    330 
    331     if (present(param)) then
    332       num_parameters = fm_util_get_integer('/coupler_mod/types/' //&
    333           & trim(fm_util_get_string('flux_type', scalar = .true.)) // '/implementation/' //&
    334           & trim(fm_util_get_string('implementation', scalar = .true.)) // '/num_parameters',&
    335           & scalar = .true.)
    336       length = min(size(param(:)),num_parameters)
    337       if ((length .ne. num_parameters) .and. (verbose >= 5)) then
    338         write (outunit,*) trim(note_header), ' Number of parameters provided for ', trim(name), ' does not match the'
    339         write (outunit,*) 'number of parameters required (', size(param(:)), ' != ', num_parameters, ').'
    340         write (outunit,*) 'This could be an error, or more likely is just a result of the implementation being'
    341         write (outunit,*) 'overridden by the field table input'

Page 7           Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    342       endif
    343       if (length .gt. 0) then
    344         call fm_util_set_value('param', param(1:length), length)
    345       else
    346         call fm_util_set_value('param', 'null', index = 0)
    347       endif
    348     else
    349       call fm_util_set_value('param', 'null', index = 0)
    350     endif
    351 
    352     if (present(flag)) then
    353       call fm_util_set_value('flag', flag, size(flag(:)))
    354     else
    355       call fm_util_set_value('flag', .false., index = 0)
    356     endif
    357 
    358     flux_list = '/coupler_mod/types/' // trim(flux_type) // '/'
    359 
    360     if (present(units)) then
    361       call fm_util_set_value(trim(fm_util_get_string(trim(flux_list) // 'flux/name', index = ind_flux)) // '-units',&
    362           & units)
    363     else
    364       call fm_util_set_value(trim(fm_util_get_string(trim(flux_list) // 'flux/name', index = ind_flux)) // '-units',&
    365           & fm_util_get_string(trim(flux_list) // 'flux/units', index = ind_flux))
    366     endif
    367 
    368     do n = 1, fm_util_get_length(trim(flux_list) // 'flux/name')
    369       if (n .ne. ind_flux) then
    370         call fm_util_set_value(trim(fm_util_get_string(trim(flux_list) // 'flux/name', index = n)) // '-units',&
    371             & fm_util_get_string(trim(flux_list) // 'flux/units', index = n))
    372       endif
    373       call fm_util_set_value(trim(fm_util_get_string(trim(flux_list) // 'flux/name', index = n)) // '-long_name',&
    374           & fm_util_get_string(trim(flux_list) // 'flux/long_name', index = n))
    375     enddo  ! n
    376 
    377     do n = 1, fm_util_get_length(trim(flux_list) // 'atm/name')
    378       call fm_util_set_value(trim(fm_util_get_string(trim(flux_list) // 'atm/name', index = n)) //&
    379           & '-units', fm_util_get_string(trim(flux_list) // 'atm/units', index = n))
    380       call fm_util_set_value(trim(fm_util_get_string(trim(flux_list) // 'atm/name', index = n)) // '-long_name',&
    381           & fm_util_get_string(trim(flux_list) // 'atm/long_name', index = n))
    382     enddo  ! n
    383 
    384     do n = 1, fm_util_get_length(trim(flux_list) // 'ice/name')
    385       call fm_util_set_value(trim(fm_util_get_string(trim(flux_list) // 'ice/name', index = n)) // '-units',&
    386           & fm_util_get_string(trim(flux_list) // 'ice/units', index = n))
    387       call fm_util_set_value(trim(fm_util_get_string(trim(flux_list) // 'ice/name', index = n)) // '-long_name',&
    388           & fm_util_get_string(trim(flux_list) // 'ice/long_name', index = n))
    389     enddo  ! n
    390 
    391 ! Reset the defaults for the fm_util_set_value calls.
    392     call fm_util_reset_good_name_list
    393     call fm_util_reset_no_overwrite
    394     call fm_util_reset_caller
    395 
    396 ! Change back to the saved current list.
    397     if (.not. fm_change_list(current_list)) then
    398       call mpp_error(FATAL, trim(error_header) // ' Could not change back to ' // trim(current_list))

Page 8           Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    399     endif
    400 
    401 !  Check for any errors in the number of fields in this list.
    402     if (caller_str .eq. ' ') then
    403       caller_str = trim(mod_name) // '(' // trim(sub_name) // ')'
    404     endif
    405     good_list => fm_util_get_string_array('/coupler_mod/GOOD/fluxes/' // trim(name) // '/good_list',&
    406         & caller = caller_str)
    407     if (associated(good_list)) then
    408       call fm_util_check_for_bad_fields(trim(coupler_list), good_list, caller = caller_str)
    409       deallocate(good_list)
    410     else
    411       call mpp_error(FATAL, trim(error_header) // ' Empty "' // trim(name) // '" list')
    412     endif
    413 
    414     return
    415   end function aof_set_coupler_flux


ENTRY POINTS

  Name                                                       
                                                             
 atmos_ocean_fluxes_mod_mp_aof_set_coupler_flux_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AOF_SET_COUPLER_FLUX       Func   129      I(4)            4           scalar                                                      
 ASSOCIATED                 Func   407                                  scalar                    407                               
 ATM_TR_INDEX               Dummy  129      I(4)            4           scalar   ARG,IN           214,216,217,307,308               
 CALLER                     Dummy  130      CHAR                        scalar   ARG,IN           170,171                           
 CALLER_STR                 Local  161      CHAR            128         scalar                    171,173,177,179,181,218,246,402,40
                                                                                                  3,406,408                         
 COUPLER_INDEX              Local  145      I(4)            4           scalar                    205,206,224,225                   
 COUPLER_LIST               Local  153      CHAR            512         scalar                    194,205,217,224,235,408           
 CURRENT_LIST               Local  154      CHAR            512         scalar                    230,231,397,398                   
 ERROR_HEADER               Local  157      CHAR            256         scalar                    176,185,207,226,232,236,250,259,26
                                                                                                  3,269,280,282,291,296,301,398,411 
 FATAL                      Param  185      I(4)            4           scalar   PRIV             38,185,207,226,232,236,250,259,263
                                                                                                  ,269,280,282,291,296,301,398,411,5
                                                                                                  01,516,535,548,554,564,667,670,675
                                                                                                  ,679,685,688,693,697,718,729,928,9
                                                                                                  32,937,942,948,954,960,966,972,978
                                                                                                  ,990,1007,1024,1045,1050,1055,1059
                                                                                                  ,1063,1075,1092,1105,1114,1119,112
                                                                                                  4,1128,1140,1149,1158,1167,1172,11
                                                                                                  77,1189,1198,1208,1217,1230       
 FLAG                       Dummy  129      L(4)            4     1     1        ARG,IN           352,353                           
 FLUX_LIST                  Local  160      CHAR            128         scalar                    358,361,364,365,368,370,371,373,37
                                                                                                  4,377,378,379,380,381,384,385,386,
                                                                                                  387,388                           
 FLUX_TYPE                  Dummy  129      CHAR                        scalar   ARG,IN           249,252,253,264,271,278,303,358   
 FLUX_TYPE_TEST             Local  155      CHAR            128         scalar                    257,258,260,277,278,284,289,294   
 FM_CHANGE_LIST             Func   235      L(4)            4           scalar   PRIV             49,235,397,547,947,1216           

Page 9           Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55 Symbol Table                    atmos_ocean_fluxes.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FM_EXISTS                  Func   200      L(4)            4           scalar   PRIV             48,200,252,258,271,277,553,562    
 FM_GET_CURRENT_LIST        Func   230      CHAR            512         scalar   PRIV             49,230                            
 FM_GET_INDEX               Func   205      I(4)            4           scalar   PRIV             48,205                            
 FM_NEW_LIST                Func   224      I(4)            4           scalar   PRIV             49,224,927,931,936,941,953,959,965
                                                                                                  ,971,977,989,1006,1023,1044,1049,1
                                                                                                  054,1058,1062,1074,1091,1104,1113,
                                                                                                  1118,1123,1127,1139,1148,1157,1166
                                                                                                  ,1171,1176,1188,1197,1207         
 FM_PATH_NAME_LEN           Param  153      I(4)            4           scalar   PRIV             48,153,154                        
 FM_STRING_LEN              Param  155      I(4)            4           scalar   PRIV             48,155,156,162                    
 FM_UTIL_CHECK_FOR_BAD_FIEL                                                                                                         
 DS                         Subr   408                                           PRIV             59,408                            
 FM_UTIL_DEFAULT_CALLER     Local  173      CHAR            128         scalar   PRIV             53,173                            
 FM_UTIL_GET_INTEGER        Func   332      I(4)            4           scalar   PRIV             60,332,638,662,681                
 FM_UTIL_GET_LENGTH         Func   368      I(4)            4           scalar   PRIV             54,368,377,384,511,575,577,579,584
                                                                                                  ,592,600,607,611,615,621,626,631  
 FM_UTIL_GET_STRING         Func   257      CHAR            128         scalar   PRIV             59,257,276,333,334,361,364,365,370
                                                                                                  ,371,373,374,378,379,380,381,385,3
                                                                                                  86,387,388,552,561,585,593,601,609
                                                                                                  ,613,617,623,628,633,646,651      
 FM_UTIL_GET_STRING_ARRAY   Func   405      CHAR            128   1     1        PTR,PRIV         58,405                            
 FM_UTIL_RESET_CALLER       Subr   394                                           PRIV             58,394,735,1222                   
 FM_UTIL_RESET_GOOD_NAME_LI                                                                                                         
 ST                         Subr   392                                           PRIV             57,392                            
 FM_UTIL_RESET_NO_OVERWRITE Subr   393                                           PRIV             57,393,734,1221                   
 FM_UTIL_SET_CALLER         Subr   246                                           PRIV             56,246,508,924                    
 FM_UTIL_SET_GOOD_NAME_LIST Subr   242                                           PRIV             55,242                            
 FM_UTIL_SET_NO_OVERWRITE   Subr   245                                           PRIV             56,245,507,923                    
 FM_UTIL_SET_VALUE          Local  217                                  scalar   PRIV             55,217,253,272,308,310,314,316,320
                                                                                                  ,322,326,328,344,346,349,353,355,3
                                                                                                  61,364,370,373,378,380,385,387,934
                                                                                                  ,939,944,969,975,980,983,984,985,9
                                                                                                  86,993,994,995,997,998,999,1001,10
                                                                                                  02,1003,1010,1011,1012,1014,1015,1
                                                                                                  016,1018,1019,1020,1027,1028,1029,
                                                                                                  1031,1032,1033,1035,1036,1037,1039
                                                                                                  ,1040,1041,1057,1061,1065,1068,106
                                                                                                  9,1070,1071,1078,1079,1080,1082,10
                                                                                                  83,1084,1086,1087,1088,1095,1096,1
                                                                                                  097,1099,1100,1101,1108,1109,1110,
                                                                                                  1126,1130,1133,1134,1135,1136,1143
                                                                                                  ,1144,1145,1152,1153,1154,1161,116
                                                                                                  2,1163,1179,1182,1183,1184,1185,11
                                                                                                  92,1193,1194,1201,1202,1203,1211,1
                                                                                                  212,1213                          
 FM_UTIL_SET_VALUE_INTEGER  Subr   217                                           PRIV             217,308,310,969,975,980,983,1057,1
                                                                                                  061,1065,1068,1126,1130,1133,1179,
                                                                                                  1182                              
 FM_UTIL_SET_VALUE_LOGICAL  Subr   355                                           PRIV             355,984,985,986,1069,1070,1071,113
                                                                                                  4,1135,1136,1183,1184,1185        
 FM_UTIL_SET_VALUE_LOGICAL_                                                                                                         
 ARRAY                      Subr   353                                           PRIV             353                               
 FM_UTIL_SET_VALUE_REAL     Subr   314                                           PRIV             314,316                           
 FM_UTIL_SET_VALUE_REAL_ARR                                                                                                         
 AY                         Subr   344                                           PRIV             344                               

Page 10          Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55 Symbol Table                    atmos_ocean_fluxes.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FM_UTIL_SET_VALUE_STRING   Subr   253                                           PRIV             253,272,320,322,326,328,346,349,36
                                                                                                  1,364,370,373,378,380,385,387,934,
                                                                                                  939,944,993,994,995,997,998,999,10
                                                                                                  01,1002,1003,1010,1011,1012,1014,1
                                                                                                  015,1016,1018,1019,1020,1027,1028,
                                                                                                  1029,1031,1032,1033,1035,1036,1037
                                                                                                  ,1039,1040,1041,1078,1079,1080,108
                                                                                                  2,1083,1084,1086,1087,1088,1095,10
                                                                                                  96,1097,1099,1100,1101,1108,1109,1
                                                                                                  110,1143,1144,1145,1152,1153,1154,
                                                                                                  1161,1162,1163,1192,1193,1194,1201
                                                                                                  ,1202,1203,1211,1212,1213         
 GOOD_LIST                  Local  162      CHAR            128   1     1        PTR              162,405,407,408,409               
 ICE_RESTART_FILE           Dummy  130      CHAR                        scalar   ARG,IN           319,320                           
 IMPLEMENTATION             Dummy  129      CHAR                        scalar   ARG,IN           268,271,272,279,287,303           
 IMPLEMENTATION_TEST        Local  156      CHAR            128         scalar                    276,277,279,284,287,290,295       
 IND_FLUX                   Local  361      I(4)            4           scalar   PRIV             46,361,364,365,369,1027,1028,1029,
                                                                                                  1108,1109,1110,1161,1162,1163,1211
                                                                                                  ,1212,1213                        
 LENGTH                     Local  150      I(4)            4           scalar                    336,337,343,344                   
 LONG_ERR_MSG               Local  163      CHAR            256         scalar                    288,289,291,293,294,296           
 MIN                        Func   336                                  scalar                    336                               
 MOD_NAME                   Param  176      CHAR            22          scalar                    176,178,180,403,461,463,465,489,50
                                                                                                  4,911,913                         
 MOL_WT                     Dummy  130      R(8)            8           scalar   ARG,IN           313,314                           
 MPP_ERROR                  Local  185                                  scalar   PRIV             38,185,207,226,232,236,250,259,263
                                                                                                  ,269,280,282,291,296,301,398,411,5
                                                                                                  01,516,535,548,554,564,667,670,675
                                                                                                  ,679,685,688,693,697,718,729,928,9
                                                                                                  32,937,942,948,954,960,966,972,978
                                                                                                  ,990,1007,1024,1045,1050,1055,1059
                                                                                                  ,1063,1075,1092,1105,1114,1119,112
                                                                                                  4,1128,1140,1149,1158,1167,1172,11
                                                                                                  77,1189,1198,1208,1217,1230       
 MPP_ERROR_BASIC            Subr   185                                           PRIV             185,207,226,232,236,250,259,263,26
                                                                                                  9,280,282,291,296,301,398,411,501,
                                                                                                  516,535,548,554,564,667,670,675,67
                                                                                                  9,685,688,693,697,718,729,928,932,
                                                                                                  937,942,948,954,960,966,972,978,99
                                                                                                  0,1007,1024,1045,1050,1055,1059,10
                                                                                                  63,1075,1092,1105,1114,1119,1124,1
                                                                                                  128,1140,1149,1158,1167,1172,1177,
                                                                                                  1189,1198,1208,1217,1230          
 N                          Local  149      I(4)            4           scalar                    368,369,370,371,373,374,377,378,37
                                                                                                  9,380,381,384,385,386,387,388     
 NAME                       Dummy  129      CHAR                        scalar   ARG,IN           184,190,194,200,242,338,405,411   
 NOTE_HEADER                Local  159      CHAR            256         scalar                    180,190,203,216,338               
 NULL                       Func   162                                  scalar   PTR              162                               
 NUM_PARAMETERS             Local  151      I(4)            4           scalar                    332,336,337,339                   
 OCEAN_RESTART_FILE         Dummy  130      CHAR                        scalar   ARG,IN           325,326                           
 OUTUNIT                    Local  152      I(4)            4           scalar                    187,189,190,202,203,216,338,339,34
                                                                                                  0,341                             
 PARAM                      Dummy  129      R(8)            8     1     1        ARG,IN           331,336,339,344                   
 PRESENT                    Func   167                                  scalar                    167,170,214,307,313,319,325,331,35
                                                                                                  2,360                             

Page 11          Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55 Symbol Table                    atmos_ocean_fluxes.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 SIZE                       Func   336                                  scalar                    336,339,353                       
 STDOUT                     Func   187      I(4)            4           scalar   PRIV             38,187,492,1226                   
 SUB_NAME                   Param  147      CHAR            20          scalar                    177,179,181,403                   
 TRIM                       Func   171                                  scalar                    171,176,177,178,179,180,181,185,19
                                                                                                  0,194,200,203,207,216,217,226,232,
                                                                                                  236,242,250,252,258,259,260,263,26
                                                                                                  4,269,271,277,280,282,284,289,290,
                                                                                                  291,294,295,296,301,303,333,334,33
                                                                                                  8,358,361,364,365,368,370,371,373,
                                                                                                  374,377,378,379,380,381,384,385,38
                                                                                                  6,387,388,398,403,405,408,411     
 UNITS                      Dummy  130      CHAR                        scalar   ARG,IN           360,362                           
 VERBOSE                    Local  164      I(4)            4           scalar                    166,167,188,201,215,337           
 VERBOSITY                  Dummy  130      I(4)            4           scalar   ARG,IN           167                               
 WARN_HEADER                Local  158      CHAR            256         scalar                    178                               

Page 12          Source Listing                  AOF_SET_COUPLER_FLUX
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    416 
    417 !> @brief Initialize gas flux structures
    418 !! @throw FATAL, "Could not get number of fluxes"
    419 !!     Number of gas fluxes is not a valid number
    420 !! @throw NOTE, "No gas fluxes"
    421 !!     No gas fluxes were found
    422 !! @throw NOTE, "Processing [gas_fluxes%num_bcs] gas fluxes"
    423 !!     Gas fluxes were found
    424 !! @throw FATAL, "[name] is not a list"
    425 !!     name needs to be a list, or typ is incorrectly defined
    426 !! @throw FATAL, "Flux index, [ind] does not match array index, [n] for [name]"
    427 !! @throw FATAL, "Problem changing to [name]"
    428 !! @throw FATAL, "Undefined flux_type given for [name]: [gas_fluxes%bc(n)%flux_type]"
    429 !! @throw FATAL, "Undefined implementation given for [name]: [gas_fluxes%bc(n)%flux_type]/implementation/[gas_fluxes%bc(n)%i
    429 mplementation]"
    430 !! @throw FATAL, "No param for [name]: need [num_parameters]"
    431 !! @throw FATAL, "Wrong number of param for [name]: [size(gas_fluxes%bc(n)%param(:))] given, need [num_parameters]"
    432 !! @throw FATAL, "No params needed for [name] but has size of [size(gas_fluxes%bc(n)%param(:))]"
    433 !! @throw FATAL, "Num_parameters is negative for [name]: [num_parameters]"
    434 !! @throw FATAL, "No flag for [name]: need [num_flags]"
    435 !! @throw FATAL, "Wrong number of flag for [name]: [size(gas_fluxes%bc(n)%flag(:))] given, need [num_flags]"
    436 !! @throw FATAL, "No flags needed for [name] but has size of [size(gas_fluxes%bc(n)%flag(:))]"
    437 !! @throw FATAL, "Num_flags is negative for [name]: [num_flags]"
    438 !! @throw FATAL, "Problem dumping fluxes tracer tree"
    439 !! @throw FATAL, "Number of fluxes does not match across the processors: [gas_fluxes%num_bcs] fluxes"
    440   subroutine atmos_ocean_fluxes_init(gas_fluxes, gas_fields_atm, gas_fields_ice, verbosity)
    441 
    442     type(coupler_1d_bc_type), intent(inout) :: gas_fluxes !< Structure containing the gas fluxes between
    443 !! the atmosphere and the ocean and parameters
    444 !! related to the calculation of these fluxes.
    445 !! The properties stored in this type are set
    446 !! here, but the actual value arrays are set later.
    447     type(coupler_1d_bc_type), intent(inout) :: gas_fields_atm !< Structure containing atmospheric surface
    448 !! variables that are used in the calculation
    449 !! of the atmosphere-ocean gas fluxes.
    450 !! The properties stored in this type are set
    451 !! here, but the actual value arrays are set later.
    452     type(coupler_1d_bc_type), intent(inout) :: gas_fields_ice !< Structure containing ice-top and ocean
    453 !! surface variables that are used in the
    454 !! calculation of the atmosphere-ocean gas fluxes.
    455 !! The properties stored in this type are set
    456 !! here, but the actual value arrays are set later.
    457     integer,        optional, intent(in)    :: verbosity  !< A 0-9 integer indicating a level of verbosity.
    458 
    459     character(len=*), parameter    :: sub_name = 'atmos_ocean_fluxes_init'
    460     character(len=*), parameter   :: error_header =&
    461         & '==>Error from ' // trim(mod_name) // '(' // trim(sub_name) // '):'
    462     character(len=*), parameter   :: warn_header =&
    463         & '==>Warning from ' // trim(mod_name) // '(' // trim(sub_name) // '):'
    464     character(len=*), parameter   :: note_header =&
    465         & '==>Note from ' // trim(mod_name) // '(' // trim(sub_name) // '):'
    466 
    467     integer                                 :: num_parameters
    468     integer                                 :: num_flags
    469     integer                                 :: n
    470     integer                                 :: m
    471     character(len=128)                      :: caller_str

Page 13          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    472     character(len=fm_type_name_len)         :: typ
    473     character(len=fm_field_name_len)        :: name
    474     integer                                 :: ind
    475     integer                                 :: outunit
    476     integer                                 :: total_fluxes
    477     character(len=8)                        :: string
    478     character(len=128)                      :: error_string
    479     character(len=128)                      :: flux_list
    480     logical, save                           :: initialized = .false.
    481     integer :: verbose !< An integer indicating the level of verbosity.
    482 
    483     if (initialized) return
    484 
    485     verbose = 5 ! Default verbosity level
    486     if (present(verbosity)) verbose = verbosity
    487 
    488 ! Write out the version of the file to the log file.
    489     call write_version_number(trim(mod_name), version)
    490 
    491     initialized = .true.
    492     outunit = stdout()
    493 
    494 ! initialize the coupler type flux tracers
    495     call atmos_ocean_type_fluxes_init(verbose)
    496 
    497     if (verbose >= 9) then
    498       write (outunit,*)
    499       write (outunit,*) 'Dumping field manager tree'
    500       if (.not. fm_dump_list('/', recursive = .true.)) &
    501           call mpp_error(FATAL, trim(error_header) // ' Problem dumping field manager tree')
    502     endif
    503 
    504     caller_str = trim(mod_name) // '(' // trim(sub_name) // ')'
    505 
    506 ! Set other defaults for the fm_util_set_value routines.
    507     call fm_util_set_no_overwrite(.true.)
    508     call fm_util_set_caller(caller_str)
    509 
    510 ! Determine the number of flux fields.
    511     gas_fluxes%num_bcs = fm_util_get_length('/coupler_mod/fluxes/')
    512     gas_fluxes%set = .true.
    513     gas_fields_atm%num_bcs = gas_fluxes%num_bcs ; gas_fields_atm%set = .true.
    514     gas_fields_ice%num_bcs = gas_fluxes%num_bcs ; gas_fields_ice%set = .true.
    515     if (gas_fluxes%num_bcs .lt. 0) then
    516       call mpp_error(FATAL, trim(error_header) // ' Could not get number of fluxes')
    517     elseif (gas_fluxes%num_bcs .eq. 0) then
    518       if (verbose >= 5) &
    519           write (outunit,*) trim(note_header), ' No gas fluxes'
    520       return
    521     else
    522       if (verbose >= 5) &
    523           write (outunit,*) trim(note_header), ' Processing ', gas_fluxes%num_bcs, ' gas fluxes'
    524     endif
    525 
    526 ! allocate the arrays
    527     allocate (gas_fluxes%bc(gas_fluxes%num_bcs))
    528     allocate (gas_fields_atm%bc(gas_fields_atm%num_bcs))

Page 14          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    529     allocate (gas_fields_ice%bc(gas_fields_ice%num_bcs))
    530 
    531 ! Loop over the input fields, setting the values in the flux_type.
    532     n = 0
    533     do while (fm_loop_over_list('/coupler_mod/fluxes', name, typ, ind))
    534       if (typ .ne. 'list') then
    535         call mpp_error(FATAL, trim(error_header) // ' ' // trim(name) // ' is not a list')
    536       endif
    537 
    538       n = n + 1  ! increment the array index
    539 
    540       if (n .ne. ind) then
    541         if (verbose >= 3) &
    542             write (outunit,*) trim(warn_header), ' Flux index, ', ind,&
    543             & ' does not match array index, ', n, ' for ', trim(name)
    544       endif
    545 
    546 ! Change list to the new flux.
    547       if (.not. fm_change_list('/coupler_mod/fluxes/' // trim(name))) then
    548         call mpp_error(FATAL, trim(error_header) // ' Problem changing to ' // trim(name))
    549       endif
    550 
    551 ! Save and check the flux_type.
    552       gas_fluxes%bc(n)%flux_type = fm_util_get_string('flux_type', scalar = .true.)
    553       if (.not. fm_exists('/coupler_mod/types/' // trim(gas_fluxes%bc(n)%flux_type))) then
    554         call mpp_error(FATAL, trim(error_header) // ' Undefined flux_type given for ' //&
    555             & trim(name) // ': ' // trim(gas_fluxes%bc(n)%flux_type))
    556       endif
    557       gas_fields_atm%bc(n)%flux_type = gas_fluxes%bc(n)%flux_type
    558       gas_fields_ice%bc(n)%flux_type = gas_fluxes%bc(n)%flux_type
    559 
    560 ! Save and check the implementation.
    561       gas_fluxes%bc(n)%implementation = fm_util_get_string('implementation', scalar = .true.)
    562       if (.not. fm_exists('/coupler_mod/types/' // trim(gas_fluxes%bc(n)%flux_type) //&
    563           & '/implementation/' // trim(gas_fluxes%bc(n)%implementation))) then
    564         call mpp_error(FATAL, trim(error_header) // ' Undefined implementation given for ' //&
    565             & trim(name) // ': ' // trim(gas_fluxes%bc(n)%flux_type) // '/implementation/' //&
    566             & trim(gas_fluxes%bc(n)%implementation))
    567       endif
    568       gas_fields_atm%bc(n)%implementation = gas_fluxes%bc(n)%implementation
    569       gas_fields_ice%bc(n)%implementation = gas_fluxes%bc(n)%implementation
    570 
    571 ! Set the flux list name.
    572       flux_list = '/coupler_mod/types/' // trim(gas_fluxes%bc(n)%flux_type) // '/'
    573 
    574 ! allocate the arrays
    575       gas_fluxes%bc(n)%num_fields = fm_util_get_length(trim(flux_list) // 'flux/name')
    576       allocate (gas_fluxes%bc(n)%field(gas_fluxes%bc(n)%num_fields))
    577       gas_fields_atm%bc(n)%num_fields = fm_util_get_length(trim(flux_list) // 'atm/name')
    578       allocate (gas_fields_atm%bc(n)%field(gas_fields_atm%bc(n)%num_fields))
    579       gas_fields_ice%bc(n)%num_fields = fm_util_get_length(trim(flux_list) // 'ice/name')
    580       allocate (gas_fields_ice%bc(n)%field(gas_fields_ice%bc(n)%num_fields))
    581 
    582 ! Save the name and generate unique field names for Flux, Ice and Atm.
    583       gas_fluxes%bc(n)%name = name
    584       do m = 1, fm_util_get_length(trim(flux_list) // 'flux/name')
    585         gas_fluxes%bc(n)%field(m)%name = trim(name) // "_" // fm_util_get_string(trim(flux_list) //&

Page 15          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    586             & 'flux/name', index = m)
    587         gas_fluxes%bc(n)%field(m)%override = .false.
    588         gas_fluxes%bc(n)%field(m)%mean     = .false.
    589       enddo
    590 
    591       gas_fields_atm%bc(n)%name = name
    592       do m = 1, fm_util_get_length(trim(flux_list) // 'atm/name')
    593         gas_fields_atm%bc(n)%field(m)%name = trim(name) // "_" // fm_util_get_string(trim(flux_list) //&
    594             & 'atm/name', index = m)
    595         gas_fields_atm%bc(n)%field(m)%override = .false.
    596         gas_fields_atm%bc(n)%field(m)%mean     = .false.
    597       enddo
    598 
    599       gas_fields_ice%bc(n)%name = name
    600       do m = 1, fm_util_get_length(trim(flux_list) // 'ice/name')
    601         gas_fields_ice%bc(n)%field(m)%name = trim(name) // "_" // fm_util_get_string(trim(flux_list) // 'ice/name', index = 
    601 m)
    602         gas_fields_ice%bc(n)%field(m)%override = .false.
    603         gas_fields_ice%bc(n)%field(m)%mean     = .false.
    604       enddo
    605 
    606 ! Save the units.
    607       do m = 1, fm_util_get_length(trim(flux_list) // 'flux/name')
    608         gas_fluxes%bc(n)%field(m)%units =&
    609             & fm_util_get_string(trim(fm_util_get_string(trim(flux_list) // 'flux/name', index = m)) // '-units', scalar = .
    609 true.)
    610       enddo
    611       do m = 1, fm_util_get_length(trim(flux_list) // 'atm/name')
    612         gas_fields_atm%bc(n)%field(m)%units =&
    613             & fm_util_get_string(trim(fm_util_get_string(trim(flux_list) // 'atm/name', index = m)) // '-units')
    614       enddo
    615       do m = 1, fm_util_get_length(trim(flux_list) // 'ice/name')
    616         gas_fields_ice%bc(n)%field(m)%units =&
    617             & fm_util_get_string(trim(fm_util_get_string(trim(flux_list) // 'ice/name', index = m)) // '-units')
    618       enddo
    619 
    620 ! Save the long names.
    621       do m = 1, fm_util_get_length(trim(flux_list) // 'flux/name')
    622         gas_fluxes%bc(n)%field(m)%long_name =&
    623             & fm_util_get_string(trim(fm_util_get_string(trim(flux_list) // 'flux/name', index = m)) // '-long_name', scalar
    623  = .true.)
    624         gas_fluxes%bc(n)%field(m)%long_name = trim(gas_fluxes%bc(n)%field(m)%long_name) // ' for ' // name
    625       enddo
    626       do m = 1, fm_util_get_length(trim(flux_list) // 'atm/name')
    627         gas_fields_atm%bc(n)%field(m)%long_name =&
    628             & fm_util_get_string(trim(fm_util_get_string(trim(flux_list) // 'atm/name', index = m)) // '-long_name')
    629         gas_fields_atm%bc(n)%field(m)%long_name = trim(gas_fields_atm%bc(n)%field(m)%long_name) // ' for ' // name
    630       enddo
    631       do m = 1, fm_util_get_length(trim(flux_list) // 'ice/name')
    632         gas_fields_ice%bc(n)%field(m)%long_name =&
    633             & fm_util_get_string(trim(fm_util_get_string(trim(flux_list) // 'ice/name', index = m)) // '-long_name')
    634         gas_fields_ice%bc(n)%field(m)%long_name = trim(gas_fields_ice%bc(n)%field(m)%long_name) // ' for ' // name
    635       enddo
    636 
    637 ! Save the atm_tr_index.
    638       gas_fluxes%bc(n)%atm_tr_index = fm_util_get_integer('atm_tr_index', scalar = .true.)
    639 

Page 16          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    640 ! Save the molecular weight.
    641       gas_fluxes%bc(n)%mol_wt = fm_util_get_real('mol_wt', scalar = .true.)
    642       gas_fields_atm%bc(n)%mol_wt = gas_fluxes%bc(n)%mol_wt
    643       gas_fields_ice%bc(n)%mol_wt = gas_fluxes%bc(n)%mol_wt
    644 
    645 ! Save the ice_restart_file.
    646       gas_fluxes%bc(n)%ice_restart_file = fm_util_get_string('ice_restart_file', scalar = .true.)
    647       gas_fields_atm%bc(n)%ice_restart_file = gas_fluxes%bc(n)%ice_restart_file
    648       gas_fields_ice%bc(n)%ice_restart_file = gas_fluxes%bc(n)%ice_restart_file
    649 
    650 ! Save the ocean_restart_file.
    651       gas_fluxes%bc(n)%ocean_restart_file = fm_util_get_string('ocean_restart_file', scalar = .true.)
    652       gas_fields_atm%bc(n)%ocean_restart_file = gas_fluxes%bc(n)%ocean_restart_file
    653       gas_fields_ice%bc(n)%ocean_restart_file = gas_fluxes%bc(n)%ocean_restart_file
    654 
    655 ! Save the params.
    656       gas_fluxes%bc(n)%param => fm_util_get_real_array('param')
    657 
    658 ! Save the flags.
    659       gas_fluxes%bc(n)%flag => fm_util_get_logical_array('flag')
    660 
    661 ! Perform some integrity checks.
    662       num_parameters = fm_util_get_integer(trim(flux_list) // 'implementation/' //&
    663           & trim(gas_fluxes%bc(n)%implementation) // '/num_parameters', scalar = .true.)
    664       if (num_parameters .gt. 0) then
    665         if (.not. associated(gas_fluxes%bc(n)%param)) then
    666           write (error_string,'(a,i2)') ': need ', num_parameters
    667           call mpp_error(FATAL, trim(error_header) // ' No param for ' // trim(name) // trim(error_string))
    668         elseif (size(gas_fluxes%bc(n)%param(:)) .ne. num_parameters) then
    669           write (error_string,'(a,i2,a,i2)') ': ', size(gas_fluxes%bc(n)%param(:)), ' given, need ', num_parameters
    670           call mpp_error(FATAL, trim(error_header) // ' Wrong number of param for ' // trim(name) // trim(error_string))
    671         endif
    672       elseif (num_parameters .eq. 0) then
    673         if (associated(gas_fluxes%bc(n)%param)) then
    674           write (error_string,'(a,i3)') ' but has size of ', size(gas_fluxes%bc(n)%param(:))
    675           call mpp_error(FATAL, trim(error_header) // ' No params needed for ' // trim(name) // trim(error_string))
    676         endif
    677       else
    678         write (error_string,'(a,i2)') ': ', num_parameters
    679         call mpp_error(FATAL, trim(error_header) // 'Num_parameters is negative for ' // trim(name) // trim(error_string))
    680       endif
    681       num_flags = fm_util_get_integer(trim(flux_list) // '/num_flags', scalar = .true.)
    682       if (num_flags .gt. 0) then
    683         if (.not. associated(gas_fluxes%bc(n)%flag)) then
    684           write (error_string,'(a,i2)') ': need ', num_flags
    685           call mpp_error(FATAL, trim(error_header) // ' No flag for ' // trim(name) // trim(error_string))
    686         elseif (size(gas_fluxes%bc(n)%flag(:)) .ne. num_flags) then
    687           write (error_string,'(a,i2,a,i2)') ': ', size(gas_fluxes%bc(n)%flag(:)), ' given, need ', num_flags
    688           call mpp_error(FATAL, trim(error_header) // ' Wrong number of flag for ' // trim(name) // trim(error_string))
    689         endif
    690       elseif (num_flags .eq. 0) then
    691         if (associated(gas_fluxes%bc(n)%flag)) then
    692           write (error_string,'(a,i3)') ' but has size of ', size(gas_fluxes%bc(n)%flag(:))
    693           call mpp_error(FATAL, trim(error_header) // ' No flags needed for ' // trim(name) // trim(error_string))
    694         endif
    695       else
    696         write (error_string,'(a,i2)') ': ', num_flags

Page 17          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    697         call mpp_error(FATAL, trim(error_header) // 'Num_flags is negative for ' // trim(name) // trim(error_string))
    698       endif
    699 
    700 ! Set some flags for this flux_type.
    701       gas_fluxes%bc(n)%use_atm_pressure = fm_util_get_logical(trim(flux_list) // '/use_atm_pressure')
    702       gas_fields_atm%bc(n)%use_atm_pressure = gas_fluxes%bc(n)%use_atm_pressure
    703       gas_fields_ice%bc(n)%use_atm_pressure = gas_fluxes%bc(n)%use_atm_pressure
    704 
    705       gas_fluxes%bc(n)%use_10m_wind_speed = fm_util_get_logical(trim(flux_list) // '/use_10m_wind_speed')
    706       gas_fields_atm%bc(n)%use_10m_wind_speed = gas_fluxes%bc(n)%use_10m_wind_speed
    707       gas_fields_ice%bc(n)%use_10m_wind_speed = gas_fluxes%bc(n)%use_10m_wind_speed
    708 
    709       gas_fluxes%bc(n)%pass_through_ice = fm_util_get_logical(trim(flux_list) // '/pass_through_ice')
    710       gas_fields_atm%bc(n)%pass_through_ice = gas_fluxes%bc(n)%pass_through_ice
    711       gas_fields_ice%bc(n)%pass_through_ice = gas_fluxes%bc(n)%pass_through_ice
    712     enddo ! while loop
    713 
    714     if (verbose >= 5) then
    715       write (outunit,*)
    716       write (outunit,*) 'Dumping fluxes tracer tree'
    717       if (.not. fm_dump_list('/coupler_mod/fluxes', recursive = .true.)) then
    718         call mpp_error(FATAL, trim(error_header) // ' Problem dumping fluxes tracer tree')
    719       endif
    720     endif
    721 
    722 ! Check that the number of fluxes is the same on all processors
    723 ! If they are, then the sum of the number of fluxes across all processors
    724 ! should equal to the number of fluxes on each processor times the number of processors
    725     total_fluxes = gas_fluxes%num_bcs
    726     call mpp_sum(total_fluxes)
    727     if (total_fluxes .ne. mpp_npes() * gas_fluxes%num_bcs) then
    728       write (string, '(i4)') gas_fluxes%num_bcs
    729       call mpp_error(FATAL, trim(error_header) //&
    730           & ' Number of fluxes does not match across the processors: ' // trim(string) // ' fluxes')
    731     endif
    732 
    733 ! Reset the defaults for the fm_util_set_value calls.
    734     call fm_util_reset_no_overwrite
    735     call fm_util_reset_caller
    736   end subroutine  atmos_ocean_fluxes_init

Page 18          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55 Entry Points                    atmos_ocean_fluxes.F90



ENTRY POINTS

  Name                                                          
                                                                
 atmos_ocean_fluxes_mod_mp_atmos_ocean_fluxes_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   665                                  scalar                    665,673,683,691                   
 ATMOS_OCEAN_FLUXES_INIT    Subr   440                                                                                              
 ATMOS_OCEAN_TYPE_FLUXES_IN                                                                                                         
 IT                         Subr   495                                                            67,495                            
 CALLER_STR                 Local  471      CHAR            128         scalar                    504,508                           
 COUPLER_1D_BC_TYPE         Type   442                                  scalar   PRIV             41,442,447,452                    
 ERROR_HEADER               Param  460      CHAR            62          scalar                    501,516,535,548,554,564,667,670,67
                                                                                                  5,679,685,688,693,697,718,729     
 ERROR_STRING               Local  478      CHAR            128         scalar                    666,667,669,670,674,675,678,679,68
                                                                                                  4,685,687,688,692,693,696,697     
 FLUX_LIST                  Local  479      CHAR            128         scalar                    572,575,577,579,584,585,592,593,60
                                                                                                  0,601,607,609,611,613,615,617,621,
                                                                                                  623,626,628,631,633,662,681,701,70
                                                                                                  5,709                             
 FM_DUMP_LIST               Func   500      L(4)            4           scalar   PRIV             50,500,717,1229                   
 FM_FIELD_NAME_LEN          Param  473      I(4)            4           scalar   PRIV             50,473                            
 FM_LOOP_OVER_LIST          Local  533                                  scalar   PRIV             51,533                            
 FM_LOOP_OVER_LIST_OLD      Func   533      L(4)            4           scalar   PRIV             533                               
 FM_TYPE_NAME_LEN           Param  472      I(4)            4           scalar   PRIV             50,472                            
 FM_UTIL_GET_LOGICAL        Func   701      L(4)            4           scalar   PRIV             61,701,705,709                    
 FM_UTIL_GET_LOGICAL_ARRAY  Func   659      L(4)            4     1     1        PTR,PRIV         61,659                            
 FM_UTIL_GET_REAL           Func   641      R(8)            8           scalar   PRIV             60,641                            
 FM_UTIL_GET_REAL_ARRAY     Func   656      R(8)            8     1     1        PTR,PRIV         60,656                            
 GAS_FIELDS_ATM             Dummy  440      COUPLER_1D_BC_TYPE                                                                      
                                                            88          scalar   ARG,INOUT        513,528,557,568,577,578,591,593,59
                                                                                                  5,596,612,627,629,642,647,652,702,
                                                                                                  706,710                           
 GAS_FIELDS_ICE             Dummy  440      COUPLER_1D_BC_TYPE                                                                      
                                                            88          scalar   ARG,INOUT        514,529,558,569,579,580,599,601,60
                                                                                                  2,603,616,632,634,643,648,653,703,
                                                                                                  707,711                           
 GAS_FLUXES                 Dummy  440      COUPLER_1D_BC_TYPE                                                                      
                                                            88          scalar   ARG,INOUT        511,512,513,514,515,517,523,527,55
                                                                                                  2,553,555,557,558,561,562,563,565,
                                                                                                  566,568,569,572,575,576,583,585,58
                                                                                                  7,588,608,622,624,638,641,642,643,
                                                                                                  646,647,648,651,652,653,656,659,66
                                                                                                  3,665,668,669,673,674,683,686,687,
                                                                                                  691,692,701,702,703,705,706,707,70
                                                                                                  9,710,711,725,727,728             
 IND                        Local  474      I(4)            4           scalar                    533,540,542                       
 INITIALIZED                Local  480      L(4)            4           scalar   SAVE             480,483,491                       
 M                          Local  470      I(4)            4           scalar                    584,585,586,587,588,592,593,594,59
                                                                                                  5,596,600,601,602,603,607,608,609,

Page 19          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55 Symbol Table                    atmos_ocean_fluxes.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  611,612,613,615,616,617,621,622,62
                                                                                                  3,624,626,627,628,629,631,632,633,
                                                                                                  634                               
 MPP_NPES                   Func   727      I(4)            4           scalar   PRIV             38,727                            
 MPP_SUM                    Local  726                                  scalar   PRIV             38,726                            
 MPP_SUM_INT4_SCALAR        Subr   726                                           PRIV             726                               
 N                          Local  469      I(4)            4           scalar                    532,538,540,543,552,553,555,557,55
                                                                                                  8,561,562,563,565,566,568,569,572,
                                                                                                  575,576,577,578,579,580,583,585,58
                                                                                                  7,588,591,593,595,596,599,601,602,
                                                                                                  603,608,612,616,622,624,627,629,63
                                                                                                  2,634,638,641,642,643,646,647,648,
                                                                                                  651,652,653,656,659,663,665,668,66
                                                                                                  9,673,674,683,686,687,691,692,701,
                                                                                                  702,703,705,706,707,709,710,711   
 NAME                       Local  473      CHAR            48          scalar                    533,535,543,547,548,555,565,583,58
                                                                                                  5,591,593,599,601,624,629,634,667,
                                                                                                  670,675,679,685,688,693,697       
 NOTE_HEADER                Param  464      CHAR            61          scalar                    519,523                           
 NUM_FLAGS                  Local  468      I(4)            4           scalar                    681,682,684,686,687,690,696       
 NUM_PARAMETERS             Local  467      I(4)            4           scalar                    662,664,666,668,669,672,678       
 OUTUNIT                    Local  475      I(4)            4           scalar                    492,498,499,519,523,542,715,716   
 PRESENT                    Func   486                                  scalar                    486                               
 SIZE                       Func   668                                  scalar                    668,669,674,686,687,692           
 STRING                     Local  477      CHAR            8           scalar                    728,730                           
 SUB_NAME                   Param  459      CHAR            23          scalar                    461,463,465,504                   
 TOTAL_FLUXES               Local  476      I(4)            4           scalar                    725,726,727                       
 TRIM                       Func   461                                  scalar                    461,463,465,489,501,504,516,519,52
                                                                                                  3,535,542,543,547,548,553,554,555,
                                                                                                  562,563,564,565,566,572,575,577,57
                                                                                                  9,584,585,592,593,600,601,607,609,
                                                                                                  611,613,615,617,621,623,624,626,62
                                                                                                  8,629,631,633,634,662,663,667,670,
                                                                                                  675,679,681,685,688,693,697,701,70
                                                                                                  5,709,718,729,730                 
 TYP                        Local  472      CHAR            8           scalar                    533,534                           
 VERBOSE                    Local  481      I(4)            4           scalar                    485,486,495,497,518,522,541,714   
 VERBOSITY                  Dummy  440      I(4)            4           scalar   ARG,IN           486                               
 VERSION                    Param  489      CHAR            7           scalar                    489                               
 WARN_HEADER                Param  462      CHAR            64          scalar                    542                               
 WRITE_VERSION_NUMBER       Subr   489                                           PRIV             39,489                            


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 COUPLER_1D_BC_TYPE.BC      RECORD          808   8        1     1        PTR              527,528,529,552,553,555,557,558,56 
                                                                                           1,562,563,565,566,568,569,572,575, 
                                                                                           576,577,578,579,580,583,585,587,58 
                                                                                           8,591,593,595,596,599,601,602,603, 
                                                                                           608,612,616,622,624,627,629,632,63 
                                                                                           4,638,641,642,643,646,647,648,651, 
                                                                                           652,653,656,659,663,665,668,669,67 
                                                                                           3,674,683,686,687,691,692,701,702, 

Page 20          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55 Symbol Table                    atmos_ocean_fluxes.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           703,705,706,707,709,710,711        
 COUPLER_1D_BC_TYPE.NUM_BCS I(4)            4     0              scalar                    511,513,514,515,517,523,527,528,52 
                                                                                           9,725,727,728                      
 COUPLER_1D_BC_TYPE.SET     L(4)            4     80             scalar                    512,513,514                        
 COUPLER_1D_FIELD_TYPE.ATM_TR_INDEX                                                                                        ...
                            I(4)            4     528            scalar                    638                                
 COUPLER_1D_FIELD_TYPE.FIELD                                                                                               ...
                            RECORD          392   56       1     1        PTR              576,578,580,585,587,588,593,595,59 
                                                                                           6,601,602,603,608,612,616,622,624, 
                                                                                           627,629,632,634                    
 COUPLER_1D_FIELD_TYPE.FLAG L(4)            4     456      1     1        PTR              659,683,686,687,691,692            
 COUPLER_1D_FIELD_TYPE.FLUX_TYPE                                                                                           ...
                            CHAR            128   128            scalar                    552,553,555,557,558,562,565,572    
 COUPLER_1D_FIELD_TYPE.ICE_RESTART_FILE                                                                                    ...
                            CHAR            128   532            scalar                    646,647,648                        
 COUPLER_1D_FIELD_TYPE.IMPLEMENTATION                                                                                      ...
                            CHAR            128   256            scalar                    561,563,566,568,569,663            
 COUPLER_1D_FIELD_TYPE.MOL_WT                                                                                              ...
                            R(8)            8     800            scalar                    641,642,643                        
 COUPLER_1D_FIELD_TYPE.NAME CHAR            48    0              scalar                    583,591,599                        
 COUPLER_1D_FIELD_TYPE.NUM_FIELDS                                                                                          ...
                            I(4)            4     48             scalar                    575,576,577,578,579,580            
 COUPLER_1D_FIELD_TYPE.OCEAN_RESTART_FILE                                                                                  ...
                            CHAR            128   660            scalar                    651,652,653                        
 COUPLER_1D_FIELD_TYPE.PARAM                                                                                               ...
                            R(8)            8     384      1     1        PTR              656,665,668,669,673,674            
 COUPLER_1D_FIELD_TYPE.PASS_THROUGH_ICE                                                                                    ...
                            L(4)            4     796            scalar                    709,710,711                        
 COUPLER_1D_FIELD_TYPE.USE_10M_WIND_SPEED                                                                                  ...
                            L(4)            4     792            scalar                    705,706,707                        
 COUPLER_1D_FIELD_TYPE.USE_ATM_PRESSURE                                                                                    ...
                            L(4)            4     788            scalar                    701,702,703                        
 COUPLER_1D_VALUES_TYPE.LONG_NAME                                                                                          ...
                            CHAR            128   132            scalar                    622,624,627,629,632,634            
 COUPLER_1D_VALUES_TYPE.MEAN                                                                                               ...
                            L(4)            4     120            scalar                    588,596,603                        
 COUPLER_1D_VALUES_TYPE.NAME                                                                                               ...
                            CHAR            48    0              scalar                    585,593,601                        
 COUPLER_1D_VALUES_TYPE.OVERRIDE                                                                                           ...
                            L(4)            4     124            scalar                    587,595,602                        
 COUPLER_1D_VALUES_TYPE.UNITS                                                                                              ...
                            CHAR            128   260            scalar                    608,612,616                        

Page 21          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    737 
    738 !> @brief Initialize the coupler type flux tracers
    739 !! Initialize the /coupler_mod/types/ fields in the field manager.  These fields
    740 !! include:
    741 !! @verbatim
    742 !! air_sea_gas_flux_generic/
    743 !!                          implementation/
    744 !!                                         ocmip2/
    745 !!                                                num_parameters = 2
    746 !!                          num_flags = 0
    747 !!                          use_atm_pressure = t
    748 !!                          use_10m_wind_speed = t
    749 !!                          pass_through_ice = f
    750 !!                          atm/
    751 !!                              name/
    752 !!                                   pcair, u10, psurf
    753 !!                              long_name/
    754 !!                                        'Atmospheric concentration'
    755 !!                                        'Wind speed at 10 m'
    756 !!                                        'Surface atmospheric pressure'
    757 !!                              units/
    758 !!                                    'mol/mol', 'm/s', 'Pa'
    759 !!                          ice/
    760 !!                              name/
    761 !!                                   alpha, csurf, sc_no
    762 !!                              long_name/
    763 !!                                        'Solubility from atmosphere'
    764 !!                                        'Surface concentration from ocean'
    765 !!                                        'Schmidt number'
    766 !!                              units/
    767 !!                                    'mol/m^3/atm', 'mol/m^3', 'dimensionless'
    768 !!                          flux/
    769 !!                               name/
    770 !!                                    flux, deltap, kw
    771 !!                               long_name/
    772 !!                                         'Surface gas flux'
    773 !!                                         'ocean-air delta pressure'
    774 !!                                         'piston velocity'
    775 !!                               units/
    776 !!                                     'mol/m^2/s', 'uatm', 'm/s'
    777 !! air_sea_gas_flux/
    778 !!                  implementation/
    779 !!                                 ocmip2/
    780 !!                                        num_parameters = 2
    781 !!                                 ocmip2_data/
    782 !!                                             num_parameters = 2
    783 !!                                 linear/
    784 !!                                        num_parameters = 3
    785 !!                  num_flags = 0
    786 !!                  use_atm_pressure = t
    787 !!                  use_10m_wind_speed = t
    788 !!                  pass_through_ice = f
    789 !!                  atm/
    790 !!                      name/
    791 !!                           pcair, u10, psurf
    792 !!                      long_name/
    793 !!                                'Atmospheric concentration'

Page 22          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    794 !!                                'Wind speed at 10 m'
    795 !!                                'Surface atmospheric pressure'
    796 !!                      units/
    797 !!                            'mol/mol', 'm/s', 'Pa'
    798 !!                  ice/
    799 !!                      name/
    800 !!                           alpha, csurf
    801 !!                      long_name/
    802 !!                                'Solubility from atmosphere'
    803 !!                                'Surface concentration from ocean'
    804 !!                      units/
    805 !!                            'mol/m^3/atm', 'mol/m^3'
    806 !!                  flux/
    807 !!                       name/
    808 !!                            flux
    809 !!                       long_name/
    810 !!                                 'Surface gas flux'
    811 !!                       units/
    812 !!                             'mol/m^2/s'
    813 !! air_sea_deposition/
    814 !!                    implementation/
    815 !!                                   dry/
    816 !!                                       num_parameters = 1
    817 !!                                   wet/
    818 !!                                       num_parameters = 1
    819 !!                    num_flags = 0
    820 !!                    use_atm_pressure = f
    821 !!                    use_10m_wind_speed = f
    822 !!                    pass_through_ice = t
    823 !!                    atm/
    824 !!                        name/
    825 !!                             depostion
    826 !!                        long_name/
    827 !!                                  'Atmospheric deposition'
    828 !!                        units/
    829 !!                              'kg/m^2/s'
    830 !!                    ice/
    831 !!                        name/
    832 !!                        long_name/
    833 !!                        units/
    834 !!                    flux/
    835 !!                         name/
    836 !!                              flux
    837 !!                         long_name/
    838 !!                                   'Surface deposition'
    839 !!                         units/
    840 !!                               'mol/m^2/s'
    841 !! land_sea_runoff/
    842 !!                 implementation/
    843 !!                                river/
    844 !!                                      num_parameters = 1
    845 !!                 num_flags = 0
    846 !!                 use_atm_pressure = f
    847 !!                 use_10m_wind_speed = f
    848 !!                 pass_through_ice = t
    849 !!                 atm/                  ! really land (perhaps should change this?)
    850 !!                     name/

Page 23          Source Listing                  ATMOS_OCEAN_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    851 !!                          runoff
    852 !!                     long_name/
    853 !!                               'Concentration in land runoff'
    854 !!                     units/
    855 !!                           'kg/m^3'
    856 !!                 ice/
    857 !!                     name/
    858 !!                     long_name/
    859 !!                     units/
    860 !!                 flux/
    861 !!                      name/
    862 !!                           flux
    863 !!                      long_name/
    864 !!                                'Concentration in land runoff'
    865 !!                      units/
    866 !!                            'mol/m^3'
    867 !! @endverbatim
    868 !!
    869 !! @throw FATAL, "Could not set the \"coupler_mod\" list"
    870 !! @throw FATAL, "Could not set the \"GOOD\" list"
    871 !! @throw FATAL, "Could not set the \"/coupler_mod/fluxes\" list"
    872 !! @throw FATAL, "Could not set the \"/coupler_mod/types\" list"
    873 !! @throw FATAL, "Could not change to \"/coupler_mod/types\""
    874 !! @throw FATAL, "Could not set the \"air_sea_gas_flux_generic\" list"
    875 !! @throw FATAL, "Could not set the \"air_sea_gas_flux_generic\" list"
    876 !! @throw FATAL, "Could not set the \"air_sea_gas_flux_generic/implementation\" list"
    877 !! @throw FATAL, "Could not set the \"air_sea_gas_flux_generic/implementation/ocmip2\" list"
    878 !! @throw FATAL, "Could not set the \"air_sea_gas_flux_generic/atm\" list"
    879 !! @throw FATAL, "Could not set the \"air_sea_gas_flux_generic/ice\" list"
    880 !! @throw FATAL, "Could not set the \"air_sea_gas_flux_generic/flux\" list"
    881 !! @throw FATAL, "Could not set the \"air_sea_gas_flux\" list"
    882 !! @throw FATAL, "Could not set the \"air_sea_gas_flux/implementation\" list"
    883 !! @throw FATAL, "Could not set the \"air_sea_gas_flux/implementation/ocmip2\" list"
    884 !! @throw FATAL, "Could not set the \"air_sea_gas_flux/implementation/ocmip2_data\" list"
    885 !! @throw FATAL, "Could not set the \"air_sea_gas_flux/implementation/linear\" list"
    886 !! @throw FATAL, "Could not set the \"air_sea_gas_flux/atm\" list"
    887 !! @throw FATAL, "Could not set the \"air_sea_gas_flux/ice\" list"
    888 !! @throw FATAL, "Could not set the \"air_sea_gas_flux/flux\" list"
    889 !! @throw FATAL, "Could not set the \"air_sea_deposition\" list"
    890 !! @throw FATAL, "Could not set the \"air_sea_deposition/implementation\" list"
    891 !! @throw FATAL, "Could not set the \"air_sea_deposition/implementation/dry\" list"
    892 !! @throw FATAL, "Could not set the \"air_sea_deposition/implementation/wet\" list"
    893 !! @throw FATAL, "Could not set the \"air_sea_deposition/atm\" list"
    894 !! @throw FATAL, "Could not set the \"air_sea_deposition/ice\" list"
    895 !! @throw FATAL, "Could not set the \"air_sea_deposition/flux\" list"
    896 !! @throw FATAL, "Could not set the \"land_sea_runoff\" list"
    897 !! @throw FATAL, "Could not set the \"land_sea_runoff/implementation\" list"
    898 !! @throw FATAL, "Could not set the \"land_sea_runoff/implementation/river\" list"
    899 !! @throw FATAL, "Could not set the \"land_sea_runoff/atm\" list"
    900 !! @throw FATAL, "Could not set the \"land_sea_runoff/ice\" list"
    901 !! @throw FATAL, "Could not set the \"land_sea_runoff/flux\" list"
    902 !! @throw FATAL, "Could not change to \"/\""
    903 !! @throw FATAL, "Problem dumping /coupler_mod/types tree"
    904   subroutine atmos_ocean_type_fluxes_init(verbosity)
    905     integer, intent(in), optional :: verbosity  !< A 0-9 integer indicating a level of verbosity.
    906 
    907     integer :: verbose !< An integer indicating the level of verbosity.

Page 24          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    908     integer :: outunit
    909     character(len=*), parameter :: sub_name = 'atmos_ocean_type_fluxes_init'
    910     character(len=*), parameter :: caller_str =&
    911         & trim(mod_name) // '(' // trim(sub_name) // ')'
    912     character(len=*), parameter   :: error_header =&
    913         & '==>Error from ' // trim(mod_name) // '(' // trim(sub_name) // '):'
    914     logical, save                           :: initialized = .false.
    915 
    916     if (initialized) return
    917 
    918     verbose = 5 ! Default verbosity level
    919     if (present(verbosity)) verbose = verbosity
    920 
    921     initialized = .true.
    922 
    923     call fm_util_set_no_overwrite(.true.)
    924     call fm_util_set_caller(caller_str)
    925 
    926 ! Be sure that the various lists and fields are defined in the field manager tree.
    927     if (fm_new_list('/coupler_mod') .le. 0) then
    928       call mpp_error(FATAL, trim(error_header) // ' Could not set the "coupler_mod" list')
    929     endif
    930 
    931     if (fm_new_list('/coupler_mod/GOOD') .le. 0) then
    932       call mpp_error(FATAL, trim(error_header) // ' Could not set the "GOOD" list')
    933     endif
    934     call fm_util_set_value('/coupler_mod/GOOD/good_coupler_mod_list', 'GOOD', append = .true.)
    935 
    936     if (fm_new_list('/coupler_mod/fluxes') .le. 0) then
    937       call mpp_error(FATAL, trim(error_header) // ' Could not set the "/coupler_mod/fluxes" list')
    938     endif
    939     call fm_util_set_value('/coupler_mod/GOOD/good_coupler_mod_list', 'fluxes', append = .true.)
    940 
    941     if (fm_new_list('/coupler_mod/types') .le. 0) then
    942       call mpp_error(FATAL, trim(error_header) // ' Could not set the "/coupler_mod/types" list')
    943     endif
    944     call fm_util_set_value('/coupler_mod/GOOD/good_coupler_mod_list', 'types', append = .true.)
    945 
    946 ! Change to the "/coupler_mod/types" list.
    947     if (.not. fm_change_list('/coupler_mod/types')) then
    948       call mpp_error(FATAL, trim(error_header) // ' Could not change to "/coupler_mod/types"')
    949     endif
    950 
    951 
    952 ! Define the air_sea_gas_flux_generic type and add it.
    953     if (fm_new_list('air_sea_gas_flux_generic') .le. 0) then
    954       call mpp_error(FATAL, trim(error_header) //&
    955           & ' Could not set the "air_sea_gas_flux_generic" list')
    956     endif
    957 
    958 ! Add the implementation list.
    959     if (fm_new_list('air_sea_gas_flux_generic/implementation') .le. 0) then
    960       call mpp_error(FATAL, trim(error_header) //&
    961           & ' Could not set the "air_sea_gas_flux_generic/implementation" list')
    962     endif
    963 
    964 ! Add the names of the different implementations.

Page 25          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

    965     if (fm_new_list('air_sea_gas_flux_generic/implementation/ocmip2') .le. 0) then
    966       call mpp_error(FATAL, trim(error_header) //&
    967           & ' Could not set the "air_sea_gas_flux_generic/implementation/ocmip2" list')
    968     endif
    969     call fm_util_set_value('air_sea_gas_flux_generic/implementation/ocmip2/num_parameters', 2)
    970 
    971     if (fm_new_list('air_sea_gas_flux_generic/implementation/duce') .le. 0) then
    972       call mpp_error(FATAL, trim(error_header) //&
    973           & ' Could not set the "air_sea_gas_flux_generic/implementation/duce" list')
    974     endif
    975     call fm_util_set_value('air_sea_gas_flux_generic/implementation/duce/num_parameters', 1)
    976 
    977     if (fm_new_list('air_sea_gas_flux_generic/implementation/johnson') .le. 0) then
    978       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux_generic/implementation/johnson" list
    978 ')
    979     endif
    980     call fm_util_set_value('air_sea_gas_flux_generic/implementation/johnson/num_parameters', 2)
    981 
    982 ! Add some scalar quantaties.
    983     call fm_util_set_value('air_sea_gas_flux_generic/num_flags', 0)
    984     call fm_util_set_value('air_sea_gas_flux_generic/use_atm_pressure', .true.)
    985     call fm_util_set_value('air_sea_gas_flux_generic/use_10m_wind_speed', .true.)
    986     call fm_util_set_value('air_sea_gas_flux_generic/pass_through_ice', .false.)
    987 
    988 ! Add required fields that will come from the atmosphere model.
    989     if (fm_new_list('air_sea_gas_flux_generic/atm') .le. 0) then
    990       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux_generic/atm" list')
    991     endif
    992 
    993     call fm_util_set_value('air_sea_gas_flux_generic/atm/name', 'pcair', index = ind_pcair)
    994     call fm_util_set_value('air_sea_gas_flux_generic/atm/long_name', 'Atmospheric concentration', index = ind_pcair)
    995     call fm_util_set_value('air_sea_gas_flux_generic/atm/units', 'mol/mol', index = ind_pcair)
    996 
    997     call fm_util_set_value('air_sea_gas_flux_generic/atm/name', 'u10', index = ind_u10)
    998     call fm_util_set_value('air_sea_gas_flux_generic/atm/long_name', 'Wind speed at 10 m', index = ind_u10)
    999     call fm_util_set_value('air_sea_gas_flux_generic/atm/units', 'm/s', index = ind_u10)
   1000 
   1001     call fm_util_set_value('air_sea_gas_flux_generic/atm/name', 'psurf', index = ind_psurf)
   1002     call fm_util_set_value('air_sea_gas_flux_generic/atm/long_name', 'Surface atmospheric pressure', index = ind_psurf)
   1003     call fm_util_set_value('air_sea_gas_flux_generic/atm/units', 'Pa', index = ind_psurf)
   1004 
   1005 ! Add required fields that will come from the ice model.
   1006     if (fm_new_list('air_sea_gas_flux_generic/ice') .le. 0) then
   1007       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux_generic/ice" list')
   1008     endif
   1009 
   1010     call fm_util_set_value('air_sea_gas_flux_generic/ice/name',      'alpha',                        index = ind_alpha)
   1011     call fm_util_set_value('air_sea_gas_flux_generic/ice/long_name', 'Solubility w.r.t. atmosphere', index = ind_alpha)
   1012     call fm_util_set_value('air_sea_gas_flux_generic/ice/units',     'mol/m^3/atm',                  index = ind_alpha)
   1013 
   1014     call fm_util_set_value('air_sea_gas_flux_generic/ice/name',      'csurf',               index = ind_csurf)
   1015     call fm_util_set_value('air_sea_gas_flux_generic/ice/long_name', 'Ocean concentration', index = ind_csurf)
   1016     call fm_util_set_value('air_sea_gas_flux_generic/ice/units',     'mol/m^3',             index = ind_csurf)
   1017 
   1018     call fm_util_set_value('air_sea_gas_flux_generic/ice/name',      'sc_no',          index = ind_sc_no)
   1019     call fm_util_set_value('air_sea_gas_flux_generic/ice/long_name', 'Schmidt number', index = ind_sc_no)
   1020     call fm_util_set_value('air_sea_gas_flux_generic/ice/units',     'dimensionless',  index = ind_sc_no)

Page 26          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

   1021 
   1022 ! Add the flux output field(s).
   1023     if (fm_new_list('air_sea_gas_flux_generic/flux') .le. 0) then
   1024       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux_generic/flux" list')
   1025     endif
   1026 
   1027     call fm_util_set_value('air_sea_gas_flux_generic/flux/name',      'flux',         index = ind_flux)
   1028     call fm_util_set_value('air_sea_gas_flux_generic/flux/long_name', 'Surface flux', index = ind_flux)
   1029     call fm_util_set_value('air_sea_gas_flux_generic/flux/units',     'mol/m^2/s',    index = ind_flux)
   1030 
   1031     call fm_util_set_value('air_sea_gas_flux_generic/flux/name',      'deltap',         index = ind_deltap)
   1032     call fm_util_set_value('air_sea_gas_flux_generic/flux/long_name', 'Ocean-air delta pressure', index = ind_deltap)
   1033     call fm_util_set_value('air_sea_gas_flux_generic/flux/units',     'uatm',    index = ind_deltap)
   1034 
   1035     call fm_util_set_value('air_sea_gas_flux_generic/flux/name',      'kw',         index = ind_kw)
   1036     call fm_util_set_value('air_sea_gas_flux_generic/flux/long_name', 'Piston velocity', index = ind_kw)
   1037     call fm_util_set_value('air_sea_gas_flux_generic/flux/units',     'm/s',    index = ind_kw)
   1038 
   1039     call fm_util_set_value('air_sea_gas_flux_generic/flux/name',      'flux0',         index = ind_flux0)
   1040     call fm_util_set_value('air_sea_gas_flux_generic/flux/long_name', 'Surface flux no atm', index = ind_flux0)
   1041     call fm_util_set_value('air_sea_gas_flux_generic/flux/units',     'mol/m^2/s',    index = ind_flux0)
   1042 
   1043 ! Define the air_sea_gas_flux type and add it.
   1044     if (fm_new_list('air_sea_gas_flux') .le. 0) then
   1045       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux" list')
   1046     endif
   1047 
   1048 ! Add the implementation list.
   1049     if (fm_new_list('air_sea_gas_flux/implementation') .le. 0) then
   1050       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux/implementation" list')
   1051     endif
   1052 
   1053 ! Add the names of the different implementations.
   1054     if (fm_new_list('air_sea_gas_flux/implementation/ocmip2') .le. 0) then
   1055       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux/implementation/ocmip2" list')
   1056     endif
   1057     call fm_util_set_value('air_sea_gas_flux/implementation/ocmip2/num_parameters', 2)
   1058     if (fm_new_list('air_sea_gas_flux/implementation/ocmip2_data') .le. 0) then
   1059       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux/implementation/ocmip2_data" list')
   1060     endif
   1061     call fm_util_set_value('air_sea_gas_flux/implementation/ocmip2_data/num_parameters', 2)
   1062     if (fm_new_list('air_sea_gas_flux/implementation/linear') .le. 0) then
   1063       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux/implementation/linear" list')
   1064     endif
   1065     call fm_util_set_value('air_sea_gas_flux/implementation/linear/num_parameters', 3)
   1066 
   1067 ! Add some scalar quantaties.
   1068     call fm_util_set_value('air_sea_gas_flux/num_flags', 0)
   1069     call fm_util_set_value('air_sea_gas_flux/use_atm_pressure', .true.)
   1070     call fm_util_set_value('air_sea_gas_flux/use_10m_wind_speed', .true.)
   1071     call fm_util_set_value('air_sea_gas_flux/pass_through_ice', .false.)
   1072 
   1073 ! Add required fields that will come from the atmosphere model.
   1074     if (fm_new_list('air_sea_gas_flux/atm') .le. 0) then
   1075       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux/atm" list')
   1076     endif
   1077 

Page 27          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

   1078     call fm_util_set_value('air_sea_gas_flux/atm/name',      'pcair',                     index = ind_pcair)
   1079     call fm_util_set_value('air_sea_gas_flux/atm/long_name', 'Atmospheric concentration', index = ind_pcair)
   1080     call fm_util_set_value('air_sea_gas_flux/atm/units',     'mol/mol',                   index = ind_pcair)
   1081 
   1082     call fm_util_set_value('air_sea_gas_flux/atm/name',      'u10',                index = ind_u10)
   1083     call fm_util_set_value('air_sea_gas_flux/atm/long_name', 'Wind speed at 10 m', index = ind_u10)
   1084     call fm_util_set_value('air_sea_gas_flux/atm/units',     'm/s',                index = ind_u10)
   1085 
   1086     call fm_util_set_value('air_sea_gas_flux/atm/name',      'psurf',                        index = ind_psurf)
   1087     call fm_util_set_value('air_sea_gas_flux/atm/long_name', 'Surface atmospheric pressure', index = ind_psurf)
   1088     call fm_util_set_value('air_sea_gas_flux/atm/units',     'Pa',                           index = ind_psurf)
   1089 
   1090 ! Add required fields that will come from the ice model.
   1091     if (fm_new_list('air_sea_gas_flux/ice') .le. 0) then
   1092       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux/ice" list')
   1093     endif
   1094 
   1095     call fm_util_set_value('air_sea_gas_flux/ice/name',      'alpha',                                                index =
   1095  ind_alpha)
   1096     call fm_util_set_value('air_sea_gas_flux/ice/long_name', 'Solubility from atmosphere times Schmidt number term', index =
   1096  ind_alpha)
   1097     call fm_util_set_value('air_sea_gas_flux/ice/units',     'mol/m^3/atm',                                          index =
   1097  ind_alpha)
   1098 
   1099     call fm_util_set_value('air_sea_gas_flux/ice/name',      'csurf',                                         index = ind_cs
   1099 urf)
   1100     call fm_util_set_value('air_sea_gas_flux/ice/long_name', 'Ocean concentration times Schmidt number term', index = ind_cs
   1100 urf)
   1101     call fm_util_set_value('air_sea_gas_flux/ice/units',     'mol/m^3',                                       index = ind_cs
   1101 urf)
   1102 
   1103 ! Add the flux output field(s).
   1104     if (fm_new_list('air_sea_gas_flux/flux') .le. 0) then
   1105       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_gas_flux/flux" list')
   1106     endif
   1107 
   1108     call fm_util_set_value('air_sea_gas_flux/flux/name',      'flux',         index = ind_flux)
   1109     call fm_util_set_value('air_sea_gas_flux/flux/long_name', 'Surface flux', index = ind_flux)
   1110     call fm_util_set_value('air_sea_gas_flux/flux/units',     'mol/m^2/s',    index = ind_flux)
   1111 
   1112 ! Define the air_sea_deposition type and add it.
   1113     if (fm_new_list('air_sea_deposition') .le. 0) then
   1114       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_deposition" list')
   1115     endif
   1116 
   1117 ! Add the implementation list.
   1118     if (fm_new_list('air_sea_deposition/implementation') .le. 0) then
   1119       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_deposition/implementation" list')
   1120     endif
   1121 
   1122 ! Add the names of the different implementations.
   1123     if (fm_new_list('air_sea_deposition/implementation/dry') .le. 0) then
   1124       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_deposition/implementation/dry" list')
   1125     endif
   1126     call fm_util_set_value('air_sea_deposition/implementation/dry/num_parameters', 1)
   1127     if (fm_new_list('air_sea_deposition/implementation/wet') .le. 0) then
   1128       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_deposition/implementation/wet" list')

Page 28          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

   1129     endif
   1130     call fm_util_set_value('air_sea_deposition/implementation/wet/num_parameters', 1)
   1131 
   1132 ! Add some scalar quantaties.
   1133     call fm_util_set_value('air_sea_deposition/num_flags', 0)
   1134     call fm_util_set_value('air_sea_deposition/use_atm_pressure', .false.)
   1135     call fm_util_set_value('air_sea_deposition/use_10m_wind_speed', .false.)
   1136     call fm_util_set_value('air_sea_deposition/pass_through_ice', .true.)
   1137 
   1138 ! Add required fields that will come from the atmosphere model.
   1139     if (fm_new_list('air_sea_deposition/atm') .le. 0) then
   1140       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_deposition/atm" list')
   1141     endif
   1142 
   1143     call fm_util_set_value('air_sea_deposition/atm/name',      'deposition',             index = ind_deposition)
   1144     call fm_util_set_value('air_sea_deposition/atm/long_name', 'Atmospheric deposition', index = ind_deposition)
   1145     call fm_util_set_value('air_sea_deposition/atm/units',     'kg/m^2/s',               index = ind_deposition)
   1146 
   1147 ! Add required fields that will come from the ice model.
   1148     if (fm_new_list('air_sea_deposition/ice') .le. 0) then
   1149       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_deposition/ice" list')
   1150     endif
   1151 
   1152     call fm_util_set_value('air_sea_deposition/ice/name',      ' ', index = 0)
   1153     call fm_util_set_value('air_sea_deposition/ice/long_name', ' ', index = 0)
   1154     call fm_util_set_value('air_sea_deposition/ice/units',     ' ', index = 0)
   1155 
   1156 ! Add the flux output field(s).
   1157     if (fm_new_list('air_sea_deposition/flux') .le. 0) then
   1158       call mpp_error(FATAL, trim(error_header) // ' Could not set the "air_sea_deposition/flux" list')
   1159     endif
   1160 
   1161     call fm_util_set_value('air_sea_deposition/flux/name',      'flux',               index = ind_flux)
   1162     call fm_util_set_value('air_sea_deposition/flux/long_name', 'Surface deposition', index = ind_flux)
   1163     call fm_util_set_value('air_sea_deposition/flux/units',     'mol/m^2/s',          index = ind_flux)
   1164 
   1165 ! Define the land_sea_runoff type and add it.
   1166     if (fm_new_list('land_sea_runoff') .le. 0) then
   1167       call mpp_error(FATAL, trim(error_header) // ' Could not set the "land_sea_runoff" list')
   1168     endif
   1169 
   1170 ! Add the implementation list.
   1171     if (fm_new_list('land_sea_runoff/implementation') .le. 0) then
   1172       call mpp_error(FATAL, trim(error_header) // ' Could not set the "land_sea_runoff/implementation" list')
   1173     endif
   1174 
   1175 ! Add the names of the different implementations.
   1176     if (fm_new_list('land_sea_runoff/implementation/river') .le. 0) then
   1177       call mpp_error(FATAL, trim(error_header) // ' Could not set the "land_sea_runoff/implementation/river" list')
   1178     endif
   1179     call fm_util_set_value('land_sea_runoff/implementation/river/num_parameters', 1)
   1180 
   1181 ! Add some scalar quantaties.
   1182     call fm_util_set_value('land_sea_runoff/num_flags', 0)
   1183     call fm_util_set_value('land_sea_runoff/use_atm_pressure', .false.)
   1184     call fm_util_set_value('land_sea_runoff/use_10m_wind_speed', .false.)
   1185     call fm_util_set_value('land_sea_runoff/pass_through_ice', .true.)

Page 29          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

   1186 
   1187 ! Add required fields that will come from the land model (the array name is still called "atm").
   1188     if (fm_new_list('land_sea_runoff/atm') .le. 0) then
   1189       call mpp_error(FATAL, trim(error_header) // ' Could not set the "land_sea_runoff/atm" list')
   1190     endif
   1191 
   1192     call fm_util_set_value('land_sea_runoff/atm/name',      'runoff',                       index = ind_runoff)
   1193     call fm_util_set_value('land_sea_runoff/atm/long_name', 'Concentration in land runoff', index = ind_runoff)
   1194     call fm_util_set_value('land_sea_runoff/atm/units',     'mol/m^3',                      index = ind_runoff)
   1195 
   1196 ! Add required fields that will come from the ice model.
   1197     if (fm_new_list('land_sea_runoff/ice') .le. 0) then
   1198       call mpp_error(FATAL, trim(error_header) // ' Could not set the "land_sea_runoff/ice" list')
   1199     endif
   1200 
   1201     call fm_util_set_value('land_sea_runoff/ice/name',      ' ', index = 0)
   1202     call fm_util_set_value('land_sea_runoff/ice/long_name', ' ', index = 0)
   1203     call fm_util_set_value('land_sea_runoff/ice/units',     ' ', index = 0)
   1204 
   1205 ! Add the flux output field(s).
   1206 
   1207     if (fm_new_list('land_sea_runoff/flux') .le. 0) then
   1208       call mpp_error(FATAL, trim(error_header) // ' Could not set the "land_sea_runoff/flux" list')
   1209     endif
   1210 
   1211     call fm_util_set_value('land_sea_runoff/flux/name',      'flux',                         index = ind_flux)
   1212     call fm_util_set_value('land_sea_runoff/flux/long_name', 'Concentration in land runoff', index = ind_flux)
   1213     call fm_util_set_value('land_sea_runoff/flux/units',     'mol/m^3',                      index = ind_flux)
   1214 
   1215 ! Change back to root list.
   1216     if (.not. fm_change_list('/')) then
   1217       call mpp_error(FATAL, trim(error_header) // ' Could not change to "/"')
   1218     endif
   1219 
   1220 ! Reset the defaults for the fm_util_set_value calls.
   1221     call fm_util_reset_no_overwrite
   1222     call fm_util_reset_caller
   1223 
   1224 ! Dump the coupler_mod types list.
   1225     if (verbose >= 5) then
   1226       outunit = stdout()
   1227       write (outunit,*)
   1228       write (outunit,*) 'Dumping coupler_mod/types tree'
   1229       if (.not. fm_dump_list('/coupler_mod/types', recursive = .true.)) then
   1230         call mpp_error(FATAL, trim(error_header) // ' Problem dumping /coupler_mod/types tree')
   1231       endif
   1232     endif
   1233     return
   1234   end subroutine atmos_ocean_type_fluxes_init

Page 30          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55 Entry Points                    atmos_ocean_fluxes.F90



ENTRY POINTS

  Name                                                               
                                                                     
 atmos_ocean_fluxes_mod_mp_atmos_ocean_type_fluxes_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATMOS_OCEAN_TYPE_FLUXES_IN                                                                                                         
 IT                         Subr   904                                                                                              
 CALLER_STR                 Param  910      CHAR            52          scalar                    924                               
 ERROR_HEADER               Param  912      CHAR            67          scalar                    928,932,937,942,948,954,960,966,97
                                                                                                  2,978,990,1007,1024,1045,1050,1055
                                                                                                  ,1059,1063,1075,1092,1105,1114,111
                                                                                                  9,1124,1128,1140,1149,1158,1167,11
                                                                                                  72,1177,1189,1198,1208,1217,1230  
 IND_ALPHA                  Local  1010     I(4)            4           scalar   PRIV             42,1010,1011,1012,1095,1096,1097  
 IND_CSURF                  Local  1014     I(4)            4           scalar   PRIV             42,1014,1015,1016,1099,1100,1101  
 IND_DELTAP                 Local  1031     I(4)            4           scalar   PRIV             46,1031,1032,1033                 
 IND_DEPOSITION             Local  1143     I(4)            4           scalar   PRIV             44,1143,1144,1145                 
 IND_FLUX0                  Local  1039     I(4)            4           scalar   PRIV             46,1039,1040,1041                 
 IND_KW                     Local  1035     I(4)            4           scalar   PRIV             46,1035,1036,1037                 
 IND_PCAIR                  Local  993      I(4)            4           scalar   PRIV             43,993,994,995,1078,1079,1080     
 IND_PSURF                  Local  1001     I(4)            4           scalar   PRIV             43,1001,1002,1003,1086,1087,1088  
 IND_RUNOFF                 Local  1192     I(4)            4           scalar   PRIV             45,1192,1193,1194                 
 IND_SC_NO                  Local  1018     I(4)            4           scalar   PRIV             42,1018,1019,1020                 
 IND_U10                    Local  997      I(4)            4           scalar   PRIV             43,997,998,999,1082,1083,1084     
 INITIALIZED                Local  914      L(4)            4           scalar   SAVE             914,916,921                       
 OUTUNIT                    Local  908      I(4)            4           scalar                    1226,1227,1228                    
 PRESENT                    Func   919                                  scalar                    919                               
 SUB_NAME                   Param  909      CHAR            28          scalar                    911,913                           
 TRIM                       Func   911                                  scalar                    911,913,928,932,937,942,948,954,96
                                                                                                  0,966,972,978,990,1007,1024,1045,1
                                                                                                  050,1055,1059,1063,1075,1092,1105,
                                                                                                  1114,1119,1124,1128,1140,1149,1158
                                                                                                  ,1167,1172,1177,1189,1198,1208,121
                                                                                                  7,1230                            
 VERBOSE                    Local  907      I(4)            4           scalar                    918,919,1225                      
 VERBOSITY                  Dummy  904      I(4)            4           scalar   ARG,IN           919                               

Page 31          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

   1235 end module  atmos_ocean_fluxes_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATMOS_OCEAN_FLUXES_INIT    Subr   66                                                             66                                
 ATMOS_OCEAN_FLUXES_MOD     Module 37                                                                                               
 COUPLER_TYPES_MOD          Module 41                                                             41,42,43,44,45,46                 
 EPSLN                      Param  71       R(8)            8           scalar                                                      
 FIELD_MANAGER_MOD          Module 48                                                             48,49,50,51                       
 FMS_MOD                    Module 39                                                             39                                
 FM_UTIL_MOD                Module 53                                                             53,54,55,56,57,58,59,60,61        
 MPP_MOD                    Module 38                                                             38                                

Page 32          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55 Subprograms/Common Blocks       atmos_ocean_fluxes.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AOF_SET_COUPLER_FLUX       Func   129      I(4)            4           scalar                                                      
 ATMOS_OCEAN_FLUXES_INIT    Subr   440                                                                                              
 ATMOS_OCEAN_FLUXES_MOD     Module 37                                                                                               
 ATMOS_OCEAN_TYPE_FLUXES_IN                                                                                                         
 IT                         Subr   904                                                                                              

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix

Page 33          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan

Page 34          Source Listing                  ATMOS_OCEAN_TYPE_FLUXES_INIT
2021-06-01 08:55                                 atmos_ocean_fluxes.F90

       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : atmos_ocean_fluxes.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
