Page 1           Source Listing                  HORIZ_INTERP_BILINEAR_INIT
2021-06-01 08:55                                 /tmp/ifortt6Bya0.i90

      1 # 1 "horiz_interp_bilinear.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 module horiz_interp_bilinear_mod
     21 
     22 ! <CONTACT EMAIL="Zhi.Liang@noaa.gov"> Zhi Liang </CONTACT>
     23 
     24 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/"/>
     25 
     26 ! <OVERVIEW>
     27 !   Performs spatial interpolation between grids using bilinear interpolation
     28 ! </OVERVIEW>
     29 
     30 ! <DESCRIPTION>
     31 !     This module can interpolate data from regular rectangular grid
     32 !     to rectangular/tripolar grid. The interpolation scheme is bilinear interpolation.
     33 !     There is an optional mask field for missing input data.
     34 !     An optional output mask field may be used in conjunction with
     35 !     the input mask to show where output data exists.
     36 ! </DESCRIPTION>
     37 
     38   use mpp_mod,               only: mpp_error, FATAL, stdout, mpp_pe, mpp_root_pe
     39   use fms_mod,               only: write_version_number
     40   use constants_mod,         only: PI
     41   use horiz_interp_type_mod, only: horiz_interp_type, stats
     42 
     43   implicit none
     44   private
     45 
     46 
     47   public :: horiz_interp_bilinear_new, horiz_interp_bilinear, horiz_interp_bilinear_del
     48   public :: horiz_interp_bilinear_init
     49 
     50 !--- public interface
     51   interface horiz_interp_bilinear_new
     52     module procedure horiz_interp_bilinear_new_1d
     53     module procedure horiz_interp_bilinear_new_2d
     54   end interface
     55 
     56 
     57   real, parameter :: epsln=1.e-10

Page 2           Source Listing                  HORIZ_INTERP_BILINEAR_INIT
2021-06-01 08:55                                 horiz_interp_bilinear.F90

     58   integer, parameter :: DUMMY = -999
     59 
     60 !-----------------------------------------------------------------------
     61 ! Include variable "version" to be written to log file.
     62 # 1 "../include/file_version.h" 1 
     63 ! -*-f90-*-
     64 !***********************************************************************
     65 !*                   GNU Lesser General Public License
     66 !*
     67 !* This file is part of the GFDL Flexible Modeling System (FMS).
     68 !*
     69 !* FMS is free software: you can redistribute it and/or modify it under
     70 !* the terms of the GNU Lesser General Public License as published by
     71 !* the Free Software Foundation, either version 3 of the License, or (at
     72 !* your option) any later version.
     73 !*
     74 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     75 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     76 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     77 !* for more details.
     78 !*
     79 !* You should have received a copy of the GNU Lesser General Public
     80 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     81 !***********************************************************************
     82 
     83 # 23
     84 
     85   character(len=*), parameter :: version = 'unknown'
     86 
     87 # 62 "horiz_interp_bilinear.F90" 2 
     88   logical            :: module_is_initialized = .FALSE.
     89 
     90 contains
     91 
     92 !#######################################################################
     93 !  <SUBROUTINE NAME="horiz_interp_bilinear_init">
     94 !  <OVERVIEW>
     95 !     writes version number to logfile.out
     96 !  </OVERVIEW>
     97 !  <DESCRIPTION>
     98 !     writes version number to logfile.out
     99 !  </DESCRIPTION>
    100 
    101   subroutine horiz_interp_bilinear_init
    102 
    103     if(module_is_initialized) return
    104     call write_version_number("HORIZ_INTERP_BILINEAR_MOD", version)
    105     module_is_initialized = .true.
    106 
    107   end subroutine horiz_interp_bilinear_init

Page 3           Source Listing                  HORIZ_INTERP_BILINEAR_INIT
2021-06-01 08:55 Entry Points                    horiz_interp_bilinear.F90



ENTRY POINTS

  Name                                                                
                                                                      
 horiz_interp_bilinear_mod_mp_horiz_interp_bilinear_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 HORIZ_INTERP_BILINEAR_INIT Subr   101                                                                                              
 MODULE_IS_INITIALIZED      Local  103      L(4)            4           scalar                    88,103,105                        
 VERSION                    Param  104      CHAR            7           scalar                    104                               
 WRITE_VERSION_NUMBER       Subr   104                                           PRIV             39,104                            

Page 4           Source Listing                  HORIZ_INTERP_BILINEAR_INIT
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    108 
    109 !  </SUBROUTINE>
    110 
    111 !########################################################################
    112 
    113   subroutine horiz_interp_bilinear_new_1d ( Interp, lon_in, lat_in, lon_out, lat_out, &
    114        verbose, src_modulo )
    115 
    116 !-----------------------------------------------------------------------
    117     type(horiz_interp_type), intent(inout) :: Interp
    118     real, intent(in),  dimension(:)        :: lon_in , lat_in
    119     real, intent(in),  dimension(:,:)      :: lon_out, lat_out
    120     integer, intent(in),          optional :: verbose
    121     logical, intent(in),          optional :: src_modulo
    122 
    123     logical :: src_is_modulo
    124     integer :: nlon_in, nlat_in, nlon_out, nlat_out, n, m
    125     integer :: ie, is, je, js, ln_err, lt_err, warns, unit
    126     real    :: wtw, wte, wts, wtn, lon, lat, tpi, hpi
    127     real    :: glt_min, glt_max, gln_min, gln_max, min_lon, max_lon
    128 
    129     warns = 0
    130     if(present(verbose)) warns = verbose
    131     src_is_modulo = .true.
    132     if (present(src_modulo)) src_is_modulo = src_modulo
    133 
    134     hpi = 0.5*pi
    135     tpi = 4.0*hpi
    136     glt_min = hpi
    137     glt_max = -hpi
    138     gln_min = tpi
    139     gln_max = -tpi
    140     min_lon = 0.0
    141     max_lon = tpi
    142     ln_err = 0
    143     lt_err = 0
    144 !-----------------------------------------------------------------------
    145 
    146     allocate ( Interp % wti (size(lon_out,1),size(lon_out,2),2),   &
    147                Interp % wtj (size(lon_out,1),size(lon_out,2),2),   &
    148                Interp % i_lon (size(lon_out,1),size(lon_out,2),2), &
    149                Interp % j_lat (size(lon_out,1),size(lon_out,2),2))
    150 !-----------------------------------------------------------------------
    151 
    152     nlon_in = size(lon_in(:))  ; nlat_in = size(lat_in(:))
    153     nlon_out = size(lon_out, 1); nlat_out = size(lon_out, 2)
    154     Interp%nlon_src = nlon_in;  Interp%nlat_src = nlat_in
    155     Interp%nlon_dst = nlon_out; Interp%nlat_dst = nlat_out
    156 
    157     if(src_is_modulo) then
    158        if(lon_in(nlon_in) - lon_in(1) .gt. tpi + epsln) &
    159             call mpp_error(FATAL,'horiz_interp_bilinear_mod: '// &
    160             'The range of source grid longitude should be no larger than tpi')
    161 
    162        if(lon_in(1) .lt. 0.0 .OR. lon_in(nlon_in) > tpi ) then
    163           min_lon = lon_in(1)
    164           max_lon = lon_in(nlon_in)

Page 5           Source Listing                  HORIZ_INTERP_BILINEAR_NEW_1D
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    165        endif
    166     endif
    167 
    168     do n = 1, nlat_out
    169        do m = 1, nlon_out
    170           lon = lon_out(m,n)
    171           lat = lat_out(m,n)
    172 
    173           if(src_is_modulo) then
    174              if(lon .lt. min_lon) then
    175                 lon = lon + tpi
    176              else if(lon .gt. max_lon) then
    177                 lon = lon - tpi
    178              endif
    179           else  ! when the input grid is in not cyclic, the output grid should located inside
    180 ! the input grid
    181              if((lon .lt. lon_in(1)) .or. (lon .gt. lon_in(nlon_in))) &
    182                   call mpp_error(FATAL,'horiz_interp_bilinear_mod: ' //&
    183                   'when input grid is not modulo, output grid should locate inside input grid')
    184           endif
    185 
    186           glt_min = min(lat,glt_min);  glt_max = max(lat,glt_max)
    187           gln_min = min(lon,gln_min);  gln_max = max(lon,gln_max)
    188 
    189           is = indp(lon, lon_in )
    190           if( lon_in(is) .gt. lon ) is = max(is-1,1)
    191           if( lon_in(is) .eq. lon .and. is .eq. nlon_in) is = max(is - 1,1)
    192           ie = min(is+1,nlon_in)
    193           if(lon_in(is) .ne. lon_in(ie) .and. lon_in(is) .le. lon) then
    194              wtw = ( lon_in(ie) - lon) / (lon_in(ie) - lon_in(is) )
    195           else
    196 !     east or west of the last data value. this could be because a
    197 !     cyclic condition is needed or the dataset is too small.
    198              ln_err = 1
    199              ie = 1
    200              is = nlon_in
    201              if (lon_in(ie) .ge. lon ) then
    202                 wtw = (lon_in(ie) -lon)/(lon_in(ie)-lon_in(is)+tpi+epsln)
    203              else
    204                 wtw = (lon_in(ie) -lon+tpi+epsln)/(lon_in(ie)-lon_in(is)+tpi+epsln)
    205              endif
    206           endif
    207           wte = 1. - wtw
    208 
    209           js = indp(lat, lat_in )
    210 
    211           if( lat_in(js) .gt. lat ) js = max(js - 1, 1)
    212           if( lat_in(js) .eq. lat .and. js .eq. nlat_in) js = max(js - 1, 1)
    213           je = min(js + 1, nlat_in)
    214 
    215           if ( lat_in(js) .ne. lat_in(je) .and. lat_in(js) .le. lat) then
    216              wts = ( lat_in(je) - lat )/(lat_in(je)-lat_in(js))
    217           else
    218 !     north or south of the last data value. this could be because a
    219 !     pole is not included in the data set or the dataset is too small.
    220 !     in either case extrapolate north or south
    221              lt_err = 1

Page 6           Source Listing                  HORIZ_INTERP_BILINEAR_NEW_1D
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    222              wts = 1.
    223           endif
    224 
    225           wtn = 1. - wts
    226 
    227           Interp % i_lon (m,n,1) = is; Interp % i_lon (m,n,2) = ie
    228           Interp % j_lat (m,n,1) = js; Interp % j_lat (m,n,2) = je
    229           Interp % wti   (m,n,1) = wtw
    230           Interp % wti   (m,n,2) = wte
    231           Interp % wtj   (m,n,1) = wts
    232           Interp % wtj   (m,n,2) = wtn
    233 
    234        enddo
    235     enddo
    236 
    237     unit = stdout()
    238 
    239     if (ln_err .eq. 1 .and. warns > 0) then
    240        write (unit,'(/,(1x,a))')                                      &
    241             '==> Warning: the geographic data set does not extend far   ', &
    242             '             enough east or west - a cyclic boundary       ', &
    243             '             condition was applied. check if appropriate   '
    244        write (unit,'(/,(1x,a,2f8.4))')                                &
    245             '    data required between longitudes:', gln_min, gln_max,     &
    246             '      data set is between longitudes:', lon_in(1), lon_in(nlon_in)
    247        warns = warns - 1
    248     endif
    249 
    250     if (lt_err .eq. 1 .and. warns > 0) then
    251        write (unit,'(/,(1x,a))')                                     &
    252             '==> Warning: the geographic data set does not extend far   ',&
    253             '             enough north or south - extrapolation from    ',&
    254             '             the nearest data was applied. this may create ',&
    255             '             artificial gradients near a geographic pole   '
    256        write (unit,'(/,(1x,a,2f8.4))')                             &
    257             '    data required between latitudes:', glt_min, glt_max,   &
    258             '      data set is between latitudes:', lat_in(1), lat_in(nlat_in)
    259     endif
    260 
    261     return
    262 
    263   end subroutine horiz_interp_bilinear_new_1d

Page 7           Source Listing                  HORIZ_INTERP_BILINEAR_NEW_1D
2021-06-01 08:55 Entry Points                    horiz_interp_bilinear.F90



ENTRY POINTS

  Name                                                                  
                                                                        
 horiz_interp_bilinear_mod_mp_horiz_interp_bilinear_new_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 EPSLN                      Param  158      R(8)            8           scalar                    158,202,204,366,369,444,448,473,12
                                                                                                  96                                
 FATAL                      Param  159      I(4)            4           scalar   PRIV             38,159,182,346,350,445,448,468,470
                                                                                                  ,473,488,538,614,656,732,821,903,9
                                                                                                  73,1090,1094,1097,1100,1102,1245  
 GLN_MAX                    Local  127      R(8)            8           scalar                    139,187,245                       
 GLN_MIN                    Local  127      R(8)            8           scalar                    138,187,245                       
 GLT_MAX                    Local  127      R(8)            8           scalar                    137,186,257                       
 GLT_MIN                    Local  127      R(8)            8           scalar                    136,186,257                       
 HORIZ_INTERP_BILINEAR_NEW_                                                                                                         
 1D                         Subr   113                                           PRIV                                               
 HORIZ_INTERP_TYPE          Type   117                                  scalar   PRIV             41,117,315,502,782,1042,1366      
 HPI                        Local  126      R(8)            8           scalar                    134,135,136,137                   
 IE                         Local  125      I(4)            4           scalar                    192,193,194,199,201,202,204,227   
 INDP@0                     Local  189      I(4)            4           scalar                                                      
 INTERP                     Dummy  113      HORIZ_INTERP_TYPE                                                                       
                                                            2208        scalar   ARG,INOUT        146,147,148,149,154,155,227,228,22
                                                                                                  9,230,231,232                     
 IS                         Local  125      I(4)            4           scalar                    189,190,191,192,193,194,200,202,20
                                                                                                  4,227                             
 JE                         Local  125      I(4)            4           scalar                    213,215,216,228                   
 JS                         Local  125      I(4)            4           scalar                    209,211,212,213,215,216,228       
 LAT                        Local  126      R(8)            8           scalar                    171,186,209,211,212,215,216       
 LAT_IN                     Dummy  113      R(8)            8     1     1        ARG,IN           152,209,211,212,215,216,258       
 LAT_OUT                    Dummy  113      R(8)            8     2     1        ARG,IN           171                               
 LN_ERR                     Local  125      I(4)            4           scalar                    142,198,239                       
 LON                        Local  126      R(8)            8           scalar                    170,174,175,176,177,181,187,189,19
                                                                                                  0,191,193,194,201,202,204         
 LON_IN                     Dummy  113      R(8)            8     1     1        ARG,IN           152,158,162,163,164,181,189,190,19
                                                                                                  1,193,194,201,202,204,246         
 LON_OUT                    Dummy  113      R(8)            8     2     1        ARG,IN           146,147,148,149,153,170           
 LT_ERR                     Local  125      I(4)            4           scalar                    143,221,250                       
 M                          Local  124      I(4)            4           scalar                    169,170,171,227,228,229,230,231,23
                                                                                                  2                                 
 MAX                        Func   186                                  scalar                    186,187,190,191,211,212           
 MAX_LON                    Local  127      R(8)            8           scalar                    141,164,176                       
 MIN                        Func   186                                  scalar                    186,187,192,213                   
 MIN_LON                    Local  127      R(8)            8           scalar                    140,163,174                       
 MPP_ERROR                  Local  159                                  scalar   PRIV             38,159,182,346,350,445,448,468,470
                                                                                                  ,473,488,538,614,656,732,821,903,9
                                                                                                  73,1090,1094,1097,1100,1102,1245  
 MPP_ERROR_BASIC            Subr   159                                           PRIV             159,182,346,350,445,448,468,470,47
                                                                                                  3,488,538,614,656,732,821,903,973,
                                                                                                  1090,1094,1097,1100,1102,1245     

Page 8           Source Listing                  HORIZ_INTERP_BILINEAR_NEW_1D
2021-06-01 08:55 Symbol Table                    horiz_interp_bilinear.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 N                          Local  124      I(4)            4           scalar                    168,170,171,227,228,229,230,231,23
                                                                                                  2                                 
 NLAT_IN                    Local  124      I(4)            4           scalar                    152,154,212,213,258               
 NLAT_OUT                   Local  124      I(4)            4           scalar                    153,155,168                       
 NLON_IN                    Local  124      I(4)            4           scalar                    152,154,158,162,164,181,191,192,20
                                                                                                  0,246                             
 NLON_OUT                   Local  124      I(4)            4           scalar                    153,155,169                       
 PI                         Param  134      R(8)            8           scalar   PRIV             40,134,333,514,719,723,724,725,726
                                                                                                  ,727,728,729,730,797              
 PRESENT                    Func   130                                  scalar                    130,132                           
 SIZE                       Func   146                                  scalar                    146,147,148,149,152,153           
 SRC_IS_MODULO              Local  123      L(4)            4           scalar                    131,132,157,173                   
 SRC_MODULO                 Dummy  114      L(4)            4           scalar   ARG,IN           132                               
 STDOUT                     Func   237      I(4)            4           scalar   PRIV             38,237,1323,1405                  
 TPI                        Local  126      R(8)            8           scalar                    135,138,139,141,158,162,175,177,20
                                                                                                  2,204                             
 UNIT                       Local  125      I(4)            4           scalar                    237,240,244,251,256               
 VERBOSE                    Dummy  114      I(4)            4           scalar   ARG,IN           130                               
 WARNS                      Local  125      I(4)            4           scalar                    129,130,239,247,250               
 WTE                        Local  126      R(8)            8           scalar                    207,230                           
 WTN                        Local  126      R(8)            8           scalar                    225,232                           
 WTS                        Local  126      R(8)            8           scalar                    216,222,225,231                   
 WTW                        Local  126      R(8)            8           scalar                    194,202,204,207,229               


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 HORIZ_INTERP_TYPE.I_LON    I(4)            4     816      3     1        PTR              148,227,361,419,576,590,593,707,86 
                                                                                           8,879,882,959,969,1106,1257,1370   
 HORIZ_INTERP_TYPE.J_LAT    I(4)            4     936      3     1        PTR              149,228,362,420,577,591,594,708,86 
                                                                                           9,880,883,960,970,1107,1258,1371   
 HORIZ_INTERP_TYPE.NLAT_DST I(4)            4     1388           scalar                    155,357,1064                       
 HORIZ_INTERP_TYPE.NLAT_SRC I(4)            4     1380           scalar                    154,356,1063                       
 HORIZ_INTERP_TYPE.NLON_DST I(4)            4     1384           scalar                    155,357,1064                       
 HORIZ_INTERP_TYPE.NLON_SRC I(4)            4     1376           scalar                    154,356,1063                       
 HORIZ_INTERP_TYPE.WTI      R(8)            8     576      3     1        PTR              146,229,230,359,490,1108,1109,1259 
                                                                                           ,1260,1368                         
 HORIZ_INTERP_TYPE.WTJ      R(8)            8     696      3     1        PTR              147,231,232,360,491,1110,1111,1261 
                                                                                           ,1262,1369                         

Page 9           Source Listing                  HORIZ_INTERP_BILINEAR_NEW_1D
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    264 
    265 !#######################################################################
    266 ! <SUBROUTINE NAME="horiz_interp_bilinear_new">
    267 
    268 !   <OVERVIEW>
    269 !      Initialization routine.
    270 !   </OVERVIEW>
    271 !   <DESCRIPTION>
    272 !      Allocates space and initializes a derived-type variable
    273 !      that contains pre-computed interpolation indices and weights.
    274 !   </DESCRIPTION>
    275 !   <TEMPLATE>
    276 !     call horiz_interp_bilinear_new ( Interp, lon_in, lat_in, lon_out, lat_out, verbose, src_modulo )
    277 
    278 !   </TEMPLATE>
    279 !
    280 !   <IN NAME="lon_in" TYPE="real, dimension(:,:)" UNITS="radians">
    281 !      Longitude (in radians) for source data grid.
    282 !   </IN>
    283 
    284 !   <IN NAME="lat_in" TYPE="real, dimension(:,:)" UNITS="radians">
    285 !      Latitude (in radians) for source data grid.
    286 !   </IN>
    287 
    288 !   <IN NAME="lon_out" TYPE="real, dimension(:,:)" UNITS="radians" >
    289 !      Longitude (in radians) for source data grid.
    290 !   </IN>
    291 
    292 !   <IN NAME="lat_out" TYPE="real, dimension(:,:)" UNITS="radians" >
    293 !      Latitude (in radians) for source data grid.
    294 !   </IN>
    295 
    296 !   <IN NAME="src_modulo" TYPE="logical, optional">
    297 !      logical variable to indicate if the boundary condition along zonal boundary
    298 !      is cyclic or not. When true, the zonal boundary condition is cyclic.
    299 !   </IN>
    300 
    301 !   <IN NAME="verbose" TYPE="integer, optional" >
    302 !      flag for the amount of print output.
    303 !   </IN>
    304 
    305 !   <INOUT NAME="Interp" TYPE="type(horiz_interp_type)" >
    306 !      A derived-type variable containing indices and weights used for subsequent
    307 !      interpolations. To reinitialize this variable for a different grid-to-grid
    308 !      interpolation you must first use the "horiz_interp_del" interface.
    309 !   </INOUT>
    310 
    311   subroutine horiz_interp_bilinear_new_2d ( Interp, lon_in, lat_in, lon_out, lat_out, &
    312        verbose, src_modulo, new_search, no_crash_when_not_found )
    313 
    314 !-----------------------------------------------------------------------
    315     type(horiz_interp_type), intent(inout) :: Interp
    316     real, intent(in),  dimension(:,:)      :: lon_in , lat_in
    317     real, intent(in),  dimension(:,:)      :: lon_out, lat_out
    318     integer, intent(in),          optional :: verbose
    319     logical, intent(in),          optional :: src_modulo
    320     logical, intent(in),          optional :: new_search

Page 10          Source Listing                  HORIZ_INTERP_BILINEAR_NEW_2D
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    321     logical, intent(in),          optional :: no_crash_when_not_found
    322     integer                                :: warns
    323     logical                                :: src_is_modulo
    324     integer                                :: nlon_in, nlat_in, nlon_out, nlat_out
    325     integer                                :: m, n, is, ie, js, je, num_solution
    326     real                                   :: lon, lat, quadra, x, y, y1, y2
    327     real                                   :: a1, b1, c1, d1, a2, b2, c2, d2, a, b, c
    328     real                                   :: lon1, lat1, lon2, lat2, lon3, lat3, lon4, lat4
    329     real                                   :: tpi, lon_min, lon_max
    330     real                                   :: epsln2
    331     logical                                :: use_new_search, no_crash
    332 
    333     tpi = 2.0*pi
    334 
    335     warns = 0
    336     if(present(verbose)) warns = verbose
    337     src_is_modulo = .true.
    338     if (present(src_modulo)) src_is_modulo = src_modulo
    339     use_new_search = .false.
    340     if (present(new_search)) use_new_search = new_search
    341     no_crash = .false.
    342     if(present(no_crash_when_not_found)) no_crash = no_crash_when_not_found
    343 
    344 ! make sure lon and lat has the same dimension
    345     if(size(lon_out,1) /= size(lat_out,1) .or. size(lon_out,2) /= size(lat_out,2) ) &
    346          call mpp_error(FATAL,'horiz_interp_bilinear_mod: when using bilinear ' // &
    347          'interplation, the output grids should be geographical grids')
    348 
    349     if(size(lon_in,1) /= size(lat_in,1) .or. size(lon_in,2) /= size(lat_in,2) ) &
    350          call mpp_error(FATAL,'horiz_interp_bilinear_mod: when using bilinear '// &
    351          'interplation, the input grids should be geographical grids')
    352 
    353 !--- get the grid size
    354     nlon_in  = size(lon_in,1) ; nlat_in  = size(lat_in,2)
    355     nlon_out = size(lon_out,1); nlat_out = size(lon_out,2)
    356     Interp%nlon_src = nlon_in;  Interp%nlat_src = nlat_in
    357     Interp%nlon_dst = nlon_out; Interp%nlat_dst = nlat_out
    358 
    359     allocate ( Interp % wti (size(lon_out,1),size(lon_out,2),2),   &
    360                Interp % wtj (size(lon_out,1),size(lon_out,2),2),   &
    361                Interp % i_lon (size(lon_out,1),size(lon_out,2),2), &
    362                Interp % j_lat (size(lon_out,1),size(lon_out,2),2))
    363 
    364 !--- first fine the neighbor points for the destination points.
    365     if(use_new_search) then
    366        epsln2 = epsln*1e5
    367        call find_neighbor_new(Interp, lon_in, lat_in, lon_out, lat_out, src_is_modulo, no_crash)
    368     else
    369        epsln2 = epsln
    370        call find_neighbor(Interp, lon_in, lat_in, lon_out, lat_out, src_is_modulo)
    371     endif
    372 
    373 !***************************************************************************
    374 !         Algorithm explanation (from disscussion with Steve Garner )      *
    375 !                                                                          *
    376 !    lon(x,y) = a1*x + b1*y + c1*x*y + d1         (1)                      *
    377 !    lat(x,y) = a2*x + b2*y + c2*x*y + d2         (2)                      *

Page 11          Source Listing                  HORIZ_INTERP_BILINEAR_NEW_2D
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    378 !    f (x,y) = a3*x + b3*y + c3*x*y + d3          (3)                      *
    379 !    with x and y is between 0 and 1.                                      *
    380 !    lon1 = lon(0,0) = d1,          lat1 = lat(0,0) = d2                   *
    381 !    lon2 = lon(1,0) = a1+d1,       lat2 = lat(1,0) = a2+d2                *
    382 !    lon3 = lon(1,1) = a1+b1+c1+d1, lat3 = lat(1,1) = a2+b2+c2+d2          *
    383 !    lon4 = lon(0,1) = b1+d1,       lat4 = lat(0,1) = b2+d2                *
    384 !    where (lon1,lat1),(lon2,lat2),(lon3,lat3),(lon4,lat4) represents      *
    385 !    the four corners starting from the left lower corner of grid box      *
    386 !    that encloses a destination grid ( the rotation direction is          *
    387 !    counterclockwise ). With these conditions, we get                     *
    388 !    a1 = lon2-lon1,           a2 = lat2-lat1                              *
    389 !    b1 = lon4-lon1,           b2 = lat4-lat1                              *
    390 !    c1 = lon3-lon2-lon4+lon1, c2 = lat3-lat2-lat4+lat1                    *
    391 !    d1 = lon1                 d2 = lat1                                   *
    392 !    So given any point (lon,lat), from equation (1) and (2) we can        *
    393 !    solve (x,y).                                                          *
    394 !    From equation (3)                                                     *
    395 !    f1 = f(0,0) = d3,          f2 = f(1,0) = a3+d3                        *
    396 !    f3 = f(1,1) = a3+b3+c3+d3, f4 = f(0,1) = b3+d3                        *
    397 !    we obtain                                                             *
    398 !    a3 = f2-f1,       b3 = f4-f1                                          *
    399 !    c3 = f3-f2-f4+f1, d3 = f1                                             *
    400 !    at point (lon,lat) ---> (x,y)                                         *
    401 !    f(x,y) = (f2-f1)x + (f4-f1)y + (f3-f2-f4+f1)xy + f1                   *
    402 !           = f1*(1-x)*(1-y) + f2*x*(1-y) + f3*x*y + f4*y*(1-x)            *
    403 !    wtw=1-x; wte=x; wts=1-y; xtn=y                                        *
    404 !                                                                          *
    405 !***************************************************************************
    406 
    407     lon_min = minval(lon_in);
    408     lon_max = maxval(lon_in);
    409 !--- calculate the weight
    410     do n = 1, nlat_out
    411        do m = 1, nlon_out
    412           lon = lon_out(m,n)
    413           lat = lat_out(m,n)
    414           if(lon .lt. lon_min) then
    415              lon = lon + tpi
    416           else if(lon .gt. lon_max) then
    417              lon = lon - tpi
    418           endif
    419           is = Interp%i_lon(m,n,1); ie = Interp%i_lon(m,n,2)
    420           js = Interp%j_lat(m,n,1); je = Interp%j_lat(m,n,2)
    421           if( is == DUMMY) cycle
    422           lon1 = lon_in(is,js); lat1 = lat_in(is,js);
    423           lon2 = lon_in(ie,js); lat2 = lat_in(ie,js);
    424           lon3 = lon_in(ie,je); lat3 = lat_in(ie,je);
    425           lon4 = lon_in(is,je); lat4 = lat_in(is,je);
    426           if(lon .lt. lon_min) then
    427              lon1 = lon1 -tpi; lon4 = lon4 - tpi
    428           else if(lon .gt. lon_max) then
    429              lon2 = lon2 +tpi; lon3 = lon3 + tpi
    430           endif
    431           a1 = lon2-lon1
    432           b1 = lon4-lon1
    433           c1 = lon1+lon3-lon4-lon2
    434           d1 = lon1

Page 12          Source Listing                  HORIZ_INTERP_BILINEAR_NEW_2D
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    435           a2 = lat2-lat1
    436           b2 = lat4-lat1
    437           c2 = lat1+lat3-lat4-lat2
    438           d2 = lat1
    439 !--- the coefficient of the quadratic equation
    440           a  = b2*c1-b1*c2
    441           b  = a1*b2-a2*b1+c1*d2-c2*d1+c2*lon-c1*lat
    442           c  = a2*lon-a1*lat+a1*d2-a2*d1
    443           quadra = b*b-4.*a*c
    444           if(abs(quadra) < epsln) quadra = 0.0
    445           if(quadra < 0.0) call mpp_error(FATAL, &
    446                "horiz_interp_bilinear_mod: No solution existed for this quadratic equation")
    447           if ( abs(a) .lt. epsln2) then  ! a = 0 is a linear equation
    448              if( abs(b) .lt. epsln) call mpp_error(FATAL, &
    449                   "horiz_interp_bilinear_mod: no unique solution existed for this linear equation")
    450              y = -c/b
    451           else
    452              y1 = 0.5*(-b+sqrt(quadra))/a
    453              y2 = 0.5*(-b-sqrt(quadra))/a
    454              if(abs(y1) < epsln2) y1 = 0.0
    455              if(abs(y2) < epsln2) y2 = 0.0
    456              if(abs(1.0-y1) < epsln2) y1 = 1.0
    457              if(abs(1.0-y2) < epsln2) y2 = 1.0
    458              num_solution = 0
    459              if(y1 >= 0.0 .and. y1 <= 1.0) then
    460                 y = y1
    461                 num_solution = num_solution +1
    462              endif
    463              if(y2 >= 0.0 .and. y2 <= 1.0) then
    464                 y = y2
    465                 num_solution = num_solution + 1
    466              endif
    467              if(num_solution == 0) then
    468                 call mpp_error(FATAL, "horiz_interp_bilinear_mod: No solution found")
    469              else if(num_solution == 2) then
    470                 call mpp_error(FATAL, "horiz_interp_bilinear_mod: Two solutions found")
    471              endif
    472            endif
    473            if(abs(a1+c1*y) < epsln) call mpp_error(FATAL, &
    474                "horiz_interp_bilinear_mod: the denomenator is 0")
    475            if(abs(y) < epsln2) y = 0.0
    476            if(abs(1.0-y) < epsln2) y = 1.0
    477            x = (lon-b1*y-d1)/(a1+c1*y)
    478            if(abs(x) < epsln2) x = 0.0
    479            if(abs(1.0-x) < epsln2) x = 1.0
    480 ! x and y should be between 0 and 1.
    481 !! Added for ECDA
    482            if(use_new_search) then
    483              if (x < 0.0) x = 0.0 ! snz
    484              if (y < 0.0) y = 0.0 ! snz
    485              if (x > 1.0) x = 1.0
    486              if (y > 1.0) y = 1.0
    487            endif
    488            if( x>1. .or. x<0. .or. y>1. .or. y < 0.) call mpp_error(FATAL, &
    489                 "horiz_interp_bilinear_mod: weight should be between 0 and 1")
    490            Interp % wti(m,n,1)=1.0-x; Interp % wti(m,n,2)=x
    491            Interp % wtj(m,n,1)=1.0-y; Interp % wtj(m,n,2)=y

Page 13          Source Listing                  HORIZ_INTERP_BILINEAR_NEW_2D
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    492        enddo
    493     enddo
    494 
    495   end subroutine horiz_interp_bilinear_new_2d


ENTRY POINTS

  Name                                                                  
                                                                        
 horiz_interp_bilinear_mod_mp_horiz_interp_bilinear_new_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  327      R(8)            8           scalar                    440,443,447,452,453               
 A1                         Local  327      R(8)            8           scalar                    431,441,442,473,477               
 A2                         Local  327      R(8)            8           scalar                    435,441,442                       
 ABS                        Func   444                                  scalar                    444,447,448,454,455,456,457,473,47
                                                                                                  5,476,478,479                     
 B                          Local  327      R(8)            8           scalar                    441,443,448,450,452,453           
 B1                         Local  327      R(8)            8           scalar                    432,440,441,477                   
 B2                         Local  327      R(8)            8           scalar                    436,440,441                       
 C                          Local  327      R(8)            8           scalar                    442,443,450                       
 C1                         Local  327      R(8)            8           scalar                    433,440,441,473,477               
 C2                         Local  327      R(8)            8           scalar                    437,440,441                       
 D1                         Local  327      R(8)            8           scalar                    434,441,442,477                   
 D2                         Local  327      R(8)            8           scalar                    438,441,442                       
 DUMMY                      Param  421      I(4)            4           scalar                    421,969,970                       
 EPSLN2                     Local  330      R(8)            8           scalar                    366,369,447,454,455,456,457,475,47
                                                                                                  6,478,479                         
 HORIZ_INTERP_BILINEAR_NEW_                                                                                                         
 2D                         Subr   311                                           PRIV                                               
 IE                         Local  325      I(4)            4           scalar                    419,423,424                       
 INTERP                     Dummy  311      HORIZ_INTERP_TYPE                                                                       
                                                            2208        scalar   ARG,INOUT        356,357,359,360,361,362,367,370,41
                                                                                                  9,420,490,491                     
 IS                         Local  325      I(4)            4           scalar                    419,421,422,425                   
 JE                         Local  325      I(4)            4           scalar                    420,424,425                       
 JS                         Local  325      I(4)            4           scalar                    420,422,423                       
 LAT                        Local  326      R(8)            8           scalar                    413,441,442                       
 LAT1                       Local  328      R(8)            8           scalar                    422,435,436,437,438               
 LAT2                       Local  328      R(8)            8           scalar                    423,435,437                       
 LAT3                       Local  328      R(8)            8           scalar                    424,437                           
 LAT4                       Local  328      R(8)            8           scalar                    425,436,437                       
 LAT_IN                     Dummy  311      R(8)            8     2     1        ARG,IN           349,354,367,370,422,423,424,425   
 LAT_OUT                    Dummy  311      R(8)            8     2     1        ARG,IN           345,367,370,413                   
 LON                        Local  326      R(8)            8           scalar                    412,414,415,416,417,426,428,441,44
                                                                                                  2,477                             
 LON1                       Local  328      R(8)            8           scalar                    422,427,431,432,433,434           
 LON2                       Local  328      R(8)            8           scalar                    423,429,431,433                   
 LON3                       Local  328      R(8)            8           scalar                    424,429,433                       
 LON4                       Local  328      R(8)            8           scalar                    425,427,432,433                   
 LON_IN                     Dummy  311      R(8)            8     2     1        ARG,IN           349,354,367,370,407,408,422,423,42
                                                                                                  4,425                             

Page 14          Source Listing                  HORIZ_INTERP_BILINEAR_NEW_2D
2021-06-01 08:55 Symbol Table                    horiz_interp_bilinear.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LON_MAX                    Local  329      R(8)            8           scalar                    408,416,428                       
 LON_MIN                    Local  329      R(8)            8           scalar                    407,414,426                       
 LON_OUT                    Dummy  311      R(8)            8     2     1        ARG,IN           345,355,359,360,361,362,367,370,41
                                                                                                  2                                 
 M                          Local  325      I(4)            4           scalar                    411,412,413,419,420,490,491       
 MAXVAL                     Func   408                                  scalar                    408                               
 MINVAL                     Func   407                                  scalar                    407                               
 N                          Local  325      I(4)            4           scalar                    410,412,413,419,420,490,491       
 NEW_SEARCH                 Dummy  312      L(4)            4           scalar   ARG,IN           340                               
 NLAT_IN                    Local  324      I(4)            4           scalar                    354,356                           
 NLAT_OUT                   Local  324      I(4)            4           scalar                    355,357,410                       
 NLON_IN                    Local  324      I(4)            4           scalar                    354,356                           
 NLON_OUT                   Local  324      I(4)            4           scalar                    355,357,411                       
 NO_CRASH                   Local  331      L(4)            4           scalar                    341,342,367                       
 NO_CRASH_WHEN_NOT_FOUND    Dummy  312      L(4)            4           scalar   ARG,IN           342                               
 NUM_SOLUTION               Local  325      I(4)            4           scalar                    458,461,465,467,469               
 PRESENT                    Func   336                                  scalar                    336,338,340,342                   
 QUADRA                     Local  326      R(8)            8           scalar                    443,444,445,452,453               
 SIZE                       Func   345                                  scalar                    345,349,354,355,359,360,361,362   
 SQRT                       Func   452                                  scalar                    452,453                           
 SRC_IS_MODULO              Local  323      L(4)            4           scalar                    337,338,367,370                   
 SRC_MODULO                 Dummy  312      L(4)            4           scalar   ARG,IN           338                               
 TPI                        Local  329      R(8)            8           scalar                    333,415,417,427,429               
 USE_NEW_SEARCH             Local  331      L(4)            4           scalar                    339,340,365,482                   
 VERBOSE                    Dummy  312      I(4)            4           scalar   ARG,IN           336                               
 WARNS                      Local  322      I(4)            4           scalar                    335,336                           
 X                          Local  326      R(8)            8           scalar                    477,478,479,483,485,488,490       
 Y                          Local  326      R(8)            8           scalar                    450,460,464,473,475,476,477,484,48
                                                                                                  6,488,491                         
 Y1                         Local  326      R(8)            8           scalar                    452,454,456,459,460               
 Y2                         Local  326      R(8)            8           scalar                    453,455,457,463,464               

Page 15          Source Listing                  HORIZ_INTERP_BILINEAR_NEW_2D
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    496 ! </SUBROUTINE>
    497 
    498 !#######################################################################
    499 ! this routine will search the source grid to fine the grid box that encloses
    500 ! each destination grid.
    501   subroutine find_neighbor( Interp, lon_in, lat_in, lon_out, lat_out, src_modulo )
    502     type(horiz_interp_type), intent(inout) :: Interp
    503     real, intent(in),       dimension(:,:) :: lon_in , lat_in
    504     real, intent(in),       dimension(:,:) :: lon_out, lat_out
    505     logical,                 intent(in)    :: src_modulo
    506     integer                                :: nlon_in, nlat_in, nlon_out, nlat_out
    507     integer                                :: max_step, n, m, l, i, j, ip1, jp1, step
    508     integer                                :: is, js, jstart, jend, istart, iend, npts
    509     integer, allocatable, dimension(:)     :: ilon, jlat
    510     real                                   :: lon_min, lon_max, lon, lat, tpi
    511     logical                                :: found
    512     real                                   :: lon1, lat1, lon2, lat2, lon3, lat3, lon4, lat4
    513 
    514     tpi = 2.0*pi
    515     nlon_in  = size(lon_in,1) ; nlat_in  = size(lat_in,2)
    516     nlon_out = size(lon_out,1); nlat_out = size(lon_out,2)
    517 
    518     lon_min = minval(lon_in);
    519     lon_max = maxval(lon_in);
    520 
    521     max_step = max(nlon_in,nlat_in) ! can be adjusted if needed
    522     allocate(ilon(5*max_step), jlat(5*max_step) )
    523 
    524     do n = 1, nlat_out
    525        do m = 1, nlon_out
    526           found = .false.
    527           lon = lon_out(m,n)
    528           lat = lat_out(m,n)
    529 
    530           if(src_modulo) then
    531              if(lon .lt. lon_min) then
    532                 lon = lon + tpi
    533              else if(lon .gt. lon_max) then
    534                 lon = lon - tpi
    535              endif
    536           else
    537              if(lon .lt. lon_min .or. lon .gt. lon_max ) &
    538              call mpp_error(FATAL,'horiz_interp_bilinear_mod: ' //&
    539                   'when input grid is not modulo, output grid should locate inside input grid')
    540           endif
    541 !--- search for the surrounding four points locatioon.
    542           if(m==1 .and. n==1) then
    543              J_LOOP: do j = 1, nlat_in-1
    544                 do i = 1, nlon_in
    545                    ip1 = i+1
    546                    jp1 = j+1
    547                    if(i==nlon_in) then
    548                       if(src_modulo)then
    549                          ip1 = 1
    550                       else
    551                          cycle
    552                       endif

Page 16          Source Listing                  FIND_NEIGHBOR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    553                    endif
    554                    lon1 = lon_in(i,  j);   lat1 = lat_in(i,j)
    555                    lon2 = lon_in(ip1,j);   lat2 = lat_in(ip1,j)
    556                    lon3 = lon_in(ip1,jp1); lat3 = lat_in(ip1,jp1)
    557                    lon4 = lon_in(i,  jp1); lat4 = lat_in(i,  jp1)
    558 
    559                    if(lon .lt. lon_min .or. lon .gt. lon_max) then
    560                       if(i .ne. nlon_in) then
    561                          cycle
    562                       else
    563                          if(lon .lt. lon_min) then
    564                              lon1 = lon1 -tpi; lon4 = lon4 - tpi
    565                          else if(lon .gt. lon_max) then
    566                              lon2 = lon2 +tpi; lon3 = lon3 + tpi
    567                          endif
    568                       endif
    569                    endif
    570 
    571                    if(lat .ge. intersect(lon1,lat1,lon2,lat2,lon))then ! south
    572                       if(lon .le. intersect(lat2,lon2,lat3,lon3,lat))then ! east
    573                          if(lat .le. intersect(lon3,lat3,lon4,lat4,lon))then ! north
    574                             if(lon .ge. intersect(lat4,lon4,lat1,lon1,lat))then  ! west
    575                                found = .true.
    576                                Interp % i_lon (m,n,1) = i; Interp % i_lon (m,n,2) = ip1
    577                                Interp % j_lat (m,n,1) = j; Interp % j_lat (m,n,2) = jp1
    578                                exit J_LOOP
    579                             endif
    580                          endif
    581                       endif
    582                    endif
    583                 enddo
    584              enddo J_LOOP
    585           else
    586              step = 0
    587              do while ( .not. found .and. step .lt. max_step )
    588 !--- take the adajcent point as the starting point
    589                 if(m == 1) then
    590                    is = Interp % i_lon (m,n-1,1)
    591                    js = Interp % j_lat (m,n-1,1)
    592                 else
    593                    is = Interp % i_lon (m-1,n,1)
    594                    js = Interp % j_lat (m-1,n,1)
    595                 endif
    596                 if(step==0) then
    597                    npts = 1
    598                    ilon(1) = is
    599                    jlat(1) = js
    600                 else
    601                    npts = 0
    602 !--- bottom boundary
    603                    jstart = max(js-step,1)
    604                    jend   = min(js+step,nlat_in)
    605 
    606                    do l = -step, step
    607                       i = is+l
    608                       if(src_modulo)then
    609                          if( i < 1) then

Page 17          Source Listing                  FIND_NEIGHBOR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    610                             i = i + nlon_in
    611                          else if (i > nlon_in) then
    612                             i = i - nlon_in
    613                          endif
    614                          if( i < 1 .or. i > nlon_in) call mpp_error(FATAL, &
    615                               'horiz_interp_bilinear_mod: max_step is too big, decrease max_step' )
    616                       else
    617                          if( i < 1 .or. i > nlon_in) cycle
    618                       endif
    619 
    620                       npts       = npts + 1
    621                       ilon(npts) = i
    622                       jlat(npts) = jstart
    623                    enddo
    624 
    625 !--- right and left boundary -----------------------------------------------
    626                    istart = is - step
    627                    iend   = is + step
    628                    if(src_modulo) then
    629                       if( istart < 1)       istart = istart + nlon_in
    630                       if( iend   > nlon_in) iend   = iend   - nlon_in
    631                    else
    632                       istart = max(istart,1)
    633                       iend   = min(iend, nlon_in)
    634                    endif
    635                    do l = -step, step
    636                       j = js+l
    637                          if( j < 1 .or. j > nlat_in .or. j==jstart .or. j==jend) cycle
    638                          npts = npts+1
    639                          ilon(npts) = istart
    640                          jlat(npts) = j
    641                          npts = npts+1
    642                          ilon(npts) = iend
    643                          jlat(npts) = j
    644                   end do
    645 
    646 !--- top boundary
    647 
    648                    do l = -step, step
    649                       i = is+l
    650                       if(src_modulo)then
    651                          if( i < 1) then
    652                             i = i + nlon_in
    653                          else if (i > nlon_in) then
    654                             i = i - nlon_in
    655                          endif
    656                          if( i < 1 .or. i > nlon_in) call mpp_error(FATAL, &
    657                               'horiz_interp_bilinear_mod: max_step is too big, decrease max_step' )
    658                       else
    659                          if( i < 1 .or. i > nlon_in) cycle
    660                       endif
    661 
    662                       npts       = npts + 1
    663                       ilon(npts) = i
    664                       jlat(npts) = jend
    665                    enddo
    666 

Page 18          Source Listing                  FIND_NEIGHBOR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    667 
    668                 end if
    669 
    670 !--- find the surrouding points
    671                 do l = 1, npts
    672                    i = ilon(l)
    673                    j = jlat(l)
    674                    ip1 = i+1
    675                    if(ip1>nlon_in) then
    676                       if(src_modulo) then
    677                          ip1 = 1
    678                       else
    679                          cycle
    680                       endif
    681                    endif
    682                    jp1 = j+1
    683                    if(jp1>nlat_in) cycle
    684                    lon1 = lon_in(i,  j);   lat1 = lat_in(i,j)
    685                    lon2 = lon_in(ip1,j);   lat2 = lat_in(ip1,j)
    686                    lon3 = lon_in(ip1,jp1); lat3 = lat_in(ip1,jp1)
    687                    lon4 = lon_in(i,  jp1); lat4 = lat_in(i,  jp1)
    688 
    689                    if(lon .lt. lon_min .or. lon .gt. lon_max) then
    690                       if(i .ne. nlon_in) then
    691                          cycle
    692                       else
    693                          if(lon .lt. lon_min) then
    694                              lon1 = lon1 -tpi; lon4 = lon4 - tpi
    695                          else if(lon .gt. lon_max) then
    696                              lon2 = lon2 +tpi; lon3 = lon3 + tpi
    697                          endif
    698                       endif
    699                    endif
    700 
    701                    if(lat .ge. intersect(lon1,lat1,lon2,lat2,lon))then ! south
    702                       if(lon .le. intersect(lat2,lon2,lat3,lon3,lat))then ! east
    703                          if(lat .le. intersect(lon3,lat3,lon4,lat4,lon))then !north
    704                             if(lon .ge. intersect(lat4,lon4,lat1,lon1,lat))then ! west
    705                                found = .true.
    706                                is=i; js=j
    707                                Interp % i_lon (m,n,1) = i; Interp % i_lon (m,n,2) = ip1
    708                                Interp % j_lat (m,n,1) = j; Interp % j_lat (m,n,2) = jp1
    709                                exit
    710                             endif
    711                          endif
    712                       endif
    713                    endif
    714                 enddo
    715                 step = step + 1
    716              enddo
    717           endif
    718           if(.not.found) then
    719               print *,'lon,lat=',lon*180./PI,lat*180./PI
    720               print *,'npts=',npts
    721               print *,'is,ie= ',istart,iend
    722               print *,'js,je= ',jstart,jend
    723               print *,'lon_in(is,js)=',lon_in(istart,jstart)*180./PI

Page 19          Source Listing                  FIND_NEIGHBOR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    724               print *,'lon_in(ie,js)=',lon_in(iend,jstart)*180./PI
    725               print *,'lat_in(is,js)=',lat_in(istart,jstart)*180./PI
    726               print *,'lat_in(ie,js)=',lat_in(iend,jstart)*180./PI
    727               print *,'lon_in(is,je)=',lon_in(istart,jend)*180./PI
    728               print *,'lon_in(ie,je)=',lon_in(iend,jend)*180./PI
    729               print *,'lat_in(is,je)=',lat_in(istart,jend)*180./PI
    730               print *,'lat_in(ie,je)=',lat_in(iend,jend)*180./PI
    731 
    732              call mpp_error(FATAL, &
    733                   'find_neighbor: the destination point is not inside the source grid' )
    734           endif
    735        enddo
    736     enddo
    737 
    738   end subroutine find_neighbor


ENTRY POINTS

  Name                                                   
                                                         
 horiz_interp_bilinear_mod_mp_find_neighbor_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIND_NEIGHBOR              Subr   501                                                            370                               
 FOUND                      Local  511      L(4)            4           scalar                    526,575,587,705,718               
 I                          Local  507      I(4)            4           scalar                    544,545,547,554,557,560,576,607,60
                                                                                                  9,610,611,612,614,617,621,649,651,
                                                                                                  652,653,654,656,659,663,672,674,68
                                                                                                  4,687,690,706,707                 
 IEND                       Local  508      I(4)            4           scalar                    627,630,633,642,721,724,726,728,73
                                                                                                  0                                 
 ILON                       Local  509      I(4)            4     1     1        ALC              522,598,621,639,642,663,672       
 INTERP                     Dummy  501      HORIZ_INTERP_TYPE                                                                       
                                                            2208        scalar   ARG,INOUT        576,577,590,591,593,594,707,708   
 INTERSECT@0                Local  571      R(8)            8           scalar                                                      
 IP1                        Local  507      I(4)            4           scalar                    545,549,555,556,576,674,675,677,68
                                                                                                  5,686,707                         
 IS                         Local  508      I(4)            4           scalar                    590,593,598,607,626,627,649,706   
 ISTART                     Local  508      I(4)            4           scalar                    626,629,632,639,721,723,725,727,72
                                                                                                  9                                 
 J                          Local  507      I(4)            4           scalar                    543,546,554,555,577,636,637,640,64
                                                                                                  3,673,682,684,685,706,708         
 JEND                       Local  508      I(4)            4           scalar                    604,637,664,722,727,728,729,730   
 JLAT                       Local  509      I(4)            4     1     1        ALC              522,599,622,640,643,664,673       
 JP1                        Local  507      I(4)            4           scalar                    546,556,557,577,682,683,686,687,70
                                                                                                  8                                 
 JS                         Local  508      I(4)            4           scalar                    591,594,599,603,604,636,706       
 JSTART                     Local  508      I(4)            4           scalar                    603,622,637,722,723,724,725,726   
 J_LOOP                     Label  543                                  scalar                    578,584                           
 L                          Local  507      I(4)            4           scalar                    606,607,635,636,648,649,671,672,67
                                                                                                  3                                 
 LAT                        Local  510      R(8)            8           scalar                    528,571,572,573,574,701,702,703,70

Page 20          Source Listing                  FIND_NEIGHBOR
2021-06-01 08:55 Symbol Table                    horiz_interp_bilinear.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  4,719                             
 LAT1                       Local  512      R(8)            8           scalar                    554,571,574,684,701,704           
 LAT2                       Local  512      R(8)            8           scalar                    555,571,572,685,701,702           
 LAT3                       Local  512      R(8)            8           scalar                    556,572,573,686,702,703           
 LAT4                       Local  512      R(8)            8           scalar                    557,573,574,687,703,704           
 LAT_IN                     Dummy  501      R(8)            8     2     1        ARG,IN           515,554,555,556,557,684,685,686,68
                                                                                                  7,725,726,729,730                 
 LAT_OUT                    Dummy  501      R(8)            8     2     1        ARG,IN           528                               
 LON                        Local  510      R(8)            8           scalar                    527,531,532,533,534,537,559,563,56
                                                                                                  5,571,572,573,574,689,693,695,701,
                                                                                                  702,703,704,719                   
 LON1                       Local  512      R(8)            8           scalar                    554,564,571,574,684,694,701,704   
 LON2                       Local  512      R(8)            8           scalar                    555,566,571,572,685,696,701,702   
 LON3                       Local  512      R(8)            8           scalar                    556,566,572,573,686,696,702,703   
 LON4                       Local  512      R(8)            8           scalar                    557,564,573,574,687,694,703,704   
 LON_IN                     Dummy  501      R(8)            8     2     1        ARG,IN           515,518,519,554,555,556,557,684,68
                                                                                                  5,686,687,723,724,727,728         
 LON_MAX                    Local  510      R(8)            8           scalar                    519,533,537,559,565,689,695       
 LON_MIN                    Local  510      R(8)            8           scalar                    518,531,537,559,563,689,693       
 LON_OUT                    Dummy  501      R(8)            8     2     1        ARG,IN           516,527                           
 M                          Local  507      I(4)            4           scalar                    525,527,528,542,576,577,589,590,59
                                                                                                  1,593,594,707,708                 
 MAX                        Func   521                                  scalar                    521,603,632                       
 MAXVAL                     Func   519                                  scalar                    519                               
 MAX_STEP                   Local  507      I(4)            4           scalar                    521,522,587                       
 MIN                        Func   604                                  scalar                    604,633                           
 MINVAL                     Func   518                                  scalar                    518                               
 N                          Local  507      I(4)            4           scalar                    524,527,528,542,576,577,590,591,59
                                                                                                  3,594,707,708                     
 NLAT_IN                    Local  506      I(4)            4           scalar                    515,521,543,604,637,683           
 NLAT_OUT                   Local  506      I(4)            4           scalar                    516,524                           
 NLON_IN                    Local  506      I(4)            4           scalar                    515,521,544,547,560,610,611,612,61
                                                                                                  4,617,629,630,633,652,653,654,656,
                                                                                                  659,675,690                       
 NLON_OUT                   Local  506      I(4)            4           scalar                    516,525                           
 NPTS                       Local  508      I(4)            4           scalar                    597,601,620,621,622,638,639,640,64
                                                                                                  1,642,643,662,663,664,671,720     
 SIZE                       Func   515                                  scalar                    515,516                           
 SRC_MODULO                 Dummy  501      L(4)            4           scalar   ARG,IN           530,548,608,628,650,676           
 STEP                       Local  507      I(4)            4           scalar                    586,587,596,603,604,606,626,627,63
                                                                                                  5,648,715                         
 TPI                        Local  510      R(8)            8           scalar                    514,532,534,564,566,694,696       

Page 21          Source Listing                  FIND_NEIGHBOR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    739 
    740 !#######################################################################
    741 !
    742 ! The function will return true if the point x,y is inside a polygon, or
    743 ! NO if it is not.  If the point is exactly on the edge of a polygon,
    744 ! the function will return .true.
    745 !
    746 ! real polyx(:) : longitude coordinates of corners
    747 ! real polyx(:) : latitude  coordinates of corners
    748 ! real x,y      : point to be tested
    749 ! ??? How to deal with truncation error.
    750 !
    751   function inside_polygon(polyx, polyy, x, y)
    752      real, dimension(:), intent(in) :: polyx, polyy
    753      real,               intent(in) :: x, y
    754      logical                        :: inside_polygon
    755      integer                        :: i, j, nedges
    756      real                           :: xx
    757 
    758      inside_polygon = .false.
    759      nedges = size(polyx(:))
    760      j = nedges
    761      do i = 1, nedges
    762         if( (polyy(i) < y .AND. polyy(j) >= y) .OR. (polyy(j) < y .AND. polyy(i) >= y) ) then
    763            xx = polyx(i)+(y-polyy(i))/(polyy(j)-polyy(i))*(polyx(j)-polyx(i))
    764            if( xx == x ) then
    765              inside_polygon = .true.
    766              return
    767            else if( xx < x ) then
    768              inside_polygon = .not. inside_polygon
    769            endif
    770         endif
    771         j = i
    772      enddo
    773 
    774      return
    775 
    776   end function inside_polygon

Page 22          Source Listing                  INSIDE_POLYGON
2021-06-01 08:55 Entry Points                    horiz_interp_bilinear.F90



ENTRY POINTS

  Name                                                    
                                                          
 horiz_interp_bilinear_mod_mp_inside_polygon_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 I                          Local  755      I(4)            4           scalar                    761,762,763,771                   
 INSIDE_POLYGON             Func   751      L(4)            4           scalar                    758,765,768,865,957               
 J                          Local  755      I(4)            4           scalar                    760,762,763,771                   
 NEDGES                     Local  755      I(4)            4           scalar                    759,760,761                       
 POLYX                      Dummy  751      R(8)            8     1     1        ARG,IN           759,763                           
 POLYY                      Dummy  751      R(8)            8     1     1        ARG,IN           762,763                           
 SIZE                       Func   759                                  scalar                    759                               
 X                          Dummy  751      R(8)            8           scalar   ARG,IN           764,767                           
 XX                         Local  756      R(8)            8           scalar                    763,764,767                       
 Y                          Dummy  751      R(8)            8           scalar   ARG,IN           762,763                           

Page 23          Source Listing                  INSIDE_POLYGON
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    777 
    778 !#######################################################################
    779 ! this routine will search the source grid to fine the grid box that encloses
    780 ! each destination grid.
    781   subroutine find_neighbor_new( Interp, lon_in, lat_in, lon_out, lat_out, src_modulo, no_crash )
    782     type(horiz_interp_type), intent(inout) :: Interp
    783     real, intent(in),       dimension(:,:) :: lon_in , lat_in
    784     real, intent(in),       dimension(:,:) :: lon_out, lat_out
    785     logical,                 intent(in)    :: src_modulo, no_crash
    786     integer                                :: nlon_in, nlat_in, nlon_out, nlat_out
    787     integer                                :: max_step, n, m, l, i, j, ip1, jp1, step
    788     integer                                :: is, js, jstart, jend, istart, iend, npts
    789     integer, allocatable, dimension(:)     :: ilon, jlat
    790     real                                   :: lon_min, lon_max, lon, lat, tpi
    791     logical                                :: found
    792     real                                   :: polyx(4), polyy(4)
    793     real                                   :: min_lon, min_lat, max_lon, max_lat
    794 
    795     integer, parameter :: step_div=8
    796 
    797     tpi = 2.0*pi
    798     nlon_in  = size(lon_in,1) ; nlat_in  = size(lat_in,2)
    799     nlon_out = size(lon_out,1); nlat_out = size(lon_out,2)
    800 
    801     lon_min = minval(lon_in);
    802     lon_max = maxval(lon_in);
    803 
    804     max_step = min(nlon_in,nlat_in)/step_div ! can be adjusted if needed
    805     allocate(ilon(step_div*max_step), jlat(step_div*max_step) )
    806 
    807     do n = 1, nlat_out
    808        do m = 1, nlon_out
    809           found = .false.
    810           lon = lon_out(m,n)
    811           lat = lat_out(m,n)
    812 
    813           if(src_modulo) then
    814              if(lon .lt. lon_min) then
    815                 lon = lon + tpi
    816              else if(lon .gt. lon_max) then
    817                 lon = lon - tpi
    818              endif
    819           else
    820              if(lon .lt. lon_min .or. lon .gt. lon_max ) &
    821              call mpp_error(FATAL,'horiz_interp_bilinear_mod: ' //&
    822                   'when input grid is not modulo, output grid should locate inside input grid')
    823           endif
    824 !--- search for the surrounding four points locatioon.
    825           if(m==1 .and. n==1) then
    826              J_LOOP: do j = 1, nlat_in-1
    827                 do i = 1, nlon_in
    828                    ip1 = i+1
    829                    jp1 = j+1
    830                    if(i==nlon_in) then
    831                       if(src_modulo)then
    832                          ip1 = 1
    833                       else

Page 24          Source Listing                  FIND_NEIGHBOR_NEW
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    834                          cycle
    835                       endif
    836                    endif
    837 
    838                    polyx(1) = lon_in(i,  j);   polyy(1) = lat_in(i,j)
    839                    polyx(2) = lon_in(ip1,j);   polyy(2) = lat_in(ip1,j)
    840                    polyx(3) = lon_in(ip1,jp1); polyy(3) = lat_in(ip1,jp1)
    841                    polyx(4) = lon_in(i,  jp1); polyy(4) = lat_in(i,  jp1)
    842                    if(lon .lt. lon_min .or. lon .gt. lon_max) then
    843                       if(i .ne. nlon_in) then
    844                          cycle
    845                       else
    846                          if(lon .lt. lon_min) then
    847                              polyx(1) = polyx(1) -tpi; polyx(4) = polyx(4) - tpi
    848                          else if(lon .gt. lon_max) then
    849                              polyx(2) = polyx(2) +tpi; polyx(3) = polyx(3) + tpi
    850                          endif
    851                       endif
    852                    endif
    853 
    854                    min_lon = minval(polyx)
    855                    max_lon = maxval(polyx)
    856                    min_lat = minval(polyy)
    857                    max_lat = maxval(polyy)
    858 !                   if( lon .GE. min_lon .AND. lon .LE. max_lon .AND. &
    859 !                       lat .GE. min_lat .AND. lat .LE. max_lat ) then
    860 !                      print*, 'i =', i, 'j = ', j
    861 !                      print '(5f15.11)', lon, polyx
    862 !                      print '(5f15.11)', lat, polyy
    863 !                   endif
    864 
    865                    if(inside_polygon(polyx, polyy, lon, lat)) then
    866                       found = .true.
    867 !                      print*, " found ", i, j
    868                       Interp % i_lon (m,n,1) = i; Interp % i_lon (m,n,2) = ip1
    869                       Interp % j_lat (m,n,1) = j; Interp % j_lat (m,n,2) = jp1
    870                       exit J_LOOP
    871                    endif
    872                 enddo
    873              enddo J_LOOP
    874           else
    875              step = 0
    876              do while ( .not. found .and. step .lt. max_step )
    877 !--- take the adajcent point as the starting point
    878                 if(m == 1) then
    879                    is = Interp % i_lon (m,n-1,1)
    880                    js = Interp % j_lat (m,n-1,1)
    881                 else
    882                    is = Interp % i_lon (m-1,n,1)
    883                    js = Interp % j_lat (m-1,n,1)
    884                 endif
    885                 if(step==0) then
    886                    npts = 1
    887                    ilon(1) = is
    888                    jlat(1) = js
    889                 else
    890                    npts = 0

Page 25          Source Listing                  FIND_NEIGHBOR_NEW
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    891 !--- bottom and top boundary
    892                    jstart = max(js-step,1)
    893                    jend   = min(js+step,nlat_in)
    894 
    895                    do l = -step, step
    896                       i = is+l
    897                       if(src_modulo)then
    898                          if( i < 1) then
    899                             i = i + nlon_in
    900                          else if (i > nlon_in) then
    901                             i = i - nlon_in
    902                          endif
    903                          if( i < 1 .or. i > nlon_in) call mpp_error(FATAL, &
    904                               'horiz_interp_bilinear_mod: max_step is too big, decrease max_step' )
    905                       else
    906                          if( i < 1 .or. i > nlon_in) cycle
    907                       endif
    908 
    909                       npts       = npts + 1
    910                       ilon(npts) = i
    911                       jlat(npts) = jstart
    912                       npts       = npts + 1
    913                       ilon(npts) = i
    914                       jlat(npts) = jend
    915                    enddo
    916 
    917 !--- right and left boundary -----------------------------------------------
    918                    istart = is - step
    919                    iend   = is + step
    920                    if(src_modulo) then
    921                       if( istart < 1)       istart = istart + nlon_in
    922                       if( iend   > nlon_in) iend   = iend   - nlon_in
    923                    else
    924                       istart = max(istart,1)
    925                       iend   = min(iend, nlon_in)
    926                    endif
    927                    do l = -step, step
    928                       j = js+l
    929                          if( j < 1 .or. j > nlat_in) cycle
    930                          npts = npts+1
    931                          ilon(npts) = istart
    932                          jlat(npts) = j
    933                          npts = npts+1
    934                          ilon(npts) = iend
    935                          jlat(npts) = j
    936                   end do
    937                 end if
    938 
    939 !--- find the surrouding points
    940                 do l = 1, npts
    941                    i = ilon(l)
    942                    j = jlat(l)
    943                    ip1 = i+1
    944                    if(ip1>nlon_in) then
    945                       if(src_modulo) then
    946                          ip1 = 1
    947                       else

Page 26          Source Listing                  FIND_NEIGHBOR_NEW
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    948                          cycle
    949                       endif
    950                    endif
    951                    jp1 = j+1
    952                    if(jp1>nlat_in) cycle
    953                    polyx(1) = lon_in(i,  j);   polyy(1) = lat_in(i,j)
    954                    polyx(2) = lon_in(ip1,j);   polyy(2) = lat_in(ip1,j)
    955                    polyx(3) = lon_in(ip1,jp1); polyy(3) = lat_in(ip1,jp1)
    956                    polyx(4) = lon_in(i,  jp1); polyy(4) = lat_in(i,  jp1)
    957                    if(inside_polygon(polyx, polyy, lon, lat)) then
    958                       found = .true.
    959                       Interp % i_lon (m,n,1) = i; Interp % i_lon (m,n,2) = ip1
    960                       Interp % j_lat (m,n,1) = j; Interp % j_lat (m,n,2) = jp1
    961                       exit
    962                    endif
    963                 enddo
    964                 step = step + 1
    965              enddo
    966           endif
    967           if(.not.found) then
    968              if(no_crash) then
    969                 Interp % i_lon (m,n,1:2) = DUMMY
    970                 Interp % j_lat (m,n,1:2) = DUMMY
    971                 print*,'lon,lat=',lon,lat ! snz
    972              else
    973                 call mpp_error(FATAL, &
    974                     'horiz_interp_bilinear_mod: the destination point is not inside the source grid' )
    975              endif
    976           endif
    977        enddo
    978     enddo
    979 
    980   end subroutine find_neighbor_new

Page 27          Source Listing                  FIND_NEIGHBOR_NEW
2021-06-01 08:55 Entry Points                    horiz_interp_bilinear.F90



ENTRY POINTS

  Name                                                       
                                                             
 horiz_interp_bilinear_mod_mp_find_neighbor_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIND_NEIGHBOR_NEW          Subr   781                                                            367                               
 FOUND                      Local  791      L(4)            4           scalar                    809,866,876,958,967               
 I                          Local  787      I(4)            4           scalar                    827,828,830,838,841,843,868,896,89
                                                                                                  8,899,900,901,903,906,910,913,941,
                                                                                                  943,953,956,959                   
 IEND                       Local  788      I(4)            4           scalar                    919,922,925,934                   
 ILON                       Local  789      I(4)            4     1     1        ALC              805,887,910,913,931,934,941       
 INTERP                     Dummy  781      HORIZ_INTERP_TYPE                                                                       
                                                            2208        scalar   ARG,INOUT        868,869,879,880,882,883,959,960,96
                                                                                                  9,970                             
 IP1                        Local  787      I(4)            4           scalar                    828,832,839,840,868,943,944,946,95
                                                                                                  4,955,959                         
 IS                         Local  788      I(4)            4           scalar                    879,882,887,896,918,919           
 ISTART                     Local  788      I(4)            4           scalar                    918,921,924,931                   
 J                          Local  787      I(4)            4           scalar                    826,829,838,839,869,928,929,932,93
                                                                                                  5,942,951,953,954,960             
 JEND                       Local  788      I(4)            4           scalar                    893,914                           
 JLAT                       Local  789      I(4)            4     1     1        ALC              805,888,911,914,932,935,942       
 JP1                        Local  787      I(4)            4           scalar                    829,840,841,869,951,952,955,956,96
                                                                                                  0                                 
 JS                         Local  788      I(4)            4           scalar                    880,883,888,892,893,928           
 JSTART                     Local  788      I(4)            4           scalar                    892,911                           
 J_LOOP                     Label  826                                  scalar                    870,873                           
 L                          Local  787      I(4)            4           scalar                    895,896,927,928,940,941,942       
 LAT                        Local  790      R(8)            8           scalar                    811,865,957,971                   
 LAT_IN                     Dummy  781      R(8)            8     2     1        ARG,IN           798,838,839,840,841,953,954,955,95
                                                                                                  6                                 
 LAT_OUT                    Dummy  781      R(8)            8     2     1        ARG,IN           811                               
 LON                        Local  790      R(8)            8           scalar                    810,814,815,816,817,820,842,846,84
                                                                                                  8,865,957,971                     
 LON_IN                     Dummy  781      R(8)            8     2     1        ARG,IN           798,801,802,838,839,840,841,953,95
                                                                                                  4,955,956                         
 LON_MAX                    Local  790      R(8)            8           scalar                    802,816,820,842,848               
 LON_MIN                    Local  790      R(8)            8           scalar                    801,814,820,842,846               
 LON_OUT                    Dummy  781      R(8)            8     2     1        ARG,IN           799,810                           
 M                          Local  787      I(4)            4           scalar                    808,810,811,825,868,869,878,879,88
                                                                                                  0,882,883,959,960,969,970         
 MAX                        Func   892                                  scalar                    892,924                           
 MAXVAL                     Func   802                                  scalar                    802,855,857                       
 MAX_LAT                    Local  793      R(8)            8           scalar                    857                               
 MAX_LON                    Local  793      R(8)            8           scalar                    855                               
 MAX_STEP                   Local  787      I(4)            4           scalar                    804,805,876                       
 MIN                        Func   804                                  scalar                    804,893,925                       
 MINVAL                     Func   801                                  scalar                    801,854,856                       

Page 28          Source Listing                  FIND_NEIGHBOR_NEW
2021-06-01 08:55 Symbol Table                    horiz_interp_bilinear.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MIN_LAT                    Local  793      R(8)            8           scalar                    856                               
 MIN_LON                    Local  793      R(8)            8           scalar                    854                               
 N                          Local  787      I(4)            4           scalar                    807,810,811,825,868,869,879,880,88
                                                                                                  2,883,959,960,969,970             
 NLAT_IN                    Local  786      I(4)            4           scalar                    798,804,826,893,929,952           
 NLAT_OUT                   Local  786      I(4)            4           scalar                    799,807                           
 NLON_IN                    Local  786      I(4)            4           scalar                    798,804,827,830,843,899,900,901,90
                                                                                                  3,906,921,922,925,944             
 NLON_OUT                   Local  786      I(4)            4           scalar                    799,808                           
 NO_CRASH                   Dummy  781      L(4)            4           scalar   ARG,IN           968                               
 NPTS                       Local  788      I(4)            4           scalar                    886,890,909,910,911,912,913,914,93
                                                                                                  0,931,932,933,934,935,940         
 POLYX                      Local  792      R(8)            8     1     4        TGT              838,839,840,841,847,849,854,855,86
                                                                                                  5,953,954,955,956,957             
 POLYY                      Local  792      R(8)            8     1     4        TGT              838,839,840,841,856,857,865,953,95
                                                                                                  4,955,956,957                     
 SIZE                       Func   798                                  scalar                    798,799                           
 SRC_MODULO                 Dummy  781      L(4)            4           scalar   ARG,IN           813,831,897,920,945               
 STEP                       Local  787      I(4)            4           scalar                    875,876,885,892,893,895,918,919,92
                                                                                                  7,964                             
 STEP_DIV                   Param  795      I(4)            4           scalar                    804,805                           
 TPI                        Local  790      R(8)            8           scalar                    797,815,817,847,849               

Page 29          Source Listing                  FIND_NEIGHBOR_NEW
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    981 
    982 !#######################################################################
    983   function intersect(x1, y1, x2, y2, x)
    984      real, intent(in) :: x1, y1, x2, y2, x
    985      real             :: intersect
    986 
    987      intersect = (y2-y1)*(x-x1)/(x2-x1) + y1
    988 
    989   return
    990 
    991   end function intersect


ENTRY POINTS

  Name                                               
                                                     
 horiz_interp_bilinear_mod_mp_intersect_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INTERSECT                  Func   983      R(8)            8           scalar                    571,572,573,574,701,702,703,704,98
                                                                                                  7                                 
 X                          Dummy  983      R(8)            8           scalar   ARG,IN           987                               
 X1                         Dummy  983      R(8)            8           scalar   ARG,IN           987                               
 X2                         Dummy  983      R(8)            8           scalar   ARG,IN           987                               
 Y1                         Dummy  983      R(8)            8           scalar   ARG,IN           987                               
 Y2                         Dummy  983      R(8)            8           scalar   ARG,IN           987                               

Page 30          Source Listing                  INTERSECT
2021-06-01 08:55                                 horiz_interp_bilinear.F90

    992 
    993 !#######################################################################
    994 ! <SUBROUTINE NAME="horiz_interp_bilinear">
    995 
    996 !   <OVERVIEW>
    997 !      Subroutine for performing the horizontal interpolation between two grids.
    998 !   </OVERVIEW>
    999 !   <DESCRIPTION>
   1000 !     Subroutine for performing the horizontal interpolation between two grids.
   1001 !     horiz_interp_bilinear_new must be called before calling this routine.
   1002 !   </DESCRIPTION>
   1003 !   <TEMPLATE>
   1004 !     call horiz_interp_bilinear ( Interp, data_in, data_out, verbose, mask_in,mask_out, missing_value, missing_permit)
   1005 !   </TEMPLATE>
   1006 !
   1007 !   <IN NAME="Interp" TYPE="type(horiz_interp_type)">
   1008 !     Derived-type variable containing interpolation indices and weights.
   1009 !     Returned by a previous call to horiz_interp_bilinear_new.
   1010 !   </IN>
   1011 !   <IN NAME="data_in" TYPE="real, dimension(:,:)">
   1012 !      Input data on source grid.
   1013 !   </IN>
   1014 !   <IN NAME="verbose" TYPE="integer, optional">
   1015 !      flag for the amount of print output.
   1016 !               verbose = 0, no output; = 1, min,max,means; = 2, still more
   1017 !   </IN>
   1018 !   <IN NAME="mask_in" TYPE="real, dimension(:,:),optional">
   1019 !      Input mask, must be the same size as the input data. The real value of
   1020 !      mask_in must be in the range (0.,1.). Set mask_in=0.0 for data points
   1021 !      that should not be used or have missing data.
   1022 !   </IN>
   1023 !   <IN NAME="missing_value" TYPE="real, optional">
   1024 !      Use the missing_value to indicate missing data.
   1025 !   </IN>
   1026 
   1027 !   <IN NAME="missing_permit" TUPE="integer, optional">
   1028 !      numbers of points allowed to miss for the bilinear interpolation. The value
   1029 !      should be between 0 and 3.
   1030 !   </IN>
   1031 
   1032 !   <OUT NAME="data_out" TYPE="real, dimension(:,:)">
   1033 !      Output data on destination grid.
   1034 !   </OUT>
   1035 !   <OUT NAME="mask_out" TYPE="real, dimension(:,:),optional">
   1036 !      Output mask that specifies whether data was computed.
   1037 !   </OUT>
   1038 
   1039   subroutine horiz_interp_bilinear ( Interp, data_in, data_out, verbose, mask_in,mask_out, &
   1040        missing_value, missing_permit, new_handle_missing )
   1041 !-----------------------------------------------------------------------
   1042     type (horiz_interp_type), intent(in)        :: Interp
   1043     real, intent(in),  dimension(:,:)           :: data_in
   1044     real, intent(out), dimension(:,:)           :: data_out
   1045     integer, intent(in),               optional :: verbose
   1046     real, intent(in), dimension(:,:),  optional :: mask_in
   1047     real, intent(out), dimension(:,:), optional :: mask_out
   1048     real, intent(in),                  optional :: missing_value

Page 31          Source Listing                  HORIZ_INTERP_BILINEAR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

   1049     integer, intent(in),               optional :: missing_permit
   1050     logical, intent(in),               optional :: new_handle_missing
   1051 !-----------------------------------------------------------------------
   1052     integer :: nlon_in, nlat_in, nlon_out, nlat_out, n, m,         &
   1053          is, ie, js, je, iverbose, max_missing, num_missing, &
   1054          miss_in, miss_out, unit
   1055     real    :: dwtsum, wtsum, min_in, max_in, avg_in, &
   1056          min_out, max_out, avg_out, wtw, wte, wts, wtn
   1057     real    :: mask(size(data_in,1), size(data_in,2) )
   1058     logical :: set_to_missing, is_missing(4), new_handler
   1059     real    :: f1, f2, f3, f4, middle, w, s
   1060 
   1061     num_missing = 0
   1062 
   1063     nlon_in  = Interp%nlon_src;  nlat_in  = Interp%nlat_src
   1064     nlon_out = Interp%nlon_dst; nlat_out = Interp%nlat_dst
   1065 
   1066     if(present(mask_in)) then
   1067        mask = mask_in
   1068     else
   1069        mask = 1.0
   1070     endif
   1071 
   1072     if (present(verbose)) then
   1073        iverbose = verbose
   1074     else
   1075        iverbose = 0
   1076     endif
   1077 
   1078     if(present(missing_permit)) then
   1079        max_missing = missing_permit
   1080     else
   1081        max_missing = 0
   1082     endif
   1083 
   1084     if(present(new_handle_missing)) then
   1085        new_handler = new_handle_missing
   1086     else
   1087        new_handler = .false.
   1088     endif
   1089 
   1090     if(max_missing .gt. 3 .or. max_missing .lt. 0) call mpp_error(FATAL, &
   1091          'horiz_interp_bilinear_mod: missing_permit should be between 0 and 3')
   1092 
   1093     if (size(data_in,1) /= nlon_in .or. size(data_in,2) /= nlat_in) &
   1094          call mpp_error(FATAL,'horiz_interp_bilinear_mod: size of input array incorrect')
   1095 
   1096     if (size(data_out,1) /= nlon_out .or. size(data_out,2) /= nlat_out) &
   1097          call mpp_error(FATAL,'horiz_interp_bilinear_mod: size of output array incorrect')
   1098 
   1099     if(new_handler) then
   1100        if( .not. present(missing_value) )  call mpp_error(FATAL, &
   1101             "horiz_interp_bilinear_mod: misisng_value must be present when new_handle_missing is .true.")
   1102        if( present(mask_in) ) call mpp_error(FATAL, &
   1103             "horiz_interp_bilinear_mod: mask_in should not be present when new_handle_missing is .true.")
   1104        do n = 1, nlat_out
   1105           do m = 1, nlon_out

Page 32          Source Listing                  HORIZ_INTERP_BILINEAR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

   1106              is = Interp % i_lon (m,n,1); ie = Interp % i_lon (m,n,2)
   1107              js = Interp % j_lat (m,n,1); je = Interp % j_lat (m,n,2)
   1108              wtw = Interp % wti   (m,n,1)
   1109              wte = Interp % wti   (m,n,2)
   1110              wts = Interp % wtj   (m,n,1)
   1111              wtn = Interp % wtj   (m,n,2)
   1112 
   1113              is_missing = .false.
   1114              num_missing = 0
   1115              set_to_missing = .false.
   1116              if(data_in(is,js) == missing_value) then
   1117                 num_missing = num_missing+1
   1118                 is_missing(1) = .true.
   1119                 if(wtw .GE. 0.5 .AND. wts .GE. 0.5) set_to_missing = .true.
   1120              endif
   1121 
   1122              if(data_in(ie,js) == missing_value) then
   1123                 num_missing = num_missing+1
   1124                 is_missing(2) = .true.
   1125                 if(wte .GE. 0.5 .AND. wts .GE. 0.5) set_to_missing = .true.
   1126              endif
   1127              if(data_in(ie,je) == missing_value) then
   1128                 num_missing = num_missing+1
   1129                 is_missing(3) = .true.
   1130                 if(wte .GE. 0.5 .AND. wtn .GE. 0.5) set_to_missing = .true.
   1131              endif
   1132              if(data_in(is,je) == missing_value) then
   1133                 num_missing = num_missing+1
   1134                 is_missing(4) = .true.
   1135                 if(wtw .GE. 0.5 .AND. wtn .GE. 0.5) set_to_missing = .true.
   1136              endif
   1137 
   1138              if( num_missing == 4 .OR. set_to_missing ) then
   1139                 data_out(m,n) = missing_value
   1140                 if(present(mask_out)) mask_out(m,n) = 0.0
   1141                  cycle
   1142              else if(num_missing == 0) then
   1143                 f1 = data_in(is,js)
   1144                 f2 = data_in(ie,js)
   1145                 f3 = data_in(ie,je)
   1146                 f4 = data_in(is,je)
   1147                 w = wtw
   1148                 s = wts
   1149              else if(num_missing == 3) then  !--- three missing value
   1150                 if(.not. is_missing(1) ) then
   1151                    data_out(m,n) = data_in(is,js)
   1152                 else if(.not. is_missing(2) ) then
   1153                    data_out(m,n) = data_in(ie,js)
   1154                 else if(.not. is_missing(3) ) then
   1155                    data_out(m,n) = data_in(ie,je)
   1156                 else if(.not. is_missing(4) ) then
   1157                    data_out(m,n) = data_in(is,je)
   1158                 endif
   1159                 if(present(mask_out) ) mask_out(m,n) = 1.0
   1160                 cycle
   1161              else   !--- one or two missing value
   1162                 if( num_missing == 1) then

Page 33          Source Listing                  HORIZ_INTERP_BILINEAR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

   1163                    if( is_missing(1) .OR. is_missing(3) ) then
   1164                       middle = 0.5*(data_in(ie,js)+data_in(is,je))
   1165                    else
   1166                       middle = 0.5*(data_in(is,js)+data_in(ie,je))
   1167                    endif
   1168                 else ! num_missing = 2
   1169                    if( is_missing(1) .AND. is_missing(2) ) then
   1170                       middle = 0.5*(data_in(ie,je)+data_in(is,je))
   1171                    else if( is_missing(1) .AND. is_missing(3) ) then
   1172                       middle = 0.5*(data_in(ie,js)+data_in(is,je))
   1173                    else if( is_missing(1) .AND. is_missing(4) ) then
   1174                       middle = 0.5*(data_in(ie,js)+data_in(ie,je))
   1175                    else if( is_missing(2) .AND. is_missing(3) ) then
   1176                       middle = 0.5*(data_in(is,js)+data_in(is,je))
   1177                    else if( is_missing(2) .AND. is_missing(4) ) then
   1178                       middle = 0.5*(data_in(is,js)+data_in(ie,je))
   1179                    else if( is_missing(3) .AND. is_missing(4) ) then
   1180                       middle = 0.5*(data_in(is,js)+data_in(ie,js))
   1181                    endif
   1182                 endif
   1183 
   1184                 if( wtw .GE. 0.5 .AND. wts .GE. 0.5 ) then  ! zone 1
   1185                    w = 2.0*(wtw-0.5)
   1186                    s = 2.0*(wts-0.5)
   1187                    f1 = data_in(is,js)
   1188                    if(is_missing(2)) then
   1189                       f2 = f1
   1190                    else
   1191                       f2 = 0.5*(data_in(is,js)+data_in(ie,js))
   1192                    endif
   1193                    f3 = middle
   1194                    if(is_missing(4)) then
   1195                       f4 = f1
   1196                    else
   1197                       f4 = 0.5*(data_in(is,js)+data_in(is,je))
   1198                    endif
   1199                 else if( wte .GE. 0.5 .AND. wts .GE. 0.5 ) then  ! zone 2
   1200                    w = 2.0*(1.0-wte)
   1201                    s = 2.0*(wts-0.5)
   1202                    f2 = data_in(ie,js)
   1203                    if(is_missing(1)) then
   1204                       f1 = f2
   1205                    else
   1206                       f1 = 0.5*(data_in(is,js)+data_in(ie,js))
   1207                    endif
   1208                    f4 = middle
   1209                    if(is_missing(3)) then
   1210                       f3 = f2
   1211                    else
   1212                       f3 = 0.5*(data_in(ie,js)+data_in(ie,je))
   1213                    endif
   1214                 else if( wte .GE. 0.5 .AND. wtn .GE. 0.5 ) then  ! zone 3
   1215                    w = 2.0*(1.0-wte)
   1216                    s = 2.0*(1.0-wtn)
   1217                    f3 = data_in(ie,je)
   1218                    if(is_missing(2)) then
   1219                       f2 = f3

Page 34          Source Listing                  HORIZ_INTERP_BILINEAR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

   1220                    else
   1221                       f2 = 0.5*(data_in(ie,js)+data_in(ie,je))
   1222                    endif
   1223                    f1 = middle
   1224                    if(is_missing(4)) then
   1225                       f4 = f3
   1226                    else
   1227                       f4 = 0.5*(data_in(ie,je)+data_in(is,je))
   1228                    endif
   1229                 else if( wtw .GE. 0.5 .AND. wtn .GE. 0.5 ) then  ! zone 4
   1230                    w = 2.0*(wtw-0.5)
   1231                    s = 2.0*(1.0-wtn)
   1232                    f4 = data_in(is,je)
   1233                    if(is_missing(1)) then
   1234                       f1 = f4
   1235                    else
   1236                       f1 = 0.5*(data_in(is,js)+data_in(is,je))
   1237                    endif
   1238                    f2 = middle
   1239                    if(is_missing(3)) then
   1240                       f3 = f4
   1241                    else
   1242                       f3 = 0.5*(data_in(ie,je)+data_in(is,je))
   1243                    endif
   1244                 else
   1245                    call mpp_error(FATAL, &
   1246                       "horiz_interp_bilinear_mod: the point should be in one of the four zone")
   1247                 endif
   1248              endif
   1249 
   1250              data_out(m,n) = f3 + (f4-f3)*w + (f2-f3)*s + ((f1-f2)+(f3-f4))*w*s
   1251             if(present(mask_out)) mask_out(m,n) = 1.0
   1252           enddo
   1253        enddo
   1254     else
   1255        do n = 1, nlat_out
   1256           do m = 1, nlon_out
   1257              is = Interp % i_lon (m,n,1); ie = Interp % i_lon (m,n,2)
   1258              js = Interp % j_lat (m,n,1); je = Interp % j_lat (m,n,2)
   1259              wtw = Interp % wti   (m,n,1)
   1260              wte = Interp % wti   (m,n,2)
   1261              wts = Interp % wtj   (m,n,1)
   1262              wtn = Interp % wtj   (m,n,2)
   1263 
   1264              if(present(missing_value) ) then
   1265                 num_missing = 0
   1266                 if(data_in(is,js) == missing_value) then
   1267                    num_missing = num_missing+1
   1268                    mask(is,js) = 0.0
   1269                 endif
   1270                 if(data_in(ie,js) == missing_value) then
   1271                    num_missing = num_missing+1
   1272                    mask(ie,js) = 0.0
   1273                 endif
   1274                 if(data_in(ie,je) == missing_value) then
   1275                    num_missing = num_missing+1
   1276                    mask(ie,je) = 0.0

Page 35          Source Listing                  HORIZ_INTERP_BILINEAR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

   1277                 endif
   1278                 if(data_in(is,je) == missing_value) then
   1279                    num_missing = num_missing+1
   1280                    mask(is,je) = 0.0
   1281                 endif
   1282              endif
   1283 
   1284              dwtsum = data_in(is,js)*mask(is,js)*wtw*wts &
   1285                   + data_in(ie,js)*mask(ie,js)*wte*wts &
   1286                   + data_in(ie,je)*mask(ie,je)*wte*wtn &
   1287                   + data_in(is,je)*mask(is,je)*wtw*wtn
   1288              wtsum  = mask(is,js)*wtw*wts + mask(ie,js)*wte*wts  &
   1289                   + mask(ie,je)*wte*wtn + mask(is,je)*wtw*wtn
   1290 
   1291              if(.not. present(mask_in) .and. .not. present(missing_value)) wtsum = 1.0
   1292 
   1293              if(num_missing .gt. max_missing ) then
   1294                 data_out(m,n) = missing_value
   1295                 if(present(mask_out)) mask_out(m,n) = 0.0
   1296              else if(wtsum .lt. epsln) then
   1297                 if(present(missing_value)) then
   1298                    data_out(m,n) = missing_value
   1299                 else
   1300                    data_out(m,n) = 0.0
   1301                 endif
   1302                 if(present(mask_out)) mask_out(m,n) = 0.0
   1303              else
   1304                 data_out(m,n) = dwtsum/wtsum
   1305                 if(present(mask_out)) mask_out(m,n) = wtsum
   1306              endif
   1307           enddo
   1308        enddo
   1309     endif
   1310 !***********************************************************************
   1311 ! compute statistics: minimum, maximum, and mean
   1312 !-----------------------------------------------------------------------
   1313     if (iverbose > 0) then
   1314 
   1315 ! compute statistics of input data
   1316 
   1317        call stats (data_in, min_in, max_in, avg_in, miss_in, missing_value, mask_in)
   1318 
   1319 ! compute statistics of output data
   1320        call stats (data_out, min_out, max_out, avg_out, miss_out, missing_value, mask_out)
   1321 
   1322 !---- output statistics ----
   1323        unit = stdout()
   1324        write (unit,900)
   1325        write (unit,901)  min_in ,max_in, avg_in
   1326        if (present(mask_in))  write (unit,903)  miss_in
   1327        write (unit,902)  min_out,max_out,avg_out
   1328        if (present(mask_out)) write (unit,903)  miss_out
   1329 
   1330 900    format (/,1x,10('-'),' output from horiz_interp ',10('-'))
   1331 901    format ('  input:  min=',f16.9,'  max=',f16.9,'  avg=',f22.15)
   1332 902    format (' output:  min=',f16.9,'  max=',f16.9,'  avg=',f22.15)
   1333 903    format ('          number of missing points = ',i6)

Page 36          Source Listing                  HORIZ_INTERP_BILINEAR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

   1334 
   1335     endif
   1336 
   1337     return
   1338 
   1339   end subroutine horiz_interp_bilinear


ENTRY POINTS

  Name                                                           
                                                                 
 horiz_interp_bilinear_mod_mp_horiz_interp_bilinear_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 900                        Label  1330                                                           1324                              
 901                        Label  1331                                                           1325                              
 902                        Label  1332                                                           1327                              
 903                        Label  1333                                                           1326,1328                         
 AVG_IN                     Local  1055     R(8)            8           scalar                    1317,1325                         
 AVG_OUT                    Local  1056     R(8)            8           scalar                    1320,1327                         
 DATA_IN                    Dummy  1039     R(8)            8     2     1        ARG,IN           1057,1093,1116,1122,1127,1132,1143
                                                                                                  ,1144,1145,1146,1151,1153,1155,115
                                                                                                  7,1164,1166,1170,1172,1174,1176,11
                                                                                                  78,1180,1187,1191,1197,1202,1206,1
                                                                                                  212,1217,1221,1227,1232,1236,1242,
                                                                                                  1266,1270,1274,1278,1284,1285,1286
                                                                                                  ,1287,1317                        
 DATA_OUT                   Dummy  1039     R(8)            8     2     1        ARG,OUT          1096,1139,1151,1153,1155,1157,1250
                                                                                                  ,1294,1298,1300,1304,1320         
 DWTSUM                     Local  1055     R(8)            8           scalar                    1284,1304                         
 F1                         Local  1059     R(8)            8           scalar                    1143,1187,1189,1195,1204,1206,1223
                                                                                                  ,1234,1236,1250                   
 F2                         Local  1059     R(8)            8           scalar                    1144,1189,1191,1202,1204,1210,1219
                                                                                                  ,1221,1238,1250                   
 F3                         Local  1059     R(8)            8           scalar                    1145,1193,1210,1212,1217,1219,1225
                                                                                                  ,1240,1242,1250                   
 F4                         Local  1059     R(8)            8           scalar                    1146,1195,1197,1208,1225,1227,1232
                                                                                                  ,1234,1240,1250                   
 HORIZ_INTERP_BILINEAR      Subr   1039                                                                                             
 IE                         Local  1053     I(4)            4           scalar                    1106,1122,1127,1144,1145,1153,1155
                                                                                                  ,1164,1166,1170,1172,1174,1178,118
                                                                                                  0,1191,1202,1206,1212,1217,1221,12
                                                                                                  27,1242,1257,1270,1272,1274,1276,1
                                                                                                  285,1286,1288,1289                
 INTERP                     Dummy  1039     HORIZ_INTERP_TYPE                                                                       
                                                            2208        scalar   ARG,IN           1063,1064,1106,1107,1108,1109,1110
                                                                                                  ,1111,1257,1258,1259,1260,1261,126
                                                                                                  2                                 
 IS                         Local  1053     I(4)            4           scalar                    1106,1116,1132,1143,1146,1151,1157
                                                                                                  ,1164,1166,1170,1172,1176,1178,118
                                                                                                  0,1187,1191,1197,1206,1227,1232,12
                                                                                                  36,1242,1257,1266,1268,1278,1280,1

Page 37          Source Listing                  HORIZ_INTERP_BILINEAR
2021-06-01 08:55 Symbol Table                    horiz_interp_bilinear.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  284,1287,1288,1289                
 IS_MISSING                 Local  1058     L(4)            4     1     4                         1113,1118,1124,1129,1134,1150,1152
                                                                                                  ,1154,1156,1163,1169,1171,1173,117
                                                                                                  5,1177,1179,1188,1194,1203,1209,12
                                                                                                  18,1224,1233,1239                 
 IVERBOSE                   Local  1053     I(4)            4           scalar                    1073,1075,1313                    
 JE                         Local  1053     I(4)            4           scalar                    1107,1127,1132,1145,1146,1155,1157
                                                                                                  ,1164,1166,1170,1172,1174,1176,117
                                                                                                  8,1197,1212,1217,1221,1227,1232,12
                                                                                                  36,1242,1258,1274,1276,1278,1280,1
                                                                                                  286,1287,1289                     
 JS                         Local  1053     I(4)            4           scalar                    1107,1116,1122,1143,1144,1151,1153
                                                                                                  ,1164,1166,1172,1174,1176,1178,118
                                                                                                  0,1187,1191,1197,1202,1206,1212,12
                                                                                                  21,1236,1258,1266,1268,1270,1272,1
                                                                                                  284,1285,1288                     
 M                          Local  1052     I(4)            4           scalar                    1105,1106,1107,1108,1109,1110,1111
                                                                                                  ,1139,1140,1151,1153,1155,1157,115
                                                                                                  9,1250,1251,1256,1257,1258,1259,12
                                                                                                  60,1261,1262,1294,1295,1298,1300,1
                                                                                                  302,1304,1305                     
 MASK                       Local  1057     R(8)            8     2     0                         1067,1069,1268,1272,1276,1280,1284
                                                                                                  ,1285,1286,1287,1288,1289         
 MASK_IN                    Dummy  1039     R(8)            8     2     1        ARG,IN           1066,1067,1102,1291,1317,1326     
 MASK_OUT                   Dummy  1039     R(8)            8     2     1        ARG,OUT          1140,1159,1251,1295,1302,1305,1320
                                                                                                  ,1328                             
 MAX_IN                     Local  1055     R(8)            8           scalar                    1317,1325                         
 MAX_MISSING                Local  1053     I(4)            4           scalar                    1079,1081,1090,1293               
 MAX_OUT                    Local  1056     R(8)            8           scalar                    1320,1327                         
 MIDDLE                     Local  1059     R(8)            8           scalar                    1164,1166,1170,1172,1174,1176,1178
                                                                                                  ,1180,1193,1208,1223,1238         
 MIN_IN                     Local  1055     R(8)            8           scalar                    1317,1325                         
 MIN_OUT                    Local  1056     R(8)            8           scalar                    1320,1327                         
 MISSING_PERMIT             Dummy  1040     I(4)            4           scalar   ARG,IN           1078,1079                         
 MISSING_VALUE              Dummy  1040     R(8)            8           scalar   ARG,IN           1100,1116,1122,1127,1132,1139,1264
                                                                                                  ,1266,1270,1274,1278,1291,1294,129
                                                                                                  7,1298,1317,1320                  
 MISS_IN                    Local  1054     I(4)            4           scalar                    1317,1326                         
 MISS_OUT                   Local  1054     I(4)            4           scalar                    1320,1328                         
 N                          Local  1052     I(4)            4           scalar                    1104,1106,1107,1108,1109,1110,1111
                                                                                                  ,1139,1140,1151,1153,1155,1157,115
                                                                                                  9,1250,1251,1255,1257,1258,1259,12
                                                                                                  60,1261,1262,1294,1295,1298,1300,1
                                                                                                  302,1304,1305                     
 NEW_HANDLER                Local  1058     L(4)            4           scalar                    1085,1087,1099                    
 NEW_HANDLE_MISSING         Dummy  1040     L(4)            4           scalar   ARG,IN           1084,1085                         
 NLAT_IN                    Local  1052     I(4)            4           scalar                    1063,1093                         
 NLAT_OUT                   Local  1052     I(4)            4           scalar                    1064,1096,1104,1255               
 NLON_IN                    Local  1052     I(4)            4           scalar                    1063,1093                         
 NLON_OUT                   Local  1052     I(4)            4           scalar                    1064,1096,1105,1256               
 NUM_MISSING                Local  1053     I(4)            4           scalar                    1061,1114,1117,1123,1128,1133,1138
                                                                                                  ,1142,1149,1162,1265,1267,1271,127
                                                                                                  5,1279,1293                       
 PRESENT                    Func   1066                                 scalar                    1066,1072,1078,1084,1100,1102,1140
                                                                                                  ,1159,1251,1264,1291,1295,1297,130

Page 38          Source Listing                  HORIZ_INTERP_BILINEAR
2021-06-01 08:55 Symbol Table                    horiz_interp_bilinear.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,1305,1326,1328                  
 S                          Local  1059     R(8)            8           scalar                    1148,1186,1201,1216,1231,1250     
 SET_TO_MISSING             Local  1058     L(4)            4           scalar                    1115,1119,1125,1130,1135,1138     
 SIZE                       Func   1057                                 scalar                    1057,1093,1096                    
 STATS                      Subr   1317                                          PRIV             41,1317,1320                      
 UNIT                       Local  1054     I(4)            4           scalar                    1323,1324,1325,1326,1327,1328     
 VERBOSE                    Dummy  1039     I(4)            4           scalar   ARG,IN           1072,1073                         
 W                          Local  1059     R(8)            8           scalar                    1147,1185,1200,1215,1230,1250     
 WTE                        Local  1056     R(8)            8           scalar                    1109,1125,1130,1199,1200,1214,1215
                                                                                                  ,1260,1285,1286,1288,1289         
 WTN                        Local  1056     R(8)            8           scalar                    1111,1130,1135,1214,1216,1229,1231
                                                                                                  ,1262,1286,1287,1289              
 WTS                        Local  1056     R(8)            8           scalar                    1110,1119,1125,1148,1184,1186,1199
                                                                                                  ,1201,1261,1284,1285,1288         
 WTSUM                      Local  1055     R(8)            8           scalar                    1288,1291,1296,1304,1305          
 WTW                        Local  1056     R(8)            8           scalar                    1108,1119,1135,1147,1184,1185,1229
                                                                                                  ,1230,1259,1284,1287,1288,1289    

Page 39          Source Listing                  HORIZ_INTERP_BILINEAR
2021-06-01 08:55                                 horiz_interp_bilinear.F90

   1340 ! </SUBROUTINE>
   1341 
   1342 !#######################################################################
   1343 ! <SUBROUTINE NAME="horiz_interp_bilinear_del">
   1344 
   1345 !   <OVERVIEW>
   1346 !     Deallocates memory used by "horiz_interp_type" variables.
   1347 !     Must be called before reinitializing with horiz_interp_bilinear_new.
   1348 !   </OVERVIEW>
   1349 !   <DESCRIPTION>
   1350 !     Deallocates memory used by "horiz_interp_type" variables.
   1351 !     Must be called before reinitializing with horiz_interp_bilinear_new.
   1352 !   </DESCRIPTION>
   1353 !   <TEMPLATE>
   1354 !     call horiz_interp_bilinear_del ( Interp )
   1355 !   </TEMPLATE>
   1356 
   1357 !   <INOUT NAME="Interp" TYPE="horiz_interp_type">
   1358 !     A derived-type variable returned by previous call
   1359 !     to horiz_interp_bilinear_new. The input variable must have
   1360 !     allocated arrays. The returned variable will contain
   1361 !     deallocated arrays.
   1362 !   </INOUT>
   1363 
   1364   subroutine horiz_interp_bilinear_del( Interp )
   1365 
   1366     type (horiz_interp_type), intent(inout) :: Interp
   1367 
   1368     if(associated(Interp%wti))   deallocate(Interp%wti)
   1369     if(associated(Interp%wtj))   deallocate(Interp%wtj)
   1370     if(associated(Interp%i_lon)) deallocate(Interp%i_lon)
   1371     if(associated(Interp%j_lat)) deallocate(Interp%j_lat)
   1372 
   1373   end subroutine horiz_interp_bilinear_del

Page 40          Source Listing                  HORIZ_INTERP_BILINEAR_DEL
2021-06-01 08:55 Entry Points                    horiz_interp_bilinear.F90



ENTRY POINTS

  Name                                                               
                                                                     
 horiz_interp_bilinear_mod_mp_horiz_interp_bilinear_del_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   1368                                 scalar                    1368,1369,1370,1371               
 HORIZ_INTERP_BILINEAR_DEL  Subr   1364                                                                                             
 INTERP                     Dummy  1364     HORIZ_INTERP_TYPE                                                                       
                                                            2208        scalar   ARG,INOUT        1368,1369,1370,1371               

Page 41          Source Listing                  HORIZ_INTERP_BILINEAR_DEL
2021-06-01 08:55                                 horiz_interp_bilinear.F90

   1374 ! </SUBROUTINE>
   1375 
   1376 !#######################################################################
   1377 
   1378   function indp (value, array)
   1379     integer                        :: indp
   1380     real, dimension(:), intent(in) :: array
   1381     real, intent(in)               :: value
   1382 !
   1383 !=======================================================================
   1384 !
   1385 !     indp = index of nearest data point within "array" corresponding to
   1386 !            "value".
   1387 
   1388 !     inputs:
   1389 !     value  = arbitrary data...same units as elements in "array"
   1390 !     array  = array of data points  (must be monotonically increasing)
   1391 
   1392 !     output:
   1393 !     indp =  index of nearest data point to "value"
   1394 !             if "value" is outside the domain of "array" then indp = 1
   1395 !             or "ia" depending on whether array(1) or array(ia) is
   1396 !             closest to "value"
   1397 !=======================================================================
   1398 !
   1399     integer i, ia, unit
   1400     logical keep_going
   1401 !
   1402     ia = size(array(:))
   1403     do i=2,ia
   1404        if (array(i) .lt. array(i-1)) then
   1405           unit = stdout()
   1406           write (unit,*) &
   1407                ' => Error: array must be monotonically increasing in "indp"' , &
   1408                '           when searching for nearest element to value=',value
   1409           write (unit,*) '           array(i) < array(i-1) for i=',i
   1410           write (unit,*) '           array(i) for i=1..ia follows:'
   1411           call abort()
   1412        endif
   1413     enddo
   1414     if (value .lt. array(1) .or. value .gt. array(ia)) then
   1415        if (value .lt. array(1))  indp = 1
   1416        if (value .gt. array(ia)) indp = ia
   1417     else
   1418        i=1
   1419        keep_going = .true.
   1420        do while (i .le. ia .and. keep_going)
   1421           i = i+1
   1422           if (value .le. array(i)) then
   1423              indp = i
   1424              if (array(i)-value .gt. value-array(i-1)) indp = i-1
   1425              keep_going = .false.
   1426           endif
   1427        enddo
   1428     endif
   1429     return
   1430   end function indp

Page 42          Source Listing                  INDP
2021-06-01 08:55 Entry Points                    horiz_interp_bilinear.F90



ENTRY POINTS

  Name                                          
                                                
 horiz_interp_bilinear_mod_mp_indp_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABORT                      Subr   1411                                                           1411                              
 ARRAY                      Dummy  1378     R(8)            8     1     1        ARG,IN           1402,1404,1414,1415,1416,1422,1424
 I                          Local  1399     I(4)            4           scalar                    1403,1404,1409,1418,1420,1421,1422
                                                                                                  ,1423,1424                        
 IA                         Local  1399     I(4)            4           scalar                    1402,1403,1414,1416,1420          
 INDP                       Func   1378     I(4)            4           scalar                    189,209,1415,1416,1423,1424       
 KEEP_GOING                 Local  1400     L(4)            4           scalar                    1419,1420,1425                    
 SIZE                       Func   1402                                 scalar                    1402                              
 UNIT                       Local  1399     I(4)            4           scalar                    1405,1406,1409,1410               
 VALUE                      Dummy  1378     R(8)            8           scalar   ARG,IN           1408,1414,1415,1416,1422,1424     

Page 43          Source Listing                  INDP
2021-06-01 08:55                                 horiz_interp_bilinear.F90

   1431 
   1432 !######################################################################
   1433 
   1434 end module horiz_interp_bilinear_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONSTANTS_MOD              Module 40                                                             40                                
 FMS_MOD                    Module 39                                                             39                                
 HORIZ_INTERP_BILINEAR      Subr   47                                                             47                                
 HORIZ_INTERP_BILINEAR_DEL  Subr   47                                                             47                                
 HORIZ_INTERP_BILINEAR_INIT Subr   48                                                             48                                
 HORIZ_INTERP_BILINEAR_MOD  Module 20                                                                                               
 HORIZ_INTERP_BILINEAR_NEW  Local  51                                   scalar                    47                                
 HORIZ_INTERP_TYPE_MOD      Module 41                                                             41                                
 INSIDE_POLYGON@0           Local  751      L(4)            4           scalar                                                      
 MPP_MOD                    Module 38                                                             38                                
 MPP_PE                     Func   38       I(4)            4           scalar   PRIV             38                                
 MPP_ROOT_PE                Func   38       I(4)            4           scalar   PRIV             38                                

Page 44          Source Listing                  INDP
2021-06-01 08:55 Subprograms/Common Blocks       horiz_interp_bilinear.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIND_NEIGHBOR              Subr   501                                                            370                               
 FIND_NEIGHBOR_NEW          Subr   781                                                            367                               
 HORIZ_INTERP_BILINEAR      Subr   1039                                                                                             
 HORIZ_INTERP_BILINEAR_DEL  Subr   1364                                                                                             
 HORIZ_INTERP_BILINEAR_INIT Subr   101                                                                                              
 HORIZ_INTERP_BILINEAR_MOD  Module 20                                                                                               
 HORIZ_INTERP_BILINEAR_NEW_                                                                                                         
 1D                         Subr   113                                           PRIV                                               
 HORIZ_INTERP_BILINEAR_NEW_                                                                                                         
 2D                         Subr   311                                           PRIV                                               
 INDP                       Func   1378     I(4)            4           scalar                    189,209,1415,1416,1423,1424       
 INSIDE_POLYGON             Func   751      L(4)            4           scalar                    758,765,768,865,957               
 INTERSECT                  Func   983      R(8)            8           scalar                    571,572,573,574,701,702,703,704,98
                                                                                                  7                                 

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion

Page 45          Source Listing                  INDP
2021-06-01 08:55                                 horiz_interp_bilinear.F90

       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy

Page 46          Source Listing                  INDP
2021-06-01 08:55                                 horiz_interp_bilinear.F90

       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : horiz_interp_bilinear.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
