Page 1           Source Listing                  DIAG_UTIL_INIT
2021-06-01 08:54                                 /tmp/ifortpzk5zn.i90

      1 # 1 "diag_util.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 
     22 !> @file
     23 !! @brief Functions and subroutines necessary for the <TT>diag_manager_mod</TT>.
     24 !! @author Seth Underwood
     25 !! @email gfdl.climate.model.info@noaa.gov
     26 MODULE diag_util_mod
     27 
     28 use platform_mod
     29 use,intrinsic :: iso_fortran_env, only: real128
     30 use,intrinsic :: iso_c_binding, only: c_double,c_float,c_int64_t, &
     31                                       c_int32_t,c_int16_t,c_intptr_t
     32 ! <CONTACT EMAIL="seth.underwood@noaa.gov">
     33 !   Seth Underwood
     34 ! </CONTACT>
     35 ! <HISTORY SRC="http://cobweb.gfdl.noaa.gov/fms-cgi-bin/viewcvs/FMS/shared/diag_manager/"/>
     36 
     37 ! <OVERVIEW>
     38 !   Functions and subroutines necessary for the <TT>diag_manager_mod</TT>.
     39 ! </OVERVIEW>
     40 
     41 ! <DESCRIPTION>
     42 !   <TT>diag_util_mod</TT> is a set of Fortran functions and subroutines used by the <TT>diag_manager_mod</TT>.
     43 ! </DESCRIPTION>
     44 
     45 ! <INFO>
     46 !   <FUTURE>
     47 !     Make an interface <TT>check_bounds_are_exact</TT> for the subroutines <TT>check_bounds_are_exact_static</TT> and
     48 !     <TT>check_bounds_are_exact_dynamic</TT>.
     49 !     <PRE>
     50 !       INTERFACE check_bounds_are_exact
     51 !         MODULE PROCEDURE check_bounds_are_exact_static
     52 !         MODULE PROCEDURE check_bounds_are_exact_dynamic
     53 !       END INTERFACE check_bounds_are_exact
     54 !     </PRE>
     55 !   </FUTURE>
     56 ! </INFO>
     57   USE diag_data_mod, ONLY: output_fields, input_fields, files, do_diag_field_log, diag_log_unit,&

Page 2           Source Listing                  DIAG_UTIL_INIT
2021-06-01 08:54                                 diag_util.F90

     58        & VERY_LARGE_AXIS_LENGTH, time_zero, VERY_LARGE_FILE_FREQ, END_OF_RUN, EVERY_TIME,&
     59        & DIAG_SECONDS, DIAG_MINUTES, DIAG_HOURS, DIAG_DAYS, DIAG_MONTHS, DIAG_YEARS, base_time,&
     60        & time_unit_list, max_files, base_year, base_month, base_day, base_hour, base_minute,&
     61        & base_second, num_files, max_files, max_fields_per_file, max_out_per_in_field,&
     62        & max_input_fields,num_input_fields, max_output_fields, num_output_fields, coord_type,&
     63        & mix_snapshot_average_fields, global_descriptor, CMOR_MISSING_VALUE, use_cmor, pack_size,&
     64        & debug_diag_manager, flush_nc_files, output_field_type, max_field_attributes, max_file_attributes,&
     65        & file_type, prepend_date, region_out_use_alt_value, GLO_REG_VAL, GLO_REG_VAL_ALT,&
     66        & DIAG_FIELD_NOT_FOUND, diag_init_time
     67   USE diag_data_mod, ONLY: fileobjU, fileobj, fnum_for_domain, fileobjND
     68   USE diag_axis_mod, ONLY: get_diag_axis_data, get_axis_global_length, get_diag_axis_cart,&
     69        & get_domain1d, get_domain2d, diag_subaxes_init, diag_axis_init, get_diag_axis, get_axis_aux,&
     70        & get_axes_shift, get_diag_axis_name, get_diag_axis_domain_name, get_domainUG, &
     71        & get_axis_reqfld, axis_is_compressed, get_compressed_axes_ids
     72   USE diag_output_mod, ONLY: diag_output_init, write_axis_meta_data,&
     73        & write_field_meta_data, done_meta_data
     74   USE diag_output_mod, ONLY: done_meta_data_use_mpp_io !<use_mpp_io=.true.
     75   USE diag_output_mod, ONLY: diag_field_write, diag_write_time !<fms2_io use_mpp_io=.false.
     76   USE diag_output_mod, ONLY: diag_field_out !<mpp_io use_mpp_io = .true.
     77   USE diag_grid_mod, ONLY: get_local_indexes
     78   USE fms_mod, ONLY: error_mesg, FATAL, WARNING, NOTE, mpp_pe, mpp_root_pe, lowercase, fms_error_handler,&
     79        & write_version_number, do_cf_compliance
     80   USE fms_io_mod, ONLY: get_tile_string, return_domain, string
     81   USE fms2_io_mod, ONLY: fms2_io_get_instance_filename => get_instance_filename
     82   USE fms_io_mod, ONLY: mpp_io_get_instance_filename => get_instance_filename
     83   USE mpp_domains_mod,ONLY: domain1d, domain2d, mpp_get_compute_domain, null_domain1d, null_domain2d,&
     84        & OPERATOR(.NE.), OPERATOR(.EQ.), mpp_modify_domain, mpp_get_domain_components,&
     85        & mpp_get_ntile_count, mpp_get_current_ntile, mpp_get_tile_id, mpp_mosaic_defined, mpp_get_tile_npes,&
     86        & domainUG, null_domainUG
     87   USE time_manager_mod,ONLY: time_type, OPERATOR(==), OPERATOR(>), NO_CALENDAR, increment_date,&
     88        & increment_time, get_calendar_type, get_date, get_time, leap_year, OPERATOR(-),&
     89        & OPERATOR(<), OPERATOR(>=), OPERATOR(<=), OPERATOR(==)
     90   USE mpp_io_mod, ONLY: mpp_close
     91   USE mpp_mod, ONLY: mpp_npes
     92   USE fms_io_mod, ONLY: get_mosaic_tile_file_ug
     93   USE constants_mod, ONLY: SECONDS_PER_DAY, SECONDS_PER_HOUR, SECONDS_PER_MINUTE
     94 use fms2_io_mod
     95 
     96   USE netcdf, ONLY: NF90_CHAR
     97 
     98 
     99   IMPLICIT NONE
    100   PRIVATE
    101   PUBLIC get_subfield_size, log_diag_field_info, update_bounds, check_out_of_bounds,&
    102        & check_bounds_are_exact_dynamic, check_bounds_are_exact_static, init_file, diag_time_inc,&
    103        & find_input_field, init_input_field, init_output_field, diag_data_out, write_static,&
    104        & check_duplicate_output_fields, get_date_dif, get_subfield_vert_size, sync_file_times,&
    105        & prepend_attribute, attribute_init, diag_util_init
    106 
    107 !> @brief prepend a value to a string attribute in the output field or output file
    108   INTERFACE prepend_attribute
    109      MODULE PROCEDURE prepend_attribute_field
    110      MODULE PROCEDURE prepend_attribute_file
    111   END INTERFACE prepend_attribute
    112 
    113 !> @brief Allocates the atttype in out_file
    114   INTERFACE attribute_init

Page 3           Source Listing                  DIAG_UTIL_INIT
2021-06-01 08:54                                 diag_util.F90

    115      MODULE PROCEDURE attribute_init_field
    116      MODULE PROCEDURE attribute_init_file
    117   END INTERFACE attribute_init
    118 ! </INTERFACE>
    119 
    120 ! Include variable "version" to be written to log file.
    121 # 1 "../include/file_version.h" 1 
    122 ! -*-f90-*-
    123 !***********************************************************************
    124 !*                   GNU Lesser General Public License
    125 !*
    126 !* This file is part of the GFDL Flexible Modeling System (FMS).
    127 !*
    128 !* FMS is free software: you can redistribute it and/or modify it under
    129 !* the terms of the GNU Lesser General Public License as published by
    130 !* the Free Software Foundation, either version 3 of the License, or (at
    131 !* your option) any later version.
    132 !*
    133 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    134 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    135 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    136 !* for more details.
    137 !*
    138 !* You should have received a copy of the GNU Lesser General Public
    139 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    140 !***********************************************************************
    141 
    142 # 23
    143 
    144   character(len=*), parameter :: version = 'unknown'
    145 
    146 # 121 "diag_util.F90" 2 
    147 
    148   LOGICAL :: module_initialized = .FALSE.
    149 
    150 
    151 CONTAINS
    152 
    153 !> @brief Write the version number of this file to the log file.
    154   SUBROUTINE diag_util_init()
    155     IF (module_initialized) THEN
    156        RETURN
    157     END IF
    158 
    159 ! Write version number out to log file
    160     call write_version_number("DIAG_UTIL_MOD", version)
    161   END SUBROUTINE diag_util_init

Page 4           Source Listing                  DIAG_UTIL_INIT
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                        
                                              
 diag_util_mod_mp_diag_util_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIAG_UTIL_INIT             Subr   154                                                                                              
 MODULE_INITIALIZED         Local  155      L(4)            4           scalar                    148,155                           
 VERSION                    Param  160      CHAR            7           scalar                    160                               
 WRITE_VERSION_NUMBER       Subr   160                                           PRIV             79,160                            

Page 5           Source Listing                  DIAG_UTIL_INIT
2021-06-01 08:54                                 diag_util.F90

    162 
    163 !> @brief Get the size, start, and end indices for output fields.
    164   SUBROUTINE get_subfield_size(axes, outnum)
    165     INTEGER, INTENT(in) :: axes(:) !< axes of the input_field
    166     INTEGER, INTENT(in) :: outnum  !< position in array output_fields
    167 
    168     REAL, ALLOCATABLE   :: global_lat(:), global_lon(:), global_depth(:)
    169     INTEGER :: global_axis_size, global_axis_sizey
    170     INTEGER :: i,xbegin,xend,ybegin,yend,xbegin_l,xend_l,ybegin_l,yend_l
    171     CHARACTER(len=1) :: cart
    172     TYPE(domain2d) :: Domain2, Domain2_new
    173     TYPE(domain1d) :: Domain1, Domain1x, Domain1y
    174     REAL :: start(3) !< start coordinates in 3 axes
    175     REAL :: end(3) !< end coordinates in 3 axes
    176     INTEGER :: gstart_indx(3)!< global start indices of output domain in 3 axes
    177     INTEGER :: gend_indx(3) !< global end indices of output domain in 3 axes
    178     REAL, ALLOCATABLE :: subaxis_x(:) !< containing local coordinates in x,y,z axes
    179     REAL, ALLOCATABLE :: subaxis_y(:) !< containing local coordinates in x,y,z axes
    180     REAL, ALLOCATABLE :: subaxis_z(:) !< containing local coordinates in x,y,z axes
    181     CHARACTER(len=128) :: msg
    182     INTEGER :: ishift, jshift
    183     INTEGER :: grv !< Value used to determine if the region defined in the diag_table is for the whole axis, or a sub-axis
    184     CHARACTER(len=128), DIMENSION(2) :: axis_domain_name
    185 
    186 !initilization for local output
    187 ! initially out of (lat/lon/depth) range
    188     start = -1.e10
    189     end = -1.e10
    190     gstart_indx = -1
    191     gend_indx = -1
    192 
    193 ! get the value to compare to determine if writing full axis data
    194     IF ( region_out_use_alt_value ) THEN
    195        grv = GLO_REG_VAL_ALT
    196     ELSE
    197        grv = GLO_REG_VAL
    198     END IF
    199 
    200 ! get axis data (lat, lon, depth) and indices
    201     start = output_fields(outnum)%output_grid%start
    202     end = output_fields(outnum)%output_grid%end
    203 
    204     CALL get_diag_axis_domain_name(axes(1), axis_domain_name(1))
    205     CALL get_diag_axis_domain_name(axes(2), axis_domain_name(2))
    206 
    207     IF (   INDEX(lowercase(axis_domain_name(1)), 'cubed') == 0 .AND. &
    208          & INDEX(lowercase(axis_domain_name(2)), 'cubed') == 0 ) THEN
    209        DO i = 1, SIZE(axes(:))
    210           global_axis_size = get_axis_global_length(axes(i))
    211           output_fields(outnum)%output_grid%subaxes(i) = -1
    212           CALL get_diag_axis_cart(axes(i), cart)
    213           SELECT CASE(cart)
    214           CASE ('X')
    215 ! <ERROR STATUS="FATAL">wrong order of axes.  X should come first.</ERROR>
    216              IF( i.NE.1 ) CALL error_mesg('diag_util_mod::get_subfield_size',&
    217                   & 'wrong order of axes, X should come first',FATAL)
    218              ALLOCATE(global_lon(global_axis_size))

Page 6           Source Listing                  GET_SUBFIELD_SIZE
2021-06-01 08:54                                 diag_util.F90

    219              CALL get_diag_axis_data(axes(i),global_lon)
    220              IF( INT(start(i)) == grv .AND. INT(end(i)) == grv ) THEN
    221                 gstart_indx(i) = 1
    222                 gend_indx(i) = global_axis_size
    223                 output_fields(outnum)%output_grid%subaxes(i) = axes(i)
    224              ELSE
    225                 gstart_indx(i) = get_index(start(i),global_lon)
    226                 gend_indx(i) = get_index(END(i),global_lon)
    227              END IF
    228              ALLOCATE(subaxis_x(gstart_indx(i):gend_indx(i)))
    229              subaxis_x=global_lon(gstart_indx(i):gend_indx(i))
    230           CASE ('Y')
    231 ! <ERROR STATUS="FATAL">wrong order of axes, Y should come second.</ERROR>
    232              IF( i.NE.2 ) CALL error_mesg('diag_util_mod::get_subfield_size',&
    233                   & 'wrong order of axes, Y should come second',FATAL)
    234              ALLOCATE(global_lat(global_axis_size))
    235              CALL get_diag_axis_data(axes(i),global_lat)
    236              IF( INT(start(i)) == grv .AND. INT(END(i)) == grv ) THEN
    237                 gstart_indx(i) = 1
    238                 gend_indx(i) = global_axis_size
    239                 output_fields(outnum)%output_grid%subaxes(i) = axes(i)
    240              ELSE
    241                 gstart_indx(i) = get_index(start(i),global_lat)
    242                 gend_indx(i) = get_index(END(i),global_lat)
    243              END IF
    244              ALLOCATE(subaxis_y(gstart_indx(i):gend_indx(i)))
    245              subaxis_y=global_lat(gstart_indx(i):gend_indx(i))
    246           CASE ('Z')
    247 ! <ERROR STATUS="FATAL">wrong values in vertical axis of region</ERROR>
    248              IF ( start(i)*END(i)<0. ) CALL error_mesg('diag_util_mod::get_subfield_size',&
    249                   & 'wrong values in vertical axis of region',FATAL)
    250              IF ( start(i)>=0. .AND. END(i)>0. ) THEN
    251                 ALLOCATE(global_depth(global_axis_size))
    252                 CALL get_diag_axis_data(axes(i),global_depth)
    253                 gstart_indx(i) = get_index(start(i),global_depth)
    254                 gend_indx(i) = get_index(END(i),global_depth)
    255                 ALLOCATE(subaxis_z(gstart_indx(i):gend_indx(i)))
    256                 subaxis_z=global_depth(gstart_indx(i):gend_indx(i))
    257                 output_fields(outnum)%output_grid%subaxes(i) =&
    258                      & diag_subaxes_init(axes(i),subaxis_z, gstart_indx(i),gend_indx(i))
    259                 DEALLOCATE(subaxis_z,global_depth)
    260              ELSE ! regional vertical axis is the same as global vertical axis
    261                 gstart_indx(i) = 1
    262                 gend_indx(i) = global_axis_size
    263                 output_fields(outnum)%output_grid%subaxes(i) = axes(i)
    264 ! <ERROR STATUS="FATAL">i should equal 3 for z axis</ERROR>
    265                 IF( i /= 3 ) CALL error_mesg('diag_util_mod::get_subfield_size',&
    266                      & 'i should equal 3 for z axis', FATAL)
    267              END IF
    268           CASE default
    269 ! <ERROR STATUS="FATAL">Wrong axis_cart</ERROR>
    270              CALL error_mesg('diag_util_mod::get_subfield_size', 'Wrong axis_cart', FATAL)
    271           END SELECT
    272        END DO
    273 
    274        DO i = 1, SIZE(axes(:))
    275           IF ( gstart_indx(i) == -1 .OR. gend_indx(i) == -1 ) THEN

Page 7           Source Listing                  GET_SUBFIELD_SIZE
2021-06-01 08:54                                 diag_util.F90

    276 ! <ERROR STATUS="FATAL">
    277 !   can not find gstart_indx/gend_indx for <output_fields(outnum)%output_name>,
    278 !   check region bounds for axis <i>.
    279 ! </ERROR>
    280              WRITE(msg,'(A,I2)') ' check region bounds for axis ', i
    281              CALL error_mesg('diag_util_mod::get_subfield_size', 'can not find gstart_indx/gend_indx for '&
    282                   & //TRIM(output_fields(outnum)%output_name)//','//TRIM(msg), FATAL)
    283           END IF
    284        END DO
    285     ELSE ! cubed sphere
    286 ! get the i and j start and end indexes
    287        CALL get_local_indexes(LONSTART=start(1), LONEND=END(1), &
    288             &                 LATSTART=start(2), LATEND=END(2), &
    289             &                 ISTART=gstart_indx(1), IEND=gend_indx(1), &
    290             &                 JSTART=gstart_indx(2), JEND=gend_indx(2))
    291        global_axis_size =  get_axis_global_length(axes(1))
    292        ALLOCATE(global_lon(global_axis_size))
    293        global_axis_sizey = get_axis_global_length(axes(2))
    294        ALLOCATE(global_lat(global_axis_sizey))
    295        CALL get_diag_axis_data(axes(1),global_lon)
    296        CALL get_diag_axis_data(axes(2),global_lat)
    297 
    298 !Potential fix for out-of-bounds error for global_lon and global_lat.
    299        IF ((gstart_indx(1) .GT. 0 .AND. gstart_indx(2) .GT. 0) .AND. &
    300            (gstart_indx(1) .LE. global_axis_size .AND. gstart_indx(2) .LE. global_axis_sizey) .AND. &
    301            (gend_indx(1) .GT. 0 .AND. gend_indx(2) .GT. 0) .AND. &
    302            (gend_indx(1) .LE. global_axis_size .AND. gend_indx(2) .LE. global_axis_sizey)) THEN
    303           ALLOCATE(subaxis_x(gstart_indx(1):gend_indx(1)))
    304           ALLOCATE(subaxis_y(gstart_indx(2):gend_indx(2)))
    305           subaxis_x=global_lon(gstart_indx(1):gend_indx(1))
    306           subaxis_y=global_lat(gstart_indx(2):gend_indx(2))
    307        END IF
    308 
    309 ! Now deal with the Z component
    310        IF ( SIZE(axes(:)) > 2 ) THEN
    311           global_axis_size = get_axis_global_length(axes(3))
    312           output_fields(outnum)%output_grid%subaxes(3) = -1
    313           CALL get_diag_axis_cart(axes(3), cart)
    314 ! <ERROR STATUS="FATAL">
    315 !   axis(3) should be Z-axis
    316 ! </ERROR>
    317           IF ( lowercase(cart) /= 'z' ) CALL error_mesg('diag_util_mod::get_subfield_size', &
    318                &'axis(3) should be Z-axis', FATAL)
    319 ! <ERROR STATUS="FATAL">
    320 !   wrong values in vertical axis of region
    321 ! </ERROR>
    322           IF ( start(3)*END(3)<0. ) CALL error_mesg('diag_util_mod::get_subfield_size',&
    323                & 'wrong values in vertical axis of region',FATAL)
    324           IF ( start(3)>=0. .AND. END(3)>0. ) THEN
    325              ALLOCATE(global_depth(global_axis_size))
    326              CALL get_diag_axis_data(axes(3),global_depth)
    327              gstart_indx(3) = get_index(start(3),global_depth)
    328              IF( start(3) == 0.0 )  gstart_indx(3) = 1
    329              gend_indx(3) = get_index(END(3),global_depth)
    330              IF( start(3) >= MAXVAL(global_depth) ) gstart_indx(3)= global_axis_size
    331              IF( END(3)   >= MAXVAL(global_depth) ) gend_indx(3)  = global_axis_size
    332 

Page 8           Source Listing                  GET_SUBFIELD_SIZE
2021-06-01 08:54                                 diag_util.F90

    333              ALLOCATE(subaxis_z(gstart_indx(3):gend_indx(3)))
    334              subaxis_z=global_depth(gstart_indx(3):gend_indx(3))
    335              output_fields(outnum)%output_grid%subaxes(3) =&
    336                   & diag_subaxes_init(axes(3),subaxis_z, gstart_indx(3),gend_indx(3))
    337              DEALLOCATE(subaxis_z,global_depth)
    338           ELSE ! regional vertical axis is the same as global vertical axis
    339              gstart_indx(3) = 1
    340              gend_indx(3) = global_axis_size
    341              output_fields(outnum)%output_grid%subaxes(3) = axes(3)
    342           END IF
    343        END IF
    344     END IF
    345 
    346 ! get domain and compute_domain(xbegin,xend,ybegin,yend)
    347     xbegin = -1
    348     xend = -1
    349     ybegin = -1
    350     yend = -1
    351 
    352     Domain2 = get_domain2d(axes)
    353     IF ( Domain2 .NE. NULL_DOMAIN2D ) THEN
    354        CALL mpp_get_compute_domain(Domain2, xbegin, xend, ybegin, yend)
    355        CALL mpp_get_domain_components(Domain2, Domain1x, Domain1y)
    356     ELSE
    357        DO i = 1, MIN(SIZE(axes(:)),2)
    358           Domain1 = get_domain1d(axes(i))
    359           IF ( Domain1 .NE. NULL_DOMAIN1D ) THEN
    360              CALL get_diag_axis_cart(axes(i),cart)
    361              SELECT CASE(cart)
    362              CASE ('X')
    363                 Domain1x = get_domain1d(axes(i))
    364                 CALL mpp_get_compute_domain(Domain1x, xbegin, xend)
    365              CASE ('Y')
    366                 Domain1y = get_domain1d(axes(i))
    367                 CALL mpp_get_compute_domain(Domain1y, ybegin, yend)
    368              CASE default ! do nothing here
    369              END SELECT
    370           ELSE
    371 ! <ERROR STATUS="FATAL">No domain available</ERROR>
    372              CALL error_mesg('diag_util_mod::get_subfield_size', 'NO domain available', FATAL)
    373           END IF
    374        END DO
    375     END IF
    376 
    377     CALL get_axes_shift(axes, ishift, jshift)
    378     xend = xend+ishift
    379     yend = yend+jshift
    380 
    381     IF ( xbegin == -1 .OR. xend == -1 .OR. ybegin == -1 .OR. yend == -1 ) THEN
    382 ! <ERROR STATUS="FATAL">wrong compute domain indices</ERROR>
    383        CALL error_mesg('diag_util_mod::get_subfield_size', 'wrong compute domain indices',FATAL)
    384     END IF
    385 
    386 ! get the area containing BOTH compute domain AND local output area
    387     IF( gstart_indx(1) > xend .OR. xbegin > gend_indx(1) ) THEN
    388        output_fields(outnum)%output_grid%l_start_indx(1) = -1
    389        output_fields(outnum)%output_grid%l_end_indx(1) = -1

Page 9           Source Listing                  GET_SUBFIELD_SIZE
2021-06-01 08:54                                 diag_util.F90

    390        output_fields(outnum)%need_compute = .FALSE. ! not involved
    391     ELSEIF ( gstart_indx(2) > yend .OR. ybegin > gend_indx(2) ) THEN
    392        output_fields(outnum)%output_grid%l_start_indx(2) = -1
    393        output_fields(outnum)%output_grid%l_end_indx(2) = -1
    394        output_fields(outnum)%need_compute = .FALSE. ! not involved
    395     ELSE
    396        output_fields(outnum)%output_grid%l_start_indx(1) = MAX(xbegin, gstart_indx(1))
    397        output_fields(outnum)%output_grid%l_start_indx(2) = MAX(ybegin, gstart_indx(2))
    398        output_fields(outnum)%output_grid%l_end_indx(1) = MIN(xend, gend_indx(1))
    399        output_fields(outnum)%output_grid%l_end_indx(2) = MIN(yend, gend_indx(2))
    400        output_fields(outnum)%need_compute = .TRUE.  ! involved in local output
    401     END IF
    402 
    403     IF ( output_fields(outnum)%need_compute ) THEN
    404 ! need to modify domain1d and domain2d for subaxes
    405        xbegin_l = output_fields(outnum)%output_grid%l_start_indx(1)
    406        xend_l = output_fields(outnum)%output_grid%l_end_indx(1)
    407        ybegin_l = output_fields(outnum)%output_grid%l_start_indx(2)
    408        yend_l = output_fields(outnum)%output_grid%l_end_indx(2)
    409        CALL mpp_modify_domain(Domain2, Domain2_new, xbegin_l,xend_l, ybegin_l,yend_l,&
    410             & gstart_indx(1),gend_indx(1), gstart_indx(2),gend_indx(2))
    411 
    412        output_fields(outnum)%output_grid%subaxes(1) =&
    413             & diag_subaxes_init(axes(1),subaxis_x, gstart_indx(1),gend_indx(1),Domain2_new)
    414        output_fields(outnum)%output_grid%subaxes(2) =&
    415             & diag_subaxes_init(axes(2),subaxis_y, gstart_indx(2),gend_indx(2),Domain2_new)
    416        DO i = 1, SIZE(axes(:))
    417           IF ( output_fields(outnum)%output_grid%subaxes(i) == -1 ) THEN
    418 ! <ERROR STATUS="FATAL">
    419 !   <output_fields(outnum)%output_name> error at i = <i>
    420 ! </ERROR>
    421              WRITE(msg,'(a,"/",I4)') 'at i = ',i
    422              CALL error_mesg('diag_util_mod::get_subfield_size '//TRIM(output_fields(outnum)%output_name),&
    423                   'error '//TRIM(msg), FATAL)
    424           END IF
    425        END DO
    426 
    427 ! local start index should start from 1
    428        output_fields(outnum)%output_grid%l_start_indx(1) = MAX(xbegin, gstart_indx(1)) - xbegin + 1
    429        output_fields(outnum)%output_grid%l_start_indx(2) = MAX(ybegin, gstart_indx(2)) - ybegin + 1
    430        output_fields(outnum)%output_grid%l_end_indx(1) = MIN(xend, gend_indx(1)) - xbegin + 1
    431        output_fields(outnum)%output_grid%l_end_indx(2) = MIN(yend, gend_indx(2)) - ybegin + 1
    432        IF ( SIZE(axes(:))>2 ) THEN
    433           output_fields(outnum)%output_grid%l_start_indx(3) = gstart_indx(3)
    434           output_fields(outnum)%output_grid%l_end_indx(3) = gend_indx(3)
    435        ELSE
    436           output_fields(outnum)%output_grid%l_start_indx(3) = 1
    437           output_fields(outnum)%output_grid%l_end_indx(3) = 1
    438        END IF
    439     END IF
    440     IF ( ALLOCATED(subaxis_x) ) DEALLOCATE(subaxis_x, global_lon)
    441     IF ( ALLOCATED(subaxis_y) ) DEALLOCATE(subaxis_y, global_lat)
    442   END SUBROUTINE get_subfield_size

Page 10          Source Listing                  GET_SUBFIELD_SIZE
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                           
                                                 
 diag_util_mod_mp_get_subfield_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   440                                  scalar                    440,441                           
 AXES                       Dummy  164      I(4)            4     1     1        ARG,IN           204,205,209,210,212,219,223,235,23
                                                                                                  9,252,258,263,274,291,293,295,296,
                                                                                                  310,311,313,326,336,341,352,357,35
                                                                                                  8,360,363,366,377,413,415,416,432 
 AXIS_DOMAIN_NAME           Local  184      CHAR            128   1     2                         204,205,207,208                   
 CART                       Local  171      CHAR            1           scalar                    212,213,313,317,360,361           
 DIAG_SUBAXES_INIT          Func   258      I(4)            4           scalar   PRIV             69,258,336,413,415,536            
 DOMAIN1                    Local  173      DOMAIN1D        176         scalar                    358,359                           
 DOMAIN1D                   Type   173                                  scalar                    83,173,1592                       
 DOMAIN1X                   Local  173      DOMAIN1D        176         scalar                    355,363,364                       
 DOMAIN1Y                   Local  173      DOMAIN1D        176         scalar                    355,366,367                       
 DOMAIN2                    Local  172      DOMAIN2D        752         scalar                    352,353,354,355,409               
 DOMAIN2D                   Type   172                                  scalar                    83,172,1593                       
 DOMAIN2_NEW                Local  172      DOMAIN2D        752         scalar                    409,413,415                       
 END                        Local  175      R(8)            8     1     3                         189,202,220,226,236,242,248,250,25
                                                                                                  4,287,288,322,324,329,331         
 ERROR_MESG                 Subr   216                                           PRIV             78,216,232,248,265,270,281,317,322
                                                                                                  ,372,383,422,484,491,500,515,521,5
                                                                                                  45,556,588,996,1001,1017,1080,1246
                                                                                                  ,1304,1319,1332,1350,1368,1382,143
                                                                                                  1,1437,1450,1545,1617,1672,1763,17
                                                                                                  80,1799,1897,2161,2169,2335,2354,2
                                                                                                  359,2364,2387,2417,2420,2557      
 FATAL                      Param  217      I(4)            4           scalar   PRIV             78,217,233,249,266,270,282,318,323
                                                                                                  ,372,383,423,485,492,502,517,522,5
                                                                                                  45,557,588,998,1019,1081,1247,1305
                                                                                                  ,1320,1334,1351,1369,1383,1432,143
                                                                                                  8,1451,1546,1618,1674,1781,1899,21
                                                                                                  71,2336,2354,2359,2364,2388,2417,2
                                                                                                  558                               
 GEND_INDX                  Local  177      I(4)            4     1     3                         191,222,226,228,229,238,242,244,24
                                                                                                  5,254,255,256,258,262,275,289,290,
                                                                                                  301,302,303,304,305,306,329,331,33
                                                                                                  3,334,336,340,387,391,398,399,410,
                                                                                                  413,415,430,431,434               
 GET_AXES_SHIFT             Subr   377                                           PRIV             70,377                            
 GET_AXIS_GLOBAL_LENGTH     Func   210      I(4)            4           scalar   PRIV             68,210,291,293,311,478            
 GET_DIAG_AXIS_CART         Subr   212                                           PRIV             68,212,313,360,480                
 GET_DIAG_AXIS_DATA         Subr   219                                           PRIV             68,219,235,252,295,296,326,525    
 GET_DIAG_AXIS_DOMAIN_NAME  Subr   204                                           PRIV             70,204,205                        
 GET_DOMAIN1D               Func   358      RECORD          176         scalar   PRIV             69,358,363,366                    
 GET_DOMAIN2D               Func   352      RECORD          752         scalar   PRIV             69,352,1660                       
 GET_INDEX@0                Local  225      I(4)            4           scalar                                                      

Page 11          Source Listing                  GET_SUBFIELD_SIZE
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_LOCAL_INDEXES          Subr   287                                           PRIV             77,287                            
 GET_SUBFIELD_SIZE          Subr   164                                                                                              
 GLOBAL_AXIS_SIZE           Local  169      I(4)            4           scalar                    210,218,222,234,238,251,262,291,29
                                                                                                  2,300,302,311,325,330,331,340     
 GLOBAL_AXIS_SIZEY          Local  169      I(4)            4           scalar                    293,294,300,302                   
 GLOBAL_DEPTH               Local  168      R(8)            8     1     1        ALC              251,252,253,254,256,259,325,326,32
                                                                                                  7,329,330,331,334,337             
 GLOBAL_LAT                 Local  168      R(8)            8     1     1        ALC              234,235,241,242,245,294,296,306,44
                                                                                                  1                                 
 GLOBAL_LON                 Local  168      R(8)            8     1     1        ALC              218,219,225,226,229,292,295,305,44
                                                                                                  0                                 
 GLO_REG_VAL                Param  197      I(4)            4           scalar   PRIV             65,197,1295                       
 GLO_REG_VAL_ALT            Param  195      I(4)            4           scalar   PRIV             65,195,1293                       
 GRV                        Local  183      I(4)            4           scalar                    195,197,220,236                   
 GSTART_INDX                Local  176      I(4)            4     1     3                         190,221,225,228,229,237,241,244,24
                                                                                                  5,253,255,256,258,261,275,289,290,
                                                                                                  299,300,303,304,305,306,327,328,33
                                                                                                  0,333,334,336,339,387,391,396,397,
                                                                                                  410,413,415,428,429,433           
 I                          Local  170      I(4)            4           scalar                    209,210,211,212,216,219,220,221,22
                                                                                                  2,223,225,226,228,229,232,235,236,
                                                                                                  237,238,239,241,242,244,245,248,25
                                                                                                  0,252,253,254,255,256,257,258,261,
                                                                                                  262,263,265,274,275,280,357,358,36
                                                                                                  0,363,366,416,417,421             
 INDEX                      Func   207                                  scalar                    207,208                           
 INT                        Func   220                                  scalar                    220,236                           
 ISHIFT                     Local  182      I(4)            4           scalar                    377,378                           
 JSHIFT                     Local  182      I(4)            4           scalar                    377,379                           
 LOWERCASE                  Func   207      CHAR                        scalar   TGT,PRIV         78,207,208,317,1228,1418,1478,1489
 MAX                        Func   396                                  scalar                    396,397,428,429                   
 MAXVAL                     Func   330                                  scalar                    330,331                           
 MIN                        Func   357                                  scalar                    357,398,399,430,431               
 MPP_DOMAIN1D_NE            Func   359      L(4)            4           scalar   PRIV             359                               
 MPP_DOMAIN2D_NE            Func   353      L(4)            4           scalar   PRIV             353,1662,1671                     
 MPP_GET_COMPUTE_DOMAIN     Local  354                                  scalar   PRIV             83,354,364,367                    
 MPP_GET_COMPUTE_DOMAIN1D   Subr   364                                           PRIV             364,367                           
 MPP_GET_COMPUTE_DOMAIN2D   Subr   354                                           PRIV             354                               
 MPP_GET_DOMAIN_COMPONENTS  Subr   355                                           PRIV             84,355                            
 MPP_MODIFY_DOMAIN          Local  409                                  scalar   PRIV             84,409                            
 MPP_MODIFY_DOMAIN2D        Subr   409                                           PRIV             409                               
 MSG                        Local  181      CHAR            128         scalar                    280,282,421,423                   
 NULL_DOMAIN1D              Local  359      DOMAIN1D        176         scalar   PRIV,SAVE        83,359                            
 NULL_DOMAIN2D              Local  353      DOMAIN2D        752         scalar   PRIV,SAVE        83,353,1651,1662,1671,1676,1680   
 OUTNUM                     Dummy  164      I(4)            4           scalar   ARG,IN           201,202,211,223,239,257,263,282,31
                                                                                                  2,335,341,388,389,390,392,393,394,
                                                                                                  396,397,398,399,400,403,405,406,40
                                                                                                  7,408,412,414,417,422,428,429,430,
                                                                                                  431,433,434,436,437               
 OUTPUT_FIELDS              Local  201      RECORD          3392  1     1        ALC,PRIV         57,201,202,211,223,239,257,263,282
                                                                                                  ,312,335,341,388,389,390,392,393,3
                                                                                                  94,396,397,398,399,400,403,405,406
                                                                                                  ,407,408,412,414,417,422,428,429,4
                                                                                                  30,431,433,434,436,437,470,471,479
                                                                                                  ,488,495,506,535,541,557,562,563,5

Page 12          Source Listing                  GET_SUBFIELD_SIZE
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  67,568,570,571,756,757,758,759,760
                                                                                                  ,761,774,775,776,777,778,779,781,7
                                                                                                  83,784,785,786,787,788,789,790,791
                                                                                                  ,792,793,794,798,799,800,801,802,8
                                                                                                  03,830,833,840,844,845,846,847,848
                                                                                                  ,849,851,853,854,855,856,857,858,8
                                                                                                  59,860,861,862,863,864,867,868,869
                                                                                                  ,870,871,872,887,888,889,890,891,8
                                                                                                  92,894,896,897,898,899,900,901,902
                                                                                                  ,903,904,905,906,907,910,911,912,9
                                                                                                  13,914,915,1339,1389,1392,1393,139
                                                                                                  4,1395,1396,1397,1398,1399,1400,14
                                                                                                  01,1402,1403,1406,1410,1411,1412,1
                                                                                                  413,1414,1415,1416,1421,1426,1433,
                                                                                                  1440,1446,1453,1454,1460,1464,1465
                                                                                                  ,1466,1470,1474,1475,1477,1479,148
                                                                                                  5,1486,1488,1490,1496,1497,1498,14
                                                                                                  99,1506,1507,1509,1516,1517,1518,1
                                                                                                  520,1521,1522,1525,1526,1527,1528,
                                                                                                  1529,1530,1532,1533,1534,1537,1538
                                                                                                  ,1539,1548,1553,1554,1555,1556,155
                                                                                                  7,1656,1657,1660,1661,1665,1746,17
                                                                                                  54,1768,1771,1772,1776,1877,1884,1
                                                                                                  886,1890,1891,1905,1910,1927,1928,
                                                                                                  1929,1933,1935,1937,1953,1954,1957
                                                                                                  ,1959,1962,1963,1967,1968,1971,197
                                                                                                  3,1975,1976,1984,1985,1988,1990,19
                                                                                                  93,1994,1999,2000,2003,2005,2007,2
                                                                                                  008,2017,2018,2021,2023,2026,2027,
                                                                                                  2030,2031,2034,2036,2038,2039,2045
                                                                                                  ,2046,2049,2051,2054,2055,2058,205
                                                                                                  9,2062,2064,2066,2067,2424,2428,24
                                                                                                  29,2431,2432,2434,2443,2444,2472,2
                                                                                                  475,2476,2478,2479,2481,2490,2491,
                                                                                                  2576,2579,2581,2582,2625,2626,2628
                                                                                                  ,2629                             
 REGION_OUT_USE_ALT_VALUE   Local  194      L(4)            4           scalar   PRIV             65,194,1292                       
 SIZE                       Func   209                                  scalar                    209,274,310,357,416,432           
 START                      Local  174      R(8)            8     1     3                         188,201,220,225,236,241,248,250,25
                                                                                                  3,287,288,322,324,327,328,330     
 SUBAXIS_X                  Local  178      R(8)            8     1     1        ALC              228,229,303,305,413,440           
 SUBAXIS_Y                  Local  179      R(8)            8     1     1        ALC              244,245,304,306,415,441           
 SUBAXIS_Z                  Local  180      R(8)            8     1     1        ALC              255,256,258,259,333,334,336,337   
 TRIM                       Func   282                                  scalar                    282,422,423                       
 XBEGIN                     Local  170      I(4)            4           scalar                    347,354,364,381,387,396,428,430   
 XBEGIN_L                   Local  170      I(4)            4           scalar                    405,409                           
 XEND                       Local  170      I(4)            4           scalar                    348,354,364,378,381,387,398,430   
 XEND_L                     Local  170      I(4)            4           scalar                    406,409                           
 YBEGIN                     Local  170      I(4)            4           scalar                    349,354,367,381,391,397,429,431   
 YBEGIN_L                   Local  170      I(4)            4           scalar                    407,409                           
 YEND                       Local  170      I(4)            4           scalar                    350,354,367,379,381,391,399,431   
 YEND_L                     Local  170      I(4)            4           scalar                    408,409                           



Page 13          Source Listing                  GET_SUBFIELD_SIZE
2021-06-01 08:54 Symbol Table                    diag_util.F90

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 DIAG_GRID.END              R(8)            8     24       1     3                         202,471,1528,1529,1530             
 DIAG_GRID.L_END_INDX       I(4)            4     60       1     3                         389,393,398,399,406,408,430,431,43 
                                                                                           4,437,563,568,571,1533             
 DIAG_GRID.L_START_INDX     I(4)            4     48       1     3                         388,392,396,397,405,407,428,429,43 
                                                                                           3,436,562,567,570,1532             
 DIAG_GRID.START            R(8)            8     0        1     3                         201,470,1525,1526,1527             
 DIAG_GRID.SUBAXES          I(4)            4     72       1     3                         211,223,239,257,263,312,335,341,41 
                                                                                           2,414,417,479,488,495,506,535,541, 
                                                                                           1534                               
 OUTPUT_FIELD_TYPE.NEED_COMPUTE                                                                                            ...
                            L(4)            4     3252           scalar                    390,394,400,403,1517,1521,1538,165 
                                                                                           6,1768,1886,2579                   
 OUTPUT_FIELD_TYPE.OUTPUT_GRID                                                                                             ...
                            DIAG_GRID       88    3160           scalar                    201,202,211,223,239,257,263,312,33 
                                                                                           5,341,388,389,392,393,396,397,398, 
                                                                                           399,405,406,407,408,412,414,417,42 
                                                                                           8,429,430,431,433,434,436,437,470, 
                                                                                           471,479,488,495,506,535,541,562,56 
                                                                                           3,567,568,570,571,1525,1526,1527,1 
                                                                                           528,1529,1530,1532,1533,1534       
 OUTPUT_FIELD_TYPE.OUTPUT_NAME                                                                                             ...
                            CHAR            128   8              scalar                    282,422,557,781,851,894,1392,1475, 
                                                                                           1477,1479,1486,1488,1490,1497,1498 
                                                                                           ,1499,1776,1905,1910,1954,1968,198 
                                                                                           5,2000,2018,2031,2046,2059,2424,26 
                                                                                           25,2628                            

Page 14          Source Listing                  GET_SUBFIELD_SIZE
2021-06-01 08:54                                 diag_util.F90

    443 
    444 !> @brief Get size, start and end indices for output fields.
    445   SUBROUTINE get_subfield_vert_size(axes, outnum)
    446     INTEGER, DIMENSION(:), INTENT(in) :: axes !< axes of the input_field
    447     INTEGER, INTENT(in) :: outnum  !< position in array output_fields
    448 
    449     REAL, DIMENSION(3) :: start !< start and end coordinates in 3 axes
    450     REAL, DIMENSION(3) :: end !< start and end coordinates in 3 axes
    451     REAL, ALLOCATABLE, DIMENSION(:) :: global_depth
    452     REAL, ALLOCATABLE, DIMENSION(:) :: subaxis_z !< containing local coordinates in x,y,z axes
    453     INTEGER :: i, global_axis_size
    454     INTEGER, DIMENSION(3) :: gstart_indx !< global start and end indices of output domain in 3 axes
    455     INTEGER, DIMENSION(3) :: gend_indx !< global start and end indices of output domain in 3 axes
    456     CHARACTER(len=1) :: cart
    457     CHARACTER(len=128) :: msg
    458 !----------
    459 !ug support
    460     integer :: vert_dim_num
    461 !----------
    462 
    463 !initilization for local output
    464     start = -1.e10
    465     end = -1.e10 ! initially out of (lat/lon/depth) range
    466     gstart_indx = -1
    467     gend_indx=-1
    468 
    469 ! get axis data (lat, lon, depth) and indices
    470     start= output_fields(outnum)%output_grid%start
    471     end = output_fields(outnum)%output_grid%end
    472 
    473 !----------
    474 !ug support
    475     vert_dim_num = 3
    476 !----------
    477     DO i = 1, SIZE(axes(:))
    478        global_axis_size = get_axis_global_length(axes(i))
    479        output_fields(outnum)%output_grid%subaxes(i) = -1
    480        CALL get_diag_axis_cart(axes(i), cart)
    481        SELECT CASE(cart)
    482        CASE ('X')
    483 ! <ERROR STATUS="FATAL">wrong order of axes, X should come first</ERROR>
    484           IF ( i.NE.1 ) CALL error_mesg('diag_util_mod::get_subfield_vert_size',&
    485                & 'wrong order of axes, X should come first',FATAL)
    486           gstart_indx(i) = 1
    487           gend_indx(i) = global_axis_size
    488           output_fields(outnum)%output_grid%subaxes(i) = axes(i)
    489        CASE ('Y')
    490 ! <ERROR STATUS="FATAL">wrong order of axes, Y should come second</ERROR>
    491           IF( i.NE.2 ) CALL error_mesg('diag_util_mod::get_subfield_vert_size',&
    492                & 'wrong order of axes, Y should come second',FATAL)
    493           gstart_indx(i) = 1
    494           gend_indx(i) = global_axis_size
    495           output_fields(outnum)%output_grid%subaxes(i) = axes(i)
    496 !----------
    497 !ug support
    498        case ("U")
    499            if (i .ne. 1) then

Page 15          Source Listing                  GET_SUBFIELD_VERT_SIZE
2021-06-01 08:54                                 diag_util.F90

    500                call error_mesg("diag_util_mod::get_subfield_vert_size", &
    501                                "the unstructured axis must be the first dimension.", &
    502                                FATAL)
    503            endif
    504            gstart_indx(i) = 1
    505            gend_indx(i) = global_axis_size
    506            output_fields(outnum)%output_grid%subaxes(i) = axes(i)
    507            vert_dim_num = 2
    508            start(vert_dim_num) = start(3)
    509            end(vert_dim_num) = end(3)
    510 !----------
    511        CASE ('Z')
    512 !----------
    513 !ug support
    514           if (i .ne. vert_dim_num) then
    515               call error_mesg("diag_util_mod::get_subfield_vert_size",&
    516                               "i should equal vert_dim_num for z axis", &
    517                               FATAL)
    518           endif
    519 !----------
    520 ! <ERROR STATUS="FATAL">wrong values in vertical axis of region</ERROR>
    521           IF( start(i)*END(i) < 0. ) CALL error_mesg('diag_util_mod::get_subfield_vert_size',&
    522                & 'wrong values in vertical axis of region',FATAL)
    523           IF( start(i) >= 0. .AND. END(i) > 0. ) THEN
    524              ALLOCATE(global_depth(global_axis_size))
    525              CALL get_diag_axis_data(axes(i),global_depth)
    526              gstart_indx(i) = get_index(start(i),global_depth)
    527              IF( start(i) == 0.0 )  gstart_indx(i) = 1
    528 
    529              gend_indx(i) = get_index(END(i),global_depth)
    530              IF( start(i) >= MAXVAL(global_depth) ) gstart_indx(i)= global_axis_size
    531              IF( END(i)   >= MAXVAL(global_depth) ) gend_indx(i)  = global_axis_size
    532 
    533              ALLOCATE(subaxis_z(gstart_indx(i):gend_indx(i)))
    534              subaxis_z=global_depth(gstart_indx(i):gend_indx(i))
    535              output_fields(outnum)%output_grid%subaxes(i) = &
    536                     diag_subaxes_init(axes(i),subaxis_z, gstart_indx(i),gend_indx(i))
    537              DEALLOCATE(subaxis_z,global_depth)
    538           ELSE !   vertical axis is the same as global vertical axis
    539              gstart_indx(i) = 1
    540              gend_indx(i) = global_axis_size
    541              output_fields(outnum)%output_grid%subaxes(i) = axes(i)
    542           END IF
    543        CASE default
    544 ! <ERROR STATUS="FATAL">Wrong axis_cart</ERROR>
    545           CALL error_mesg('diag_util_mod::get_subfield_vert_size', 'Wrong axis_cart', FATAL)
    546        END SELECT
    547     END DO
    548 
    549     DO i = 1,SIZE(axes(:))
    550        IF ( gstart_indx(i) == -1 .OR. gend_indx(i) == -1 ) THEN
    551 ! <ERROR STATUS="FATAL">
    552 !   can not find gstart_indx/gend_indx for <output_fields(outnum)%output_name>
    553 !   check region bounds for axis
    554 ! </ERROR>
    555           WRITE(msg,'(A,I2)') ' check region bounds for axis ', i
    556           CALL error_mesg('diag_util_mod::get_subfield_vert_size', 'can not find gstart_indx/gend_indx for '&

Page 16          Source Listing                  GET_SUBFIELD_VERT_SIZE
2021-06-01 08:54                                 diag_util.F90

    557                & //TRIM(output_fields(outnum)%output_name)//','//TRIM(msg), FATAL)
    558        END IF
    559     END DO
    560 
    561     DO i= 1, 2
    562        output_fields(outnum)%output_grid%l_start_indx(i) = gstart_indx(i)
    563        output_fields(outnum)%output_grid%l_end_indx(i)   = gend_indx(i)
    564     END DO
    565 
    566     IF( SIZE(axes(:)) > 2 ) THEN
    567        output_fields(outnum)%output_grid%l_start_indx(3) = gstart_indx(3)
    568        output_fields(outnum)%output_grid%l_end_indx(3)   = gend_indx(3)
    569     ELSE
    570        output_fields(outnum)%output_grid%l_start_indx(3) = 1
    571        output_fields(outnum)%output_grid%l_end_indx(3)   = 1
    572     END IF
    573   END SUBROUTINE get_subfield_vert_size


ENTRY POINTS

  Name                                                
                                                      
 diag_util_mod_mp_get_subfield_vert_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXES                       Dummy  445      I(4)            4     1     1        ARG,IN           477,478,480,488,495,506,525,536,54
                                                                                                  1,549,566                         
 CART                       Local  456      CHAR            1           scalar                    480,481                           
 END                        Local  450      R(8)            8     1     3                         465,471,509,521,523,529,531       
 GEND_INDX                  Local  455      I(4)            4     1     3                         467,487,494,505,529,531,533,534,53
                                                                                                  6,540,550,563,568                 
 GET_SUBFIELD_VERT_SIZE     Subr   445                                                                                              
 GLOBAL_AXIS_SIZE           Local  453      I(4)            4           scalar                    478,487,494,505,524,530,531,540   
 GLOBAL_DEPTH               Local  451      R(8)            8     1     1        ALC              524,525,526,529,530,531,534,537   
 GSTART_INDX                Local  454      I(4)            4     1     3                         466,486,493,504,526,527,530,533,53
                                                                                                  4,536,539,550,562,567             
 I                          Local  453      I(4)            4           scalar                    477,478,479,480,484,486,487,488,49
                                                                                                  1,493,494,495,499,504,505,506,514,
                                                                                                  521,523,525,526,527,529,530,531,53
                                                                                                  3,534,535,536,539,540,541,549,550,
                                                                                                  555,561,562,563                   
 MAXVAL                     Func   530                                  scalar                    530,531                           
 MSG                        Local  457      CHAR            128         scalar                    555,557                           
 OUTNUM                     Dummy  445      I(4)            4           scalar   ARG,IN           470,471,479,488,495,506,535,541,55
                                                                                                  7,562,563,567,568,570,571         
 SIZE                       Func   477                                  scalar                    477,549,566                       
 START                      Local  449      R(8)            8     1     3                         464,470,508,521,523,526,527,530   
 SUBAXIS_Z                  Local  452      R(8)            8     1     1        ALC              533,534,536,537                   
 TRIM                       Func   557                                  scalar                    557                               
 VERT_DIM_NUM               Local  460      I(4)            4           scalar                    475,507,508,509,514               

Page 17          Source Listing                  GET_SUBFIELD_VERT_SIZE
2021-06-01 08:54                                 diag_util.F90

    574 
    575 !> @brief Find index <TT>i</TT> of array such that <TT>array(i)</TT> is closest to number.
    576   INTEGER FUNCTION get_index(number, array)
    577     REAL, INTENT(in) :: number
    578     REAL, INTENT(in), DIMENSION(:) :: array
    579 
    580     INTEGER :: i, n
    581     LOGICAL :: found
    582 
    583     n = SIZE(array(:))
    584 ! check if array is monotonous
    585     DO i = 2, n-1
    586        IF( (array(i-1)<array(i).AND.array(i)>array(i+1)) .OR. (array(i-1)>array(i).AND.array(i)<array(i+1))) THEN
    587 ! <ERROR STATUS="FATAL">array NOT monotonously ordered</ERROR>
    588           CALL error_mesg('diag_util_mod::get_index', 'array NOT monotonously ordered',FATAL)
    589        END IF
    590     END DO
    591     get_index = -1
    592     found = .FALSE.
    593 ! search in increasing array
    594     DO i = 1, n-1
    595        IF ( (array(i)<=number).AND.(array(i+1)>= number) ) THEN
    596           IF( number - array(i) <= array(i+1) - number ) THEN
    597              get_index = i
    598              found=.TRUE.
    599           ELSE
    600              get_index = i+1
    601              found=.TRUE.
    602           ENDIF
    603           EXIT
    604        END IF
    605     END DO
    606 ! if not found, search in decreasing array
    607     IF( .NOT.found ) THEN
    608        DO i = 1, n-1
    609           IF ( (array(i)>=number).AND.(array(i+1)<= number) ) THEN
    610              IF ( array(i)-number <= number-array(i+1) ) THEN
    611                 get_index = i
    612                 found = .TRUE.
    613              ELSE
    614                 get_index = i+1
    615                 found = .TRUE.
    616              END IF
    617              EXIT
    618           END IF
    619        END DO
    620     END IF
    621 ! if still not found, is it less than the first element
    622 ! or greater than last element? (Increasing Array)
    623 ! But it must be within 2x the axis spacing
    624 ! i.e. array(1)-(array(3)-array(1)).LT.number .AND. or 2*array(1)-array(3).LT.number
    625     IF ( .NOT. found ) THEN
    626        IF ( 2*array(1)-array(3).LT.number .AND. number.LT.array(1) ) THEN
    627           get_index = 1
    628           found = .TRUE.
    629        ELSE IF ( array(n).LT.number .AND. number.LT.2*array(n)-array(n-2) ) THEN
    630           get_index = n

Page 18          Source Listing                  GET_INDEX
2021-06-01 08:54                                 diag_util.F90

    631           found = .TRUE.
    632        ELSE
    633           found = .FALSE.
    634        END IF
    635     END IF
    636 
    637 ! if still not found, is it greater than the first element
    638 ! or less than the last element? (Decreasing Array)
    639 ! But it must be within 2x the axis spacing (see above)
    640     IF ( .NOT. found ) THEN
    641        IF ( 2*array(1)-array(3).GT.number .AND. number.GT.array(1) ) THEN
    642           get_index = 1
    643           found = .TRUE.
    644        ELSE IF ( array(n).GT.number .AND. number.GT.2*array(n)-array(n-2) ) THEN
    645           get_index = n
    646           found = .TRUE.
    647        ELSE
    648           found = .FALSE.
    649        END IF
    650     END IF
    651   END FUNCTION get_index


ENTRY POINTS

  Name                                   
                                         
 diag_util_mod_mp_get_index_             

Page 19          Source Listing                  GET_INDEX
2021-06-01 08:54 Symbol Table                    diag_util.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY                      Dummy  576      R(8)            8     1     1        ARG,IN           583,586,595,596,609,610,626,629,64
                                                                                                  1,644                             
 FOUND                      Local  581      L(4)            4           scalar                    592,598,601,607,612,615,625,628,63
                                                                                                  1,633,640,643,646,648             
 GET_INDEX                  Func   576      I(4)            4           scalar                    225,226,241,242,253,254,327,329,52
                                                                                                  6,529,591,597,600,611,614,627,630,
                                                                                                  642,645                           
 I                          Local  580      I(4)            4           scalar                    585,586,594,595,596,597,600,608,60
                                                                                                  9,610,611,614                     
 N                          Local  580      I(4)            4           scalar                    583,585,594,608,629,630,644,645   
 NUMBER                     Dummy  576      R(8)            8           scalar   ARG,IN           595,596,609,610,626,629,641,644   
 SIZE                       Func   583                                  scalar                    583                               

Page 20          Source Listing                  GET_INDEX
2021-06-01 08:54                                 diag_util.F90

    652 
    653 !> @brief Writes brief diagnostic field info to the log file.
    654 !! @details If the <TT>do_diag_field_log</TT> namelist parameter is .TRUE.,
    655 !!     then a line briefly describing diagnostic field is added to
    656 !!     the log file.  Normally users should not call this subroutine
    657 !!     directly, since it is called by register_static_field and
    658 !!     register_diag_field if do_not_log is not set to .TRUE..  It is
    659 !!     used, however, in LM3 to avoid excessive logs due to the
    660 !!     number of fields registered for each of the tile types.  LM3
    661 !!     code uses a do_not_log parameter in the registration calls,
    662 !!     and subsequently calls this subroutine to log field information
    663 !!     under a generic name.
    664   SUBROUTINE log_diag_field_info(module_name, field_name, axes, long_name, units,&
    665        & missing_value, range, dynamic)
    666     CHARACTER(len=*), INTENT(in) :: module_name !< Module name
    667     CHARACTER(len=*), INTENT(in) :: field_name !< Field name
    668     INTEGER, DIMENSION(:), INTENT(in) :: axes !< Axis IDs
    669     CHARACTER(len=*), OPTIONAL, INTENT(in) :: long_name !< Long name for field.
    670     CHARACTER(len=*), OPTIONAL, INTENT(in) :: units !< Unit of field.
    671     REAL, OPTIONAL, INTENT(in) :: missing_value !< Missing value value.
    672     REAL, DIMENSION(2), OPTIONAL, INTENT(IN) :: range !< Valid range of values for field.
    673     LOGICAL, OPTIONAL, INTENT(in) :: dynamic !< <TT>.TRUE.</TT> if field is not static.
    674 
    675 ! ---- local vars
    676     CHARACTER(len=256) :: lmodule, lfield, lname, lunits
    677     CHARACTER(len=64)  :: lmissval, lmin, lmax
    678     CHARACTER(len=8)   :: numaxis, timeaxis
    679     CHARACTER(len=1)   :: sep = '|'
    680     CHARACTER(len=256) :: axis_name, axes_list
    681     INTEGER :: i
    682 
    683     IF ( .NOT.do_diag_field_log ) RETURN
    684     IF ( mpp_pe().NE.mpp_root_pe() ) RETURN
    685 
    686     lmodule = TRIM(module_name)
    687     lfield = TRIM(field_name)
    688 
    689     IF ( PRESENT(long_name) ) THEN
    690        lname  = TRIM(long_name)
    691     ELSE
    692        lname  = ''
    693     END IF
    694 
    695     IF ( PRESENT(units) ) THEN
    696        lunits = TRIM(units)
    697     ELSE
    698        lunits = ''
    699     END IF
    700 
    701     WRITE (numaxis,'(i1)') SIZE(axes)
    702 
    703     IF (PRESENT(missing_value)) THEN
    704        IF ( use_cmor ) THEN
    705           WRITE (lmissval,*) CMOR_MISSING_VALUE
    706        ELSE
    707           WRITE (lmissval,*) missing_value
    708        END IF

Page 21          Source Listing                  LOG_DIAG_FIELD_INFO
2021-06-01 08:54                                 diag_util.F90

    709     ELSE
    710        lmissval = ''
    711     ENDIF
    712 
    713     IF ( PRESENT(range) ) THEN
    714        WRITE (lmin,*) range(1)
    715        WRITE (lmax,*) range(2)
    716     ELSE
    717        lmin = ''
    718        lmax = ''
    719     END IF
    720 
    721     IF ( PRESENT(dynamic) ) THEN
    722        IF (dynamic) THEN
    723           timeaxis = 'T'
    724        ELSE
    725           timeaxis = 'F'
    726        END IF
    727     ELSE
    728        timeaxis = ''
    729     END IF
    730 
    731     axes_list=''
    732     DO i = 1, SIZE(axes)
    733        CALL get_diag_axis_name(axes(i),axis_name)
    734        IF ( TRIM(axes_list) /= '' ) axes_list = TRIM(axes_list)//','
    735        axes_list = TRIM(axes_list)//TRIM(axis_name)
    736     END DO
    737 
    738 !write (diag_log_unit,'(8(a,a),a)') &
    739     WRITE (diag_log_unit,'(777a)') &
    740          & TRIM(lmodule),  sep, TRIM(lfield),  sep, TRIM(lname),    sep,&
    741          & TRIM(lunits),   sep, TRIM(numaxis), sep, TRIM(timeaxis), sep,&
    742          & TRIM(lmissval), sep, TRIM(lmin),    sep, TRIM(lmax),     sep,&
    743          & TRIM(axes_list)
    744   END SUBROUTINE log_diag_field_info

Page 22          Source Listing                  LOG_DIAG_FIELD_INFO
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                             
                                                   
 diag_util_mod_mp_log_diag_field_info_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXES                       Dummy  664      I(4)            4     1     1        ARG,IN           701,732,733                       
 AXES_LIST                  Local  680      CHAR            256         scalar                    731,734,735,743                   
 AXIS_NAME                  Local  680      CHAR            256         scalar                    733,735                           
 CMOR_MISSING_VALUE         Param  705      R(8)            8           scalar   PRIV             63,705                            
 DIAG_LOG_UNIT              Local  739      I(4)            4           scalar   PRIV             57,739                            
 DO_DIAG_FIELD_LOG          Local  683      L(4)            4           scalar   PRIV             57,683                            
 DYNAMIC                    Dummy  665      L(4)            4           scalar   ARG,IN           721,722                           
 FIELD_NAME                 Dummy  664      CHAR                        scalar   ARG,IN           687                               
 GET_DIAG_AXIS_NAME         Subr   733                                           PRIV             70,733                            
 I                          Local  681      I(4)            4           scalar                    732,733                           
 LFIELD                     Local  676      CHAR            256         scalar                    687,740                           
 LMAX                       Local  677      CHAR            64          scalar                    715,718,742                       
 LMIN                       Local  677      CHAR            64          scalar                    714,717,742                       
 LMISSVAL                   Local  677      CHAR            64          scalar                    705,707,710,742                   
 LMODULE                    Local  676      CHAR            256         scalar                    686,740                           
 LNAME                      Local  676      CHAR            256         scalar                    690,692,740                       
 LOG_DIAG_FIELD_INFO        Subr   664                                                                                              
 LONG_NAME                  Dummy  664      CHAR                        scalar   ARG,IN           689,690                           
 LUNITS                     Local  676      CHAR            256         scalar                    696,698,741                       
 MISSING_VALUE              Dummy  665      R(8)            8           scalar   ARG,IN           703,707                           
 MODULE_NAME                Dummy  664      CHAR                        scalar   ARG,IN           686                               
 MPP_PE                     Func   684      I(4)            4           scalar   PRIV             78,684,1758,1892,2161,2169        
 MPP_ROOT_PE                Func   684      I(4)            4           scalar   PRIV             78,684,1758,1892,2161,2169        
 NUMAXIS                    Local  678      CHAR            8           scalar                    701,741                           
 PRESENT                    Func   689                                  scalar                    689,695,703,713,721               
 RANGE                      Dummy  665      R(8)            8     1     2        ARG,IN           713,714,715                       
 SEP                        Local  679      CHAR            1           scalar                    679,740,741,742                   
 SIZE                       Func   701                                  scalar                    701,732                           
 TIMEAXIS                   Local  678      CHAR            8           scalar                    723,725,728,741                   
 TRIM                       Func   686                                  scalar                    686,687,690,696,734,735,740,741,74
                                                                                                  2,743                             
 UNITS                      Dummy  664      CHAR                        scalar   ARG,IN           695,696                           
 USE_CMOR                   Local  704      L(4)            4           scalar   PRIV             63,704                            

Page 23          Source Listing                  LOG_DIAG_FIELD_INFO
2021-06-01 08:54                                 diag_util.F90

    745 
    746 !> @brief Update the <TT>output_fields</TT> x, y, and z min and max boundaries (array indices).
    747   SUBROUTINE update_bounds(out_num, lower_i, upper_i, lower_j, upper_j, lower_k, upper_k)
    748     INTEGER, INTENT(in) :: out_num !< output field ID
    749     INTEGER, INTENT(in) :: lower_i !< Lower i bound.
    750     INTEGER, INTENT(in) :: upper_i !< Upper i bound.
    751     INTEGER, INTENT(in) :: lower_j !< Lower j bound.
    752     INTEGER, INTENT(in) :: upper_j !< Upper j bound.
    753     INTEGER, INTENT(in) :: lower_k !< Lower k bound.
    754     INTEGER, INTENT(in) :: upper_k !< Upper k bound.
    755 
    756     output_fields(out_num)%imin = MIN(output_fields(out_num)%imin, lower_i)
    757     output_fields(out_num)%imax = MAX(output_fields(out_num)%imax, upper_i)
    758     output_fields(out_num)%jmin = MIN(output_fields(out_num)%jmin, lower_j)
    759     output_fields(out_num)%jmax = MAX(output_fields(out_num)%jmax, upper_j)
    760     output_fields(out_num)%kmin = MIN(output_fields(out_num)%kmin, lower_k)
    761     output_fields(out_num)%kmax = MAX(output_fields(out_num)%kmax, upper_k)
    762   END SUBROUTINE update_bounds


ENTRY POINTS

  Name                                       
                                             
 diag_util_mod_mp_update_bounds_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LOWER_I                    Dummy  747      I(4)            4           scalar   ARG,IN           756                               
 LOWER_J                    Dummy  747      I(4)            4           scalar   ARG,IN           758                               
 LOWER_K                    Dummy  747      I(4)            4           scalar   ARG,IN           760                               
 MAX                        Func   757                                  scalar                    757,759,761                       
 MIN                        Func   756                                  scalar                    756,758,760                       
 OUT_NUM                    Dummy  747      I(4)            4           scalar   ARG,IN           756,757,758,759,760,761           
 UPDATE_BOUNDS              Subr   747                                                                                              
 UPPER_I                    Dummy  747      I(4)            4           scalar   ARG,IN           757                               
 UPPER_J                    Dummy  747      I(4)            4           scalar   ARG,IN           759                               
 UPPER_K                    Dummy  747      I(4)            4           scalar   ARG,IN           761                               


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 OUTPUT_FIELD_TYPE.IMAX     I(4)            4     3272           scalar                    757,775,790,798,845,860,867,888,90 
                                                                                           3,910,1398                         
 OUTPUT_FIELD_TYPE.IMIN     I(4)            4     3268           scalar                    756,774,789,799,844,859,868,887,90 
                                                                                           2,911,1401                         
 OUTPUT_FIELD_TYPE.JMAX     I(4)            4     3280           scalar                    759,777,792,800,847,862,869,890,90 
                                                                                           5,912,1399                         
 OUTPUT_FIELD_TYPE.JMIN     I(4)            4     3276           scalar                    758,776,791,801,846,861,870,889,90 
                                                                                           4,913,1402                         
 OUTPUT_FIELD_TYPE.KMAX     I(4)            4     3288           scalar                    761,779,794,802,849,864,871,892,90 
                                                                                           7,914,1400                         

Page 24          Source Listing                  UPDATE_BOUNDS
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 OUTPUT_FIELD_TYPE.KMIN     I(4)            4     3284           scalar                    760,778,793,803,848,863,872,891,90 
                                                                                           6,915,1403                         

Page 25          Source Listing                  UPDATE_BOUNDS
2021-06-01 08:54                                 diag_util.F90

    763 
    764 !> @brief Checks if the array indices for <TT>output_fields(out_num)</TT> are outside the <TT>output_fields(out_num)%buffer<
    764 /TT> upper
    765 !!     and lower bounds.
    766   SUBROUTINE check_out_of_bounds(out_num, diag_field_id, err_msg)
    767     INTEGER, INTENT(in) :: out_num !< Output field ID number.
    768     INTEGER, INTENT(in) :: diag_field_id !< Input field ID number.
    769     CHARACTER(len=*), INTENT(out) :: err_msg !< Return status of <TT>check_out_of_bounds</TT>.  An empty error string indica
    769 tes the x, y, and z indices are not outside the
    770 !!     buffer array boundaries.
    771 
    772     CHARACTER(len=128) :: error_string1, error_string2
    773 
    774     IF (   output_fields(out_num)%imin < LBOUND(output_fields(out_num)%buffer,1) .OR.&
    775          & output_fields(out_num)%imax > UBOUND(output_fields(out_num)%buffer,1) .OR.&
    776          & output_fields(out_num)%jmin < LBOUND(output_fields(out_num)%buffer,2) .OR.&
    777          & output_fields(out_num)%jmax > UBOUND(output_fields(out_num)%buffer,2) .OR.&
    778          & output_fields(out_num)%kmin < LBOUND(output_fields(out_num)%buffer,3) .OR.&
    779          & output_fields(out_num)%kmax > UBOUND(output_fields(out_num)%buffer,3) ) THEN
    780        WRITE(error_string1,'(a,"/",a)') TRIM(input_fields(diag_field_id)%module_name),&
    781             & TRIM(output_fields(out_num)%output_name)
    782        error_string2 ='Buffer bounds=   :   ,   :   ,   :     Actual bounds=   :   ,   :   ,   :   '
    783        WRITE(error_string2(15:17),'(i3)') LBOUND(output_fields(out_num)%buffer,1)
    784        WRITE(error_string2(19:21),'(i3)') UBOUND(output_fields(out_num)%buffer,1)
    785        WRITE(error_string2(23:25),'(i3)') LBOUND(output_fields(out_num)%buffer,2)
    786        WRITE(error_string2(27:29),'(i3)') UBOUND(output_fields(out_num)%buffer,2)
    787        WRITE(error_string2(31:33),'(i3)') LBOUND(output_fields(out_num)%buffer,3)
    788        WRITE(error_string2(35:37),'(i3)') UBOUND(output_fields(out_num)%buffer,3)
    789        WRITE(error_string2(54:56),'(i3)') output_fields(out_num)%imin
    790        WRITE(error_string2(58:60),'(i3)') output_fields(out_num)%imax
    791        WRITE(error_string2(62:64),'(i3)') output_fields(out_num)%jmin
    792        WRITE(error_string2(66:68),'(i3)') output_fields(out_num)%jmax
    793        WRITE(error_string2(70:72),'(i3)') output_fields(out_num)%kmin
    794        WRITE(error_string2(74:76),'(i3)') output_fields(out_num)%kmax
    795        err_msg = 'module/output_field='//TRIM(error_string1)//&
    796             & '  Bounds of buffer exceeded.  '//TRIM(error_string2)
    797 !   imax, imin, etc need to be reset in case the program is not terminated.
    798        output_fields(out_num)%imax = 0
    799        output_fields(out_num)%imin = VERY_LARGE_AXIS_LENGTH
    800        output_fields(out_num)%jmax = 0
    801        output_fields(out_num)%jmin = VERY_LARGE_AXIS_LENGTH
    802        output_fields(out_num)%kmax = 0
    803        output_fields(out_num)%kmin = VERY_LARGE_AXIS_LENGTH
    804     ELSE
    805        err_msg = ''
    806     END IF
    807 
    808   END SUBROUTINE check_out_of_bounds

Page 26          Source Listing                  CHECK_OUT_OF_BOUNDS
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                             
                                                   
 diag_util_mod_mp_check_out_of_bounds_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_OUT_OF_BOUNDS        Subr   766                                                                                              
 DIAG_FIELD_ID              Dummy  766      I(4)            4           scalar   ARG,IN           780                               
 ERROR_STRING1              Local  772      CHAR            128         scalar                    780,795                           
 ERROR_STRING2              Local  772      CHAR            128         scalar                    782,783,784,785,786,787,788,789,79
                                                                                                  0,791,792,793,794,796             
 ERR_MSG                    Dummy  766      CHAR                        scalar   ARG,OUT          795,805                           
 INPUT_FIELDS               Local  780      RECORD          1072  1     1        ALC,PRIV         57,780,850,893,1226,1227,1228,1254
                                                                                                  ,1255,1256,1258,1259,1260,1261,126
                                                                                                  2,1263,1264,1324,1325,1326,1336,15
                                                                                                  12,1513,1755,1756,1757,1885,1951,1
                                                                                                  952,1955,1956,1957,1958,1960,1961,
                                                                                                  1969,1970,1971,1972,1974,1983,1986
                                                                                                  ,1987,1988,1991,1992,2001,2002,200
                                                                                                  3,2006,2015,2016,2019,2020,2021,20
                                                                                                  22,2024,2025,2032,2033,2034,2035,2
                                                                                                  037,2044,2047,2048,2049,2052,2053,
                                                                                                  2060,2061,2062,2065,2444,2491,2578
 LBOUND                     Func   774                                  scalar                    774,776,778,783,785,787           
 OUT_NUM                    Dummy  766      I(4)            4           scalar   ARG,IN           774,775,776,777,778,779,781,783,78
                                                                                                  4,785,786,787,788,789,790,791,792,
                                                                                                  793,794,798,799,800,801,802,803   
 TRIM                       Func   780                                  scalar                    780,781,795,796                   
 UBOUND                     Func   775                                  scalar                    775,777,779,784,786,788           
 VERY_LARGE_AXIS_LENGTH     Param  799      I(4)            4           scalar   PRIV             58,799,801,803,868,870,872,911,913
                                                                                                  ,915,1401,1402,1403               


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 INPUT_FIELD_TYPE.MODULE_NAME                                                                                              ...
                            CHAR            128   0              scalar                    780,850,893,1227,1254,1756         
 OUTPUT_FIELD_TYPE.BUFFER   R(8)            8     224      4     1        ALC              774,775,776,777,778,779,783,784,78 
                                                                                           5,786,787,788,844,845,846,847,848, 
                                                                                           849,853,854,855,856,857,858,887,88 
                                                                                           8,889,890,891,892,896,897,898,899, 
                                                                                           900,901,2582                       

Page 27          Source Listing                  CHECK_OUT_OF_BOUNDS
2021-06-01 08:54                                 diag_util.F90

    809 
    810 !> @brief  Check if the array indices for <TT>output_fields(out_num)</TT> are equal to the <TT>output_fields(out_num)%buffer
    810 </TT>
    811 !!     upper and lower bounds.
    812   SUBROUTINE check_bounds_are_exact_dynamic(out_num, diag_field_id, Time, err_msg)
    813     INTEGER, INTENT(in) :: out_num !< Output field ID number.
    814     INTEGER, INTENT(in) :: diag_field_id !< Input field ID number.
    815     TYPE(time_type), INTENT(in) :: Time !< Time to use in check.  The check is only performed if
    816 !! <TT>output_fields(out_num)%Time_of_prev_field_data</TT> is not
    817 !! equal to <TT>Time</TT> or <TT>Time_zero</TT>.
    818     CHARACTER(len=*), INTENT(out) :: err_msg !< Return status of <TT>check_bounds_are_exact_dynamic</TT>.
    819 !! An empty error string indicates the x, y, and z indices are
    820 !!     equal to the buffer array boundaries.
    821 
    822     CHARACTER(len=128) :: error_string1, error_string2
    823     LOGICAL :: do_check
    824 
    825     err_msg = ''
    826 
    827 ! Check bounds only when the value of Time changes. When windows are used,
    828 ! a change in Time indicates that a new loop through the windows has begun,
    829 !  so a check of the previous loop can be done.
    830     IF ( Time == output_fields(out_num)%Time_of_prev_field_data ) THEN
    831        do_check = .FALSE.
    832     ELSE
    833        IF ( output_fields(out_num)%Time_of_prev_field_data == Time_zero ) THEN
    834 ! It may or may not be OK to check, I don't know how to tell.
    835 ! Check will be done on subsequent calls anyway.
    836           do_check = .FALSE.
    837        ELSE
    838           do_check = .TRUE.
    839        END IF
    840        output_fields(out_num)%Time_of_prev_field_data = Time
    841     END IF
    842 
    843     IF ( do_check ) THEN
    844        IF (   output_fields(out_num)%imin /= LBOUND(output_fields(out_num)%buffer,1) .OR.&
    845             & output_fields(out_num)%imax /= UBOUND(output_fields(out_num)%buffer,1) .OR.&
    846             & output_fields(out_num)%jmin /= LBOUND(output_fields(out_num)%buffer,2) .OR.&
    847             & output_fields(out_num)%jmax /= UBOUND(output_fields(out_num)%buffer,2) .OR.&
    848             & output_fields(out_num)%kmin /= LBOUND(output_fields(out_num)%buffer,3) .OR.&
    849             & output_fields(out_num)%kmax /= UBOUND(output_fields(out_num)%buffer,3) ) THEN
    850           WRITE(error_string1,'(a,"/",a)') TRIM(input_fields(diag_field_id)%module_name),&
    851                & TRIM(output_fields(out_num)%output_name)
    852           error_string2 ='Buffer bounds=   :   ,   :   ,   :     Actual bounds=   :   ,   :   ,   :   '
    853           WRITE(error_string2(15:17),'(i3)') LBOUND(output_fields(out_num)%buffer,1)
    854           WRITE(error_string2(19:21),'(i3)') UBOUND(output_fields(out_num)%buffer,1)
    855           WRITE(error_string2(23:25),'(i3)') LBOUND(output_fields(out_num)%buffer,2)
    856           WRITE(error_string2(27:29),'(i3)') UBOUND(output_fields(out_num)%buffer,2)
    857           WRITE(error_string2(31:33),'(i3)') LBOUND(output_fields(out_num)%buffer,3)
    858           WRITE(error_string2(35:37),'(i3)') UBOUND(output_fields(out_num)%buffer,3)
    859           WRITE(error_string2(54:56),'(i3)') output_fields(out_num)%imin
    860           WRITE(error_string2(58:60),'(i3)') output_fields(out_num)%imax
    861           WRITE(error_string2(62:64),'(i3)') output_fields(out_num)%jmin
    862           WRITE(error_string2(66:68),'(i3)') output_fields(out_num)%jmax
    863           WRITE(error_string2(70:72),'(i3)') output_fields(out_num)%kmin
    864           WRITE(error_string2(74:76),'(i3)') output_fields(out_num)%kmax

Page 28          Source Listing                  CHECK_BOUNDS_ARE_EXACT_DYNAMIC
2021-06-01 08:54                                 diag_util.F90

    865           err_msg = TRIM(error_string1)//' Bounds of data do not match those of buffer. '//TRIM(error_string2)
    866        END IF
    867        output_fields(out_num)%imax = 0
    868        output_fields(out_num)%imin = VERY_LARGE_AXIS_LENGTH
    869        output_fields(out_num)%jmax = 0
    870        output_fields(out_num)%jmin = VERY_LARGE_AXIS_LENGTH
    871        output_fields(out_num)%kmax = 0
    872        output_fields(out_num)%kmin = VERY_LARGE_AXIS_LENGTH
    873     END IF
    874   END SUBROUTINE check_bounds_are_exact_dynamic


ENTRY POINTS

  Name                                                        
                                                              
 diag_util_mod_mp_check_bounds_are_exact_dynamic_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_BOUNDS_ARE_EXACT_DYN                                                                                                         
 AMIC                       Subr   812                                                                                              
 DIAG_FIELD_ID              Dummy  812      I(4)            4           scalar   ARG,IN           850                               
 DO_CHECK                   Local  823      L(4)            4           scalar                    831,836,838,843                   
 ERROR_STRING1              Local  822      CHAR            128         scalar                    850,865                           
 ERROR_STRING2              Local  822      CHAR            128         scalar                    852,853,854,855,856,857,858,859,86
                                                                                                  0,861,862,863,864,865             
 ERR_MSG                    Dummy  812      CHAR                        scalar   ARG,OUT          825,865                           
 LBOUND                     Func   844                                  scalar                    844,846,848,853,855,857           
 OUT_NUM                    Dummy  812      I(4)            4           scalar   ARG,IN           830,833,840,844,845,846,847,848,84
                                                                                                  9,851,853,854,855,856,857,858,859,
                                                                                                  860,861,862,863,864,867,868,869,87
                                                                                                  0,871,872                         
 TIME                       Dummy  812      TIME_TYPE       16          scalar   ARG,IN           830,840                           
 TIME_EQ                    Func   830      L(4)            4           scalar   PRIV             830,833,975                       
 TIME_TYPE                  Type   815                                  scalar                    87,815,933,1103,1130,1131,1564,156
                                                                                                  6,1568,2184,2324,2325,2329,2373,23
                                                                                                  77,2528,2532                      
 TIME_ZERO                  Local  833      TIME_TYPE       16          scalar   PRIV             58,833,1264                       
 TRIM                       Func   850                                  scalar                    850,851,865                       
 UBOUND                     Func   845                                  scalar                    845,847,849,854,856,858           


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 OUTPUT_FIELD_TYPE.TIME_OF_PREV_FIELD_DATA                                                                                 ...
                            TIME_TYPE       16    3292           scalar                    830,833,840                        

Page 29          Source Listing                  CHECK_BOUNDS_ARE_EXACT_DYNAMIC
2021-06-01 08:54                                 diag_util.F90

    875 
    876 !> @brief Check if the array indices for <TT>output_fields(out_num)</TT> are equal to the <TT>output_fields(out_num)%buffer<
    876 /TT>
    877 !!     upper and lower bounds.
    878   SUBROUTINE check_bounds_are_exact_static(out_num, diag_field_id, err_msg)
    879     INTEGER, INTENT(in) :: out_num !< Output field ID
    880     INTEGER, INTENT(in) :: diag_field_id !< Input field ID.
    881     CHARACTER(len=*), INTENT(out) :: err_msg
    882 
    883     CHARACTER(len=128)  :: error_string1, error_string2
    884 
    885     err_msg = ''
    886 
    887     IF (   output_fields(out_num)%imin /= LBOUND(output_fields(out_num)%buffer,1) .OR.&
    888          & output_fields(out_num)%imax /= UBOUND(output_fields(out_num)%buffer,1) .OR.&
    889          & output_fields(out_num)%jmin /= LBOUND(output_fields(out_num)%buffer,2) .OR.&
    890          & output_fields(out_num)%jmax /= UBOUND(output_fields(out_num)%buffer,2) .OR.&
    891          & output_fields(out_num)%kmin /= LBOUND(output_fields(out_num)%buffer,3) .OR.&
    892          & output_fields(out_num)%kmax /= UBOUND(output_fields(out_num)%buffer,3) ) THEN
    893        WRITE(error_string1,'(a,"/",a)') TRIM(input_fields(diag_field_id)%module_name),&
    894             & TRIM(output_fields(out_num)%output_name)
    895        error_string2 ='Buffer bounds=   :   ,   :   ,   :     Actual bounds=   :   ,   :   ,   :   '
    896        WRITE(error_string2(15:17),'(i3)') LBOUND(output_fields(out_num)%buffer,1)
    897        WRITE(error_string2(19:21),'(i3)') UBOUND(output_fields(out_num)%buffer,1)
    898        WRITE(error_string2(23:25),'(i3)') LBOUND(output_fields(out_num)%buffer,2)
    899        WRITE(error_string2(27:29),'(i3)') UBOUND(output_fields(out_num)%buffer,2)
    900        WRITE(error_string2(31:33),'(i3)') LBOUND(output_fields(out_num)%buffer,3)
    901        WRITE(error_string2(35:37),'(i3)') UBOUND(output_fields(out_num)%buffer,3)
    902        WRITE(error_string2(54:56),'(i3)') output_fields(out_num)%imin
    903        WRITE(error_string2(58:60),'(i3)') output_fields(out_num)%imax
    904        WRITE(error_string2(62:64),'(i3)') output_fields(out_num)%jmin
    905        WRITE(error_string2(66:68),'(i3)') output_fields(out_num)%jmax
    906        WRITE(error_string2(70:72),'(i3)') output_fields(out_num)%kmin
    907        WRITE(error_string2(74:76),'(i3)') output_fields(out_num)%kmax
    908        err_msg = TRIM(error_string1)//' Bounds of data do not match those of buffer. '//TRIM(error_string2)
    909     END IF
    910     output_fields(out_num)%imax = 0
    911     output_fields(out_num)%imin = VERY_LARGE_AXIS_LENGTH
    912     output_fields(out_num)%jmax = 0
    913     output_fields(out_num)%jmin = VERY_LARGE_AXIS_LENGTH
    914     output_fields(out_num)%kmax = 0
    915     output_fields(out_num)%kmin = VERY_LARGE_AXIS_LENGTH
    916 
    917   END SUBROUTINE check_bounds_are_exact_static

Page 30          Source Listing                  CHECK_BOUNDS_ARE_EXACT_STATIC
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                                       
                                                             
 diag_util_mod_mp_check_bounds_are_exact_static_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_BOUNDS_ARE_EXACT_STA                                                                                                         
 TIC                        Subr   878                                                                                              
 DIAG_FIELD_ID              Dummy  878      I(4)            4           scalar   ARG,IN           893                               
 ERROR_STRING1              Local  883      CHAR            128         scalar                    893,908                           
 ERROR_STRING2              Local  883      CHAR            128         scalar                    895,896,897,898,899,900,901,902,90
                                                                                                  3,904,905,906,907,908             
 ERR_MSG                    Dummy  878      CHAR                        scalar   ARG,OUT          885,908                           
 LBOUND                     Func   887                                  scalar                    887,889,891,896,898,900           
 OUT_NUM                    Dummy  878      I(4)            4           scalar   ARG,IN           887,888,889,890,891,892,894,896,89
                                                                                                  7,898,899,900,901,902,903,904,905,
                                                                                                  906,907,910,911,912,913,914,915   
 TRIM                       Func   893                                  scalar                    893,894,908                       
 UBOUND                     Func   888                                  scalar                    888,890,892,897,899,901           

Page 31          Source Listing                  CHECK_BOUNDS_ARE_EXACT_STATIC
2021-06-01 08:54                                 diag_util.F90

    918 
    919 !> @brief Initialize the output file.
    920   SUBROUTINE init_file(name, output_freq, output_units, format, time_units, long_name, tile_count,&
    921        & new_file_freq, new_file_freq_units, start_time, file_duration, file_duration_units, filename_time_bounds)
    922     CHARACTER(len=*), INTENT(in) :: name !< File name.
    923     CHARACTER(len=*), INTENT(in) :: long_name !< Long name for time axis.
    924     INTEGER, INTENT(in) :: output_freq !< How often data is to be written to the file.
    925     INTEGER, INTENT(in) :: output_units !< The output frequency unit.  (MIN, HOURS, DAYS, etc.)
    926     INTEGER, INTENT(in) :: format !< Number type/kind the data is to be written out to the file.
    927     INTEGER, INTENT(in) :: time_units !< Time axis units.
    928     INTEGER, INTENT(in) :: tile_count !< Tile number.
    929     INTEGER, INTENT(in), OPTIONAL :: new_file_freq !< How often a new file is to be created.
    930     INTEGER, INTENT(in), OPTIONAL :: new_file_freq_units !< The new file frequency unit.  (MIN, HOURS, DAYS, etc.)</IN>
    931     INTEGER, INTENT(in), OPTIONAL :: file_duration !< How long file is to be used.
    932     INTEGER, INTENT(in), OPTIONAL :: file_duration_units !< File duration unit.  (MIN, HOURS, DAYS, etc.)
    933     TYPE(time_type), INTENT(in), OPTIONAL :: start_time !< Time when the file is to start
    934     CHARACTER(len=*), INTENT(in), OPTIONAL :: filename_time_bounds !< Set time bound file name to
    935 ! use "begin" "middle" or "end"
    936     INTEGER :: new_file_freq1, new_file_freq_units1
    937     INTEGER :: file_duration1, file_duration_units1
    938     INTEGER :: n
    939     LOGICAL :: same_file_err !< .FALSE. indicates that if the file name had
    940 !! previously been registered, this new file
    941 !! contained differences from the previous.
    942     REAL, DIMENSION(1) :: tdata
    943     CHARACTER(len=128) :: time_units_str
    944 
    945 ! Check if this file has already been defined
    946     same_file_err=.FALSE. ! To indicate that if this file was previously defined
    947 ! no differences in this registration was detected.
    948     DO n=1,num_files
    949       IF ( TRIM(files(n)%name) == TRIM(name) ) THEN
    950 ! File is defined, check if all inputs are the same
    951 ! Start with the required parameters
    952         IF ( files(n)%output_freq.NE.output_freq .OR.&
    953            & files(n)%output_units.NE.output_units .OR.&
    954            & files(n)%format.NE.format .OR.&
    955            & files(n)%time_units.NE.time_units .OR.&
    956            & TRIM(files(n)%long_name).NE.TRIM(long_name) .OR.&
    957            & files(n)%tile_count.NE.tile_count ) THEN
    958            same_file_err=.TRUE.
    959         END IF
    960 
    961 ! Now check the OPTIONAL parameters
    962         IF ( PRESENT(new_file_freq) ) THEN
    963            IF ( files(n)%new_file_freq.NE.new_file_freq ) THEN
    964              same_file_err=.TRUE.
    965            END IF
    966         END IF
    967 
    968         IF ( PRESENT(new_file_freq_units) ) THEN
    969           IF ( files(n)%new_file_freq_units.NE.new_file_freq_units ) THEN
    970             same_file_err=.TRUE.
    971           END IF
    972         END IF
    973 
    974         IF ( PRESENT(start_time) ) THEN

Page 32          Source Listing                  INIT_FILE
2021-06-01 08:54                                 diag_util.F90

    975           IF ( files(n)%start_time==start_time ) THEN
    976             same_file_err=.TRUE.
    977           END IF
    978         END IF
    979 
    980         IF ( PRESENT(file_duration) ) THEN
    981           IF ( files(n)%duration.NE.file_duration) THEN
    982             same_file_err=.TRUE.
    983           END IF
    984         END IF
    985 
    986         IF ( PRESENT(file_duration_units) ) THEN
    987           IF ( files(n)%duration_units.NE.file_duration_units ) THEN
    988             same_file_err=.TRUE.
    989           END IF
    990         END IF
    991 
    992 ! If the same file was defined twice, simply return, else FATAL
    993         IF ( same_file_err ) THEN
    994 ! Something in this file is not identical to the previously defined
    995 ! file of the same name.  FATAL
    996           CALL error_mesg('diag_util_mod::init_file',&
    997                   & 'The file "'//TRIM(name)//'" is defined multiple times in&
    998                   & the diag_table.', FATAL)
    999         ELSE
   1000 ! Issue a note that the same file is defined multiple times
   1001           CALL error_mesg('diag_util_mod::init_file',&
   1002                   & 'The file "'//TRIM(name)//'" is defined multiple times in&
   1003                   & the diag_table.', NOTE)
   1004 ! Return to the calling function
   1005           RETURN
   1006         END IF
   1007       END IF
   1008     END DO
   1009 
   1010 ! Get a number for this file
   1011     num_files = num_files + 1
   1012     IF ( num_files >= max_files ) THEN
   1013 ! <ERROR STATUS="FATAL">
   1014 !   max_files exceeded, increase max_files via the max_files variable
   1015 !   in the namelist diag_manager_nml.
   1016 ! </ERROR>
   1017        CALL error_mesg('diag_util_mod::init_file',&
   1018             & ' max_files exceeded, increase max_files via the max_files variable&
   1019             & in the namelist diag_manager_nml.', FATAL)
   1020     END IF
   1021 
   1022     IF ( PRESENT(new_file_freq) ) THEN
   1023        new_file_freq1 = new_file_freq
   1024     ELSE
   1025        new_file_freq1 = VERY_LARGE_FILE_FREQ
   1026     END IF
   1027 
   1028     IF ( PRESENT(new_file_freq_units) ) THEN
   1029        new_file_freq_units1 = new_file_freq_units
   1030     ELSE IF ( get_calendar_type() == NO_CALENDAR ) THEN
   1031        new_file_freq_units1 = DIAG_DAYS

Page 33          Source Listing                  INIT_FILE
2021-06-01 08:54                                 diag_util.F90

   1032     ELSE
   1033        new_file_freq_units1 = DIAG_YEARS
   1034     END IF
   1035 
   1036     IF ( PRESENT(file_duration) ) THEN
   1037        file_duration1 = file_duration
   1038     ELSE
   1039        file_duration1 = new_file_freq1
   1040     END IF
   1041 
   1042     IF ( PRESENT(file_duration_units) ) THEN
   1043        file_duration_units1 = file_duration_units
   1044     ELSE
   1045        file_duration_units1 = new_file_freq_units1
   1046     END IF
   1047 
   1048     files(num_files)%tile_count = tile_count
   1049     files(num_files)%name = TRIM(name)
   1050     files(num_files)%output_freq = output_freq
   1051     files(num_files)%output_units = output_units
   1052     files(num_files)%format = FORMAT
   1053     files(num_files)%time_units = time_units
   1054     files(num_files)%long_name = TRIM(long_name)
   1055     files(num_files)%num_fields = 0
   1056     files(num_files)%local = .FALSE.
   1057     files(num_files)%last_flush = base_time
   1058     files(num_files)%file_unit = -1
   1059     files(num_files)%new_file_freq = new_file_freq1
   1060     files(num_files)%new_file_freq_units = new_file_freq_units1
   1061     files(num_files)%duration = file_duration1
   1062     files(num_files)%duration_units = file_duration_units1
   1063 !> Initialize the times to 0
   1064     files(num_files)%rtime_current = -1.0
   1065     files(num_files)%time_index = 0
   1066     files(num_files)%filename_time_bounds = filename_time_bounds
   1067 
   1068     IF ( PRESENT(start_time) ) THEN
   1069        files(num_files)%start_time = start_time
   1070     ELSE
   1071        files(num_files)%start_time = base_time
   1072     END IF
   1073     files(num_files)%next_open=diag_time_inc(files(num_files)%start_time,new_file_freq1,new_file_freq_units1)
   1074     files(num_files)%close_time = diag_time_inc(files(num_files)%start_time,file_duration1, file_duration_units1)
   1075     IF ( files(num_files)%close_time>files(num_files)%next_open ) THEN
   1076 ! <ERROR STATUS="FATAL">
   1077 !   close time GREATER than next_open time, check file duration,
   1078 !   file frequency in <files(num_files)%name>
   1079 ! </ERROR>
   1080        CALL error_mesg('diag_util_mod::init_file', 'close time GREATER than next_open time, check file duration,&
   1081             & file frequency in '//files(num_files)%name, FATAL)
   1082     END IF
   1083 
   1084 ! add time_axis_id and time_bounds_id here
   1085     WRITE(time_units_str, 11) TRIM(time_unit_list(files(num_files)%time_units)), base_year,&
   1086          & base_month, base_day, base_hour, base_minute, base_second
   1087 11  FORMAT(a, ' since ', i4.4, '-', i2.2, '-', i2.2, ' ', i2.2, ':', i2.2, ':', i2.2)
   1088     files(num_files)%time_axis_id = diag_axis_init (TRIM(long_name), tdata, time_units_str, 'T',&

Page 34          Source Listing                  INIT_FILE
2021-06-01 08:54                                 diag_util.F90

   1089          & TRIM(long_name) , set_name=TRIM(name) )
   1090 !---- register axis for storing time boundaries
   1091     files(num_files)%time_bounds_id = diag_axis_init( 'nv',(/1.,2./),'none','N','vertex number',&
   1092          & set_name='nv')
   1093   END SUBROUTINE init_file


ENTRY POINTS

  Name                                   
                                         
 diag_util_mod_mp_init_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 11                         Label  1087                                                           1085                              
 BASE_DAY                   Local  1086     I(4)            4           scalar   PRIV             60,1086,1606                      
 BASE_HOUR                  Local  1086     I(4)            4           scalar   PRIV             60,1086,1606                      
 BASE_MINUTE                Local  1086     I(4)            4           scalar   PRIV             60,1086,1606                      
 BASE_MONTH                 Local  1086     I(4)            4           scalar   PRIV             60,1086,1606                      
 BASE_SECOND                Local  1086     I(4)            4           scalar   PRIV             61,1086,1606                      
 BASE_TIME                  Local  1057     TIME_TYPE       16          scalar   PRIV             59,1057,1071,2396,2432,2434,2479,2
                                                                                                  481                               
 BASE_YEAR                  Local  1085     I(4)            4           scalar   PRIV             60,1085,1605                      
 DIAG_AXIS_INIT             Func   1088     I(4)            4           scalar   PRIV             69,1088,1091                      
 DIAG_DAYS                  Param  1031     I(4)            4           scalar   PRIV             59,1031,1171,2348                 
 DIAG_TIME_INC              Func   1073     RECORD          16          scalar                    102,1073,1074,1114,1120,1147,1154,
                                                                                                  1156,1160,1163,1167,1169,1173,1175
                                                                                                  ,1181,1187,2548,2550              
 DIAG_TIME_INC@0            Local  1073     TIME_TYPE       16          scalar                                                      
 DIAG_YEARS                 Param  1033     I(4)            4           scalar   PRIV             59,1033,1183,2355                 
 FILENAME_TIME_BOUNDS       Dummy  921      CHAR                        scalar   ARG,IN           1066                              
 FILES                      Local  949      RECORD          11400 1     1        ALC,PRIV,SAVE    57,949,952,953,954,955,956,957,963
                                                                                                  ,969,975,981,987,1048,1049,1050,10
                                                                                                  51,1052,1053,1054,1055,1056,1057,1
                                                                                                  058,1059,1060,1061,1062,1064,1065,
                                                                                                  1066,1069,1071,1073,1074,1075,1081
                                                                                                  ,1085,1088,1091,1110,1112,1114,111
                                                                                                  5,1119,1120,1121,1124,1208,1357,13
                                                                                                  58,1359,1360,1361,1362,1376,1377,1
                                                                                                  385,1386,1420,1605,1608,1609,1610,
                                                                                                  1618,1625,1654,1655,1707,1719,1721
                                                                                                  ,1722,1724,1726,1727,1728,1732,173
                                                                                                  3,1736,1737,1741,1744,1745,1752,17
                                                                                                  53,1800,1807,1810,1811,1812,1815,1
                                                                                                  816,1818,1819,1821,1822,1825,1827,
                                                                                                  1828,1830,1831,1833,1834,1843,1844
                                                                                                  ,1846,1847,1849,1850,1856,1858,185
                                                                                                  9,1866,1874,1875,1876,1882,1883,18
                                                                                                  98,1931,1953,1964,1967,1977,1984,1
                                                                                                  995,1999,2009,2017,2028,2030,2040,
                                                                                                  2045,2056,2058,2068,2077,2078,2082
                                                                                                  ,2086,2088,2094,2095,2102,2107,210
                                                                                                  9,2115,2120,2121,2124,2127,2129,21

Page 35          Source Listing                  INIT_FILE
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  34,2135,2142,2146,2148,2153,2162,2
                                                                                                  171,2396,2399,2404,2405,2406,2408,
                                                                                                  2411,2414,2417,2419,2420,2425,2427
                                                                                                  ,2432,2434,2441,2442,2447,2450,245
                                                                                                  2,2454,2456,2459,2461,2463,2465,24
                                                                                                  72,2474,2479,2481,2488,2489,2495,2
                                                                                                  497,2500,2503,2512,2513,2516,2517,
                                                                                                  2534,2535,2540,2542,2545,2546,2547
                                                                                                  ,2548,2549,2550,2551,2552,2558,257
                                                                                                  4,2575,2582,2598,2601,2605,2606,26
                                                                                                  31                                
 FILE_DURATION              Dummy  921      I(4)            4           scalar   ARG,IN           980,981,1036,1037                 
 FILE_DURATION1             Local  937      I(4)            4           scalar                    1037,1039,1061,1074               
 FILE_DURATION_UNITS        Dummy  921      I(4)            4           scalar   ARG,IN           986,987,1042,1043                 
 FILE_DURATION_UNITS1       Local  937      I(4)            4           scalar                    1043,1045,1062,1074               
 FORMAT                     Dummy  920      I(4)            4           scalar   ARG,IN           954,1052                          
 GET_CALENDAR_TYPE          Func   1030     I(4)            4           scalar   PRIV             88,1030,1153,1159,1166,1172,1178,1
                                                                                                  184                               
 INIT_FILE                  Subr   920                                                                                              
 LONG_NAME                  Dummy  920      CHAR                        scalar   ARG,IN           956,1054,1088,1089                
 MAX_FILES                  Local  1012     I(4)            4           scalar   PRIV             60,1012,1343                      
 N                          Local  938      I(4)            4           scalar                    948,949,952,953,954,955,956,957,96
                                                                                                  3,969,975,981,987                 
 NAME                       Dummy  920      CHAR                        scalar   ARG,IN           949,997,1002,1049,1089            
 NEW_FILE_FREQ              Dummy  921      I(4)            4           scalar   ARG,IN           962,963,1022,1023                 
 NEW_FILE_FREQ1             Local  936      I(4)            4           scalar                    1023,1025,1039,1059,1073          
 NEW_FILE_FREQ_UNITS        Dummy  921      I(4)            4           scalar   ARG,IN           968,969,1028,1029                 
 NEW_FILE_FREQ_UNITS1       Local  936      I(4)            4           scalar                    1029,1031,1033,1045,1060,1073     
 NOTE                       Param  1003     I(4)            4           scalar   PRIV             78,1003,1800,2421                 
 NO_CALENDAR                Param  1030     I(4)            4           scalar   PRIV             87,1030,1153,1159,1166,1172,1178,1
                                                                                                  184                               
 NUM_FILES                  Local  948      I(4)            4           scalar   PRIV             61,948,1011,1012,1048,1049,1050,10
                                                                                                  51,1052,1053,1054,1055,1056,1057,1
                                                                                                  058,1059,1060,1061,1062,1064,1065,
                                                                                                  1066,1069,1071,1073,1074,1075,1081
                                                                                                  ,1085,1088,1091,1207              
 OUTPUT_FREQ                Dummy  920      I(4)            4           scalar   ARG,IN           952,1050                          
 OUTPUT_UNITS               Dummy  920      I(4)            4           scalar   ARG,IN           953,1051                          
 PRESENT                    Func   962                                  scalar                    962,968,974,980,986,1022,1028,1036
                                                                                                  ,1042,1068                        
 SAME_FILE_ERR              Local  939      L(4)            4           scalar                    946,958,964,970,976,982,988,993   
 START_TIME                 Dummy  921      TIME_TYPE       16          scalar   ARG,IN           974,975,1068,1069                 
 TDATA                      Local  942      R(8)            8     1     1        TGT              1088                              
 TILE_COUNT                 Dummy  920      I(4)            4           scalar   ARG,IN           957,1048                          
 TIME_GT                    Func   1075     L(4)            4           scalar   PRIV             1075,2516,2540,2542,2552          
 TIME_UNITS                 Dummy  920      I(4)            4           scalar   ARG,IN           955,1053                          
 TIME_UNITS_STR             Local  943      CHAR            128         scalar                    1085,1088                         
 TIME_UNIT_LIST             Local  1085     CHAR            10    1     6        PRIV             60,1085,1605,2088,2109,2129,2148  
 TRIM                       Func   949                                  scalar                    949,956,997,1002,1049,1054,1085,10
                                                                                                  88,1089                           
 VERY_LARGE_FILE_FREQ       Param  1025     I(4)            4           scalar   PRIV             58,1025,1609                      



Page 36          Source Listing                  INIT_FILE
2021-06-01 08:54 Symbol Table                    diag_util.F90

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FILE_TYPE.CLOSE_TIME       TIME_TYPE       16    1564           scalar                    1074,1075,1114,2540,2547,2552      
 FILE_TYPE.DURATION         I(4)            4     1500           scalar                    981,1061,1115,1362,2548            
 FILE_TYPE.DURATION_UNITS   I(4)            4     1504           scalar                    987,1062,1115,1362,2548            
 FILE_TYPE.FILENAME_TIME_BOUNDS                                                                                            ...
                            CHAR            10    11388          scalar                    1066                               
 FILE_TYPE.FILE_UNIT        I(4)            4     1476           scalar                    1058,1722,1727,1733,1737,1815,1818 
                                                                                           ,1821,1827,1830,1833,1843,1846,184 
                                                                                           9,1856,1859,1866,1953,1967,1984,19 
                                                                                           99,2017,2030,2045,2058,2078,2082,2 
                                                                                           086,2102,2107,2115,2121,2124,2127, 
                                                                                           2142,2146,2153,2399,2472,2495,2497 
                                                                                           ,2500,2503,2535,2598,2601,2605,260 
                                                                                           6                                  
 FILE_TYPE.FORMAT           I(4)            4     1468           scalar                    954,1052,1358,1721,1726,1732,1736  
 FILE_TYPE.LAST_FLUSH       TIME_TYPE       16    1516           scalar                    1057,2512,2513,2516,2517,2582      
 FILE_TYPE.LOCAL            L(4)            4     1512           scalar                    1056                               
 FILE_TYPE.LONG_NAME        CHAR            128   128            scalar                    956,1054,1359                      
 FILE_TYPE.NAME             CHAR            128   0              scalar                    949,1049,1081,1124,1208,1357,1608, 
                                                                                           1610,1618,1625,1800,1898,2162,2171 
                                                                                           ,2417,2420,2558,2631               
 FILE_TYPE.NEW_FILE_FREQ    I(4)            4     1492           scalar                    963,1059,1121,1360,1609,2550       
 FILE_TYPE.NEW_FILE_FREQ_UNITS                                                                                             ...
                            I(4)            4     1496           scalar                    969,1060,1121,1361,2551            
 FILE_TYPE.NEXT_OPEN        TIME_TYPE       16    1532           scalar                    1073,1075,1119,1120,2540,2542,2546 
                                                                                           ,2549,2550,2552                    
 FILE_TYPE.NUM_FIELDS       I(4)            4     1456           scalar                    1055,1376,1377,1385,1654,1744,1752 
                                                                                           ,1875,1882,2441,2488,2574          
 FILE_TYPE.OUTPUT_FREQ      I(4)            4     1460           scalar                    952,1050,1357,1420                 
 FILE_TYPE.OUTPUT_UNITS     I(4)            4     1464           scalar                    953,1051,1358                      
 FILE_TYPE.RTIME_CURRENT    R(8)            8     11376          scalar                    1064,2404,2406,2408,2411,2414,2419 
                                                                                           ,2447                              
 FILE_TYPE.START_TIME       TIME_TYPE       16    1548           scalar                    975,1069,1071,1073,1074,1110,1112, 
                                                                                           1114,1361,2534,2546,2548           
 FILE_TYPE.TILE_COUNT       I(4)            4     1508           scalar                    957,1048,1208,1707                 
 FILE_TYPE.TIME_AXIS_ID     I(4)            4     1484           scalar                    1088,1807,1931,2077,2094,2120,2134 
 FILE_TYPE.TIME_BOUNDS_ID   I(4)            4     1488           scalar                    1091,1825,1858,2095,2135           
 FILE_TYPE.TIME_INDEX       I(4)            4     11384          scalar                    1065,2405,2408,2411,2414,2425,2452 
                                                                                           ,2456,2461,2465,2545               
 FILE_TYPE.TIME_UNITS       I(4)            4     1472           scalar                    955,1053,1085,1359,1605,2088,2109, 
                                                                                           2129,2148,2396,2432,2434,2479,2481 

Page 37          Source Listing                  INIT_FILE
2021-06-01 08:54                                 diag_util.F90

   1094 
   1095 !> @brief Synchronize the file's start and close times with the model start and end times.
   1096 !! @details <TT>sync_file_times</TT> checks to see if the file start time is less than the
   1097 !!     model's init time (passed in as the only argument).  If it is less, then the
   1098 !!     both the file start time and end time are synchronized using the passed in initial time
   1099 !!     and the duration as calculated by the <TT>diag_time_inc</TT> function.  <TT>sync_file_times</TT>
   1100 !!     will also increase the <TT>next_open</TT> until it is greater than the init_time.
   1101   SUBROUTINE sync_file_times(file_id, init_time, err_msg)
   1102     INTEGER, INTENT(in) :: file_id !< The file ID
   1103     TYPE(time_type), INTENT(in) :: init_time !< Initial time use for the synchronization.
   1104     CHARACTER(len=*), OPTIONAL, INTENT(out) :: err_msg !< Return error message
   1105 
   1106     CHARACTER(len=128) :: msg
   1107 
   1108     IF ( PRESENT(err_msg) ) err_msg = ''
   1109 
   1110     IF ( files(file_id)%start_time < init_time ) THEN
   1111 ! Sync the start_time of the file with the initial time of the model
   1112        files(file_id)%start_time = init_time
   1113 ! Sync the file's close time also
   1114        files(file_id)%close_time = diag_time_inc(files(file_id)%start_time,&
   1115             & files(file_id)%duration, files(file_id)%duration_units)
   1116     END IF
   1117 
   1118 ! Need to increase next_open until it is greate than init_time
   1119     DO WHILE ( files(file_id)%next_open <= init_time )
   1120        files(file_id)%next_open = diag_time_inc(files(file_id)%next_open,&
   1121             & files(file_id)%new_file_freq, files(file_id)%new_file_freq_units, err_msg=msg)
   1122        IF ( msg /= '' ) THEN
   1123           IF ( fms_error_handler('diag_util_mod::sync_file_times',&
   1124                & ' file='//TRIM(files(file_id)%name)//': '//TRIM(msg), err_msg) ) RETURN
   1125        END IF
   1126     END DO
   1127   END SUBROUTINE sync_file_times

Page 38          Source Listing                  SYNC_FILE_TIMES
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                         
                                               
 diag_util_mod_mp_sync_file_times_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERR_MSG                    Dummy  1101     CHAR                        scalar   ARG,OUT          1108,1124                         
 FILE_ID                    Dummy  1101     I(4)            4           scalar   ARG,IN           1110,1112,1114,1115,1119,1120,1121
                                                                                                  ,1124                             
 FMS_ERROR_HANDLER          Func   1123     L(4)            4           scalar   PRIV             78,1123,1194,2637,2658,2687,2706,2
                                                                                                  721,2745,2774,2802,2821,2836,2860 
 INIT_TIME                  Dummy  1101     TIME_TYPE       16          scalar   ARG,IN           1110,1112,1119                    
 MSG                        Local  1106     CHAR            128         scalar                    1121,1122,1124                    
 PRESENT                    Func   1108                                 scalar                    1108                              
 SYNC_FILE_TIMES            Subr   1101                                                                                             
 TIME_LE                    Func   1119     L(4)            4           scalar   PRIV             1119                              
 TIME_LT                    Func   1110     L(4)            4           scalar   PRIV             1110,2335,2540                    
 TRIM                       Func   1124                                 scalar                    1124                              

Page 39          Source Listing                  SYNC_FILE_TIMES
2021-06-01 08:54                                 diag_util.F90

   1128 
   1129 !> @brief Return the next time data/file is to be written based on the frequency and units.
   1130   TYPE(time_type) FUNCTION diag_time_inc(time, output_freq, output_units, err_msg)
   1131     TYPE(time_type), INTENT(in) :: time !< Current model time.
   1132     INTEGER, INTENT(in):: output_freq !< Output frequency number value.
   1133     INTEGER, INTENT(in):: output_units !< Output frequency unit.
   1134     CHARACTER(len=*), INTENT(out), OPTIONAL :: err_msg !< Function error message.
   1135 !! An empty string indicates the next output
   1136 !! time was found successfully.
   1137 
   1138     CHARACTER(len=128) :: error_message_local
   1139 
   1140     IF ( PRESENT(err_msg) ) err_msg = ''
   1141     error_message_local = ''
   1142 
   1143 ! special values for output frequency are -1 for output at end of run
   1144 ! and 0 for every timestep.  Need to check for these here?
   1145 ! Return zero time increment, hopefully this value is never used
   1146     IF ( output_freq == END_OF_RUN .OR. output_freq == EVERY_TIME ) THEN
   1147        diag_time_inc = time
   1148        RETURN
   1149     END IF
   1150 
   1151 ! Make sure calendar was not set after initialization
   1152     IF ( output_units == DIAG_SECONDS ) THEN
   1153        IF ( get_calendar_type() == NO_CALENDAR ) THEN
   1154           diag_time_inc = increment_time(time, output_freq, 0, err_msg=error_message_local)
   1155        ELSE
   1156           diag_time_inc = increment_date(time, 0, 0, 0, 0, 0, output_freq, err_msg=error_message_local)
   1157        END IF
   1158     ELSE IF ( output_units == DIAG_MINUTES ) THEN
   1159        IF ( get_calendar_type() == NO_CALENDAR ) THEN
   1160           diag_time_inc = increment_time(time, NINT(output_freq*SECONDS_PER_MINUTE), 0, &
   1161                &err_msg=error_message_local)
   1162        ELSE
   1163           diag_time_inc = increment_date(time, 0, 0, 0, 0, output_freq, 0, err_msg=error_message_local)
   1164        END IF
   1165     ELSE IF ( output_units == DIAG_HOURS ) THEN
   1166        IF ( get_calendar_type() == NO_CALENDAR ) THEN
   1167           diag_time_inc = increment_time(time, NINT(output_freq*SECONDS_PER_HOUR), 0, err_msg=error_message_local)
   1168        ELSE
   1169           diag_time_inc = increment_date(time, 0, 0, 0, output_freq, 0, 0, err_msg=error_message_local)
   1170        END IF
   1171     ELSE IF ( output_units == DIAG_DAYS ) THEN
   1172        IF (get_calendar_type() == NO_CALENDAR) THEN
   1173           diag_time_inc = increment_time(time, 0, output_freq, err_msg=error_message_local)
   1174        ELSE
   1175           diag_time_inc = increment_date(time, 0, 0, output_freq, 0, 0, 0, err_msg=error_message_local)
   1176        END IF
   1177     ELSE IF ( output_units == DIAG_MONTHS ) THEN
   1178        IF (get_calendar_type() == NO_CALENDAR) THEN
   1179           error_message_local = 'output units of months NOT allowed with no calendar'
   1180        ELSE
   1181           diag_time_inc = increment_date(time, 0, output_freq, 0, 0, 0, 0, err_msg=error_message_local)
   1182        END IF
   1183     ELSE IF ( output_units == DIAG_YEARS ) THEN
   1184        IF ( get_calendar_type() == NO_CALENDAR ) THEN

Page 40          Source Listing                  DIAG_TIME_INC
2021-06-01 08:54                                 diag_util.F90

   1185           error_message_local = 'output units of years NOT allowed with no calendar'
   1186        ELSE
   1187           diag_time_inc = increment_date(time, output_freq, 0, 0, 0, 0, 0, err_msg=error_message_local)
   1188        END IF
   1189     ELSE
   1190        error_message_local = 'illegal output units'
   1191     END IF
   1192 
   1193     IF ( error_message_local /= '' ) THEN
   1194        IF ( fms_error_handler('diag_time_inc',error_message_local,err_msg) ) RETURN
   1195     END IF
   1196   END FUNCTION diag_time_inc


ENTRY POINTS

  Name                                       
                                             
 diag_util_mod_mp_diag_time_inc_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIAG_HOURS                 Param  1165     I(4)            4           scalar   PRIV             59,1165,2346                      
 DIAG_MINUTES               Param  1158     I(4)            4           scalar   PRIV             59,1158,2344                      
 DIAG_MONTHS                Param  1177     I(4)            4           scalar   PRIV             59,1177,2350                      
 DIAG_SECONDS               Param  1152     I(4)            4           scalar   PRIV             59,1152,2342                      
 DIAG_TIME_INC              Func   1130     TIME_TYPE       16          scalar                                                      
 END_OF_RUN                 Param  1146     I(4)            4           scalar   PRIV             58,1146                           
 ERROR_MESSAGE_LOCAL        Local  1138     CHAR            128         scalar                    1141,1154,1156,1161,1163,1167,1169
                                                                                                  ,1173,1175,1179,1181,1185,1187,119
                                                                                                  0,1193,1194                       
 ERR_MSG                    Dummy  1130     CHAR                        scalar   ARG,OUT          1140,1194                         
 EVERY_TIME                 Param  1146     I(4)            4           scalar   PRIV             58,1146,1420                      
 INCREMENT_DATE             Func   1156     RECORD          16          scalar   PRIV             87,1156,1163,1169,1175,1181,1187  
 INCREMENT_TIME             Func   1154     RECORD          16          scalar   PRIV             88,1154,1160,1167,1173            
 NINT                       Func   1160                                 scalar                    1160,1167                         
 OUTPUT_FREQ                Dummy  1130     I(4)            4           scalar   ARG,IN           1146,1154,1156,1160,1163,1167,1169
                                                                                                  ,1173,1175,1181,1187              
 OUTPUT_UNITS               Dummy  1130     I(4)            4           scalar   ARG,IN           1152,1158,1165,1171,1177,1183     
 PRESENT                    Func   1140                                 scalar                    1140                              
 SECONDS_PER_HOUR           Param  1167     R(8)            8           scalar   PRIV             93,1167,2347                      
 SECONDS_PER_MINUTE         Param  1160     R(8)            8           scalar   PRIV             93,1160,2308,2345                 
 TIME                       Dummy  1130     TIME_TYPE       16          scalar   ARG,IN           1147,1154,1156,1160,1163,1167,1169
                                                                                                  ,1173,1175,1181,1187              

Page 41          Source Listing                  DIAG_TIME_INC
2021-06-01 08:54                                 diag_util.F90

   1197 
   1198 !> @brief Return the file number for file name and tile.
   1199 !! @return Integer find_file
   1200   INTEGER FUNCTION find_file(name, tile_count)
   1201     INTEGER, INTENT(in) :: tile_count !< Tile number.
   1202     CHARACTER(len=*), INTENT(in) :: name !< File name.
   1203 
   1204     INTEGER :: i
   1205 
   1206     find_file = -1
   1207     DO i = 1, num_files
   1208        IF( TRIM(files(i)%name) == TRIM(name) .AND. tile_count == files(i)%tile_count ) THEN
   1209           find_file = i
   1210           RETURN
   1211        END IF
   1212     END DO
   1213   END FUNCTION find_file


ENTRY POINTS

  Name                                   
                                         
 diag_util_mod_mp_find_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIND_FILE                  Func   1200     I(4)            4           scalar                    1206,1209,1345,1355,1363          
 I                          Local  1204     I(4)            4           scalar                    1207,1208,1209                    
 NAME                       Dummy  1200     CHAR                        scalar   ARG,IN           1208                              
 TILE_COUNT                 Dummy  1200     I(4)            4           scalar   ARG,IN           1208                              
 TRIM                       Func   1208                                 scalar                    1208                              

Page 42          Source Listing                  FIND_FILE
2021-06-01 08:54                                 diag_util.F90

   1214 
   1215 !> @brief Return the field number for the given module name, field name, and tile number.
   1216 !! @return Integer find_input_field
   1217   INTEGER FUNCTION find_input_field(module_name, field_name, tile_count)
   1218     CHARACTER(len=*), INTENT(in) :: module_name !< Module name.
   1219     CHARACTER(len=*), INTENT(in) :: field_name !< field name.
   1220     INTEGER, INTENT(in) :: tile_count !< Tile number.
   1221 
   1222     INTEGER :: i
   1223 
   1224     find_input_field = DIAG_FIELD_NOT_FOUND ! Default return value if not found.
   1225     DO i = 1, num_input_fields
   1226        IF(tile_count == input_fields(i)%tile_count .AND.&
   1227             & TRIM(input_fields(i)%module_name) == TRIM(module_name) .AND.&
   1228             & lowercase(TRIM(input_fields(i)%field_name)) == lowercase(TRIM(field_name))) THEN
   1229           find_input_field = i
   1230           RETURN
   1231        END IF
   1232     END DO
   1233   END FUNCTION find_input_field


ENTRY POINTS

  Name                                          
                                                
 diag_util_mod_mp_find_input_field_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIAG_FIELD_NOT_FOUND       Param  1224     I(4)            4           scalar   PRIV             66,1224                           
 FIELD_NAME                 Dummy  1217     CHAR                        scalar   ARG,IN           1228                              
 FIND_INPUT_FIELD           Func   1217     I(4)            4           scalar                                                      
 I                          Local  1222     I(4)            4           scalar                    1225,1226,1227,1228,1229          
 MODULE_NAME                Dummy  1217     CHAR                        scalar   ARG,IN           1227                              
 NUM_INPUT_FIELDS           Local  1225     I(4)            4           scalar   PRIV             62,1225,1243,1244,1254,1255,1256,1
                                                                                                  258,1259,1260,1261,1262,1263,1264 
 TILE_COUNT                 Dummy  1217     I(4)            4           scalar   ARG,IN           1226                              
 TRIM                       Func   1227                                 scalar                    1227,1228                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 INPUT_FIELD_TYPE.FIELD_NAME                                                                                               ...
                            CHAR            128   128            scalar                    1228,1255,1757                     
 INPUT_FIELD_TYPE.TILE_COUNT                                                                                               ...
                            I(4)            4     992            scalar                    1226,1261                          

Page 43          Source Listing                  FIND_INPUT_FIELD
2021-06-01 08:54                                 diag_util.F90

   1234 
   1235 !> @brief Initialize the input field.
   1236   SUBROUTINE init_input_field(module_name, field_name, tile_count)
   1237     CHARACTER(len=*),  INTENT(in) :: module_name !< Module name.
   1238     CHARACTER(len=*),  INTENT(in) :: field_name !< Input field name.
   1239     INTEGER, INTENT(in) :: tile_count !< Tile number.
   1240 
   1241 ! Get a number for this input_field if not already set up
   1242     IF ( find_input_field(module_name, field_name, tile_count) < 0 ) THEN
   1243        num_input_fields = num_input_fields + 1
   1244        IF ( num_input_fields > max_input_fields ) THEN
   1245 ! <ERROR STATUS="FATAL">max_input_fields exceeded, increase it via diag_manager_nml</ERROR>
   1246           CALL error_mesg('diag_util_mod::init_input_field',&
   1247                & 'max_input_fields exceeded, increase it via diag_manager_nml', FATAL)
   1248        END IF
   1249     ELSE
   1250 ! If this is already initialized do not need to do anything
   1251        RETURN
   1252     END IF
   1253 
   1254     input_fields(num_input_fields)%module_name = TRIM(module_name)
   1255     input_fields(num_input_fields)%field_name = TRIM(field_name)
   1256     input_fields(num_input_fields)%num_output_fields = 0
   1257 ! Set flag that this field has not been registered
   1258     input_fields(num_input_fields)%register = .FALSE.
   1259     input_fields(num_input_fields)%local = .FALSE.
   1260     input_fields(num_input_fields)%standard_name = 'none'
   1261     input_fields(num_input_fields)%tile_count = tile_count
   1262     input_fields(num_input_fields)%numthreads = 1
   1263     input_fields(num_input_fields)%active_omp_level = 0
   1264     input_fields(num_input_fields)%time = time_zero
   1265   END SUBROUTINE init_input_field

Page 44          Source Listing                  INIT_INPUT_FIELD
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                          
                                                
 diag_util_mod_mp_init_input_field_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIELD_NAME                 Dummy  1236     CHAR                        scalar   ARG,IN           1242,1255                         
 FIND_INPUT_FIELD           Func   1242     I(4)            4           scalar                    103,1224,1229,1242,1310           
 INIT_INPUT_FIELD           Subr   1236                                                                                             
 MAX_INPUT_FIELDS           Local  1244     I(4)            4           scalar   PRIV             62,1244                           
 MODULE_NAME                Dummy  1236     CHAR                        scalar   ARG,IN           1242,1254                         
 TILE_COUNT                 Dummy  1236     I(4)            4           scalar   ARG,IN           1242,1261                         
 TRIM                       Func   1254                                 scalar                    1254,1255                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 INPUT_FIELD_TYPE.ACTIVE_OMP_LEVEL                                                                                         ...
                            I(4)            4     988            scalar                    1263                               
 INPUT_FIELD_TYPE.LOCAL     L(4)            4     980            scalar                    1259,1512                          
 INPUT_FIELD_TYPE.NUMTHREADS                                                                                               ...
                            I(4)            4     984            scalar                    1262                               
 INPUT_FIELD_TYPE.NUM_OUTPUT_FIELDS                                                                                        ...
                            I(4)            4     952            scalar                    1256,1324,1325,1326,1336           
 INPUT_FIELD_TYPE.REGISTER  L(4)            4     972            scalar                    1258,1755,1885,2444,2491,2578      
 INPUT_FIELD_TYPE.STANDARD_NAME                                                                                            ...
                            CHAR            256   512            scalar                    1260,1960,1974,1991,2006,2024,2037 
                                                                                           ,2052,2065                         
 INPUT_FIELD_TYPE.TIME      TIME_TYPE       16    1048           scalar                    1264                               

Page 45          Source Listing                  INIT_INPUT_FIELD
2021-06-01 08:54                                 diag_util.F90

   1266 
   1267 !> @brief Initialize the output field.
   1268   SUBROUTINE init_output_field(module_name, field_name, output_name, output_file,&
   1269        & time_method, pack, tile_count, local_coord)
   1270     CHARACTER(len=*), INTENT(in) :: module_name !< Module name.
   1271     CHARACTER(len=*), INTENT(in) :: field_name !< Output field name.
   1272     CHARACTER(len=*), INTENT(in) :: output_name !< Output name written to file.
   1273     CHARACTER(len=*), INTENT(in) :: output_file !< File where field should be written.
   1274     CHARACTER(len=*), INTENT(in) :: time_method !< Data reduction method.
   1275 !! See <LINK SRC="diag_manager.html">diag_manager_mod</LINK>
   1276 !! for valid methods.</IN>
   1277     INTEGER, INTENT(in) :: pack !< Packing method.
   1278     INTEGER, INTENT(in) :: tile_count !< Tile number.
   1279     TYPE(coord_type), INTENT(in), OPTIONAL :: local_coord !< Region to be written.
   1280 !! If missing, then all data to be written.</IN>
   1281     INTEGER :: out_num, in_num, file_num, file_num_tile1
   1282     INTEGER :: num_fields, i, method_selected, l1
   1283     INTEGER :: ioerror
   1284     REAL :: pow_value
   1285     INTEGER :: grv !< Value used to determine if the region defined in the diag_table is for the whole axis, or a sub-axis
   1286     CHARACTER(len=128) :: error_msg
   1287     CHARACTER(len=50) :: t_method
   1288     character(len=256) :: tmp_name
   1289 
   1290 ! Value to use to determine if a region is to be output on the full axis, or sub-axis
   1291 ! get the value to compare to determine if writing full axis data
   1292     IF ( region_out_use_alt_value ) THEN
   1293        grv = GLO_REG_VAL_ALT
   1294     ELSE
   1295        grv = GLO_REG_VAL
   1296     END IF
   1297 
   1298 
   1299 ! Get a number for this output field
   1300     num_output_fields = num_output_fields + 1
   1301     IF ( num_output_fields > max_output_fields ) THEN
   1302 ! <ERROR STATUS="FATAL">max_output_fields = <max_output_fields> exceeded.  Increase via diag_manager_nml</ERROR>
   1303        WRITE (UNIT=error_msg,FMT=*) max_output_fields
   1304        CALL error_mesg('diag_util_mod::init_output_field', 'max_output_fields = '//TRIM(error_msg)//' exceeded.&
   1305             &  Increase via diag_manager_nml', FATAL)
   1306     END IF
   1307     out_num = num_output_fields
   1308 
   1309 ! First, find the index to the associated input field
   1310     in_num = find_input_field(module_name, field_name, tile_count)
   1311     IF ( in_num < 0 ) THEN
   1312        IF ( tile_count > 1 ) THEN
   1313           WRITE (error_msg,'(A,"/",A,"/",A)') TRIM(module_name),TRIM(field_name),&
   1314                & "tile_count="//TRIM(string(tile_count))
   1315        ELSE
   1316           WRITE (error_msg,'(A,"/",A)') TRIM(module_name),TRIM(field_name)
   1317        END IF
   1318 ! <ERROR STATUS="FATAL">module_name/field_name <module_name>/<field_name>[/tile_count=<tile_count>] NOT registered</ERROR>
   1319        CALL error_mesg('diag_util_mod::init_output_field',&
   1320             & 'module_name/field_name '//TRIM(error_msg)//' NOT registered', FATAL)
   1321     END IF
   1322 

Page 46          Source Listing                  INIT_OUTPUT_FIELD
2021-06-01 08:54                                 diag_util.F90

   1323 ! Add this output field into the list for this input field
   1324     input_fields(in_num)%num_output_fields =&
   1325          & input_fields(in_num)%num_output_fields + 1
   1326     IF ( input_fields(in_num)%num_output_fields > max_out_per_in_field ) THEN
   1327 ! <ERROR STATUS="FATAL">
   1328 !   MAX_OUT_PER_IN_FIELD = <MAX_OUT_PER_IN_FIELD> exceeded for <module_name>/<field_name>, increase MAX_OUT_PER_IN_FIELD
   1329 !   in the diag_manager_nml namelist.
   1330 ! </ERROR>
   1331        WRITE (UNIT=error_msg,FMT=*) MAX_OUT_PER_IN_FIELD
   1332        CALL error_mesg('diag_util_mod::init_output_field',&
   1333         & 'MAX_OUT_PER_IN_FIELD exceeded for '//TRIM(module_name)//"/"//TRIM(field_name)//&
   1334         &', increase MAX_OUT_PER_IN_FIELD in the diag_manager_nml namelist', FATAL)
   1335     END IF
   1336     input_fields(in_num)%output_fields(input_fields(in_num)%num_output_fields) = out_num
   1337 
   1338 ! Also put pointer to input field in this output field
   1339     output_fields(out_num)%input_field = in_num
   1340 
   1341 ! Next, find the number for the corresponding file
   1342     IF ( TRIM(output_file).EQ.'null' ) THEN
   1343        file_num = max_files
   1344     ELSE
   1345        file_num = find_file(output_file, 1)
   1346        IF ( file_num < 0 ) THEN
   1347 ! <ERROR STATUS="FATAL">
   1348 !   file <file_name> is NOT found in the diag_table.
   1349 ! </ERROR>
   1350           CALL error_mesg('diag_util_mod::init_output_field', 'file '&
   1351                & //TRIM(output_file)//' is NOT found in the diag_table', FATAL)
   1352        END IF
   1353        IF ( tile_count > 1 ) THEN
   1354           file_num_tile1 = file_num
   1355           file_num = find_file(output_file, tile_count)
   1356           IF(file_num < 0) THEN
   1357              CALL init_file(files(file_num_tile1)%name, files(file_num_tile1)%output_freq,&
   1358                   & files(file_num_tile1)%output_units, files(file_num_tile1)%format,&
   1359                   & files(file_num_tile1)%time_units, files(file_num_tile1)%long_name,&
   1360                   & tile_count, files(file_num_tile1)%new_file_freq,&
   1361                   & files(file_num_tile1)%new_file_freq_units, files(file_num_tile1)%start_time,&
   1362                   & files(file_num_tile1)%duration, files(file_num_tile1)%duration_units  )
   1363              file_num = find_file(output_file, tile_count)
   1364              IF ( file_num < 0 ) THEN
   1365 ! <ERROR STATUS="FATAL">
   1366 !   file <output_file> is not initialized for tile_count = <tile_count>
   1367 ! </ERROR>
   1368                 CALL error_mesg('diag_util_mod::init_output_field', 'file '//TRIM(output_file)//&
   1369                      & ' is not initialized for tile_count = '//TRIM(string(tile_count)), FATAL)
   1370              END IF
   1371           END IF
   1372        END IF
   1373     END IF
   1374 
   1375 ! Insert this field into list for this file
   1376     files(file_num)%num_fields = files(file_num)%num_fields + 1
   1377     IF ( files(file_num)%num_fields > MAX_FIELDS_PER_FILE ) THEN
   1378        WRITE (UNIT=error_msg, FMT=*) MAX_FIELDS_PER_FILE
   1379 ! <ERROR STATUS="FATAL">

Page 47          Source Listing                  INIT_OUTPUT_FIELD
2021-06-01 08:54                                 diag_util.F90

   1380 !   MAX_FIELDS_PER_FILE = <MAX_FIELDS_PER_FILE> exceeded.  Increase MAX_FIELDS_PER_FILE in diag_data.F90.
   1381 ! </ERROR>
   1382        CALL error_mesg('diag_util_mod::init_output_field',&
   1383             & 'MAX_FIELDS_PER_FILE = '//TRIM(error_msg)//' exceeded.  Increase MAX_FIELDS_PER_FILE in diag_data.F90.', FATAL
   1383 )
   1384     END IF
   1385     num_fields = files(file_num)%num_fields
   1386     files(file_num)%fields(num_fields) = out_num
   1387 
   1388 ! Set the file for this output field
   1389     output_fields(out_num)%output_file = file_num
   1390 
   1391 ! Enter the other data for this output field
   1392     output_fields(out_num)%output_name = TRIM(output_name)
   1393     output_fields(out_num)%pack = pack
   1394     output_fields(out_num)%pow_value = 1
   1395     output_fields(out_num)%num_axes = 0
   1396     output_fields(out_num)%total_elements = 0
   1397     output_fields(out_num)%region_elements = 0
   1398     output_fields(out_num)%imax = 0
   1399     output_fields(out_num)%jmax = 0
   1400     output_fields(out_num)%kmax = 0
   1401     output_fields(out_num)%imin = VERY_LARGE_AXIS_LENGTH
   1402     output_fields(out_num)%jmin = VERY_LARGE_AXIS_LENGTH
   1403     output_fields(out_num)%kmin = VERY_LARGE_AXIS_LENGTH
   1404 
   1405 ! initialize the size of the diurnal axis to 1
   1406     output_fields(out_num)%n_diurnal_samples = 1
   1407 
   1408 ! Initialize all time method to false
   1409     method_selected = 0
   1410     output_fields(out_num)%time_average = .FALSE.
   1411     output_fields(out_num)%time_rms = .FALSE.
   1412     output_fields(out_num)%time_min = .FALSE.
   1413     output_fields(out_num)%time_max = .FALSE.
   1414     output_fields(out_num)%time_sum = .FALSE.
   1415     output_fields(out_num)%time_ops = .FALSE.
   1416     output_fields(out_num)%written_once = .FALSE.
   1417 
   1418     t_method = lowercase(time_method)
   1419 ! cannot time average fields output every time
   1420     IF ( files(file_num)%output_freq == EVERY_TIME ) THEN
   1421        output_fields(out_num)%time_average = .FALSE.
   1422        method_selected = method_selected+1
   1423        t_method = 'point'
   1424     ELSEIF ( INDEX(t_method,'diurnal') == 1 ) THEN
   1425 ! get the integer number from the t_method
   1426        READ (UNIT=t_method(8:LEN_TRIM(t_method)), FMT=*, IOSTAT=ioerror) output_fields(out_num)%n_diurnal_samples
   1427        IF ( ioerror /= 0 ) THEN
   1428 ! <ERROR STATUS="FATAL">
   1429 !   could not find integer number of diurnal samples in string "<t_method>"
   1430 ! </ERROR>
   1431           CALL error_mesg('diag_util_mod::init_output_field',&
   1432                & 'could not find integer number of diurnal samples in string "' //TRIM(t_method)//'"', FATAL)
   1433        ELSE IF ( output_fields(out_num)%n_diurnal_samples <= 0 ) THEN
   1434 ! <ERROR STATUS="FATAL">
   1435 !   The integer value of diurnal samples must be greater than zero.

Page 48          Source Listing                  INIT_OUTPUT_FIELD
2021-06-01 08:54                                 diag_util.F90

   1436 ! </ERROR>
   1437           CALL error_mesg('diag_util_mod::init_output_field',&
   1438                & 'The integer value of diurnal samples must be greater than zero.', FATAL)
   1439        END IF
   1440        output_fields(out_num)%time_average = .TRUE.
   1441        method_selected = method_selected+1
   1442        t_method='mean'
   1443     ELSEIF ( INDEX(t_method,'pow') == 1 ) THEN
   1444 ! Get the integer number from the t_method
   1445        READ (UNIT=t_method(4:LEN_TRIM(t_method)), FMT=*, IOSTAT=ioerror) pow_value
   1446        IF ( ioerror /= 0 .OR. output_fields(out_num)%pow_value < 1  .OR. FLOOR(pow_value) /= CEILING(pow_value) ) THEN
   1447 ! <ERROR STATUS="FATAL">
   1448 !   Invalid power number in time operation "<t_method>".  Must be a positive integer.
   1449 ! </ERROR>
   1450           CALL error_mesg('diag_util_mod::init_output_field',&
   1451                & 'Invalid power number in time operation "'//TRIM(t_method)//'".  Must be a positive integer', FATAL)
   1452        END IF
   1453        output_fields(out_num)%pow_value = INT(pow_value)
   1454        output_fields(out_num)%time_average = .TRUE.
   1455        method_selected = method_selected+1
   1456        t_method = 'mean_pow('//t_method(4:LEN_TRIM(t_method))//')'
   1457     ELSE
   1458        SELECT CASE(TRIM(t_method))
   1459        CASE ( '.true.', 'mean', 'average', 'avg' )
   1460           output_fields(out_num)%time_average = .TRUE.
   1461           method_selected = method_selected+1
   1462           t_method = 'mean'
   1463        CASE ( 'rms' )
   1464           output_fields(out_num)%time_average = .TRUE.
   1465           output_fields(out_num)%time_rms = .TRUE.
   1466           output_fields(out_num)%pow_value = 2.0
   1467           method_selected = method_selected+1
   1468           t_method = 'root_mean_square'
   1469        CASE ( '.false.', 'none', 'point' )
   1470           output_fields(out_num)%time_average = .FALSE.
   1471           method_selected = method_selected+1
   1472           t_method = 'point'
   1473        CASE ( 'maximum', 'max' )
   1474           output_fields(out_num)%time_max = .TRUE.
   1475           l1 = LEN_TRIM(output_fields(out_num)%output_name)
   1476           if (l1 .ge. 3) then
   1477               tmp_name = trim(adjustl(output_fields(out_num)%output_name(l1-2:l1)))
   1478               IF (lowercase(trim(tmp_name)) /= 'max' ) then
   1479                   output_fields(out_num)%output_name = TRIM(output_name)//'_max'
   1480                endif
   1481           endif
   1482           method_selected = method_selected+1
   1483           t_method = 'max'
   1484        CASE ( 'minimum', 'min' )
   1485           output_fields(out_num)%time_min = .TRUE.
   1486           l1 = LEN_TRIM(output_fields(out_num)%output_name)
   1487           if (l1 .ge. 3) then
   1488               tmp_name = trim(adjustl(output_fields(out_num)%output_name(l1-2:l1)))
   1489               IF (lowercase(trim(tmp_name)) /= 'min' ) then
   1490                   output_fields(out_num)%output_name = TRIM(output_name)//'_min'
   1491               endif
   1492           endif

Page 49          Source Listing                  INIT_OUTPUT_FIELD
2021-06-01 08:54                                 diag_util.F90

   1493           method_selected = method_selected+1
   1494           t_method = 'min'
   1495        CASE ( 'sum', 'cumsum' )
   1496           output_fields(out_num)%time_sum = .TRUE.
   1497           l1 = LEN_TRIM(output_fields(out_num)%output_name)
   1498           IF ( output_fields(out_num)%output_name(l1-2:l1) /= 'sum' )&
   1499                & output_fields(out_num)%output_name = TRIM(output_name)//'_sum'
   1500           method_selected = method_selected+1
   1501           t_method = 'sum'
   1502        END SELECT
   1503     END IF
   1504 
   1505 ! reconcile logical flags
   1506     output_fields(out_num)%time_ops = output_fields(out_num)%time_min.OR.output_fields(out_num)%time_max&
   1507          & .OR.output_fields(out_num)%time_average .OR. output_fields(out_num)%time_sum
   1508 
   1509     output_fields(out_num)%phys_window = .FALSE.
   1510 ! need to initialize grid_type = -1(start, end, l_start_indx,l_end_indx etc...)
   1511     IF ( PRESENT(local_coord) ) THEN
   1512        input_fields(in_num)%local = .TRUE.
   1513        input_fields(in_num)%local_coord = local_coord
   1514        IF ( INT(local_coord%xbegin) ==  grv .AND. INT(local_coord%xend) == grv .AND.&
   1515             & INT(local_coord%ybegin) == grv .AND. INT(local_coord%yend) == grv ) THEN
   1516           output_fields(out_num)%local_output = .FALSE.
   1517           output_fields(out_num)%need_compute = .FALSE.
   1518           output_fields(out_num)%reduced_k_range = .TRUE.
   1519        ELSE
   1520           output_fields(out_num)%local_output = .TRUE.
   1521           output_fields(out_num)%need_compute = .FALSE.
   1522           output_fields(out_num)%reduced_k_range = .FALSE.
   1523        END IF
   1524 
   1525        output_fields(out_num)%output_grid%start(1) = local_coord%xbegin
   1526        output_fields(out_num)%output_grid%start(2) = local_coord%ybegin
   1527        output_fields(out_num)%output_grid%start(3) = local_coord%zbegin
   1528        output_fields(out_num)%output_grid%end(1) = local_coord%xend
   1529        output_fields(out_num)%output_grid%end(2) = local_coord%yend
   1530        output_fields(out_num)%output_grid%end(3) = local_coord%zend
   1531        DO i = 1, 3
   1532           output_fields(out_num)%output_grid%l_start_indx(i) = -1
   1533           output_fields(out_num)%output_grid%l_end_indx(i) = -1
   1534           output_fields(out_num)%output_grid%subaxes(i) = -1
   1535        END DO
   1536     ELSE
   1537        output_fields(out_num)%local_output = .FALSE.
   1538        output_fields(out_num)%need_compute = .FALSE.
   1539        output_fields(out_num)%reduced_k_range = .FALSE.
   1540     END IF
   1541 
   1542 ! <ERROR STATUS="FATAL">
   1543 !   improper time method in diag_table for output field <output_name>
   1544 ! </ERROR>
   1545     IF ( method_selected /= 1 ) CALL error_mesg('diag_util_mod::init_output_field',&
   1546          &'improper time method in diag_table for output field:'//TRIM(output_name),FATAL)
   1547 
   1548     output_fields(out_num)%time_method = TRIM(t_method)
   1549 

Page 50          Source Listing                  INIT_OUTPUT_FIELD
2021-06-01 08:54                                 diag_util.F90

   1550 ! allocate counters: NOTE that for simplicity we always allocate them, even
   1551 ! if they are superceeded by 4D "counter" array. This isn't most memory
   1552 ! efficient, approach, but probably tolerable since they are so small anyway
   1553     ALLOCATE(output_fields(out_num)%count_0d(output_fields(out_num)%n_diurnal_samples))
   1554     ALLOCATE(output_fields(out_num)%num_elements(output_fields(out_num)%n_diurnal_samples))
   1555     output_fields(out_num)%count_0d(:) = 0
   1556     output_fields(out_num)%num_elements(:) = 0
   1557     output_fields(out_num)%num_attributes = 0
   1558   END SUBROUTINE init_output_field


ENTRY POINTS

  Name                                           
                                                 
 diag_util_mod_mp_init_output_field_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   1477                                 scalar                    1477,1488                         
 CEILING                    Func   1446                                 scalar                    1446                              
 COORD_TYPE                 Type   1279                                 scalar   PRIV             62,1279                           
 ERROR_MSG                  Local  1286     CHAR            128         scalar                    1303,1304,1313,1316,1320,1331,1378
                                                                                                  ,1383                             
 FIELD_NAME                 Dummy  1268     CHAR                        scalar   ARG,IN           1310,1313,1316,1333               
 FILE_NUM                   Local  1281     I(4)            4           scalar                    1343,1345,1346,1354,1355,1356,1363
                                                                                                  ,1364,1376,1377,1385,1386,1389,142
                                                                                                  0                                 
 FILE_NUM_TILE1             Local  1281     I(4)            4           scalar                    1354,1357,1358,1359,1360,1361,1362
 FLOOR                      Func   1446                                 scalar                    1446                              
 GRV                        Local  1285     I(4)            4           scalar                    1293,1295,1514,1515               
 I                          Local  1282     I(4)            4           scalar                    1531,1532,1533,1534               
 INDEX                      Func   1424                                 scalar                    1424,1443                         
 INIT_FILE                  Subr   1357                                                           102,1357                          
 INIT_OUTPUT_FIELD          Subr   1268                                                                                             
 INT                        Func   1453                                 scalar                    1453,1514,1515                    
 IN_NUM                     Local  1281     I(4)            4           scalar                    1310,1311,1324,1325,1326,1336,1339
                                                                                                  ,1512,1513                        
 IOERROR                    Local  1283     I(4)            4           scalar                    1426,1427,1445,1446               
 L1                         Local  1282     I(4)            4           scalar                    1475,1476,1477,1486,1487,1488,1497
                                                                                                  ,1498                             
 LEN_TRIM                   Func   1426                                 scalar                    1426,1445,1456,1475,1486,1497     
 LOCAL_COORD                Dummy  1269     COORD_TYPE      48          scalar   ARG,IN           1511,1513,1514,1515,1525,1526,1527
                                                                                                  ,1528,1529,1530                   
 MAX_FIELDS_PER_FILE        Param  1377     I(4)            4           scalar   PRIV             61,1377,1378                      
 MAX_OUTPUT_FIELDS          Local  1301     I(4)            4           scalar   PRIV             62,1301,1303                      
 MAX_OUT_PER_IN_FIELD       Local  1326     I(4)            4           scalar   PRIV             61,1326,1331                      
 METHOD_SELECTED            Local  1282     I(4)            4           scalar                    1409,1422,1441,1455,1461,1467,1471
                                                                                                  ,1482,1493,1500,1545              
 MODULE_NAME                Dummy  1268     CHAR                        scalar   ARG,IN           1310,1313,1316,1333               
 NUM_FIELDS                 Local  1282     I(4)            4           scalar                    1385,1386                         
 NUM_OUTPUT_FIELDS          Local  1300     I(4)            4           scalar   PRIV             62,1300,1301,1307,2621,2624,2627  
 OUTPUT_FILE                Dummy  1268     CHAR                        scalar   ARG,IN           1342,1345,1351,1355,1363,1368     
 OUTPUT_NAME                Dummy  1268     CHAR                        scalar   ARG,IN           1392,1479,1490,1499,1546          

Page 51          Source Listing                  INIT_OUTPUT_FIELD
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 OUT_NUM                    Local  1281     I(4)            4           scalar                    1307,1336,1339,1386,1389,1392,1393
                                                                                                  ,1394,1395,1396,1397,1398,1399,140
                                                                                                  0,1401,1402,1403,1406,1410,1411,14
                                                                                                  12,1413,1414,1415,1416,1421,1426,1
                                                                                                  433,1440,1446,1453,1454,1460,1464,
                                                                                                  1465,1466,1470,1474,1475,1477,1479
                                                                                                  ,1485,1486,1488,1490,1496,1497,149
                                                                                                  8,1499,1506,1507,1509,1516,1517,15
                                                                                                  18,1520,1521,1522,1525,1526,1527,1
                                                                                                  528,1529,1530,1532,1533,1534,1537,
                                                                                                  1538,1539,1548,1553,1554,1555,1556
                                                                                                  ,1557                             
 PACK                       Dummy  1269     I(4)            4           scalar   ARG,IN           1393                              
 POW_VALUE                  Local  1284     R(8)            8           scalar                    1445,1446,1453                    
 PRESENT                    Func   1511                                 scalar                    1511                              
 STRING                     Local  1314                                 scalar   PRIV             80,1314,1369                      
 STRING_FROM_INTEGER        Func   1314     CHAR            16          scalar   PRIV             1314,1369                         
 TILE_COUNT                 Dummy  1269     I(4)            4           scalar   ARG,IN           1310,1312,1314,1353,1355,1360,1363
                                                                                                  ,1369                             
 TIME_METHOD                Dummy  1269     CHAR                        scalar   ARG,IN           1418                              
 TMP_NAME                   Local  1288     CHAR            256         scalar                    1477,1478,1488,1489               
 TRIM                       Func   1304                                 scalar                    1304,1313,1314,1316,1320,1333,1342
                                                                                                  ,1351,1368,1369,1383,1392,1432,145
                                                                                                  1,1458,1477,1478,1479,1488,1489,14
                                                                                                  90,1499,1546,1548                 
 T_METHOD                   Local  1287     CHAR            50          scalar                    1418,1423,1424,1426,1432,1442,1443
                                                                                                  ,1445,1451,1456,1458,1462,1468,147
                                                                                                  2,1483,1494,1501,1548             


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 COORD_TYPE.XBEGIN          R(8)            8     0              scalar                    1514,1525                          
 COORD_TYPE.XEND            R(8)            8     8              scalar                    1514,1528                          
 COORD_TYPE.YBEGIN          R(8)            8     16             scalar                    1515,1526                          
 COORD_TYPE.YEND            R(8)            8     24             scalar                    1515,1529                          
 COORD_TYPE.ZBEGIN          R(8)            8     32             scalar                    1527                               
 COORD_TYPE.ZEND            R(8)            8     40             scalar                    1530                               
 FILE_TYPE.FIELDS           I(4)            4     256      1     300                       1386,1655,1745,1753,1874,1876,1883 
                                                                                           ,2442,2489,2575                    
 INPUT_FIELD_TYPE.LOCAL_COORD                                                                                              ...
                            COORD_TYPE      48    1000           scalar                    1513                               
 INPUT_FIELD_TYPE.OUTPUT_FIELDS                                                                                            ...
                            I(4)            4     880      1     1        ALC              1336                               
 OUTPUT_FIELD_TYPE.COUNT_0D R(8)            8     512      1     1        ALC              1553,1555                          
 OUTPUT_FIELD_TYPE.INPUT_FIELD                                                                                             ...
                            I(4)            4     0              scalar                    1339,1754,1884,2444,2491,2576      
 OUTPUT_FIELD_TYPE.LOCAL_OUTPUT                                                                                            ...
                            L(4)            4     3248           scalar                    1516,1520,1537,1656,1768,1886,2579 
 OUTPUT_FIELD_TYPE.NUM_ATTRIBUTES                                                                                          ...
                            I(4)            4     3384           scalar                    1557,1963,1976,1994,2008,2027,2039 
                                                                                           ,2055,2067,2664,2694,2715,2728     
 OUTPUT_FIELD_TYPE.NUM_AXES I(4)            4     3144           scalar                    1395,1657,1771,1927                

Page 52          Source Listing                  INIT_OUTPUT_FIELD
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 OUTPUT_FIELD_TYPE.NUM_ELEMENTS                                                                                            ...
                            I(4)            4     584      1     1        ALC              1554,1556                          
 OUTPUT_FIELD_TYPE.N_DIURNAL_SAMPLES                                                                                       ...
                            I(4)            4     3156           scalar                    1406,1426,1433,1553,1554           
 OUTPUT_FIELD_TYPE.OUTPUT_FILE                                                                                             ...
                            I(4)            4     4              scalar                    1389,2626,2629                     
 OUTPUT_FIELD_TYPE.PACK     I(4)            4     164            scalar                    1393,1957,1971,1988,2003,2021,2034 
                                                                                           ,2049,2062,2428,2475               
 OUTPUT_FIELD_TYPE.PHYS_WINDOW                                                                                             ...
                            L(4)            4     3256           scalar                    1509                               
 OUTPUT_FIELD_TYPE.POW_VALUE                                                                                               ...
                            I(4)            4     168            scalar                    1394,1446,1453,1466                
 OUTPUT_FIELD_TYPE.REDUCED_K_RANGE                                                                                         ...
                            L(4)            4     3264           scalar                    1518,1522,1539                     
 OUTPUT_FIELD_TYPE.REGION_ELEMENTS                                                                                         ...
                            I(4)            4     3152           scalar                    1397                               
 OUTPUT_FIELD_TYPE.TIME_AVERAGE                                                                                            ...
                            L(4)            4     136            scalar                    1410,1421,1440,1454,1460,1464,1470 
                                                                                           ,1507,1933                         
 OUTPUT_FIELD_TYPE.TIME_MAX L(4)            4     148            scalar                    1413,1474,1506,1935                
 OUTPUT_FIELD_TYPE.TIME_METHOD                                                                                             ...
                            CHAR            50    172            scalar                    1548,1959,1973,1990,2005,2023,2036 
                                                                                           ,2051,2064                         
 OUTPUT_FIELD_TYPE.TIME_MIN L(4)            4     152            scalar                    1412,1485,1506,1937                
 OUTPUT_FIELD_TYPE.TIME_OPS L(4)            4     160            scalar                    1415,1506,1746,1877,1890,2443,2490 
 OUTPUT_FIELD_TYPE.TIME_RMS L(4)            4     140            scalar                    1411,1465                          
 OUTPUT_FIELD_TYPE.TIME_SUM L(4)            4     156            scalar                    1414,1496,1507                     
 OUTPUT_FIELD_TYPE.TOTAL_ELEMENTS                                                                                          ...
                            I(4)            4     3148           scalar                    1396                               
 OUTPUT_FIELD_TYPE.WRITTEN_ONCE                                                                                            ...
                            L(4)            4     3260           scalar                    1416,2429,2476                     

Page 53          Source Listing                  INIT_OUTPUT_FIELD
2021-06-01 08:54                                 diag_util.F90

   1559 
   1560 !> @brief Open file for output, and write the meta data.
   1561   SUBROUTINE opening_file(file, time, use_mpp_io, filename_time)
   1562 ! WARNING: Assumes that all data structures are fully initialized
   1563     INTEGER, INTENT(in) :: file !< File ID.
   1564     TYPE(time_type), INTENT(in) :: time !< Time for the file time stamp
   1565     logical :: use_mpp_io !< controls which IO is used for output
   1566     TYPE(time_type), INTENT(in), optional :: filename_time !< Time used in setting the filename when writting periodic files
   1567 
   1568     TYPE(time_type) :: fname_time !< Time used in setting the filename when writting periodic files
   1569     REAL, DIMENSION(2) :: DATA
   1570     INTEGER :: j, field_num, input_field_num, num_axes, k
   1571     INTEGER :: field_num1
   1572     INTEGER :: position
   1573     INTEGER :: dir, edges
   1574     INTEGER :: ntileMe
   1575     INTEGER :: year, month, day, hour, minute, second
   1576     INTEGER, ALLOCATABLE :: tile_id(:)
   1577     INTEGER, DIMENSION(1) :: time_axis_id, time_bounds_id
   1578 ! size of this axes array must be at least max num. of
   1579 ! axes per field + 2; the last two elements are for time
   1580 ! and time bounds dimensions
   1581     INTEGER, DIMENSION(6) :: axes
   1582     INTEGER, ALLOCATABLE  :: axesc(:) ! indices if compressed axes associated with the field
   1583     LOGICAL :: time_ops, aux_present, match_aux_name, req_present, match_req_fields
   1584     LOGICAL :: all_scalar_or_1d
   1585     CHARACTER(len=7) :: prefix
   1586     CHARACTER(len=7) :: avg_name = 'average'
   1587     CHARACTER(len=128) :: time_units, timeb_units, avg, error_string, filename, aux_name, req_fields, fieldname
   1588     CHARACTER(len=128) :: suffix, base_name
   1589     CHARACTER(len=32) :: time_name, timeb_name,time_longname, timeb_longname, cart_name
   1590     CHARACTER(len=256) :: fname
   1591     CHARACTER(len=24) :: start_date
   1592     TYPE(domain1d) :: domain
   1593     TYPE(domain2d) :: domain2
   1594     TYPE(domainUG) :: domainU
   1595     INTEGER :: is, ie, last, ind
   1596     character(len=2) :: fnum_domain
   1597     class(FmsNetcdfFile_t), pointer    :: fileob
   1598 
   1599     aux_present = .FALSE.
   1600     match_aux_name = .FALSE.
   1601     req_present = .FALSE.
   1602     match_req_fields = .FALSE.
   1603 
   1604 ! Here is where time_units string must be set up; time since base date
   1605     WRITE (time_units, 11) TRIM(time_unit_list(files(file)%time_units)), base_year,&
   1606          & base_month, base_day, base_hour, base_minute, base_second
   1607 11  FORMAT(A, ' since ', I4.4, '-', I2.2, '-', I2.2, ' ', I2.2, ':', I2.2, ':', I2.2)
   1608     base_name = files(file)%name
   1609     IF ( files(file)%new_file_freq < VERY_LARGE_FILE_FREQ ) THEN
   1610        position = INDEX(files(file)%name, '%')
   1611        IF ( position > 0 )  THEN
   1612           base_name = base_name(1:position-1)
   1613        ELSE
   1614 ! <ERROR STATUS="FATAL">
   1615 !   filename <files(file)%name> does not contain % for time stamp string

Page 54          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   1616 ! </ERROR>
   1617           CALL error_mesg('diag_util_mod::opening_file',&
   1618                & 'file name '//TRIM(files(file)%name)//' does not contain % for time stamp string', FATAL)
   1619        END IF
   1620        if (present(filename_time)) then
   1621           fname_time = filename_time
   1622        else
   1623           fname_time = time
   1624        endif
   1625        suffix = get_time_string(files(file)%name, fname_time)
   1626     ELSE
   1627        suffix = ' '
   1628     END IF
   1629 
   1630 ! Add ensemble ID to filename
   1631     fname=base_name
   1632     if (use_mpp_io) then
   1633         call mpp_io_get_instance_filename(fname, base_name)
   1634     else
   1635         call fms2_io_get_instance_filename(fname, base_name)
   1636     endif
   1637 
   1638 ! Set the filename
   1639     filename = TRIM(base_name)//TRIM(suffix)
   1640 
   1641 ! prepend the file start date if prepend_date == .TRUE.
   1642     IF ( prepend_date ) THEN
   1643        call get_date(diag_init_time, year, month, day, hour, minute, second)
   1644        write (start_date, '(1I20.4, 2I2.2)') year, month, day
   1645 
   1646        filename = TRIM(adjustl(start_date))//'.'//TRIM(filename)
   1647     END IF
   1648 
   1649 ! Loop through all fields with this file to output axes
   1650 ! JWD: This is a klooge; need something more robust
   1651     domain2 = NULL_DOMAIN2D
   1652     domainU = NULL_DOMAINUG
   1653     all_scalar_or_1d = .TRUE.
   1654     DO j = 1, files(file)%num_fields
   1655        field_num = files(file)%fields(j)
   1656        if (output_fields(field_num)%local_output .AND. .NOT. output_fields(field_num)%need_compute) CYCLE
   1657        num_axes = output_fields(field_num)%num_axes
   1658        IF ( num_axes > 1 ) THEN
   1659           all_scalar_or_1d = .FALSE.
   1660           domain2 = get_domain2d ( output_fields(field_num)%axes(1:num_axes) )
   1661           domainU = get_domainUG ( output_fields(field_num)%axes(1) )
   1662           IF ( domain2 .NE. NULL_DOMAIN2D ) EXIT
   1663        ELSEIF (num_axes == 1) THEN
   1664           if (domainU .EQ. null_domainUG) then
   1665                domainU = get_domainUG ( output_fields(field_num)%axes(num_axes) )
   1666           endif
   1667        END IF
   1668     END DO
   1669 
   1670     IF (.NOT. all_scalar_or_1d) THEN
   1671         IF (domainU .NE. null_domainUG .AND. domain2 .NE. null_domain2D) THEN
   1672             CALL error_mesg('diag_util_mod::opening_file', &

Page 55          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   1673                             'Domain2 and DomainU are somehow both set.', &
   1674                             FATAL)
   1675         ELSEIF (domainU .EQ. null_domainUG) THEN
   1676             IF (domain2 .EQ. NULL_DOMAIN2D) THEN
   1677                 CALL return_domain(domain2)
   1678             ENDIF
   1679 
   1680             IF (domain2 .EQ. NULL_DOMAIN2D) THEN
   1681 
   1682 !Fix for the corner-case when you have a file that contains
   1683 !2D field(s) that is not associated with a domain tile, as
   1684 !is usually assumed.
   1685 
   1686 !This is very confusing, but I will try to explain.  The
   1687 !all_scalar_or_1d flag determines if the file name is associated
   1688 !with a domain (i.e. has ".tilex." in the file name).  A value
   1689 !of .FALSE. for the all_scalar_or_1d flag signals that the
   1690 !file name is associated with a domain tile.  Normally,
   1691 !files that contain at least one two-dimensional field are
   1692 !assumed to be associated with a specific domain tile, and
   1693 !thus have the value of the all_scalar_or_1d flag set to
   1694 !.FALSE.  It is possible, however, to have a file that contains
   1695 !two-dimensional fields that is not associated with a domain tile
   1696 !(i.e., if you make it into this branch.).  If that is the
   1697 !case, then reset the all_scalar_or_1d flag back to .TRUE.
   1698 !Got that?
   1699                 all_scalar_or_1d = .TRUE.
   1700 
   1701             ELSE
   1702                 ntileMe = mpp_get_current_ntile(domain2)
   1703                 ALLOCATE(tile_id(ntileMe))
   1704                 tile_id = mpp_get_tile_id(domain2)
   1705                 fname = TRIM(filename)
   1706                 IF ( mpp_get_ntile_count(domain2) > 1 ) THEN
   1707                    CALL get_tile_string(filename, TRIM(fname)//'.tile' , tile_id(files(file)%tile_count))
   1708                 ELSEIF ( tile_id(1) > 1 ) then
   1709                    CALL get_tile_string(filename, TRIM(fname)//'.tile' , tile_id(1))
   1710                 ENDIF
   1711                 DEALLOCATE(tile_id)
   1712             ENDIF
   1713         ENDIF
   1714     ENDIF
   1715     IF ( domainU .ne. null_domainUG) then
   1716           fname = TRIM(filename)
   1717           CALL get_mosaic_tile_file_ug(fname,filename,domainU)
   1718     ENDIF
   1719     IF ( allocated(files(file)%attributes) ) THEN
   1720        if (.not.use_mpp_io) then
   1721                 CALL diag_output_init(filename, files(file)%format, global_descriptor,&
   1722                 & files(file)%file_unit, all_scalar_or_1d, domain2, domainU,&
   1723                 & fileobj(file),fileobjU(file), fileobjND(file), fnum_for_domain(file),&
   1724                 & attributes=files(file)%attributes(1:files(file)%num_attributes))
   1725        else
   1726                 CALL diag_output_init(filename, files(file)%format, global_descriptor,&
   1727                 & files(file)%file_unit, all_scalar_or_1d, domain2, domainU,&
   1728                 & attributes=files(file)%attributes(1:files(file)%num_attributes))
   1729        endif

Page 56          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   1730     ELSE
   1731        if (.not.use_mpp_io) then
   1732                 CALL diag_output_init(filename, files(file)%format, global_descriptor,&
   1733                 & files(file)%file_unit, all_scalar_or_1d, domain2,domainU, &
   1734                 & fileobj(file),fileobjU(file),fileobjND(file),fnum_for_domain(file))
   1735        else
   1736                 CALL diag_output_init(filename, files(file)%format, global_descriptor,&
   1737                 & files(file)%file_unit, all_scalar_or_1d, domain2,domainU)
   1738        endif
   1739     END IF
   1740 !> update fnum_for_domain with the correct domain
   1741     files(file)%bytes_written = 0
   1742 ! Does this file contain time_average fields?
   1743     time_ops = .FALSE.
   1744     DO j = 1, files(file)%num_fields
   1745        field_num = files(file)%fields(j)
   1746        IF ( output_fields(field_num)%time_ops ) THEN
   1747           time_ops = .TRUE.
   1748           EXIT
   1749        END IF
   1750     END DO
   1751 ! Loop through all fields with this file to output axes
   1752     DO j = 1, files(file)%num_fields
   1753        field_num = files(file)%fields(j)
   1754        input_field_num = output_fields(field_num)%input_field
   1755        IF (.NOT.input_fields(input_field_num)%register) THEN
   1756           WRITE (error_string,'(A,"/",A)') TRIM(input_fields(input_field_num)%module_name),&
   1757                & TRIM(input_fields(input_field_num)%field_name)
   1758           IF(mpp_pe() .EQ. mpp_root_pe()) THEN
   1759 ! <ERROR STATUS="WARNING">
   1760 !   module/field_name (<input_fields(input_field_num)%module_name>/<input_fields(input_field_num)%field_name>)
   1761 !   NOT registered
   1762 ! </ERROR>
   1763              CALL error_mesg('diag_util_mod::opening_file',&
   1764                   & 'module/field_name ('//TRIM(error_string)//') NOT registered', WARNING)
   1765           END IF
   1766           CYCLE
   1767        END IF
   1768        if (output_fields(field_num)%local_output .AND. .NOT. output_fields(field_num)%need_compute) CYCLE
   1769 
   1770 ! Put the time axis in the axis field
   1771        num_axes = output_fields(field_num)%num_axes
   1772        axes(1:num_axes) = output_fields(field_num)%axes(1:num_axes)
   1773 ! make sure that axis_id are not -1
   1774        DO k = 1, num_axes
   1775           IF ( axes(k) < 0 ) THEN
   1776              WRITE(error_string,'(a)') output_fields(field_num)%output_name
   1777 ! <ERROR STATUS="FATAL">
   1778 !   ouptut_name <output_fields(field_num)%output_name> has axis_id = -1
   1779 ! </ERROR>
   1780              CALL error_mesg('diag_util_mod::opening_file','output_name '//TRIM(error_string)//&
   1781                   & ' has axis_id = -1', FATAL)
   1782           END IF
   1783        END DO
   1784 ! check if aux is present in any axes
   1785        IF ( .NOT.aux_present ) THEN
   1786           DO k = 1, num_axes

Page 57          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   1787              aux_name = get_axis_aux(axes(k))
   1788              IF ( TRIM(aux_name) /= 'none' ) THEN
   1789                 aux_present = .TRUE.
   1790                 EXIT
   1791              END IF
   1792           END DO
   1793        END IF
   1794 ! check if required fields are present in any axes
   1795        IF ( .NOT.req_present ) THEN
   1796           DO k = 1, num_axes
   1797              req_fields = get_axis_reqfld(axes(k))
   1798              IF ( TRIM(req_fields) /= 'none' ) THEN
   1799                 CALL error_mesg('diag_util_mod::opening_file','required fields found: '//&
   1800                                &TRIM(req_fields)//' in file '//TRIM(files(file)%name),NOTE)
   1801                 req_present = .TRUE.
   1802                 EXIT
   1803              END IF
   1804           END DO
   1805        END IF
   1806 
   1807        axes(num_axes + 1) = files(file)%time_axis_id
   1808       if (.not. use_mpp_io) then
   1809 !> Allocate the is_time_axis_registered field and set it to false for the first trip
   1810        if (.not. allocated(files(file)%is_time_axis_registered)) then
   1811           allocate(files(file)%is_time_axis_registered)
   1812           files(file)%is_time_axis_registered = .false.
   1813        endif
   1814        if (fnum_for_domain(file) == "2d") then
   1815           CALL write_axis_meta_data(files(file)%file_unit, axes(1:num_axes + 1),fileobj(file), time_ops=time_ops, &
   1816                                    time_axis_registered=files(file)%is_time_axis_registered)
   1817        elseif (fnum_for_domain(file) == "nd") then
   1818           CALL write_axis_meta_data(files(file)%file_unit, axes(1:num_axes + 1),fileobjnd(file), time_ops=time_ops, &
   1819                                    time_axis_registered=files(file)%is_time_axis_registered)
   1820        elseif (fnum_for_domain(file) == "ug") then
   1821           CALL write_axis_meta_data(files(file)%file_unit, axes(1:num_axes + 1),fileobjU(file), time_ops=time_ops, &
   1822                                    time_axis_registered=files(file)%is_time_axis_registered)
   1823        endif
   1824        IF ( time_ops ) THEN
   1825           axes(num_axes + 2) = files(file)%time_bounds_id
   1826           if (fnum_for_domain(file) == "2d") then
   1827               CALL write_axis_meta_data(files(file)%file_unit, axes(1:num_axes + 2),fileobj(file), &
   1828                                    time_axis_registered=files(file)%is_time_axis_registered)
   1829        elseif (fnum_for_domain(file) == "nd") then
   1830               CALL write_axis_meta_data(files(file)%file_unit, axes(1:num_axes + 2),fileobjND(file), &
   1831                                    time_axis_registered=files(file)%is_time_axis_registered)
   1832           elseif (fnum_for_domain(file) == "ug") then
   1833               CALL write_axis_meta_data(files(file)%file_unit, axes(1:num_axes + 2),fileobjU(file), &
   1834                                    time_axis_registered=files(file)%is_time_axis_registered)
   1835           endif
   1836        END IF
   1837 ! write metadata for axes used  in compression-by-gathering, e.g. for unstructured
   1838 ! grid
   1839        DO k = 1, num_axes
   1840           IF (axis_is_compressed(axes(k))) THEN
   1841              CALL get_compressed_axes_ids(axes(k), axesc) ! returns allocatable array
   1842              if (fnum_for_domain(file) == "2d" ) then
   1843                  CALL write_axis_meta_data(files(file)%file_unit, axesc,fileobj(file), &

Page 58          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   1844                                    time_axis_registered=files(file)%is_time_axis_registered)
   1845              elseif (fnum_for_domain(file) == "nd") then
   1846                  CALL write_axis_meta_data(files(file)%file_unit, axesc,fileobjND(file), &
   1847                                    time_axis_registered=files(file)%is_time_axis_registered)
   1848              elseif (fnum_for_domain(file) == "ug") then
   1849                  CALL write_axis_meta_data(files(file)%file_unit, axesc,fileobjU(file), &
   1850                                    time_axis_registered=files(file)%is_time_axis_registered)
   1851              endif
   1852              DEALLOCATE(axesc)
   1853           ENDIF
   1854        ENDDO
   1855       else !< use_mpp_io
   1856        CALL write_axis_meta_data(files(file)%file_unit, axes(1:num_axes + 1), time_ops)
   1857        IF ( time_ops ) THEN
   1858           axes(num_axes + 2) = files(file)%time_bounds_id
   1859           CALL write_axis_meta_data(files(file)%file_unit, axes(1:num_axes + 2))
   1860        END IF
   1861 ! write metadata for axes used  in compression-by-gathering, e.g. for unstructured
   1862 ! grid
   1863        DO k = 1, num_axes
   1864           IF (axis_is_compressed(axes(k))) THEN
   1865              CALL get_compressed_axes_ids(axes(k), axesc) ! returns allocatable array
   1866              CALL write_axis_meta_data(files(file)%file_unit, axesc)
   1867              DEALLOCATE(axesc)
   1868           ENDIF
   1869        ENDDO
   1870       endif !< use_mpp_io
   1871     END DO
   1872 
   1873 ! Looking for the first NON-static field in a file
   1874     field_num1 = files(file)%fields(1)
   1875     DO j = 1, files(file)%num_fields
   1876        field_num = files(file)%fields(j)
   1877        IF ( output_fields(field_num)%time_ops ) THEN
   1878           field_num1 = field_num
   1879           EXIT
   1880        END IF
   1881     END DO
   1882     nfields_loop: DO j = 1, files(file)%num_fields
   1883        field_num = files(file)%fields(j)
   1884        input_field_num = output_fields(field_num)%input_field
   1885        IF (.NOT.input_fields(input_field_num)%register) CYCLE
   1886        IF (output_fields(field_num)%local_output .AND. .NOT. output_fields(field_num)%need_compute) CYCLE
   1887 ! Make sure that 1 file contains either time_average or instantaneous fields
   1888 ! cannot have both time_average and instantaneous in 1 file
   1889        IF ( .NOT.mix_snapshot_average_fields ) THEN
   1890           IF ( (output_fields(field_num)%time_ops.NEQV.output_fields(field_num1)%time_ops) .AND.&
   1891                & .NOT.output_fields(field_num1)%static .AND. .NOT.output_fields(field_num)%static) THEN
   1892              IF ( mpp_pe() == mpp_root_pe() ) THEN
   1893 ! <ERROR STATUS="FATAL">
   1894 !   <files(file)%name> can NOT have BOTH time average AND instantaneous fields.
   1895 !   Create a new file or set mix_snapshot_average_fields=.TRUE. in the namelist diag_manager_nml.
   1896 ! </ERROR>
   1897                 CALL error_mesg('diag_util_mod::opening_file','file '//&
   1898                      & TRIM(files(file)%name)//' can NOT have BOTH time average AND instantaneous fields.'//&
   1899                      & ' Create a new file or set mix_snapshot_average_fields=.TRUE. in the namelist diag_manager_nml.' , FA
   1899 TAL)

Page 59          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   1900              END IF
   1901           END IF
   1902        END IF
   1903 ! check if any field has the same name as aux_name
   1904        IF ( aux_present .AND. .NOT.match_aux_name ) THEN
   1905           fieldname = output_fields(field_num)%output_name
   1906           IF ( INDEX(aux_name, TRIM(fieldname)) > 0 ) match_aux_name = .TRUE.
   1907        END IF
   1908 ! check if any field has the same name as req_fields
   1909        IF ( req_present .AND. .NOT.match_req_fields ) THEN
   1910           fieldname = output_fields(field_num)%output_name
   1911           is = 1; last = len_trim(req_fields)
   1912           DO
   1913             ind = index(req_fields(is:last),' ')
   1914             IF (ind .eq. 0) ind = last-is+2
   1915             ie = is+(ind-2)
   1916             if (req_fields(is:ie) .EQ. trim(fieldname)) then
   1917               match_req_fields = .TRUE.
   1918 !CALL error_mesg('diag_util_mod::opening_file','matched required field: '//TRIM(fieldname),NOTE)
   1919               EXIT
   1920             END IF
   1921             is = is+ind
   1922             if (is .GT. last) EXIT
   1923           END DO
   1924        END IF
   1925 
   1926 ! Put the time axis in the axis field
   1927        num_axes = output_fields(field_num)%num_axes
   1928        axes(1:num_axes) = output_fields(field_num)%axes(1:num_axes)
   1929        IF ( .NOT.output_fields(field_num)%static ) THEN
   1930           num_axes=num_axes+1
   1931           axes(num_axes) = files(file)%time_axis_id
   1932        END IF
   1933        IF(output_fields(field_num)%time_average) THEN
   1934           avg = avg_name
   1935        ELSE IF(output_fields(field_num)%time_max) THEN
   1936           avg = avg_name
   1937        ELSE IF(output_fields(field_num)%time_min) THEN
   1938           avg = avg_name
   1939        ELSE
   1940           avg = " "
   1941        END IF
   1942      if (.not.use_mpp_io) then
   1943 !> Use the correct file object
   1944        if (fnum_for_domain(file) == "2d") then
   1945           fileob => fileobj (file)
   1946        elseif (fnum_for_domain(file) == "nd") then
   1947           fileob => fileobjND(file)
   1948        elseif (fnum_for_domain(file) == "ug") then
   1949           fileob => fileobjU(file)
   1950        endif
   1951        IF ( input_fields(input_field_num)%missing_value_present ) THEN
   1952           IF ( LEN_TRIM(input_fields(input_field_num)%interp_method) > 0 ) THEN
   1953              output_fields(field_num)%f_type = write_field_meta_data(files(file)%file_unit,&
   1954                   & output_fields(field_num)%output_name, axes(1:num_axes),&
   1955                   & input_fields(input_field_num)%units,&
   1956                   & input_fields(input_field_num)%long_name,&

Page 60          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   1957                   & input_fields(input_field_num)%range, output_fields(field_num)%pack,&
   1958                   & input_fields(input_field_num)%missing_value, avg_name = avg,&
   1959                   & time_method=output_fields(field_num)%time_method,&
   1960                   & standard_name = input_fields(input_field_num)%standard_name,&
   1961                   & interp_method = input_fields(input_field_num)%interp_method,&
   1962                   & attributes=output_fields(field_num)%attributes,&
   1963                   & num_attributes=output_fields(field_num)%num_attributes,&
   1964                   & use_UGdomain=files(file)%use_domainUG , &
   1965                   & fileob=fileob)
   1966           ELSE
   1967              output_fields(field_num)%f_type = write_field_meta_data(files(file)%file_unit,&
   1968                   & output_fields(field_num)%output_name, axes(1:num_axes),&
   1969                   & input_fields(input_field_num)%units,&
   1970                   & input_fields(input_field_num)%long_name,&
   1971                   & input_fields(input_field_num)%range, output_fields(field_num)%pack,&
   1972                   & input_fields(input_field_num)%missing_value, avg_name = avg,&
   1973                   & time_method=output_fields(field_num)%time_method,&
   1974                   & standard_name = input_fields(input_field_num)%standard_name,&
   1975                   & attributes=output_fields(field_num)%attributes,&
   1976                   & num_attributes=output_fields(field_num)%num_attributes,&
   1977                   & use_UGdomain=files(file)%use_domainUG , &
   1978                   & fileob=fileob)
   1979 
   1980           END IF
   1981 ! NEED TO TAKE CARE OF TIME AVERAGING INFO TOO BOTH CASES
   1982        ELSE
   1983           IF ( LEN_TRIM(input_fields(input_field_num)%interp_method) > 0 ) THEN
   1984              output_fields(field_num)%f_type = write_field_meta_data(files(file)%file_unit,&
   1985                   & output_fields(field_num)%output_name, axes(1:num_axes),&
   1986                   & input_fields(input_field_num)%units,&
   1987                   & input_fields(input_field_num)%long_name,&
   1988                   & input_fields(input_field_num)%range, output_fields(field_num)%pack,&
   1989                   & avg_name = avg,&
   1990                   & time_method=output_fields(field_num)%time_method,&
   1991                   & standard_name = input_fields(input_field_num)%standard_name,&
   1992                   & interp_method = input_fields(input_field_num)%interp_method,&
   1993                   & attributes=output_fields(field_num)%attributes,&
   1994                   & num_attributes=output_fields(field_num)%num_attributes,&
   1995                   & use_UGdomain=files(file)%use_domainUG , &
   1996                   & fileob=fileob)
   1997 
   1998           ELSE
   1999              output_fields(field_num)%f_type = write_field_meta_data(files(file)%file_unit,&
   2000                   & output_fields(field_num)%output_name, axes(1:num_axes),&
   2001                   & input_fields(input_field_num)%units,&
   2002                   & input_fields(input_field_num)%long_name,&
   2003                   & input_fields(input_field_num)%range, output_fields(field_num)%pack,&
   2004                   & avg_name = avg,&
   2005                   & time_method=output_fields(field_num)%time_method,&
   2006                   & standard_name = input_fields(input_field_num)%standard_name,&
   2007                   & attributes=output_fields(field_num)%attributes,&
   2008                   & num_attributes=output_fields(field_num)%num_attributes,&
   2009                   & use_UGdomain=files(file)%use_domainUG , &
   2010                   & fileob=fileob)
   2011 
   2012           END IF
   2013        END IF

Page 61          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   2014      else !< use_mpp_io
   2015        IF ( input_fields(input_field_num)%missing_value_present ) THEN
   2016           IF ( LEN_TRIM(input_fields(input_field_num)%interp_method) > 0 ) THEN
   2017              output_fields(field_num)%f_type = write_field_meta_data(files(file)%file_unit,&
   2018                   & output_fields(field_num)%output_name, axes(1:num_axes),&
   2019                   & input_fields(input_field_num)%units,&
   2020                   & input_fields(input_field_num)%long_name,&
   2021                   & input_fields(input_field_num)%range, output_fields(field_num)%pack,&
   2022                   & input_fields(input_field_num)%missing_value, avg_name = avg,&
   2023                   & time_method=output_fields(field_num)%time_method,&
   2024                   & standard_name = input_fields(input_field_num)%standard_name,&
   2025                   & interp_method = input_fields(input_field_num)%interp_method,&
   2026                   & attributes=output_fields(field_num)%attributes,&
   2027                   & num_attributes=output_fields(field_num)%num_attributes,&
   2028                   & use_UGdomain=files(file)%use_domainUG)
   2029           ELSE
   2030              output_fields(field_num)%f_type = write_field_meta_data(files(file)%file_unit,&
   2031                   & output_fields(field_num)%output_name, axes(1:num_axes),&
   2032                   & input_fields(input_field_num)%units,&
   2033                   & input_fields(input_field_num)%long_name,&
   2034                   & input_fields(input_field_num)%range, output_fields(field_num)%pack,&
   2035                   & input_fields(input_field_num)%missing_value, avg_name = avg,&
   2036                   & time_method=output_fields(field_num)%time_method,&
   2037                   & standard_name = input_fields(input_field_num)%standard_name,&
   2038                   & attributes=output_fields(field_num)%attributes,&
   2039                   & num_attributes=output_fields(field_num)%num_attributes,&
   2040                   & use_UGdomain=files(file)%use_domainUG)
   2041           END IF
   2042 ! NEED TO TAKE CARE OF TIME AVERAGING INFO TOO BOTH CASES
   2043        ELSE
   2044           IF ( LEN_TRIM(input_fields(input_field_num)%interp_method) > 0 ) THEN
   2045              output_fields(field_num)%f_type = write_field_meta_data(files(file)%file_unit,&
   2046                   & output_fields(field_num)%output_name, axes(1:num_axes),&
   2047                   & input_fields(input_field_num)%units,&
   2048                   & input_fields(input_field_num)%long_name,&
   2049                   & input_fields(input_field_num)%range, output_fields(field_num)%pack,&
   2050                   & avg_name = avg,&
   2051                   & time_method=output_fields(field_num)%time_method,&
   2052                   & standard_name = input_fields(input_field_num)%standard_name,&
   2053                   & interp_method = input_fields(input_field_num)%interp_method,&
   2054                   & attributes=output_fields(field_num)%attributes,&
   2055                   & num_attributes=output_fields(field_num)%num_attributes,&
   2056                   & use_UGdomain=files(file)%use_domainUG)
   2057           ELSE
   2058              output_fields(field_num)%f_type = write_field_meta_data(files(file)%file_unit,&
   2059                   & output_fields(field_num)%output_name, axes(1:num_axes),&
   2060                   & input_fields(input_field_num)%units,&
   2061                   & input_fields(input_field_num)%long_name,&
   2062                   & input_fields(input_field_num)%range, output_fields(field_num)%pack,&
   2063                   & avg_name = avg,&
   2064                   & time_method=output_fields(field_num)%time_method,&
   2065                   & standard_name = input_fields(input_field_num)%standard_name,&
   2066                   & attributes=output_fields(field_num)%attributes,&
   2067                   & num_attributes=output_fields(field_num)%num_attributes,&
   2068                   & use_UGdomain=files(file)%use_domainUG)
   2069           END IF
   2070        END IF

Page 62          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   2071      endif !<use_mpp_io
   2072     END DO nfields_loop
   2073    if (.not. use_mpp_io) then
   2074 ! If any of the fields in the file are time averaged, need to output the axes
   2075 ! Use double precision since time axis is double precision
   2076     IF ( time_ops ) THEN
   2077        time_axis_id(1) = files(file)%time_axis_id
   2078        files(file)%f_avg_start = write_field_meta_data(files(file)%file_unit,&
   2079             & avg_name // '_T1', time_axis_id, time_units,&
   2080             & "Start time for average period", pack=pack_size , &
   2081             & fileob=fileob)
   2082        files(file)%f_avg_end = write_field_meta_data(files(file)%file_unit,&
   2083             & avg_name // '_T2', time_axis_id, time_units,&
   2084             & "End time for average period", pack=pack_size , &
   2085             & fileob=fileob)
   2086        files(file)%f_avg_nitems = write_field_meta_data(files(file)%file_unit,&
   2087             & avg_name // '_DT', time_axis_id,&
   2088             & TRIM(time_unit_list(files(file)%time_units)),&
   2089             & "Length of average period", pack=pack_size , &
   2090             & fileob=fileob)
   2091     END IF
   2092 
   2093     IF ( time_ops ) THEN
   2094        time_axis_id(1) = files(file)%time_axis_id
   2095        time_bounds_id(1) = files(file)%time_bounds_id
   2096        CALL get_diag_axis( time_axis_id(1), time_name, time_units, time_longname,&
   2097             & cart_name, dir, edges, Domain, domainU, DATA)
   2098        CALL get_diag_axis( time_bounds_id(1), timeb_name, timeb_units, timeb_longname,&
   2099             & cart_name, dir, edges, Domain, domainU, DATA)
   2100        IF ( do_cf_compliance() ) THEN
   2101 ! CF Compliance requires the unit on the _bnds axis is the same as 'time'
   2102           files(file)%f_bounds =  write_field_meta_data(files(file)%file_unit,&
   2103                & TRIM(time_name)//'_bnds', (/time_bounds_id,time_axis_id/),&
   2104                & time_units, TRIM(time_name)//' axis boundaries', pack=pack_size , &
   2105                & fileob=fileob)
   2106        ELSE
   2107           files(file)%f_bounds =  write_field_meta_data(files(file)%file_unit,&
   2108                & TRIM(time_name)//'_bnds', (/time_bounds_id,time_axis_id/),&
   2109                & TRIM(time_unit_list(files(file)%time_units)),&
   2110                & TRIM(time_name)//' axis boundaries', pack=pack_size, &
   2111                & fileob=fileob)
   2112        END IF
   2113     END IF
   2114 ! Let lower levels know that all meta data has been sent
   2115     call done_meta_data(files(file)%file_unit)
   2116    else !< use_mpp_io
   2117 ! If any of the fields in the file are time averaged, need to output the axes
   2118 ! Use double precision since time axis is double precision
   2119     IF ( time_ops ) THEN
   2120        time_axis_id(1) = files(file)%time_axis_id
   2121        files(file)%f_avg_start = write_field_meta_data(files(file)%file_unit,&
   2122             & avg_name // '_T1', time_axis_id, time_units,&
   2123             & "Start time for average period", pack=pack_size)
   2124        files(file)%f_avg_end = write_field_meta_data(files(file)%file_unit,&
   2125             & avg_name // '_T2', time_axis_id, time_units,&
   2126             & "End time for average period", pack=pack_size)
   2127        files(file)%f_avg_nitems = write_field_meta_data(files(file)%file_unit,&

Page 63          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   2128             & avg_name // '_DT', time_axis_id,&
   2129             & TRIM(time_unit_list(files(file)%time_units)),&
   2130             & "Length of average period", pack=pack_size)
   2131     END IF
   2132 
   2133     IF ( time_ops ) THEN
   2134        time_axis_id(1) = files(file)%time_axis_id
   2135        time_bounds_id(1) = files(file)%time_bounds_id
   2136        CALL get_diag_axis( time_axis_id(1), time_name, time_units, time_longname,&
   2137             & cart_name, dir, edges, Domain, domainU, DATA)
   2138        CALL get_diag_axis( time_bounds_id(1), timeb_name, timeb_units, timeb_longname,&
   2139             & cart_name, dir, edges, Domain, domainU, DATA)
   2140        IF ( do_cf_compliance() ) THEN
   2141 ! CF Compliance requires the unit on the _bnds axis is the same as 'time'
   2142           files(file)%f_bounds =  write_field_meta_data(files(file)%file_unit,&
   2143                & TRIM(time_name)//'_bnds', (/time_bounds_id,time_axis_id/),&
   2144                & time_units, TRIM(time_name)//' axis boundaries', pack=pack_size)
   2145        ELSE
   2146           files(file)%f_bounds =  write_field_meta_data(files(file)%file_unit,&
   2147                & TRIM(time_name)//'_bnds', (/time_bounds_id,time_axis_id/),&
   2148                & TRIM(time_unit_list(files(file)%time_units)),&
   2149                & TRIM(time_name)//' axis boundaries', pack=pack_size)
   2150        END IF
   2151     END IF
   2152 ! Let lower levels know that all meta data has been sent
   2153     CALL done_meta_data_use_mpp_io(files(file)%file_unit)
   2154    endif !< use_mpp_io
   2155 
   2156     IF( aux_present .AND. .NOT.match_aux_name ) THEN
   2157 ! <ERROR STATUS="WARNING">
   2158 !   one axis has auxiliary but the corresponding field is NOT
   2159 !   found in file <file_name>
   2160 ! </ERROR>
   2161        IF ( mpp_pe() == mpp_root_pe() ) CALL error_mesg('diag_util_mod::opening_file',&
   2162             &'one axis has auxiliary but the corresponding field is NOT found in file '//TRIM(files(file)%name), WARNING)
   2163     END IF
   2164     IF( req_present .AND. .NOT.match_req_fields ) THEN
   2165 ! <ERROR STATUS="FATAL">
   2166 !   one axis has required fields but the corresponding field is NOT
   2167 !   found in file <file_name>
   2168 ! </ERROR>
   2169        IF ( mpp_pe() == mpp_root_pe() ) CALL error_mesg('diag_util_mod::opening_file',&
   2170                   &'one axis has required fields ('//trim(req_fields)//') but the '// &
   2171                   &'corresponding fields are NOT found in file '//TRIM(files(file)%name), FATAL)
   2172     END IF
   2173    if (.not. use_mpp_io) then
   2174 ! Clean up pointer
   2175     if (associated(fileob)) nullify(fileob)
   2176    endif !< use_mpp_io
   2177   END SUBROUTINE opening_file

Page 64          Source Listing                  OPENING_FILE
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                      
                                            
 diag_util_mod_mp_opening_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 11                         Label  1607                                                           1605                              
 ADJUSTL                    Func   1646                                 scalar                    1646                              
 ALLOCATED                  Func   1719                                 scalar                    1719,1810                         
 ALL_SCALAR_OR_1D           Local  1584     L(4)            4           scalar                    1653,1659,1670,1699,1722,1727,1733
                                                                                                  ,1737                             
 ASSOCIATED                 Func   2175                                 scalar                    2175                              
 AUX_NAME                   Local  1587     CHAR            128         scalar                    1787,1788,1906                    
 AUX_PRESENT                Local  1583     L(4)            4           scalar                    1599,1785,1789,1904,2156          
 AVG                        Local  1587     CHAR            128         scalar                    1934,1936,1938,1940,1958,1972,1989
                                                                                                  ,2004,2022,2035,2050,2063         
 AVG_NAME                   Local  1586     CHAR            7           scalar                    1586,1934,1936,1938,2079,2083,2087
                                                                                                  ,2122,2125,2128                   
 AXES                       Local  1581     I(4)            4     1     6        TGT              1772,1775,1787,1797,1807,1815,1818
                                                                                                  ,1821,1825,1827,1830,1833,1840,184
                                                                                                  1,1856,1858,1859,1864,1865,1928,19
                                                                                                  31,1954,1968,1985,2000,2018,2031,2
                                                                                                  046,2059                          
 AXESC                      Local  1582     I(4)            4     1     1        ALC              1841,1843,1846,1849,1852,1865,1866
                                                                                                  ,1867                             
 AXIS_IS_COMPRESSED         Func   1840     L(4)            4           scalar   PRIV             71,1840,1864                      
 BASE_NAME                  Local  1588     CHAR            128         scalar                    1608,1612,1631,1633,1635,1639     
 CART_NAME                  Local  1589     CHAR            32          scalar                    2097,2099,2137,2139               
 DATA                       Local  1569     R(8)            8     1     2        TGT              2097,2099,2137,2139               
 DAY                        Local  1575     I(4)            4           scalar                    1643,1644                         
 DIAG_INIT_TIME             Local  1643     TIME_TYPE       16          scalar   PRIV             66,1643                           
 DIAG_OUTPUT_INIT           Local  1721                                 scalar   PRIV             72,1721,1726,1732,1736            
 DIAG_OUTPUT_INIT_FMS2_IO   Subr   1721                                          PRIV             1721,1732                         
 DIAG_OUTPUT_INIT_USE_MPP_I                                                                                                         
 O                          Subr   1726                                          PRIV             1726,1736                         
 DIR                        Local  1573     I(4)            4           scalar                    2097,2099,2137,2139               
 DOMAIN                     Local  1592     DOMAIN1D        176         scalar                    2097,2099,2137,2139               
 DOMAIN2                    Local  1593     DOMAIN2D        752         scalar                    1651,1660,1662,1671,1676,1677,1680
                                                                                                  ,1702,1704,1706,1722,1727,1733,173
                                                                                                  7                                 
 DOMAINU                    Local  1594     DOMAINUG        544         scalar                    1652,1661,1664,1665,1671,1675,1715
                                                                                                  ,1717,1722,1727,1733,1737,2097,209
                                                                                                  9,2137,2139                       
 DOMAINUG                   Type   1594                                 scalar                    86,1594                           
 DONE_META_DATA             Subr   2115                                          PRIV             73,2115                           
 DONE_META_DATA_USE_MPP_IO  Subr   2153                                          PRIV             74,2153                           
 DO_CF_COMPLIANCE           Func   2100     L(4)            4           scalar   PRIV             79,2100,2140                      
 EDGES                      Local  1573     I(4)            4           scalar                    2097,2099,2137,2139               
 ERROR_STRING               Local  1587     CHAR            128         scalar                    1756,1764,1776,1780               
 FIELDNAME                  Local  1587     CHAR            128         scalar                    1905,1906,1910,1916               

Page 65          Source Listing                  OPENING_FILE
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIELD_NUM                  Local  1570     I(4)            4           scalar                    1655,1656,1657,1660,1661,1665,1745
                                                                                                  ,1746,1753,1754,1768,1771,1772,177
                                                                                                  6,1876,1877,1878,1883,1884,1886,18
                                                                                                  90,1891,1905,1910,1927,1928,1929,1
                                                                                                  933,1935,1937,1953,1954,1957,1959,
                                                                                                  1962,1963,1967,1968,1971,1973,1975
                                                                                                  ,1976,1984,1985,1988,1990,1993,199
                                                                                                  4,1999,2000,2003,2005,2007,2008,20
                                                                                                  17,2018,2021,2023,2026,2027,2030,2
                                                                                                  031,2034,2036,2038,2039,2045,2046,
                                                                                                  2049,2051,2054,2055,2058,2059,2062
                                                                                                  ,2064,2066,2067                   
 FIELD_NUM1                 Local  1571     I(4)            4           scalar                    1874,1878,1890,1891               
 FILE                       Dummy  1561     I(4)            4           scalar   ARG,IN           1605,1608,1609,1610,1618,1625,1654
                                                                                                  ,1655,1707,1719,1721,1722,1723,172
                                                                                                  4,1726,1727,1728,1732,1733,1734,17
                                                                                                  36,1737,1741,1744,1745,1752,1753,1
                                                                                                  800,1807,1810,1811,1812,1814,1815,
                                                                                                  1816,1817,1818,1819,1820,1821,1822
                                                                                                  ,1825,1826,1827,1828,1829,1830,183
                                                                                                  1,1832,1833,1834,1842,1843,1844,18
                                                                                                  45,1846,1847,1848,1849,1850,1856,1
                                                                                                  858,1859,1866,1874,1875,1876,1882,
                                                                                                  1883,1898,1931,1944,1945,1946,1947
                                                                                                  ,1948,1949,1953,1964,1967,1977,198
                                                                                                  4,1995,1999,2009,2017,2028,2030,20
                                                                                                  40,2045,2056,2058,2068,2077,2078,2
                                                                                                  082,2086,2088,2094,2095,2102,2107,
                                                                                                  2109,2115,2120,2121,2124,2127,2129
                                                                                                  ,2134,2135,2142,2146,2148,2153,216
                                                                                                  2,2171                            
 FILENAME                   Local  1587     CHAR            128         scalar                    1639,1646,1705,1707,1709,1716,1717
                                                                                                  ,1721,1726,1732,1736              
 FILENAME_TIME              Dummy  1561     TIME_TYPE       16          scalar   ARG,IN           1620,1621                         
 FILEOB                     Local  1597     RECORD          872         scalar   PTR              1945,1947,1949,1965,1978,1996,2010
                                                                                                  ,2081,2085,2090,2105,2111,2175    
 FILEOBJ                    Local  1723     RECORD          2040  1     1        ALC,TGT,PRIV     67,1723,1734,1815,1827,1843,1945,2
                                                                                                  408,2409,2425,2451,2455,2460,2464,
                                                                                                  2590                              
 FILEOBJND                  Local  1723     RECORD          872   1     1        ALC,TGT,PRIV     67,1723,1734,1818,1830,1846,1947,2
                                                                                                  414,2415,2425,2451,2455,2460,2464,
                                                                                                  2592,2593                         
 FILEOBJU                   Local  1723     RECORD          1672  1     1        ALC,TGT,PRIV     67,1723,1734,1821,1833,1849,1949,2
                                                                                                  411,2412,2424,2451,2455,2460,2464,
                                                                                                  2596                              
 FMS2_IO_GET_INSTANCE_FILEN                                                                                                         
 AME                        Subr   1635                                          PRIV             1635                              
 FMSNETCDFFILE_T            Type   1597                                 scalar   PRIV             1597                              
 FNAME                      Local  1590     CHAR            256         scalar                    1631,1633,1635,1705,1707,1709,1716
                                                                                                  ,1717                             
 FNAME_TIME                 Local  1568     TIME_TYPE       16          scalar                    1621,1623,1625                    
 FNUM_DOMAIN                Local  1596     CHAR            2           scalar                                                      
 FNUM_FOR_DOMAIN            Local  1723     CHAR            2     1     1        ALC,PRIV         67,1723,1734,1814,1817,1820,1826,1
                                                                                                  829,1832,1842,1845,1848,1944,1946,
                                                                                                  1948,2407,2410,2413,2425,2452,2456

Page 66          Source Listing                  OPENING_FILE
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,2461,2465,2589,2591,2595         
 GET_AXIS_AUX               Func   1787     CHAR            128         scalar   PRIV             69,1787                           
 GET_AXIS_REQFLD            Func   1797     CHAR            128         scalar   PRIV             71,1797                           
 GET_COMPRESSED_AXES_IDS    Subr   1841                                          PRIV             71,1841,1865                      
 GET_DATE                   Subr   1643                                          PRIV             88,1643,2217                      
 GET_DIAG_AXIS              Subr   2096                                          PRIV             69,2096,2098,2136,2138            
 GET_DOMAINUG               Func   1661     RECORD          544         scalar   PRIV             70,1661,1665                      
 GET_MOSAIC_TILE_FILE_UG    Subr   1717                                          PRIV             92,1717                           
 GET_TILE_STRING            Subr   1707                                          PRIV             80,1707,1709                      
 GET_TIME_STRING@0          Local  1625     CHAR            128         scalar                                                      
 GLOBAL_DESCRIPTOR          Local  1721     CHAR            256         scalar   PRIV             63,1721,1726,1732,1736            
 HOUR                       Local  1575     I(4)            4           scalar                    1643                              
 IE                         Local  1595     I(4)            4           scalar                    1915,1916                         
 IND                        Local  1595     I(4)            4           scalar                    1913,1914,1915,1921               
 INDEX                      Func   1610                                 scalar                    1610,1906,1913                    
 INPUT_FIELD_NUM            Local  1570     I(4)            4           scalar                    1754,1755,1756,1757,1884,1885,1951
                                                                                                  ,1952,1955,1956,1957,1958,1960,196
                                                                                                  1,1969,1970,1971,1972,1974,1983,19
                                                                                                  86,1987,1988,1991,1992,2001,2002,2
                                                                                                  003,2006,2015,2016,2019,2020,2021,
                                                                                                  2022,2024,2025,2032,2033,2034,2035
                                                                                                  ,2037,2044,2047,2048,2049,2052,205
                                                                                                  3,2060,2061,2062,2065             
 IS                         Local  1595     I(4)            4           scalar                    1911,1913,1914,1915,1916,1921,1922
 J                          Local  1570     I(4)            4           scalar                    1654,1655,1744,1745,1752,1753,1875
                                                                                                  ,1876,1882,1883                   
 K                          Local  1570     I(4)            4           scalar                    1774,1775,1786,1787,1796,1797,1839
                                                                                                  ,1840,1841,1863,1864,1865         
 LAST                       Local  1595     I(4)            4           scalar                    1911,1913,1914,1922               
 LEN_TRIM                   Func   1911                                 scalar                    1911,1952,1983,2016,2044          
 MATCH_AUX_NAME             Local  1583     L(4)            4           scalar                    1600,1904,1906,2156               
 MATCH_REQ_FIELDS           Local  1583     L(4)            4           scalar                    1602,1909,1917,2164               
 MINUTE                     Local  1575     I(4)            4           scalar                    1643                              
 MIX_SNAPSHOT_AVERAGE_FIELD                                                                                                         
 S                          Local  1889     L(4)            4           scalar   PRIV             63,1889,2433,2480                 
 MONTH                      Local  1575     I(4)            4           scalar                    1643,1644                         
 MPP_DOMAIN2D_EQ            Func   1676     L(4)            4           scalar   PRIV             1676,1680                         
 MPP_DOMAINUG_EQ            Func   1664     L(4)            4           scalar   PRIV             1664,1675                         
 MPP_DOMAINUG_NE            Func   1671     L(4)            4           scalar   PRIV             1671,1715                         
 MPP_GET_CURRENT_NTILE      Func   1702     I(4)            4           scalar   PRIV             85,1702                           
 MPP_GET_NTILE_COUNT        Func   1706     I(4)            4           scalar   PRIV             85,1706                           
 MPP_GET_TILE_ID            Func   1704     I(4)            4     1     0        PRIV             85,1704                           
 MPP_IO_GET_INSTANCE_FILENA                                                                                                         
 ME                         Subr   1633                                          PRIV             1633                              
 NFIELDS_LOOP               Label  1882                                 scalar                    2072                              
 NTILEME                    Local  1574     I(4)            4           scalar                    1702,1703                         
 NULL_DOMAINUG              Local  1652     DOMAINUG        544         scalar   PRIV,SAVE        86,1652,1664,1671,1675,1715       
 NUM_AXES                   Local  1570     I(4)            4           scalar                    1657,1658,1660,1663,1665,1771,1772
                                                                                                  ,1774,1786,1796,1807,1815,1818,182
                                                                                                  1,1825,1827,1830,1833,1839,1856,18
                                                                                                  58,1859,1863,1927,1928,1930,1931,1
                                                                                                  954,1968,1985,2000,2018,2031,2046,
                                                                                                  2059                              
 OPENING_FILE               Subr   1561                                                           2536,2544                         
 PACK_SIZE                  Local  2080     I(4)            4           scalar   PRIV             63,2080,2084,2089,2104,2110,2123,2

Page 67          Source Listing                  OPENING_FILE
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  126,2130,2144,2149                
 POSITION                   Local  1572     I(4)            4           scalar                    1610,1611,1612                    
 PREFIX                     Local  1585     CHAR            7           scalar                                                      
 PREPEND_DATE               Local  1642     L(4)            4           scalar   PRIV             65,1642                           
 PRESENT                    Func   1620                                 scalar                    1620                              
 REQ_FIELDS                 Local  1587     CHAR            128         scalar                    1797,1798,1800,1911,1913,1916,2170
 REQ_PRESENT                Local  1583     L(4)            4           scalar                    1601,1795,1801,1909,2164          
 RETURN_DOMAIN              Subr   1677                                          PRIV             80,1677                           
 SECOND                     Local  1575     I(4)            4           scalar                    1643                              
 START_DATE                 Local  1591     CHAR            24          scalar                    1644,1646                         
 SUFFIX                     Local  1588     CHAR            128         scalar                    1625,1627,1639                    
 TILE_ID                    Local  1576     I(4)            4     1     1        ALC              1703,1704,1707,1708,1709,1711     
 TIME                       Dummy  1561     TIME_TYPE       16          scalar   ARG,IN           1623                              
 TIMEB_LONGNAME             Local  1589     CHAR            32          scalar                    2098,2138                         
 TIMEB_NAME                 Local  1589     CHAR            32          scalar                    2098,2138                         
 TIMEB_UNITS                Local  1587     CHAR            128         scalar                    2098,2138                         
 TIME_AXIS_ID               Local  1577     I(4)            4     1     1        TGT              2077,2079,2083,2087,2094,2096,2103
                                                                                                  ,2108,2120,2122,2125,2128,2134,213
                                                                                                  6,2143,2147                       
 TIME_BOUNDS_ID             Local  1577     I(4)            4     1     1                         2095,2098,2103,2108,2135,2138,2143
                                                                                                  ,2147                             
 TIME_LONGNAME              Local  1589     CHAR            32          scalar                    2096,2136                         
 TIME_NAME                  Local  1589     CHAR            32          scalar                    2096,2103,2104,2108,2110,2136,2143
                                                                                                  ,2144,2147,2149                   
 TIME_OPS                   Local  1583     L(4)            4           scalar                    1743,1747,1815,1818,1821,1824,1856
                                                                                                  ,1857,2076,2093,2119,2133         
 TIME_UNITS                 Local  1587     CHAR            128         scalar                    1605,2079,2083,2096,2104,2122,2125
                                                                                                  ,2136,2144                        
 TRIM                       Func   1605                                 scalar                    1605,1618,1639,1646,1705,1707,1709
                                                                                                  ,1716,1756,1757,1764,1780,1788,179
                                                                                                  8,1800,1898,1906,1916,2088,2103,21
                                                                                                  04,2108,2109,2110,2129,2143,2144,2
                                                                                                  147,2148,2149,2162,2170,2171      
 USE_MPP_IO                 Dummy  1561     L(4)            4           scalar   ARG,INOUT        1632,1720,1731,1808,1942,2073,2173
 WARNING                    Param  1764     I(4)            4           scalar   PRIV             78,1764,2162                      
 WRITE_AXIS_META_DATA       Local  1815                                 scalar   PRIV             72,1815,1818,1821,1827,1830,1833,1
                                                                                                  843,1846,1849,1856,1859,1866      
 WRITE_AXIS_META_DATA_FMS2_                                                                                                         
 IO                         Subr   1815                                          PRIV             1815,1818,1821,1827,1830,1833,1843
                                                                                                  ,1846,1849                        
 WRITE_AXIS_META_DATA_USE_M                                                                                                         
 PP_IO                      Subr   1856                                          PRIV             1856,1859,1866                    
 WRITE_FIELD_META_DATA      Local  1953                                 scalar   PRIV             73,1953,1967,1984,1999,2017,2030,2
                                                                                                  045,2058,2078,2082,2086,2102,2107,
                                                                                                  2121,2124,2127,2142,2146          
 WRITE_FIELD_META_DATA_FMS2                                                                                                         
 _IO                        Func   1953     RECORD          2424        scalar   PRIV             1953,1967,1984,1999,2078,2082,2086
                                                                                                  ,2102,2107                        
 WRITE_FIELD_META_DATA_USE_                                                                                                         
 MPP_IO                     Func   2017     RECORD          2424        scalar   PRIV             2017,2030,2045,2058,2121,2124,2127
                                                                                                  ,2142,2146                        
 YEAR                       Local  1575     I(4)            4           scalar                    1643,1644                         



Page 68          Source Listing                  OPENING_FILE
2021-06-01 08:54 Symbol Table                    diag_util.F90

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FILE_TYPE.ATTRIBUTES       RECORD          1560  11280    1     1        ALC              1719,1724,1728,2768,2769,2810,2817 
                                                                                           ,2845,2846,2848,2853,2855,2856,286 
                                                                                           7,2868,2869                        
 FILE_TYPE.BYTES_WRITTEN    I(4)            4     1480           scalar                    1741,2427,2474                     
 FILE_TYPE.F_AVG_END        DIAG_FIELDTYPE  2424  4008           scalar                    2082,2124,2454,2497                
 FILE_TYPE.F_AVG_NITEMS     DIAG_FIELDTYPE  2424  6432           scalar                    2086,2127,2459,2500                
 FILE_TYPE.F_AVG_START      DIAG_FIELDTYPE  2424  1584           scalar                    2078,2121,2450,2495                
 FILE_TYPE.F_BOUNDS         DIAG_FIELDTYPE  2424  8856           scalar                    2102,2107,2142,2146,2463,2503      
 FILE_TYPE.IS_TIME_AXIS_REGISTERED                                                                                         ...
                            L(4)            4     11368          scalar   ALC              1810,1811,1812,1816,1819,1822,1828 
                                                                                           ,1831,1834,1844,1847,1850          
 FILE_TYPE.NUM_ATTRIBUTES   I(4)            4     11352          scalar                    1724,1728,2779,2809,2830,2843      
 FILE_TYPE.USE_DOMAINUG     L(4)            4     11356          scalar                    1964,1977,1995,2009,2028,2040,2056 
                                                                                           ,2068                              
 INPUT_FIELD_TYPE.INTERP_METHOD                                                                                            ...
                            CHAR            64    768            scalar                    1952,1961,1983,1992,2016,2025,2044 
                                                                                           ,2053                              
 INPUT_FIELD_TYPE.LONG_NAME CHAR            128   256            scalar                    1956,1970,1987,2002,2020,2033,2048 
                                                                                           ,2061                              
 INPUT_FIELD_TYPE.MISSING_VALUE                                                                                            ...
                            R(8)            8     856            scalar                    1958,1972,2022,2035                
 INPUT_FIELD_TYPE.MISSING_VALUE_PRESENT                                                                                    ...
                            L(4)            4     848            scalar                    1951,2015                          
 INPUT_FIELD_TYPE.RANGE     R(8)            8     864      1     2                         1957,1971,1988,2003,2021,2034,2049 
                                                                                           ,2062                              
 INPUT_FIELD_TYPE.UNITS     CHAR            128   384            scalar                    1955,1969,1986,2001,2019,2032,2047 
                                                                                           ,2060                              
 OUTPUT_FIELD_TYPE.ATTRIBUTES                                                                                              ...
                            RECORD          1560  3312     1     1        ALC              1962,1975,1993,2007,2026,2038,2054 
                                                                                           ,2066,2652,2653,2695,2702,2730,273 
                                                                                           1,2733,2738,2740,2741,2752,2753,27 
                                                                                           54                                 
 OUTPUT_FIELD_TYPE.AXES     I(4)            4     3128     1     4        TGT              1660,1661,1665,1772,1928           
 OUTPUT_FIELD_TYPE.F_TYPE   DIAG_FIELDTYPE  2424  704            scalar                    1953,1967,1984,1999,2017,2030,2045 
                                                                                           ,2058,2472                         
 OUTPUT_FIELD_TYPE.STATIC   L(4)            4     144            scalar                    1891,1929,2431,2478,2581           

Page 69          Source Listing                  OPENING_FILE
2021-06-01 08:54                                 diag_util.F90

   2178 
   2179 !> @brief This function determines a string based on current time.
   2180 !!     This string is used as suffix in output file name
   2181 !! @return Character(len=128) get_time_string
   2182   CHARACTER(len=128) FUNCTION get_time_string(filename, current_time)
   2183     CHARACTER(len=128), INTENT(in) :: filename !< File name.
   2184     TYPE(time_type), INTENT(in) :: current_time !< Current model time.
   2185 
   2186     INTEGER :: yr1 !< get from current time
   2187     INTEGER :: mo1 !< get from current time
   2188     INTEGER :: dy1 !< get from current time
   2189     INTEGER :: hr1 !< get from current time
   2190     INTEGER :: mi1 !< get from current time
   2191     INTEGER :: sc1 !< get from current time
   2192     INTEGER :: yr2 !< for computing next_level time unit
   2193     INTEGER :: dy2 !< for computing next_level time unit
   2194     INTEGER :: hr2 !< for computing next_level time unit
   2195     INTEGER :: mi2 !< for computing next_level time unit
   2196     INTEGER :: yr1_s !< actual values to write string
   2197     INTEGER :: mo1_s !< actual values to write string
   2198     INTEGER :: dy1_s !< actual values to write string
   2199     INTEGER :: hr1_s !< actual values to write string
   2200     INTEGER :: mi1_s !< actual values to write string
   2201     INTEGER :: sc1_s !< actual values to write string
   2202     INTEGER :: abs_day              !< component of current_time
   2203     INTEGER :: abs_sec              !< component of current_time
   2204     INTEGER :: days_per_month(12) = (/31,28,31,30,31,30,31,31,30,31,30,31/)
   2205     INTEGER :: julian_day, i, position, len, first_percent
   2206     CHARACTER(len=1) :: width  !< width of the field in format write
   2207     CHARACTER(len=10) :: format
   2208     CHARACTER(len=20) :: yr !< string of current time (output)
   2209     CHARACTER(len=20) :: mo !< string of current time (output)
   2210     CHARACTER(len=20) :: dy !< string of current time (output)
   2211     CHARACTER(len=20) :: hr !< string of current time (output)
   2212     CHARACTER(len=20) :: mi !< string of current time (output)
   2213     CHARACTER(len=20) :: sc !< string of current time (output)
   2214     CHARACTER(len=128) :: filetail
   2215 
   2216     format = '("_",i*.*)'
   2217     CALL get_date(current_time, yr1, mo1, dy1, hr1, mi1, sc1)
   2218     len = LEN_TRIM(filename)
   2219     first_percent = INDEX(filename, '%')
   2220     filetail = filename(first_percent:len)
   2221 ! compute year string
   2222     position = INDEX(filetail, 'yr')
   2223     IF ( position > 0 ) THEN
   2224        width = filetail(position-1:position-1)
   2225        yr1_s = yr1
   2226        format(7:9) = width//'.'//width
   2227        WRITE(yr, format) yr1_s
   2228        yr2 = 0
   2229     ELSE
   2230        yr = ' '
   2231        yr2 = yr1 - 1
   2232     END IF
   2233 ! compute month string
   2234     position = INDEX(filetail, 'mo')

Page 70          Source Listing                  GET_TIME_STRING
2021-06-01 08:54                                 diag_util.F90

   2235     IF ( position > 0 ) THEN
   2236        width = filetail(position-1:position-1)
   2237        mo1_s = yr2*12 + mo1
   2238        format(7:9) = width//'.'//width
   2239        WRITE(mo, format) mo1_s
   2240     ELSE
   2241        mo = ' '
   2242     END IF
   2243 ! compute day string
   2244     IF ( LEN_TRIM(mo) > 0 ) THEN ! month present
   2245        dy1_s = dy1
   2246        dy2 = dy1_s - 1
   2247     ELSE IF ( LEN_TRIM(yr) >0 )  THEN ! no month, year present
   2248 ! compute julian day
   2249        IF ( mo1 == 1 ) THEN
   2250           dy1_s = dy1
   2251        ELSE
   2252           julian_day = 0
   2253           DO i = 1, mo1-1
   2254              julian_day = julian_day + days_per_month(i)
   2255           END DO
   2256           IF ( leap_year(current_time) .AND. mo1 > 2 ) julian_day = julian_day + 1
   2257           julian_day = julian_day + dy1
   2258           dy1_s = julian_day
   2259        END IF
   2260        dy2 = dy1_s - 1
   2261     ELSE ! no month, no year
   2262        CALL get_time(current_time, abs_sec, abs_day)
   2263        dy1_s = abs_day
   2264        dy2 = dy1_s
   2265     END IF
   2266     position = INDEX(filetail, 'dy')
   2267     IF ( position > 0 ) THEN
   2268        width = filetail(position-1:position-1)
   2269        FORMAT(7:9) = width//'.'//width
   2270        WRITE(dy, FORMAT) dy1_s
   2271     ELSE
   2272        dy = ' '
   2273     END IF
   2274 ! compute hour string
   2275     IF ( LEN_TRIM(dy) > 0 ) THEN
   2276        hr1_s = hr1
   2277     ELSE
   2278        hr1_s = dy2*24 + hr1
   2279     END IF
   2280     hr2 = hr1_s
   2281     position = INDEX(filetail, 'hr')
   2282     IF ( position > 0 ) THEN
   2283        width = filetail(position-1:position-1)
   2284        format(7:9) = width//'.'//width
   2285        WRITE(hr, format) hr1_s
   2286     ELSE
   2287        hr = ' '
   2288     END IF
   2289 ! compute minute string
   2290     IF ( LEN_TRIM(hr) > 0 ) THEN
   2291        mi1_s = mi1

Page 71          Source Listing                  GET_TIME_STRING
2021-06-01 08:54                                 diag_util.F90

   2292     ELSE
   2293        mi1_s = hr2*60 + mi1
   2294     END IF
   2295     mi2 = mi1_s
   2296     position = INDEX(filetail, 'mi')
   2297     IF(position>0) THEN
   2298        width = filetail(position-1:position-1)
   2299        format(7:9) = width//'.'//width
   2300        WRITE(mi, format) mi1_s
   2301     ELSE
   2302        mi = ' '
   2303     END IF
   2304 ! compute second string
   2305     IF ( LEN_TRIM(mi) > 0 ) THEN
   2306        sc1_s = sc1
   2307     ELSE
   2308        sc1_s = NINT(mi2*SECONDS_PER_MINUTE) + sc1
   2309     END IF
   2310     position = INDEX(filetail, 'sc')
   2311     IF ( position > 0 ) THEN
   2312        width = filetail(position-1:position-1)
   2313        format(7:9) = width//'.'//width
   2314        WRITE(sc, format) sc1_s
   2315     ELSE
   2316        sc = ' '
   2317     ENDIF
   2318     get_time_string = TRIM(yr)//TRIM(mo)//TRIM(dy)//TRIM(hr)//TRIM(mi)//TRIM(sc)
   2319   END FUNCTION get_time_string

Page 72          Source Listing                  GET_TIME_STRING
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                         
                                               
 diag_util_mod_mp_get_time_string_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS_DAY                    Local  2202     I(4)            4           scalar                    2262,2263                         
 ABS_SEC                    Local  2203     I(4)            4           scalar                    2262                              
 CURRENT_TIME               Dummy  2182     TIME_TYPE       16          scalar   ARG,IN           2217,2256,2262                    
 DAYS_PER_MONTH             Local  2204     I(4)            4     1     12                        2204,2254                         
 DY                         Local  2210     CHAR            20          scalar                    2270,2272,2275,2318               
 DY1                        Local  2188     I(4)            4           scalar                    2217,2245,2250,2257               
 DY1_S                      Local  2198     I(4)            4           scalar                    2245,2246,2250,2258,2260,2263,2264
                                                                                                  ,2270                             
 DY2                        Local  2193     I(4)            4           scalar                    2246,2260,2264,2278               
 FILENAME                   Dummy  2182     CHAR            128         scalar   ARG,IN           2218,2219,2220                    
 FILETAIL                   Local  2214     CHAR            128         scalar                    2220,2222,2224,2234,2236,2266,2268
                                                                                                  ,2281,2283,2296,2298,2310,2312    
 FIRST_PERCENT              Local  2205     I(4)            4           scalar                    2219,2220                         
 FORMAT                     Local  2207     CHAR            10          scalar                    2216,2226,2227,2238,2239,2269,2270
                                                                                                  ,2284,2285,2299,2300,2313,2314    
 GET_TIME                   Subr   2262                                          PRIV             88,2262,2340                      
 GET_TIME_STRING            Func   2182     CHAR            128         scalar                    1625,2318                         
 HR                         Local  2211     CHAR            20          scalar                    2285,2287,2290,2318               
 HR1                        Local  2189     I(4)            4           scalar                    2217,2276,2278                    
 HR1_S                      Local  2199     I(4)            4           scalar                    2276,2278,2280,2285               
 HR2                        Local  2194     I(4)            4           scalar                    2280,2293                         
 I                          Local  2205     I(4)            4           scalar                    2253,2254                         
 INDEX                      Func   2219                                 scalar                    2219,2222,2234,2266,2281,2296,2310
 JULIAN_DAY                 Local  2205     I(4)            4           scalar                    2252,2254,2256,2257,2258          
 LEAP_YEAR                  Func   2256     L(4)            4           scalar   PRIV             88,2256                           
 LEN                        Local  2205     I(4)            4           scalar                    2218,2220                         
 LEN_TRIM                   Func   2218                                 scalar                    2218,2244,2247,2275,2290,2305     
 MI                         Local  2212     CHAR            20          scalar                    2300,2302,2305,2318               
 MI1                        Local  2190     I(4)            4           scalar                    2217,2291,2293                    
 MI1_S                      Local  2200     I(4)            4           scalar                    2291,2293,2295,2300               
 MI2                        Local  2195     I(4)            4           scalar                    2295,2308                         
 MO                         Local  2209     CHAR            20          scalar                    2239,2241,2244,2318               
 MO1                        Local  2187     I(4)            4           scalar                    2217,2237,2249,2253,2256          
 MO1_S                      Local  2197     I(4)            4           scalar                    2237,2239                         
 NINT                       Func   2308                                 scalar                    2308                              
 POSITION                   Local  2205     I(4)            4           scalar                    2222,2223,2224,2234,2235,2236,2266
                                                                                                  ,2267,2268,2281,2282,2283,2296,229
                                                                                                  7,2298,2310,2311,2312             
 SC                         Local  2213     CHAR            20          scalar                    2314,2316,2318                    
 SC1                        Local  2191     I(4)            4           scalar                    2217,2306,2308                    
 SC1_S                      Local  2201     I(4)            4           scalar                    2306,2308,2314                    
 TRIM                       Func   2318                                 scalar                    2318                              
 WIDTH                      Local  2206     CHAR            1           scalar                    2224,2226,2236,2238,2268,2269,2283
                                                                                                  ,2284,2298,2299,2312,2313         

Page 73          Source Listing                  GET_TIME_STRING
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 YR                         Local  2208     CHAR            20          scalar                    2227,2230,2247,2318               
 YR1                        Local  2186     I(4)            4           scalar                    2217,2225,2231                    
 YR1_S                      Local  2196     I(4)            4           scalar                    2225,2227                         
 YR2                        Local  2192     I(4)            4           scalar                    2228,2231,2237                    

Page 74          Source Listing                  GET_TIME_STRING
2021-06-01 08:54                                 diag_util.F90

   2320 
   2321 !> @brief Return the difference between two times in units.
   2322 !! @return Real get_data_dif
   2323   REAL FUNCTION get_date_dif(t2, t1, units)
   2324     TYPE(time_type), INTENT(in) :: t2 !< Most recent time.
   2325     TYPE(time_type), INTENT(in) :: t1 !< Most distant time.
   2326     INTEGER, INTENT(in) :: units !< Unit of return value.
   2327 
   2328     INTEGER :: dif_seconds, dif_days
   2329     TYPE(time_type) :: dif_time
   2330 
   2331 ! Compute time axis label value
   2332 ! <ERROR STATUS="FATAL">
   2333 !   variable t2 is less than in variable t1
   2334 ! </ERROR>
   2335     IF ( t2 < t1 ) CALL error_mesg('diag_util_mod::get_date_dif', &
   2336          & 'in variable t2 is less than in variable t1', FATAL)
   2337 
   2338     dif_time = t2 - t1
   2339 
   2340     CALL get_time(dif_time, dif_seconds, dif_days)
   2341 
   2342     IF ( units == DIAG_SECONDS ) THEN
   2343        get_date_dif = dif_seconds + SECONDS_PER_DAY * dif_days
   2344     ELSE IF ( units == DIAG_MINUTES ) THEN
   2345        get_date_dif = 1440 * dif_days + dif_seconds / SECONDS_PER_MINUTE
   2346     ELSE IF ( units == DIAG_HOURS ) THEN
   2347        get_date_dif = 24 * dif_days + dif_seconds / SECONDS_PER_HOUR
   2348     ELSE IF ( units == DIAG_DAYS ) THEN
   2349        get_date_dif = dif_days + dif_seconds / SECONDS_PER_DAY
   2350     ELSE IF ( units == DIAG_MONTHS ) THEN
   2351 ! <ERROR STATUS="FATAL">
   2352 !   months not supported as output units
   2353 ! </ERROR>
   2354        CALL error_mesg('diag_util_mod::get_date_dif', 'months not supported as output units', FATAL)
   2355     ELSE IF ( units == DIAG_YEARS ) THEN
   2356 ! <ERROR STATUS="FATAL">
   2357 !   years not suppored as output units
   2358 ! </ERROR>
   2359        CALL error_mesg('diag_util_mod::get_date_dif', 'years not supported as output units', FATAL)
   2360     ELSE
   2361 ! <ERROR STATUS="FATAL">
   2362 !   illegal time units
   2363 ! </ERROR>
   2364        CALL error_mesg('diag_util_mod::diag_date_dif', 'illegal time units', FATAL)
   2365     END IF
   2366   END FUNCTION get_date_dif

Page 75          Source Listing                  GET_DATE_DIF
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                      
                                            
 diag_util_mod_mp_get_date_dif_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIF_DAYS                   Local  2328     I(4)            4           scalar                    2340,2343,2345,2347,2349          
 DIF_SECONDS                Local  2328     I(4)            4           scalar                    2340,2343,2345,2347,2349          
 DIF_TIME                   Local  2329     TIME_TYPE       16          scalar                    2338,2340                         
 GET_DATE_DIF               Func   2323     R(8)            8           scalar                                                      
 SECONDS_PER_DAY            Param  2343     R(8)            8           scalar   PRIV             93,2343,2349                      
 T1                         Dummy  2323     TIME_TYPE       16          scalar   ARG,IN           2335,2338                         
 T2                         Dummy  2323     TIME_TYPE       16          scalar   ARG,IN           2335,2338                         
 TIME_MINUS                 Func   2338     RECORD          16          scalar   PRIV             2338                              
 UNITS                      Dummy  2323     I(4)            4           scalar   ARG,IN           2342,2344,2346,2348,2350,2355     

Page 76          Source Listing                  GET_DATE_DIF
2021-06-01 08:54                                 diag_util.F90

   2367 
   2368 !> @brief Write data out to file, and if necessary flush the buffers.
   2369   SUBROUTINE diag_data_out(file, field, dat, time, final_call_in, static_write_in, use_mpp_io_arg, filename_time)
   2370     INTEGER, INTENT(in) :: file !< File ID.
   2371     INTEGER, INTENT(in) :: field !< Field ID.
   2372     REAL, DIMENSION(:,:,:,:), INTENT(inout) :: dat !< Data to write out.
   2373     TYPE(time_type), INTENT(in) :: time !< Current model time.
   2374     LOGICAL, OPTIONAL, INTENT(in):: final_call_in !< <TT>.TRUE.</TT> if this is the last write for file.
   2375     LOGICAL, OPTIONAL, INTENT(in):: static_write_in !< <TT>.TRUE.</TT> if static fields are to be written to file.
   2376     logical,optional,intent(in) :: use_mpp_io_arg !< Switch for which IO to use for outputting data
   2377     type(time_type), intent(in), optional :: filename_time !< Time used in setting the filename when writting periodic files
   2378 
   2379     LOGICAL :: final_call, do_write, static_write
   2380     INTEGER :: i, num
   2381     REAL :: dif, time_data(2, 1, 1, 1), dt_time(1, 1, 1, 1), start_dif, end_dif
   2382     LOGICAL :: use_mpp_io
   2383 
   2384     if (present(use_mpp_io_arg)) then
   2385         use_mpp_io = use_mpp_io_arg
   2386     else
   2387         call error_mesg("diag_util_mod::diag_data_out",&
   2388         "diag_data_out must be called with the argument use_mpp_io_arg",FATAL)
   2389     endif
   2390     do_write = .TRUE.
   2391     final_call = .FALSE.
   2392     IF ( PRESENT(final_call_in) ) final_call = final_call_in
   2393     static_write = .FALSE.
   2394     IF ( PRESENT(static_write_in) ) static_write = static_write_in
   2395 !> dif is the time as a real that is evaluated
   2396     dif = get_date_dif(time, base_time, files(file)%time_units)
   2397 
   2398 ! get file_unit, open new file and close curent file if necessary
   2399     IF ( .NOT.static_write .OR. files(file)%file_unit < 0 ) &
   2400        CALL check_and_open(file, time, do_write, use_mpp_io, filename_time=filename_time)
   2401     IF ( .NOT.do_write ) RETURN  ! no need to write data
   2402    if( .not. use_mpp_io) then
   2403 !> Set up the time index and write the correct time value to the time array
   2404     if (dif > files(file)%rtime_current) then
   2405      files(file)%time_index = files(file)%time_index + 1
   2406      files(file)%rtime_current = dif
   2407      if (fnum_for_domain(file) == "2d") then
   2408           call diag_write_time (fileobj(file), files(file)%rtime_current, files(file)%time_index,   &
   2409                                 time_name=fileobj(file)%time_name)
   2410      elseif (fnum_for_domain(file) == "ug") then
   2411           call diag_write_time (fileobjU(file), files(file)%rtime_current, files(file)%time_index,  &
   2412                                 time_name=fileobjU(file)%time_name)
   2413      elseif (fnum_for_domain(file) == "nd") then
   2414           call diag_write_time (fileobjND(file), files(file)%rtime_current, files(file)%time_index, &
   2415                                 time_name=fileobjND(file)%time_name)
   2416      else
   2417           call error_mesg("diag_util_mod::diag_data_out","Error opening the file "//files(file)%name,fatal)
   2418      endif
   2419     elseif (dif < files(file)%rtime_current .and. .not.(static_write) ) then
   2420      call error_mesg("diag_util_mod::diag_data_out","The time for the file "//trim(files(file)%name)//&
   2421                     " has gone backwards. There may be missing values for some of the variables",NOTE)
   2422     endif
   2423 !> Write data

Page 77          Source Listing                  DIAG_DATA_OUT
2021-06-01 08:54                                 diag_util.F90

   2424     call diag_field_write (output_fields(field)%output_name, dat, static=static_write, file_num=file, fileobjU=fileobjU, &
   2425                          fileobj=fileobj, fileobjND=fileobjND, fnum_for_domain=fnum_for_domain(file), time_in=files(file)%ti
   2425 me_index)
   2426 ! record number of bytes written to this file
   2427     files(file)%bytes_written = files(file)%bytes_written +&
   2428          & (SIZE(dat,1)*SIZE(dat,2)*SIZE(dat,3))*(8/output_fields(field)%pack)
   2429     IF ( .NOT.output_fields(field)%written_once ) output_fields(field)%written_once = .TRUE.
   2430 ! *** inserted this line because start_dif < 0 for static fields ***
   2431     IF ( .NOT.output_fields(field)%static ) THEN
   2432        start_dif = get_date_dif(output_fields(field)%last_output, base_time,files(file)%time_units)
   2433        IF ( .NOT.mix_snapshot_average_fields ) THEN
   2434           end_dif = get_date_dif(output_fields(field)%next_output, base_time, files(file)%time_units)
   2435        ELSE
   2436           end_dif = dif
   2437        END IF
   2438     END IF
   2439 
   2440 ! Need to write average axes out;
   2441     DO i = 1, files(file)%num_fields
   2442        num = files(file)%fields(i)
   2443        IF ( output_fields(num)%time_ops .AND. &
   2444             input_fields(output_fields(num)%input_field)%register) THEN
   2445 ! time needs to be between start_dif and end_dif to prevent duplicate writes on time_bnds
   2446           IF ( num == field ) THEN
   2447             IF ( files(file)%rtime_current >= start_dif .AND. files(file)%rtime_current <= end_dif) THEN
   2448 ! Output the axes if this is first time-averaged field
   2449              time_data(1, 1, 1, 1) = start_dif
   2450              call diag_field_write (files(file)%f_avg_start, time_data(1:1,:,:,:), file_num=file, &
   2451                                    fileobjU=fileobjU, fileobj=fileobj, fileobjND=fileobjND, &
   2452                                    fnum_for_domain=fnum_for_domain(file), time_in=files(file)%time_index)
   2453              time_data(2, 1, 1, 1) = end_dif
   2454              call diag_field_write (files(file)%f_avg_end, time_data(2:2,:,:,:), file_num=file, &
   2455                                    fileobjU=fileobjU, fileobj=fileobj, fileobjND=fileobjND, &
   2456                                    fnum_for_domain=fnum_for_domain(file), time_in=files(file)%time_index)
   2457 ! Compute the length of the average
   2458              dt_time(1, 1, 1, 1) = end_dif - start_dif
   2459              call diag_field_write (files(file)%f_avg_nitems, dt_time(1:1,:,:,:), file_num=file, &
   2460                                    fileobjU=fileobjU, fileobj=fileobj, fileobjND=fileobjND, &
   2461                                    fnum_for_domain=fnum_for_domain(file), time_in=files(file)%time_index)
   2462 ! Include boundary variable for CF compliance
   2463              call diag_field_write (files(file)%f_bounds, time_data(1:2,:,:,:), file_num=file, &
   2464                                    fileobjU=fileobjU, fileobj=fileobj, fileobjND=fileobjND, &
   2465                                    fnum_for_domain=fnum_for_domain(file), time_in=files(file)%time_index)
   2466              EXIT
   2467             END IF
   2468           END IF
   2469        END IF
   2470     END DO
   2471    else !< use_mpp_io
   2472     CALL diag_field_out(files(file)%file_unit, output_fields(field)%f_type, dat, dif)
   2473 ! record number of bytes written to this file
   2474     files(file)%bytes_written = files(file)%bytes_written +&
   2475          & (SIZE(dat,1)*SIZE(dat,2)*SIZE(dat,3))*(8/output_fields(field)%pack)
   2476     IF ( .NOT.output_fields(field)%written_once ) output_fields(field)%written_once = .TRUE.
   2477 ! *** inserted this line because start_dif < 0 for static fields ***
   2478     IF ( .NOT.output_fields(field)%static ) THEN
   2479        start_dif = get_date_dif(output_fields(field)%last_output, base_time,files(file)%time_units)

Page 78          Source Listing                  DIAG_DATA_OUT
2021-06-01 08:54                                 diag_util.F90

   2480        IF ( .NOT.mix_snapshot_average_fields ) THEN
   2481           end_dif = get_date_dif(output_fields(field)%next_output, base_time, files(file)%time_units)
   2482        ELSE
   2483           end_dif = dif
   2484        END IF
   2485     END IF
   2486 
   2487 ! Need to write average axes out;
   2488     DO i = 1, files(file)%num_fields
   2489        num = files(file)%fields(i)
   2490        IF ( output_fields(num)%time_ops .AND. &
   2491             input_fields(output_fields(num)%input_field)%register) THEN
   2492           IF ( num == field ) THEN
   2493 ! Output the axes if this is first time-averaged field
   2494              time_data(1, 1, 1, 1) = start_dif
   2495              CALL diag_field_out(files(file)%file_unit, files(file)%f_avg_start, time_data(1:1,:,:,:), dif)
   2496              time_data(2, 1, 1, 1) = end_dif
   2497              CALL diag_field_out(files(file)%file_unit, files(file)%f_avg_end, time_data(2:2,:,:,:), dif)
   2498 ! Compute the length of the average
   2499              dt_time(1, 1, 1, 1) = end_dif - start_dif
   2500              CALL diag_field_out(files(file)%file_unit, files(file)%f_avg_nitems, dt_time(1:1,:,:,:), dif)
   2501 
   2502 ! Include boundary variable for CF compliance
   2503              CALL diag_field_out(files(file)%file_unit, files(file)%f_bounds, time_data(1:2,:,:,:), dif)
   2504              EXIT
   2505           END IF
   2506        END IF
   2507     END DO
   2508    endif !< use_mpp_io
   2509 
   2510 ! If write time is greater (equal for the last call) than last_flush for this file, flush it
   2511     IF ( final_call ) THEN
   2512        IF ( time >= files(file)%last_flush ) THEN
   2513           files(file)%last_flush = time
   2514        END IF
   2515     ELSE
   2516        IF ( time > files(file)%last_flush .AND. (flush_nc_files.OR.debug_diag_manager) ) THEN
   2517           files(file)%last_flush = time
   2518        END IF
   2519     END IF
   2520   END SUBROUTINE diag_data_out

Page 79          Source Listing                  DIAG_DATA_OUT
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                       
                                             
 diag_util_mod_mp_diag_data_out_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAT                        Dummy  2369     R(8)            8     4     1        ARG,INOUT        2424,2428,2472,2475               
 DEBUG_DIAG_MANAGER         Local  2516     L(4)            4           scalar   PRIV             64,2516                           
 DIAG_DATA_OUT              Subr   2369                                                                                             
 DIAG_FIELD_OUT             Subr   2472                                          PRIV             76,2472,2495,2497,2500,2503       
 DIAG_FIELD_WRITE           Local  2424                                 scalar   PRIV             75,2424,2450,2454,2459,2463       
 DIAG_FIELD_WRITE_FIELD     Subr   2450                                          PRIV             2450,2454,2459,2463               
 DIAG_FIELD_WRITE_VARNAME   Subr   2424                                          PRIV             2424                              
 DIAG_WRITE_TIME            Subr   2408                                          PRIV             75,2408,2411,2414                 
 DIF                        Local  2381     R(8)            8           scalar                    2396,2404,2406,2419,2436,2472,2483
                                                                                                  ,2495,2497,2500,2503              
 DO_WRITE                   Local  2379     L(4)            4           scalar                    2390,2400,2401                    
 DT_TIME                    Local  2381     R(8)            8     4     1        TGT              2458,2459,2499,2500               
 END_DIF                    Local  2381     R(8)            8           scalar                    2434,2436,2447,2453,2458,2481,2483
                                                                                                  ,2496,2499                        
 FIELD                      Dummy  2369     I(4)            4           scalar   ARG,IN           2424,2428,2429,2431,2432,2434,2446
                                                                                                  ,2472,2475,2476,2478,2479,2481,249
                                                                                                  2                                 
 FILE                       Dummy  2369     I(4)            4           scalar   ARG,IN           2396,2399,2400,2404,2405,2406,2407
                                                                                                  ,2408,2409,2410,2411,2412,2413,241
                                                                                                  4,2415,2417,2419,2420,2424,2425,24
                                                                                                  27,2432,2434,2441,2442,2447,2450,2
                                                                                                  452,2454,2456,2459,2461,2463,2465,
                                                                                                  2472,2474,2479,2481,2488,2489,2495
                                                                                                  ,2497,2500,2503,2512,2513,2516,251
                                                                                                  7                                 
 FILENAME_TIME              Dummy  2369     TIME_TYPE       16          scalar   ARG,IN           2400                              
 FINAL_CALL                 Local  2379     L(4)            4           scalar                    2391,2392,2511                    
 FINAL_CALL_IN              Dummy  2369     L(4)            4           scalar   ARG,IN           2392                              
 FLUSH_NC_FILES             Local  2516     L(4)            4           scalar   PRIV             64,2516                           
 GET_DATE_DIF               Func   2396     R(8)            8           scalar                    104,2343,2345,2347,2349,2396,2432,
                                                                                                  2434,2479,2481                    
 I                          Local  2380     I(4)            4           scalar                    2441,2442,2488,2489               
 NUM                        Local  2380     I(4)            4           scalar                    2442,2443,2444,2446,2489,2490,2491
                                                                                                  ,2492                             
 PRESENT                    Func   2384                                 scalar                    2384,2392,2394                    
 SIZE                       Func   2428                                 scalar                    2428,2475                         
 START_DIF                  Local  2381     R(8)            8           scalar                    2432,2447,2449,2458,2479,2494,2499
 STATIC_WRITE               Local  2379     L(4)            4           scalar                    2393,2394,2399,2419,2424          
 STATIC_WRITE_IN            Dummy  2369     L(4)            4           scalar   ARG,IN           2394                              
 TIME                       Dummy  2369     TIME_TYPE       16          scalar   ARG,IN           2396,2400,2512,2513,2516,2517     
 TIME_DATA                  Local  2381     R(8)            8     4     2        TGT              2449,2450,2453,2454,2463,2494,2495
                                                                                                  ,2496,2497,2503                   
 TIME_GE                    Func   2512     L(4)            4           scalar   PRIV             2512,2534                         
 TRIM                       Func   2420                                 scalar                    2420                              

Page 80          Source Listing                  DIAG_DATA_OUT
2021-06-01 08:54 Symbol Table                    diag_util.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 USE_MPP_IO                 Local  2382     L(4)            4           scalar                    2385,2400,2402                    
 USE_MPP_IO_ARG             Dummy  2369     L(4)            4           scalar   ARG,IN           2384,2385                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FMSNETCDFFILE_T.TIME_NAME  CHAR            20    776            scalar                    2409,2412,2415                     
 OUTPUT_FIELD_TYPE.LAST_OUTPUT                                                                                             ...
                            TIME_TYPE       16    656            scalar                    2432,2479                          
 OUTPUT_FIELD_TYPE.NEXT_OUTPUT                                                                                             ...
                            TIME_TYPE       16    672            scalar                    2434,2481                          

Page 81          Source Listing                  DIAG_DATA_OUT
2021-06-01 08:54                                 diag_util.F90

   2521 
   2522 !> @brief Checks if it is time to open a new file.
   2523 !! @details Checks if it is time to open a new file. If yes, it first closes the
   2524 !!     current file, opens a new file and returns file_unit
   2525 !!     previous diag_manager_end is replaced by closing_file and output_setup by opening_file.
   2526   SUBROUTINE check_and_open(file, time, do_write, use_mpp_io, filename_time)
   2527     INTEGER, INTENT(in) :: file !<File ID.
   2528     TYPE(time_type), INTENT(in) :: time !< Current model time.
   2529     LOGICAL, INTENT(out) :: do_write !< <TT>.TRUE.</TT> if file is expecting more data to write,
   2530 !! <TT>.FALSE.</TT> otherwise.
   2531     LOGICAL, INTENT(in) :: use_mpp_io !< true=mpp_io, false=fms2_io
   2532     TYPE(time_type), INTENT(in), optional :: filename_time !< Time used in setting the filename when writting periodic files
   2533 
   2534     IF ( time >= files(file)%start_time ) THEN
   2535        IF ( files(file)%file_unit < 0 ) THEN ! need to open a new file
   2536           CALL opening_file(file, time, use_mpp_io, filename_time=filename_time)
   2537           do_write = .TRUE.
   2538        ELSE
   2539           do_write = .TRUE.
   2540           IF ( time > files(file)%close_time .AND. time < files(file)%next_open ) THEN
   2541              do_write = .FALSE. ! file still open but receives NO MORE data
   2542           ELSE IF ( time > files(file)%next_open ) THEN ! need to close current file and open a new one
   2543              CALL write_static(file, use_mpp_io)  ! write all static fields and close this file
   2544              CALL opening_file(file, time, use_mpp_io, filename_time=filename_time)
   2545              files(file)%time_index = 0 !< Reset the number of times in the files back to 0
   2546              files(file)%start_time = files(file)%next_open
   2547              files(file)%close_time =&
   2548                   & diag_time_inc(files(file)%start_time,files(file)%duration, files(file)%duration_units)
   2549              files(file)%next_open =&
   2550                   & diag_time_inc(files(file)%next_open, files(file)%new_file_freq,&
   2551                   & files(file)%new_file_freq_units)
   2552              IF ( files(file)%close_time > files(file)%next_open ) THEN
   2553 ! <ERROR STATUS="FATAL">
   2554 !   <file_name> has close time GREATER than next_open time,
   2555 !   check file duration and frequency
   2556 ! </ERROR>
   2557                 CALL error_mesg('diag_util_mod::check_and_open',&
   2558                      & files(file)%name//' has close time GREATER than next_open time, check file duration and frequency',FA
   2558 TAL)
   2559              END IF
   2560           END IF ! no need to open new file, simply return file_unit
   2561        END IF
   2562     ELSE
   2563        do_write = .FALSE.
   2564     END IF
   2565   END SUBROUTINE check_and_open

Page 82          Source Listing                  CHECK_AND_OPEN
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                        
                                              
 diag_util_mod_mp_check_and_open_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_AND_OPEN             Subr   2526                                                           2400                              
 DO_WRITE                   Dummy  2526     L(4)            4           scalar   ARG,OUT          2537,2539,2541,2563               
 FILE                       Dummy  2526     I(4)            4           scalar   ARG,IN           2534,2535,2536,2540,2542,2543,2544
                                                                                                  ,2545,2546,2547,2548,2549,2550,255
                                                                                                  1,2552,2558                       
 FILENAME_TIME              Dummy  2526     TIME_TYPE       16          scalar   ARG,IN           2536,2544                         
 TIME                       Dummy  2526     TIME_TYPE       16          scalar   ARG,IN           2534,2536,2540,2542,2544          
 USE_MPP_IO                 Dummy  2526     L(4)            4           scalar   ARG,IN           2536,2543,2544                    
 WRITE_STATIC               Subr   2543                                                           103,2543                          

Page 83          Source Listing                  CHECK_AND_OPEN
2021-06-01 08:54                                 diag_util.F90

   2566 
   2567 !> @brief Output all static fields in this file
   2568   SUBROUTINE write_static(file, use_mpp_io)
   2569     INTEGER, INTENT(in) :: file !< File ID.
   2570     logical :: use_mpp_io !< Switch to select which IO is used to output history files
   2571 
   2572     INTEGER :: j, i, input_num
   2573 
   2574     DO j = 1, files(file)%num_fields
   2575        i = files(file)%fields(j)
   2576        input_num = output_fields(i)%input_field
   2577 ! skip fields that were not registered
   2578        IF ( .NOT.input_fields(input_num)%register ) CYCLE
   2579        IF ( output_fields(i)%local_output .AND. .NOT. output_fields(i)%need_compute) CYCLE
   2580 ! only output static fields here
   2581        IF ( .NOT.output_fields(i)%static ) CYCLE
   2582        CALL diag_data_out(file, i, output_fields(i)%buffer, files(file)%last_flush, .TRUE., .TRUE., use_mpp_io_arg=use_mpp_i
   2582 o)
   2583     END DO
   2584    if (.not. use_mpp_io) then
   2585 !! New FMS_IO close
   2586 ! File is stil open.  This is to protect when the diag_table has no Fields
   2587 ! going to this file, and it was never opened (b/c diag_data_out was not
   2588 ! called)
   2589       if (fnum_for_domain(file) == "2d" )then
   2590           if (check_if_open(fileobj(file))) call close_file (fileobj(file) )
   2591       elseif (fnum_for_domain(file) == "nd") then
   2592           if (check_if_open(fileobjND(file)) ) then
   2593                call close_file (fileobjND(file))
   2594           endif
   2595       elseif (fnum_for_domain(file) == "ug") then
   2596           if (check_if_open(fileobjU(file))) call close_file (fileobjU(file))
   2597       endif
   2598       files(file)%file_unit = -1
   2599    else !< use_mpp_io
   2600 ! Close up this file
   2601     IF ( files(file)%file_unit.NE.-1 ) then
   2602 ! File is stil open.  This is to protect when the diag_table has no Fields
   2603 ! going to this file, and it was never opened (b/c diag_data_out was not
   2604 ! called)
   2605       CALL mpp_close(files(file)%file_unit)
   2606       files(file)%file_unit = -1
   2607     END IF
   2608    endif  !< use_mpp_io
   2609   END SUBROUTINE write_static

Page 84          Source Listing                  WRITE_STATIC
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                      
                                            
 diag_util_mod_mp_write_static_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_IF_OPEN              Func   2590     L(4)            4           scalar   PRIV             2590,2592,2596                    
 CLOSE_DOMAIN_FILE          Subr   2590                                          PRIV             2590                              
 CLOSE_FILE                 Local  2590                                 scalar   PRIV             2590,2593,2596                    
 CLOSE_UNSTRUCTURED_DOMAIN_                                                                                                         
 FILE                       Subr   2596                                          PRIV             2596                              
 DIAG_DATA_OUT              Subr   2582                                                           103,2582                          
 FILE                       Dummy  2568     I(4)            4           scalar   ARG,IN           2574,2575,2582,2589,2590,2591,2592
                                                                                                  ,2593,2595,2596,2598,2601,2605,260
                                                                                                  6                                 
 I                          Local  2572     I(4)            4           scalar                    2575,2576,2579,2581,2582          
 INPUT_NUM                  Local  2572     I(4)            4           scalar                    2576,2578                         
 J                          Local  2572     I(4)            4           scalar                    2574,2575                         
 MPP_CLOSE                  Subr   2605                                          PRIV             90,2605                           
 NETCDF_FILE_CLOSE_WRAP     Subr   2593                                          PRIV             2593                              
 USE_MPP_IO                 Dummy  2568     L(4)            4           scalar   ARG,INOUT        2582,2584                         
 WRITE_STATIC               Subr   2568                                                                                             

Page 85          Source Listing                  WRITE_STATIC
2021-06-01 08:54                                 diag_util.F90

   2610 
   2611 !> @brief Checks to see if <TT>output_name</TT> and <TT>output_file</TT> are unique in <TT>output_fields</TT>.
   2612   SUBROUTINE check_duplicate_output_fields(err_msg)
   2613     CHARACTER(len=*), INTENT(out), OPTIONAL :: err_msg !< Error message.  If empty, then no duplicates found.
   2614 
   2615     INTEGER :: i, j, tmp_file
   2616     CHARACTER(len=128) :: tmp_name
   2617     CHARACTER(len=256) :: err_msg_local
   2618 
   2619     IF ( PRESENT(err_msg) ) err_msg=''
   2620 ! Do the checking when more than 1 output_fileds present
   2621     IF ( num_output_fields <= 1 ) RETURN
   2622     err_msg_local = ''
   2623 
   2624     i_loop: DO i = 1, num_output_fields-1
   2625        tmp_name = TRIM(output_fields(i)%output_name)
   2626        tmp_file =  output_fields(i)%output_file
   2627        DO j = i+1, num_output_fields
   2628           IF ( (tmp_name == TRIM(output_fields(j)%output_name)) .AND. &
   2629                &(tmp_file == output_fields(j)%output_file)) THEN
   2630              err_msg_local = ' output_field "'//TRIM(tmp_name)//&
   2631                   &'" duplicated in file "'//TRIM(files(tmp_file)%name)//'"'
   2632              EXIT i_loop
   2633           END IF
   2634        END DO
   2635     END DO i_loop
   2636     IF ( err_msg_local /= '' ) THEN
   2637        IF ( fms_error_handler(' ERROR in diag_table',err_msg_local,err_msg) ) RETURN
   2638     END IF
   2639   END SUBROUTINE check_duplicate_output_fields

Page 86          Source Listing                  CHECK_DUPLICATE_OUTPUT_FIELDS
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                                       
                                                             
 diag_util_mod_mp_check_duplicate_output_fields_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CHECK_DUPLICATE_OUTPUT_FIE                                                                                                         
 LDS                        Subr   2612                                                                                             
 ERR_MSG                    Dummy  2612     CHAR                        scalar   ARG,OUT          2619,2637                         
 ERR_MSG_LOCAL              Local  2617     CHAR            256         scalar                    2622,2630,2636,2637               
 I                          Local  2615     I(4)            4           scalar                    2624,2625,2626,2627               
 I_LOOP                     Label  2624                                 scalar                    2632,2635                         
 J                          Local  2615     I(4)            4           scalar                    2627,2628,2629                    
 PRESENT                    Func   2619                                 scalar                    2619                              
 TMP_FILE                   Local  2615     I(4)            4           scalar                    2626,2629,2631                    
 TMP_NAME                   Local  2616     CHAR            128         scalar                    2625,2628,2630                    
 TRIM                       Func   2625                                 scalar                    2625,2628,2630,2631               

Page 87          Source Listing                  CHECK_DUPLICATE_OUTPUT_FIELDS
2021-06-01 08:54                                 diag_util.F90

   2640 
   2641 !> @brief Allocates the atttype in out_field
   2642   SUBROUTINE attribute_init_field(out_field, err_msg)
   2643     TYPE(output_field_type), INTENT(inout) :: out_field !< output field to allocate memory for attribute
   2644     CHARACTER(LEN=*), INTENT(out), OPTIONAL :: err_msg !< Error message, passed back to calling function
   2645 
   2646     INTEGER :: istat
   2647 
   2648 ! Need to initialize err_msg if present
   2649     IF ( PRESENT(err_msg) ) err_msg = ''
   2650 
   2651 ! Allocate memory for the attributes
   2652     IF ( .NOT.allocated(out_field%attributes) ) THEN
   2653        ALLOCATE(out_field%attributes(max_field_attributes), STAT=istat)
   2654        IF ( istat.NE.0 ) THEN
   2655 ! <ERROR STATUS="FATAL">
   2656 !   Unable to allocate memory for attribute <name> to module/input_field <module_name>/<field_name>
   2657 ! </ERROR>
   2658           IF ( fms_error_handler('diag_util_mod::attribute_init_field',&
   2659                & 'Unable to allocate memory for attributes', err_msg) ) THEN
   2660              RETURN
   2661           END IF
   2662        ELSE
   2663 ! Set equal to 0.  It will be increased when attributes added
   2664           out_field%num_attributes = 0
   2665        END IF
   2666     END IF
   2667   END SUBROUTINE attribute_init_field

Page 88          Source Listing                  ATTRIBUTE_INIT_FIELD
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                              
                                                    
 diag_util_mod_mp_attribute_init_field_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   2652                                 scalar                    2652                              
 ATTRIBUTE_INIT_FIELD       Subr   2642                                          PRIV             2685                              
 ERR_MSG                    Dummy  2642     CHAR                        scalar   ARG,OUT          2649,2659                         
 ISTAT                      Local  2646     I(4)            4           scalar                    2653,2654                         
 MAX_FIELD_ATTRIBUTES       Local  2653     I(4)            4           scalar   PRIV             64,2653,2716,2769                 
 OUTPUT_FIELD_TYPE          Type   2643                                 scalar   PRIV             64,2643,2672                      
 OUT_FIELD                  Dummy  2642     OUTPUT_FIELD_TYPE                                                                       
                                                            3392        scalar   ARG,INOUT        2652,2653,2664                    
 PRESENT                    Func   2649                                 scalar                    2649                              

Page 89          Source Listing                  ATTRIBUTE_INIT_FIELD
2021-06-01 08:54                                 diag_util.F90

   2668 
   2669 !> @brief Prepends the attribute value to an already existing attribute.  If the
   2670 !!     attribute isn't yet defined, then creates a new attribute
   2671   SUBROUTINE prepend_attribute_field(out_field, att_name, prepend_value, err_msg)
   2672     TYPE(output_field_type), INTENT(inout) :: out_field !< output field that will get the attribute
   2673     CHARACTER(len=*), INTENT(in) :: att_name !< Name of the attribute
   2674     CHARACTER(len=*), INTENT(in) :: prepend_value !< Value to prepend
   2675     CHARACTER(len=*), INTENT(out) , OPTIONAL :: err_msg !< Error message, passed back to calling routine
   2676 
   2677     INTEGER :: length, i, this_attribute
   2678     CHARACTER(len=512) :: err_msg_local
   2679 
   2680 ! Initialize string characters
   2681     err_msg_local=''
   2682     IF ( PRESENT(err_msg) ) err_msg = ''
   2683 
   2684 ! Make sure the attributes for this out field have been initialized
   2685     CALL attribute_init_field(out_field, err_msg_local)
   2686     IF ( TRIM(err_msg_local) .NE. '' ) THEN
   2687        IF ( fms_error_handler('diag_util_mod::prepend_attribute_field', TRIM(err_msg_local), err_msg) ) THEN
   2688           RETURN
   2689        END IF
   2690     END IF
   2691 
   2692 ! Find if attribute exists
   2693     this_attribute = 0
   2694     DO i=1, out_field%num_attributes
   2695        IF ( TRIM(out_field%attributes(i)%name) .EQ. TRIM(att_name) ) THEN
   2696           this_attribute = i
   2697           EXIT
   2698        END IF
   2699     END DO
   2700 
   2701     IF ( this_attribute > 0 ) THEN
   2702        IF ( out_field%attributes(this_attribute)%type .NE. NF90_CHAR ) THEN
   2703 ! <ERROR STATUS="FATAL">
   2704 !   Attribute <name> is not a character attribute.
   2705 ! </ERROR>
   2706           IF ( fms_error_handler('diag_util_mod::prepend_attribute_field', &
   2707                & 'Attribute "'//TRIM(att_name)//'" is not a character attribute.',&
   2708                & err_msg) ) THEN
   2709              RETURN
   2710           END IF
   2711        END IF
   2712     ELSE
   2713 ! Defining a new attribute
   2714 ! Increase the number of field attributes
   2715        this_attribute = out_field%num_attributes + 1
   2716        IF ( this_attribute .GT. max_field_attributes ) THEN
   2717 ! <ERROR STATUS="FATAL">
   2718 !   Number of attributes exceeds max_field_attributes for attribute <name>.
   2719 !   Increase diag_manager_nml:max_field_attributes.
   2720 ! </ERROR>
   2721           IF ( fms_error_handler('diag_util_mod::prepend_attribute_field',&
   2722                & 'Number of attributes exceeds max_field_attributes for attribute "'&
   2723                & //TRIM(att_name)//'".  Increase diag_manager_nml:max_field_attributes.',&
   2724                & err_msg) ) THEN

Page 90          Source Listing                  PREPEND_ATTRIBUTE_FIELD
2021-06-01 08:54                                 diag_util.F90

   2725              RETURN
   2726           END IF
   2727        ELSE
   2728           out_field%num_attributes = this_attribute
   2729 ! Set name and type
   2730           out_field%attributes(this_attribute)%name = att_name
   2731           out_field%attributes(this_attribute)%type = NF90_CHAR
   2732 ! Initialize catt to a blank string, as len_trim doesn't always work on an uninitialized string
   2733           out_field%attributes(this_attribute)%catt = ''
   2734        END IF
   2735     END IF
   2736 
   2737 ! Check if string is already included, and return if found
   2738     IF ( INDEX(TRIM(out_field%attributes(this_attribute)%catt), TRIM(prepend_value)).EQ.0 ) THEN
   2739 ! Check if new string length goes beyond the length of catt
   2740        length = LEN_TRIM(TRIM(prepend_value)//" "//TRIM(out_field%attributes(this_attribute)%catt))
   2741        IF ( length.GT.LEN(out_field%attributes(this_attribute)%catt) ) THEN
   2742 ! <ERROR STATUS="FATAL">
   2743 !   Prepend length for attribute <name> is longer than allowed.
   2744 ! </ERROR>
   2745           IF ( fms_error_handler('diag_util_mod::prepend_attribute_field',&
   2746                & 'Prepend length for attribute "'//TRIM(att_name)//'" is longer than allowed.',&
   2747                & err_msg) ) THEN
   2748              RETURN
   2749           END IF
   2750        END IF
   2751 ! Set fields
   2752        out_field%attributes(this_attribute)%catt =&
   2753             & TRIM(prepend_value)//' '//TRIM(out_field%attributes(this_attribute)%catt)
   2754        out_field%attributes(this_attribute)%len = length
   2755     END IF
   2756   END SUBROUTINE prepend_attribute_field

Page 91          Source Listing                  PREPEND_ATTRIBUTE_FIELD
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                                 
                                                       
 diag_util_mod_mp_prepend_attribute_field_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATT_NAME                   Dummy  2671     CHAR                        scalar   ARG,IN           2695,2707,2723,2730,2746          
 ERR_MSG                    Dummy  2671     CHAR                        scalar   ARG,OUT          2682,2687,2708,2724,2747          
 ERR_MSG_LOCAL              Local  2678     CHAR            512         scalar                    2681,2685,2686,2687               
 I                          Local  2677     I(4)            4           scalar                    2694,2695,2696                    
 INDEX                      Func   2738                                 scalar                    2738                              
 LEN                        Func   2741                                 scalar                    2741                              
 LENGTH                     Local  2677     I(4)            4           scalar                    2740,2741,2754                    
 LEN_TRIM                   Func   2740                                 scalar                    2740                              
 NF90_CHAR                  Param  2702     I(4)            4           scalar   PRIV             96,2702,2731,2817,2846            
 OUT_FIELD                  Dummy  2671     OUTPUT_FIELD_TYPE                                                                       
                                                            3392        scalar   ARG,INOUT        2685,2694,2695,2702,2715,2728,2730
                                                                                                  ,2731,2733,2738,2740,2741,2752,275
                                                                                                  3,2754                            
 PREPEND_ATTRIBUTE_FIELD    Subr   2671                                          PRIV                                               
 PREPEND_VALUE              Dummy  2671     CHAR                        scalar   ARG,IN           2738,2740,2753                    
 PRESENT                    Func   2682                                 scalar                    2682                              
 THIS_ATTRIBUTE             Local  2677     I(4)            4           scalar                    2693,2696,2701,2702,2715,2716,2728
                                                                                                  ,2730,2731,2733,2738,2740,2741,275
                                                                                                  2,2753,2754                       
 TRIM                       Func   2686                                 scalar                    2686,2687,2695,2707,2723,2738,2740
                                                                                                  ,2746,2753                        


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 DIAG_ATTTYPE.CATT          CHAR            1280  136            scalar                    2733,2738,2740,2741,2752,2753,2848 
                                                                                           ,2853,2855,2856,2867,2868          
 DIAG_ATTTYPE.LEN           I(4)            4     4              scalar                    2754,2869                          
 DIAG_ATTTYPE.NAME          CHAR            128   8              scalar                    2695,2730,2810,2845                
 DIAG_ATTTYPE.TYPE          I(4)            4     0              scalar                    2702,2731,2817,2846                

Page 92          Source Listing                  PREPEND_ATTRIBUTE_FIELD
2021-06-01 08:54                                 diag_util.F90

   2757 !> @brief Allocates the atttype in out_file
   2758   SUBROUTINE attribute_init_file(out_file, err_msg)
   2759     TYPE(file_type), INTENT(inout) :: out_file !< output file to allocate memory for attribute
   2760     CHARACTER(LEN=*), INTENT(out), OPTIONAL :: err_msg !< Error message, passed back to calling function
   2761 
   2762     INTEGER :: istat
   2763 
   2764 ! Initialize err_msg
   2765     IF ( PRESENT(err_msg) ) err_msg = ''
   2766 
   2767 ! Allocate memory for the attributes
   2768     IF ( .NOT.allocated(out_file%attributes) ) THEN
   2769        ALLOCATE(out_file%attributes(max_field_attributes), STAT=istat)
   2770        IF ( istat.NE.0 ) THEN
   2771 ! <ERROR STATUS="FATAL">
   2772 !   Unable to allocate memory for file attributes
   2773 ! </ERROR>
   2774           IF ( fms_error_handler('diag_util_mod::attribute_init_file', 'Unable to allocate memory for file attributes', err_
   2774 msg) ) THEN
   2775              RETURN
   2776           END IF
   2777        ELSE
   2778 ! Set equal to 0.  It will be increased when attributes added
   2779           out_file%num_attributes = 0
   2780        END IF
   2781     END IF
   2782   END SUBROUTINE attribute_init_file


ENTRY POINTS

  Name                                             
                                                   
 diag_util_mod_mp_attribute_init_file_             

Page 93          Source Listing                  ATTRIBUTE_INIT_FILE
2021-06-01 08:54 Symbol Table                    diag_util.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   2768                                 scalar                    2768                              
 ATTRIBUTE_INIT_FILE        Subr   2758                                          PRIV             2800                              
 ERR_MSG                    Dummy  2758     CHAR                        scalar   ARG,OUT          2765,2774                         
 FILE_TYPE                  Type   2759                                 scalar   PRIV             65,2759,2787                      
 ISTAT                      Local  2762     I(4)            4           scalar                    2769,2770                         
 OUT_FILE                   Dummy  2758     FILE_TYPE       11400       scalar   ARG,INOUT        2768,2769,2779                    
 PRESENT                    Func   2765                                 scalar                    2765                              

Page 94          Source Listing                  ATTRIBUTE_INIT_FILE
2021-06-01 08:54                                 diag_util.F90

   2783 
   2784 !> @brief Prepends the attribute value to an already existing attribute.  If the
   2785 !!     attribute isn't yet defined, then creates a new attribute
   2786   SUBROUTINE prepend_attribute_file(out_file, att_name, prepend_value, err_msg)
   2787     TYPE(file_type), INTENT(inout) :: out_file !< output file that will get the attribute
   2788     CHARACTER(len=*), INTENT(in) :: att_name !< Name of the attribute
   2789     CHARACTER(len=*), INTENT(in) :: prepend_value !< Value to prepend
   2790     CHARACTER(len=*), INTENT(out) , OPTIONAL :: err_msg !< Error message, passed back to calling routine
   2791 
   2792     INTEGER :: length, i, this_attribute
   2793     CHARACTER(len=512) :: err_msg_local
   2794 
   2795 ! Initialize string variables
   2796     err_msg_local = ''
   2797     IF ( PRESENT(err_msg) ) err_msg = ''
   2798 
   2799 ! Make sure the attributes for this out file have been initialized
   2800     CALL attribute_init_file(out_file, err_msg_local)
   2801     IF ( TRIM(err_msg_local) .NE. '' ) THEN
   2802        IF ( fms_error_handler('diag_util_mod::prepend_attribute_file', TRIM(err_msg_local), err_msg) ) THEN
   2803           RETURN
   2804        END IF
   2805     END IF
   2806 
   2807 ! Find if attribute exists
   2808     this_attribute = 0
   2809     DO i=1, out_file%num_attributes
   2810        IF ( TRIM(out_file%attributes(i)%name) .EQ. TRIM(att_name) ) THEN
   2811           this_attribute = i
   2812           EXIT
   2813        END IF
   2814     END DO
   2815 
   2816     IF ( this_attribute > 0 ) THEN
   2817        IF ( out_file%attributes(this_attribute)%type .NE. NF90_CHAR ) THEN
   2818 ! <ERROR STATUS="FATAL">
   2819 !   Attribute <name> is not a character attribute.
   2820 ! </ERROR>
   2821           IF ( fms_error_handler('diag_util_mod::prepend_attribute_file',&
   2822                & 'Attribute "'//TRIM(att_name)//'" is not a character attribute.',&
   2823                & err_msg) ) THEN
   2824              RETURN
   2825           END IF
   2826        END IF
   2827     ELSE
   2828 ! Defining a new attribute
   2829 ! Increase the number of file attributes
   2830        this_attribute = out_file%num_attributes + 1
   2831        IF ( this_attribute .GT. max_file_attributes ) THEN
   2832 ! <ERROR STATUS="FATAL">
   2833 !   Number of attributes exceeds max_file_attributes for attribute <name>.
   2834 !   Increase diag_manager_nml:max_file_attributes.
   2835 ! </ERROR>
   2836           IF ( fms_error_handler('diag_util_mod::prepend_attribute_file',&
   2837                & 'Number of attributes exceeds max_file_attributes for attribute "'&
   2838                &//TRIM(att_name)//'".  Increase diag_manager_nml:max_file_attributes.',&
   2839                & err_msg) ) THEN

Page 95          Source Listing                  PREPEND_ATTRIBUTE_FILE
2021-06-01 08:54                                 diag_util.F90

   2840              RETURN
   2841           END IF
   2842        ELSE
   2843           out_file%num_attributes = this_attribute
   2844 ! Set name and type
   2845           out_file%attributes(this_attribute)%name = att_name
   2846           out_file%attributes(this_attribute)%type = NF90_CHAR
   2847 ! Initialize catt to a blank string, as len_trim doesn't always work on an uninitialized string
   2848           out_file%attributes(this_attribute)%catt = ''
   2849        END IF
   2850     END IF
   2851 
   2852 ! Only add string only if not already defined
   2853     IF ( INDEX(TRIM(out_file%attributes(this_attribute)%catt), TRIM(prepend_value)).EQ.0 ) THEN
   2854 ! Check if new string length goes beyond the length of catt
   2855        length = LEN_TRIM(TRIM(prepend_value)//" "//TRIM(out_file%attributes(this_attribute)%catt))
   2856        IF ( length.GT.LEN(out_file%attributes(this_attribute)%catt) ) THEN
   2857 ! <ERROR STATUS="FATAL">
   2858 !   Prepend length for attribute <name> is longer than allowed.
   2859 ! </ERROR>
   2860           IF ( fms_error_handler('diag_util_mod::prepend_attribute_file',&
   2861                & 'Prepend length for attribute "'//TRIM(att_name)//'" is longer than allowed.',&
   2862                & err_msg) ) THEN
   2863              RETURN
   2864           END IF
   2865        END IF
   2866 ! Set files
   2867        out_file%attributes(this_attribute)%catt =&
   2868             & TRIM(prepend_value)//' '//TRIM(out_file%attributes(this_attribute)%catt)
   2869        out_file%attributes(this_attribute)%len = length
   2870     END IF
   2871   END SUBROUTINE prepend_attribute_file

Page 96          Source Listing                  PREPEND_ATTRIBUTE_FILE
2021-06-01 08:54 Entry Points                    diag_util.F90



ENTRY POINTS

  Name                                                
                                                      
 diag_util_mod_mp_prepend_attribute_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATT_NAME                   Dummy  2786     CHAR                        scalar   ARG,IN           2810,2822,2838,2845,2861          
 ERR_MSG                    Dummy  2786     CHAR                        scalar   ARG,OUT          2797,2802,2823,2839,2862          
 ERR_MSG_LOCAL              Local  2793     CHAR            512         scalar                    2796,2800,2801,2802               
 I                          Local  2792     I(4)            4           scalar                    2809,2810,2811                    
 INDEX                      Func   2853                                 scalar                    2853                              
 LEN                        Func   2856                                 scalar                    2856                              
 LENGTH                     Local  2792     I(4)            4           scalar                    2855,2856,2869                    
 LEN_TRIM                   Func   2855                                 scalar                    2855                              
 MAX_FILE_ATTRIBUTES        Local  2831     I(4)            4           scalar   PRIV             64,2831                           
 OUT_FILE                   Dummy  2786     FILE_TYPE       11400       scalar   ARG,INOUT        2800,2809,2810,2817,2830,2843,2845
                                                                                                  ,2846,2848,2853,2855,2856,2867,286
                                                                                                  8,2869                            
 PREPEND_ATTRIBUTE_FILE     Subr   2786                                          PRIV                                               
 PREPEND_VALUE              Dummy  2786     CHAR                        scalar   ARG,IN           2853,2855,2868                    
 PRESENT                    Func   2797                                 scalar                    2797                              
 THIS_ATTRIBUTE             Local  2792     I(4)            4           scalar                    2808,2811,2816,2817,2830,2831,2843
                                                                                                  ,2845,2846,2848,2853,2855,2856,286
                                                                                                  7,2868,2869                       
 TRIM                       Func   2801                                 scalar                    2801,2802,2810,2822,2838,2853,2855
                                                                                                  ,2861,2868                        

Page 97          Source Listing                  PREPEND_ATTRIBUTE_FILE
2021-06-01 08:54                                 diag_util.F90

   2872 ! </SUBROUTINE>
   2873 END MODULE diag_util_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTRIBUTE_INIT             Local  114                                  scalar                    105                               
 CHECK_BOUNDS_ARE_EXACT_DYN                                                                                                         
 AMIC                       Subr   102                                                            102                               
 CHECK_BOUNDS_ARE_EXACT_STA                                                                                                         
 TIC                        Subr   102                                                            102                               
 CHECK_DUPLICATE_OUTPUT_FIE                                                                                                         
 LDS                        Subr   104                                                            104                               
 CHECK_OUT_OF_BOUNDS        Subr   101                                                            101                               
 CONSTANTS_MOD              Module 93                                                             93                                
 C_DOUBLE                   Param  30       I(4)            4           scalar   PRIV             30                                
 C_FLOAT                    Param  30       I(4)            4           scalar   PRIV             30                                
 C_INT16_T                  Param  31       I(4)            4           scalar   PRIV             31                                
 C_INT32_T                  Param  31       I(4)            4           scalar   PRIV             31                                
 C_INT64_T                  Param  30       I(4)            4           scalar   PRIV             30                                
 C_INTPTR_T                 Param  31       I(4)            4           scalar   PRIV             31                                
 DIAG_AXIS_MOD              Module 68                                                             68                                
 DIAG_DATA_MOD              Module 57                                                             57,67                             
 DIAG_GRID_MOD              Module 77                                                             77                                
 DIAG_OUTPUT_MOD            Module 72                                                             72,74,75,76                       
 DIAG_UTIL_INIT             Subr   105                                                            105                               
 DIAG_UTIL_MOD              Module 26                                                                                               
 FIND_FILE@0                Local  1200     I(4)            4           scalar                                                      
 FIND_INPUT_FIELD@0         Local  1217     I(4)            4           scalar                                                      
 FMS2_IO_MOD                Module 81                                            PRIV             81,94                             
 FMS_IO_MOD                 Module 80                                                             80,82,92                          
 FMS_MOD                    Module 78                                                             78                                
 GET_DATE_DIF@0             Local  2323     R(8)            8           scalar                                                      
 GET_SUBFIELD_SIZE          Subr   101                                                            101                               
 GET_SUBFIELD_VERT_SIZE     Subr   104                                                            104                               
 INIT_INPUT_FIELD           Subr   103                                                            103                               
 INIT_OUTPUT_FIELD          Subr   103                                                            103                               
 ISO_C_BINDING              Module 30                                                             30                                
 ISO_FORTRAN_ENV            Module 29                                                             29                                
 LOG_DIAG_FIELD_INFO        Subr   101                                                            101                               
 MPP_DOMAINS_MOD            Module 83                                                             83                                
 MPP_GET_TILE_NPES          Func   85       I(4)            4           scalar   PRIV             85                                
 MPP_IO_MOD                 Module 90                                                             90                                
 MPP_MOD                    Module 91                                                             91                                
 MPP_MOSAIC_DEFINED         Func   85       L(4)            4           scalar   PRIV             85                                
 MPP_NPES                   Func   91       I(4)            4           scalar   PRIV             91                                
 NETCDF                     Module 96                                                             96                                
 Operator (/=)                     84                                                                                               
 PLATFORM_MOD               Module 28                                                             28                                
 PREPEND_ATTRIBUTE          Local  108                                  scalar                    105                               
 REAL128                    Param  29       I(4)            4           scalar   PRIV             29                                
 SYNC_FILE_TIMES            Subr   104                                                            104                               
 TIME_MANAGER_MOD           Module 87                                                             87                                
 UPDATE_BOUNDS              Subr   101                                                            101                               

Page 98          Source Listing                  PREPEND_ATTRIBUTE_FILE
2021-06-01 08:54 Subprograms/Common Blocks       diag_util.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTRIBUTE_INIT_FIELD       Subr   2642                                          PRIV             2685                              
 ATTRIBUTE_INIT_FILE        Subr   2758                                          PRIV             2800                              
 CHECK_AND_OPEN             Subr   2526                                                           2400                              
 CHECK_BOUNDS_ARE_EXACT_DYN                                                                                                         
 AMIC                       Subr   812                                                                                              
 CHECK_BOUNDS_ARE_EXACT_STA                                                                                                         
 TIC                        Subr   878                                                                                              
 CHECK_DUPLICATE_OUTPUT_FIE                                                                                                         
 LDS                        Subr   2612                                                                                             
 CHECK_OUT_OF_BOUNDS        Subr   766                                                                                              
 DIAG_DATA_OUT              Subr   2369                                                                                             
 DIAG_TIME_INC              Func   1130     TIME_TYPE       16          scalar                                                      
 DIAG_UTIL_INIT             Subr   154                                                                                              
 DIAG_UTIL_MOD              Module 26                                                                                               
 FIND_FILE                  Func   1200     I(4)            4           scalar                    1206,1209,1345,1355,1363          
 FIND_INPUT_FIELD           Func   1217     I(4)            4           scalar                                                      
 GET_DATE_DIF               Func   2323     R(8)            8           scalar                                                      
 GET_INDEX                  Func   576      I(4)            4           scalar                    225,226,241,242,253,254,327,329,52
                                                                                                  6,529,591,597,600,611,614,627,630,
                                                                                                  642,645                           
 GET_SUBFIELD_SIZE          Subr   164                                                                                              
 GET_SUBFIELD_VERT_SIZE     Subr   445                                                                                              
 GET_TIME_STRING            Func   2182     CHAR            128         scalar                    1625,2318                         
 INIT_FILE                  Subr   920                                                                                              
 INIT_INPUT_FIELD           Subr   1236                                                                                             
 INIT_OUTPUT_FIELD          Subr   1268                                                                                             
 LOG_DIAG_FIELD_INFO        Subr   664                                                                                              
 OPENING_FILE               Subr   1561                                                           2536,2544                         
 PREPEND_ATTRIBUTE_FIELD    Subr   2671                                          PRIV                                               
 PREPEND_ATTRIBUTE_FILE     Subr   2786                                          PRIV                                               
 SYNC_FILE_TIMES            Subr   1101                                                                                             
 UPDATE_BOUNDS              Subr   747                                                                                              
 WRITE_STATIC               Subr   2568                                                                                             

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp

Page 99          Source Listing                  PREPEND_ATTRIBUTE_FILE
2021-06-01 08:54                                 diag_util.F90

       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat

Page 100         Source Listing                  PREPEND_ATTRIBUTE_FILE
2021-06-01 08:54                                 diag_util.F90

       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,

Page 101         Source Listing                  PREPEND_ATTRIBUTE_FILE
2021-06-01 08:54                                 diag_util.F90

           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : diag_util.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
