Page 1           Source Listing                  DIAG_OUTPUT_INIT_FMS2_IO
2021-06-01 08:54                                 /tmp/ifortUtaLIa.i90

      1 # 1 "diag_output.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 !> @file
     22 !! @brief diag_output_mod is an integral part of
     23 !!   diag_manager_mod<. Its function is to write axis-meta-data,
     24 !!   field-meta-data and field data
     25 !! @author Seth Underwood
     26 !! @email gfdl.climate.model.info@noaa.gov
     27 MODULE diag_output_mod
     28 
     29 ! <CONTACT EMAIL="seth.underwood@noaa.gov">
     30 !   Seth Underwood
     31 ! </CONTACT>
     32 
     33 ! <OVERVIEW> <TT>diag_output_mod</TT> is an integral part of
     34 !   <TT>diag_manager_mod</TT>. Its function is to write axis-meta-data,
     35 !   field-meta-data and field data
     36 ! </OVERVIEW>
     37 use platform_mod
     38 use,intrinsic :: iso_fortran_env, only: real128
     39 use,intrinsic :: iso_c_binding, only: c_double,c_float,c_int64_t, &
     40                                       c_int32_t,c_int16_t,c_intptr_t
     41 !> use_mpp_io = .false.
     42   USE mpp_io_mod, ONLY: axistype, fieldtype, mpp_io_init, &
     43        & mpp_get_id, MPP_WRONLY, MPP_OVERWR,&
     44        & MPP_NETCDF, MPP_MULTI, MPP_SINGLE, mpp_get_field_name, &
     45        & fillin_fieldtype
     46 !> use_mpp_io = .true.
     47   USE mpp_io_mod, ONLY: mpp_open,mpp_write_meta,&
     48        & mpp_write, mpp_flush, mpp_close, &
     49        & mpp_io_unstructured_write
     50   USE mpp_domains_mod, ONLY: domain1d, domain2d, mpp_define_domains, mpp_get_pelist,&
     51        &  mpp_get_global_domain, mpp_get_compute_domains, null_domain1d, null_domain2d,&
     52        & domainUG, null_domainUG, CENTER, EAST, NORTH, mpp_get_compute_domain,&
     53        & OPERATOR(.NE.), mpp_get_layout, OPERATOR(.EQ.), mpp_get_io_domain, &
     54        & mpp_get_compute_domain, mpp_get_global_domain
     55   USE mpp_mod, ONLY: mpp_npes, mpp_pe, mpp_root_pe, mpp_get_current_pelist
     56   USE diag_axis_mod, ONLY: diag_axis_init, get_diag_axis, get_axis_length,&
     57        & get_axis_global_length, get_domain1d, get_domain2d, get_axis_aux, get_tile_count,&

Page 2           Source Listing                  DIAG_OUTPUT_INIT_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

     58        & get_domainUG, get_diag_axis_name
     59   USE diag_data_mod, ONLY: pack_size, diag_fieldtype, diag_global_att_type, CMOR_MISSING_VALUE, diag_atttype, files
     60   USE time_manager_mod, ONLY: get_calendar_type, valid_calendar_types
     61   USE fms_mod, ONLY: error_mesg, mpp_pe, write_version_number, fms_error_handler, FATAL, note
     62 
     63 
     64   USE netcdf, ONLY: NF90_INT, NF90_FLOAT, NF90_CHAR
     65 
     66 
     67   use mpp_domains_mod, only: mpp_get_UG_io_domain
     68   use mpp_domains_mod, only: mpp_get_UG_domain_npes
     69   use mpp_domains_mod, only: mpp_get_UG_domain_pelist
     70   use mpp_mod,         only: mpp_gather
     71   use mpp_mod,         only: uppercase,lowercase
     72   use fms2_io_mod
     73   use axis_utils2_mod,   only: axis_edges
     74 
     75 
     76   IMPLICIT NONE
     77 
     78   PRIVATE
     79 !> 2020.03 use_mpp_io diag_output_init, write_axis_meta_data, write_field_meta_data, write_attribute_meta are
     80 !! interfaces for the two different routines supporting each IO
     81   PUBLIC :: diag_output_init, write_axis_meta_data, write_field_meta_data, done_meta_data,&
     82        & diag_fieldtype, get_diag_global_att, set_diag_global_att
     83   PUBLIC :: diag_field_write, diag_write_time !< use_mpp_io = .false.
     84   PUBLIC :: diag_field_out, done_meta_data_use_mpp_io !< use_mpp_io = .true.
     85   TYPE(diag_global_att_type), SAVE :: diag_global_att
     86 
     87   INTEGER, PARAMETER      :: NETCDF1 = 1
     88   INTEGER, PARAMETER      :: mxch  = 128
     89   INTEGER, PARAMETER      :: mxchl = 256
     90   INTEGER                 :: current_file_unit = -1
     91   INTEGER, DIMENSION(2,2) :: max_range = RESHAPE((/ -32767, 32767, -127,   127 /),(/2,2/))
     92 !  DATA max_range / -32767, 32767, -127,   127 /
     93   INTEGER, DIMENSION(2)   :: missval = (/ -32768, -128 /)
     94 
     95   INTEGER, PARAMETER      :: max_axis_num = 20
     96   INTEGER                 :: num_axis_in_file = 0
     97   INTEGER, DIMENSION(max_axis_num) :: axis_in_file
     98   LOGICAL, DIMENSION(max_axis_num) :: time_axis_flag, edge_axis_flag
     99   TYPE(axistype), DIMENSION(max_axis_num), SAVE :: Axis_types
    100 
    101   LOGICAL :: module_is_initialized = .FALSE.
    102 
    103 ! Include variable "version" to be written to log file.
    104   character(len=*), parameter :: version = '2020.03'
    105 !> This interface is exclusive to fms2_io output
    106   interface diag_field_write
    107      module procedure diag_field_write_field
    108      module procedure diag_field_write_varname
    109   end interface
    110 
    111 !> The following interfaces are used in conjuctions with use_mpp_io
    112   interface diag_output_init
    113      module procedure diag_output_init_fms2_io
    114      module procedure diag_output_init_use_mpp_io

Page 3           Source Listing                  DIAG_OUTPUT_INIT_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    115   end interface
    116 
    117   interface write_axis_meta_data
    118      module procedure write_axis_meta_data_fms2_io
    119      module procedure write_axis_meta_data_use_mpp_io
    120   end interface
    121 
    122   interface write_field_meta_data
    123      module procedure write_field_meta_data_fms2_io
    124      module procedure write_field_meta_data_use_mpp_io
    125   end interface
    126 
    127   interface write_attribute_meta
    128      module procedure write_attribute_meta_fms2_io
    129      module procedure write_attribute_meta_use_mpp_io
    130   end interface
    131 
    132 CONTAINS
    133 
    134 !> @brief Registers the time axis and opens the output file.
    135   SUBROUTINE diag_output_init_fms2_io (file_name, FORMAT, file_title, file_unit,&
    136        & all_scalar_or_1d, domain, domainU, fileobj, fileobjU, fileobjND, fnum_domain, &
    137        & attributes)
    138     CHARACTER(len=*), INTENT(in)  :: file_name !< Output file name
    139     CHARACTER(len=*), INTENT(in)  :: file_title !< Descriptive title for the file
    140     INTEGER         , INTENT(in)  :: FORMAT !< File format (Currently only 'NETCDF' is valid)
    141     INTEGER         , INTENT(out) :: file_unit !< File unit number assigned to the output file.
    142 !! Needed for subsuquent calls to
    143 !! diag_output_mod
    144     LOGICAL         , INTENT(in)  :: all_scalar_or_1d
    145     TYPE(domain2d)  , INTENT(in)  :: domain
    146     TYPE(diag_atttype), INTENT(in), DIMENSION(:), OPTIONAL :: attributes
    147     TYPE(domainUG), INTENT(in)    :: domainU !< The unstructure domain
    148     type(FmsNetcdfUnstructuredDomainFile_t),intent(inout),target :: fileobjU
    149     type(FmsNetcdfDomainFile_t),intent(inout),target :: fileobj
    150     type(FmsNetcdfFile_t),intent(inout),target :: fileobjND
    151     class(FmsNetcdfFile_t), pointer :: fileob => NULL()
    152     character(*),intent(out) :: fnum_domain
    153     INTEGER :: form, threading, fileset, i
    154     TYPE(diag_global_att_type) :: gAtt
    155     character(len=:),allocatable :: fname_no_tile
    156     integer :: len_file_name
    157     integer, allocatable, dimension(:) :: current_pelist
    158     integer :: mype  !< The pe you are on
    159     character(len=9) :: mype_string !< a string to store the pe
    160 !---- initialize mpp_io ----
    161     IF ( .NOT.module_is_initialized ) THEN
    162        CALL mpp_io_init ()
    163        module_is_initialized = .TRUE.
    164        CALL write_version_number("DIAG_OUTPUT_MOD", version)
    165     END IF
    166 !---- set up output file ----
    167     SELECT CASE (FORMAT)
    168     CASE (NETCDF1)
    169        form      = MPP_NETCDF
    170        threading = MPP_MULTI
    171        fileset   = MPP_MULTI

Page 4           Source Listing                  DIAG_OUTPUT_INIT_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    172     CASE default
    173 ! <ERROR STATUS="FATAL">invalid format</ERROR>
    174        CALL error_mesg('diag_output_init', 'invalid format', FATAL)
    175     END SELECT
    176 
    177     IF(all_scalar_or_1d) THEN
    178        threading = MPP_SINGLE
    179        fileset   = MPP_SINGLE
    180     END IF
    181 
    182     len_file_name = len(trim(file_name))
    183 !> If the file name has .tileX or .tileX.nc where X is a one or two digit tile number, remove
    184 !! that suffix from the time name because fms2_io will add it
    185 !! \note If mpp_domains accepts more than 99 tiles, this will need to be updated
    186     allocate(character(len=len_file_name) :: fname_no_tile)
    187     if (len_file_name < 6) then
    188        if (trim(file_name) == "tile") then
    189           call error_mesg('diag_output_init', 'You can not name your history file "tile"',FATAL)
    190        else
    191           fname_no_tile = trim(file_name)
    192        endif
    193 !> One-digit tile numbers example
    194 !! \verbatim
    195 !! filename.tile1.nc
    196 !!       09876543210
    197 !!          ^  ^
    198 !! filename.tile1
    199 !!    09876543210
    200 !!          ^  ^
    201     elseif (lowercase(file_name(len_file_name-4:len_file_name-1)) .eq. "tile") then
    202        fname_no_tile = file_name(1:len_file_name-6)
    203     elseif (len_file_name < 9) then
    204        fname_no_tile = trim(file_name)
    205     elseif (lowercase(file_name(len_file_name-7:len_file_name-4)) .eq. "tile") then
    206        fname_no_tile = file_name(1:len_file_name-9)
    207 !> Two-digit tile numbers example
    208 !! \verbatim
    209 !! filename.tile10.nc
    210 !!        09876543210
    211 !!          ^  ^
    212 !! filename.tile10
    213 !!     09876543210
    214 !!          ^  ^
    215     elseif (lowercase(file_name(len_file_name-5:len_file_name-2)) .eq. "tile") then
    216        fname_no_tile = file_name(1:len_file_name-7)
    217 
    218     elseif (lowercase(file_name(len_file_name-5:len_file_name-8)) .eq. "tile") then
    219        fname_no_tile = file_name(1:len_file_name-10)
    220     else
    221        fname_no_tile = trim(file_name)
    222     endif
    223 !> If there is a .nc suffix on the file name, remove the .nc
    224     if (len(trim(fname_no_tile)) > 3 ) then
    225        checkNC: do i = 3,len(trim(fname_no_tile))
    226          if (fname_no_tile(i-2:i) == ".nc") then
    227             fname_no_tile(i-2:i) = "   "
    228             exit checkNC

Page 5           Source Listing                  DIAG_OUTPUT_INIT_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    229          endif
    230        enddo checkNC
    231     endif
    232 
    233 !> Check to make sure that only domain2D or domainUG is used.  If both are not null, then FATAL
    234     if (domain .NE. NULL_DOMAIN2D .AND. domainU .NE. NULL_DOMAINUG)&
    235           & CALL error_mesg('diag_output_init', "Domain2D and DomainUG can not be used at the same time in "//&
    236           & trim(file_name), FATAL)
    237 
    238 !---- open output file (return file_unit id) -----
    239     IF ( domain .NE. NULL_DOMAIN2D ) THEN
    240 !> Check if there is an io_domain
    241      iF ( associated(mpp_get_io_domain(domain)) ) then
    242        fileob => fileobj
    243        if (.not.check_if_open(fileob)) call open_check(open_file(fileobj, trim(fname_no_tile)//".nc", "overwrite", &
    244                             domain, is_restart=.false.))
    245        fnum_domain = "2d" ! 2d domain
    246        file_unit = 2
    247      elSE !< No io domain, so every core is going to write its own file.
    248        fileob => fileobjND
    249        mype = mpp_pe()
    250        write(mype_string,'(I0.4)') mype
    251         if (.not.check_if_open(fileob)) then
    252                call open_check(open_file(fileobjND, trim(fname_no_tile)//".nc."//trim(mype_string), "overwrite", &
    253                             is_restart=.false.))
    254 !< For regional subaxis add the NumFilesInSet attribute, which is added by fms2_io for (other)
    255 !< domains with sufficient decomposition info. Note mppnccombine will work with an entry of zero.
    256                call register_global_attribute(fileobjND, "NumFilesInSet", 0)
    257        endif
    258        fnum_domain = "nd" ! no domain
    259        if (file_unit < 0) file_unit = 10
    260      endiF
    261     ELSE IF (domainU .NE. NULL_DOMAINUG) THEN
    262        fileob => fileobjU
    263        if (.not.check_if_open(fileob)) call open_check(open_file(fileobjU, trim(fname_no_tile)//".nc", "overwrite", &
    264                             domainU, is_restart=.false.))
    265        fnum_domain = "ug" ! unstructured grid
    266        file_unit=3
    267     ELSE
    268        fileob => fileobjND
    269 !        if (.not.check_if_open(fileob) .and. mpp_pe() == mpp_root_pe()) then
    270         allocate(current_pelist(mpp_npes()))
    271         call mpp_get_current_pelist(current_pelist)
    272         if (.not.check_if_open(fileob)) then
    273                call open_check(open_file(fileobjND, trim(fname_no_tile)//".nc", "overwrite", &
    274                             pelist=current_pelist, is_restart=.false.))
    275         endif
    276        fnum_domain = "nd" ! no domain
    277        if (file_unit < 0) file_unit = 10
    278        deallocate(current_pelist)
    279     END IF
    280 
    281 !---- write global attributes ----
    282     IF ( file_title(1:1) /= ' ' ) THEN
    283        call register_global_attribute(fileob, 'title', TRIM(file_title), str_len=len_trim(file_title))
    284     END IF
    285 

Page 6           Source Listing                  DIAG_OUTPUT_INIT_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    286     IF ( PRESENT(attributes) ) THEN
    287        DO i=1, SIZE(attributes)
    288           SELECT CASE (attributes(i)%type)
    289           CASE (NF90_INT)
    290              call register_global_attribute(fileob, TRIM(attributes(i)%name), attributes(i)%iatt)
    291           CASE (NF90_FLOAT)
    292 
    293              call register_global_attribute(fileob, TRIM(attributes(i)%name), attributes(i)%fatt)
    294           CASE (NF90_CHAR)
    295 
    296              call register_global_attribute(fileob, TRIM(attributes(i)%name), attributes(i)%catt, str_len=len_trim(attribute
    296 s(i)%catt))
    297           CASE default
    298 ! <ERROR STATUS="FATAL">
    299 !   Unknown attribute type for attribute <name> to module/input_field <module_name>/<field_name>.
    300 !   Contact the developers.
    301 ! </ERROR>
    302              CALL error_mesg('diag_output_mod::diag_output_init', 'Unknown attribute type for global attribute "'&
    303                   &//TRIM(attributes(i)%name)//'" in file "'//TRIM(file_name)//'". Contact the developers.', FATAL)
    304           END SELECT
    305        END DO
    306     END IF
    307 !---- write grid type (mosaic or regular)
    308     CALL get_diag_global_att(gAtt)
    309 
    310     call register_global_attribute(fileob, 'grid_type', TRIM(gAtt%grid_type), str_len=len_trim(gAtt%grid_type))
    311 
    312     call register_global_attribute(fileob, 'grid_tile', TRIM(gAtt%tile_name), str_len=len_trim(gAtt%tile_name))
    313 
    314   END SUBROUTINE diag_output_init_fms2_io

Page 7           Source Listing                  DIAG_OUTPUT_INIT_FMS2_IO
2021-06-01 08:54 Entry Points                    diag_output.F90



ENTRY POINTS

  Name                                                    
                                                          
 diag_output_mod_mp_diag_output_init_fms2_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALL_SCALAR_OR_1D           Dummy  136      L(4)            4           scalar   ARG,IN           177                               
 ASSOCIATED                 Func   241                                  scalar                    241                               
 ATTRIBUTES                 Dummy  137      RECORD          1560  1     1        ARG,IN           286,287,288,290,293,296,303       
 CHECKNC                    Label  225                                  scalar                    228,230                           
 CHECK_IF_OPEN              Func   243      L(4)            4           scalar   PRIV             243,251,263,272,1202,1210,1275,127
                                                                                                  9                                 
 CURRENT_PELIST             Local  157      I(4)            4     1     1        ALC              270,271,274,278                   
 DIAG_ATTTYPE               Type   146                                  scalar   PRIV             59,146,336,818,1096,1346,1452,1736
                                                                                                  ,1959                             
 DIAG_GLOBAL_ATT_TYPE       Type   154                                  scalar   PRIV             59,85,154,1350,2131               
 DIAG_OUTPUT_INIT_FMS2_IO   Subr   135                                           PRIV                                               
 DOMAIN                     Dummy  136      DOMAIN2D        752         scalar   ARG,IN           234,239,241,244                   
 DOMAIN2D                   Type   145                                  scalar                    50,145,1345                       
 DOMAINU                    Dummy  136      DOMAINUG        544         scalar   ARG,IN           234,261,264                       
 DOMAINUG                   Type   147                                  scalar                    52,147,326,342,1347,1443,1458     
 ERROR_MESG                 Subr   174                                           PRIV             61,174,189,235,302,375,378,449,474
                                                                                                  ,497,533,587,624,635,767,774,854,8
                                                                                                  56,874,1019,1034,1040,1044,1051,10
                                                                                                  56,1194,1224,1228,1231,1269,1285,1
                                                                                                  288,1291,1367,1378,1412,1479,1482,
                                                                                                  1522,1577,1670,1770,1772,1785,1894
                                                                                                  ,1900,1904,1911,1916              
 FATAL                      Param  174      I(4)            4           scalar   PRIV             61,174,189,236,303,375,379,451,475
                                                                                                  ,500,588,625,635,768,774,854,857,8
                                                                                                  75,1020,1035,1042,1046,1053,1058,1
                                                                                                  194,1224,1229,1231,1269,1285,1289,
                                                                                                  1291,1367,1379,1413,1479,1483,1525
                                                                                                  ,1577,1670,1770,1773,1786,1895,190
                                                                                                  2,1906,1913,1918                  
 FILEOB                     Local  151      RECORD          872         scalar   PTR              151,242,243,248,251,262,263,268,27
                                                                                                  2,283,290,293,296,310,312         
 FILEOBJ                    Dummy  136      FMSNETCDFDOMAINFILE_T                                                                   
                                                            2040        scalar   ARG,TGT,INOUT    242,243                           
 FILEOBJND                  Dummy  136      FMSNETCDFFILE_T 872         scalar   ARG,TGT,INOUT    248,252,256,268,273               
 FILEOBJU                   Dummy  136      FMSNETCDFUNSTRUCTUREDDOMAINFILE_T                                                       
                                                            1672        scalar   ARG,TGT,INOUT    262,263                           
 FILESET                    Local  153      I(4)            4           scalar                    171,179                           
 FILE_NAME                  Dummy  135      CHAR                        scalar   ARG,IN           182,188,191,201,202,204,205,206,21
                                                                                                  5,216,218,219,221,236,303         
 FILE_TITLE                 Dummy  135      CHAR                        scalar   ARG,IN           282,283                           
 FILE_UNIT                  Dummy  135      I(4)            4           scalar   ARG,OUT          246,259,266,277                   
 FMSNETCDFDOMAINFILE_T      Type   149                                  scalar                    149,411,457,556,599,736,1170,1189,
                                                                                                  1244,1264                         
 FMSNETCDFFILE_T            Type   150                                  scalar   PRIV             150,151,320,321,427,465,571,615,75

Page 8           Source Listing                  DIAG_OUTPUT_INIT_FMS2_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  1,821,1100,1166,1167,1171,1187,124
                                                                                                  0,1241,1245,1262,1296,1297        
 FMSNETCDFUNSTRUCTUREDDOMAI                                                                                                         
 NFILE_T                    Type   148                                  scalar                    148,463,525,543,608,723,1169,1191,
                                                                                                  1243,1266                         
 FNAME_NO_TILE              Local  155      CHAR                        scalar   ALC              186,191,202,204,206,216,219,221,22
                                                                                                  4,225,226,227,243,252,263,273     
 FNUM_DOMAIN                Dummy  136      CHAR                        scalar   ARG,OUT          245,258,265,276                   
 FORM                       Local  153      I(4)            4           scalar                    169                               
 FORMAT                     Dummy  135      I(4)            4           scalar   ARG,IN           167                               
 GATT                       Local  154      DIAG_GLOBAL_ATT_TYPE                                                                    
                                                            256         scalar                    308,310,312                       
 GET_DIAG_GLOBAL_ATT        Subr   308                                                            82,308,1418                       
 I                          Local  153      I(4)            4           scalar                    225,226,227,287,288,290,293,296,30
                                                                                                  3                                 
 LEN                        Func   182                                  scalar                    182,224,225                       
 LEN_FILE_NAME              Local  156      I(4)            4           scalar                    182,186,187,201,202,203,205,206,21
                                                                                                  5,216,218,219                     
 LEN_TRIM                   Func   283                                  scalar                    283,296,310,312                   
 LOWERCASE                  Func   201      CHAR                        scalar   TGT,PRIV         71,201,205,215,218,412,458,650    
 MODULE_IS_INITIALIZED      Local  161      L(4)            4           scalar                    101,161,163,1353,1355             
 MPP_DOMAIN2D_NE            Func   234      L(4)            4           scalar   PRIV             234,239,1377,1382,2066            
 MPP_DOMAINUG_NE            Func   234      L(4)            4           scalar   PRIV             234,261,1377,1385,2074            
 MPP_GET_CURRENT_PELIST     Subr   271                                           PRIV             55,271                            
 MPP_GET_IO_DOMAIN          Func   241      RECORD          752         scalar   PTR,PRIV         53,241                            
 MPP_IO_INIT                Subr   162                                           PRIV             42,162,1354                       
 MPP_MULTI                  Param  170      I(4)            4           scalar   PRIV             44,170,171,1363,1364              
 MPP_NETCDF                 Param  169      I(4)            4           scalar   PRIV             44,169,1362                       
 MPP_NPES                   Func   270      I(4)            4           scalar   PRIV             55,270                            
 MPP_PE                     Func   249      I(4)            4           scalar   PRIV             61,249,513,1538                   
 MPP_SINGLE                 Param  178      I(4)            4           scalar   PRIV             44,178,179,1371,1372              
 MYPE                       Local  158      I(4)            4           scalar                    249,250                           
 MYPE_STRING                Local  159      CHAR            9           scalar                    250,252                           
 NETCDF1                    Param  168      I(4)            4           scalar                    168,1361                          
 NETCDF_FILE_OPEN_WRAP      Func   252      L(4)            4           scalar   PRIV             252,273                           
 NF90_CHAR                  Param  294      I(4)            4           scalar   PRIV             64,294,1128,1405,1991             
 NF90_FLOAT                 Param  291      I(4)            4           scalar   PRIV             64,291,1119,1403,1981             
 NF90_INT                   Param  289      I(4)            4           scalar   PRIV             64,289,1110,1401,1971             
 NULL                       Func   151                                  scalar   PTR              151                               
 NULL_DOMAIN2D              Local  234      DOMAIN2D        752         scalar   PRIV,SAVE        51,234,239,1377,1382,2066         
 NULL_DOMAINUG              Local  234      DOMAINUG        544         scalar   PRIV,SAVE        52,234,261,496,1377,1385,1521,2074
 OPEN_CHECK                 Subr   243                                           PRIV             243,252,263,273                   
 OPEN_DOMAIN_FILE           Func   243      L(4)            4           scalar   PRIV             243                               
 OPEN_FILE                  Local  243                                  scalar   PRIV             243,252,263,273                   
 OPEN_UNSTRUCTURED_DOMAIN_F                                                                                                         
 ILE                        Func   263      L(4)            4           scalar   PRIV             263                               
 PRESENT                    Func   286                                  scalar                    286                               
 REGISTER_GLOBAL_ATTRIBUTE  Local  256                                  scalar   PRIV             256,283,290,293,296,310,312       
 REGISTER_GLOBAL_ATTRIBUTE_                                                                                                         
 0D                         Subr   256                                           PRIV             256,283,296,310,312               
 REGISTER_GLOBAL_ATTRIBUTE_                                                                                                         
 1D                         Subr   290                                           PRIV             290,293                           
 SIZE                       Func   287                                  scalar                    287                               
 THREADING                  Local  153      I(4)            4           scalar                    170,178                           
 TRIM                       Func   182                                  scalar                    182,188,191,204,221,224,225,236,24

Page 9           Source Listing                  DIAG_OUTPUT_INIT_FMS2_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  3,252,263,273,283,290,293,296,303,
                                                                                                  310,312                           
 VERSION                    Param  164      CHAR            7           scalar                    164,1356                          
 WRITE_VERSION_NUMBER       Subr   164                                           PRIV             61,164,1356                       


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 DIAG_ATTTYPE.CATT          CHAR            1280  136            scalar                    296,1129,1133,1406,1992,1996       
 DIAG_ATTTYPE.FATT          R(8)            8     1416     1     1        ALC              293,665,666,781,782,1120,1127,1404 
                                                                                           ,1601,1602,1677,1678,1982,1990     
 DIAG_ATTTYPE.IATT          I(4)            4     1488     1     1        ALC              290,668,669,784,785,1111,1118,1402 
                                                                                           ,1604,1605,1680,1681,1972,1980     
 DIAG_ATTTYPE.NAME          CHAR            128   8              scalar                    290,293,296,303,1042,1046,1053,105 
                                                                                           8,1114,1118,1123,1127,1131,1137,11 
                                                                                           41,1402,1404,1406,1413,1902,1906,1 
                                                                                           913,1918,1975,1979,1985,1989,1994, 
                                                                                           1999,2003                          
 DIAG_ATTTYPE.TYPE          I(4)            4     0              scalar                    288,1109,1400,1970                 
 DIAG_GLOBAL_ATT_TYPE.GRID_TYPE                                                                                            ...
                            CHAR            128   0              scalar                    310,1419,2147                      
 DIAG_GLOBAL_ATT_TYPE.TILE_NAME                                                                                            ...
                            CHAR            128   128            scalar                    312,1420,2148                      

Page 10          Source Listing                  DIAG_OUTPUT_INIT_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    315 
    316 !> @brief Write the axes meta data to file.
    317   SUBROUTINE write_axis_meta_data_fms2_io(file_unit, axes, fileob, time_ops, time_axis_registered)
    318     INTEGER, INTENT(in) :: file_unit !< File unit number
    319     INTEGER, INTENT(in) :: axes(:) !< Array of axis ID's, including the time axis
    320     class(FmsNetcdfFile_t) , intent(inout),target :: fileob
    321     class(FmsNetcdfFile_t) ,pointer                        :: fptr
    322     LOGICAL, INTENT(in), OPTIONAL :: time_ops !< .TRUE. if this file contains any min, max, time_rms, or time_average
    323     logical, intent(inout) , optional :: time_axis_registered
    324     TYPE(domain1d)       :: Domain
    325 
    326     TYPE(domainUG)       :: domainU
    327 
    328     CHARACTER(len=mxch)  :: axis_name, axis_units, axis_name_current
    329     CHARACTER(len=mxchl) :: axis_long_name
    330     CHARACTER(len=1)     :: axis_cart_name
    331     INTEGER              :: axis_direction, axis_edges
    332     REAL, ALLOCATABLE    :: axis_data(:)
    333     INTEGER, ALLOCATABLE :: axis_extent(:), pelist(:)
    334 integer :: domain_size, axis_length, axis_pos
    335     INTEGER              :: num_attributes
    336     TYPE(diag_atttype), DIMENSION(:), ALLOCATABLE :: attributes
    337     INTEGER              :: calendar, id_axis, id_time_axis
    338     INTEGER              :: i, j, index, num, length, edges_index
    339     INTEGER              :: gbegin, gend, gsize, ndivs
    340     LOGICAL              :: time_ops1
    341     CHARACTER(len=2048)  :: err_msg
    342     type(domainUG),pointer                     :: io_domain
    343     integer(I4_KIND)                          :: io_domain_npes
    344     integer(I4_KIND),dimension(:),allocatable :: io_pelist
    345     integer(I4_KIND),dimension(:),allocatable :: unstruct_axis_sizes
    346     real,dimension(:),allocatable              :: unstruct_axis_data
    347     integer                                    :: id_axis_current
    348     logical :: is_time_axis_registered
    349     integer :: istart, iend
    350     integer :: gstart, cstart, cend !< Start and end of global and compute domains
    351     integer :: clength !< Length of compute domain
    352     integer :: data_size
    353     integer, allocatable, dimension(:) :: all_indicies
    354     character(len=32) :: type_str !< Str indicating the type of the axis data
    355 
    356 ! Make sure err_msg is initialized
    357     err_msg = ''
    358     fptr => fileob !Use for selecting a type
    359     IF ( PRESENT(time_ops) ) THEN
    360        time_ops1 = time_ops
    361     ELSE
    362        time_ops1 = .FALSE.
    363     END IF
    364     if (present(time_axis_registered)) then
    365      is_time_axis_registered = time_axis_registered
    366     else
    367      is_time_axis_registered = .false.
    368     endif
    369 !---- save the current file_unit ----
    370     IF ( num_axis_in_file == 0 ) current_file_unit = file_unit
    371 

Page 11          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    372 !---- dummy checks ----
    373     num = SIZE(axes(:))
    374 ! <ERROR STATUS="FATAL">number of axes < 1 </ERROR>
    375     IF ( num < 1 ) CALL error_mesg('write_axis_meta_data', 'number of axes < 1.', FATAL)
    376 
    377 ! <ERROR STATUS="FATAL">writing meta data out-of-order to different files.</ERROR>
    378     IF ( file_unit /= current_file_unit ) CALL error_mesg('write_axis_meta_data',&
    379          & 'writing meta data out-of-order to different files.', FATAL)
    380 
    381     IF (pack_size .eq. 1) then
    382        type_str = "double"
    383     ELSE IF (pack_size .eq. 2) then
    384        type_str = "float"
    385     ENDIF
    386 
    387 !---- check all axes ----
    388 !---- write axis meta data for new axes ----
    389     DO i = 1, num
    390        id_axis = axes(i)
    391        index = get_axis_index ( id_axis )
    392 
    393 !---- skip axes already written -----
    394        IF ( index > 0 ) CYCLE
    395 
    396 !---- create new axistype (then point to) -----
    397        num_axis_in_file = num_axis_in_file + 1
    398        axis_in_file(num_axis_in_file) = id_axis
    399        edge_axis_flag(num_axis_in_file) = .FALSE.
    400        length = get_axis_global_length(id_axis)
    401        ALLOCATE(axis_data(length))
    402 
    403        CALL get_diag_axis(id_axis, axis_name, axis_units, axis_long_name,&
    404             & axis_cart_name, axis_direction, axis_edges, Domain, DomainU, axis_data,&
    405             & num_attributes, attributes, domain_position=axis_pos)
    406 
    407        IF ( Domain .NE. null_domain1d ) THEN
    408           IF ( length > 0 ) THEN
    409              if (trim(uppercase(trim(axis_cart_name))) .eq. "X" .or. trim(uppercase(trim(axis_cart_name))) .eq. "Y") then
    410                   select type (fptr)
    411                     type is (FmsNetcdfDomainFile_t)
    412                          call register_axis(fptr, axis_name, lowercase(trim(axis_cart_name)), domain_position=axis_pos )
    413                       if (allocated(fptr%pelist)) then
    414                          call get_global_io_domain_indices(fptr, trim(axis_name), istart, iend)
    415                          call register_field(fptr, axis_name, type_str, (/axis_name/) )
    416                          if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(ax
    416 is_units), str_len=len_trim(axis_units))
    417                          call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tr
    417 im(axis_long_name))
    418                          call register_variable_attribute(fptr, axis_name, "axis",trim(axis_cart_name), str_len=len_trim(axi
    418 s_cart_name))
    419                          select case (axis_direction)
    420                               case (1)
    421                                    call register_variable_attribute(fptr, axis_name, "positive", "up", str_len=len_trim("up"
    421 ))
    422                               case (-1)
    423                                    call register_variable_attribute(fptr, axis_name, "positive", "down", str_len=len_trim("d
    423 own"))

Page 12          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    424                          end select
    425                          call write_data(fptr, axis_name, axis_data(istart:iend) )
    426                       endif
    427                     type is (FmsNetcdfFile_t) !< For regional X and Y axes, treat as any other axis
    428                          call mpp_get_global_domain(domain, begin=gstart, end=gend)  !< Get the global indicies
    429                          call mpp_get_compute_domain(domain, begin=cstart, end=cend, size=clength) !< Get the compute indici
    429 es
    430                          iend =  cend - gstart + 1     !< Get the array indicies for the axis data
    431                          istart = cstart - gstart + 1
    432                          call register_axis(fptr, axis_name, dimension_length=clength)
    433                          call register_field(fptr, axis_name, type_str, (/axis_name/) )
    434                          call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tr
    434 im(axis_long_name))
    435                          call register_variable_attribute(fptr, axis_name, "units", trim(axis_units), str_len=len_trim(axis_
    435 units))
    436                          call register_variable_attribute(fptr, axis_name, "axis",trim(axis_cart_name), str_len=len_trim(axi
    436 s_cart_name))
    437                          select case (axis_direction)
    438                               case (1)
    439                                    call register_variable_attribute(fptr, axis_name, "positive", "up", str_len=len_trim("up"
    439 ))
    440                               case (-1)
    441                                    call register_variable_attribute(fptr, axis_name, "positive", "down", str_len=len_trim("d
    441 own"))
    442                          end select
    443 !< For regional subaxis add the "domain_decomposition" attribute, which is added
    444 !< fms2_io for (other) domains with sufficient decomposition info.
    445                          call register_variable_attribute(fptr, axis_name, "domain_decomposition", &
    446                               (/gstart, gend, cstart, cend/))
    447                          call write_data(fptr, axis_name, axis_data(istart:iend) )
    448                     class default
    449                          call error_mesg("diag_output_mod::write_axis_meta_data", &
    450                               "The file object is not the right type. It must be FmsNetcdfDomainFile_t or "//&
    451                                 "FmsNetcdfFile_t for a X or Y axis, ", FATAL)
    452                   end select
    453              endif
    454 
    455           ELSE
    456                select type (fptr)
    457                     type is (FmsNetcdfDomainFile_t)
    458                          call register_axis(fptr, axis_name, lowercase(trim(axis_cart_name)), domain_position=axis_pos )
    459                       if (allocated(fptr%pelist)) then
    460                          call get_global_io_domain_indices(fptr, trim(axis_name), istart, iend)
    461                          call register_field(fptr, axis_name, type_str, (/axis_name/) )
    462                       endif
    463                     type is (FmsNetcdfUnstructuredDomainFile_t)
    464                         call register_axis(fptr, axis_name )
    465                     type is (FmsNetcdfFile_t)
    466                          call register_axis(fptr, axis_name, dimension_length=size(axis_data))
    467                       if (allocated(fptr%pelist)) then
    468 !                         call get_global_io_domain_indices(fptr, trim(axis_name), istart, iend)
    469                          istart = lbound(axis_data,1)
    470                          iend = ubound(axis_data,1)
    471                          call register_field(fptr, axis_name, type_str, (/axis_name/) )
    472                       endif
    473                     class default
    474                          call error_mesg("diag_output_mod::write_axis_meta_data", &

Page 13          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    475                               "The FmsNetcdfDomain file object is not the right type.", FATAL)
    476                 end select
    477                     call register_field(fileob, axis_name, type_str, (/axis_name/) )
    478                     call register_variable_attribute(fileob, axis_name, "long_name", trim(axis_long_name), str_len=len_trim(
    478 axis_long_name))
    479                     call register_variable_attribute(fileob, axis_name, "units", trim(axis_units), str_len=len_trim(axis_uni
    479 ts))
    480                     call register_variable_attribute(fileob, axis_name, "axis",trim(axis_cart_name), str_len=len_trim(axis_c
    480 art_name))
    481                     select case (axis_direction)
    482                          case (1)
    483                               call register_variable_attribute(fptr, axis_name, "positive", "up", str_len=len_trim("up"))
    484                          case (-1)
    485                               call register_variable_attribute(fptr, axis_name, "positive", "down", str_len=len_trim("down")
    485 )
    486                     end select
    487                     call write_data(fileob, axis_name, axis_data(istart:iend) )
    488           END IF
    489        ELSE
    490           IF ( length > 0 ) THEN
    491 
    492 !For an unstructured dimension, only the root rank of the io_domain
    493 !pelist will perform the wirte, so a gather of the unstructured
    494 !axis size and axis data is required.
    495              if (uppercase(trim(axis_cart_name)) .eq. "U") then
    496                  if (DomainU .eq. null_domainUG) then
    497                      call error_mesg("diag_output_mod::write_axis_meta_data", &
    498                                      "A non-nul domainUG is required to" &
    499                                      //" write unstructured axis metadata.", &
    500                                      FATAL)
    501                  endif
    502                  io_domain => null()
    503                  io_domain => mpp_get_UG_io_domain(DomainU)
    504                  io_domain_npes = mpp_get_UG_domain_npes(io_domain)
    505                  allocate(io_pelist(io_domain_npes))
    506                  call mpp_get_UG_domain_pelist(io_domain, &
    507                                                io_pelist)
    508                  allocate(unstruct_axis_sizes(io_domain_npes))
    509                  unstruct_axis_sizes = 0
    510                  call mpp_gather((/size(axis_data)/), &
    511                                  unstruct_axis_sizes, &
    512                                  io_pelist)
    513                  if (mpp_pe() .eq. io_pelist(1)) then
    514                      allocate(unstruct_axis_data(sum(unstruct_axis_sizes)))
    515                  else
    516                      allocate(unstruct_axis_data(1))
    517                  endif
    518                  unstruct_axis_data = 0.0
    519                  call mpp_gather(axis_data, &
    520                                  size(axis_data), &
    521                                  unstruct_axis_data, &
    522                                  unstruct_axis_sizes, &
    523                                  io_pelist)
    524                   select type (fptr)
    525                    type is (FmsNetcdfUnstructuredDomainFile_t)
    526                         call register_axis(fptr, axis_name )
    527                         call register_field(fptr, axis_name, type_str, (/axis_name/) )

Page 14          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    528                         if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(axi
    528 s_units), str_len=len_trim(axis_units))
    529                         call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tri
    529 m(axis_long_name))
    530                         if(trim(axis_cart_name).ne."N") call register_variable_attribute(fptr, axis_name, "axis",trim(axis_c
    530 art_name), str_len=len_trim(axis_cart_name))
    531                         call write_data(fptr, axis_name, axis_data)
    532                    class default
    533                         call error_mesg("diag_output_mod::write_axis_meta_data", &
    534                              "The file unstructred 1 object is not the right type.", NOTE)
    535                   end select
    536                  deallocate(io_pelist)
    537                  deallocate(unstruct_axis_sizes)
    538                  deallocate(unstruct_axis_data)
    539                  io_domain => null()
    540 
    541              else
    542                  select type (fptr)
    543                    type is (FmsNetcdfUnstructuredDomainFile_t)
    544                         call register_axis(fptr, axis_name, size(axis_data) )
    545                         call register_field(fptr, axis_name, type_str, (/axis_name/) )
    546                         if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(axi
    546 s_units), str_len=len_trim(axis_units))
    547                         call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tri
    547 m(axis_long_name))
    548                         if(trim(axis_cart_name).ne."N") call register_variable_attribute(fptr, axis_name, "axis",trim(axis_c
    548 art_name), str_len=len_trim(axis_cart_name))
    549                         select case (axis_direction)
    550                              case (1)
    551                                   call register_variable_attribute(fptr, axis_name, "positive", "up", str_len=len_trim("up")
    551 )
    552                              case (-1)
    553                                   call register_variable_attribute(fptr, axis_name, "positive", "down", str_len=len_trim("do
    553 wn"))
    554                         end select
    555                         call write_data(fptr, axis_name, axis_data)
    556                    type is (FmsNetcdfDomainFile_t)
    557                     if (.not.variable_exists(fptr, axis_name)) then
    558                         call register_axis(fptr, axis_name, size(axis_data) )
    559                         call register_field(fptr, axis_name, type_str, (/axis_name/) )
    560                         if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(axi
    560 s_units), str_len=len_trim(axis_units))
    561                         call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tri
    561 m(axis_long_name))
    562                         if(trim(axis_cart_name).ne."N") call register_variable_attribute(fptr, axis_name, "axis",trim(axis_c
    562 art_name), str_len=len_trim(axis_cart_name))
    563                         select case (axis_direction)
    564                              case (1)
    565                                   call register_variable_attribute(fptr, axis_name, "positive", "up", str_len=len_trim("up")
    565 )
    566                              case (-1)
    567                                   call register_variable_attribute(fptr, axis_name, "positive", "down", str_len=len_trim("do
    567 wn"))
    568                         end select
    569                         call write_data(fptr, axis_name, axis_data)
    570                     endif
    571                    type is (FmsNetcdfFile_t)

Page 15          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    572                     if (.not.variable_exists(fptr, axis_name)) then
    573                         call register_axis(fptr, axis_name, size(axis_data) )
    574                         call register_field(fptr, axis_name, type_str, (/axis_name/) )
    575                         if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(axi
    575 s_units), str_len=len_trim(axis_units))
    576                         call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tri
    576 m(axis_long_name))
    577                         if(trim(axis_cart_name).ne."N") call register_variable_attribute(fptr, axis_name, "axis",trim(axis_c
    577 art_name), str_len=len_trim(axis_cart_name))
    578                         select case (axis_direction)
    579                              case (1)
    580                                   call register_variable_attribute(fptr, axis_name, "positive", "up", str_len=len_trim("up")
    580 )
    581                              case (-1)
    582                                   call register_variable_attribute(fptr, axis_name, "positive", "down", str_len=len_trim("do
    582 wn"))
    583                         end select
    584                         call write_data(fptr, axis_name, axis_data)
    585                     endif
    586                    class default
    587                         call error_mesg("diag_output_mod::write_axis_meta_data", &
    588                              "The file object is not the right type.", FATAL)
    589                  end select
    590              endif
    591 
    592           ELSE
    593 !> @note Check if the time variable is registered.  It's possible that is_time_axis_registered is set to true if using
    594 !! time-templated files because they aren't closed when done writing.  An alternative to this set up would be to put
    595 !! variable_exists into the if statement with an .or. so that it gets registered.
    596                 is_time_axis_registered = variable_exists(fptr,trim(axis_name),.true.)
    597                 if (allocated(fptr%pelist) .and. .not. is_time_axis_registered) then
    598                  select type (fptr)
    599                    type is (FmsNetcdfDomainFile_t)
    600                         call register_axis(fptr, trim(axis_name), unlimited )
    601                         call register_field(fptr, axis_name, type_str, (/axis_name/) )
    602                         if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(axi
    602 s_units), str_len=len_trim(axis_units))
    603 
    604                         call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tri
    604 m(axis_long_name))
    605                         if(trim(axis_cart_name).ne."N") call register_variable_attribute(fptr, axis_name, "axis",trim(axis_c
    605 art_name), str_len=len_trim(axis_cart_name))
    606                         is_time_axis_registered = .true.
    607                         if (present(time_axis_registered)) time_axis_registered = is_time_axis_registered
    608                    type is (FmsNetcdfUnstructuredDomainFile_t)
    609                         call register_axis(fptr, axis_name, size(axis_data) )
    610                         call register_field(fptr, axis_name, type_str, (/axis_name/) )
    611                         if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(axi
    611 s_units), str_len=len_trim(axis_units))
    612                         call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tri
    612 m(axis_long_name))
    613                         if(trim(axis_cart_name).ne."N") call register_variable_attribute(fptr, axis_name, "axis",trim(axis_c
    613 art_name), str_len=len_trim(axis_cart_name))
    614                         is_time_axis_registered = .true.
    615                    type is (FmsNetcdfFile_t)
    616                         call register_axis(fptr, trim(axis_name), unlimited )
    617                         call register_field(fptr, axis_name, type_str, (/axis_name/) )

Page 16          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    618                         if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(axi
    618 s_units), str_len=len_trim(axis_units))
    619                         call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tri
    619 m(axis_long_name))
    620                         if(trim(axis_cart_name).ne."N") call register_variable_attribute(fptr, axis_name, "axis",trim(axis_c
    620 art_name), str_len=len_trim(axis_cart_name))
    621                         is_time_axis_registered = .true.
    622                         if (present(time_axis_registered)) time_axis_registered = is_time_axis_registered
    623                    class default
    624                         call error_mesg("diag_output_mod::write_axis_meta_data", &
    625                              "The file object is not the right type.", FATAL)
    626                  end select
    627                 endif
    628           END IF
    629        END IF
    630 
    631 ! Write axis attributes
    632        id_axis = mpp_get_id(Axis_types(num_axis_in_file))
    633        CALL write_attribute_meta(file_unit, id_axis, num_attributes, attributes, err_msg, varname=axis_name, fileob=fileob)
    634        IF ( LEN_TRIM(err_msg) .GT. 0 ) THEN
    635           CALL error_mesg('diag_output_mod::write_axis_meta_data', TRIM(err_msg), FATAL)
    636        END IF
    637 
    638 !---- write additional attribute (calendar_type) for time axis ----
    639 !---- NOTE: calendar attribute is compliant with CF convention
    640 !---- http://www.cgd.ucar.edu/cms/eaton/netcdf/CF-current.htm#cal
    641        IF ( axis_cart_name == 'T' ) THEN
    642           time_axis_flag(num_axis_in_file) = .TRUE.
    643           id_time_axis = mpp_get_id(Axis_types(num_axis_in_file))
    644           calendar = get_calendar_type()
    645 
    646 
    647           call register_variable_attribute(fileob, axis_name, "calendar_type", &
    648                                     UPPERCASE(TRIM(valid_calendar_types(calendar))), str_len=len_trim(valid_calendar_types(c
    648 alendar)) )
    649           call register_variable_attribute(fileob, axis_name, "calendar", &
    650                                     lowercase(TRIM(valid_calendar_types(calendar))), str_len=len_trim(valid_calendar_types(c
    650 alendar)) )
    651           IF ( time_ops1 ) THEN
    652 
    653              call register_variable_attribute(fileob, axis_name, 'bounds', TRIM(axis_name)//'_bnds', str_len=len_trim(TRIM(a
    653 xis_name)//'_bnds'))
    654           END IF
    655           call set_fileobj_time_name(fileob, axis_name)
    656        ELSE
    657           time_axis_flag(num_axis_in_file) = .FALSE.
    658        END IF
    659 
    660        DEALLOCATE(axis_data)
    661 
    662 ! Deallocate attributes
    663        IF ( ALLOCATED(attributes) ) THEN
    664           DO j=1, num_attributes
    665              IF ( allocated(attributes(j)%fatt ) ) THEN
    666                 DEALLOCATE(attributes(j)%fatt)
    667              END IF
    668              IF ( allocated(attributes(j)%iatt ) ) THEN

Page 17          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    669                 DEALLOCATE(attributes(j)%iatt)
    670              END IF
    671           END DO
    672           DEALLOCATE(attributes)
    673        END IF
    674 
    675 !------------- write axis containing edge information ---------------
    676 
    677 !  --- this axis has no edges -----
    678        IF ( axis_edges <= 0 ) CYCLE
    679 
    680 !  --- was this axis edge previously defined? ---
    681        id_axis_current = id_axis
    682        axis_name_current = axis_name
    683        id_axis = axis_edges
    684        edges_index = get_axis_index(id_axis)
    685        IF ( edges_index > 0 ) CYCLE
    686 
    687 !  ---- get data for axis edges ----
    688        length = get_axis_global_length ( id_axis )
    689        ALLOCATE(axis_data(length))
    690        CALL get_diag_axis(id_axis, axis_name, axis_units, axis_long_name, axis_cart_name,&
    691             & axis_direction, axis_edges, Domain, DomainU, axis_data, num_attributes, attributes)
    692 
    693 !  ---- write edges attribute to original axis ----
    694        call register_variable_attribute(fileob, axis_name_current, "edges",trim(axis_name), str_len=len_trim(axis_name))
    695 !  ---- add edges index to axis list ----
    696 !  ---- assume this is not a time axis ----
    697        num_axis_in_file = num_axis_in_file + 1
    698        axis_in_file(num_axis_in_file) = id_axis
    699        edge_axis_flag(num_axis_in_file) = .TRUE.
    700        time_axis_flag (num_axis_in_file) = .FALSE.
    701 
    702 !  ---- write edges axis to file ----
    703        IF ( Domain .NE. null_domain1d ) THEN
    704 ! assume domain decomposition is irregular and loop through all prev and next
    705 ! domain pointers extracting domain extents.  Assume all pes are used in
    706 ! decomposition
    707           CALL mpp_get_global_domain(Domain, begin=gbegin, END=gend, size=gsize)
    708           CALL mpp_get_layout(Domain, ndivs)
    709           IF ( ndivs .NE. 1 ) THEN
    710              IF ( ALLOCATED(axis_extent) ) DEALLOCATE(axis_extent)
    711              ALLOCATE(axis_extent(0:ndivs-1))
    712              CALL mpp_get_compute_domains(Domain,size=axis_extent(0:ndivs-1))
    713              gend=gend+1
    714              axis_extent(ndivs-1)= axis_extent(ndivs-1)+1
    715              IF ( ALLOCATED(pelist) ) DEALLOCATE(pelist)
    716              ALLOCATE(pelist(0:ndivs-1))
    717              CALL mpp_get_pelist(Domain,pelist)
    718           END IF
    719        END IF
    720 
    721 !> Add edges axis with fms2_io
    722                  select type (fptr)
    723                    type is (FmsNetcdfUnstructuredDomainFile_t)
    724                         call register_axis(fptr, axis_name, size(axis_data) )
    725                         call register_field(fptr, axis_name, type_str, (/axis_name/) )

Page 18          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    726                         if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(axi
    726 s_units), str_len=len_trim(axis_units))
    727                         call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tri
    727 m(axis_long_name))
    728                         if(trim(axis_cart_name).ne."N") call register_variable_attribute(fptr, axis_name, "axis",trim(axis_c
    728 art_name), str_len=len_trim(axis_cart_name))
    729                         select case (axis_direction)
    730                              case (1)
    731                                   call register_variable_attribute(fptr, axis_name, "positive", "up", str_len=len_trim("up")
    731 )
    732                              case (-1)
    733                                   call register_variable_attribute(fptr, axis_name, "positive", "down", str_len=len_trim("do
    733 wn"))
    734                         end select
    735                         call write_data(fptr, axis_name, axis_data)
    736                    type is (FmsNetcdfDomainFile_t)
    737                     if (.not.variable_exists(fptr, axis_name)) then
    738                         call register_axis(fptr, axis_name, size(axis_data) )
    739                         call register_field(fptr, axis_name, type_str, (/axis_name/) )
    740                         if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(axi
    740 s_units), str_len=len_trim(axis_units))
    741                         call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tri
    741 m(axis_long_name))
    742                         if(trim(axis_cart_name).ne."N") call register_variable_attribute(fptr, axis_name, "axis",trim(axis_c
    742 art_name), str_len=len_trim(axis_cart_name))
    743                         select case (axis_direction)
    744                              case (1)
    745                                   call register_variable_attribute(fptr, axis_name, "positive", "up", str_len=len_trim("up")
    745 )
    746                              case (-1)
    747                                   call register_variable_attribute(fptr, axis_name, "positive", "down", str_len=len_trim("do
    747 wn"))
    748                         end select
    749                         call write_data(fptr, axis_name, axis_data)
    750                     endif
    751                    type is (FmsNetcdfFile_t)
    752                     if (.not.variable_exists(fptr, axis_name)) then
    753                         call register_axis(fptr, axis_name, size(axis_data) )
    754                         call register_field(fptr, axis_name, type_str, (/axis_name/) )
    755                         if(trim(axis_units) .ne. "none") call register_variable_attribute(fptr, axis_name, "units", trim(axi
    755 s_units), str_len=len_trim(axis_units))
    756                         call register_variable_attribute(fptr, axis_name, "long_name", trim(axis_long_name), str_len=len_tri
    756 m(axis_long_name))
    757                         if(trim(axis_cart_name).ne."N") call register_variable_attribute(fptr, axis_name, "axis",trim(axis_c
    757 art_name), str_len=len_trim(axis_cart_name))
    758                         select case (axis_direction)
    759                              case (1)
    760                                   call register_variable_attribute(fptr, axis_name, "positive", "up", str_len=len_trim("up")
    760 )
    761                              case (-1)
    762                                   call register_variable_attribute(fptr, axis_name, "positive", "down", str_len=len_trim("do
    762 wn"))
    763                         end select
    764                         call write_data(fptr, axis_name, axis_data)
    765                     endif
    766                    class default
    767                         call error_mesg("diag_output_mod::write_axis_meta_data", &

Page 19          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    768                              "The file object unstructured 2 is not the right type.", FATAL)
    769                  end select
    770 ! Write edge axis attributes
    771        id_axis = mpp_get_id(Axis_types(num_axis_in_file))
    772 !       CALL write_attribute_meta(file_unit, id_axis, num_attributes, attributes, err_msg)
    773        IF ( LEN_TRIM(err_msg) .GT. 0 ) THEN
    774           CALL error_mesg('diag_output_mod::write_axis_meta_data', TRIM(err_msg), FATAL)
    775        END IF
    776 
    777        DEALLOCATE (axis_data)
    778 ! Deallocate attributes
    779        IF ( ALLOCATED(attributes) ) THEN
    780           DO j=1, num_attributes
    781              IF ( allocated(attributes(j)%fatt ) ) THEN
    782                 DEALLOCATE(attributes(j)%fatt)
    783              END IF
    784              IF ( allocated(attributes(j)%iatt ) ) THEN
    785                 DEALLOCATE(attributes(j)%iatt)
    786              END IF
    787           END DO
    788           DEALLOCATE(attributes)
    789        END IF
    790     END DO
    791   END SUBROUTINE write_axis_meta_data_fms2_io


ENTRY POINTS

  Name                                                        
                                                              
 diag_output_mod_mp_write_axis_meta_data_fms2_io_             

Page 20          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   413                                  scalar                    413,459,467,597,663,665,668,710,71
                                                                                                  5,779,781,784                     
 ALL_INDICIES               Local  353      I(4)            4     1     1        ALC                                                
 ATTRIBUTES                 Local  336      RECORD          1560  1     1        ALC              405,633,663,665,666,668,669,672,69
                                                                                                  1,779,781,782,784,785,788         
 AXES                       Dummy  317      I(4)            4     1     1        ARG,IN           373,390                           
 AXIS_CART_NAME             Local  330      CHAR            1           scalar                    404,409,412,418,436,458,480,495,53
                                                                                                  0,548,562,577,605,613,620,641,690,
                                                                                                  728,742,757                       
 AXIS_DATA                  Local  332      R(8)            8     1     1        ALC              401,404,425,447,466,469,470,487,51
                                                                                                  0,519,520,531,544,555,558,569,573,
                                                                                                  584,609,660,689,691,724,735,738,74
                                                                                                  9,753,764,777                     
 AXIS_DIRECTION             Local  331      I(4)            4           scalar                    404,419,437,481,549,563,578,691,72
                                                                                                  9,743,758                         
 AXIS_EDGES                 Local  331      I(4)            4           scalar                    404,678,683,691                   
 AXIS_EXTENT                Local  333      I(4)            4     1     1        ALC              710,711,712,714                   
 AXIS_IN_FILE               Local  398      I(4)            4     1     20                        398,698,1496,1634,2122            
 AXIS_LENGTH                Local  334      I(4)            4           scalar                                                      
 AXIS_LONG_NAME             Local  329      CHAR            256         scalar                    403,417,434,478,529,547,561,576,60
                                                                                                  4,612,619,690,727,741,756         
 AXIS_NAME                  Local  328      CHAR            128         scalar                    403,412,414,415,416,417,418,421,42
                                                                                                  3,425,432,433,434,435,436,439,441,
                                                                                                  445,447,458,460,461,464,466,471,47
                                                                                                  7,478,479,480,483,485,487,526,527,
                                                                                                  528,529,530,531,544,545,546,547,54
                                                                                                  8,551,553,555,557,558,559,560,561,
                                                                                                  562,565,567,569,572,573,574,575,57
                                                                                                  6,577,580,582,584,596,600,601,602,
                                                                                                  604,605,609,610,611,612,613,616,61
                                                                                                  7,618,619,620,633,647,649,653,655,
                                                                                                  682,690,694,724,725,726,727,728,73
                                                                                                  1,733,735,737,738,739,740,741,742,
                                                                                                  745,747,749,752,753,754,755,756,75
                                                                                                  7,760,762,764                     
 AXIS_NAME_CURRENT          Local  328      CHAR            128         scalar                    682,694                           
 AXIS_POS                   Local  334      I(4)            4           scalar                    405,412,458                       
 AXIS_TYPES                 Local  632      RECORD          1424  1     20       SAVE             632,643,771,945,954,965,972,1507,1
                                                                                                  511,1550,1563,1568,1574,1585,1628,
                                                                                                  1646,1657,1662,1667,1853,1862,1873
                                                                                                  ,1880,2031                        
 AXIS_UNITS                 Local  328      CHAR            128         scalar                    403,416,435,479,528,546,560,575,60
                                                                                                  2,611,618,690,726,740,755         
 CALENDAR                   Local  337      I(4)            4           scalar                    644,648,650                       
 CEND                       Local  350      I(4)            4           scalar                    429,430,446                       
 CLENGTH                    Local  351      I(4)            4           scalar                    429,432                           
 COMPRESSED_WRITE_1D_WRAP   Subr   447                                           PRIV             447,487,584,764                   
 CSTART                     Local  350      I(4)            4           scalar                    429,431,446                       
 CURRENT_FILE_UNIT          Local  370      I(4)            4           scalar                    90,370,378,856,1474,1482,1772     
 DATA_SIZE                  Local  352      I(4)            4           scalar                                                      
 DOMAIN                     Local  324      DOMAIN1D        176         scalar                    404,407,428,429,691,703,707,708,71

Page 21          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  2,717                             
 DOMAIN1D                   Type   324                                  scalar                    50,324,1441                       
 DOMAINU                    Local  326      DOMAINUG        544         scalar                    404,496,503,691                   
 DOMAIN_SIZE                Local  334      I(4)            4           scalar                                                      
 DOMAIN_WRITE_1D            Subr   425                                           PRIV             425,569,749                       
 EDGES_INDEX                Local  338      I(4)            4           scalar                    684,685                           
 EDGE_AXIS_FLAG             Local  399      L(4)            4     1     20                        399,699,1497,1635                 
 ERR_MSG                    Local  341      CHAR            2048        scalar                    357,633,634,635,773,774           
 FILEOB                     Dummy  317      RECORD          872         scalar   ARG,TGT,INOUT    358,477,478,479,480,487,633,647,64
                                                                                                  9,653,655,694                     
 FILE_UNIT                  Dummy  317      I(4)            4           scalar   ARG,IN           370,378,633                       
 FPTR                       Local  321      RECORD          872         scalar   PTR              358,410,456,483,485,524,542,596,59
                                                                                                  7,598,722                         
 FPTR                       Local  410      RECORD          872         scalar   TGT              432,433,434,435,436,439,441,445,44
                                                                                                  7                                 
 FPTR                       Local  410      RECORD          2040        scalar   TGT              412,413,414,415,416,417,418,421,42
                                                                                                  3,425                             
 FPTR                       Local  456      RECORD          872         scalar   TGT              466,467,471                       
 FPTR                       Local  456      RECORD          1672        scalar   TGT              464                               
 FPTR                       Local  456      RECORD          2040        scalar   TGT              458,459,460,461                   
 FPTR                       Local  524      RECORD          872         scalar   TGT                                                
 FPTR                       Local  524      RECORD          1672        scalar   TGT              526,527,528,529,530,531           
 FPTR                       Local  542      RECORD          872         scalar   TGT              572,573,574,575,576,577,580,582,58
                                                                                                  4                                 
 FPTR                       Local  542      RECORD          1672        scalar   TGT              544,545,546,547,548,551,553,555   
 FPTR                       Local  542      RECORD          2040        scalar   TGT              557,558,559,560,561,562,565,567,56
                                                                                                  9                                 
 FPTR                       Local  598      RECORD          872         scalar   TGT              616,617,618,619,620               
 FPTR                       Local  598      RECORD          1672        scalar   TGT              609,610,611,612,613               
 FPTR                       Local  598      RECORD          2040        scalar   TGT              600,601,602,604,605               
 FPTR                       Local  722      RECORD          872         scalar   TGT              752,753,754,755,756,757,760,762,76
                                                                                                  4                                 
 FPTR                       Local  722      RECORD          1672        scalar   TGT              724,725,726,727,728,731,733,735   
 FPTR                       Local  722      RECORD          2040        scalar   TGT              737,738,739,740,741,742,745,747,74
                                                                                                  9                                 
 GBEGIN                     Local  339      I(4)            4           scalar                    707                               
 GEND                       Local  339      I(4)            4           scalar                    428,446,707,713                   
 GET_AXIS_GLOBAL_LENGTH     Func   400      I(4)            4           scalar   PRIV             57,400,688,1498,1622              
 GET_CALENDAR_TYPE          Func   644      I(4)            4           scalar   PRIV             60,644,1586                       
 GET_DIAG_AXIS              Subr   403                                           PRIV             56,403,690,1501,1624              
 GET_GLOBAL_IO_DOMAIN_INDIC                                                                                                         
 ES                         Subr   414                                           PRIV             414,460                           
 GSIZE                      Local  339      I(4)            4           scalar                    707                               
 GSTART                     Local  350      I(4)            4           scalar                    428,430,431,446                   
 I                          Local  338      I(4)            4           scalar                    389,390                           
 I4_KIND                    Param  343      I(4)            4           scalar   PRIV             343,344,345,1459,1460,1461        
 ID_AXIS                    Local  337      I(4)            4           scalar                    390,391,398,400,403,632,633,681,68
                                                                                                  3,684,688,690,698,771             
 ID_AXIS_CURRENT            Local  347      I(4)            4           scalar                    681                               
 ID_TIME_AXIS               Local  337      I(4)            4           scalar                    643                               
 IEND                       Local  349      I(4)            4           scalar                    414,425,430,447,460,470,487       
 INDEX                      Local  338      I(4)            4           scalar                    391,394                           
 IO_DOMAIN                  Local  342      DOMAINUG        544         scalar   PTR              502,503,504,506,539               
 IO_DOMAIN_NPES             Local  343      I(4)            4           scalar                    504,505,508                       
 IO_PELIST                  Local  344      I(4)            4     1     1        ALC              505,507,512,513,523,536           

Page 22          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ISTART                     Local  349      I(4)            4           scalar                    414,425,431,447,460,469,487       
 IS_TIME_AXIS_REGISTERED    Local  348      L(4)            4           scalar                    365,367,596,597,606,607,614,621,62
                                                                                                  2                                 
 J                          Local  338      I(4)            4           scalar                    664,665,666,668,669,780,781,782,78
                                                                                                  4,785                             
 LBOUND                     Func   469                                  scalar                    469                               
 LENGTH                     Local  338      I(4)            4           scalar                    400,401,408,490,688,689           
 LEN_TRIM                   Func   416                                  scalar                    416,417,418,421,423,434,435,436,43
                                                                                                  9,441,478,479,480,483,485,528,529,
                                                                                                  530,546,547,548,551,553,560,561,56
                                                                                                  2,565,567,575,576,577,580,582,602,
                                                                                                  604,605,611,612,613,618,619,620,63
                                                                                                  4,648,650,653,694,726,727,728,731,
                                                                                                  733,740,741,742,745,747,755,756,75
                                                                                                  7,760,762,773                     
 MPP_DOMAIN1D_NE            Func   407      L(4)            4           scalar   PRIV             407,703,1505,1639                 
 MPP_DOMAINUG_EQ            Func   496      L(4)            4           scalar   PRIV             496,1521                          
 MPP_GATHER                 Local  510                                  scalar   PRIV             70,510,519,1535,1544              
 MPP_GATHER_INT4_1D         Subr   510                                           PRIV             510,1535                          
 MPP_GATHER_REAL8_1DV       Subr   519                                           PRIV             519,1544                          
 MPP_GET_AXIS_ID            Func   632      I(4)            4           scalar   PRIV             632,643,771,1574,1585,1628,1667   
 MPP_GET_COMPUTE_DOMAIN     Local  429                                  scalar   PRIV             52,429                            
 MPP_GET_COMPUTE_DOMAIN1D   Subr   429                                           PRIV             429                               
 MPP_GET_COMPUTE_DOMAINS    Local  712                                  scalar   PRIV             51,712,1651                       
 MPP_GET_COMPUTE_DOMAINS1D  Subr   712                                           PRIV             712,1651                          
 MPP_GET_GLOBAL_DOMAIN      Local  428                                  scalar   PRIV             51,428,707,1643                   
 MPP_GET_GLOBAL_DOMAIN1D    Subr   428                                           PRIV             428,707,1643                      
 MPP_GET_ID                 Local  632                                  scalar   PRIV             43,632,643,771,1032,1574,1585,1628
                                                                                                  ,1667,1892,1925,1933,1935,1940    
 MPP_GET_LAYOUT             Local  708                                  scalar   PRIV             53,708,1644                       
 MPP_GET_LAYOUT1D           Subr   708                                           PRIV             708,1644                          
 MPP_GET_PELIST             Local  717                                  scalar   PRIV             50,717,1656                       
 MPP_GET_PELIST1D           Subr   717                                           PRIV             717,1656                          
 MPP_GET_UG_DOMAIN_NPES     Func   504      I(4)            4           scalar   PRIV             68,504,1529                       
 MPP_GET_UG_DOMAIN_PELIST   Subr   506                                           PRIV             69,506,1531                       
 MPP_GET_UG_IO_DOMAIN       Func   503      RECORD          544         scalar   PTR,PRIV         67,503,1528                       
 MXCH                       Param  328      I(4)            4           scalar                    328,1445                          
 MXCHL                      Param  329      I(4)            4           scalar                    329,1446                          
 NDIVS                      Local  339      I(4)            4           scalar                    708,709,711,712,714,716           
 NETCDF_ADD_DIMENSION       Subr   432                                           PRIV             432,466,544,558,573,600,609,616,72
                                                                                                  4,738,753                         
 NETCDF_ADD_VARIABLE_WRAP   Subr   433                                           PRIV             433,471,477,574,617,754,987,1003  
 NOTE                       Param  534      I(4)            4           scalar   PRIV             61,534                            
 NULL                       Func   502                                  scalar   PTR              502,539                           
 NULL_DOMAIN1D              Local  407      DOMAIN1D        176         scalar   PRIV,SAVE        51,407,703,1505,1639              
 NUM                        Local  338      I(4)            4           scalar                    373,375,389                       
 NUM_ATTRIBUTES             Local  335      I(4)            4           scalar                    405,633,664,691,780               
 NUM_AXIS_IN_FILE           Local  370      I(4)            4           scalar                    96,370,397,398,399,632,642,643,657
                                                                                                  ,697,698,699,700,771,1158,1474,149
                                                                                                  5,1496,1497,1507,1511,1550,1563,15
                                                                                                  68,1574,1584,1585,1593,1628,1633,1
                                                                                                  634,1635,1636,1646,1657,1662,1667,
                                                                                                  2029,2034,2121                    
 PACK_SIZE                  Local  381      I(4)            4           scalar   PRIV             59,381,383                        
 PELIST                     Local  333      I(4)            4     1     1        ALC              715,716,717                       

Page 23          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PRESENT                    Func   359                                  scalar                    359,364,607,622                   
 REGISTER_AXIS              Local  412                                  scalar   PRIV             412,432,458,464,466,526,544,558,57
                                                                                                  3,600,609,616,724,738,753         
 REGISTER_DOMAIN_DECOMPOSED                                                                                                         
 _DIMENSION                 Subr   412                                           PRIV             412,458                           
 REGISTER_DOMAIN_VARIABLE   Subr   415                                           PRIV             415,461,559,601,739               
 REGISTER_FIELD             Local  415                                  scalar   PRIV             415,433,461,471,477,527,545,559,57
                                                                                                  4,601,610,617,725,739,754,987,1003
 REGISTER_UNSTRUCTURED_DIME                                                                                                         
 NSION                      Subr   464                                           PRIV             464,526                           
 REGISTER_UNSTRUCTURED_DOMA                                                                                                         
 IN_VARIABLE                Subr   527                                           PRIV             527,545,610,725                   
 REGISTER_VARIABLE_ATTRIBUT                                                                                                         
 E                          Local  416                                  scalar   PRIV             416,417,418,421,423,434,435,436,43
                                                                                                  9,441,445,478,479,480,483,485,528,
                                                                                                  529,530,546,547,548,551,553,560,56
                                                                                                  1,562,565,567,575,576,577,580,582,
                                                                                                  602,604,605,611,612,613,618,619,62
                                                                                                  0,647,649,653,694,726,727,728,731,
                                                                                                  733,740,741,742,745,747,755,756,75
                                                                                                  7,760,762,992,993,995,996,999,1008
                                                                                                  ,1009,1011,1012,1015,1022,1023,102
                                                                                                  5,1064,1072,1075,1079,1118,1127,11
                                                                                                  37                                
 REGISTER_VARIABLE_ATTRIBUT                                                                                                         
 E_0D                       Subr   416                                           PRIV             416,417,418,421,423,434,435,436,43
                                                                                                  9,441,478,479,480,483,485,528,529,
                                                                                                  530,546,547,548,551,553,560,561,56
                                                                                                  2,565,567,575,576,577,580,582,602,
                                                                                                  604,605,611,612,613,618,619,620,64
                                                                                                  7,649,653,694,726,727,728,731,733,
                                                                                                  740,741,742,745,747,755,756,757,76
                                                                                                  0,762,992,993,995,996,1008,1009,10
                                                                                                  11,1012,1022,1023,1025,1064,1072,1
                                                                                                  075,1079,1137                     
 REGISTER_VARIABLE_ATTRIBUT                                                                                                         
 E_1D                       Subr   445                                           PRIV             445,999,1015,1118,1127            
 SET_FILEOBJ_TIME_NAME      Subr   655                                           PRIV             655                               
 SIZE                       Func   373                                  scalar                    373,466,510,520,544,558,573,609,72
                                                                                                  4,738,753                         
 SUM                        Func   514                                  scalar                    514                               
 TIME_AXIS_FLAG             Local  642      L(4)            4     1     20                        642,657,700,1584,1593,1636,2030   
 TIME_AXIS_REGISTERED       Dummy  317      L(4)            4           scalar   ARG,INOUT        364,365,607,622                   
 TIME_OPS                   Dummy  317      L(4)            4           scalar   ARG,IN           359,360                           
 TIME_OPS1                  Local  340      L(4)            4           scalar                    360,362,651                       
 TRIM                       Func   409                                  scalar                    409,412,414,416,417,418,434,435,43
                                                                                                  6,458,460,478,479,480,495,528,529,
                                                                                                  530,546,547,548,560,561,562,575,57
                                                                                                  6,577,596,600,602,604,605,611,612,
                                                                                                  613,616,618,619,620,635,648,650,65
                                                                                                  3,694,726,727,728,740,741,742,755,
                                                                                                  756,757,774                       
 TYPE_STR                   Local  354      CHAR            32          scalar                    382,384,415,433,461,471,477,527,54
                                                                                                  5,559,574,601,610,617,725,739,754 
 UBOUND                     Func   470                                  scalar                    470                               

Page 24          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 UNLIMITED                  Param  600      I(4)            4           scalar   PRIV             600,616                           
 UNSTRUCTURED_DOMAIN_WRITE_                                                                                                         
 1D                         Subr   531                                           PRIV             531,555,735                       
 UNSTRUCT_AXIS_DATA         Local  346      R(8)            8     1     1        ALC              514,516,518,521,538               
 UNSTRUCT_AXIS_SIZES        Local  345      I(4)            4     1     1        ALC              508,509,511,514,522,537           
 UPPERCASE                  Func   409      CHAR                        scalar   TGT,PRIV         71,409,495,648,1520               
 VALID_CALENDAR_TYPES       Func   648      CHAR            24          scalar   PRIV             60,648,650,1587,1588              
 VARIABLE_EXISTS            Func   557      L(4)            4           scalar   PRIV             557,572,596,737,752,979           
 WRITE_ATTRIBUTE_META       Local  633                                  scalar                    633,1032,1575,1668,1892           
 WRITE_AXIS_META_DATA_FMS2_                                                                                                         
 IO                         Subr   317                                           PRIV                                               
 WRITE_DATA                 Local  425                                  scalar   PRIV             425,447,487,531,555,569,584,735,74
                                                                                                  9,764,1188,1190,1192,1204,1206,121
                                                                                                  2,1214,1219,1221,1263,1265,1267,12
                                                                                                  71,1276,1280,1283,1311            


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 FMSNETCDFFILE_T.PELIST     I(4)            4     520      1     1        ALC              413,459                            
 FMSNETCDFFILE_T.PELIST     I(4)            4     520      1     1        ALC              467,597                            

Page 25          Source Listing                  WRITE_AXIS_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    792 
    793 !> @brief Write the field meta data to file.
    794 !! @return diag_fieldtype Field
    795 !! @details The meta data for the field is written to the file indicated by file_unit
    796   FUNCTION write_field_meta_data_fms2_io ( file_unit, name, axes, units, long_name, range, pack, mval,&
    797        & avg_name, time_method, standard_name, interp_method, attributes, num_attributes,     &
    798        & use_UGdomain, fileob) result ( Field )
    799     INTEGER, INTENT(in) :: file_unit !< Output file unit number
    800     INTEGER, INTENT(in) :: axes(:) !< Array of axis IDs
    801     CHARACTER(len=*), INTENT(in) :: name !< Field name
    802     CHARACTER(len=*), INTENT(in) :: units !< Field units
    803     CHARACTER(len=*), INTENT(in) :: long_name !< Field's long name
    804     REAL, OPTIONAL, INTENT(in) :: RANGE(2) !< Valid range (min, max).  If min > max, the range will be ignored
    805     REAL, OPTIONAL, INTENT(in) :: mval !< Missing value, must be within valid range
    806     INTEGER, OPTIONAL, INTENT(in) :: pack !< Packing flag.  Only valid when range specified.  Valid values:
    807 !! Flag | Size
    808 !! --- | ---
    809 !! 1 | 64bit
    810 !! 2 | 32bit
    811 !! 4 | 16bit
    812 !! 8 | 8bit
    813     CHARACTER(len=*), OPTIONAL, INTENT(in) :: avg_name !< Name of variable containing time averaging info
    814     CHARACTER(len=*), OPTIONAL, INTENT(in) :: time_method !< Name of transformation applied to the time-varying data,
    815 !! i.e. "avg", "min", "max"
    816     CHARACTER(len=*), OPTIONAL, INTENT(in) :: standard_name !< Standard name of field
    817     CHARACTER(len=*), OPTIONAL, INTENT(in) :: interp_method
    818     TYPE(diag_atttype), DIMENSION(:), allocatable, OPTIONAL, INTENT(in) :: attributes
    819     INTEGER, OPTIONAL, INTENT(in) :: num_attributes
    820     LOGICAL, OPTIONAL, INTENT(in) :: use_UGdomain
    821 class(FmsNetcdfFile_t), intent(inout)     :: fileob
    822 
    823     logical :: is_time_bounds !< Flag indicating if the variable is time_bounds
    824     CHARACTER(len=256) :: standard_name2
    825     CHARACTER(len=1280) :: att_str
    826     TYPE(diag_fieldtype) :: Field
    827     LOGICAL :: coord_present
    828     CHARACTER(len=40) :: aux_axes(SIZE(axes))
    829     CHARACTER(len=160) :: coord_att
    830     CHARACTER(len=1024) :: err_msg
    831 
    832 character(len=128),dimension(size(axes)) :: axis_names
    833     REAL :: scale, add
    834     INTEGER :: i, indexx, num, ipack, np, att_len
    835     LOGICAL :: use_range
    836     INTEGER :: axis_indices(SIZE(axes))
    837     logical :: use_UGdomain_local
    838 !---- Initialize err_msg to bank ----
    839     err_msg = ''
    840 
    841 !---- dummy checks ----
    842     coord_present = .FALSE.
    843     IF( PRESENT(standard_name) ) THEN
    844        standard_name2 = standard_name
    845     ELSE
    846        standard_name2 = 'none'
    847     END IF
    848 

Page 26          Source Listing                  WRITE_FIELD_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    849     use_UGdomain_local = .false.
    850     if(present(use_UGdomain)) use_UGdomain_local = use_UGdomain
    851 
    852     num = SIZE(axes(:))
    853 ! <ERROR STATUS="FATAL">number of axes < 1</ERROR>
    854     IF ( num < 1 ) CALL error_mesg ( 'write_meta_data', 'number of axes < 1', FATAL)
    855 ! <ERROR STATUS="FATAL">writing meta data out-of-order to different files</ERROR>
    856     IF ( file_unit /= current_file_unit ) CALL error_mesg ( 'write_meta_data',  &
    857          & 'writing meta data out-of-order to different files', FATAL)
    858 
    859     IF (trim(name) .eq. "time_bnds") then
    860        is_time_bounds = .true.
    861     ELSE
    862        is_time_bounds = .false.
    863     ENDIF
    864 
    865 !---- check all axes for this field ----
    866 !---- set up indexing to axistypes ----
    867     DO i = 1, num
    868        indexx = get_axis_index(axes(i))
    869 !---- point to existing axistype -----
    870        IF ( indexx > 0 ) THEN
    871           axis_indices(i) = indexx
    872        ELSE
    873 ! <ERROR STATUS="FATAL">axis data not written for field</ERROR>
    874           CALL error_mesg ('write_field_meta_data',&
    875                & 'axis data not written for field '//TRIM(name), FATAL)
    876        END IF
    877 !Get the axes names
    878           call get_diag_axis_name(axes(i),axis_names(i))
    879     END DO
    880 
    881 !  Create coordinate attribute
    882     IF ( num >= 2 .OR. (num==1 .and. use_UGdomain_local) ) THEN
    883        coord_att = ' '
    884        DO i = 1, num
    885           aux_axes(i) = get_axis_aux(axes(i))
    886           IF( TRIM(aux_axes(i)) /= 'none' ) THEN
    887              IF(LEN_TRIM(coord_att) == 0) THEN
    888                 coord_att = TRIM(aux_axes(i))
    889              ELSE
    890                 coord_att = TRIM(coord_att)// ' '//TRIM(aux_axes(i))
    891              ENDIF
    892              coord_present = .TRUE.
    893           END IF
    894        END DO
    895     END IF
    896 
    897 !--------------------- write field meta data ---------------------------
    898 
    899 !---- select packing? ----
    900 !(packing option only valid with range option)
    901     IF ( PRESENT(pack) ) THEN
    902        ipack = pack
    903     ELSE
    904        ipack = 2
    905     END IF

Page 27          Source Listing                  WRITE_FIELD_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    906 
    907 !---- check range ----
    908     use_range = .FALSE.
    909     add = 0.0
    910     scale = 1.0
    911     IF ( PRESENT(range) ) THEN
    912        IF ( RANGE(2) > RANGE(1) ) THEN
    913           use_range = .TRUE.
    914 !---- set packing parameters ----
    915           IF ( ipack > 2 ) THEN
    916              np = ipack/4
    917              add = 0.5*(RANGE(1)+RANGE(2))
    918              scale = (RANGE(2)-RANGE(1)) / real(max_range(2,np)-max_range(1,np))
    919           END IF
    920        END IF
    921     END IF
    922 
    923 !---- select packing? ----
    924     IF ( PRESENT(mval) ) THEN
    925        Field%miss = mval
    926        Field%miss_present = .TRUE.
    927        IF ( ipack > 2 ) THEN
    928           np = ipack/4
    929           Field%miss_pack = REAL(missval(np))*scale+add
    930           Field%miss_pack_present = .TRUE.
    931        ELSE
    932           Field%miss_pack = mval
    933           Field%miss_pack_present = .FALSE.
    934        END IF
    935     ELSE
    936        Field%miss_present = .FALSE.
    937        Field%miss_pack_present = .FALSE.
    938     END IF
    939 
    940 !------ write meta data and return fieldtype -------
    941 !!! Fill in mpp fieldtype for field%field
    942     IF ( use_range ) THEN
    943        IF ( Field%miss_present ) THEN
    944           CALL fillin_fieldtype( Field%Field,&
    945                & Axis_types(axis_indices(1:num)),&
    946                & name, units, long_name,&
    947                & RANGE(1), RANGE(2),&
    948                & missing=Field%miss_pack,&
    949                & fill=Field%miss_pack,&
    950                & scale=scale, add=add, pack=ipack,&
    951                & time_method=time_method)
    952        ELSE
    953           CALL fillin_fieldtype( Field%Field,&
    954                & Axis_types(axis_indices(1:num)),&
    955                & name, units,  long_name,&
    956                & RANGE(1), RANGE(2),&
    957                & missing=CMOR_MISSING_VALUE,&
    958                & fill=CMOR_MISSING_VALUE,&
    959                & scale=scale, add=add, pack=ipack,&
    960                & time_method=time_method)
    961        END IF
    962     ELSE

Page 28          Source Listing                  WRITE_FIELD_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

    963        IF ( Field%miss_present ) THEN
    964           CALL fillin_fieldtype( Field%Field,&
    965                & Axis_types(axis_indices(1:num)),&
    966                & name, units, long_name,&
    967                & missing=Field%miss_pack,&
    968                & fill=Field%miss_pack,&
    969                & pack=ipack, time_method=time_method)
    970        ELSE
    971           CALL fillin_fieldtype( Field%Field,&
    972                & Axis_types(axis_indices(1:num)),&
    973                & name, units, long_name,&
    974                & missing=CMOR_MISSING_VALUE,&
    975                & fill=CMOR_MISSING_VALUE,&
    976                & pack=ipack, time_method=time_method)
    977        END IF
    978     END IF
    979   if (.not. variable_exists(fileob,name)) then
    980 ! ipack Valid values:
    981 !        1 = 64bit </LI>
    982 !        2 = 32bit </LI>
    983 !        4 = 16bit </LI>
    984 !        8 =  8bit </LI>
    985      select case (ipack)
    986      case (1)
    987           call register_field(fileob,name,"double",axis_names)
    988 !< Don't write the _FillValue, missing_value if the variable is
    989 !time_bounds to be cf compliant
    990           if (.not. is_time_bounds) then
    991           IF ( Field%miss_present ) THEN
    992                call register_variable_attribute(fileob,name,"_FillValue",real(Field%miss_pack,8))
    993                call register_variable_attribute(fileob,name,"missing_value",real(Field%miss_pack,8))
    994           ELSE
    995                call register_variable_attribute(fileob,name,"_FillValue",real(CMOR_MISSING_VALUE,8))
    996                call register_variable_attribute(fileob,name,"missing_value",real(CMOR_MISSING_VALUE,8))
    997           ENDIF
    998           IF ( use_range ) then
    999                call register_variable_attribute(fileob,name,"valid_range", real(RANGE,8))
   1000           ENDIF
   1001           endif !< if (.not. is_time_bounds)
   1002      case (2) !default
   1003           call register_field(fileob,name,"float",axis_names)
   1004 !< Don't write the _FillValue, missing_value if the variable is
   1005 !time_bounds to be cf compliant
   1006           if (.not. is_time_bounds) then
   1007           IF ( Field%miss_present ) THEN
   1008                call register_variable_attribute(fileob,name,"_FillValue",real(Field%miss_pack,4))
   1009                call register_variable_attribute(fileob,name,"missing_value",real(Field%miss_pack,4))
   1010           ELSE
   1011                call register_variable_attribute(fileob,name,"_FillValue",real(CMOR_MISSING_VALUE,4))
   1012                call register_variable_attribute(fileob,name,"missing_value",real(CMOR_MISSING_VALUE,4))
   1013           ENDIF
   1014           IF ( use_range ) then
   1015                call register_variable_attribute(fileob,name,"valid_range", real(RANGE,4))
   1016           ENDIF
   1017           endif !< if (.not. is_time_bounds)
   1018      case default
   1019           CALL error_mesg('diag_output_mod::write_field_meta_data',&

Page 29          Source Listing                  WRITE_FIELD_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

   1020                &"Pack values must be 1 or 2. Contact the developers.", FATAL)
   1021      end select
   1022      if (trim(units) .ne. "none") call register_variable_attribute(fileob,name,"units",trim(units), str_len=len_trim(units))
   1023      call register_variable_attribute(fileob,name,"long_name",long_name, str_len=len_trim(long_name))
   1024      IF (present(time_method) ) then
   1025           call register_variable_attribute(fileob,name,'cell_methods','time: '//trim(time_method), str_len=len_trim('time: '
   1025 //trim(time_method)))
   1026      ENDIF
   1027   endif
   1028 !---- write user defined attributes -----
   1029     IF ( PRESENT(num_attributes) ) THEN
   1030        IF ( PRESENT(attributes) ) THEN
   1031           IF ( num_attributes .GT. 0 .AND. allocated(attributes) ) THEN
   1032              CALL write_attribute_meta(file_unit, mpp_get_id(Field%Field), num_attributes, attributes, time_method, err_msg,
   1032  fileob=fileob, varname=name)
   1033              IF ( LEN_TRIM(err_msg) .GT. 0 ) THEN
   1034                 CALL error_mesg('diag_output_mod::write_field_meta_data',&
   1035                      & TRIM(err_msg)//" Contact the developers.", FATAL)
   1036              END IF
   1037           ELSE
   1038 ! Catch some bad cases
   1039              IF ( num_attributes .GT. 0 .AND. .NOT.allocated(attributes) ) THEN
   1040                 CALL error_mesg('diag_output_mod::write_field_meta_data',&
   1041                      & 'num_attributes > 0 but attributes is not allocated for attribute '&
   1042                      &//TRIM(attributes(i)%name)//' for field '//TRIM(name)//'. Contact the developers.', FATAL)
   1043              ELSE IF ( num_attributes .EQ. 0 .AND. allocated(attributes) ) THEN
   1044                 CALL error_mesg('diag_output_mod::write_field_meta_data',&
   1045                      & 'num_attributes == 0 but attributes is allocated for attribute '&
   1046                      &//TRIM(attributes(i)%name)//' for field '//TRIM(name)//'. Contact the developers.', FATAL)
   1047              END IF
   1048           END IF
   1049        ELSE
   1050 ! More edge error cases
   1051           CALL error_mesg('diag_output_mod::write_field_meta_data',&
   1052                & 'num_attributes present but attributes missing for attribute '&
   1053                &//TRIM(attributes(i)%name)//' for field '//TRIM(name)//'. Contact the developers.', FATAL)
   1054        END IF
   1055     ELSE IF ( PRESENT(attributes) ) THEN
   1056        CALL error_mesg('diag_output_mod::write_field_meta_data',&
   1057             & 'attributes present but num_attributes missing for attribute '&
   1058             &//TRIM(attributes(i)%name)//' for field '//TRIM(name)//'. Contact the developers.', FATAL)
   1059     END IF
   1060 
   1061 !---- write additional attribute for time averaging -----
   1062     IF ( PRESENT(avg_name) ) THEN
   1063        IF ( avg_name(1:1) /= ' ' ) THEN
   1064           call register_variable_attribute(fileob,name,'time_avg_info',&
   1065              & trim(avg_name)//'_T1,'//trim(avg_name)//'_T2,'//trim(avg_name)//'_DT', &
   1066              & str_len=len_trim(trim(avg_name)//'_T1,'//trim(avg_name)//'_T2,'//trim(avg_name)//'_DT'))
   1067        END IF
   1068     END IF
   1069 
   1070 ! write coordinates attribute for CF compliance
   1071     IF ( coord_present ) then
   1072          call register_variable_attribute(fileob,name,'coordinates',TRIM(coord_att), str_len=len_trim(coord_att))
   1073     ENDIF
   1074     IF ( TRIM(standard_name2) /= 'none' ) then

Page 30          Source Listing                  WRITE_FIELD_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

   1075          call register_variable_attribute(fileob,name,'standard_name',TRIM(standard_name2), str_len=len_trim(standard_name2)
   1075 )
   1076     ENDIF
   1077 !---- write attribute for interp_method ----
   1078     IF( PRESENT(interp_method) ) THEN
   1079        call register_variable_attribute(fileob,name,'interp_method', TRIM(interp_method), str_len=len_trim(interp_method))
   1080     END IF
   1081 
   1082 !---- get axis domain ----
   1083     Field%Domain = get_domain2d ( axes )
   1084     Field%tile_count = get_tile_count ( axes )
   1085     Field%DomainU = get_domainUG ( axes(1) )
   1086 
   1087   END FUNCTION write_field_meta_data_fms2_io


ENTRY POINTS

  Name                                                         
                                                               
 diag_output_mod_mp_write_field_meta_data_fms2_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD                        Local  833      R(8)            8           scalar                    909,917,929,950,959               
 ALLOCATED                  Func   1031                                 scalar                    1031,1039,1043                    
 ATTRIBUTES                 Dummy  797      RECORD          1560  1     1        ARG,ALC,IN       1030,1031,1032,1039,1042,1043,1046
                                                                                                  ,1053,1055,1058                   
 ATT_LEN                    Local  834      I(4)            4           scalar                                                      
 ATT_STR                    Local  825      CHAR            1280        scalar                                                      
 AUX_AXES                   Local  828      CHAR            40    1     0                         885,886,888,890                   
 AVG_NAME                   Dummy  797      CHAR                        scalar   ARG,IN           1062,1063,1065,1066               
 AXES                       Dummy  796      I(4)            4     1     1        ARG,IN           828,832,836,852,868,878,885,1083,1
                                                                                                  084,1085                          
 AXIS_INDICES               Local  836      I(4)            4     1     0                         871,945,954,965,972               
 AXIS_NAMES                 Local  832      CHAR            128   1     0        TGT              878,987,1003                      
 CMOR_MISSING_VALUE         Param  957      R(8)            8           scalar   PRIV             59,957,958,974,975,995,996,1011,10
                                                                                                  12,1865,1866,1882,1883,2072,2080  
 COORD_ATT                  Local  829      CHAR            160         scalar                    883,887,888,890,1072              
 COORD_PRESENT              Local  827      L(4)            4           scalar                    842,892,1071                      
 DIAG_FIELDTYPE             Type   826                                  scalar                    59,82,826,1163,1742,2054          
 ERR_MSG                    Local  830      CHAR            1024        scalar                    839,1032,1033,1035                
 FIELD                      Local  826      DIAG_FIELDTYPE  2424        scalar                    925,926,929,930,932,933,936,937,94
                                                                                                  3,944,948,949,953,963,964,967,968,
                                                                                                  971,991,992,993,1007,1008,1009,103
                                                                                                  2,1083,1084,1085                  
 FILEOB                     Dummy  798      RECORD          872         scalar   ARG,INOUT        979,987,992,993,995,996,999,1003,1
                                                                                                  008,1009,1011,1012,1015,1022,1023,
                                                                                                  1025,1032,1064,1072,1075,1079     
 FILE_UNIT                  Dummy  796      I(4)            4           scalar   ARG,IN           856,1032                          
 FILLIN_FIELDTYPE           Subr   944                                           PRIV             45,944,953,964,971                
 GET_AXIS_AUX               Func   885      CHAR            128         scalar   PRIV             57,885,1794                       
 GET_DIAG_AXIS_NAME         Subr   878                                           PRIV             58,878                            
 GET_DOMAIN2D               Func   1083     RECORD          752         scalar   PRIV             57,1083,1945                      

Page 31          Source Listing                  WRITE_FIELD_META_DATA_FMS2_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_DOMAINUG               Func   1085     RECORD          544         scalar   PRIV             58,1085,1947                      
 GET_TILE_COUNT             Func   1084     I(4)            4           scalar   PRIV             57,1084,1946                      
 I                          Local  834      I(4)            4           scalar                    867,868,871,878,884,885,886,888,89
                                                                                                  0,1042,1046,1053,1058             
 INDEXX                     Local  834      I(4)            4           scalar                    868,870,871                       
 INTERP_METHOD              Dummy  797      CHAR                        scalar   ARG,IN           1078,1079                         
 IPACK                      Local  834      I(4)            4           scalar                    902,904,915,916,927,928,950,959,96
                                                                                                  9,976,985                         
 IS_TIME_BOUNDS             Local  823      L(4)            4           scalar                    860,862,990,1006                  
 LEN_TRIM                   Func   887                                  scalar                    887,1022,1023,1025,1033,1066,1072,
                                                                                                  1075,1079                         
 LONG_NAME                  Dummy  796      CHAR                        scalar   ARG,IN           946,955,966,973,1023              
 MAX_RANGE                  Local  918      I(4)            4     2     4                         91,918,1827                       
 MISSVAL                    Local  929      I(4)            4     1     2                         93,929,1838                       
 MPP_GET_FIELD_ID           Func   1032     I(4)            4           scalar   PRIV             1032,1892,1925,1933,1935,1940     
 MVAL                       Dummy  796      R(8)            8           scalar   ARG,IN           924,925,932                       
 NAME                       Dummy  796      CHAR                        scalar   ARG,IN           859,875,946,955,966,973,979,987,99
                                                                                                  2,993,995,996,999,1003,1008,1009,1
                                                                                                  011,1012,1015,1022,1023,1025,1032,
                                                                                                  1042,1046,1053,1058,1064,1072,1075
                                                                                                  ,1079                             
 NP                         Local  834      I(4)            4           scalar                    916,918,928,929                   
 NUM                        Local  834      I(4)            4           scalar                    852,854,867,882,884,945,954,965,97
                                                                                                  2                                 
 NUM_ATTRIBUTES             Dummy  797      I(4)            4           scalar   ARG,IN           1029,1031,1032,1039,1043          
 PACK                       Dummy  796      I(4)            4           scalar   ARG,IN           901,902                           
 PRESENT                    Func   843                                  scalar                    843,850,901,911,924,1024,1029,1030
                                                                                                  ,1055,1062,1078                   
 RANGE                      Dummy  796      R(8)            8     1     2        ARG,IN           911,912,917,918,947,956,999,1015  
 REAL                       Func   918                                  scalar                    918,929,992,993,995,996,999,1008,1
                                                                                                  009,1011,1012,1015                
 SCALE                      Local  833      R(8)            8           scalar                    910,918,929,950,959               
 SIZE                       Func   828                                  scalar                    828,832,836,852                   
 STANDARD_NAME              Dummy  797      CHAR                        scalar   ARG,IN           843,844                           
 STANDARD_NAME2             Local  824      CHAR            256         scalar                    844,846,1074,1075                 
 TIME_METHOD                Dummy  797      CHAR                        scalar   ARG,IN           951,960,969,976,1024,1025,1032    
 TRIM                       Func   859                                  scalar                    859,875,886,888,890,1022,1025,1035
                                                                                                  ,1042,1046,1053,1058,1065,1066,107
                                                                                                  2,1074,1075,1079                  
 UNITS                      Dummy  796      CHAR                        scalar   ARG,IN           946,955,966,973,1022              
 USE_RANGE                  Local  835      L(4)            4           scalar                    908,913,942,998,1014              
 USE_UGDOMAIN               Dummy  798      L(4)            4           scalar   ARG,IN           850                               
 USE_UGDOMAIN_LOCAL         Local  837      L(4)            4           scalar                    849,850,882                       
 WRITE_FIELD_META_DATA_FMS2                                                                                                         
 _IO                        Func   796      RECORD          2424        scalar   PRIV                                               



Page 32          Source Listing                  WRITE_FIELD_META_DATA_FMS2_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 DIAG_FIELDTYPE.DOMAIN      DOMAIN2D        752   1096           scalar                    1083,1945,2066,2068,2071           
 DIAG_FIELDTYPE.DOMAINU     DOMAINUG        544   1848           scalar                    1085,1947,2074,2076,2079           
 DIAG_FIELDTYPE.FIELD       FIELDTYPE       1096  0              scalar                    944,953,964,971,1032,1188,1190,119 
                                                                                           2,1204,1206,1212,1214,1219,1221,18 
                                                                                           52,1861,1872,1879,1892,1925,1933,1 
                                                                                           935,1940,2068,2071,2076,2079,2084  
 DIAG_FIELDTYPE.MISS        R(8)            8     2392           scalar                    925,1834,2062                      
 DIAG_FIELDTYPE.MISS_PACK   R(8)            8     2400           scalar                    929,932,948,949,967,968,992,993,10 
                                                                                           08,1009,1838,1841,1856,1857,1875,1 
                                                                                           876,2062,2069,2077                 
 DIAG_FIELDTYPE.MISS_PACK_PRESENT                                                                                          ...
                            L(4)            4     2412           scalar                    930,933,937,1839,1842,1846,2061    
 DIAG_FIELDTYPE.MISS_PRESENT                                                                                               ...
                            L(4)            4     2408           scalar                    926,936,943,963,991,1007,1835,1845 
                                                                                           ,1851,1871,2067,2075               
 DIAG_FIELDTYPE.TILE_COUNT  I(4)            4     2416           scalar                    1084,1946,2069,2072                

Page 33          Source Listing                  WRITE_FIELD_META_DATA_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

   1088 
   1089 !> \brief Write out attribute meta data to file
   1090 !!
   1091 !! Write out the attribute meta data to file, for field and axes
   1092   SUBROUTINE write_attribute_meta_fms2_io(file_unit, id, num_attributes, attributes, time_method, err_msg, varname, fileob)
   1093     INTEGER, INTENT(in) :: file_unit !< File unit number
   1094     INTEGER, INTENT(in) :: id !< ID of field, file, axis to get attribute meta data
   1095     INTEGER, INTENT(in) :: num_attributes !< Number of attributes to write
   1096     TYPE(diag_atttype), DIMENSION(:), INTENT(in) :: attributes !< Array of attributes
   1097     CHARACTER(len=*), INTENT(in), OPTIONAL :: time_method !< To include in cell_methods attribute if present
   1098     CHARACTER(len=*), INTENT(out), OPTIONAL :: err_msg !< Return error message
   1099     CHARACTER(len=*), INTENT(IN), OPTIONAL :: varname !< The name of the variable
   1100 class(FmsNetcdfFile_t), intent(inout)     :: fileob
   1101 
   1102     INTEGER :: i, att_len
   1103     CHARACTER(len=1280) :: att_str
   1104 
   1105 ! Clear err_msg if present
   1106     IF ( PRESENT(err_msg) ) err_msg = ''
   1107 
   1108     DO i = 1, num_attributes
   1109        SELECT CASE (attributes(i)%type)
   1110        CASE (NF90_INT)
   1111           IF ( .NOT.allocated(attributes(i)%iatt) ) THEN
   1112              IF ( fms_error_handler('diag_output_mod::write_attribute_meta',&
   1113                   & 'Integer attribute type indicated, but array not allocated for attribute '&
   1114                   &//TRIM(attributes(i)%name)//'.', err_msg) ) THEN
   1115                 RETURN
   1116              END IF
   1117           END IF
   1118           if (present(varname))call register_variable_attribute(fileob, varname,TRIM(attributes(i)%name)  , attributes(i)%ia
   1118 tt)
   1119        CASE (NF90_FLOAT)
   1120           IF ( .NOT.allocated(attributes(i)%fatt) ) THEN
   1121              IF ( fms_error_handler('diag_output_mod::write_attribute_meta',&
   1122                   & 'Real attribute type indicated, but array not allocated for attribute '&
   1123                   &//TRIM(attributes(i)%name)//'.', err_msg) ) THEN
   1124                 RETURN
   1125              END IF
   1126           END IF
   1127           if (present(varname))call register_variable_attribute(fileob, varname,TRIM(attributes(i)%name)  , real(attributes(
   1127 i)%fatt,4) )
   1128        CASE (NF90_CHAR)
   1129           att_str = attributes(i)%catt
   1130           att_len = attributes(i)%len
   1131           IF ( TRIM(attributes(i)%name).EQ.'cell_methods' .AND. PRESENT(time_method) ) THEN
   1132 ! Append ",time: time_method" if time_method present
   1133              att_str = attributes(i)%catt(1:attributes(i)%len)//' time: '//time_method
   1134              att_len = LEN_TRIM(att_str)
   1135           END IF
   1136           if (present(varname))&
   1137                call register_variable_attribute(fileob, varname,TRIM(attributes(i)%name)  , att_str(1:att_len), str_len=att_
   1137 len)
   1138 
   1139        CASE default
   1140           IF ( fms_error_handler('diag_output_mod::write_attribute_meta', 'Invalid type for attribute '&
   1141                &//TRIM(attributes(i)%name)//'.', err_msg) ) THEN

Page 34          Source Listing                  WRITE_ATTRIBUTE_META_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

   1142              RETURN
   1143           END IF
   1144        END SELECT
   1145     END DO
   1146   END SUBROUTINE write_attribute_meta_fms2_io


ENTRY POINTS

  Name                                                        
                                                              
 diag_output_mod_mp_write_attribute_meta_fms2_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1111                                 scalar                    1111,1120                         
 ATTRIBUTES                 Dummy  1092     RECORD          1560  1     1        ARG,IN           1109,1111,1114,1118,1120,1123,1127
                                                                                                  ,1129,1130,1131,1133,1137,1141    
 ATT_LEN                    Local  1102     I(4)            4           scalar                    1130,1134,1137                    
 ATT_STR                    Local  1103     CHAR            1280        scalar                    1129,1133,1134,1137               
 ERR_MSG                    Dummy  1092     CHAR                        scalar   ARG,OUT          1106,1114,1123,1141               
 FILEOB                     Dummy  1092     RECORD          872         scalar   ARG,INOUT        1118,1127,1137                    
 FILE_UNIT                  Dummy  1092     I(4)            4           scalar   ARG,IN                                             
 FMS_ERROR_HANDLER          Func   1112     L(4)            4           scalar   PRIV             61,1112,1121,1140,1973,1983,2002  
 I                          Local  1102     I(4)            4           scalar                    1108,1109,1111,1114,1118,1120,1123
                                                                                                  ,1127,1129,1130,1131,1133,1137,114
                                                                                                  1                                 
 ID                         Dummy  1092     I(4)            4           scalar   ARG,IN                                             
 LEN_TRIM                   Func   1134                                 scalar                    1134                              
 NUM_ATTRIBUTES             Dummy  1092     I(4)            4           scalar   ARG,IN           1108                              
 PRESENT                    Func   1106                                 scalar                    1106,1118,1127,1131,1136          
 REAL                       Func   1127                                 scalar                    1127                              
 TIME_METHOD                Dummy  1092     CHAR                        scalar   ARG,IN           1131,1133                         
 TRIM                       Func   1114                                 scalar                    1114,1118,1123,1127,1131,1137,1141
 VARNAME                    Dummy  1092     CHAR                        scalar   ARG,IN           1118,1127,1136,1137               
 WRITE_ATTRIBUTE_META_FMS2_                                                                                                         
 IO                         Subr   1092                                                           633,1032                          


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 DIAG_ATTTYPE.LEN           I(4)            4     4              scalar                    1130,1133,1993,1996                

Page 35          Source Listing                  WRITE_ATTRIBUTE_META_FMS2_IO
2021-06-01 08:54                                 diag_output.F90

   1147 
   1148 !> @brief Writes axis data to file.
   1149 !! @details Writes axis data to file.  This subroutine is to be called once per file
   1150 !!     after all <TT>write_meta_data</TT> calls, and before the first
   1151 !!     <TT>diag_field_out</TT> call.
   1152   SUBROUTINE done_meta_data(file_unit)
   1153     INTEGER,  INTENT(in)  :: file_unit !< Output file unit number
   1154 
   1155     INTEGER               :: i
   1156 
   1157 !---- write data for all non-time axes ----
   1158     num_axis_in_file = 0
   1159   END SUBROUTINE done_meta_data


ENTRY POINTS

  Name                                          
                                                
 diag_output_mod_mp_done_meta_data_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DONE_META_DATA             Subr   1152                                                                                             
 FILE_UNIT                  Dummy  1152     I(4)            4           scalar   ARG,IN                                             
 I                          Local  1155     I(4)            4           scalar                                                      

Page 36          Source Listing                  DONE_META_DATA
2021-06-01 08:54                                 diag_output.F90

   1160 
   1161 !> @brief Outputs the diagnostic data to a file using fms2_io taking a field object as input
   1162   subroutine diag_field_write_field (field, buffer, static, fileob, file_num, fileobjU, fileobj, fileobjND, fnum_for_domain,
   1162  time_in)
   1163     TYPE(diag_fieldtype), INTENT(inout) :: Field
   1164     REAL , INTENT(inout) :: buffer(:,:,:,:)
   1165     logical, intent(in), optional :: static
   1166     class(FmsNetcdfFile_t), optional, intent(inout),target :: fileob
   1167     class(FmsNetcdfFile_t), pointer :: fptr => null()
   1168     integer, intent(in), optional  :: file_num
   1169     type(FmsNetcdfUnstructuredDomainFile_t),intent(inout), optional :: fileobjU(:)
   1170     type(FmsNetcdfDomainFile_t),intent(inout), optional:: fileobj(:)
   1171     type(FmsNetcdfFile_t),intent(inout), optional:: fileobjND(:)
   1172     character(len=2), intent(in), optional :: fnum_for_domain
   1173     INTEGER, OPTIONAL, INTENT(in) :: time_in
   1174     integer :: time
   1175     real(kind=4),allocatable :: local_buffer(:,:,:,:)
   1176      if (present(static)) then
   1177           if (static) time = 0
   1178      elseif (present(time_in)) then
   1179           time = time_in
   1180      else
   1181           time = 0
   1182      endif
   1183 
   1184      if (present(fileob)) then !> Write output to the fileob file
   1185           fptr => fileob
   1186           select type (fptr)
   1187           type is (FmsNetcdfFile_t)
   1188                call write_data (fptr,trim(mpp_get_field_name(field%field)),buffer)
   1189           type is (FmsNetcdfDomainFile_t)
   1190                call write_data (fptr,trim(mpp_get_field_name(field%field)),buffer)
   1191           type is (FmsNetcdfUnstructuredDomainFile_t)
   1192                call write_data (fptr,trim(mpp_get_field_name(field%field)),buffer)
   1193           class default
   1194                call error_mesg("diag_field_write","fileob passed in is not one of the FmsNetcdfFile_t types",fatal)
   1195           end select
   1196      elseif (present(file_num) .and. present(fileobjU) .and. present(fileobjND) .and. present(fileobj) .and. present(fnum_fo
   1196 r_domain)) then
   1197           allocate(local_buffer(size(buffer,1),size(buffer,2),size(buffer,3),size(buffer,4)))
   1198           local_buffer = real(buffer,4)
   1199 !> Figure out which file object to write output to
   1200 !          if (fnum_for_domain == "2d" .or. fnum_for_domain == "nd") then
   1201           if (fnum_for_domain == "2d" ) then
   1202                if (check_if_open(fileobj(file_num))) then
   1203                     if (time == 0) then
   1204                          call write_data (fileobj (file_num), trim(mpp_get_field_name(field%field)), local_buffer)
   1205                     else
   1206                          call write_data (fileobj (file_num), trim(mpp_get_field_name(field%field)), local_buffer, unlim_dim
   1206 _level=time)
   1207                     endif
   1208                endif
   1209           elseif (fnum_for_domain == "nd") then
   1210                if (check_if_open(fileobjND (file_num)) ) then
   1211                     if (time == 0) then
   1212                          call write_data (fileobjND (file_num), trim(mpp_get_field_name(field%field)), local_buffer)
   1213                     else

Page 37          Source Listing                  DIAG_FIELD_WRITE_FIELD
2021-06-01 08:54                                 diag_output.F90

   1214                          call write_data (fileobjND (file_num), trim(mpp_get_field_name(field%field)), local_buffer, unlim_d
   1214 im_level=time)
   1215                     endif
   1216                endif
   1217           elseif (fnum_for_domain == "ug") then
   1218                     if (time == 0) then
   1219                          call write_data (fileobjU(file_num), trim(mpp_get_field_name(field%field)), local_buffer)
   1220                     else
   1221                          call write_data (fileobjU(file_num), trim(mpp_get_field_name(field%field)), local_buffer, unlim_dim
   1221 _level=time)
   1222                     endif
   1223           else
   1224                call error_mesg("diag_field_write","No file object is associated with this file number",fatal)
   1225           endif
   1226      elseif (present(file_num) ) then
   1227           write (6,*) present(file_num) ,present(fileobjU) , present(fileobjND) , present(fileobj) , present(fnum_for_domain
   1227 )
   1228           call error_mesg("diag_field_write","When FILE_NUM is used to determine which file object to use,"&
   1229            //" You must also include fileobjU, fileobj, fileonjND, and fnum_for_domain",fatal)
   1230      else
   1231           call error_mesg("diag_field_write","You must include a fileob or a file_num.",fatal)
   1232      endif
   1233      if (allocated(local_buffer)) deallocate(local_buffer)
   1234   end subroutine diag_field_write_field


ENTRY POINTS

  Name                                                  
                                                        
 diag_output_mod_mp_diag_field_write_field_             

Page 38          Source Listing                  DIAG_FIELD_WRITE_FIELD
2021-06-01 08:54 Symbol Table                    diag_output.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1233                                 scalar                    1233                              
 BUFFER                     Dummy  1162     R(8)            8     4     1        ARG,INOUT        1188,1190,1192,1197,1198          
 COMPRESSED_WRITE_4D_WRAP   Subr   1188                                          PRIV             1188,1212,1214,1263,1271,1280     
 DIAG_FIELD_WRITE_FIELD     Subr   1162                                          PRIV                                               
 DOMAIN_WRITE_4D            Subr   1190                                          PRIV             1190,1204,1206,1265,1276          
 FIELD                      Dummy  1162     DIAG_FIELDTYPE  2424        scalar   ARG,INOUT        1188,1190,1192,1204,1206,1212,1214
                                                                                                  ,1219,1221                        
 FILEOB                     Dummy  1162     RECORD          872         scalar   ARG,TGT,INOUT    1184,1185                         
 FILEOBJ                    Dummy  1162     RECORD          2040  1     1        ARG,INOUT        1196,1202,1204,1206,1227          
 FILEOBJND                  Dummy  1162     RECORD          872   1     1        ARG,INOUT        1196,1210,1212,1214,1227          
 FILEOBJU                   Dummy  1162     RECORD          1672  1     1        ARG,INOUT        1196,1219,1221,1227               
 FILE_NUM                   Dummy  1162     I(4)            4           scalar   ARG,IN           1196,1202,1204,1206,1210,1212,1214
                                                                                                  ,1219,1221,1226,1227              
 FNUM_FOR_DOMAIN            Dummy  1162     CHAR            2           scalar   ARG,IN           1196,1201,1209,1217,1227          
 FPTR                       Local  1167     RECORD          872         scalar   PTR              1167,1185,1186                    
 FPTR                       Local  1186     RECORD          872         scalar   TGT              1188                              
 FPTR                       Local  1186     RECORD          1672        scalar   TGT              1192                              
 FPTR                       Local  1186     RECORD          2040        scalar   TGT              1190                              
 LOCAL_BUFFER               Local  1175     R(4)            4     4     1        ALC              1197,1198,1204,1206,1212,1214,1219
                                                                                                  ,1221,1233                        
 MPP_GET_FIELD_NAME         Func   1188     CHAR            128         scalar   PRIV             44,1188,1190,1192,1204,1206,1212,1
                                                                                                  214,1219,1221                     
 NULL                       Func   1167                                 scalar   PTR              1167                              
 PRESENT                    Func   1176                                 scalar                    1176,1178,1184,1196,1226,1227     
 REAL                       Func   1198                                 scalar                    1198                              
 SIZE                       Func   1197                                 scalar                    1197                              
 STATIC                     Dummy  1162     L(4)            4           scalar   ARG,IN           1176,1177                         
 TIME                       Local  1174     I(4)            4           scalar                    1177,1179,1181,1203,1206,1211,1214
                                                                                                  ,1218,1221                        
 TIME_IN                    Dummy  1162     I(4)            4           scalar   ARG,IN           1178,1179                         
 TRIM                       Func   1188                                 scalar                    1188,1190,1192,1204,1206,1212,1214
                                                                                                  ,1219,1221                        
 UNSTRUCTURED_DOMAIN_WRITE_                                                                                                         
 4D                         Subr   1192                                          PRIV             1192,1219,1221,1267,1283          

Page 39          Source Listing                  DIAG_FIELD_WRITE_FIELD
2021-06-01 08:54                                 diag_output.F90

   1235 !> \brief Writes diagnostic data out using fms2_io routine.
   1236   subroutine diag_field_write_varname (varname, buffer, static, fileob, file_num, fileobjU, fileobj, fileobjND, fnum_for_dom
   1236 ain, time_in)
   1237     CHARACTER(len=*), INTENT(in) :: varname
   1238     REAL , INTENT(inout) :: buffer(:,:,:,:)
   1239     logical, intent(in), optional :: static
   1240     class(FmsNetcdfFile_t), intent(inout), optional, target :: fileob
   1241     class(FmsNetcdfFile_t), pointer :: fptr => null()
   1242     integer, intent(in), optional  :: file_num
   1243     type(FmsNetcdfUnstructuredDomainFile_t),intent(inout), optional :: fileobjU(:)
   1244     type(FmsNetcdfDomainFile_t),intent(inout), optional:: fileobj(:)
   1245     type(FmsNetcdfFile_t),intent(inout), optional:: fileobjND(:)
   1246     character(len=2), intent(in), optional :: fnum_for_domain
   1247     INTEGER, OPTIONAL, INTENT(in) :: time_in
   1248     integer :: time
   1249     real(kind=4),allocatable :: local_buffer(:,:,:,:)
   1250 !> Set up the time.  Static field and default time is 0
   1251      if (present(static) .and. static) then
   1252           time = 0
   1253      elseif (present(time_in)) then
   1254           time = time_in
   1255      else
   1256           time = 0
   1257      endif
   1258 
   1259      if (present(fileob)) then !> Write output to the fileob file
   1260           fptr => fileob
   1261           select type (fptr)
   1262           type is (FmsNetcdfFile_t)
   1263                call write_data (fptr,trim(varname),buffer)
   1264           type is (FmsNetcdfDomainFile_t)
   1265                call write_data (fptr,trim(varname),buffer)
   1266           type is (FmsNetcdfUnstructuredDomainFile_t)
   1267                call write_data (fptr,trim(varname),buffer)
   1268           class default
   1269                call error_mesg("diag_field_write","fileob passed in is not one of the FmsNetcdfFile_t types",fatal)
   1270           end select
   1271           call write_data (fileob,trim(varname),buffer)
   1272      elseif (present(file_num) .and. present(fileobjU) .and. present(fileobj) .and. present(fileobjND) .and. present(fnum_fo
   1272 r_domain)) then
   1273 !> Figure out which file object to write output to
   1274           if (fnum_for_domain == "2d" ) then
   1275                if (check_if_open(fileobj(file_num))) then
   1276                     call write_data (fileobj (file_num), trim(varname), buffer, unlim_dim_level=time )
   1277                endif
   1278           elseif (fnum_for_domain == "nd") then
   1279                if (check_if_open(fileobjND (file_num)) ) then
   1280                     call write_data (fileobjND (file_num), trim(varname), buffer, unlim_dim_level=time)
   1281                endif
   1282           elseif (fnum_for_domain == "ug") then
   1283                call write_data (fileobjU(file_num), trim(varname), buffer, unlim_dim_level=time)
   1284           else
   1285                call error_mesg("diag_field_write","No file object is associated with this file number",fatal)
   1286           endif
   1287      elseif (present(file_num) ) then
   1288           call error_mesg("diag_field_write","When FILE_NUM is used to determine which file object to use,"&
   1289            //" You must also include fileobjU, fileobj, and fnum_for_domain",fatal)

Page 40          Source Listing                  DIAG_FIELD_WRITE_VARNAME
2021-06-01 08:54                                 diag_output.F90

   1290      else
   1291           call error_mesg("diag_field_write","You must include a fileob or a file_num.",fatal)
   1292      endif
   1293   end subroutine diag_field_write_varname


ENTRY POINTS

  Name                                                    
                                                          
 diag_output_mod_mp_diag_field_write_varname_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BUFFER                     Dummy  1236     R(8)            8     4     1        ARG,INOUT        1263,1265,1267,1271,1276,1280,1283
 DIAG_FIELD_WRITE_VARNAME   Subr   1236                                          PRIV                                               
 FILEOB                     Dummy  1236     RECORD          872         scalar   ARG,TGT,INOUT    1259,1260,1271                    
 FILEOBJ                    Dummy  1236     RECORD          2040  1     1        ARG,INOUT        1272,1275,1276                    
 FILEOBJND                  Dummy  1236     RECORD          872   1     1        ARG,INOUT        1272,1279,1280                    
 FILEOBJU                   Dummy  1236     RECORD          1672  1     1        ARG,INOUT        1272,1283                         
 FILE_NUM                   Dummy  1236     I(4)            4           scalar   ARG,IN           1272,1275,1276,1279,1280,1283,1287
 FNUM_FOR_DOMAIN            Dummy  1236     CHAR            2           scalar   ARG,IN           1272,1274,1278,1282               
 FPTR                       Local  1241     RECORD          872         scalar   PTR              1241,1260,1261                    
 FPTR                       Local  1261     RECORD          872         scalar   TGT              1263                              
 FPTR                       Local  1261     RECORD          1672        scalar   TGT              1267                              
 FPTR                       Local  1261     RECORD          2040        scalar   TGT              1265                              
 LOCAL_BUFFER               Local  1249     R(4)            4     4     1        ALC                                                
 NULL                       Func   1241                                 scalar   PTR              1241                              
 PRESENT                    Func   1251                                 scalar                    1251,1253,1259,1272,1287          
 STATIC                     Dummy  1236     L(4)            4           scalar   ARG,IN           1251                              
 TIME                       Local  1248     I(4)            4           scalar                    1252,1254,1256,1276,1280,1283     
 TIME_IN                    Dummy  1236     I(4)            4           scalar   ARG,IN           1253,1254                         
 TRIM                       Func   1263                                 scalar                    1263,1265,1267,1271,1276,1280,1283
 VARNAME                    Dummy  1236     CHAR                        scalar   ARG,IN           1263,1265,1267,1271,1276,1280,1283

Page 41          Source Listing                  DIAG_FIELD_WRITE_VARNAME
2021-06-01 08:54                                 diag_output.F90

   1294 !> \brief Writes the time data to the history file
   1295   subroutine diag_write_time (fileob,rtime_value,time_index,time_name)
   1296      class(FmsNetcdfFile_t), intent(inout),target  :: fileob      !< fms2_io file object
   1297      class(FmsNetcdfFile_t), pointer                        :: fptr => null()
   1298      real, intent(in)                                       :: rtime_value !< The value of time to be written
   1299      integer, intent(in)                                    :: time_index  !< The index of the time variable
   1300      character(len=*),intent(in),optional                   :: time_name   !< The name of the time variable
   1301      character(len=:),allocatable                           :: name_time   !< The name of the time variable
   1302 !> Get the name of the time variable
   1303      if (present(time_name)) then
   1304           allocate(character(len=len(time_name)) :: name_time)
   1305           name_time = time_name
   1306      else
   1307           allocate(character(len=4) :: name_time)
   1308           name_time = "time"
   1309      endif
   1310 !> Write the time data
   1311      call write_data (fileob, trim(name_time), rtime_value, unlim_dim_level=time_index)
   1312 !> Cleanup
   1313      if (allocated(name_time)) deallocate(name_time)
   1314      if (associated(fptr)) nullify(fptr)
   1315   end subroutine diag_write_time


ENTRY POINTS

  Name                                           
                                                 
 diag_output_mod_mp_diag_write_time_             

Page 42          Source Listing                  DIAG_WRITE_TIME
2021-06-01 08:54 Symbol Table                    diag_output.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1313                                 scalar                    1313                              
 ASSOCIATED                 Func   1314                                 scalar                    1314                              
 COMPRESSED_WRITE_0D_WRAP   Subr   1311                                          PRIV             1311                              
 DIAG_WRITE_TIME            Subr   1295                                                                                             
 FILEOB                     Dummy  1295     RECORD          872         scalar   ARG,TGT,INOUT    1311                              
 FPTR                       Local  1297     RECORD          872         scalar   PTR              1297,1314                         
 LEN                        Func   1304                                 scalar                    1304                              
 NAME_TIME                  Local  1301     CHAR                        scalar   ALC              1304,1305,1307,1308,1311,1313     
 NULL                       Func   1297                                 scalar   PTR              1297                              
 PRESENT                    Func   1303                                 scalar                    1303                              
 RTIME_VALUE                Dummy  1295     R(8)            8           scalar   ARG,IN           1311                              
 TIME_INDEX                 Dummy  1295     I(4)            4           scalar   ARG,IN           1311                              
 TIME_NAME                  Dummy  1295     CHAR                        scalar   ARG,IN           1303,1304,1305                    
 TRIM                       Func   1311                                 scalar                    1311                              

Page 43          Source Listing                  DIAG_WRITE_TIME
2021-06-01 08:54                                 diag_output.F90

   1316 
   1317 
   1318 ! <SUBROUTINE NAME="diag_output_init">
   1319 !   <OVERVIEW>
   1320 !     Registers the time axis and opens the output file.
   1321 !   </OVERVIEW>
   1322 !   <TEMPLATE>
   1323 !     SUBROUTINE diag_output_init (file_name, format, file_title, file_unit,
   1324 !      all_scalar_or_1d, domain)
   1325 !   </TEMPLATE>
   1326 !   <DESCRIPTION>
   1327 !     Registers the time axis, and opens the file for output.
   1328 !   </DESCRIPTION>
   1329 !   <IN NAME="file_name" TYPE="CHARACTER(len=*)">Output file name</IN>
   1330 !   <IN NAME="format" TYPE="INTEGER">File format (Currently only 'NETCDF' is valid)</IN>
   1331 !   <IN NAME="file_title" TYPE="CHARACTER(len=*)">Descriptive title for the file</IN>
   1332 !   <OUT NAME="file_unit" TYPE="INTEGER">
   1333 !     File unit number assigned to the output file.  Needed for subsuquent calls to
   1334 !     <TT>diag_output_mod</TT>
   1335 !   </OUT>
   1336 !   <IN NAME="all_scalar_or_1d" TYPE="LOGICAL" />
   1337 !   <IN NAME="domain" TYPE="TYPE(domain2d)" />
   1338 !   <IN NAME="domainU" TYPE="TYPE(domainUG)" />The unstructure domain </IN>
   1339   SUBROUTINE diag_output_init_use_mpp_io(file_name, FORMAT, file_title, file_unit,&
   1340        & all_scalar_or_1d, domain, domainU, attributes)
   1341     CHARACTER(len=*), INTENT(in)  :: file_name, file_title
   1342     INTEGER         , INTENT(in)  :: FORMAT
   1343     INTEGER         , INTENT(out) :: file_unit
   1344     LOGICAL         , INTENT(in)  :: all_scalar_or_1d
   1345     TYPE(domain2d)  , INTENT(in)  :: domain
   1346     TYPE(diag_atttype), INTENT(in), DIMENSION(:), OPTIONAL :: attributes
   1347     TYPE(domainUG), INTENT(in)    :: domainU
   1348 
   1349     INTEGER :: form, threading, fileset, i
   1350     TYPE(diag_global_att_type) :: gAtt
   1351 
   1352 !---- initialize mpp_io ----
   1353     IF ( .NOT.module_is_initialized ) THEN
   1354        CALL mpp_io_init ()
   1355        module_is_initialized = .TRUE.
   1356        CALL write_version_number("DIAG_OUTPUT_MOD", version)
   1357     END IF
   1358 
   1359 !---- set up output file ----
   1360     SELECT CASE (FORMAT)
   1361     CASE (NETCDF1)
   1362        form      = MPP_NETCDF
   1363        threading = MPP_MULTI
   1364        fileset   = MPP_MULTI
   1365     CASE default
   1366 ! <ERROR STATUS="FATAL">invalid format</ERROR>
   1367        CALL error_mesg('diag_output_init', 'invalid format', FATAL)
   1368     END SELECT
   1369 
   1370     IF(all_scalar_or_1d) THEN
   1371        threading = MPP_SINGLE
   1372        fileset   = MPP_SINGLE

Page 44          Source Listing                  DIAG_OUTPUT_INIT_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1373     END IF
   1374 
   1375 
   1376 !> Check to make sure that only domain2D or domainUG is used.  If both are not null, then FATAL
   1377     if (domain .NE. NULL_DOMAIN2D .AND. domainU .NE. NULL_DOMAINUG)&
   1378           & CALL error_mesg('diag_output_init', "Domain2D and DomainUG can not be used at the same time in "//&
   1379           & trim(file_name), FATAL)
   1380 
   1381 !---- open output file (return file_unit id) -----
   1382     IF ( domain .NE. NULL_DOMAIN2D ) THEN
   1383        CALL mpp_open(file_unit, file_name, action=MPP_OVERWR, form=form,&
   1384             & threading=threading, fileset=fileset, domain=domain)
   1385     ELSE IF (domainU .NE. NULL_DOMAINUG) THEN
   1386        CALL mpp_open(file_unit, file_name, action=MPP_OVERWR, form=form,&
   1387             & threading=threading, fileset=fileset, domain_UG=domainU)
   1388     ELSE
   1389        CALL mpp_open(file_unit, file_name, action=MPP_OVERWR, form=form,&
   1390             & threading=threading, fileset=fileset)
   1391     END IF
   1392 
   1393 !---- write global attributes ----
   1394     IF ( file_title(1:1) /= ' ' ) THEN
   1395        CALL mpp_write_meta(file_unit, 'title', cval=TRIM(file_title))
   1396     END IF
   1397 
   1398     IF ( PRESENT(attributes) ) THEN
   1399        DO i=1, SIZE(attributes)
   1400           SELECT CASE (attributes(i)%type)
   1401           CASE (NF90_INT)
   1402              CALL mpp_write_meta(file_unit, TRIM(attributes(i)%name), ival=attributes(i)%iatt)
   1403           CASE (NF90_FLOAT)
   1404              CALL mpp_write_meta(file_unit, TRIM(attributes(i)%name), rval=attributes(i)%fatt)
   1405           CASE (NF90_CHAR)
   1406              CALL mpp_write_meta(file_unit, TRIM(attributes(i)%name), cval=TRIM(attributes(i)%catt))
   1407           CASE default
   1408 ! <ERROR STATUS="FATAL">
   1409 !   Unknown attribute type for attribute <name> to module/input_field <module_name>/<field_name>.
   1410 !   Contact the developers.
   1411 ! </ERROR>
   1412              CALL error_mesg('diag_output_mod::diag_output_init', 'Unknown attribute type for global attribute "'&
   1413                   &//TRIM(attributes(i)%name)//'" in file "'//TRIM(file_name)//'". Contact the developers.', FATAL)
   1414           END SELECT
   1415        END DO
   1416     END IF
   1417 !---- write grid type (mosaic or regular)
   1418     CALL get_diag_global_att(gAtt)
   1419     CALL mpp_write_meta(file_unit, 'grid_type', cval=TRIM(gAtt%grid_type))
   1420     CALL mpp_write_meta(file_unit, 'grid_tile', cval=TRIM(gAtt%tile_name))
   1421 
   1422   END SUBROUTINE diag_output_init_use_mpp_io

Page 45          Source Listing                  DIAG_OUTPUT_INIT_USE_MPP_IO
2021-06-01 08:54 Entry Points                    diag_output.F90



ENTRY POINTS

  Name                                                       
                                                             
 diag_output_mod_mp_diag_output_init_use_mpp_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALL_SCALAR_OR_1D           Dummy  1340     L(4)            4           scalar   ARG,IN           1370                              
 ATTRIBUTES                 Dummy  1340     RECORD          1560  1     1        ARG,IN           1398,1399,1400,1402,1404,1406,1413
 DIAG_OUTPUT_INIT_USE_MPP_I                                                                                                         
 O                          Subr   1339                                          PRIV                                               
 DOMAIN                     Dummy  1340     DOMAIN2D        752         scalar   ARG,IN           1377,1382,1384                    
 DOMAINU                    Dummy  1340     DOMAINUG        544         scalar   ARG,IN           1377,1385,1387                    
 FILESET                    Local  1349     I(4)            4           scalar                    1364,1372,1384,1387,1390          
 FILE_NAME                  Dummy  1339     CHAR                        scalar   ARG,IN           1379,1383,1386,1389,1413          
 FILE_TITLE                 Dummy  1339     CHAR                        scalar   ARG,IN           1394,1395                         
 FILE_UNIT                  Dummy  1339     I(4)            4           scalar   ARG,OUT          1383,1386,1389,1395,1402,1404,1406
                                                                                                  ,1419,1420                        
 FORM                       Local  1349     I(4)            4           scalar                    1362,1383,1386,1389               
 FORMAT                     Dummy  1339     I(4)            4           scalar   ARG,IN           1360                              
 GATT                       Local  1350     DIAG_GLOBAL_ATT_TYPE                                                                    
                                                            256         scalar                    1418,1419,1420                    
 I                          Local  1349     I(4)            4           scalar                    1399,1400,1402,1404,1406,1413     
 MPP_OPEN                   Subr   1383                                          PRIV             47,1383,1386,1389                 
 MPP_OVERWR                 Param  1383     I(4)            4           scalar   PRIV             43,1383,1386,1389                 
 MPP_WRITE_META             Local  1395                                 scalar   PRIV             47,1395,1402,1404,1406,1419,1420,1
                                                                                                  507,1511,1549,1563,1568,1587,1588,
                                                                                                  1590,1628,1646,1657,1662,1852,1861
                                                                                                  ,1872,1879,1925,1933,1935,1940,197
                                                                                                  9,1989,1999                       
 MPP_WRITE_META_GLOBAL      Subr   1395                                          PRIV             1395,1402,1404,1406,1419,1420     
 PRESENT                    Func   1398                                 scalar                    1398                              
 SIZE                       Func   1399                                 scalar                    1399                              
 THREADING                  Local  1349     I(4)            4           scalar                    1363,1371,1384,1387,1390          
 TRIM                       Func   1379                                 scalar                    1379,1395,1402,1404,1406,1413,1419
                                                                                                  ,1420                             

Page 46          Source Listing                  DIAG_OUTPUT_INIT_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1423 ! </SUBROUTINE>
   1424 
   1425 ! <SUBROUTINE NAME="write_axis_meta_data">
   1426 !   <OVERVIEW>
   1427 !     Write the axes meta data to file.
   1428 !   </OVERVIEW>
   1429 !   <TEMPLATE>
   1430 !     SUBROUTINE write_axis_meta_data(file_unit, axes, time_ops)
   1431 !   </TEMPLATE>
   1432 !   <IN NAME="file_unit" TYPE="INTEGER">File unit number</IN>
   1433 !   <IN NAME="axes" TYPE="INTEGER, DIMENSION(:)">Array of axis ID's, including the time axis</IN>
   1434 !   <IN NAME="time_ops" TYPE="LOGICAL, OPTIONAL">
   1435 !     .TRUE. if this file contains any min, max, time_rms, or time_average
   1436 !   </IN>
   1437   SUBROUTINE write_axis_meta_data_use_mpp_io(file_unit, axes, time_ops)
   1438     INTEGER, INTENT(in) :: file_unit, axes(:)
   1439     LOGICAL, INTENT(in), OPTIONAL :: time_ops
   1440 
   1441     TYPE(domain1d)       :: Domain
   1442 
   1443     TYPE(domainUG)       :: domainU
   1444 
   1445     CHARACTER(len=mxch)  :: axis_name, axis_units
   1446     CHARACTER(len=mxchl) :: axis_long_name
   1447     CHARACTER(len=1)     :: axis_cart_name
   1448     INTEGER              :: axis_direction, axis_edges
   1449     REAL, ALLOCATABLE    :: axis_data(:)
   1450     INTEGER, ALLOCATABLE :: axis_extent(:), pelist(:)
   1451     INTEGER              :: num_attributes
   1452     TYPE(diag_atttype), DIMENSION(:), ALLOCATABLE :: attributes
   1453     INTEGER              :: calendar, id_axis, id_time_axis
   1454     INTEGER              :: i, j, index, num, length, edges_index
   1455     INTEGER              :: gbegin, gend, gsize, ndivs
   1456     LOGICAL              :: time_ops1
   1457     CHARACTER(len=2048)  :: err_msg
   1458     type(domainUG),pointer                     :: io_domain
   1459     integer(I4_KIND)                           :: io_domain_npes
   1460     integer(I4_KIND),dimension(:),allocatable  :: io_pelist
   1461     integer(I4_KIND),dimension(:),allocatable  :: unstruct_axis_sizes
   1462     real,dimension(:),allocatable              :: unstruct_axis_data
   1463 
   1464 ! Make sure err_msg is initialized
   1465     err_msg = ''
   1466 
   1467     IF ( PRESENT(time_ops) ) THEN
   1468        time_ops1 = time_ops
   1469     ELSE
   1470        time_ops1 = .FALSE.
   1471     END IF
   1472 
   1473 !---- save the current file_unit ----
   1474     IF ( num_axis_in_file == 0 ) current_file_unit = file_unit
   1475 
   1476 !---- dummy checks ----
   1477     num = SIZE(axes(:))
   1478 ! <ERROR STATUS="FATAL">number of axes < 1 </ERROR>
   1479     IF ( num < 1 ) CALL error_mesg('write_axis_meta_data', 'number of axes < 1.', FATAL)

Page 47          Source Listing                  WRITE_AXIS_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1480 
   1481 ! <ERROR STATUS="FATAL">writing meta data out-of-order to different files.</ERROR>
   1482     IF ( file_unit /= current_file_unit ) CALL error_mesg('write_axis_meta_data',&
   1483          & 'writing meta data out-of-order to different files.', FATAL)
   1484 
   1485 !---- check all axes ----
   1486 !---- write axis meta data for new axes ----
   1487     DO i = 1, num
   1488        id_axis = axes(i)
   1489        index = get_axis_index ( id_axis )
   1490 
   1491 !---- skip axes already written -----
   1492        IF ( index > 0 ) CYCLE
   1493 
   1494 !---- create new axistype (then point to) -----
   1495        num_axis_in_file = num_axis_in_file + 1
   1496        axis_in_file(num_axis_in_file) = id_axis
   1497        edge_axis_flag(num_axis_in_file) = .FALSE.
   1498        length = get_axis_global_length(id_axis)
   1499        ALLOCATE(axis_data(length))
   1500 
   1501        CALL get_diag_axis(id_axis, axis_name, axis_units, axis_long_name,&
   1502             & axis_cart_name, axis_direction, axis_edges, Domain, DomainU, axis_data,&
   1503             & num_attributes, attributes)
   1504 
   1505        IF ( Domain .NE. null_domain1d ) THEN
   1506           IF ( length > 0 ) THEN
   1507              CALL mpp_write_meta(file_unit, Axis_types(num_axis_in_file),&
   1508                   & axis_name, axis_units, axis_long_name, axis_cart_name,&
   1509                   & axis_direction, Domain, axis_data )
   1510           ELSE
   1511              CALL mpp_write_meta(file_unit, Axis_types(num_axis_in_file), axis_name,&
   1512                   & axis_units, axis_long_name, axis_cart_name, axis_direction, Domain)
   1513           END IF
   1514        ELSE
   1515           IF ( length > 0 ) THEN
   1516 
   1517 !For an unstructured dimension, only the root rank of the io_domain
   1518 !pelist will perform the wirte, so a gather of the unstructured
   1519 !axis size and axis data is required.
   1520              if (uppercase(trim(axis_cart_name)) .eq. "U") then
   1521                  if (DomainU .eq. null_domainUG) then
   1522                      call error_mesg("diag_output_mod::write_axis_meta_data", &
   1523                                      "A non-nul domainUG is required to" &
   1524                                      //" write unstructured axis metadata.", &
   1525                                      FATAL)
   1526                  endif
   1527                  io_domain => null()
   1528                  io_domain => mpp_get_UG_io_domain(DomainU)
   1529                  io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   1530                  allocate(io_pelist(io_domain_npes))
   1531                  call mpp_get_UG_domain_pelist(io_domain, &
   1532                                                io_pelist)
   1533                  allocate(unstruct_axis_sizes(io_domain_npes))
   1534                  unstruct_axis_sizes = 0
   1535                  call mpp_gather((/size(axis_data)/), &
   1536                                  unstruct_axis_sizes, &

Page 48          Source Listing                  WRITE_AXIS_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1537                                  io_pelist)
   1538                  if (mpp_pe() .eq. io_pelist(1)) then
   1539                      allocate(unstruct_axis_data(sum(unstruct_axis_sizes)))
   1540                  else
   1541                      allocate(unstruct_axis_data(1))
   1542                  endif
   1543                  unstruct_axis_data = 0.0
   1544                  call mpp_gather(axis_data, &
   1545                                  size(axis_data), &
   1546                                  unstruct_axis_data, &
   1547                                  unstruct_axis_sizes, &
   1548                                  io_pelist)
   1549                  call mpp_write_meta(file_unit, &
   1550                                      Axis_types(num_axis_in_file), &
   1551                                      axis_name, &
   1552                                      axis_units, &
   1553                                      axis_long_name, &
   1554                                      axis_cart_name, &
   1555                                      axis_direction, &
   1556                                      data=unstruct_axis_data)
   1557                  deallocate(io_pelist)
   1558                  deallocate(unstruct_axis_sizes)
   1559                  deallocate(unstruct_axis_data)
   1560                  io_domain => null()
   1561 
   1562              else
   1563                  CALL mpp_write_meta(file_unit, Axis_types(num_axis_in_file), axis_name,&
   1564                   & axis_units, axis_long_name, axis_cart_name, axis_direction, DATA=axis_data)
   1565              endif
   1566 
   1567           ELSE
   1568              CALL mpp_write_meta(file_unit, Axis_types(num_axis_in_file), axis_name,&
   1569                   & axis_units, axis_long_name, axis_cart_name, axis_direction)
   1570           END IF
   1571        END IF
   1572 
   1573 ! Write axis attributes
   1574        id_axis = mpp_get_id(Axis_types(num_axis_in_file))
   1575        CALL write_attribute_meta(file_unit, id_axis, num_attributes, attributes, err_msg)
   1576        IF ( LEN_TRIM(err_msg) .GT. 0 ) THEN
   1577           CALL error_mesg('diag_output_mod::write_axis_meta_data', TRIM(err_msg), FATAL)
   1578        END IF
   1579 
   1580 !---- write additional attribute (calendar_type) for time axis ----
   1581 !---- NOTE: calendar attribute is compliant with CF convention
   1582 !---- http://www.cgd.ucar.edu/cms/eaton/netcdf/CF-current.htm#cal
   1583        IF ( axis_cart_name == 'T' ) THEN
   1584           time_axis_flag(num_axis_in_file) = .TRUE.
   1585           id_time_axis = mpp_get_id(Axis_types(num_axis_in_file))
   1586           calendar = get_calendar_type()
   1587           CALL mpp_write_meta(file_unit, id_time_axis, 'calendar_type', cval=TRIM(valid_calendar_types(calendar)))
   1588           CALL mpp_write_meta(file_unit, id_time_axis, 'calendar', cval=TRIM(valid_calendar_types(calendar)))
   1589           IF ( time_ops1 ) THEN
   1590              CALL mpp_write_meta( file_unit, id_time_axis, 'bounds', cval = TRIM(axis_name)//'_bnds')
   1591           END IF
   1592        ELSE
   1593           time_axis_flag(num_axis_in_file) = .FALSE.

Page 49          Source Listing                  WRITE_AXIS_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1594        END IF
   1595 
   1596        DEALLOCATE(axis_data)
   1597 
   1598 ! Deallocate attributes
   1599        IF ( ALLOCATED(attributes) ) THEN
   1600           DO j=1, num_attributes
   1601              IF ( allocated(attributes(j)%fatt ) ) THEN
   1602                 DEALLOCATE(attributes(j)%fatt)
   1603              END IF
   1604              IF ( allocated(attributes(j)%iatt ) ) THEN
   1605                 DEALLOCATE(attributes(j)%iatt)
   1606              END IF
   1607           END DO
   1608           DEALLOCATE(attributes)
   1609        END IF
   1610 
   1611 !------------- write axis containing edge information ---------------
   1612 
   1613 !  --- this axis has no edges -----
   1614        IF ( axis_edges <= 0 ) CYCLE
   1615 
   1616 !  --- was this axis edge previously defined? ---
   1617        id_axis = axis_edges
   1618        edges_index = get_axis_index(id_axis)
   1619        IF ( edges_index > 0 ) CYCLE
   1620 
   1621 !  ---- get data for axis edges ----
   1622        length = get_axis_global_length ( id_axis )
   1623        ALLOCATE(axis_data(length))
   1624        CALL get_diag_axis(id_axis, axis_name, axis_units, axis_long_name, axis_cart_name,&
   1625             & axis_direction, axis_edges, Domain, DomainU, axis_data, num_attributes, attributes)
   1626 
   1627 !  ---- write edges attribute to original axis ----
   1628        CALL mpp_write_meta(file_unit, mpp_get_id(Axis_types(num_axis_in_file)),&
   1629             & 'edges', cval=axis_name )
   1630 
   1631 !  ---- add edges index to axis list ----
   1632 !  ---- assume this is not a time axis ----
   1633        num_axis_in_file = num_axis_in_file + 1
   1634        axis_in_file(num_axis_in_file) = id_axis
   1635        edge_axis_flag(num_axis_in_file) = .TRUE.
   1636        time_axis_flag (num_axis_in_file) = .FALSE.
   1637 
   1638 !  ---- write edges axis to file ----
   1639        IF ( Domain .NE. null_domain1d ) THEN
   1640 ! assume domain decomposition is irregular and loop through all prev and next
   1641 ! domain pointers extracting domain extents.  Assume all pes are used in
   1642 ! decomposition
   1643           CALL mpp_get_global_domain(Domain, begin=gbegin, END=gend, size=gsize)
   1644           CALL mpp_get_layout(Domain, ndivs)
   1645           IF ( ndivs .EQ. 1 ) THEN
   1646              CALL mpp_write_meta(file_unit, Axis_types(num_axis_in_file), axis_name,&
   1647                   & axis_units, axis_long_name, axis_cart_name, axis_direction, DATA=axis_data )
   1648           ELSE
   1649              IF ( ALLOCATED(axis_extent) ) DEALLOCATE(axis_extent)
   1650              ALLOCATE(axis_extent(0:ndivs-1))

Page 50          Source Listing                  WRITE_AXIS_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1651              CALL mpp_get_compute_domains(Domain,size=axis_extent(0:ndivs-1))
   1652              gend=gend+1
   1653              axis_extent(ndivs-1)= axis_extent(ndivs-1)+1
   1654              IF ( ALLOCATED(pelist) ) DEALLOCATE(pelist)
   1655              ALLOCATE(pelist(0:ndivs-1))
   1656              CALL mpp_get_pelist(Domain,pelist)
   1657              CALL mpp_write_meta(file_unit, Axis_types(num_axis_in_file),&
   1658                   & axis_name, axis_units, axis_long_name, axis_cart_name,&
   1659                   & axis_direction, Domain,  DATA=axis_data)
   1660           END IF
   1661        ELSE
   1662           CALL mpp_write_meta(file_unit, Axis_types(num_axis_in_file), axis_name, axis_units,&
   1663                & axis_long_name, axis_cart_name, axis_direction, DATA=axis_data)
   1664        END IF
   1665 
   1666 ! Write edge axis attributes
   1667        id_axis = mpp_get_id(Axis_types(num_axis_in_file))
   1668        CALL write_attribute_meta(file_unit, id_axis, num_attributes, attributes, err_msg)
   1669        IF ( LEN_TRIM(err_msg) .GT. 0 ) THEN
   1670           CALL error_mesg('diag_output_mod::write_axis_meta_data', TRIM(err_msg), FATAL)
   1671        END IF
   1672 
   1673        DEALLOCATE (axis_data)
   1674 ! Deallocate attributes
   1675        IF ( ALLOCATED(attributes) ) THEN
   1676           DO j=1, num_attributes
   1677              IF ( allocated(attributes(j)%fatt ) ) THEN
   1678                 DEALLOCATE(attributes(j)%fatt)
   1679              END IF
   1680              IF ( allocated(attributes(j)%iatt ) ) THEN
   1681                 DEALLOCATE(attributes(j)%iatt)
   1682              END IF
   1683           END DO
   1684           DEALLOCATE(attributes)
   1685        END IF
   1686     END DO
   1687   END SUBROUTINE write_axis_meta_data_use_mpp_io

Page 51          Source Listing                  WRITE_AXIS_META_DATA_USE_MPP_IO
2021-06-01 08:54 Entry Points                    diag_output.F90



ENTRY POINTS

  Name                                                           
                                                                 
 diag_output_mod_mp_write_axis_meta_data_use_mpp_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1599                                 scalar                    1599,1601,1604,1649,1654,1675,1677
                                                                                                  ,1680                             
 ATTRIBUTES                 Local  1452     RECORD          1560  1     1        ALC              1503,1575,1599,1601,1602,1604,1605
                                                                                                  ,1608,1625,1668,1675,1677,1678,168
                                                                                                  0,1681,1684                       
 AXES                       Dummy  1437     I(4)            4     1     1        ARG,IN           1477,1488                         
 AXIS_CART_NAME             Local  1447     CHAR            1           scalar                    1502,1508,1512,1520,1554,1564,1569
                                                                                                  ,1583,1624,1647,1658,1663         
 AXIS_DATA                  Local  1449     R(8)            8     1     1        ALC              1499,1502,1509,1535,1544,1545,1564
                                                                                                  ,1596,1623,1625,1647,1659,1663,167
                                                                                                  3                                 
 AXIS_DIRECTION             Local  1448     I(4)            4           scalar                    1502,1509,1512,1555,1564,1569,1625
                                                                                                  ,1647,1659,1663                   
 AXIS_EDGES                 Local  1448     I(4)            4           scalar                    1502,1614,1617,1625               
 AXIS_EXTENT                Local  1450     I(4)            4     1     1        ALC              1649,1650,1651,1653               
 AXIS_LONG_NAME             Local  1446     CHAR            256         scalar                    1501,1508,1512,1553,1564,1569,1624
                                                                                                  ,1647,1658,1663                   
 AXIS_NAME                  Local  1445     CHAR            128         scalar                    1501,1508,1511,1551,1563,1568,1590
                                                                                                  ,1624,1629,1646,1658,1662         
 AXIS_UNITS                 Local  1445     CHAR            128         scalar                    1501,1508,1512,1552,1564,1569,1624
                                                                                                  ,1647,1658,1662                   
 CALENDAR                   Local  1453     I(4)            4           scalar                    1586,1587,1588                    
 DOMAIN                     Local  1441     DOMAIN1D        176         scalar                    1502,1505,1509,1512,1625,1639,1643
                                                                                                  ,1644,1651,1656,1659              
 DOMAINU                    Local  1443     DOMAINUG        544         scalar                    1502,1521,1528,1625               
 EDGES_INDEX                Local  1454     I(4)            4           scalar                    1618,1619                         
 ERR_MSG                    Local  1457     CHAR            2048        scalar                    1465,1575,1576,1577,1668,1669,1670
 FILE_UNIT                  Dummy  1437     I(4)            4           scalar   ARG,IN           1474,1482,1507,1511,1549,1563,1568
                                                                                                  ,1575,1587,1588,1590,1628,1646,165
                                                                                                  7,1662,1668                       
 GBEGIN                     Local  1455     I(4)            4           scalar                    1643                              
 GEND                       Local  1455     I(4)            4           scalar                    1643,1652                         
 GSIZE                      Local  1455     I(4)            4           scalar                    1643                              
 I                          Local  1454     I(4)            4           scalar                    1487,1488                         
 ID_AXIS                    Local  1453     I(4)            4           scalar                    1488,1489,1496,1498,1501,1574,1575
                                                                                                  ,1617,1618,1622,1624,1634,1667,166
                                                                                                  8                                 
 ID_TIME_AXIS               Local  1453     I(4)            4           scalar                    1585,1587,1588,1590               
 INDEX                      Local  1454     I(4)            4           scalar                    1489,1492                         
 IO_DOMAIN                  Local  1458     DOMAINUG        544         scalar   PTR              1527,1528,1529,1531,1560          
 IO_DOMAIN_NPES             Local  1459     I(4)            4           scalar                    1529,1530,1533                    
 IO_PELIST                  Local  1460     I(4)            4     1     1        ALC              1530,1532,1537,1538,1548,1557     
 J                          Local  1454     I(4)            4           scalar                    1600,1601,1602,1604,1605,1676,1677
                                                                                                  ,1678,1680,1681                   

Page 52          Source Listing                  WRITE_AXIS_META_DATA_USE_MPP_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LENGTH                     Local  1454     I(4)            4           scalar                    1498,1499,1506,1515,1622,1623     
 LEN_TRIM                   Func   1576                                 scalar                    1576,1669                         
 MPP_WRITE_META_AXIS_R1D    Subr   1507                                          PRIV             1507,1511,1549,1563,1568,1646,1657
                                                                                                  ,1662                             
 MPP_WRITE_META_VAR         Subr   1587                                          PRIV             1587,1588,1590,1628,1925,1933,1935
                                                                                                  ,1940,1979,1989,1999              
 NDIVS                      Local  1455     I(4)            4           scalar                    1644,1645,1650,1651,1653,1655     
 NULL                       Func   1527                                 scalar   PTR              1527,1560                         
 NUM                        Local  1454     I(4)            4           scalar                    1477,1479,1487                    
 NUM_ATTRIBUTES             Local  1451     I(4)            4           scalar                    1503,1575,1600,1625,1668,1676     
 PELIST                     Local  1450     I(4)            4     1     1        ALC              1654,1655,1656                    
 PRESENT                    Func   1467                                 scalar                    1467                              
 SIZE                       Func   1477                                 scalar                    1477,1535,1545                    
 SUM                        Func   1539                                 scalar                    1539                              
 TIME_OPS                   Dummy  1437     L(4)            4           scalar   ARG,IN           1467,1468                         
 TIME_OPS1                  Local  1456     L(4)            4           scalar                    1468,1470,1589                    
 TRIM                       Func   1520                                 scalar                    1520,1577,1587,1588,1590,1670     
 UNSTRUCT_AXIS_DATA         Local  1462     R(8)            8     1     1        ALC              1539,1541,1543,1546,1556,1559     
 UNSTRUCT_AXIS_SIZES        Local  1461     I(4)            4     1     1        ALC              1533,1534,1536,1539,1547,1558     
 WRITE_AXIS_META_DATA_USE_M                                                                                                         
 PP_IO                      Subr   1437                                          PRIV                                               

Page 53          Source Listing                  WRITE_AXIS_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1688 ! </SUBROUTINE>
   1689 
   1690 ! <FUNCTION NAME="write_field_meta_data">
   1691 !   <OVERVIEW>
   1692 !     Write the field meta data to file.
   1693 !   </OVERVIEW>
   1694 !   <TEMPLATE>
   1695 !     TYPE(diag_fieldtype) FUNCTION write_field_meta_data(file_unit, name, axes, units,
   1696 !     long_name, rnage, pack, mval, avg_name, time_method, standard_name, interp_method)
   1697 !   </TEMPLATE>
   1698 !   <DESCRIPTION>
   1699 !     The meta data for the field is written to the file indicated by file_unit
   1700 !   </DESCRIPTION>
   1701 !   <IN NAME="file_unit" TYPE="INTEGER">Output file unit number</IN>
   1702 !   <IN NAME="name" TYPE="CHARACTER(len=*)">Field name</IN>
   1703 !   <IN NAME="axes" TYPE="INTEGER, DIMENSION(:)">Array of axis IDs</IN>
   1704 !   <IN NAME="units" TYPE="CHARACTER(len=*)">Field units</IN>
   1705 !   <IN NAME="long_name" TYPE="CHARACTER(len=*)">Field's long name</IN>
   1706 !   <IN NAME="range" TYPE="REAL, DIMENSION(2), OPTIONAL">
   1707 !     Valid range (min, max).  If min > max, the range will be ignored
   1708 !   </IN>
   1709 !   <IN NAME="pack" TYPE="INTEGER, OPTIONAL" DEFAULT="2">
   1710 !     Packing flag.  Only valid when range specified.  Valid values:
   1711 !     <UL>
   1712 !       <LI> 1 = 64bit </LI>
   1713 !       <LI> 2 = 32bit </LI>
   1714 !       <LI> 4 = 16bit </LI>
   1715 !       <LI> 8 =  8bit </LI>
   1716 !     </UL>
   1717 !   </IN>
   1718 !   <IN NAME="mval" TYPE="REAL, OPTIONAL">Missing value, must be within valid range</IN>
   1719 !   <IN NAME="avg_name" TYPE="CHARACTER(len=*), OPTIONAL">
   1720 !     Name of variable containing time averaging info
   1721 !   </IN>
   1722 !   <IN NAME="time_method" TYPE="CHARACTER(len=*), OPTIONAL">
   1723 !     Name of transformation applied to the time-varying data, i.e. "avg", "min", "max"
   1724 !   </IN>
   1725 !   <IN NAME="standard_name" TYPE="CHARACTER(len=*), OPTIONAL">Standard name of field</IN>
   1726 !   <IN NAME="interp_method" TYPE="CHARACTER(len=*), OPTIONAL" />
   1727   FUNCTION write_field_meta_data_use_mpp_io ( file_unit, name, axes, units, long_name, range, pack, mval,&
   1728        & avg_name, time_method, standard_name, interp_method, attributes, num_attributes,     &
   1729        & use_UGdomain) result ( Field )
   1730     INTEGER, INTENT(in) :: file_unit, axes(:)
   1731     CHARACTER(len=*), INTENT(in) :: name, units, long_name
   1732     REAL, OPTIONAL, INTENT(in) :: RANGE(2), mval
   1733     INTEGER, OPTIONAL, INTENT(in) :: pack
   1734     CHARACTER(len=*), OPTIONAL, INTENT(in) :: avg_name, time_method, standard_name
   1735     CHARACTER(len=*), OPTIONAL, INTENT(in) :: interp_method
   1736     TYPE(diag_atttype), DIMENSION(:), ALLOCATABLE, OPTIONAL, INTENT(in) :: attributes
   1737     INTEGER, OPTIONAL, INTENT(in) :: num_attributes
   1738     LOGICAL, OPTIONAL, INTENT(in) :: use_UGdomain
   1739 
   1740     CHARACTER(len=256) :: standard_name2
   1741     CHARACTER(len=1280) :: att_str
   1742     TYPE(diag_fieldtype) :: Field
   1743     LOGICAL :: coord_present
   1744     CHARACTER(len=40) :: aux_axes(SIZE(axes))

Page 54          Source Listing                  WRITE_FIELD_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1745     CHARACTER(len=160) :: coord_att
   1746     CHARACTER(len=1024) :: err_msg
   1747 
   1748     REAL :: scale, add
   1749     INTEGER :: i, indexx, num, ipack, np, att_len
   1750     LOGICAL :: use_range
   1751     INTEGER :: axis_indices(SIZE(axes))
   1752     logical :: use_UGdomain_local
   1753 
   1754 !---- Initialize err_msg to bank ----
   1755     err_msg = ''
   1756 
   1757 !---- dummy checks ----
   1758     coord_present = .FALSE.
   1759     IF( PRESENT(standard_name) ) THEN
   1760        standard_name2 = standard_name
   1761     ELSE
   1762        standard_name2 = 'none'
   1763     END IF
   1764 
   1765     use_UGdomain_local = .false.
   1766     if(present(use_UGdomain)) use_UGdomain_local = use_UGdomain
   1767 
   1768     num = SIZE(axes(:))
   1769 ! <ERROR STATUS="FATAL">number of axes < 1</ERROR>
   1770     IF ( num < 1 ) CALL error_mesg ( 'write_meta_data', 'number of axes < 1', FATAL)
   1771 ! <ERROR STATUS="FATAL">writing meta data out-of-order to different files</ERROR>
   1772     IF ( file_unit /= current_file_unit ) CALL error_mesg ( 'write_meta_data',  &
   1773          & 'writing meta data out-of-order to different files', FATAL)
   1774 
   1775 
   1776 !---- check all axes for this field ----
   1777 !---- set up indexing to axistypes ----
   1778     DO i = 1, num
   1779        indexx = get_axis_index(axes(i))
   1780 !---- point to existing axistype -----
   1781        IF ( indexx > 0 ) THEN
   1782           axis_indices(i) = indexx
   1783        ELSE
   1784 ! <ERROR STATUS="FATAL">axis data not written for field</ERROR>
   1785           CALL error_mesg ('write_field_meta_data',&
   1786                & 'axis data not written for field '//TRIM(name), FATAL)
   1787        END IF
   1788     END DO
   1789 
   1790 !  Create coordinate attribute
   1791     IF ( num >= 2 .OR. (num==1 .and. use_UGdomain_local) ) THEN
   1792        coord_att = ' '
   1793        DO i = 1, num
   1794           aux_axes(i) = get_axis_aux(axes(i))
   1795           IF( TRIM(aux_axes(i)) /= 'none' ) THEN
   1796              IF(LEN_TRIM(coord_att) == 0) THEN
   1797                 coord_att = TRIM(aux_axes(i))
   1798              ELSE
   1799                 coord_att = TRIM(coord_att)// ' '//TRIM(aux_axes(i))
   1800              ENDIF
   1801              coord_present = .TRUE.

Page 55          Source Listing                  WRITE_FIELD_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1802           END IF
   1803        END DO
   1804     END IF
   1805 
   1806 !--------------------- write field meta data ---------------------------
   1807 
   1808 !---- select packing? ----
   1809 !(packing option only valid with range option)
   1810     IF ( PRESENT(pack) ) THEN
   1811        ipack = pack
   1812     ELSE
   1813        ipack = 2
   1814     END IF
   1815 
   1816 !---- check range ----
   1817     use_range = .FALSE.
   1818     add = 0.0
   1819     scale = 1.0
   1820     IF ( PRESENT(range) ) THEN
   1821        IF ( RANGE(2) > RANGE(1) ) THEN
   1822           use_range = .TRUE.
   1823 !---- set packing parameters ----
   1824           IF ( ipack > 2 ) THEN
   1825              np = ipack/4
   1826              add = 0.5*(RANGE(1)+RANGE(2))
   1827              scale = (RANGE(2)-RANGE(1)) / real(max_range(2,np)-max_range(1,np))
   1828           END IF
   1829        END IF
   1830     END IF
   1831 
   1832 !---- select packing? ----
   1833     IF ( PRESENT(mval) ) THEN
   1834        Field%miss = mval
   1835        Field%miss_present = .TRUE.
   1836        IF ( ipack > 2 ) THEN
   1837           np = ipack/4
   1838           Field%miss_pack = REAL(missval(np))*scale+add
   1839           Field%miss_pack_present = .TRUE.
   1840        ELSE
   1841           Field%miss_pack = mval
   1842           Field%miss_pack_present = .FALSE.
   1843        END IF
   1844     ELSE
   1845        Field%miss_present = .FALSE.
   1846        Field%miss_pack_present = .FALSE.
   1847     END IF
   1848 
   1849 !------ write meta data and return fieldtype -------
   1850     IF ( use_range ) THEN
   1851        IF ( Field%miss_present ) THEN
   1852           CALL mpp_write_meta(file_unit, Field%Field,&
   1853                & Axis_types(axis_indices(1:num)),&
   1854                & name, units, long_name,&
   1855                & RANGE(1), RANGE(2),&
   1856                & missing=Field%miss_pack,&
   1857                & fill=Field%miss_pack,&
   1858                & scale=scale, add=add, pack=ipack,&

Page 56          Source Listing                  WRITE_FIELD_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1859                & time_method=time_method)
   1860        ELSE
   1861           CALL mpp_write_meta(file_unit, Field%Field,&
   1862                & Axis_types(axis_indices(1:num)),&
   1863                & name, units,  long_name,&
   1864                & RANGE(1), RANGE(2),&
   1865                & missing=CMOR_MISSING_VALUE,&
   1866                & fill=CMOR_MISSING_VALUE,&
   1867                & scale=scale, add=add, pack=ipack,&
   1868                & time_method=time_method)
   1869        END IF
   1870     ELSE
   1871        IF ( Field%miss_present ) THEN
   1872           CALL mpp_write_meta(file_unit, Field%Field,&
   1873                & Axis_types(axis_indices(1:num)),&
   1874                & name, units, long_name,&
   1875                & missing=Field%miss_pack,&
   1876                & fill=Field%miss_pack,&
   1877                & pack=ipack, time_method=time_method)
   1878        ELSE
   1879           CALL mpp_write_meta(file_unit, Field%Field,&
   1880                & Axis_types(axis_indices(1:num)),&
   1881                & name, units, long_name,&
   1882                & missing=CMOR_MISSING_VALUE,&
   1883                & fill=CMOR_MISSING_VALUE,&
   1884                & pack=ipack, time_method=time_method)
   1885        END IF
   1886     END IF
   1887 
   1888 !---- write user defined attributes -----
   1889     IF ( PRESENT(num_attributes) ) THEN
   1890        IF ( PRESENT(attributes) ) THEN
   1891           IF ( num_attributes .GT. 0 .AND. allocated(attributes) ) THEN
   1892              CALL write_attribute_meta(file_unit, mpp_get_id(Field%Field), num_attributes, attributes, time_method, err_msg)
   1893              IF ( LEN_TRIM(err_msg) .GT. 0 ) THEN
   1894                 CALL error_mesg('diag_output_mod::write_field_meta_data',&
   1895                      & TRIM(err_msg)//" Contact the developers.", FATAL)
   1896              END IF
   1897           ELSE
   1898 ! Catch some bad cases
   1899              IF ( num_attributes .GT. 0 .AND. .NOT.allocated(attributes) ) THEN
   1900                 CALL error_mesg('diag_output_mod::write_field_meta_data',&
   1901                      & 'num_attributes > 0 but attributes is not allocated for attribute '&
   1902                      &//TRIM(attributes(i)%name)//' for field '//TRIM(name)//'. Contact the developers.', FATAL)
   1903              ELSE IF ( num_attributes .EQ. 0 .AND. allocated(attributes) ) THEN
   1904                 CALL error_mesg('diag_output_mod::write_field_meta_data',&
   1905                      & 'num_attributes == 0 but attributes is allocated for attribute '&
   1906                      &//TRIM(attributes(i)%name)//' for field '//TRIM(name)//'. Contact the developers.', FATAL)
   1907              END IF
   1908           END IF
   1909        ELSE
   1910 ! More edge error cases
   1911           CALL error_mesg('diag_output_mod::write_field_meta_data',&
   1912                & 'num_attributes present but attributes missing for attribute '&
   1913                &//TRIM(attributes(i)%name)//' for field '//TRIM(name)//'. Contact the developers.', FATAL)
   1914        END IF
   1915     ELSE IF ( PRESENT(attributes) ) THEN

Page 57          Source Listing                  WRITE_FIELD_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1916        CALL error_mesg('diag_output_mod::write_field_meta_data',&
   1917             & 'attributes present but num_attributes missing for attribute '&
   1918             &//TRIM(attributes(i)%name)//' for field '//TRIM(name)//'. Contact the developers.', FATAL)
   1919     END IF
   1920 
   1921 
   1922 !---- write additional attribute for time averaging -----
   1923     IF ( PRESENT(avg_name) ) THEN
   1924        IF ( avg_name(1:1) /= ' ' ) THEN
   1925           CALL mpp_write_meta(file_unit, mpp_get_id(Field%Field),&
   1926              & 'time_avg_info',&
   1927              & cval=trim(avg_name)//'_T1,'//trim(avg_name)//'_T2,'//trim(avg_name)//'_DT')
   1928        END IF
   1929     END IF
   1930 
   1931 ! write coordinates attribute for CF compliance
   1932     IF ( coord_present ) &
   1933          CALL mpp_write_meta(file_unit, mpp_get_id(Field%Field),&
   1934          & 'coordinates', cval=TRIM(coord_att))
   1935     IF ( TRIM(standard_name2) /= 'none' ) CALL mpp_write_meta(file_unit, mpp_get_id(Field%Field),&
   1936          & 'standard_name', cval=TRIM(standard_name2))
   1937 
   1938 !---- write attribute for interp_method ----
   1939     IF( PRESENT(interp_method) ) THEN
   1940        CALL mpp_write_meta ( file_unit, mpp_get_id(Field%Field),&
   1941             & 'interp_method', cval=TRIM(interp_method))
   1942     END IF
   1943 
   1944 !---- get axis domain ----
   1945     Field%Domain = get_domain2d ( axes )
   1946     Field%tile_count = get_tile_count ( axes )
   1947     Field%DomainU = get_domainUG ( axes(1) )
   1948 
   1949   END FUNCTION write_field_meta_data_use_mpp_io

Page 58          Source Listing                  WRITE_FIELD_META_DATA_USE_MPP_IO
2021-06-01 08:54 Entry Points                    diag_output.F90



ENTRY POINTS

  Name                                                            
                                                                  
 diag_output_mod_mp_write_field_meta_data_use_mpp_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADD                        Local  1748     R(8)            8           scalar                    1818,1826,1838,1858,1867          
 ALLOCATED                  Func   1891                                 scalar                    1891,1899,1903                    
 ATTRIBUTES                 Dummy  1728     RECORD          1560  1     1        ARG,ALC,IN       1890,1891,1892,1899,1902,1903,1906
                                                                                                  ,1913,1915,1918                   
 ATT_LEN                    Local  1749     I(4)            4           scalar                                                      
 ATT_STR                    Local  1741     CHAR            1280        scalar                                                      
 AUX_AXES                   Local  1744     CHAR            40    1     0                         1794,1795,1797,1799               
 AVG_NAME                   Dummy  1728     CHAR                        scalar   ARG,IN           1923,1924,1927                    
 AXES                       Dummy  1727     I(4)            4     1     1        ARG,IN           1744,1751,1768,1779,1794,1945,1946
                                                                                                  ,1947                             
 AXIS_INDICES               Local  1751     I(4)            4     1     0                         1782,1853,1862,1873,1880          
 COORD_ATT                  Local  1745     CHAR            160         scalar                    1792,1796,1797,1799,1934          
 COORD_PRESENT              Local  1743     L(4)            4           scalar                    1758,1801,1932                    
 ERR_MSG                    Local  1746     CHAR            1024        scalar                    1755,1892,1893,1895               
 FIELD                      Local  1742     DIAG_FIELDTYPE  2424        scalar                    1834,1835,1838,1839,1841,1842,1845
                                                                                                  ,1846,1851,1852,1856,1857,1861,187
                                                                                                  1,1872,1875,1876,1879,1892,1925,19
                                                                                                  33,1935,1940,1945,1946,1947       
 FILE_UNIT                  Dummy  1727     I(4)            4           scalar   ARG,IN           1772,1852,1861,1872,1879,1892,1925
                                                                                                  ,1933,1935,1940                   
 I                          Local  1749     I(4)            4           scalar                    1778,1779,1782,1793,1794,1795,1797
                                                                                                  ,1799,1902,1906,1913,1918         
 INDEXX                     Local  1749     I(4)            4           scalar                    1779,1781,1782                    
 INTERP_METHOD              Dummy  1728     CHAR                        scalar   ARG,IN           1939,1941                         
 IPACK                      Local  1749     I(4)            4           scalar                    1811,1813,1824,1825,1836,1837,1858
                                                                                                  ,1867,1877,1884                   
 LEN_TRIM                   Func   1796                                 scalar                    1796,1893                         
 LONG_NAME                  Dummy  1727     CHAR                        scalar   ARG,IN           1854,1863,1874,1881               
 MPP_WRITE_META_FIELD       Subr   1852                                          PRIV             1852,1861,1872,1879               
 MVAL                       Dummy  1727     R(8)            8           scalar   ARG,IN           1833,1834,1841                    
 NAME                       Dummy  1727     CHAR                        scalar   ARG,IN           1786,1854,1863,1874,1881,1902,1906
                                                                                                  ,1913,1918                        
 NP                         Local  1749     I(4)            4           scalar                    1825,1827,1837,1838               
 NUM                        Local  1749     I(4)            4           scalar                    1768,1770,1778,1791,1793,1853,1862
                                                                                                  ,1873,1880                        
 NUM_ATTRIBUTES             Dummy  1728     I(4)            4           scalar   ARG,IN           1889,1891,1892,1899,1903          
 PACK                       Dummy  1727     I(4)            4           scalar   ARG,IN           1810,1811                         
 PRESENT                    Func   1759                                 scalar                    1759,1766,1810,1820,1833,1889,1890
                                                                                                  ,1915,1923,1939                   
 RANGE                      Dummy  1727     R(8)            8     1     2        ARG,IN           1820,1821,1826,1827,1855,1864     
 REAL                       Func   1827                                 scalar                    1827,1838                         
 SCALE                      Local  1748     R(8)            8           scalar                    1819,1827,1838,1858,1867          
 SIZE                       Func   1744                                 scalar                    1744,1751,1768                    
 STANDARD_NAME              Dummy  1728     CHAR                        scalar   ARG,IN           1759,1760                         

Page 59          Source Listing                  WRITE_FIELD_META_DATA_USE_MPP_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 STANDARD_NAME2             Local  1740     CHAR            256         scalar                    1760,1762,1935,1936               
 TIME_METHOD                Dummy  1728     CHAR                        scalar   ARG,IN           1859,1868,1877,1884,1892          
 TRIM                       Func   1786                                 scalar                    1786,1795,1797,1799,1895,1902,1906
                                                                                                  ,1913,1918,1927,1934,1935,1936,194
                                                                                                  1                                 
 UNITS                      Dummy  1727     CHAR                        scalar   ARG,IN           1854,1863,1874,1881               
 USE_RANGE                  Local  1750     L(4)            4           scalar                    1817,1822,1850                    
 USE_UGDOMAIN               Dummy  1729     L(4)            4           scalar   ARG,IN           1766                              
 USE_UGDOMAIN_LOCAL         Local  1752     L(4)            4           scalar                    1765,1766,1791                    
 WRITE_FIELD_META_DATA_USE_                                                                                                         
 MPP_IO                     Func   1727     RECORD          2424        scalar   PRIV                                               

Page 60          Source Listing                  WRITE_FIELD_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   1950 ! </FUNCTION>
   1951 
   1952 !> \brief Write out attribute meta data to file
   1953 !!
   1954 !! Write out the attribute meta data to file, for field and axes
   1955   SUBROUTINE write_attribute_meta_use_mpp_io(file_unit, id, num_attributes, attributes, time_method, err_msg)
   1956     INTEGER, INTENT(in) :: file_unit !< File unit number
   1957     INTEGER, INTENT(in) :: id !< ID of field, file, axis to get attribute meta data
   1958     INTEGER, INTENT(in) :: num_attributes !< Number of attributes to write
   1959     TYPE(diag_atttype), DIMENSION(:), INTENT(in) :: attributes !< Array of attributes
   1960     CHARACTER(len=*), INTENT(in), OPTIONAL :: time_method !< To include in cell_methods attribute if present
   1961     CHARACTER(len=*), INTENT(out), OPTIONAL :: err_msg !< Return error message
   1962 
   1963     INTEGER :: i, att_len
   1964     CHARACTER(len=1280) :: att_str
   1965 
   1966 ! Clear err_msg if present
   1967     IF ( PRESENT(err_msg) ) err_msg = ''
   1968 
   1969     DO i = 1, num_attributes
   1970        SELECT CASE (attributes(i)%type)
   1971        CASE (NF90_INT)
   1972           IF ( .NOT.allocated(attributes(i)%iatt) ) THEN
   1973              IF ( fms_error_handler('diag_output_mod::write_attribute_meta',&
   1974                   & 'Integer attribute type indicated, but array not allocated for attribute '&
   1975                   &//TRIM(attributes(i)%name)//'.', err_msg) ) THEN
   1976                 RETURN
   1977              END IF
   1978           END IF
   1979           CALL mpp_write_meta(file_unit, id, TRIM(attributes(i)%name),&
   1980                & ival=attributes(i)%iatt)
   1981        CASE (NF90_FLOAT)
   1982           IF ( .NOT.allocated(attributes(i)%fatt) ) THEN
   1983              IF ( fms_error_handler('diag_output_mod::write_attribute_meta',&
   1984                   & 'Real attribute type indicated, but array not allocated for attribute '&
   1985                   &//TRIM(attributes(i)%name)//'.', err_msg) ) THEN
   1986                 RETURN
   1987              END IF
   1988           END IF
   1989           CALL mpp_write_meta(file_unit, id, TRIM(attributes(i)%name),&
   1990                & rval=attributes(i)%fatt)
   1991        CASE (NF90_CHAR)
   1992           att_str = attributes(i)%catt
   1993           att_len = attributes(i)%len
   1994           IF ( TRIM(attributes(i)%name).EQ.'cell_methods' .AND. PRESENT(time_method) ) THEN
   1995 ! Append ",time: time_method" if time_method present
   1996              att_str = attributes(i)%catt(1:attributes(i)%len)//' time: '//time_method
   1997              att_len = LEN_TRIM(att_str)
   1998           END IF
   1999           CALL mpp_write_meta(file_unit, id, TRIM(attributes(i)%name),&
   2000                & cval=att_str(1:att_len))
   2001        CASE default
   2002           IF ( fms_error_handler('diag_output_mod::write_attribute_meta', 'Invalid type for attribute '&
   2003                &//TRIM(attributes(i)%name)//'.', err_msg) ) THEN
   2004              RETURN
   2005           END IF
   2006        END SELECT

Page 61          Source Listing                  WRITE_ATTRIBUTE_META_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   2007     END DO
   2008   END SUBROUTINE write_attribute_meta_use_mpp_io


ENTRY POINTS

  Name                                                           
                                                                 
 diag_output_mod_mp_write_attribute_meta_use_mpp_io_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1972                                 scalar                    1972,1982                         
 ATTRIBUTES                 Dummy  1955     RECORD          1560  1     1        ARG,IN           1970,1972,1975,1979,1980,1982,1985
                                                                                                  ,1989,1990,1992,1993,1994,1996,199
                                                                                                  9,2003                            
 ATT_LEN                    Local  1963     I(4)            4           scalar                    1993,1997,2000                    
 ATT_STR                    Local  1964     CHAR            1280        scalar                    1992,1996,1997,2000               
 ERR_MSG                    Dummy  1955     CHAR                        scalar   ARG,OUT          1967,1975,1985,2003               
 FILE_UNIT                  Dummy  1955     I(4)            4           scalar   ARG,IN           1979,1989,1999                    
 I                          Local  1963     I(4)            4           scalar                    1969,1970,1972,1975,1979,1980,1982
                                                                                                  ,1985,1989,1990,1992,1993,1994,199
                                                                                                  6,1999,2003                       
 ID                         Dummy  1955     I(4)            4           scalar   ARG,IN           1979,1989,1999                    
 LEN_TRIM                   Func   1997                                 scalar                    1997                              
 NUM_ATTRIBUTES             Dummy  1955     I(4)            4           scalar   ARG,IN           1969                              
 PRESENT                    Func   1967                                 scalar                    1967,1994                         
 TIME_METHOD                Dummy  1955     CHAR                        scalar   ARG,IN           1994,1996                         
 TRIM                       Func   1975                                 scalar                    1975,1979,1985,1989,1994,1999,2003
 WRITE_ATTRIBUTE_META_USE_M                                                                                                         
 PP_IO                      Subr   1955                                                           1575,1668,1892                    

Page 62          Source Listing                  WRITE_ATTRIBUTE_META_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   2009 
   2010 ! <SUBROUTINE NAME="done_meta_data">
   2011 !   <OVERVIEW>
   2012 !     Writes axis data to file.
   2013 !   </OVERVIEW>
   2014 !   <TEMPLATE>
   2015 !     SUBROUTINE done_meta_data(file_unit)
   2016 !   </TEMPLATE>
   2017 !   <DESCRIPTION>
   2018 !     Writes axis data to file.  This subroutine is to be called once per file
   2019 !     after all <TT>write_meta_data</TT> calls, and before the first
   2020 !     <TT>diag_field_out</TT> call.
   2021 !   </DESCRIPTION>
   2022 !   <IN NAME="file_unit" TYPE="INTEGER">Output file unit number</IN>
   2023   SUBROUTINE done_meta_data_use_mpp_io(file_unit)
   2024     INTEGER,  INTENT(in)  :: file_unit
   2025 
   2026     INTEGER               :: i
   2027 
   2028 !---- write data for all non-time axes ----
   2029     DO i = 1, num_axis_in_file
   2030        IF ( time_axis_flag(i) ) CYCLE
   2031        CALL mpp_write(file_unit, Axis_types(i))
   2032     END DO
   2033 
   2034     num_axis_in_file = 0
   2035   END SUBROUTINE done_meta_data_use_mpp_io


ENTRY POINTS

  Name                                                     
                                                           
 diag_output_mod_mp_done_meta_data_use_mpp_io_             

Page 63          Source Listing                  DONE_META_DATA_USE_MPP_IO
2021-06-01 08:54 Symbol Table                    diag_output.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DONE_META_DATA_USE_MPP_IO  Subr   2023                                                                                             
 FILE_UNIT                  Dummy  2023     I(4)            4           scalar   ARG,IN           2031                              
 I                          Local  2026     I(4)            4           scalar                    2029,2030,2031                    
 MPP_WRITE                  Local  2031                                 scalar   PRIV             48,2031,2068,2071,2084            
 MPP_WRITE_AXIS             Subr   2031                                          PRIV             2031                              

Page 64          Source Listing                  DONE_META_DATA_USE_MPP_IO
2021-06-01 08:54                                 diag_output.F90

   2036 ! </SUBROUTINE>
   2037 
   2038 ! <SUBROUTINE NAME="diag_field_out">
   2039 !   <OVERVIEW>
   2040 !     Writes field data to an output file.
   2041 !   </OVERVIEW>
   2042 !   <TEMPLATE>
   2043 !     SUBROUTINE diag_field_out(file_unit, field, data, time)
   2044 !   </TEMPLATE>
   2045 !   <DESCRIPTION>
   2046 !     Writes field data to an output file.
   2047 !   </DESCRIPTION>
   2048 !   <IN NAME="file_unit" TYPE="INTEGER">Output file unit number</IN>
   2049 !   <INOUT NAME="field" TYPE="TYPE(diag_fieldtype)"></INOUT>
   2050 !   <INOUT NAME="data" TYPE="REAL, DIMENSIONS(:,:,:,:)"></INOUT>
   2051 !   <IN NAME="time" TYPE="REAL, OPTIONAL"></IN>
   2052   SUBROUTINE diag_field_out(file_unit, Field, DATA, time)
   2053     INTEGER, INTENT(in) :: file_unit
   2054     TYPE(diag_fieldtype), INTENT(inout) :: Field
   2055     REAL , INTENT(inout) :: data(:,:,:,:)
   2056     REAL, OPTIONAL, INTENT(in) :: time
   2057 
   2058 !---- replace original missing value with (un)packed missing value ----
   2059 !print *, 'PE,name,miss_pack_present=',mpp_pe(), &
   2060 !  trim(Field%Field%name),Field%miss_pack_present
   2061     IF ( Field%miss_pack_present ) THEN
   2062        WHERE ( DATA == Field%miss ) DATA = Field%miss_pack
   2063     END IF
   2064 
   2065 !---- output data ----
   2066     IF ( Field%Domain .NE. null_domain2d ) THEN
   2067        IF( Field%miss_present ) THEN
   2068           CALL mpp_write(file_unit, Field%Field, Field%Domain, DATA, time, &
   2069                       tile_count=Field%tile_count, default_data=Field%miss_pack)
   2070        ELSE
   2071           CALL mpp_write(file_unit, Field%Field, Field%Domain, DATA, time, &
   2072                       tile_count=Field%tile_count, default_data=CMOR_MISSING_VALUE)
   2073        END IF
   2074     ELSEIF ( Field%DomainU .NE. null_domainUG ) THEN
   2075        IF( Field%miss_present ) THEN
   2076           CALL mpp_io_unstructured_write(file_unit, Field%Field, Field%DomainU, DATA, tstamp=time, &
   2077                        default_data=Field%miss_pack)
   2078        ELSE
   2079           CALL mpp_io_unstructured_write(file_unit, Field%Field, Field%DomainU, DATA, tstamp=time, &
   2080                        default_data=CMOR_MISSING_VALUE)
   2081        END IF
   2082 
   2083     ELSE
   2084        CALL mpp_write(file_unit, Field%Field, DATA, time)
   2085     END IF
   2086   END SUBROUTINE diag_field_out

Page 65          Source Listing                  DIAG_FIELD_OUT
2021-06-01 08:54 Entry Points                    diag_output.F90



ENTRY POINTS

  Name                                          
                                                
 diag_output_mod_mp_diag_field_out_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  2052     R(8)            8     4     1        ARG,INOUT        2062,2068,2071,2076,2079,2084     
 DIAG_FIELD_OUT             Subr   2052                                                                                             
 FIELD                      Dummy  2052     DIAG_FIELDTYPE  2424        scalar   ARG,INOUT        2061,2062,2066,2067,2068,2069,2071
                                                                                                  ,2072,2074,2075,2076,2077,2079,208
                                                                                                  4                                 
 FILE_UNIT                  Dummy  2052     I(4)            4           scalar   ARG,IN           2068,2071,2076,2079,2084          
 MPP_IO_UNSTRUCTURED_WRITE  Local  2076                                 scalar   PRIV             49,2076,2079                      
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_4D                      Subr   2076                                          PRIV             2076,2079                         
 MPP_WRITE_2DDECOMP_R4D_R8  Subr   2068                                          PRIV             2068,2071                         
 MPP_WRITE_R4D_R8           Subr   2084                                          PRIV             2084                              
 TIME                       Dummy  2052     R(8)            8           scalar   ARG,IN           2068,2071,2076,2079,2084          

Page 66          Source Listing                  DIAG_FIELD_OUT
2021-06-01 08:54                                 diag_output.F90

   2087 ! </SUBROUTINE>
   2088 
   2089 ! <SUBROUTINE NAME="diag_flush">
   2090 !   <OVERVIEW>
   2091 !     Flush buffer and insure data is not lost.
   2092 !   </OVERVIEW>
   2093 !   <TEMPLATE>
   2094 !     CALL diag_flush(file_unit)
   2095 !   </TEMPLATE>
   2096 !   <DESCRIPTION>
   2097 !     This subroutine can be called periodically to flush the buffer, and
   2098 !     insure that data is not lost if the execution fails.
   2099 !   </DESCRIPTION>
   2100 !   <IN NAME="file_unit" TYPE="INTEGER">Output file unit number to flush</IN>
   2101   SUBROUTINE diag_flush(file_unit)
   2102     INTEGER, INTENT(in) :: file_unit
   2103 
   2104     CALL mpp_flush (file_unit)
   2105   END SUBROUTINE diag_flush


ENTRY POINTS

  Name                                      
                                            
 diag_output_mod_mp_diag_flush_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIAG_FLUSH                 Subr   2101                                                                                             
 FILE_UNIT                  Dummy  2101     I(4)            4           scalar   ARG,IN           2104                              
 MPP_FLUSH                  Subr   2104                                          PRIV             48,2104                           

Page 67          Source Listing                  DIAG_FLUSH
2021-06-01 08:54                                 diag_output.F90

   2106 !> End of use_mpp_io = true routines/functions
   2107 !! everything else is shared by both
   2108 
   2109 !> @brief Return the axis index number.
   2110 !! @return Integer index
   2111   FUNCTION get_axis_index(num) RESULT ( index )
   2112     INTEGER, INTENT(in) :: num
   2113 
   2114     INTEGER :: index
   2115     INTEGER :: i
   2116 
   2117 !---- get the array index for this axis type ----
   2118 !---- set up pointers to axistypes ----
   2119 !---- write axis meta data for new axes ----
   2120     index = 0
   2121     DO i = 1, num_axis_in_file
   2122        IF ( num == axis_in_file(i) ) THEN
   2123           index = i
   2124           EXIT
   2125        END IF
   2126     END DO
   2127   END FUNCTION get_axis_index


ENTRY POINTS

  Name                                          
                                                
 diag_output_mod_mp_get_axis_index_             

Page 68          Source Listing                  GET_AXIS_INDEX
2021-06-01 08:54 Symbol Table                    diag_output.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_AXIS_INDEX             Func   2111     I(4)            4           scalar                    391,684,868,1489,1618,1779        
 I                          Local  2115     I(4)            4           scalar                    2121,2122,2123                    
 INDEX                      Local  2114     I(4)            4           scalar                    2120,2123                         
 NUM                        Dummy  2111     I(4)            4           scalar   ARG,IN           2122                              

Page 69          Source Listing                  GET_AXIS_INDEX
2021-06-01 08:54                                 diag_output.F90

   2128 
   2129 !> @brief Return the global attribute type.
   2130   SUBROUTINE get_diag_global_att(gAtt)
   2131     TYPE(diag_global_att_type), INTENT(out) :: gAtt
   2132 
   2133     gAtt=diag_global_att
   2134   END SUBROUTINE get_diag_global_att


ENTRY POINTS

  Name                                               
                                                     
 diag_output_mod_mp_get_diag_global_att_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIAG_GLOBAL_ATT            Local  2133     DIAG_GLOBAL_ATT_TYPE                                                                    
                                                            256         scalar   SAVE             2133,2147,2148                    
 GATT                       Dummy  2130     DIAG_GLOBAL_ATT_TYPE                                                                    
                                                            256         scalar   ARG,OUT          2133                              
 GET_DIAG_GLOBAL_ATT        Subr   2130                                                                                             

Page 70          Source Listing                  GET_DIAG_GLOBAL_ATT
2021-06-01 08:54                                 diag_output.F90

   2135 
   2136 !> @brief Set the global attribute type.
   2137   SUBROUTINE set_diag_global_att(component, gridType, tileName)
   2138     CHARACTER(len=*),INTENT(in) :: component, gridType, tileName
   2139 
   2140 ! The following two lines are set to remove compile time warnings
   2141 ! about 'only used once'.
   2142     CHARACTER(len=64) :: component_tmp
   2143     component_tmp = component
   2144 ! Don't know how to set these for specific component
   2145 ! Want to be able to say
   2146 ! if(output_file has component) then
   2147     diag_global_att%grid_type = gridType
   2148     diag_global_att%tile_name = tileName
   2149 ! endif
   2150   END SUBROUTINE set_diag_global_att


ENTRY POINTS

  Name                                               
                                                     
 diag_output_mod_mp_set_diag_global_att_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPONENT                  Dummy  2137     CHAR                        scalar   ARG,IN           2143                              
 COMPONENT_TMP              Local  2142     CHAR            64          scalar                    2143                              
 GRIDTYPE                   Dummy  2137     CHAR                        scalar   ARG,IN           2147                              
 SET_DIAG_GLOBAL_ATT        Subr   2137                                                                                             
 TILENAME                   Dummy  2137     CHAR                        scalar   ARG,IN           2148                              

Page 71          Source Listing                  SET_DIAG_GLOBAL_ATT
2021-06-01 08:54                                 diag_output.F90

   2151 ! </SUBROUTINE>
   2152 END MODULE diag_output_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXISTYPE                   Type   42                                   scalar                    42,99                             
 AXIS_EDGES                 Subr   73                                            PRIV             73                                
 AXIS_UTILS2_MOD            Module 73                                                             73                                
 CENTER                     Param  52       I(4)            4           scalar   PRIV             52                                
 C_DOUBLE                   Param  39       I(4)            4           scalar   PRIV             39                                
 C_FLOAT                    Param  39       I(4)            4           scalar   PRIV             39                                
 C_INT16_T                  Param  40       I(4)            4           scalar   PRIV             40                                
 C_INT32_T                  Param  40       I(4)            4           scalar   PRIV             40                                
 C_INT64_T                  Param  39       I(4)            4           scalar   PRIV             39                                
 C_INTPTR_T                 Param  40       I(4)            4           scalar   PRIV             40                                
 DIAG_AXIS_INIT             Func   56       I(4)            4           scalar   PRIV             56                                
 DIAG_AXIS_MOD              Module 56                                                             56                                
 DIAG_DATA_MOD              Module 59                                                             59                                
 DIAG_FIELD_OUT             Subr   84                                                             84                                
 DIAG_FIELD_WRITE           Local  106                                  scalar                    83                                
 DIAG_OUTPUT_INIT           Local  112                                  scalar                    81                                
 DIAG_OUTPUT_MOD            Module 27                                                                                               
 DIAG_WRITE_TIME            Subr   83                                                             83                                
 DONE_META_DATA             Subr   81                                                             81                                
 DONE_META_DATA_USE_MPP_IO  Subr   84                                                             84                                
 EAST                       Param  52       I(4)            4           scalar   PRIV             52                                
 FIELDTYPE                  Type   42                                   scalar                    42                                
 FILES                      Local  59       RECORD          11400 1     1        ALC,PRIV,SAVE    59                                
 FMS2_IO_MOD                Module 72                                                             72                                
 FMS_MOD                    Module 61                                                             61                                
 GET_AXIS_LENGTH            Func   56       I(4)            4           scalar   PRIV             56                                
 GET_DOMAIN1D               Func   57       RECORD          176         scalar   PRIV             57                                
 ISO_C_BINDING              Module 39                                                             39                                
 ISO_FORTRAN_ENV            Module 38                                                             38                                
 MAX_AXIS_NUM               Param  95       I(4)            4           scalar                    97,98,99                          
 MPP_CLOSE                  Subr   48                                            PRIV             48                                
 MPP_DEFINE_DOMAINS         Local  50                                   scalar   PRIV             50                                
 MPP_DOMAINS_MOD            Module 50                                                             50,67,68,69                       
 MPP_IO_MOD                 Module 42                                                             42,47                             
 MPP_MOD                    Module 55                                                             55,70,71                          
 MPP_PE                     Func   55       I(4)            4           scalar   PRIV             55                                
 MPP_ROOT_PE                Func   55       I(4)            4           scalar   PRIV             55                                
 MPP_WRONLY                 Param  43       I(4)            4           scalar   PRIV             43                                
 NETCDF                     Module 64                                                             64                                
 NORTH                      Param  52       I(4)            4           scalar   PRIV             52                                
 Operator (/=)                     53                                                                                               
 PLATFORM_MOD               Module 37                                                             37                                
 REAL128                    Param  38       I(4)            4           scalar   PRIV             38                                
 RESHAPE                    Func   91                                   scalar                    91                                
 SET_DIAG_GLOBAL_ATT        Subr   82                                                             82                                
 TIME_MANAGER_MOD           Module 60                                                             60                                
 WRITE_AXIS_META_DATA       Local  117                                  scalar                    81                                
 WRITE_FIELD_META_DATA      Local  122                                  scalar                    81                                

Page 72          Source Listing                  SET_DIAG_GLOBAL_ATT
2021-06-01 08:54 Subprograms/Common Blocks       diag_output.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIAG_FIELD_OUT             Subr   2052                                                                                             
 DIAG_FIELD_WRITE_FIELD     Subr   1162                                          PRIV                                               
 DIAG_FIELD_WRITE_VARNAME   Subr   1236                                          PRIV                                               
 DIAG_FLUSH                 Subr   2101                                                                                             
 DIAG_OUTPUT_INIT_FMS2_IO   Subr   135                                           PRIV                                               
 DIAG_OUTPUT_INIT_USE_MPP_I                                                                                                         
 O                          Subr   1339                                          PRIV                                               
 DIAG_OUTPUT_MOD            Module 27                                                                                               
 DIAG_WRITE_TIME            Subr   1295                                                                                             
 DONE_META_DATA             Subr   1152                                                                                             
 DONE_META_DATA_USE_MPP_IO  Subr   2023                                                                                             
 GET_AXIS_INDEX             Func   2111     I(4)            4           scalar                    391,684,868,1489,1618,1779        
 GET_DIAG_GLOBAL_ATT        Subr   2130                                                                                             
 SET_DIAG_GLOBAL_ATT        Subr   2137                                                                                             
 WRITE_ATTRIBUTE_META_FMS2_                                                                                                         
 IO                         Subr   1092                                                           633,1032                          
 WRITE_ATTRIBUTE_META_USE_M                                                                                                         
 PP_IO                      Subr   1955                                                           1575,1668,1892                    
 WRITE_AXIS_META_DATA_FMS2_                                                                                                         
 IO                         Subr   317                                           PRIV                                               
 WRITE_AXIS_META_DATA_USE_M                                                                                                         
 PP_IO                      Subr   1437                                          PRIV                                               
 WRITE_FIELD_META_DATA_FMS2                                                                                                         
 _IO                        Func   796      RECORD          2424        scalar   PRIV                                               
 WRITE_FIELD_META_DATA_USE_                                                                                                         
 MPP_IO                     Func   1727     RECORD          2424        scalar   PRIV                                               

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc

Page 73          Source Listing                  SET_DIAG_GLOBAL_ATT
2021-06-01 08:54                                 diag_output.F90

       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept

Page 74          Source Listing                  SET_DIAG_GLOBAL_ATT
2021-06-01 08:54                                 diag_output.F90

       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : diag_output.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
