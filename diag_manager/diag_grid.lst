Page 1           Source Listing                  DIAG_GRID_INIT
2021-06-01 08:54                                 /tmp/ifortCD2kYO.i90

      1 # 1 "diag_grid.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 !> @file
     22 !! @brief diag_grid_mod is a set of procedures to work with the
     23 !!   model's global grid to allow regional output.
     24 !! @author Seth Underwood
     25 !! @email gfdl.climate.model.info@noaa.gov
     26 !! @description TT>diag_grid_mod</TT> contains useful utilities for dealing
     27 !!   with, mostly, regional output for grids other than the standard
     28 !!   lat/lon grid.  This module contains three public procedures <TT>
     29 !!   diag_grid_init</TT>, which is shared globably in the <TT>
     30 !!   diag_manager_mod</TT>, <TT>diag_grid_end</TT> which will free
     31 !!   up memory used during the register field calls, and
     32 !!   <TT>get_local_indexes</TT>.  The <TT>send_global_grid</TT>
     33 !!   procedure is called by the model that creates the global grid.
     34 !!   <TT>send_global_grid</TT> needs to be called before any fields
     35 !!   are registered that will output only regions.  <TT>get_local_indexes</TT>
     36 !!   is to be called by the <TT>diag_manager_mod</TT> to discover the
     37 !!   global indexes defining a subregion on the tile.
     38 MODULE diag_grid_mod
     39 use platform_mod
     40 ! <CONTACT EMAIL="seth.underwood@noaa.gov">
     41 !   Seth Underwood
     42 ! </CONTACT>
     43 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/" />
     44 ! <OVERVIEW>
     45 !   <TT>diag_grid_mod</TT> is a set of procedures to work with the
     46 !   model's global grid to allow regional output.
     47 ! </OVERVIEW>
     48 ! <DESCRIPTION>
     49 !   <TT>diag_grid_mod</TT> contains useful utilities for dealing
     50 !   with, mostly, regional output for grids other than the standard
     51 !   lat/lon grid.  This module contains three public procedures <TT>
     52 !   diag_grid_init</TT>, which is shared globably in the <TT>
     53 !   diag_manager_mod</TT>, <TT>diag_grid_end</TT> which will free
     54 !   up memory used during the register field calls, and
     55 !   <TT>get_local_indexes</TT>.  The <TT>send_global_grid</TT>
     56 !   procedure is called by the model that creates the global grid.
     57 !   <TT>send_global_grid</TT> needs to be called before any fields

Page 2           Source Listing                  DIAG_GRID_INIT
2021-06-01 08:54                                 diag_grid.F90

     58 !   are registered that will output only regions.  <TT>get_local_indexes</TT>
     59 !   is to be called by the <TT>diag_manager_mod</TT> to discover the
     60 !   global indexes defining a subregion on the tile.
     61 !
     62 !   <B>Change Log</B>
     63 !   <DL>
     64 !     <DT>September 2009</DT>
     65 !     <DD>
     66 !       <UL>
     67 !         <LI>Single point region in Cubed Sphere</LI>
     68 !         <LI>Single tile regions in the cubed sphere</LI>
     69 !       </UL>
     70 !     </DD>
     71 !   </DL>
     72 ! </DESCRIPTION>
     73 
     74 ! <INFO>
     75 !   <FUTURE>
     76 !     Multi-tile regional output in the cubed sphere.
     77 !   </FUTURE>
     78 !   <FUTURE>
     79 !     Single grid in the tri-polar grid.
     80 !   </FUTURE>
     81 !   <FUTURE>
     82 !     Multi-tile regional output in the tri-polar grid.
     83 !   </FUTURE>
     84 !   <FUTURE>
     85 !     Regional output using array masking.  This should allow
     86 !     regional output to work on any current or future grid.
     87 !   </FUTURE>
     88 ! </INFO>
     89   USE constants_mod, ONLY: DEG_TO_RAD, RAD_TO_DEG, RADIUS
     90   USE fms_mod, ONLY: write_version_number, error_mesg, WARNING, FATAL,&
     91        & mpp_pe
     92   USE mpp_mod, ONLY: mpp_root_pe, mpp_npes, mpp_max, mpp_min
     93   USE mpp_domains_mod, ONLY: domain2d, mpp_get_tile_id,&
     94        & mpp_get_ntile_count, mpp_get_compute_domains
     95 
     96   IMPLICIT NONE
     97 
     98 ! Parameters
     99 ! Include variable "version" to be written to log file.
    100 # 1 "../include/file_version.h" 1 
    101 ! -*-f90-*-
    102 !***********************************************************************
    103 !*                   GNU Lesser General Public License
    104 !*
    105 !* This file is part of the GFDL Flexible Modeling System (FMS).
    106 !*
    107 !* FMS is free software: you can redistribute it and/or modify it under
    108 !* the terms of the GNU Lesser General Public License as published by
    109 !* the Free Software Foundation, either version 3 of the License, or (at
    110 !* your option) any later version.
    111 !*
    112 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    113 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    114 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License

Page 3           Source Listing                  DIAG_GRID_INIT
2021-06-01 08:54                                 ../include/file_version.h

    115 !* for more details.
    116 !*
    117 !* You should have received a copy of the GNU Lesser General Public
    118 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    119 !***********************************************************************
    120 
    121 # 23
    122 
    123   character(len=*), parameter :: version = 'unknown'
    124 
    125 # 100 "diag_grid.F90" 2 
    126 
    127 !> @brief Contains the model's global grid data, and other grid information.
    128   TYPE :: diag_global_grid_type
    129      REAL, allocatable, DIMENSION(:,:) :: glo_lat !< The latitude values on the global grid.
    130      REAL, allocatable, DIMENSION(:,:) :: glo_lon !< The longitude values on the global grid.
    131      REAL, allocatable, DIMENSION(:,:) :: aglo_lat !< The latitude values on the global a-grid.  Here we expect isc-1:iec+1 
    131 and
    132 !! jsc=1:jec+1 to be passed in.
    133      REAL, allocatable, DIMENSION(:,:) :: aglo_lon !< The longitude values on the global a-grid.  Here we expec isc-1:iec+j 
    133 and
    134 !! jsc-1:jec+1 to be passed in.
    135      INTEGER :: myXbegin !< The starting index of the compute domain on the current PE.
    136      INTEGER :: myYbegin !< The starting index of the compute domain on the current PE.
    137      INTEGER :: dimI !< The dimension of the global grid in the 'i' / longitudal direction.
    138      INTEGER :: dimJ !< The dimension of the global grid in the 'j' / latitudal direction.
    139      INTEGER :: adimI !< The dimension of the global a-grid in the 'i' / longitudal direction.  Again,
    140 !! the expected dimension for diag_grid_mod is isc-1:iec+1.
    141      INTEGER :: adimJ !< The dimension of the global a-grid in the 'j' / latitudal direction.  Again,
    142 !! the expected dimension for diag_grid_mod is jsc-1:jec+1.
    143      INTEGER :: tile_number !< The tile the <TT>glo_lat</TT> and <TT>glo_lon</TT> define.
    144      INTEGER :: ntiles !< The number of tiles.
    145      INTEGER :: peStart !< The starting PE number for the current tile.
    146      INTEGER :: peEnd !< The ending PE number for the current tile.
    147      CHARACTER(len=128) :: grid_type !< The global grid type.
    148   END TYPE diag_global_grid_type
    149 
    150 !> @brief Private point type to hold the (x,y,z) location for a (lat,lon)
    151 !!   location.
    152   TYPE :: point
    153      REAL :: x !< The x value of the (x,y,z) coordinates.
    154      REAL :: y !< The y value of the (x,y,z) coordinates.
    155      REAL :: z !< The z value of the (x,y,z) coordinates.
    156   END TYPE point
    157 
    158 ! <PRIVATE>
    159 ! <DATA NAME="diag_global_grid" TYPE="TYPE(diag_global_grid_type)">
    160 !   Variable to hold the global grid data
    161 ! </DATA>
    162 ! </PRIVATE>
    163   TYPE(diag_global_grid_type) :: diag_global_grid !< Variable to hold the global grid data
    164 
    165 ! <PRIVATE>
    166 ! <DATA NAME="diag_grid_initialized" TYPE="LOGICAL" DEFAULT=".FALSE.">
    167 !   Indicates if the diag_grid_mod has been initialized.
    168 ! </DATA>
    169 ! </PRIVATE>

Page 4           Source Listing                  DIAG_GRID_INIT
2021-06-01 08:54                                 diag_grid.F90

    170   LOGICAL :: diag_grid_initialized = .FALSE. !< Indicates if the diag_grid_mod has been initialized.
    171 
    172   PRIVATE
    173   PUBLIC :: diag_grid_init, diag_grid_end, get_local_indexes,  &
    174             get_local_indexes2
    175 
    176 CONTAINS
    177 
    178 !> @brief Send the global grid to the <TT>diag_manager_mod</TT> for
    179 !!   regional output.
    180 !! @description In order for the diag_manager to do regional output for grids
    181 !!     other than the standard lat/lon grid, the <TT>
    182 !!     diag_manager_mod</TT> needs to know the the latitude and
    183 !!     longitude values for the entire global grid.  This procedure
    184 !!     is the mechanism the models will use to share their grid with
    185 !!     the diagnostic manager.
    186 !!     This procedure needs to be called after the grid is created,
    187 !!     and before the first call to register the fields.
    188   SUBROUTINE diag_grid_init(domain, glo_lat, glo_lon, aglo_lat, aglo_lon)
    189     TYPE(domain2d), INTENT(in) :: domain !< The domain to which the grid data corresponds.
    190     REAL, INTENT(in), DIMENSION(:,:) :: glo_lat !< The latitude information for the grid tile.
    191     REAL, INTENT(in), DIMENSION(:,:) :: glo_lon !< The longitude information for the grid tile.
    192     REAL, INTENT(in), DIMENSION(:,:) :: aglo_lat !< The latitude information for the a-grid tile.
    193     REAL, INTENT(in), DIMENSION(:,:) :: aglo_lon !< The longitude information for the a-grid tile.
    194 
    195     INTEGER, DIMENSION(1) :: tile
    196     INTEGER :: ntiles
    197     INTEGER :: stat
    198     INTEGER :: i_dim, j_dim
    199     INTEGER :: ai_dim, aj_dim
    200     INTEGER, DIMENSION(2) :: latDim, lonDim
    201     INTEGER, DIMENSION(2) :: alatDim, alonDim
    202     INTEGER :: myPe, npes, npesPerTile
    203     INTEGER, ALLOCATABLE, DIMENSION(:) :: xbegin, xend, ybegin, yend
    204 
    205 ! Write the file version to the logfile
    206     CALL write_version_number("DIAG_GRID_MOD", version)
    207 
    208 ! Verify all allocatable / pointers for diag_global_grid hare not
    209 ! allocated / associated.
    210     IF ( ALLOCATED(xbegin) ) DEALLOCATE(xbegin)
    211     IF ( ALLOCATED(ybegin) ) DEALLOCATE(ybegin)
    212     IF ( ALLOCATED(xend) ) DEALLOCATE(xend)
    213     IF ( ALLOCATED(yend) ) DEALLOCATE(yend)
    214 
    215 ! What is my PE
    216     myPe = mpp_pe() -mpp_root_pe() + 1
    217 
    218 ! Get the domain/pe layout, and allocate the [xy]begin|end arrays/pointers
    219     npes = mpp_npes()
    220     ALLOCATE(xbegin(npes), &
    221          &   ybegin(npes), &
    222          &   xend(npes), &
    223          &   yend(npes), STAT=stat)
    224     IF ( stat .NE. 0 ) THEN
    225        CALL error_mesg('diag_grid_mod::diag_grid_init',&
    226             &'Could not allocate memory for the compute grid indices&

Page 5           Source Listing                  DIAG_GRID_INIT
2021-06-01 08:54                                 diag_grid.F90

    227             &.', FATAL)
    228     END IF
    229 
    230 ! Get tile information
    231     ntiles = mpp_get_ntile_count(domain)
    232     tile = mpp_get_tile_id(domain)
    233 
    234 ! Number of PEs per tile
    235     npesPerTile = npes / ntiles
    236     diag_global_grid%peEnd = npesPerTile * tile(1)
    237     diag_global_grid%peStart = diag_global_grid%peEnd - npesPerTile + 1
    238 
    239 ! Get the compute domains
    240     CALL mpp_get_compute_domains(domain,&
    241          & XBEGIN=xbegin, XEND=xend,&
    242          & YBEGIN=ybegin, YEND=yend)
    243 
    244 ! Module initialized
    245     diag_grid_initialized = .TRUE.
    246 
    247 ! Get the size of the grids
    248     latDim = SHAPE(glo_lat)
    249     lonDim = SHAPE(glo_lon)
    250     IF (  (latDim(1) == lonDim(1)) .AND.&
    251          &(latDim(2) == lonDim(2)) ) THEN
    252        i_dim = latDim(1)
    253        j_dim = latDim(2)
    254     ELSE
    255        CALL error_mesg('diag_grid_mod::diag_grid_init',&
    256             &'glo_lat and glo_lon must be the same shape.', FATAL)
    257     END IF
    258 
    259 ! Same thing for the a-grid
    260     alatDim = SHAPE(aglo_lat)
    261     alonDim = SHAPE(aglo_lon)
    262     IF (  (alatDim(1) == alonDim(1)) .AND. &
    263          &(alatDim(2) == alonDim(2)) ) THEN
    264        IF ( tile(1) == 4 .OR. tile(1) == 5 ) THEN
    265 ! These tiles need to be transposed.
    266           ai_dim = alatDim(2)
    267           aj_dim = alatDim(1)
    268        ELSE
    269           ai_dim = alatDim(1)
    270           aj_dim = alatDim(2)
    271        END IF
    272     ELSE
    273        CALL error_mesg('diag_grid_mod::diag_grid_init',&
    274             & "a-grid's glo_lat and glo_lon must be the same shape.", FATAL)
    275     END IF
    276 
    277 ! Allocate the grid arrays
    278     IF (   allocated(diag_global_grid%glo_lat) .OR.&
    279          & allocated(diag_global_grid%glo_lon) ) THEN
    280        IF ( mpp_pe() == mpp_root_pe() ) &
    281             & CALL error_mesg('diag_grid_mod::diag_grid_init',&
    282             &'The global grid has already been initialized', WARNING)
    283     ELSE

Page 6           Source Listing                  DIAG_GRID_INIT
2021-06-01 08:54                                 diag_grid.F90

    284        ALLOCATE(diag_global_grid%glo_lat(i_dim,j_dim),&
    285             &   diag_global_grid%glo_lon(i_dim,j_dim), STAT=stat)
    286        IF ( stat .NE. 0 ) THEN
    287           CALL error_mesg('diag_grid_mod::diag_grid_init',&
    288                &'Could not allocate memory for the global grid.', FATAL)
    289        END IF
    290     END IF
    291 
    292 ! Same thing for the a-grid
    293     IF (   allocated(diag_global_grid%aglo_lat) .OR.&
    294          & allocated(diag_global_grid%aglo_lon) ) THEN
    295        IF ( mpp_pe() == mpp_root_pe() ) &
    296             & CALL error_mesg('diag_grid_mod::diag_grid_init',&
    297             &'The global a-grid has already been initialized', WARNING)
    298     ELSE
    299        ALLOCATE(diag_global_grid%aglo_lat(0:ai_dim-1,0:aj_dim-1),&
    300             &   diag_global_grid%aglo_lon(0:ai_dim-1,0:aj_dim-1), STAT=stat)
    301        IF ( stat .NE. 0 ) THEN
    302           CALL error_mesg('diag_global_mod::diag_grid_init',&
    303                &'Could not allocate memory for the global a-grid', FATAL)
    304        END IF
    305     END IF
    306 
    307 ! Set the values for diag_global_grid
    308 
    309 ! If we are on tile 4 or 5, we need to transpose the grid to get
    310 ! this to work.
    311     IF ( tile(1) == 4 .OR. tile(1) == 5 ) THEN
    312        diag_global_grid%aglo_lat = TRANSPOSE(aglo_lat)
    313        diag_global_grid%aglo_lon = TRANSPOSE(aglo_lon)
    314     ELSE
    315        diag_global_grid%aglo_lat = aglo_lat
    316        diag_global_grid%aglo_lon = aglo_lon
    317     END IF
    318     diag_global_grid%glo_lat = glo_lat
    319     diag_global_grid%glo_lon = glo_lon
    320     diag_global_grid%dimI = i_dim
    321     diag_global_grid%dimJ = j_dim
    322     diag_global_grid%adimI = ai_dim
    323     diag_global_grid%adimJ = aj_dim
    324 !--- For the nested model, the nested region only has 1 tile ( ntiles = 1) but
    325 !--- the tile_id is 7 for the nested region. In the routine get_local_indexes,
    326 !--- local variables ijMin and ijMax have dimesnion (ntiles) and will access
    327 !--- ijMin(diag_global_grid%tile_number,:). For the nested region, ntiles = 1 and
    328 !--- diag_global_grid%tile_number = 7 will cause out of bounds. So need to
    329 !--- set diag_global_grid%tile_number = 1 when ntiles = 1 for the nested model.
    330     if(ntiles == 1) then
    331        diag_global_grid%tile_number = 1
    332     else
    333        diag_global_grid%tile_number = tile(1)
    334     endif
    335     diag_global_grid%ntiles = ntiles
    336     diag_global_grid%myXbegin = xbegin(myPe)
    337     diag_global_grid%myYbegin = ybegin(myPe)
    338 
    339 ! Unallocate arrays used here
    340     DEALLOCATE(xbegin)

Page 7           Source Listing                  DIAG_GRID_INIT
2021-06-01 08:54                                 diag_grid.F90

    341     DEALLOCATE(ybegin)
    342     DEALLOCATE(xend)
    343     DEALLOCATE(yend)
    344   END SUBROUTINE diag_grid_init


ENTRY POINTS

  Name                                        
                                              
 diag_grid_mod_mp_diag_grid_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AGLO_LAT                   Dummy  188      R(8)            8     2     1        ARG,IN           260,312,315                       
 AGLO_LON                   Dummy  188      R(8)            8     2     1        ARG,IN           261,313,316                       
 AI_DIM                     Local  199      I(4)            4           scalar                    266,269,299,300,322               
 AJ_DIM                     Local  199      I(4)            4           scalar                    267,270,299,300,323               
 ALATDIM                    Local  201      I(4)            4     1     2                         260,262,263,266,267,269,270       
 ALLOCATED                  Func   210                                  scalar                    210,211,212,213,278,279,293,294   
 ALONDIM                    Local  201      I(4)            4     1     2                         261,262,263                       
 DIAG_GLOBAL_GRID           Local  236      DIAG_GLOBAL_GRID_TYPE                                                                   
                                                            552         scalar                    236,237,278,279,284,285,293,294,29
                                                                                                  9,300,312,313,315,316,318,319,320,
                                                                                                  321,322,323,331,333,335,336,337,35
                                                                                                  6,357,363,364,370,371,377,378,443,
                                                                                                  444,478,479,495,496,513,514,531,53
                                                                                                  2,536,537,541,542,546,547,570,585,
                                                                                                  586,590,599,600,601,602,657,658,66
                                                                                                  0,669,670,733,734,750,751,752,753,
                                                                                                  803,804,805,806,807,808,809,810,81
                                                                                                  1,812,813,814,815,816,817,818,819,
                                                                                                  820,889,890,893,894,907,908,910,91
                                                                                                  1,915,916,925,926,961,962,963,964,
                                                                                                  965,966,967,968,994,995,1116,1117,
                                                                                                  1120,1121,1126,1127               
 DIAG_GRID_INIT             Subr   188                                                                                              
 DIAG_GRID_INITIALIZED      Local  245      L(4)            4           scalar                    170,245,354,384,421,650           
 DOMAIN                     Dummy  188      DOMAIN2D        752         scalar   ARG,IN           231,232,240                       
 DOMAIN2D                   Type   189                                  scalar                    93,189                            
 ERROR_MESG                 Subr   225                                           PRIV             90,225,255,273,281,287,296,302,359
                                                                                                  ,366,373,380,422,472,501,505,519,5
                                                                                                  23,568,651,1144                   
 FATAL                      Param  227      I(4)            4           scalar   PRIV             90,227,256,274,288,303,424,474,502
                                                                                                  ,506,520,524,569,653,1146         
 GLO_LAT                    Dummy  188      R(8)            8     2     1        ARG,IN           248,318                           
 GLO_LON                    Dummy  188      R(8)            8     2     1        ARG,IN           249,319                           
 I_DIM                      Local  198      I(4)            4           scalar                    252,284,285,320                   
 J_DIM                      Local  198      I(4)            4           scalar                    253,284,285,321                   
 LATDIM                     Local  200      I(4)            4     1     2                         248,250,251,252,253               
 LONDIM                     Local  200      I(4)            4     1     2                         249,250,251                       
 MPP_GET_COMPUTE_DOMAINS    Local  240                                  scalar   PRIV             94,240                            
 MPP_GET_COMPUTE_DOMAINS2D  Subr   240                                           PRIV             240                               
 MPP_GET_NTILE_COUNT        Func   231      I(4)            4           scalar   PRIV             94,231                            

Page 8           Source Listing                  DIAG_GRID_INIT
2021-06-01 08:54 Symbol Table                    diag_grid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_GET_TILE_ID            Func   232      I(4)            4     1     0        PRIV             93,232                            
 MPP_NPES                   Func   219      I(4)            4           scalar   PRIV             92,219                            
 MPP_PE                     Func   216      I(4)            4           scalar   PRIV             91,216,280,295,358,365,372,379,464
                                                                                                  ,477                              
 MPP_ROOT_PE                Func   216      I(4)            4           scalar   PRIV             92,216,280,295,358,365,372,379    
 MYPE                       Local  202      I(4)            4           scalar                    216,336,337                       
 NPES                       Local  202      I(4)            4           scalar                    219,220,221,222,223,235           
 NPESPERTILE                Local  202      I(4)            4           scalar                    235,236,237                       
 NTILES                     Local  196      I(4)            4           scalar                    231,235,330,335                   
 SHAPE                      Func   248                                  scalar                    248,249,260,261                   
 STAT                       Local  197      I(4)            4           scalar                    223,224,285,286,300,301           
 TILE                       Local  195      I(4)            4     1     1                         232,236,264,311,333               
 TRANSPOSE                  Func   312                                  scalar                    312,313                           
 VERSION                    Param  206      CHAR            7           scalar                    206                               
 WARNING                    Param  282      I(4)            4           scalar   PRIV             90,282,297,360,367,374,381        
 WRITE_VERSION_NUMBER       Subr   206                                           PRIV             90,206                            
 XBEGIN                     Local  203      I(4)            4     1     1        ALC              210,220,241,336,340               
 XEND                       Local  203      I(4)            4     1     1        ALC              212,222,241,342                   
 YBEGIN                     Local  203      I(4)            4     1     1        ALC              211,221,242,337,341               
 YEND                       Local  203      I(4)            4     1     1        ALC              213,223,242,343                   


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 DIAG_GLOBAL_GRID_TYPE.ADIMI                                                                                               ...
                            I(4)            4     400            scalar                    322,669,733,889,1117               
 DIAG_GLOBAL_GRID_TYPE.ADIMJ                                                                                               ...
                            I(4)            4     404            scalar                    323,670,734,890,1116               
 DIAG_GLOBAL_GRID_TYPE.AGLO_LAT                                                                                            ...
                            R(8)            8     192      2     1        ALC              293,299,312,315,370,371,750,751,75 
                                                                                           2,753,803,805,807,809,811,813,815, 
                                                                                           817,819,893,894,925,926,961,963,96 
                                                                                           5,967,1120                         
 DIAG_GLOBAL_GRID_TYPE.AGLO_LON                                                                                            ...
                            R(8)            8     288      2     1        ALC              294,300,313,316,377,378,750,751,75 
                                                                                           2,753,804,806,808,810,812,814,816, 
                                                                                           818,820,907,908,910,911,915,916,96 
                                                                                           2,964,966,968,1121                 
 DIAG_GLOBAL_GRID_TYPE.DIMI I(4)            4     392            scalar                    320,513                            
 DIAG_GLOBAL_GRID_TYPE.DIMJ I(4)            4     396            scalar                    321,514                            
 DIAG_GLOBAL_GRID_TYPE.GLO_LAT                                                                                             ...
                            R(8)            8     0        2     1        ALC              278,284,318,356,357,532,537,542,54 
                                                                                           7,585,586,590                      
 DIAG_GLOBAL_GRID_TYPE.GLO_LON                                                                                             ...
                            R(8)            8     96       2     1        ALC              279,285,319,363,364,531,536,541,54 
                                                                                           6,570                              
 DIAG_GLOBAL_GRID_TYPE.MYXBEGIN                                                                                            ...
                            I(4)            4     384            scalar                    336,478,599,600                    
 DIAG_GLOBAL_GRID_TYPE.MYYBEGIN                                                                                            ...
                            I(4)            4     388            scalar                    337,479,601,602                    
 DIAG_GLOBAL_GRID_TYPE.NTILES                                                                                              ...
                            I(4)            4     412            scalar                    335,444,496                        
 DIAG_GLOBAL_GRID_TYPE.PEEND                                                                                               ...

Page 9           Source Listing                  DIAG_GRID_INIT
2021-06-01 08:54 Symbol Table                    diag_grid.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                            I(4)            4     420            scalar                    236,237                            
 DIAG_GLOBAL_GRID_TYPE.PESTART                                                                                             ...
                            I(4)            4     416            scalar                    237                                
 DIAG_GLOBAL_GRID_TYPE.TILE_NUMBER                                                                                         ...
                            I(4)            4     408            scalar                    331,333,443,495,657,658,660,994,99 
                                                                                           5,1126,1127                        

Page 10          Source Listing                  DIAG_GRID_INIT
2021-06-01 08:54                                 diag_grid.F90

    345 
    346 !> @brief Unallocate the diag_global_grid variable.
    347 !! @description The <TT>diag_global_grid</TT> variable is only needed during
    348 !!     the register field calls, and then only if there are fields
    349 !!     requestion regional output.  Once all the register fields
    350 !!     calls are complete (before the first <TT>send_data</TT> call
    351 !!     this procedure can be called to free up memory.
    352   SUBROUTINE diag_grid_end()
    353 
    354     IF ( diag_grid_initialized ) THEN
    355 ! De-allocate grid
    356        IF ( allocated(diag_global_grid%glo_lat) ) THEN
    357           DEALLOCATE(diag_global_grid%glo_lat)
    358        ELSE IF ( mpp_pe() == mpp_root_pe() ) THEN
    359           CALL error_mesg('diag_grid_mod::diag_grid_end',&
    360                &'diag_global_grid%glo_lat was not allocated.', WARNING)
    361        END IF
    362 
    363        IF ( allocated(diag_global_grid%glo_lon) ) THEN
    364           DEALLOCATE(diag_global_grid%glo_lon)
    365        ELSE IF ( mpp_pe() == mpp_root_pe() ) THEN
    366           CALL error_mesg('diag_grid_mod::diag_grid_end',&
    367                &'diag_global_grid%glo_lon was not allocated.', WARNING)
    368        END IF
    369 ! De-allocate a-grid
    370        IF ( allocated(diag_global_grid%aglo_lat) ) THEN
    371           DEALLOCATE(diag_global_grid%aglo_lat)
    372        ELSE IF ( mpp_pe() == mpp_root_pe() ) THEN
    373           CALL error_mesg('diag_grid_mod::diag_grid_end',&
    374                &'diag_global_grid%aglo_lat was not allocated.', WARNING)
    375        END IF
    376 
    377        IF ( allocated(diag_global_grid%aglo_lon) ) THEN
    378           DEALLOCATE(diag_global_grid%aglo_lon)
    379        ELSE IF ( mpp_pe() == mpp_root_pe() ) THEN
    380           CALL error_mesg('diag_grid_mod::diag_grid_end',&
    381                &'diag_global_grid%aglo_lon was not allocated.', WARNING)
    382        END IF
    383 
    384        diag_grid_initialized = .FALSE.
    385     END IF
    386   END SUBROUTINE diag_grid_end

Page 11          Source Listing                  DIAG_GRID_END
2021-06-01 08:54 Entry Points                    diag_grid.F90



ENTRY POINTS

  Name                                       
                                             
 diag_grid_mod_mp_diag_grid_end_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   356                                  scalar                    356,363,370,377                   
 DIAG_GRID_END              Subr   352                                                                                              

Page 12          Source Listing                  DIAG_GRID_END
2021-06-01 08:54                                 diag_grid.F90

    387 
    388 !> @brief Find the local start and local end indexes on the local PE
    389 !!   for regional output.
    390 !! @description Given a defined region, find the local indexes on the local
    391 !!   PE surrounding the region.
    392   SUBROUTINE get_local_indexes(latStart, latEnd, lonStart, lonEnd,&
    393        & istart, iend, jstart, jend)
    394     REAL, INTENT(in) :: latStart !< lat start angles
    395     REAL, INTENT(in) :: lonStart !< lon start angles
    396     REAL, INTENT(in) :: latEnd !< lat end angles
    397     REAL, INTENT(in) :: lonEnd !< lon end angles
    398     INTEGER, INTENT(out) :: istart !< i start indexes
    399     INTEGER, INTENT(out) :: jstart !< j start indexes
    400     INTEGER, INTENT(out) :: iend !< i end indexes
    401     INTEGER, INTENT(out) :: jend !< j end indexes
    402 
    403     REAL, ALLOCATABLE, DIMENSION(:,:) :: delta_lat, delta_lon, grid_lon
    404 
    405     REAL, DIMENSION(4) :: dists_lon, dists_lat
    406     REAL :: lonEndAdj, my_lonStart, my_lonEnd
    407 
    408     INTEGER, ALLOCATABLE, DIMENSION(:,:) :: ijMin, ijMax
    409     INTEGER :: myTile, ntiles, i, j, k, dimI, dimJ, istat
    410     INTEGER :: count
    411 
    412     LOGICAL :: onMyPe
    413 
    414 !For cfsite potential fix.
    415     INTEGER :: minI
    416     INTEGER :: minJ
    417     REAL :: minimum_distance
    418     REAL :: global_min_distance
    419     INTEGER :: rank_buf
    420 
    421     IF ( .NOT. diag_grid_initialized )&
    422          & CALL error_mesg('diag_grid_mod::get_local_indexes',&
    423          &'Module not initialized, first initialze module with a call &
    424          &to diag_grid_init', FATAL)
    425 
    426 ! Make adjustment for negative longitude values
    427     if ( lonStart < 0. ) then
    428        my_lonStart = lonStart + 360.
    429     else
    430        my_lonStart = lonStart
    431     end if
    432     if ( lonEnd < 0. ) then
    433        my_lonEnd = lonEnd + 360.
    434     else
    435        my_lonEnd = lonEnd
    436     end if
    437 
    438     IF (latStart .EQ. latEnd .AND. my_lonStart .EQ. my_lonEnd) THEN
    439 
    440 !For a single point, use the a-grid longitude and latitude
    441 !values.
    442 
    443         myTile = diag_global_grid%tile_number

Page 13          Source Listing                  GET_LOCAL_INDEXES
2021-06-01 08:54                                 diag_grid.F90

    444         ntiles = diag_global_grid%ntiles
    445 
    446         allocate(ijMin(ntiles,2))
    447         ijMin = 0
    448 
    449 !Find the i,j indices of the a-grid point nearest to the
    450 !my_lonStart,latStart point.
    451         CALL find_nearest_agrid_index(latStart, &
    452                                       my_lonStart, &
    453                                       minI, &
    454                                       minJ, &
    455                                       minimum_distance)
    456 
    457 !Find the minimum distance across all ranks.
    458         global_min_distance = minimum_distance
    459         CALL mpp_min(global_min_distance)
    460 
    461 !In the case of a tie (i.e. two ranks with exactly the same
    462 !minimum distance), use the i,j values from the larger rank id.
    463         IF (global_min_distance .EQ. minimum_distance) THEN
    464             rank_buf = mpp_pe()
    465         ELSE
    466             rank_buf = -1
    467         ENDIF
    468         CALL mpp_max(rank_buf)
    469 
    470 !Sanity check.
    471         IF (rank_buf .EQ. -1) THEN
    472             CALL error_mesg("get_local_indexes", &
    473                             "No rank has minimum distance.", &
    474                             FATAL)
    475         ENDIF
    476 
    477         IF (rank_buf .EQ. mpp_pe()) THEN
    478             ijMin(mytile,1) = minI + diag_global_grid%myXbegin - 1
    479             ijMin(mytile,2) = minJ + diag_global_grid%myYbegin - 1
    480         ENDIF
    481 
    482         DO i = 1,ntiles
    483             CALL mpp_max(ijMin(i,1))
    484             CALL mpp_max(ijMin(i,2))
    485         ENDDO
    486 
    487         istart = ijMin(mytile,1)
    488         jstart = ijMin(mytile,2)
    489         iend = istart
    490         jend = jstart
    491 
    492         DEALLOCATE(ijMin)
    493     ELSE
    494 
    495         myTile = diag_global_grid%tile_number
    496         ntiles = diag_global_grid%ntiles
    497 
    498 ! Arrays to home min/max for each tile
    499         ALLOCATE(ijMin(ntiles,2), STAT=istat)
    500         IF ( istat .NE. 0 )&

Page 14          Source Listing                  GET_LOCAL_INDEXES
2021-06-01 08:54                                 diag_grid.F90

    501              & CALL error_mesg('diag_grid_mod::get_local_indexes',&
    502              &'Cannot allocate ijMin index array', FATAL)
    503         ALLOCATE(ijMax(ntiles,2), STAT=istat)
    504         IF ( istat .NE. 0 )&
    505              & CALL error_mesg('diag_grid_mod::get_local_indexes',&
    506              &'Cannot allocate ijMax index array', FATAL)
    507         ijMin = 0
    508         ijMax = 0
    509 
    510 ! There will be four points to define a region, find all four.
    511 ! Need to call the correct function depending on if the tile is a
    512 ! pole tile or not.
    513        dimI = diag_global_grid%dimI
    514        dimJ = diag_global_grid%dimJ
    515 
    516 ! Build the delta array
    517        ALLOCATE(delta_lat(dimI,dimJ), STAT=istat)
    518        IF ( istat .NE. 0 )&
    519             & CALL error_mesg('diag_grid_mod::get_local_indexes',&
    520             &'Cannot allocate latitude delta array', FATAL)
    521        ALLOCATE(delta_lon(dimI,dimJ), STAT=istat)
    522        IF ( istat .NE. 0 )&
    523             & CALL error_mesg('diag_grid_mod::get_local_indexes',&
    524             &'Cannot allocate longitude delta array', FATAL)
    525        DO j=1, dimJ
    526           DO i=1, dimI
    527              count = 0
    528              dists_lon = 0.
    529              dists_lat = 0.
    530              IF ( i < dimI ) THEN
    531                 dists_lon(1) = ABS(diag_global_grid%glo_lon(i+1,j) - diag_global_grid%glo_lon(i,j))
    532                 dists_lat(1) = ABS(diag_global_grid%glo_lat(i+1,j) - diag_global_grid%glo_lat(i,j))
    533                 count = count+1
    534              END IF
    535              IF ( j < dimJ ) THEN
    536                 dists_lon(2) = ABS(diag_global_grid%glo_lon(i,j+1) - diag_global_grid%glo_lon(i,j))
    537                 dists_lat(2) = ABS(diag_global_grid%glo_lat(i,j+1) - diag_global_grid%glo_lat(i,j))
    538                 count = count+1
    539              END IF
    540              IF ( i > 1 ) THEN
    541                 dists_lon(3) = ABS(diag_global_grid%glo_lon(i,j) - diag_global_grid%glo_lon(i-1,j))
    542                 dists_lat(3) = ABS(diag_global_grid%glo_lat(i,j) - diag_global_grid%glo_lat(i-1,j))
    543                 count = count+1
    544              END IF
    545              IF ( j > 1 ) THEN
    546                 dists_lon(4) = ABS(diag_global_grid%glo_lon(i,j) - diag_global_grid%glo_lon(i,j-1))
    547                 dists_lat(4) = ABS(diag_global_grid%glo_lat(i,j) - diag_global_grid%glo_lat(i,j-1))
    548                 count = count+1
    549              END IF
    550 
    551 ! Fix wrap around problem
    552              DO k=1, 4
    553                 IF ( dists_lon(k) > 180.0 ) THEN
    554                    dists_lon(k) = 360.0 - dists_lon(k)
    555                 END IF
    556              END DO
    557              delta_lon(i,j) = SUM(dists_lon)/real(count)

Page 15          Source Listing                  GET_LOCAL_INDEXES
2021-06-01 08:54                                 diag_grid.F90

    558              delta_lat(i,j) = SUM(dists_lat)/real(count)
    559           END DO
    560        END DO
    561 
    562        ijMin = HUGE(1)
    563        ijMax = -HUGE(1)
    564 
    565 ! Adjusted longitude array
    566        ALLOCATE(grid_lon(dimI,dimJ), STAT=istat)
    567        IF ( istat .NE. 0 )&
    568             & CALL error_mesg('diag_grid_mod::get_local_indexes',&
    569             &'Cannot allocate temporary longitude array', FATAL)
    570        grid_lon = diag_global_grid%glo_lon
    571 
    572 ! Make adjustments where required
    573        IF ( my_lonStart > my_lonEnd ) THEN
    574           WHERE ( grid_lon < my_lonStart )
    575              grid_lon = grid_lon + 360.0
    576           END WHERE
    577           lonEndAdj = my_lonEnd + 360.0
    578        ELSE
    579           lonEndAdj = my_lonEnd
    580        END IF
    581 
    582        DO j=1, dimJ-1
    583           DO i=1, dimI-1
    584              onMyPe = .false.
    585              IF ( latStart-delta_lat(i,j) <= diag_global_grid%glo_lat(i,j) .AND.&
    586                   & diag_global_grid%glo_lat(i,j) < latEnd+delta_lat(i,j) ) THEN
    587 ! Short-cut for the poles
    588                 IF ( (ABS(latStart)-delta_lat(i,j) <= 90.0 .AND.&
    589                      & 90.0 <= ABS(latEnd)+delta_lat(i,j)) .AND.&
    590                      & ABS(diag_global_grid%glo_lat(i,j)) == 90.0 ) THEN
    591                    onMyPe = .TRUE.
    592                 ELSE IF ( (my_lonStart-delta_lon(i,j) <= grid_lon(i,j) .AND.&
    593                      & grid_lon(i,j) < lonEndAdj+delta_lon(i,j)) ) THEN
    594                    onMyPe = .TRUE.
    595                 ELSE
    596                    onMyPe = .FALSE.
    597                 END IF
    598                 IF ( onMyPe ) THEN
    599                    ijMin(myTile,1) = MIN(ijMin(myTile,1),i + diag_global_grid%myXbegin - 1)
    600                    ijMax(myTile,1) = MAX(ijMax(myTile,1),i + diag_global_grid%myXbegin - 1)
    601                    ijMin(myTile,2) = MIN(ijMin(myTile,2),j + diag_global_grid%myYbegin - 1)
    602                    ijMax(myTile,2) = MAX(ijMax(myTile,2),j + diag_global_grid%myYbegin - 1)
    603                 END IF
    604              END IF
    605           END DO
    606        END DO
    607        DEALLOCATE(delta_lon)
    608        DEALLOCATE(delta_lat)
    609        DEALLOCATE(grid_lon)
    610 
    611 ! Global min/max reduce
    612        DO i=1, ntiles
    613           CALL mpp_min(ijMin(i,1))
    614           CALL mpp_max(ijMax(i,1))

Page 16          Source Listing                  GET_LOCAL_INDEXES
2021-06-01 08:54                                 diag_grid.F90

    615           CALL mpp_min(ijMin(i,2))
    616           CALL mpp_max(ijMax(i,2))
    617        END DO
    618 
    619        IF ( ijMin(myTile,1) == HUGE(1) .OR. ijMax(myTile,1) == -HUGE(1) ) THEN
    620           ijMin(myTile,1) = 0
    621           ijMax(myTile,1) = 0
    622        END IF
    623        IF ( ijMin(myTile,2) == HUGE(1) .OR. ijMax(myTile,2) == -HUGE(1) ) THEN
    624           ijMin(myTile,2) = 0
    625           ijMax(myTile,2) = 0
    626        END IF
    627 
    628        istart = ijMin(myTile,1)
    629        jstart = ijMin(myTile,2)
    630        iend = ijMax(myTile,1)
    631        jend = ijMax(myTile,2)
    632 
    633        DEALLOCATE(ijMin)
    634        DEALLOCATE(ijMax)
    635     END IF
    636 
    637   END SUBROUTINE get_local_indexes


ENTRY POINTS

  Name                                           
                                                 
 diag_grid_mod_mp_get_local_indexes_             

Page 17          Source Listing                  GET_LOCAL_INDEXES
2021-06-01 08:54 Symbol Table                    diag_grid.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   531                                  scalar                    531,532,536,537,541,542,546,547,58
                                                                                                  8,589,590                         
 COUNT                      Local  410      I(4)            4           scalar                    527,533,538,543,548,557,558       
 DELTA_LAT                  Local  403      R(8)            8     2     1        ALC              517,558,585,586,588,589,608       
 DELTA_LON                  Local  403      R(8)            8     2     1        ALC              521,557,592,593,607               
 DIMI                       Local  409      I(4)            4           scalar                    513,517,521,526,530,566,583       
 DIMJ                       Local  409      I(4)            4           scalar                    514,517,521,525,535,566,582       
 DISTS_LAT                  Local  405      R(8)            8     1     4                         529,532,537,542,547,558           
 DISTS_LON                  Local  405      R(8)            8     1     4                         528,531,536,541,546,553,554,557   
 GET_LOCAL_INDEXES          Subr   392                                                                                              
 GLOBAL_MIN_DISTANCE        Local  418      R(8)            8           scalar                    458,459,463                       
 GRID_LON                   Local  403      R(8)            8     2     1        ALC              566,570,574,575,592,593,609       
 HUGE                       Func   562                                  scalar                    562,563,619,623                   
 I                          Local  409      I(4)            4           scalar                    482,483,484,526,530,531,532,536,53
                                                                                                  7,540,541,542,546,547,557,558,583,
                                                                                                  585,586,588,589,590,592,593,599,60
                                                                                                  0,612,613,614,615,616             
 IEND                       Dummy  393      I(4)            4           scalar   ARG,OUT          489,630                           
 IJMAX                      Local  408      I(4)            4     2     1        ALC              503,508,563,600,602,614,616,619,62
                                                                                                  1,623,625,630,631,634             
 IJMIN                      Local  408      I(4)            4     2     1        ALC              446,447,478,479,483,484,487,488,49
                                                                                                  2,499,507,562,599,601,613,615,619,
                                                                                                  620,623,624,628,629,633           
 ISTART                     Dummy  393      I(4)            4           scalar   ARG,OUT          487,489,628                       
 ISTAT                      Local  409      I(4)            4           scalar                    499,500,503,504,517,518,521,522,56
                                                                                                  6,567                             
 J                          Local  409      I(4)            4           scalar                    525,531,532,535,536,537,541,542,54
                                                                                                  5,546,547,557,558,582,585,586,588,
                                                                                                  589,590,592,593,601,602           
 JEND                       Dummy  393      I(4)            4           scalar   ARG,OUT          490,631                           
 JSTART                     Dummy  393      I(4)            4           scalar   ARG,OUT          488,490,629                       
 K                          Local  409      I(4)            4           scalar                    552,553,554                       
 LATEND                     Dummy  392      R(8)            8           scalar   ARG,IN           438,586,589                       
 LATSTART                   Dummy  392      R(8)            8           scalar   ARG,IN           438,451,585,588                   
 LONEND                     Dummy  392      R(8)            8           scalar   ARG,IN           432,433,435                       
 LONENDADJ                  Local  406      R(8)            8           scalar                    577,579,593                       
 LONSTART                   Dummy  392      R(8)            8           scalar   ARG,IN           427,428,430                       
 MAX                        Func   600                                  scalar                    600,602                           
 MIN                        Func   599                                  scalar                    599,601                           
 MINI                       Local  415      I(4)            4           scalar                    453,478                           
 MINIMUM_DISTANCE           Local  417      R(8)            8           scalar                    455,458,463                       
 MINJ                       Local  416      I(4)            4           scalar                    454,479                           
 MPP_MAX                    Local  468                                  scalar   PRIV             92,468,483,484,614,616            
 MPP_MAX_INT4_0D            Subr   468                                           PRIV             468,483,484,614,616               
 MPP_MIN                    Local  459                                  scalar   PRIV             92,459,613,615                    
 MPP_MIN_INT4_0D            Subr   613                                           PRIV             613,615                           
 MPP_MIN_REAL8_0D           Subr   459                                           PRIV             459                               
 MYTILE                     Local  409      I(4)            4           scalar                    443,478,479,487,488,495,599,600,60
                                                                                                  1,602,619,620,621,623,624,625,628,
                                                                                                  629,630,631                       
 MY_LONEND                  Local  406      R(8)            8           scalar                    433,435,438,573,577,579           

Page 18          Source Listing                  GET_LOCAL_INDEXES
2021-06-01 08:54 Symbol Table                    diag_grid.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MY_LONSTART                Local  406      R(8)            8           scalar                    428,430,438,452,573,574,592       
 NTILES                     Local  409      I(4)            4           scalar                    444,446,482,496,499,503,612       
 ONMYPE                     Local  412      L(4)            4           scalar                    584,591,594,596,598               
 RANK_BUF                   Local  419      I(4)            4           scalar                    464,466,468,471,477               
 REAL                       Func   557                                  scalar                    557,558                           
 SUM                        Func   557                                  scalar                    557,558                           

Page 19          Source Listing                  GET_LOCAL_INDEXES
2021-06-01 08:54                                 diag_grid.F90

    638 
    639 !> @brief Find the indices of the nearest grid point of the a-grid to the
    640 !!   specified (lon,lat) location on the local PE. if desired point not
    641 !!   within domain of local PE, return (0,0) as the indices.
    642   SUBROUTINE get_local_indexes2(lat, lon, iindex, jindex)
    643     REAL, INTENT(in) :: lat !< lat location
    644     REAL, INTENT(in) :: lon !< lon location
    645     INTEGER, INTENT(out) :: iindex !< i indexes
    646     INTEGER, INTENT(out) :: jindex !< j indexes
    647 
    648     INTEGER  :: indexes(2)
    649 
    650     IF ( .NOT. diag_grid_initialized )&
    651          & CALL error_mesg('diag_grid_mod::get_local_indexes2',&
    652          &'Module not initialized, first initialze module with a call &
    653          &to diag_grid_init', FATAL)
    654 
    655     indexes = 0
    656 
    657     IF ( MOD(diag_global_grid%tile_number,3) == 0 ) THEN
    658        IF ( lat > 30.0 .AND. diag_global_grid%tile_number == 3 ) THEN
    659           indexes(:) = find_pole_index_agrid(lat,lon)
    660        ELSE IF ( lat < -30.0 .AND. diag_global_grid%tile_number == 6 ) THEN
    661           indexes(:) = find_pole_index_agrid(lat,lon)
    662        ENDIF
    663     ELSE
    664        indexes(:) = find_equator_index_agrid(lat,lon)
    665     END IF
    666 
    667     iindex = indexes(1)
    668     jindex = indexes(2)
    669     IF (iindex ==  diag_global_grid%adimI -1 .OR.&
    670         jindex ==  diag_global_grid%adimJ -1 ) THEN
    671       iindex = 0
    672       jindex = 0
    673     ENDIF
    674 
    675   END SUBROUTINE get_local_indexes2

Page 20          Source Listing                  GET_LOCAL_INDEXES2
2021-06-01 08:54 Entry Points                    diag_grid.F90



ENTRY POINTS

  Name                                            
                                                  
 diag_grid_mod_mp_get_local_indexes2_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIND_EQUATOR_INDEX_AGRID@0 Local  664      I(4)            4     1     2                                                           
 FIND_POLE_INDEX_AGRID@0    Local  659      I(4)            4     1     2                                                           
 GET_LOCAL_INDEXES2         Subr   642                                                                                              
 IINDEX                     Dummy  642      I(4)            4           scalar   ARG,OUT          667,669,671                       
 INDEXES                    Local  648      I(4)            4     1     2                         655,659,661,664,667,668           
 JINDEX                     Dummy  642      I(4)            4           scalar   ARG,OUT          668,670,672                       
 LAT                        Dummy  642      R(8)            8           scalar   ARG,IN           658,659,660,661,664               
 LON                        Dummy  642      R(8)            8           scalar   ARG,IN           659,661,664                       
 MOD                        Func   657                                  scalar                    657                               

Page 21          Source Listing                  GET_LOCAL_INDEXES2
2021-06-01 08:54                                 diag_grid.F90

    676 
    677 !> @brief Convert an angle in radian to degrees.
    678 !! @description Given a scalar, or an array of angles in radians this
    679 !!   function will return a scalar or array (of the same
    680 !!   dimension) of angles in degrees.
    681 !! @return Scalar or array (depending on the size of angle) of angles in
    682 !!   degrees.
    683   PURE ELEMENTAL REAL FUNCTION rad2deg(angle)
    684     REAL, INTENT(in) :: angle !< Scalar or array of angles in radians.
    685 
    686     rad2deg = RAD_TO_DEG * angle
    687   END FUNCTION rad2deg


ENTRY POINTS

  Name                                 
                                       
 diag_grid_mod_mp_rad2deg_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANGLE                      Dummy  683      R(8)            8           scalar   ARG,IN           686                               
 RAD2DEG                    Func   683      R(8)            8           scalar                    686                               
 RAD_TO_DEG                 Param  686      R(8)            8           scalar   PRIV             89,686                            

Page 22          Source Listing                  RAD2DEG
2021-06-01 08:54                                 diag_grid.F90

    688 
    689 !> @brief Convert an angle in degrees to radians.
    690 !! @description Given a scalar, or an array of angles in degrees this
    691 !!   function will return a scalar or array (of the same
    692 !!   dimension) of angles in radians.
    693 !! @return Scalar or array (depending on the size of angle) of angles in
    694 !!   radians.
    695   PURE ELEMENTAL REAL FUNCTION deg2rad(angle)
    696     REAL, INTENT(in) :: angle !< Scalar or array of angles in degrees.
    697 
    698     deg2rad = DEG_TO_RAD * angle
    699   END FUNCTION deg2rad


ENTRY POINTS

  Name                                 
                                       
 diag_grid_mod_mp_deg2rad_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANGLE                      Dummy  695      R(8)            8           scalar   ARG,IN           698                               
 DEG2RAD                    Func   695      R(8)            8           scalar                    698,1032,1033,1068,1069,1070,1071 
 DEG_TO_RAD                 Param  698      R(8)            8           scalar   PRIV             89,698                            

Page 23          Source Listing                  DEG2RAD
2021-06-01 08:54                                 diag_grid.F90

    700 
    701 !> @brief Return the closest index (i,j) to the given (lat,lon) point.
    702 !! @description This function searches a pole a-grid tile looking for the grid point
    703 !!   closest to the give (lat, lon) location, and returns the i
    704 !!   and j indexes of the point.
    705 !! @return The (i, j) location of the closest grid to the given (lat,
    706 !!   lon) location.
    707   PURE FUNCTION find_pole_index_agrid(lat, lon)
    708     INTEGER, DIMENSION(2) :: find_pole_index_agrid !< The (i, j) location of the closest grid to the given (lat,
    709 !! lon) location.
    710     REAL, INTENT(in) :: lat !< Latitude location
    711     REAL, INTENT(in) :: lon !< Longitude location
    712 
    713     INTEGER :: indxI !< Indexes to be returned.
    714     INTEGER :: indxJ !< Indexes to be returned.
    715     INTEGER :: dimI !< Size of the grid dimensions
    716     INTEGER :: dimJ !< Size of the grid dimensions
    717     INTEGER :: i !< Count indexes
    718     INTEGER :: j !< Count indexes
    719     INTEGER :: nearestCorner !< index of the nearest corner.
    720     INTEGER, DIMENSION(4,2) :: ijArray !< indexes of the cornerPts and pntDistances arrays
    721     REAL :: llat, llon
    722     REAL :: maxCtrDist !< maximum distance to center of grid
    723     REAL, DIMENSION(4) :: pntDistances !< distance from origPt to corner
    724     TYPE(point) :: origPt !< Original point
    725     REAL, DIMENSION(4,2) :: cornerPts !< Corner points using (lat,lon)
    726     TYPE(point), DIMENSION(9) :: points !< xyz of 8 nearest neighbors
    727     REAL, DIMENSION(9) :: distSqrd !< distance between origPt and points(:)
    728 
    729 ! Set the inital fail values for indxI and indxJ
    730     indxI = 0
    731     indxJ = 0
    732 
    733     dimI = diag_global_grid%adimI
    734     dimJ = diag_global_grid%adimJ
    735 
    736 ! Since the poles have an non-unique longitude value, make a small correction if looking for one of the poles.
    737     IF ( lat == 90.0 ) THEN
    738        llat = lat - .1
    739     ELSE IF ( lat == -90.0 ) THEN
    740        llat = lat + .1
    741     ELSE
    742        llat = lat
    743     END IF
    744     llon = lon
    745 
    746     origPt = latlon2xyz(llat,llon)
    747 
    748     iLoop: DO i=0, dimI-2
    749        jLoop: DO j = 0, dimJ-2
    750           cornerPts = RESHAPE( (/ diag_global_grid%aglo_lat(i,  j),  diag_global_grid%aglo_lon(i,  j),&
    751                &                  diag_global_grid%aglo_lat(i+1,j+1),diag_global_grid%aglo_lon(i+1,j+1),&
    752                &                  diag_global_grid%aglo_lat(i+1,j),  diag_global_grid%aglo_lon(i+1,j),&
    753                &                  diag_global_grid%aglo_lat(i,  j+1),diag_global_grid%aglo_lon(i,  j+1) /),&
    754                &               (/ 4, 2 /), ORDER=(/2,1/) )
    755 ! Find the maximum half distance of the corner points
    756           maxCtrDist = MAX(gCirDistance(cornerPts(1,1),cornerPts(1,2), cornerPts(2,1),cornerPts(2,2)),&

Page 24          Source Listing                  FIND_POLE_INDEX_AGRID
2021-06-01 08:54                                 diag_grid.F90

    757                &           gCirDistance(cornerPts(3,1),cornerPts(3,2), cornerPts(4,1),cornerPts(4,2)))
    758 
    759 ! Find the distance of the four corner points to the point of interest.
    760           pntDistances = gCirDistance(cornerPts(:,1),cornerPts(:,2), llat,llon)
    761 
    762           IF ( (MINVAL(pntDistances) <= maxCtrDist) .AND. (i*j.NE.0) ) THEN
    763 ! Set up the i,j index array
    764              ijArray = RESHAPE( (/ i, j, i+1, j+1, i+1, j, i, j+1 /), (/ 4, 2 /), ORDER=(/2,1/) )
    765 
    766 ! the nearest point index
    767              nearestCorner = MINLOC(pntDistances,1)
    768 
    769              indxI = ijArray(nearestCorner,1)
    770              indxJ = ijArray(nearestCorner,2)
    771 
    772              EXIT iLoop
    773           END IF
    774        END DO jLoop
    775     END DO iLoop
    776 
    777 
    778 ! Make sure we have indexes in the correct range
    779     valid: IF (  (indxI <= 0 .OR. dimI-1 <= indxI) .OR. &
    780          &       (indxJ <= 0 .OR. dimJ-1 <= indxJ) ) THEN
    781        indxI = 0
    782        indxJ = 0
    783     ELSE ! indxI and indxJ are valid.
    784 ! Since we are looking for the closest grid point to the
    785 ! (lat,lon) point, we need to check the surrounding
    786 ! points.  The indexes for the variable points are as follows
    787 !
    788 ! 1---4---7
    789 ! |   |   |
    790 ! 2---5---8
    791 ! |   |   |
    792 ! 3---6---9
    793 
    794 ! Set the 'default' values for points(:) x,y,z to some large
    795 ! value.
    796        DO i=1, 9
    797           points(i)%x = 1.0e20
    798           points(i)%y = 1.0e20
    799           points(i)%z = 1.0e20
    800        END DO
    801 
    802 ! All the points around the i,j indexes
    803        points(1) = latlon2xyz(diag_global_grid%aglo_lat(indxI-1,indxJ+1),&
    804             &                 diag_global_grid%aglo_lon(indxI-1,indxJ+1))
    805        points(2) = latlon2xyz(diag_global_grid%aglo_lat(indxI-1,indxJ),&
    806             &                 diag_global_grid%aglo_lon(indxI-1,indxJ))
    807        points(3) = latlon2xyz(diag_global_grid%aglo_lat(indxI-1,indxJ-1),&
    808             &                 diag_global_grid%aglo_lon(indxI-1,indxJ-1))
    809        points(4) = latlon2xyz(diag_global_grid%aglo_lat(indxI,  indxJ+1),&
    810             &                 diag_global_grid%aglo_lon(indxI,  indxJ+1))
    811        points(5) = latlon2xyz(diag_global_grid%aglo_lat(indxI,  indxJ),&
    812             &                 diag_global_grid%aglo_lon(indxI,  indxJ))
    813        points(6) = latlon2xyz(diag_global_grid%aglo_lat(indxI,  indxJ-1),&

Page 25          Source Listing                  FIND_POLE_INDEX_AGRID
2021-06-01 08:54                                 diag_grid.F90

    814             &                 diag_global_grid%aglo_lon(indxI,  indxJ-1))
    815        points(7) = latlon2xyz(diag_global_grid%aglo_lat(indxI+1,indxJ+1),&
    816             &                 diag_global_grid%aglo_lon(indxI+1,indxJ+1))
    817        points(8) = latlon2xyz(diag_global_grid%aglo_lat(indxI+1,indxJ),&
    818             &                 diag_global_grid%aglo_lon(indxI+1,indxJ))
    819        points(9) = latlon2xyz(diag_global_grid%aglo_lat(indxI+1,indxJ-1),&
    820             &                 diag_global_grid%aglo_lon(indxI+1,indxJ-1))
    821 
    822 
    823 ! Calculate the distance squared between the points(:) and the origPt
    824        distSqrd = distanceSqrd(origPt, points)
    825 
    826        SELECT CASE (MINLOC(distSqrd,1))
    827        CASE ( 1 )
    828           indxI = indxI-1
    829           indxJ = indxJ+1
    830        CASE ( 2 )
    831           indxI = indxI-1
    832           indxJ = indxJ
    833        CASE ( 3 )
    834           indxI = indxI-1
    835           indxJ = indxJ-1
    836        CASE ( 4 )
    837           indxI = indxI
    838           indxJ = indxJ+1
    839        CASE ( 5 )
    840           indxI = indxI
    841           indxJ = indxJ
    842        CASE ( 6 )
    843           indxI = indxI
    844           indxJ = indxJ-1
    845        CASE ( 7 )
    846           indxI = indxI+1
    847           indxJ = indxJ+1
    848        CASE ( 8 )
    849           indxI = indxI+1
    850           indxJ = indxJ
    851        CASE ( 9 )
    852           indxI = indxI+1
    853           indxJ = indxJ-1
    854        CASE DEFAULT
    855           indxI = 0
    856           indxJ = 0
    857        END SELECT
    858     END IF valid
    859 
    860 ! Set the return value for the funtion
    861     find_pole_index_agrid = (/indxI, indxJ/)
    862   END FUNCTION find_pole_index_agrid

Page 26          Source Listing                  FIND_POLE_INDEX_AGRID
2021-06-01 08:54 Entry Points                    diag_grid.F90



ENTRY POINTS

  Name                                               
                                                     
 diag_grid_mod_mp_find_pole_index_agrid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CORNERPTS                  Local  725      R(8)            8     2     8                         750,756,757,760                   
 DIMI                       Local  715      I(4)            4           scalar                    733,748,779                       
 DIMJ                       Local  716      I(4)            4           scalar                    734,749,780                       
 DISTANCESQRD@0             Local  824      R(8)            8           scalar                                                      
 DISTSQRD                   Local  727      R(8)            8     1     9                         824,826                           
 FIND_POLE_INDEX_AGRID      Func   707      I(4)            4     1     2                         659,661,861                       
 GCIRDISTANCE@0             Local  756      R(8)            8           scalar                                                      
 I                          Local  717      I(4)            4           scalar                    748,750,751,752,753,762,764,796,79
                                                                                                  7,798,799                         
 IJARRAY                    Local  720      I(4)            4     2     8                         764,769,770                       
 ILOOP                      Label  748                                  scalar                    772,775                           
 INDXI                      Local  713      I(4)            4           scalar                    730,769,779,781,803,804,805,806,80
                                                                                                  7,808,809,810,811,812,813,814,815,
                                                                                                  816,817,818,819,820,828,831,834,83
                                                                                                  7,840,843,846,849,852,855,861     
 INDXJ                      Local  714      I(4)            4           scalar                    731,770,780,782,803,804,805,806,80
                                                                                                  7,808,809,810,811,812,813,814,815,
                                                                                                  816,817,818,819,820,829,832,835,83
                                                                                                  8,841,844,847,850,853,856,861     
 J                          Local  718      I(4)            4           scalar                    749,750,751,752,753,762,764       
 JLOOP                      Label  749                                  scalar                    774                               
 LAT                        Dummy  707      R(8)            8           scalar   ARG,IN           737,738,739,740,742               
 LATLON2XYZ@0               Local  746      POINT           24          scalar                                                      
 LLAT                       Local  721      R(8)            8           scalar                    738,740,742,746,760               
 LLON                       Local  721      R(8)            8           scalar                    744,746,760                       
 LON                        Dummy  707      R(8)            8           scalar   ARG,IN           744                               
 MAX                        Func   756                                  scalar                    756                               
 MAXCTRDIST                 Local  722      R(8)            8           scalar                    756,762                           
 MINLOC                     Func   767                                  scalar                    767,826                           
 MINVAL                     Func   762                                  scalar                    762                               
 NEARESTCORNER              Local  719      I(4)            4           scalar                    767,769,770                       
 ORIGPT                     Local  724      POINT           24          scalar                    746,824                           
 PNTDISTANCES               Local  723      R(8)            8     1     4                         760,762,767                       
 POINT                      Type   724                      24          scalar   PRIV             156,724,726,881,882,1014,1050     
 POINTS                     Local  726      RECORD          24    1     9                         797,798,799,803,805,807,809,811,81
                                                                                                  3,815,817,819,824                 
 RESHAPE                    Func   750                                  scalar                    750,764                           
 VALID                      Label  779                                  scalar                    858                               



Page 27          Source Listing                  FIND_POLE_INDEX_AGRID
2021-06-01 08:54 Symbol Table                    diag_grid.F90

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 POINT.X                    R(8)            8     0              scalar                    797,953,1036,1052                  
 POINT.Y                    R(8)            8     8              scalar                    798,954,1037,1053                  
 POINT.Z                    R(8)            8     16             scalar                    799,955,1038,1054                  

Page 28          Source Listing                  FIND_POLE_INDEX_AGRID
2021-06-01 08:54                                 diag_grid.F90

    863 
    864 !> @brief Return the closest index (i,j) to the given (lat,lon) point.
    865 !! @description This function searches a equator grid tile looking for the grid point
    866 !!   closest to the give (lat, lon) location, and returns the i
    867 !!   and j indexes of the point.
    868 !! @return The (i, j) location of the closest grid to the given (lat,
    869 !!   lon) location.
    870   PURE FUNCTION find_equator_index_agrid(lat, lon)
    871     INTEGER, DIMENSION(2) :: find_equator_index_agrid !< The (i, j) location of the closest grid to the given (lat,
    872 !! lon) location.
    873     REAL, INTENT(in) :: lat !< Latitude location
    874     REAL, INTENT(in) :: lon !< Longitude location
    875 
    876     INTEGER :: indxI, indxJ !< Indexes to be returned.
    877     INTEGER :: indxI_tmp !< Hold the indxI value if on tile 3 or 4
    878     INTEGER :: dimI, dimJ !< Size of the grid dimensions
    879     INTEGER :: i,j !< Count indexes
    880     INTEGER :: jstart, jend, nextj !< j counting variables
    881     TYPE(point) :: origPt !< Original point
    882     TYPE(point), DIMENSION(4) :: points !< xyz of 8 nearest neighbors
    883     REAL, DIMENSION(4) :: distSqrd !< distance between origPt and points(:)
    884 
    885 ! Set the inital fail values for indxI and indxJ
    886     indxI = 0
    887     indxJ = 0
    888 
    889     dimI = diag_global_grid%adimI
    890     dimJ = diag_global_grid%adimJ
    891 
    892 ! check to see if the 'fix' for the latitude index is needed
    893     IF ( diag_global_grid%aglo_lat(1,1) > &
    894          &diag_global_grid%aglo_lat(1,2) ) THEN
    895 ! reverse the j search
    896        jstart = dimJ-1
    897        jend = 1
    898        nextj = -1
    899     ELSE
    900        jstart = 0
    901        jend = dimJ-2
    902        nextJ = 1
    903     END IF
    904 
    905 ! find the I index
    906     iLoop: DO i=0, dimI-2
    907        IF (   diag_global_grid%aglo_lon(i,0) >&
    908             & diag_global_grid%aglo_lon(i+1,0) ) THEN
    909 ! We are at the 0 longitudal line
    910           IF (   (diag_global_grid%aglo_lon(i,0) <= lon .AND. lon <= 360.) .OR.&
    911                & (0. <= lon .AND. lon < diag_global_grid%aglo_lon(i+1, 0)) ) THEN
    912              indxI = i
    913              EXIT iLoop
    914           END IF
    915        ELSEIF ( diag_global_grid%aglo_lon(i,0) <= lon .AND.&
    916             &   lon <= diag_global_grid%aglo_lon(i+1,0) ) THEN
    917           indxI = i
    918           EXIT iLoop
    919        END IF

Page 29          Source Listing                  FIND_EQUATOR_INDEX_AGRID
2021-06-01 08:54                                 diag_grid.F90

    920     END DO iLoop
    921 
    922 ! Find the J index
    923     IF ( indxI > 0 ) THEN
    924        jLoop: DO j=jstart, jend, nextj
    925           IF (   diag_global_grid%aglo_lat(indxI,j) <= lat .AND.&
    926                & lat <= diag_global_grid%aglo_lat(indxI,j+nextj) ) THEN
    927              indxJ = j
    928              EXIT jLoop
    929           END IF
    930        END DO jLoop
    931     END IF
    932 
    933 ! Make sure we have indexes in the correct range
    934     valid: IF ( (indxI <= 0 .OR. dimI-1 < indxI) .OR. &
    935          &      (indxJ <= 0 .OR. dimJ-1 < indxJ) ) THEN
    936        indxI = 0
    937        indxJ = 0
    938     ELSE ! indxI and indxJ are valid.
    939 ! Since we are looking for the closest grid point to the
    940 ! (lat,lon) point, we need to check the surrounding
    941 ! points.  The indexes for the variable points are as follows
    942 !
    943 ! 1---3
    944 ! |   |
    945 ! 2---4
    946 
    947 ! The original point
    948        origPt = latlon2xyz(lat,lon)
    949 
    950 ! Set the 'default' values for points(:) x,y,z to some large
    951 ! value.
    952        DO i=1, 4
    953           points(i)%x = 1.0e20
    954           points(i)%y = 1.0e20
    955           points(i)%z = 1.0e20
    956        END DO
    957 
    958 ! The original point
    959        origPt = latlon2xyz(lat,lon)
    960 
    961        points(1) = latlon2xyz(diag_global_grid%aglo_lat(indxI,indxJ),&
    962             &                 diag_global_grid%aglo_lon(indxI,indxJ))
    963        points(2) = latlon2xyz(diag_global_grid%aglo_lat(indxI,indxJ+nextj),&
    964             &                 diag_global_grid%aglo_lon(indxI,indxJ+nextj))
    965        points(3) = latlon2xyz(diag_global_grid%aglo_lat(indxI+1,indxJ+nextj),&
    966             &                 diag_global_grid%aglo_lon(indxI+1,indxJ+nextj))
    967        points(4) = latlon2xyz(diag_global_grid%aglo_lat(indxI+1,indxJ),&
    968             &                 diag_global_grid%aglo_lon(indxI+1,indxJ))
    969 
    970 ! Find the distance between the original point and the four
    971 ! grid points
    972        distSqrd = distanceSqrd(origPt, points)
    973 
    974        SELECT CASE (MINLOC(distSqrd,1))
    975        CASE ( 1 )
    976           indxI = indxI;

Page 30          Source Listing                  FIND_EQUATOR_INDEX_AGRID
2021-06-01 08:54                                 diag_grid.F90

    977           indxJ = indxJ;
    978        CASE ( 2 )
    979           indxI = indxI;
    980           indxJ = indxJ+nextj;
    981        CASE ( 3 )
    982           indxI = indxI+1;
    983           indxJ = indxJ+nextj;
    984        CASE ( 4 )
    985           indxI = indxI+1;
    986           indxJ = indxJ;
    987        CASE DEFAULT
    988           indxI = 0;
    989           indxJ = 0;
    990        END SELECT
    991 
    992 ! If we are on tile 3 or 4, then the indxI and indxJ are
    993 ! reversed due to the transposed grids.
    994        IF (   diag_global_grid%tile_number == 4 .OR.&
    995             & diag_global_grid%tile_number == 5 ) THEN
    996           indxI_tmp = indxI
    997           indxI = indxJ
    998           indxJ = indxI_tmp
    999        END IF
   1000     END IF valid
   1001 
   1002 ! Set the return value for the function
   1003     find_equator_index_agrid = (/indxI, indxJ/)
   1004   END FUNCTION find_equator_index_agrid

Page 31          Source Listing                  FIND_EQUATOR_INDEX_AGRID
2021-06-01 08:54 Entry Points                    diag_grid.F90



ENTRY POINTS

  Name                                                  
                                                        
 diag_grid_mod_mp_find_equator_index_agrid_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIMI                       Local  878      I(4)            4           scalar                    889,906,934                       
 DIMJ                       Local  878      I(4)            4           scalar                    890,896,901,935                   
 DISTSQRD                   Local  883      R(8)            8     1     4                         972,974                           
 FIND_EQUATOR_INDEX_AGRID   Func   870      I(4)            4     1     2                         664,1003                          
 I                          Local  879      I(4)            4           scalar                    906,907,908,910,911,912,915,916,91
                                                                                                  7,952,953,954,955                 
 ILOOP                      Label  906                                  scalar                    913,918,920                       
 INDXI                      Local  876      I(4)            4           scalar                    886,912,917,923,925,926,934,936,96
                                                                                                  1,962,963,964,965,966,967,968,976,
                                                                                                  979,982,985,988,996,997,1003      
 INDXI_TMP                  Local  877      I(4)            4           scalar                    996,998                           
 INDXJ                      Local  876      I(4)            4           scalar                    887,927,935,937,961,962,963,964,96
                                                                                                  5,966,967,968,977,980,983,986,989,
                                                                                                  997,998,1003                      
 J                          Local  879      I(4)            4           scalar                    924,925,926,927                   
 JEND                       Local  880      I(4)            4           scalar                    897,901,924                       
 JLOOP                      Label  924                                  scalar                    928,930                           
 JSTART                     Local  880      I(4)            4           scalar                    896,900,924                       
 LAT                        Dummy  870      R(8)            8           scalar   ARG,IN           925,926,948,959                   
 LON                        Dummy  870      R(8)            8           scalar   ARG,IN           910,911,915,916,948,959           
 MINLOC                     Func   974                                  scalar                    974                               
 NEXTJ                      Local  880      I(4)            4           scalar                    898,902,924,926,963,964,965,966,98
                                                                                                  0,983                             
 ORIGPT                     Local  881      POINT           24          scalar                    948,959,972                       
 POINTS                     Local  882      RECORD          24    1     4                         953,954,955,961,963,965,967,972   
 VALID                      Label  934                                  scalar                    1000                              

Page 32          Source Listing                  FIND_EQUATOR_INDEX_AGRID
2021-06-01 08:54                                 diag_grid.F90

   1005 
   1006 !> @brief Return the (x,y,z) position of a given (lat,lon) point.
   1007 !! @description Given a specific (lat, lon) point on the Earth, return the
   1008 !!   corresponding (x,y,z) location.  The return of latlon2xyz
   1009 !!   will be either a scalar or an array of the same size as lat
   1010 !!   and lon.
   1011 !! @return The return of latlon2xyz
   1012 !!   will be either a scalar or an array of the same size as lat
   1013 !!   and lon.
   1014   PURE ELEMENTAL TYPE(point) FUNCTION latlon2xyz(lat, lon)
   1015     REAL, INTENT(in) :: lat !< The latitude of the (x,y,z) location to find.  <TT>lat</TT>
   1016 !! can be either a scalar or array.  <TT>lat</TT> must be of the
   1017 !! same rank / size as <TT>lon</TT>.  This function assumes
   1018 !! <TT>lat</TT> is in the range [-90,90].
   1019     REAL, INTENT(in) :: lon !< The longitude of the (x,y,z) location to find.  <TT>lon</TT>
   1020 !! can be either a scalar or array.  <TT>lon</TT> must be of the
   1021 !! same rank / size as <TT>lat</TT>.  This function assumes
   1022 !! <TT>lon</TT> is in the range [0,360].
   1023 
   1024 ! lat/lon angles in radians
   1025     REAL :: theta !< lat angles in radians
   1026     REAL :: phi   !< lon angles in radians
   1027 
   1028 ! Convert the lat lon values to radians The lat values passed in
   1029 ! are in the range [-90,90], but we need to have a radian range
   1030 ! [0,pi], where 0 is at the north pole.  This is the reason for
   1031 ! the subtraction from 90
   1032     theta = deg2rad(90.-lat)
   1033     phi = deg2rad(lon)
   1034 
   1035 ! Calculate the x,y,z point
   1036     latlon2xyz%x = RADIUS * SIN(theta) * COS(phi)
   1037     latlon2xyz%y = RADIUS * SIN(theta) * SIN(phi)
   1038     latlon2xyz%z = RADIUS * COS(theta)
   1039   END FUNCTION latlon2xyz

Page 33          Source Listing                  LATLON2XYZ
2021-06-01 08:54 Entry Points                    diag_grid.F90



ENTRY POINTS

  Name                                    
                                          
 diag_grid_mod_mp_latlon2xyz_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COS                        Func   1036                                 scalar                    1036,1038                         
 LAT                        Dummy  1014     R(8)            8           scalar   ARG,IN           1032                              
 LATLON2XYZ                 Func   1014     RECORD          24          scalar                    746,803,805,807,809,811,813,815,81
                                                                                                  7,819,948,959,961,963,965,967,1036
                                                                                                  ,1037,1038                        
 LON                        Dummy  1014     R(8)            8           scalar   ARG,IN           1033                              
 PHI                        Local  1026     R(8)            8           scalar                    1033,1036,1037                    
 RADIUS                     Param  1036     R(8)            8           scalar   PRIV             89,1036,1037,1038,1073,1115       
 SIN                        Func   1036                                 scalar                    1036,1037                         
 THETA                      Local  1025     R(8)            8           scalar                    1032,1036,1037,1038               

Page 34          Source Listing                  LATLON2XYZ
2021-06-01 08:54                                 diag_grid.F90

   1040 
   1041 !> @brief Find the distance between two points in the Cartesian
   1042 !!   coordinate space.
   1043 !! @description <TT>distanceSqrd</TT> will find the distance squared between
   1044 !!   two points in the xyz coordinate space.  <TT>pt1</TT> and <TT>
   1045 !!   pt2</TT> can either be both scalars, both arrays of the same
   1046 !!   size, or one a scalar and one an array.  The return value
   1047 !!   will be a scalar or array of the same size as the input array.
   1048 !! @return The return value will be a scalar or array of the same size as the input array.
   1049   PURE ELEMENTAL REAL FUNCTION distanceSqrd(pt1, pt2)
   1050     TYPE(point), INTENT(in) :: pt1, pt2
   1051 
   1052     distanceSqrd = (pt1%x-pt2%x)**2 +&
   1053          &         (pt1%y-pt2%y)**2 +&
   1054          &         (pt1%z-pt2%z)**2
   1055   END FUNCTION distanceSqrd


ENTRY POINTS

  Name                                      
                                            
 diag_grid_mod_mp_distancesqrd_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DISTANCESQRD               Func   1049     R(8)            8           scalar                    824,972,1052                      
 PT1                        Dummy  1049     POINT           24          scalar   ARG,IN           1052,1053,1054                    
 PT2                        Dummy  1049     POINT           24          scalar   ARG,IN           1052,1053,1054                    

Page 35          Source Listing                  DISTANCESQRD
2021-06-01 08:54                                 diag_grid.F90

   1056 
   1057 !> @brief Find the distance, along the geodesic, between two points.
   1058 !> @description <TT>gCirDistance</TT> will find the distance, along the geodesic, between two points defined
   1059 !!   by the (lat,lon) position of each point.
   1060 !! @return real
   1061   PURE ELEMENTAL REAL FUNCTION gCirDistance(lat1, lon1, lat2, lon2)
   1062     REAL, INTENT(in) :: lat1, lat2, lon1, lon2
   1063 
   1064     REAL :: theta1, theta2
   1065     REAL :: deltaLambda !< Difference in longitude angles, in radians.
   1066     REAL :: deltaTheta !< Difference in latitude angels, in radians.
   1067 
   1068     theta1 = deg2rad(lat1)
   1069     theta2 = deg2rad(lat2)
   1070     deltaLambda = deg2rad(lon2-lon1)
   1071     deltaTheta = deg2rad(lat2-lat1)
   1072 
   1073     gCirDistance = RADIUS * 2. * ASIN(SQRT((SIN(deltaTheta/2.))**2 + COS(theta1)*COS(theta2)*(SIN(deltaLambda/2.))**2))
   1074   END FUNCTION gCirDistance


ENTRY POINTS

  Name                                      
                                            
 diag_grid_mod_mp_gcirdistance_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASIN                       Func   1073                                 scalar                    1073                              
 COS                        Func   1073                                 scalar                    1073                              
 DELTALAMBDA                Local  1065     R(8)            8           scalar                    1070,1073                         
 DELTATHETA                 Local  1066     R(8)            8           scalar                    1071,1073                         
 GCIRDISTANCE               Func   1061     R(8)            8           scalar                    756,757,760,1073,1118             
 LAT1                       Dummy  1061     R(8)            8           scalar   ARG,IN           1068,1071                         
 LAT2                       Dummy  1061     R(8)            8           scalar   ARG,IN           1069,1071                         
 LON1                       Dummy  1061     R(8)            8           scalar   ARG,IN           1070                              
 LON2                       Dummy  1061     R(8)            8           scalar   ARG,IN           1070                              
 SIN                        Func   1073                                 scalar                    1073                              
 SQRT                       Func   1073                                 scalar                    1073                              
 THETA1                     Local  1064     R(8)            8           scalar                    1068,1073                         
 THETA2                     Local  1064     R(8)            8           scalar                    1069,1073                         

Page 36          Source Listing                  GCIRDISTANCE
2021-06-01 08:54                                 diag_grid.F90

   1075 
   1076 !> @brief Find the i,j indices and distance of the a-grid point nearest to
   1077 !!   the inputted lat,lon point.
   1078   SUBROUTINE find_nearest_agrid_index(lat, &
   1079                                       lon, &
   1080                                       minI, &
   1081                                       minJ, &
   1082                                       minimum_distance)
   1083 
   1084 !Inputs/outputs
   1085     REAL,INTENT(IN) :: lat
   1086     REAL,INTENT(IN) :: lon
   1087     INTEGER,INTENT(OUT) :: minI
   1088     INTEGER,INTENT(OUT) :: minJ
   1089     REAL,INTENT(OUT) :: minimum_distance
   1090 
   1091 !Local variables
   1092     REAL :: llat
   1093     REAL :: llon
   1094     INTEGER :: j
   1095     INTEGER :: i
   1096     REAL :: dist
   1097 
   1098 !Since the poles have an non-unique longitude value, make a small
   1099 !correction if looking for one of the poles.
   1100     IF (lat .EQ. 90.0) THEN
   1101        llat = lat - .1
   1102     ELSEIF (lat .EQ. -90.0) THEN
   1103        llat = lat + .1
   1104     ELSE
   1105        llat = lat
   1106     END IF
   1107     llon = lon
   1108 
   1109 !Loop through non-halo points.  Calculate the distance
   1110 !between each a-grid point and the point that we
   1111 !are seeking.  Store the minimum distance and its
   1112 !corresponding i,j indices.
   1113     minI = 0
   1114     minJ = 0
   1115     minimum_distance = 2.0*RADIUS*3.141592653
   1116     DO j = 1,diag_global_grid%adimJ-2
   1117         DO i = 1,diag_global_grid%adimI-2
   1118             dist = gCirDistance(llat, &
   1119                                 llon, &
   1120                                 diag_global_grid%aglo_lat(i,j), &
   1121                                 diag_global_grid%aglo_lon(i,j))
   1122             IF (dist .LT. minimum_distance) THEN
   1123 
   1124 !These number shouldn't be hardcoded, but they have to
   1125 !match the ones in diag_grid_init.
   1126                 if (diag_global_grid%tile_number .eq. 4 .or. &
   1127                         diag_global_grid%tile_number .eq. 5) then
   1128 
   1129 !Because of transpose in diag_grid_init.
   1130                     minI = j
   1131                     minJ = i

Page 37          Source Listing                  FIND_NEAREST_AGRID_INDEX
2021-06-01 08:54                                 diag_grid.F90

   1132 
   1133                 else
   1134                     minI = i
   1135                     minJ = j
   1136                 endif
   1137                 minimum_distance = dist
   1138             ENDIF
   1139         ENDDO
   1140     ENDDO
   1141 
   1142 !Check that valid i,j indices have been found.
   1143     IF (minI .EQ. 0 .OR. minJ .EQ. 0) THEN
   1144         call error_mesg("find_nearest_agrid_index", &
   1145                         "A minimum distance was not found.", &
   1146                         FATAL)
   1147     ENDIF
   1148 
   1149   END SUBROUTINE find_nearest_agrid_index


ENTRY POINTS

  Name                                                  
                                                        
 diag_grid_mod_mp_find_nearest_agrid_index_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DIST                       Local  1096     R(8)            8           scalar                    1118,1122,1137                    
 FIND_NEAREST_AGRID_INDEX   Subr   1078                                                           451                               
 I                          Local  1095     I(4)            4           scalar                    1117,1120,1121,1131,1134          
 J                          Local  1094     I(4)            4           scalar                    1116,1120,1121,1130,1135          
 LAT                        Dummy  1078     R(8)            8           scalar   ARG,IN           1100,1101,1102,1103,1105          
 LLAT                       Local  1092     R(8)            8           scalar                    1101,1103,1105,1118               
 LLON                       Local  1093     R(8)            8           scalar                    1107,1119                         
 LON                        Dummy  1079     R(8)            8           scalar   ARG,IN           1107                              
 MINI                       Dummy  1080     I(4)            4           scalar   ARG,OUT          1113,1130,1134,1143               
 MINIMUM_DISTANCE           Dummy  1082     R(8)            8           scalar   ARG,OUT          1115,1122,1137                    
 MINJ                       Dummy  1081     I(4)            4           scalar   ARG,OUT          1114,1131,1135,1143               

Page 38          Source Listing                  FIND_NEAREST_AGRID_INDEX
2021-06-01 08:54                                 diag_grid.F90

   1150 
   1151 END MODULE diag_grid_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONSTANTS_MOD              Module 89                                                             89                                
 DEG2RAD@0                  Local  695      R(8)            8           scalar                                                      
 DIAG_GLOBAL_GRID_TYPE      Type   128                      552         scalar                    148,163                           
 DIAG_GRID_END              Subr   173                                                            173                               
 DIAG_GRID_INIT             Subr   173                                                            173                               
 DIAG_GRID_MOD              Module 38                                                                                               
 FMS_MOD                    Module 90                                                             90                                
 GET_LOCAL_INDEXES          Subr   173                                                            173                               
 GET_LOCAL_INDEXES2         Subr   174                                                            174                               
 MPP_DOMAINS_MOD            Module 93                                                             93                                
 MPP_MOD                    Module 92                                                             92                                
 PLATFORM_MOD               Module 39                                                             39                                
 RAD2DEG@0                  Local  683      R(8)            8           scalar                                                      


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 DIAG_GLOBAL_GRID_TYPE.GRID_TYPE                                                                                           ...
                            CHAR            128   424            scalar                                                       

Page 39          Source Listing                  FIND_NEAREST_AGRID_INDEX
2021-06-01 08:54 Subprograms/Common Blocks       diag_grid.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DEG2RAD                    Func   695      R(8)            8           scalar                    698,1032,1033,1068,1069,1070,1071 
 DIAG_GRID_END              Subr   352                                                                                              
 DIAG_GRID_INIT             Subr   188                                                                                              
 DIAG_GRID_MOD              Module 38                                                                                               
 DISTANCESQRD               Func   1049     R(8)            8           scalar                    824,972,1052                      
 FIND_EQUATOR_INDEX_AGRID   Func   870      I(4)            4     1     2                         664,1003                          
 FIND_NEAREST_AGRID_INDEX   Subr   1078                                                           451                               
 FIND_POLE_INDEX_AGRID      Func   707      I(4)            4     1     2                         659,661,861                       
 GCIRDISTANCE               Func   1061     R(8)            8           scalar                    756,757,760,1073,1118             
 GET_LOCAL_INDEXES          Subr   392                                                                                              
 GET_LOCAL_INDEXES2         Subr   642                                                                                              
 LATLON2XYZ                 Func   1014     RECORD          24          scalar                    746,803,805,807,809,811,813,815,81
                                                                                                  7,819,948,959,961,963,965,967,1036
                                                                                                  ,1037,1038                        
 RAD2DEG                    Func   683      R(8)            8           scalar                    686                               

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous

Page 40          Source Listing                  FIND_NEAREST_AGRID_INDEX
2021-06-01 08:54                                 diag_grid.F90

       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion

Page 41          Source Listing                  FIND_NEAREST_AGRID_INDEX
2021-06-01 08:54                                 diag_grid.F90

       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : diag_grid.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
