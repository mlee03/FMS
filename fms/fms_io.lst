Page 1           Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 /tmp/ifortvfSkNX.i90

      1 # 1 "fms_io.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 
     21 module fms_io_mod
     22 # 1 "../include/fms_platform.h" 1 
     23 ! -*-f90-*-*
     24 !***********************************************************************
     25 !*                   GNU Lesser General Public License
     26 !*
     27 !* This file is part of the GFDL Flexible Modeling System (FMS).
     28 !*
     29 !* FMS is free software: you can redistribute it and/or modify it under
     30 !* the terms of the GNU Lesser General Public License as published by
     31 !* the Free Software Foundation, either version 3 of the License, or (at
     32 !* your option) any later version.
     33 !*
     34 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     35 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     36 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     37 !* for more details.
     38 !*
     39 !* You should have received a copy of the GNU Lesser General Public
     40 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     41 !***********************************************************************
     42 
     43 
     44 
     45 
     46 
     47 !Set type kinds.
     48 # 37
     49 
     50 !These values are not necessarily portable.
     51 
     52 
     53 
     54 
     55 
     56 
     57 

Page 2           Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 ../include/fms_platform.h

     58 !DEC$ MESSAGE:'Using 8-byte addressing'
     59 
     60 
     61 
     62 !Control "pure" functions.
     63 # 54
     64 
     65 
     66 !DEC$ MESSAGE:'Using pure routines.'
     67 
     68 
     69 
     70 !Control array members of derived types.
     71 # 66
     72 
     73 
     74 
     75 
     76 !DEC$ MESSAGE:'Using allocatable derived type array members.'
     77 
     78 
     79 
     80 !Control use of cray pointers.
     81 # 78
     82 
     83 
     84 !DEC$ MESSAGE:'Using cray pointers.'
     85 
     86 
     87 
     88 !Control size of integers that will hold address values.
     89 !Appears for legacy reasons, but seems rather dangerous.
     90 # 89
     91 
     92 
     93 
     94 !If you do not want to use 64-bit integers.
     95 # 95
     96 
     97 
     98 
     99 !If you do not want to use 32-bit floats.
    100 # 106
    101 
    102 
    103 
    104 !If you want to use quad-precision.
    105 ! The NO_QUAD_PRECISION macro will be deprecated and removed at some future time.
    106 ! Model code will rely solely upon the ENABLE_QUAD_PRECISION macro thereafer.
    107 # 114
    108 
    109 
    110 
    111 
    112 
    113 
    114 

Page 3           Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 ../include/fms_platform.h

    115 
    116 # 22 "fms_io.F90" 2 
    117 
    118 !
    119 !
    120 ! <CONTACT EMAIL="Zhi.Liang@noaa.gov">
    121 ! Zhi Liang
    122 ! </CONTACT>
    123 
    124 ! <CONTACT EMAIL="Matthew.Harrison@noaa.gov">
    125 ! M.J. Harrison
    126 ! </CONTACT>
    127 !
    128 ! <REVIEWER EMAIL="Matthew.Harrison@noaa.gov">
    129 ! M.J. Harrison
    130 ! </REVIEWER>
    131 
    132 ! <REVIEWER EMAIL="Bruce.Wyman@noaa.gov">
    133 ! B. Wyman
    134 ! </REVIEWER>
    135 
    136 !<DESCRIPTION>
    137 ! This module is for writing and reading restart data in NetCDF format.
    138 ! fms_io_init must be called before the first write_data/read_data call
    139 ! For writing, fms_io_exit must be called after ALL write calls have
    140 ! been made. Typically, fms_io_init and fms_io_exit are placed in the
    141 ! main (driver) program while read_data and write_data can be called where needed.
    142 ! Presently, two combinations of threading and fileset are supported, users can choose
    143 ! one line of the following by setting namelist:
    144 !
    145 ! With the introduction of netCDF restart files, there is a need for a global
    146 ! switch to turn on/off netCDF restart options in all of the modules that deal with
    147 ! restart files. Here two more namelist variables (logical type) are introduced to fms_io
    148 !
    149 ! fms_netcdf_override
    150 ! fms_netcdf_restart
    151 !
    152 ! because default values of both flags are .true., the default behavior of the entire model is
    153 ! to use netCDF IO mode. To turn off netCDF restart, simply set fms_netcdf_restart to .false.
    154 !
    155 !</DESCRIPTION>
    156 ! <NAMELIST NAME="fms_io_nml">
    157 ! <DATA NAME="threading_read" TYPE="character">
    158 ! threading_read can be 'single' or 'multi'
    159 ! </DATA>
    160 ! <DATA NAME="fms_netcdf_override" TYPE="logical">
    161 !   .true. : fms_netcdf_restart overrides individual do_netcdf_restart value (default behavior)
    162 !   .false.: individual module settings has a precedence over the global setting, therefore fms_netcdf_restart is ignored
    163 ! </DATA>
    164 ! <DATA NAME="fms_netcdf_restart" TYPE="logical">
    165 !   .true. : all modules deal with restart files will operate under netCDF mode (default behavior)
    166 !   .false.: all modules deal with restart files will operate under binary mode
    167 !   This flag is effective only when fms_netcdf_override is .true. When fms_netcdf_override is .false., individual
    168 !   module setting takes over.
    169 ! </DATA>
    170 ! <DATA NAME="time_stamped_restart" TYPE="logical">
    171 !   .true. : time_stamp will be added to the restart file name as a prefix when

Page 4           Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    172 !            optional argument time_stamp is passed into routine save_restart.
    173 !   .false.: time_stmp will not be added to the restart file name even though
    174 !            time_stamp is passed into save_restart.
    175 !    default is true.
    176 ! </DATA>
    177 ! <DATA NAME="print_chksum" TYPE="logical">
    178 !    set print_chksum (default is false) to true to print out chksum of fields that are
    179 !    read and written through save_restart/restore_state. The chksum is accross all the
    180 !    processors, so there will be only one chksum even there are multiple-tiles in the
    181 !    grid. For the multiple case, the filename appeared in the message will contain
    182 !    tile1 because the message is print out from root pe and on root pe the tile id is tile1.
    183 ! </DATA>
    184 ! <DATA NAME="debug_mask_list" TYPE="logical">
    185 !    set debug_mask_list (default is false) to true to print out mask_list reading from mask_table.
    186 ! </DATA>
    187 ! <DATA NAME="checksum_required" TYPE="logical">
    188 !    Set checksum_required (default is true) to true to compare checksums stored in the attribute of a
    189 !    field against the checksum after reading in the data. This check mitigates the possibility of data
    190 !    that gets corrupted on write or read from being used in a n ongoing fashion. The checksum is across
    191 !    all the  processors, so there will be only one checksum even if there are multiple-tiles in the
    192 !    grid. For the decomposed file case, the filename appearing in the message will contain tile1
    193 !    because the message is printed out from the root pe and on root pe the tile id is tile1.
    194 !
    195 !    Set checksum_required to false if you do not want to compare checksums.
    196 ! </DATA>
    197 
    198 !</NAMELIST>
    199 
    200 use mpp_io_mod,      only: mpp_open, mpp_close, mpp_io_init, mpp_io_exit, mpp_read, mpp_write
    201 use mpp_io_mod,      only: mpp_write_meta, mpp_get_info, mpp_get_atts, mpp_get_fields
    202 use mpp_io_mod,      only: mpp_read_compressed, mpp_write_compressed, mpp_def_dim
    203 use mpp_io_mod,      only: mpp_write_unlimited_axis, mpp_read_distributed_ascii
    204 use mpp_io_mod,      only: mpp_get_axes, mpp_get_axis_data, mpp_get_att_char, mpp_get_att_name
    205 use mpp_io_mod,      only: mpp_get_att_real_scalar, mpp_attribute_exist, mpp_is_dist_ioroot
    206 use mpp_io_mod,      only: fieldtype, axistype, atttype, default_field, default_axis, default_att
    207 use mpp_io_mod,      only: MPP_NETCDF, MPP_ASCII, MPP_MULTI, MPP_SINGLE, MPP_OVERWR, MPP_RDONLY
    208 use mpp_io_mod,      only: MPP_IEEE32, MPP_NATIVE, MPP_DELETE, MPP_APPEND, MPP_SEQUENTIAL, MPP_DIRECT
    209 use mpp_io_mod,      only: MAX_FILE_SIZE, mpp_get_att_value
    210 use mpp_io_mod,      only: mpp_get_dimension_length
    211 use mpp_domains_mod, only: domain2d, domain1d, NULL_DOMAIN1D, NULL_DOMAIN2D, operator( .EQ. )
    212 use mpp_domains_mod, only: CENTER, EAST, WEST, NORTH, SOUTH, CORNER
    213 use mpp_domains_mod, only: mpp_get_domain_components, mpp_get_compute_domain, mpp_get_data_domain
    214 use mpp_domains_mod, only: mpp_get_domain_shift, mpp_get_global_domain, mpp_global_field, mpp_domain_is_tile_root_pe
    215 use mpp_domains_mod, only: mpp_get_ntile_count, mpp_get_current_ntile, mpp_get_tile_id
    216 use mpp_domains_mod, only: mpp_get_pelist, mpp_get_io_domain, mpp_get_domain_npes
    217 use mpp_domains_mod, only: domainUG, mpp_pass_SG_to_UG, mpp_get_UG_domain_ntiles, mpp_get_UG_domain_tile_id
    218 use mpp_mod,         only: mpp_error, FATAL, NOTE, WARNING, mpp_pe, mpp_root_pe, mpp_npes, stdlog, stdout
    219 use mpp_mod,         only: mpp_broadcast, ALL_PES, mpp_chksum, mpp_get_current_pelist, mpp_npes, lowercase
    220 use mpp_mod,         only: input_nml_file, mpp_get_current_pelist_name, uppercase
    221 use mpp_mod,         only: mpp_gather, mpp_scatter, mpp_send, mpp_recv, mpp_sync_self, COMM_TAG_1, EVENT_RECV
    222 use mpp_mod,         only: MPP_FILL_DOUBLE,MPP_FILL_INT
    223 
    224 use platform_mod, only: r8_kind
    225 
    226 !----------
    227 !ug support
    228 use mpp_parameter_mod, only: COMM_TAG_2

Page 5           Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    229 use mpp_domains_mod,   only: mpp_get_UG_io_domain
    230 use mpp_domains_mod,   only: mpp_domain_UG_is_tile_root_pe
    231 use mpp_domains_mod,   only: mpp_get_UG_domain_npes
    232 use mpp_domains_mod,   only: mpp_get_UG_domain_pelist
    233 use mpp_io_mod,        only: mpp_io_unstructured_write
    234 use mpp_io_mod,        only: mpp_io_unstructured_read
    235 use mpp_io_mod,        only: mpp_file_is_opened
    236 !----------
    237 
    238 implicit none
    239 private
    240 
    241 
    242 integer, parameter, private :: max_split_file = 50
    243 integer, parameter, private :: max_fields=400
    244 integer, parameter, private :: max_axes=40
    245 integer, parameter, private :: max_atts=20
    246 integer, parameter, private :: max_domains = 10
    247 integer, parameter, private :: MAX_TIME_LEVEL_REGISTER = 2
    248 integer, parameter, private :: MAX_TIME_LEVEL_WRITE = 20
    249 integer, parameter          :: max_axis_size=10000
    250 
    251 ! Index postions for axes in restart_file_type
    252 ! This is done so the user may define the axes
    253 ! in any order but a check can be performed
    254 ! to ensure no registration of duplicate axis
    255 
    256 !----------
    257 !ug support
    258 integer(4),parameter,public :: XIDX = 1
    259 integer(4),parameter,public :: YIDX = 2
    260 integer(4),parameter,public :: CIDX = 3
    261 integer(4),parameter,public :: ZIDX = 4
    262 integer(4),parameter,public :: HIDX = 5
    263 integer(4),parameter,public :: TIDX = 6
    264 integer(4),parameter,public :: UIDX = 7
    265 integer(4),parameter,public :: CCIDX = 8
    266 !---------
    267 
    268 integer, parameter, private :: NIDX=8
    269 
    270 logical, private :: warn_string_function = .true.
    271 
    272 type meta_type
    273   type(meta_type), pointer :: prev=>null(), next=>null()
    274 !!$ Gfortran on gaea does not yet support deferred length character strings
    275 !!$  character(len=:),allocatable  :: name
    276   character(len=256)   :: name
    277   real,    allocatable :: rval(:)
    278   integer, allocatable :: ival(:)
    279 !!$ Gfortran on gaea does not yet support deferred length character strings
    280 !!$  character(len=:), allocatable :: cval
    281   character(len=256)   :: cval
    282 end type meta_type
    283 
    284 type ax_type
    285    private

Page 6           Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    286    character(len=128) :: name = ''
    287    character(len=128) :: units = ''
    288    character(len=128) :: longname = ''
    289    character(len=8)   :: cartesian = ''
    290    character(len=256) :: compressed = ''
    291    character(len=128) :: dimlen_name = ''
    292    character(len=128) :: dimlen_lname = ''
    293    character(len=128) :: calendar = ''
    294    integer            :: sense              !Orientation of z axis definition
    295    integer            :: dimlen             !max dim of elements across global domain
    296    real               :: min             !valid min for real axis data
    297    integer            :: imin            !valid min for integer axis data
    298    integer,allocatable :: idx(:)         !compressed io-domain index vector
    299    integer,allocatable :: nelems(:)      !num elements for each rank in io domain
    300    real, pointer      :: data(:) =>NULL()    !real axis values (not used if time axis)
    301    type(domain2d),pointer :: domain =>NULL() ! domain associated with compressed axis
    302 
    303 !----------
    304 !ug support
    305    type(domainUG),pointer :: domain_ug => null()     !<A pointer to an unstructured mpp domain.
    306    integer(4)      :: nelems_for_current_rank !<The number of grid points registered to the current rank (used for error che
    306 cking).
    307 !----------
    308 
    309 end type ax_type
    310 
    311 type var_type
    312    private
    313    character(len=128)                     :: name = ''
    314    character(len=128)                     :: longname = ''
    315    character(len=128)                     :: units = ''
    316    real, dimension(:,:,:,:), allocatable :: buffer
    317    logical                                :: domain_present = .FALSE.
    318    integer                                :: domain_idx = -1
    319    logical                                :: is_dimvar = .FALSE.
    320    logical                                :: read_only = .FALSE.
    321    logical                                :: owns_data = .FALSE. ! if true, restart owns the data and will deallocate them w
    321 hen freed
    322    type(fieldtype)                        :: field
    323    type(axistype)                         :: axis
    324    integer                                :: position
    325    integer                                :: ndim
    326    integer                                :: siz(5)      ! X/Y/Z/T/A extent of fields (data domain
    327 ! size for distributed writes;global size for reads)
    328    integer                                :: gsiz(4)     ! global X/Y/Z/A extent of fields
    329    integer                                :: id_axes(4)  ! store index for x/y/z/a axistype.
    330    logical                                :: initialized ! indicate if the field is read or not in routine save_state.
    331    logical                                :: mandatory   ! indicate if the field is mandatory to be when restart.
    332    integer                                :: is, ie, js, je  ! index of the data in compute domain
    333    real                                   :: default_data
    334    character(len=8)                       :: compressed_axis !< If on a compressed axis, which axis
    335    integer, dimension(:), allocatable     :: pelist
    336    integer                                :: ishift, jshift ! can be used to shift indices when no_domain=T
    337    integer                                :: x_halo, y_halo ! can be used to indicate halo size when no_domain=T
    338 
    339 !----------
    340 !ug support

Page 7           Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    341     type(domainUG),pointer            :: domain_ug => null()   !<A pointer to an unstructured mpp domain.
    342     integer(4),dimension(5)    :: field_dimension_order !<Array telling the ordering of the dimensions for the field.
    343     integer(4),dimension(NIDX) :: field_dimension_sizes !<Array of sizes of the dimensions for the field.
    344 !----------
    345 
    346 end type var_type
    347 
    348 type Ptr0Dr
    349    real,                   pointer :: p => NULL()
    350 end type Ptr0Dr
    351 
    352 type Ptr1Dr
    353    real, dimension(:),     pointer :: p => NULL()
    354 end type Ptr1Dr
    355 
    356 type Ptr2Dr
    357    real, dimension(:,:),   pointer :: p => NULL()
    358 end type Ptr2Dr
    359 
    360 type Ptr3Dr
    361    real, dimension(:,:,:), pointer :: p => NULL()
    362 end type Ptr3Dr
    363 
    364 type Ptr2Dr8
    365    real(8), dimension(:,:),   pointer :: p => NULL()
    366 end type Ptr2Dr8
    367 
    368 type Ptr3Dr8
    369    real(8), dimension(:,:,:), pointer :: p => NULL()
    370 end type Ptr3Dr8
    371 
    372 type Ptr4Dr
    373    real, dimension(:,:,:,:), pointer :: p => NULL()
    374 end type Ptr4Dr
    375 
    376 type Ptr0Di
    377    integer,                   pointer :: p => NULL()
    378 end type Ptr0Di
    379 
    380 type Ptr1Di
    381    integer, dimension(:),     pointer :: p => NULL()
    382 end type Ptr1Di
    383 
    384 type Ptr2Di
    385    integer, dimension(:,:),   pointer :: p => NULL()
    386 end type Ptr2Di
    387 
    388 type Ptr3Di
    389    integer, dimension(:,:,:), pointer :: p => NULL()
    390 end type Ptr3Di
    391 
    392 type restart_file_type
    393    private
    394    integer                                  :: unit = -1 ! mpp_io unit for netcdf file
    395    character(len=128)                       :: name = ''
    396    integer                                  :: register_id = 0
    397    integer                                  :: nvar = 0

Page 8           Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    398    integer                                  :: natt = 0
    399    integer                                  :: max_ntime = 0
    400    logical                                  :: is_root_pe = .FALSE.
    401    logical                                  :: is_compressed = .FALSE.
    402    logical                                  :: unlimited_axis = .FALSE.
    403    integer                                  :: tile_count = 1
    404    type(ax_type),  allocatable              :: axes(:)  ! Currently define X,Y,Compressed, unlimited and maybe Z
    405    type(meta_type),                pointer  :: first =>NULL() ! pointer to first additional global metadata element
    406    type(var_type), dimension(:),   pointer  :: var  => NULL()
    407    type(Ptr0Dr),   dimension(:,:), pointer  :: p0dr => NULL()
    408    type(Ptr1Dr),   dimension(:,:), pointer  :: p1dr => NULL()
    409    type(Ptr2Dr),   dimension(:,:), pointer  :: p2dr => NULL()
    410    type(Ptr3Dr),   dimension(:,:), pointer  :: p3dr => NULL()
    411    type(Ptr2Dr8),  dimension(:,:), pointer  :: p2dr8 => NULL()
    412    type(Ptr3Dr8),  dimension(:,:), pointer  :: p3dr8 => NULL()
    413    type(Ptr4Dr),   dimension(:,:), pointer  :: p4dr => NULL()
    414    type(Ptr0Di),   dimension(:,:), pointer  :: p0di => NULL()
    415    type(Ptr1Di),   dimension(:,:), pointer  :: p1di => NULL()
    416    type(Ptr2Di),   dimension(:,:), pointer  :: p2di => NULL()
    417    type(Ptr3Di),   dimension(:,:), pointer  :: p3di => NULL()
    418 end type restart_file_type
    419 
    420 interface read_data
    421    module procedure read_data_4d_new
    422    module procedure read_data_3d_new
    423    module procedure read_data_2d_new
    424    module procedure read_data_2d_UG
    425    module procedure read_data_1d_new
    426    module procedure read_data_scalar_new
    427    module procedure read_data_i3d_new
    428    module procedure read_data_i2d_new
    429    module procedure read_data_i1d_new
    430    module procedure read_data_iscalar_new
    431    module procedure read_data_2d, read_ldata_2d, read_idata_2d
    432    module procedure read_data_3d, read_data_4d
    433 # 340
    434 
    435    module procedure read_data_text
    436    module procedure read_data_2d_region
    437    module procedure read_data_3d_region
    438 # 347
    439 
    440 end interface
    441 
    442 interface read_distributed
    443    module procedure read_distributed_r1D
    444    module procedure read_distributed_r3D
    445    module procedure read_distributed_r5D
    446    module procedure read_distributed_i1D
    447    module procedure read_distributed_iscalar
    448    module procedure read_distributed_a1D
    449 end interface
    450 
    451 ! Only need read compressed att; write is handled in with
    452 ! mpp_io calls in save_compressed_restart
    453 interface read_compressed
    454    module procedure read_compressed_i1d

Page 9           Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    455    module procedure read_compressed_i2d
    456    module procedure read_compressed_1d
    457    module procedure read_compressed_2d
    458    module procedure read_compressed_3d
    459 end interface read_compressed
    460 
    461 interface write_data
    462    module procedure write_data_4d_new
    463    module procedure write_data_3d_new
    464    module procedure write_data_2d_new
    465    module procedure write_data_1d_new
    466    module procedure write_data_scalar_new
    467    module procedure write_data_i3d_new
    468    module procedure write_data_i2d_new
    469    module procedure write_data_i1d_new
    470    module procedure write_data_iscalar_new
    471    module procedure write_data_2d, write_ldata_2d, write_idata_2d
    472    module procedure write_data_3d, write_data_4d
    473 # 383
    474 
    475 end interface
    476 
    477 interface register_restart_field
    478    module procedure register_restart_field_r0d
    479    module procedure register_restart_field_r1d
    480    module procedure register_restart_field_r2d
    481    module procedure register_restart_field_r3d
    482 # 396
    483 
    484    module procedure register_restart_field_r4d
    485    module procedure register_restart_field_i0d
    486    module procedure register_restart_field_i1d
    487    module procedure register_restart_field_i2d
    488    module procedure register_restart_field_i3d
    489    module procedure register_restart_field_r0d_2level
    490    module procedure register_restart_field_r1d_2level
    491    module procedure register_restart_field_r2d_2level
    492    module procedure register_restart_field_r3d_2level
    493    module procedure register_restart_field_i0d_2level
    494    module procedure register_restart_field_i1d_2level
    495    module procedure register_restart_field_i2d_2level
    496    module procedure register_restart_field_i3d_2level
    497    module procedure register_restart_region_r2d
    498    module procedure register_restart_region_r3d
    499 end interface
    500 
    501 interface register_restart_axis
    502    module procedure register_restart_axis_r1d
    503    module procedure register_restart_axis_i1d
    504    module procedure register_restart_axis_unlimited
    505 end interface
    506 
    507 interface reset_field_pointer
    508    module procedure reset_field_pointer_r0d
    509    module procedure reset_field_pointer_r1d
    510    module procedure reset_field_pointer_r2d
    511    module procedure reset_field_pointer_r3d

Page 10          Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    512    module procedure reset_field_pointer_r4d
    513    module procedure reset_field_pointer_i0d
    514    module procedure reset_field_pointer_i1d
    515    module procedure reset_field_pointer_i2d
    516    module procedure reset_field_pointer_i3d
    517    module procedure reset_field_pointer_r0d_2level
    518    module procedure reset_field_pointer_r1d_2level
    519    module procedure reset_field_pointer_r2d_2level
    520    module procedure reset_field_pointer_r3d_2level
    521    module procedure reset_field_pointer_i0d_2level
    522    module procedure reset_field_pointer_i1d_2level
    523    module procedure reset_field_pointer_i2d_2level
    524    module procedure reset_field_pointer_i3d_2level
    525 end interface
    526 
    527 interface restore_state
    528    module procedure restore_state_all
    529    module procedure restore_state_one_field
    530 end interface
    531 
    532 interface query_initialized
    533    module procedure query_initialized_id
    534    module procedure query_initialized_name
    535    module procedure query_initialized_r2d
    536    module procedure query_initialized_r3d
    537    module procedure query_initialized_r4d
    538 end interface
    539 
    540 interface set_initialized
    541    module procedure set_initialized_id
    542    module procedure set_initialized_name
    543    module procedure set_initialized_r2d
    544    module procedure set_initialized_r3d
    545    module procedure set_initialized_r4d
    546 end interface
    547 
    548 interface get_global_att_value
    549   module procedure get_global_att_value_text
    550   module procedure get_global_att_value_real
    551 end interface
    552 
    553 interface get_var_att_value
    554   module procedure get_var_att_value_text
    555 end interface
    556 
    557 interface parse_mask_table
    558   module procedure parse_mask_table_2d
    559   module procedure parse_mask_table_3d
    560 end interface
    561 
    562 interface get_mosaic_tile_file
    563   module procedure get_mosaic_tile_file_sg
    564   module procedure get_mosaic_tile_file_ug
    565 end interface
    566 
    567 
    568 integer :: num_files_r = 0 ! number of currently opened files for reading

Page 11          Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    569 integer :: num_files_w = 0 ! number of currently opened files for writing
    570 integer :: num_domains = 0 ! number of domains in array_domain
    571 integer :: num_registered_files = 0 ! mumber of files registered by calling register_restart_file
    572 
    573 integer :: thread_r, form
    574 logical :: module_is_initialized = .FALSE.
    575 
    576 character(len=128):: error_msg
    577 logical           :: great_circle_algorithm=.FALSE.
    578 
    579 !------ private data, pointer to current 2d domain ------
    580 ! entrained from fms_mod.  This will be deprecated in the future.
    581 type(domain2D), pointer, private :: Current_domain =>NULL()
    582 
    583 integer, private :: is,ie,js,je      ! compute domain
    584 integer, private :: isd,ied,jsd,jed  ! data domain
    585 integer, private :: isg,ieg,jsg,jeg  ! global domain
    586 character(len=128),      dimension(:), allocatable         :: registered_file ! file names registered through register_resta
    586 rt_file
    587 type(restart_file_type), dimension(:), allocatable         :: files_read  ! store files that are read through read_data
    588 type(restart_file_type), dimension(:), allocatable, target :: files_write ! store files that are written through write_data
    589 type(domain2d), dimension(max_domains), target, save  :: array_domain
    590 type(domain1d), dimension(max_domains), save       :: domain_x, domain_y
    591 public  :: read_data, read_compressed, write_data, read_distributed
    592 public  :: fms_io_init, fms_io_exit, field_size, get_field_size
    593 public  :: open_namelist_file, open_restart_file, open_ieee32_file, close_file
    594 public  :: set_domain, nullify_domain, get_domain_decomp, return_domain
    595 public  :: open_file, open_direct_file
    596 public  :: get_restart_io_mode, get_tile_string, string
    597 public  :: get_mosaic_tile_grid, get_mosaic_tile_file, get_file_name, get_mosaic_tile_file_ug
    598 public  :: get_global_att_value, get_var_att_value
    599 public  :: file_exist, field_exist
    600 public  :: register_restart_field, register_restart_axis, save_restart, restore_state
    601 public  :: set_meta_global
    602 public  :: save_restart_border, restore_state_border
    603 public  :: restart_file_type, query_initialized, set_initialized, free_restart_type
    604 public  :: reset_field_name, reset_field_pointer
    605 private :: lookup_field_r, lookup_axis, unique_axes
    606 public  :: dimension_size
    607 public  :: set_filename_appendix, get_instance_filename
    608 public  :: get_filename_appendix, nullify_filename_appendix
    609 public  :: parse_mask_table
    610 public  :: get_great_circle_algorithm
    611 character(len=32), save :: filename_appendix = ''
    612 
    613 !--- public interface ---
    614 interface string
    615    module procedure string_from_integer
    616    module procedure string_from_real
    617 end interface
    618 
    619 !--- namelist interface
    620 logical           :: fms_netcdf_override = .true.
    621 logical           :: fms_netcdf_restart  = .true.
    622 character(len=32) :: threading_read      = 'multi'
    623 character(len=32) :: format              = 'netcdf'
    624 logical           :: read_all_pe         = .TRUE.

Page 12          Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    625 integer           :: max_files_w         = 40
    626 integer           :: max_files_r         = 40
    627 integer           :: dr_set_size         = 10
    628 logical           :: read_data_bug       = .false.
    629 logical           :: time_stamp_restart  = .true.
    630 logical           :: print_chksum        = .false.
    631 logical           :: show_open_namelist_file_warning = .false.
    632 logical           :: debug_mask_list     = .false.
    633 logical           :: checksum_required   = .true.
    634   namelist /fms_io_nml/ fms_netcdf_override, fms_netcdf_restart, &
    635        threading_read, format, read_all_pe, max_files_w,max_files_r, &
    636        read_data_bug, time_stamp_restart, print_chksum, show_open_namelist_file_warning, &
    637        debug_mask_list, checksum_required, dr_set_size
    638 
    639 integer            :: pack_size  ! = 1 for double = 2 for float
    640 
    641 ! Include variable "version" to be written to log file.
    642 # 1 "../include/file_version.h" 1 
    643 ! -*-f90-*-
    644 !***********************************************************************
    645 !*                   GNU Lesser General Public License
    646 !*
    647 !* This file is part of the GFDL Flexible Modeling System (FMS).
    648 !*
    649 !* FMS is free software: you can redistribute it and/or modify it under
    650 !* the terms of the GNU Lesser General Public License as published by
    651 !* the Free Software Foundation, either version 3 of the License, or (at
    652 !* your option) any later version.
    653 !*
    654 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    655 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    656 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    657 !* for more details.
    658 !*
    659 !* You should have received a copy of the GNU Lesser General Public
    660 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    661 !***********************************************************************
    662 
    663 # 23
    664 
    665   character(len=*), parameter :: version = 'unknown'
    666 
    667 # 556 "fms_io.F90" 2 
    668 
    669 ! make version public so it can be written in fms_init()
    670 character(len=*), parameter, public :: fms_io_version = version
    671 
    672 !----------
    673 !ug support
    674 public :: fms_io_unstructured_register_restart_axis
    675 public :: fms_io_unstructured_register_restart_field
    676 public :: fms_io_unstructured_save_restart
    677 public :: fms_io_unstructured_read
    678 public :: fms_io_unstructured_get_field_size
    679 public :: fms_io_unstructured_file_unit
    680 public :: fms_io_unstructured_field_exist
    681 

Page 13          Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    682 interface fms_io_unstructured_register_restart_axis
    683     module procedure fms_io_unstructured_register_restart_axis_r1D
    684     module procedure fms_io_unstructured_register_restart_axis_i1D
    685     module procedure fms_io_unstructured_register_restart_axis_u
    686 end interface fms_io_unstructured_register_restart_axis
    687 
    688 interface fms_io_unstructured_register_restart_field
    689     module procedure fms_io_unstructured_register_restart_field_r_0d
    690     module procedure fms_io_unstructured_register_restart_field_r_1d
    691     module procedure fms_io_unstructured_register_restart_field_r_2d
    692     module procedure fms_io_unstructured_register_restart_field_r_3d
    693 # 584
    694 
    695     module procedure fms_io_unstructured_register_restart_field_i_0d
    696     module procedure fms_io_unstructured_register_restart_field_i_1d
    697     module procedure fms_io_unstructured_register_restart_field_i_2d
    698 end interface fms_io_unstructured_register_restart_field
    699 
    700 interface fms_io_unstructured_read
    701     module procedure fms_io_unstructured_read_r_scalar
    702     module procedure fms_io_unstructured_read_r_1D
    703     module procedure fms_io_unstructured_read_r_2D
    704     module procedure fms_io_unstructured_read_r_3D
    705     module procedure fms_io_unstructured_read_i_scalar
    706     module procedure fms_io_unstructured_read_i_1D
    707     module procedure fms_io_unstructured_read_i_2D
    708 end interface fms_io_unstructured_read
    709 !----------
    710 
    711 contains
    712 
    713 ! <SUBROUTINE NAME="get_restart_io_mode">
    714 ! <DESCRIPTION>
    715 ! With the introduction of netCDF restart files, there is a need for a global
    716 ! switch to turn on/off netCDF restart options in all of the modules that deal with
    717 ! restart files. Here two more namelist variables (logical type) are introduced to fms_io
    718 !
    719 ! fms_netcdf_override
    720 ! fms_netcdf_restart
    721 !
    722 ! because default values of both flags are .true., the default behavior of the entire model is
    723 ! to use netCDF IO mode. To turn off netCDF restart, simply set fms_netcdf_restart to .false.
    724 !
    725 ! </DESCRIPTION>
    726 ! <TEMPLATE>
    727 !  call get_fms_io_mode(do_netcdf_restart)
    728 ! </TEMPLATE>
    729 ! <INOUT NAME="do_netcdf_restart" TYPE="logical">
    730 !  This the input argument that contains the individual module setting of restart IO mode.
    731 !  Upon return from this subroutine, this output argument contains the actual setting of restart IO mode
    732 !  the calling module will be using
    733 ! </INOUT>
    734 ! </SUBROUTINE>
    735 subroutine get_restart_io_mode(do_netcdf_restart)
    736 
    737   logical, intent(inout)  :: do_netcdf_restart
    738 

Page 14          Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    739   if(fms_netcdf_override) do_netcdf_restart = fms_netcdf_restart
    740 
    741 end subroutine get_restart_io_mode


ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_get_restart_io_mode_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DO_NETCDF_RESTART          Dummy  735      L(4)            4           scalar   ARG,INOUT        739                               
 FMS_NETCDF_OVERRIDE        Local  739      L(4)            4           scalar                    620,634,739                       
 FMS_NETCDF_RESTART         Local  739      L(4)            4           scalar                    621,634,739                       
 GET_RESTART_IO_MODE        Subr   735                                                                                              

Page 15          Source Listing                  GET_RESTART_IO_MODE
2021-06-01 08:54                                 fms_io.F90

    742 !.....................................................................
    743 ! <SUBROUTINE NAME="fms_io_init">
    744 !   <DESCRIPTION>
    745 ! Initialize fms_io module
    746 !   </DESCRIPTION>
    747 !   <TEMPLATE>
    748 ! call fms_io_init()
    749 !   </TEMPLATE>
    750 subroutine fms_io_init()
    751 
    752   integer                            :: i, unit, io_status, logunit
    753   integer, allocatable, dimension(:) :: pelist
    754   real(8)                  :: doubledata = 0
    755   real                               :: realarray(4)
    756   character(len=256)                 :: grd_file, filename
    757   logical                            :: is_mosaic_grid
    758   character(len=4096)                :: attvalue
    759 
    760   if (module_is_initialized) return
    761   call mpp_io_init()
    762 
    763 
    764   read (input_nml_file, fms_io_nml, iostat=io_status)
    765   if (io_status > 0) then
    766      call mpp_error(FATAL,'=>fms_io_init: Error reading input.nml')
    767   endif
    768 # 665
    769 
    770 
    771 ! take namelist options if present
    772 
    773 ! determine packsize
    774   pack_size = size(transfer(doubledata, realarray))
    775   if( pack_size .NE. 1 .AND. pack_size .NE. 2) call mpp_error(FATAL,'=>fms_io_init: pack_size should be 1 or 2')
    776 
    777   select case (threading_read)
    778   case ('multi')
    779      thread_r = MPP_MULTI
    780   case ('single')
    781      thread_r = MPP_SINGLE
    782   case default
    783      call mpp_error(FATAL,'fms_io_init: threading_read should be multi/single but you chose'//trim(threading_read))
    784   end select
    785 ! take namelist options if present
    786 
    787   select case(format)
    788   case ('netcdf')
    789      form=MPP_NETCDF
    790   case default
    791      call mpp_error(FATAL,'fms_io_init: only NetCDF format currently supported in fms_io')
    792   end select
    793 
    794 ! Initially allocate  files_write and files_read
    795   allocate(files_write(max_files_w),files_read(max_files_r))
    796   allocate(registered_file(max_files_w))
    797 
    798   do i = 1, max_domains

Page 16          Source Listing                  FMS_IO_INIT
2021-06-01 08:54                                 fms_io.F90

    799      array_domain(i) = NULL_DOMAIN2D
    800   enddo
    801 
    802 !---- initialize module domain2d pointer ----
    803   nullify (Current_domain)
    804 
    805 !This is set here instead of at the end of the routine to prevent the read_data call below from stopping the model
    806   module_is_initialized = .TRUE.
    807 
    808 !--- read INPUT/grid_spec.nc to decide the value of great_circle_algorithm
    809 !--- great_circle_algorithm could be true only for mosaic grid.
    810   great_circle_algorithm = .false.
    811   grd_file = "INPUT/grid_spec.nc"
    812 
    813   is_mosaic_grid = .FALSE.
    814   if (file_exist(grd_file)) then
    815      if(field_exist(grd_file, 'atm_mosaic_file')) then  ! coupled grid
    816         is_mosaic_grid = .TRUE.
    817      else if(field_exist(grd_file, "gridfiles")) then
    818         call read_data(grd_file, "gridfiles", filename, level=1)
    819         grd_file = 'INPUT/'//trim(filename)
    820         is_mosaic_grid = .TRUE.
    821      endif
    822   endif
    823 
    824   if(is_mosaic_grid) then
    825      if( get_global_att_value(grd_file, "great_circle_algorithm", attvalue) ) then
    826         if(trim(attvalue) == "TRUE") then
    827            great_circle_algorithm = .true.
    828         else if(trim(attvalue) == "FALSE") then
    829            great_circle_algorithm = .false.
    830         else
    831            call mpp_error(FATAL, "fms_io(fms_io_init: value of global attribute great_circle_algorithm in file"// &
    832              trim(grd_file)//" should be TRUE of FALSE")
    833         endif
    834      endif
    835   endif
    836 
    837   if(great_circle_algorithm .AND. (mpp_pe() == mpp_root_pe()) ) then
    838      call mpp_error(NOTE,"fms_io_mod: great_circle algorithm will be used in the model run")
    839   endif
    840 
    841 end subroutine fms_io_init

Page 17          Source Listing                  FMS_IO_INIT
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                  
                                        
 fms_io_mod_mp_fms_io_init_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ARRAY_DOMAIN               Local  799      RECORD          752   1     10       TGT,SAVE         799,901,909,996,1280,1281,1285,128
                                                                                                  6,1287,1288,2990,3000,3152,3153,31
                                                                                                  54,3239,3242,3245,3248,3251,3256,3
                                                                                                  262,3793,3794,3795,3930,3946,4002,
                                                                                                  4003,4004,4051,4055,4059,4063,4067
                                                                                                  ,4083,4091,4251,4252,4253,4284,430
                                                                                                  1,4377,4381,4385,4401,4409,4701,47
                                                                                                  02,4706,4707,4708,4709,4850       
 ATTVALUE                   Local  758      CHAR            4096        scalar                    825,826,828                       
 CURRENT_DOMAIN             Local  803      DOMAIN2D        752         scalar   PTR,TGT,PRIV     581,803,1164,1165,1439,1440,1441,1
                                                                                                  494,1495,1496,3155,3156,3157,3158,
                                                                                                  3796,3797,3798,3799,4005,4006,4007
                                                                                                  ,4008,4254,4255,4256,4257,4559,456
                                                                                                  0,5095,5096,5331,5332,5338,5478,54
                                                                                                  79,5521,5522,5651,5652,5655,5699,5
                                                                                                  700,5703,6060,6129,6197,6269,6344,
                                                                                                  6407,6411,6445,6449,6482,6486,6525
                                                                                                  ,6529,6546,6552,7587,7588,7592,759
                                                                                                  3,7594,7608,7626,7627,7970,7972,79
                                                                                                  73,8167,8168,8287,8289            
 DOUBLEDATA                 Local  754      R(8)            8           scalar                    754,774                           
 FATAL                      Param  766      I(4)            4           scalar   PRIV             218,766,775,783,791,831,1139,1148,
                                                                                                  1161,1206,1250,1257,1277,1297,1351
                                                                                                  ,1365,1370,1386,1388,1416,1424,143
                                                                                                  0,1443,1456,1481,1486,1498,1506,15
                                                                                                  31,1686,1719,1755,1793,1834,1869,1
                                                                                                  871,1909,1911,1951,1955,1992,1994,
                                                                                                  2028,2060,2094,2128,2166,2169,2170
                                                                                                  ,2207,2210,2211,2248,2251,2252,228
                                                                                                  9,2292,2293,2330,2331,2385,2386,24
                                                                                                  42,2451,2463,2556,2566,2578,2600,2
                                                                                                  606,2660,2710,2735,2738,2819,2854,
                                                                                                  2871,2879,2890,2909,2964,3108,3203
                                                                                                  ,3266,3304,3457,3479,3526,3588,364
                                                                                                  1,3661,3730,3736,3756,3786,3836,39
                                                                                                  00,3968,3979,4097,4146,4153,4174,4
                                                                                                  237,4323,4334,4415,4464,4471,4489,
                                                                                                  4534,4543,4556,4585,4655,4661,4668
                                                                                                  ,4698,4718,4751,4775,4795,4813,488
                                                                                                  2,4920,4931,4952,4980,5030,5046,50
                                                                                                  98,5102,5136,5156,5321,5325,5341,5
                                                                                                  364,5381,5387,5393,5474,5481,5488,
                                                                                                  5517,5524,5531,5551,5566,5580,5595
                                                                                                  ,5610,5622,5645,5658,5666,5693,570

Page 18          Source Listing                  FMS_IO_INIT
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  6,5714,5739,5749,5758,5816,5882,59
                                                                                                  24,5949,5981,5983,5985,5991,6054,6
                                                                                                  061,6123,6130,6191,6198,6264,6270,
                                                                                                  6339,6345,6408,6446,6483,6526,6547
                                                                                                  ,6573,6593,6596,6611,6614,6617,663
                                                                                                  2,6635,6638,6653,6656,6659,6674,66
                                                                                                  77,6680,6695,6698,6701,6717,6720,6
                                                                                                  723,6738,6741,6744,6759,6762,6765,
                                                                                                  6780,6783,6786,6801,6804,6807,6823
                                                                                                  ,6826,6829,6845,6848,6851,6867,687
                                                                                                  0,6873,6889,6892,6895,6911,6914,69
                                                                                                  17,6933,6936,6939,6955,6958,6961,6
                                                                                                  983,6986,7010,7047,7089,7132,7173,
                                                                                                  7176,7201,7235,7282,7330,7449,7483
                                                                                                  ,7521,7561,7750,7756,7779,7807,782
                                                                                                  1,7833,7845,7879,7897,7932,7957,80
                                                                                                  10,8280,8291,8337,8344,8354,8374,8
                                                                                                  393,8600,8606,8610,8614,8636,8641,
                                                                                                  8645,8680,8686,8690,8695,8701,8724
                                                                                                  ,8729,8733,8755,8828,8836,8845,887
                                                                                                  2,8900,8908,8930,8974,8979,9046,90
                                                                                                  54,9063,9090,9112,9119,9245,9253,9
                                                                                                  262,9289,9308,9427,9435,9477,9492,
                                                                                                  9521,9534,9601,9618,9630,9643,9756
                                                                                                  ,9777,9864,9871,9883,9889,9898,990
                                                                                                  4,9912,9981,9988,10000,10006,10015
                                                                                                  ,10021,10029,10039,10045,10054,100
                                                                                                  60,10068,10139,10146,10158,10164,1
                                                                                                  0173,10179,10187,10196,10202,10209
                                                                                                  ,10217,10222,10233,10241,10246,102
                                                                                                  55,10329,10350,10437,10444,10456,1
                                                                                                  0462,10471,10477,10485,10554,10561
                                                                                                  ,10573,10579,10588,10594,10602,106
                                                                                                  12,10618,10627,10633,10641,10768,1
                                                                                                  0782,10794,10803,10816,10825,10842
                                                                                                  ,10850,10863,10882,10914,11093,111
                                                                                                  24,11171,11178,11325,11402,11456,1
                                                                                                  1469,11543,11556,11630,11643,11714
                                                                                                  ,12049,12063,12149,12255,12343    
 FIELD_EXIST                Func   815      L(4)            4           scalar                    599,815,817,8496,8512,8516,8525   
 FIELD_EXIST@0              Local  815      L(4)            4           scalar                                                      
 FILENAME                   Local  756      CHAR            256         scalar                    818,819                           
 FILES_READ                 Local  795      RECORD          1376  1     1        ALC              795,4831,4832,5377,5378,5391,5392,
                                                                                                  5398,5399,5401,5404,5493,5494,5496
                                                                                                  ,5536,5537,5539,5664,5665,5668,571
                                                                                                  2,5713,5716,5756,5757,5762,8270,82
                                                                                                  72,8302,8303,8304,8306,8326,8327,8
                                                                                                  334,8335,8336,8340,8341,8343,8345,
                                                                                                  8349,8350,8355,8362,8363,8364,8365
                                                                                                  ,8375,8383,8384,8385,8386,8387,839
                                                                                                  4,11494,11495,11499,11581,11582,11
                                                                                                  586,11668,11669,11673,12045,12047,
                                                                                                  12072,12073,12074,12096           
 FILES_WRITE                Local  795      RECORD          1376  1     1        ALC,TGT          795,883,887,888,895,896,897,901,90
                                                                                                  4,909,915,963,964,982,983,984,1009

Page 19          Source Listing                  FMS_IO_INIT
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,1010,1197,1199,1210              
 FILE_EXIST                 Func   814      L(4)            4           scalar                    599,814,7408,8444,8446            
 FILE_EXIST@0               Local  814      L(4)            4           scalar                                                      
 FMS_IO_INIT                Subr   750                                                                                              
 FMS_IO_NML                 Local  764                                  scalar                    764                               
 FORM                       Local  789      I(4)            4           scalar                    789,900,903,2589,2859,2999,3002,39
                                                                                                  45,3970,4300,4325,8285,8288,8295,8
                                                                                                  299,10935,12081,12089             
 FORMAT                     Local  787      CHAR            32          scalar                    623,635,787                       
 GET_GLOBAL_ATT_VALUE       Local  825                                  scalar                    598,825                           
 GET_GLOBAL_ATT_VALUE_TEXT@                                                                                                         
 0                          Local  825      L(4)            4           scalar                                                      
 GRD_FILE                   Local  756      CHAR            256         scalar                    811,814,815,817,818,819,825,832   
 GREAT_CIRCLE_ALGORITHM     Local  810      L(4)            4           scalar                    577,810,827,829,837,8758          
 I                          Local  752      I(4)            4           scalar                    798,799                           
 INPUT_NML_FILE             Local  764      CHAR                  1     1        ALC,TGT,PRIV     220,764                           
 IO_STATUS                  Local  752      I(4)            4           scalar                    764,765                           
 IS_MOSAIC_GRID             Local  757      L(4)            4           scalar                    813,816,820,824                   
 LOGUNIT                    Local  752      I(4)            4           scalar                                                      
 MAX_DOMAINS                Param  798      I(4)            4           scalar   PRIV             246,589,590,798,1277,4698         
 MAX_FILES_R                Local  795      I(4)            4           scalar                    626,635,795,8279,12062            
 MAX_FILES_W                Local  795      I(4)            4           scalar                    625,635,795,796,1205,4609,9533    
 MODULE_IS_INITIALIZED      Local  760      L(4)            4           scalar                    574,760,806,871,1015,1139,1351,141
                                                                                                  6,1480,1686,1719,1755,1793,1834,18
                                                                                                  69,1909,1951,1992,2028,2060,2094,2
                                                                                                  128,2166,2207,2248,2289,2330,2385,
                                                                                                  4751,4775,4795,4813,5321,5474,5517
                                                                                                  ,5551,5566,5580,5595,5610,5622,564
                                                                                                  5,5693,5739,6058,6127,6195,6267,63
                                                                                                  42,6405,6443,6480,6523,7401,7439,7
                                                                                                  473,7512,7548,7584,7604,7745,8755,
                                                                                                  8827,9045,9244,9755,9863,9980,1013
                                                                                                  8,10328,10436,10553,11455,11542,11
                                                                                                  629                               
 MPP_ERROR                  Local  766                                  scalar   PRIV             218,766,775,783,791,831,838,1139,1
                                                                                                  148,1161,1206,1250,1257,1277,1297,
                                                                                                  1351,1365,1370,1386,1388,1416,1424
                                                                                                  ,1430,1443,1456,1481,1486,1498,150
                                                                                                  6,1531,1686,1719,1755,1793,1834,18
                                                                                                  69,1871,1909,1911,1951,1955,1992,1
                                                                                                  994,2028,2060,2094,2128,2166,2169,
                                                                                                  2170,2207,2210,2211,2248,2251,2252
                                                                                                  ,2289,2292,2293,2330,2331,2385,238
                                                                                                  6,2442,2451,2463,2556,2566,2578,26
                                                                                                  00,2606,2660,2710,2735,2738,2819,2
                                                                                                  854,2871,2879,2890,2909,2964,3108,
                                                                                                  3203,3266,3304,3457,3479,3526,3588
                                                                                                  ,3641,3661,3664,3730,3736,3756,378
                                                                                                  6,3836,3900,3968,3979,3982,4097,41
                                                                                                  46,4153,4174,4237,4323,4334,4337,4
                                                                                                  415,4464,4471,4489,4534,4543,4556,
                                                                                                  4585,4603,4609,4655,4661,4668,4698
                                                                                                  ,4718,4751,4775,4795,4813,4882,492
                                                                                                  0,4931,4952,4980,5030,5046,5098,51
                                                                                                  02,5136,5156,5321,5325,5341,5364,5

Page 20          Source Listing                  FMS_IO_INIT
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  381,5387,5393,5474,5481,5488,5517,
                                                                                                  5524,5531,5551,5566,5580,5595,5610
                                                                                                  ,5622,5645,5658,5666,5693,5706,571
                                                                                                  4,5739,5749,5758,5816,5882,5924,59
                                                                                                  49,5981,5983,5985,5991,6054,6060,6
                                                                                                  123,6129,6191,6197,6264,6269,6339,
                                                                                                  6344,6407,6445,6482,6525,6547,6573
                                                                                                  ,6593,6596,6611,6614,6617,6632,663
                                                                                                  5,6638,6653,6656,6659,6674,6677,66
                                                                                                  80,6695,6698,6701,6717,6720,6723,6
                                                                                                  738,6741,6744,6759,6762,6765,6780,
                                                                                                  6783,6786,6801,6804,6807,6823,6826
                                                                                                  ,6829,6845,6848,6851,6867,6870,687
                                                                                                  3,6889,6892,6895,6911,6914,6917,69
                                                                                                  33,6936,6939,6955,6958,6961,6983,6
                                                                                                  986,7010,7023,7047,7060,7063,7089,
                                                                                                  7102,7105,7132,7145,7148,7173,7176
                                                                                                  ,7201,7212,7235,7246,7259,7282,729
                                                                                                  3,7306,7330,7341,7354,7398,7449,74
                                                                                                  83,7521,7561,7654,7750,7756,7779,7
                                                                                                  807,7821,7833,7845,7875,7879,7897,
                                                                                                  7909,7932,7957,8010,8280,8291,8337
                                                                                                  ,8344,8354,8374,8393,8600,8606,861
                                                                                                  0,8614,8636,8641,8645,8680,8686,86
                                                                                                  90,8695,8701,8724,8729,8733,8755,8
                                                                                                  828,8836,8845,8872,8900,8908,8930,
                                                                                                  8974,8979,9046,9054,9063,9090,9112
                                                                                                  ,9119,9245,9253,9262,9289,9308,942
                                                                                                  7,9435,9477,9492,9521,9534,9601,96
                                                                                                  18,9630,9643,9756,9777,9864,9871,9
                                                                                                  883,9889,9898,9904,9912,9981,9988,
                                                                                                  10000,10006,10015,10021,10029,1003
                                                                                                  9,10045,10054,10060,10068,10139,10
                                                                                                  146,10158,10164,10173,10179,10187,
                                                                                                  10196,10202,10209,10217,10222,1023
                                                                                                  3,10241,10246,10255,10329,10350,10
                                                                                                  437,10444,10456,10462,10471,10477,
                                                                                                  10485,10554,10561,10573,10579,1058
                                                                                                  8,10594,10602,10612,10618,10627,10
                                                                                                  633,10641,10768,10782,10794,10803,
                                                                                                  10816,10825,10842,10850,10863,1088
                                                                                                  2,10914,11093,11124,11171,11178,11
                                                                                                  325,11402,11456,11469,11543,11556,
                                                                                                  11630,11643,11714,12049,12063,1214
                                                                                                  9,12255,12343                     
 MPP_ERROR_BASIC            Subr   766                                           PRIV             766,775,783,791,831,838,1139,1148,
                                                                                                  1161,1206,1250,1257,1277,1297,1351
                                                                                                  ,1365,1370,1386,1388,1416,1424,143
                                                                                                  0,1443,1456,1481,1486,1498,1506,15
                                                                                                  31,1686,1719,1755,1793,1834,1869,1
                                                                                                  871,1909,1911,1951,1955,1992,1994,
                                                                                                  2028,2060,2094,2128,2166,2169,2170
                                                                                                  ,2207,2210,2211,2248,2251,2252,228
                                                                                                  9,2292,2293,2330,2331,2385,2386,24
                                                                                                  42,2451,2463,2556,2566,2578,2600,2

Page 21          Source Listing                  FMS_IO_INIT
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  606,2660,2710,2735,2738,2819,2854,
                                                                                                  2871,2879,2890,2909,2964,3108,3203
                                                                                                  ,3266,3304,3457,3479,3526,3588,364
                                                                                                  1,3661,3664,3730,3736,3756,3786,38
                                                                                                  36,3900,3968,3979,3982,4097,4146,4
                                                                                                  153,4174,4237,4323,4334,4337,4415,
                                                                                                  4464,4471,4489,4534,4543,4556,4585
                                                                                                  ,4603,4609,4655,4661,4668,4698,471
                                                                                                  8,4751,4775,4795,4813,4882,4920,49
                                                                                                  31,4952,4980,5030,5046,5098,5102,5
                                                                                                  136,5156,5321,5325,5341,5381,5387,
                                                                                                  5393,5474,5481,5488,5517,5524,5531
                                                                                                  ,5551,5566,5580,5595,5610,5622,564
                                                                                                  5,5658,5666,5693,5706,5714,5739,57
                                                                                                  49,5758,5816,5882,5924,5949,5981,5
                                                                                                  983,5985,6054,6060,6123,6129,6191,
                                                                                                  6197,6264,6269,6339,6344,6407,6445
                                                                                                  ,6482,6525,6547,6573,6593,6596,661
                                                                                                  1,6614,6617,6632,6635,6638,6653,66
                                                                                                  56,6659,6674,6677,6680,6695,6698,6
                                                                                                  701,6717,6720,6723,6738,6741,6744,
                                                                                                  6759,6762,6765,6780,6783,6786,6801
                                                                                                  ,6804,6807,6823,6826,6829,6845,684
                                                                                                  8,6851,6867,6870,6873,6889,6892,68
                                                                                                  95,6911,6914,6917,6933,6936,6939,6
                                                                                                  955,6958,6961,6983,6986,7010,7023,
                                                                                                  7047,7060,7063,7089,7102,7105,7132
                                                                                                  ,7145,7148,7173,7176,7201,7212,723
                                                                                                  5,7246,7259,7282,7293,7306,7330,73
                                                                                                  41,7354,7398,7449,7483,7521,7561,7
                                                                                                  654,7750,7756,7779,7807,7821,7833,
                                                                                                  7845,7875,7879,7897,7909,7932,7957
                                                                                                  ,8010,8280,8291,8337,8344,8354,837
                                                                                                  4,8393,8600,8606,8610,8614,8636,86
                                                                                                  41,8645,8680,8686,8690,8695,8701,8
                                                                                                  724,8729,8733,8755,8828,8836,8845,
                                                                                                  8872,8900,8908,8930,8974,8979,9046
                                                                                                  ,9054,9063,9090,9112,9119,9245,925
                                                                                                  3,9262,9289,9308,9427,9435,9477,94
                                                                                                  92,9521,9534,9601,9618,9630,9643,9
                                                                                                  756,9777,9864,9871,9883,9889,9898,
                                                                                                  9904,9912,9981,9988,10000,10006,10
                                                                                                  015,10021,10029,10039,10045,10054,
                                                                                                  10060,10068,10139,10146,10158,1016
                                                                                                  4,10173,10179,10187,10196,10202,10
                                                                                                  209,10217,10222,10233,10241,10246,
                                                                                                  10255,10329,10350,10437,10444,1045
                                                                                                  6,10462,10471,10477,10485,10554,10
                                                                                                  561,10573,10579,10588,10594,10602,
                                                                                                  10612,10618,10627,10633,10641,1076
                                                                                                  8,10782,10794,10803,10816,10825,10
                                                                                                  842,10850,10863,10882,10914,11093,
                                                                                                  11124,11171,11178,11325,11402,1145
                                                                                                  6,11469,11543,11556,11630,11643,11
                                                                                                  714,12049,12063,12149,12255,12343 

Page 22          Source Listing                  FMS_IO_INIT
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_IO_INIT                Subr   761                                           PRIV             200,761                           
 MPP_MULTI                  Param  779      I(4)            4           scalar   PRIV             207,779,3946,3970,4301,4325,7843,8
                                                                                                  062,8081,8109,8285,8286,8288,8289,
                                                                                                  8295,8296,8299,12083,12084,12091  
 MPP_NETCDF                 Param  789      I(4)            4           scalar   PRIV             207,789,3381,3669,7805,8062,8081,8
                                                                                                  109                               
 MPP_PE                     Func   837      I(4)            4           scalar   PRIV             218,837,1217,2331,2386,2718,3179,3
                                                                                                  181,3197,3484,3491,3514,3523,3554,
                                                                                                  3663,3681,3717,3727,3753,3818,3820
                                                                                                  ,3830,3981,4046,4049,4078,4103,410
                                                                                                  6,4127,4336,4372,4375,4396,4421,44
                                                                                                  24,4619,5110,5118,6412,6450,6487,6
                                                                                                  530,6554,6583,7022,7060,7063,7102,
                                                                                                  7105,7145,7148,7245,7258,7292,7305
                                                                                                  ,7340,7353,7654,7874,7908,8597,862
                                                                                                  2,8628,8677,8710,8716,8927,9151,97
                                                                                                  74,10347,11148,12242,12312        
 MPP_ROOT_PE                Func   837      I(4)            4           scalar   PRIV             218,837,1217,3663,3981,4336,4619,6
                                                                                                  071,6140,6208,6280,6355,6412,6450,
                                                                                                  6487,6530,6554,6583,7022,7060,7063
                                                                                                  ,7102,7105,7145,7148,7245,7258,729
                                                                                                  2,7305,7340,7353,7654,7874,7908,85
                                                                                                  97,8619,8622,8628,8650,8677,8707,8
                                                                                                  710,8716,8738                     
 MPP_SINGLE                 Param  781      I(4)            4           scalar   PRIV             207,781,903,904,3002,3003,3381,338
                                                                                                  2,3669,3670,3971,4326,7404,7414,74
                                                                                                  53,7487,7525,7841,7855,8062,8081,8
                                                                                                  109,8300,12092                    
 NOTE                       Param  838      I(4)            4           scalar   PRIV             218,838,4603,7023,7060,7063,7102,7
                                                                                                  105,7145,7148,7212,7246,7259,7293,
                                                                                                  7306,7341,7354,7654               
 NULL_DOMAIN2D              Local  799      DOMAIN2D        752         scalar   PRIV,SAVE        211,799,7629                      
 PACK_SIZE                  Local  774      I(4)            4           scalar                    774,775,967,2714,2882,3176,3532,11
                                                                                                  139                               
 PELIST                     Local  753      I(4)            4     1     1        ALC                                                
 READ_DATA                  Local  818                                  scalar                    591,818,8049                      
 REALARRAY                  Local  755      R(8)            8     1     4                         774                               
 REGISTERED_FILE            Local  796      CHAR            128   1     1        ALC              796,1525,1533,1535,4602,4611,9520,
                                                                                                  9540                              
 SIZE                       Func   774                                  scalar                    774                               
 THREADING_READ             Local  777      CHAR            32          scalar                    622,635,777,783                   
 THREAD_R                   Local  779      I(4)            4           scalar                    779,781                           
 TRANSFER                   Func   774                                  scalar                    774                               
 TRIM                       Func   783                                  scalar                    783,819,826,828,832               
 UNIT                       Local  752      I(4)            4           scalar                                                      

Page 23          Source Listing                  FMS_IO_INIT
2021-06-01 08:54                                 fms_io.F90

    842 
    843 ! </SUBROUTINE>
    844 ! <SUBROUTINE NAME="fms_io_exit">
    845 !   <DESCRIPTION>
    846 ! This routine is called after ALL fields have been written to temporary files
    847 ! The result NETCDF files are created here.
    848 !   </DESCRIPTION>
    849 !   <TEMPLATE>
    850 ! call fms_io_exit
    851 !   </TEMPLATE>
    852 
    853 subroutine fms_io_exit()
    854     integer                             :: num_x_axes, num_y_axes, num_z_axes
    855     integer                             :: unit
    856     real, dimension(max_axis_size)      :: axisdata
    857     real                                :: tlev
    858     integer,        dimension(max_axes) :: id_x_axes, siz_x_axes
    859     integer,        dimension(max_axes) :: id_y_axes, siz_y_axes
    860     integer,        dimension(max_axes) :: id_z_axes, siz_z_axes
    861     type(axistype), dimension(max_axes) :: x_axes, y_axes, z_axes
    862     type(axistype)                      :: t_axes
    863     type(var_type), pointer, save       :: cur_var=>NULL()
    864     integer                             :: i, j, k, kk
    865     character(len=256)                  :: filename
    866     character(len=10)                   :: axisname
    867     logical                             :: domain_present
    868     logical                             :: write_on_this_pe
    869     type(domain2d), pointer :: io_domain =>NULL()
    870 
    871     if( .NOT.module_is_initialized )return !make sure it's only called once per PE
    872 
    873     do i=1,max_axis_size
    874        axisdata(i) = i
    875     enddo
    876 
    877 ! each field has an associated domain type (may be undefined).
    878 ! each file only needs to write unique axes (i.e. if 2 fields share an identical axis, then only write the axis once)
    879 ! unique axes are defined by the global size and domain decomposition (i.e. can support identical axis sizes with
    880 ! different domain decomposition)
    881 
    882     do i = 1, num_files_w
    883        filename = files_write(i)%name
    884 
    885 !--- check if any field in this file present domain.
    886        domain_present = .false.
    887        do j = 1, files_write(i)%nvar
    888           if (files_write(i)%var(j)%domain_present) then
    889               domain_present = .true.
    890               exit
    891           end if
    892        end do
    893 
    894 !--- get the unique axes for all the fields.
    895        num_x_axes = unique_axes(files_write(i), 1, id_x_axes, siz_x_axes, domain_x)
    896        num_y_axes = unique_axes(files_write(i), 2, id_y_axes, siz_y_axes, domain_y)
    897        num_z_axes = unique_axes(files_write(i), 3, id_z_axes, siz_z_axes          )
    898 

Page 24          Source Listing                  FMS_IO_EXIT
2021-06-01 08:54                                 fms_io.F90

    899        if( domain_present ) then
    900           call mpp_open(unit,trim(filename),action=MPP_OVERWR,form=form, &
    901                is_root_pe=files_write(i)%is_root_pe, domain=array_domain(files_write(i)%var(j)%domain_idx))
    902        else  ! global data
    903           call mpp_open(unit,trim(filename),action=MPP_OVERWR,form=form,threading=MPP_SINGLE,&
    904                fileset=MPP_SINGLE, is_root_pe=files_write(i)%is_root_pe)
    905        end if
    906 
    907        write_on_this_pe = .false.
    908        if(domain_present) then
    909           io_domain => mpp_get_io_domain(array_domain(files_write(i)%var(j)%domain_idx))
    910           if(associated(io_domain)) then
    911              if(mpp_domain_is_tile_root_pe(io_domain)) write_on_this_pe = .true.
    912           endif
    913        endif
    914 !--- always write out from root pe
    915        if( files_write(i)%is_root_pe ) write_on_this_pe = .true.
    916 
    917        do j = 1, num_x_axes
    918          if (j < 10) then
    919              write(axisname,'(a,i1)') 'xaxis_',j
    920           else
    921              write(axisname,'(a,i2)') 'xaxis_',j
    922           endif
    923           if(id_x_axes(j) > 0) then
    924              call mpp_write_meta(unit,x_axes(j),axisname,'none',axisname, &
    925                   data=axisdata(1:siz_x_axes(j)),domain=domain_x(id_x_axes(j)),cartesian='X')
    926           else
    927              call mpp_write_meta(unit,x_axes(j),axisname,'none',axisname, &
    928                   data=axisdata(1:siz_x_axes(j)),cartesian='X')
    929           endif
    930        end do
    931 
    932        do j = 1, num_y_axes
    933          if (j < 10) then
    934              write(axisname,'(a,i1)') 'yaxis_',j
    935           else
    936              write(axisname,'(a,i2)') 'yaxis_',j
    937           endif
    938           if(id_y_axes(j) > 0) then
    939              call mpp_write_meta(unit,y_axes(j),axisname,'none',axisname, &
    940                   data=axisdata(1:siz_y_axes(j)),domain=domain_y(id_y_axes(j)),cartesian='Y')
    941           else
    942              call mpp_write_meta(unit,y_axes(j),axisname,'none',axisname, &
    943                   data=axisdata(1:siz_y_axes(j)),cartesian='Y')
    944           endif
    945        end do
    946 
    947        do j = 1, num_z_axes
    948           if (j < 10) then
    949              write(axisname,'(a,i1)') 'zaxis_',j
    950           else
    951              write(axisname,'(a,i2)') 'zaxis_',j
    952           endif
    953           call mpp_write_meta(unit,z_axes(j),axisname,'none',axisname, &
    954                data=axisdata(1:siz_z_axes(j)),cartesian='Z')
    955        end do

Page 25          Source Listing                  FMS_IO_EXIT
2021-06-01 08:54                                 fms_io.F90

    956 
    957 
    958 ! write time axis  (comment out if no time axis)
    959        call mpp_write_meta(unit,t_axes,&
    960             'Time','time level','Time',cartesian='T')
    961 
    962 ! write metadata for fields
    963        do j = 1, files_write(i)%nvar
    964           cur_var => files_write(i)%var(j)
    965           call mpp_write_meta(unit,cur_var%field, (/x_axes(cur_var%id_axes(1)), &
    966                y_axes(cur_var%id_axes(2)), z_axes(cur_var%id_axes(3)), t_axes/), cur_var%name, &
    967                'none',cur_var%name,pack=pack_size)
    968        enddo
    969 
    970 ! write values for ndim of spatial axes
    971        do j = 1, num_x_axes
    972           call mpp_write(unit,x_axes(j))
    973        enddo
    974        do j = 1, num_y_axes
    975           call mpp_write(unit,y_axes(j))
    976        enddo
    977        do j = 1, num_z_axes
    978           call mpp_write(unit,z_axes(j))
    979        enddo
    980 
    981 ! write data of each field
    982        do k = 1, files_write(i)%max_ntime
    983           do j = 1, files_write(i)%nvar
    984              cur_var => files_write(i)%var(j)
    985              tlev=k
    986 ! If some fields only have one time level, we do not need to write the second level, just keep
    987 ! the data missing.
    988 ! If some fields only have one time level, we just write out 0 to the other level
    989              if(k > cur_var%siz(4)) then
    990                 cur_var%buffer(:,:,:,1) = 0.0
    991                 kk = 1
    992              else
    993                 kk = k
    994              end if
    995              if(cur_var%domain_present) then
    996                 call mpp_write(unit, cur_var%field,array_domain(cur_var%domain_idx), cur_var%buffer(:,:,:,kk), tlev, &
    997                                default_data=cur_var%default_data)
    998              else if (write_on_this_pe) then
    999                 call mpp_write(unit, cur_var%field, cur_var%buffer(:,:,:,kk), tlev)
   1000              end if
   1001           enddo ! end j loop
   1002        enddo ! end k loop
   1003        call mpp_close(unit)
   1004     enddo ! end i loop
   1005 
   1006 !--- release the memory
   1007 
   1008     do i = 1,  num_files_w
   1009        do j = 1, files_write(i)%nvar
   1010           deallocate(files_write(i)%var(j)%buffer)
   1011        end do
   1012     end do

Page 26          Source Listing                  FMS_IO_EXIT
2021-06-01 08:54                                 fms_io.F90

   1013 
   1014   cur_var=>NULL()
   1015   module_is_initialized = .false.
   1016   num_files_w = 0
   1017   num_files_r = 0
   1018 
   1019 end subroutine fms_io_exit


ENTRY POINTS

  Name                                  
                                        
 fms_io_mod_mp_fms_io_exit_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   910                                  scalar                    910                               
 AXISDATA                   Local  856      R(8)            8     1     10000    TGT              874,925,928,940,943,954           
 AXISNAME                   Local  866      CHAR            10          scalar                    919,921,924,927,934,936,939,942,94
                                                                                                  9,951,953                         
 AXISTYPE                   Type   861                                  scalar   PRIV             206,323,861,862,2534,2535,2536,253
                                                                                                  8,2842,2843,2937,2938,2940,3335,33
                                                                                                  36,3338,5151,7664,8320,10740,10742
                                                                                                  ,10744,10746,10748,10750,10752,107
                                                                                                  55,12217                          
 CUR_VAR                    Local  863      VAR_TYPE        3328        scalar   PTR,SAVE         863,964,965,966,967,984,989,990,99
                                                                                                  5,996,997,999,1014                
 DOMAIN2D                   Type   869                                  scalar                    211,301,581,589,869,1051,1068,1082
                                                                                                  ,1097,1116,1134,1413,1477,1675,170
                                                                                                  8,1742,1780,1823,1857,1897,1937,19
                                                                                                  80,2018,2050,2084,2118,2155,2196,2
                                                                                                  237,2278,2549,2849,2950,2962,3890,
                                                                                                  4227,4509,4529,4746,4771,4787,4805
                                                                                                  ,4846,4912,4963,5013,5083,5089,509
                                                                                                  0,5232,5248,5264,5280,5295,5313,53
                                                                                                  14,5417,5431,5446,5460,5470,5471,5
                                                                                                  505,5513,5514,5632,5641,5680,5689,
                                                                                                  5773,5832,5851,5896,5918,7583,7624
                                                                                                  ,7945,7950,8039,8136,8140,8262,843
                                                                                                  4,8487                            
 DOMAIN_PRESENT             Local  867      L(4)            4           scalar                    886,889,899,908                   
 DOMAIN_X                   Local  895      RECORD          176   1     10       TGT,SAVE         895,925,1281,2983,3029,4702       
 DOMAIN_Y                   Local  896      RECORD          176   1     10       TGT,SAVE         896,940,1281,2984,3054,4702       
 FILENAME                   Local  865      CHAR            256         scalar                    883,900,903                       
 FMS_IO_EXIT                Subr   853                                                                                              
 I                          Local  864      I(4)            4           scalar                    873,874,882,883,887,888,895,896,89
                                                                                                  7,901,904,909,915,963,964,982,983,
                                                                                                  984,1008,1009,1010                
 ID_X_AXES                  Local  858      I(4)            4     1     40       TGT              895,923,925                       
 ID_Y_AXES                  Local  859      I(4)            4     1     40       TGT              896,938,940                       
 ID_Z_AXES                  Local  860      I(4)            4     1     40       TGT              897                               
 IO_DOMAIN                  Local  869      DOMAIN2D        752         scalar   PTR              869,909,910,911                   
 J                          Local  864      I(4)            4           scalar                    887,888,901,909,917,918,919,921,92

Page 27          Source Listing                  FMS_IO_EXIT
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  3,924,925,927,928,932,933,934,936,
                                                                                                  938,939,940,942,943,947,948,949,95
                                                                                                  1,953,954,963,964,971,972,974,975,
                                                                                                  977,978,983,984,1009,1010         
 K                          Local  864      I(4)            4           scalar                    982,985,989,993                   
 KK                         Local  864      I(4)            4           scalar                    991,993,996,999                   
 MAX_AXES                   Param  858      I(4)            4           scalar   PRIV             244,858,859,860,861,2932,2933,2934
                                                                                                  ,2935,2936,2937,3331,3332,3333,333
                                                                                                  4,3335,5978,5979,8320,8372,8373   
 MAX_AXIS_SIZE              Param  856      I(4)            4           scalar                    856,873,2931,2970,3330,3358,5990  
 MPP_CLOSE                  Subr   1003                                          PRIV             200,1003,2827,2913,3311,3594,7559,
                                                                                                  7564,8064,8622,8647,8710,8735,1133
                                                                                                  9                                 
 MPP_DOMAIN_IS_TILE_ROOT_PE Func   911      L(4)            4           scalar   PRIV             214,911,1215,2992,4617            
 MPP_GET_IO_DOMAIN          Func   909      RECORD          752         scalar   PTR,PRIV         216,909,1441,1496,2990,3930,4284,5
                                                                                                  101,5351,8178,8224                
 MPP_OPEN                   Subr   900                                           PRIV             200,900,903,2589,2859,2999,3002,33
                                                                                                  81,3669,3945,3970,4300,4325,7403,7
                                                                                                  413,7452,7486,7524,7853,8062,8081,
                                                                                                  8109,8285,8288,8295,8299,8598,8678
                                                                                                  ,10932,12079,12087                
 MPP_OVERWR                 Param  900      I(4)            4           scalar   PRIV             207,900,903,2480,2571,2859,2999,30
                                                                                                  02,3381,3598,3781,3815,7447,7481,7
                                                                                                  519,7817,10875                    
 MPP_WRITE                  Local  972                                  scalar   PRIV             200,972,975,978,996,999,2755,2756,
                                                                                                  2757,2758,2759,2760,2793,2805,2866
                                                                                                  ,3214,3217,3220,3224,3239,3242,324
                                                                                                  5,3248,3251,3256,3262,3272,3274,32
                                                                                                  76,3278,3284,3287,3291,3296,3301,3
                                                                                                  538,3541,3544,3576,3585,11215,1121
                                                                                                  9,11223,11227,11231,11235,11268,11
                                                                                                  298                               
 MPP_WRITE_2DDECOMP_R3D_R8  Subr   996                                           PRIV             996,3242,3248,3262                
 MPP_WRITE_AXIS             Subr   972                                           PRIV             972,975,978,2755,2756,2757,2758,27
                                                                                                  59,2760,2866,3214,3217,3220,3224,3
                                                                                                  538,3541,3544,11215,11219,11223,11
                                                                                                  227,11231,11235                   
 MPP_WRITE_META             Local  924                                  scalar   PRIV             201,924,927,939,942,953,959,965,16
                                                                                                  50,1652,1656,1658,2603,2609,2614,2
                                                                                                  621,2631,2641,2651,2653,2745,2748,
                                                                                                  2864,2894,3028,3031,3053,3056,3077
                                                                                                  ,3097,3102,3207,3405,3425,3445,345
                                                                                                  0,3531,10948,10965,10982,10999,110
                                                                                                  21,11044,11061,11070,11190,11200  
 MPP_WRITE_META_AXIS_R1D    Subr   924                                           PRIV             924,927,939,942,953,959,2603,2609,
                                                                                                  2614,2621,2651,2653,3028,3031,3053
                                                                                                  ,3056,3077,3097,3102,3405,3425,344
                                                                                                  5,3450,10948,10965,10982,10999,110
                                                                                                  61,11070                          
 MPP_WRITE_META_FIELD       Subr   965                                           PRIV             965,2745,2748,2894,3207,3531,11190
                                                                                                  ,11200                            
 MPP_WRITE_R3D_R8           Subr   999                                           PRIV             999,3278,3301,3585                
 NULL                       Func   863                                  scalar   PTR              273,300,301,305,341,349,353,357,36
                                                                                                  1,365,369,373,377,381,385,389,405,
                                                                                                  406,407,408,409,410,411,412,413,41

Page 28          Source Listing                  FMS_IO_EXIT
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  4,415,416,417,581,863,869,1014,113
                                                                                                  4,1135,1136,1326,1327,1328,1413,14
                                                                                                  54,1477,1504,1592,2539,2549,2550,2
                                                                                                  825,2844,2849,2850,2914,2941,2962,
                                                                                                  3312,3339,3596,3624,3749,3778,3846
                                                                                                  ,3880,3890,3940,4179,4217,4227,429
                                                                                                  4,4493,4529,4530,4733,4734,5089,50
                                                                                                  90,5313,5314,5353,5407,5470,5471,5
                                                                                                  498,5513,5514,5541,5641,5670,5689,
                                                                                                  5718,5943,5998,7950,7995,8189,8194
                                                                                                  ,8201,8212,8235,8240,8248,8916,893
                                                                                                  7,9133,9167,9322,9338,9593,9649,96
                                                                                                  86,9763,9783,10336,10356,10789,109
                                                                                                  40,10941,10955,10972,10989,11006,1
                                                                                                  1029,11052,11068,11086,11210,11261
                                                                                                  ,11333,11342,11343,11344,11920,119
                                                                                                  25,11974,12225,12233              
 NUM_FILES_R                Local  1017     I(4)            4           scalar                    568,1017,8269,8279,8281,8302,8303,
                                                                                                  8304,8305,12044,12062,12071,12072,
                                                                                                  12073,12074,12075                 
 NUM_FILES_W                Local  882      I(4)            4           scalar                    569,882,1008,1016,1196,1205,1208,1
                                                                                                  209                               
 NUM_X_AXES                 Local  854      I(4)            4           scalar                    895,917,971                       
 NUM_Y_AXES                 Local  854      I(4)            4           scalar                    896,932,974                       
 NUM_Z_AXES                 Local  854      I(4)            4           scalar                    897,947,977                       
 SIZ_X_AXES                 Local  858      I(4)            4     1     40       TGT              895,925,928                       
 SIZ_Y_AXES                 Local  859      I(4)            4     1     40       TGT              896,940,943                       
 SIZ_Z_AXES                 Local  860      I(4)            4     1     40       TGT              897,954                           
 TLEV                       Local  857      R(8)            8           scalar                    985,996,999                       
 TRIM                       Func   900                                  scalar                    900,903                           
 T_AXES                     Local  862      AXISTYPE        1424        scalar                    959,966                           
 UNIQUE_AXES                Func   895      I(4)            4           scalar   PRIV             605,895,896,897,2983,2984,2985,298
                                                                                                  6,3377,3378,3379,5947,5956,5977,59
                                                                                                  78,5979,5988,5989,5990,5992,5994  
 UNIQUE_AXES@0              Local  895      I(4)            4           scalar                                                      
 UNIT                       Local  855      I(4)            4           scalar                    900,903,924,927,939,942,953,959,96
                                                                                                  5,972,975,978,996,999,1003        
 VAR_TYPE                   Type   863                      3328        scalar   PRIV             346,406,863,1135,2539,2844,2941,33
                                                                                                  39,3624,3778,3880,4217,4530,5943,9
                                                                                                  421,10753                         
 WRITE_ON_THIS_PE           Local  868      L(4)            4           scalar                    907,911,915,998                   
 X_AXES                     Local  861      RECORD          1424  1     40                        924,927,965,972                   
 Y_AXES                     Local  861      RECORD          1424  1     40                        939,942,966,975                   
 Z_AXES                     Local  861      RECORD          1424  1     40                        953,966,978                       



Page 29          Source Listing                  FMS_IO_EXIT
2021-06-01 08:54 Symbol Table                    fms_io.F90

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 RESTART_FILE_TYPE.IS_ROOT_PE                                                                                              ...
                            L(4)            4     148            scalar   PRIV             901,904,915,1215,1217,2346,2402,25 
                                                                                           90,2860,2996,3000,3003,3382,3510,3 
                                                                                           513,3520,3522,3573,3575,3582,3584, 
                                                                                           3670,3713,3716,3717,3723,3726,3727 
                                                                                           ,3733,4617,4619,9546,10936         
 RESTART_FILE_TYPE.MAX_NTIME                                                                                               ...
                            I(4)            4     144            scalar   PRIV             982,1219,1248,1543,2660,2688,2696, 
                                                                                           2705,2766,3108,3118,3126,3135,3145 
                                                                                           ,3228,3457,3465,3474,3548,4621,465 
                                                                                           9,5391,5392,8340,8341,9545,9626,96 
                                                                                           27,11092,11131,11244               
 RESTART_FILE_TYPE.NAME     CHAR            128   4              scalar   PRIV             883,1197,1211,1251,1525,1540,2448, 
                                                                                           2557,2567,2579,2602,2608,2661,2711 
                                                                                           ,2736,2739,2820,2855,2872,2892,291 
                                                                                           0,3109,3204,3267,3305,3365,3458,34 
                                                                                           80,3527,3589,3651,3653,3731,3735,3 
                                                                                           757,3837,3841,3912,3914,4098,4147, 
                                                                                           4152,4175,4276,4278,4416,4465,4470 
                                                                                           ,4490,4585,4586,4613,4662,6598,661 
                                                                                           6,6619,6637,6640,6658,6661,6679,66 
                                                                                           82,6700,6703,6722,6725,6743,6746,6 
                                                                                           764,6767,6785,6788,6806,6809,6828, 
                                                                                           6831,6850,6853,6872,6875,6894,6897 
                                                                                           ,6916,6919,6938,6941,6960,6963,827 
                                                                                           0,8302,8345,8355,8375,8394,8869,88 
                                                                                           71,9087,9089,9286,9288,9476,9481,9 
                                                                                           491,9496,9499,9633,10784,10797,108 
                                                                                           19,10845,10854,10866,10886,10910,1 
                                                                                           1096,11128,11176,11183,11330,12045 
                                                                                           ,12072                             
 RESTART_FILE_TYPE.NVAR     I(4)            4     136            scalar   PRIV             887,963,983,1009,1222,1238,1254,12 
                                                                                           55,1256,1260,1541,2490,2657,2772,2 
                                                                                           869,2899,2976,3015,3019,3040,3044, 
                                                                                           3065,3069,3085,3089,3105,3229,3393 
                                                                                           ,3397,3413,3417,3433,3437,3454,355 
                                                                                           0,3678,3752,3789,3918,3996,4171,46 
                                                                                           22,4645,4665,4666,4667,4671,4831,5 
                                                                                           951,6596,6614,6635,6656,6677,6698, 
                                                                                           6720,6741,6762,6783,6804,6826,6848 
                                                                                           ,6870,6892,6914,6936,6958,6986,701 
                                                                                           4,7022,7051,7059,7093,7101,7136,71 
                                                                                           44,7176,7204,7211,7238,7245,7251,7 
                                                                                           258,7285,7292,7298,7305,7333,7340, 
                                                                                           7346,7353,8304,8326,8334,8335,8336 
                                                                                           ,8343,8349,9547,9582,9640,9641,964 
                                                                                           2,9648,10840,11079,11254,12074     
 RESTART_FILE_TYPE.VAR      RECORD          3328  248      1     1        PTR,TGT,PRIV     888,901,909,964,984,1010,1221,1224 
                                                                                           ,1225,1226,1227,1228,1229,1230,123 
                                                                                           1,1232,1239,1246,1261,1547,1548,15 
                                                                                           63,1691,1692,1725,1726,1762,1763,1 
                                                                                           803,1804,1839,1840,1880,1881,1919, 
                                                                                           1920,1963,1964,2002,2003,2035,2067 

Page 30          Source Listing                  FMS_IO_EXIT
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           ,2101,2135,2179,2220,2261,2302,233 
                                                                                           8,2339,2340,2341,2342,2343,2344,23 
                                                                                           45,2347,2348,2349,2350,2351,2352,2 
                                                                                           353,2354,2355,2356,2357,2358,2393, 
                                                                                           2394,2395,2396,2397,2398,2399,2400 
                                                                                           ,2401,2403,2404,2405,2406,2407,240 
                                                                                           8,2409,2410,2411,2412,2413,2442,24 
                                                                                           91,2658,2773,2870,2900,2964,2977,2 
                                                                                           990,3000,3016,3017,3041,3042,3066, 
                                                                                           3067,3086,3087,3106,3230,3394,3395 
                                                                                           ,3414,3415,3434,3435,3455,3551,364 
                                                                                           1,3679,3753,3754,3755,3757,3790,39 
                                                                                           00,3919,3921,3997,4172,4173,4175,4 
                                                                                           237,4246,4487,4488,4490,4583,4588, 
                                                                                           4625,4626,4627,4628,4629,4630,4631 
                                                                                           ,4632,4633,4634,4635,4636,4637,463 
                                                                                           8,4639,4646,4653,4672,4832,5377,53 
                                                                                           78,5398,5399,5401,5404,5493,5494,5 
                                                                                           496,5536,5537,5539,5664,5665,5668, 
                                                                                           5712,5713,5716,5756,5757,5762,5952 
                                                                                           ,6593,6600,6611,6617,6619,6632,663 
                                                                                           8,6640,6653,6659,6661,6674,6680,66 
                                                                                           82,6695,6701,6703,6717,6723,6725,6 
                                                                                           738,6744,6746,6759,6765,6767,6780, 
                                                                                           6786,6788,6801,6807,6809,6823,6829 
                                                                                           ,6831,6845,6851,6853,6867,6873,687 
                                                                                           5,6889,6895,6897,6911,6917,6919,69 
                                                                                           33,6939,6941,6955,6961,6963,6983,6 
                                                                                           989,7010,7015,7016,7047,7053,7089, 
                                                                                           7095,7132,7138,7173,7179,7201,7205 
                                                                                           ,7206,7235,7240,7252,7253,7282,728 
                                                                                           7,7299,7300,7330,7335,7347,7348,83 
                                                                                           03,8327,8350,8362,8363,8364,8365,8 
                                                                                           383,8384,8385,8386,8387,8835,9053, 
                                                                                           9252,9472,9503,9549,9550,9551,9552 
                                                                                           ,9553,9554,9555,9556,9557,9558,955 
                                                                                           9,9560,9561,9562,9563,9564,9565,95 
                                                                                           66,9567,9568,9569,9570,9571,9572,9 
                                                                                           573,9574,9575,9583,9594,9650,9818, 
                                                                                           9819,9934,9935,10091,10092,10278,1 
                                                                                           0279,10391,10392,10507,10508,10664 
                                                                                           ,10665,10767,10841,10844,10849,108 
                                                                                           53,11082,11257,11494,11495,11499,1 
                                                                                           1581,11582,11586,11668,11669,11673 
                                                                                           ,12073                             
 VAR_TYPE.BUFFER            R(8)            8     384      4     1        ALC,PRIV         990,996,999,1010,1314,1316,1317,13 
                                                                                           18,1319,1320,1324                  
 VAR_TYPE.DEFAULT_DATA      R(8)            8     3160           scalar   PRIV             997,1268,2718,2720,2722,2729,2732, 
                                                                                           2746,2749,2796,2799,2802,2810,2816 
                                                                                           ,3240,3243,3246,3249,3252,3257,326 
                                                                                           3,4678,9568,9665,11149,11152,11155 
                                                                                           ,11158,11164,11168,11198,11207,112 
                                                                                           79,11287,11295,11311,11322         
 VAR_TYPE.DOMAIN_IDX        I(4)            4     532            scalar   PRIV             901,909,996,1227,1284,2990,3000,31 
                                                                                           51,3152,3153,3154,3239,3242,3245,3 

Page 31          Source Listing                  FMS_IO_EXIT
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           248,3251,3256,3262,3792,3793,3794, 
                                                                                           3795,3921,3999,4001,4002,4003,4004 
                                                                                           ,4248,4250,4251,4252,4253,4627,470 
                                                                                           5,5959,5962,5963,5988,9553         
 VAR_TYPE.DOMAIN_PRESENT    L(4)            4     528            scalar   PRIV             888,995,1225,1273,1303,2977,3237,3 
                                                                                           919,3998,4247,4626,4694,4728,9552  
 VAR_TYPE.FIELD             FIELDTYPE       1096  552            scalar   PRIV             965,996,999,2745,2748,2793,2795,27 
                                                                                           98,2801,2805,2809,2815,2894,2902,2 
                                                                                           906,3207,3239,3242,3245,3248,3251, 
                                                                                           3256,3262,3272,3274,3276,3278,3284 
                                                                                           ,3287,3291,3296,3301,3531,3576,358 
                                                                                           5,5401,5404,5496,5539,5668,5716,57 
                                                                                           62,8363,11191,11201,11269,11274,11 
                                                                                           282,11290,11299,11306,11317,11499, 
                                                                                           11586,11673                        
 VAR_TYPE.ID_AXES           I(4)            4     3116     1     4        PRIV             965,966,1232,3017,3042,3067,3087,3 
                                                                                           117,3124,3125,3132,3133,3134,3141, 
                                                                                           3142,3143,3144,3395,3415,3435,3463 
                                                                                           ,3464,3471,3472,3473,4632,5975,599 
                                                                                           4,9561                             
 VAR_TYPE.NAME              CHAR            128   0              scalar   PRIV             966,967,1224,1239,1251,1267,2661,2 
                                                                                           710,2736,2739,2745,2748,2820,2872, 
                                                                                           2892,2894,2910,3109,3204,3207,3267 
                                                                                           ,3305,3458,3479,3527,3531,3589,369 
                                                                                           6,3731,3757,3837,3841,4030,4175,43 
                                                                                           53,4490,4625,4646,4662,4677,4832,6 
                                                                                           600,6619,6640,6661,6682,6703,6725, 
                                                                                           6746,6767,6788,6809,6831,6853,6875 
                                                                                           ,6897,6919,6941,6963,7015,7205,725 
                                                                                           2,7299,7347,8327,8362,8384,9549,95 
                                                                                           83,9632,9664,10844,10853,11095,111 
                                                                                           27,11175,11182,11193,11203,11329   
 VAR_TYPE.SIZ               I(4)            4     3080     1     5        PRIV             989,1230,1247,1248,1250,1262,1263, 
                                                                                           1264,1265,1266,1295,1296,1313,1314 
                                                                                           ,1316,1319,1324,1691,1725,1762,180 
                                                                                           3,1839,1880,1919,1963,2002,2338,23 
                                                                                           93,2660,2688,2696,2705,2715,2716,2 
                                                                                           791,2807,2813,2871,2904,3108,3118, 
                                                                                           3126,3135,3145,3175,3177,3236,3254 
                                                                                           ,3260,3289,3294,3299,3457,3465,347 
                                                                                           4,3488,3489,3506,3569,3707,3816,40 
                                                                                           41,4075,4081,4089,4124,4130,4138,4 
                                                                                           367,4393,4399,4407,4442,4448,4456, 
                                                                                           4630,4654,4658,4659,4661,4674,4690 
                                                                                           ,4691,4716,4717,4721,4723,5377,566 
                                                                                           4,5712,5756,5757,6617,6638,6659,66 
                                                                                           80,6701,6723,6744,6765,6786,6807,6 
                                                                                           829,6851,6873,6895,6917,6939,6961, 
                                                                                           8364,8386,9559,9625,9626,9627,9629 
                                                                                           ,9661,9818,9934,10091,10278,10391, 
                                                                                           10507,10664,11091,11131,11144,1114 
                                                                                           5,11266                            

Page 32          Source Listing                  FMS_IO_EXIT
2021-06-01 08:54                                 fms_io.F90

   1020 !.....................................................................
   1021 ! </SUBROUTINE>
   1022 
   1023 ! <SUBROUTINE NAME="write_data">
   1024 !<DESCRIPTION>
   1025 ! This subroutine performs writing "fieldname" to file "filename". All values of "fieldname"
   1026 ! will be written to a temporary file. The final NETCDF file will be created only at a later step
   1027 ! when the user calls fms_io_exit. Therefore, make sure that fms_io_exit is called after all
   1028 ! fields have been written by this subroutine.
   1029 !</DESCRIPTION>
   1030 !   <TEMPLATE>
   1031 ! call write_data(filename, fieldname, data, domain)
   1032 !   </TEMPLATE>
   1033 !   <IN NAME="filename" TYPE="character" DIM="(*)">
   1034 !    File name
   1035 !   </IN>
   1036 !   <IN NAME="fieldname" TYPE="character" DIM="(*)">
   1037 !    Field  name
   1038 !   </IN>
   1039 !   <IN NAME="data"  TYPE="real">
   1040 !   array containing data of fieldname
   1041 !   </IN>
   1042 !   <IN NAME="domain"  TYPE="domain, optional">
   1043 !   domain of fieldname
   1044 !   </IN>
   1045 !=================================================================================
   1046 subroutine write_data_i3d_new(filename, fieldname, data, domain,                  &
   1047                               no_domain, position, tile_count, data_default)
   1048 
   1049   character(len=*), intent(in) :: filename, fieldname
   1050   integer, dimension(:,:,:), intent(in) :: data
   1051   type(domain2d), intent(in), optional :: domain
   1052   logical, intent(in), optional :: no_domain
   1053   integer, intent(in), optional :: position, tile_count, data_default
   1054   real :: default_data
   1055 
   1056   default_data = TRANSFER(MPP_FILL_INT,default_data)
   1057   if(present(data_default)) default_data = real(data_default)
   1058 
   1059   call write_data_3d_new(filename, fieldname, real(data), domain,  &
   1060                          no_domain, .false., position, tile_count, data_default=default_data)
   1061 end subroutine write_data_i3d_new

Page 33          Source Listing                  WRITE_DATA_I3D_NEW
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                         
                                               
 fms_io_mod_mp_write_data_i3d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1046     I(4)            4     3     1        ARG,IN           1059                              
 DATA_DEFAULT               Dummy  1047     I(4)            4           scalar   ARG,IN           1057                              
 DEFAULT_DATA               Local  1054     R(8)            8           scalar                    1056,1057,1060                    
 DOMAIN                     Dummy  1046     DOMAIN2D        752         scalar   ARG,IN           1059                              
 FIELDNAME                  Dummy  1046     CHAR                        scalar   ARG,IN           1059                              
 FILENAME                   Dummy  1046     CHAR                        scalar   ARG,IN           1059                              
 MPP_FILL_INT               Param  1056     I(4)            4           scalar   PRIV             222,1056,1073,1089,1104,1872,1912,
                                                                                                  1956,1995,2171,2212,2253,2294     
 NO_DOMAIN                  Dummy  1047     L(4)            4           scalar   ARG,IN           1060                              
 POSITION                   Dummy  1047     I(4)            4           scalar   ARG,IN           1060                              
 PRESENT                    Func   1057                                 scalar                    1057                              
 REAL                       Func   1057                                 scalar                    1057,1059                         
 TILE_COUNT                 Dummy  1047     I(4)            4           scalar   ARG,IN           1060                              
 TRANSFER                   Func   1056                                 scalar                    1056                              
 WRITE_DATA_I3D_NEW         Subr   1046                                          PRIV                                               

Page 34          Source Listing                  WRITE_DATA_I3D_NEW
2021-06-01 08:54                                 fms_io.F90

   1062 !.....................................................................
   1063 subroutine write_data_i2d_new(filename, fieldname, data, domain, &
   1064                               no_domain, position, tile_count, data_default)
   1065 
   1066   character(len=*), intent(in) :: filename, fieldname
   1067   integer, dimension(:,:), intent(in) :: data
   1068   type(domain2d), intent(in), optional :: domain
   1069   logical, intent(in), optional :: no_domain
   1070   integer, intent(in), optional :: position, tile_count, data_default
   1071   real :: default_data
   1072 
   1073   default_data = TRANSFER(MPP_FILL_INT,default_data)
   1074   if(present(data_default)) default_data = real(data_default)
   1075   call write_data_2d_new(filename, fieldname, real(data), domain, &
   1076                          no_domain, position, tile_count, data_default=default_data)
   1077 
   1078 end subroutine write_data_i2d_new


ENTRY POINTS

  Name                                         
                                               
 fms_io_mod_mp_write_data_i2d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1063     I(4)            4     2     1        ARG,IN           1075                              
 DATA_DEFAULT               Dummy  1064     I(4)            4           scalar   ARG,IN           1074                              
 DEFAULT_DATA               Local  1071     R(8)            8           scalar                    1073,1074,1076                    
 DOMAIN                     Dummy  1063     DOMAIN2D        752         scalar   ARG,IN           1075                              
 FIELDNAME                  Dummy  1063     CHAR                        scalar   ARG,IN           1075                              
 FILENAME                   Dummy  1063     CHAR                        scalar   ARG,IN           1075                              
 NO_DOMAIN                  Dummy  1064     L(4)            4           scalar   ARG,IN           1076                              
 POSITION                   Dummy  1064     I(4)            4           scalar   ARG,IN           1076                              
 PRESENT                    Func   1074                                 scalar                    1074                              
 REAL                       Func   1074                                 scalar                    1074,1075                         
 TILE_COUNT                 Dummy  1064     I(4)            4           scalar   ARG,IN           1076                              
 TRANSFER                   Func   1073                                 scalar                    1073                              
 WRITE_DATA_I2D_NEW         Subr   1063                                          PRIV                                               

Page 35          Source Listing                  WRITE_DATA_I2D_NEW
2021-06-01 08:54                                 fms_io.F90

   1079 !.....................................................................
   1080 subroutine write_data_i1d_new(filename, fieldname, data, domain, &
   1081                               no_domain, tile_count, data_default)
   1082   type(domain2d), intent(in), optional :: domain
   1083   character(len=*), intent(in) :: filename, fieldname
   1084   integer, dimension(:), intent(in) :: data
   1085   logical, intent(in), optional :: no_domain
   1086   integer, intent(in), optional :: tile_count, data_default
   1087   real :: default_data
   1088 
   1089   default_data = TRANSFER(MPP_FILL_INT,default_data)
   1090   if(present(data_default)) default_data = real(data_default)
   1091   call write_data_1d_new(filename, fieldname, real(data), domain, &
   1092                          no_domain, tile_count, data_default=default_data)
   1093 end subroutine write_data_i1d_new


ENTRY POINTS

  Name                                         
                                               
 fms_io_mod_mp_write_data_i1d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1080     I(4)            4     1     1        ARG,IN           1091                              
 DATA_DEFAULT               Dummy  1081     I(4)            4           scalar   ARG,IN           1090                              
 DEFAULT_DATA               Local  1087     R(8)            8           scalar                    1089,1090,1092                    
 DOMAIN                     Dummy  1080     DOMAIN2D        752         scalar   ARG,IN           1091                              
 FIELDNAME                  Dummy  1080     CHAR                        scalar   ARG,IN           1091                              
 FILENAME                   Dummy  1080     CHAR                        scalar   ARG,IN           1091                              
 NO_DOMAIN                  Dummy  1081     L(4)            4           scalar   ARG,IN           1092                              
 PRESENT                    Func   1090                                 scalar                    1090                              
 REAL                       Func   1090                                 scalar                    1090,1091                         
 TILE_COUNT                 Dummy  1081     I(4)            4           scalar   ARG,IN           1092                              
 TRANSFER                   Func   1089                                 scalar                    1089                              
 WRITE_DATA_I1D_NEW         Subr   1080                                          PRIV                                               

Page 36          Source Listing                  WRITE_DATA_I1D_NEW
2021-06-01 08:54                                 fms_io.F90

   1094 !.....................................................................
   1095 subroutine write_data_iscalar_new(filename, fieldname, data, domain, &
   1096                                   no_domain, tile_count, data_default)
   1097   type(domain2d), intent(in), optional :: domain
   1098   character(len=*), intent(in) :: filename, fieldname
   1099   integer, intent(in) :: data
   1100   logical, intent(in), optional :: no_domain
   1101   integer, intent(in), optional :: tile_count, data_default
   1102   real :: default_data
   1103 
   1104   default_data = TRANSFER(MPP_FILL_INT,default_data)
   1105   if(present(data_default)) default_data = real(data_default)
   1106   call write_data_scalar_new(filename, fieldname, real(data), domain, &
   1107                              no_domain, tile_count, data_default=default_data)
   1108 
   1109 end subroutine write_data_iscalar_new


ENTRY POINTS

  Name                                             
                                                   
 fms_io_mod_mp_write_data_iscalar_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1095     I(4)            4           scalar   ARG,IN           1106                              
 DATA_DEFAULT               Dummy  1096     I(4)            4           scalar   ARG,IN           1105                              
 DEFAULT_DATA               Local  1102     R(8)            8           scalar                    1104,1105,1107                    
 DOMAIN                     Dummy  1095     DOMAIN2D        752         scalar   ARG,IN           1106                              
 FIELDNAME                  Dummy  1095     CHAR                        scalar   ARG,IN           1106                              
 FILENAME                   Dummy  1095     CHAR                        scalar   ARG,IN           1106                              
 NO_DOMAIN                  Dummy  1096     L(4)            4           scalar   ARG,IN           1107                              
 PRESENT                    Func   1105                                 scalar                    1105                              
 REAL                       Func   1105                                 scalar                    1105,1106                         
 TILE_COUNT                 Dummy  1096     I(4)            4           scalar   ARG,IN           1107                              
 TRANSFER                   Func   1104                                 scalar                    1104                              
 WRITE_DATA_ISCALAR_NEW     Subr   1095                                          PRIV                                               

Page 37          Source Listing                  WRITE_DATA_ISCALAR_NEW
2021-06-01 08:54                                 fms_io.F90

   1110 !.....................................................................
   1111 subroutine write_data_3d_new(filename, fieldname, data, domain, no_domain, scalar_or_1d, &
   1112                              position, tile_count, data_default)
   1113 
   1114   character(len=*),         intent(in)         :: filename, fieldname
   1115   real, dimension(:,:,:),   intent(in)         :: data
   1116   type(domain2d), optional, intent(in), target :: domain
   1117   real,           optional, intent(in)         :: data_default
   1118   logical,        optional, intent(in)         :: no_domain
   1119   logical,        optional, intent(in)         :: scalar_or_1d
   1120   integer,        optional, intent(in)         :: position, tile_count
   1121 
   1122 !--- local variables
   1123   real,               allocatable :: tmp_buffer(:,:,:,:)
   1124   integer                         :: index_field ! position of the fieldname in the list of fields
   1125   integer                         :: index_file  ! position of the filename in the list of files_write
   1126   logical                         :: append_pelist, is_no_domain, is_scalar_or_1d
   1127   character(len=256)              :: fname, filename2,append_string
   1128   real                            :: default_data
   1129   integer                         :: length, i, domain_idx
   1130   integer                         :: ishift, jshift
   1131   integer                         :: gxsize, gysize
   1132   integer                         :: cxsize, cysize
   1133   integer                         :: dxsize, dysize
   1134   type(domain2d), pointer, save   :: d_ptr   =>NULL()
   1135   type(var_type), pointer, save   :: cur_var =>NULL()
   1136   type(restart_file_type), pointer, save :: cur_file =>NULL()
   1137 
   1138 ! Initialize files to default values
   1139   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(write_data_3d_new): need to call fms_io_init')
   1140 
   1141 
   1142   if(PRESENT(data_default))then
   1143      default_data=data_default
   1144   else
   1145      default_data=MPP_FILL_DOUBLE
   1146   endif
   1147 
   1148   if(present(tile_count) .AND. .not. present(domain)) call mpp_error(FATAL, &
   1149          'fms_io write_data: when tile_count is present, domain must be present')
   1150 
   1151   is_scalar_or_1d = .false.
   1152   if(PRESENT(scalar_or_1d)) is_scalar_or_1d = scalar_or_1d
   1153 
   1154   is_no_domain = .false.
   1155   if (PRESENT(no_domain)) THEN
   1156      is_no_domain = no_domain
   1157   end if
   1158 
   1159   if(is_no_domain) then
   1160      if(PRESENT(domain)) &
   1161        call mpp_error(FATAL, 'fms_io(write_data_3d_new): no_domain cannot be .true. when optional argument domain is present
   1161 .')
   1162   else if(PRESENT(domain))then
   1163      d_ptr => domain
   1164   else if (ASSOCIATED(Current_domain)) then
   1165      d_ptr => Current_domain

Page 38          Source Listing                  WRITE_DATA_3D_NEW
2021-06-01 08:54                                 fms_io.F90

   1166   endif
   1167 
   1168 !--- remove .nc from file name
   1169   length = len_trim(filename)
   1170   if(filename(length-2:length) == '.nc') then
   1171      filename2 = filename(1:length-3)
   1172   else
   1173      filename2 = filename(1:length)
   1174   end if
   1175 
   1176 !Logical append_pelist decides whether to append the pelist_name to file name
   1177   append_pelist = .false.
   1178 !Append a string to the file name
   1179   append_string=''
   1180 
   1181 !If the filename_appendix  is set override the passed argument.
   1182   if(len_trim(filename_appendix) > 0)  then
   1183      append_pelist = .true.
   1184      append_string = filename_appendix
   1185   endif
   1186 
   1187   if(append_pelist) filename2 = trim(filename2)//'.'//trim(append_string)
   1188 
   1189 !JWD:  This is likely a temporary fix. Since fms_io needs to know tile_count,
   1190 !JWD:  I just don't see how the physics can remain "tile neutral"
   1191 !z1l:  one solution is add one more public interface called set_tile_count
   1192   call get_mosaic_tile_file(filename2, fname, is_no_domain, domain, tile_count)
   1193 
   1194 ! Check if filename has been open  or not
   1195   index_file = -1
   1196   do i=1,num_files_w
   1197      if (trim(files_write(i)%name) == trim(fname)) then
   1198         index_file = i
   1199         cur_file => files_write(index_file)
   1200         exit
   1201      endif
   1202   enddo
   1203 
   1204   if (index_file < 0) then
   1205      if(num_files_w == max_files_w) &  ! need to have bigger max_files_w
   1206           call mpp_error(FATAL,'fms_io(write_data_3d_new): max_files_w exceeded, increase it via fms_io_nml')
   1207 ! record the file name in array files_write
   1208      num_files_w=num_files_w + 1
   1209      index_file = num_files_w
   1210      cur_file => files_write(index_file)
   1211      cur_file%name = trim(fname)
   1212      cur_file%tile_count=1
   1213      if(present(tile_count)) cur_file%tile_count = tile_count
   1214      if(ASSOCIATED(d_ptr))then
   1215         cur_file%is_root_pe = mpp_domain_is_tile_root_pe(d_ptr)
   1216      else
   1217         cur_file%is_root_pe = mpp_pe() == mpp_root_pe()
   1218      endif
   1219      cur_file%max_ntime = 1
   1220 !-- allocate memory
   1221      allocate(cur_file%var(max_fields) )
   1222      cur_file%nvar = 0

Page 39          Source Listing                  WRITE_DATA_3D_NEW
2021-06-01 08:54                                 fms_io.F90

   1223      do i = 1, max_fields
   1224         cur_file%var(i)%name           = 'none'
   1225         cur_file%var(i)%domain_present = .false.
   1226         cur_file%var(i)%read_only      = .false.
   1227         cur_file%var(i)%domain_idx     = -1
   1228         cur_file%var(i)%is_dimvar      = .false.
   1229         cur_file%var(i)%position       = CENTER
   1230         cur_file%var(i)%siz(:)         = 0
   1231         cur_file%var(i)%gsiz(:)        = 0
   1232         cur_file%var(i)%id_axes(:)     = -1
   1233      end do
   1234   endif
   1235 
   1236 ! check if the field is new or not and get position and dimension of the field
   1237   index_field = -1
   1238   do i = 1, cur_file%nvar
   1239      if(trim(cur_file%var(i)%name) == trim(fieldname)) then
   1240         index_field = i
   1241         exit
   1242      end if
   1243   end do
   1244 
   1245   if(index_field > 0) then
   1246      cur_var   => cur_file%var(index_field)
   1247      cur_var%siz(4) =  cur_var%siz(4) + 1
   1248      if(cur_file%max_ntime < cur_var%siz(4) ) cur_file%max_ntime = cur_var%siz(4)
   1249 ! the time level should be no larger than MAX_TIME_LEVEL_WRITE ( =20) for write_data.
   1250      if( cur_var%siz(4) > MAX_TIME_LEVEL_WRITE ) call mpp_error(FATAL, 'fms_io(write_data_3d_new): ' // &
   1251           'the time level of field '//trim(cur_var%name)//' in file '//trim(cur_file%name)// &
   1252           ' is greater than MAX_TIME_LEVEL_WRITE(=20), increase MAX_TIME_LEVEL_WRITE or check your code')
   1253   else
   1254      cur_file%nvar = cur_file%nvar +1
   1255      if(cur_file%nvar>max_fields) then
   1256         write(error_msg,'(I3,"/",I3)') cur_file%nvar, max_fields
   1257         call  mpp_error(FATAL,'fms_io(write_data_3d_new): max_fields exceeded, needs increasing, nvar/max_fields=' &
   1258              //trim(error_msg))
   1259      endif
   1260      index_field =  cur_file%nvar
   1261      cur_var   => cur_file%var(index_field)
   1262      cur_var%siz(1)  = size(data,1)
   1263      cur_var%siz(2)  = size(data,2)
   1264      cur_var%siz(3)  = size(data,3)
   1265      cur_var%siz(4)  = 1
   1266      cur_var%gsiz(3) = cur_var%siz(3)
   1267      cur_var%name = fieldname
   1268      cur_var%default_data = default_data
   1269      cur_var%ndim = 3
   1270      if(present(position)) cur_var%position = position
   1271 
   1272      if(ASSOCIATED(d_ptr) .AND. .NOT. is_scalar_or_1d)then
   1273         cur_var%domain_present = .true.
   1274         domain_idx = lookup_domain(d_ptr)
   1275         if(domain_idx == -1) then
   1276            num_domains = num_domains + 1
   1277            if(num_domains > max_domains) call  mpp_error(FATAL,'fms_io(write_data_3d_new), 1: max_domains exceeded,' &
   1278                 //' needs increasing')
   1279            domain_idx = num_domains

Page 40          Source Listing                  WRITE_DATA_3D_NEW
2021-06-01 08:54                                 fms_io.F90

   1280            array_domain(domain_idx) = d_ptr
   1281            call mpp_get_domain_components(array_domain(domain_idx), domain_x(domain_idx), domain_y(domain_idx), &
   1282                 tile_count=tile_count)
   1283         endif
   1284         cur_var%domain_idx = domain_idx
   1285         call mpp_get_domain_shift ( array_domain(domain_idx), ishift, jshift, position)
   1286         call mpp_get_global_domain(array_domain(domain_idx), xsize=gxsize,ysize=gysize,tile_count=tile_count)
   1287         call mpp_get_compute_domain(array_domain(domain_idx), xsize = cxsize, ysize = cysize, tile_count=tile_count)
   1288         call mpp_get_data_domain   (array_domain(domain_idx), xsize = dxsize, ysize = dysize, tile_count=tile_count)
   1289         if (ishift .NE. 0) then
   1290            cxsize = cxsize+ishift; dxsize = dxsize+ishift; gxsize = gxsize + ishift
   1291         end if
   1292         if (jshift .NE. 0) then
   1293            cysize = cysize+jshift; dysize = dysize+jshift; gysize = gysize + jshift
   1294         endif
   1295         if( (cur_var%siz(1) .NE. cxsize .AND. cur_var%siz(1) .NE. dxsize ) .OR. &
   1296             (cur_var%siz(2) .NE. cysize .AND. cur_var%siz(2) .NE. dysize ) ) then
   1297             call mpp_error(FATAL, 'fms_io(write_data_3d_new): data should be on either compute domain '//&
   1298               'or data domain when domain is present for field '//trim(fieldname)//' of file '//trim(filename) )
   1299         end if
   1300         cur_var%gsiz(1)   = gxsize
   1301         cur_var%gsiz(2)   = gysize
   1302      else
   1303         cur_var%domain_present=.false.
   1304         cur_var%gsiz(1) = size(data,1)
   1305         cur_var%gsiz(2) = size(data,2)
   1306      endif
   1307   end if
   1308 
   1309 ! copy the data to the buffer
   1310 ! if the time level is greater than the size(cur_var%buffer,4),
   1311 ! need to increase the buffer size
   1312 
   1313   if(cur_var%siz(4) == 1) then
   1314      allocate(cur_var%buffer(cur_var%siz(1), cur_var%siz(2), cur_var%siz(3), cur_var%siz(4)) )
   1315   else
   1316      allocate(tmp_buffer(cur_var%siz(1), cur_var%siz(2), cur_var%siz(3), size(cur_var%buffer,4)) )
   1317      tmp_buffer = cur_var%buffer
   1318      deallocate(cur_var%buffer)
   1319      allocate(cur_var%buffer(cur_var%siz(1), cur_var%siz(2), cur_var%siz(3), cur_var%siz(4)) )
   1320      cur_var%buffer(:,:,:,1:size(tmp_buffer,4)) = tmp_buffer
   1321      deallocate(tmp_buffer)
   1322   endif
   1323 
   1324   cur_var%buffer(:,:,:,cur_var%siz(4)) = data ! copy current data to buffer for future write out
   1325 
   1326   d_ptr =>NULL()
   1327   cur_var =>NULL()
   1328   cur_file =>NULL()
   1329 
   1330 end subroutine write_data_3d_new

Page 41          Source Listing                  WRITE_DATA_3D_NEW
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_write_data_3d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 APPEND_PELIST              Local  1126     L(4)            4           scalar                    1177,1183,1187                    
 APPEND_STRING              Local  1127     CHAR            256         scalar                    1179,1184,1187                    
 ASSOCIATED                 Func   1164                                 scalar                    1164,1214,1272                    
 CENTER                     Param  1229     I(4)            4           scalar   PRIV             212,1229,2333,2388,4629,9557      
 CUR_FILE                   Local  1136     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   PTR,SAVE         1136,1199,1210,1211,1212,1213,1215
                                                                                                  ,1217,1219,1221,1222,1224,1225,122
                                                                                                  6,1227,1228,1229,1230,1231,1232,12
                                                                                                  38,1239,1246,1248,1251,1254,1255,1
                                                                                                  256,1260,1261,1328                
 CUR_VAR                    Local  1135     VAR_TYPE        3328        scalar   PTR,SAVE         1135,1246,1247,1248,1250,1251,1261
                                                                                                  ,1262,1263,1264,1265,1266,1267,126
                                                                                                  8,1269,1270,1273,1284,1295,1296,13
                                                                                                  00,1301,1303,1304,1305,1313,1314,1
                                                                                                  316,1317,1318,1319,1320,1324,1327 
 CXSIZE                     Local  1132     I(4)            4           scalar                    1287,1290,1295                    
 CYSIZE                     Local  1132     I(4)            4           scalar                    1287,1293,1296                    
 DATA                       Dummy  1111     R(8)            8     3     1        ARG,IN           1262,1263,1264,1304,1305,1324     
 DATA_DEFAULT               Dummy  1112     R(8)            8           scalar   ARG,IN           1142,1143                         
 DEFAULT_DATA               Local  1128     R(8)            8           scalar                    1143,1145,1268                    
 DOMAIN                     Dummy  1111     DOMAIN2D        752         scalar   ARG,TGT,IN       1148,1160,1162,1163,1192          
 DOMAIN_IDX                 Local  1129     I(4)            4           scalar                    1274,1275,1279,1280,1281,1284,1285
                                                                                                  ,1286,1287,1288                   
 DXSIZE                     Local  1133     I(4)            4           scalar                    1288,1290,1295                    
 DYSIZE                     Local  1133     I(4)            4           scalar                    1288,1293,1296                    
 D_PTR                      Local  1134     DOMAIN2D        752         scalar   PTR,SAVE         1134,1163,1165,1214,1215,1272,1274
                                                                                                  ,1280,1326                        
 ERROR_MSG                  Local  1256     CHAR            128         scalar                    1256,1258,4667,4669,5155,5157,5392
                                                                                                  ,5394,5757,5759,5979,5981,5983,598
                                                                                                  5,8336,8338,8343,8345,8373,8375   
 FIELDNAME                  Dummy  1111     CHAR                        scalar   ARG,IN           1239,1267,1298                    
 FILENAME                   Dummy  1111     CHAR                        scalar   ARG,IN           1169,1170,1171,1173,1298          
 FILENAME2                  Local  1127     CHAR            256         scalar                    1171,1173,1187,1192               
 FILENAME_APPENDIX          Local  1182     CHAR            32          scalar   SAVE             611,1182,1184,4574,8207,8539,8547,
                                                                                                  8558,8560,8573,8575,8577,8856,8857
                                                                                                  ,9074,9075,9273,9274,9459,9460,119
                                                                                                  45                                
 FNAME                      Local  1127     CHAR            256         scalar                    1192,1197,1211                    
 GET_MOSAIC_TILE_FILE       Local  1192                                 scalar                    597,1192,4581,8174,8220           
 GXSIZE                     Local  1131     I(4)            4           scalar                    1286,1290,1300                    
 GYSIZE                     Local  1131     I(4)            4           scalar                    1286,1293,1301                    
 I                          Local  1129     I(4)            4           scalar                    1196,1197,1198,1223,1224,1225,1226
                                                                                                  ,1227,1228,1229,1230,1231,1232,123
                                                                                                  8,1239,1240                       

Page 42          Source Listing                  WRITE_DATA_3D_NEW
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INDEX_FIELD                Local  1124     I(4)            4           scalar                    1237,1240,1245,1246,1260,1261     
 INDEX_FILE                 Local  1125     I(4)            4           scalar                    1195,1198,1199,1204,1209,1210     
 ISHIFT                     Local  1130     I(4)            4           scalar                    1285,1289,1290                    
 IS_NO_DOMAIN               Local  1126     L(4)            4           scalar                    1154,1156,1159,1192               
 IS_SCALAR_OR_1D            Local  1126     L(4)            4           scalar                    1151,1152,1272                    
 JSHIFT                     Local  1130     I(4)            4           scalar                    1285,1292,1293                    
 LENGTH                     Local  1129     I(4)            4           scalar                    1169,1170,1171,1173               
 LEN_TRIM                   Func   1169                                 scalar                    1169,1182                         
 LOOKUP_DOMAIN@0            Local  1274     I(4)            4           scalar                                                      
 MAX_FIELDS                 Param  1221     I(4)            4           scalar   PRIV             243,1221,1223,1255,1256,4588,4589,
                                                                                                  4590,4591,4592,4593,4594,4595,4596
                                                                                                  ,4597,4598,4599,4624,4666,4667,515
                                                                                                  0,5151,5154,5155,8303,8321,8335,83
                                                                                                  36,8342,8343,9503,9504,9505,9506,9
                                                                                                  507,9508,9509,9510,9511,9512,9513,
                                                                                                  9514,9548,9641,9642,12073,12213,12
                                                                                                  217,12254                         
 MAX_TIME_LEVEL_WRITE       Param  1250     I(4)            4           scalar   PRIV             248,1250                          
 MPP_FILL_DOUBLE            Param  1145     R(8)            8           scalar   PRIV             222,1145,4540,9445                
 MPP_GET_COMPUTE_DOMAIN     Local  1287                                 scalar   PRIV             213,1287,3152,3156,3793,3797,4002,
                                                                                                  4006,4251,4255,4708,5355,5358,5794
                                                                                                  ,5838,5872,7592                   
 MPP_GET_COMPUTE_DOMAIN2D   Subr   1287                                          PRIV             1287,3152,3156,3793,3797,4002,4006
                                                                                                  ,4251,4255,4708,5355,5358,5794,583
                                                                                                  8,5872,7592                       
 MPP_GET_DATA_DOMAIN        Local  1288                                 scalar   PRIV             213,1288,4709,5359,5795,5873,7593 
 MPP_GET_DATA_DOMAIN2D      Subr   1288                                          PRIV             1288,4709,5359,5795,5873,7593     
 MPP_GET_DOMAIN_COMPONENTS  Subr   1281                                          PRIV             213,1281,4702                     
 MPP_GET_DOMAIN_SHIFT       Subr   1285                                          PRIV             214,1285,3154,3158,3795,3799,4004,
                                                                                                  4008,4253,4257,4706,5361,5796,5874
 MPP_GET_GLOBAL_DOMAIN      Local  1286                                 scalar   PRIV             214,1286,3153,3157,3794,3798,4003,
                                                                                                  4007,4252,4256,4707,5352,5360,5793
                                                                                                  ,5871,7594                        
 MPP_GET_GLOBAL_DOMAIN2D    Subr   1286                                          PRIV             1286,3153,3157,3794,3798,4003,4007
                                                                                                  ,4252,4256,4707,5352,5360,5793,587
                                                                                                  1,7594                            
 NO_DOMAIN                  Dummy  1111     L(4)            4           scalar   ARG,IN           1155,1156                         
 NUM_DOMAINS                Local  1276     I(4)            4           scalar                    570,1276,1277,1279,4697,4698,4700,
                                                                                                  4849                              
 POSITION                   Dummy  1112     I(4)            4           scalar   ARG,IN           1270,1285                         
 PRESENT                    Func   1142                                 scalar                    1142,1148,1152,1155,1160,1162,1213
                                                                                                  ,1270                             
 RESTART_FILE_TYPE          Type   1136                     1376        scalar                    418,587,588,603,1136,1339,1400,147
                                                                                                  0,1517,1602,1644,1672,1705,1739,17
                                                                                                  77,1820,1854,1894,1934,1977,2015,2
                                                                                                  047,2081,2115,2152,2193,2234,2275,
                                                                                                  2318,2373,2426,2485,2509,2838,2925
                                                                                                  ,3321,3611,3771,3857,4192,4505,593
                                                                                                  7,6589,6607,6628,6649,6670,6691,67
                                                                                                  13,6734,6755,6776,6797,6819,6841,6
                                                                                                  863,6885,6907,6929,6951,6978,7003,
                                                                                                  7040,7082,7125,7163,7191,7225,7272
                                                                                                  ,7320,8803,9020,9225,9401,9732,984
                                                                                                  4,9961,10119,10305,10417,10534,107
                                                                                                  06                                

Page 43          Source Listing                  WRITE_DATA_3D_NEW
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 SCALAR_OR_1D               Dummy  1111     L(4)            4           scalar   ARG,IN           1152                              
 SIZE                       Func   1262                                 scalar                    1262,1263,1264,1304,1305,1316,1320
 TILE_COUNT                 Dummy  1112     I(4)            4           scalar   ARG,IN           1148,1192,1213,1282,1286,1287,1288
 TMP_BUFFER                 Local  1123     R(8)            8     4     1        ALC              1316,1317,1320,1321               
 TRIM                       Func   1187                                 scalar                    1187,1197,1211,1239,1251,1258,1298
 WRITE_DATA_3D_NEW          Subr   1111                                          PRIV             1059,4758,4778,4797,4816          


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 RESTART_FILE_TYPE.TILE_COUNT                                                                                              ...
                            I(4)            4     160            scalar   PRIV             1212,1213,1544,4614,4615           
 VAR_TYPE.GSIZ              I(4)            4     3100     1     4        PRIV             1231,1266,1300,1301,1304,1305,2344 
                                                                                           ,2345,2399,2400,2401,3508,3509,351 
                                                                                           7,3518,3519,3571,3572,3579,3580,35 
                                                                                           81,3711,3712,3720,3721,3722,4631,4 
                                                                                           675,4676,4725,4726,4729,5957,5989, 
                                                                                           8365,8387,9560                     
 VAR_TYPE.IS_DIMVAR         L(4)            4     536            scalar   PRIV             1228,4628,5378,5398,5493,5536,5665 
                                                                                           ,5713,8350,8383,9554,11494,11581,1 
                                                                                           1668                               
 VAR_TYPE.NDIM              I(4)            4     3076           scalar   PRIV             1269,1692,1726,1763,1804,1840,1881 
                                                                                           ,1920,1964,2003,2035,2067,2101,213 
                                                                                           5,2179,2220,2261,2302,2339,2394,26 
                                                                                           82,2685,2692,2700,2875,3112,3115,3 
                                                                                           122,3130,3139,3461,3469,5954,9558, 
                                                                                           9819,9935,10092,10279,10392,10508, 
                                                                                           10665,11104,11108,11109            
 VAR_TYPE.POSITION          I(4)            4     3072           scalar   PRIV             1229,1270,3154,3158,3795,3799,4004 
                                                                                           ,4008,4253,4257,4629,4688,9557     
 VAR_TYPE.READ_ONLY         L(4)            4     540            scalar   PRIV             1226,2491,2659,2774,3016,3041,3066 
                                                                                           ,3086,3107,3231,3394,3414,3434,345 
                                                                                           6,3552,4638,4680,5953,9555,9670,11 
                                                                                           085,11260                          

Page 44          Source Listing                  WRITE_DATA_3D_NEW
2021-06-01 08:54                                 fms_io.F90

   1331 ! </SUBROUTINE>
   1332 
   1333 !-------------------------------------------------------------------------------
   1334 !
   1335 !   This routine will register an integer restart file axis
   1336 !
   1337 !-------------------------------------------------------------------------------
   1338 subroutine register_restart_axis_r1d(fileObj,filename,fieldname,data,cartesian,units,longname,sense,min,calendar)
   1339   type(restart_file_type),    intent(inout)      :: fileObj
   1340   character(len=*),           intent(in)         :: filename, fieldname
   1341   real,                       intent(in), target :: data(:)
   1342   character(len=*),           intent(in)         :: cartesian
   1343   character(len=*), optional, intent(in)         :: units, longname
   1344   integer,          optional, intent(in)         :: sense
   1345   real,             optional, intent(in)         :: min !valid min for real axis data
   1346   character(len=*), optional, intent(in)         :: calendar
   1347 
   1348   integer :: idx
   1349 
   1350 
   1351   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_axis_r1d): need to call fms_io_init')
   1352 
   1353   select case(trim(cartesian))
   1354     case('X')
   1355       idx = XIDX
   1356     case('Y')
   1357       idx = YIDX
   1358     case('Z')
   1359       idx = ZIDX
   1360     case('T')
   1361       idx = TIDX
   1362     case('CC')
   1363       idx = CCIDX
   1364     case default
   1365       call mpp_error(FATAL,'fms_io(register_restart_axis_r1d): Axis must be one of X,Y,Z,T or CC ' // &
   1366                                                            'but has value '//trim(cartesian))
   1367   end select
   1368   if(.not. ALLOCATED(fileObj%axes)) allocate(fileObj%axes(NIDX))
   1369   if(ASSOCIATED(fileObj%axes(idx)%data)) &
   1370        call mpp_error(FATAL,'fms_io(register_restart_axis_r1d): '//trim(cartesian)//' axis has already been defined')
   1371 
   1372 !Why do we do this?
   1373 ! fileObj%name = filename
   1374 
   1375   fileObj%axes(idx)%name = fieldname
   1376   fileObj%axes(idx)%data =>data
   1377   fileObj%axes(idx)%cartesian = cartesian
   1378   fileObj%axes(idx)%dimlen = -1   ! This is not a compressed axis
   1379   if(PRESENT(units)) fileObj%axes(idx)%units = units
   1380   if(PRESENT(longname)) fileObj%axes(idx)%longname = longname
   1381   if(PRESENT(min)) fileObj%axes(idx)%min = min
   1382   if(idx == TIDX) then
   1383      if(PRESENT(calendar)) fileObj%axes(idx)%calendar = trim(calendar)
   1384   endif
   1385   if(PRESENT(sense)) then
   1386      if(idx /= ZIDX) call mpp_error(FATAL,'fms_io(register_restart_axis_r1d): Only the Z axis may define sense; ' // &
   1387                                     'Axis = '//trim(cartesian))

Page 45          Source Listing                  REGISTER_RESTART_AXIS_R1D
2021-06-01 08:54                                 fms_io.F90

   1388      if(abs(sense) /= 1) call mpp_error(FATAL,'fms_io(register_restart_axis_r1d): Value of sense must be +/- 1')
   1389      fileObj%axes(idx)%sense = sense
   1390   endif
   1391 end subroutine register_restart_axis_r1d


ENTRY POINTS

  Name                                                
                                                      
 fms_io_mod_mp_register_restart_axis_r1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   1388                                 scalar                    1388                              
 ALLOCATED                  Func   1368                                 scalar                    1368                              
 ASSOCIATED                 Func   1369                                 scalar                    1369                              
 CALENDAR                   Dummy  1338     CHAR                        scalar   ARG,IN           1383                              
 CARTESIAN                  Dummy  1338     CHAR                        scalar   ARG,IN           1353,1366,1370,1377,1387          
 CCIDX                      Param  1363     I(4)            4           scalar                    265,1363,2619,8898,9617,10052,1005
                                                                                                  3,10059,10066,10201,10216,10221,10
                                                                                                  229,10231,10232,10239,10625,10626,
                                                                                                  10632,10639,10997,10998,11117     
 DATA                       Dummy  1338     R(8)            8     1     1        ARG,TGT,IN       1376                              
 FIELDNAME                  Dummy  1338     CHAR                        scalar   ARG,IN           1375                              
 FILENAME                   Dummy  1338     CHAR                        scalar   ARG,IN                                             
 FILEOBJ                    Dummy  1338     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1368,1369,1375,1376,1377,1378,1379
                                                                                                  ,1380,1381,1383,1389              
 IDX                        Local  1348     I(4)            4           scalar                    1355,1357,1359,1361,1363,1369,1375
                                                                                                  ,1376,1377,1378,1379,1380,1381,138
                                                                                                  2,1383,1386,1389                  
 LONGNAME                   Dummy  1338     CHAR                        scalar   ARG,IN           1380                              
 MIN                        Dummy  1338     R(8)            8           scalar   ARG,IN           1381                              
 NIDX                       Param  1368     I(4)            4           scalar   PRIV             268,343,1368,1428,1484,8883,9101,9
                                                                                                  300,9405,9751,9860,9977,10135,1032
                                                                                                  4,10433,10550                     
 PRESENT                    Func   1379                                 scalar                    1379,1380,1381,1383,1385          
 REGISTER_RESTART_AXIS_R1D  Subr   1338                                          PRIV                                               
 SENSE                      Dummy  1338     I(4)            4           scalar   ARG,IN           1385,1388,1389                    
 TIDX                       Param  1361     I(4)            4           scalar                    263,1361,1382,2649,8896,8996,9545,
                                                                                                  9625,9661,9799,10372,11059,11060  
 TRIM                       Func   1353                                 scalar                    1353,1366,1370,1383,1387          
 UNITS                      Dummy  1338     CHAR                        scalar   ARG,IN           1379                              
 XIDX                       Param  1355     I(4)            4           scalar                    258,1355,2599,8890,9611,10946,1094
                                                                                                  7,11111                           
 YIDX                       Param  1357     I(4)            4           scalar                    259,1357,2605,8892,9612,10963,1096
                                                                                                  4,11113                           
 ZIDX                       Param  1359     I(4)            4           scalar                    261,1359,1386,2611,8894,8973,9614,
                                                                                                  10037,10038,10044,10051,10195,1020
                                                                                                  7,10208,10215,10240,10245,10252,10
                                                                                                  610,10611,10617,10624,10980,10981,
                                                                                                  11115                             


Page 46          Source Listing                  REGISTER_RESTART_AXIS_R1D
2021-06-01 08:54 Symbol Table                    fms_io.F90

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AX_TYPE.CALENDAR           CHAR            128   904            scalar   PRIV             1383,2651,8997,11067               
 AX_TYPE.CARTESIAN          CHAR            8     384            scalar   PRIV             1377,8951                          
 AX_TYPE.DATA               R(8)            8     1200     1     1        PTR,PRIV         1369,1376,2603,2609,2613,2615,2620 
                                                                                           ,2621,2650,8907,8948,10038,10044,1 
                                                                                           0053,10059,10195,10201,10208,10221 
                                                                                           ,10232,10245,10611,10617,10626,106 
                                                                                           32,10814,10946,10953,10963,10970,1 
                                                                                           0980,10987,10997,11004,11059       
 AX_TYPE.DIMLEN             I(4)            4     1036           scalar   PRIV             1378,1459,2630,2640,8955,9174,1101 
                                                                                           8,11020,11041,11043                
 AX_TYPE.LONGNAME           CHAR            128   256            scalar   PRIV             1380,1463,1509,2603,2609,2614,2621 
                                                                                           ,2631,2641,2651,8966,8968,9199,920 
                                                                                           1,9350,9352,10952,10969,10986,1100 
                                                                                           3,11025,11048,11065                
 AX_TYPE.MIN                R(8)            8     1040           scalar   PRIV             1381,8990,8992                     
 AX_TYPE.NAME               CHAR            128   0              scalar   PRIV             1375,1438,1493,2603,2609,2614,2621 
                                                                                           ,2631,2641,2651,2864,8942,9126,931 
                                                                                           5,10796,10818,10950,10967,10984,11 
                                                                                           001,11023,11046,11063              
 AX_TYPE.SENSE              I(4)            4     1032           scalar   PRIV             1389,8983,8985                     
 AX_TYPE.UNITS              CHAR            128   128            scalar   PRIV             1379,1462,1508,2603,2609,2614,2621 
                                                                                           ,2631,2641,2651,8959,8961,9192,919 
                                                                                           4,9343,9345,10951,10968,10985,1100 
                                                                                           2,11024,11047,11064                
 RESTART_FILE_TYPE.AXES     RECORD          1296  168      1     1        ALC,TGT,PRIV     1368,1369,1375,1376,1377,1378,1379 
                                                                                           ,1380,1381,1383,1389,1428,1429,143 
                                                                                           8,1440,1445,1449,1450,1451,1453,14 
                                                                                           58,1459,1460,1461,1462,1463,1464,1 
                                                                                           484,1485,1493,1495,1500,1503,1508, 
                                                                                           1509,1545,2470,2474,2555,2558,2559 
                                                                                           ,2561,2599,2605,2611,2619,2628,263 
                                                                                           8,2649,2674,2782,2796,2799,2802,28 
                                                                                           10,2816,2857,2863,2902,2906,8868,8 
                                                                                           882,8883,8907,8942,8945,8948,8951, 
                                                                                           8955,8959,8961,8966,8968,8983,8985 
                                                                                           ,8990,8992,8997,9086,9100,9101,911 
                                                                                           8,9126,9129,9136,9137,9138,9146,91 
                                                                                           52,9157,9158,9162,9163,9171,9174,9 
                                                                                           178,9180,9185,9187,9192,9194,9199, 
                                                                                           9201,9206,9208,9285,9299,9300,9307 
                                                                                           ,9315,9318,9325,9326,9334,9343,934 
                                                                                           5,9350,9352,9490,9870,9882,9888,98 
                                                                                           97,9903,9987,9999,10005,10014,1002 
                                                                                           0,10038,10044,10053,10059,10145,10 
                                                                                           157,10163,10172,10178,10195,10201, 
                                                                                           10208,10221,10232,10245,10443,1045 
                                                                                           5,10461,10470,10476,10560,10572,10 
                                                                                           578,10587,10593,10611,10617,10626, 
                                                                                           10632,10781,10790,10792,10793,1079 
                                                                                           6,10802,10810,10814,10815,10818,10 
                                                                                           824,10832,10946,10947,10963,10964, 
                                                                                           10980,10981,10997,10998,11014,1101 
                                                                                           5,11037,11038,11059,11060,11277,11 

Page 47          Source Listing                  REGISTER_RESTART_AXIS_R1D
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           285,11293,11309,11320              

Page 48          Source Listing                  REGISTER_RESTART_AXIS_R1D
2021-06-01 08:54                                 fms_io.F90

   1392 
   1393 !-------------------------------------------------------------------------------
   1394 !
   1395 !   This routine will register the compressed index restart file axis
   1396 !
   1397 !-------------------------------------------------------------------------------
   1398 subroutine register_restart_axis_i1d(fileObj,filename,fieldname,data,compressed, &
   1399                                      compressed_axis,dimlen,dimlen_name,dimlen_lname,units,longname,imin)
   1400   type(restart_file_type),    intent(inout)      :: fileObj
   1401   character(len=*),           intent(in)         :: filename, fieldname
   1402   integer,                    intent(in)         :: data(:)
   1403   character(len=*),           intent(in)         :: compressed
   1404   character(len=*),           intent(in)         :: compressed_axis !< which compressed axis (C or H)
   1405   integer,                    intent(in)         :: dimlen
   1406   character(len=*), optional, intent(in)         :: dimlen_name, dimlen_lname !< dimlen axis name and longname
   1407   character(len=*), optional, intent(in)         :: units, longname
   1408   integer,          optional, intent(in)         :: imin !valid min for integer axis data
   1409 
   1410   integer :: ssize,rsize,npes
   1411   integer :: idx
   1412   integer, allocatable :: pelist(:)
   1413   type(domain2d), pointer :: io_domain=>NULL()
   1414 
   1415 
   1416   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_axis_i1d): need to call fms_io_init')
   1417 
   1418   select case(trim(compressed_axis))
   1419   case('C')
   1420      idx = CIDX
   1421   case('H')
   1422      idx = HIDX
   1423   case default
   1424      call mpp_error(FATAL,'fms_io(register_restart_axis_r1d): Axis must be one of C or H ' // &
   1425           'but has value '//trim(compressed_axis))
   1426   end select
   1427 
   1428   if(.not. ALLOCATED(fileObj%axes)) allocate(fileObj%axes(NIDX))
   1429   if(ALLOCATED(fileObj%axes(idx)%idx)) &
   1430                  call mpp_error(FATAL,'fms_io(register_restart_axis_i1d): Compressed axis ' //&
   1431                  trim(compressed_axis) // ' has already been defined')
   1432 
   1433 !Why do we do this?
   1434 ! fileObj%name = filename
   1435 
   1436   fileObj%is_compressed = .true.
   1437   fileObj%unlimited_axis = .false.
   1438   fileObj%axes(idx)%name = fieldname
   1439   if(ASSOCIATED(current_domain)) then
   1440      fileObj%axes(idx)%domain =>current_domain
   1441      io_domain =>mpp_get_io_domain(current_domain)
   1442      if(.not. ASSOCIATED(io_domain)) &
   1443                  call mpp_error(FATAL,'fms_io(register_restart_axis_i1d): The io domain must be defined')
   1444      npes = mpp_get_domain_npes(io_domain)
   1445      allocate(fileObj%axes(idx)%nelems(npes)); fileObj%axes(idx)%nelems = 0
   1446      allocate(pelist(npes))
   1447      call mpp_get_pelist(io_domain,pelist)
   1448      ssize = size(data)

Page 49          Source Listing                  REGISTER_RESTART_AXIS_I1D
2021-06-01 08:54                                 fms_io.F90

   1449      call mpp_gather((/ssize/),fileObj%axes(idx)%nelems,pelist)
   1450      rsize = sum(fileObj%axes(idx)%nelems)
   1451      allocate( fileObj%axes(idx)%idx(rsize) )
   1452 !  Note that the gatherV implied here is asymmetric; only root needs to know the vector of recv sizes
   1453      call mpp_gather(data,ssize,fileObj%axes(idx)%idx,fileObj%axes(idx)%nelems,pelist)
   1454      deallocate(pelist); io_domain=>NULL()
   1455   else
   1456      call mpp_error(FATAL,'fms_io(register_restart_axis_i1d): The domain must be defined through set_domain')
   1457   endif
   1458   fileObj%axes(idx)%compressed = compressed
   1459   fileObj%axes(idx)%dimlen = dimlen
   1460   if(PRESENT(dimlen_name)) fileObj%axes(idx)%dimlen_name = dimlen_name
   1461   if(PRESENT(dimlen_lname)) fileObj%axes(idx)%dimlen_lname = dimlen_lname
   1462   if(PRESENT(units)) fileObj%axes(idx)%units = units
   1463   if(PRESENT(longname)) fileObj%axes(idx)%longname = longname
   1464   if(PRESENT(imin)) fileObj%axes(idx)%imin = imin
   1465 end subroutine register_restart_axis_i1d


ENTRY POINTS

  Name                                                
                                                      
 fms_io_mod_mp_register_restart_axis_i1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1428                                 scalar                    1428,1429                         
 ASSOCIATED                 Func   1439                                 scalar                    1439,1442                         
 CIDX                       Param  1420     I(4)            4           scalar                    260,1420,2555,2558,2559,2628,2674,
                                                                                                  2778,2782,2783,9108,9613,9881,9882
                                                                                                  ,9888,9895,9998,9999,10005,10012,1
                                                                                                  0156,10157,10163,10170,10454,10455
                                                                                                  ,10461,10468,10571,10572,10578,105
                                                                                                  85,10791,11014,11015,11119        
 COMPRESSED                 Dummy  1398     CHAR                        scalar   ARG,IN           1458                              
 COMPRESSED_AXIS            Dummy  1399     CHAR                        scalar   ARG,IN           1418,1425,1431                    
 DATA                       Dummy  1398     I(4)            4     1     1        ARG,IN           1448,1453                         
 DIMLEN                     Dummy  1399     I(4)            4           scalar   ARG,IN           1459                              
 DIMLEN_LNAME               Dummy  1399     CHAR                        scalar   ARG,IN           1461                              
 DIMLEN_NAME                Dummy  1399     CHAR                        scalar   ARG,IN           1460                              
 FIELDNAME                  Dummy  1398     CHAR                        scalar   ARG,IN           1438                              
 FILENAME                   Dummy  1398     CHAR                        scalar   ARG,IN                                             
 FILEOBJ                    Dummy  1398     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1428,1429,1436,1437,1438,1440,1445
                                                                                                  ,1449,1450,1451,1453,1458,1459,146
                                                                                                  0,1461,1462,1463,1464             
 HIDX                       Param  1422     I(4)            4           scalar                    262,1422,2555,2561,2638,2780,2785,
                                                                                                  9110,9615,9896,9897,9903,9910,1001
                                                                                                  3,10014,10020,10027,10171,10172,10
                                                                                                  178,10185,10469,10470,10476,10483,
                                                                                                  10586,10587,10593,10600,10791,1103
                                                                                                  7,11038,11121                     
 IDX                        Local  1411     I(4)            4           scalar                    1420,1422,1429,1438,1440,1445,1449

Page 50          Source Listing                  REGISTER_RESTART_AXIS_I1D
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,1450,1451,1453,1458,1459,1460,146
                                                                                                  1,1462,1463,1464                  
 IMIN                       Dummy  1399     I(4)            4           scalar   ARG,IN           1464                              
 IO_DOMAIN                  Local  1413     DOMAIN2D        752         scalar   PTR              1413,1441,1442,1444,1447,1454     
 LONGNAME                   Dummy  1399     CHAR                        scalar   ARG,IN           1463                              
 MPP_GATHER                 Local  1449                                 scalar   PRIV             221,1449,1453,1503,3511,3521,3574,
                                                                                                  3583,8924,9145,9160,9333,9771,1034
                                                                                                  4                                 
 MPP_GATHER_INT4_1D         Subr   1449                                          PRIV             1449,1503,8924,9145,9333,10344    
 MPP_GATHER_INT4_1DV        Subr   1453                                          PRIV             1453,9160                         
 MPP_GET_DOMAIN_NPES        Func   1444     I(4)            4           scalar   PRIV             216,1444,1499,5104                
 MPP_GET_PELIST             Local  1447                                 scalar   PRIV             216,1447,1502,5106                
 MPP_GET_PELIST2D           Subr   1447                                          PRIV             1447,1502,5106                    
 NPES                       Local  1410     I(4)            4           scalar                    1444,1445,1446                    
 PELIST                     Local  1412     I(4)            4     1     1        ALC              1446,1447,1449,1453,1454          
 PRESENT                    Func   1460                                 scalar                    1460,1461,1462,1463,1464          
 REGISTER_RESTART_AXIS_I1D  Subr   1398                                          PRIV                                               
 RSIZE                      Local  1410     I(4)            4           scalar                    1450,1451                         
 SIZE                       Func   1448                                 scalar                    1448                              
 SSIZE                      Local  1410     I(4)            4           scalar                    1448,1449,1453                    
 SUM                        Func   1450                                 scalar                    1450                              
 TRIM                       Func   1418                                 scalar                    1418,1425,1431                    
 UNITS                      Dummy  1399     CHAR                        scalar   ARG,IN           1462                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AX_TYPE.COMPRESSED         CHAR            256   392            scalar   PRIV             1458,2632,2642,9171,11027,11050    
 AX_TYPE.DIMLEN_LNAME       CHAR            128   776            scalar   PRIV             1461,2630,2640,9185,9187,11019,110 
                                                                                           42                                 
 AX_TYPE.DIMLEN_NAME        CHAR            128   648            scalar   PRIV             1460,2630,2640,9178,9180,11017,110 
                                                                                           40                                 
 AX_TYPE.DOMAIN             DOMAIN2D        752   1272           scalar   PTR,TGT,PRIV     1440,1495,2559,2561,2857           
 AX_TYPE.IDX                I(4)            4     1056     1     1        ALC,PRIV         1429,1451,1453,1485,2555,2558,2629 
                                                                                           ,2632,2639,2642,2674,2782,9118,915 
                                                                                           2,9157,9158,9162,9307,9882,9897,99 
                                                                                           99,10014,10157,10172,10455,10470,1 
                                                                                           0572,10587,10792,11014,11026,11037 
                                                                                           ,11049                             
 AX_TYPE.IMIN               I(4)            4     1048           scalar   PRIV             1464,2632,2642,9206,9208,11028,110 
                                                                                           51                                 
 AX_TYPE.NELEMS             I(4)            4     1128     1     1        ALC,PRIV         1445,1449,1450,1453,1500,1503,2796 
                                                                                           ,2799,2802,2810,2816,2864,2902,290 
                                                                                           6,9136,9137,9146,9152,9163,9325,93 
                                                                                           26,9334,11277,11285,11293,11309,11 
                                                                                           320                                
 RESTART_FILE_TYPE.IS_COMPRESSED                                                                                           ...
                            L(4)            4     152            scalar   PRIV             1436,1491,2470                     
 RESTART_FILE_TYPE.UNLIMITED_AXIS                                                                                          ...
                            L(4)            4     156            scalar   PRIV             1437,1492,2474,2853                

Page 51          Source Listing                  REGISTER_RESTART_AXIS_I1D
2021-06-01 08:54                                 fms_io.F90

   1466 
   1467 !-------------------------------------------------------------------------------
   1468 
   1469 subroutine register_restart_axis_unlimited(fileObj,filename,fieldname,nelem,units,longname)
   1470   type(restart_file_type),    intent(inout)      :: fileObj
   1471   character(len=*),           intent(in)         :: filename, fieldname
   1472   integer                                        :: nelem  ! Number of elements on rank
   1473   character(len=*), optional, intent(in)         :: units, longname
   1474 
   1475   integer :: idx,npes
   1476   integer, allocatable :: pelist(:)
   1477   type(domain2d), pointer :: io_domain=>NULL()
   1478 
   1479 
   1480   if(.not.module_is_initialized) &
   1481                 call mpp_error(FATAL,'fms_io(register_restart_axis_unlimited): need to call fms_io_init')
   1482   idx = UIDX
   1483 
   1484   if(.not. ALLOCATED(fileObj%axes)) allocate(fileObj%axes(NIDX))
   1485   if(ALLOCATED(fileObj%axes(idx)%idx)) &
   1486                call mpp_error(FATAL,'fms_io(register_restart_axis_unlimited): Unlimited axis has already been defined')
   1487 
   1488 !Why do we do this?
   1489 ! fileObj%name = filename
   1490 
   1491   fileObj%is_compressed = .false.
   1492   fileObj%unlimited_axis = .true.
   1493   fileObj%axes(idx)%name = fieldname
   1494   if(ASSOCIATED(current_domain)) then
   1495      fileObj%axes(idx)%domain =>current_domain
   1496      io_domain =>mpp_get_io_domain(current_domain)
   1497      if(.not. ASSOCIATED(io_domain)) &
   1498                  call mpp_error(FATAL,'fms_io(register_restart_axis_i1d): The io domain must be defined')
   1499      npes = mpp_get_domain_npes(io_domain)
   1500      allocate(fileObj%axes(idx)%nelems(npes)); fileObj%axes(idx)%nelems = 0
   1501      allocate(pelist(npes))
   1502      call mpp_get_pelist(io_domain,pelist)
   1503      call mpp_gather((/nelem/),fileObj%axes(idx)%nelems,pelist)
   1504      deallocate(pelist); io_domain=>NULL()
   1505   else
   1506      call mpp_error(FATAL,'fms_io(register_restart_axis_unlimited): The domain must be defined through set_domain')
   1507   endif
   1508   if(PRESENT(units)) fileObj%axes(idx)%units = units
   1509   if(PRESENT(longname)) fileObj%axes(idx)%longname = longname
   1510 end subroutine register_restart_axis_unlimited

Page 52          Source Listing                  REGISTER_RESTART_AXIS_UNLIMITED
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                      
                                                            
 fms_io_mod_mp_register_restart_axis_unlimited_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1484                                 scalar                    1484,1485                         
 ASSOCIATED                 Func   1494                                 scalar                    1494,1497                         
 FIELDNAME                  Dummy  1469     CHAR                        scalar   ARG,IN           1493                              
 FILENAME                   Dummy  1469     CHAR                        scalar   ARG,IN                                             
 FILEOBJ                    Dummy  1469     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1484,1485,1491,1492,1493,1495,1500
                                                                                                  ,1503,1508,1509                   
 IDX                        Local  1475     I(4)            4           scalar                    1482,1485,1493,1495,1500,1503,1508
                                                                                                  ,1509                             
 IO_DOMAIN                  Local  1477     DOMAIN2D        752         scalar   PTR              1477,1496,1497,1499,1502,1504     
 LONGNAME                   Dummy  1469     CHAR                        scalar   ARG,IN           1509                              
 NELEM                      Dummy  1469     I(4)            4           scalar   ARG,INOUT        1503                              
 NPES                       Local  1475     I(4)            4           scalar                    1499,1500,1501                    
 PELIST                     Local  1476     I(4)            4     1     1        ALC              1501,1502,1503,1504               
 PRESENT                    Func   1508                                 scalar                    1508,1509                         
 REGISTER_RESTART_AXIS_UNLI                                                                                                         
 MITED                      Subr   1469                                          PRIV                                               
 UIDX                       Param  1482     I(4)            4           scalar                    264,1482,2857,2863,2902,2906,9304,
                                                                                                  9616,10791                        
 UNITS                      Dummy  1469     CHAR                        scalar   ARG,IN           1508                              

Page 53          Source Listing                  REGISTER_RESTART_AXIS_UNLIMITED
2021-06-01 08:54                                 fms_io.F90

   1511 
   1512 !
   1513 !   This routine is the destructor for the file object
   1514 !
   1515 !-------------------------------------------------------------------------------
   1516 subroutine free_restart_type(fileObj)
   1517   type(restart_file_type), intent(inout)      :: fileObj
   1518   type(meta_type),pointer                :: this
   1519   type(meta_type),pointer                :: this_p
   1520   integer :: id, n, j, k
   1521 
   1522 !--- remove file name from registered_file
   1523   id = 0
   1524   do n = 1, num_registered_files
   1525      if( trim(fileObj%name) == trim(registered_file(n)) ) then
   1526         id = n
   1527         exit
   1528      endif
   1529   enddo
   1530   if( id < 0) &
   1531      call mpp_error(FATAL, 'fms_io(free_restart_type): fileObj%name is not found in registered_files')
   1532   do n = id+1, num_registered_files
   1533      registered_file(n-1) = trim(registered_file(n))
   1534   enddo
   1535   registered_file(num_registered_files) = ''
   1536   num_registered_files = num_registered_files - 1
   1537 
   1538   fileObj%register_id = 0
   1539   fileObj%unit = -1
   1540   fileObj%name = ''
   1541   fileObj%nvar = -1
   1542   fileObj%natt = -1
   1543   fileObj%max_ntime = -1
   1544   fileObj%tile_count = -1
   1545   if(ALLOCATED(fileObj%axes)) deallocate(fileObj%axes)
   1546 ! deallocate all the data that restart owns
   1547   do k = 1,size(fileObj%var)
   1548      if (fileObj%var(k)%owns_data) then
   1549         do j = 1,size(fileObj%p0dr,1)
   1550            if(ASSOCIATED(fileObj%p0dr(j,k)%p)) deallocate(fileObj%p0dr(j,k)%p)
   1551            if(ASSOCIATED(fileObj%p1dr(j,k)%p)) deallocate(fileObj%p1dr(j,k)%p)
   1552            if(ASSOCIATED(fileObj%p2dr(j,k)%p)) deallocate(fileObj%p2dr(j,k)%p)
   1553            if(ASSOCIATED(fileObj%p3dr(j,k)%p)) deallocate(fileObj%p3dr(j,k)%p)
   1554            if(ASSOCIATED(fileObj%p2dr8(j,k)%p)) deallocate(fileObj%p2dr8(j,k)%p)
   1555            if(ASSOCIATED(fileObj%p3dr8(j,k)%p)) deallocate(fileObj%p3dr8(j,k)%p)
   1556            if(ASSOCIATED(fileObj%p0di(j,k)%p)) deallocate(fileObj%p0di(j,k)%p)
   1557            if(ASSOCIATED(fileObj%p1di(j,k)%p)) deallocate(fileObj%p1di(j,k)%p)
   1558            if(ASSOCIATED(fileObj%p2di(j,k)%p)) deallocate(fileObj%p2di(j,k)%p)
   1559            if(ASSOCIATED(fileObj%p3di(j,k)%p)) deallocate(fileObj%p3di(j,k)%p)
   1560         enddo
   1561      endif
   1562   enddo
   1563   if(ASSOCIATED(fileObj%var)) deallocate(fileObj%var)
   1564   if(ASSOCIATED(fileObj%p0dr)) deallocate(fileObj%p0dr)
   1565   if(ASSOCIATED(fileObj%p1dr)) deallocate(fileObj%p1dr)
   1566   if(ASSOCIATED(fileObj%p2dr)) deallocate(fileObj%p2dr)
   1567   if(ASSOCIATED(fileObj%p3dr)) deallocate(fileObj%p3dr)

Page 54          Source Listing                  FREE_RESTART_TYPE
2021-06-01 08:54                                 fms_io.F90

   1568   if(ASSOCIATED(fileObj%p2dr8)) deallocate(fileObj%p2dr8)
   1569   if(ASSOCIATED(fileObj%p3dr8)) deallocate(fileObj%p3dr8)
   1570   if(ASSOCIATED(fileObj%p0di)) deallocate(fileObj%p0di)
   1571   if(ASSOCIATED(fileObj%p1di)) deallocate(fileObj%p1di)
   1572   if(ASSOCIATED(fileObj%p2di)) deallocate(fileObj%p2di)
   1573   if(ASSOCIATED(fileObj%p3di)) deallocate(fileObj%p3di)
   1574   if(ASSOCIATED(fileObj%first)) then
   1575      this =>fileObj%first
   1576      do while(associated(this%next))
   1577         this =>this%next  ! Find the last element
   1578      enddo
   1579      do while(associated(this))  ! Deallocate from the last element to the first
   1580        this_p =>this%prev
   1581 !!$ Gfortran on gaea does not yet support deferred length character strings
   1582 !!$       deallocate(this%name)
   1583        this%name=''  ! Remove this line when Gfortran supports deferred length character strings
   1584        if(allocated(this%rval)) deallocate(this%rval)
   1585        if(allocated(this%ival)) deallocate(this%ival)
   1586 !!$ Gfortran on gaea does not yet support deferred length character strings
   1587 !!$       if(allocated(this%cval)) deallocate(this%cval)
   1588        this%cval=''  ! Remove this line when Gfortran supports deferred length character strings
   1589        deallocate(this)
   1590        this =>this_p
   1591      enddo
   1592      fileObj%first =>NULL()
   1593   endif
   1594 end subroutine free_restart_type


ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_free_restart_type_             

Page 55          Source Listing                  FREE_RESTART_TYPE
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1545                                 scalar                    1545,1584,1585                    
 ASSOCIATED                 Func   1550                                 scalar                    1550,1551,1552,1553,1554,1555,1556
                                                                                                  ,1557,1558,1559,1563,1564,1565,156
                                                                                                  6,1567,1568,1569,1570,1571,1572,15
                                                                                                  73,1574,1576,1579                 
 FILEOBJ                    Dummy  1516     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1525,1538,1539,1540,1541,1542,1543
                                                                                                  ,1544,1545,1547,1548,1549,1550,155
                                                                                                  1,1552,1553,1554,1555,1556,1557,15
                                                                                                  58,1559,1563,1564,1565,1566,1567,1
                                                                                                  568,1569,1570,1571,1572,1573,1574,
                                                                                                  1575,1592                         
 FREE_RESTART_TYPE          Subr   1516                                                                                             
 ID                         Local  1520     I(4)            4           scalar                    1523,1526,1530,1532               
 J                          Local  1520     I(4)            4           scalar                    1549,1550,1551,1552,1553,1554,1555
                                                                                                  ,1556,1557,1558,1559              
 K                          Local  1520     I(4)            4           scalar                    1547,1548,1550,1551,1552,1553,1554
                                                                                                  ,1555,1556,1557,1558,1559         
 META_TYPE                  Type   1518                     672         scalar   PRIV             273,282,405,1518,1519,1607,1608,16
                                                                                                  45                                
 N                          Local  1520     I(4)            4           scalar                    1524,1525,1526,1532,1533          
 NUM_REGISTERED_FILES       Local  1524     I(4)            4           scalar                    571,1524,1532,1535,1536,4601,4608,
                                                                                                  4609,4611,4612,9519,9532,9533,9540
                                                                                                  ,9544                             
 SIZE                       Func   1547                                 scalar                    1547,1549                         
 THIS                       Local  1518     META_TYPE       672         scalar   PTR              1575,1576,1577,1579,1580,1583,1584
                                                                                                  ,1585,1588,1589,1590              
 THIS_P                     Local  1519     META_TYPE       672         scalar   PTR,TGT          1580,1590                         
 TRIM                       Func   1525                                 scalar                    1525,1533                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 META_TYPE.CVAL             CHAR            256   416            scalar                    1588,1632,1655,1656                
 META_TYPE.IVAL             I(4)            4     344      1     1        ALC              1585,1628,1651,1652                
 META_TYPE.NAME             CHAR            256   16             scalar                    1583,1624,1650,1652,1656,1658      
 META_TYPE.NEXT             META_TYPE       672   8              scalar   PTR,TGT          1576,1577,1612,1613,1615,1660      
 META_TYPE.PREV             META_TYPE       672   0              scalar   PTR,TGT          1580,1615                          
 META_TYPE.RVAL             R(8)            8     272      1     1        ALC              1584,1626,1649,1650                
 PTR0DI.P                   I(4)            4     0              scalar   PTR              1556,1880,2177,2178,2725,2726,2803 
                                                                                           ,2804,3194,3195,3285,3286,3827,382 
                                                                                           8,4070,4072,4073,4119,4121,4122,43 
                                                                                           88,4390,4391,4437,4439,4440,4445,6 
                                                                                           727,6899,6900,10391,11159,11160,11 
                                                                                           296,11297                          
 PTR0DR.P                   R(8)            8     0              scalar   PTR              1550,1691,2033,2034,2717,2718,2792 
                                                                                           ,2793,3178,3179,3271,3272,3817,381 
                                                                                           8,4044,4045,4046,4101,4102,4103,43 
                                                                                           70,4371,4372,4419,4420,4421,6621,6 

Page 56          Source Listing                  FREE_RESTART_TYPE
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           811,6812,9818,11146,11147,11267,11 
                                                                                           270                                
 PTR1DI.P                   I(4)            4     0        1     1        PTR              1557,1919,2218,2219,2728,2729,2806 
                                                                                           ,2808,2885,2887,2903,2905,3196,319 
                                                                                           7,3288,3290,3829,3830,4074,4077,40 
                                                                                           78,4123,4126,4127,4392,4395,4396,4 
                                                                                           441,4444,6748,6921,6922,10507,1116 
                                                                                           2,11163,11302,11303,11304          
 PTR1DR.P                   R(8)            8     0        1     1        PTR              1551,1725,2065,2066,2719,2720,2794 
                                                                                           ,2795,2883,2884,2901,2902,3180,318 
                                                                                           1,3273,3274,3819,3820,4047,4048,40 
                                                                                           49,4104,4105,4106,4373,4374,4375,4 
                                                                                           422,4423,4424,6642,6833,6834,9934, 
                                                                                           11150,11151,11272,11276            
 PTR2DI.P                   I(4)            4     0        2     1        PTR              1558,1963,2259,2260,2731,2732,2812 
                                                                                           ,2814,3198,3199,3253,3255,3293,329 
                                                                                           5,3831,3832,4080,4084,4086,4129,41 
                                                                                           33,4135,4398,4402,4404,4447,4451,4 
                                                                                           453,6769,6943,6944,10664,11166,111 
                                                                                           67,11313,11314,11315               
 PTR2DR.P                   R(8)            8     0        2     1        PTR              1552,1762,2099,2100,2338,2721,2722 
                                                                                           ,2797,2798,3182,3183,3238,3239,327 
                                                                                           5,3276,3507,3512,3570,3575,3710,37 
                                                                                           16,3821,3822,4050,4051,4053,4107,4 
                                                                                           108,4110,4376,4377,4379,4425,4426, 
                                                                                           4428,6663,6855,6856,7052,7239,1009 
                                                                                           1,11153,11154,11280,11284          
 PTR2DR8.P                  R(8)            8     0        2     1        PTR              1554,3186,3188,3244,3245,4058,4059 
                                                                                           ,4061                              
 PTR3DI.P                   I(4)            4     0        3     1        PTR              1559,2002,2300,2301,2734,3200,3201 
                                                                                           ,3259,3261,3298,3300,3833,3834,408 
                                                                                           8,4092,4094,4137,4141,4143,4406,44 
                                                                                           10,4412,4455,4459,4461,6790,6965,6 
                                                                                           966,11170                          
 PTR3DR.P                   R(8)            8     0        3     1        PTR              1553,1803,2133,2134,2393,2723,2724 
                                                                                           ,2800,2801,3184,3185,3241,3242,327 
                                                                                           7,3278,3516,3522,3578,3584,3719,37 
                                                                                           26,3823,3824,4054,4055,4057,4111,4 
                                                                                           112,4114,4380,4381,4383,4429,4430, 
                                                                                           4432,6684,6877,6878,7094,7286,1027 
                                                                                           8,11156,11157,11288,11292          
 PTR3DR8.P                  R(8)            8     0        3     1        PTR              1555,3189,3191,3247,3248,4062,4063 
                                                                                           ,4065                              
 RESTART_FILE_TYPE.FIRST    META_TYPE       672   240            scalar   PTR,TGT,PRIV     1574,1575,1592,1610,1618,1647      
 RESTART_FILE_TYPE.NATT     I(4)            4     140            scalar   PRIV             1542                               
 RESTART_FILE_TYPE.P0DI     RECORD          8     992      2     1        PTR,PRIV         1556,1570,1880,2177,2178,2725,2726 
                                                                                           ,2803,2804,3194,3195,3285,3286,382 
                                                                                           7,3828,4070,4072,4073,4119,4121,41 
                                                                                           22,4388,4390,4391,4437,4439,4440,4 
                                                                                           445,4596,6727,6899,6900,9511,10391 
                                                                                           ,11159,11160,11296,11297           
 RESTART_FILE_TYPE.P0DR     RECORD          8     320      2     1        PTR,PRIV         1549,1550,1564,1691,2033,2034,2717 
                                                                                           ,2718,2792,2793,3178,3179,3271,327 
                                                                                           2,3817,3818,4044,4045,4046,4101,41 
                                                                                           02,4103,4370,4371,4372,4419,4420,4 

Page 57          Source Listing                  FREE_RESTART_TYPE
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           421,4589,6621,6811,6812,9504,9818, 
                                                                                           11146,11147,11267,11270            
 RESTART_FILE_TYPE.P1DI     RECORD          72    1088     2     1        PTR,PRIV         1557,1571,1919,2218,2219,2728,2729 
                                                                                           ,2806,2808,2885,2887,2903,2905,319 
                                                                                           6,3197,3288,3290,3829,3830,4074,40 
                                                                                           77,4078,4123,4126,4127,4392,4395,4 
                                                                                           396,4441,4444,4597,6748,6921,6922, 
                                                                                           9512,10507,11162,11163,11302,11303 
                                                                                           ,11304                             
 RESTART_FILE_TYPE.P1DR     RECORD          72    416      2     1        PTR,PRIV         1551,1565,1725,2065,2066,2719,2720 
                                                                                           ,2794,2795,2883,2884,2901,2902,318 
                                                                                           0,3181,3273,3274,3819,3820,4047,40 
                                                                                           48,4049,4104,4105,4106,4373,4374,4 
                                                                                           375,4422,4423,4424,4590,6642,6833, 
                                                                                           6834,9505,9934,11150,11151,11272,1 
                                                                                           1276                               
 RESTART_FILE_TYPE.P2DI     RECORD          96    1184     2     1        PTR,PRIV         1558,1572,1963,2259,2260,2731,2732 
                                                                                           ,2812,2814,3198,3199,3253,3255,329 
                                                                                           3,3295,3831,3832,4080,4084,4086,41 
                                                                                           29,4133,4135,4398,4402,4404,4447,4 
                                                                                           451,4453,4598,6769,6943,6944,9513, 
                                                                                           10664,11166,11167,11313,11314,1131 
                                                                                           5                                  
 RESTART_FILE_TYPE.P2DR     RECORD          96    512      2     1        PTR,PRIV         1552,1566,1762,2099,2100,2338,2721 
                                                                                           ,2722,2797,2798,3182,3183,3238,323 
                                                                                           9,3275,3276,3507,3512,3570,3575,37 
                                                                                           10,3716,3821,3822,4050,4051,4053,4 
                                                                                           107,4108,4110,4376,4377,4379,4425, 
                                                                                           4426,4428,4591,6663,6855,6856,7052 
                                                                                           ,7239,9506,10091,11153,11154,11280 
                                                                                           ,11284                             
 RESTART_FILE_TYPE.P2DR8    RECORD          96    704      2     1        PTR,PRIV         1554,1568,3186,3188,3244,3245,4058 
                                                                                           ,4059,4061,4593,9509               
 RESTART_FILE_TYPE.P3DI     RECORD          120   1280     2     1        PTR,PRIV         1559,1573,2002,2300,2301,2734,3200 
                                                                                           ,3201,3259,3261,3298,3300,3833,383 
                                                                                           4,4088,4092,4094,4137,4141,4143,44 
                                                                                           06,4410,4412,4455,4459,4461,4599,6 
                                                                                           790,6965,6966,9514,11170           
 RESTART_FILE_TYPE.P3DR     RECORD          120   608      2     1        PTR,PRIV         1553,1567,1803,2133,2134,2393,2723 
                                                                                           ,2724,2800,2801,3184,3185,3241,324 
                                                                                           2,3277,3278,3516,3522,3578,3584,37 
                                                                                           19,3726,3823,3824,4054,4055,4057,4 
                                                                                           111,4112,4114,4380,4381,4383,4429, 
                                                                                           4430,4432,4592,6684,6877,6878,7094 
                                                                                           ,7286,9507,10278,11156,11157,11288 
                                                                                           ,11292                             
 RESTART_FILE_TYPE.P3DR8    RECORD          120   800      2     1        PTR,PRIV         1555,1569,3189,3191,3247,3248,4062 
                                                                                           ,4063,4065,4594,9510               
 RESTART_FILE_TYPE.REGISTER_ID                                                                                             ...
                            I(4)            4     132            scalar   PRIV             1538,4612,9544                     
 RESTART_FILE_TYPE.UNIT     I(4)            4     0              scalar   PRIV             1539,8272,8306,12047,12096         
 VAR_TYPE.OWNS_DATA         L(4)            4     544            scalar   PRIV             1548,4639,4681,9556,9673           

Page 58          Source Listing                  FREE_RESTART_TYPE
2021-06-01 08:54                                 fms_io.F90

   1595 
   1596 !-------------------------------------------------------------------------------
   1597 !
   1598 !   The routine sets up a list of global metadata expressions for save_restart
   1599 !
   1600 !-------------------------------------------------------------------------------
   1601 subroutine set_meta_global(fileObj, name, rval, ival, cval)
   1602   type(restart_file_type), intent(inout) :: fileObj
   1603   character(len=*), intent(in)           :: name
   1604   real,             intent(in), optional :: rval(:)
   1605   integer,          intent(in), optional :: ival(:)
   1606   character(len=*), intent(in), optional :: cval
   1607   type(meta_type),pointer                :: this
   1608   type(meta_type),pointer                :: this_n
   1609 
   1610   this =>fileObj%first
   1611   if(associated(this))then
   1612      do while(associated(this%next))
   1613         this =>this%next
   1614      enddo
   1615      allocate(this_n); this%next =>this_n; this_n%prev =>this; this =>this_n
   1616   else
   1617      allocate(this)
   1618      fileObj%first =>this
   1619   endif
   1620 
   1621 ! Per mpp_write_meta_global, only one type of data can be associated with the metadata
   1622 !!$ Gfortran on gaea does not yet support deferred length character strings
   1623 !!$  allocate(character(len(name)) :: this%name); this%name = name
   1624   this%name = name  ! Remove this line when Gfortran supports deferred length character stings
   1625   if(present(rval))then
   1626      allocate(this%rval(size(rval))); this%rval=rval
   1627   elseif(present(ival))then
   1628      allocate(this%ival(size(ival))); this%ival=ival
   1629   elseif(present(cval))then
   1630 !!$ Gfortran on gaea does not yet support deferred length character strings
   1631 !!$     allocate(character(len(cval)) :: this%cval); this%cval = cval
   1632      this%cval=cval  ! Remove this line when Gfortran supports deferred length character stings
   1633   endif
   1634 end subroutine set_meta_global

Page 59          Source Listing                  SET_META_GLOBAL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                      
                                            
 fms_io_mod_mp_set_meta_global_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   1611                                 scalar                    1611,1612                         
 CVAL                       Dummy  1601     CHAR                        scalar   ARG,IN           1629,1632                         
 FILEOBJ                    Dummy  1601     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1610,1618                         
 IVAL                       Dummy  1601     I(4)            4     1     1        ARG,IN           1627,1628                         
 NAME                       Dummy  1601     CHAR                        scalar   ARG,IN           1624                              
 PRESENT                    Func   1625                                 scalar                    1625,1627,1629                    
 RVAL                       Dummy  1601     R(8)            8     1     1        ARG,IN           1625,1626                         
 SET_META_GLOBAL            Subr   1601                                                                                             
 SIZE                       Func   1626                                 scalar                    1626,1628                         
 THIS                       Local  1607     META_TYPE       672         scalar   PTR,TGT          1610,1611,1612,1613,1615,1617,1618
                                                                                                  ,1624,1626,1628,1632              
 THIS_N                     Local  1608     META_TYPE       672         scalar   PTR,TGT          1615                              

Page 60          Source Listing                  SET_META_GLOBAL
2021-06-01 08:54                                 fms_io.F90

   1635 
   1636 
   1637 !-------------------------------------------------------------------------------
   1638 !
   1639 !   The routine writes the global metadata
   1640 !
   1641 !-------------------------------------------------------------------------------
   1642 subroutine write_meta_global(unit,fileObj)
   1643   integer,                 intent(in) :: unit
   1644   type(restart_file_type), intent(in) :: fileObj
   1645   type(meta_type), pointer            :: this
   1646 
   1647   this =>fileObj%first
   1648   do while(associated(this))
   1649      if(allocated(this%rval))then
   1650         call mpp_write_meta(unit,this%name,rval=this%rval)
   1651      elseif(allocated(this%ival))then
   1652         call mpp_write_meta(unit,this%name,ival=this%ival)
   1653 !!$ Gfortran on gaea does not yet support deferred length character strings
   1654 !!$     elseif(allocated(this%cval))then
   1655      elseif(len_trim(this%cval).GT.0)then  ! Remove this line when Gfortran supports deferred length character stings
   1656         call mpp_write_meta(unit,this%name,cval=this%cval)
   1657      else
   1658         call mpp_write_meta(unit,this%name)
   1659      endif
   1660      this =>this%next
   1661   enddo
   1662 end subroutine write_meta_global

Page 61          Source Listing                  WRITE_META_GLOBAL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_write_meta_global_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   1649                                 scalar                    1649,1651                         
 ASSOCIATED                 Func   1648                                 scalar                    1648                              
 FILEOBJ                    Dummy  1642     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,IN           1647                              
 LEN_TRIM                   Func   1655                                 scalar                    1655                              
 MPP_WRITE_META_GLOBAL      Subr   1650                                          PRIV             1650,1652,1656,1658               
 THIS                       Local  1645     META_TYPE       672         scalar   PTR              1647,1648,1649,1650,1651,1652,1655
                                                                                                  ,1656,1658,1660                   
 UNIT                       Dummy  1642     I(4)            4           scalar   ARG,IN           1650,1652,1656,1658               
 WRITE_META_GLOBAL          Subr   1642                                                           2865                              

Page 62          Source Listing                  WRITE_META_GLOBAL
2021-06-01 08:54                                 fms_io.F90

   1663 
   1664 !-------------------------------------------------------------------------------
   1665 !
   1666 !   The routine will register a scalar real restart file field with one time level
   1667 !
   1668 !-------------------------------------------------------------------------------
   1669 function register_restart_field_r0d(fileObj, filename, fieldname, data, domain, mandatory, &
   1670                                     no_domain, position, tile_count, data_default, &
   1671                                     longname, units, read_only, restart_owns_data)
   1672   type(restart_file_type),    intent(inout)      :: fileObj
   1673   character(len=*),           intent(in)         :: filename, fieldname
   1674   real,                       intent(in), target :: data
   1675   type(domain2d),   optional, intent(in), target :: domain
   1676   logical,          optional, intent(in)         :: no_domain
   1677   real,             optional, intent(in)         :: data_default
   1678   logical,          optional, intent(in)         :: mandatory
   1679   integer,          optional, intent(in)         :: position, tile_count
   1680   character(len=*), optional, intent(in)         :: longname, units
   1681   logical,          optional, intent(in)         :: read_only
   1682   logical,          optional, intent(in)         :: restart_owns_data
   1683   integer                                        :: index_field
   1684   integer                                        :: register_restart_field_r0d
   1685 
   1686   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_field_r0d): need to call fms_io_init')
   1687   call setup_one_field(fileObj, filename, fieldname, (/1, 1, 1, 1/), index_field, domain, mandatory, &
   1688                        no_domain, scalar_or_1d=.true., position=position, tile_count=tile_count, &
   1689                        data_default=data_default, longname=longname, units=units, read_only=read_only,&
   1690                        owns_data=restart_owns_data)
   1691   fileObj%p0dr(fileObj%var(index_field)%siz(4), index_field)%p => data
   1692   fileObj%var(index_field)%ndim = 0
   1693   register_restart_field_r0d = index_field
   1694 
   1695 end function register_restart_field_r0d

Page 63          Source Listing                  REGISTER_RESTART_FIELD_R0D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                 
                                                       
 fms_io_mod_mp_register_restart_field_r0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1669     R(8)            8           scalar   ARG,TGT,IN       1691                              
 DATA_DEFAULT               Dummy  1670     R(8)            8           scalar   ARG,IN           1689                              
 DOMAIN                     Dummy  1669     DOMAIN2D        752         scalar   ARG,TGT,IN       1687                              
 FIELDNAME                  Dummy  1669     CHAR                        scalar   ARG,IN           1687                              
 FILENAME                   Dummy  1669     CHAR                        scalar   ARG,IN           1687                              
 FILEOBJ                    Dummy  1669     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1687,1691,1692                    
 INDEX_FIELD                Local  1683     I(4)            4           scalar                    1687,1691,1692,1693               
 LONGNAME                   Dummy  1671     CHAR                        scalar   ARG,IN           1689                              
 MANDATORY                  Dummy  1669     L(4)            4           scalar   ARG,IN           1687                              
 NO_DOMAIN                  Dummy  1670     L(4)            4           scalar   ARG,IN           1688                              
 POSITION                   Dummy  1670     I(4)            4           scalar   ARG,IN           1688                              
 READ_ONLY                  Dummy  1671     L(4)            4           scalar   ARG,IN           1689                              
 REGISTER_RESTART_FIELD_R0D Func   1669     I(4)            4           scalar   PRIV             1693                              
 RESTART_OWNS_DATA          Dummy  1671     L(4)            4           scalar   ARG,IN           1690                              
 TILE_COUNT                 Dummy  1670     I(4)            4           scalar   ARG,IN           1688                              
 UNITS                      Dummy  1671     CHAR                        scalar   ARG,IN           1689                              

Page 64          Source Listing                  REGISTER_RESTART_FIELD_R0D
2021-06-01 08:54                                 fms_io.F90

   1696 
   1697 !-------------------------------------------------------------------------------
   1698 !
   1699 !   The routine will register a 1-D real restart file field with one time level
   1700 !
   1701 !-------------------------------------------------------------------------------
   1702 function register_restart_field_r1d(fileObj, filename, fieldname, data, domain, mandatory, &
   1703                              no_domain, position, tile_count, data_default, longname, units, &
   1704                              compressed_axis, read_only, restart_owns_data)
   1705   type(restart_file_type), intent(inout)         :: fileObj
   1706   character(len=*),           intent(in)         :: filename, fieldname
   1707   real, dimension(:),         intent(in), target :: data
   1708   type(domain2d),   optional, intent(in), target :: domain
   1709   logical,          optional, intent(in)         :: no_domain
   1710   real,             optional, intent(in)         :: data_default
   1711   integer,          optional, intent(in)         :: position, tile_count
   1712   logical,          optional, intent(in)         :: mandatory
   1713   character(len=*), optional, intent(in)         :: longname, units, compressed_axis
   1714   logical,          optional, intent(in)         :: read_only
   1715   logical,          optional, intent(in)         :: restart_owns_data
   1716   integer                                        :: index_field
   1717   integer                                        :: register_restart_field_r1d
   1718 
   1719   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_field_r1d): need to call fms_io_init')
   1720   call setup_one_field(fileObj, filename, fieldname, (/size(data,1), 1, 1, 1/), index_field, domain, mandatory, &
   1721                        no_domain, scalar_or_1d=.true., position=position, tile_count=tile_count, &
   1722                        data_default=data_default, longname=longname, units=units, compressed_axis=compressed_axis, &
   1723                        read_only=read_only, owns_data=restart_owns_data)
   1724 
   1725   fileObj%p1dr(fileObj%var(index_field)%siz(4), index_field)%p => data
   1726   fileObj%var(index_field)%ndim = 1
   1727   register_restart_field_r1d = index_field
   1728 
   1729 end function register_restart_field_r1d

Page 65          Source Listing                  REGISTER_RESTART_FIELD_R1D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                 
                                                       
 fms_io_mod_mp_register_restart_field_r1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPRESSED_AXIS            Dummy  1704     CHAR                        scalar   ARG,IN           1722                              
 DATA                       Dummy  1702     R(8)            8     1     1        ARG,TGT,IN       1720,1725                         
 DATA_DEFAULT               Dummy  1703     R(8)            8           scalar   ARG,IN           1722                              
 DOMAIN                     Dummy  1702     DOMAIN2D        752         scalar   ARG,TGT,IN       1720                              
 FIELDNAME                  Dummy  1702     CHAR                        scalar   ARG,IN           1720                              
 FILENAME                   Dummy  1702     CHAR                        scalar   ARG,IN           1720                              
 FILEOBJ                    Dummy  1702     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1720,1725,1726                    
 INDEX_FIELD                Local  1716     I(4)            4           scalar                    1720,1725,1726,1727               
 LONGNAME                   Dummy  1703     CHAR                        scalar   ARG,IN           1722                              
 MANDATORY                  Dummy  1702     L(4)            4           scalar   ARG,IN           1720                              
 NO_DOMAIN                  Dummy  1703     L(4)            4           scalar   ARG,IN           1721                              
 POSITION                   Dummy  1703     I(4)            4           scalar   ARG,IN           1721                              
 READ_ONLY                  Dummy  1704     L(4)            4           scalar   ARG,IN           1723                              
 REGISTER_RESTART_FIELD_R1D Func   1702     I(4)            4           scalar   PRIV             1727                              
 RESTART_OWNS_DATA          Dummy  1704     L(4)            4           scalar   ARG,IN           1723                              
 SIZE                       Func   1720                                 scalar                    1720                              
 TILE_COUNT                 Dummy  1703     I(4)            4           scalar   ARG,IN           1721                              
 UNITS                      Dummy  1703     CHAR                        scalar   ARG,IN           1722                              

Page 66          Source Listing                  REGISTER_RESTART_FIELD_R1D
2021-06-01 08:54                                 fms_io.F90

   1730 
   1731 !-------------------------------------------------------------------------------
   1732 !
   1733 !   The routine will register a 2-D real restart file field with one time level
   1734 !
   1735 !-------------------------------------------------------------------------------
   1736 function register_restart_field_r2d(fileObj, filename, fieldname, data, domain, mandatory, no_domain, &
   1737                                     compressed, position, tile_count, data_default, longname, units, &
   1738                                     compressed_axis, read_only, restart_owns_data)
   1739   type(restart_file_type), intent(inout)         :: fileObj
   1740   character(len=*),           intent(in)         :: filename, fieldname
   1741   real,     dimension(:,:),   intent(in), target :: data
   1742   type(domain2d),   optional, intent(in), target :: domain
   1743   real,             optional, intent(in)         :: data_default
   1744   logical,          optional, intent(in)         :: no_domain
   1745   logical,          optional, intent(in)         :: compressed
   1746   integer,          optional, intent(in)         :: position, tile_count
   1747   logical,          optional, intent(in)         :: mandatory
   1748   character(len=*), optional, intent(in)         :: longname, units, compressed_axis
   1749   logical,          optional, intent(in)         :: read_only
   1750   logical,          optional, intent(in)         :: restart_owns_data
   1751   logical                                        :: is_compressed
   1752   integer                                        :: index_field
   1753   integer                                        :: register_restart_field_r2d
   1754 
   1755   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_field_r2d): need to call fms_io_init')
   1756   is_compressed = .false.
   1757   if(present(compressed)) is_compressed=compressed
   1758   call setup_one_field(fileObj, filename, fieldname, (/size(data,1), size(data,2), 1, 1/), &
   1759                        index_field, domain, mandatory, no_domain, is_compressed, &
   1760                        position, tile_count, data_default, longname, units, compressed_axis, &
   1761                        read_only=read_only, owns_data=restart_owns_data)
   1762   fileObj%p2dr(fileObj%var(index_field)%siz(4), index_field)%p => data
   1763   fileObj%var(index_field)%ndim = 2
   1764   register_restart_field_r2d = index_field
   1765 
   1766 end function register_restart_field_r2d

Page 67          Source Listing                  REGISTER_RESTART_FIELD_R2D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                 
                                                       
 fms_io_mod_mp_register_restart_field_r2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPRESSED                 Dummy  1737     L(4)            4           scalar   ARG,IN           1757                              
 COMPRESSED_AXIS            Dummy  1738     CHAR                        scalar   ARG,IN           1760                              
 DATA                       Dummy  1736     R(8)            8     2     1        ARG,TGT,IN       1758,1762                         
 DATA_DEFAULT               Dummy  1737     R(8)            8           scalar   ARG,IN           1760                              
 DOMAIN                     Dummy  1736     DOMAIN2D        752         scalar   ARG,TGT,IN       1759                              
 FIELDNAME                  Dummy  1736     CHAR                        scalar   ARG,IN           1758                              
 FILENAME                   Dummy  1736     CHAR                        scalar   ARG,IN           1758                              
 FILEOBJ                    Dummy  1736     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1758,1762,1763                    
 INDEX_FIELD                Local  1752     I(4)            4           scalar                    1759,1762,1763,1764               
 IS_COMPRESSED              Local  1751     L(4)            4           scalar                    1756,1757,1759                    
 LONGNAME                   Dummy  1737     CHAR                        scalar   ARG,IN           1760                              
 MANDATORY                  Dummy  1736     L(4)            4           scalar   ARG,IN           1759                              
 NO_DOMAIN                  Dummy  1736     L(4)            4           scalar   ARG,IN           1759                              
 POSITION                   Dummy  1737     I(4)            4           scalar   ARG,IN           1760                              
 PRESENT                    Func   1757                                 scalar                    1757                              
 READ_ONLY                  Dummy  1738     L(4)            4           scalar   ARG,IN           1761                              
 REGISTER_RESTART_FIELD_R2D Func   1736     I(4)            4           scalar   PRIV             1764                              
 RESTART_OWNS_DATA          Dummy  1738     L(4)            4           scalar   ARG,IN           1761                              
 SIZE                       Func   1758                                 scalar                    1758                              
 TILE_COUNT                 Dummy  1737     I(4)            4           scalar   ARG,IN           1760                              
 UNITS                      Dummy  1737     CHAR                        scalar   ARG,IN           1760                              

Page 68          Source Listing                  REGISTER_RESTART_FIELD_R2D
2021-06-01 08:54                                 fms_io.F90

   1767 
   1768 
   1769 !-------------------------------------------------------------------------------
   1770 !
   1771 !   The routine will register a 3-D real restart file field with one time level
   1772 !
   1773 !-------------------------------------------------------------------------------
   1774 function register_restart_field_r3d(fileObj, filename, fieldname, data, domain, mandatory, &
   1775                              no_domain, position, tile_count, data_default, longname, units, read_only, &
   1776                              compressed, compressed_axis, restart_owns_data)
   1777   type(restart_file_type), intent(inout)         :: fileObj
   1778   character(len=*),           intent(in)         :: filename, fieldname
   1779   real,     dimension(:,:,:), intent(in), target :: data
   1780   type(domain2d),   optional, intent(in), target :: domain
   1781   real,             optional, intent(in)         :: data_default
   1782   logical,          optional, intent(in)         :: no_domain
   1783   integer,          optional, intent(in)         :: position, tile_count
   1784   logical,          optional, intent(in)         :: mandatory
   1785   character(len=*), optional, intent(in)         :: longname, units, compressed_axis
   1786   logical,          optional, intent(in)         :: read_only
   1787   logical,          optional, intent(in)         :: compressed
   1788   logical,          optional, intent(in)         :: restart_owns_data
   1789   logical                                        :: is_compressed
   1790   integer                                        :: index_field
   1791   integer                                        :: register_restart_field_r3d
   1792 
   1793   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_field_r3d): need to call fms_io_init')
   1794   if(present(compressed)) then
   1795     is_compressed=compressed
   1796   else
   1797     is_compressed = .false.
   1798   endif
   1799   call setup_one_field(fileObj, filename, fieldname, (/size(data,1), size(data,2), size(data,3), 1/), &
   1800                        index_field, domain, mandatory, no_domain, is_compressed, &
   1801                        position, tile_count, data_default, longname, units, compressed_axis, &
   1802                        read_only=read_only, owns_data=restart_owns_data)
   1803   fileObj%p3dr(fileObj%var(index_field)%siz(4), index_field)%p => data
   1804   fileObj%var(index_field)%ndim = 3
   1805   register_restart_field_r3d = index_field
   1806 
   1807 end function register_restart_field_r3d

Page 69          Source Listing                  REGISTER_RESTART_FIELD_R3D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                 
                                                       
 fms_io_mod_mp_register_restart_field_r3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPRESSED                 Dummy  1776     L(4)            4           scalar   ARG,IN           1794,1795                         
 COMPRESSED_AXIS            Dummy  1776     CHAR                        scalar   ARG,IN           1801                              
 DATA                       Dummy  1774     R(8)            8     3     1        ARG,TGT,IN       1799,1803                         
 DATA_DEFAULT               Dummy  1775     R(8)            8           scalar   ARG,IN           1801                              
 DOMAIN                     Dummy  1774     DOMAIN2D        752         scalar   ARG,TGT,IN       1800                              
 FIELDNAME                  Dummy  1774     CHAR                        scalar   ARG,IN           1799                              
 FILENAME                   Dummy  1774     CHAR                        scalar   ARG,IN           1799                              
 FILEOBJ                    Dummy  1774     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1799,1803,1804                    
 INDEX_FIELD                Local  1790     I(4)            4           scalar                    1800,1803,1804,1805               
 IS_COMPRESSED              Local  1789     L(4)            4           scalar                    1795,1797,1800                    
 LONGNAME                   Dummy  1775     CHAR                        scalar   ARG,IN           1801                              
 MANDATORY                  Dummy  1774     L(4)            4           scalar   ARG,IN           1800                              
 NO_DOMAIN                  Dummy  1775     L(4)            4           scalar   ARG,IN           1800                              
 POSITION                   Dummy  1775     I(4)            4           scalar   ARG,IN           1801                              
 PRESENT                    Func   1794                                 scalar                    1794                              
 READ_ONLY                  Dummy  1775     L(4)            4           scalar   ARG,IN           1802                              
 REGISTER_RESTART_FIELD_R3D Func   1774     I(4)            4           scalar   PRIV             1805                              
 RESTART_OWNS_DATA          Dummy  1776     L(4)            4           scalar   ARG,IN           1802                              
 SIZE                       Func   1799                                 scalar                    1799                              
 TILE_COUNT                 Dummy  1775     I(4)            4           scalar   ARG,IN           1801                              
 UNITS                      Dummy  1775     CHAR                        scalar   ARG,IN           1801                              

Page 70          Source Listing                  REGISTER_RESTART_FIELD_R3D
2021-06-01 08:54                                 fms_io.F90

   1808 
   1809 
   1810 # 1802
   1811 
   1812 !-------------------------------------------------------------------------------
   1813 !
   1814 !   The routine will register a 4-D real restart file field with one time level
   1815 !
   1816 !-------------------------------------------------------------------------------
   1817 function register_restart_field_r4d(fileObj, filename, fieldname, data, domain, mandatory, &
   1818                              no_domain, position, tile_count, data_default, longname, units, &
   1819                              read_only, restart_owns_data)
   1820   type(restart_file_type),   intent(inout)         :: fileObj
   1821   character(len=*),             intent(in)         :: filename, fieldname
   1822   real,     dimension(:,:,:,:), intent(in), target :: data
   1823   type(domain2d),   optional,   intent(in), target :: domain
   1824   real,             optional,   intent(in)         :: data_default
   1825   logical,          optional,   intent(in)         :: no_domain
   1826   integer,          optional,   intent(in)         :: position, tile_count
   1827   logical,          optional,   intent(in)         :: mandatory
   1828   character(len=*), optional,   intent(in)         :: longname, units
   1829   logical,          optional,   intent(in)         :: read_only
   1830   logical,          optional,   intent(in)         :: restart_owns_data
   1831   integer                                          :: index_field
   1832   integer                                          :: register_restart_field_r4d
   1833 
   1834   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_field_r4d): need to call fms_io_init')
   1835   call setup_one_field(fileObj, filename, fieldname, (/size(data,1), size(data,2), size(data,3), 1, size(data,4)/), &
   1836                        index_field, domain, mandatory, no_domain, .false., &
   1837                        position, tile_count, data_default, longname, units, &
   1838                        read_only=read_only, owns_data=restart_owns_data)
   1839   fileObj%p4dr(fileObj%var(index_field)%siz(4), index_field)%p => data
   1840   fileObj%var(index_field)%ndim = 4
   1841   register_restart_field_r4d = index_field
   1842 
   1843 end function register_restart_field_r4d

Page 71          Source Listing                  REGISTER_RESTART_FIELD_R4D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                 
                                                       
 fms_io_mod_mp_register_restart_field_r4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1817     R(8)            8     4     1        ARG,TGT,IN       1835,1839                         
 DATA_DEFAULT               Dummy  1818     R(8)            8           scalar   ARG,IN           1837                              
 DOMAIN                     Dummy  1817     DOMAIN2D        752         scalar   ARG,TGT,IN       1836                              
 FIELDNAME                  Dummy  1817     CHAR                        scalar   ARG,IN           1835                              
 FILENAME                   Dummy  1817     CHAR                        scalar   ARG,IN           1835                              
 FILEOBJ                    Dummy  1817     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1835,1839,1840                    
 INDEX_FIELD                Local  1831     I(4)            4           scalar                    1836,1839,1840,1841               
 LONGNAME                   Dummy  1818     CHAR                        scalar   ARG,IN           1837                              
 MANDATORY                  Dummy  1817     L(4)            4           scalar   ARG,IN           1836                              
 NO_DOMAIN                  Dummy  1818     L(4)            4           scalar   ARG,IN           1836                              
 POSITION                   Dummy  1818     I(4)            4           scalar   ARG,IN           1837                              
 READ_ONLY                  Dummy  1819     L(4)            4           scalar   ARG,IN           1838                              
 REGISTER_RESTART_FIELD_R4D Func   1817     I(4)            4           scalar   PRIV             1841                              
 RESTART_OWNS_DATA          Dummy  1819     L(4)            4           scalar   ARG,IN           1838                              
 SIZE                       Func   1835                                 scalar                    1835                              
 TILE_COUNT                 Dummy  1818     I(4)            4           scalar   ARG,IN           1837                              
 UNITS                      Dummy  1818     CHAR                        scalar   ARG,IN           1837                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 PTR4DR.P                   R(8)            8     0        4     1        PTR              1839,3192,3193,3250,3251,3283,3284 
                                                                                           ,3825,3826,4066,4067,4069,4115,411 
                                                                                           6,4118,4384,4385,4387,4433,4434,44 
                                                                                           36,6705,7137,7334                  
 RESTART_FILE_TYPE.P4DR     RECORD          144   896      2     1        PTR,PRIV         1839,3192,3193,3250,3251,3283,3284 
                                                                                           ,3825,3826,4066,4067,4069,4115,411 
                                                                                           6,4118,4384,4385,4387,4433,4434,44 
                                                                                           36,4595,6705,7137,7334,9508        

Page 72          Source Listing                  REGISTER_RESTART_FIELD_R4D
2021-06-01 08:54                                 fms_io.F90

   1844 
   1845 
   1846 !-------------------------------------------------------------------------------
   1847 !
   1848 !   The routine will register a scalar integer restart file field with one time level
   1849 !
   1850 !-------------------------------------------------------------------------------
   1851 function register_restart_field_i0d(fileObj, filename, fieldname, data, domain, mandatory, &
   1852                              no_domain, position, tile_count, data_default, longname, units, &
   1853                              read_only, restart_owns_data)
   1854   type(restart_file_type), intent(inout)         :: fileObj
   1855   character(len=*),           intent(in)         :: filename, fieldname
   1856   integer,                    intent(in), target :: data
   1857   type(domain2d),   optional, intent(in), target :: domain
   1858   integer,             optional, intent(in)      :: data_default
   1859   integer,          optional, intent(in)         :: position, tile_count
   1860   logical,          optional, intent(in)         :: mandatory
   1861   logical,          optional, intent(in)         :: no_domain
   1862   character(len=*), optional, intent(in)         :: longname, units
   1863   logical,          optional, intent(in)         :: read_only
   1864   logical,          optional, intent(in)         :: restart_owns_data
   1865   integer                                        :: index_field
   1866   integer                                        :: register_restart_field_i0d
   1867   real                                           :: data_default_r
   1868 
   1869   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_field_i0d): need to call fms_io_init')
   1870 
   1871   if (KIND(data_default)/=KIND(data)) call mpp_error(FATAL,'fms_io(register_restart_field_i0d): data_default and data differ
   1871 ent KIND()')
   1872   data_default_r = TRANSFER(MPP_FILL_INT,data_default_r)
   1873   if (present(data_default)) data_default_r = TRANSFER(data_default ,data_default_r)
   1874 
   1875   call setup_one_field(fileObj, filename, fieldname, (/1, 1, 1, 1/), index_field, domain, &
   1876                        mandatory, no_domain=no_domain, scalar_or_1d=.true., position=position, tile_count=tile_count, &
   1877                           data_default=data_default_r, longname=longname, units=units, &
   1878                           read_only=read_only, owns_data=restart_owns_data)
   1879 
   1880   fileObj%p0di(fileObj%var(index_field)%siz(4), index_field)%p => data
   1881   fileObj%var(index_field)%ndim = 0
   1882   register_restart_field_i0d = index_field
   1883 
   1884 end function register_restart_field_i0d

Page 73          Source Listing                  REGISTER_RESTART_FIELD_I0D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                 
                                                       
 fms_io_mod_mp_register_restart_field_i0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1851     I(4)            4           scalar   ARG,TGT,IN       1871,1880                         
 DATA_DEFAULT               Dummy  1852     I(4)            4           scalar   ARG,IN           1871,1873                         
 DATA_DEFAULT_R             Local  1867     R(8)            8           scalar                    1872,1873,1877                    
 DOMAIN                     Dummy  1851     DOMAIN2D        752         scalar   ARG,TGT,IN       1875                              
 FIELDNAME                  Dummy  1851     CHAR                        scalar   ARG,IN           1875                              
 FILENAME                   Dummy  1851     CHAR                        scalar   ARG,IN           1875                              
 FILEOBJ                    Dummy  1851     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1875,1880,1881                    
 INDEX_FIELD                Local  1865     I(4)            4           scalar                    1875,1880,1881,1882               
 KIND                       Func   1871                                 scalar                    1871                              
 LONGNAME                   Dummy  1852     CHAR                        scalar   ARG,IN           1877                              
 MANDATORY                  Dummy  1851     L(4)            4           scalar   ARG,IN           1876                              
 NO_DOMAIN                  Dummy  1852     L(4)            4           scalar   ARG,IN           1876                              
 POSITION                   Dummy  1852     I(4)            4           scalar   ARG,IN           1876                              
 PRESENT                    Func   1873                                 scalar                    1873                              
 READ_ONLY                  Dummy  1853     L(4)            4           scalar   ARG,IN           1878                              
 REGISTER_RESTART_FIELD_I0D Func   1851     I(4)            4           scalar   PRIV             1882                              
 RESTART_OWNS_DATA          Dummy  1853     L(4)            4           scalar   ARG,IN           1878                              
 TILE_COUNT                 Dummy  1852     I(4)            4           scalar   ARG,IN           1876                              
 TRANSFER                   Func   1872                                 scalar                    1872,1873                         
 UNITS                      Dummy  1852     CHAR                        scalar   ARG,IN           1877                              

Page 74          Source Listing                  REGISTER_RESTART_FIELD_I0D
2021-06-01 08:54                                 fms_io.F90

   1885 
   1886 !-------------------------------------------------------------------------------
   1887 !
   1888 !   The routine will register a 1-D integer restart file field with one time level
   1889 !
   1890 !-------------------------------------------------------------------------------
   1891 function register_restart_field_i1d(fileObj, filename, fieldname, data, domain, mandatory, &
   1892                              no_domain, position, tile_count, data_default, longname, units, &
   1893                              compressed_axis, read_only, restart_owns_data)
   1894   type(restart_file_type), intent(inout)         :: fileObj
   1895   character(len=*),           intent(in)         :: filename, fieldname
   1896   integer, dimension(:),      intent(in), target :: data
   1897   type(domain2d),   optional, intent(in), target :: domain
   1898   integer,          optional, intent(in)         :: data_default
   1899   integer,          optional, intent(in)         :: position, tile_count
   1900   logical,          optional, intent(in)         :: mandatory
   1901   logical,          optional, intent(in)         :: no_domain
   1902   character(len=*), optional, intent(in)         :: longname, units, compressed_axis
   1903   logical,          optional, intent(in)         :: read_only
   1904   logical,          optional, intent(in)         :: restart_owns_data
   1905   integer                                        :: index_field
   1906   integer                                        :: register_restart_field_i1d
   1907   real                                           :: data_default_r
   1908 
   1909   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_field_i1d): need to call fms_io_init')
   1910 
   1911   if (KIND(data_default)/=KIND(data)) call mpp_error(FATAL,'fms_io(register_restart_field_i1d): data_default and data differ
   1911 ent KIND()')
   1912   data_default_r = TRANSFER(MPP_FILL_INT,data_default_r)
   1913   if (present(data_default)) data_default_r = TRANSFER(data_default ,data_default_r)
   1914 
   1915   call setup_one_field(fileObj, filename, fieldname, (/size(data,1), 1, 1, 1/), index_field, domain, &
   1916                        mandatory, no_domain=no_domain, scalar_or_1d=.true., position=position, tile_count=tile_count, &
   1917                        data_default=data_default_r, longname=longname, units=units, compressed_axis=compressed_axis, &
   1918                        read_only=read_only, owns_data=restart_owns_data)
   1919   fileObj%p1di(fileObj%var(index_field)%siz(4), index_field)%p => data
   1920   fileObj%var(index_field)%ndim = 1
   1921   register_restart_field_i1d = index_field
   1922 
   1923 end function register_restart_field_i1d

Page 75          Source Listing                  REGISTER_RESTART_FIELD_I1D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                 
                                                       
 fms_io_mod_mp_register_restart_field_i1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPRESSED_AXIS            Dummy  1893     CHAR                        scalar   ARG,IN           1917                              
 DATA                       Dummy  1891     I(4)            4     1     1        ARG,TGT,IN       1911,1915,1919                    
 DATA_DEFAULT               Dummy  1892     I(4)            4           scalar   ARG,IN           1911,1913                         
 DATA_DEFAULT_R             Local  1907     R(8)            8           scalar                    1912,1913,1917                    
 DOMAIN                     Dummy  1891     DOMAIN2D        752         scalar   ARG,TGT,IN       1915                              
 FIELDNAME                  Dummy  1891     CHAR                        scalar   ARG,IN           1915                              
 FILENAME                   Dummy  1891     CHAR                        scalar   ARG,IN           1915                              
 FILEOBJ                    Dummy  1891     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1915,1919,1920                    
 INDEX_FIELD                Local  1905     I(4)            4           scalar                    1915,1919,1920,1921               
 KIND                       Func   1911                                 scalar                    1911                              
 LONGNAME                   Dummy  1892     CHAR                        scalar   ARG,IN           1917                              
 MANDATORY                  Dummy  1891     L(4)            4           scalar   ARG,IN           1916                              
 NO_DOMAIN                  Dummy  1892     L(4)            4           scalar   ARG,IN           1916                              
 POSITION                   Dummy  1892     I(4)            4           scalar   ARG,IN           1916                              
 PRESENT                    Func   1913                                 scalar                    1913                              
 READ_ONLY                  Dummy  1893     L(4)            4           scalar   ARG,IN           1918                              
 REGISTER_RESTART_FIELD_I1D Func   1891     I(4)            4           scalar   PRIV             1921                              
 RESTART_OWNS_DATA          Dummy  1893     L(4)            4           scalar   ARG,IN           1918                              
 SIZE                       Func   1915                                 scalar                    1915                              
 TILE_COUNT                 Dummy  1892     I(4)            4           scalar   ARG,IN           1916                              
 TRANSFER                   Func   1912                                 scalar                    1912,1913                         
 UNITS                      Dummy  1892     CHAR                        scalar   ARG,IN           1917                              

Page 76          Source Listing                  REGISTER_RESTART_FIELD_I1D
2021-06-01 08:54                                 fms_io.F90

   1924 
   1925 
   1926 !-------------------------------------------------------------------------------
   1927 !
   1928 !   The routine will register a 2-D real restart file field with one time level
   1929 !
   1930 !-------------------------------------------------------------------------------
   1931 function register_restart_field_i2d(fileObj, filename, fieldname, data, domain, mandatory, no_domain, &
   1932                              compressed, position, tile_count, data_default, longname, units, &
   1933                              compressed_axis, read_only, restart_owns_data)
   1934   type(restart_file_type), intent(inout)         :: fileObj
   1935   character(len=*),           intent(in)         :: filename, fieldname
   1936   integer,  dimension(:,:),   intent(in), target :: data
   1937   type(domain2d),   optional, intent(in), target :: domain
   1938   integer,          optional, intent(in)         :: data_default
   1939   logical,          optional, intent(in)         :: no_domain
   1940   logical,          optional, intent(in)         :: compressed
   1941   integer,          optional, intent(in)         :: position, tile_count
   1942   logical,          optional, intent(in)         :: mandatory
   1943   character(len=*), optional, intent(in)         :: longname, units, compressed_axis
   1944   logical,          optional, intent(in)         :: read_only
   1945   logical,          optional, intent(in)         :: restart_owns_data
   1946   logical                                        :: is_compressed
   1947   integer                                        :: index_field
   1948   integer                                        :: register_restart_field_i2d
   1949   real                                           :: data_default_r
   1950 
   1951   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_field_i2d): need to call fms_io_init')
   1952   is_compressed = .false.
   1953   if(present(compressed)) is_compressed=compressed
   1954 
   1955   if (KIND(data_default)/=KIND(data)) call mpp_error(FATAL,'fms_io(register_restart_field_i2d): data_default and data differ
   1955 ent KIND()')
   1956   data_default_r = TRANSFER(MPP_FILL_INT,data_default_r)
   1957   if (present(data_default)) data_default_r = TRANSFER(data_default ,data_default_r)
   1958 
   1959   call setup_one_field(fileObj, filename, fieldname, (/size(data,1), size(data,2), 1, 1/), &
   1960                        index_field, domain, mandatory, no_domain, is_compressed, &
   1961                        position, tile_count, data_default_r, longname, units, compressed_axis, &
   1962                        read_only=read_only, owns_data=restart_owns_data)
   1963   fileObj%p2di(fileObj%var(index_field)%siz(4), index_field)%p => data
   1964   fileObj%var(index_field)%ndim = 2
   1965   register_restart_field_i2d = index_field
   1966 
   1967 end function register_restart_field_i2d

Page 77          Source Listing                  REGISTER_RESTART_FIELD_I2D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                 
                                                       
 fms_io_mod_mp_register_restart_field_i2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMPRESSED                 Dummy  1932     L(4)            4           scalar   ARG,IN           1953                              
 COMPRESSED_AXIS            Dummy  1933     CHAR                        scalar   ARG,IN           1961                              
 DATA                       Dummy  1931     I(4)            4     2     1        ARG,TGT,IN       1955,1959,1963                    
 DATA_DEFAULT               Dummy  1932     I(4)            4           scalar   ARG,IN           1955,1957                         
 DATA_DEFAULT_R             Local  1949     R(8)            8           scalar                    1956,1957,1961                    
 DOMAIN                     Dummy  1931     DOMAIN2D        752         scalar   ARG,TGT,IN       1960                              
 FIELDNAME                  Dummy  1931     CHAR                        scalar   ARG,IN           1959                              
 FILENAME                   Dummy  1931     CHAR                        scalar   ARG,IN           1959                              
 FILEOBJ                    Dummy  1931     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1959,1963,1964                    
 INDEX_FIELD                Local  1947     I(4)            4           scalar                    1960,1963,1964,1965               
 IS_COMPRESSED              Local  1946     L(4)            4           scalar                    1952,1953,1960                    
 KIND                       Func   1955                                 scalar                    1955                              
 LONGNAME                   Dummy  1932     CHAR                        scalar   ARG,IN           1961                              
 MANDATORY                  Dummy  1931     L(4)            4           scalar   ARG,IN           1960                              
 NO_DOMAIN                  Dummy  1931     L(4)            4           scalar   ARG,IN           1960                              
 POSITION                   Dummy  1932     I(4)            4           scalar   ARG,IN           1961                              
 PRESENT                    Func   1953                                 scalar                    1953,1957                         
 READ_ONLY                  Dummy  1933     L(4)            4           scalar   ARG,IN           1962                              
 REGISTER_RESTART_FIELD_I2D Func   1931     I(4)            4           scalar   PRIV             1965                              
 RESTART_OWNS_DATA          Dummy  1933     L(4)            4           scalar   ARG,IN           1962                              
 SIZE                       Func   1959                                 scalar                    1959                              
 TILE_COUNT                 Dummy  1932     I(4)            4           scalar   ARG,IN           1961                              
 TRANSFER                   Func   1956                                 scalar                    1956,1957                         
 UNITS                      Dummy  1932     CHAR                        scalar   ARG,IN           1961                              

Page 78          Source Listing                  REGISTER_RESTART_FIELD_I2D
2021-06-01 08:54                                 fms_io.F90

   1968 
   1969 !-------------------------------------------------------------------------------
   1970 !
   1971 !   The routine will register a 3-D real restart file field with one time level
   1972 !
   1973 !-------------------------------------------------------------------------------
   1974 function register_restart_field_i3d(fileObj, filename, fieldname, data, domain, mandatory, &
   1975                              no_domain, position, tile_count, data_default, longname, units, &
   1976                              read_only, restart_owns_data)
   1977   type(restart_file_type), intent(inout)         :: fileObj
   1978   character(len=*),           intent(in)         :: filename, fieldname
   1979   integer,  dimension(:,:,:), intent(in), target :: data
   1980   type(domain2d),   optional, intent(in), target :: domain
   1981   integer,             optional, intent(in)         :: data_default
   1982   logical,          optional, intent(in)         :: no_domain
   1983   integer,          optional, intent(in)         :: position, tile_count
   1984   logical,          optional, intent(in)         :: mandatory
   1985   character(len=*), optional, intent(in)         :: longname, units
   1986   logical,          optional, intent(in)         :: read_only
   1987   logical,          optional, intent(in)         :: restart_owns_data
   1988   integer                                        :: index_field
   1989   integer                                        :: register_restart_field_i3d
   1990   real                                           :: data_default_r
   1991 
   1992   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_field_i3d): need to call fms_io_init')
   1993 
   1994   if (KIND(data_default)/=KIND(data)) call mpp_error(FATAL,'fms_io(register_restart_field_i3d): data_default and data differ
   1994 ent KIND()')
   1995   data_default_r = TRANSFER(MPP_FILL_INT,data_default_r)
   1996   if (present(data_default)) data_default_r = TRANSFER(data_default ,data_default_r)
   1997 
   1998   call setup_one_field(fileObj, filename, fieldname, (/size(data,1), size(data,2), size(data,3), 1/), &
   1999                        index_field, domain, mandatory, no_domain, .false., &
   2000                        position, tile_count, data_default_r, longname, units, &
   2001                        read_only=read_only, owns_data=restart_owns_data)
   2002   fileObj%p3di(fileObj%var(index_field)%siz(4), index_field)%p => data
   2003   fileObj%var(index_field)%ndim = 3
   2004   register_restart_field_i3d = index_field
   2005 
   2006 end function register_restart_field_i3d

Page 79          Source Listing                  REGISTER_RESTART_FIELD_I3D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                 
                                                       
 fms_io_mod_mp_register_restart_field_i3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  1974     I(4)            4     3     1        ARG,TGT,IN       1994,1998,2002                    
 DATA_DEFAULT               Dummy  1975     I(4)            4           scalar   ARG,IN           1994,1996                         
 DATA_DEFAULT_R             Local  1990     R(8)            8           scalar                    1995,1996,2000                    
 DOMAIN                     Dummy  1974     DOMAIN2D        752         scalar   ARG,TGT,IN       1999                              
 FIELDNAME                  Dummy  1974     CHAR                        scalar   ARG,IN           1998                              
 FILENAME                   Dummy  1974     CHAR                        scalar   ARG,IN           1998                              
 FILEOBJ                    Dummy  1974     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        1998,2002,2003                    
 INDEX_FIELD                Local  1988     I(4)            4           scalar                    1999,2002,2003,2004               
 KIND                       Func   1994                                 scalar                    1994                              
 LONGNAME                   Dummy  1975     CHAR                        scalar   ARG,IN           2000                              
 MANDATORY                  Dummy  1974     L(4)            4           scalar   ARG,IN           1999                              
 NO_DOMAIN                  Dummy  1975     L(4)            4           scalar   ARG,IN           1999                              
 POSITION                   Dummy  1975     I(4)            4           scalar   ARG,IN           2000                              
 PRESENT                    Func   1996                                 scalar                    1996                              
 READ_ONLY                  Dummy  1976     L(4)            4           scalar   ARG,IN           2001                              
 REGISTER_RESTART_FIELD_I3D Func   1974     I(4)            4           scalar   PRIV             2004                              
 RESTART_OWNS_DATA          Dummy  1976     L(4)            4           scalar   ARG,IN           2001                              
 SIZE                       Func   1998                                 scalar                    1998                              
 TILE_COUNT                 Dummy  1975     I(4)            4           scalar   ARG,IN           2000                              
 TRANSFER                   Func   1995                                 scalar                    1995,1996                         
 UNITS                      Dummy  1975     CHAR                        scalar   ARG,IN           2000                              

Page 80          Source Listing                  REGISTER_RESTART_FIELD_I3D
2021-06-01 08:54                                 fms_io.F90

   2007 
   2008 !-------------------------------------------------------------------------------
   2009 !
   2010 !   The routine will register a scalar real restart file field with two time level
   2011 !
   2012 !-------------------------------------------------------------------------------
   2013 function register_restart_field_r0d_2level(fileObj, filename, fieldname, data1, data2, domain, mandatory, &
   2014                              no_domain, position, tile_count, data_default, longname, units, read_only)
   2015   type(restart_file_type), intent(inout)         :: fileObj
   2016   character(len=*),           intent(in)         :: filename, fieldname
   2017   real,                       intent(in), target :: data1, data2
   2018   type(domain2d),   optional, intent(in), target :: domain
   2019   real,             optional, intent(in)         :: data_default
   2020   integer,          optional, intent(in)         :: position, tile_count
   2021   logical,          optional, intent(in)         :: mandatory
   2022   logical,          optional, intent(in)         :: no_domain
   2023   character(len=*), optional, intent(in)         :: longname, units
   2024   logical,          optional, intent(in)         :: read_only
   2025   integer                                        :: index_field
   2026   integer                                        :: register_restart_field_r0d_2level
   2027 
   2028   if(.not.module_is_initialized) call mpp_error(FATAL, &
   2029       'fms_io(register_restart_field_r0d_2level): need to call fms_io_init')
   2030   call setup_one_field(fileObj, filename, fieldname, (/1, 1, 1, 2/), index_field, domain, &
   2031                        mandatory, no_domain=no_domain, scalar_or_1d=.true., position=position, tile_count=tile_count, &
   2032                        data_default=data_default, longname=longname, units=units, read_only=read_only)
   2033   fileObj%p0dr(1, index_field)%p => data1
   2034   fileObj%p0dr(2, index_field)%p => data2
   2035   fileObj%var(index_field)%ndim = 0
   2036   register_restart_field_r0d_2level = index_field
   2037 
   2038 end function register_restart_field_r0d_2level

Page 81          Source Listing                  REGISTER_RESTART_FIELD_R0D_2LEVEL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_register_restart_field_r0d_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  2013     R(8)            8           scalar   ARG,TGT,IN       2033                              
 DATA2                      Dummy  2013     R(8)            8           scalar   ARG,TGT,IN       2034                              
 DATA_DEFAULT               Dummy  2014     R(8)            8           scalar   ARG,IN           2032                              
 DOMAIN                     Dummy  2013     DOMAIN2D        752         scalar   ARG,TGT,IN       2030                              
 FIELDNAME                  Dummy  2013     CHAR                        scalar   ARG,IN           2030                              
 FILENAME                   Dummy  2013     CHAR                        scalar   ARG,IN           2030                              
 FILEOBJ                    Dummy  2013     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2030,2033,2034,2035               
 INDEX_FIELD                Local  2025     I(4)            4           scalar                    2030,2033,2034,2035,2036          
 LONGNAME                   Dummy  2014     CHAR                        scalar   ARG,IN           2032                              
 MANDATORY                  Dummy  2013     L(4)            4           scalar   ARG,IN           2031                              
 NO_DOMAIN                  Dummy  2014     L(4)            4           scalar   ARG,IN           2031                              
 POSITION                   Dummy  2014     I(4)            4           scalar   ARG,IN           2031                              
 READ_ONLY                  Dummy  2014     L(4)            4           scalar   ARG,IN           2032                              
 REGISTER_RESTART_FIELD_R0D                                                                                                         
 _2LEVEL                    Func   2013     I(4)            4           scalar   PRIV             2036                              
 TILE_COUNT                 Dummy  2014     I(4)            4           scalar   ARG,IN           2031                              
 UNITS                      Dummy  2014     CHAR                        scalar   ARG,IN           2032                              

Page 82          Source Listing                  REGISTER_RESTART_FIELD_R0D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   2039 
   2040 !-------------------------------------------------------------------------------
   2041 !
   2042 !   The routine will register a 1-D real restart file field with two time level
   2043 !
   2044 !-------------------------------------------------------------------------------
   2045 function register_restart_field_r1d_2level(fileObj, filename, fieldname, data1, data2, domain, mandatory, &
   2046                              no_domain, position, tile_count, data_default, longname, units, read_only)
   2047   type(restart_file_type), intent(inout)         :: fileObj
   2048   character(len=*),           intent(in)         :: filename, fieldname
   2049   real,     dimension(:),     intent(in), target :: data1, data2
   2050   type(domain2d),   optional, intent(in), target :: domain
   2051   real,             optional, intent(in)         :: data_default
   2052   integer,          optional, intent(in)         :: position, tile_count
   2053   logical,          optional, intent(in)         :: mandatory
   2054   logical,          optional, intent(in)         :: no_domain
   2055   character(len=*), optional, intent(in)         :: longname, units
   2056   logical,          optional, intent(in)         :: read_only
   2057   integer                                        :: index_field
   2058   integer                                        :: register_restart_field_r1d_2level
   2059 
   2060   if(.not.module_is_initialized) call mpp_error(FATAL, &
   2061       'fms_io(register_restart_field_r1d_2level): need to call fms_io_init')
   2062   call setup_one_field(fileObj, filename, fieldname, (/size(data1,1), 1, 1, 2/), index_field, domain, &
   2063                        mandatory, no_domain=no_domain, scalar_or_1d=.true., position=position, tile_count=tile_count, &
   2064                        data_default=data_default, longname=longname, units=units, read_only=read_only)
   2065   fileObj%p1dr(1, index_field)%p => data1
   2066   fileObj%p1dr(2, index_field)%p => data2
   2067   fileObj%var(index_field)%ndim = 1
   2068   register_restart_field_r1d_2level = index_field
   2069 
   2070   return
   2071 
   2072 end function register_restart_field_r1d_2level

Page 83          Source Listing                  REGISTER_RESTART_FIELD_R1D_2LEVEL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_register_restart_field_r1d_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  2045     R(8)            8     1     1        ARG,TGT,IN       2062,2065                         
 DATA2                      Dummy  2045     R(8)            8     1     1        ARG,TGT,IN       2066                              
 DATA_DEFAULT               Dummy  2046     R(8)            8           scalar   ARG,IN           2064                              
 DOMAIN                     Dummy  2045     DOMAIN2D        752         scalar   ARG,TGT,IN       2062                              
 FIELDNAME                  Dummy  2045     CHAR                        scalar   ARG,IN           2062                              
 FILENAME                   Dummy  2045     CHAR                        scalar   ARG,IN           2062                              
 FILEOBJ                    Dummy  2045     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2062,2065,2066,2067               
 INDEX_FIELD                Local  2057     I(4)            4           scalar                    2062,2065,2066,2067,2068          
 LONGNAME                   Dummy  2046     CHAR                        scalar   ARG,IN           2064                              
 MANDATORY                  Dummy  2045     L(4)            4           scalar   ARG,IN           2063                              
 NO_DOMAIN                  Dummy  2046     L(4)            4           scalar   ARG,IN           2063                              
 POSITION                   Dummy  2046     I(4)            4           scalar   ARG,IN           2063                              
 READ_ONLY                  Dummy  2046     L(4)            4           scalar   ARG,IN           2064                              
 REGISTER_RESTART_FIELD_R1D                                                                                                         
 _2LEVEL                    Func   2045     I(4)            4           scalar   PRIV             2068                              
 SIZE                       Func   2062                                 scalar                    2062                              
 TILE_COUNT                 Dummy  2046     I(4)            4           scalar   ARG,IN           2063                              
 UNITS                      Dummy  2046     CHAR                        scalar   ARG,IN           2064                              

Page 84          Source Listing                  REGISTER_RESTART_FIELD_R1D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   2073 
   2074 !-------------------------------------------------------------------------------
   2075 !
   2076 !   The routine will register a 3-D real restart file field with two time level
   2077 !
   2078 !-------------------------------------------------------------------------------
   2079 function register_restart_field_r2d_2level(fileObj, filename, fieldname, data1, data2, domain, mandatory, &
   2080                              no_domain, position, tile_count, data_default, longname, units, read_only)
   2081   type(restart_file_type), intent(inout)         :: fileObj
   2082   character(len=*),           intent(in)         :: filename, fieldname
   2083   real,     dimension(:,:),   intent(in), target :: data1, data2
   2084   type(domain2d),   optional, intent(in), target :: domain
   2085   real,             optional, intent(in)         :: data_default
   2086   logical,          optional, intent(in)         :: no_domain
   2087   integer,          optional, intent(in)         :: position, tile_count
   2088   logical,          optional, intent(in)         :: mandatory
   2089   character(len=*), optional, intent(in)         :: longname, units
   2090   logical,          optional, intent(in)         :: read_only
   2091   integer                                        :: index_field
   2092   integer                                        :: register_restart_field_r2d_2level
   2093 
   2094   if(.not.module_is_initialized) call mpp_error(FATAL, &
   2095       'fms_io(register_restart_field_r2d_2level): need to call fms_io_init')
   2096   call setup_one_field(fileObj, filename, fieldname, (/size(data1,1), size(data1,2), 1, 2/), &
   2097                        index_field, domain, mandatory, no_domain, .false., &
   2098                        position, tile_count, data_default, longname, units, read_only=read_only)
   2099   fileObj%p2dr(1, index_field)%p => data1
   2100   fileObj%p2dr(2, index_field)%p => data2
   2101   fileObj%var(index_field)%ndim = 2
   2102   register_restart_field_r2d_2level = index_field
   2103 
   2104   return
   2105 
   2106 end function register_restart_field_r2d_2level

Page 85          Source Listing                  REGISTER_RESTART_FIELD_R2D_2LEVEL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_register_restart_field_r2d_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  2079     R(8)            8     2     1        ARG,TGT,IN       2096,2099                         
 DATA2                      Dummy  2079     R(8)            8     2     1        ARG,TGT,IN       2100                              
 DATA_DEFAULT               Dummy  2080     R(8)            8           scalar   ARG,IN           2098                              
 DOMAIN                     Dummy  2079     DOMAIN2D        752         scalar   ARG,TGT,IN       2097                              
 FIELDNAME                  Dummy  2079     CHAR                        scalar   ARG,IN           2096                              
 FILENAME                   Dummy  2079     CHAR                        scalar   ARG,IN           2096                              
 FILEOBJ                    Dummy  2079     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2096,2099,2100,2101               
 INDEX_FIELD                Local  2091     I(4)            4           scalar                    2097,2099,2100,2101,2102          
 LONGNAME                   Dummy  2080     CHAR                        scalar   ARG,IN           2098                              
 MANDATORY                  Dummy  2079     L(4)            4           scalar   ARG,IN           2097                              
 NO_DOMAIN                  Dummy  2080     L(4)            4           scalar   ARG,IN           2097                              
 POSITION                   Dummy  2080     I(4)            4           scalar   ARG,IN           2098                              
 READ_ONLY                  Dummy  2080     L(4)            4           scalar   ARG,IN           2098                              
 REGISTER_RESTART_FIELD_R2D                                                                                                         
 _2LEVEL                    Func   2079     I(4)            4           scalar   PRIV             2102                              
 SIZE                       Func   2096                                 scalar                    2096                              
 TILE_COUNT                 Dummy  2080     I(4)            4           scalar   ARG,IN           2098                              
 UNITS                      Dummy  2080     CHAR                        scalar   ARG,IN           2098                              

Page 86          Source Listing                  REGISTER_RESTART_FIELD_R2D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   2107 
   2108 !-------------------------------------------------------------------------------
   2109 !
   2110 !   The routine will register a 3-D real restart file field with two time level
   2111 !
   2112 !-------------------------------------------------------------------------------
   2113 function register_restart_field_r3d_2level(fileObj, filename, fieldname, data1, data2, domain, mandatory, &
   2114                              no_domain, position, tile_count, data_default, longname, units, read_only)
   2115   type(restart_file_type), intent(inout)         :: fileObj
   2116   character(len=*),           intent(in)         :: filename, fieldname
   2117   real,     dimension(:,:,:), intent(in), target :: data1, data2
   2118   type(domain2d),   optional, intent(in), target :: domain
   2119   real,             optional, intent(in)         :: data_default
   2120   logical,          optional, intent(in)         :: no_domain
   2121   integer,          optional, intent(in)         :: position, tile_count
   2122   logical,          optional, intent(in)         :: mandatory
   2123   character(len=*), optional, intent(in)         :: longname, units
   2124   logical,          optional, intent(in)         :: read_only
   2125   integer                                        :: index_field
   2126   integer                                        :: register_restart_field_r3d_2level
   2127 
   2128   if(.not.module_is_initialized) call mpp_error(FATAL, &
   2129       'fms_io(register_restart_field_r3d_2level): need to call fms_io_init')
   2130   call setup_one_field(fileObj, filename, fieldname, (/size(data1,1), size(data1,2), size(data1,3), 2/), &
   2131                        index_field, domain, mandatory, no_domain, .false., &
   2132                        position, tile_count, data_default, longname, units, read_only=read_only)
   2133   fileObj%p3dr(1, index_field)%p => data1
   2134   fileObj%p3dr(2, index_field)%p => data2
   2135   fileObj%var(index_field)%ndim = 3
   2136   register_restart_field_r3d_2level = index_field
   2137 
   2138   return
   2139 
   2140 end function register_restart_field_r3d_2level

Page 87          Source Listing                  REGISTER_RESTART_FIELD_R3D_2LEVEL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_register_restart_field_r3d_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  2113     R(8)            8     3     1        ARG,TGT,IN       2130,2133                         
 DATA2                      Dummy  2113     R(8)            8     3     1        ARG,TGT,IN       2134                              
 DATA_DEFAULT               Dummy  2114     R(8)            8           scalar   ARG,IN           2132                              
 DOMAIN                     Dummy  2113     DOMAIN2D        752         scalar   ARG,TGT,IN       2131                              
 FIELDNAME                  Dummy  2113     CHAR                        scalar   ARG,IN           2130                              
 FILENAME                   Dummy  2113     CHAR                        scalar   ARG,IN           2130                              
 FILEOBJ                    Dummy  2113     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2130,2133,2134,2135               
 INDEX_FIELD                Local  2125     I(4)            4           scalar                    2131,2133,2134,2135,2136          
 LONGNAME                   Dummy  2114     CHAR                        scalar   ARG,IN           2132                              
 MANDATORY                  Dummy  2113     L(4)            4           scalar   ARG,IN           2131                              
 NO_DOMAIN                  Dummy  2114     L(4)            4           scalar   ARG,IN           2131                              
 POSITION                   Dummy  2114     I(4)            4           scalar   ARG,IN           2132                              
 READ_ONLY                  Dummy  2114     L(4)            4           scalar   ARG,IN           2132                              
 REGISTER_RESTART_FIELD_R3D                                                                                                         
 _2LEVEL                    Func   2113     I(4)            4           scalar   PRIV             2136                              
 SIZE                       Func   2130                                 scalar                    2130                              
 TILE_COUNT                 Dummy  2114     I(4)            4           scalar   ARG,IN           2132                              
 UNITS                      Dummy  2114     CHAR                        scalar   ARG,IN           2132                              

Page 88          Source Listing                  REGISTER_RESTART_FIELD_R3D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   2141 
   2142 # 2201
   2143 
   2144 
   2145 !-------------------------------------------------------------------------------
   2146 !
   2147 !   The routine will register a scalar integer restart file field with two time level
   2148 !
   2149 !-------------------------------------------------------------------------------
   2150 function register_restart_field_i0d_2level(fileObj, filename, fieldname, data1, data2, domain, mandatory, &
   2151                              no_domain, position, tile_count, data_default, longname, units, read_only)
   2152   type(restart_file_type), intent(inout)         :: fileObj
   2153   character(len=*),           intent(in)         :: filename, fieldname
   2154   integer,                    intent(in), target :: data1, data2
   2155   type(domain2d),   optional, intent(in), target :: domain
   2156   integer,          optional, intent(in)         :: data_default
   2157   integer,          optional, intent(in)         :: position, tile_count
   2158   logical,          optional, intent(in)         :: mandatory
   2159   logical,          optional, intent(in)         :: no_domain
   2160   character(len=*), optional, intent(in)         :: longname, units
   2161   logical,          optional, intent(in)         :: read_only
   2162   integer                                        :: index_field
   2163   integer                                        :: register_restart_field_i0d_2level
   2164   real                                           :: data_default_r
   2165 
   2166   if(.not.module_is_initialized) call mpp_error(FATAL, &
   2167       'fms_io(register_restart_field_i0d_2level): need to call fms_io_init')
   2168 
   2169   if (KIND(data_default)/=KIND(data1)) call mpp_error(FATAL,'fms_io(register_restart_field_i0d_2level): data_default and dat
   2169 a1 different KIND()')
   2170   if (KIND(data_default)/=KIND(data2)) call mpp_error(FATAL,'fms_io(register_restart_field_i0d_2level): data_default and dat
   2170 a2 different KIND()')
   2171   data_default_r = TRANSFER(MPP_FILL_INT,data_default_r)
   2172   if (present(data_default)) data_default_r = TRANSFER(data_default ,data_default_r)
   2173 
   2174   call setup_one_field(fileObj, filename, fieldname, (/1, 1, 1, 2/), index_field, domain, &
   2175                        mandatory, no_domain=no_domain, scalar_or_1d=.true., position=position, tile_count=tile_count, &
   2176                        data_default=data_default_r, longname=longname, units=units, read_only=read_only)
   2177   fileObj%p0di(1, index_field)%p => data1
   2178   fileObj%p0di(2, index_field)%p => data2
   2179   fileObj%var(index_field)%ndim = 0
   2180   register_restart_field_i0d_2level = index_field
   2181 
   2182   return
   2183 
   2184 end function register_restart_field_i0d_2level

Page 89          Source Listing                  REGISTER_RESTART_FIELD_I0D_2LEVEL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_register_restart_field_i0d_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  2150     I(4)            4           scalar   ARG,TGT,IN       2169,2177                         
 DATA2                      Dummy  2150     I(4)            4           scalar   ARG,TGT,IN       2170,2178                         
 DATA_DEFAULT               Dummy  2151     I(4)            4           scalar   ARG,IN           2169,2170,2172                    
 DATA_DEFAULT_R             Local  2164     R(8)            8           scalar                    2171,2172,2176                    
 DOMAIN                     Dummy  2150     DOMAIN2D        752         scalar   ARG,TGT,IN       2174                              
 FIELDNAME                  Dummy  2150     CHAR                        scalar   ARG,IN           2174                              
 FILENAME                   Dummy  2150     CHAR                        scalar   ARG,IN           2174                              
 FILEOBJ                    Dummy  2150     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2174,2177,2178,2179               
 INDEX_FIELD                Local  2162     I(4)            4           scalar                    2174,2177,2178,2179,2180          
 KIND                       Func   2169                                 scalar                    2169,2170                         
 LONGNAME                   Dummy  2151     CHAR                        scalar   ARG,IN           2176                              
 MANDATORY                  Dummy  2150     L(4)            4           scalar   ARG,IN           2175                              
 NO_DOMAIN                  Dummy  2151     L(4)            4           scalar   ARG,IN           2175                              
 POSITION                   Dummy  2151     I(4)            4           scalar   ARG,IN           2175                              
 PRESENT                    Func   2172                                 scalar                    2172                              
 READ_ONLY                  Dummy  2151     L(4)            4           scalar   ARG,IN           2176                              
 REGISTER_RESTART_FIELD_I0D                                                                                                         
 _2LEVEL                    Func   2150     I(4)            4           scalar   PRIV             2180                              
 TILE_COUNT                 Dummy  2151     I(4)            4           scalar   ARG,IN           2175                              
 TRANSFER                   Func   2171                                 scalar                    2171,2172                         
 UNITS                      Dummy  2151     CHAR                        scalar   ARG,IN           2176                              

Page 90          Source Listing                  REGISTER_RESTART_FIELD_I0D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   2185 
   2186 !-------------------------------------------------------------------------------
   2187 !
   2188 !   The routine will register a 1-D integer restart file field with two time level
   2189 !
   2190 !-------------------------------------------------------------------------------
   2191 function register_restart_field_i1d_2level(fileObj, filename, fieldname, data1, data2, domain, mandatory, &
   2192                              no_domain, position, tile_count, data_default, longname, units, read_only)
   2193   type(restart_file_type), intent(inout)         :: fileObj
   2194   character(len=*),           intent(in)         :: filename, fieldname
   2195   integer,  dimension(:),     intent(in), target :: data1, data2
   2196   type(domain2d),   optional, intent(in), target :: domain
   2197   integer,          optional, intent(in)         :: data_default
   2198   integer,          optional, intent(in)         :: position, tile_count
   2199   logical,          optional, intent(in)         :: mandatory
   2200   logical,          optional, intent(in)         :: no_domain
   2201   character(len=*), optional, intent(in)         :: longname, units
   2202   logical,          optional, intent(in)         :: read_only
   2203   integer                                        :: index_field
   2204   integer                                        :: register_restart_field_i1d_2level
   2205   real                                           :: data_default_r
   2206 
   2207   if(.not.module_is_initialized) call mpp_error(FATAL, &
   2208       'fms_io(register_restart_field_i1d_2level): need to call fms_io_init')
   2209 
   2210   if (KIND(data_default)/=KIND(data1)) call mpp_error(FATAL,'fms_io(register_restart_field_i1d_2level): data_default and dat
   2210 a1 different KIND()')
   2211   if (KIND(data_default)/=KIND(data2)) call mpp_error(FATAL,'fms_io(register_restart_field_i1d_2level): data_default and dat
   2211 a2 different KIND()')
   2212   data_default_r = TRANSFER(MPP_FILL_INT,data_default_r)
   2213   if (present(data_default)) data_default_r = TRANSFER(data_default ,data_default_r)
   2214 
   2215   call setup_one_field(fileObj, filename, fieldname, (/size(data1,1), 1, 1, 2/), index_field, domain, &
   2216                        mandatory, no_domain=no_domain, scalar_or_1d=.true., position=position, tile_count=tile_count, &
   2217                        data_default=data_default_r, longname=longname, units=units, read_only=read_only)
   2218   fileObj%p1di(1, index_field)%p => data1
   2219   fileObj%p1di(2, index_field)%p => data2
   2220   fileObj%var(index_field)%ndim = 1
   2221   register_restart_field_i1d_2level = index_field
   2222 
   2223   return
   2224 
   2225 end function register_restart_field_i1d_2level

Page 91          Source Listing                  REGISTER_RESTART_FIELD_I1D_2LEVEL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_register_restart_field_i1d_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  2191     I(4)            4     1     1        ARG,TGT,IN       2210,2215,2218                    
 DATA2                      Dummy  2191     I(4)            4     1     1        ARG,TGT,IN       2211,2219                         
 DATA_DEFAULT               Dummy  2192     I(4)            4           scalar   ARG,IN           2210,2211,2213                    
 DATA_DEFAULT_R             Local  2205     R(8)            8           scalar                    2212,2213,2217                    
 DOMAIN                     Dummy  2191     DOMAIN2D        752         scalar   ARG,TGT,IN       2215                              
 FIELDNAME                  Dummy  2191     CHAR                        scalar   ARG,IN           2215                              
 FILENAME                   Dummy  2191     CHAR                        scalar   ARG,IN           2215                              
 FILEOBJ                    Dummy  2191     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2215,2218,2219,2220               
 INDEX_FIELD                Local  2203     I(4)            4           scalar                    2215,2218,2219,2220,2221          
 KIND                       Func   2210                                 scalar                    2210,2211                         
 LONGNAME                   Dummy  2192     CHAR                        scalar   ARG,IN           2217                              
 MANDATORY                  Dummy  2191     L(4)            4           scalar   ARG,IN           2216                              
 NO_DOMAIN                  Dummy  2192     L(4)            4           scalar   ARG,IN           2216                              
 POSITION                   Dummy  2192     I(4)            4           scalar   ARG,IN           2216                              
 PRESENT                    Func   2213                                 scalar                    2213                              
 READ_ONLY                  Dummy  2192     L(4)            4           scalar   ARG,IN           2217                              
 REGISTER_RESTART_FIELD_I1D                                                                                                         
 _2LEVEL                    Func   2191     I(4)            4           scalar   PRIV             2221                              
 SIZE                       Func   2215                                 scalar                    2215                              
 TILE_COUNT                 Dummy  2192     I(4)            4           scalar   ARG,IN           2216                              
 TRANSFER                   Func   2212                                 scalar                    2212,2213                         
 UNITS                      Dummy  2192     CHAR                        scalar   ARG,IN           2217                              

Page 92          Source Listing                  REGISTER_RESTART_FIELD_I1D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   2226 
   2227 !-------------------------------------------------------------------------------
   2228 !
   2229 !   The routine will register a 2-D integer restart file field with two time level
   2230 !
   2231 !-------------------------------------------------------------------------------
   2232 function register_restart_field_i2d_2level(fileObj, filename, fieldname, data1, data2, domain, mandatory, &
   2233                              no_domain, position, tile_count, data_default, longname, units, read_only)
   2234   type(restart_file_type), intent(inout)         :: fileObj
   2235   character(len=*),           intent(in)         :: filename, fieldname
   2236   integer,  dimension(:,:),   intent(in), target :: data1, data2
   2237   type(domain2d),   optional, intent(in), target :: domain
   2238   integer,          optional, intent(in)         :: data_default
   2239   logical,          optional, intent(in)         :: no_domain
   2240   integer,          optional, intent(in)         :: position, tile_count
   2241   logical,          optional, intent(in)         :: mandatory
   2242   character(len=*), optional, intent(in)         :: longname, units
   2243   logical,          optional, intent(in)         :: read_only
   2244   integer                                        :: index_field
   2245   integer                                        :: register_restart_field_i2d_2level
   2246   real                                           :: data_default_r
   2247 
   2248   if(.not.module_is_initialized) call mpp_error(FATAL, &
   2249       'fms_io(register_restart_field_i2d_2level): need to call fms_io_init')
   2250 
   2251   if (KIND(data_default)/=KIND(data1)) call mpp_error(FATAL,'fms_io(register_restart_field_i2d_2level): data_default and dat
   2251 a1 different KIND()')
   2252   if (KIND(data_default)/=KIND(data2)) call mpp_error(FATAL,'fms_io(register_restart_field_i2d_2level): data_default and dat
   2252 a2 different KIND()')
   2253   data_default_r = TRANSFER(MPP_FILL_INT,data_default_r)
   2254   if (present(data_default)) data_default_r = TRANSFER(data_default ,data_default_r)
   2255 
   2256   call setup_one_field(fileObj, filename, fieldname, (/size(data1,1), size(data1,2), 1, 2/), &
   2257                        index_field, domain, mandatory, no_domain, .false., &
   2258                        position, tile_count, data_default_r, longname, units, read_only=read_only)
   2259   fileObj%p2di(1, index_field)%p => data1
   2260   fileObj%p2di(2, index_field)%p => data2
   2261   fileObj%var(index_field)%ndim = 2
   2262   register_restart_field_i2d_2level = index_field
   2263 
   2264   return
   2265 
   2266 end function register_restart_field_i2d_2level

Page 93          Source Listing                  REGISTER_RESTART_FIELD_I2D_2LEVEL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_register_restart_field_i2d_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  2232     I(4)            4     2     1        ARG,TGT,IN       2251,2256,2259                    
 DATA2                      Dummy  2232     I(4)            4     2     1        ARG,TGT,IN       2252,2260                         
 DATA_DEFAULT               Dummy  2233     I(4)            4           scalar   ARG,IN           2251,2252,2254                    
 DATA_DEFAULT_R             Local  2246     R(8)            8           scalar                    2253,2254,2258                    
 DOMAIN                     Dummy  2232     DOMAIN2D        752         scalar   ARG,TGT,IN       2257                              
 FIELDNAME                  Dummy  2232     CHAR                        scalar   ARG,IN           2256                              
 FILENAME                   Dummy  2232     CHAR                        scalar   ARG,IN           2256                              
 FILEOBJ                    Dummy  2232     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2256,2259,2260,2261               
 INDEX_FIELD                Local  2244     I(4)            4           scalar                    2257,2259,2260,2261,2262          
 KIND                       Func   2251                                 scalar                    2251,2252                         
 LONGNAME                   Dummy  2233     CHAR                        scalar   ARG,IN           2258                              
 MANDATORY                  Dummy  2232     L(4)            4           scalar   ARG,IN           2257                              
 NO_DOMAIN                  Dummy  2233     L(4)            4           scalar   ARG,IN           2257                              
 POSITION                   Dummy  2233     I(4)            4           scalar   ARG,IN           2258                              
 PRESENT                    Func   2254                                 scalar                    2254                              
 READ_ONLY                  Dummy  2233     L(4)            4           scalar   ARG,IN           2258                              
 REGISTER_RESTART_FIELD_I2D                                                                                                         
 _2LEVEL                    Func   2232     I(4)            4           scalar   PRIV             2262                              
 SIZE                       Func   2256                                 scalar                    2256                              
 TILE_COUNT                 Dummy  2233     I(4)            4           scalar   ARG,IN           2258                              
 TRANSFER                   Func   2253                                 scalar                    2253,2254                         
 UNITS                      Dummy  2233     CHAR                        scalar   ARG,IN           2258                              

Page 94          Source Listing                  REGISTER_RESTART_FIELD_I2D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   2267 
   2268 !-------------------------------------------------------------------------------
   2269 !
   2270 !   The routine will register a 3-D integer restart file field with two time level
   2271 !
   2272 !-------------------------------------------------------------------------------
   2273 function register_restart_field_i3d_2level(fileObj, filename, fieldname, data1, data2, domain, mandatory, &
   2274                              no_domain, position, tile_count, data_default, longname, units, read_only)
   2275   type(restart_file_type), intent(inout)         :: fileObj
   2276   character(len=*),           intent(in)         :: filename, fieldname
   2277   integer,  dimension(:,:,:), intent(in), target :: data1, data2
   2278   type(domain2d),   optional, intent(in), target :: domain
   2279   integer,          optional, intent(in)         :: data_default
   2280   logical,          optional, intent(in)         :: no_domain
   2281   integer,          optional, intent(in)         :: position, tile_count
   2282   logical,          optional, intent(in)         :: mandatory
   2283   character(len=*), optional, intent(in)         :: longname, units
   2284   logical,          optional, intent(in)         :: read_only
   2285   integer                                        :: index_field
   2286   integer                                        :: register_restart_field_i3d_2level
   2287   real                                           :: data_default_r
   2288 
   2289   if(.not.module_is_initialized) call mpp_error(FATAL, &
   2290       'fms_io(register_restart_field_i3d_2level): need to call fms_io_init')
   2291 
   2292   if (KIND(data_default)/=KIND(data1)) call mpp_error(FATAL,'fms_io(register_restart_field_i3d_2level): data_default and dat
   2292 a1 different KIND()')
   2293   if (KIND(data_default)/=KIND(data2)) call mpp_error(FATAL,'fms_io(register_restart_field_i3d_2level): data_default and dat
   2293 a2 different KIND()')
   2294   data_default_r = TRANSFER(MPP_FILL_INT,data_default_r)
   2295   if (present(data_default)) data_default_r = TRANSFER(data_default ,data_default_r)
   2296 
   2297   call setup_one_field(fileObj, filename, fieldname, (/size(data1,1), size(data1,2), size(data1,3), 2/), &
   2298                        index_field, domain, mandatory, no_domain, .false., &
   2299                        position, tile_count, data_default_r, longname, units, read_only=read_only)
   2300   fileObj%p3di(1, index_field)%p => data1
   2301   fileObj%p3di(2, index_field)%p => data2
   2302   fileObj%var(index_field)%ndim = 3
   2303   register_restart_field_i3d_2level = index_field
   2304 
   2305   return
   2306 
   2307 end function register_restart_field_i3d_2level

Page 95          Source Listing                  REGISTER_RESTART_FIELD_I3D_2LEVEL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_register_restart_field_i3d_2level_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA1                      Dummy  2273     I(4)            4     3     1        ARG,TGT,IN       2292,2297,2300                    
 DATA2                      Dummy  2273     I(4)            4     3     1        ARG,TGT,IN       2293,2301                         
 DATA_DEFAULT               Dummy  2274     I(4)            4           scalar   ARG,IN           2292,2293,2295                    
 DATA_DEFAULT_R             Local  2287     R(8)            8           scalar                    2294,2295,2299                    
 DOMAIN                     Dummy  2273     DOMAIN2D        752         scalar   ARG,TGT,IN       2298                              
 FIELDNAME                  Dummy  2273     CHAR                        scalar   ARG,IN           2297                              
 FILENAME                   Dummy  2273     CHAR                        scalar   ARG,IN           2297                              
 FILEOBJ                    Dummy  2273     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2297,2300,2301,2302               
 INDEX_FIELD                Local  2285     I(4)            4           scalar                    2298,2300,2301,2302,2303          
 KIND                       Func   2292                                 scalar                    2292,2293                         
 LONGNAME                   Dummy  2274     CHAR                        scalar   ARG,IN           2299                              
 MANDATORY                  Dummy  2273     L(4)            4           scalar   ARG,IN           2298                              
 NO_DOMAIN                  Dummy  2274     L(4)            4           scalar   ARG,IN           2298                              
 POSITION                   Dummy  2274     I(4)            4           scalar   ARG,IN           2299                              
 PRESENT                    Func   2295                                 scalar                    2295                              
 READ_ONLY                  Dummy  2274     L(4)            4           scalar   ARG,IN           2299                              
 REGISTER_RESTART_FIELD_I3D                                                                                                         
 _2LEVEL                    Func   2273     I(4)            4           scalar   PRIV             2303                              
 SIZE                       Func   2297                                 scalar                    2297                              
 TILE_COUNT                 Dummy  2274     I(4)            4           scalar   ARG,IN           2299                              
 TRANSFER                   Func   2294                                 scalar                    2294,2295                         
 UNITS                      Dummy  2274     CHAR                        scalar   ARG,IN           2299                              

Page 96          Source Listing                  REGISTER_RESTART_FIELD_I3D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   2308 
   2309 !-------------------------------------------------------------------------------
   2310 !
   2311 !   The routine will register a 2-D real for a generic region defined
   2312 !   by the global_size variable.
   2313 !
   2314 !-------------------------------------------------------------------------------
   2315 function register_restart_region_r2d (fileObj, filename, fieldname, data, indices, global_size, &
   2316                                       pelist, is_root_pe, longname, units, position, &
   2317                                       x_halo, y_halo, ishift, jshift, read_only, mandatory)
   2318   type(restart_file_type), intent(inout)         :: fileObj
   2319   character(len=*),           intent(in)         :: filename, fieldname
   2320   real,       dimension(:,:), intent(in), target :: data
   2321   integer,      dimension(:), intent(in)         :: indices, global_size, pelist
   2322   logical,                    intent(in)         :: is_root_pe
   2323   character(len=*), optional, intent(in)         :: longname, units
   2324   integer,          optional, intent(in)         :: position, x_halo, y_halo, ishift, jshift
   2325   logical,          optional, intent(in)         :: read_only
   2326   logical,          optional, intent(in)         :: mandatory
   2327   integer :: index_field, l_position
   2328   integer :: register_restart_region_r2d
   2329 
   2330   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_region_r2d): need to call fms_io_init')
   2331   if ((is_root_pe) .and. (.not.ANY(mpp_pe().eq.pelist))) call mpp_error(FATAL, &
   2332                     'fms_io(register_restart_region_r2d) designated root_pe is not a member of pelist')
   2333   l_position = CENTER
   2334   if (present(position)) l_position = position
   2335   call setup_one_field(fileObj, filename, fieldname, (/size(data,1), size(data,2), 1, 1/), &
   2336                        index_field, no_domain=.true., position=l_position, longname=longname, units=units, &
   2337                        read_only=read_only, mandatory=mandatory)
   2338   fileObj%p2dr(fileObj%var(index_field)%siz(4), index_field)%p => data
   2339   fileObj%var(index_field)%ndim = 2
   2340   fileObj%var(index_field)%is = indices(1)
   2341   fileObj%var(index_field)%ie = indices(2)
   2342   fileObj%var(index_field)%js = indices(3)
   2343   fileObj%var(index_field)%je = indices(4)
   2344   fileObj%var(index_field)%gsiz(1) = global_size(1)
   2345   fileObj%var(index_field)%gsiz(2) = global_size(2)
   2346   fileObj%is_root_pe = is_root_pe
   2347   fileObj%var(index_field)%x_halo = 0
   2348   fileObj%var(index_field)%y_halo = 0
   2349   fileObj%var(index_field)%ishift = 0
   2350   fileObj%var(index_field)%jshift = 0
   2351   if (present(x_halo)) fileObj%var(index_field)%x_halo = x_halo
   2352   if (present(y_halo)) fileObj%var(index_field)%y_halo = y_halo
   2353   if (present(ishift)) fileObj%var(index_field)%ishift = ishift
   2354   if (present(jshift)) fileObj%var(index_field)%jshift = jshift
   2355   if (allocated(fileObj%var(index_field)%pelist)) deallocate(fileObj%var(index_field)%pelist)
   2356   if (allocated(fileObj%var(index_field)%pelist)) deallocate(fileObj%var(index_field)%pelist)
   2357   allocate(fileObj%var(index_field)%pelist(size(pelist)))
   2358   fileObj%var(index_field)%pelist = pelist
   2359   register_restart_region_r2d = index_field
   2360 
   2361   return
   2362 end function register_restart_region_r2d

Page 97          Source Listing                  REGISTER_RESTART_REGION_R2D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                  
                                                        
 fms_io_mod_mp_register_restart_region_r2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   2355                                 scalar                    2355,2356                         
 ANY                        Func   2331                                 scalar                    2331                              
 DATA                       Dummy  2315     R(8)            8     2     1        ARG,TGT,IN       2335,2338                         
 FIELDNAME                  Dummy  2315     CHAR                        scalar   ARG,IN           2335                              
 FILENAME                   Dummy  2315     CHAR                        scalar   ARG,IN           2335                              
 FILEOBJ                    Dummy  2315     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2335,2338,2339,2340,2341,2342,2343
                                                                                                  ,2344,2345,2346,2347,2348,2349,235
                                                                                                  0,2351,2352,2353,2354,2355,2356,23
                                                                                                  57,2358                           
 GLOBAL_SIZE                Dummy  2315     I(4)            4     1     1        ARG,IN           2344,2345                         
 INDEX_FIELD                Local  2327     I(4)            4           scalar                    2336,2338,2339,2340,2341,2342,2343
                                                                                                  ,2344,2345,2347,2348,2349,2350,235
                                                                                                  1,2352,2353,2354,2355,2356,2357,23
                                                                                                  58,2359                           
 INDICES                    Dummy  2315     I(4)            4     1     1        ARG,IN           2340,2341,2342,2343               
 ISHIFT                     Dummy  2317     I(4)            4           scalar   ARG,IN           2353                              
 IS_ROOT_PE                 Dummy  2316     L(4)            4           scalar   ARG,IN           2331,2346                         
 JSHIFT                     Dummy  2317     I(4)            4           scalar   ARG,IN           2354                              
 LONGNAME                   Dummy  2316     CHAR                        scalar   ARG,IN           2336                              
 L_POSITION                 Local  2327     I(4)            4           scalar                    2333,2334,2336                    
 MANDATORY                  Dummy  2317     L(4)            4           scalar   ARG,IN           2337                              
 PELIST                     Dummy  2316     I(4)            4     1     1        ARG,IN           2331,2357,2358                    
 POSITION                   Dummy  2316     I(4)            4           scalar   ARG,IN           2334                              
 PRESENT                    Func   2334                                 scalar                    2334,2351,2352,2353,2354          
 READ_ONLY                  Dummy  2317     L(4)            4           scalar   ARG,IN           2337                              
 REGISTER_RESTART_REGION_R2                                                                                                         
 D                          Func   2315     I(4)            4           scalar   PRIV             2359                              
 SIZE                       Func   2335                                 scalar                    2335,2357                         
 UNITS                      Dummy  2316     CHAR                        scalar   ARG,IN           2336                              
 X_HALO                     Dummy  2317     I(4)            4           scalar   ARG,IN           2351                              
 Y_HALO                     Dummy  2317     I(4)            4           scalar   ARG,IN           2352                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 VAR_TYPE.IE                I(4)            4     3144           scalar   PRIV             2341,2396,3160,3162,3493,3556,3683 
                                                                                           ,3801,3803,4010,4012,4025,4259,426 
                                                                                           1,4364,4690,4722,9565              
 VAR_TYPE.IS                I(4)            4     3140           scalar   PRIV             2340,2395,3161,3183,3185,3188,3191 
                                                                                           ,3193,3199,3201,3492,3555,3682,380 
                                                                                           2,3822,3824,3826,3832,3834,4011,40 

Page 98          Source Listing                  REGISTER_RESTART_REGION_R2D
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
                                                                                           24,4053,4057,4061,4065,4069,4086,4 
                                                                                           094,4110,4114,4118,4135,4143,4260, 
                                                                                           4363,4379,4383,4387,4404,4412,4428 
                                                                                           ,4432,4436,4453,4461,4690,4721,472 
                                                                                           2,9564                             
 VAR_TYPE.ISHIFT            I(4)            4     3248           scalar   PRIV             2349,2353,2405,2409,3502,3565,3692 
                                                                                           ,9570                              
 VAR_TYPE.JE                I(4)            4     3152           scalar   PRIV             2343,2398,3163,3165,3495,3558,3685 
                                                                                           ,3804,3806,4013,4015,4027,4262,426 
                                                                                           4,4366,4691,4724,9567              
 VAR_TYPE.JS                I(4)            4     3148           scalar   PRIV             2342,2397,3164,3183,3185,3188,3191 
                                                                                           ,3193,3199,3201,3494,3557,3684,380 
                                                                                           5,3822,3824,3826,3832,3834,4014,40 
                                                                                           26,4053,4057,4061,4065,4069,4086,4 
                                                                                           094,4110,4114,4118,4135,4143,4263, 
                                                                                           4365,4379,4383,4387,4404,4412,4428 
                                                                                           ,4432,4436,4453,4461,4691,4723,472 
                                                                                           4,9566                             
 VAR_TYPE.JSHIFT            I(4)            4     3252           scalar   PRIV             2350,2354,2406,2410,3503,3566,3693 
                                                                                           ,9571                              
 VAR_TYPE.PELIST            I(4)            4     3176     1     1        ALC,PRIV         2355,2356,2357,2358,2411,2412,2413 
                                                                                           ,3484,3491,3511,3521,3554,3574,358 
                                                                                           3,3681,3715,3725,3753              
 VAR_TYPE.X_HALO            I(4)            4     3256           scalar   PRIV             2347,2351,2403,2407,3497,3560,3687 
                                                                                           ,9572                              
 VAR_TYPE.Y_HALO            I(4)            4     3260           scalar   PRIV             2348,2352,2404,2408,3499,3562,3689 
                                                                                           ,9573                              

Page 99          Source Listing                  REGISTER_RESTART_REGION_R2D
2021-06-01 08:54                                 fms_io.F90

   2363 
   2364 !-------------------------------------------------------------------------------
   2365 !
   2366 !   The routine will register a 3-D real for a generic region defined
   2367 !   by the global_size variable.
   2368 !
   2369 !-------------------------------------------------------------------------------
   2370 function register_restart_region_r3d (fileObj, filename, fieldname, data, indices, global_size, &
   2371                                       pelist, is_root_pe, longname, units, position, &
   2372                                       x_halo, y_halo, ishift, jshift, read_only, mandatory)
   2373   type(restart_file_type), intent(inout)         :: fileObj
   2374   character(len=*),           intent(in)         :: filename, fieldname
   2375   real,     dimension(:,:,:), intent(in), target :: data
   2376   integer,      dimension(:), intent(in)         :: indices, global_size, pelist
   2377   logical,                    intent(in)         :: is_root_pe
   2378   character(len=*), optional, intent(in)         :: longname, units
   2379   logical,          optional, intent(in)         :: read_only
   2380   integer,          optional, intent(in)         :: position, x_halo, y_halo, ishift, jshift
   2381   logical,          optional, intent(in)         :: mandatory
   2382   integer :: index_field, l_position
   2383   integer :: register_restart_region_r3d
   2384 
   2385   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(register_restart_region_r3d): need to call fms_io_init')
   2386   if ((is_root_pe) .and. (.not.ANY(mpp_pe().eq.pelist))) call mpp_error(FATAL, &
   2387                     'fms_io(register_restart_region_r3d) designated root_pe is not a member of pelist')
   2388   l_position = CENTER
   2389   if (present(position)) l_position = position
   2390   call setup_one_field(fileObj, filename, fieldname, (/size(data,1), size(data,2), size(data,3), 1/), &
   2391                        index_field, no_domain=.true., position=l_position, longname=longname, units=units, &
   2392                        read_only=read_only, mandatory=mandatory)
   2393   fileObj%p3dr(fileObj%var(index_field)%siz(4), index_field)%p => data
   2394   fileObj%var(index_field)%ndim = 3
   2395   fileObj%var(index_field)%is = indices(1)
   2396   fileObj%var(index_field)%ie = indices(2)
   2397   fileObj%var(index_field)%js = indices(3)
   2398   fileObj%var(index_field)%je = indices(4)
   2399   fileObj%var(index_field)%gsiz(1) = global_size(1)
   2400   fileObj%var(index_field)%gsiz(2) = global_size(2)
   2401   fileObj%var(index_field)%gsiz(3) = global_size(3)
   2402   fileObj%is_root_pe = is_root_pe
   2403   fileObj%var(index_field)%x_halo = 0
   2404   fileObj%var(index_field)%y_halo = 0
   2405   fileObj%var(index_field)%ishift = 0
   2406   fileObj%var(index_field)%jshift = 0
   2407   if (present(x_halo)) fileObj%var(index_field)%x_halo = x_halo
   2408   if (present(y_halo)) fileObj%var(index_field)%y_halo = y_halo
   2409   if (present(ishift)) fileObj%var(index_field)%ishift = ishift
   2410   if (present(jshift)) fileObj%var(index_field)%jshift = jshift
   2411   if (allocated(fileObj%var(index_field)%pelist)) deallocate(fileObj%var(index_field)%pelist)
   2412   allocate(fileObj%var(index_field)%pelist(size(pelist)))
   2413   fileObj%var(index_field)%pelist = pelist
   2414   register_restart_region_r3d = index_field
   2415 
   2416   return
   2417 end function register_restart_region_r3d

Page 100         Source Listing                  REGISTER_RESTART_REGION_R3D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                  
                                                        
 fms_io_mod_mp_register_restart_region_r3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   2411                                 scalar                    2411                              
 ANY                        Func   2386                                 scalar                    2386                              
 DATA                       Dummy  2370     R(8)            8     3     1        ARG,TGT,IN       2390,2393                         
 FIELDNAME                  Dummy  2370     CHAR                        scalar   ARG,IN           2390                              
 FILENAME                   Dummy  2370     CHAR                        scalar   ARG,IN           2390                              
 FILEOBJ                    Dummy  2370     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2390,2393,2394,2395,2396,2397,2398
                                                                                                  ,2399,2400,2401,2402,2403,2404,240
                                                                                                  5,2406,2407,2408,2409,2410,2411,24
                                                                                                  12,2413                           
 GLOBAL_SIZE                Dummy  2370     I(4)            4     1     1        ARG,IN           2399,2400,2401                    
 INDEX_FIELD                Local  2382     I(4)            4           scalar                    2391,2393,2394,2395,2396,2397,2398
                                                                                                  ,2399,2400,2401,2403,2404,2405,240
                                                                                                  6,2407,2408,2409,2410,2411,2412,24
                                                                                                  13,2414                           
 INDICES                    Dummy  2370     I(4)            4     1     1        ARG,IN           2395,2396,2397,2398               
 ISHIFT                     Dummy  2372     I(4)            4           scalar   ARG,IN           2409                              
 IS_ROOT_PE                 Dummy  2371     L(4)            4           scalar   ARG,IN           2386,2402                         
 JSHIFT                     Dummy  2372     I(4)            4           scalar   ARG,IN           2410                              
 LONGNAME                   Dummy  2371     CHAR                        scalar   ARG,IN           2391                              
 L_POSITION                 Local  2382     I(4)            4           scalar                    2388,2389,2391                    
 MANDATORY                  Dummy  2372     L(4)            4           scalar   ARG,IN           2392                              
 PELIST                     Dummy  2371     I(4)            4     1     1        ARG,IN           2386,2412,2413                    
 POSITION                   Dummy  2371     I(4)            4           scalar   ARG,IN           2389                              
 PRESENT                    Func   2389                                 scalar                    2389,2407,2408,2409,2410          
 READ_ONLY                  Dummy  2372     L(4)            4           scalar   ARG,IN           2392                              
 REGISTER_RESTART_REGION_R3                                                                                                         
 D                          Func   2370     I(4)            4           scalar   PRIV             2414                              
 SIZE                       Func   2390                                 scalar                    2390,2412                         
 UNITS                      Dummy  2371     CHAR                        scalar   ARG,IN           2391                              
 X_HALO                     Dummy  2372     I(4)            4           scalar   ARG,IN           2407                              
 Y_HALO                     Dummy  2372     I(4)            4           scalar   ARG,IN           2408                              

Page 101         Source Listing                  REGISTER_RESTART_REGION_R3D
2021-06-01 08:54                                 fms_io.F90

   2418 
   2419 !-------------------------------------------------------------------------------
   2420 !
   2421 !  saves all registered variables to restart files. Those variables are set
   2422 !  through register_restart_field
   2423 !
   2424 !-------------------------------------------------------------------------------
   2425 subroutine save_restart(fileObj, time_stamp, directory, append, time_level)
   2426   type(restart_file_type), intent(inout) :: fileObj
   2427   character(len=*), intent(in), optional :: directory
   2428   character(len=*), intent(in), optional :: time_stamp
   2429 ! Arguments:
   2430 !  (in)      directory  - The directory where the restart file goes.
   2431 !  (in)      time_stamp - character format of the time of this restart file.
   2432   logical, intent(in), optional :: append
   2433   real,    intent(in), optional :: time_level
   2434   character(len=256) :: dir
   2435   character(len=80)  :: restartname          ! The restart file name (no dir).
   2436   character(len=336) :: restartpath          ! The restart file path (dir/file).
   2437   integer :: i !< For looping
   2438   logical :: has_dot !< For determining if the time_stamp has a .
   2439 ! This approach is taken rather than interface overloading in order to preserve
   2440 ! use of the register_restart_field infrastructure
   2441 
   2442   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(save_restart): " // &
   2443       "restart_file_type data must be initialized by calling register_restart_field before using it")
   2444 
   2445   dir = "RESTART"
   2446   if(present(directory)) dir = directory
   2447 
   2448   restartname = fileObj%name
   2449   if(time_stamp_restart) then
   2450      if (PRESENT(time_stamp)) then
   2451         if(len_trim(restartname)+len_trim(time_stamp) > 79) call mpp_error(FATAL, "fms_io(save_restart): " // &
   2452           "Length of restart file name + time_stamp is greater than allowed character length of 79")
   2453            has_dot = .false.
   2454            if (time_stamp(len(time_stamp):len(time_stamp)) == ".") has_dot = .true.
   2455            if (has_dot) then
   2456               restartname = trim(time_stamp)//trim(restartname)
   2457            else
   2458               restartname = trim(time_stamp)//"."//trim(restartname)
   2459            endif
   2460      endif
   2461   end if
   2462   if(len_trim(dir) > 0) then
   2463      if(len_trim(dir)+len_trim(restartname) > 335) call mpp_error(FATAL, "fms_io(save_restart): " // &
   2464        "Length of full restart path + file name is greater than allowed character length of 355")
   2465      restartpath = trim(dir)//"/"// trim(restartname)
   2466   else
   2467      restartpath = trim(restartname)
   2468   end if
   2469 
   2470   if(fileObj%is_compressed .AND. ALLOCATED(fileObj%axes)) then
   2471 ! fileObj%axes must also be allocated if the file contains compressed axes
   2472 ! But will this always be true in the future?
   2473      call save_compressed_restart(fileObj,restartpath,append,time_level)
   2474   elseif(fileObj%unlimited_axis .AND. ALLOCATED(fileObj%axes)) then

Page 102         Source Listing                  SAVE_RESTART
2021-06-01 08:54                                 fms_io.F90

   2475      call save_unlimited_axis_restart(fileObj,restartpath)
   2476   else
   2477      call save_default_restart(fileObj,restartpath)
   2478   endif
   2479 
   2480   if(print_chksum) call write_chksum(fileObj, MPP_OVERWR)
   2481 end subroutine save_restart


ENTRY POINTS

  Name                                   
                                         
 fms_io_mod_mp_save_restart_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   2470                                 scalar                    2470,2474                         
 APPEND                     Dummy  2425     L(4)            4           scalar   ARG,IN           2473                              
 ASSOCIATED                 Func   2442                                 scalar                    2442                              
 DIR                        Local  2434     CHAR            256         scalar                    2445,2446,2462,2463,2465          
 DIRECTORY                  Dummy  2425     CHAR                        scalar   ARG,IN           2446                              
 FILEOBJ                    Dummy  2425     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2442,2448,2470,2473,2474,2475,2477
                                                                                                  ,2480                             
 HAS_DOT                    Local  2438     L(4)            4           scalar                    2453,2454,2455                    
 I                          Local  2437     I(4)            4           scalar                                                      
 LEN                        Func   2454                                 scalar                    2454                              
 LEN_TRIM                   Func   2451                                 scalar                    2451,2462,2463                    
 PRESENT                    Func   2446                                 scalar                    2446,2450                         
 PRINT_CHKSUM               Local  2480     L(4)            4           scalar                    630,636,2480,3598,3762,4181       
 RESTARTNAME                Local  2435     CHAR            80          scalar                    2448,2451,2456,2458,2463,2465,2467
 RESTARTPATH                Local  2436     CHAR            336         scalar                    2465,2467,2473,2475,2477          
 SAVE_RESTART               Subr   2425                                                                                             
 TIME_LEVEL                 Dummy  2425     R(8)            8           scalar   ARG,IN           2473                              
 TIME_STAMP                 Dummy  2425     CHAR                        scalar   ARG,IN           2450,2451,2454,2456,2458          
 TIME_STAMP_RESTART         Local  2449     L(4)            4           scalar                    629,636,2449,3366,10911           
 TRIM                       Func   2456                                 scalar                    2456,2458,2465,2467               

Page 103         Source Listing                  SAVE_RESTART
2021-06-01 08:54                                 fms_io.F90

   2482 
   2483 !---- return true if all fields in fileObj is read only
   2484 function all_field_read_only(fileObj)
   2485   type(restart_file_type), intent(in) :: fileObj
   2486   logical                             :: all_field_read_only
   2487   integer :: j
   2488 
   2489   all_field_read_only = .TRUE.
   2490   do j = 1, fileObj%nvar
   2491      if( .not. fileObj%var(j)%read_only) then
   2492         all_field_read_only = .FALSE.
   2493         exit
   2494      endif
   2495   enddo
   2496 
   2497   return
   2498 
   2499 end function all_field_read_only


ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_all_field_read_only_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALL_FIELD_READ_ONLY        Func   2484     L(4)            4           scalar                    2489,2492,2553,2968,3356,10776    
 FILEOBJ                    Dummy  2484     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,IN           2490,2491                         
 J                          Local  2487     I(4)            4           scalar                    2490,2491                         

Page 104         Source Listing                  ALL_FIELD_READ_ONLY
2021-06-01 08:54                                 fms_io.F90

   2500 
   2501 !-------------------------------------------------------------------------------
   2502 !
   2503 !  saves all registered variables to restart files. Those variables are set
   2504 !  through register_restart_field
   2505 !
   2506 !-------------------------------------------------------------------------------
   2507 
   2508 subroutine save_compressed_restart(fileObj,restartpath,append,time_level)
   2509   type(restart_file_type), intent(inout),target :: fileObj
   2510   character(len=336)                     :: restartpath ! The restart file path (dir/file).
   2511 
   2512 ! Optional arguments:
   2513 
   2514 ! If neither append or time_level is present:
   2515 !   routine writes both meta data and field data.
   2516 
   2517 ! If append is present and append=.true.:
   2518 !   Only field data is written.
   2519 !   The field data is appended to a new time level.
   2520 !   time_level must also be present and it must be >= 0.0
   2521 !   The value of time_level is written as a new value of the time axis data.
   2522 
   2523 ! If time_level is present and time_level < 0.0:
   2524 !   A new file is opened and only the meta data is written.
   2525 
   2526 ! If append is present and append=.false.:
   2527 !   Behaves the same was as if it were not present. That is, meta data is
   2528 !   written and whether or not field data is written is determined by time_level.
   2529 
   2530   logical, intent(in), optional :: append
   2531   real,    intent(in), optional :: time_level
   2532 
   2533   integer            :: unit                 ! The mpp unit of the open file.
   2534   type(axistype)                      :: x_axis, y_axis, z_axis, CC_axis, other_axis
   2535   type(axistype)                      :: t_axis, c_axis, h_axis  ! time & sparse compressed vector axes
   2536   type(axistype)                      :: comp_axis
   2537   logical                             :: naxis_z=.false.
   2538   type(axistype), dimension(4)        :: var_axes
   2539   type(var_type), pointer, save       :: cur_var=>NULL()
   2540   integer                             :: i, j, k, l, num_var_axes, cpack, idx, mpp_action
   2541   real                                :: tlev
   2542   real, allocatable, dimension(:,:)   :: r2d
   2543   real, allocatable, dimension(:)     :: r1d
   2544   real                                :: r0d
   2545   integer(8), allocatable, dimension(:)    :: check_val
   2546   character(len=256)                  :: checksum_char
   2547   logical                             :: domain_present, write_meta_data, write_field_data
   2548   logical                             :: c_axis_defined, h_axis_defined, CC_axis_defined
   2549   type(domain2d), pointer :: domain =>NULL()
   2550   type(ax_type),  pointer :: axis   =>NULL()
   2551 
   2552 !-- no need to proceed if all the variables are read only.
   2553   if( all_field_read_only(fileObj) ) return
   2554 
   2555   if (.not.ALLOCATED(fileObj%axes(CIDX)%idx) .and. .not.ALLOCATED(fileObj%axes(HIDX)%idx) ) then
   2556      call mpp_error(FATAL, "fms_io(save_compressed_restart): A compressed axis has "// &

Page 105         Source Listing                  SAVE_COMPRESSED_RESTART
2021-06-01 08:54                                 fms_io.F90

   2557           "not been defined for file "//trim(fileObj%name))
   2558   else if (ALLOCATED(fileObj%axes(CIDX)%idx)) then
   2559      domain =>fileObj%axes(CIDX)%domain
   2560   else
   2561      domain =>fileObj%axes(HIDX)%domain
   2562   endif
   2563 
   2564   if(present(append)) then
   2565     if(append .and. .not.present(time_level)) then
   2566       call mpp_error(FATAL, 'fms_io(save_compressed_restart): time_level must be present when append=.true.'// &
   2567                     ' for file '//trim(fileObj%name))
   2568     endif
   2569   endif
   2570 
   2571   mpp_action = MPP_OVERWR
   2572   write_meta_data  = .true.
   2573   if(present(append)) then
   2574     if(append) then
   2575       mpp_action = MPP_APPEND
   2576       write_meta_data = .false. ! Assuming meta data is already written when routine is called to append to field data.
   2577       if(time_level < 0.0) then
   2578         call mpp_error(FATAL, 'fms_io(save_compressed_restart): time_level cannot be negative when append is .true.'// &
   2579                       ' for file '//trim(fileObj%name))
   2580       endif
   2581     endif
   2582   endif
   2583 
   2584   write_field_data = .true.
   2585   if(present(time_level)) then
   2586     write_field_data = time_level >= 0.0 ! Using negative value of time_level as a flag that there is no valid field data to
   2586  write.
   2587   endif
   2588 
   2589   call mpp_open(unit,trim(restartpath),action=mpp_action,form=form, &
   2590           is_root_pe=fileObj%is_root_pe, domain=domain)
   2591 
   2592   if(write_meta_data) then
   2593 ! User has defined axes and these are assumed to be unique
   2594 ! Unfortunately it has proven difficult to write a generalized form because
   2595 ! of the variations possible across all of the axes
   2596 ! Currently support only 1 user defined axis of each type
   2597 ! In fact, this config is specifically designed to support the land model
   2598 ! sparse, compressed tile data
   2599     axis => fileobj%axes(XIDX)
   2600     if(.not. ASSOCIATED(axis)) call mpp_error(FATAL, "fms_io(save_compressed_restart): "// &
   2601                 " The X axis has not been defined for "// &
   2602                 " file "//trim(fileObj%name) )
   2603     call mpp_write_meta(unit,x_axis,axis%name,axis%units,axis%longname,data=axis%data,cartesian='X')
   2604 
   2605     axis => fileobj%axes(YIDX)
   2606     if(.not. ASSOCIATED(axis)) call mpp_error(FATAL, "fms_io(save_compressed_restart): "// &
   2607                 " The Y axis has not been defined for "// &
   2608                 " file "//trim(fileObj%name) )
   2609     call mpp_write_meta(unit,y_axis,axis%name,axis%units,axis%longname,data=axis%data,cartesian='Y')
   2610 
   2611     axis => fileobj%axes(ZIDX)
   2612     naxis_z = .false.

Page 106         Source Listing                  SAVE_COMPRESSED_RESTART
2021-06-01 08:54                                 fms_io.F90

   2613     if(ASSOCIATED(axis%data))then
   2614        call mpp_write_meta(unit,z_axis,axis%name,axis%units,axis%longname, &
   2615             data=axis%data,cartesian='Z')
   2616        naxis_z = .true.
   2617     endif
   2618 
   2619     axis => fileobj%axes(CCIDX)
   2620     if(ASSOCIATED(axis%data))then
   2621        call mpp_write_meta(unit,CC_axis,axis%name,axis%units,axis%longname,data=axis%data,cartesian='CC')
   2622        CC_axis_defined = .TRUE.
   2623     else
   2624        CC_axis_defined = .FALSE.
   2625     endif
   2626 
   2627 ! The compressed axis
   2628     axis => fileObj%axes(CIDX)
   2629     if(ALLOCATED(axis%idx)) then
   2630        call mpp_def_dim(unit,trim(axis%dimlen_name),axis%dimlen,trim(axis%dimlen_lname), (/(i,i=1,axis%dimlen)/))
   2631        call mpp_write_meta(unit,c_axis,axis%name,axis%units,axis%longname, &
   2632                            data=axis%idx,compressed=axis%compressed,min=axis%imin)
   2633        c_axis_defined = .TRUE.
   2634     else
   2635        c_axis_defined = .FALSE.
   2636     endif
   2637 
   2638     axis => fileObj%axes(HIDX)
   2639     if (ALLOCATED(axis%idx)) then
   2640        call mpp_def_dim(unit,trim(axis%dimlen_name),axis%dimlen,trim(axis%dimlen_lname), (/(i,i=1,axis%dimlen)/))
   2641        call mpp_write_meta(unit,h_axis,axis%name,axis%units,axis%longname, &
   2642                          data=axis%idx,compressed=axis%compressed,min=axis%imin)
   2643        h_axis_defined = .TRUE.
   2644     else
   2645        h_axis_defined = .FALSE.
   2646     endif
   2647 
   2648 ! write out time axis
   2649     axis => fileobj%axes(TIDX)
   2650     if(ASSOCIATED(axis%data))then
   2651        call mpp_write_meta(unit,t_axis, axis%name, units=axis%units, longname=axis%longname, cartesian='T', calendar=axis%ca
   2651 lendar)
   2652     else
   2653        call mpp_write_meta(unit,t_axis, 'Time','time level','Time',cartesian='T')
   2654     endif
   2655 
   2656 ! write metadata for fields
   2657     do j = 1,fileObj%nvar
   2658        cur_var => fileObj%var(j)
   2659        if(cur_var%read_only) cycle
   2660        if(cur_var%siz(4) > 1 .AND. cur_var%siz(4) .NE. fileObj%max_ntime ) call mpp_error(FATAL, &
   2661         "fms_io(save_restart): "//trim(cur_var%name)//" in file "//trim(fileObj%name)// &
   2662         " has more than one time level, but number of time level is not equal to max_ntime")
   2663 
   2664        select case (trim(cur_var%compressed_axis))
   2665        case ('C')
   2666           comp_axis = c_axis
   2667           other_axis = z_axis
   2668        case ('C_CC')

Page 107         Source Listing                  SAVE_COMPRESSED_RESTART
2021-06-01 08:54                                 fms_io.F90

   2669           comp_axis = c_axis
   2670           other_axis = CC_axis
   2671        case ('H')
   2672           comp_axis = h_axis
   2673        case default
   2674           if (ALLOCATED(fileObj%axes(CIDX)%idx)) then
   2675              comp_axis = c_axis
   2676              other_axis = z_axis
   2677           else
   2678              comp_axis = h_axis
   2679           endif
   2680        end select
   2681 
   2682        if(cur_var%ndim == 0) then
   2683           num_var_axes = 1
   2684           var_axes(1) = t_axis
   2685        elseif(cur_var%ndim == 1) then
   2686           num_var_axes = 1
   2687           var_axes(1) = comp_axis
   2688           if(cur_var%siz(4) == fileObj%max_ntime) then
   2689              num_var_axes = 2
   2690              var_axes(2) = t_axis
   2691           endif
   2692        elseif(cur_var%ndim == 2) then
   2693           num_var_axes = 2
   2694           var_axes(1) = comp_axis
   2695           var_axes(2) = other_axis
   2696           if(cur_var%siz(4) == fileObj%max_ntime) then
   2697              num_var_axes = 3
   2698              var_axes(3) = t_axis
   2699           endif
   2700        elseif(cur_var%ndim == 3) then
   2701           num_var_axes = 3
   2702           var_axes(1) = comp_axis
   2703           var_axes(2) = z_axis
   2704           var_axes(3) = CC_axis
   2705           if(cur_var%siz(4) == fileObj%max_ntime) then
   2706              num_var_axes = 4
   2707              var_axes(4) = t_axis
   2708           endif
   2709        else
   2710         call mpp_error(FATAL, "fms_io(save_compressed_restart): "//trim(cur_var%name)//" in file "// &
   2711            trim(fileObj%name)//" has more than three dimensions (not including time level)")
   2712        endif
   2713 
   2714        cpack = pack_size  ! Default size of real
   2715         allocate(check_val(max(1,cur_var%siz(4))))
   2716         do k = 1, cur_var%siz(4)
   2717            if ( Associated(fileObj%p0dr(k,j)%p) ) then
   2718               check_val(k) = mpp_chksum(fileObj%p0dr(k,j)%p, (/mpp_pe()/), mask_val=cur_var%default_data)
   2719            else if ( Associated(fileObj%p1dr(k,j)%p) ) then
   2720               check_val(k) = mpp_chksum(fileObj%p1dr(k,j)%p(:), mask_val=cur_var%default_data)
   2721            else if ( Associated(fileObj%p2dr(k,j)%p) ) then
   2722               check_val(k) = mpp_chksum(fileObj%p2dr(k,j)%p(:,:), mask_val=cur_var%default_data)
   2723            else if ( Associated(fileObj%p3dr(k,j)%p) ) then
   2724               check_val(k) = mpp_chksum(fileObj%p3dr(k,j)%p(:,:,:))
   2725            else if ( Associated(fileObj%p0di(k,j)%p) ) then

Page 108         Source Listing                  SAVE_COMPRESSED_RESTART
2021-06-01 08:54                                 fms_io.F90

   2726               check_val(k) = fileObj%p0di(k,j)%p
   2727               cpack = 0  ! Write data as integer*4
   2728            else if ( Associated(fileObj%p1di(k,j)%p) ) then
   2729               check_val(k) = mpp_chksum(fileObj%p1di(k,j)%p(:), mask_val=cur_var%default_data)
   2730               cpack = 0  ! Write data as integer*4
   2731            else if ( Associated(fileObj%p2di(k,j)%p) ) then
   2732               check_val(k) = mpp_chksum(fileObj%p2di(k,j)%p(:,:), mask_val=cur_var%default_data)
   2733               cpack = 0  ! Write data as integer*4
   2734            else if ( Associated(fileObj%p3di(k,j)%p) ) then
   2735               call mpp_error(FATAL, "fms_io(save_compressed_restart): integer 3D restart fields are not currently supported"
   2735 // &
   2736                    trim(cur_var%name)//" of file "//trim(fileObj%name) )
   2737            else
   2738               call mpp_error(FATAL, "fms_io(save_restart): There is no pointer associated with the data of field "// &
   2739                    trim(cur_var%name)//" of file "//trim(fileObj%name) )
   2740            end if
   2741         enddo
   2742 ! The chksum could not reproduce when running on different processor count. So commenting out now.
   2743 ! Also the chksum of compressed data is not read.
   2744        if(write_field_data) then ! Write checksums only if valid field data exists
   2745           call mpp_write_meta(unit,cur_var%field, var_axes(1:num_var_axes), cur_var%name, &
   2746                 cur_var%units,cur_var%longname,pack=cpack,checksum=check_val,fill=cur_var%default_data)
   2747        else
   2748           call mpp_write_meta(unit,cur_var%field, var_axes(1:num_var_axes), cur_var%name, &
   2749                  cur_var%units,cur_var%longname,pack=cpack,fill=cur_var%default_data)
   2750        endif
   2751         deallocate(check_val)
   2752     enddo
   2753 
   2754 ! write values for ndim of spatial and compressed axes
   2755     call mpp_write(unit,x_axis)
   2756     call mpp_write(unit,y_axis)
   2757     if (c_axis_defined) call mpp_write(unit,c_axis)
   2758     if (h_axis_defined) call mpp_write(unit,h_axis)
   2759     if (CC_axis_defined) call mpp_write(unit,CC_axis)
   2760     if(naxis_z) call mpp_write(unit,z_axis)
   2761 
   2762   endif ! End of section to write meta data. Write meta data only if not appending.
   2763 
   2764   if(write_field_data) then
   2765 ! write data of each field
   2766     do k = 1, fileObj%max_ntime
   2767        if(present(time_level)) then
   2768           tlev = time_level
   2769        else
   2770           tlev = k
   2771        endif
   2772        do j=1,fileObj%nvar
   2773           cur_var => fileObj%var(j)
   2774           if(cur_var%read_only) cycle
   2775 
   2776           select case (trim(cur_var%compressed_axis))
   2777           case ('C')
   2778              idx = CIDX
   2779           case ('H')
   2780              idx = HIDX
   2781           case default

Page 109         Source Listing                  SAVE_COMPRESSED_RESTART
2021-06-01 08:54                                 fms_io.F90

   2782              if (ALLOCATED(fileObj%axes(CIDX)%idx)) then
   2783                 idx = CIDX
   2784              else
   2785                 idx = HIDX
   2786              endif
   2787           end select
   2788 
   2789 ! If some fields only have one time level, we do not need to write the second level, just keep
   2790 ! the data missing.
   2791           if(k <= cur_var%siz(4)) then
   2792              if ( Associated(fileObj%p0dr(k,j)%p) ) then
   2793                 call mpp_write(unit, cur_var%field, fileObj%p0dr(k,j)%p, tlev)
   2794              elseif ( Associated(fileObj%p1dr(k,j)%p) ) then
   2795                 call mpp_write_compressed(unit, cur_var%field, domain, fileObj%p1dr(k,j)%p, &
   2796                      fileObj%axes(idx)%nelems(:), tstamp=tlev, default_data=cur_var%default_data)
   2797              elseif ( Associated(fileObj%p2dr(k,j)%p) ) then
   2798                 call mpp_write_compressed(unit, cur_var%field, domain, fileObj%p2dr(k,j)%p, &
   2799                      fileObj%axes(idx)%nelems(:), tstamp=tlev, default_data=cur_var%default_data)
   2800              elseif ( Associated(fileObj%p3dr(k,j)%p) ) then
   2801                 call mpp_write_compressed(unit, cur_var%field, domain, fileObj%p3dr(k,j)%p, &
   2802                      fileObj%axes(idx)%nelems(:), tstamp=tlev, default_data=cur_var%default_data)
   2803              elseif ( Associated(fileObj%p0di(k,j)%p) ) then
   2804                 r0d =  fileObj%p0di(k,j)%p
   2805                 call mpp_write(unit, cur_var%field, r0d, tlev)
   2806              elseif ( Associated(fileObj%p1di(k,j)%p) ) then
   2807                 allocate(r1d(cur_var%siz(1)) )
   2808                 r1d = fileObj%p1di(k,j)%p
   2809                 call mpp_write_compressed(unit, cur_var%field, domain, r1d, &
   2810                      fileObj%axes(idx)%nelems(:), tstamp=tlev, default_data=cur_var%default_data)
   2811                 deallocate(r1d)
   2812              elseif ( Associated(fileObj%p2di(k,j)%p) ) then
   2813                 allocate(r2d(cur_var%siz(1), cur_var%siz(2)) )
   2814                 r2d = fileObj%p2di(k,j)%p
   2815                 call mpp_write_compressed(unit, cur_var%field, domain, r2d, &
   2816                      fileObj%axes(idx)%nelems(:), tstamp=tlev, default_data=cur_var%default_data)
   2817                 deallocate(r2d)
   2818              else
   2819                 call mpp_error(FATAL, "fms_io(save_restart): There is no pointer associated with the data of field "// &
   2820                        trim(cur_var%name)//" of file "//trim(fileObj%name) )
   2821              endif
   2822           endif
   2823        enddo ! end j loop
   2824     enddo ! end k loop
   2825     cur_var =>NULL()
   2826   endif
   2827   call mpp_close(unit)
   2828 end subroutine save_compressed_restart

Page 110         Source Listing                  SAVE_COMPRESSED_RESTART
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_save_compressed_restart_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   2555                                 scalar                    2555,2558,2629,2639,2674,2782     
 APPEND                     Dummy  2508     L(4)            4           scalar   ARG,IN           2564,2565,2573,2574               
 ASSOCIATED                 Func   2600                                 scalar                    2600,2606,2613,2620,2650,2717,2719
                                                                                                  ,2721,2723,2725,2728,2731,2734,279
                                                                                                  2,2794,2797,2800,2803,2806,2812   
 AXIS                       Local  2550     AX_TYPE         1296        scalar   PTR              2550,2599,2600,2603,2605,2606,2609
                                                                                                  ,2611,2613,2614,2615,2619,2620,262
                                                                                                  1,2628,2629,2630,2631,2632,2638,26
                                                                                                  39,2640,2641,2642,2649,2650,2651  
 AX_TYPE                    Type   2550                     1296        scalar   PRIV             309,404,2550,2850,10739           
 CC_AXIS                    Local  2534     AXISTYPE        1424        scalar                    2621,2670,2704,2759               
 CC_AXIS_DEFINED            Local  2548     L(4)            4           scalar                    2622,2624,2759                    
 CHECKSUM_CHAR              Local  2546     CHAR            256         scalar                                                      
 CHECK_VAL                  Local  2545     I(8)            8     1     1        ALC              2715,2718,2720,2722,2724,2726,2729
                                                                                                  ,2732,2746,2751                   
 COMP_AXIS                  Local  2536     AXISTYPE        1424        scalar                    2666,2669,2672,2675,2678,2687,2694
                                                                                                  ,2702                             
 CPACK                      Local  2540     I(4)            4           scalar                    2714,2727,2730,2733,2746,2749     
 CUR_VAR                    Local  2539     VAR_TYPE        3328        scalar   PTR,SAVE         2539,2658,2659,2660,2661,2664,2682
                                                                                                  ,2685,2688,2692,2696,2700,2705,271
                                                                                                  0,2715,2716,2718,2720,2722,2729,27
                                                                                                  32,2736,2739,2745,2746,2748,2749,2
                                                                                                  773,2774,2776,2791,2793,2795,2796,
                                                                                                  2798,2799,2801,2802,2805,2807,2809
                                                                                                  ,2810,2813,2815,2816,2820,2825    
 C_AXIS                     Local  2535     AXISTYPE        1424        scalar                    2631,2666,2669,2675,2757          
 C_AXIS_DEFINED             Local  2548     L(4)            4           scalar                    2633,2635,2757                    
 DOMAIN                     Local  2549     DOMAIN2D        752         scalar   PTR              2549,2559,2561,2590,2795,2798,2801
                                                                                                  ,2809,2815                        
 DOMAIN_PRESENT             Local  2547     L(4)            4           scalar                                                      
 FILEOBJ                    Dummy  2508     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,TGT,INOUT    2553,2555,2557,2558,2559,2561,2567
                                                                                                  ,2579,2590,2599,2602,2605,2608,261
                                                                                                  1,2619,2628,2638,2649,2657,2658,26
                                                                                                  60,2661,2674,2688,2696,2705,2711,2
                                                                                                  717,2718,2719,2720,2721,2722,2723,
                                                                                                  2724,2725,2726,2728,2729,2731,2732
                                                                                                  ,2734,2736,2739,2766,2772,2773,278
                                                                                                  2,2792,2793,2794,2795,2796,2797,27
                                                                                                  98,2799,2800,2801,2802,2803,2804,2
                                                                                                  806,2808,2810,2812,2814,2816,2820 
 H_AXIS                     Local  2535     AXISTYPE        1424        scalar                    2641,2672,2678,2758               
 H_AXIS_DEFINED             Local  2548     L(4)            4           scalar                    2643,2645,2758                    
 I                          Local  2540     I(4)            4           scalar                                                      

Page 111         Source Listing                  SAVE_COMPRESSED_RESTART
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 IDX                        Local  2540     I(4)            4           scalar                    2778,2780,2783,2785,2796,2799,2802
                                                                                                  ,2810,2816                        
 J                          Local  2540     I(4)            4           scalar                    2657,2658,2717,2718,2719,2720,2721
                                                                                                  ,2722,2723,2724,2725,2726,2728,272
                                                                                                  9,2731,2732,2734,2772,2773,2792,27
                                                                                                  93,2794,2795,2797,2798,2800,2801,2
                                                                                                  803,2804,2806,2808,2812,2814      
 K                          Local  2540     I(4)            4           scalar                    2716,2717,2718,2719,2720,2721,2722
                                                                                                  ,2723,2724,2725,2726,2728,2729,273
                                                                                                  1,2732,2734,2766,2770,2791,2792,27
                                                                                                  93,2794,2795,2797,2798,2800,2801,2
                                                                                                  803,2804,2806,2808,2812,2814      
 L                          Local  2540     I(4)            4           scalar                                                      
 MAX                        Func   2715                                 scalar                    2715                              
 MPP_ACTION                 Local  2540     I(4)            4           scalar                    2571,2575,2589                    
 MPP_APPEND                 Param  2575     I(4)            4           scalar   PRIV             208,2575,7819,10879               
 MPP_CHKSUM                 Local  2718                                 scalar   PRIV             219,2718,2720,2722,2724,2729,2732,
                                                                                                  2884,2887,3179,3181,3183,3185,3188
                                                                                                  ,3191,3193,3197,3199,3201,3514,352
                                                                                                  3,3717,3727,3818,3820,3822,3824,38
                                                                                                  26,3830,3832,3834,4046,4049,4053,4
                                                                                                  057,4061,4065,4069,4078,4086,4094,
                                                                                                  4103,4106,4110,4114,4118,4127,4135
                                                                                                  ,4143,4372,4375,4379,4383,4387,439
                                                                                                  6,4404,4412,4421,4424,4428,4432,44
                                                                                                  36,4453,4461,11147,11151,11154,111
                                                                                                  57,11163,11167                    
 MPP_CHKSUM_I4_1D_RMASK     Func   2729     I(8)            8           scalar   PRIV             2729,11163                        
 MPP_CHKSUM_I4_2D_RMASK     Func   2732     I(8)            8           scalar   PRIV             2732,11167                        
 MPP_CHKSUM_R8_0D           Func   2718     I(8)            8           scalar   PRIV             2718,3179,3818,4046,4103,4372,4421
                                                                                                  ,11147                            
 MPP_CHKSUM_R8_1D           Func   2720     I(8)            8           scalar   PRIV             2720,2884,3181,3820,4049,4106,4375
                                                                                                  ,4424,11151                       
 MPP_CHKSUM_R8_2D           Func   2722     I(8)            8           scalar   PRIV             2722,3183,3188,3514,3717,3822,4053
                                                                                                  ,4061,4110,4379,4428,11154        
 MPP_CHKSUM_R8_3D           Func   2724     I(8)            8           scalar   PRIV             2724,3185,3191,3523,3727,3824,4057
                                                                                                  ,4065,4114,4383,4432,11157        
 MPP_DEF_DIM                Local  2630                                 scalar   PRIV             202,2630,2640,11016,11039         
 MPP_DEF_DIM_INT            Subr   2630                                          PRIV             2630,2640,11016,11039             
 MPP_WRITE_COMPRESSED       Local  2795                                 scalar   PRIV             202,2795,2798,2801,2809,2815      
 MPP_WRITE_COMPRESSED_R1D_R                                                                                                         
 8                          Subr   2795                                          PRIV             2795,2809                         
 MPP_WRITE_COMPRESSED_R2D_R                                                                                                         
 8                          Subr   2798                                          PRIV             2798,2815                         
 MPP_WRITE_COMPRESSED_R3D_R                                                                                                         
 8                          Subr   2801                                          PRIV             2801                              
 MPP_WRITE_META_AXIS_I1D    Subr   2631                                          PRIV             2631,2641,11021,11044             
 MPP_WRITE_R0D_R8           Subr   2793                                          PRIV             2793,2805,3272,3287,11268,11298   
 NAXIS_Z                    Local  2537     L(4)            4           scalar                    2537,2612,2616,2760               
 NUM_VAR_AXES               Local  2540     I(4)            4           scalar                    2683,2686,2689,2693,2697,2701,2706
                                                                                                  ,2745,2748                        
 OTHER_AXIS                 Local  2534     AXISTYPE        1424        scalar                    2667,2670,2676,2695               
 PRESENT                    Func   2564                                 scalar                    2564,2565,2573,2585,2767          
 R0D                        Local  2544     R(8)            8           scalar                    2804,2805                         
 R1D                        Local  2543     R(8)            8     1     1        ALC              2807,2808,2809,2811               

Page 112         Source Listing                  SAVE_COMPRESSED_RESTART
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 R2D                        Local  2542     R(8)            8     2     1        ALC              2813,2814,2815,2817               
 RESTARTPATH                Dummy  2508     CHAR            336         scalar   ARG,INOUT        2589                              
 SAVE_COMPRESSED_RESTART    Subr   2508                                                           2473                              
 TIME_LEVEL                 Dummy  2508     R(8)            8           scalar   ARG,IN           2565,2577,2585,2586,2767,2768     
 TLEV                       Local  2541     R(8)            8           scalar                    2768,2770,2793,2796,2799,2802,2805
                                                                                                  ,2810,2816                        
 TRIM                       Func   2557                                 scalar                    2557,2567,2579,2589,2602,2608,2630
                                                                                                  ,2640,2661,2664,2710,2711,2736,273
                                                                                                  9,2776,2820                       
 T_AXIS                     Local  2535     AXISTYPE        1424        scalar                    2651,2653,2684,2690,2698,2707     
 UNIT                       Local  2533     I(4)            4           scalar                    2589,2603,2609,2614,2621,2630,2631
                                                                                                  ,2640,2641,2651,2653,2745,2748,275
                                                                                                  5,2756,2757,2758,2759,2760,2793,27
                                                                                                  95,2798,2801,2805,2809,2815,2827  
 VAR_AXES                   Local  2538     RECORD          1424  1     4        TGT              2684,2687,2690,2694,2695,2698,2702
                                                                                                  ,2703,2704,2707,2745,2748         
 WRITE_FIELD_DATA           Local  2547     L(4)            4           scalar                    2584,2586,2744,2764               
 WRITE_META_DATA            Local  2547     L(4)            4           scalar                    2572,2576,2592                    
 X_AXIS                     Local  2534     AXISTYPE        1424        scalar                    2603,2755                         
 Y_AXIS                     Local  2534     AXISTYPE        1424        scalar                    2609,2756                         
 Z_AXIS                     Local  2534     AXISTYPE        1424        scalar                    2614,2667,2676,2703,2760          


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 VAR_TYPE.COMPRESSED_AXIS   CHAR            8     3168           scalar   PRIV             2664,2776,4637,4689,9569           
 VAR_TYPE.LONGNAME          CHAR            128   128            scalar   PRIV             2746,2749,2895,3208,3532,4633,4683 
                                                                                           ,4685,9550,9676,9678,11195,11205   
 VAR_TYPE.UNITS             CHAR            128   256            scalar   PRIV             2746,2749,2895,3208,3532,4634,4687 
                                                                                           ,9551,9681,11194,11204             

Page 113         Source Listing                  SAVE_COMPRESSED_RESTART
2021-06-01 08:54                                 fms_io.F90

   2829 
   2830 !-------------------------------------------------------------------------------
   2831 !
   2832 !  saves all registered variables to restart files. Those variables are set
   2833 !  through register_restart_field
   2834 !
   2835 !-------------------------------------------------------------------------------
   2836 
   2837 subroutine save_unlimited_axis_restart(fileObj,restartpath)
   2838   type(restart_file_type), intent(inout),target :: fileObj
   2839   character(len=336)                     :: restartpath ! The restart file path (dir/file).
   2840 
   2841   integer            :: unit                 ! The mpp unit of the open file.
   2842   type(axistype)                      :: u_axis
   2843   type(axistype), dimension(4)        :: var_axes
   2844   type(var_type), pointer, save       :: cur_var=>NULL()
   2845   integer                             :: i, j, k, l, num_var_axes, cpack, idx
   2846   real, allocatable, dimension(:)     :: r1d
   2847   integer(8)                  :: check_val
   2848   character(len=256)                  :: checksum_char
   2849   type(domain2d), pointer :: domain =>NULL()
   2850   type(ax_type),  pointer :: axis   =>NULL()
   2851 
   2852 
   2853   if ( .NOT.fileObj%unlimited_axis ) then
   2854      call mpp_error(FATAL, "fms_io(save_unlimited_axis_restart): An unlimited axis has "// &
   2855           "not been defined for file "//trim(fileObj%name))
   2856   endif
   2857   domain =>fileObj%axes(UIDX)%domain
   2858 
   2859   call mpp_open(unit,trim(restartpath),action=MPP_OVERWR,form=form, &
   2860                 is_root_pe=fileObj%is_root_pe, domain=domain)
   2861 
   2862 ! Set unlimited axis
   2863   axis => fileobj%axes(UIDX)
   2864   call mpp_write_meta(unit,u_axis,axis%name,data=sum(axis%nelems(:)),unlimited=.true.)
   2865   call write_meta_global(unit,fileObj)  ! Write any additional global metadata
   2866   call mpp_write(unit,u_axis)
   2867 
   2868 ! write metadata for fields
   2869   do j = 1,fileObj%nvar
   2870      cur_var => fileObj%var(j)
   2871      if(cur_var%siz(4) > 1) call mpp_error(FATAL, &
   2872       "fms_io(save_restart): "//trim(cur_var%name)//" in file "//trim(fileObj%name)// &
   2873       " has more than one time level. Only single time level is currrently supported")
   2874 
   2875      if(cur_var%ndim == 1) then
   2876         num_var_axes = 1
   2877         var_axes(1) = u_axis
   2878         else
   2879         call mpp_error(FATAL, 'fms_io(save_unlimited_axis_restart): Only vectors are currently supported')
   2880      endif
   2881 
   2882      cpack = pack_size  ! Default size of real
   2883      if ( Associated(fileObj%p1dr(1,j)%p) ) then
   2884         check_val = mpp_chksum(fileObj%p1dr(1,j)%p(:))
   2885      else if ( Associated(fileObj%p1di(1,j)%p) ) then

Page 114         Source Listing                  SAVE_UNLIMITED_AXIS_RESTART
2021-06-01 08:54                                 fms_io.F90

   2886 ! Fill values are -HUGE(i4) which don't behave as desired for checksum algorithm
   2887         check_val = mpp_chksum(INT(fileObj%p1di(1,j)%p(:),8))
   2888            cpack = 0  ! Write data as integer*4
   2889         else
   2890         call mpp_error(FATAL, "fms_io(save_unlimited_axis_restart):"//&
   2891             " There is no pointer associated with the record data of field "//&
   2892                 trim(cur_var%name)//" of file "//trim(fileObj%name) )
   2893         end if
   2894      call mpp_write_meta(unit,cur_var%field, var_axes(1:num_var_axes), cur_var%name, &
   2895               cur_var%units,cur_var%longname,pack=cpack,checksum=(/check_val/))
   2896   enddo ! end j loop
   2897 
   2898 ! write data of each field
   2899      do j=1,fileObj%nvar
   2900         cur_var => fileObj%var(j)
   2901      if ( Associated(fileObj%p1dr(1,j)%p) ) then
   2902         call mpp_write_unlimited_axis(unit,cur_var%field,domain,fileObj%p1dr(1,j)%p,fileObj%axes(UIDX)%nelems(:))
   2903      elseif ( Associated(fileObj%p1di(1,j)%p) ) then
   2904               allocate(r1d(cur_var%siz(1)) )
   2905         r1d = fileObj%p1di(1,j)%p
   2906         call mpp_write_unlimited_axis(unit,cur_var%field,domain,r1d,fileObj%axes(UIDX)%nelems(:))
   2907               deallocate(r1d)
   2908            else
   2909               call mpp_error(FATAL, "fms_io(save_restart): There is no pointer associated with the data of field "// &
   2910                      trim(cur_var%name)//" of file "//trim(fileObj%name) )
   2911            endif
   2912      enddo ! end j loop
   2913   call mpp_close(unit)
   2914   cur_var =>NULL()
   2915 end subroutine save_unlimited_axis_restart

Page 115         Source Listing                  SAVE_UNLIMITED_AXIS_RESTART
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                  
                                                        
 fms_io_mod_mp_save_unlimited_axis_restart_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   2883                                 scalar                    2883,2885,2901,2903               
 AXIS                       Local  2850     AX_TYPE         1296        scalar   PTR              2850,2863,2864                    
 CHECKSUM_CHAR              Local  2848     CHAR            256         scalar                                                      
 CHECK_VAL                  Local  2847     I(8)            8           scalar                    2884,2887,2895                    
 CPACK                      Local  2845     I(4)            4           scalar                    2882,2888,2895                    
 CUR_VAR                    Local  2844     VAR_TYPE        3328        scalar   PTR,SAVE         2844,2870,2871,2872,2875,2892,2894
                                                                                                  ,2895,2900,2902,2904,2906,2910,291
                                                                                                  4                                 
 DOMAIN                     Local  2849     DOMAIN2D        752         scalar   PTR              2849,2857,2860,2902,2906          
 FILEOBJ                    Dummy  2837     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,TGT,INOUT    2853,2855,2857,2860,2863,2865,2869
                                                                                                  ,2870,2872,2883,2884,2885,2887,289
                                                                                                  2,2899,2900,2901,2902,2903,2905,29
                                                                                                  06,2910                           
 I                          Local  2845     I(4)            4           scalar                                                      
 IDX                        Local  2845     I(4)            4           scalar                                                      
 INT                        Func   2887                                 scalar                    2887                              
 J                          Local  2845     I(4)            4           scalar                    2869,2870,2883,2884,2885,2887,2899
                                                                                                  ,2900,2901,2902,2903,2905         
 K                          Local  2845     I(4)            4           scalar                                                      
 L                          Local  2845     I(4)            4           scalar                                                      
 MPP_CHKSUM_I8_1D           Func   2887     I(8)            8           scalar   PRIV             2887                              
 MPP_WRITE_META_AXIS_UNLIMI                                                                                                         
 TED                        Subr   2864                                          PRIV             2864                              
 MPP_WRITE_UNLIMITED_AXIS   Local  2902                                 scalar   PRIV             203,2902,2906                     
 MPP_WRITE_UNLIMITED_AXIS_R                                                                                                         
 1D                         Subr   2902                                          PRIV             2902,2906                         
 NUM_VAR_AXES               Local  2845     I(4)            4           scalar                    2876,2894                         
 R1D                        Local  2846     R(8)            8     1     1        ALC              2904,2905,2906,2907               
 RESTARTPATH                Dummy  2837     CHAR            336         scalar   ARG,INOUT        2859                              
 SAVE_UNLIMITED_AXIS_RESTAR                                                                                                         
 T                          Subr   2837                                                           2475                              
 SUM                        Func   2864                                 scalar                    2864                              
 TRIM                       Func   2855                                 scalar                    2855,2859,2872,2892,2910          
 UNIT                       Local  2841     I(4)            4           scalar                    2859,2864,2865,2866,2894,2902,2906
                                                                                                  ,2913                             
 U_AXIS                     Local  2842     AXISTYPE        1424        scalar                    2864,2866,2877                    
 VAR_AXES                   Local  2843     RECORD          1424  1     4        TGT              2877,2894                         

Page 116         Source Listing                  SAVE_UNLIMITED_AXIS_RESTART
2021-06-01 08:54                                 fms_io.F90

   2916 
   2917 !-------------------------------------------------------------------------------
   2918 !
   2919 !  saves all registered variables to restart files. Those variables are set
   2920 !  through register_restart_field
   2921 !
   2922 !-------------------------------------------------------------------------------
   2923 
   2924 subroutine save_default_restart(fileObj,restartpath)
   2925   type(restart_file_type), intent(inout) :: fileObj
   2926   character(len=336)                     :: restartpath ! The restart file path (dir/file).
   2927 
   2928   character(len=8)   :: suffix               ! A suffix (like _2) that is appended to the name of files after the first.
   2929   integer            :: var_sz, size_in_file ! The size in bytes of each variable and of the variables already in a file.
   2930   integer            :: unit                 ! The mpp unit of the open file.
   2931   real, dimension(max_axis_size)      :: axisdata
   2932   integer,        dimension(max_axes) :: id_x_axes, siz_x_axes
   2933   integer,        dimension(max_axes) :: id_y_axes, siz_y_axes
   2934   integer,        dimension(max_axes) :: id_z_axes, siz_z_axes
   2935   integer,        dimension(max_axes) :: id_a_axes, siz_a_axes
   2936   integer,        dimension(max_axes) :: x_axes_indx, y_axes_indx, z_axes_indx, a_axes_indx
   2937   type(axistype), dimension(max_axes) :: x_axes, y_axes, z_axes, a_axes
   2938   type(axistype)                      :: t_axes
   2939   integer                             :: num_var_axes
   2940   type(axistype), dimension(5)        :: var_axes
   2941   type(var_type), pointer, save       :: cur_var=>NULL()
   2942   integer                             :: num_x_axes, num_y_axes, num_z_axes, num_a_axes
   2943   integer                             :: naxes_x, naxes_y, naxes_z, naxes_a
   2944   integer                             :: i, j, k, l, siz, ind_dom
   2945   logical                             :: domain_present
   2946   real                                :: tlev
   2947   real(8)                   :: tlev_r8
   2948   character(len=10)                   :: axisname
   2949   integer                             :: meta_size
   2950   type(domain2d)                      :: domain
   2951 
   2952   real, allocatable, dimension(:,:,:) :: r3d
   2953   real, allocatable, dimension(:,:)   :: r2d
   2954   real, allocatable, dimension(:)     :: r1d
   2955   real                                :: r0d
   2956   integer(8), allocatable, dimension(:)    :: check_val
   2957   character(len=256)                  :: checksum_char
   2958   integer :: isc, iec, jsc, jec
   2959   integer :: isg, ieg, jsg, jeg
   2960   integer :: ishift, jshift, iadd, jadd, cpack_size
   2961   logical :: write_on_this_pe
   2962   type(domain2d), pointer :: io_domain =>NULL()
   2963 
   2964   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(save_restart): " // &
   2965       "restart_file_type data must be initialized by calling register_restart_field before using it")
   2966 
   2967 !-- no need to proceed if all the variables are read only.
   2968   if( all_field_read_only(fileObj) ) return
   2969 
   2970   do i=1,max_axis_size
   2971      axisdata(i) = i
   2972   enddo

Page 117         Source Listing                  SAVE_DEFAULT_RESTART
2021-06-01 08:54                                 fms_io.F90

   2973 
   2974 !--- check if any field in this file present domain.
   2975   domain_present = .false.
   2976   do j = 1, fileObj%nvar
   2977      if (fileObj%var(j)%domain_present) then
   2978         domain_present = .true.
   2979         ind_dom = j
   2980         exit
   2981      end if
   2982   end do
   2983   num_x_axes = unique_axes(fileObj, 1, id_x_axes, siz_x_axes, domain_x)
   2984   num_y_axes = unique_axes(fileObj, 2, id_y_axes, siz_y_axes, domain_y)
   2985   num_z_axes = unique_axes(fileObj, 3, id_z_axes, siz_z_axes          )
   2986   num_a_axes = unique_axes(fileObj, 4, id_a_axes, siz_a_axes          )
   2987 
   2988   write_on_this_pe = .false.
   2989   if(domain_present) then
   2990      io_domain => mpp_get_io_domain(array_domain(fileObj%var(ind_dom)%domain_idx))
   2991      if(associated(io_domain)) then
   2992        if(mpp_domain_is_tile_root_pe(io_domain)) write_on_this_pe = .true.
   2993      endif
   2994   endif
   2995 !--- always write out from root pe
   2996   if( fileObj%is_root_pe ) write_on_this_pe = .true.
   2997 
   2998   if( domain_present ) then
   2999      call mpp_open(unit,trim(restartpath),action=MPP_OVERWR,form=form,&
   3000           is_root_pe=fileObj%is_root_pe, domain=array_domain(fileObj%var(ind_dom)%domain_idx) )
   3001   else  ! global data
   3002      call mpp_open(unit,trim(restartpath),action=MPP_OVERWR,form=form,threading=MPP_SINGLE,&
   3003           fileset=MPP_SINGLE, is_root_pe=fileObj%is_root_pe)
   3004   end if
   3005 
   3006   naxes_x = 0
   3007   x_axes_indx = 0
   3008   y_axes_indx = 0
   3009   z_axes_indx = 0
   3010   a_axes_indx = 0
   3011 
   3012 ! write_out x_axes
   3013   do j = 1, num_x_axes
   3014 ! make sure this axis is used by some variable
   3015      do l=1,fileObj%nvar
   3016         if(fileObj%var(l)%read_only) cycle
   3017         if( fileObj%var(l)%id_axes(1) == j ) exit
   3018      end do
   3019      if( l > fileObj%nvar ) cycle
   3020      naxes_x = naxes_x + 1
   3021      x_axes_indx(naxes_x) = j
   3022      if (naxes_x < 10) then
   3023         write(axisname,'(a,i1)') 'xaxis_',naxes_x
   3024      else
   3025         write(axisname,'(a,i2)') 'xaxis_',naxes_x
   3026      endif
   3027      if(id_x_axes(j) > 0) then
   3028         call mpp_write_meta(unit,x_axes(j),axisname,'none',axisname, &
   3029              data=axisdata(1:siz_x_axes(j)),domain=domain_x(id_x_axes(j)),cartesian='X')

Page 118         Source Listing                  SAVE_DEFAULT_RESTART
2021-06-01 08:54                                 fms_io.F90

   3030      else
   3031         call mpp_write_meta(unit,x_axes(j),axisname,'none',axisname, &
   3032              data=axisdata(1:siz_x_axes(j)),cartesian='X')
   3033      endif
   3034   end do
   3035 
   3036 ! write out y_axes
   3037   naxes_y = 0
   3038   do j = 1, num_y_axes
   3039 ! make sure this axis is used by some variable
   3040      do l=1,fileObj%nvar
   3041         if(fileObj%var(l)%read_only) cycle
   3042         if( fileObj%var(l)%id_axes(2) == j ) exit
   3043      end do
   3044      if( l > fileObj%nvar ) cycle
   3045      naxes_y = naxes_y + 1
   3046      y_axes_indx(naxes_y) = j
   3047      if (naxes_y < 10) then
   3048         write(axisname,'(a,i1)') 'yaxis_',naxes_y
   3049      else
   3050         write(axisname,'(a,i2)') 'yaxis_',naxes_y
   3051      endif
   3052      if(id_y_axes(j) > 0) then
   3053         call mpp_write_meta(unit,y_axes(j),axisname,'none',axisname, &
   3054              data=axisdata(1:siz_y_axes(j)),domain=domain_y(id_y_axes(j)),cartesian='Y')
   3055      else
   3056         call mpp_write_meta(unit,y_axes(j),axisname,'none',axisname, &
   3057              data=axisdata(1:siz_y_axes(j)),cartesian='Y')
   3058      endif
   3059   end do
   3060 
   3061 ! write out z_axes
   3062   naxes_z = 0
   3063   do j = 1, num_z_axes
   3064 ! make sure this axis is used by some variable
   3065      do l=1,fileObj%nvar
   3066         if(fileObj%var(l)%read_only) cycle
   3067         if( fileObj%var(l)%id_axes(3) == j ) exit
   3068      end do
   3069      if( l > fileObj%nvar ) cycle
   3070      naxes_z = naxes_z + 1
   3071      z_axes_indx(naxes_z) = j
   3072      if (naxes_z < 10) then
   3073         write(axisname,'(a,i1)') 'zaxis_',naxes_z
   3074      else
   3075         write(axisname,'(a,i2)') 'zaxis_',naxes_z
   3076      endif
   3077      call mpp_write_meta(unit,z_axes(j),axisname,'none',axisname, &
   3078           data=axisdata(1:siz_z_axes(j)),cartesian='Z')
   3079   end do
   3080 
   3081 ! write out a_axes
   3082   naxes_a = 0
   3083   do j = 1, num_a_axes
   3084 ! make sure this axis is used by some variable
   3085      do l=1,fileObj%nvar
   3086         if(fileObj%var(l)%read_only) cycle

Page 119         Source Listing                  SAVE_DEFAULT_RESTART
2021-06-01 08:54                                 fms_io.F90

   3087         if( fileObj%var(l)%id_axes(4) == j ) exit
   3088      end do
   3089      if( l > fileObj%nvar ) cycle
   3090      naxes_a = naxes_a + 1
   3091      a_axes_indx(naxes_a) = j
   3092      if (naxes_a < 10) then
   3093         write(axisname,'(a,i1)') 'aaxis_',naxes_a
   3094      else
   3095         write(axisname,'(a,i2)') 'aaxis_',naxes_a
   3096      endif
   3097      call mpp_write_meta(unit,a_axes(j),axisname,'none',axisname, &
   3098           data=axisdata(1:siz_a_axes(j)),cartesian='N')
   3099   end do
   3100 
   3101 ! write out time axis
   3102   call mpp_write_meta(unit,t_axes,&
   3103        'Time','time level','Time',cartesian='T')
   3104 ! write metadata for fields
   3105   do j = 1,fileObj%nvar
   3106      cur_var => fileObj%var(j)
   3107      if(cur_var%read_only) cycle
   3108      if(cur_var%siz(4) > 1 .AND. cur_var%siz(4) .NE. fileObj%max_ntime ) call mpp_error(FATAL, &
   3109       "fms_io(save_restart): "//trim(cur_var%name)//" in file "//trim(fileObj%name)// &
   3110       " has more than one time level, but number of time level is not equal to max_ntime")
   3111 
   3112      if(cur_var%ndim == 0) then
   3113         num_var_axes = 1
   3114         var_axes(1) = t_axes
   3115      else if(cur_var%ndim == 1) then
   3116         num_var_axes = 1
   3117         var_axes(1) = x_axes(cur_var%id_axes(1))
   3118         if(cur_var%siz(4) == fileObj%max_ntime) then
   3119            num_var_axes = 2
   3120            var_axes(2) = t_axes
   3121         end if
   3122      else if(cur_var%ndim == 2) then
   3123         num_var_axes = 2
   3124         var_axes(1) = x_axes(cur_var%id_axes(1))
   3125         var_axes(2) = y_axes(cur_var%id_axes(2))
   3126         if(cur_var%siz(4) == fileObj%max_ntime) then
   3127            num_var_axes = 3
   3128            var_axes(3) = t_axes
   3129         end if
   3130      else if(cur_var%ndim == 3) then
   3131         num_var_axes = 3
   3132         var_axes(1) = x_axes(cur_var%id_axes(1))
   3133         var_axes(2) = y_axes(cur_var%id_axes(2))
   3134         var_axes(3) = z_axes(cur_var%id_axes(3))
   3135         if(cur_var%siz(4) == fileObj%max_ntime) then
   3136            num_var_axes = 4
   3137            var_axes(4) = t_axes
   3138         end if
   3139      else if(cur_var%ndim == 4) then
   3140         num_var_axes = 4
   3141         var_axes(1) = x_axes(cur_var%id_axes(1))
   3142         var_axes(2) = y_axes(cur_var%id_axes(2))
   3143         var_axes(3) = z_axes(cur_var%id_axes(3))

Page 120         Source Listing                  SAVE_DEFAULT_RESTART
2021-06-01 08:54                                 fms_io.F90

   3144         var_axes(4) = a_axes(cur_var%id_axes(4))
   3145         if(cur_var%siz(4) == fileObj%max_ntime) then
   3146            num_var_axes = 5
   3147            var_axes(5) = t_axes
   3148         end if
   3149      end if
   3150 
   3151      if ( cur_var%domain_idx > 0) then
   3152        call mpp_get_compute_domain(array_domain(cur_var%domain_idx), isc, iec, jsc, jec)
   3153        call mpp_get_global_domain(array_domain(cur_var%domain_idx), isg, ieg, jsg, jeg)
   3154        call mpp_get_domain_shift(array_domain(cur_var%domain_idx), ishift, jshift, cur_var%position)
   3155      else if (ASSOCIATED(Current_domain)) then
   3156        call mpp_get_compute_domain(Current_domain, isc, iec, jsc, jec)
   3157        call mpp_get_global_domain(Current_domain, isg, ieg, jsg, jeg)
   3158        call mpp_get_domain_shift(Current_domain, ishift, jshift, cur_var%position)
   3159      else
   3160        iec = cur_var%ie
   3161        isc = cur_var%is
   3162        ieg = cur_var%ie
   3163        jec = cur_var%je
   3164        jsc = cur_var%js
   3165        jeg = cur_var%je
   3166        ishift = 0
   3167        jshift = 0
   3168      endif
   3169 !     call return_domain(domain)
   3170      iadd = iec-isc ! Size of the i-dimension on this processor (-1 as it is an increment)
   3171      jadd = jec-jsc ! Size of the j-dimension on this processor
   3172      if(iec == ieg) iadd = iadd + ishift
   3173      if(jec == jeg) jadd = jadd + jshift
   3174 
   3175      allocate(check_val(max(1,cur_var%siz(4))))
   3176      cpack_size = pack_size
   3177      do k = 1, cur_var%siz(4)
   3178         if ( Associated(fileObj%p0dr(k,j)%p) ) then
   3179            check_val(k) = mpp_chksum(fileObj%p0dr(k,j)%p, (/mpp_pe()/) )
   3180         else if ( Associated(fileObj%p1dr(k,j)%p) ) then
   3181            check_val(k) = mpp_chksum(fileObj%p1dr(k,j)%p, (/mpp_pe()/) )
   3182         else if ( Associated(fileObj%p2dr(k,j)%p) ) then
   3183            check_val(k) = mpp_chksum(fileObj%p2dr(k,j)%p(cur_var%is:cur_var%is+iadd, cur_var%js:cur_var%js+jadd) )
   3184         else if ( Associated(fileObj%p3dr(k,j)%p) ) then
   3185            check_val(k) = mpp_chksum(fileObj%p3dr(k,j)%p(cur_var%is:cur_var%is+iadd, cur_var%js:cur_var%js+jadd, :) )
   3186         else if ( Associated(fileObj%p2dr8(k,j)%p) ) then
   3187            cpack_size = 1
   3188            check_val(k) = mpp_chksum(fileObj%p2dr8(k,j)%p(cur_var%is:cur_var%is+iadd, cur_var%js:cur_var%js+jadd) )
   3189         else if ( Associated(fileObj%p3dr8(k,j)%p) ) then
   3190            cpack_size = 1
   3191            check_val(k) = mpp_chksum(fileObj%p3dr8(k,j)%p(cur_var%is:cur_var%is+iadd, cur_var%js:cur_var%js+jadd, :) )
   3192         else if ( Associated(fileObj%p4dr(k,j)%p) ) then
   3193            check_val(k) = mpp_chksum(fileObj%p4dr(k,j)%p(cur_var%is:cur_var%is+iadd, cur_var%js:cur_var%js+jadd, :, :) )
   3194         else if ( Associated(fileObj%p0di(k,j)%p) ) then
   3195            check_val(k) = fileObj%p0di(k,j)%p
   3196         else if ( Associated(fileObj%p1di(k,j)%p) ) then
   3197            check_val(k) = mpp_chksum(fileObj%p1di(k,j)%p, (/mpp_pe()/) )
   3198         else if ( Associated(fileObj%p2di(k,j)%p) ) then
   3199            check_val(k) = mpp_chksum(fileObj%p2di(k,j)%p(cur_var%is:cur_var%is+iadd, cur_var%js:cur_var%js+jadd) )
   3200         else if ( Associated(fileObj%p3di(k,j)%p) ) then

Page 121         Source Listing                  SAVE_DEFAULT_RESTART
2021-06-01 08:54                                 fms_io.F90

   3201            check_val(k) = mpp_chksum(fileObj%p3di(k,j)%p(cur_var%is:cur_var%is+iadd, cur_var%js:cur_var%js+jadd, :))
   3202         else
   3203            call mpp_error(FATAL, "fms_io(save_restart): There is no pointer associated with the data of  field "// &
   3204                 trim(cur_var%name)//" of file "//trim(fileObj%name) )
   3205         end if
   3206      enddo
   3207      call mpp_write_meta(unit,cur_var%field, var_axes(1:num_var_axes), cur_var%name, &
   3208               cur_var%units,cur_var%longname,pack=cpack_size,checksum=check_val)
   3209      deallocate(check_val)
   3210   enddo
   3211 
   3212 ! write values for ndim of spatial axes
   3213   do j = 1, naxes_x
   3214      call mpp_write(unit,x_axes(x_axes_indx(j)))
   3215   enddo
   3216   do j = 1, naxes_y
   3217      call mpp_write(unit,y_axes(y_axes_indx(j)))
   3218   enddo
   3219   do j = 1, naxes_z
   3220      call mpp_write(unit,z_axes(z_axes_indx(j)))
   3221   enddo
   3222 
   3223   do j = 1, naxes_a
   3224      call mpp_write(unit,a_axes(a_axes_indx(j)))
   3225   enddo
   3226 
   3227 ! write data of each field
   3228   do k = 1, fileObj%max_ntime
   3229      do j=1,fileObj%nvar
   3230         cur_var => fileObj%var(j)
   3231         if(cur_var%read_only) cycle
   3232         tlev =k
   3233         tlev_r8=k
   3234 ! If some fields only have one time level, we do not need to write the second level, just keep
   3235 ! the data missing.
   3236         if(k <= cur_var%siz(4)) then
   3237            if(cur_var%domain_present) then  ! one 2-D or 3-D case possible present domain
   3238               if( Associated(fileObj%p2dr(k,j)%p) ) then
   3239                  call mpp_write(unit, cur_var%field, array_domain(cur_var%domain_idx), fileObj%p2dr(k,j)%p, tlev, &
   3240                                 default_data=cur_var%default_data)
   3241               else if( Associated(fileObj%p3dr(k,j)%p) ) then
   3242                  call mpp_write(unit, cur_var%field, array_domain(cur_var%domain_idx), fileObj%p3dr(k,j)%p, tlev, &
   3243                                 default_data=cur_var%default_data)
   3244               else if( Associated(fileObj%p2dr8(k,j)%p) ) then
   3245                  call mpp_write(unit, cur_var%field, array_domain(cur_var%domain_idx), fileObj%p2dr8(k,j)%p, tlev_r8, &
   3246                                 default_data=real(cur_var%default_data,kind=8))
   3247               else if( Associated(fileObj%p3dr8(k,j)%p) ) then
   3248                  call mpp_write(unit, cur_var%field, array_domain(cur_var%domain_idx), fileObj%p3dr8(k,j)%p, tlev_r8, &
   3249                                 default_data=real(cur_var%default_data,kind=8))
   3250               else if( Associated(fileObj%p4dr(k,j)%p) ) then
   3251                  call mpp_write(unit, cur_var%field, array_domain(cur_var%domain_idx), fileObj%p4dr(k,j)%p, tlev, &
   3252                                 default_data=cur_var%default_data)
   3253               else if( Associated(fileObj%p2di(k,j)%p) ) then
   3254                  allocate(r2d(cur_var%siz(1), cur_var%siz(2)) )
   3255                  r2d = fileObj%p2di(k,j)%p
   3256                  call mpp_write(unit, cur_var%field, array_domain(cur_var%domain_idx), r2d, tlev, &
   3257                                 default_data=cur_var%default_data)

Page 122         Source Listing                  SAVE_DEFAULT_RESTART
2021-06-01 08:54                                 fms_io.F90

   3258                  deallocate(r2d)
   3259               else if( Associated(fileObj%p3di(k,j)%p) ) then
   3260                  allocate(r3d(cur_var%siz(1), cur_var%siz(2), cur_var%siz(3)) )
   3261                  r3d = fileObj%p3di(k,j)%p
   3262                  call mpp_write(unit, cur_var%field, array_domain(cur_var%domain_idx), r3d, tlev, &
   3263                                 default_data=cur_var%default_data)
   3264                  deallocate(r3d)
   3265               else
   3266                  call mpp_error(FATAL, "fms_io(save_restart): domain is present, "// &
   3267                       "field "//trim(cur_var%name)//" of file "//trim(fileObj%name)// &
   3268                       ", but none of p2dr, p3dr, p2di and p3di is associated")
   3269               end if
   3270            else if (write_on_this_pe) then
   3271               if ( Associated(fileObj%p0dr(k,j)%p) ) then
   3272                  call mpp_write(unit, cur_var%field, fileObj%p0dr(k,j)%p, tlev)
   3273               else if ( Associated(fileObj%p1dr(k,j)%p) ) then
   3274                  call mpp_write(unit, cur_var%field, fileObj%p1dr(k,j)%p, tlev)
   3275               else if ( Associated(fileObj%p2dr(k,j)%p) ) then
   3276                  call mpp_write(unit, cur_var%field, fileObj%p2dr(k,j)%p, tlev)
   3277               else if ( Associated(fileObj%p3dr(k,j)%p) ) then
   3278                  call mpp_write(unit, cur_var%field, fileObj%p3dr(k,j)%p, tlev)
   3279 !              else if ( Associated(fileObj%p2dr8(k,j)%p) ) then
   3280 !                 call mpp_write(unit, cur_var%field, fileObj%p2dr8(k,j)%p, tlev_r8)
   3281 !              else if ( Associated(fileObj%p3dr8(k,j)%p) ) then
   3282 !                 call mpp_write(unit, cur_var%field, fileObj%p3dr8(k,j)%p, tlev_r8)
   3283               else if ( Associated(fileObj%p4dr(k,j)%p) ) then
   3284                  call mpp_write(unit, cur_var%field, fileObj%p4dr(k,j)%p, tlev)
   3285               else if ( Associated(fileObj%p0di(k,j)%p) ) then
   3286                  r0d =  fileObj%p0di(k,j)%p
   3287                  call mpp_write(unit, cur_var%field, r0d,                  tlev)
   3288               else if ( Associated(fileObj%p1di(k,j)%p) ) then
   3289                  allocate(r1d(cur_var%siz(1)) )
   3290                  r1d = fileObj%p1di(k,j)%p
   3291                  call mpp_write(unit, cur_var%field, r1d,                  tlev)
   3292                  deallocate(r1d)
   3293               else if ( Associated(fileObj%p2di(k,j)%p) ) then
   3294                  allocate(r2d(cur_var%siz(1), cur_var%siz(2)) )
   3295                  r2d = fileObj%p2di(k,j)%p
   3296                  call mpp_write(unit, cur_var%field, r2d,                  tlev)
   3297                  deallocate(r2d)
   3298               else if ( Associated(fileObj%p3di(k,j)%p) ) then
   3299                  allocate(r3d(cur_var%siz(1), cur_var%siz(2), cur_var%siz(3)) )
   3300                  r3d = fileObj%p3di(k,j)%p
   3301                  call mpp_write(unit, cur_var%field, r3d,                  tlev)
   3302                  deallocate(r3d)
   3303               else
   3304                  call mpp_error(FATAL, "fms_io(save_restart): There is no pointer associated with the data of  field "// &
   3305                       trim(cur_var%name)//" of file "//trim(fileObj%name) )
   3306               end if
   3307            end if
   3308         end if
   3309      enddo ! end j loop
   3310   enddo ! end k loop
   3311   call mpp_close(unit)
   3312   cur_var =>NULL()
   3313 end subroutine save_default_restart

Page 123         Source Listing                  SAVE_DEFAULT_RESTART
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_save_default_restart_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   2964                                 scalar                    2964,2991,3155,3178,3180,3182,3184
                                                                                                  ,3186,3189,3192,3194,3196,3198,320
                                                                                                  0,3238,3241,3244,3247,3250,3253,32
                                                                                                  59,3271,3273,3275,3277,3283,3285,3
                                                                                                  288,3293,3298                     
 AXISDATA                   Local  2931     R(8)            8     1     10000    TGT              2971,3029,3032,3054,3057,3078,3098
 AXISNAME                   Local  2948     CHAR            10          scalar                    3023,3025,3028,3031,3048,3050,3053
                                                                                                  ,3056,3073,3075,3077,3093,3095,309
                                                                                                  7                                 
 A_AXES                     Local  2937     RECORD          1424  1     40                        3097,3144,3224                    
 A_AXES_INDX                Local  2936     I(4)            4     1     40                        3010,3091,3224                    
 CHECKSUM_CHAR              Local  2957     CHAR            256         scalar                                                      
 CHECK_VAL                  Local  2956     I(8)            8     1     1        ALC              3175,3179,3181,3183,3185,3188,3191
                                                                                                  ,3193,3195,3197,3199,3201,3208,320
                                                                                                  9                                 
 CPACK_SIZE                 Local  2960     I(4)            4           scalar                    3176,3187,3190,3208               
 CUR_VAR                    Local  2941     VAR_TYPE        3328        scalar   PTR,SAVE         2941,3106,3107,3108,3109,3112,3115
                                                                                                  ,3117,3118,3122,3124,3125,3126,313
                                                                                                  0,3132,3133,3134,3135,3139,3141,31
                                                                                                  42,3143,3144,3145,3151,3152,3153,3
                                                                                                  154,3158,3160,3161,3162,3163,3164,
                                                                                                  3165,3175,3177,3183,3185,3188,3191
                                                                                                  ,3193,3199,3201,3204,3207,3208,323
                                                                                                  0,3231,3236,3237,3239,3240,3242,32
                                                                                                  43,3245,3246,3248,3249,3251,3252,3
                                                                                                  254,3256,3257,3260,3262,3263,3267,
                                                                                                  3272,3274,3276,3278,3284,3287,3289
                                                                                                  ,3291,3294,3296,3299,3301,3305,331
                                                                                                  2                                 
 DOMAIN                     Local  2950     DOMAIN2D        752         scalar                                                      
 DOMAIN_PRESENT             Local  2945     L(4)            4           scalar                    2975,2978,2989,2998               
 FILEOBJ                    Dummy  2924     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        2964,2968,2976,2977,2983,2984,2985
                                                                                                  ,2986,2990,2996,3000,3003,3015,301
                                                                                                  6,3017,3019,3040,3041,3042,3044,30
                                                                                                  65,3066,3067,3069,3085,3086,3087,3
                                                                                                  089,3105,3106,3108,3109,3118,3126,
                                                                                                  3135,3145,3178,3179,3180,3181,3182
                                                                                                  ,3183,3184,3185,3186,3188,3189,319
                                                                                                  1,3192,3193,3194,3195,3196,3197,31
                                                                                                  98,3199,3200,3201,3204,3228,3229,3
                                                                                                  230,3238,3239,3241,3242,3244,3245,
                                                                                                  3247,3248,3250,3251,3253,3255,3259
                                                                                                  ,3261,3267,3271,3272,3273,3274,327

Page 124         Source Listing                  SAVE_DEFAULT_RESTART
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5,3276,3277,3278,3283,3284,3285,32
                                                                                                  86,3288,3290,3293,3295,3298,3300,3
                                                                                                  305                               
 I                          Local  2944     I(4)            4           scalar                    2970,2971                         
 IADD                       Local  2960     I(4)            4           scalar                    3170,3172,3183,3185,3188,3191,3193
                                                                                                  ,3199,3201                        
 ID_A_AXES                  Local  2935     I(4)            4     1     40       TGT              2986                              
 ID_X_AXES                  Local  2932     I(4)            4     1     40       TGT              2983,3027,3029                    
 ID_Y_AXES                  Local  2933     I(4)            4     1     40       TGT              2984,3052,3054                    
 ID_Z_AXES                  Local  2934     I(4)            4     1     40       TGT              2985                              
 IEC                        Local  2958     I(4)            4           scalar                    3152,3156,3160,3170,3172          
 IEG                        Local  2959     I(4)            4           scalar                    3153,3157,3162,3172               
 IND_DOM                    Local  2944     I(4)            4           scalar                    2979,2990,3000                    
 IO_DOMAIN                  Local  2962     DOMAIN2D        752         scalar   PTR              2962,2990,2991,2992               
 ISC                        Local  2958     I(4)            4           scalar                    3152,3156,3161,3170               
 ISG                        Local  2959     I(4)            4           scalar                    3153,3157                         
 ISHIFT                     Local  2960     I(4)            4           scalar                    3154,3158,3166,3172               
 J                          Local  2944     I(4)            4           scalar                    2976,2977,2979,3013,3017,3021,3027
                                                                                                  ,3028,3029,3031,3032,3038,3042,304
                                                                                                  6,3052,3053,3054,3056,3057,3063,30
                                                                                                  67,3071,3077,3078,3083,3087,3091,3
                                                                                                  097,3098,3105,3106,3178,3179,3180,
                                                                                                  3181,3182,3183,3184,3185,3186,3188
                                                                                                  ,3189,3191,3192,3193,3194,3195,319
                                                                                                  6,3197,3198,3199,3200,3201,3213,32
                                                                                                  14,3216,3217,3219,3220,3223,3224,3
                                                                                                  229,3230,3238,3239,3241,3242,3244,
                                                                                                  3245,3247,3248,3250,3251,3253,3255
                                                                                                  ,3259,3261,3271,3272,3273,3274,327
                                                                                                  5,3276,3277,3278,3283,3284,3285,32
                                                                                                  86,3288,3290,3293,3295,3298,3300  
 JADD                       Local  2960     I(4)            4           scalar                    3171,3173,3183,3185,3188,3191,3193
                                                                                                  ,3199,3201                        
 JEC                        Local  2958     I(4)            4           scalar                    3152,3156,3163,3171,3173          
 JEG                        Local  2959     I(4)            4           scalar                    3153,3157,3165,3173               
 JSC                        Local  2958     I(4)            4           scalar                    3152,3156,3164,3171               
 JSG                        Local  2959     I(4)            4           scalar                    3153,3157                         
 JSHIFT                     Local  2960     I(4)            4           scalar                    3154,3158,3167,3173               
 K                          Local  2944     I(4)            4           scalar                    3177,3178,3179,3180,3181,3182,3183
                                                                                                  ,3184,3185,3186,3188,3189,3191,319
                                                                                                  2,3193,3194,3195,3196,3197,3198,31
                                                                                                  99,3200,3201,3228,3232,3233,3236,3
                                                                                                  238,3239,3241,3242,3244,3245,3247,
                                                                                                  3248,3250,3251,3253,3255,3259,3261
                                                                                                  ,3271,3272,3273,3274,3275,3276,327
                                                                                                  7,3278,3283,3284,3285,3286,3288,32
                                                                                                  90,3293,3295,3298,3300            
 L                          Local  2944     I(4)            4           scalar                    3015,3016,3017,3019,3040,3041,3042
                                                                                                  ,3044,3065,3066,3067,3069,3085,308
                                                                                                  6,3087,3089                       
 MAX                        Func   3175                                 scalar                    3175                              
 META_SIZE                  Local  2949     I(4)            4           scalar                                                      
 MPP_CHKSUM_I4_1D           Func   3197     I(8)            8           scalar   PRIV             3197,3830,4078,4127,4396          
 MPP_CHKSUM_I4_2D           Func   3199     I(8)            8           scalar   PRIV             3199,3832,4086,4135,4404,4453     
 MPP_CHKSUM_I4_3D           Func   3201     I(8)            8           scalar   PRIV             3201,3834,4094,4143,4412,4461     

Page 125         Source Listing                  SAVE_DEFAULT_RESTART
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MPP_CHKSUM_R8_4D           Func   3193     I(8)            8           scalar   PRIV             3193,3826,4069,4118,4387,4436     
 MPP_WRITE_2DDECOMP_R2D_R8  Subr   3239                                          PRIV             3239,3245,3256                    
 MPP_WRITE_2DDECOMP_R4D_R8  Subr   3251                                          PRIV             3251                              
 MPP_WRITE_R1D_R8           Subr   3274                                          PRIV             3274,3291                         
 MPP_WRITE_R2D_R8           Subr   3276                                          PRIV             3276,3296,3576                    
 MPP_WRITE_R4D_R8           Subr   3284                                          PRIV             3284                              
 NAXES_A                    Local  2943     I(4)            4           scalar                    3082,3090,3091,3092,3093,3095,3223
 NAXES_X                    Local  2943     I(4)            4           scalar                    3006,3020,3021,3022,3023,3025,3213
 NAXES_Y                    Local  2943     I(4)            4           scalar                    3037,3045,3046,3047,3048,3050,3216
 NAXES_Z                    Local  2943     I(4)            4           scalar                    3062,3070,3071,3072,3073,3075,3219
 NUM_A_AXES                 Local  2942     I(4)            4           scalar                    2986,3083                         
 NUM_VAR_AXES               Local  2939     I(4)            4           scalar                    3113,3116,3119,3123,3127,3131,3136
                                                                                                  ,3140,3146,3207                   
 NUM_X_AXES                 Local  2942     I(4)            4           scalar                    2983,3013                         
 NUM_Y_AXES                 Local  2942     I(4)            4           scalar                    2984,3038                         
 NUM_Z_AXES                 Local  2942     I(4)            4           scalar                    2985,3063                         
 R0D                        Local  2955     R(8)            8           scalar                    3286,3287                         
 R1D                        Local  2954     R(8)            8     1     1        ALC              3289,3290,3291,3292               
 R2D                        Local  2953     R(8)            8     2     1        ALC              3254,3255,3256,3258,3294,3295,3296
                                                                                                  ,3297                             
 R3D                        Local  2952     R(8)            8     3     1        ALC              3260,3261,3262,3264,3299,3300,3301
                                                                                                  ,3302                             
 REAL                       Func   3246                                 scalar                    3246,3249                         
 RESTARTPATH                Dummy  2924     CHAR            336         scalar   ARG,INOUT        2999,3002                         
 SAVE_DEFAULT_RESTART       Subr   2924                                                           2477                              
 SIZ                        Local  2944     I(4)            4           scalar                                                      
 SIZE_IN_FILE               Local  2929     I(4)            4           scalar                                                      
 SIZ_A_AXES                 Local  2935     I(4)            4     1     40       TGT              2986,3098                         
 SIZ_X_AXES                 Local  2932     I(4)            4     1     40       TGT              2983,3029,3032                    
 SIZ_Y_AXES                 Local  2933     I(4)            4     1     40       TGT              2984,3054,3057                    
 SIZ_Z_AXES                 Local  2934     I(4)            4     1     40       TGT              2985,3078                         
 SUFFIX                     Local  2928     CHAR            8           scalar                                                      
 TLEV                       Local  2946     R(8)            8           scalar                    3232,3239,3242,3251,3256,3262,3272
                                                                                                  ,3274,3276,3278,3284,3287,3291,329
                                                                                                  6,3301                            
 TLEV_R8                    Local  2947     R(8)            8           scalar                    3233,3245,3248                    
 TRIM                       Func   2999                                 scalar                    2999,3002,3109,3204,3267,3305     
 T_AXES                     Local  2938     AXISTYPE        1424        scalar                    3102,3114,3120,3128,3137,3147     
 UNIT                       Local  2930     I(4)            4           scalar                    2999,3002,3028,3031,3053,3056,3077
                                                                                                  ,3097,3102,3207,3214,3217,3220,322
                                                                                                  4,3239,3242,3245,3248,3251,3256,32
                                                                                                  62,3272,3274,3276,3278,3284,3287,3
                                                                                                  291,3296,3301,3311                
 VAR_AXES                   Local  2940     RECORD          1424  1     5        TGT              3114,3117,3120,3124,3125,3128,3132
                                                                                                  ,3133,3134,3137,3141,3142,3143,314
                                                                                                  4,3147,3207                       
 VAR_SZ                     Local  2929     I(4)            4           scalar                                                      
 WRITE_ON_THIS_PE           Local  2961     L(4)            4           scalar                    2988,2992,2996,3270               
 X_AXES                     Local  2937     RECORD          1424  1     40                        3028,3031,3117,3124,3132,3141,3214
 X_AXES_INDX                Local  2936     I(4)            4     1     40                        3007,3021,3214                    
 Y_AXES                     Local  2937     RECORD          1424  1     40                        3053,3056,3125,3133,3142,3217     
 Y_AXES_INDX                Local  2936     I(4)            4     1     40                        3008,3046,3217                    
 Z_AXES                     Local  2937     RECORD          1424  1     40                        3077,3134,3143,3220               
 Z_AXES_INDX                Local  2936     I(4)            4     1     40                        3009,3071,3220                    

Page 126         Source Listing                  SAVE_DEFAULT_RESTART
2021-06-01 08:54                                 fms_io.F90

   3314 !-------------------------------------------------------------------------------
   3315 !
   3316 !  saves all registered border/halo variables to restart files. Those variables
   3317 !  are set through register_restart_field (region option)
   3318 !
   3319 !-------------------------------------------------------------------------------
   3320 subroutine save_restart_border (fileObj, time_stamp, directory)
   3321   type(restart_file_type), intent(inout) :: fileObj
   3322   character(len=*),        intent(in), optional :: directory
   3323   character(len=*),        intent(in), optional :: time_stamp
   3324 
   3325   character(len=256) :: dir
   3326   character(len=256) :: restartpath          ! The restart file path (dir/file).
   3327   character(len=80)  :: restartname          ! The restart file name (no dir).
   3328 !rab  integer            :: start_var, next_var  ! The starting variables of the current and next files.
   3329   integer            :: unit                 ! The mpp unit of the open file.
   3330   real, dimension(max_axis_size)      :: axisdata
   3331   integer,        dimension(max_axes) :: id_x_axes, siz_x_axes
   3332   integer,        dimension(max_axes) :: id_y_axes, siz_y_axes
   3333   integer,        dimension(max_axes) :: id_z_axes, siz_z_axes
   3334   integer,        dimension(max_axes) :: x_axes_indx, y_axes_indx, z_axes_indx
   3335   type(axistype), dimension(max_axes) :: x_axes, y_axes, z_axes
   3336   type(axistype)                      :: t_axes
   3337   integer                             :: num_var_axes
   3338   type(axistype), dimension(4)        :: var_axes
   3339   type(var_type), pointer, save       :: cur_var=>NULL()
   3340   integer                             :: num_x_axes, num_y_axes, num_z_axes
   3341   integer                             :: naxes_x, naxes_y, naxes_z
   3342   integer                             :: i, j, k, l
   3343   integer                             :: isc, iec, jsc, jec
   3344   integer                             :: is, ie, js, je
   3345   integer                             :: i_add, i1, i2
   3346   integer                             :: j_add, j1, j2
   3347   integer                             :: i_glob, j_glob, k_glob
   3348   real                                :: tlev
   3349   character(len=10)                   :: axisname
   3350 
   3351   real, allocatable, dimension(:,:)   :: r2d
   3352   real, allocatable, dimension(:,:,:) :: r3d
   3353   integer(8), allocatable, dimension(:)    :: check_val
   3354 
   3355 !-- no need to proceed if all the variables are read only.
   3356   if( all_field_read_only(fileObj) ) return
   3357 
   3358   do i=1,max_axis_size
   3359    axisdata(i) = i
   3360   enddo
   3361 
   3362   dir = "RESTART"
   3363   if(present(directory)) dir = directory
   3364 
   3365   restartname = fileObj%name
   3366   if (time_stamp_restart) then
   3367     if (PRESENT(time_stamp)) then
   3368       restartname = trim(time_stamp)//"."//trim(restartname)
   3369     endif
   3370   end if

Page 127         Source Listing                  SAVE_RESTART_BORDER
2021-06-01 08:54                                 fms_io.F90

   3371   if (len_trim(dir) > 0) then
   3372     restartpath = trim(dir)//"/"// trim(restartname)
   3373   else
   3374     restartpath = trim(restartname)
   3375   end if
   3376 
   3377   num_x_axes = unique_axes(fileObj, 1, id_x_axes, siz_x_axes)
   3378   num_y_axes = unique_axes(fileObj, 2, id_y_axes, siz_y_axes)
   3379   num_z_axes = unique_axes(fileObj, 3, id_z_axes, siz_z_axes)
   3380 
   3381   call mpp_open(unit,trim(restartpath),action=MPP_OVERWR,form=MPP_NETCDF,threading=MPP_SINGLE,&
   3382                 fileset=MPP_SINGLE, is_root_pe=fileObj%is_root_pe)
   3383 
   3384 ! write out axes
   3385   naxes_x = 0
   3386   x_axes_indx = 0
   3387   y_axes_indx = 0
   3388   z_axes_indx = 0
   3389 
   3390 ! write out x_axes metadata
   3391   do j = 1, num_x_axes
   3392 ! make sure this axis is used by some variable
   3393     do l=1, fileObj%nvar
   3394       if(fileObj%var(l)%read_only) cycle
   3395       if (fileObj%var(l)%id_axes(1) == j) exit
   3396     end do
   3397     if( l > fileObj%nvar ) cycle
   3398     naxes_x = naxes_x + 1
   3399     x_axes_indx(naxes_x) = j
   3400     if (naxes_x < 10) then
   3401       write(axisname,'(a,i1)') 'xaxis_',naxes_x
   3402     else
   3403       write(axisname,'(a,i2)') 'xaxis_',naxes_x
   3404     endif
   3405     call mpp_write_meta(unit,x_axes(j),axisname,'none',axisname, &
   3406                         data=axisdata(1:siz_x_axes(j)),cartesian='X')
   3407   end do
   3408 
   3409 ! write out y_axes metadata
   3410   naxes_y = 0
   3411   do j = 1, num_y_axes
   3412 ! make sure this axis is used by some variable
   3413     do l=1, fileObj%nvar
   3414       if(fileObj%var(l)%read_only) cycle
   3415       if (fileObj%var(l)%id_axes(2) == j) exit
   3416     end do
   3417     if( l > fileObj%nvar ) cycle
   3418     naxes_y = naxes_y + 1
   3419     y_axes_indx(naxes_y) = j
   3420     if (naxes_y < 10) then
   3421       write(axisname,'(a,i1)') 'yaxis_',naxes_y
   3422     else
   3423       write(axisname,'(a,i2)') 'yaxis_',naxes_y
   3424     endif
   3425     call mpp_write_meta(unit,y_axes(j),axisname,'none',axisname, &
   3426                         data=axisdata(1:siz_y_axes(j)),cartesian='Y')
   3427   end do

Page 128         Source Listing                  SAVE_RESTART_BORDER
2021-06-01 08:54                                 fms_io.F90

   3428 
   3429 ! write out z_axes metadata
   3430   naxes_z = 0
   3431   do j = 1, num_z_axes
   3432 ! make sure this axis is used by some variable
   3433     do l=1, fileObj%nvar
   3434       if(fileObj%var(l)%read_only) cycle
   3435       if (fileObj%var(l)%id_axes(3) == j) exit
   3436     end do
   3437     if( l > fileObj%nvar ) cycle
   3438     naxes_z = naxes_z + 1
   3439     z_axes_indx(naxes_z) = j
   3440     if (naxes_z < 10) then
   3441       write(axisname,'(a,i1)') 'zaxis_',naxes_z
   3442     else
   3443       write(axisname,'(a,i2)') 'zaxis_',naxes_z
   3444     endif
   3445     call mpp_write_meta(unit,z_axes(j),axisname,'none',axisname, &
   3446                         data=axisdata(1:siz_z_axes(j)),cartesian='Z')
   3447   end do
   3448 
   3449 ! write out time axis
   3450   call mpp_write_meta(unit,t_axes,'Time','time level', &
   3451                       'Time',cartesian='T')
   3452 
   3453 ! write metadata for fields
   3454   do j = 1, fileObj%nvar
   3455     cur_var => fileObj%var(j)
   3456     if(cur_var%read_only) cycle
   3457     if ((cur_var%siz(4) > 1) .AND. (cur_var%siz(4).NE.fileObj%max_ntime)) call mpp_error(FATAL, &
   3458      "fms_io(save_restart_border): "//trim(cur_var%name)//" in file "//trim(fileObj%name)// &
   3459      " has more than one time level, but number of time level is not equal to max_ntime")
   3460 
   3461     if (cur_var%ndim == 2) then
   3462       num_var_axes = 2
   3463       var_axes(1) = x_axes(cur_var%id_axes(1))
   3464       var_axes(2) = y_axes(cur_var%id_axes(2))
   3465       if(cur_var%siz(4) == fileObj%max_ntime) then
   3466         num_var_axes = 3
   3467         var_axes(3) = t_axes
   3468       end if
   3469     else if (cur_var%ndim == 3) then
   3470       num_var_axes = 3
   3471       var_axes(1) = x_axes(cur_var%id_axes(1))
   3472       var_axes(2) = y_axes(cur_var%id_axes(2))
   3473       var_axes(3) = z_axes(cur_var%id_axes(3))
   3474       if(cur_var%siz(4) == fileObj%max_ntime) then
   3475         num_var_axes = 4
   3476         var_axes(4) = t_axes
   3477       end if
   3478     else
   3479       call mpp_error(FATAL, "fms_io(save_restart_border): "//trim(cur_var%name)//" in file "// &
   3480          trim(fileObj%name)//" has more than three dimension (not including time level)")
   3481     end if
   3482 
   3483 ! cycle the loop for pes not a member of the current pelist
   3484     if (.not.ANY(mpp_pe().eq.cur_var%pelist(:))) cycle

Page 129         Source Listing                  SAVE_RESTART_BORDER
2021-06-01 08:54                                 fms_io.F90

   3485 
   3486 ! IN ORDER TO GET CHECKSUM INFO, PERFORM THE GATHER AS IF YOU WILL BE DOING THE WRITE
   3487 ! BUT INSTEAD CHECKSUM THE RESULTING TEMPORARY ARRAY
   3488     allocate(check_val(max(1,cur_var%siz(4))))
   3489     do k = 1, cur_var%siz(4)
   3490 ! cycle the loop for pes not a member of the current pelist
   3491       if (.not.ANY(mpp_pe().eq.cur_var%pelist(:))) cycle
   3492       isc = cur_var%is
   3493       iec = cur_var%ie
   3494       jsc = cur_var%js
   3495       jec = cur_var%je
   3496 ! set up indices for local array segment pointer (pointer is 1-based)
   3497       i1 = 1 + cur_var%x_halo
   3498       i2 = i1 + (iec-isc)
   3499       j1 = 1 + cur_var%y_halo
   3500       j2 = j1 + (jec-jsc)
   3501 ! set up index shifts for global array r*d (1-based, but potentially needs offsets: i_add, j_add)
   3502       i_add = cur_var%ishift
   3503       j_add = cur_var%jshift
   3504 ! If some fields only have one time level, we do not need to write the second level, just keep
   3505 ! the data missing.
   3506       if(k <= cur_var%siz(4)) then
   3507         if ( Associated(fileObj%p2dr(k,j)%p) ) then
   3508           i_glob = cur_var%gsiz(1)
   3509           j_glob = cur_var%gsiz(2)
   3510           if (fileObj%is_root_pe) allocate(r2d(i_glob, j_glob))
   3511           call mpp_gather(isc+i_add, iec+i_add, jsc+j_add, jec+j_add, cur_var%pelist, &
   3512                           fileObj%p2dr(k,j)%p(i1:i2,j1:j2), &
   3513                           r2d, fileObj%is_root_pe)
   3514           check_val(k) = mpp_chksum(r2d, (/mpp_pe()/))
   3515           if (allocated(r2d)) deallocate(r2d)
   3516         else if ( Associated(fileObj%p3dr(k,j)%p) ) then
   3517           i_glob = cur_var%gsiz(1)
   3518           j_glob = cur_var%gsiz(2)
   3519           k_glob = cur_var%gsiz(3)
   3520           if (fileObj%is_root_pe) allocate(r3d(i_glob, j_glob, k_glob))
   3521           call mpp_gather(isc+i_add, iec+i_add, jsc+j_add, jec+j_add, k_glob, cur_var%pelist, &
   3522                           fileObj%p3dr(k,j)%p(i1:i2,j1:j2,:), r3d, fileObj%is_root_pe)
   3523           check_val(k) = mpp_chksum(r3d, (/mpp_pe()/))
   3524           if (allocated(r3d)) deallocate(r3d)
   3525         else
   3526           call mpp_error(FATAL, "fms_io(save_restart_border): no pointer associated with data of field "// &
   3527                trim(cur_var%name)//" in file "//trim(fileObj%name) )
   3528         end if
   3529       end if
   3530     enddo ! end k loop
   3531     call mpp_write_meta(unit,cur_var%field, var_axes(1:num_var_axes), cur_var%name, &
   3532                         cur_var%units,cur_var%longname,pack=pack_size,checksum=check_val)
   3533     if (allocated(check_val)) deallocate(check_val)
   3534   enddo
   3535 
   3536 ! write values for ndim of spatial axes
   3537   do j = 1, naxes_x
   3538      call mpp_write(unit,x_axes(x_axes_indx(j)))
   3539   enddo
   3540   do j = 1, naxes_y
   3541      call mpp_write(unit,y_axes(y_axes_indx(j)))

Page 130         Source Listing                  SAVE_RESTART_BORDER
2021-06-01 08:54                                 fms_io.F90

   3542   enddo
   3543   do j = 1, naxes_z
   3544      call mpp_write(unit,z_axes(z_axes_indx(j)))
   3545   enddo
   3546 
   3547 ! write data of each field
   3548   do k = 1, fileObj%max_ntime
   3549     tlev=k
   3550     do j=1, fileObj%nvar
   3551       cur_var => fileObj%var(j)
   3552       if(cur_var%read_only) cycle
   3553 ! cycle the loop for pes not a member of the current pelist
   3554       if (.not.ANY(mpp_pe().eq.cur_var%pelist(:))) cycle
   3555       isc = cur_var%is
   3556       iec = cur_var%ie
   3557       jsc = cur_var%js
   3558       jec = cur_var%je
   3559 ! set up indices for local array segment pointer (pointer is 1-based)
   3560       i1 = 1 + cur_var%x_halo
   3561       i2 = i1 + (iec-isc)
   3562       j1 = 1 + cur_var%y_halo
   3563       j2 = j1 + (jec-jsc)
   3564 ! set up index shifts for global array r*d (1-based, but potentially needs offsets: i_add, j_add)
   3565       i_add = cur_var%ishift
   3566       j_add = cur_var%jshift
   3567 ! If some fields only have one time level, we do not need to write the second level, just keep
   3568 ! the data missing.
   3569       if(k <= cur_var%siz(4)) then
   3570         if (Associated(fileObj%p2dr(k,j)%p)) then
   3571           i_glob = cur_var%gsiz(1)
   3572           j_glob = cur_var%gsiz(2)
   3573           if (fileObj%is_root_pe) allocate(r2d(i_glob, j_glob))
   3574           call mpp_gather(isc+i_add, iec+i_add, jsc+j_add, jec+j_add, cur_var%pelist, &
   3575                           fileObj%p2dr(k,j)%p(i1:i2,j1:j2),   r2d, fileObj%is_root_pe)
   3576           call mpp_write(unit, cur_var%field, r2d, tlev)
   3577           if (allocated(r2d)) deallocate(r2d)
   3578         else if (Associated(fileObj%p3dr(k,j)%p)) then
   3579           i_glob = cur_var%gsiz(1)
   3580           j_glob = cur_var%gsiz(2)
   3581           k_glob = cur_var%gsiz(3)
   3582           if (fileObj%is_root_pe) allocate(r3d(i_glob, j_glob, k_glob))
   3583           call mpp_gather(isc+i_add, iec+i_add, jsc+j_add, jec+j_add, k_glob, cur_var%pelist, &
   3584                           fileObj%p3dr(k,j)%p(i1:i2,j1:j2,:), r3d, fileObj%is_root_pe)
   3585           call mpp_write(unit, cur_var%field, r3d, tlev)
   3586           if (allocated(r3d)) deallocate(r3d)
   3587         else
   3588           call mpp_error(FATAL, "fms_io(save_restart_border): no pointer associated with data of field "// &
   3589                trim(cur_var%name)//" in file "//trim(fileObj%name) )
   3590         end if
   3591       end if
   3592     enddo ! end j loop
   3593   enddo ! end k loop
   3594   call mpp_close(unit)
   3595 
   3596   cur_var =>NULL()
   3597 
   3598   if(print_chksum) call write_chksum(fileObj, MPP_OVERWR)

Page 131         Source Listing                  SAVE_RESTART_BORDER
2021-06-01 08:54                                 fms_io.F90

   3599   return
   3600 
   3601 end subroutine save_restart_border


ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_save_restart_border_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   3515                                 scalar                    3515,3524,3533,3577,3586          
 ANY                        Func   3484                                 scalar                    3484,3491,3554                    
 ASSOCIATED                 Func   3507                                 scalar                    3507,3516,3570,3578               
 AXISDATA                   Local  3330     R(8)            8     1     10000    TGT              3359,3406,3426,3446               
 AXISNAME                   Local  3349     CHAR            10          scalar                    3401,3403,3405,3421,3423,3425,3441
                                                                                                  ,3443,3445                        
 CHECK_VAL                  Local  3353     I(8)            8     1     1        ALC              3488,3514,3523,3532,3533          
 CUR_VAR                    Local  3339     VAR_TYPE        3328        scalar   PTR,SAVE         3339,3455,3456,3457,3458,3461,3463
                                                                                                  ,3464,3465,3469,3471,3472,3473,347
                                                                                                  4,3479,3484,3488,3489,3491,3492,34
                                                                                                  93,3494,3495,3497,3499,3502,3503,3
                                                                                                  506,3508,3509,3511,3517,3518,3519,
                                                                                                  3521,3527,3531,3532,3551,3552,3554
                                                                                                  ,3555,3556,3557,3558,3560,3562,356
                                                                                                  5,3566,3569,3571,3572,3574,3576,35
                                                                                                  79,3580,3581,3583,3585,3589,3596  
 DIR                        Local  3325     CHAR            256         scalar                    3362,3363,3371,3372               
 DIRECTORY                  Dummy  3320     CHAR                        scalar   ARG,IN           3363                              
 FILEOBJ                    Dummy  3320     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        3356,3365,3377,3378,3379,3382,3393
                                                                                                  ,3394,3395,3397,3413,3414,3415,341
                                                                                                  7,3433,3434,3435,3437,3454,3455,34
                                                                                                  57,3458,3465,3474,3480,3507,3510,3
                                                                                                  512,3513,3516,3520,3522,3527,3548,
                                                                                                  3550,3551,3570,3573,3575,3578,3582
                                                                                                  ,3584,3589,3598                   
 I                          Local  3342     I(4)            4           scalar                    3358,3359                         
 I1                         Local  3345     I(4)            4           scalar                    3497,3498,3512,3522,3560,3561,3575
                                                                                                  ,3584                             
 I2                         Local  3345     I(4)            4           scalar                    3498,3512,3522,3561,3575,3584     
 ID_X_AXES                  Local  3331     I(4)            4     1     40       TGT              3377                              
 ID_Y_AXES                  Local  3332     I(4)            4     1     40       TGT              3378                              
 ID_Z_AXES                  Local  3333     I(4)            4     1     40       TGT              3379                              
 IE                         Local  3344     I(4)            4           scalar                                                      
 IEC                        Local  3343     I(4)            4           scalar                    3493,3498,3511,3521,3556,3561,3574
                                                                                                  ,3583                             
 IS                         Local  3344     I(4)            4           scalar                                                      
 ISC                        Local  3343     I(4)            4           scalar                    3492,3498,3511,3521,3555,3561,3574
                                                                                                  ,3583                             
 I_ADD                      Local  3345     I(4)            4           scalar                    3502,3511,3521,3565,3574,3583     
 I_GLOB                     Local  3347     I(4)            4           scalar                    3508,3510,3517,3520,3571,3573,3579

Page 132         Source Listing                  SAVE_RESTART_BORDER
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,3582                             
 J                          Local  3342     I(4)            4           scalar                    3391,3395,3399,3405,3406,3411,3415
                                                                                                  ,3419,3425,3426,3431,3435,3439,344
                                                                                                  5,3446,3454,3455,3507,3512,3516,35
                                                                                                  22,3537,3538,3540,3541,3543,3544,3
                                                                                                  550,3551,3570,3575,3578,3584      
 J1                         Local  3346     I(4)            4           scalar                    3499,3500,3512,3522,3562,3563,3575
                                                                                                  ,3584                             
 J2                         Local  3346     I(4)            4           scalar                    3500,3512,3522,3563,3575,3584     
 JE                         Local  3344     I(4)            4           scalar                                                      
 JEC                        Local  3343     I(4)            4           scalar                    3495,3500,3511,3521,3558,3563,3574
                                                                                                  ,3583                             
 JS                         Local  3344     I(4)            4           scalar                                                      
 JSC                        Local  3343     I(4)            4           scalar                    3494,3500,3511,3521,3557,3563,3574
                                                                                                  ,3583                             
 J_ADD                      Local  3346     I(4)            4           scalar                    3503,3511,3521,3566,3574,3583     
 J_GLOB                     Local  3347     I(4)            4           scalar                    3509,3510,3518,3520,3572,3573,3580
                                                                                                  ,3582                             
 K                          Local  3342     I(4)            4           scalar                    3489,3506,3507,3512,3514,3516,3522
                                                                                                  ,3523,3548,3549,3569,3570,3575,357
                                                                                                  8,3584                            
 K_GLOB                     Local  3347     I(4)            4           scalar                    3519,3520,3521,3581,3582,3583     
 L                          Local  3342     I(4)            4           scalar                    3393,3394,3395,3397,3413,3414,3415
                                                                                                  ,3417,3433,3434,3435,3437         
 LEN_TRIM                   Func   3371                                 scalar                    3371                              
 MAX                        Func   3488                                 scalar                    3488                              
 MPP_GATHER_PELIST_REAL8_2D Subr   3511                                          PRIV             3511,3574                         
 MPP_GATHER_PELIST_REAL8_3D Subr   3521                                          PRIV             3521,3583                         
 NAXES_X                    Local  3341     I(4)            4           scalar                    3385,3398,3399,3400,3401,3403,3537
 NAXES_Y                    Local  3341     I(4)            4           scalar                    3410,3418,3419,3420,3421,3423,3540
 NAXES_Z                    Local  3341     I(4)            4           scalar                    3430,3438,3439,3440,3441,3443,3543
 NUM_VAR_AXES               Local  3337     I(4)            4           scalar                    3462,3466,3470,3475,3531          
 NUM_X_AXES                 Local  3340     I(4)            4           scalar                    3377,3391                         
 NUM_Y_AXES                 Local  3340     I(4)            4           scalar                    3378,3411                         
 NUM_Z_AXES                 Local  3340     I(4)            4           scalar                    3379,3431                         
 PRESENT                    Func   3363                                 scalar                    3363,3367                         
 R2D                        Local  3351     R(8)            8     2     1        ALC              3510,3513,3514,3515,3573,3575,3576
                                                                                                  ,3577                             
 R3D                        Local  3352     R(8)            8     3     1        ALC              3520,3522,3523,3524,3582,3584,3585
                                                                                                  ,3586                             
 RESTARTNAME                Local  3327     CHAR            80          scalar                    3365,3368,3372,3374               
 RESTARTPATH                Local  3326     CHAR            256         scalar                    3372,3374,3381                    
 SAVE_RESTART_BORDER        Subr   3320                                                                                             
 SIZ_X_AXES                 Local  3331     I(4)            4     1     40       TGT              3377,3406                         
 SIZ_Y_AXES                 Local  3332     I(4)            4     1     40       TGT              3378,3426                         
 SIZ_Z_AXES                 Local  3333     I(4)            4     1     40       TGT              3379,3446                         
 TIME_STAMP                 Dummy  3320     CHAR                        scalar   ARG,IN           3367,3368                         
 TLEV                       Local  3348     R(8)            8           scalar                    3549,3576,3585                    
 TRIM                       Func   3368                                 scalar                    3368,3372,3374,3381,3458,3479,3480
                                                                                                  ,3527,3589                        
 T_AXES                     Local  3336     AXISTYPE        1424        scalar                    3450,3467,3476                    
 UNIT                       Local  3329     I(4)            4           scalar                    3381,3405,3425,3445,3450,3531,3538
                                                                                                  ,3541,3544,3576,3585,3594         
 VAR_AXES                   Local  3338     RECORD          1424  1     4        TGT              3463,3464,3467,3471,3472,3473,3476
                                                                                                  ,3531                             

Page 133         Source Listing                  SAVE_RESTART_BORDER
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 X_AXES                     Local  3335     RECORD          1424  1     40                        3405,3463,3471,3538               
 X_AXES_INDX                Local  3334     I(4)            4     1     40                        3386,3399,3538                    
 Y_AXES                     Local  3335     RECORD          1424  1     40                        3425,3464,3472,3541               
 Y_AXES_INDX                Local  3334     I(4)            4     1     40                        3387,3419,3541                    
 Z_AXES                     Local  3335     RECORD          1424  1     40                        3445,3473,3544                    
 Z_AXES_INDX                Local  3334     I(4)            4     1     40                        3388,3439,3544                    

Page 134         Source Listing                  SAVE_RESTART_BORDER
2021-06-01 08:54                                 fms_io.F90

   3602 
   3603 
   3604 !-------------------------------------------------------------------------------
   3605 !
   3606 !  restores all registered border/halo variables to restart files. Those
   3607 !  variables are set through register_restart_field (region option)
   3608 !
   3609 !-------------------------------------------------------------------------------
   3610 subroutine restore_state_border(fileObj, directory, nonfatal_missing_files)
   3611   type(restart_file_type),    intent(inout) :: fileObj    !< The restart_file_type object that has
   3612 !! information about the restarts
   3613   character(len=*), optional, intent(in)    :: directory  !< The directory in which to seek restart files
   3614   logical,          optional, intent(in)    :: nonfatal_missing_files !< If true, the inability to find
   3615 !! the expected restart file is not necessarily fatal
   3616 ! Arguments:
   3617 !  (in)      directory - The directory where the restart or save
   3618 !                        files should be found. The default is 'INPUT'
   3619   character(len=128) :: dir
   3620   character(len=256) :: restartpath ! The restart file path (dir/file).
   3621   character(len=200) :: filepath    ! The path (dir/file) to the file being opened.
   3622   character(len=80)  :: varname     ! A variable's name.
   3623   character(len=256) :: mesg        ! Message to be constructed for checksum error.
   3624   type(var_type), pointer, save       :: cur_var=>NULL()
   3625   integer                             :: ndim, nvar, natt, ntime, tlev, siz
   3626   type(fieldtype), allocatable        :: fields(:)
   3627   logical                             :: fexist
   3628   integer                             :: j, n, l, k, unit
   3629   real, allocatable, dimension(:,:,:) :: r3d
   3630   real, allocatable, dimension(:,:)   :: r2d
   3631   integer                             :: isc, iec, jsc, jec
   3632   logical                             :: check_exist
   3633   integer                             :: i1, i2, j1, j2
   3634   integer                             :: ishift, jshift, i_add, j_add
   3635   integer                             :: i_glob, j_glob, k_glob
   3636   integer(8), dimension(3)    :: checksum_file
   3637   integer(8)                  :: checksum_data
   3638   logical                             :: is_there_a_checksum
   3639   logical                             :: fatal_missing_files
   3640 
   3641   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(restore_state_border): " // &
   3642       "restart_file_type data must be initialized by calling register_restart_field before using it")
   3643 
   3644   dir = 'INPUT'
   3645   if(present(directory)) dir = directory
   3646 
   3647   fatal_missing_files = .true.
   3648   if (present(nonfatal_missing_files)) fatal_missing_files = .not.nonfatal_missing_files
   3649 
   3650   if(len_trim(dir) > 0) then
   3651      restartpath = trim(dir)//"/"// trim(fileObj%name)
   3652   else
   3653      restartpath = trim(fileObj%name)
   3654   end if
   3655 
   3656 !--- first open the restart files
   3657 !--- NOTE: For distributed restart files, we are assuming there is only one file that might exist.
   3658 

Page 135         Source Listing                  RESTORE_STATE_BORDER
2021-06-01 08:54                                 fms_io.F90

   3659   inquire (file=trim(restartpath), exist=fexist)
   3660   if (.not.fexist) then ; if (fatal_missing_files) then
   3661      call mpp_error(FATAL, "fms_io(restore_state_border): unable to find any restart files "// &
   3662         "specified by "//trim(restartpath))
   3663   elseif (mpp_pe() == mpp_root_pe()) then
   3664      call mpp_error(WARNING, "fms_io(restore_state_border): unable to find any restart files "// &
   3665         "specified by "//trim(restartpath))
   3666   endif ; endif
   3667 
   3668   if (fexist) then
   3669     call mpp_open(unit,trim(restartpath),action=MPP_RDONLY,form=MPP_NETCDF,threading=MPP_SINGLE,&
   3670                   fileset=MPP_SINGLE, is_root_pe=fileObj%is_root_pe)
   3671 
   3672 ! Read each variable from the first file in which it is found.
   3673     call mpp_get_info(unit, ndim, nvar, natt, ntime)
   3674 
   3675     allocate(fields(nvar))
   3676     call mpp_get_fields(unit,fields(1:nvar))
   3677 
   3678     do j=1,fileObj%nvar
   3679       cur_var => fileObj%var(j)
   3680 ! cycle the loop for pes not a member of the current pelist
   3681       if (.not.ANY(mpp_pe().eq.cur_var%pelist(:))) cycle
   3682       isc = cur_var%is
   3683       iec = cur_var%ie
   3684       jsc = cur_var%js
   3685       jec = cur_var%je
   3686 ! set up indices for local array segment pointer (pointer is 1-based)
   3687       i1 = 1 + cur_var%x_halo
   3688       i2 = i1 + (iec-isc)
   3689       j1 = 1 + cur_var%y_halo
   3690       j2 = j1 + (jec-jsc)
   3691 ! set up index shifts for global array r*d (1-based, but potentially needs offsets: i_add, j_add)
   3692       i_add = cur_var%ishift
   3693       j_add = cur_var%jshift
   3694       do l=1, nvar
   3695         call mpp_get_atts(fields(l),name=varname)
   3696         if (lowercase(trim(varname)) == lowercase(trim(cur_var%name))) then
   3697           cur_var%initialized = .true.
   3698           check_exist = mpp_attribute_exist(fields(l),"checksum")
   3699           checksum_file = 0
   3700           is_there_a_checksum = .false.
   3701           if ( check_exist  ) then
   3702             call mpp_get_atts(fields(l),checksum=checksum_file)
   3703             is_there_a_checksum = .true.
   3704           endif
   3705           if (.NOT. checksum_required) is_there_a_checksum = .false. ! Do not need to do data checksumming.
   3706 
   3707           do k = 1, cur_var%siz(4)
   3708             tlev = k
   3709 ! read the field and scatter it to the rest of the pelist
   3710             if (Associated(fileObj%p2dr(k,j)%p)) then
   3711               i_glob = cur_var%gsiz(1)
   3712               j_glob = cur_var%gsiz(2)
   3713               if (fileObj%is_root_pe) allocate(r2d(i_glob, j_glob))
   3714               call mpp_read(unit, fields(l), r2d, tlev)
   3715               call mpp_scatter(isc+i_add, iec+i_add, jsc+j_add, jec+j_add, cur_var%pelist, &

Page 136         Source Listing                  RESTORE_STATE_BORDER
2021-06-01 08:54                                 fms_io.F90

   3716                                fileObj%p2dr(k,j)%p(i1:i2,j1:j2), r2d, fileObj%is_root_pe)
   3717               if ((fileObj%is_root_pe) .and. (is_there_a_checksum)) checksum_data = mpp_chksum(r2d, (/mpp_pe()/) )
   3718               if (allocated(r2d)) deallocate(r2d)
   3719             else if (Associated(fileObj%p3dr(k,j)%p)) then
   3720               i_glob = cur_var%gsiz(1)
   3721               j_glob = cur_var%gsiz(2)
   3722               k_glob = cur_var%gsiz(3)
   3723               if (fileObj%is_root_pe) allocate(r3d(i_glob, j_glob, k_glob))
   3724               call mpp_read(unit, fields(l), r3d, tlev)
   3725               call mpp_scatter(isc+i_add, iec+i_add, jsc+j_add, jec+j_add, k_glob, cur_var%pelist, &
   3726                                fileObj%p3dr(k,j)%p(i1:i2,j1:j2,:), r3d, fileObj%is_root_pe)
   3727               if ((fileObj%is_root_pe) .and. (is_there_a_checksum)) checksum_data = mpp_chksum(r3d, (/mpp_pe()/) )
   3728               if (allocated(r3d)) deallocate(r3d)
   3729             else
   3730               call mpp_error(FATAL, "fms_io(retore_state_border): no pointer associated with data of field "// &
   3731                     trim(cur_var%name)//" in file "//trim(fileObj%name) )
   3732             end if
   3733             if ((fileObj%is_root_pe) .and. (is_there_a_checksum) .and. (checksum_file(k)/=checksum_data)) then
   3734               write (mesg,'(a,Z16,a,Z16,a)') "Checksum of input field "// uppercase(trim(varname))//" ", checksum_data,&
   3735                            " does not match value ", checksum_file(k), " stored in "//uppercase(trim(fileObj%name)//"." )
   3736               call mpp_error(FATAL, "fms_io(restore_state_border): "//trim(mesg) )
   3737             endif
   3738           end do
   3739           exit ! Start search for next restart variable.
   3740         endif
   3741       enddo
   3742     enddo
   3743 
   3744     deallocate(fields)
   3745 
   3746     call close_file(unit)
   3747   endif ! fexist is true
   3748 
   3749   cur_var =>NULL()
   3750 
   3751 ! check whether all fields have been found
   3752   do j = 1, fileObj%nvar
   3753     if (.not.ANY(mpp_pe().eq.fileObj%var(j)%pelist(:))) cycle
   3754     if (.NOT. fileObj%var(j)%initialized) then
   3755       if (fileObj%var(j)%mandatory) then
   3756         call mpp_error(FATAL, "fms_io(restore_state_border): unable to find mandatory variable "// &
   3757                        trim(fileObj%var(j)%name)//" in restart file "//trim(fileObj%name) )
   3758       end if
   3759     end if
   3760   end do
   3761 
   3762   if(print_chksum) call write_chksum(fileObj, MPP_RDONLY )
   3763   return
   3764 
   3765 end subroutine restore_state_border

Page 137         Source Listing                  RESTORE_STATE_BORDER
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_restore_state_border_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   3718                                 scalar                    3718,3728                         
 ANY                        Func   3681                                 scalar                    3681,3753                         
 ASSOCIATED                 Func   3641                                 scalar                    3641,3710,3719                    
 CHECKSUM_DATA              Local  3637     I(8)            8           scalar                    3717,3727,3733,3734               
 CHECKSUM_FILE              Local  3636     I(8)            8     1     3        TGT              3699,3702,3733,3735               
 CHECKSUM_REQUIRED          Local  3705     L(4)            4           scalar                    633,637,3705,4039,4362            
 CHECK_EXIST                Local  3632     L(4)            4           scalar                    3698,3701                         
 CLOSE_FILE                 Subr   3746                                                           593,3746,4167,4483                
 CUR_VAR                    Local  3624     VAR_TYPE        3328        scalar   PTR,SAVE         3624,3679,3681,3682,3683,3684,3685
                                                                                                  ,3687,3689,3692,3693,3696,3697,370
                                                                                                  7,3711,3712,3715,3720,3721,3722,37
                                                                                                  25,3731,3749                      
 DIR                        Local  3619     CHAR            128         scalar                    3644,3645,3650,3651               
 DIRECTORY                  Dummy  3610     CHAR                        scalar   ARG,IN           3645                              
 FATAL_MISSING_FILES        Local  3639     L(4)            4           scalar                    3647,3648,3660                    
 FEXIST                     Local  3627     L(4)            4           scalar                    3659,3660,3668                    
 FIELDS                     Local  3626     RECORD          1096  1     1        ALC              3675,3676,3695,3698,3702,3714,3724
                                                                                                  ,3744                             
 FIELDTYPE                  Type   3626                                 scalar                    206,322,3626,3882,4220,5150,8321,8
                                                                                                  492,12213,12402                   
 FILEOBJ                    Dummy  3610     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        3641,3651,3653,3670,3678,3679,3710
                                                                                                  ,3713,3716,3717,3719,3723,3726,372
                                                                                                  7,3731,3733,3735,3752,3753,3754,37
                                                                                                  55,3757,3762                      
 FILEPATH                   Local  3621     CHAR            200         scalar                                                      
 I1                         Local  3633     I(4)            4           scalar                    3687,3688,3716,3726               
 I2                         Local  3633     I(4)            4           scalar                    3688,3716,3726                    
 IEC                        Local  3631     I(4)            4           scalar                    3683,3688,3715,3725               
 ISC                        Local  3631     I(4)            4           scalar                    3682,3688,3715,3725               
 ISHIFT                     Local  3634     I(4)            4           scalar                                                      
 IS_THERE_A_CHECKSUM        Local  3638     L(4)            4           scalar                    3700,3703,3705,3717,3727,3733     
 I_ADD                      Local  3634     I(4)            4           scalar                    3692,3715,3725                    
 I_GLOB                     Local  3635     I(4)            4           scalar                    3711,3713,3720,3723               
 J                          Local  3628     I(4)            4           scalar                    3678,3679,3710,3716,3719,3726,3752
                                                                                                  ,3753,3754,3755,3757              
 J1                         Local  3633     I(4)            4           scalar                    3689,3690,3716,3726               
 J2                         Local  3633     I(4)            4           scalar                    3690,3716,3726                    
 JEC                        Local  3631     I(4)            4           scalar                    3685,3690,3715,3725               
 JSC                        Local  3631     I(4)            4           scalar                    3684,3690,3715,3725               
 JSHIFT                     Local  3634     I(4)            4           scalar                                                      
 J_ADD                      Local  3634     I(4)            4           scalar                    3693,3715,3725                    
 J_GLOB                     Local  3635     I(4)            4           scalar                    3712,3713,3721,3723               
 K                          Local  3628     I(4)            4           scalar                    3707,3708,3710,3716,3719,3726,3733

Page 138         Source Listing                  RESTORE_STATE_BORDER
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,3735                             
 K_GLOB                     Local  3635     I(4)            4           scalar                    3722,3723,3725                    
 L                          Local  3628     I(4)            4           scalar                    3694,3695,3698,3702,3714,3724     
 LEN_TRIM                   Func   3650                                 scalar                    3650                              
 LOWERCASE                  Func   3696     CHAR                        scalar   TGT,PRIV         219,3696,4030,4353,5162,5194,7443,
                                                                                                  7477,7515,7558,7692,7694,7709,7755
                                                                                                  ,7756,7793,7813,7827,7839,7860,835
                                                                                                  6,8380,8512,8525,12274,12275,12299
                                                                                                  ,12300,12449                      
 MESG                       Local  3623     CHAR            256         scalar                    3734,3736                         
 MPP_ATTRIBUTE_EXIST        Func   3698     L(4)            4           scalar   PRIV             205,3698,4032,4355                
 MPP_GET_ATTS               Local  3695                                 scalar   PRIV             201,3695,3702,4029,4036,4352,4359,
                                                                                                  5161,5163,5164,5165,5169,5172,5193
                                                                                                  ,7684,7691,7708,8084,8112,8353,837
                                                                                                  9,8511,8524,12272,12276,12278,1228
                                                                                                  1,12296,12447                     
 MPP_GET_FIELDS             Subr   3676                                          PRIV             201,3676,3992,4347,5159,8347,8508,
                                                                                                  8522,12263,12441                  
 MPP_GET_FIELD_ATTS         Subr   3695                                          PRIV             3695,3702,4029,4036,4352,4359,5161
                                                                                                  ,5163,5164,5165,8353,8511,8524,122
                                                                                                  72,12276,12278,12447              
 MPP_GET_INFO               Subr   3673                                          PRIV             201,3673,3989,4344,5153,8082,8110,
                                                                                                  8340,8506,8520,12245,12433        
 MPP_RDONLY                 Param  3669     I(4)            4           scalar   PRIV             207,3669,3762,3783,3815,3945,3970,
                                                                                                  4181,4300,4325,7403,7413,7445,7479
                                                                                                  ,7517,7815,8062,8081,8109,8285,828
                                                                                                  8,8295,8299,8598,8678,12082,12090 
 MPP_READ                   Local  3714                                 scalar   PRIV             200,3714,3724,4045,4048,4051,4055,
                                                                                                  4059,4063,4067,4071,4076,4083,4091
                                                                                                  ,4102,4105,4108,4112,4116,4120,412
                                                                                                  5,4132,4140,4371,4374,4377,4381,43
                                                                                                  85,4389,4394,4401,4409,4420,4423,4
                                                                                                  426,4430,4434,4438,4443,4450,4458,
                                                                                                  5401,5404,5668,5716,5762          
 MPP_READ_R2D_R8            Subr   3714                                          PRIV             3714,4108,4132,4426,4450          
 MPP_READ_R3D_R8            Subr   3724                                          PRIV             3724,4112,4140,4430,4458,5401     
 MPP_SCATTER                Local  3715                                 scalar   PRIV             221,3715,3725                     
 MPP_SCATTER_PELIST_REAL8_2                                                                                                         
 D                          Subr   3715                                          PRIV             3715                              
 MPP_SCATTER_PELIST_REAL8_3                                                                                                         
 D                          Subr   3725                                          PRIV             3725                              
 N                          Local  3628     I(4)            4           scalar                                                      
 NATT                       Local  3625     I(4)            4           scalar                    3673                              
 NDIM                       Local  3625     I(4)            4           scalar                    3673                              
 NONFATAL_MISSING_FILES     Dummy  3610     L(4)            4           scalar   ARG,IN           3648                              
 NTIME                      Local  3625     I(4)            4           scalar                    3673                              
 NVAR                       Local  3625     I(4)            4           scalar                    3673,3675,3676,3694               
 PRESENT                    Func   3645                                 scalar                    3645,3648                         
 R2D                        Local  3630     R(8)            8     2     1        ALC              3713,3714,3716,3717,3718          
 R3D                        Local  3629     R(8)            8     3     1        ALC              3723,3724,3726,3727,3728          
 RESTARTPATH                Local  3620     CHAR            256         scalar                    3651,3653,3659,3662,3665,3669     
 RESTORE_STATE_BORDER       Subr   3610                                                                                             
 SIZ                        Local  3625     I(4)            4           scalar                                                      
 TLEV                       Local  3625     I(4)            4           scalar                    3708,3714,3724                    
 TRIM                       Func   3651                                 scalar                    3651,3653,3659,3662,3665,3669,3696

Page 139         Source Listing                  RESTORE_STATE_BORDER
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,3731,3734,3735,3736,3757         
 UNIT                       Local  3628     I(4)            4           scalar                    3669,3673,3676,3714,3724,3746     
 UPPERCASE                  Func   3734     CHAR                        scalar   TGT,PRIV         220,3734,3735,4151,4152,4469,4470 
 VARNAME                    Local  3622     CHAR            80          scalar                    3695,3696,3734                    
 WARNING                    Param  3664     I(4)            4           scalar   PRIV             218,3664,3982,4337,4609,7398,7875,
                                                                                                  7909                              


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 VAR_TYPE.INITIALIZED       L(4)            4     3132           scalar   PRIV             3697,3754,3815,4031,4172,4354,4487 
                                                                                           ,4636,6989,7016,7053,7095,7138,717 
                                                                                           9,7206,7240,7253,7287,7300,7335,73 
                                                                                           48,9562                            
 VAR_TYPE.MANDATORY         L(4)            4     3136           scalar   PRIV             3755,4173,4488,4635,4679,9563,9667 

Page 140         Source Listing                  RESTORE_STATE_BORDER
2021-06-01 08:54                                 fms_io.F90

   3766 
   3767 !-------------------------------------------------------------------------------
   3768 !    This subroutine will calculate chksum and print out chksum information.
   3769 !
   3770 subroutine write_chksum(fileObj, action)
   3771   type(restart_file_type), intent(inout) :: fileObj
   3772   integer,                 intent(in)    :: action
   3773   integer(8)                     :: data_chksum
   3774   integer                                :: j, k, outunit
   3775   integer                                :: isc, iec, jsc, jec
   3776   integer                                :: isg, ieg, jsg, jeg
   3777   integer                                :: ishift, jshift, iadd, jadd
   3778   type(var_type), pointer, save          :: cur_var=>NULL()
   3779   character(len=32)                      :: routine_name
   3780 
   3781   if(action == MPP_OVERWR) then
   3782      routine_name = "save_restart"
   3783   else if(action == MPP_RDONLY) then
   3784      routine_name = "restore_state"
   3785   else
   3786      call mpp_error(FATAL, "fms_io_mod(write_chksum): action should be MPP_OVERWR or MPP_RDONLY")
   3787   endif
   3788 
   3789   do j=1,fileObj%nvar
   3790      cur_var => fileObj%var(j)
   3791 
   3792      if ( cur_var%domain_idx > 0) then
   3793         call mpp_get_compute_domain(array_domain(cur_var%domain_idx), isc, iec, jsc, jec)
   3794         call mpp_get_global_domain(array_domain(cur_var%domain_idx), isg, ieg, jsg, jeg)
   3795         call mpp_get_domain_shift(array_domain(cur_var%domain_idx), ishift, jshift, cur_var%position)
   3796      else if (ASSOCIATED(Current_domain)) then
   3797         call mpp_get_compute_domain(Current_domain, isc, iec, jsc, jec)
   3798         call mpp_get_global_domain(Current_domain, isg, ieg, jsg, jeg)
   3799         call mpp_get_domain_shift(Current_domain, ishift, jshift, cur_var%position)
   3800      else
   3801         iec = cur_var%ie
   3802         isc = cur_var%is
   3803         ieg = cur_var%ie
   3804         jec = cur_var%je
   3805         jsc = cur_var%js
   3806         jeg = cur_var%je
   3807         ishift = 0
   3808         jshift = 0
   3809      endif
   3810      iadd = iec-isc ! Size of the i-dimension on this processor (-1 as it is an increment)
   3811      jadd = jec-jsc ! Size of the j-dimension on this processor
   3812      if(iec == ieg) iadd = iadd + ishift
   3813      if(jec == jeg) jadd = jadd + jshift
   3814 
   3815      if(action == MPP_OVERWR .OR. (action == MPP_RDONLY .AND. cur_var%initialized) ) then
   3816         do k = 1, cur_var%siz(4)
   3817            if ( Associated(fileObj%p0dr(k,j)%p) ) then
   3818               data_chksum = mpp_chksum(fileObj%p0dr(k,j)%p, (/mpp_pe()/) )
   3819            else if ( Associated(fileObj%p1dr(k,j)%p) ) then
   3820               data_chksum = mpp_chksum(fileObj%p1dr(k,j)%p, (/mpp_pe()/) )
   3821            else if ( Associated(fileObj%p2dr(k,j)%p) ) then
   3822               data_chksum = mpp_chksum(fileObj%p2dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd) )

Page 141         Source Listing                  WRITE_CHKSUM
2021-06-01 08:54                                 fms_io.F90

   3823            else if ( Associated(fileObj%p3dr(k,j)%p) ) then
   3824               data_chksum = mpp_chksum(fileObj%p3dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd, :) )
   3825            else if ( Associated(fileObj%p4dr(k,j)%p) ) then
   3826               data_chksum = mpp_chksum(fileObj%p4dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd, :, :) )
   3827            else if ( Associated(fileObj%p0di(k,j)%p) ) then
   3828               data_chksum = fileObj%p0di(k,j)%p
   3829            else if ( Associated(fileObj%p1di(k,j)%p) ) then
   3830               data_chksum = mpp_chksum(fileObj%p1di(k,j)%p, (/mpp_pe()/) )
   3831            else if ( Associated(fileObj%p2di(k,j)%p) ) then
   3832               data_chksum = mpp_chksum(fileObj%p2di(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd) )
   3833            else if ( Associated(fileObj%p3di(k,j)%p) ) then
   3834               data_chksum = mpp_chksum(fileObj%p3di(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd, :))
   3835            else
   3836               call mpp_error(FATAL, "fms_io(write_chksum): There is no pointer associated with the data of  field "// &
   3837                    trim(cur_var%name)//" of file "//trim(fileObj%name) )
   3838            end if
   3839            outunit = stdout()
   3840            write(outunit,'(a, I1, a, Z16)')'fms_io('//trim(routine_name)//'): At time level = ', k, ', chksum for "'// &
   3841                 trim(cur_var%name)// '" of "'// trim(fileObj%name)// '" = ', data_chksum
   3842 
   3843         enddo
   3844      endif
   3845   enddo
   3846   cur_var =>NULL()
   3847 
   3848 end subroutine write_chksum


ENTRY POINTS

  Name                                   
                                         
 fms_io_mod_mp_write_chksum_             

Page 142         Source Listing                  WRITE_CHKSUM
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTION                     Dummy  3770     I(4)            4           scalar   ARG,IN           3781,3783,3815                    
 ASSOCIATED                 Func   3796                                 scalar                    3796,3817,3819,3821,3823,3825,3827
                                                                                                  ,3829,3831,3833                   
 CUR_VAR                    Local  3778     VAR_TYPE        3328        scalar   PTR,SAVE         3778,3790,3792,3793,3794,3795,3799
                                                                                                  ,3801,3802,3803,3804,3805,3806,381
                                                                                                  5,3816,3822,3824,3826,3832,3834,38
                                                                                                  37,3841,3846                      
 DATA_CHKSUM                Local  3773     I(8)            8           scalar                    3818,3820,3822,3824,3826,3828,3830
                                                                                                  ,3832,3834,3841                   
 FILEOBJ                    Dummy  3770     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        3789,3790,3817,3818,3819,3820,3821
                                                                                                  ,3822,3823,3824,3825,3826,3827,382
                                                                                                  8,3829,3830,3831,3832,3833,3834,38
                                                                                                  37,3841                           
 IADD                       Local  3777     I(4)            4           scalar                    3810,3812,3822,3824,3826,3832,3834
 IEC                        Local  3775     I(4)            4           scalar                    3793,3797,3801,3810,3812          
 IEG                        Local  3776     I(4)            4           scalar                    3794,3798,3803,3812               
 ISC                        Local  3775     I(4)            4           scalar                    3793,3797,3802,3810               
 ISG                        Local  3776     I(4)            4           scalar                    3794,3798                         
 ISHIFT                     Local  3777     I(4)            4           scalar                    3795,3799,3807,3812               
 J                          Local  3774     I(4)            4           scalar                    3789,3790,3817,3818,3819,3820,3821
                                                                                                  ,3822,3823,3824,3825,3826,3827,382
                                                                                                  8,3829,3830,3831,3832,3833,3834   
 JADD                       Local  3777     I(4)            4           scalar                    3811,3813,3822,3824,3826,3832,3834
 JEC                        Local  3775     I(4)            4           scalar                    3793,3797,3804,3811,3813          
 JEG                        Local  3776     I(4)            4           scalar                    3794,3798,3806,3813               
 JSC                        Local  3775     I(4)            4           scalar                    3793,3797,3805,3811               
 JSG                        Local  3776     I(4)            4           scalar                    3794,3798                         
 JSHIFT                     Local  3777     I(4)            4           scalar                    3795,3799,3808,3813               
 K                          Local  3774     I(4)            4           scalar                    3816,3817,3818,3819,3820,3821,3822
                                                                                                  ,3823,3824,3825,3826,3827,3828,382
                                                                                                  9,3830,3831,3832,3833,3834,3840   
 OUTUNIT                    Local  3774     I(4)            4           scalar                    3839,3840                         
 ROUTINE_NAME               Local  3779     CHAR            32          scalar                    3782,3784,3840                    
 STDOUT                     Func   3839     I(4)            4           scalar   PRIV             218,3839,8596,8676                
 TRIM                       Func   3837                                 scalar                    3837,3840,3841                    
 WRITE_CHKSUM               Subr   3770                                                           2480,3598,3762,4181               

Page 143         Source Listing                  WRITE_CHKSUM
2021-06-01 08:54                                 fms_io.F90

   3849 
   3850 !-------------------------------------------------------------------------------
   3851 !
   3852 !    This subroutine reads the model state from previously
   3853 !    generated files.  All restart variables are read from the first
   3854 !    file in the input filename list in which they are found.
   3855 
   3856 subroutine restore_state_all(fileObj, directory, nonfatal_missing_files)
   3857   type(restart_file_type),    intent(inout) :: fileObj    !< The restart_file_type object that has
   3858 !! information about the restarts
   3859   character(len=*), optional, intent(in)    :: directory  !< The directory in which to seek restart files
   3860   logical,          optional, intent(in)    :: nonfatal_missing_files !< If true, the inability to find
   3861 !! the expected restart file is not necessarily fatal
   3862 
   3863 ! Arguments:
   3864 !  (in)      directory - The directory where the restart or save
   3865 !                        files should be found. The default is 'INPUT'
   3866 
   3867   character(len=128) :: dir
   3868   character(len=256) :: restartpath ! The restart file path (dir/file).
   3869   character(len=200) :: filepath    ! The path (dir/file) to the file being opened.
   3870   character(len=8)   :: suffix      ! A suffix (like "_2") that is added to any
   3871 ! additional restart files.
   3872   character(len=80)  :: varname     ! A variable's name.
   3873   character(len=256) :: filename
   3874   character(len=256) :: mesg        ! Message to be constructed for checksum error.
   3875   integer            :: num_restart ! The number of restart files that have already
   3876 ! been opened.
   3877   integer            :: nfile       ! The number of files (restart files and others
   3878 ! explicitly in filename) that are open.
   3879   integer   :: unit(max_split_file) ! The mpp unit of all open files.
   3880   type(var_type), pointer, save       :: cur_var=>NULL()
   3881   integer                             :: ndim, nvar, natt, ntime, tlev, siz
   3882   type(fieldtype), allocatable        :: fields(:)
   3883   logical                             :: fexist, domain_present
   3884   integer                             :: j, n, l, k, missing_fields, domain_idx
   3885   integer                             :: tile_id(1)
   3886   real, allocatable, dimension(:,:,:) :: r3d
   3887   real, allocatable, dimension(:,:)   :: r2d
   3888   real, allocatable, dimension(:)     :: r1d
   3889   real                                :: r0d
   3890   type(domain2d), pointer, save       :: io_domain=>NULL()
   3891   integer                             :: isc, iec, jsc, jec
   3892   logical                             :: check_exist
   3893   integer                             :: isg, ieg, jsg, jeg
   3894   integer                             :: ishift, jshift, iadd, jadd
   3895   integer(8), dimension(3)    :: checksum_file
   3896   integer(8)                  :: checksum_data
   3897   logical                             :: is_there_a_checksum
   3898   logical                             :: fatal_missing_files
   3899 
   3900   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(restore_state_all): " // &
   3901       "restart_file_type data must be initialized by calling register_restart_field before using it")
   3902 
   3903   dir = 'INPUT'
   3904   if(present(directory)) dir = directory
   3905 

Page 144         Source Listing                  RESTORE_STATE_ALL
2021-06-01 08:54                                 fms_io.F90

   3906   fatal_missing_files = .true.
   3907   if (present(nonfatal_missing_files)) fatal_missing_files = .not.nonfatal_missing_files
   3908 
   3909   num_restart = 0
   3910   nfile = 0
   3911   if(len_trim(dir) > 0) then
   3912      restartpath = trim(dir)//"/"// trim(fileObj%name)
   3913   else
   3914      restartpath = trim(fileObj%name)
   3915   end if
   3916 
   3917   domain_present = .false.
   3918   do j = 1, fileObj%nvar
   3919      if (fileObj%var(j)%domain_present) then
   3920         domain_present = .true.
   3921         domain_idx = fileObj%var(j)%domain_idx
   3922         exit
   3923      end if
   3924   end do
   3925 
   3926 !--- first open all the restart files
   3927 !--- NOTE: For distributed restart file, we are assuming there is only one file exist.
   3928   fexist = .FALSE.
   3929   if(domain_present) then
   3930      io_domain => mpp_get_io_domain(array_domain(domain_idx))
   3931      if(associated(io_domain)) then
   3932         tile_id = mpp_get_tile_id(io_domain)
   3933         write(filename, '(a,i4.4)' ) trim(restartpath)//'.', tile_id(1)
   3934         inquire (file=trim(filename), exist = fexist)
   3935         if( .NOT. fexist ) then
   3936            write(filename, '(a,i6.6)' ) trim(restartpath)//'.', tile_id(1)
   3937            inquire (file=trim(filename), exist = fexist)
   3938         endif
   3939      endif
   3940      io_domain => NULL()
   3941   endif
   3942   if(fexist) then
   3943      nfile = 1
   3944 !--- domain_present is true
   3945      call mpp_open(unit(nfile), trim(restartpath), form=form,action=MPP_RDONLY, &
   3946            threading=MPP_MULTI, domain=array_domain(domain_idx) )
   3947   else
   3948      do while(.true.)
   3949         if (num_restart < 10) then
   3950            write(suffix,'("_",I1)') num_restart
   3951         else
   3952            write(suffix,'("_",I2)') num_restart
   3953         endif
   3954         if (num_restart > 0) then
   3955            siz = len_trim(restartpath)
   3956            if(restartpath(siz-2:siz) == ".nc") then
   3957               filepath = restartpath(1:siz-3)//trim(suffix)
   3958            else
   3959               filepath = trim(restartpath) // trim(suffix)
   3960            end if
   3961         else
   3962            filepath = trim(restartpath)

Page 145         Source Listing                  RESTORE_STATE_ALL
2021-06-01 08:54                                 fms_io.F90

   3963         end if
   3964         inquire (file=trim(filepath), exist=fexist)
   3965         if(.not. fexist) inquire(file=trim(filepath)//".nc", exist=fexist)
   3966         if(fexist) then
   3967            nfile = nfile + 1
   3968            if(nfile > max_split_file) call mpp_error(FATAL, &
   3969                 "fms_io(restore_state_all): nfile is larger than max_split_file, increase max_split_file")
   3970            call mpp_open(unit(nfile), trim(filepath), form=form,action=MPP_RDONLY,threading=MPP_MULTI, &
   3971                 fileset=MPP_SINGLE)
   3972         else
   3973            exit
   3974         end if
   3975         num_restart = num_restart + 1
   3976      end do
   3977   end if
   3978   if (nfile == 0) then ; if (fatal_missing_files) then
   3979      call mpp_error(FATAL, "fms_io(restore_state_all): unable to find any restart files "// &
   3980         "specified by "//trim(restartpath))
   3981   elseif (mpp_pe() == mpp_root_pe()) then
   3982      call mpp_error(WARNING, "fms_io(restore_state_all): unable to find any restart files "// &
   3983         "specified by "//trim(restartpath))
   3984   endif ; endif
   3985 
   3986 
   3987 ! Read each variable from the first file in which it is found.
   3988   do n=1,nfile
   3989      call mpp_get_info(unit(n), ndim, nvar, natt, ntime)
   3990 
   3991      allocate(fields(nvar))
   3992      call mpp_get_fields(unit(n),fields(1:nvar))
   3993 
   3994      missing_fields = 0
   3995 
   3996      do j=1,fileObj%nvar
   3997         cur_var => fileObj%var(j)
   3998         domain_present = cur_var%domain_present
   3999         domain_idx = cur_var%domain_idx
   4000 
   4001         if ( cur_var%domain_idx > 0) then
   4002           call mpp_get_compute_domain(array_domain(cur_var%domain_idx), isc, iec, jsc, jec)
   4003           call mpp_get_global_domain(array_domain(cur_var%domain_idx), isg, ieg, jsg, jeg)
   4004           call mpp_get_domain_shift(array_domain(cur_var%domain_idx), ishift, jshift, cur_var%position)
   4005         else if (ASSOCIATED(Current_domain)) then
   4006           call mpp_get_compute_domain(Current_domain, isc, iec, jsc, jec)
   4007           call mpp_get_global_domain(Current_domain, isg, ieg, jsg, jeg)
   4008           call mpp_get_domain_shift(Current_domain, ishift, jshift, cur_var%position)
   4009        else
   4010           iec = cur_var%ie
   4011           isc = cur_var%is
   4012           ieg = cur_var%ie
   4013           jec = cur_var%je
   4014           jsc = cur_var%js
   4015           jeg = cur_var%je
   4016           ishift = 0
   4017           jshift = 0
   4018         endif
   4019         iadd = iec-isc ! Size of the i-dimension on this processor (-1 as it is an increment)

Page 146         Source Listing                  RESTORE_STATE_ALL
2021-06-01 08:54                                 fms_io.F90

   4020         jadd = jec-jsc ! Size of the j-dimension on this processor
   4021         if(iec == ieg) iadd = iadd + ishift
   4022         if(jec == jeg) jadd = jadd + jshift
   4023 
   4024         isc = cur_var%is
   4025         iec = cur_var%ie
   4026         jsc = cur_var%js
   4027         jec = cur_var%je
   4028         do l=1, nvar
   4029            call mpp_get_atts(fields(l),name=varname)
   4030            if (lowercase(trim(varname)) == lowercase(trim(cur_var%name))) then
   4031               cur_var%initialized = .true.
   4032               check_exist = mpp_attribute_exist(fields(l),"checksum")
   4033               checksum_file = 0
   4034               is_there_a_checksum = .false.
   4035               if ( check_exist ) then
   4036                 call mpp_get_atts(fields(l),checksum=checksum_file)
   4037                 is_there_a_checksum = .true.
   4038               endif
   4039               if (.NOT. checksum_required ) is_there_a_checksum = .false. ! Do not need to do data checksumming.
   4040 
   4041               do k = 1, cur_var%siz(4)
   4042                  tlev = k
   4043                  if(domain_present) then
   4044                     if( Associated(fileObj%p0dr(k,j)%p) ) then
   4045                        call mpp_read(unit(n), fields(l), fileObj%p0dr(k,j)%p, tlev)
   4046                        if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p0dr(k,j)%p, (/mpp_pe()/) )
   4047                     else if( Associated(fileObj%p1dr(k,j)%p) ) then
   4048                        call mpp_read(unit(n), fields(l), fileObj%p1dr(k,j)%p, tlev)
   4049                        if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p1dr(k,j)%p, (/mpp_pe()/) )
   4050                     else if( Associated(fileObj%p2dr(k,j)%p) ) then
   4051                        call mpp_read(unit(n), fields(l), array_domain(domain_idx), fileObj%p2dr(k,j)%p, tlev)
   4052                        if ( is_there_a_checksum ) &
   4053                          checksum_data = mpp_chksum(fileObj%p2dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jad
   4053 d) )
   4054                     else if( Associated(fileObj%p3dr(k,j)%p) ) then
   4055                        call mpp_read(unit(n), fields(l), array_domain(domain_idx), fileObj%p3dr(k,j)%p, tlev)
   4056                        if ( is_there_a_checksum ) &
   4057                          checksum_data = mpp_chksum(fileObj%p3dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jad
   4057 d, :) )
   4058                     else if( Associated(fileObj%p2dr8(k,j)%p) ) then
   4059                        call mpp_read(unit(n), fields(l), array_domain(domain_idx), fileObj%p2dr8(k,j)%p, tlev)
   4060                        if ( is_there_a_checksum ) &
   4061                          checksum_data = mpp_chksum(fileObj%p2dr8(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+ja
   4061 dd) )
   4062                     else if( Associated(fileObj%p3dr8(k,j)%p) ) then
   4063                        call mpp_read(unit(n), fields(l), array_domain(domain_idx), fileObj%p3dr8(k,j)%p, tlev)
   4064                        if ( is_there_a_checksum ) &
   4065                          checksum_data = mpp_chksum(fileObj%p3dr8(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+ja
   4065 dd, :) )
   4066                     else if( Associated(fileObj%p4dr(k,j)%p) ) then
   4067                        call mpp_read(unit(n), fields(l), array_domain(domain_idx), fileObj%p4dr(k,j)%p, tlev)
   4068                        if ( is_there_a_checksum ) &
   4069                          checksum_data = mpp_chksum(fileObj%p4dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jad
   4069 d,:,:))
   4070                     else if( Associated(fileObj%p0di(k,j)%p) ) then
   4071                        call mpp_read(unit(n), fields(l), r0d, tlev)

Page 147         Source Listing                  RESTORE_STATE_ALL
2021-06-01 08:54                                 fms_io.F90

   4072                        fileObj%p0di(k,j)%p = r0d
   4073                        if ( is_there_a_checksum ) checksum_data = fileObj%p0di(k,j)%p
   4074                     else if( Associated(fileObj%p1di(k,j)%p) ) then
   4075                        allocate(r1d(cur_var%siz(1)))
   4076                        call mpp_read(unit(n), fields(l), r1d, tlev)
   4077                        fileObj%p1di(k,j)%p = r1d
   4078                        if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p1di(k,j)%p, (/mpp_pe()/) )
   4079                        deallocate(r1d)
   4080                     else if( Associated(fileObj%p2di(k,j)%p) ) then
   4081                        allocate(r2d(cur_var%siz(1), cur_var%siz(2)) )
   4082                        r2d = 0
   4083                        call mpp_read(unit(n), fields(l), array_domain(domain_idx), r2d, tlev)
   4084                        fileObj%p2di(k,j)%p(isc:iec,jsc:jec) = r2d(isc:iec,jsc:jec)
   4085                        if ( is_there_a_checksum ) &
   4086                          checksum_data = mpp_chksum(fileObj%p2di(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jad
   4086 d) )
   4087                        deallocate(r2d)
   4088                     else if( Associated(fileObj%p3di(k,j)%p) ) then
   4089                        allocate(r3d(cur_var%siz(1), cur_var%siz(2), cur_var%siz(3)) )
   4090                        r3d = 0
   4091                        call mpp_read(unit(n), fields(l), array_domain(domain_idx), r3d, tlev)
   4092                        fileObj%p3di(k,j)%p(isc:iec,jsc:jec,:) = r3d(isc:iec,jsc:jec,:)
   4093                        if ( is_there_a_checksum ) &
   4094                          checksum_data = mpp_chksum(fileObj%p3di(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jad
   4094 d, :))
   4095                        deallocate(r3d)
   4096                     else
   4097                        call mpp_error(FATAL, "fms_io(restore_state_all): domain is present for the field "//trim(varname)// 
   4097 &
   4098                             " of file "//trim(fileObj%name)//", but none of p2dr, p3dr, p2di and p3di is associated")
   4099                     end if
   4100                  else
   4101                     if( Associated(fileObj%p0dr(k,j)%p) ) then
   4102                        call mpp_read(unit(n), fields(l), fileObj%p0dr(k,j)%p, tlev)
   4103                        if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p0dr(k,j)%p, (/mpp_pe()/) )
   4104                     else if( Associated(fileObj%p1dr(k,j)%p) ) then
   4105                        call mpp_read(unit(n), fields(l), fileObj%p1dr(k,j)%p, tlev)
   4106                        if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p1dr(k,j)%p, (/mpp_pe()/) )
   4107                     else if( Associated(fileObj%p2dr(k,j)%p) ) then
   4108                        call mpp_read(unit(n), fields(l), fileObj%p2dr(k,j)%p, tlev)
   4109                        if ( is_there_a_checksum ) &
   4110                          checksum_data = mpp_chksum(fileObj%p2dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jad
   4110 d) )
   4111                     else if( Associated(fileObj%p3dr(k,j)%p) ) then
   4112                        call mpp_read(unit(n), fields(l), fileObj%p3dr(k,j)%p, tlev)
   4113                        if ( is_there_a_checksum ) &
   4114                          checksum_data = mpp_chksum(fileObj%p3dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jad
   4114 d, :) )
   4115                     else if( Associated(fileObj%p4dr(k,j)%p) ) then
   4116                        call mpp_read(unit(n), fields(l), fileObj%p4dr(k,j)%p, tlev)
   4117                        if ( is_there_a_checksum ) &
   4118                          checksum_data = mpp_chksum(fileObj%p4dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jad
   4118 d,:,:))
   4119                     else if( Associated(fileObj%p0di(k,j)%p) ) then
   4120                        call mpp_read(unit(n), fields(l), r0d, tlev)
   4121                        fileObj%p0di(k,j)%p = r0d
   4122                        if ( is_there_a_checksum ) checksum_data = fileObj%p0di(k,j)%p

Page 148         Source Listing                  RESTORE_STATE_ALL
2021-06-01 08:54                                 fms_io.F90

   4123                     else if( Associated(fileObj%p1di(k,j)%p) ) then
   4124                        allocate(r1d(cur_var%siz(1)) )
   4125                        call mpp_read(unit(n), fields(l), r1d, tlev)
   4126                        fileObj%p1di(k,j)%p = r1d
   4127                        if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p1di(k,j)%p, (/mpp_pe()/) )
   4128                        deallocate(r1d)
   4129                     else if( Associated(fileObj%p2di(k,j)%p) ) then
   4130                        allocate(r2d(cur_var%siz(1), cur_var%siz(2)) )
   4131                        r2d = 0
   4132                        call mpp_read(unit(n), fields(l), r2d, tlev)
   4133                        fileObj%p2di(k,j)%p = r2d
   4134                        if ( is_there_a_checksum ) &
   4135                          checksum_data = mpp_chksum(fileObj%p2di(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jad
   4135 d) )
   4136                        deallocate(r2d)
   4137                     else if( Associated(fileObj%p3di(k,j)%p) ) then
   4138                        allocate(r3d(cur_var%siz(1), cur_var%siz(2), cur_var%siz(3)) )
   4139                        r3d = 0
   4140                        call mpp_read(unit(n), fields(l), r3d, tlev)
   4141                        fileObj%p3di(k,j)%p = r3d
   4142                        if ( is_there_a_checksum ) &
   4143                          checksum_data = mpp_chksum(fileObj%p3di(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jad
   4143 d, :))
   4144                        deallocate(r3d)
   4145                     else
   4146                        call mpp_error(FATAL, "fms_io(restore_state_all): There is no pointer "//&
   4147                             "associated with the data of  field "// trim(varname)//" of file "//trim(fileObj%name) )
   4148                     end if
   4149                  end if
   4150                  if ( ( is_there_a_checksum ) .and. (checksum_file(k) /= checksum_data) ) then
   4151                    write (mesg,'(a,Z16,a,Z16,a)') "Checksum of input field "// uppercase(trim(varname))//" ", checksum_data,
   4151 &
   4152                                 " does not match value ", checksum_file(k), " stored in "//uppercase(trim(fileObj%name)//"."
   4152  )
   4153                    call mpp_error(FATAL, "fms_io(restore_state_all): "//trim(mesg) )
   4154                  endif
   4155               end do
   4156               exit ! Start search for next restart variable.
   4157            endif
   4158         enddo
   4159         if (l>nvar) missing_fields = missing_fields+1
   4160      enddo
   4161 
   4162      deallocate(fields)
   4163      if (missing_fields == 0) exit
   4164   enddo
   4165 
   4166   do n=1,nfile
   4167      call close_file(unit(n))
   4168   enddo
   4169 
   4170 ! check whether all fields have been found
   4171   do j = 1, fileObj%nvar
   4172      if( .NOT. fileObj%var(j)%initialized ) then
   4173         if( fileObj%var(j)%mandatory ) then
   4174            call mpp_error(FATAL, "fms_io(restore_state_all): unable to find mandatory variable "// &
   4175                 trim(fileObj%var(j)%name)//" in restart file "//trim(fileObj%name) )

Page 149         Source Listing                  RESTORE_STATE_ALL
2021-06-01 08:54                                 fms_io.F90

   4176         end if
   4177      end if
   4178   end do
   4179   cur_var =>NULL()
   4180 
   4181   if(print_chksum) call write_chksum(fileObj, MPP_RDONLY )
   4182 
   4183 end subroutine restore_state_all


ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_restore_state_all_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   3900                                 scalar                    3900,3931,4005,4044,4047,4050,4054
                                                                                                  ,4058,4062,4066,4070,4074,4080,408
                                                                                                  8,4101,4104,4107,4111,4115,4119,41
                                                                                                  23,4129,4137                      
 CHECKSUM_DATA              Local  3896     I(8)            8           scalar                    4046,4049,4053,4057,4061,4065,4069
                                                                                                  ,4073,4078,4086,4094,4103,4106,411
                                                                                                  0,4114,4118,4122,4127,4135,4143,41
                                                                                                  50,4151                           
 CHECKSUM_FILE              Local  3895     I(8)            8     1     3        TGT              4033,4036,4150,4152               
 CHECK_EXIST                Local  3892     L(4)            4           scalar                    4032,4035                         
 CUR_VAR                    Local  3880     VAR_TYPE        3328        scalar   PTR,SAVE         3880,3997,3998,3999,4001,4002,4003
                                                                                                  ,4004,4008,4010,4011,4012,4013,401
                                                                                                  4,4015,4024,4025,4026,4027,4030,40
                                                                                                  31,4041,4053,4057,4061,4065,4069,4
                                                                                                  075,4081,4086,4089,4094,4110,4114,
                                                                                                  4118,4124,4130,4135,4138,4143,4179
 DIR                        Local  3867     CHAR            128         scalar                    3903,3904,3911,3912               
 DIRECTORY                  Dummy  3856     CHAR                        scalar   ARG,IN           3904                              
 DOMAIN_IDX                 Local  3884     I(4)            4           scalar                    3921,3930,3946,3999,4051,4055,4059
                                                                                                  ,4063,4067,4083,4091              
 DOMAIN_PRESENT             Local  3883     L(4)            4           scalar                    3917,3920,3929,3998,4043          
 FATAL_MISSING_FILES        Local  3898     L(4)            4           scalar                    3906,3907,3978                    
 FEXIST                     Local  3883     L(4)            4           scalar                    3928,3934,3935,3937,3942,3964,3965
                                                                                                  ,3966                             
 FIELDS                     Local  3882     RECORD          1096  1     1        ALC              3991,3992,4029,4032,4036,4045,4048
                                                                                                  ,4051,4055,4059,4063,4067,4071,407
                                                                                                  6,4083,4091,4102,4105,4108,4112,41
                                                                                                  16,4120,4125,4132,4140,4162       
 FILENAME                   Local  3873     CHAR            256         scalar                    3933,3934,3936,3937               
 FILEOBJ                    Dummy  3856     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        3900,3912,3914,3918,3919,3921,3996
                                                                                                  ,3997,4044,4045,4046,4047,4048,404
                                                                                                  9,4050,4051,4053,4054,4055,4057,40
                                                                                                  58,4059,4061,4062,4063,4065,4066,4
                                                                                                  067,4069,4070,4072,4073,4074,4077,
                                                                                                  4078,4080,4084,4086,4088,4092,4094

Page 150         Source Listing                  RESTORE_STATE_ALL
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,4098,4101,4102,4103,4104,4105,410
                                                                                                  6,4107,4108,4110,4111,4112,4114,41
                                                                                                  15,4116,4118,4119,4121,4122,4123,4
                                                                                                  126,4127,4129,4133,4135,4137,4141,
                                                                                                  4143,4147,4152,4171,4172,4173,4175
                                                                                                  ,4181                             
 FILEPATH                   Local  3869     CHAR            200         scalar                    3957,3959,3962,3964,3965,3970     
 IADD                       Local  3894     I(4)            4           scalar                    4019,4021,4053,4057,4061,4065,4069
                                                                                                  ,4086,4094,4110,4114,4118,4135,414
                                                                                                  3                                 
 IEC                        Local  3891     I(4)            4           scalar                    4002,4006,4010,4019,4021,4025,4084
                                                                                                  ,4092                             
 IEG                        Local  3893     I(4)            4           scalar                    4003,4007,4012,4021               
 IO_DOMAIN                  Local  3890     DOMAIN2D        752         scalar   PTR,SAVE         3890,3930,3931,3932,3940          
 ISC                        Local  3891     I(4)            4           scalar                    4002,4006,4011,4019,4024,4084,4092
 ISG                        Local  3893     I(4)            4           scalar                    4003,4007                         
 ISHIFT                     Local  3894     I(4)            4           scalar                    4004,4008,4016,4021               
 IS_THERE_A_CHECKSUM        Local  3897     L(4)            4           scalar                    4034,4037,4039,4046,4049,4052,4056
                                                                                                  ,4060,4064,4068,4073,4078,4085,409
                                                                                                  3,4103,4106,4109,4113,4117,4122,41
                                                                                                  27,4134,4142,4150                 
 J                          Local  3884     I(4)            4           scalar                    3918,3919,3921,3996,3997,4044,4045
                                                                                                  ,4046,4047,4048,4049,4050,4051,405
                                                                                                  3,4054,4055,4057,4058,4059,4061,40
                                                                                                  62,4063,4065,4066,4067,4069,4070,4
                                                                                                  072,4073,4074,4077,4078,4080,4084,
                                                                                                  4086,4088,4092,4094,4101,4102,4103
                                                                                                  ,4104,4105,4106,4107,4108,4110,411
                                                                                                  1,4112,4114,4115,4116,4118,4119,41
                                                                                                  21,4122,4123,4126,4127,4129,4133,4
                                                                                                  135,4137,4141,4143,4171,4172,4173,
                                                                                                  4175                              
 JADD                       Local  3894     I(4)            4           scalar                    4020,4022,4053,4057,4061,4065,4069
                                                                                                  ,4086,4094,4110,4114,4118,4135,414
                                                                                                  3                                 
 JEC                        Local  3891     I(4)            4           scalar                    4002,4006,4013,4020,4022,4027,4084
                                                                                                  ,4092                             
 JEG                        Local  3893     I(4)            4           scalar                    4003,4007,4015,4022               
 JSC                        Local  3891     I(4)            4           scalar                    4002,4006,4014,4020,4026,4084,4092
 JSG                        Local  3893     I(4)            4           scalar                    4003,4007                         
 JSHIFT                     Local  3894     I(4)            4           scalar                    4004,4008,4017,4022               
 K                          Local  3884     I(4)            4           scalar                    4041,4042,4044,4045,4046,4047,4048
                                                                                                  ,4049,4050,4051,4053,4054,4055,405
                                                                                                  7,4058,4059,4061,4062,4063,4065,40
                                                                                                  66,4067,4069,4070,4072,4073,4074,4
                                                                                                  077,4078,4080,4084,4086,4088,4092,
                                                                                                  4094,4101,4102,4103,4104,4105,4106
                                                                                                  ,4107,4108,4110,4111,4112,4114,411
                                                                                                  5,4116,4118,4119,4121,4122,4123,41
                                                                                                  26,4127,4129,4133,4135,4137,4141,4
                                                                                                  143,4150,4152                     
 L                          Local  3884     I(4)            4           scalar                    4028,4029,4032,4036,4045,4048,4051
                                                                                                  ,4055,4059,4063,4067,4071,4076,408
                                                                                                  3,4091,4102,4105,4108,4112,4116,41
                                                                                                  20,4125,4132,4140,4159            

Page 151         Source Listing                  RESTORE_STATE_ALL
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LEN_TRIM                   Func   3911                                 scalar                    3911,3955                         
 MAX_SPLIT_FILE             Param  3879     I(4)            4           scalar   PRIV             242,3879,3968,4216,4323           
 MESG                       Local  3874     CHAR            256         scalar                    4151,4153                         
 MISSING_FIELDS             Local  3884     I(4)            4           scalar                    3994,4159,4163                    
 MPP_GET_TILE_ID            Func   3932     I(4)            4     1     0        PRIV             215,3932,4286,7979,8048,8180,8226 
 MPP_READ_2DDECOMP_R2D_R8   Subr   4051                                          PRIV             4051,4059,4083,4377,4401          
 MPP_READ_2DDECOMP_R3D_R8   Subr   4055                                          PRIV             4055,4063,4091,4381,4409,5404     
 MPP_READ_2DDECOMP_R4D_R8   Subr   4067                                          PRIV             4067,4385                         
 MPP_READ_R0D_R8            Subr   4045                                          PRIV             4045,4071,4102,4120,4371,4389,4420
                                                                                                  ,4438                             
 MPP_READ_R1D_R8            Subr   4048                                          PRIV             4048,4076,4105,4125,4374,4394,4423
                                                                                                  ,4443                             
 MPP_READ_R4D_R8            Subr   4116                                          PRIV             4116,4434                         
 N                          Local  3884     I(4)            4           scalar                    3988,3989,3992,4045,4048,4051,4055
                                                                                                  ,4059,4063,4067,4071,4076,4083,409
                                                                                                  1,4102,4105,4108,4112,4116,4120,41
                                                                                                  25,4132,4140,4166,4167            
 NATT                       Local  3881     I(4)            4           scalar                    3989                              
 NDIM                       Local  3881     I(4)            4           scalar                    3989                              
 NFILE                      Local  3877     I(4)            4           scalar                    3910,3943,3945,3967,3968,3970,3978
                                                                                                  ,3988,4166                        
 NONFATAL_MISSING_FILES     Dummy  3856     L(4)            4           scalar   ARG,IN           3907                              
 NTIME                      Local  3881     I(4)            4           scalar                    3989                              
 NUM_RESTART                Local  3875     I(4)            4           scalar                    3909,3949,3950,3952,3954,3975     
 NVAR                       Local  3881     I(4)            4           scalar                    3989,3991,3992,4028,4159          
 PRESENT                    Func   3904                                 scalar                    3904,3907                         
 R0D                        Local  3889     R(8)            8           scalar                    4071,4072,4120,4121               
 R1D                        Local  3888     R(8)            8     1     1        ALC              4075,4076,4077,4079,4124,4125,4126
                                                                                                  ,4128                             
 R2D                        Local  3887     R(8)            8     2     1        ALC              4081,4082,4083,4084,4087,4130,4131
                                                                                                  ,4132,4133,4136                   
 R3D                        Local  3886     R(8)            8     3     1        ALC              4089,4090,4091,4092,4095,4138,4139
                                                                                                  ,4140,4141,4144                   
 RESTARTPATH                Local  3868     CHAR            256         scalar                    3912,3914,3933,3936,3945,3955,3956
                                                                                                  ,3957,3959,3962,3980,3983         
 RESTORE_STATE_ALL          Subr   3856                                          PRIV                                               
 SIZ                        Local  3881     I(4)            4           scalar                    3955,3956,3957                    
 SUFFIX                     Local  3870     CHAR            8           scalar                    3950,3952,3957,3959               
 TILE_ID                    Local  3885     I(4)            4     1     1                         3932,3933,3936                    
 TLEV                       Local  3881     I(4)            4           scalar                    4042,4045,4048,4051,4055,4059,4063
                                                                                                  ,4067,4071,4076,4083,4091,4102,410
                                                                                                  5,4108,4112,4116,4120,4125,4132,41
                                                                                                  40                                
 TRIM                       Func   3912                                 scalar                    3912,3914,3933,3934,3936,3937,3945
                                                                                                  ,3957,3959,3962,3964,3965,3970,398
                                                                                                  0,3983,4030,4097,4098,4147,4151,41
                                                                                                  52,4153,4175                      
 UNIT                       Local  3879     I(4)            4     1     50                        3945,3970,3989,3992,4045,4048,4051
                                                                                                  ,4055,4059,4063,4067,4071,4076,408
                                                                                                  3,4091,4102,4105,4108,4112,4116,41
                                                                                                  20,4125,4132,4140,4167            
 VARNAME                    Local  3872     CHAR            80          scalar                    4029,4030,4097,4147,4151          

Page 152         Source Listing                  RESTORE_STATE_ALL
2021-06-01 08:54                                 fms_io.F90

   4184 
   4185 !-------------------------------------------------------------------------------
   4186 !
   4187 !    This subroutine reads the model state from previously
   4188 !    generated files.  All restart variables are read from the first
   4189 !    file in the input filename list in which they are found.
   4190 
   4191 subroutine restore_state_one_field(fileObj, id_field, directory, nonfatal_missing_files)
   4192   type(restart_file_type),    intent(inout) :: fileObj    !< The restart_file_type object that has
   4193 !! information about the restarts
   4194   integer,                    intent(in)    :: id_field   !< The field id of a variable that was
   4195 !! returned by a previous call to register_restart_field
   4196   character(len=*), optional, intent(in)    :: directory  !< The directory in which to seek restart files
   4197   logical,          optional, intent(in)    :: nonfatal_missing_files !< If true, the inability to find
   4198 !! the expected restart file is not necessarily fatal
   4199 
   4200 ! Arguments:
   4201 !  (in)      directory - The directory where the restart or save
   4202 !                        files should be found. The default is 'INPUT'
   4203 
   4204   character(len=128) :: dir
   4205   character(len=256) :: restartpath ! The restart file path (dir/file).
   4206   character(len=200) :: filepath    ! The path (dir/file) to the file being opened.
   4207   character(len=8)   :: suffix      ! A suffix (like "_2") that is added to any
   4208 ! additional restart files.
   4209   character(len=80)  :: varname     ! A variable's name.
   4210   character(len=256) :: filename
   4211   character(len=256) :: mesg        ! Message to be constructed for checksum error.
   4212   integer            :: num_restart ! The number of restart files that have already
   4213 ! been opened.
   4214   integer            :: nfile       ! The number of files (restart files and others
   4215 ! explicitly in filename) that are open.
   4216   integer   :: unit(max_split_file) ! The mpp unit of all open files.
   4217   type(var_type), pointer, save       :: cur_var=>NULL()
   4218   integer                             :: ndim, nvar, natt, ntime, tlev, siz
   4219   integer                             :: tile_id(1)
   4220   type(fieldtype), allocatable        :: fields(:)
   4221   logical                             :: fexist, domain_present
   4222   integer                             :: j, n, l, k, missing_fields, domain_idx
   4223   real, allocatable, dimension(:,:,:) :: r3d
   4224   real, allocatable, dimension(:,:)   :: r2d
   4225   real, allocatable, dimension(:)     :: r1d
   4226   real                                :: r0d
   4227   type(domain2d), pointer, save       :: io_domain=>NULL()
   4228   integer                             :: isc, iec, jsc, jec
   4229   logical                             :: check_exist
   4230   integer                             :: isg, ieg, jsg, jeg
   4231   integer                             :: ishift, jshift, iadd, jadd
   4232   integer(8), dimension(3)    :: checksum_file ! There should be no more than 3 timelevels in a restart file.
   4233   integer(8)                  :: checksum_data
   4234   logical                             :: is_there_a_checksum
   4235   logical                             :: fatal_missing_files
   4236 
   4237   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(restore_state_one_field): " // &
   4238       "restart_file_type data must be initialized by calling register_restart_field before using it")
   4239 
   4240   dir = 'INPUT'

Page 153         Source Listing                  RESTORE_STATE_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4241   if(present(directory)) dir = directory
   4242 
   4243   fatal_missing_files = .true.
   4244   if (present(nonfatal_missing_files)) fatal_missing_files = .not.nonfatal_missing_files
   4245 
   4246   cur_var => fileObj%var(id_field)
   4247   domain_present = cur_var%domain_present
   4248   domain_idx = cur_var%domain_idx
   4249 
   4250   if ( cur_var%domain_idx > 0) then
   4251      call mpp_get_compute_domain(array_domain(cur_var%domain_idx), isc, iec, jsc, jec)
   4252      call mpp_get_global_domain(array_domain(cur_var%domain_idx), isg, ieg, jsg, jeg)
   4253      call mpp_get_domain_shift(array_domain(cur_var%domain_idx), ishift, jshift, cur_var%position)
   4254   else if (ASSOCIATED(Current_domain)) then
   4255      call mpp_get_compute_domain(Current_domain, isc, iec, jsc, jec)
   4256      call mpp_get_global_domain(Current_domain, isg, ieg, jsg, jeg)
   4257      call mpp_get_domain_shift(Current_domain, ishift, jshift, cur_var%position)
   4258   else
   4259      iec = cur_var%ie
   4260      isc = cur_var%is
   4261      ieg = cur_var%ie
   4262      jec = cur_var%je
   4263      jsc = cur_var%js
   4264      jeg = cur_var%je
   4265      ishift = 0
   4266      jshift = 0
   4267   endif
   4268   iadd = iec-isc ! Size of the i-dimension on this processor (-1 as it is an increment)
   4269   jadd = jec-jsc ! Size of the j-dimension on this processor
   4270   if(iec == ieg) iadd = iadd + ishift
   4271   if(jec == jeg) jadd = jadd + jshift
   4272 
   4273   num_restart = 0
   4274   nfile = 0
   4275   if(len_trim(dir) > 0) then
   4276      restartpath = trim(dir)//"/"// trim(fileObj%name)
   4277   else
   4278      restartpath = trim(fileObj%name)
   4279   end if
   4280 !--- first open all the restart files
   4281 !--- NOTE: For distributed restart file, we are assuming there is only one file exist.
   4282   fexist = .FALSE.
   4283   if(domain_present) then
   4284      io_domain => mpp_get_io_domain(array_domain(domain_idx))
   4285      if(associated(io_domain)) then
   4286         tile_id = mpp_get_tile_id(io_domain)
   4287         write(filename, '(a,i4.4)' ) trim(restartpath)//'.', tile_id(1)
   4288         inquire (file=trim(filename), exist = fexist)
   4289         if( .NOT. fexist ) then
   4290            write(filename, '(a,i6.6)' ) trim(restartpath)//'.', tile_id(1)
   4291            inquire (file=trim(filename), exist = fexist)
   4292         endif
   4293      endif
   4294      io_domain=>NULL()
   4295   endif
   4296 
   4297   if(fexist) then

Page 154         Source Listing                  RESTORE_STATE_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4298      nfile = 1
   4299 !--- domain_present is true here.
   4300      call mpp_open(unit(nfile), trim(restartpath), form=form,action=MPP_RDONLY, &
   4301              threading=MPP_MULTI, domain=array_domain(domain_idx) )
   4302   else
   4303      do while(.true.)
   4304         if (num_restart < 10) then
   4305            write(suffix,'("_",I1)') num_restart
   4306         else
   4307            write(suffix,'("_",I2)') num_restart
   4308         endif
   4309         if (num_restart > 0) then
   4310            siz = len_trim(restartpath)
   4311            if(restartpath(siz-2:siz) == ".nc") then
   4312               filepath = restartpath(1:siz-3)//trim(suffix)
   4313            else
   4314               filepath = trim(restartpath) // trim(suffix)
   4315            end if
   4316         else
   4317            filepath = trim(restartpath)
   4318         end if
   4319         inquire (file=trim(filepath), exist=fexist)
   4320         if(.not. fexist) inquire(file=trim(filepath)//".nc", exist=fexist)
   4321         if(fexist) then
   4322            nfile = nfile + 1
   4323            if(nfile > max_split_file) call mpp_error(FATAL, &
   4324                 "fms_io(restore_state_one_field): nfile is larger than max_split_file, increase max_split_file")
   4325            call mpp_open(unit(nfile), trim(filepath), form=form,action=MPP_RDONLY,threading=MPP_MULTI, &
   4326                 fileset=MPP_SINGLE)
   4327         else
   4328            exit
   4329         end if
   4330         num_restart = num_restart + 1
   4331      end do
   4332   end if
   4333   if (nfile == 0) then ; if (fatal_missing_files) then
   4334      call mpp_error(FATAL, "fms_io(restore_state_all): unable to find any restart files "// &
   4335         "specified by "//trim(restartpath))
   4336   elseif (mpp_pe() == mpp_root_pe()) then
   4337      call mpp_error(WARNING, "fms_io(restore_state_all): unable to find any restart files "// &
   4338         "specified by "//trim(restartpath))
   4339   endif ; endif
   4340 
   4341 
   4342 ! Read each variable from the first file in which it is found.
   4343   do n=1,nfile
   4344      call mpp_get_info(unit(n), ndim, nvar, natt, ntime)
   4345 
   4346      allocate(fields(nvar))
   4347      call mpp_get_fields(unit(n),fields(1:nvar))
   4348 
   4349      missing_fields = 0
   4350      j = id_field
   4351      do l=1, nvar
   4352         call mpp_get_atts(fields(l),name=varname)
   4353         if (lowercase(trim(varname)) == lowercase(trim(cur_var%name))) then
   4354            cur_var%initialized = .true.

Page 155         Source Listing                  RESTORE_STATE_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4355            check_exist = mpp_attribute_exist(fields(l),"checksum")
   4356            checksum_file = 0
   4357            is_there_a_checksum = .false.
   4358            if ( check_exist ) then
   4359              call mpp_get_atts(fields(l),checksum=checksum_file)
   4360              is_there_a_checksum = .true.
   4361            endif
   4362            if (.NOT. checksum_required ) is_there_a_checksum = .false. ! Do not need to do data checksumming.
   4363            isc = cur_var%is
   4364            iec = cur_var%ie
   4365            jsc = cur_var%js
   4366            jec = cur_var%je
   4367            do k = 1, cur_var%siz(4)
   4368               tlev = k
   4369               if(domain_present) then
   4370                  if( Associated(fileObj%p0dr(k,j)%p) ) then
   4371                     call mpp_read(unit(n), fields(l), fileObj%p0dr(k,j)%p, tlev)
   4372                     if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p0dr(k,j)%p, (/mpp_pe()/) )
   4373                  else if( Associated(fileObj%p1dr(k,j)%p) ) then
   4374                     call mpp_read(unit(n), fields(l), fileObj%p1dr(k,j)%p, tlev)
   4375                     if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p1dr(k,j)%p, (/mpp_pe()/) )
   4376                  else if( Associated(fileObj%p2dr(k,j)%p) ) then
   4377                     call mpp_read(unit(n), fields(l), array_domain(domain_idx), fileObj%p2dr(k,j)%p, tlev)
   4378                     if ( is_there_a_checksum ) checksum_data =&
   4379                          & mpp_chksum(fileObj%p2dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd) )
   4380                  else if( Associated(fileObj%p3dr(k,j)%p) ) then
   4381                     call mpp_read(unit(n), fields(l), array_domain(domain_idx), fileObj%p3dr(k,j)%p, tlev)
   4382                     if ( is_there_a_checksum ) checksum_data =&
   4383                          & mpp_chksum(fileObj%p3dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd, :) )
   4384                  else if( Associated(fileObj%p4dr(k,j)%p) ) then
   4385                     call mpp_read(unit(n), fields(l), array_domain(domain_idx), fileObj%p4dr(k,j)%p, tlev)
   4386                     if ( is_there_a_checksum ) checksum_data =&
   4387                          & mpp_chksum(fileObj%p4dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd, :,:) )
   4388                  else if( Associated(fileObj%p0di(k,j)%p) ) then
   4389                     call mpp_read(unit(n), fields(l), r0d, tlev)
   4390                     fileObj%p0di(k,j)%p = r0d
   4391                     if ( is_there_a_checksum ) checksum_data = fileObj%p0di(k,j)%p
   4392                  else if( Associated(fileObj%p1di(k,j)%p) ) then
   4393                     allocate(r1d(cur_var%siz(1)))
   4394                     call mpp_read(unit(n), fields(l), r1d, tlev)
   4395                     fileObj%p1di(k,j)%p = r1d
   4396                     if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p1di(k,j)%p, (/mpp_pe()/) )
   4397                     deallocate(r1d)
   4398                  else if( Associated(fileObj%p2di(k,j)%p) ) then
   4399                     allocate(r2d(cur_var%siz(1), cur_var%siz(2)) )
   4400                     r2d = 0
   4401                     call mpp_read(unit(n), fields(l), array_domain(domain_idx), r2d, tlev)
   4402                     fileObj%p2di(k,j)%p(isc:iec,jsc:jec) = r2d(isc:iec,jsc:jec)
   4403                     if ( is_there_a_checksum ) checksum_data =&
   4404                          & mpp_chksum(fileObj%p2di(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd) )
   4405                     deallocate(r2d)
   4406                  else if( Associated(fileObj%p3di(k,j)%p) ) then
   4407                     allocate(r3d(cur_var%siz(1), cur_var%siz(2), cur_var%siz(3)) )
   4408                     r3d = 0
   4409                     call mpp_read(unit(n), fields(l), array_domain(domain_idx), r3d, tlev)
   4410                     fileObj%p3di(k,j)%p(isc:iec,jsc:jec,:) = r3d(isc:iec,jsc:jec,:)
   4411                     if ( is_there_a_checksum ) checksum_data =&

Page 156         Source Listing                  RESTORE_STATE_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4412                          & mpp_chksum(fileObj%p3di(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd, :))
   4413                     deallocate(r3d)
   4414                  else
   4415                     call mpp_error(FATAL, "fms_io(restore_state_one_field): domain is present for the field "//trim(varname)
   4415 // &
   4416                          " of file "//trim(fileObj%name)//", but none of p2dr, p3dr, p2di and p3di is associated")
   4417                  end if
   4418               else
   4419                  if( Associated(fileObj%p0dr(k,j)%p) ) then
   4420                     call mpp_read(unit(n), fields(l), fileObj%p0dr(k,j)%p, tlev)
   4421                     if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p0dr(k,j)%p, (/mpp_pe()/) )
   4422                  else if( Associated(fileObj%p1dr(k,j)%p) ) then
   4423                     call mpp_read(unit(n), fields(l), fileObj%p1dr(k,j)%p, tlev)
   4424                     if ( is_there_a_checksum ) checksum_data = mpp_chksum(fileObj%p1dr(k,j)%p, (/mpp_pe()/) )
   4425                  else if( Associated(fileObj%p2dr(k,j)%p) ) then
   4426                     call mpp_read(unit(n), fields(l), fileObj%p2dr(k,j)%p, tlev)
   4427                     if ( is_there_a_checksum ) checksum_data =&
   4428                          & mpp_chksum(fileObj%p2dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd) )
   4429                  else if( Associated(fileObj%p3dr(k,j)%p) ) then
   4430                     call mpp_read(unit(n), fields(l), fileObj%p3dr(k,j)%p, tlev)
   4431                     if ( is_there_a_checksum ) checksum_data =&
   4432                          & mpp_chksum(fileObj%p3dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd, :) )
   4433                  else if( Associated(fileObj%p4dr(k,j)%p) ) then
   4434                     call mpp_read(unit(n), fields(l), fileObj%p4dr(k,j)%p, tlev)
   4435                     if ( is_there_a_checksum ) checksum_data =&
   4436                          & mpp_chksum(fileObj%p4dr(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd, :, :) )
   4437                  else if( Associated(fileObj%p0di(k,j)%p) ) then
   4438                     call mpp_read(unit(n), fields(l), r0d, tlev)
   4439                     fileObj%p0di(k,j)%p = r0d
   4440                     if ( is_there_a_checksum ) checksum_data = fileObj%p0di(k,j)%p
   4441                  else if( Associated(fileObj%p1di(k,j)%p) ) then
   4442                     allocate(r1d(cur_var%siz(1)) )
   4443                     call mpp_read(unit(n), fields(l), r1d, tlev)
   4444                     fileObj%p1di(k,j)%p = r1d
   4445                     if ( is_there_a_checksum ) checksum_data = fileObj%p0di(k,j)%p
   4446                     deallocate(r1d)
   4447                  else if( Associated(fileObj%p2di(k,j)%p) ) then
   4448                     allocate(r2d(cur_var%siz(1), cur_var%siz(2)) )
   4449                     r2d = 0
   4450                     call mpp_read(unit(n), fields(l), r2d, tlev)
   4451                     fileObj%p2di(k,j)%p = r2d
   4452                     if ( is_there_a_checksum ) checksum_data =&
   4453                          & mpp_chksum(fileObj%p2di(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd) )
   4454                     deallocate(r2d)
   4455                  else if( Associated(fileObj%p3di(k,j)%p) ) then
   4456                     allocate(r3d(cur_var%siz(1), cur_var%siz(2), cur_var%siz(3)) )
   4457                     r3d = 0
   4458                     call mpp_read(unit(n), fields(l), r3d, tlev)
   4459                     fileObj%p3di(k,j)%p = r3d
   4460                     if ( is_there_a_checksum ) checksum_data =&
   4461                          & mpp_chksum(fileObj%p3di(k,j)%p(cur_var%is:cur_var%is+iadd,cur_var%js:cur_var%js+jadd, :))
   4462                     deallocate(r3d)
   4463                  else
   4464                     call mpp_error(FATAL, "fms_io(restore_state_one_field): There is no pointer "// &
   4465                          "associated with the data of  field "//trim(varname)//" of file "//trim(fileObj%name) )
   4466                  end if
   4467               end if

Page 157         Source Listing                  RESTORE_STATE_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4468               if ( (is_there_a_checksum ) .and. (checksum_file(k) /= checksum_data) )  then
   4469                 write (mesg,'(a,Z16,a,Z16,a)') "Checksum of input field "// uppercase(trim(varname)), checksum_data,&
   4470                              " does not match value ", checksum_file(k), "stored in "//uppercase(trim(fileObj%name)//"." )
   4471                 call mpp_error(FATAL, "fms_io(restore_state_one_field): "//trim(mesg) )
   4472               endif
   4473           end do
   4474            exit ! Start search for next restart variable.
   4475         endif
   4476      enddo
   4477      if (l>nvar) missing_fields = missing_fields+1
   4478      deallocate(fields)
   4479      if (missing_fields == 0) exit
   4480   enddo
   4481 
   4482   do n=1,nfile
   4483      call close_file(unit(n))
   4484   enddo
   4485 
   4486 ! check whether the field have been found
   4487   if( .NOT. fileObj%var(id_field)%initialized ) then
   4488      if( fileObj%var(id_field)%mandatory ) then
   4489         call mpp_error(FATAL, "fms_io(restore_state_one_field): unable to find mandatory variable "// &
   4490              trim(fileObj%var(id_field)%name)//" in restart file "//trim(fileObj%name) )
   4491      end if
   4492   end if
   4493   cur_var =>NULL()
   4494 
   4495 end subroutine restore_state_one_field

Page 158         Source Listing                  RESTORE_STATE_ONE_FIELD
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_restore_state_one_field_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   4237                                 scalar                    4237,4254,4285,4370,4373,4376,4380
                                                                                                  ,4384,4388,4392,4398,4406,4419,442
                                                                                                  2,4425,4429,4433,4437,4441,4447,44
                                                                                                  55                                
 CHECKSUM_DATA              Local  4233     I(8)            8           scalar                    4372,4375,4378,4382,4386,4391,4396
                                                                                                  ,4403,4411,4421,4424,4427,4431,443
                                                                                                  5,4440,4445,4452,4460,4468,4469   
 CHECKSUM_FILE              Local  4232     I(8)            8     1     3        TGT              4356,4359,4468,4470               
 CHECK_EXIST                Local  4229     L(4)            4           scalar                    4355,4358                         
 CUR_VAR                    Local  4217     VAR_TYPE        3328        scalar   PTR,SAVE         4217,4246,4247,4248,4250,4251,4252
                                                                                                  ,4253,4257,4259,4260,4261,4262,426
                                                                                                  3,4264,4353,4354,4363,4364,4365,43
                                                                                                  66,4367,4379,4383,4387,4393,4399,4
                                                                                                  404,4407,4412,4428,4432,4436,4442,
                                                                                                  4448,4453,4456,4461,4493          
 DIR                        Local  4204     CHAR            128         scalar                    4240,4241,4275,4276               
 DIRECTORY                  Dummy  4191     CHAR                        scalar   ARG,IN           4241                              
 DOMAIN_IDX                 Local  4222     I(4)            4           scalar                    4248,4284,4301,4377,4381,4385,4401
                                                                                                  ,4409                             
 DOMAIN_PRESENT             Local  4221     L(4)            4           scalar                    4247,4283,4369                    
 FATAL_MISSING_FILES        Local  4235     L(4)            4           scalar                    4243,4244,4333                    
 FEXIST                     Local  4221     L(4)            4           scalar                    4282,4288,4289,4291,4297,4319,4320
                                                                                                  ,4321                             
 FIELDS                     Local  4220     RECORD          1096  1     1        ALC              4346,4347,4352,4355,4359,4371,4374
                                                                                                  ,4377,4381,4385,4389,4394,4401,440
                                                                                                  9,4420,4423,4426,4430,4434,4438,44
                                                                                                  43,4450,4458,4478                 
 FILENAME                   Local  4210     CHAR            256         scalar                    4287,4288,4290,4291               
 FILEOBJ                    Dummy  4191     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        4237,4246,4276,4278,4370,4371,4372
                                                                                                  ,4373,4374,4375,4376,4377,4379,438
                                                                                                  0,4381,4383,4384,4385,4387,4388,43
                                                                                                  90,4391,4392,4395,4396,4398,4402,4
                                                                                                  404,4406,4410,4412,4416,4419,4420,
                                                                                                  4421,4422,4423,4424,4425,4426,4428
                                                                                                  ,4429,4430,4432,4433,4434,4436,443
                                                                                                  7,4439,4440,4441,4444,4445,4447,44
                                                                                                  51,4453,4455,4459,4461,4465,4470,4
                                                                                                  487,4488,4490                     
 FILEPATH                   Local  4206     CHAR            200         scalar                    4312,4314,4317,4319,4320,4325     
 IADD                       Local  4231     I(4)            4           scalar                    4268,4270,4379,4383,4387,4404,4412
                                                                                                  ,4428,4432,4436,4453,4461         
 ID_FIELD                   Dummy  4191     I(4)            4           scalar   ARG,IN           4246,4350,4487,4488,4490          
 IEC                        Local  4228     I(4)            4           scalar                    4251,4255,4259,4268,4270,4364,4402

Page 159         Source Listing                  RESTORE_STATE_ONE_FIELD
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  ,4410                             
 IEG                        Local  4230     I(4)            4           scalar                    4252,4256,4261,4270               
 IO_DOMAIN                  Local  4227     DOMAIN2D        752         scalar   PTR,SAVE         4227,4284,4285,4286,4294          
 ISC                        Local  4228     I(4)            4           scalar                    4251,4255,4260,4268,4363,4402,4410
 ISG                        Local  4230     I(4)            4           scalar                    4252,4256                         
 ISHIFT                     Local  4231     I(4)            4           scalar                    4253,4257,4265,4270               
 IS_THERE_A_CHECKSUM        Local  4234     L(4)            4           scalar                    4357,4360,4362,4372,4375,4378,4382
                                                                                                  ,4386,4391,4396,4403,4411,4421,442
                                                                                                  4,4427,4431,4435,4440,4445,4452,44
                                                                                                  60,4468                           
 J                          Local  4222     I(4)            4           scalar                    4350,4370,4371,4372,4373,4374,4375
                                                                                                  ,4376,4377,4379,4380,4381,4383,438
                                                                                                  4,4385,4387,4388,4390,4391,4392,43
                                                                                                  95,4396,4398,4402,4404,4406,4410,4
                                                                                                  412,4419,4420,4421,4422,4423,4424,
                                                                                                  4425,4426,4428,4429,4430,4432,4433
                                                                                                  ,4434,4436,4437,4439,4440,4441,444
                                                                                                  4,4445,4447,4451,4453,4455,4459,44
                                                                                                  61                                
 JADD                       Local  4231     I(4)            4           scalar                    4269,4271,4379,4383,4387,4404,4412
                                                                                                  ,4428,4432,4436,4453,4461         
 JEC                        Local  4228     I(4)            4           scalar                    4251,4255,4262,4269,4271,4366,4402
                                                                                                  ,4410                             
 JEG                        Local  4230     I(4)            4           scalar                    4252,4256,4264,4271               
 JSC                        Local  4228     I(4)            4           scalar                    4251,4255,4263,4269,4365,4402,4410
 JSG                        Local  4230     I(4)            4           scalar                    4252,4256                         
 JSHIFT                     Local  4231     I(4)            4           scalar                    4253,4257,4266,4271               
 K                          Local  4222     I(4)            4           scalar                    4367,4368,4370,4371,4372,4373,4374
                                                                                                  ,4375,4376,4377,4379,4380,4381,438
                                                                                                  3,4384,4385,4387,4388,4390,4391,43
                                                                                                  92,4395,4396,4398,4402,4404,4406,4
                                                                                                  410,4412,4419,4420,4421,4422,4423,
                                                                                                  4424,4425,4426,4428,4429,4430,4432
                                                                                                  ,4433,4434,4436,4437,4439,4440,444
                                                                                                  1,4444,4445,4447,4451,4453,4455,44
                                                                                                  59,4461,4468,4470                 
 L                          Local  4222     I(4)            4           scalar                    4351,4352,4355,4359,4371,4374,4377
                                                                                                  ,4381,4385,4389,4394,4401,4409,442
                                                                                                  0,4423,4426,4430,4434,4438,4443,44
                                                                                                  50,4458,4477                      
 LEN_TRIM                   Func   4275                                 scalar                    4275,4310                         
 MESG                       Local  4211     CHAR            256         scalar                    4469,4471                         
 MISSING_FIELDS             Local  4222     I(4)            4           scalar                    4349,4477,4479                    
 N                          Local  4222     I(4)            4           scalar                    4343,4344,4347,4371,4374,4377,4381
                                                                                                  ,4385,4389,4394,4401,4409,4420,442
                                                                                                  3,4426,4430,4434,4438,4443,4450,44
                                                                                                  58,4482,4483                      
 NATT                       Local  4218     I(4)            4           scalar                    4344                              
 NDIM                       Local  4218     I(4)            4           scalar                    4344                              
 NFILE                      Local  4214     I(4)            4           scalar                    4274,4298,4300,4322,4323,4325,4333
                                                                                                  ,4343,4482                        
 NONFATAL_MISSING_FILES     Dummy  4191     L(4)            4           scalar   ARG,IN           4244                              
 NTIME                      Local  4218     I(4)            4           scalar                    4344                              
 NUM_RESTART                Local  4212     I(4)            4           scalar                    4273,4304,4305,4307,4309,4330     
 NVAR                       Local  4218     I(4)            4           scalar                    4344,4346,4347,4351,4477          

Page 160         Source Listing                  RESTORE_STATE_ONE_FIELD
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PRESENT                    Func   4241                                 scalar                    4241,4244                         
 R0D                        Local  4226     R(8)            8           scalar                    4389,4390,4438,4439               
 R1D                        Local  4225     R(8)            8     1     1        ALC              4393,4394,4395,4397,4442,4443,4444
                                                                                                  ,4446                             
 R2D                        Local  4224     R(8)            8     2     1        ALC              4399,4400,4401,4402,4405,4448,4449
                                                                                                  ,4450,4451,4454                   
 R3D                        Local  4223     R(8)            8     3     1        ALC              4407,4408,4409,4410,4413,4456,4457
                                                                                                  ,4458,4459,4462                   
 RESTARTPATH                Local  4205     CHAR            256         scalar                    4276,4278,4287,4290,4300,4310,4311
                                                                                                  ,4312,4314,4317,4335,4338         
 RESTORE_STATE_ONE_FIELD    Subr   4191                                          PRIV                                               
 SIZ                        Local  4218     I(4)            4           scalar                    4310,4311,4312                    
 SUFFIX                     Local  4207     CHAR            8           scalar                    4305,4307,4312,4314               
 TILE_ID                    Local  4219     I(4)            4     1     1                         4286,4287,4290                    
 TLEV                       Local  4218     I(4)            4           scalar                    4368,4371,4374,4377,4381,4385,4389
                                                                                                  ,4394,4401,4409,4420,4423,4426,443
                                                                                                  0,4434,4438,4443,4450,4458        
 TRIM                       Func   4276                                 scalar                    4276,4278,4287,4288,4290,4291,4300
                                                                                                  ,4312,4314,4317,4319,4320,4325,433
                                                                                                  5,4338,4353,4415,4416,4465,4469,44
                                                                                                  70,4471,4490                      
 UNIT                       Local  4216     I(4)            4     1     50                        4300,4325,4344,4347,4371,4374,4377
                                                                                                  ,4381,4385,4389,4394,4401,4409,442
                                                                                                  0,4423,4426,4430,4434,4438,4443,44
                                                                                                  50,4458,4483                      
 VARNAME                    Local  4209     CHAR            80          scalar                    4352,4353,4415,4465,4469          

Page 161         Source Listing                  RESTORE_STATE_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4496 
   4497 !-------------------------------------------------------------------------------
   4498 !
   4499 !     This routine will setup one entry to be written out
   4500 !
   4501 !-------------------------------------------------------------------------------
   4502 subroutine setup_one_field(fileObj, filename, fieldname, field_siz, index_field,  domain, mandatory, &
   4503                            no_domain, scalar_or_1d, position, tile_count, data_default, longname, units, &
   4504                            compressed_axis, read_only, owns_data)
   4505   type(restart_file_type), intent(inout)         :: fileObj
   4506   character(len=*),         intent(in)           :: filename, fieldname
   4507   integer, dimension(:),    intent(in)           :: field_siz
   4508   integer,                  intent(out)          :: index_field
   4509   type(domain2d), optional, intent(in), target   :: domain
   4510   real,           optional, intent(in)           :: data_default
   4511   logical,        optional, intent(in)           :: no_domain
   4512   logical,        optional, intent(in)           :: scalar_or_1d
   4513   integer,        optional, intent(in)           :: position, tile_count
   4514   logical,          optional, intent(in)         :: mandatory
   4515   character(len=*), optional, intent(in)         :: longname, units, compressed_axis
   4516   logical,        optional, intent(in)           :: owns_data  !data will be deallocated on dellocation of restart
   4517   logical,        optional, intent(in)           :: read_only  !The variable will not be written to restart file.
   4518 
   4519 !--- local variables
   4520   integer                         :: i, domain_idx
   4521   integer                         :: ishift, jshift
   4522   integer                         :: gxsize, gysize
   4523   integer                         :: cxsize, cysize
   4524   integer                         :: dxsize, dysize
   4525   real                            :: default_data
   4526   logical                         :: is_no_domain = .false.
   4527   logical                         :: is_scalar_or_1d = .false.
   4528   character(len=256)              :: fname, filename2, append_string
   4529   type(domain2d), pointer, save   :: d_ptr   =>NULL()
   4530   type(var_type), pointer, save   :: cur_var =>NULL()
   4531   integer                         :: length, n_field_siz
   4532 
   4533   if(ANY(field_siz < 0)) then
   4534      call mpp_error(FATAL, "fms_io(setup_one_field): each entry of field_size should be a non-negative integer")
   4535   end if
   4536 
   4537   if(PRESENT(data_default))then
   4538      default_data=data_default
   4539   else
   4540      default_data = MPP_FILL_DOUBLE
   4541   endif
   4542 
   4543   if(present(tile_count) .AND. .not. present(domain)) call mpp_error(FATAL, &
   4544          'fms_io(setup_one_field): when tile_count is present, domain must be present')
   4545 
   4546   is_scalar_or_1d = .false.
   4547   if(PRESENT(scalar_or_1d)) is_scalar_or_1d = scalar_or_1d
   4548 
   4549   is_no_domain = .false.
   4550   if (PRESENT(no_domain)) THEN
   4551      is_no_domain = no_domain
   4552   end if

Page 162         Source Listing                  SETUP_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4553 
   4554   if(is_no_domain) then
   4555      if(PRESENT(domain)) &
   4556        call mpp_error(FATAL, 'fms_io(setup_one_field): no_domain cannot be .true. when optional argument domain is present.'
   4556 )
   4557   else if(PRESENT(domain))then
   4558      d_ptr => domain
   4559   else if (ASSOCIATED(Current_domain)) then
   4560      d_ptr => Current_domain
   4561   endif
   4562 
   4563 !--- remove .nc from file name
   4564   length = len_trim(filename)
   4565   if(filename(length-2:length) == '.nc') then
   4566      filename2 = filename(1:length-3)
   4567   else
   4568      filename2 = filename(1:length)
   4569   end if
   4570 
   4571 !Append a string to the file name
   4572   append_string=''
   4573 !If the filename_appendix  is set override the passed argument.
   4574   if(len_trim(filename_appendix) > 0)   append_string = filename_appendix
   4575 
   4576   if(len_trim(append_string) > 0) filename2 = trim(filename2)//'.'//trim(append_string)
   4577 
   4578 !JWD:  This is likely a temporary fix. Since fms_io needs to know tile_count,
   4579 !JWD:  I just don't see how the physics can remain "tile neutral"
   4580 !z1l:  one solution is add one more public interface called set_tile_count
   4581   call get_mosaic_tile_file(filename2, fname, is_no_domain, domain, tile_count)
   4582 
   4583   if(Associated(fileObj%var) ) then
   4584 ! make sure the consistency of file name
   4585      if(trim(fileObj%name) .NE. trim(fname)) call mpp_error(FATAL, 'fms_io(setup_one_field): filename = '// &
   4586          trim(fname)//' is not consistent with the filename of the restart object = '//trim(fileObj%name) )
   4587   else
   4588      allocate(fileObj%var(max_fields) )
   4589      allocate(fileObj%p0dr(MAX_TIME_LEVEL_REGISTER, max_fields))
   4590      allocate(fileObj%p1dr(MAX_TIME_LEVEL_REGISTER, max_fields))
   4591      allocate(fileObj%p2dr(MAX_TIME_LEVEL_REGISTER, max_fields))
   4592      allocate(fileObj%p3dr(MAX_TIME_LEVEL_REGISTER, max_fields))
   4593      allocate(fileObj%p2dr8(MAX_TIME_LEVEL_REGISTER, max_fields))
   4594      allocate(fileObj%p3dr8(MAX_TIME_LEVEL_REGISTER, max_fields))
   4595      allocate(fileObj%p4dr(MAX_TIME_LEVEL_REGISTER, max_fields))
   4596      allocate(fileObj%p0di(MAX_TIME_LEVEL_REGISTER, max_fields))
   4597      allocate(fileObj%p1di(MAX_TIME_LEVEL_REGISTER, max_fields))
   4598      allocate(fileObj%p2di(MAX_TIME_LEVEL_REGISTER, max_fields))
   4599      allocate(fileObj%p3di(MAX_TIME_LEVEL_REGISTER, max_fields))
   4600 !--- make sure fname is not used in other restart_file_type object.
   4601      do i = 1, num_registered_files
   4602         if(trim(fname) == trim(registered_file(i)) ) then
   4603            call mpp_error(NOTE, &
   4604              'fms_io(setup_one_field): '//trim(fname)//' is already registered with other restart_file_type data')
   4605            exit
   4606         endif
   4607      end do
   4608      num_registered_files = num_registered_files + 1

Page 163         Source Listing                  SETUP_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4609      if( num_registered_files > max_files_w ) call mpp_error(WARNING, &
   4610          'fms_io(setup_one_field): num_registered_files > max_files_w, increase fms_io_nml max_files_w')
   4611      registered_file(num_registered_files) = trim(fname)
   4612      fileObj%register_id = num_registered_files
   4613      fileObj%name = trim(fname)
   4614      fileObj%tile_count=1
   4615      if(present(tile_count)) fileObj%tile_count = tile_count
   4616      if(ASSOCIATED(d_ptr))then
   4617         fileObj%is_root_pe = mpp_domain_is_tile_root_pe(d_ptr)
   4618      else
   4619         fileObj%is_root_pe = mpp_pe() == mpp_root_pe()
   4620      endif
   4621      fileObj%max_ntime = field_siz(4)
   4622      fileObj%nvar      = 0
   4623 !-- allocate memory
   4624      do i = 1, max_fields
   4625         fileObj%var(i)%name           = 'none'
   4626         fileObj%var(i)%domain_present = .false.
   4627         fileObj%var(i)%domain_idx     = -1
   4628         fileObj%var(i)%is_dimvar      = .false.
   4629         fileObj%var(i)%position       = CENTER
   4630         fileObj%var(i)%siz(:)         = 0
   4631         fileObj%var(i)%gsiz(:)        = 0
   4632         fileObj%var(i)%id_axes(:)     = -1
   4633         fileObj%var(i)%longname       = '';
   4634         fileObj%var(i)%units          = 'none';
   4635         fileObj%var(i)%mandatory      = .true.
   4636         fileObj%var(i)%initialized    = .false.
   4637         fileObj%var(i)%compressed_axis = ''
   4638         fileObj%var(i)%read_only      = .false.
   4639         fileObj%var(i)%owns_data      = .false.
   4640      end do
   4641   endif
   4642 
   4643 ! check if the field is new or not and get position and dimension of the field
   4644   index_field = -1
   4645   do i = 1, fileObj%nvar
   4646      if(trim(fileObj%var(i)%name) == trim(fieldname)) then
   4647         index_field = i
   4648         exit
   4649      end if
   4650   end do
   4651 
   4652   if(index_field > 0) then
   4653      cur_var   => fileObj%var(index_field)
   4654      if(cur_var%siz(1) .NE. field_siz(1) .OR. cur_var%siz(2) .NE. field_siz(2) .OR. cur_var%siz(3) .NE. field_siz(3) ) &
   4655         call mpp_error(FATAL, 'fms_io(setup_one_field): field size mismatch for field '// &
   4656                        trim(fieldname)//' of file '//trim(filename) )
   4657 
   4658      cur_var%siz(4) =  cur_var%siz(4) + field_siz(4)
   4659      if(fileObj%max_ntime < cur_var%siz(4) ) fileObj%max_ntime = cur_var%siz(4)
   4660 ! the time level should be no larger than MAX_TIME_LEVEL_REGISTER ( = 2)
   4661      if( cur_var%siz(4) > MAX_TIME_LEVEL_REGISTER ) call mpp_error(FATAL, 'fms_io(setup_one_field): ' // &
   4662           'the time level of field '//trim(cur_var%name)//' in file '//trim(fileObj%name)// &
   4663           ' is greater than MAX_TIME_LEVEL_REGISTER(=2), increase MAX_TIME_LEVEL_REGISTER or check your code')
   4664   else
   4665      fileObj%nvar = fileObj%nvar +1

Page 164         Source Listing                  SETUP_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4666      if(fileObj%nvar>max_fields) then
   4667         write(error_msg,'(I3,"/",I3)') fileObj%nvar, max_fields
   4668         call  mpp_error(FATAL,'fms_io(setup_one_field): max_fields exceeded, needs increasing, nvar/max_fields=' &
   4669              //trim(error_msg))
   4670      endif
   4671      index_field =  fileObj%nvar
   4672      cur_var   => fileObj%var(index_field)
   4673      n_field_siz = size(field_siz(:))
   4674      cur_var%siz(1:n_field_siz)  = field_siz(1:n_field_siz)
   4675      cur_var%gsiz(3) = field_siz(3)
   4676      if(n_field_siz == 5) cur_var%gsiz(4) = field_siz(5)
   4677      cur_var%name = fieldname
   4678      cur_var%default_data = default_data
   4679      if(present(mandatory)) cur_var%mandatory = mandatory
   4680      if(present(read_only)) cur_var%read_only = read_only
   4681      if(present(owns_data)) cur_var%owns_data = owns_data
   4682      if(present(longname)) then
   4683         cur_var%longname = longname
   4684      else
   4685         cur_var%longname = fieldname
   4686      end if
   4687      if(present(units))    cur_var%units    = units
   4688      if(present(position)) cur_var%position = position
   4689      if(present(compressed_axis)) cur_var%compressed_axis = compressed_axis
   4690      cur_var%is = 1; cur_var%ie =  cur_var%siz(1)
   4691      cur_var%js = 1; cur_var%je =  cur_var%siz(2)
   4692 
   4693      if(ASSOCIATED(d_ptr) .AND. .NOT. is_scalar_or_1d ) then
   4694         cur_var%domain_present = .true.
   4695         domain_idx = lookup_domain(d_ptr)
   4696         if(domain_idx == -1) then
   4697            num_domains = num_domains + 1
   4698            if(num_domains > max_domains) call  mpp_error(FATAL,'fms_io(setup_one_field), 1: max_domains exceeded,' &
   4699                 //' needs increasing')
   4700            domain_idx = num_domains
   4701            array_domain(domain_idx) = d_ptr
   4702            call mpp_get_domain_components(array_domain(domain_idx), domain_x(domain_idx), domain_y(domain_idx), &
   4703                 tile_count=tile_count)
   4704         endif
   4705         cur_var%domain_idx = domain_idx
   4706         call mpp_get_domain_shift ( array_domain(domain_idx), ishift, jshift, position)
   4707         call mpp_get_global_domain(array_domain(domain_idx), xsize=gxsize,ysize=gysize,tile_count=tile_count)
   4708         call mpp_get_compute_domain(array_domain(domain_idx), xsize = cxsize, ysize = cysize, tile_count=tile_count)
   4709         call mpp_get_data_domain   (array_domain(domain_idx), xsize = dxsize, ysize = dysize, tile_count=tile_count)
   4710         if (ishift .NE. 0) then
   4711            cxsize = cxsize+ishift; dxsize = dxsize+ishift; gxsize = gxsize + ishift
   4712         end if
   4713         if (jshift .NE. 0) then
   4714            cysize = cysize+jshift; dysize = dysize+jshift; gysize = gysize + jshift
   4715         endif
   4716         if( (cur_var%siz(1) .NE. cxsize .AND. cur_var%siz(1) .NE. dxsize ) .OR. &
   4717             (cur_var%siz(2) .NE. cysize .AND. cur_var%siz(2) .NE. dysize ) ) then
   4718             call mpp_error(FATAL, 'fms_io(setup_one_field): data should be on either compute domain '//&
   4719               'or data domain when domain is present for field '//trim(fieldname)//' of file '//trim(filename) )
   4720         end if
   4721         cur_var%is   = 1 + (cur_var%siz(1) - cxsize)/2
   4722         cur_var%ie   = cur_var%is + cxsize - 1;

Page 165         Source Listing                  SETUP_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4723         cur_var%js   = 1 + (cur_var%siz(2) - cysize)/2
   4724         cur_var%je   = cur_var%js + cysize - 1;
   4725         cur_var%gsiz(1)   = gxsize
   4726         cur_var%gsiz(2)   = gysize
   4727      else
   4728         cur_var%domain_present=.false.
   4729         cur_var%gsiz(1:2) = field_siz(1:2)
   4730      endif
   4731   end if
   4732 
   4733   d_ptr =>NULL()
   4734   cur_var =>NULL()
   4735 
   4736 end subroutine setup_one_field


ENTRY POINTS

  Name                                      
                                            
 fms_io_mod_mp_setup_one_field_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ANY                        Func   4533                                 scalar                    4533                              
 APPEND_STRING              Local  4528     CHAR            256         scalar                    4572,4574,4576                    
 ASSOCIATED                 Func   4559                                 scalar                    4559,4583,4616,4693               
 COMPRESSED_AXIS            Dummy  4504     CHAR                        scalar   ARG,IN           4689                              
 CUR_VAR                    Local  4530     VAR_TYPE        3328        scalar   PTR,SAVE         4530,4653,4654,4658,4659,4661,4662
                                                                                                  ,4672,4674,4675,4676,4677,4678,467
                                                                                                  9,4680,4681,4683,4685,4687,4688,46
                                                                                                  89,4690,4691,4694,4705,4716,4717,4
                                                                                                  721,4722,4723,4724,4725,4726,4728,
                                                                                                  4729,4734                         
 CXSIZE                     Local  4523     I(4)            4           scalar                    4708,4711,4716,4721,4722          
 CYSIZE                     Local  4523     I(4)            4           scalar                    4708,4714,4717,4723,4724          
 DATA_DEFAULT               Dummy  4503     R(8)            8           scalar   ARG,IN           4537,4538                         
 DEFAULT_DATA               Local  4525     R(8)            8           scalar                    4538,4540,4678                    
 DOMAIN                     Dummy  4502     DOMAIN2D        752         scalar   ARG,TGT,IN       4543,4555,4557,4558,4581          
 DOMAIN_IDX                 Local  4520     I(4)            4           scalar                    4695,4696,4700,4701,4702,4705,4706
                                                                                                  ,4707,4708,4709                   
 DXSIZE                     Local  4524     I(4)            4           scalar                    4709,4711,4716                    
 DYSIZE                     Local  4524     I(4)            4           scalar                    4709,4714,4717                    
 D_PTR                      Local  4529     DOMAIN2D        752         scalar   PTR,SAVE         4529,4558,4560,4616,4617,4693,4695
                                                                                                  ,4701,4733                        
 FIELDNAME                  Dummy  4502     CHAR                        scalar   ARG,IN           4646,4656,4677,4685,4719          
 FIELD_SIZ                  Dummy  4502     I(4)            4     1     1        ARG,IN           4533,4621,4654,4658,4673,4674,4675
                                                                                                  ,4676,4729                        
 FILENAME                   Dummy  4502     CHAR                        scalar   ARG,IN           4564,4565,4566,4568,4656,4719     
 FILENAME2                  Local  4528     CHAR            256         scalar                    4566,4568,4576,4581               
 FILEOBJ                    Dummy  4502     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        4583,4585,4586,4588,4589,4590,4591
                                                                                                  ,4592,4593,4594,4595,4596,4597,459
                                                                                                  8,4599,4612,4613,4614,4615,4617,46

Page 166         Source Listing                  SETUP_ONE_FIELD
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  19,4621,4622,4625,4626,4627,4628,4
                                                                                                  629,4630,4631,4632,4633,4634,4635,
                                                                                                  4636,4637,4638,4639,4645,4646,4653
                                                                                                  ,4659,4662,4665,4666,4667,4671,467
                                                                                                  2                                 
 FNAME                      Local  4528     CHAR            256         scalar                    4581,4585,4586,4602,4604,4611,4613
 GXSIZE                     Local  4522     I(4)            4           scalar                    4707,4711,4725                    
 GYSIZE                     Local  4522     I(4)            4           scalar                    4707,4714,4726                    
 I                          Local  4520     I(4)            4           scalar                    4601,4602,4624,4625,4626,4627,4628
                                                                                                  ,4629,4630,4631,4632,4633,4634,463
                                                                                                  5,4636,4637,4638,4639,4645,4646,46
                                                                                                  47                                
 INDEX_FIELD                Dummy  4502     I(4)            4           scalar   ARG,OUT          4644,4647,4652,4653,4671,4672     
 ISHIFT                     Local  4521     I(4)            4           scalar                    4706,4710,4711                    
 IS_NO_DOMAIN               Local  4526     L(4)            4           scalar                    4526,4549,4551,4554,4581          
 IS_SCALAR_OR_1D            Local  4527     L(4)            4           scalar                    4527,4546,4547,4693               
 JSHIFT                     Local  4521     I(4)            4           scalar                    4706,4713,4714                    
 LENGTH                     Local  4531     I(4)            4           scalar                    4564,4565,4566,4568               
 LEN_TRIM                   Func   4564                                 scalar                    4564,4574,4576                    
 LONGNAME                   Dummy  4503     CHAR                        scalar   ARG,IN           4682,4683                         
 MANDATORY                  Dummy  4502     L(4)            4           scalar   ARG,IN           4679                              
 MAX_TIME_LEVEL_REGISTER    Param  4589     I(4)            4           scalar   PRIV             247,4589,4590,4591,4592,4593,4594,
                                                                                                  4595,4596,4597,4598,4599,4661,9504
                                                                                                  ,9505,9506,9507,9508,9509,9510,951
                                                                                                  1,9512,9513,9514,9629             
 NO_DOMAIN                  Dummy  4503     L(4)            4           scalar   ARG,IN           4550,4551                         
 N_FIELD_SIZ                Local  4531     I(4)            4           scalar                    4673,4674,4676                    
 OWNS_DATA                  Dummy  4504     L(4)            4           scalar   ARG,IN           4681                              
 POSITION                   Dummy  4503     I(4)            4           scalar   ARG,IN           4688,4706                         
 PRESENT                    Func   4537                                 scalar                    4537,4543,4547,4550,4555,4557,4615
                                                                                                  ,4679,4680,4681,4682,4687,4688,468
                                                                                                  9                                 
 READ_ONLY                  Dummy  4504     L(4)            4           scalar   ARG,IN           4680                              
 SCALAR_OR_1D               Dummy  4503     L(4)            4           scalar   ARG,IN           4547                              
 SETUP_ONE_FIELD            Subr   4502                                                           1687,1720,1758,1799,1835,1875,1915
                                                                                                  ,1959,1998,2030,2062,2096,2130,217
                                                                                                  4,2215,2256,2297,2335,2390        
 SIZE                       Func   4673                                 scalar                    4673                              
 TILE_COUNT                 Dummy  4503     I(4)            4           scalar   ARG,IN           4543,4581,4615,4703,4707,4708,4709
 TRIM                       Func   4576                                 scalar                    4576,4585,4586,4602,4604,4611,4613
                                                                                                  ,4646,4656,4662,4669,4719         
 UNITS                      Dummy  4503     CHAR                        scalar   ARG,IN           4687                              

Page 167         Source Listing                  SETUP_ONE_FIELD
2021-06-01 08:54                                 fms_io.F90

   4737 
   4738 !.....................................................................
   4739 subroutine write_data_4d_new(filename, fieldname, data, domain,    &
   4740                              no_domain, position,tile_count, data_default)
   4741 
   4742   character(len=*), intent(in)                 :: filename, fieldname
   4743   real, dimension(:,:,:,:), intent(in)         :: data
   4744   real, dimension(size(data,1),size(data,2),size(data,3)*size(data,4)) :: data_3d
   4745   real, intent(in), optional                   :: data_default
   4746   type(domain2d), intent(in), optional         :: domain
   4747   logical, intent(in), optional                :: no_domain
   4748   integer, intent(in), optional                :: position, tile_count
   4749   integer                                      :: i, k, l
   4750 
   4751   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(write_data_4d_new):need to call fms_io_init first')
   4752   i = 0
   4753   do l = 1, size(data,4) ; do k = 1, size(data,3)
   4754      i = i + 1
   4755      data_3d(:,:,i) = data(:,:,k,l)
   4756   enddo ; enddo
   4757 
   4758   call write_data_3d_new(filename, fieldname, data_3d, domain, &
   4759                          no_domain, .false., position, tile_count, data_default)
   4760 
   4761 end subroutine write_data_4d_new


ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_write_data_4d_new_             

Page 168         Source Listing                  WRITE_DATA_4D_NEW
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4739     R(8)            8     4     1        ARG,IN           4744,4753,4755                    
 DATA_3D                    Local  4744     R(8)            8     3     0        TGT              4755,4758                         
 DATA_DEFAULT               Dummy  4740     R(8)            8           scalar   ARG,IN           4759                              
 DOMAIN                     Dummy  4739     DOMAIN2D        752         scalar   ARG,IN           4758                              
 FIELDNAME                  Dummy  4739     CHAR                        scalar   ARG,IN           4758                              
 FILENAME                   Dummy  4739     CHAR                        scalar   ARG,IN           4758                              
 I                          Local  4749     I(4)            4           scalar                    4752,4754,4755                    
 K                          Local  4749     I(4)            4           scalar                    4753,4755                         
 L                          Local  4749     I(4)            4           scalar                    4753,4755                         
 NO_DOMAIN                  Dummy  4740     L(4)            4           scalar   ARG,IN           4759                              
 POSITION                   Dummy  4740     I(4)            4           scalar   ARG,IN           4759                              
 SIZE                       Func   4744                                 scalar                    4744,4753                         
 TILE_COUNT                 Dummy  4740     I(4)            4           scalar   ARG,IN           4759                              
 WRITE_DATA_4D_NEW          Subr   4739                                          PRIV                                               

Page 169         Source Listing                  WRITE_DATA_4D_NEW
2021-06-01 08:54                                 fms_io.F90

   4762 
   4763 !.....................................................................
   4764 subroutine write_data_2d_new(filename, fieldname, data, domain,    &
   4765                              no_domain, position,tile_count, data_default)
   4766 
   4767   character(len=*), intent(in)                 :: filename, fieldname
   4768   real, dimension(:,:), intent(in)             :: data
   4769   real, dimension(size(data,1),size(data,2),1) :: data_3d
   4770   real, intent(in), optional                   :: data_default
   4771   type(domain2d), intent(in), optional         :: domain
   4772   logical, intent(in), optional                :: no_domain
   4773   integer, intent(in), optional                :: position, tile_count
   4774 
   4775   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(write_data_2d_new):need to call fms_io_init first')
   4776   data_3d(:,:,1) = data(:,:)
   4777 
   4778   call write_data_3d_new(filename, fieldname, data_3d, domain, &
   4779                          no_domain, .false., position, tile_count, data_default)
   4780 
   4781 end subroutine write_data_2d_new


ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_write_data_2d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4764     R(8)            8     2     1        ARG,IN           4769,4776                         
 DATA_3D                    Local  4769     R(8)            8     3     0        TGT              4776,4778                         
 DATA_DEFAULT               Dummy  4765     R(8)            8           scalar   ARG,IN           4779                              
 DOMAIN                     Dummy  4764     DOMAIN2D        752         scalar   ARG,IN           4778                              
 FIELDNAME                  Dummy  4764     CHAR                        scalar   ARG,IN           4778                              
 FILENAME                   Dummy  4764     CHAR                        scalar   ARG,IN           4778                              
 NO_DOMAIN                  Dummy  4765     L(4)            4           scalar   ARG,IN           4779                              
 POSITION                   Dummy  4765     I(4)            4           scalar   ARG,IN           4779                              
 SIZE                       Func   4769                                 scalar                    4769                              
 TILE_COUNT                 Dummy  4765     I(4)            4           scalar   ARG,IN           4779                              
 WRITE_DATA_2D_NEW          Subr   4764                                          PRIV             1075                              

Page 170         Source Listing                  WRITE_DATA_2D_NEW
2021-06-01 08:54                                 fms_io.F90

   4782 
   4783 ! ........................................................
   4784 subroutine write_data_1d_new(filename, fieldname, data,domain, &
   4785                              no_domain, tile_count, data_default)
   4786 
   4787   type(domain2d), intent(in), optional   :: domain
   4788   character(len=*), intent(in)           :: filename, fieldname
   4789   real, dimension(:), intent(in)         :: data
   4790   real, dimension(size(data(:)),1,1)     :: data_3d
   4791   real, intent(in), optional             :: data_default
   4792   logical, intent(in), optional          :: no_domain
   4793   integer, intent(in), optional          :: tile_count
   4794 
   4795   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(write_data_1d_new): module not initialized')
   4796   data_3d(:,1,1) = data(:)
   4797   call write_data_3d_new(filename, fieldname, data_3d,domain,   &
   4798                          no_domain=no_domain, scalar_or_1d=.true., tile_count=tile_count, data_default=data_default)
   4799 end subroutine write_data_1d_new


ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_write_data_1d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4784     R(8)            8     1     1        ARG,IN           4790,4796                         
 DATA_3D                    Local  4790     R(8)            8     3     0        TGT              4796,4797                         
 DATA_DEFAULT               Dummy  4785     R(8)            8           scalar   ARG,IN           4798                              
 DOMAIN                     Dummy  4784     DOMAIN2D        752         scalar   ARG,IN           4797                              
 FIELDNAME                  Dummy  4784     CHAR                        scalar   ARG,IN           4797                              
 FILENAME                   Dummy  4784     CHAR                        scalar   ARG,IN           4797                              
 NO_DOMAIN                  Dummy  4785     L(4)            4           scalar   ARG,IN           4798                              
 SIZE                       Func   4790                                 scalar                    4790                              
 TILE_COUNT                 Dummy  4785     I(4)            4           scalar   ARG,IN           4798                              
 WRITE_DATA_1D_NEW          Subr   4784                                          PRIV             1091                              

Page 171         Source Listing                  WRITE_DATA_1D_NEW
2021-06-01 08:54                                 fms_io.F90

   4800 
   4801 ! ..........................................................
   4802 subroutine write_data_scalar_new(filename, fieldname, data, domain, &
   4803                                  no_domain, tile_count, data_default)
   4804 
   4805   type(domain2d), intent(in), optional   :: domain
   4806   character(len=*), intent(in)           :: filename, fieldname
   4807   real, intent(in)                       :: data
   4808   real, dimension(1,1,1)                 :: data_3d
   4809   real, intent(in), optional             :: data_default
   4810   logical, intent(in), optional          :: no_domain
   4811   integer, intent(in), optional          :: tile_count
   4812 
   4813   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(write_data_scalar_new):  module not initialized: '//fieldname)
   4814 
   4815   data_3d(1,1,1) = data
   4816   call write_data_3d_new(filename, fieldname, data_3d,domain, &
   4817                          no_domain=no_domain, scalar_or_1d=.true., tile_count=tile_count, data_default=data_default)
   4818 end subroutine write_data_scalar_new


ENTRY POINTS

  Name                                            
                                                  
 fms_io_mod_mp_write_data_scalar_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  4802     R(8)            8           scalar   ARG,IN           4815                              
 DATA_3D                    Local  4808     R(8)            8     3     1        TGT              4815,4816                         
 DATA_DEFAULT               Dummy  4803     R(8)            8           scalar   ARG,IN           4817                              
 DOMAIN                     Dummy  4802     DOMAIN2D        752         scalar   ARG,IN           4816                              
 FIELDNAME                  Dummy  4802     CHAR                        scalar   ARG,IN           4813,4816                         
 FILENAME                   Dummy  4802     CHAR                        scalar   ARG,IN           4816                              
 NO_DOMAIN                  Dummy  4803     L(4)            4           scalar   ARG,IN           4817                              
 TILE_COUNT                 Dummy  4803     I(4)            4           scalar   ARG,IN           4817                              
 WRITE_DATA_SCALAR_NEW      Subr   4802                                          PRIV             1106                              

Page 172         Source Listing                  WRITE_DATA_SCALAR_NEW
2021-06-01 08:54                                 fms_io.F90

   4819 
   4820 ! ..........................................................
   4821 
   4822 function lookup_field_r(nfile,fieldname)
   4823 ! Given fieldname, this function returns the field position in the model's fields list
   4824 
   4825   integer, intent(in)          :: nfile
   4826   character(len=*), intent(in) :: fieldname
   4827   integer                      :: lookup_field_r
   4828   integer                      :: j
   4829 
   4830   lookup_field_r=-1
   4831   do j = 1, files_read(nfile)%nvar
   4832      if (trim(files_read(nfile)%var(j)%name) == trim(fieldname)) then
   4833         lookup_field_r = j
   4834         exit
   4835      endif
   4836   enddo
   4837   return
   4838 end function lookup_field_r


ENTRY POINTS

  Name                                     
                                           
 fms_io_mod_mp_lookup_field_r_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FIELDNAME                  Dummy  4822     CHAR                        scalar   ARG,IN           4832                              
 J                          Local  4828     I(4)            4           scalar                    4831,4832,4833                    
 LOOKUP_FIELD_R             Func   4822     I(4)            4           scalar                                                      
 NFILE                      Dummy  4822     I(4)            4           scalar   ARG,IN           4831,4832                         
 TRIM                       Func   4832                                 scalar                    4832                              

Page 173         Source Listing                  LOOKUP_FIELD_R
2021-06-01 08:54                                 fms_io.F90

   4839 
   4840 
   4841 !..........................................................
   4842 
   4843 function lookup_domain(domain)
   4844 ! given domain, this function returns the position of domain in array_domain or -1 if not found
   4845 
   4846   type(domain2d), intent(in) :: domain
   4847   integer                    :: i, lookup_domain
   4848   lookup_domain = -1
   4849   do i =1, num_domains
   4850      if(domain .EQ. array_domain(i)) then
   4851         lookup_domain = i
   4852         exit
   4853      endif
   4854   enddo
   4855 end function lookup_domain


ENTRY POINTS

  Name                                    
                                          
 fms_io_mod_mp_lookup_domain_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOMAIN                     Dummy  4843     DOMAIN2D        752         scalar   ARG,IN           4850                              
 I                          Local  4847     I(4)            4           scalar                    4849,4850,4851                    
 LOOKUP_DOMAIN              Func   4843     I(4)            4           scalar                    1274,4695,4848,4851               
 MPP_DOMAIN2D_EQ            Func   4850     L(4)            4           scalar   PRIV             4850                              

Page 174         Source Listing                  LOOKUP_DOMAIN
2021-06-01 08:54                                 fms_io.F90

   4856 !.........................................................
   4857 function lookup_axis(axis_sizes,siz,domains,dom)
   4858 
   4859 ! Given axis size (global), this function returns the axis id
   4860 
   4861   integer, intent(in)      :: axis_sizes(:), siz
   4862   type(domain1d), optional :: domains(:)
   4863   type(domain1d), optional :: dom
   4864   integer :: lookup_axis
   4865   integer :: j
   4866 
   4867 
   4868   lookup_axis=-1
   4869   do j=1,size(axis_sizes(:))
   4870      if (siz == axis_sizes(j)) then
   4871         if (PRESENT(domains)) then
   4872            if (dom .EQ. domains(j)) then
   4873               lookup_axis = j
   4874               exit
   4875            endif
   4876         else
   4877            lookup_axis = j
   4878            exit
   4879         endif
   4880      endif
   4881   enddo
   4882   if (lookup_axis == -1) call mpp_error(FATAL,'fms_io(lookup_axis): could not find axis in set of axes')
   4883 end function lookup_axis

Page 175         Source Listing                  LOOKUP_AXIS
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                  
                                        
 fms_io_mod_mp_lookup_axis_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXIS_SIZES                 Dummy  4857     I(4)            4     1     1        ARG,IN           4869,4870                         
 DOM                        Dummy  4857     DOMAIN1D        176         scalar   ARG,INOUT        4872                              
 DOMAIN1D                   Type   4862                                 scalar                    211,590,4862,4863,5941            
 DOMAINS                    Dummy  4857     RECORD          176   1     1        ARG,INOUT        4871,4872                         
 J                          Local  4865     I(4)            4           scalar                    4869,4870,4872,4873,4877          
 LOOKUP_AXIS                Func   4857     I(4)            4           scalar                                                      
 MPP_DOMAIN1D_EQ            Func   4872     L(4)            4           scalar   PRIV             4872,5963                         
 PRESENT                    Func   4871                                 scalar                    4871                              
 SIZ                        Dummy  4857     I(4)            4           scalar   ARG,IN           4870                              
 SIZE                       Func   4869                                 scalar                    4869                              

Page 176         Source Listing                  LOOKUP_AXIS
2021-06-01 08:54                                 fms_io.F90

   4884 !.....................................................................
   4885 ! <SUBROUTINE NAME="field_size">
   4886 !<DESCRIPTION>
   4887 ! Given filename and fieldname, this subroutine returns the size of field
   4888 !</DESCRIPTION>
   4889 !   <TEMPLATE>
   4890 ! call field_size(filename, fieldname, siz)
   4891 !   </TEMPLATE>
   4892 !   <IN NAME="filename" TYPE="character" DIM="(*)">
   4893 !    File name
   4894 !   </IN>
   4895 !   <IN NAME="fieldname" TYPE="character" DIM="(*)">
   4896 !    Field  name
   4897 !   </IN>
   4898 !   <OUT NAME="siz" TYPE="integer" DIM="(*)">
   4899 !    siz must be a dimension(4) array to retrieve the size of the field
   4900 !   </OUT>
   4901 !   <OUT NAME="field_found" TYPE="logical, optional">
   4902 !    if this flag is present, field_size will not abort if
   4903 !    called for a non-existent field.
   4904 !    Instead it will return T or F depending on
   4905 !    whether or not the field was found.
   4906 !   </OUT>
   4907 subroutine field_size(filename, fieldname, siz, field_found, domain, no_domain )
   4908 
   4909   character(len=*), intent(in)                 :: filename, fieldname
   4910   integer,       intent(inout)                 :: siz(:)
   4911   logical,       intent(out), optional         :: field_found
   4912   type(domain2d), intent(in), optional, target :: domain
   4913   logical,       intent(in),  optional         :: no_domain
   4914 
   4915   integer                              :: nfile, unit
   4916   logical                              :: found, found_file
   4917   character(len=256)                   :: actual_file
   4918   logical                              :: read_dist, io_domain_exist, is_no_domain
   4919 
   4920   if (size(siz(:)) < 4) call mpp_error(FATAL,'fms_io(field_size): size array must be >=4 to receive field size of ' &
   4921        //trim(fieldname)//' in file '// trim(filename))
   4922 
   4923   is_no_domain = .false.
   4924   if(present(no_domain)) is_no_domain = no_domain
   4925 
   4926 !--- first need to get the filename, when is_no_domain is true, only check file without tile
   4927 !--- if is_no_domain is false, first check no_domain=.false., then check no_domain = .true.
   4928   found_file = get_file_name(filename, actual_file, read_dist, io_domain_exist, no_domain=is_no_domain, &
   4929                              domain=domain)
   4930 !--- when is_no_domain is true and file is not found, send out error message.
   4931   if(is_no_domain .AND. .NOT. found_file) call mpp_error(FATAL, &
   4932          'fms_io_mod(field_size): file '//trim(filename)//' and corresponding distributed file are not found')
   4933   found = .false.
   4934   if(found_file) then
   4935      call get_file_unit(actual_file, unit, nfile, read_dist, io_domain_exist, domain=domain)
   4936      call get_size(unit,fieldname,siz,found)
   4937   endif
   4938 
   4939   if(.not.found .AND. .not. is_no_domain) then
   4940     found_file =  get_file_name(filename, actual_file, read_dist, io_domain_exist, no_domain=.true.)

Page 177         Source Listing                  FIELD_SIZE
2021-06-01 08:54                                 fms_io.F90

   4941     if(found_file) then
   4942       call get_file_unit(actual_file, unit, nfile, read_dist, io_domain_exist, domain=domain)
   4943       call get_size(unit,fieldname,siz,found)
   4944     endif
   4945   endif
   4946 
   4947 ! If field_found is present we assume that it is being checked on exit.
   4948 ! If not present and the field was not found, exit with a FATAL error.
   4949   if( PRESENT(field_found) )then
   4950      field_found = found
   4951   else if (.not. found )then
   4952      call mpp_error(FATAL, 'fms_io(field_size): field '//trim(fieldname)//' NOT found in file '//trim(actual_file))
   4953   end if
   4954 
   4955   return
   4956 end subroutine field_size


ENTRY POINTS

  Name                                 
                                       
 fms_io_mod_mp_field_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTUAL_FILE                Local  4917     CHAR            256         scalar                    4928,4935,4940,4942,4952          
 DOMAIN                     Dummy  4907     DOMAIN2D        752         scalar   ARG,TGT,IN       4929,4935,4942                    
 FIELDNAME                  Dummy  4907     CHAR                        scalar   ARG,IN           4921,4936,4943,4952               
 FIELD_FOUND                Dummy  4907     L(4)            4           scalar   ARG,OUT          4949,4950                         
 FIELD_SIZE                 Subr   4907                                                                                             
 FILENAME                   Dummy  4907     CHAR                        scalar   ARG,IN           4921,4928,4932,4940               
 FOUND                      Local  4916     L(4)            4           scalar                    4933,4936,4939,4943,4950,4951     
 FOUND_FILE                 Local  4916     L(4)            4           scalar                    4928,4931,4934,4940,4941          
 GET_FILE_NAME              Func   4928     L(4)            4           scalar                    597,4928,4940,4976,4986,5027,5039,
                                                                                                  5340,5484,5486,5527,5529,5657,5705
                                                                                                  ,5748,8152,8160,8195,8202,8213,824
                                                                                                  1,8249,8444,8446,8503,8517        
 GET_FILE_NAME@0            Local  4928     L(4)            4           scalar                                                      
 IO_DOMAIN_EXIST            Local  4918     L(4)            4           scalar                    4928,4935,4940,4942               
 IS_NO_DOMAIN               Local  4918     L(4)            4           scalar                    4923,4924,4928,4931,4939          
 NFILE                      Local  4915     I(4)            4           scalar                    4935,4942                         
 NO_DOMAIN                  Dummy  4907     L(4)            4           scalar   ARG,IN           4924                              
 PRESENT                    Func   4924                                 scalar                    4924,4949                         
 READ_DIST                  Local  4918     L(4)            4           scalar                    4928,4935,4940,4942               
 SIZ                        Dummy  4907     I(4)            4     1     1        ARG,INOUT        4920,4936,4943                    
 SIZE                       Func   4920                                 scalar                    4920                              
 TRIM                       Func   4921                                 scalar                    4921,4932,4952                    
 UNIT                       Local  4915     I(4)            4           scalar                    4935,4936,4942,4943               

Page 178         Source Listing                  FIELD_SIZE
2021-06-01 08:54                                 fms_io.F90

   4957 ! </SUBROUTINE>
   4958 subroutine file_unit(filename, found_file, unit, domain, no_domain)
   4959 
   4960   character(len=*), intent(in)                 :: filename
   4961   logical,          intent(out)                :: found_file
   4962   integer,          intent(out)                :: unit
   4963   type(domain2d), intent(in), optional, target :: domain
   4964   logical,       intent(in),  optional         :: no_domain
   4965 
   4966   integer                              :: nfile
   4967   character(len=256)                   :: actual_file
   4968   logical                              :: read_dist, io_domain_exist, is_no_domain
   4969 
   4970 
   4971   is_no_domain = .false.
   4972   if(present(no_domain)) is_no_domain = no_domain
   4973 
   4974 !--- first need to get the filename, when is_no_domain is true, only check file without tile
   4975 !--- if is_no_domain is false, first check no_domain=.false., then check no_domain = .true.
   4976   found_file = get_file_name(filename, actual_file, read_dist, io_domain_exist, no_domain=is_no_domain, &
   4977                              domain=domain)
   4978 
   4979 !--- when is_no_domain is true and file is not found, send out error message.
   4980   if(is_no_domain .AND. .NOT. found_file) call mpp_error(FATAL, &
   4981          'fms_io_mod(field_size): file '//trim(filename)//' and corresponding distributed file are not found')
   4982 
   4983   if(found_file) then
   4984      call get_file_unit(actual_file, unit, nfile, read_dist, io_domain_exist, domain=domain)
   4985   else if(.not. is_no_domain) then
   4986     found_file =  get_file_name(filename, actual_file, read_dist, io_domain_exist, no_domain=.true.)
   4987     if(found_file) then
   4988       call get_file_unit(actual_file, unit, nfile, read_dist, io_domain_exist, domain=domain)
   4989     endif
   4990   endif
   4991 
   4992 
   4993   return
   4994 end subroutine file_unit

Page 179         Source Listing                  FILE_UNIT
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                
                                      
 fms_io_mod_mp_file_unit_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTUAL_FILE                Local  4967     CHAR            256         scalar                    4976,4984,4986,4988               
 DOMAIN                     Dummy  4958     DOMAIN2D        752         scalar   ARG,TGT,IN       4977,4984,4988                    
 FILENAME                   Dummy  4958     CHAR                        scalar   ARG,IN           4976,4981,4986                    
 FILE_UNIT                  Subr   4958                                                           5108                              
 FOUND_FILE                 Dummy  4958     L(4)            4           scalar   ARG,OUT          4976,4980,4983,4986,4987          
 IO_DOMAIN_EXIST            Local  4968     L(4)            4           scalar                    4976,4984,4986,4988               
 IS_NO_DOMAIN               Local  4968     L(4)            4           scalar                    4971,4972,4976,4980,4985          
 NFILE                      Local  4966     I(4)            4           scalar                    4984,4988                         
 NO_DOMAIN                  Dummy  4958     L(4)            4           scalar   ARG,IN           4972                              
 PRESENT                    Func   4972                                 scalar                    4972                              
 READ_DIST                  Local  4968     L(4)            4           scalar                    4976,4984,4986,4988               
 TRIM                       Func   4981                                 scalar                    4981                              
 UNIT                       Dummy  4958     I(4)            4           scalar   ARG,OUT          4984,4988                         

Page 180         Source Listing                  FILE_UNIT
2021-06-01 08:54                                 fms_io.F90

   4995 
   4996 !.....................................................................
   4997 ! <SUBROUTINE NAME="dimension_size">
   4998 !<DESCRIPTION>
   4999 ! Given filename and dimension name, this function returns the size of field
   5000 !</DESCRIPTION>
   5001 !   <TEMPLATE>
   5002 ! dimsize = dimension_size(filename, dimensionname)
   5003 !   </TEMPLATE>
   5004 !   <IN NAME="filename" TYPE="character" DIM="(*)">
   5005 !    File name
   5006 !   </IN>
   5007 !   <IN NAME="dimensionname" TYPE="character" DIM="(*)">
   5008 !    Field  name
   5009 !   </IN>
   5010 function dimension_size(filename, dimname, domain, no_domain )
   5011 
   5012   character(len=*), intent(in)                 :: filename, dimname
   5013   type(domain2d), intent(in), optional, target :: domain
   5014   logical,       intent(in),  optional         :: no_domain
   5015   integer                                      :: dimension_size
   5016 
   5017   integer                              :: nfile, unit
   5018   logical                              :: found, found_file
   5019   character(len=256)                   :: actual_file
   5020   logical                              :: read_dist, io_domain_exist, is_no_domain
   5021 
   5022   is_no_domain = .false.
   5023   if(present(no_domain)) is_no_domain = no_domain
   5024 
   5025 !--- first need to get the filename, when is_no_domain is true, only check file without tile
   5026 !--- if is_no_domain is false, first check no_domain=.false., then check no_domain = .true.
   5027   found_file = get_file_name(filename, actual_file, read_dist, io_domain_exist, no_domain=is_no_domain, &
   5028                              domain=domain)
   5029 !--- when is_no_domain is true and file is not found, send out error message.
   5030   if(is_no_domain .AND. .NOT. found_file) call mpp_error(FATAL, &
   5031          'fms_io_mod(dimesion_size): file '//trim(filename)//' and corresponding distributed file are not found')
   5032   found = .false.
   5033   if(found_file) then
   5034      call get_file_unit(actual_file, unit, nfile, read_dist, io_domain_exist, domain=domain)
   5035      dimension_size = mpp_get_dimension_length(unit, dimname, found)
   5036   endif
   5037 
   5038   if(.not.found .AND. .not. is_no_domain) then
   5039     found_file =  get_file_name(filename, actual_file, read_dist, io_domain_exist, no_domain=.true.)
   5040     if(found_file) then
   5041       call get_file_unit(actual_file, unit, nfile, read_dist, io_domain_exist, domain=domain)
   5042       dimension_size = mpp_get_dimension_length(unit, dimname, found)
   5043     endif
   5044   endif
   5045 
   5046   if(.not. found) call mpp_error(FATAL, &
   5047          'fms_io_mod(dimesion_size): failed at inquiring size of dimesion '//trim(dimname)//' from file '//trim(filename))
   5048 
   5049   return
   5050 end function dimension_size

Page 181         Source Listing                  DIMENSION_SIZE
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                     
                                           
 fms_io_mod_mp_dimension_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTUAL_FILE                Local  5019     CHAR            256         scalar                    5027,5034,5039,5041               
 DIMENSION_SIZE             Func   5010     I(4)            4           scalar                                                      
 DIMNAME                    Dummy  5010     CHAR                        scalar   ARG,IN           5035,5042,5047                    
 DOMAIN                     Dummy  5010     DOMAIN2D        752         scalar   ARG,TGT,IN       5028,5034,5041                    
 FILENAME                   Dummy  5010     CHAR                        scalar   ARG,IN           5027,5031,5039,5047               
 FOUND                      Local  5018     L(4)            4           scalar                    5032,5035,5038,5042,5046          
 FOUND_FILE                 Local  5018     L(4)            4           scalar                    5027,5030,5033,5039,5040          
 IO_DOMAIN_EXIST            Local  5020     L(4)            4           scalar                    5027,5034,5039,5041               
 IS_NO_DOMAIN               Local  5020     L(4)            4           scalar                    5022,5023,5027,5030,5038          
 MPP_GET_DIMENSION_LENGTH   Func   5035     I(4)            4           scalar   PRIV             210,5035,5042                     
 NFILE                      Local  5017     I(4)            4           scalar                    5034,5041                         
 NO_DOMAIN                  Dummy  5010     L(4)            4           scalar   ARG,IN           5023                              
 PRESENT                    Func   5023                                 scalar                    5023                              
 READ_DIST                  Local  5020     L(4)            4           scalar                    5027,5034,5039,5041               
 TRIM                       Func   5031                                 scalar                    5031,5047                         
 UNIT                       Local  5017     I(4)            4           scalar                    5034,5035,5041,5042               

Page 182         Source Listing                  DIMENSION_SIZE
2021-06-01 08:54                                 fms_io.F90

   5051 ! </SUBROUTINE>
   5052 
   5053 
   5054 !.....................................................................
   5055 ! <SUBROUTINE NAME="get_field_size">
   5056 !<DESCRIPTION>
   5057 ! Given filename and fieldname, this subroutine returns the size of field
   5058 ! This is the io subset interface to field_size
   5059 !</DESCRIPTION>
   5060 !   <TEMPLATE>
   5061 ! call field_size(filename, fieldname, siz)
   5062 !   </TEMPLATE>
   5063 !   <IN NAME="filename" TYPE="character" DIM="(*)">
   5064 !    File name
   5065 !   </IN>
   5066 !   <IN NAME="fieldname" TYPE="character" DIM="(*)">
   5067 !    Field  name
   5068 !   </IN>
   5069 !   <OUT NAME="siz" TYPE="integer" DIM="(*)">
   5070 !    siz must be a dimension(4) array to retrieve the size of the field
   5071 !   </OUT>
   5072 !   <OUT NAME="field_found" TYPE="logical, optional">
   5073 !    if this flag is present, field_size will not abort if
   5074 !    called for a non-existent field.
   5075 !    Instead it will return T or F depending on
   5076 !    whether or not the field was found.
   5077 !   </OUT>
   5078 subroutine get_field_size(filename, fieldname, siz, field_found, domain, no_domain)
   5079 
   5080   character(len=*), intent(in)                 :: filename, fieldname
   5081   integer,       intent(inout)                 :: siz(:)
   5082   logical,       intent(out), optional         :: field_found
   5083   type(domain2d), intent(in), optional, target :: domain
   5084   logical,       intent(in),  optional         :: no_domain
   5085 
   5086   integer :: npes, p, unit
   5087   integer, allocatable :: pelist(:)
   5088   logical :: found, found_file
   5089   type(domain2d), pointer :: domain_in =>NULL()
   5090   type(domain2d), pointer :: io_domain =>NULL()
   5091 
   5092 
   5093   if(PRESENT(domain)) then
   5094      domain_in =>domain
   5095   elseif(ASSOCIATED(current_domain)) then
   5096      domain_in =>current_domain
   5097   else
   5098      call mpp_error(FATAL,'fms_io(get_field_size): The domain must be defined')
   5099   endif
   5100 
   5101   io_domain =>mpp_get_io_domain(domain)
   5102   if(.not. ASSOCIATED(io_domain)) call mpp_error(FATAL,'fms_io(get_field_size): The io domain must be defined')
   5103 
   5104   npes = mpp_get_domain_npes(io_domain)
   5105   allocate(pelist(npes))
   5106   call mpp_get_pelist(io_domain,pelist)
   5107 

Page 183         Source Listing                  GET_FIELD_SIZE
2021-06-01 08:54                                 fms_io.F90

   5108   call file_unit(filename, found_file, unit, domain, no_domain)
   5109 
   5110   if(mpp_pe() == pelist(1)) then
   5111      found=.false.
   5112      if(found_file) call get_size(unit,fieldname,siz,found)
   5113      if(.not. found) siz(:) = -1
   5114   endif
   5115 !--- z1l replace mpp_broadcast with mpp_send/mpp_recv to avoid hang in calling MPI_COMM_CREATE
   5116 !---     because size(pelist) might be different for different rank.
   5117 !--- prepost receive
   5118   if( mpp_pe() == pelist(1) ) then
   5119      do p = 2, npes
   5120         call mpp_send(siz(1), plen=size(siz(:)), to_pe=pelist(p), tag=COMM_TAG_1)
   5121      enddo
   5122      call mpp_sync_self()
   5123   else
   5124      call mpp_recv(siz(1), glen=size(siz(:)), from_pe=pelist(1), block=.false., tag=COMM_TAG_1)
   5125      call mpp_sync_self(check=EVENT_RECV)
   5126   endif
   5127 
   5128   found = .true.
   5129   if(siz(1) == -1) found=.false.
   5130 
   5131 ! If field_found is present we assume that it is being checked on exit.
   5132 ! If not present and the field was not found, exit with a FATAL error.
   5133   if( PRESENT(field_found) )then
   5134      field_found = found
   5135   else if (.not. found )then
   5136       call mpp_error(FATAL, 'fms_io(field_size): field '//trim(fieldname)//' NOT found in file '//trim(filename))
   5137   endif
   5138 end subroutine get_field_size

Page 184         Source Listing                  GET_FIELD_SIZE
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                     
                                           
 fms_io_mod_mp_get_field_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   5095                                 scalar                    5095,5102                         
 COMM_TAG_1                 Param  5120     I(4)            4           scalar   PRIV             221,5120,5124,12316,12327         
 DOMAIN                     Dummy  5078     DOMAIN2D        752         scalar   ARG,TGT,IN       5093,5094,5101,5108               
 DOMAIN_IN                  Local  5089     DOMAIN2D        752         scalar   PTR              5089,5094,5096                    
 EVENT_RECV                 Param  5125     I(4)            4           scalar   PRIV             221,5125,12333                    
 FIELDNAME                  Dummy  5078     CHAR                        scalar   ARG,IN           5112,5136                         
 FIELD_FOUND                Dummy  5078     L(4)            4           scalar   ARG,OUT          5133,5134                         
 FILENAME                   Dummy  5078     CHAR                        scalar   ARG,IN           5108,5136                         
 FOUND                      Local  5088     L(4)            4           scalar                    5111,5112,5113,5128,5129,5134,5135
 FOUND_FILE                 Local  5088     L(4)            4           scalar                    5108,5112                         
 GET_FIELD_SIZE             Subr   5078                                                                                             
 IO_DOMAIN                  Local  5090     DOMAIN2D        752         scalar   PTR              5090,5101,5102,5104,5106          
 MPP_RECV                   Local  5124                                 scalar   PRIV             221,5124,12324,12328              
 MPP_RECV_INT4_SCALAR       Subr   5124                                          PRIV             5124                              
 MPP_SEND                   Local  5120                                 scalar   PRIV             221,5120,12314,12317              
 MPP_SEND_INT4_SCALAR       Subr   5120                                          PRIV             5120                              
 MPP_SYNC_SELF              Subr   5122                                          PRIV             221,5122,5125,12322,12333         
 NO_DOMAIN                  Dummy  5078     L(4)            4           scalar   ARG,IN           5108                              
 NPES                       Local  5086     I(4)            4           scalar                    5104,5105,5119                    
 P                          Local  5086     I(4)            4           scalar                    5119,5120                         
 PELIST                     Local  5087     I(4)            4     1     1        ALC              5105,5106,5110,5118,5120,5124     
 PRESENT                    Func   5093                                 scalar                    5093,5133                         
 SIZ                        Dummy  5078     I(4)            4     1     1        ARG,INOUT        5112,5113,5120,5124,5129          
 SIZE                       Func   5120                                 scalar                    5120,5124                         
 TRIM                       Func   5136                                 scalar                    5136                              
 UNIT                       Local  5086     I(4)            4           scalar                    5108,5112                         

Page 185         Source Listing                  GET_FIELD_SIZE
2021-06-01 08:54                                 fms_io.F90

   5139 ! </SUBROUTINE>
   5140 
   5141 subroutine get_size(unit, fieldname, siz, found)
   5142 integer,          intent(in)    :: unit
   5143 character(len=*), intent(in)    :: fieldname
   5144 integer,          intent(inout) :: siz(:)
   5145 logical,          intent(out)   :: found
   5146 
   5147   character(len=128)             :: name
   5148   character(len=1)               :: cart
   5149   integer                        :: i, ndim, nvar, natt, ntime, siz_in(4), j, len
   5150   type(fieldtype)                :: fields(max_fields)
   5151   type(axistype)                 :: axes(max_fields)
   5152      found = .false.
   5153      call mpp_get_info(unit,ndim,nvar,natt,ntime)
   5154      if (nvar > max_fields) then
   5155         write(error_msg,'(I3,"/",I3)') nvar,max_fields
   5156         call  mpp_error(FATAL,'fms_io(field_size): max_fields too small, needs increasing, nvar/max_fields=' &
   5157              //trim(error_msg))!//' in file '//trim(filename))
   5158      endif
   5159      call mpp_get_fields(unit,fields(1:nvar))
   5160      do i=1, nvar
   5161         call mpp_get_atts(fields(i),name=name)
   5162         if (lowercase(trim(name)) == lowercase(trim(fieldname))) then
   5163            call mpp_get_atts(fields(i),ndim=ndim)
   5164            call mpp_get_atts(fields(i),axes=axes(1:ndim))
   5165            call mpp_get_atts(fields(i),siz=siz_in)
   5166            siz = siz_in
   5167            siz(4) = ntime
   5168            if(ndim == 1) then
   5169               call mpp_get_atts(axes(1), len=siz(1))
   5170            end if
   5171            do j = 1, ndim
   5172               call mpp_get_atts(axes(j),len=len)
   5173               call get_axis_cart(axes(j),cart)
   5174               select case (cart)
   5175               case ('X')
   5176                  siz(1) = len
   5177               case('Y')
   5178                  siz(2) = len
   5179               case('Z')
   5180                  siz(3) = len
   5181               case('T')
   5182                  siz(4) = len
   5183               end select
   5184            enddo
   5185            found = .true.
   5186            exit
   5187         endif
   5188      enddo
   5189 
   5190      if(.not. found) then
   5191         call mpp_get_axes(unit,axes(1:ndim))
   5192         do i=1, ndim
   5193            call mpp_get_atts(axes(i),name=name, len= siz_in(1))
   5194            if (lowercase(trim(name)) == lowercase(trim(fieldname))) then
   5195               siz(1)= siz_in(1)

Page 186         Source Listing                  GET_SIZE
2021-06-01 08:54                                 fms_io.F90

   5196               found = .true.
   5197               exit
   5198            endif
   5199         enddo
   5200      endif
   5201 end subroutine get_size


ENTRY POINTS

  Name                               
                                     
 fms_io_mod_mp_get_size_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXES                       Local  5151     RECORD          1424  1     400      TGT              5164,5169,5172,5173,5191,5193     
 CART                       Local  5148     CHAR            1           scalar                    5173,5174                         
 FIELDNAME                  Dummy  5141     CHAR                        scalar   ARG,IN           5162,5194                         
 FIELDS                     Local  5150     RECORD          1096  1     400      TGT              5159,5161,5163,5164,5165          
 FOUND                      Dummy  5141     L(4)            4           scalar   ARG,OUT          5152,5185,5190,5196               
 GET_SIZE                   Subr   5141                                                           4936,4943,5112                    
 I                          Local  5149     I(4)            4           scalar                    5160,5161,5163,5164,5165,5192,5193
 J                          Local  5149     I(4)            4           scalar                    5171,5172,5173                    
 LEN                        Local  5149     I(4)            4           scalar                    5172,5176,5178,5180,5182          
 MPP_GET_AXES               Subr   5191                                          PRIV             204,5191,8377,12293               
 MPP_GET_AXIS_ATTS          Subr   5169                                          PRIV             5169,5172,5193,7684,7691,7708,8379
                                                                                                  ,12281,12296                      
 NAME                       Local  5147     CHAR            128         scalar                    5161,5162,5193,5194               
 NATT                       Local  5149     I(4)            4           scalar                    5153                              
 NDIM                       Local  5149     I(4)            4           scalar                    5153,5163,5164,5168,5171,5191,5192
 NTIME                      Local  5149     I(4)            4           scalar                    5153,5167                         
 NVAR                       Local  5149     I(4)            4           scalar                    5153,5154,5155,5159,5160          
 SIZ                        Dummy  5141     I(4)            4     1     1        ARG,INOUT        5166,5167,5169,5176,5178,5180,5182
                                                                                                  ,5195                             
 SIZ_IN                     Local  5149     I(4)            4     1     4        TGT              5165,5166,5193,5195               
 TRIM                       Func   5157                                 scalar                    5157,5162,5194                    
 UNIT                       Dummy  5141     I(4)            4           scalar   ARG,IN           5153,5159,5191                    

Page 187         Source Listing                  GET_SIZE
2021-06-01 08:54                                 fms_io.F90

   5202 
   5203 ! <SUBROUTINE NAME="read_data">
   5204 !<DESCRIPTION>
   5205 ! This routine performs reading "fieldname" stored in "filename". The data values of fieldname
   5206 ! will be stored in "data" at the end of this routine. For fieldname with multiple timelevel
   5207 ! just repeat the routine with explicit timelevel in each call.
   5208 !</DESCRIPTION>
   5209 !   <TEMPLATE>
   5210 ! call read_data(filename,fieldname,data,domain,timelevel)
   5211 !   </TEMPLATE>
   5212 !   <IN NAME="filename" TYPE="character" DIM="(*)">
   5213 !    File name
   5214 !   </IN>
   5215 !   <IN NAME="fieldname" TYPE="character" DIM="(*)">
   5216 !    Field  name
   5217 !   </IN>
   5218 !   <IN NAME="domain"  TYPE="domain, optional">
   5219 !   domain of fieldname
   5220 !   </IN>
   5221 !   <IN NAME="timelevel" TYPE="integer, optional">
   5222 !     time level of fieldname
   5223 !   </IN>
   5224 !   <OUT NAME="data"  TYPE="real">
   5225 !   array containing data of fieldname
   5226 !   </OUT>
   5227 !=====================================================================================
   5228 subroutine read_data_i3d_new(filename,fieldname,data,domain,timelevel, &
   5229                                         no_domain,position, tile_count)
   5230   character(len=*),           intent(in)   :: filename, fieldname
   5231   integer, dimension(:,:,:), intent(inout) :: data ! 3 dimensional data
   5232   type(domain2d), intent(in),   optional   :: domain
   5233   integer, intent(in),          optional   :: timelevel
   5234   logical, intent(in),          optional   :: no_domain
   5235   integer, intent(in) ,         optional   :: position, tile_count
   5236 
   5237   real, dimension(size(data,1),size(data,2),size(data,3)) :: r_data
   5238   r_data = 0
   5239   call read_data_3d_new(filename,fieldname,r_data,domain,timelevel, &
   5240                         no_domain, .false., position, tile_count)
   5241   data = CEILING(r_data)
   5242 end subroutine read_data_i3d_new

Page 188         Source Listing                  READ_DATA_I3D_NEW
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_read_data_i3d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CEILING                    Func   5241                                 scalar                    5241                              
 DATA                       Dummy  5228     I(4)            4     3     1        ARG,INOUT        5237,5241                         
 DOMAIN                     Dummy  5228     DOMAIN2D        752         scalar   ARG,IN           5239                              
 FIELDNAME                  Dummy  5228     CHAR                        scalar   ARG,IN           5239                              
 FILENAME                   Dummy  5228     CHAR                        scalar   ARG,IN           5239                              
 NO_DOMAIN                  Dummy  5229     L(4)            4           scalar   ARG,IN           5240                              
 POSITION                   Dummy  5229     I(4)            4           scalar   ARG,IN           5240                              
 READ_DATA_I3D_NEW          Subr   5228                                          PRIV                                               
 R_DATA                     Local  5237     R(8)            8     3     0        TGT              5238,5239,5241                    
 SIZE                       Func   5237                                 scalar                    5237                              
 TILE_COUNT                 Dummy  5229     I(4)            4           scalar   ARG,IN           5240                              
 TIMELEVEL                  Dummy  5228     I(4)            4           scalar   ARG,IN           5239                              

Page 189         Source Listing                  READ_DATA_I3D_NEW
2021-06-01 08:54                                 fms_io.F90

   5243 
   5244 subroutine read_data_i2d_new(filename,fieldname,data,domain,timelevel, &
   5245                              no_domain,position, tile_count)
   5246   character(len=*),         intent(in)   :: filename, fieldname
   5247   integer, dimension(:,:), intent(inout) :: data ! 2 dimensional data
   5248   type(domain2d), intent(in), optional   :: domain
   5249   integer, intent(in),        optional   :: timelevel
   5250   logical, intent(in),        optional   :: no_domain
   5251   integer, intent(in) ,       optional   :: position, tile_count
   5252   real, dimension(size(data,1),size(data,2)) :: r_data
   5253 
   5254   r_data = 0
   5255   call read_data_2d_new(filename,fieldname,r_data,domain,timelevel, &
   5256                         no_domain, position, tile_count)
   5257   data = CEILING(r_data)
   5258 end subroutine read_data_i2d_new


ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_read_data_i2d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CEILING                    Func   5257                                 scalar                    5257                              
 DATA                       Dummy  5244     I(4)            4     2     1        ARG,INOUT        5252,5257                         
 DOMAIN                     Dummy  5244     DOMAIN2D        752         scalar   ARG,IN           5255                              
 FIELDNAME                  Dummy  5244     CHAR                        scalar   ARG,IN           5255                              
 FILENAME                   Dummy  5244     CHAR                        scalar   ARG,IN           5255                              
 NO_DOMAIN                  Dummy  5245     L(4)            4           scalar   ARG,IN           5256                              
 POSITION                   Dummy  5245     I(4)            4           scalar   ARG,IN           5256                              
 READ_DATA_I2D_NEW          Subr   5244                                          PRIV                                               
 R_DATA                     Local  5252     R(8)            8     2     0        TGT              5254,5255,5257                    
 SIZE                       Func   5252                                 scalar                    5252                              
 TILE_COUNT                 Dummy  5245     I(4)            4           scalar   ARG,IN           5256                              
 TIMELEVEL                  Dummy  5244     I(4)            4           scalar   ARG,IN           5255                              

Page 190         Source Listing                  READ_DATA_I2D_NEW
2021-06-01 08:54                                 fms_io.F90

   5259 !.....................................................................
   5260 subroutine read_data_i1d_new(filename,fieldname,data,domain,timelevel, &
   5261                              no_domain, tile_count)
   5262   character(len=*), intent(in)           :: filename, fieldname
   5263   integer, dimension(:), intent(inout)   :: data ! 1 dimensional data
   5264   type(domain2d), intent(in), optional   :: domain
   5265   integer, intent(in) , optional         :: timelevel
   5266   logical, intent(in), optional          :: no_domain
   5267   integer, intent(in), optional          :: tile_count
   5268 
   5269   real, dimension(size(data,1))        :: r_data
   5270 
   5271   call read_data_1d_new(filename,fieldname,r_data,domain,timelevel, &
   5272                         no_domain, tile_count)
   5273   data = CEILING(r_data)
   5274 end subroutine read_data_i1d_new


ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_read_data_i1d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CEILING                    Func   5273                                 scalar                    5273                              
 DATA                       Dummy  5260     I(4)            4     1     1        ARG,INOUT        5269,5273                         
 DOMAIN                     Dummy  5260     DOMAIN2D        752         scalar   ARG,IN           5271                              
 FIELDNAME                  Dummy  5260     CHAR                        scalar   ARG,IN           5271                              
 FILENAME                   Dummy  5260     CHAR                        scalar   ARG,IN           5271                              
 NO_DOMAIN                  Dummy  5261     L(4)            4           scalar   ARG,IN           5272                              
 READ_DATA_I1D_NEW          Subr   5260                                          PRIV                                               
 R_DATA                     Local  5269     R(8)            8     1     0        TGT              5271,5273                         
 SIZE                       Func   5269                                 scalar                    5269                              
 TILE_COUNT                 Dummy  5261     I(4)            4           scalar   ARG,IN           5272                              
 TIMELEVEL                  Dummy  5260     I(4)            4           scalar   ARG,IN           5271                              

Page 191         Source Listing                  READ_DATA_I1D_NEW
2021-06-01 08:54                                 fms_io.F90

   5275 !.....................................................................
   5276 subroutine read_data_iscalar_new(filename,fieldname,data,domain,timelevel, &
   5277                                  no_domain, tile_count)
   5278   character(len=*), intent(in)           :: filename, fieldname
   5279   integer, intent(inout)                 :: data
   5280   type(domain2d), intent(in), optional   :: domain
   5281   integer, intent(in) , optional         :: timelevel
   5282   logical, intent(in), optional          :: no_domain
   5283   integer, intent(in), optional          :: tile_count
   5284 
   5285   real                                 :: r_data
   5286   call read_data_scalar_new(filename,fieldname,r_data,domain,timelevel, &
   5287                             no_domain, tile_count)
   5288   data = CEILING(r_data)
   5289 end subroutine read_data_iscalar_new


ENTRY POINTS

  Name                                            
                                                  
 fms_io_mod_mp_read_data_iscalar_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CEILING                    Func   5288                                 scalar                    5288                              
 DATA                       Dummy  5276     I(4)            4           scalar   ARG,INOUT        5288                              
 DOMAIN                     Dummy  5276     DOMAIN2D        752         scalar   ARG,IN           5286                              
 FIELDNAME                  Dummy  5276     CHAR                        scalar   ARG,IN           5286                              
 FILENAME                   Dummy  5276     CHAR                        scalar   ARG,IN           5286                              
 NO_DOMAIN                  Dummy  5277     L(4)            4           scalar   ARG,IN           5287                              
 READ_DATA_ISCALAR_NEW      Subr   5276                                          PRIV                                               
 R_DATA                     Local  5285     R(8)            8           scalar                    5286,5288                         
 TILE_COUNT                 Dummy  5277     I(4)            4           scalar   ARG,IN           5287                              
 TIMELEVEL                  Dummy  5276     I(4)            4           scalar   ARG,IN           5286                              

Page 192         Source Listing                  READ_DATA_ISCALAR_NEW
2021-06-01 08:54                                 fms_io.F90

   5290 !=====================================================================================
   5291 subroutine read_data_3d_new(filename,fieldname,data,domain,timelevel, &
   5292                             no_domain, scalar_or_1d, position, tile_count)
   5293   character(len=*),                  intent(in) :: filename, fieldname
   5294   real, dimension(:,:,:),         intent(inout) :: data ! 3 dimensional data
   5295   type(domain2d), target, optional,  intent(in) :: domain
   5296   integer,                optional,  intent(in) :: timelevel
   5297   logical,                optional,  intent(in) :: no_domain
   5298   logical,                optional,  intent(in) :: scalar_or_1d
   5299   integer,                optional,  intent(in) :: position, tile_count
   5300 
   5301   character(len=256)            :: fname
   5302   integer                       :: unit, siz_in(4)
   5303   integer                       :: file_index  ! index of the opened file in array files
   5304   integer                       :: tlev=1
   5305   integer                       :: index_field ! position of the fieldname in the list of variables
   5306   integer                       :: cxsize, cysize
   5307   integer                       :: dxsize, dysize
   5308   integer                       :: gxsize, gysize
   5309   integer                       :: ishift, jshift
   5310   logical                       :: is_scalar_or_1d = .false.
   5311   logical                       :: is_no_domain = .false.
   5312   logical                       :: read_dist, io_domain_exist, found_file
   5313   type(domain2d), pointer, save :: d_ptr =>NULL()
   5314   type(domain2d), pointer, save :: io_domain =>NULL()
   5315 
   5316 
   5317 ! read disttributed files is used when reading restart files that are NOT mppnccombined. In this
   5318 ! case PE 0 will read file_res.nc.0000, PE 1 will read file_res.nc.0001 and so forth.
   5319 !
   5320 ! Initialize files to default values
   5321   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_data_3d_new):  module not initialized')
   5322   is_no_domain = .false.
   5323   if (PRESENT(no_domain)) THEN
   5324      if(PRESENT(domain) .AND. no_domain) &
   5325        call mpp_error(FATAL, 'fms_io(read_data_3d_new): no_domain cannot be .true. when optional argument domain is present.
   5325 ')
   5326      is_no_domain = no_domain
   5327   endif
   5328 
   5329   if(PRESENT(domain))then
   5330      d_ptr => domain
   5331   elseif (ASSOCIATED(Current_domain) .AND. .NOT. is_no_domain ) then
   5332      d_ptr => Current_domain
   5333   endif
   5334 
   5335   is_scalar_or_1d = .false.
   5336   if(present(scalar_or_1d)) is_scalar_or_1d = scalar_or_1d
   5337 
   5338   if(.not. PRESENT(domain) .and. .not. ASSOCIATED(Current_domain) ) is_no_domain = .true.
   5339 
   5340   found_file = get_file_name(filename, fname, read_dist, io_domain_exist, is_no_domain, domain,  tile_count)
   5341   if(.not.found_file) call mpp_error(FATAL, 'fms_io_mod(read_data_3d_new): file ' //trim(filename)// &
   5342           '(with the consideration of tile number) and corresponding distributed file are not found')
   5343   call get_file_unit(fname, unit, file_index, read_dist, io_domain_exist, domain=domain)
   5344 
   5345   siz_in(3) = size(data,3)

Page 193         Source Listing                  READ_DATA_3D_NEW
2021-06-01 08:54                                 fms_io.F90

   5346   if(is_no_domain .or. .NOT. associated(d_ptr) .or. is_scalar_or_1d) then
   5347      gxsize = size(data,1)
   5348      gysize = size(data,2)
   5349   else if(read_dist) then
   5350      if(io_domain_exist) then
   5351         io_domain=>mpp_get_io_domain(d_ptr)
   5352         call mpp_get_global_domain(io_domain, xsize = gxsize, ysize = gysize, tile_count=tile_count, position=position)
   5353         io_domain=>NULL()
   5354      else
   5355         call mpp_get_compute_domain(d_ptr, xsize = gxsize, ysize = gysize, tile_count=tile_count, position=position)
   5356      endif
   5357   else
   5358      call mpp_get_compute_domain(d_ptr, xsize = cxsize, ysize = cysize, tile_count=tile_count, position=position)
   5359      call mpp_get_data_domain   (d_ptr, xsize = dxsize, ysize = dysize, tile_count=tile_count, position=position)
   5360      call mpp_get_global_domain (d_ptr, xsize = gxsize, ysize = gysize, tile_count=tile_count, position=position)
   5361      call mpp_get_domain_shift  (d_ptr, ishift, jshift, position)
   5362      if( (size(data,1) .NE. cxsize .AND. size(data,1) .NE. dxsize) .OR. &
   5363          (size(data,2) .NE. cysize .AND. size(data,2) .NE. dysize) )then
   5364        call mpp_error(FATAL,'fms_io(read_data_3d_new): data should be on either compute domain '//&
   5365                             'or data domain when domain is present. '//&
   5366                             'shape(data)=',shape(data),'  cxsize,cysize,dxsize,dysize=',(/cxsize,cysize,dxsize,dysize/))
   5367      end if
   5368   endif
   5369 
   5370   if (PRESENT(timelevel)) then
   5371      tlev = timelevel
   5372   else
   5373      tlev = 1
   5374   endif
   5375 
   5376   call get_field_id(unit, file_index, fieldname, index_field, is_no_domain, .false. )
   5377   siz_in(1:4) = files_read(file_index)%var(index_field)%siz(1:4)
   5378   if(files_read(file_index)%var(index_field)%is_dimvar ) then
   5379      if (.not. read_dist) then
   5380         if (siz_in(1) /= gxsize) &
   5381              call mpp_error(FATAL,'fms_io(read_data_3d_new), field '//trim(fieldname)// &
   5382              ' in file '//trim(filename)//' field size mismatch 2')
   5383      endif
   5384   else
   5385      if (siz_in(1) /= gxsize .or. siz_in(2) /= gysize .or. siz_in(3) /= size(data,3)) then
   5386         PRINT *, gxsize, gysize, size(data, 3), siz_in(1), siz_in(2), siz_in(3)
   5387         call mpp_error(FATAL,'fms_io(read_data_3d_new), field '//trim(fieldname)// &
   5388              ' in file '//trim(filename)//': field size mismatch 1')
   5389      endif
   5390   end if
   5391   if ( tlev < 1 .or. files_read(file_index)%max_ntime < tlev)  then
   5392      write(error_msg,'(I5,"/",I5)') tlev, files_read(file_index)%max_ntime
   5393      call mpp_error(FATAL,'fms_io(read_data_3d_new): time level out of range, time level/max_time_level=' &
   5394           //trim(error_msg)//' in field/file: '//trim(fieldname)//'/'//trim(filename))
   5395   endif
   5396 
   5397   if(is_no_domain .OR. is_scalar_or_1d) then
   5398      if (files_read(file_index)%var(index_field)%is_dimvar) then
   5399         call mpp_get_axis_data(files_read(file_index)%var(index_field)%axis,data(:,1,1))
   5400      else
   5401         call mpp_read(unit,files_read(file_index)%var(index_field)%field,data(:,:,:),tlev)
   5402      endif

Page 194         Source Listing                  READ_DATA_3D_NEW
2021-06-01 08:54                                 fms_io.F90

   5403   else
   5404      call mpp_read(unit,files_read(file_index)%var(index_field)%field,d_ptr,data,tlev,tile_count)
   5405   endif
   5406 
   5407   d_ptr =>NULL()
   5408 
   5409   return
   5410 end subroutine read_data_3d_new


ENTRY POINTS

  Name                                       
                                             
 fms_io_mod_mp_read_data_3d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   5331                                 scalar                    5331,5338,5346                    
 CXSIZE                     Local  5306     I(4)            4           scalar                    5358,5362,5366                    
 CYSIZE                     Local  5306     I(4)            4           scalar                    5358,5363,5366                    
 DATA                       Dummy  5291     R(8)            8     3     1        ARG,INOUT        5345,5347,5348,5362,5363,5366,5385
                                                                                                  ,5386,5399,5401,5404              
 DOMAIN                     Dummy  5291     DOMAIN2D        752         scalar   ARG,TGT,IN       5324,5329,5330,5338,5340,5343     
 DXSIZE                     Local  5307     I(4)            4           scalar                    5359,5362,5366                    
 DYSIZE                     Local  5307     I(4)            4           scalar                    5359,5363,5366                    
 D_PTR                      Local  5313     DOMAIN2D        752         scalar   PTR,SAVE         5313,5330,5332,5346,5351,5355,5358
                                                                                                  ,5359,5360,5361,5404,5407         
 FIELDNAME                  Dummy  5291     CHAR                        scalar   ARG,IN           5376,5381,5387,5394               
 FILENAME                   Dummy  5291     CHAR                        scalar   ARG,IN           5340,5341,5382,5388,5394          
 FILE_INDEX                 Local  5303     I(4)            4           scalar                    5343,5376,5377,5378,5391,5392,5398
                                                                                                  ,5399,5401,5404                   
 FNAME                      Local  5301     CHAR            256         scalar                    5340,5343                         
 FOUND_FILE                 Local  5312     L(4)            4           scalar                    5340,5341                         
 GXSIZE                     Local  5308     I(4)            4           scalar                    5347,5352,5355,5360,5380,5385,5386
 GYSIZE                     Local  5308     I(4)            4           scalar                    5348,5352,5355,5360,5385,5386     
 INDEX_FIELD                Local  5305     I(4)            4           scalar                    5376,5377,5378,5398,5399,5401,5404
 IO_DOMAIN                  Local  5314     DOMAIN2D        752         scalar   PTR,SAVE         5314,5351,5352,5353               
 IO_DOMAIN_EXIST            Local  5312     L(4)            4           scalar                    5340,5343,5350                    
 ISHIFT                     Local  5309     I(4)            4           scalar                    5361                              
 IS_NO_DOMAIN               Local  5311     L(4)            4           scalar                    5311,5322,5326,5331,5338,5340,5346
                                                                                                  ,5376,5397                        
 IS_SCALAR_OR_1D            Local  5310     L(4)            4           scalar                    5310,5335,5336,5346,5397          
 JSHIFT                     Local  5309     I(4)            4           scalar                    5361                              
 MPP_ERROR_IA_IA            Subr   5364                                          PRIV             5364                              
 MPP_GET_AXIS_DATA          Subr   5399                                          PRIV             204,5399,5494,5537,11495,11582,116
                                                                                                  69                                
 NO_DOMAIN                  Dummy  5292     L(4)            4           scalar   ARG,IN           5323,5324,5326                    
 POSITION                   Dummy  5292     I(4)            4           scalar   ARG,IN           5352,5355,5358,5359,5360,5361     
 PRESENT                    Func   5323                                 scalar                    5323,5324,5329,5336,5338,5370     
 READ_DATA_3D_NEW           Subr   5291                                          PRIV             5239,5789,5867,5905,5928          
 READ_DIST                  Local  5312     L(4)            4           scalar                    5340,5343,5349,5379               
 SCALAR_OR_1D               Dummy  5292     L(4)            4           scalar   ARG,IN           5336                              
 SHAPE                      Func   5366                                 scalar                    5366                              

Page 195         Source Listing                  READ_DATA_3D_NEW
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 SIZE                       Func   5345                                 scalar                    5345,5347,5348,5362,5363,5385,5386
 SIZ_IN                     Local  5302     I(4)            4     1     4                         5345,5377,5380,5385,5386          
 TILE_COUNT                 Dummy  5292     I(4)            4           scalar   ARG,IN           5340,5352,5355,5358,5359,5360,5404
 TIMELEVEL                  Dummy  5291     I(4)            4           scalar   ARG,IN           5370,5371                         
 TLEV                       Local  5304     I(4)            4           scalar                    5304,5371,5373,5391,5392,5401,5404
 TRIM                       Func   5341                                 scalar                    5341,5381,5382,5387,5388,5394     
 UNIT                       Local  5302     I(4)            4           scalar                    5343,5376,5401,5404               


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 VAR_TYPE.AXIS              AXISTYPE        1424  1648           scalar   PRIV             5399,5494,5537,8385,11495,11582,11 
                                                                                           669                                

Page 196         Source Listing                  READ_DATA_3D_NEW
2021-06-01 08:54                                 fms_io.F90

   5411 
   5412 
   5413 !=====================================================================================
   5414 subroutine read_compressed_i1d(filename,fieldname,data,domain,timelevel,start,nread,threading)
   5415   character(len=*), intent(in)           :: filename, fieldname
   5416   integer, dimension(:), intent(inout)   :: data ! 1 dimensional data
   5417   type(domain2d), intent(in), optional   :: domain
   5418   integer, intent(in) , optional         :: timelevel
   5419   integer, intent(in) , optional         :: start(:), nread(:)
   5420   integer, intent(in) , optional         :: threading
   5421   real, dimension(size(data))        :: r_data
   5422 
   5423   r_data = 0.0
   5424   call read_compressed_1d(filename,fieldname,r_data,domain,timelevel,start,nread,threading)
   5425   data = CEILING(r_data)
   5426 end subroutine read_compressed_i1d


ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_read_compressed_i1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CEILING                    Func   5425                                 scalar                    5425                              
 DATA                       Dummy  5414     I(4)            4     1     1        ARG,INOUT        5421,5425                         
 DOMAIN                     Dummy  5414     DOMAIN2D        752         scalar   ARG,IN           5424                              
 FIELDNAME                  Dummy  5414     CHAR                        scalar   ARG,IN           5424                              
 FILENAME                   Dummy  5414     CHAR                        scalar   ARG,IN           5424                              
 NREAD                      Dummy  5414     I(4)            4     1     1        ARG,IN           5424                              
 READ_COMPRESSED_I1D        Subr   5414                                          PRIV                                               
 R_DATA                     Local  5421     R(8)            8     1     0        TGT              5423,5424,5425                    
 SIZE                       Func   5421                                 scalar                    5421                              
 START                      Dummy  5414     I(4)            4     1     1        ARG,IN           5424                              
 THREADING                  Dummy  5414     I(4)            4           scalar   ARG,IN           5424                              
 TIMELEVEL                  Dummy  5414     I(4)            4           scalar   ARG,IN           5424                              

Page 197         Source Listing                  READ_COMPRESSED_I1D
2021-06-01 08:54                                 fms_io.F90

   5427 !.....................................................................
   5428 subroutine read_compressed_i2d(filename,fieldname,data,domain,timelevel,start,nread,threading)
   5429   character(len=*),         intent(in)   :: filename, fieldname
   5430   integer, dimension(:,:), intent(inout) :: data ! 2 dimensional data
   5431   type(domain2d), intent(in), optional   :: domain
   5432   integer, intent(in),        optional   :: timelevel
   5433   integer, intent(in) , optional         :: start(:), nread(:)
   5434   integer, intent(in) , optional         :: threading
   5435   real, dimension(size(data,1),size(data,2)) :: r_data
   5436 
   5437   r_data = 0.0
   5438   call read_compressed_2d(filename,fieldname,r_data,domain,timelevel,start,nread,threading)
   5439   data = CEILING(r_data)
   5440 end subroutine read_compressed_i2d


ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_read_compressed_i2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CEILING                    Func   5439                                 scalar                    5439                              
 DATA                       Dummy  5428     I(4)            4     2     1        ARG,INOUT        5435,5439                         
 DOMAIN                     Dummy  5428     DOMAIN2D        752         scalar   ARG,IN           5438                              
 FIELDNAME                  Dummy  5428     CHAR                        scalar   ARG,IN           5438                              
 FILENAME                   Dummy  5428     CHAR                        scalar   ARG,IN           5438                              
 NREAD                      Dummy  5428     I(4)            4     1     1        ARG,IN           5438                              
 READ_COMPRESSED_I2D        Subr   5428                                          PRIV                                               
 R_DATA                     Local  5435     R(8)            8     2     0        TGT              5437,5438,5439                    
 SIZE                       Func   5435                                 scalar                    5435                              
 START                      Dummy  5428     I(4)            4     1     1        ARG,IN           5438                              
 THREADING                  Dummy  5428     I(4)            4           scalar   ARG,IN           5438                              
 TIMELEVEL                  Dummy  5428     I(4)            4           scalar   ARG,IN           5438                              

Page 198         Source Listing                  READ_COMPRESSED_I2D
2021-06-01 08:54                                 fms_io.F90

   5441 !.....................................................................
   5442 subroutine read_compressed_1d(filename,fieldname,data,domain,timelevel,start,nread,threading)
   5443   character(len=*), intent(in)           :: filename, fieldname
   5444   real, dimension(:), intent(inout)      :: data     !1 dimensional data
   5445   real, dimension(size(data,1),1)        :: data_2d
   5446   type(domain2d), intent(in), optional   :: domain
   5447   integer, intent(in) , optional         :: timelevel
   5448   integer, intent(in) , optional         :: start(:), nread(:)
   5449   integer, intent(in) , optional         :: threading
   5450 
   5451   pointer( p, data_2d )
   5452   p = LOC(data)
   5453 
   5454   call read_compressed_2d(filename,fieldname,data_2d,domain,timelevel,start,nread,threading)
   5455 end subroutine read_compressed_1d


ENTRY POINTS

  Name                                         
                                               
 fms_io_mod_mp_read_compressed_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5442     R(8)            8     1     1        ARG,INOUT        5445,5452                         
 DATA_2D                    Local  5445     R(8)            8     2     0                         5454                              
 DOMAIN                     Dummy  5442     DOMAIN2D        752         scalar   ARG,IN           5454                              
 FIELDNAME                  Dummy  5442     CHAR                        scalar   ARG,IN           5454                              
 FILENAME                   Dummy  5442     CHAR                        scalar   ARG,IN           5454                              
 LOC                        Func   5452                                 scalar                    5452                              
 NREAD                      Dummy  5442     I(4)            4     1     1        ARG,IN           5454                              
 P                          Local  5451     I(8)            8           scalar   PTR              5452                              
 READ_COMPRESSED_1D         Subr   5442                                          PRIV             5424                              
 SIZE                       Func   5445                                 scalar                    5445                              
 START                      Dummy  5442     I(4)            4     1     1        ARG,IN           5454                              
 THREADING                  Dummy  5442     I(4)            4           scalar   ARG,IN           5454                              
 TIMELEVEL                  Dummy  5442     I(4)            4           scalar   ARG,IN           5454                              

Page 199         Source Listing                  READ_COMPRESSED_1D
2021-06-01 08:54                                 fms_io.F90

   5456 !.....................................................................
   5457 subroutine read_compressed_2d(filename,fieldname,data,domain,timelevel,start,nread,threading)
   5458   character(len=*), intent(in)           :: filename, fieldname
   5459   real, dimension(:,:), intent(inout)    :: data     !2 dimensional data
   5460   type(domain2d), target, optional, intent(in) :: domain
   5461   integer, intent(in) , optional         :: timelevel
   5462   integer, intent(in) , optional         :: start(:), nread(:)
   5463   integer, intent(in) , optional         :: threading
   5464 
   5465   character(len=256)            :: fname
   5466   integer                       :: unit, siz_in(4)
   5467   integer                       :: file_index  ! index of the opened file in array files
   5468   integer                       :: index_field ! position of the fieldname in the list of variables
   5469   logical                       :: read_dist, io_domain_exist, found_file
   5470   type(domain2d), pointer, save :: d_ptr =>NULL()
   5471   type(domain2d), pointer, save :: io_domain =>NULL()
   5472 
   5473 ! Initialize files to default values
   5474   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_compressed_2d):  module not initialized')
   5475 
   5476   if(PRESENT(domain))then
   5477      d_ptr => domain
   5478   elseif (ASSOCIATED(Current_domain)) then
   5479      d_ptr => Current_domain
   5480   else
   5481      call mpp_error(FATAL,'fms_io(read_compressed_2d): Domain must be an argument or set by set_domain()')
   5482   endif
   5483 
   5484   found_file = get_file_name(filename, fname, read_dist, io_domain_exist, domain=d_ptr)
   5485   if(.not. found_file) then
   5486      found_file = get_file_name(filename, fname, read_dist, io_domain_exist, no_domain=.true. )
   5487   endif
   5488   if(.not.found_file) call mpp_error(FATAL, 'fms_io_mod(read_compressed_2d): file ' //trim(filename)// &
   5489           '(with the consideration of tile number) and corresponding distributed file are not found')
   5490   call get_file_unit(fname, unit, file_index, read_dist, io_domain_exist, domain=d_ptr)
   5491   call get_field_id(unit, file_index, fieldname, index_field, .false., .false. )
   5492 
   5493   if (files_read(file_index)%var(index_field)%is_dimvar) then
   5494      call mpp_get_axis_data(files_read(file_index)%var(index_field)%axis,data(:,1))
   5495   else
   5496      call mpp_read_compressed(unit,files_read(file_index)%var(index_field)%field,d_ptr,data,timelevel,start,nread,threading)
   5497   endif
   5498   d_ptr =>NULL()
   5499 end subroutine read_compressed_2d

Page 200         Source Listing                  READ_COMPRESSED_2D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                         
                                               
 fms_io_mod_mp_read_compressed_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   5478                                 scalar                    5478                              
 DATA                       Dummy  5457     R(8)            8     2     1        ARG,INOUT        5494,5496                         
 DOMAIN                     Dummy  5457     DOMAIN2D        752         scalar   ARG,TGT,IN       5476,5477                         
 D_PTR                      Local  5470     DOMAIN2D        752         scalar   PTR,SAVE         5470,5477,5479,5484,5490,5496,5498
 FIELDNAME                  Dummy  5457     CHAR                        scalar   ARG,IN           5491                              
 FILENAME                   Dummy  5457     CHAR                        scalar   ARG,IN           5484,5486,5488                    
 FILE_INDEX                 Local  5467     I(4)            4           scalar                    5490,5491,5493,5494,5496          
 FNAME                      Local  5465     CHAR            256         scalar                    5484,5486,5490                    
 FOUND_FILE                 Local  5469     L(4)            4           scalar                    5484,5485,5486,5488               
 INDEX_FIELD                Local  5468     I(4)            4           scalar                    5491,5493,5494,5496               
 IO_DOMAIN                  Local  5471     DOMAIN2D        752         scalar   PTR,SAVE         5471                              
 IO_DOMAIN_EXIST            Local  5469     L(4)            4           scalar                    5484,5486,5490                    
 MPP_READ_COMPRESSED        Local  5496                                 scalar   PRIV             202,5496,5539                     
 MPP_READ_COMPRESSED_R2D_R8 Subr   5496                                          PRIV             5496                              
 NREAD                      Dummy  5457     I(4)            4     1     1        ARG,IN           5496                              
 PRESENT                    Func   5476                                 scalar                    5476                              
 READ_COMPRESSED_2D         Subr   5457                                          PRIV             5438,5454                         
 READ_DIST                  Local  5469     L(4)            4           scalar                    5484,5486,5490                    
 SIZ_IN                     Local  5466     I(4)            4     1     4                                                           
 START                      Dummy  5457     I(4)            4     1     1        ARG,IN           5496                              
 THREADING                  Dummy  5457     I(4)            4           scalar   ARG,IN           5496                              
 TIMELEVEL                  Dummy  5457     I(4)            4           scalar   ARG,IN           5496                              
 TRIM                       Func   5488                                 scalar                    5488                              
 UNIT                       Local  5466     I(4)            4           scalar                    5490,5491,5496                    

Page 201         Source Listing                  READ_COMPRESSED_2D
2021-06-01 08:54                                 fms_io.F90

   5500 
   5501 !.....................................................................
   5502 subroutine read_compressed_3d(filename,fieldname,data,domain,timelevel)
   5503   character(len=*), intent(in)           :: filename, fieldname
   5504   real, dimension(:,:,:), intent(inout)  :: data     !3 dimensional data
   5505   type(domain2d), target, optional, intent(in) :: domain
   5506   integer, intent(in) , optional         :: timelevel
   5507 
   5508   character(len=256)            :: fname
   5509   integer                       :: unit
   5510   integer                       :: file_index  ! index of the opened file in array files
   5511   integer                       :: index_field ! position of the fieldname in the list of variables
   5512   logical                       :: read_dist, io_domain_exist, found_file
   5513   type(domain2d), pointer, save :: d_ptr =>NULL()
   5514   type(domain2d), pointer, save :: io_domain =>NULL()
   5515 
   5516 ! Initialize files to default values
   5517   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_compressed_3d):  module not initialized')
   5518 
   5519   if(PRESENT(domain))then
   5520      d_ptr => domain
   5521   elseif (ASSOCIATED(Current_domain)) then
   5522      d_ptr => Current_domain
   5523   else
   5524      call mpp_error(FATAL,'fms_io(read_compressed_3d): Domain must be an argument or set by set_domain()')
   5525   endif
   5526 
   5527   found_file = get_file_name(filename, fname, read_dist, io_domain_exist, domain=d_ptr)
   5528   if(.not. found_file) then
   5529      found_file = get_file_name(filename, fname, read_dist, io_domain_exist, no_domain=.true. )
   5530   endif
   5531   if(.not.found_file) call mpp_error(FATAL, 'fms_io_mod(read_compressed_3d): file ' //trim(filename)// &
   5532           '(with the consideration of tile number) and corresponding distributed file are not found')
   5533   call get_file_unit(fname, unit, file_index, read_dist, io_domain_exist, domain=d_ptr)
   5534   call get_field_id(unit, file_index, fieldname, index_field, .false., .false. )
   5535 
   5536   if (files_read(file_index)%var(index_field)%is_dimvar) then
   5537      call mpp_get_axis_data(files_read(file_index)%var(index_field)%axis,data(:,1,1))
   5538   else
   5539      call mpp_read_compressed(unit,files_read(file_index)%var(index_field)%field,d_ptr,data,timelevel)
   5540   endif
   5541   d_ptr =>NULL()
   5542 end subroutine read_compressed_3d

Page 202         Source Listing                  READ_COMPRESSED_3D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                         
                                               
 fms_io_mod_mp_read_compressed_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   5521                                 scalar                    5521                              
 DATA                       Dummy  5502     R(8)            8     3     1        ARG,INOUT        5537,5539                         
 DOMAIN                     Dummy  5502     DOMAIN2D        752         scalar   ARG,TGT,IN       5519,5520                         
 D_PTR                      Local  5513     DOMAIN2D        752         scalar   PTR,SAVE         5513,5520,5522,5527,5533,5539,5541
 FIELDNAME                  Dummy  5502     CHAR                        scalar   ARG,IN           5534                              
 FILENAME                   Dummy  5502     CHAR                        scalar   ARG,IN           5527,5529,5531                    
 FILE_INDEX                 Local  5510     I(4)            4           scalar                    5533,5534,5536,5537,5539          
 FNAME                      Local  5508     CHAR            256         scalar                    5527,5529,5533                    
 FOUND_FILE                 Local  5512     L(4)            4           scalar                    5527,5528,5529,5531               
 INDEX_FIELD                Local  5511     I(4)            4           scalar                    5534,5536,5537,5539               
 IO_DOMAIN                  Local  5514     DOMAIN2D        752         scalar   PTR,SAVE         5514                              
 IO_DOMAIN_EXIST            Local  5512     L(4)            4           scalar                    5527,5529,5533                    
 MPP_READ_COMPRESSED_R3D_R8 Subr   5539                                          PRIV             5539                              
 PRESENT                    Func   5519                                 scalar                    5519                              
 READ_COMPRESSED_3D         Subr   5502                                          PRIV                                               
 READ_DIST                  Local  5512     L(4)            4           scalar                    5527,5529,5533                    
 TIMELEVEL                  Dummy  5502     I(4)            4           scalar   ARG,IN           5539                              
 TRIM                       Func   5531                                 scalar                    5531                              
 UNIT                       Local  5509     I(4)            4           scalar                    5533,5534,5539                    

Page 203         Source Listing                  READ_COMPRESSED_3D
2021-06-01 08:54                                 fms_io.F90

   5543 
   5544 !.....................................................................
   5545 subroutine read_distributed_a1D(unit,fmt,iostat,data)
   5546   integer, intent(in)               :: unit
   5547   character(*), intent(in)          :: fmt
   5548   integer, intent(out)              :: iostat
   5549   character(len=*), dimension(:), intent(inout) :: data
   5550 
   5551   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_distributed_a1D):  module not initialized')
   5552   call mpp_read_distributed_ascii(unit,fmt,dr_set_size,data,iostat)
   5553 end subroutine read_distributed_a1D


ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_read_distributed_a1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5545     CHAR                  1     1        ARG,INOUT        5552                              
 DR_SET_SIZE                Local  5552     I(4)            4           scalar                    627,637,5552,5567,5623,7552,7760  
 FMT                        Dummy  5545     CHAR                        scalar   ARG,IN           5552                              
 IOSTAT                     Dummy  5545     I(4)            4           scalar   ARG,OUT          5552                              
 MPP_READ_DISTRIBUTED_ASCII Local  5552                                 scalar   PRIV             203,5552,5567,5623                
 MPP_READ_DISTRIBUTED_ASCII                                                                                                         
 _A1D                       Subr   5552                                          PRIV             5552                              
 READ_DISTRIBUTED_A1D       Subr   5545                                          PRIV                                               
 UNIT                       Dummy  5545     I(4)            4           scalar   ARG,IN           5552                              

Page 204         Source Listing                  READ_DISTRIBUTED_A1D
2021-06-01 08:54                                 fms_io.F90

   5554 
   5555 !.....................................................................
   5556 subroutine read_distributed_i1D(unit,fmt,iostat,data)
   5557   integer, intent(in)               :: unit
   5558   character(*), intent(in)          :: fmt
   5559   integer, intent(out)              :: iostat
   5560   integer, dimension(:), intent(inout) :: data
   5561 
   5562   integer, allocatable :: pelist(:)
   5563   integer              :: i,lsize
   5564   logical              :: is_ioroot=.false.
   5565 
   5566   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_distributed_i1D):  module not initialized')
   5567   call mpp_read_distributed_ascii(unit,fmt,dr_set_size,data,iostat)
   5568 end subroutine read_distributed_i1D


ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_read_distributed_i1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5556     I(4)            4     1     1        ARG,INOUT        5567                              
 FMT                        Dummy  5556     CHAR                        scalar   ARG,IN           5567                              
 I                          Local  5563     I(4)            4           scalar                                                      
 IOSTAT                     Dummy  5556     I(4)            4           scalar   ARG,OUT          5567                              
 IS_IOROOT                  Local  5564     L(4)            4           scalar                    5564                              
 LSIZE                      Local  5563     I(4)            4           scalar                                                      
 MPP_READ_DISTRIBUTED_ASCII                                                                                                         
 _I1D                       Subr   5567                                          PRIV             5567                              
 PELIST                     Local  5562     I(4)            4     1     1        ALC                                                
 READ_DISTRIBUTED_I1D       Subr   5556                                          PRIV             5582                              
 UNIT                       Dummy  5556     I(4)            4           scalar   ARG,IN           5567                              

Page 205         Source Listing                  READ_DISTRIBUTED_I1D
2021-06-01 08:54                                 fms_io.F90

   5569 
   5570 !.....................................................................
   5571 subroutine read_distributed_iscalar(unit,fmt,iostat,data)
   5572   integer, intent(in)               :: unit
   5573   character(*), intent(in)          :: fmt
   5574   integer, intent(out)              :: iostat
   5575   integer, intent(inout) :: data
   5576 
   5577   integer                           :: idata(1)
   5578   pointer(ptr,idata)
   5579 
   5580   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_distributed_iscalar):  module not initialized')
   5581   ptr = LOC(data)
   5582   call read_distributed(unit,fmt,iostat,idata)
   5583 end subroutine read_distributed_iscalar


ENTRY POINTS

  Name                                               
                                                     
 fms_io_mod_mp_read_distributed_iscalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5571     I(4)            4           scalar   ARG,TGT,INOUT    5581                              
 FMT                        Dummy  5571     CHAR                        scalar   ARG,IN           5582                              
 IDATA                      Local  5577     I(4)            4     1     1                         5582                              
 IOSTAT                     Dummy  5571     I(4)            4           scalar   ARG,OUT          5582                              
 LOC                        Func   5581                                 scalar                    5581                              
 PTR                        Local  5578     I(8)            8           scalar   PTR              5581                              
 READ_DISTRIBUTED           Local  5582                                 scalar                    591,5582,5597,5612                
 READ_DISTRIBUTED_ISCALAR   Subr   5571                                          PRIV                                               
 UNIT                       Dummy  5571     I(4)            4           scalar   ARG,IN           5582                              

Page 206         Source Listing                  READ_DISTRIBUTED_ISCALAR
2021-06-01 08:54                                 fms_io.F90

   5584 
   5585 !.....................................................................
   5586 subroutine read_distributed_r3D(unit,fmt,iostat,data)
   5587   integer, intent(in)               :: unit
   5588   character(*), intent(in)          :: fmt
   5589   integer, intent(out)              :: iostat
   5590   real, dimension(:,:,:), intent(inout) :: data
   5591 
   5592   real :: data1D(size(data))
   5593   pointer(ptr,data1D)
   5594 
   5595   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_distributed_r5D):  module not initialized')
   5596   ptr = LOC(data)
   5597   call read_distributed(unit,fmt,iostat,data1D)
   5598 end subroutine read_distributed_r3D


ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_read_distributed_r3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5586     R(8)            8     3     1        ARG,INOUT        5592,5596                         
 DATA1D                     Local  5592     R(8)            8     1     0                         5597                              
 FMT                        Dummy  5586     CHAR                        scalar   ARG,IN           5597                              
 IOSTAT                     Dummy  5586     I(4)            4           scalar   ARG,OUT          5597                              
 LOC                        Func   5596                                 scalar                    5596                              
 PTR                        Local  5593     I(8)            8           scalar   PTR              5596                              
 READ_DISTRIBUTED_R3D       Subr   5586                                          PRIV                                               
 SIZE                       Func   5592                                 scalar                    5592                              
 UNIT                       Dummy  5586     I(4)            4           scalar   ARG,IN           5597                              

Page 207         Source Listing                  READ_DISTRIBUTED_R3D
2021-06-01 08:54                                 fms_io.F90

   5599 
   5600 !.....................................................................
   5601 subroutine read_distributed_r5D(unit,fmt,iostat,data)
   5602   integer, intent(in)               :: unit
   5603   character(*), intent(in)          :: fmt
   5604   integer, intent(out)              :: iostat
   5605   real, dimension(:,:,:,:,:), intent(inout) :: data
   5606 
   5607   real :: data1D(size(data))
   5608   pointer(ptr,data1D)
   5609 
   5610   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_distributed_r5D):  module not initialized')
   5611   ptr = LOC(data)
   5612   call read_distributed(unit,fmt,iostat,data1D)
   5613 end subroutine read_distributed_r5D


ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_read_distributed_r5d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5601     R(8)            8     5     1        ARG,INOUT        5607,5611                         
 DATA1D                     Local  5607     R(8)            8     1     0                         5612                              
 FMT                        Dummy  5601     CHAR                        scalar   ARG,IN           5612                              
 IOSTAT                     Dummy  5601     I(4)            4           scalar   ARG,OUT          5612                              
 LOC                        Func   5611                                 scalar                    5611                              
 PTR                        Local  5608     I(8)            8           scalar   PTR              5611                              
 READ_DISTRIBUTED_R5D       Subr   5601                                          PRIV                                               
 SIZE                       Func   5607                                 scalar                    5607                              
 UNIT                       Dummy  5601     I(4)            4           scalar   ARG,IN           5612                              

Page 208         Source Listing                  READ_DISTRIBUTED_R5D
2021-06-01 08:54                                 fms_io.F90

   5614 
   5615 !.....................................................................
   5616 subroutine read_distributed_r1D(unit,fmt,iostat,data)
   5617   integer, intent(in)               :: unit
   5618   character(*), intent(in)          :: fmt
   5619   integer, intent(out)              :: iostat
   5620   real, dimension(:), intent(inout) :: data
   5621 
   5622   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_distributed_r1D):  module not initialized')
   5623   call mpp_read_distributed_ascii(unit,fmt,dr_set_size,data,iostat)
   5624 end subroutine read_distributed_r1D


ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_read_distributed_r1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5616     R(8)            8     1     1        ARG,INOUT        5623                              
 FMT                        Dummy  5616     CHAR                        scalar   ARG,IN           5623                              
 IOSTAT                     Dummy  5616     I(4)            4           scalar   ARG,OUT          5623                              
 MPP_READ_DISTRIBUTED_ASCII                                                                                                         
 _R1D                       Subr   5623                                          PRIV             5623                              
 READ_DISTRIBUTED_R1D       Subr   5616                                          PRIV             5597,5612                         
 UNIT                       Dummy  5616     I(4)            4           scalar   ARG,IN           5623                              

Page 209         Source Listing                  READ_DISTRIBUTED_R1D
2021-06-01 08:54                                 fms_io.F90

   5625 
   5626 !=====================================================================================
   5627 subroutine read_data_2d_region(filename,fieldname,data,start,nread,domain, &
   5628                                  no_domain, tile_count)
   5629   character(len=*),                  intent(in) :: filename, fieldname
   5630   real, dimension(:,:),           intent(inout) :: data ! 3 dimensional data
   5631   integer, dimension(:),             intent(in) :: start, nread
   5632   type(domain2d), target,  optional, intent(in) :: domain
   5633   logical,                 optional, intent(in) :: no_domain
   5634   integer,                 optional, intent(in) :: tile_count
   5635   character(len=256)            :: fname
   5636   integer                       :: unit, siz_in(4)
   5637   integer                       :: file_index  ! index of the opened file in array files
   5638   integer                       :: index_field ! position of the fieldname in the list of variables
   5639   logical                       :: is_no_domain = .false.
   5640   logical                       :: read_dist, io_domain_exist, found_file
   5641   type(domain2d), pointer, save :: d_ptr =>NULL()
   5642 
   5643 
   5644 ! Initialize files to default values
   5645   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_data_2d_region):  module not initialized')
   5646   is_no_domain = .false.
   5647   if (PRESENT(no_domain)) is_no_domain = no_domain
   5648 
   5649   if(PRESENT(domain))then
   5650      d_ptr => domain
   5651   elseif (ASSOCIATED(Current_domain) .AND. .NOT. is_no_domain ) then
   5652      d_ptr => Current_domain
   5653   endif
   5654 
   5655   if(.not. PRESENT(domain) .and. .not. ASSOCIATED(Current_domain) ) is_no_domain = .true.
   5656 
   5657   found_file = get_file_name(filename, fname, read_dist, io_domain_exist, is_no_domain, domain,  tile_count)
   5658   if(.not.found_file) call mpp_error(FATAL, 'fms_io_mod(read_data_2d_region): file ' //trim(filename)// &
   5659           '(with the consideration of tile number) and corresponding distributed file are not found')
   5660   call get_file_unit(fname, unit, file_index, read_dist, io_domain_exist, domain=domain)
   5661 
   5662 
   5663   call get_field_id(unit, file_index, fieldname, index_field, is_no_domain, .false. )
   5664   siz_in(1:4) = files_read(file_index)%var(index_field)%siz(1:4)
   5665   if(files_read(file_index)%var(index_field)%is_dimvar) then
   5666      call mpp_error(FATAL, 'fms_io_mod(read_data_2d_region): the field should not be a dimension variable')
   5667   endif
   5668   call mpp_read(unit,files_read(file_index)%var(index_field)%field,data,start, nread)
   5669 
   5670   d_ptr =>NULL()
   5671 
   5672   return
   5673 end subroutine read_data_2d_region

Page 210         Source Listing                  READ_DATA_2D_REGION
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_read_data_2d_region_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   5651                                 scalar                    5651,5655                         
 DATA                       Dummy  5627     R(8)            8     2     1        ARG,INOUT        5668                              
 DOMAIN                     Dummy  5627     DOMAIN2D        752         scalar   ARG,TGT,IN       5649,5650,5655,5657,5660          
 D_PTR                      Local  5641     DOMAIN2D        752         scalar   PTR,SAVE         5641,5650,5652,5670               
 FIELDNAME                  Dummy  5627     CHAR                        scalar   ARG,IN           5663                              
 FILENAME                   Dummy  5627     CHAR                        scalar   ARG,IN           5657,5658                         
 FILE_INDEX                 Local  5637     I(4)            4           scalar                    5660,5663,5664,5665,5668          
 FNAME                      Local  5635     CHAR            256         scalar                    5657,5660                         
 FOUND_FILE                 Local  5640     L(4)            4           scalar                    5657,5658                         
 INDEX_FIELD                Local  5638     I(4)            4           scalar                    5663,5664,5665,5668               
 IO_DOMAIN_EXIST            Local  5640     L(4)            4           scalar                    5657,5660                         
 IS_NO_DOMAIN               Local  5639     L(4)            4           scalar                    5639,5646,5647,5651,5655,5657,5663
 MPP_READ_REGION_R2D_R8     Subr   5668                                          PRIV             5668                              
 NO_DOMAIN                  Dummy  5628     L(4)            4           scalar   ARG,IN           5647                              
 NREAD                      Dummy  5627     I(4)            4     1     1        ARG,IN           5668                              
 PRESENT                    Func   5647                                 scalar                    5647,5649,5655                    
 READ_DATA_2D_REGION        Subr   5627                                          PRIV                                               
 READ_DIST                  Local  5640     L(4)            4           scalar                    5657,5660                         
 SIZ_IN                     Local  5636     I(4)            4     1     4                         5664                              
 START                      Dummy  5627     I(4)            4     1     1        ARG,IN           5668                              
 TILE_COUNT                 Dummy  5628     I(4)            4           scalar   ARG,IN           5657                              
 TRIM                       Func   5658                                 scalar                    5658                              
 UNIT                       Local  5636     I(4)            4           scalar                    5660,5663,5668                    

Page 211         Source Listing                  READ_DATA_2D_REGION
2021-06-01 08:54                                 fms_io.F90

   5674 
   5675 subroutine read_data_3d_region(filename,fieldname,data,start,nread,domain, &
   5676                                  no_domain, tile_count)
   5677   character(len=*),                  intent(in) :: filename, fieldname
   5678   real, dimension(:,:,:),         intent(inout) :: data ! 3 dimensional data
   5679   integer, dimension(:),             intent(in) :: start, nread
   5680   type(domain2d), target,  optional, intent(in) :: domain
   5681   logical,                 optional, intent(in) :: no_domain
   5682   integer,                 optional, intent(in) :: tile_count
   5683   character(len=256)            :: fname
   5684   integer                       :: unit, siz_in(4)
   5685   integer                       :: file_index  ! index of the opened file in array files
   5686   integer                       :: index_field ! position of the fieldname in the list of variables
   5687   logical                       :: is_no_domain = .false.
   5688   logical                       :: read_dist, io_domain_exist, found_file
   5689   type(domain2d), pointer, save :: d_ptr =>NULL()
   5690 
   5691 
   5692 ! Initialize files to default values
   5693   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_data_3d_region):  module not initialized')
   5694   is_no_domain = .false.
   5695   if (PRESENT(no_domain)) is_no_domain = no_domain
   5696 
   5697   if(PRESENT(domain))then
   5698      d_ptr => domain
   5699   elseif (ASSOCIATED(Current_domain) .AND. .NOT. is_no_domain ) then
   5700      d_ptr => Current_domain
   5701   endif
   5702 
   5703   if(.not. PRESENT(domain) .and. .not. ASSOCIATED(Current_domain) ) is_no_domain = .true.
   5704 
   5705   found_file = get_file_name(filename, fname, read_dist, io_domain_exist, is_no_domain, domain,  tile_count)
   5706   if(.not.found_file) call mpp_error(FATAL, 'fms_io_mod(read_data_2d_region): file ' //trim(filename)// &
   5707           '(with the consideration of tile number) and corresponding distributed file are not found')
   5708   call get_file_unit(fname, unit, file_index, read_dist, io_domain_exist, domain=domain)
   5709 
   5710 
   5711   call get_field_id(unit, file_index, fieldname, index_field, is_no_domain, .false. )
   5712   siz_in(1:4) = files_read(file_index)%var(index_field)%siz(1:4)
   5713   if(files_read(file_index)%var(index_field)%is_dimvar) then
   5714      call mpp_error(FATAL, 'fms_io_mod(read_data_3d_region): the field should not be a dimension variable')
   5715   endif
   5716   call mpp_read(unit,files_read(file_index)%var(index_field)%field,data,start, nread)
   5717 
   5718   d_ptr =>NULL()
   5719 
   5720   return
   5721 end subroutine read_data_3d_region

Page 212         Source Listing                  READ_DATA_3D_REGION
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_read_data_3d_region_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   5699                                 scalar                    5699,5703                         
 DATA                       Dummy  5675     R(8)            8     3     1        ARG,INOUT        5716                              
 DOMAIN                     Dummy  5675     DOMAIN2D        752         scalar   ARG,TGT,IN       5697,5698,5703,5705,5708          
 D_PTR                      Local  5689     DOMAIN2D        752         scalar   PTR,SAVE         5689,5698,5700,5718               
 FIELDNAME                  Dummy  5675     CHAR                        scalar   ARG,IN           5711                              
 FILENAME                   Dummy  5675     CHAR                        scalar   ARG,IN           5705,5706                         
 FILE_INDEX                 Local  5685     I(4)            4           scalar                    5708,5711,5712,5713,5716          
 FNAME                      Local  5683     CHAR            256         scalar                    5705,5708                         
 FOUND_FILE                 Local  5688     L(4)            4           scalar                    5705,5706                         
 INDEX_FIELD                Local  5686     I(4)            4           scalar                    5711,5712,5713,5716               
 IO_DOMAIN_EXIST            Local  5688     L(4)            4           scalar                    5705,5708                         
 IS_NO_DOMAIN               Local  5687     L(4)            4           scalar                    5687,5694,5695,5699,5703,5705,5711
 MPP_READ_REGION_R3D_R8     Subr   5716                                          PRIV             5716                              
 NO_DOMAIN                  Dummy  5676     L(4)            4           scalar   ARG,IN           5695                              
 NREAD                      Dummy  5675     I(4)            4     1     1        ARG,IN           5716                              
 PRESENT                    Func   5695                                 scalar                    5695,5697,5703                    
 READ_DATA_3D_REGION        Subr   5675                                          PRIV                                               
 READ_DIST                  Local  5688     L(4)            4           scalar                    5705,5708                         
 SIZ_IN                     Local  5684     I(4)            4     1     4                         5712                              
 START                      Dummy  5675     I(4)            4     1     1        ARG,IN           5716                              
 TILE_COUNT                 Dummy  5676     I(4)            4           scalar   ARG,IN           5705                              
 TRIM                       Func   5706                                 scalar                    5706                              
 UNIT                       Local  5684     I(4)            4           scalar                    5708,5711,5716                    

Page 213         Source Listing                  READ_DATA_3D_REGION
2021-06-01 08:54                                 fms_io.F90

   5722 
   5723 # 5878
   5724 
   5725 
   5726 
   5727 !=====================================================================================
   5728 !--- we assume any text data are at most 2-dimensional and level is for first dimension
   5729 subroutine read_data_text(filename,fieldname,data,level)
   5730   character(len=*), intent(in)   :: filename, fieldname
   5731   character(len=*), intent(out)  :: data
   5732   integer, intent(in) , optional :: level
   5733   logical                        :: file_opened, found_file, read_dist, io_domain_exist
   5734   integer                        :: lev, unit, index_field
   5735   integer                        :: file_index
   5736   character(len=256)             :: fname
   5737 
   5738 ! Initialize files to default values
   5739   if(.not.module_is_initialized) call mpp_error(FATAL,'fms_io(read_data_text):  module not initialized')
   5740 
   5741   file_opened=.false.
   5742   if (PRESENT(level)) then
   5743      lev = level
   5744   else
   5745      lev = 1
   5746   endif
   5747 
   5748   found_file = get_file_name(filename, fname, read_dist, io_domain_exist, no_domain=.true. )
   5749  if(.not.found_file) call mpp_error(FATAL, 'fms_io_mod(read_data_text): file ' //trim(filename)// &
   5750           '(with the consideration of tile number) and corresponding distributed file are not found')
   5751   call get_file_unit(fname, unit, file_index, read_dist, io_domain_exist )
   5752 
   5753 ! Get info of this file and field
   5754   call get_field_id(unit, file_index, fieldname, index_field, .true., .true. )
   5755 
   5756   if ( lev < 1 .or. lev > files_read(file_index)%var(index_field)%siz(1) )  then
   5757      write(error_msg,'(I5,"/",I5)') lev, files_read(file_index)%var(index_field)%siz(1)
   5758      call mpp_error(FATAL,'fms_io(read_data_text): text level out of range, level/max_level=' &
   5759           //trim(error_msg)//' in field/file: '//trim(fieldname)//'/'//trim(filename))
   5760   endif
   5761 
   5762   call mpp_read(unit,files_read(file_index)%var(index_field)%field,data, level=level)
   5763   return
   5764 end subroutine read_data_text

Page 214         Source Listing                  READ_DATA_TEXT
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                     
                                           
 fms_io_mod_mp_read_data_text_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5729     CHAR                        scalar   ARG,OUT          5762                              
 FIELDNAME                  Dummy  5729     CHAR                        scalar   ARG,IN           5754,5759                         
 FILENAME                   Dummy  5729     CHAR                        scalar   ARG,IN           5748,5749,5759                    
 FILE_INDEX                 Local  5735     I(4)            4           scalar                    5751,5754,5756,5757,5762          
 FILE_OPENED                Local  5733     L(4)            4           scalar                    5741                              
 FNAME                      Local  5736     CHAR            256         scalar                    5748,5751                         
 FOUND_FILE                 Local  5733     L(4)            4           scalar                    5748,5749                         
 INDEX_FIELD                Local  5734     I(4)            4           scalar                    5754,5756,5757,5762               
 IO_DOMAIN_EXIST            Local  5733     L(4)            4           scalar                    5748,5751                         
 LEV                        Local  5734     I(4)            4           scalar                    5743,5745,5756,5757               
 LEVEL                      Dummy  5729     I(4)            4           scalar   ARG,IN           5742,5743,5762                    
 MPP_READ_TEXT              Subr   5762                                          PRIV             5762                              
 PRESENT                    Func   5742                                 scalar                    5742                              
 READ_DATA_TEXT             Subr   5729                                          PRIV             818,8049                          
 READ_DIST                  Local  5733     L(4)            4           scalar                    5748,5751                         
 TRIM                       Func   5749                                 scalar                    5749,5759                         
 UNIT                       Local  5734     I(4)            4           scalar                    5751,5754,5762                    

Page 215         Source Listing                  READ_DATA_TEXT
2021-06-01 08:54                                 fms_io.F90

   5765 !..............................................................
   5766 ! </SUBROUTINE>
   5767 
   5768 subroutine read_data_4d_new(filename,fieldname,data,domain,timelevel,&
   5769                             no_domain,position,tile_count)
   5770   character(len=*), intent(in)                 :: filename, fieldname
   5771   real, dimension(:,:,:,:), intent(inout)      :: data     !2 dimensional data
   5772   real, dimension(size(data,1),size(data,2),size(data,3)*size(data,4)) :: data_3d
   5773   type(domain2d), intent(in), optional         :: domain
   5774   integer, intent(in) , optional               :: timelevel
   5775   logical, intent(in), optional                :: no_domain
   5776   integer, intent(in) , optional               :: position, tile_count
   5777 
   5778   integer                                      :: i, k, l
   5779   integer                                      :: isc,iec,jsc,jec,isd,ied,jsd,jed
   5780   integer                                      :: isg,ieg,jsg,jeg
   5781   integer                                      :: xsize_c,ysize_c,xsize_d,ysize_d
   5782   integer                                      :: xsize_g,ysize_g, ishift, jshift
   5783 
   5784 !#ifdef 
   5785 !  pointer( p, data_3d )
   5786 !  p = LOC(data)
   5787 !#endif
   5788 
   5789   call read_data_3d_new(filename,fieldname,data_3d,domain,timelevel,&
   5790                         no_domain,.false., position,tile_count)
   5791 
   5792   if(PRESENT(domain)) then
   5793      call mpp_get_global_domain( domain,isg,ieg,jsg,jeg,xsize=xsize_g,ysize=ysize_g, tile_count=tile_count, position=positio
   5793 n)
   5794      call mpp_get_compute_domain( domain,isc,iec,jsc,jec,xsize=xsize_c,ysize=ysize_c, tile_count=tile_count, position=positi
   5794 on)
   5795      call mpp_get_data_domain( domain,isd,ied,jsd,jed,xsize=xsize_d,ysize=ysize_d, tile_count=tile_count, position=position)
   5796      call mpp_get_domain_shift  (domain, ishift, jshift, position)
   5797      if(((size(data,1)==xsize_c) .and. (size(data,2)==ysize_c))) then !on_comp_domain
   5798         i = 0
   5799         do l = 1, size(data,4) ; do k = 1, size(data,3)
   5800            i = i + 1
   5801            data(:,:,k,l) = data_3d(:,:,i)
   5802         enddo ; enddo
   5803      else if((size(data,1)==xsize_d) .and. (size(data,2)==ysize_d)) then !on_data_domain
   5804         i = 0
   5805         do l = 1, size(data,4) ; do k = 1, size(data,3)
   5806            i = i + 1
   5807            data(isc-isd+1:iec-isd+1,jsc-jsd+1:jec-jsd+1,k,l) = data_3d(isc-isd+1:iec-isd+1,jsc-jsd+1:jec-jsd+1,i)
   5808         enddo ; enddo
   5809      else if((size(data,1)==xsize_g) .and. (size(data,2)==ysize_g)) then !on_global_domain
   5810         i = 0
   5811         do l = 1, size(data,4) ; do k = 1, size(data,3)
   5812            i = i + 1
   5813            data(:,:,k,l) = data_3d(:,:,i)
   5814         enddo ; enddo
   5815      else
   5816         call mpp_error(FATAL,'error in read_data_4d_new, field '//trim(fieldname)// &
   5817                       ' in file '//trim(filename)//' data must be in compute or data domain')
   5818      endif
   5819   else

Page 216         Source Listing                  READ_DATA_4D_NEW
2021-06-01 08:54                                 fms_io.F90

   5820      i = 0
   5821      do l = 1, size(data,4) ; do k = 1, size(data,3)
   5822         i = i + 1
   5823         data(:,:,k,l) = data_3d(:,:,i)
   5824      enddo ; enddo
   5825   endif
   5826 
   5827 end subroutine read_data_4d_new


ENTRY POINTS

  Name                                       
                                             
 fms_io_mod_mp_read_data_4d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5768     R(8)            8     4     1        ARG,INOUT        5772,5797,5799,5801,5803,5805,5807
                                                                                                  ,5809,5811,5813,5821,5823         
 DATA_3D                    Local  5772     R(8)            8     3     0        TGT              5789,5801,5807,5813,5823          
 DOMAIN                     Dummy  5768     DOMAIN2D        752         scalar   ARG,IN           5789,5792,5793,5794,5795,5796     
 FIELDNAME                  Dummy  5768     CHAR                        scalar   ARG,IN           5789,5816                         
 FILENAME                   Dummy  5768     CHAR                        scalar   ARG,IN           5789,5817                         
 I                          Local  5778     I(4)            4           scalar                    5798,5800,5801,5804,5806,5807,5810
                                                                                                  ,5812,5813,5820,5822,5823         
 IEC                        Local  5779     I(4)            4           scalar                    5794,5807                         
 IED                        Local  5779     I(4)            4           scalar                    5795                              
 IEG                        Local  5780     I(4)            4           scalar                    5793                              
 ISC                        Local  5779     I(4)            4           scalar                    5794,5807                         
 ISD                        Local  5779     I(4)            4           scalar                    5795,5807                         
 ISG                        Local  5780     I(4)            4           scalar                    5793                              
 ISHIFT                     Local  5782     I(4)            4           scalar                    5796                              
 JEC                        Local  5779     I(4)            4           scalar                    5794,5807                         
 JED                        Local  5779     I(4)            4           scalar                    5795                              
 JEG                        Local  5780     I(4)            4           scalar                    5793                              
 JSC                        Local  5779     I(4)            4           scalar                    5794,5807                         
 JSD                        Local  5779     I(4)            4           scalar                    5795,5807                         
 JSG                        Local  5780     I(4)            4           scalar                    5793                              
 JSHIFT                     Local  5782     I(4)            4           scalar                    5796                              
 K                          Local  5778     I(4)            4           scalar                    5799,5801,5805,5807,5811,5813,5821
                                                                                                  ,5823                             
 L                          Local  5778     I(4)            4           scalar                    5799,5801,5805,5807,5811,5813,5821
                                                                                                  ,5823                             
 NO_DOMAIN                  Dummy  5769     L(4)            4           scalar   ARG,IN           5790                              
 POSITION                   Dummy  5769     I(4)            4           scalar   ARG,IN           5790,5793,5794,5795,5796          
 PRESENT                    Func   5792                                 scalar                    5792                              
 READ_DATA_4D_NEW           Subr   5768                                          PRIV                                               
 SIZE                       Func   5772                                 scalar                    5772,5797,5799,5803,5805,5809,5811
                                                                                                  ,5821                             
 TILE_COUNT                 Dummy  5769     I(4)            4           scalar   ARG,IN           5790,5793,5794,5795               
 TIMELEVEL                  Dummy  5768     I(4)            4           scalar   ARG,IN           5789                              
 TRIM                       Func   5816                                 scalar                    5816,5817                         
 XSIZE_C                    Local  5781     I(4)            4           scalar                    5794,5797                         

Page 217         Source Listing                  READ_DATA_4D_NEW
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 XSIZE_D                    Local  5781     I(4)            4           scalar                    5795,5803                         
 XSIZE_G                    Local  5782     I(4)            4           scalar                    5793,5809                         
 YSIZE_C                    Local  5781     I(4)            4           scalar                    5794,5797                         
 YSIZE_D                    Local  5781     I(4)            4           scalar                    5795,5803                         
 YSIZE_G                    Local  5782     I(4)            4           scalar                    5793,5809                         

Page 218         Source Listing                  READ_DATA_4D_NEW
2021-06-01 08:54                                 fms_io.F90

   5828 
   5829 subroutine read_data_2d_UG(filename,fieldname,data,SG_domain,UG_domain,timelevel)
   5830   character(len=*), intent(in)                 :: filename, fieldname
   5831   real, dimension(:), intent(inout)            :: data     !2 dimensional data
   5832   type(domain2d), intent(in)                   :: SG_domain
   5833   type(domainUG), intent(in)                   :: UG_domain
   5834   integer, intent(in) , optional               :: timelevel
   5835   real, dimension(:,:), allocatable            :: data_2d
   5836   integer :: is, ie, js, je
   5837 
   5838   call mpp_get_compute_domain(SG_domain, is, ie, js, je)
   5839   allocate(data_2d(is:ie,js:je))
   5840   call read_data_2d_new(filename,fieldname,data_2d, SG_domain, timelevel)
   5841   call mpp_pass_SG_to_UG(UG_domain, data_2d, data)
   5842   deallocate(data_2d)
   5843 
   5844 end subroutine read_data_2d_UG


ENTRY POINTS

  Name                                      
                                            
 fms_io_mod_mp_read_data_2d_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5829     R(8)            8     1     1        ARG,INOUT        5841                              
 DATA_2D                    Local  5835     R(8)            8     2     1        ALC              5839,5840,5841,5842               
 DOMAINUG                   Type   5833                                 scalar                    217,305,341,5833,8002,8808,8821,90
                                                                                                  27,9040,9229,9239,9407,9736,9746,9
                                                                                                  849,9966,10124,10309,10319,10422,1
                                                                                                  0539,10731,11389,11440,11527,11614
                                                                                                  ,11701,11752,11794,11880,11885,120
                                                                                                  33,12134,12201,12205,12387        
 FIELDNAME                  Dummy  5829     CHAR                        scalar   ARG,IN           5840                              
 FILENAME                   Dummy  5829     CHAR                        scalar   ARG,IN           5840                              
 IE                         Local  5836     I(4)            4           scalar                    5838,5839                         
 IS                         Local  5836     I(4)            4           scalar                    5838,5839                         
 JE                         Local  5836     I(4)            4           scalar                    5838,5839                         
 JS                         Local  5836     I(4)            4           scalar                    5838,5839                         
 MPP_PASS_SG_TO_UG          Local  5841                                 scalar   PRIV             217,5841                          
 MPP_PASS_SG_TO_UG_R8_2D    Subr   5841                                          PRIV             5841                              
 READ_DATA_2D_UG            Subr   5829                                          PRIV                                               
 SG_DOMAIN                  Dummy  5829     DOMAIN2D        752         scalar   ARG,IN           5838,5840                         
 TIMELEVEL                  Dummy  5829     I(4)            4           scalar   ARG,IN           5840                              
 UG_DOMAIN                  Dummy  5829     DOMAINUG        544         scalar   ARG,IN           5841                              

Page 219         Source Listing                  READ_DATA_2D_UG
2021-06-01 08:54                                 fms_io.F90

   5845 
   5846 subroutine read_data_2d_new(filename,fieldname,data,domain,timelevel,&
   5847                             no_domain,position,tile_count)
   5848   character(len=*), intent(in)                 :: filename, fieldname
   5849   real, dimension(:,:), intent(inout)          :: data     !2 dimensional data
   5850   real, dimension(size(data,1),size(data,2),1) :: data_3d
   5851   type(domain2d), intent(in), optional         :: domain
   5852   integer, intent(in) , optional               :: timelevel
   5853   logical, intent(in), optional                :: no_domain
   5854   integer, intent(in) , optional               :: position, tile_count
   5855 
   5856 
   5857   integer                                      :: isc,iec,jsc,jec,isd,ied,jsd,jed
   5858   integer                                      :: isg,ieg,jsg,jeg
   5859   integer                                      :: xsize_c,ysize_c,xsize_d,ysize_d
   5860   integer                                      :: xsize_g,ysize_g, ishift, jshift
   5861 
   5862 !#ifdef 
   5863 !  pointer( p, data_3d )
   5864 !  p = LOC(data)
   5865 !#endif
   5866 
   5867   call read_data_3d_new(filename,fieldname,data_3d,domain,timelevel,&
   5868                         no_domain,.false., position,tile_count)
   5869 
   5870   if(PRESENT(domain)) then
   5871      call mpp_get_global_domain( domain,isg,ieg,jsg,jeg,xsize=xsize_g,ysize=ysize_g, tile_count=tile_count, position=positio
   5871 n)
   5872      call mpp_get_compute_domain( domain,isc,iec,jsc,jec,xsize=xsize_c,ysize=ysize_c, tile_count=tile_count, position=positi
   5872 on)
   5873      call mpp_get_data_domain( domain,isd,ied,jsd,jed,xsize=xsize_d,ysize=ysize_d, tile_count=tile_count, position=position)
   5874      call mpp_get_domain_shift  (domain, ishift, jshift, position)
   5875      if(((size(data,1)==xsize_c) .and. (size(data,2)==ysize_c))) then !on_comp_domain
   5876         data(:,:) = data_3d(:,:,1)
   5877      else if((size(data,1)==xsize_d) .and. (size(data,2)==ysize_d)) then !on_data_domain
   5878         data(isc-isd+1:iec-isd+1,jsc-jsd+1:jec-jsd+1) = data_3d(isc-isd+1:iec-isd+1,jsc-jsd+1:jec-jsd+1,1)
   5879      else if((size(data,1)==xsize_g) .and. (size(data,2)==ysize_g)) then !on_global_domain
   5880         data(:,:) = data_3d(:,:,1)
   5881      else
   5882         call mpp_error(FATAL,'error in read_data_2d_new, field '//trim(fieldname)// &
   5883                       ' in file '//trim(filename)//' data must be in compute or data domain')
   5884      endif
   5885   else
   5886      data(:,:) = data_3d(:,:,1)
   5887   endif
   5888 
   5889 end subroutine read_data_2d_new

Page 220         Source Listing                  READ_DATA_2D_NEW
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                       
                                             
 fms_io_mod_mp_read_data_2d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5846     R(8)            8     2     1        ARG,INOUT        5850,5875,5876,5877,5878,5879,5880
                                                                                                  ,5886                             
 DATA_3D                    Local  5850     R(8)            8     3     0        TGT              5867,5876,5878,5880,5886          
 DOMAIN                     Dummy  5846     DOMAIN2D        752         scalar   ARG,IN           5867,5870,5871,5872,5873,5874     
 FIELDNAME                  Dummy  5846     CHAR                        scalar   ARG,IN           5867,5882                         
 FILENAME                   Dummy  5846     CHAR                        scalar   ARG,IN           5867,5883                         
 IEC                        Local  5857     I(4)            4           scalar                    5872,5878                         
 IED                        Local  5857     I(4)            4           scalar                    5873                              
 IEG                        Local  5858     I(4)            4           scalar                    5871                              
 ISC                        Local  5857     I(4)            4           scalar                    5872,5878                         
 ISD                        Local  5857     I(4)            4           scalar                    5873,5878                         
 ISG                        Local  5858     I(4)            4           scalar                    5871                              
 ISHIFT                     Local  5860     I(4)            4           scalar                    5874                              
 JEC                        Local  5857     I(4)            4           scalar                    5872,5878                         
 JED                        Local  5857     I(4)            4           scalar                    5873                              
 JEG                        Local  5858     I(4)            4           scalar                    5871                              
 JSC                        Local  5857     I(4)            4           scalar                    5872,5878                         
 JSD                        Local  5857     I(4)            4           scalar                    5873,5878                         
 JSG                        Local  5858     I(4)            4           scalar                    5871                              
 JSHIFT                     Local  5860     I(4)            4           scalar                    5874                              
 NO_DOMAIN                  Dummy  5847     L(4)            4           scalar   ARG,IN           5868                              
 POSITION                   Dummy  5847     I(4)            4           scalar   ARG,IN           5868,5871,5872,5873,5874          
 PRESENT                    Func   5870                                 scalar                    5870                              
 READ_DATA_2D_NEW           Subr   5846                                          PRIV             5255,5840                         
 SIZE                       Func   5850                                 scalar                    5850,5875,5877,5879               
 TILE_COUNT                 Dummy  5847     I(4)            4           scalar   ARG,IN           5868,5871,5872,5873               
 TIMELEVEL                  Dummy  5846     I(4)            4           scalar   ARG,IN           5867                              
 TRIM                       Func   5882                                 scalar                    5882,5883                         
 XSIZE_C                    Local  5859     I(4)            4           scalar                    5872,5875                         
 XSIZE_D                    Local  5859     I(4)            4           scalar                    5873,5877                         
 XSIZE_G                    Local  5860     I(4)            4           scalar                    5871,5879                         
 YSIZE_C                    Local  5859     I(4)            4           scalar                    5872,5875                         
 YSIZE_D                    Local  5859     I(4)            4           scalar                    5873,5877                         
 YSIZE_G                    Local  5860     I(4)            4           scalar                    5871,5879                         

Page 221         Source Listing                  READ_DATA_2D_NEW
2021-06-01 08:54                                 fms_io.F90

   5890 !.....................................................................
   5891 subroutine read_data_1d_new(filename,fieldname,data,domain,timelevel,&
   5892                                                no_domain, tile_count)
   5893   character(len=*), intent(in)           :: filename, fieldname
   5894   real, dimension(:), intent(inout)      :: data     !1 dimensional data
   5895   real, dimension(size(data,1),1,1)      :: data_3d
   5896   type(domain2d), intent(in), optional   :: domain
   5897   integer, intent(in) , optional         :: timelevel
   5898   logical, intent(in), optional          :: no_domain
   5899   integer, intent(in), optional          :: tile_count
   5900 
   5901   pointer( p, data_3d )
   5902   p = LOC(data)
   5903 
   5904 
   5905   call read_data_3d_new(filename,fieldname,data_3d,domain,timelevel,&
   5906         no_domain=no_domain, scalar_or_1d=.true., tile_count=tile_count)
   5907 
   5908 end subroutine read_data_1d_new


ENTRY POINTS

  Name                                       
                                             
 fms_io_mod_mp_read_data_1d_new_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5891     R(8)            8     1     1        ARG,INOUT        5895,5902                         
 DATA_3D                    Local  5895     R(8)            8     3     0                         5905                              
 DOMAIN                     Dummy  5891     DOMAIN2D        752         scalar   ARG,IN           5905                              
 FIELDNAME                  Dummy  5891     CHAR                        scalar   ARG,IN           5905                              
 FILENAME                   Dummy  5891     CHAR                        scalar   ARG,IN           5905                              
 LOC                        Func   5902                                 scalar                    5902                              
 NO_DOMAIN                  Dummy  5892     L(4)            4           scalar   ARG,IN           5906                              
 P                          Local  5901     I(8)            8           scalar   PTR              5902                              
 READ_DATA_1D_NEW           Subr   5891                                          PRIV             5271                              
 SIZE                       Func   5895                                 scalar                    5895                              
 TILE_COUNT                 Dummy  5892     I(4)            4           scalar   ARG,IN           5906                              
 TIMELEVEL                  Dummy  5891     I(4)            4           scalar   ARG,IN           5905                              

Page 222         Source Listing                  READ_DATA_1D_NEW
2021-06-01 08:54                                 fms_io.F90

   5909 !.....................................................................
   5910 
   5911 subroutine read_data_scalar_new(filename,fieldname,data,domain,timelevel,&
   5912       no_domain, tile_count)
   5913 
   5914 ! this subroutine is for reading a single number
   5915   character(len=*), intent(in)           :: filename, fieldname
   5916   real, intent(inout)                    :: data     !zero dimension data
   5917   real, dimension(1,1,1)                 :: data_3d
   5918   type(domain2d), intent(in), optional   :: domain
   5919   integer, intent(in) , optional         :: timelevel
   5920   logical, intent(in), optional          :: no_domain
   5921   integer, intent(in), optional          :: tile_count
   5922 
   5923   if(present(no_domain)) then
   5924      if(.NOT. no_domain) call mpp_error(FATAL, 'fms_io(read_data_scalar_new): no_domain should be true for field ' &
   5925                                  //trim(fieldname)//' of file '//trim(filename) )
   5926   end if
   5927 
   5928   call read_data_3d_new(filename,fieldname,data_3d,domain,timelevel,&
   5929         no_domain=no_domain, scalar_or_1d=.true., tile_count=tile_count)
   5930 
   5931   data = data_3d(1,1,1)
   5932 
   5933 end subroutine read_data_scalar_new


ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_read_data_scalar_new_             

Page 223         Source Listing                  READ_DATA_SCALAR_NEW
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA                       Dummy  5911     R(8)            8           scalar   ARG,INOUT        5931                              
 DATA_3D                    Local  5917     R(8)            8     3     1        TGT              5928,5931                         
 DOMAIN                     Dummy  5911     DOMAIN2D        752         scalar   ARG,IN           5928                              
 FIELDNAME                  Dummy  5911     CHAR                        scalar   ARG,IN           5925,5928                         
 FILENAME                   Dummy  5911     CHAR                        scalar   ARG,IN           5925,5928                         
 NO_DOMAIN                  Dummy  5912     L(4)            4           scalar   ARG,IN           5923,5924,5929                    
 PRESENT                    Func   5923                                 scalar                    5923                              
 READ_DATA_SCALAR_NEW       Subr   5911                                          PRIV             5286                              
 TILE_COUNT                 Dummy  5912     I(4)            4           scalar   ARG,IN           5929                              
 TIMELEVEL                  Dummy  5911     I(4)            4           scalar   ARG,IN           5928                              
 TRIM                       Func   5925                                 scalar                    5925                              

Page 224         Source Listing                  READ_DATA_SCALAR_NEW
2021-06-01 08:54                                 fms_io.F90

   5934 !.....................................................................
   5935 
   5936 function unique_axes(file, index, id_axes, siz_axes, dom)
   5937   type(restart_file_type),   intent(inout)           :: file
   5938   integer,                      intent(in)           :: index
   5939   integer, dimension(:),       intent(out)           :: id_axes
   5940   integer, dimension(:),       intent(out)           :: siz_axes
   5941   type(domain1d), dimension(:), intent(in), optional :: dom
   5942   integer                                            :: unique_axes
   5943   type(var_type), pointer, save :: cur_var => NULL()
   5944   integer :: i,j
   5945   logical :: found
   5946 
   5947   unique_axes=0
   5948 
   5949   if(index <0 .OR. index > 4) call mpp_error(FATAL,"unique_axes(fms_io_mod): index should be 1, 2, 3 or 4")
   5950 
   5951   do i = 1, file%nvar
   5952      cur_var => file%var(i)
   5953      if(cur_var%read_only) cycle
   5954      if(cur_var%ndim < index) cycle
   5955      found = .false.
   5956      do j = 1, unique_axes
   5957         if(siz_axes(j) == cur_var%gsiz(index) ) then
   5958            if(PRESENT(dom)) then
   5959               if(cur_var%domain_idx == id_axes(j) ) then
   5960                  found = .true.
   5961                  exit
   5962               else if(cur_var%domain_idx >0 .AND. id_axes(j) >0) then
   5963                  if(dom(cur_var%domain_idx) .EQ. dom(id_axes(j)) ) then
   5964                     found = .true.
   5965                     exit
   5966                  end if
   5967               end if
   5968            else
   5969               found = .true.
   5970               exit
   5971            end if
   5972         end if
   5973      end do
   5974      if(found) then
   5975         cur_var%id_axes(index) = j
   5976      else
   5977         unique_axes = unique_axes+1
   5978         if(unique_axes > max_axes) then
   5979            write(error_msg,'(I3,"/",I3)') unique_axes, max_axes
   5980            if(index == 1 ) then
   5981               call mpp_error(FATAL,'# x axes exceeded max_axes in fms_io,num_axes/max_axes= '//trim(error_msg))
   5982            else if(index == 2 ) then
   5983               call mpp_error(FATAL,'# y axes exceeded max_axes in fms_io,num_axes/max_axes= '//trim(error_msg))
   5984            else
   5985               call mpp_error(FATAL,'# z axes exceeded max_axes in fms_io,num_axes/max_axes= '//trim(error_msg))
   5986            end if
   5987         endif
   5988         id_axes(unique_axes)   = cur_var%domain_idx
   5989         siz_axes(unique_axes) = cur_var%gsiz(index)
   5990         if(siz_axes(unique_axes) > max_axis_size) then

Page 225         Source Listing                  UNIQUE_AXES
2021-06-01 08:54                                 fms_io.F90

   5991            call mpp_error(FATAL, 'fms_io_mod(unique_axes): size_axes is greater than max_axis_size, '//&
   5992               'increase fms_io_nml variable max_axis_size to at least ', siz_axes(unique_axes))
   5993         endif
   5994         cur_var%id_axes(index) = unique_axes
   5995      end if
   5996   end do
   5997 
   5998   cur_var => NULL()
   5999 
   6000   return
   6001 
   6002 end function unique_axes


ENTRY POINTS

  Name                                  
                                        
 fms_io_mod_mp_unique_axes_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CUR_VAR                    Local  5943     VAR_TYPE        3328        scalar   PTR,SAVE         5943,5952,5953,5954,5957,5959,5962
                                                                                                  ,5963,5975,5988,5989,5994,5998    
 DOM                        Dummy  5936     RECORD          176   1     1        ARG,IN           5958,5963                         
 FILE                       Dummy  5936     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        5951,5952                         
 FOUND                      Local  5945     L(4)            4           scalar                    5955,5960,5964,5969,5974          
 I                          Local  5944     I(4)            4           scalar                    5951,5952                         
 ID_AXES                    Dummy  5936     I(4)            4     1     1        ARG,OUT          5959,5962,5963,5988               
 INDEX                      Dummy  5936     I(4)            4           scalar   ARG,IN           5949,5954,5957,5975,5980,5982,5989
                                                                                                  ,5994                             
 J                          Local  5944     I(4)            4           scalar                    5956,5957,5959,5962,5963,5975     
 MPP_ERROR_IS               Subr   5991                                          PRIV             5991                              
 PRESENT                    Func   5958                                 scalar                    5958                              
 SIZ_AXES                   Dummy  5936     I(4)            4     1     1        ARG,OUT          5957,5989,5990,5992               
 TRIM                       Func   5981                                 scalar                    5981,5983,5985                    
 UNIQUE_AXES                Func   5936     I(4)            4           scalar                                                      

Page 226         Source Listing                  UNIQUE_AXES
2021-06-01 08:54                                 fms_io.F90

   6003 
   6004 !#######################################################################
   6005 !#######################################################################
   6006 !   --------- routines for reading distributed data ---------
   6007 ! before calling these routines the domain decompostion must be set
   6008 ! by calling "set_domain" with the appropriate domain2d data type
   6009 !
   6010 ! reading can be done either by all PEs (default) or by only the root PE
   6011 ! this is controlled by namelist variable "read_all_pe".
   6012 
   6013 ! By default, array data is expected to be declared in data domain and no_halo
   6014 !is NOT needed, however IF data is decalared in COMPUTE domain then optional NO_HALO should be .true.
   6015 
   6016 !#######################################################################
   6017 
   6018 subroutine read_data_2d ( unit, data, end)
   6019 
   6020   integer, intent(in)                        :: unit
   6021   real,    intent(out), dimension(isd:,jsd:) :: data
   6022   logical, intent(out), optional             :: end
   6023   real, dimension(isg:ieg,jsg:jeg)           :: gdata
   6024   integer                                    :: len
   6025   logical                                    :: no_halo
   6026 
   6027   include "read_data_2d.inc"
   6083 end subroutine read_data_2d


ENTRY POINTS

  Name                                   
                                         
 fms_io_mod_mp_read_data_2d_             

Page 227         Source Listing                  READ_DATA_2D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  6082                                                           6065                              
 ASSOCIATED                 Func   6060                                 scalar                    6060                              
 DATA                       Dummy  6018     R(8)            8     2     1        ARG,OUT          6049,6051,6075,6078               
 DO_READ@0                  Local  6065     L(4)            4           scalar                                                      
 END                        Dummy  6018     L(4)            4           scalar   ARG,OUT          6063,6082                         
 FMS_IO_INIT                Subr   6058                                                           592,6058,6127,6195,6267,6342,6405,
                                                                                                  6443,6480,6523,7401,7439,7473,7512
                                                                                                  ,7548,7584,7604,7745              
 GDATA                      Local  6023     R(8)            8     2     0        TGT              6065,6068,6071,6075,6078          
 IE                         Local  6051     I(4)            4           scalar   PRIV             583,6051,6075,6078,6120,6144,6147,
                                                                                                  6188,6212,6215,6261,6286,6289,6336
                                                                                                  ,6360,6363,7592,7609,7656         
 IED                        Local  6049     I(4)            4           scalar   PRIV             584,6049,6118,6186,6259,6334,7593,
                                                                                                  7610                              
 IEG                        Local  6023     I(4)            4           scalar   PRIV             585,6023,6092,6160,6234,6308,6383,
                                                                                                  6421,6458,6501,6543,7594,7611,7656
 IS                         Local  6051     I(4)            4           scalar   PRIV             583,6051,6075,6078,6120,6144,6147,
                                                                                                  6188,6212,6215,6261,6286,6289,6336
                                                                                                  ,6360,6363,7592,7609,7656         
 ISD                        Local  6021     I(4)            4           scalar   PRIV             584,6021,6049,6090,6118,6158,6186,
                                                                                                  6232,6259,6306,6334,6382,6420,6457
                                                                                                  ,6500,6542,7593,7610              
 ISG                        Local  6023     I(4)            4           scalar   PRIV             585,6023,6092,6160,6234,6308,6383,
                                                                                                  6421,6458,6501,6543,7594,7611,7656
 JE                         Local  6051     I(4)            4           scalar   PRIV             583,6051,6075,6078,6120,6144,6147,
                                                                                                  6188,6212,6215,6261,6286,6289,6336
                                                                                                  ,6360,6363,7592,7609,7657         
 JED                        Local  6049     I(4)            4           scalar   PRIV             584,6049,6118,6186,6259,6334,7593,
                                                                                                  7610                              
 JEG                        Local  6023     I(4)            4           scalar   PRIV             585,6023,6092,6160,6234,6308,6383,
                                                                                                  6421,6458,6501,6543,7594,7611,7657
 JS                         Local  6051     I(4)            4           scalar   PRIV             583,6051,6075,6078,6120,6144,6147,
                                                                                                  6188,6212,6215,6261,6286,6289,6336
                                                                                                  ,6360,6363,7592,7609,7657         
 JSD                        Local  6021     I(4)            4           scalar   PRIV             584,6021,6049,6090,6118,6158,6186,
                                                                                                  6232,6259,6306,6334,6382,6420,6457
                                                                                                  ,6500,6542,7593,7610              
 JSG                        Local  6023     I(4)            4           scalar   PRIV             585,6023,6092,6160,6234,6308,6383,
                                                                                                  6421,6458,6501,6543,7594,7611,7657
 LEN                        Local  6024     I(4)            4           scalar                    6068,6071                         
 MPP_BROADCAST              Local  6071                                 scalar   PRIV             219,6071,6140,6208,6280,6355,8619,
                                                                                                  8650,8707,8738                    
 MPP_BROADCAST_REAL8_2D     Subr   6071                                          PRIV             6071                              
 NO_HALO                    Local  6025     L(4)            4           scalar                    6050,6052,6073                    
 PRESENT                    Func   6063                                 scalar                    6063                              
 READ_ALL_PE                Local  6066     L(4)            4           scalar                    624,635,6066,6135,6203,6275,6350,6
                                                                                                  583                               
 READ_DATA_2D               Subr   6018                                          PRIV                                               
 READ_DATA_BUG              Local  6073     L(4)            4           scalar                    628,636,6073,6142,6210,6283,6358  
 SIZE                       Func   6049                                 scalar                    6049,6051,6068                    
 UNIT                       Dummy  6018     I(4)            4           scalar   ARG,IN           6065                              

Page 228         Source Listing                  READ_DATA_2D
2021-06-01 08:54                                 fms_io.F90

   6084 
   6085 !#######################################################################
   6086 
   6087 subroutine read_ldata_2d ( unit, data, end)
   6088 
   6089   integer, intent(in)                        :: unit
   6090   logical, intent(out), dimension(isd:,jsd:) :: data
   6091   logical, intent(out), optional             :: end
   6092   logical, dimension(isg:ieg,jsg:jeg)        :: gdata
   6093   integer                                    :: len
   6094   logical                                    :: no_halo
   6095 
   6096   include "read_data_2d.inc"
   6152 end subroutine read_ldata_2d


ENTRY POINTS

  Name                                    
                                          
 fms_io_mod_mp_read_ldata_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  6151                                                           6134                              
 ASSOCIATED                 Func   6129                                 scalar                    6129                              
 DATA                       Dummy  6087     L(4)            4     2     1        ARG,OUT          6118,6120,6144,6147               
 END                        Dummy  6087     L(4)            4           scalar   ARG,OUT          6132,6151                         
 GDATA                      Local  6092     L(4)            4     2     0        TGT              6134,6137,6140,6144,6147          
 LEN                        Local  6093     I(4)            4           scalar                    6137,6140                         
 MPP_BROADCAST_LOGICAL4_2D  Subr   6140                                          PRIV             6140                              
 NO_HALO                    Local  6094     L(4)            4           scalar                    6119,6121,6142                    
 PRESENT                    Func   6132                                 scalar                    6132                              
 READ_LDATA_2D              Subr   6087                                          PRIV                                               
 SIZE                       Func   6118                                 scalar                    6118,6120,6137                    
 UNIT                       Dummy  6087     I(4)            4           scalar   ARG,IN           6134                              

Page 229         Source Listing                  READ_LDATA_2D
2021-06-01 08:54                                 fms_io.F90

   6153 !#######################################################################
   6154 
   6155 subroutine read_idata_2d ( unit, data, end)
   6156 
   6157   integer, intent(in)                        :: unit
   6158   integer, intent(out), dimension(isd:,jsd:) :: data
   6159   logical, intent(out), optional             :: end
   6160   integer, dimension(isg:ieg,jsg:jeg)        :: gdata
   6161   integer                                    :: len
   6162   logical                                    :: no_halo
   6163 
   6164   include "read_data_2d.inc"
   6220 end subroutine read_idata_2d


ENTRY POINTS

  Name                                    
                                          
 fms_io_mod_mp_read_idata_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  6219                                                           6202                              
 ASSOCIATED                 Func   6197                                 scalar                    6197                              
 DATA                       Dummy  6155     I(4)            4     2     1        ARG,OUT          6186,6188,6212,6215               
 END                        Dummy  6155     L(4)            4           scalar   ARG,OUT          6200,6219                         
 GDATA                      Local  6160     I(4)            4     2     0        TGT              6202,6205,6208,6212,6215          
 LEN                        Local  6161     I(4)            4           scalar                    6205,6208                         
 MPP_BROADCAST_INT4_2D      Subr   6208                                          PRIV             6208,8650,8738                    
 NO_HALO                    Local  6162     L(4)            4           scalar                    6187,6189,6210                    
 PRESENT                    Func   6200                                 scalar                    6200                              
 READ_IDATA_2D              Subr   6155                                          PRIV                                               
 SIZE                       Func   6186                                 scalar                    6186,6188,6205                    
 UNIT                       Dummy  6155     I(4)            4           scalar   ARG,IN           6202                              

Page 230         Source Listing                  READ_IDATA_2D
2021-06-01 08:54                                 fms_io.F90

   6221 
   6222 !#######################################################################
   6223 
   6224 # 6225
   6225 
   6226 
   6227 !#######################################################################
   6228 
   6229 subroutine read_data_3d ( unit, data, end)
   6230 
   6231   integer, intent(in)                           :: unit
   6232   real,    intent(out), dimension(isd:,jsd:,:)  :: data
   6233   logical, intent(out), optional                :: end
   6234   real, dimension(isg:ieg,jsg:jeg,size(data,3)) :: gdata
   6235   integer                                       :: len
   6236   logical                                       :: no_halo
   6237 
   6238   include "read_data_3d.inc"
   6294 end subroutine read_data_3d


ENTRY POINTS

  Name                                   
                                         
 fms_io_mod_mp_read_data_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  6293                                                           6274                              
 ASSOCIATED                 Func   6269                                 scalar                    6269                              
 DATA                       Dummy  6229     R(8)            8     3     1        ARG,OUT          6234,6259,6261,6286,6289          
 END                        Dummy  6229     L(4)            4           scalar   ARG,OUT          6272,6293                         
 GDATA                      Local  6234     R(8)            8     3     0        TGT              6274,6277,6280,6286,6289          
 LEN                        Local  6235     I(4)            4           scalar                    6277,6280                         
 MPP_BROADCAST_REAL8_3D     Subr   6280                                          PRIV             6280                              
 NO_HALO                    Local  6236     L(4)            4           scalar                    6260,6262,6283                    
 PRESENT                    Func   6272                                 scalar                    6272                              
 READ_DATA_3D               Subr   6229                                          PRIV                                               
 SIZE                       Func   6234                                 scalar                    6234,6259,6261,6277               
 UNIT                       Dummy  6229     I(4)            4           scalar   ARG,IN           6274                              

Page 231         Source Listing                  READ_DATA_3D
2021-06-01 08:54                                 fms_io.F90

   6295 
   6296 !#######################################################################
   6297 
   6298 # 6255
   6299 
   6300 
   6301 !#######################################################################
   6302 
   6303 subroutine read_data_4d ( unit, data, end)
   6304 
   6305   integer, intent(in)                                        :: unit
   6306   real,    intent(out), dimension(isd:,jsd:,:,:)             :: data
   6307   logical, intent(out), optional                             :: end
   6308   real, dimension(isg:ieg,jsg:jeg,size(data,3),size(data,4)) :: gdata
   6309   integer                                                    :: len
   6310   logical                                                    :: no_halo
   6311 ! WARNING: memory usage with this routine could be costly
   6312 
   6313   include "read_data_4d.inc"
   6368 end subroutine read_data_4d


ENTRY POINTS

  Name                                   
                                         
 fms_io_mod_mp_read_data_4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  6367                                                           6349                              
 ASSOCIATED                 Func   6344                                 scalar                    6344                              
 DATA                       Dummy  6303     R(8)            8     4     1        ARG,OUT          6308,6334,6336,6360,6363          
 END                        Dummy  6303     L(4)            4           scalar   ARG,OUT          6347,6367                         
 GDATA                      Local  6308     R(8)            8     4     0        TGT              6349,6352,6355,6360,6363          
 LEN                        Local  6309     I(4)            4           scalar                    6352,6355                         
 MPP_BROADCAST_REAL8_4D     Subr   6355                                          PRIV             6355                              
 NO_HALO                    Local  6310     L(4)            4           scalar                    6335,6337,6358                    
 PRESENT                    Func   6347                                 scalar                    6347                              
 READ_DATA_4D               Subr   6303                                          PRIV                                               
 SIZE                       Func   6308                                 scalar                    6308,6334,6336,6352               
 UNIT                       Dummy  6303     I(4)            4           scalar   ARG,IN           6349                              

Page 232         Source Listing                  READ_DATA_4D
2021-06-01 08:54                                 fms_io.F90

   6369 
   6370 !#######################################################################
   6371 
   6372 # 6287
   6373 
   6374 
   6375 !#######################################################################
   6376 !     -------- routines for writing distributed data --------
   6377 ! before calling these routines the domain decompostion must be set
   6378 ! by calling "set_domain" with the appropriate domain2d data type
   6379 !#######################################################################
   6380 subroutine write_data_2d ( unit, data )
   6381   integer, intent(in)                       :: unit
   6382   real,    intent(in), dimension(isd:,jsd:) :: data
   6383   real, dimension(isg:ieg,jsg:jeg) :: gdata
   6384 
   6385   include "write_data.inc"
   6413 end subroutine write_data_2d


ENTRY POINTS

  Name                                    
                                          
 fms_io_mod_mp_write_data_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6407                                 scalar                    6407                              
 DATA                       Dummy  6380     R(8)            8     2     1        ARG,IN           6411                              
 GDATA                      Local  6383     R(8)            8     2     0        TGT              6411,6412                         
 MPP_GLOBAL_FIELD           Local  6411                                 scalar   PRIV             214,6411,6449,6486,6529,6552      
 MPP_GLOBAL_FIELD2D_R8_2D   Subr   6411                                          PRIV             6411                              
 UNIT                       Dummy  6380     I(4)            4           scalar   ARG,IN           6412                              
 WRITE_DATA_2D              Subr   6380                                          PRIV                                               

Page 233         Source Listing                  WRITE_DATA_2D
2021-06-01 08:54                                 fms_io.F90

   6414 
   6415 !#######################################################################
   6416 
   6417 subroutine write_ldata_2d ( unit, data )
   6418 
   6419   integer, intent(in)                       :: unit
   6420   logical, intent(in), dimension(isd:,jsd:) :: data
   6421   logical, dimension(isg:ieg,jsg:jeg) :: gdata
   6422 
   6423   include "write_data.inc"
   6451 end subroutine write_ldata_2d


ENTRY POINTS

  Name                                     
                                           
 fms_io_mod_mp_write_ldata_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6445                                 scalar                    6445                              
 DATA                       Dummy  6417     L(4)            4     2     1        ARG,IN           6449                              
 GDATA                      Local  6421     L(4)            4     2     0        TGT              6449,6450                         
 MPP_GLOBAL_FIELD2D_L4_2D   Subr   6449                                          PRIV             6449                              
 UNIT                       Dummy  6417     I(4)            4           scalar   ARG,IN           6450                              
 WRITE_LDATA_2D             Subr   6417                                          PRIV                                               

Page 234         Source Listing                  WRITE_LDATA_2D
2021-06-01 08:54                                 fms_io.F90

   6452 
   6453 !#######################################################################
   6454 subroutine write_idata_2d ( unit, data )
   6455 
   6456   integer, intent(in)                       :: unit
   6457   integer, intent(in), dimension(isd:,jsd:) :: data
   6458   integer, dimension(isg:ieg,jsg:jeg) :: gdata
   6459 
   6460   include "write_data.inc"
   6488 end subroutine write_idata_2d


ENTRY POINTS

  Name                                     
                                           
 fms_io_mod_mp_write_idata_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6482                                 scalar                    6482                              
 DATA                       Dummy  6454     I(4)            4     2     1        ARG,IN           6486                              
 GDATA                      Local  6458     I(4)            4     2     0        TGT              6486,6487                         
 MPP_GLOBAL_FIELD2D_I4_2D   Subr   6486                                          PRIV             6486                              
 UNIT                       Dummy  6454     I(4)            4           scalar   ARG,IN           6487                              
 WRITE_IDATA_2D             Subr   6454                                          PRIV                                               

Page 235         Source Listing                  WRITE_IDATA_2D
2021-06-01 08:54                                 fms_io.F90

   6489 
   6490 !#######################################################################
   6491 
   6492 # 6334
   6493 
   6494 
   6495 !#######################################################################
   6496 
   6497 subroutine write_data_3d ( unit, data )
   6498 
   6499   integer, intent(in) :: unit
   6500   real,    intent(in), dimension(isd:,jsd:,:) :: data
   6501   real, dimension(isg:ieg,jsg:jeg,size(data,3)) :: gdata
   6502 
   6503   include "write_data.inc"
   6531 end subroutine write_data_3d


ENTRY POINTS

  Name                                    
                                          
 fms_io_mod_mp_write_data_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6525                                 scalar                    6525                              
 DATA                       Dummy  6497     R(8)            8     3     1        ARG,IN           6501,6529                         
 GDATA                      Local  6501     R(8)            8     3     0        TGT              6529,6530                         
 MPP_GLOBAL_FIELD2D_R8_3D   Subr   6529                                          PRIV             6529,6552                         
 SIZE                       Func   6501                                 scalar                    6501                              
 UNIT                       Dummy  6497     I(4)            4           scalar   ARG,IN           6530                              
 WRITE_DATA_3D              Subr   6497                                          PRIV                                               

Page 236         Source Listing                  WRITE_DATA_3D
2021-06-01 08:54                                 fms_io.F90

   6532 
   6533 !#######################################################################
   6534 
   6535 # 6358
   6536 
   6537 
   6538 !#######################################################################
   6539 subroutine write_data_4d ( unit, data )
   6540 
   6541   integer, intent(in) :: unit
   6542   real,    intent(in), dimension(isd:,jsd:,:,:) :: data
   6543   real, dimension(isg:ieg,jsg:jeg,size(data,3),size(data,4)) :: gdata
   6544   integer :: n
   6545 
   6546   if (.not.associated(Current_domain))  &
   6547        call mpp_error(FATAL,'fms_io(write_data_4d): need to call set_domain ')
   6548 
   6549 ! get the global data and write only on root pe
   6550 ! do this one field at a time to save memory
   6551   do n = 1, size(data,4)
   6552      call mpp_global_field ( Current_domain, data(:,:,:,n), gdata(:,:,:,n) )
   6553   enddo
   6554   if ( mpp_pe() == mpp_root_pe() ) write (unit) gdata
   6555 end subroutine write_data_4d


ENTRY POINTS

  Name                                    
                                          
 fms_io_mod_mp_write_data_4d_             

Page 237         Source Listing                  WRITE_DATA_4D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6546                                 scalar                    6546                              
 DATA                       Dummy  6539     R(8)            8     4     1        ARG,IN           6543,6551,6552                    
 GDATA                      Local  6543     R(8)            8     4     0        TGT              6552,6554                         
 N                          Local  6544     I(4)            4           scalar                    6551,6552                         
 SIZE                       Func   6543                                 scalar                    6543,6551                         
 UNIT                       Dummy  6539     I(4)            4           scalar   ARG,IN           6554                              
 WRITE_DATA_4D              Subr   6539                                          PRIV                                               

Page 238         Source Listing                  WRITE_DATA_4D
2021-06-01 08:54                                 fms_io.F90

   6556 
   6557 !#######################################################################
   6558 
   6559 # 6398
   6560 
   6561 
   6562 !#######################################################################
   6563 ! private routines (read_eof,do_read)
   6564 ! this routine is called when an EOF is found while
   6565 ! reading a distributed data file using read_data
   6566 
   6567 subroutine read_eof (end_found)
   6568   logical, intent(out), optional :: end_found
   6569 
   6570   if (present(end_found))then
   6571      end_found = .true.
   6572   else
   6573      call mpp_error(FATAL,'fms_io(read_eof): unexpected EOF')
   6574   endif
   6575 end subroutine read_eof


ENTRY POINTS

  Name                               
                                     
 fms_io_mod_mp_read_eof_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 END_FOUND                  Dummy  6567     L(4)            4           scalar   ARG,OUT          6570,6571                         
 PRESENT                    Func   6570                                 scalar                    6570                              
 READ_EOF                   Subr   6567                                                           6082,6151,6219,6293,6367          

Page 239         Source Listing                  READ_EOF
2021-06-01 08:54                                 fms_io.F90

   6576 
   6577 !#######################################################################
   6578 ! determines if current pe should read data
   6579 ! checks namelist variable read_all_pe
   6580 
   6581 function do_read ( )
   6582   logical :: do_read
   6583   do_read = mpp_pe() == mpp_root_pe() .or. read_all_pe
   6584 end function do_read


ENTRY POINTS

  Name                              
                                    
 fms_io_mod_mp_do_read_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DO_READ                    Func   6581     L(4)            4           scalar                    6065,6134,6202,6274,6349,6583     

Page 240         Source Listing                  DO_READ
2021-06-01 08:54                                 fms_io.F90

   6585 
   6586 !!#######################################################################
   6587 
   6588 subroutine reset_field_name(fileObj, id_field, name)
   6589   type(restart_file_type), intent(inout)      :: fileObj
   6590   integer,                 intent(in)         :: id_field
   6591   character(len=*),        intent(in)         :: name
   6592 
   6593   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_name): " // &
   6594       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6595 
   6596   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6597          "fms_io(reset_field_name): id_field should be positive integer and "// &
   6598          "no larger than number of fields in the file "//trim(fileObj%name) )
   6599 
   6600   fileObj%var(id_field)%name = trim(name)
   6601 
   6602 end subroutine reset_field_name


ENTRY POINTS

  Name                                       
                                             
 fms_io_mod_mp_reset_field_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6593                                 scalar                    6593                              
 FILEOBJ                    Dummy  6588     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6593,6596,6598,6600               
 ID_FIELD                   Dummy  6588     I(4)            4           scalar   ARG,IN           6596,6600                         
 NAME                       Dummy  6588     CHAR                        scalar   ARG,IN           6600                              
 RESET_FIELD_NAME           Subr   6588                                                                                             
 TRIM                       Func   6598                                 scalar                    6598,6600                         

Page 241         Source Listing                  RESET_FIELD_NAME
2021-06-01 08:54                                 fms_io.F90

   6603 
   6604 !#######################################################################
   6605 
   6606 subroutine reset_field_pointer_r0d(fileObj, id_field, data)
   6607   type(restart_file_type), intent(inout)      :: fileObj
   6608   integer,                 intent(in)         :: id_field
   6609   real,                    intent(in), target :: data
   6610 
   6611   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_r0d): " // &
   6612       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6613 
   6614   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6615          "fms_io(reset_field_pointer_r0d): id_field should be positive integer and "// &
   6616          "no larger than number of fields in the file "//trim(fileObj%name) )
   6617   if(fileObj%var(id_field)%siz(4) .NE. 1) call mpp_error(FATAL, &
   6618          "fms_io(reset_field_pointer_r0d): one-level reset_field_pointer is called, but "//&
   6619          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not one level" )
   6620 
   6621   fileObj%p0dr(1, id_field)%p => data
   6622 
   6623 end subroutine reset_field_pointer_r0d


ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_reset_field_pointer_r0d_             

Page 242         Source Listing                  RESET_FIELD_POINTER_R0D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6611                                 scalar                    6611                              
 DATA                       Dummy  6606     R(8)            8           scalar   ARG,TGT,IN       6621                              
 FILEOBJ                    Dummy  6606     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6611,6614,6616,6617,6619,6621     
 ID_FIELD                   Dummy  6606     I(4)            4           scalar   ARG,IN           6614,6617,6619,6621               
 RESET_FIELD_POINTER_R0D    Subr   6606                                          PRIV                                               
 TRIM                       Func   6616                                 scalar                    6616,6619                         

Page 243         Source Listing                  RESET_FIELD_POINTER_R0D
2021-06-01 08:54                                 fms_io.F90

   6624 
   6625 !#######################################################################
   6626 
   6627 subroutine reset_field_pointer_r1d(fileObj, id_field, data)
   6628   type(restart_file_type), intent(inout)      :: fileObj
   6629   integer,                 intent(in)         :: id_field
   6630   real, dimension(:),      intent(in), target :: data
   6631 
   6632   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_r1d): " // &
   6633       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6634 
   6635   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6636          "fms_io(reset_field_pointer_r1d): id_field should be positive integer and "// &
   6637          "no larger than number of fields in the file "//trim(fileObj%name) )
   6638   if(fileObj%var(id_field)%siz(4) .NE. 1) call mpp_error(FATAL, &
   6639          "fms_io(reset_field_pointer_r1d): one-level reset_field_pointer is called, but "//&
   6640          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not one level" )
   6641 
   6642   fileObj%p1dr(1, id_field)%p => data
   6643 
   6644 end subroutine reset_field_pointer_r1d


ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_reset_field_pointer_r1d_             

Page 244         Source Listing                  RESET_FIELD_POINTER_R1D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6632                                 scalar                    6632                              
 DATA                       Dummy  6627     R(8)            8     1     1        ARG,TGT,IN       6642                              
 FILEOBJ                    Dummy  6627     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6632,6635,6637,6638,6640,6642     
 ID_FIELD                   Dummy  6627     I(4)            4           scalar   ARG,IN           6635,6638,6640,6642               
 RESET_FIELD_POINTER_R1D    Subr   6627                                          PRIV                                               
 TRIM                       Func   6637                                 scalar                    6637,6640                         

Page 245         Source Listing                  RESET_FIELD_POINTER_R1D
2021-06-01 08:54                                 fms_io.F90

   6645 
   6646 
   6647 !#######################################################################
   6648 subroutine reset_field_pointer_r2d(fileObj, id_field, data)
   6649   type(restart_file_type), intent(inout)      :: fileObj
   6650   integer,                 intent(in)         :: id_field
   6651   real, dimension(:,:),    intent(in), target :: data
   6652 
   6653   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_r2d): " // &
   6654       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6655 
   6656   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6657          "fms_io(reset_field_pointer_r2d): id_field should be positive integer and "// &
   6658          "no larger than number of fields in the file "//trim(fileObj%name) )
   6659   if(fileObj%var(id_field)%siz(4) .NE. 1) call mpp_error(FATAL, &
   6660          "fms_io(reset_field_pointer_r2d): one-level reset_field_pointer is called, but "//&
   6661          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not one level" )
   6662 
   6663   fileObj%p2dr(1, id_field)%p => data
   6664 
   6665 end subroutine reset_field_pointer_r2d


ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_reset_field_pointer_r2d_             

Page 246         Source Listing                  RESET_FIELD_POINTER_R2D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6653                                 scalar                    6653                              
 DATA                       Dummy  6648     R(8)            8     2     1        ARG,TGT,IN       6663                              
 FILEOBJ                    Dummy  6648     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6653,6656,6658,6659,6661,6663     
 ID_FIELD                   Dummy  6648     I(4)            4           scalar   ARG,IN           6656,6659,6661,6663               
 RESET_FIELD_POINTER_R2D    Subr   6648                                          PRIV                                               
 TRIM                       Func   6658                                 scalar                    6658,6661                         

Page 247         Source Listing                  RESET_FIELD_POINTER_R2D
2021-06-01 08:54                                 fms_io.F90

   6666 
   6667 !#######################################################################
   6668 
   6669 subroutine reset_field_pointer_r3d(fileObj, id_field, data)
   6670   type(restart_file_type), intent(inout)      :: fileObj
   6671   integer,                 intent(in)         :: id_field
   6672   real, dimension(:,:,:),  intent(in), target :: data
   6673 
   6674   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_r3d): " // &
   6675       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6676 
   6677   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6678          "fms_io(reset_field_pointer_r3d): id_field should be positive integer and "// &
   6679          "no larger than number of fields in the file "//trim(fileObj%name) )
   6680   if(fileObj%var(id_field)%siz(4) .NE. 1) call mpp_error(FATAL, &
   6681          "fms_io(reset_field_pointer_r3d): one-level reset_field_pointer is called, but "//&
   6682          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not one level" )
   6683 
   6684   fileObj%p3dr(1, id_field)%p => data
   6685 
   6686 end subroutine reset_field_pointer_r3d


ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_reset_field_pointer_r3d_             

Page 248         Source Listing                  RESET_FIELD_POINTER_R3D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6674                                 scalar                    6674                              
 DATA                       Dummy  6669     R(8)            8     3     1        ARG,TGT,IN       6684                              
 FILEOBJ                    Dummy  6669     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6674,6677,6679,6680,6682,6684     
 ID_FIELD                   Dummy  6669     I(4)            4           scalar   ARG,IN           6677,6680,6682,6684               
 RESET_FIELD_POINTER_R3D    Subr   6669                                          PRIV                                               
 TRIM                       Func   6679                                 scalar                    6679,6682                         

Page 249         Source Listing                  RESET_FIELD_POINTER_R3D
2021-06-01 08:54                                 fms_io.F90

   6687 
   6688 !#######################################################################
   6689 
   6690 subroutine reset_field_pointer_r4d(fileObj, id_field, data)
   6691   type(restart_file_type),   intent(inout)      :: fileObj
   6692   integer,                   intent(in)         :: id_field
   6693   real, dimension(:,:,:,:),  intent(in), target :: data
   6694 
   6695   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_r4d): " // &
   6696       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6697 
   6698   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6699          "fms_io(reset_field_pointer_r4d): id_field should be positive integer and "// &
   6700          "no larger than number of fields in the file "//trim(fileObj%name) )
   6701   if(fileObj%var(id_field)%siz(4) .NE. 1) call mpp_error(FATAL, &
   6702          "fms_io(reset_field_pointer_r4d): one-level reset_field_pointer is called, but "//&
   6703          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not one level" )
   6704 
   6705   fileObj%p4dr(1, id_field)%p => data
   6706 
   6707 end subroutine reset_field_pointer_r4d


ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_reset_field_pointer_r4d_             

Page 250         Source Listing                  RESET_FIELD_POINTER_R4D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6695                                 scalar                    6695                              
 DATA                       Dummy  6690     R(8)            8     4     1        ARG,TGT,IN       6705                              
 FILEOBJ                    Dummy  6690     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6695,6698,6700,6701,6703,6705     
 ID_FIELD                   Dummy  6690     I(4)            4           scalar   ARG,IN           6698,6701,6703,6705               
 RESET_FIELD_POINTER_R4D    Subr   6690                                          PRIV                                               
 TRIM                       Func   6700                                 scalar                    6700,6703                         

Page 251         Source Listing                  RESET_FIELD_POINTER_R4D
2021-06-01 08:54                                 fms_io.F90

   6708 
   6709 
   6710 !#######################################################################
   6711 
   6712 subroutine reset_field_pointer_i0d(fileObj, id_field, data)
   6713   type(restart_file_type), intent(inout)      :: fileObj
   6714   integer,                 intent(in)         :: id_field
   6715   integer,                 intent(in), target :: data
   6716 
   6717   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_i0d): " // &
   6718       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6719 
   6720   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6721          "fms_io(reset_field_pointer_i0d): id_field should be positive integer and "// &
   6722          "no larger than number of fields in the file "//trim(fileObj%name) )
   6723   if(fileObj%var(id_field)%siz(4) .NE. 1) call mpp_error(FATAL, &
   6724          "fms_io(reset_field_pointer_i0d): one-level reset_field_pointer is called, but "//&
   6725          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not one level" )
   6726 
   6727   fileObj%p0di(1, id_field)%p => data
   6728 
   6729 end subroutine reset_field_pointer_i0d


ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_reset_field_pointer_i0d_             

Page 252         Source Listing                  RESET_FIELD_POINTER_I0D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6717                                 scalar                    6717                              
 DATA                       Dummy  6712     I(4)            4           scalar   ARG,TGT,IN       6727                              
 FILEOBJ                    Dummy  6712     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6717,6720,6722,6723,6725,6727     
 ID_FIELD                   Dummy  6712     I(4)            4           scalar   ARG,IN           6720,6723,6725,6727               
 RESET_FIELD_POINTER_I0D    Subr   6712                                          PRIV                                               
 TRIM                       Func   6722                                 scalar                    6722,6725                         

Page 253         Source Listing                  RESET_FIELD_POINTER_I0D
2021-06-01 08:54                                 fms_io.F90

   6730 
   6731 !#######################################################################
   6732 
   6733 subroutine reset_field_pointer_i1d(fileObj, id_field, data)
   6734   type(restart_file_type), intent(inout)      :: fileObj
   6735   integer,                 intent(in)         :: id_field
   6736   integer, dimension(:),   intent(in), target :: data
   6737 
   6738   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_i1d): " // &
   6739       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6740 
   6741   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6742          "fms_io(reset_field_pointer_i1d): id_field should be positive integer and "// &
   6743          "no larger than number of fields in the file "//trim(fileObj%name) )
   6744   if(fileObj%var(id_field)%siz(4) .NE. 1) call mpp_error(FATAL, &
   6745          "fms_io(reset_field_pointer_i1d): one-level reset_field_pointer is called, but "//&
   6746          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not one level" )
   6747 
   6748   fileObj%p1di(1, id_field)%p => data
   6749 
   6750 end subroutine reset_field_pointer_i1d


ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_reset_field_pointer_i1d_             

Page 254         Source Listing                  RESET_FIELD_POINTER_I1D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6738                                 scalar                    6738                              
 DATA                       Dummy  6733     I(4)            4     1     1        ARG,TGT,IN       6748                              
 FILEOBJ                    Dummy  6733     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6738,6741,6743,6744,6746,6748     
 ID_FIELD                   Dummy  6733     I(4)            4           scalar   ARG,IN           6741,6744,6746,6748               
 RESET_FIELD_POINTER_I1D    Subr   6733                                          PRIV                                               
 TRIM                       Func   6743                                 scalar                    6743,6746                         

Page 255         Source Listing                  RESET_FIELD_POINTER_I1D
2021-06-01 08:54                                 fms_io.F90

   6751 
   6752 
   6753 !#######################################################################
   6754 subroutine reset_field_pointer_i2d(fileObj, id_field, data)
   6755   type(restart_file_type), intent(inout)      :: fileObj
   6756   integer,                 intent(in)         :: id_field
   6757   integer, dimension(:,:), intent(in), target :: data
   6758 
   6759   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_i2d): " // &
   6760       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6761 
   6762   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6763          "fms_io(reset_field_pointer_i2d): id_field should be positive integer and "// &
   6764          "no larger than number of fields in the file "//trim(fileObj%name) )
   6765   if(fileObj%var(id_field)%siz(4) .NE. 1) call mpp_error(FATAL, &
   6766          "fms_io(reset_field_pointer_i2d): one-level reset_field_pointer is called, but "//&
   6767          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not one level" )
   6768 
   6769   fileObj%p2di(1, id_field)%p => data
   6770 
   6771 end subroutine reset_field_pointer_i2d


ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_reset_field_pointer_i2d_             

Page 256         Source Listing                  RESET_FIELD_POINTER_I2D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6759                                 scalar                    6759                              
 DATA                       Dummy  6754     I(4)            4     2     1        ARG,TGT,IN       6769                              
 FILEOBJ                    Dummy  6754     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6759,6762,6764,6765,6767,6769     
 ID_FIELD                   Dummy  6754     I(4)            4           scalar   ARG,IN           6762,6765,6767,6769               
 RESET_FIELD_POINTER_I2D    Subr   6754                                          PRIV                                               
 TRIM                       Func   6764                                 scalar                    6764,6767                         

Page 257         Source Listing                  RESET_FIELD_POINTER_I2D
2021-06-01 08:54                                 fms_io.F90

   6772 
   6773 !#######################################################################
   6774 
   6775 subroutine reset_field_pointer_i3d(fileObj, id_field, data)
   6776   type(restart_file_type),   intent(inout)      :: fileObj
   6777   integer,                   intent(in)         :: id_field
   6778   integer, dimension(:,:,:), intent(in), target :: data
   6779 
   6780   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_i3d): " // &
   6781       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6782 
   6783   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6784          "fms_io(reset_field_pointer_i3d): id_field should be positive integer and "// &
   6785          "no larger than number of fields in the file "//trim(fileObj%name) )
   6786   if(fileObj%var(id_field)%siz(4) .NE. 1) call mpp_error(FATAL, &
   6787          "fms_io(reset_field_pointer_i3d): one-level reset_field_pointer is called, but "//&
   6788          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not one level" )
   6789 
   6790   fileObj%p3di(1, id_field)%p => data
   6791 
   6792 end subroutine reset_field_pointer_i3d


ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_reset_field_pointer_i3d_             

Page 258         Source Listing                  RESET_FIELD_POINTER_I3D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6780                                 scalar                    6780                              
 DATA                       Dummy  6775     I(4)            4     3     1        ARG,TGT,IN       6790                              
 FILEOBJ                    Dummy  6775     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6780,6783,6785,6786,6788,6790     
 ID_FIELD                   Dummy  6775     I(4)            4           scalar   ARG,IN           6783,6786,6788,6790               
 RESET_FIELD_POINTER_I3D    Subr   6775                                          PRIV                                               
 TRIM                       Func   6785                                 scalar                    6785,6788                         

Page 259         Source Listing                  RESET_FIELD_POINTER_I3D
2021-06-01 08:54                                 fms_io.F90

   6793 
   6794 !#######################################################################
   6795 
   6796 subroutine reset_field_pointer_r0d_2level(fileObj, id_field, data1, data2)
   6797   type(restart_file_type), intent(inout)      :: fileObj
   6798   integer,                 intent(in)         :: id_field
   6799   real,                    intent(in), target :: data1, data2
   6800 
   6801   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_r0d_2level): " // &
   6802       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6803 
   6804   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6805          "fms_io(reset_field_pointer_r0d_2level): id_field should be positive integer and "// &
   6806          "no larger than number of fields in the file "//trim(fileObj%name) )
   6807   if(fileObj%var(id_field)%siz(4) .NE. 2) call mpp_error(FATAL, &
   6808          "fms_io(reset_field_pointer_r0d_2level): two-level reset_field_pointer is called, but "//&
   6809          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not two level" )
   6810 
   6811   fileObj%p0dr(1, id_field)%p => data1
   6812   fileObj%p0dr(2, id_field)%p => data2
   6813 
   6814 end subroutine reset_field_pointer_r0d_2level


ENTRY POINTS

  Name                                                     
                                                           
 fms_io_mod_mp_reset_field_pointer_r0d_2level_             

Page 260         Source Listing                  RESET_FIELD_POINTER_R0D_2LEVEL
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6801                                 scalar                    6801                              
 DATA1                      Dummy  6796     R(8)            8           scalar   ARG,TGT,IN       6811                              
 DATA2                      Dummy  6796     R(8)            8           scalar   ARG,TGT,IN       6812                              
 FILEOBJ                    Dummy  6796     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6801,6804,6806,6807,6809,6811,6812
 ID_FIELD                   Dummy  6796     I(4)            4           scalar   ARG,IN           6804,6807,6809,6811,6812          
 RESET_FIELD_POINTER_R0D_2L                                                                                                         
 EVEL                       Subr   6796                                          PRIV                                               
 TRIM                       Func   6806                                 scalar                    6806,6809                         

Page 261         Source Listing                  RESET_FIELD_POINTER_R0D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   6815 
   6816 !#######################################################################
   6817 
   6818 subroutine reset_field_pointer_r1d_2level(fileObj, id_field, data1, data2)
   6819   type(restart_file_type), intent(inout)      :: fileObj
   6820   integer,                 intent(in)         :: id_field
   6821   real, dimension(:),      intent(in), target :: data1, data2
   6822 
   6823   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_r1d_2level): " // &
   6824       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6825 
   6826   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6827          "fms_io(reset_field_pointer_r1d_2level): id_field should be positive integer and "// &
   6828          "no larger than number of fields in the file "//trim(fileObj%name) )
   6829   if(fileObj%var(id_field)%siz(4) .NE. 2) call mpp_error(FATAL, &
   6830          "fms_io(reset_field_pointer_r1d_2level): two-level reset_field_pointer is called, but "//&
   6831          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not two level" )
   6832 
   6833   fileObj%p1dr(1, id_field)%p => data1
   6834   fileObj%p1dr(2, id_field)%p => data2
   6835 
   6836 end subroutine reset_field_pointer_r1d_2level


ENTRY POINTS

  Name                                                     
                                                           
 fms_io_mod_mp_reset_field_pointer_r1d_2level_             

Page 262         Source Listing                  RESET_FIELD_POINTER_R1D_2LEVEL
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6823                                 scalar                    6823                              
 DATA1                      Dummy  6818     R(8)            8     1     1        ARG,TGT,IN       6833                              
 DATA2                      Dummy  6818     R(8)            8     1     1        ARG,TGT,IN       6834                              
 FILEOBJ                    Dummy  6818     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6823,6826,6828,6829,6831,6833,6834
 ID_FIELD                   Dummy  6818     I(4)            4           scalar   ARG,IN           6826,6829,6831,6833,6834          
 RESET_FIELD_POINTER_R1D_2L                                                                                                         
 EVEL                       Subr   6818                                          PRIV                                               
 TRIM                       Func   6828                                 scalar                    6828,6831                         

Page 263         Source Listing                  RESET_FIELD_POINTER_R1D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   6837 
   6838 !#######################################################################
   6839 
   6840 subroutine reset_field_pointer_r2d_2level(fileObj, id_field, data1, data2)
   6841   type(restart_file_type), intent(inout)      :: fileObj
   6842   integer,                 intent(in)         :: id_field
   6843   real, dimension(:,:),    intent(in), target :: data1, data2
   6844 
   6845   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_r2d_2level): " // &
   6846       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6847 
   6848   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6849          "fms_io(reset_field_pointer_r2d_2level): id_field should be positive integer and "// &
   6850          "no larger than number of fields in the file "//trim(fileObj%name) )
   6851   if(fileObj%var(id_field)%siz(4) .NE. 2) call mpp_error(FATAL, &
   6852          "fms_io(reset_field_pointer_r2d_2level): two-level reset_field_pointer is called, but "//&
   6853          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not two level" )
   6854 
   6855   fileObj%p2dr(1, id_field)%p => data1
   6856   fileObj%p2dr(2, id_field)%p => data2
   6857 
   6858 end subroutine reset_field_pointer_r2d_2level


ENTRY POINTS

  Name                                                     
                                                           
 fms_io_mod_mp_reset_field_pointer_r2d_2level_             

Page 264         Source Listing                  RESET_FIELD_POINTER_R2D_2LEVEL
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6845                                 scalar                    6845                              
 DATA1                      Dummy  6840     R(8)            8     2     1        ARG,TGT,IN       6855                              
 DATA2                      Dummy  6840     R(8)            8     2     1        ARG,TGT,IN       6856                              
 FILEOBJ                    Dummy  6840     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6845,6848,6850,6851,6853,6855,6856
 ID_FIELD                   Dummy  6840     I(4)            4           scalar   ARG,IN           6848,6851,6853,6855,6856          
 RESET_FIELD_POINTER_R2D_2L                                                                                                         
 EVEL                       Subr   6840                                          PRIV                                               
 TRIM                       Func   6850                                 scalar                    6850,6853                         

Page 265         Source Listing                  RESET_FIELD_POINTER_R2D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   6859 
   6860 !#######################################################################
   6861 
   6862 subroutine reset_field_pointer_r3d_2level(fileObj, id_field, data1, data2)
   6863   type(restart_file_type), intent(inout)      :: fileObj
   6864   integer,                 intent(in)         :: id_field
   6865   real, dimension(:,:,:),  intent(in), target :: data1, data2
   6866 
   6867   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_r3d_2level): " // &
   6868       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6869 
   6870   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6871          "fms_io(reset_field_pointer_r3d_2level): id_field should be positive integer and "// &
   6872          "no larger than number of fields in the file "//trim(fileObj%name) )
   6873   if(fileObj%var(id_field)%siz(4) .NE. 2) call mpp_error(FATAL, &
   6874          "fms_io(reset_field_pointer_r3d_2level): two-level reset_field_pointer is called, but "//&
   6875          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not two level" )
   6876 
   6877   fileObj%p3dr(1, id_field)%p => data1
   6878   fileObj%p3dr(2, id_field)%p => data2
   6879 
   6880 end subroutine reset_field_pointer_r3d_2level


ENTRY POINTS

  Name                                                     
                                                           
 fms_io_mod_mp_reset_field_pointer_r3d_2level_             

Page 266         Source Listing                  RESET_FIELD_POINTER_R3D_2LEVEL
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6867                                 scalar                    6867                              
 DATA1                      Dummy  6862     R(8)            8     3     1        ARG,TGT,IN       6877                              
 DATA2                      Dummy  6862     R(8)            8     3     1        ARG,TGT,IN       6878                              
 FILEOBJ                    Dummy  6862     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6867,6870,6872,6873,6875,6877,6878
 ID_FIELD                   Dummy  6862     I(4)            4           scalar   ARG,IN           6870,6873,6875,6877,6878          
 RESET_FIELD_POINTER_R3D_2L                                                                                                         
 EVEL                       Subr   6862                                          PRIV                                               
 TRIM                       Func   6872                                 scalar                    6872,6875                         

Page 267         Source Listing                  RESET_FIELD_POINTER_R3D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   6881 
   6882 !#######################################################################
   6883 
   6884 subroutine reset_field_pointer_i0d_2level(fileObj, id_field, data1, data2)
   6885   type(restart_file_type), intent(inout)      :: fileObj
   6886   integer,                 intent(in)         :: id_field
   6887   integer,                 intent(in), target :: data1, data2
   6888 
   6889   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_i0d_2level): " // &
   6890       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6891 
   6892   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6893          "fms_io(reset_field_pointer_i0d_2level): id_field should be positive integer and "// &
   6894          "no larger than number of fields in the file "//trim(fileObj%name) )
   6895   if(fileObj%var(id_field)%siz(4) .NE. 2) call mpp_error(FATAL, &
   6896          "fms_io(reset_field_pointer_i0d_2level): two-level reset_field_pointer is called, but "//&
   6897          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not two level" )
   6898 
   6899   fileObj%p0di(1, id_field)%p => data1
   6900   fileObj%p0di(2, id_field)%p => data2
   6901 
   6902 end subroutine reset_field_pointer_i0d_2level


ENTRY POINTS

  Name                                                     
                                                           
 fms_io_mod_mp_reset_field_pointer_i0d_2level_             

Page 268         Source Listing                  RESET_FIELD_POINTER_I0D_2LEVEL
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6889                                 scalar                    6889                              
 DATA1                      Dummy  6884     I(4)            4           scalar   ARG,TGT,IN       6899                              
 DATA2                      Dummy  6884     I(4)            4           scalar   ARG,TGT,IN       6900                              
 FILEOBJ                    Dummy  6884     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6889,6892,6894,6895,6897,6899,6900
 ID_FIELD                   Dummy  6884     I(4)            4           scalar   ARG,IN           6892,6895,6897,6899,6900          
 RESET_FIELD_POINTER_I0D_2L                                                                                                         
 EVEL                       Subr   6884                                          PRIV                                               
 TRIM                       Func   6894                                 scalar                    6894,6897                         

Page 269         Source Listing                  RESET_FIELD_POINTER_I0D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   6903 
   6904 !#######################################################################
   6905 
   6906 subroutine reset_field_pointer_i1d_2level(fileObj, id_field, data1, data2)
   6907   type(restart_file_type), intent(inout)      :: fileObj
   6908   integer,                 intent(in)         :: id_field
   6909   integer, dimension(:),   intent(in), target :: data1, data2
   6910 
   6911   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_i1d_2level): " // &
   6912       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6913 
   6914   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6915          "fms_io(reset_field_pointer_i1d_2level): id_field should be positive integer and "// &
   6916          "no larger than number of fields in the file "//trim(fileObj%name) )
   6917   if(fileObj%var(id_field)%siz(4) .NE. 2) call mpp_error(FATAL, &
   6918          "fms_io(reset_field_pointer_i1d_2level): two-level reset_field_pointer is called, but "//&
   6919          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not two level" )
   6920 
   6921   fileObj%p1di(1, id_field)%p => data1
   6922   fileObj%p1di(2, id_field)%p => data2
   6923 
   6924 end subroutine reset_field_pointer_i1d_2level


ENTRY POINTS

  Name                                                     
                                                           
 fms_io_mod_mp_reset_field_pointer_i1d_2level_             

Page 270         Source Listing                  RESET_FIELD_POINTER_I1D_2LEVEL
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6911                                 scalar                    6911                              
 DATA1                      Dummy  6906     I(4)            4     1     1        ARG,TGT,IN       6921                              
 DATA2                      Dummy  6906     I(4)            4     1     1        ARG,TGT,IN       6922                              
 FILEOBJ                    Dummy  6906     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6911,6914,6916,6917,6919,6921,6922
 ID_FIELD                   Dummy  6906     I(4)            4           scalar   ARG,IN           6914,6917,6919,6921,6922          
 RESET_FIELD_POINTER_I1D_2L                                                                                                         
 EVEL                       Subr   6906                                          PRIV                                               
 TRIM                       Func   6916                                 scalar                    6916,6919                         

Page 271         Source Listing                  RESET_FIELD_POINTER_I1D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   6925 
   6926 !#######################################################################
   6927 
   6928 subroutine reset_field_pointer_i2d_2level(fileObj, id_field, data1, data2)
   6929   type(restart_file_type), intent(inout)      :: fileObj
   6930   integer,                 intent(in)         :: id_field
   6931   integer, dimension(:,:), intent(in), target :: data1, data2
   6932 
   6933   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_i2d_2level): " // &
   6934       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6935 
   6936   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6937          "fms_io(reset_field_pointer_i2d_2level): id_field should be positive integer and "// &
   6938          "no larger than number of fields in the file "//trim(fileObj%name) )
   6939   if(fileObj%var(id_field)%siz(4) .NE. 2) call mpp_error(FATAL, &
   6940          "fms_io(reset_field_pointer_i2d_2level): two-level reset_field_pointer is called, but "//&
   6941          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not two level" )
   6942 
   6943   fileObj%p2di(1, id_field)%p => data1
   6944   fileObj%p2di(2, id_field)%p => data2
   6945 
   6946 end subroutine reset_field_pointer_i2d_2level


ENTRY POINTS

  Name                                                     
                                                           
 fms_io_mod_mp_reset_field_pointer_i2d_2level_             

Page 272         Source Listing                  RESET_FIELD_POINTER_I2D_2LEVEL
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6933                                 scalar                    6933                              
 DATA1                      Dummy  6928     I(4)            4     2     1        ARG,TGT,IN       6943                              
 DATA2                      Dummy  6928     I(4)            4     2     1        ARG,TGT,IN       6944                              
 FILEOBJ                    Dummy  6928     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6933,6936,6938,6939,6941,6943,6944
 ID_FIELD                   Dummy  6928     I(4)            4           scalar   ARG,IN           6936,6939,6941,6943,6944          
 RESET_FIELD_POINTER_I2D_2L                                                                                                         
 EVEL                       Subr   6928                                          PRIV                                               
 TRIM                       Func   6938                                 scalar                    6938,6941                         

Page 273         Source Listing                  RESET_FIELD_POINTER_I2D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   6947 
   6948 !#######################################################################
   6949 
   6950 subroutine reset_field_pointer_i3d_2level(fileObj, id_field, data1, data2)
   6951   type(restart_file_type),   intent(inout)      :: fileObj
   6952   integer,                   intent(in)         :: id_field
   6953   integer, dimension(:,:,:), intent(in), target :: data1, data2
   6954 
   6955   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(reset_field_pointer_i3d_2level): " // &
   6956       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6957 
   6958   if(id_field < 0 .OR. id_field > fileObj%nvar) call mpp_error(FATAL, &
   6959          "fms_io(reset_field_pointer_i3d_2level): id_field should be positive integer and "// &
   6960          "no larger than number of fields in the file "//trim(fileObj%name) )
   6961   if(fileObj%var(id_field)%siz(4) .NE. 2) call mpp_error(FATAL, &
   6962          "fms_io(reset_field_pointer_i3d_2level): two-level reset_field_pointer is called, but "//&
   6963          "field "//trim(fileObj%var(id_field)%name)//" of file "//trim(fileObj%name)//" is not two level" )
   6964 
   6965   fileObj%p3di(1, id_field)%p => data1
   6966   fileObj%p3di(2, id_field)%p => data2
   6967 
   6968 end subroutine reset_field_pointer_i3d_2level


ENTRY POINTS

  Name                                                     
                                                           
 fms_io_mod_mp_reset_field_pointer_i3d_2level_             

Page 274         Source Listing                  RESET_FIELD_POINTER_I3D_2LEVEL
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6955                                 scalar                    6955                              
 DATA1                      Dummy  6950     I(4)            4     3     1        ARG,TGT,IN       6965                              
 DATA2                      Dummy  6950     I(4)            4     3     1        ARG,TGT,IN       6966                              
 FILEOBJ                    Dummy  6950     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        6955,6958,6960,6961,6963,6965,6966
 ID_FIELD                   Dummy  6950     I(4)            4           scalar   ARG,IN           6958,6961,6963,6965,6966          
 RESET_FIELD_POINTER_I3D_2L                                                                                                         
 EVEL                       Subr   6950                                          PRIV                                               
 TRIM                       Func   6960                                 scalar                    6960,6963                         

Page 275         Source Listing                  RESET_FIELD_POINTER_I3D_2LEVEL
2021-06-01 08:54                                 fms_io.F90

   6969 
   6970 !#########################################################################
   6971 !   This function returns .true. if the field referred to by id has
   6972 ! initialized from a restart file, and .false. otherwise.
   6973 !
   6974 ! Arguments: id - A integer that is the index of the field in fileObj.
   6975 !  (in)  fileObj - The control structure returned by a previous call to
   6976 !                  register_restart_field
   6977 function query_initialized_id(fileObj, id)
   6978   type(restart_file_type), intent(in) :: fileObj
   6979   integer,                 intent(in) :: id
   6980 
   6981   logical :: query_initialized_id
   6982 
   6983   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(query_initialized_id): " // &
   6984       "restart_file_type data must be initialized by calling register_restart_field before using it")
   6985 
   6986   if(id < 1 .OR. id > fileObj%nvar) call mpp_error(FATAL, "fms_io(query_initialized_id): " // &
   6987       "argument id must be between 1 and nvar in the restart_file_type object")
   6988 
   6989   query_initialized_id = fileObj%var(id)%initialized
   6990 
   6991   return
   6992 
   6993 end function query_initialized_id


ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_query_initialized_id_             

Page 276         Source Listing                  QUERY_INITIALIZED_ID
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   6983                                 scalar                    6983                              
 FILEOBJ                    Dummy  6977     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,IN           6983,6986,6989                    
 ID                         Dummy  6977     I(4)            4           scalar   ARG,IN           6986,6989                         
 QUERY_INITIALIZED_ID       Func   6977     L(4)            4           scalar   PRIV             6989                              

Page 277         Source Listing                  QUERY_INITIALIZED_ID
2021-06-01 08:54                                 fms_io.F90

   6994 
   6995 !#########################################################################
   6996 !   This function returns .true. if the field referred to by name has
   6997 ! initialized from a restart file, and .false. otherwise.
   6998 !
   6999 ! Arguments: name - A pointer to the field that is being queried.
   7000 !  (in)  fileObj - The control structure returned by a previous call to
   7001 !                  register_restart_field
   7002 function query_initialized_name(fileObj, name)
   7003   type(restart_file_type), intent(inout) :: fileObj
   7004   character(len=*),           intent(in) :: name
   7005 
   7006   logical :: query_initialized_name
   7007 
   7008   integer :: m
   7009 
   7010   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(query_initialized_name): " // &
   7011       "restart_file_type data must be initialized by calling register_restart_field before using it")
   7012 
   7013   query_initialized_name = .false.
   7014   do m=1,fileObj%nvar
   7015     if (trim(name) == fileObj%var(m)%name) then
   7016       if (fileObj%var(m)%initialized) query_initialized_name = .true.
   7017       exit
   7018     endif
   7019   enddo
   7020 ! Assume that you are going to initialize it now, so set flag to initialized if
   7021 ! queried again.
   7022   if ((m>fileObj%nvar) .and. (mpp_pe() == mpp_root_pe())) then
   7023     call mpp_error(NOTE,"fms_io(query_initialized_name): Unknown restart variable "//name// &
   7024                         " queried for initialization.")
   7025   end if
   7026 
   7027 end function query_initialized_name

Page 278         Source Listing                  QUERY_INITIALIZED_NAME
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                             
                                                   
 fms_io_mod_mp_query_initialized_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7010                                 scalar                    7010                              
 FILEOBJ                    Dummy  7002     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        7010,7014,7015,7016,7022          
 M                          Local  7008     I(4)            4           scalar                    7014,7015,7016,7022               
 NAME                       Dummy  7002     CHAR                        scalar   ARG,IN           7015,7023                         
 QUERY_INITIALIZED_NAME     Func   7002     L(4)            4           scalar   PRIV             7013,7016,7062,7104,7147          
 TRIM                       Func   7015                                 scalar                    7015                              

Page 279         Source Listing                  QUERY_INITIALIZED_NAME
2021-06-01 08:54                                 fms_io.F90

   7028 
   7029 !#########################################################################
   7030 !   This function returns 1 if the field pointed to by f_ptr has
   7031 ! initialized from a restart file, and 0 otherwise.  If f_ptr is
   7032 ! NULL, it tests whether the entire restart file has been success-
   7033 ! fully read.
   7034 !
   7035 ! Arguments: f_ptr - A pointer to the field that is being queried.
   7036 !  (in)      name - The name of the field that is being queried.
   7037 !  (in)      CS - The control structure returned by a previous call to
   7038 !                 restart_init.
   7039 function query_initialized_r2d(fileObj, f_ptr, name)
   7040   type(restart_file_type),   intent(inout) :: fileObj
   7041   real, dimension(:,:), target, intent(in) :: f_ptr
   7042   character(len=*),             intent(in) :: name
   7043 
   7044   logical :: query_initialized_r2d
   7045   integer :: m
   7046 
   7047   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(query_initialized_r2d): " // &
   7048       "restart_file_type data must be initialized by calling register_restart_field before using it")
   7049 
   7050   query_initialized_r2d = .false.
   7051   do m=1, fileObj%nvar
   7052      if (ASSOCIATED(fileObj%p2dr(1,m)%p,f_ptr)) then
   7053         if (fileObj%var(m)%initialized) query_initialized_r2d = .true.
   7054         exit
   7055      endif
   7056   enddo
   7057 ! Assume that you are going to initialize it now, so set flag to initialized if
   7058 ! queried again.
   7059   if (m>fileObj%nvar) then
   7060      if (mpp_pe() == mpp_root_pe() ) call mpp_error(NOTE, "fms_io(query_initialized_r2d): Unable to find "// &
   7061           trim(name)//" queried by pointer, "//"probably because of the suspect comparison of pointers by ASSOCIATED.")
   7062      query_initialized_r2d = query_initialized_name(fileObj, name)
   7063      if (mpp_pe() == mpp_root_pe() .AND. query_initialized_r2d) call mpp_error(NOTE, &
   7064           "fms_io(query_initialized_r2d): "//trim(name)// " initialization confirmed by name.")
   7065   endif
   7066 
   7067   return
   7068 
   7069 end function query_initialized_r2d

Page 280         Source Listing                  QUERY_INITIALIZED_R2D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                            
                                                  
 fms_io_mod_mp_query_initialized_r2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7047                                 scalar                    7047,7052                         
 FILEOBJ                    Dummy  7039     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        7047,7051,7052,7053,7059,7062     
 F_PTR                      Dummy  7039     R(8)            8     2     1        ARG,TGT,IN       7052                              
 M                          Local  7045     I(4)            4           scalar                    7051,7052,7053,7059               
 NAME                       Dummy  7039     CHAR                        scalar   ARG,IN           7061,7062,7064                    
 QUERY_INITIALIZED_R2D      Func   7039     L(4)            4           scalar   PRIV             7050,7053,7062,7063               
 TRIM                       Func   7061                                 scalar                    7061,7064                         

Page 281         Source Listing                  QUERY_INITIALIZED_R2D
2021-06-01 08:54                                 fms_io.F90

   7070 
   7071 !#########################################################################
   7072 !   This function returns 1 if the field pointed to by f_ptr has
   7073 ! initialized from a restart file, and 0 otherwise.  If f_ptr is
   7074 ! NULL, it tests whether the entire restart file has been success-
   7075 ! fully read.
   7076 !
   7077 ! Arguments: f_ptr - A pointer to the field that is being queried.
   7078 !  (in)      name - The name of the field that is being queried.
   7079 !  (in)      CS - The control structure returned by a previous call to
   7080 !                 restart_init.
   7081 function query_initialized_r3d(fileObj, f_ptr, name)
   7082   type(restart_file_type),     intent(inout) :: fileObj
   7083   real, dimension(:,:,:), target, intent(in) :: f_ptr
   7084   character(len=*),               intent(in) :: name
   7085 
   7086   logical :: query_initialized_r3d
   7087   integer :: m
   7088 
   7089   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(query_initialized_r3d): " // &
   7090       "restart_file_type data must be initialized by calling register_restart_field before using it")
   7091 
   7092   query_initialized_r3d = .false.
   7093   do m=1, fileObj%nvar
   7094      if (ASSOCIATED(fileObj%p3dr(1,m)%p,f_ptr)) then
   7095         if (fileObj%var(m)%initialized) query_initialized_r3d = .true.
   7096         exit
   7097      endif
   7098   enddo
   7099 ! Assume that you are going to initialize it now, so set flag to initialized if
   7100 ! queried again.
   7101   if (m>fileObj%nvar) then
   7102      if (mpp_pe() == mpp_root_pe() ) call mpp_error(NOTE, "fms_io(query_initialized_r3d): Unable to find "// &
   7103           trim(name)//" queried by pointer, "//"probably because of the suspect comparison of pointers by ASSOCIATED.")
   7104      query_initialized_r3d = query_initialized_name(fileObj, name)
   7105      if (mpp_pe() == mpp_root_pe() .AND. query_initialized_r3d) call mpp_error(NOTE, &
   7106           "fms_io(query_initialized_r3d): "//trim(name)// " initialization confirmed by name.")
   7107   endif
   7108 
   7109   return
   7110 
   7111 end function query_initialized_r3d

Page 282         Source Listing                  QUERY_INITIALIZED_R3D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                            
                                                  
 fms_io_mod_mp_query_initialized_r3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7089                                 scalar                    7089,7094                         
 FILEOBJ                    Dummy  7081     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        7089,7093,7094,7095,7101,7104     
 F_PTR                      Dummy  7081     R(8)            8     3     1        ARG,TGT,IN       7094                              
 M                          Local  7087     I(4)            4           scalar                    7093,7094,7095,7101               
 NAME                       Dummy  7081     CHAR                        scalar   ARG,IN           7103,7104,7106                    
 QUERY_INITIALIZED_R3D      Func   7081     L(4)            4           scalar   PRIV             7092,7095,7104,7105               
 TRIM                       Func   7103                                 scalar                    7103,7106                         

Page 283         Source Listing                  QUERY_INITIALIZED_R3D
2021-06-01 08:54                                 fms_io.F90

   7112 
   7113 
   7114 !#########################################################################
   7115 !   This function returns 1 if the field pointed to by f_ptr has
   7116 ! initialized from a restart file, and 0 otherwise.  If f_ptr is
   7117 ! NULL, it tests whether the entire restart file has been success-
   7118 ! fully read.
   7119 !
   7120 ! Arguments: f_ptr - A pointer to the field that is being queried.
   7121 !  (in)      name - The name of the field that is being queried.
   7122 !  (in)      CS - The control structure returned by a previous call to
   7123 !                 restart_init.
   7124 function query_initialized_r4d(fileObj, f_ptr, name)
   7125   type(restart_file_type),       intent(inout) :: fileObj
   7126   real, dimension(:,:,:,:), target, intent(in) :: f_ptr
   7127   character(len=*),                 intent(in) :: name
   7128 
   7129   logical :: query_initialized_r4d
   7130   integer :: m
   7131 
   7132   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(query_initialized_r4d): " // &
   7133       "restart_file_type data must be initialized by calling register_restart_field before using it")
   7134 
   7135   query_initialized_r4d = .false.
   7136   do m=1, fileObj%nvar
   7137      if (ASSOCIATED(fileObj%p4dr(1,m)%p,f_ptr)) then
   7138         if (fileObj%var(m)%initialized) query_initialized_r4d = .true.
   7139         exit
   7140      endif
   7141   enddo
   7142 ! Assume that you are going to initialize it now, so set flag to initialized if
   7143 ! queried again.
   7144   if (m>fileObj%nvar) then
   7145      if (mpp_pe() == mpp_root_pe() ) call mpp_error(NOTE, "fms_io(query_initialized_r4d): Unable to find "// &
   7146           trim(name)//" queried by pointer, "//"probably because of the suspect comparison of pointers by ASSOCIATED.")
   7147      query_initialized_r4d = query_initialized_name(fileObj, name)
   7148      if (mpp_pe() == mpp_root_pe() .AND. query_initialized_r4d) call mpp_error(NOTE, &
   7149           "fms_io(query_initialized_r4d): "//trim(name)// " initialization confirmed by name.")
   7150   endif
   7151 
   7152   return
   7153 
   7154 end function query_initialized_r4d

Page 284         Source Listing                  QUERY_INITIALIZED_R4D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                            
                                                  
 fms_io_mod_mp_query_initialized_r4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7132                                 scalar                    7132,7137                         
 FILEOBJ                    Dummy  7124     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        7132,7136,7137,7138,7144,7147     
 F_PTR                      Dummy  7124     R(8)            8     4     1        ARG,TGT,IN       7137                              
 M                          Local  7130     I(4)            4           scalar                    7136,7137,7138,7144               
 NAME                       Dummy  7124     CHAR                        scalar   ARG,IN           7146,7147,7149                    
 QUERY_INITIALIZED_R4D      Func   7124     L(4)            4           scalar   PRIV             7135,7138,7147,7148               
 TRIM                       Func   7146                                 scalar                    7146,7149                         

Page 285         Source Listing                  QUERY_INITIALIZED_R4D
2021-06-01 08:54                                 fms_io.F90

   7155 
   7156 !#########################################################################
   7157 !   This function sets that a variable has been initialized for future queries.
   7158 !
   7159 ! Arguments: name - A pointer to the field whose initialization status is being set.
   7160 !  (in)  fileObj - The control structure returned by a previous call to
   7161 !                  register_restart_field
   7162 subroutine set_initialized_id(fileObj, id, is_set)
   7163   type(restart_file_type), intent(inout) :: fileObj
   7164   integer         ,           intent(in) :: id
   7165   logical,          optional, intent(in) :: is_set
   7166 
   7167   logical :: set_val
   7168   integer :: m
   7169 
   7170   set_val = .true.
   7171   if (present(is_set)) set_val = is_set
   7172 
   7173   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(set_initialized_id): " // &
   7174       "restart_file_type data must be initialized by calling set_restart_field before using it")
   7175 
   7176   if(id < 1 .OR. id > fileObj%nvar) call mpp_error(FATAL, "fms_io(set_initialized_id): " // &
   7177       "argument id must be between 1 and nvar in the restart_file_type object")
   7178 
   7179   fileObj%var(id)%initialized = set_val
   7180 
   7181 
   7182 end subroutine set_initialized_id

Page 286         Source Listing                  SET_INITIALIZED_ID
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                         
                                               
 fms_io_mod_mp_set_initialized_id_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7173                                 scalar                    7173                              
 FILEOBJ                    Dummy  7162     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        7173,7176,7179                    
 ID                         Dummy  7162     I(4)            4           scalar   ARG,IN           7176,7179                         
 IS_SET                     Dummy  7162     L(4)            4           scalar   ARG,IN           7171                              
 M                          Local  7168     I(4)            4           scalar                                                      
 PRESENT                    Func   7171                                 scalar                    7171                              
 SET_INITIALIZED_ID         Subr   7162                                          PRIV                                               
 SET_VAL                    Local  7167     L(4)            4           scalar                    7170,7171,7179                    

Page 287         Source Listing                  SET_INITIALIZED_ID
2021-06-01 08:54                                 fms_io.F90

   7183 
   7184 !#########################################################################
   7185 !   This function sets that a variable has been initialized for future queries.
   7186 !
   7187 ! Arguments: name - A pointer to the field whose initialization status is being set.
   7188 !  (in)  fileObj - The control structure returned by a previous call to
   7189 !                  register_restart_field
   7190 subroutine set_initialized_name(fileObj, name, is_set)
   7191   type(restart_file_type), intent(inout) :: fileObj
   7192   character(len=*),           intent(in) :: name
   7193   logical,          optional, intent(in) :: is_set
   7194 
   7195   logical :: set_val
   7196   integer :: m
   7197 
   7198   set_val = .true.
   7199   if (present(is_set)) set_val = is_set
   7200 
   7201   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(set_initialized_name): " // &
   7202       "restart_file_type data must be initialized by calling set_restart_field before using it")
   7203 
   7204   do m=1,fileObj%nvar
   7205     if (trim(name) == fileObj%var(m)%name) then
   7206       fileObj%var(m)%initialized = set_val
   7207       exit
   7208     endif
   7209   enddo
   7210 
   7211   if (m>fileObj%nvar) then
   7212     call mpp_error(NOTE,"fms_io(set_initialized_name): Unknown restart variable "//name// &
   7213                         " attempted to set initialization.")
   7214   end if
   7215 
   7216 end subroutine set_initialized_name

Page 288         Source Listing                  SET_INITIALIZED_NAME
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_set_initialized_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7201                                 scalar                    7201                              
 FILEOBJ                    Dummy  7190     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        7201,7204,7205,7206,7211          
 IS_SET                     Dummy  7190     L(4)            4           scalar   ARG,IN           7199                              
 M                          Local  7196     I(4)            4           scalar                    7204,7205,7206,7211               
 NAME                       Dummy  7190     CHAR                        scalar   ARG,IN           7205,7212                         
 PRESENT                    Func   7199                                 scalar                    7199                              
 SET_INITIALIZED_NAME       Subr   7190                                          PRIV                                               
 SET_VAL                    Local  7195     L(4)            4           scalar                    7198,7199,7206                    
 TRIM                       Func   7205                                 scalar                    7205                              

Page 289         Source Listing                  SET_INITIALIZED_NAME
2021-06-01 08:54                                 fms_io.F90

   7217 
   7218 !#########################################################################
   7219 !   This function sets that a variable has been initialized for future queries.
   7220 !
   7221 ! Arguments: name - A pointer to the field whose initialization status is being set.
   7222 !  (in)  fileObj - The control structure returned by a previous call to
   7223 !                  register_restart_field
   7224 subroutine set_initialized_r2d(fileObj, f_ptr, name, is_set)
   7225   type(restart_file_type),   intent(inout) :: fileObj
   7226   real, dimension(:,:), target, intent(in) :: f_ptr
   7227   character(len=*),             intent(in) :: name
   7228   logical,          optional,   intent(in) :: is_set
   7229   logical :: set_val
   7230   integer :: m
   7231 
   7232   set_val = .true.
   7233   if (present(is_set)) set_val = is_set
   7234 
   7235   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(set_initialized_r2d): " // &
   7236       "restart_file_type data must be initialized by calling set_restart_field before using it")
   7237 
   7238   do m=1, fileObj%nvar
   7239      if (ASSOCIATED(fileObj%p2dr(1,m)%p,f_ptr)) then
   7240         fileObj%var(m)%initialized = set_val
   7241         return
   7242      endif
   7243   enddo
   7244 
   7245   if (m>fileObj%nvar .AND. mpp_pe() == mpp_root_pe() ) then
   7246     call mpp_error(NOTE,"fms_io(set_initialized_r2d): Unable to find "// &
   7247           trim(name)//" queried by pointer, "//"probably because of the suspect comparison of pointers by ASSOCIATED"// &
   7248                         " when attempting to set initialization.")
   7249   end if
   7250 
   7251   do m=1,fileObj%nvar
   7252     if (trim(name) == fileObj%var(m)%name) then
   7253       fileObj%var(m)%initialized = set_val
   7254       return
   7255     endif
   7256   enddo
   7257 
   7258   if (m>fileObj%nvar .AND. mpp_pe() == mpp_root_pe() ) then
   7259     call mpp_error(NOTE,"fms_io(set_initialized_r2d): Unknown restart variable "//name// &
   7260                         " attempted to set initialization.")
   7261   end if
   7262 
   7263 end subroutine set_initialized_r2d

Page 290         Source Listing                  SET_INITIALIZED_R2D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_set_initialized_r2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7235                                 scalar                    7235,7239                         
 FILEOBJ                    Dummy  7224     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        7235,7238,7239,7240,7245,7251,7252
                                                                                                  ,7253,7258                        
 F_PTR                      Dummy  7224     R(8)            8     2     1        ARG,TGT,IN       7239                              
 IS_SET                     Dummy  7224     L(4)            4           scalar   ARG,IN           7233                              
 M                          Local  7230     I(4)            4           scalar                    7238,7239,7240,7245,7251,7252,7253
                                                                                                  ,7258                             
 NAME                       Dummy  7224     CHAR                        scalar   ARG,IN           7247,7252,7259                    
 PRESENT                    Func   7233                                 scalar                    7233                              
 SET_INITIALIZED_R2D        Subr   7224                                          PRIV                                               
 SET_VAL                    Local  7229     L(4)            4           scalar                    7232,7233,7240,7253               
 TRIM                       Func   7247                                 scalar                    7247,7252                         

Page 291         Source Listing                  SET_INITIALIZED_R2D
2021-06-01 08:54                                 fms_io.F90

   7264 
   7265 !#########################################################################
   7266 !   This function sets that a variable has been initialized for future queries.
   7267 !
   7268 ! Arguments: name - A pointer to the field whose initialization status is being set.
   7269 !  (in)  fileObj - The control structure returned by a previous call to
   7270 !                  register_restart_field
   7271 subroutine set_initialized_r3d(fileObj, f_ptr, name, is_set)
   7272   type(restart_file_type),     intent(inout) :: fileObj
   7273   real, dimension(:,:,:), target, intent(in) :: f_ptr
   7274   character(len=*),               intent(in) :: name
   7275   logical,          optional,     intent(in) :: is_set
   7276   logical :: set_val
   7277   integer :: m
   7278 
   7279   set_val = .true.
   7280   if (present(is_set)) set_val = is_set
   7281 
   7282   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(set_initialized_r3d): " // &
   7283       "restart_file_type data must be initialized by calling set_restart_field before using it")
   7284 
   7285   do m=1, fileObj%nvar
   7286      if (ASSOCIATED(fileObj%p3dr(1,m)%p,f_ptr)) then
   7287         fileObj%var(m)%initialized = set_val
   7288         return
   7289      endif
   7290   enddo
   7291 
   7292   if (m>fileObj%nvar .AND. mpp_pe() == mpp_root_pe() ) then
   7293     call mpp_error(NOTE,"fms_io(set_initialized_r3d): Unable to find "// &
   7294           trim(name)//" queried by pointer, "//"probably because of the suspect comparison of pointers by ASSOCIATED"//&
   7295                         " when attempting to set initialization.")
   7296   end if
   7297 
   7298   do m=1,fileObj%nvar
   7299     if (trim(name) == fileObj%var(m)%name) then
   7300       fileObj%var(m)%initialized = set_val
   7301       return
   7302     endif
   7303   enddo
   7304 
   7305   if (m>fileObj%nvar .AND. mpp_pe() == mpp_root_pe() ) then
   7306     call mpp_error(NOTE,"fms_io(set_initialized_r3d): Unknown restart variable "//name// &
   7307                         " attempted to set initialization.")
   7308   end if
   7309 
   7310 end subroutine set_initialized_r3d

Page 292         Source Listing                  SET_INITIALIZED_R3D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_set_initialized_r3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7282                                 scalar                    7282,7286                         
 FILEOBJ                    Dummy  7271     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        7282,7285,7286,7287,7292,7298,7299
                                                                                                  ,7300,7305                        
 F_PTR                      Dummy  7271     R(8)            8     3     1        ARG,TGT,IN       7286                              
 IS_SET                     Dummy  7271     L(4)            4           scalar   ARG,IN           7280                              
 M                          Local  7277     I(4)            4           scalar                    7285,7286,7287,7292,7298,7299,7300
                                                                                                  ,7305                             
 NAME                       Dummy  7271     CHAR                        scalar   ARG,IN           7294,7299,7306                    
 PRESENT                    Func   7280                                 scalar                    7280                              
 SET_INITIALIZED_R3D        Subr   7271                                          PRIV                                               
 SET_VAL                    Local  7276     L(4)            4           scalar                    7279,7280,7287,7300               
 TRIM                       Func   7294                                 scalar                    7294,7299                         

Page 293         Source Listing                  SET_INITIALIZED_R3D
2021-06-01 08:54                                 fms_io.F90

   7311 
   7312 
   7313 !#########################################################################
   7314 !   This function sets that a variable has been initialized for future queries.
   7315 !
   7316 ! Arguments: name - A pointer to the field whose initialization status is being set.
   7317 !  (in)  fileObj - The control structure returned by a previous call to
   7318 !                  register_restart_field
   7319 subroutine set_initialized_r4d(fileObj, f_ptr, name, is_set)
   7320   type(restart_file_type),       intent(inout) :: fileObj
   7321   real, dimension(:,:,:,:), target, intent(in) :: f_ptr
   7322   character(len=*),                 intent(in) :: name
   7323   logical,          optional,       intent(in) :: is_set
   7324   logical :: set_val
   7325   integer :: m
   7326 
   7327   set_val = .true.
   7328   if (present(is_set)) set_val = is_set
   7329 
   7330   if (.not.associated(fileObj%var)) call mpp_error(FATAL, "fms_io(set_initialized_r4d): " // &
   7331       "restart_file_type data must be initialized by calling set_restart_field before using it")
   7332 
   7333   do m=1, fileObj%nvar
   7334      if (ASSOCIATED(fileObj%p4dr(1,m)%p,f_ptr)) then
   7335         fileObj%var(m)%initialized = set_val
   7336         return
   7337      endif
   7338   enddo
   7339 
   7340   if (m>fileObj%nvar .AND. mpp_pe() == mpp_root_pe() ) then
   7341     call mpp_error(NOTE,"fms_io(set_initialized_r4d): Unable to find "// &
   7342           trim(name)//" queried by pointer, "//"probably because of the suspect comparison of pointers by ASSOCIATED"//&
   7343                         " when attempting to set initialization.")
   7344   end if
   7345 
   7346   do m=1,fileObj%nvar
   7347     if (trim(name) == fileObj%var(m)%name) then
   7348       fileObj%var(m)%initialized = set_val
   7349       return
   7350     endif
   7351   enddo
   7352 
   7353   if (m>fileObj%nvar .AND. mpp_pe() == mpp_root_pe() ) then
   7354     call mpp_error(NOTE,"fms_io(set_initialized_r4d): Unknown restart variable "//name// &
   7355                         " attempted to set initialization.")
   7356   end if
   7357 
   7358 end subroutine set_initialized_r4d

Page 294         Source Listing                  SET_INITIALIZED_R4D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_set_initialized_r4d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7330                                 scalar                    7330,7334                         
 FILEOBJ                    Dummy  7319     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        7330,7333,7334,7335,7340,7346,7347
                                                                                                  ,7348,7353                        
 F_PTR                      Dummy  7319     R(8)            8     4     1        ARG,TGT,IN       7334                              
 IS_SET                     Dummy  7319     L(4)            4           scalar   ARG,IN           7328                              
 M                          Local  7325     I(4)            4           scalar                    7333,7334,7335,7340,7346,7347,7348
                                                                                                  ,7353                             
 NAME                       Dummy  7319     CHAR                        scalar   ARG,IN           7342,7347,7354                    
 PRESENT                    Func   7328                                 scalar                    7328                              
 SET_INITIALIZED_R4D        Subr   7319                                          PRIV                                               
 SET_VAL                    Local  7324     L(4)            4           scalar                    7327,7328,7335,7348               
 TRIM                       Func   7342                                 scalar                    7342,7347                         

Page 295         Source Listing                  SET_INITIALIZED_R4D
2021-06-01 08:54                                 fms_io.F90

   7359 
   7360 !#######################################################################
   7361 !#######################################################################
   7362 !
   7363 ! routines for opening specific types of files:
   7364 !
   7365 !                       form        action
   7366 ! open_namelist_file  MPP_ASCII   MPP_RDONLY
   7367 ! open restart_file   MPP_NATIVE
   7368 ! open_ieee32_file    MPP_IEEE32
   7369 !
   7370 ! all have: access=MPP_SEQUENTIAL, threading=MPP_SINGLE, nohdrs=.true.
   7371 ! use the close_file interface to close these files
   7372 !
   7373 ! if other types of files need to be opened the mpp_open and
   7374 ! mpp_close routines in the mpp_io_mod should be used
   7375 !
   7376 !#######################################################################
   7377 
   7378 
   7379 ! <FUNCTION NAME="open_namelist_file">
   7380 !   <DESCRIPTION>
   7381 ! Opens single namelist file for reading only by all PEs
   7382 ! the default file opened is called "input.nml".
   7383 !   </DESCRIPTION>
   7384 ! <IN NAME="file" TYPE="character">
   7385 ! name of the file to be opened
   7386 ! </IN>
   7387 ! <OUT NAME="unit" TYPE="integer">
   7388 ! unit number returned by this function
   7389 ! </OUT>
   7390 function open_namelist_file (file) result (unit)
   7391   character(len=*), intent(in), optional :: file
   7392   integer :: unit
   7393 ! local variables necessary for nesting code and alternate input.nmls
   7394   character(len=32) :: pelist_name
   7395   character(len=128) :: filename
   7396 
   7397 
   7398   if(show_open_namelist_file_warning) call mpp_error(WARNING, "fms_io_mod: open_namelist_file should not be called when INTE
   7398 RNAL_FILE_NML is defined")
   7399 
   7400 
   7401   if (.not.module_is_initialized) call fms_io_init ( )
   7402   if (present(file)) then
   7403      call mpp_open ( unit, file, form=MPP_ASCII, action=MPP_RDONLY, &
   7404           access=MPP_SEQUENTIAL, threading=MPP_SINGLE )
   7405   else
   7406 !  the following code is necessary for using alternate namelist files (nests, stretched grids, etc)
   7407      pelist_name = mpp_get_current_pelist_name()
   7408      if ( file_exist('input_'//trim(pelist_name)//'.nml', no_domain=.true.) ) then
   7409         filename='input_'//trim(pelist_name)//'.nml'
   7410      else
   7411         filename='input.nml'
   7412      endif
   7413      call mpp_open ( unit, trim(filename), form=MPP_ASCII, action=MPP_RDONLY, &
   7414           access=MPP_SEQUENTIAL, threading=MPP_SINGLE )

Page 296         Source Listing                  OPEN_NAMELIST_FILE
2021-06-01 08:54                                 fms_io.F90

   7415   endif
   7416 end function open_namelist_file


ENTRY POINTS

  Name                                         
                                               
 fms_io_mod_mp_open_namelist_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FILE                       Dummy  7390     CHAR                        scalar   ARG,IN           7402,7403                         
 FILENAME                   Local  7395     CHAR            128         scalar                    7409,7411,7413                    
 MPP_ASCII                  Param  7403     I(4)            4           scalar   PRIV             207,7403,7413,7795,7797           
 MPP_GET_CURRENT_PELIST_NAM                                                                                                         
 E                          Func   7407     CHAR            32          scalar   PRIV             220,7407                          
 MPP_SEQUENTIAL             Param  7404     I(4)            4           scalar   PRIV             208,7404,7414,7453,7525,7829      
 OPEN_NAMELIST_FILE         Func   7390     I(4)            4           scalar                                                      
 PELIST_NAME                Local  7394     CHAR            32          scalar                    7407,7408,7409                    
 PRESENT                    Func   7402                                 scalar                    7402                              
 SHOW_OPEN_NAMELIST_FILE_WA                                                                                                         
 RNING                      Local  7398     L(4)            4           scalar                    631,636,7398                      
 TRIM                       Func   7408                                 scalar                    7408,7409,7413                    
 UNIT                       Local  7392     I(4)            4           scalar                    7403,7413                         

Page 297         Source Listing                  OPEN_NAMELIST_FILE
2021-06-01 08:54                                 fms_io.F90

   7417 ! </FUNCTION>
   7418 
   7419 ! <FUNCTION NAME="open_restart_file">
   7420 !   <DESCRIPTION>
   7421 ! Opens single restart file for reading by all PEs or
   7422 ! writing by root PE only
   7423 ! the file has native format and no mpp header records.
   7424 !   </DESCRIPTION>
   7425 !<IN NAME="file" TYPE="character">
   7426 ! name of the file to be opened
   7427 ! </IN>
   7428 !<IN NAME="action" TYPE="character">
   7429 ! action to be performed: can be 'read' or 'write'
   7430 ! </IN>
   7431 ! <OUT NAME="unit" TYPE="integer">
   7432 ! unit number returned by this function
   7433 ! </OUT>
   7434 function open_restart_file (file, action) result (unit)
   7435   character(len=*), intent(in) :: file, action
   7436   integer :: unit
   7437   integer :: mpp_action
   7438 
   7439   if (.not.module_is_initialized) call fms_io_init ( )
   7440 
   7441 !   --- action (read,write) ---
   7442 
   7443   select case (lowercase(trim(action)))
   7444   case ('read')
   7445      mpp_action = MPP_RDONLY
   7446   case ('write')
   7447      mpp_action = MPP_OVERWR
   7448   case default
   7449      call mpp_error(FATAL,'fms_io(open_restart_file): action should be either read or write in file'//trim(file))
   7450   end select
   7451 
   7452   call mpp_open ( unit, file, form=MPP_NATIVE, action=mpp_action, &
   7453        access=MPP_SEQUENTIAL, threading=MPP_SINGLE, nohdrs=.true. )
   7454 
   7455 end function open_restart_file

Page 298         Source Listing                  OPEN_RESTART_FILE
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_open_restart_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTION                     Dummy  7434     CHAR                        scalar   ARG,IN           7443                              
 FILE                       Dummy  7434     CHAR                        scalar   ARG,IN           7449,7452                         
 MPP_ACTION                 Local  7437     I(4)            4           scalar                    7445,7447,7452                    
 MPP_NATIVE                 Param  7452     I(4)            4           scalar   PRIV             208,7452,7486,7799,7801           
 OPEN_RESTART_FILE          Func   7434     I(4)            4           scalar                                                      
 TRIM                       Func   7443                                 scalar                    7443,7449                         
 UNIT                       Local  7436     I(4)            4           scalar                    7452                              

Page 299         Source Listing                  OPEN_RESTART_FILE
2021-06-01 08:54                                 fms_io.F90

   7456 ! </FUNCTION>
   7457 
   7458 
   7459 ! <FUNCTION NAME="open_direct_file">
   7460 !   <DESCRIPTION>
   7461 ! Opens single direct access file for reading by all PEs or
   7462 ! writing by root PE only
   7463 ! the file has native format and no mpp header records.
   7464 !   </DESCRIPTION>
   7465 
   7466   function open_direct_file (file, action, recl) result (unit)
   7467     character(len=*), intent(in) :: file, action
   7468     integer,          intent(in) :: recl
   7469     integer :: unit
   7470 
   7471     integer :: mpp_action
   7472 
   7473     if (.not.module_is_initialized) call fms_io_init ( )
   7474 
   7475 !   --- action (read,write) ---
   7476 
   7477     select case (lowercase(trim(action)))
   7478     case ('read')
   7479        mpp_action = MPP_RDONLY
   7480     case ('write')
   7481        mpp_action = MPP_OVERWR
   7482     case default
   7483        call mpp_error(FATAL,'invalid option for argument action')
   7484     end select
   7485 
   7486     call mpp_open ( unit, file, form=MPP_NATIVE, action=mpp_action, &
   7487          access=MPP_DIRECT, threading=MPP_SINGLE, nohdrs=.true., recl=recl )
   7488 
   7489   end function open_direct_file

Page 300         Source Listing                  OPEN_DIRECT_FILE
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                       
                                             
 fms_io_mod_mp_open_direct_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTION                     Dummy  7466     CHAR                        scalar   ARG,IN           7477                              
 FILE                       Dummy  7466     CHAR                        scalar   ARG,IN           7486                              
 MPP_ACTION                 Local  7471     I(4)            4           scalar                    7479,7481,7486                    
 MPP_DIRECT                 Param  7487     I(4)            4           scalar   PRIV             208,7487,7831                     
 OPEN_DIRECT_FILE           Func   7466     I(4)            4           scalar                                                      
 RECL                       Dummy  7466     I(4)            4           scalar   ARG,IN           7487                              
 TRIM                       Func   7477                                 scalar                    7477                              
 UNIT                       Local  7469     I(4)            4           scalar                    7486                              

Page 301         Source Listing                  OPEN_DIRECT_FILE
2021-06-01 08:54                                 fms_io.F90

   7490 ! </FUNCTION>
   7491 
   7492 ! <FUNCTION NAME=" open_ieee32_file">
   7493 !   <DESCRIPTION>
   7494 ! Opens single 32-bit ieee file for reading by all PEs or
   7495 ! writing by root PE only (writing is not recommended)
   7496 ! the file has no mpp header records.
   7497 !   </DESCRIPTION>
   7498 !<IN NAME="file" TYPE="character">
   7499 ! name of the file to be opened
   7500 ! </IN>
   7501 !<IN NAME="action" TYPE="character">
   7502 ! action to be performed: can be 'read' or 'write'
   7503 ! </IN>
   7504 ! <OUT NAME="unit" TYPE="integer">
   7505 ! unit number returned by this function
   7506 ! </OUT>
   7507 function open_ieee32_file (file, action) result (unit)
   7508   character(len=*), intent(in) :: file, action
   7509   integer :: unit
   7510   integer :: mpp_action
   7511 
   7512   if (.not.module_is_initialized) call fms_io_init ( )
   7513 
   7514 !   --- action (read,write) ---
   7515   select case (lowercase(trim(action)))
   7516   case ('read')
   7517      mpp_action = MPP_RDONLY
   7518   case ('write')
   7519      mpp_action = MPP_OVERWR
   7520   case default
   7521      call mpp_error (FATAL,'fms_io(open_ieee32_file): action should be either read or write in file'//trim(file))
   7522   end select
   7523 
   7524   call mpp_open ( unit, file, form=MPP_IEEE32, action=mpp_action, &
   7525        access=MPP_SEQUENTIAL, threading=MPP_SINGLE,    &
   7526        nohdrs=.true. )
   7527 end function open_ieee32_file

Page 302         Source Listing                  OPEN_IEEE32_FILE
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                       
                                             
 fms_io_mod_mp_open_ieee32_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTION                     Dummy  7507     CHAR                        scalar   ARG,IN           7515                              
 FILE                       Dummy  7507     CHAR                        scalar   ARG,IN           7521,7524                         
 MPP_ACTION                 Local  7510     I(4)            4           scalar                    7517,7519,7524                    
 MPP_IEEE32                 Param  7524     I(4)            4           scalar   PRIV             208,7524                          
 OPEN_IEEE32_FILE           Func   7507     I(4)            4           scalar                                                      
 TRIM                       Func   7515                                 scalar                    7515,7521                         
 UNIT                       Local  7509     I(4)            4           scalar                    7524                              

Page 303         Source Listing                  OPEN_IEEE32_FILE
2021-06-01 08:54                                 fms_io.F90

   7528 ! </FUNCTION>
   7529 
   7530 !#######################################################################
   7531 ! <FUNCTION NAME=" close_file">
   7532 !   <DESCRIPTION>
   7533 !  Closes files that are opened by: open_namelist_file, open restart_file,
   7534 ! and open_ieee32_file. Users should use mpp_close for other cases.
   7535 !   </DESCRIPTION>
   7536 !<IN NAME="unit" TYPE="integer">
   7537 ! unit number of the file to be closed
   7538 ! </IN>
   7539 !<IN NAME="status" TYPE="character, optional">
   7540 ! action to be performed: can be 'delete'
   7541 ! </IN>
   7542 
   7543 subroutine close_file (unit, status, dist)
   7544   integer,          intent(in)           :: unit
   7545   character(len=*), intent(in), optional :: status
   7546   logical,          intent(in), optional :: dist
   7547 
   7548   if (.not.module_is_initialized) call fms_io_init ( )
   7549   if(PRESENT(dist))then
   7550 ! If distributed, return if not I/O root
   7551     if(dist)then
   7552       if(.not. mpp_is_dist_ioroot(dr_set_size)) return
   7553     endif
   7554   endif
   7555 
   7556   if (unit == stdlog()) return
   7557   if (present(status)) then
   7558      if (lowercase(trim(status)) == 'delete') then
   7559         call mpp_close (unit, action=MPP_DELETE)
   7560      else
   7561         call mpp_error(FATAL,'fms_io(close_file): status should be DELETE')
   7562      endif
   7563   else
   7564      call mpp_close (unit)
   7565   endif
   7566 end subroutine close_file

Page 304         Source Listing                  CLOSE_FILE
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                 
                                       
 fms_io_mod_mp_close_file_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CLOSE_FILE                 Subr   7543                                                                                             
 DIST                       Dummy  7543     L(4)            4           scalar   ARG,IN           7549,7551                         
 MPP_DELETE                 Param  7559     I(4)            4           scalar   PRIV             208,7559                          
 MPP_IS_DIST_IOROOT         Func   7552     L(4)            4           scalar   PRIV             205,7552,7760                     
 PRESENT                    Func   7549                                 scalar                    7549,7557                         
 STATUS                     Dummy  7543     CHAR                        scalar   ARG,IN           7557,7558                         
 STDLOG                     Func   7556     I(4)            4           scalar   PRIV             218,7556,7767                     
 TRIM                       Func   7558                                 scalar                    7558                              
 UNIT                       Dummy  7543     I(4)            4           scalar   ARG,IN           7556,7559,7564                    

Page 305         Source Listing                  CLOSE_FILE
2021-06-01 08:54                                 fms_io.F90

   7567 ! </FUNCTION>
   7568 
   7569 !#######################################################################
   7570 
   7571 
   7572 ! <SUBROUTINE NAME="set_domain">
   7573 !   <DESCRIPTION>
   7574 ! set_domain is called to save the domain2d data type prior to
   7575 ! calling the distributed data I/O routines, read_data and write_data.
   7576 !   </DESCRIPTION>
   7577 ! <IN NAME="Domain2" TYPE="domain2D">
   7578 ! domain to be passed to routines in fms_io_mod, Current_domain will point to
   7579 ! this Domain2
   7580 ! </IN>
   7581 subroutine set_domain (Domain2)
   7582 
   7583   type(domain2D), intent(in), target :: Domain2
   7584   if (.NOT.module_is_initialized) call fms_io_init ( )
   7585 
   7586 !  --- set_domain must be called before a read_data or write_data ---
   7587   if (associated(Current_domain)) nullify (Current_domain)
   7588   Current_domain => Domain2
   7589 
   7590 !  --- module indexing to shorten read/write routines ---
   7591 
   7592   call mpp_get_compute_domain (Current_domain,is ,ie ,js ,je )
   7593   call mpp_get_data_domain    (Current_domain,isd,ied,jsd,jed)
   7594   call mpp_get_global_domain  (Current_domain,isg,ieg,jsg,jeg)
   7595 end subroutine set_domain

Page 306         Source Listing                  SET_DOMAIN
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                 
                                       
 fms_io_mod_mp_set_domain_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7587                                 scalar                    7587                              
 DOMAIN2                    Dummy  7581     DOMAIN2D        752         scalar   ARG,TGT,IN       7588                              
 SET_DOMAIN                 Subr   7581                                                                                             

Page 307         Source Listing                  SET_DOMAIN
2021-06-01 08:54                                 fms_io.F90

   7596 !#######################################################################
   7597 ! </SUBROUTINE>
   7598 
   7599 ! <SUBROUTINE NAME="nullify_domain">
   7600 subroutine nullify_domain ()
   7601 !   <DESCRIPTION>
   7602 ! Use to nulify domain that has been assigned by set_domain.
   7603 !   </DESCRIPTION>
   7604   if (.NOT.module_is_initialized) call fms_io_init ( )
   7605 
   7606 !  --- set_domain must be called before a read_data or write_data ---
   7607 
   7608   if (associated(Current_domain)) nullify (Current_domain)
   7609   is=0;ie=0;js=0;je=0
   7610   isd=0;ied=0;jsd=0;jed=0
   7611   isg=0;ieg=0;jsg=0;jeg=0
   7612 end subroutine nullify_domain


ENTRY POINTS

  Name                                     
                                           
 fms_io_mod_mp_nullify_domain_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7608                                 scalar                    7608                              
 NULLIFY_DOMAIN             Subr   7600                                                                                             

Page 308         Source Listing                  NULLIFY_DOMAIN
2021-06-01 08:54                                 fms_io.F90

   7613 ! </SUBROUTINE>
   7614 
   7615 ! <SUBROUTINE NAME="return_domain">
   7616 !   <DESCRIPTION>
   7617 ! This routine is the reverse of set_domain above. This routine is called when
   7618 ! users want to retrieve the domain2d that is used in fms_io_mod
   7619 !   </DESCRIPTION>
   7620 ! <OUT NAME="domain2" TYPE="domain2D">
   7621 ! domain returned from  fms_io_mod.
   7622 ! </OUT>
   7623 subroutine return_domain(domain2)
   7624   type(domain2D), intent(inout) :: domain2
   7625 
   7626   if (associated(Current_domain)) then
   7627      domain2 = Current_domain
   7628   else
   7629      domain2 = NULL_DOMAIN2D
   7630   endif
   7631 end subroutine return_domain


ENTRY POINTS

  Name                                    
                                          
 fms_io_mod_mp_return_domain_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   7626                                 scalar                    7626                              
 DOMAIN2                    Dummy  7623     DOMAIN2D        752         scalar   ARG,INOUT        7627,7629                         
 RETURN_DOMAIN              Subr   7623                                                                                             

Page 309         Source Listing                  RETURN_DOMAIN
2021-06-01 08:54                                 fms_io.F90

   7632 ! </SUBROUTINE>
   7633 
   7634 !#######################################################################
   7635 ! this will be a private routine with the next release
   7636 ! users should get the domain decomposition from the domain2d data type
   7637 
   7638 !#######################################################################
   7639 ! <SUBROUTINE NAME="get_domain_decomp">
   7640 !   <DESCRIPTION>
   7641 ! This will be a private routine with the next release.
   7642 ! Users should get the domain decomposition from the domain2d data type.
   7643 !   </DESCRIPTION>
   7644 ! <OUT NAME="x" TYPE="integer">
   7645 ! array containing beginning and ending indices of global and compute domain in x direction
   7646 ! </OUT>
   7647 ! <OUT NAME="y" TYPE="integer">
   7648 ! array containing beginning and ending indices of global and compute domain in y direction
   7649 ! </OUT>
   7650 subroutine get_domain_decomp ( x, y )
   7651 
   7652   integer, intent(out), dimension(4) :: x, y
   7653 
   7654   if (mpp_pe() == mpp_root_pe())  call mpp_error(NOTE, &
   7655        'subroutine get_domain_decomp will be removed with the next release')
   7656   x = (/ isg, ieg, is, ie /)
   7657   y = (/ jsg, jeg, js, je /)
   7658 
   7659 end subroutine get_domain_decomp

Page 310         Source Listing                  GET_DOMAIN_DECOMP
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                        
                                              
 fms_io_mod_mp_get_domain_decomp_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_DOMAIN_DECOMP          Subr   7650                                                                                             
 X                          Dummy  7650     I(4)            4     1     4        ARG,OUT          7656                              
 Y                          Dummy  7650     I(4)            4     1     4        ARG,OUT          7657                              

Page 311         Source Listing                  GET_DOMAIN_DECOMP
2021-06-01 08:54                                 fms_io.F90

   7660 ! </SUBROUTINE>
   7661 
   7662 subroutine get_axis_cart(axis, cart)
   7663 
   7664   type(axistype), intent(in) :: axis
   7665   character(len=1), intent(out) :: cart
   7666   character(len=1) :: axis_cart
   7667   character(len=16), dimension(2) :: lon_names, lat_names
   7668   character(len=16), dimension(3) :: z_names
   7669   character(len=16), dimension(2) :: t_names
   7670   character(len=16), dimension(2) :: lon_units, lat_units
   7671   character(len=8) , dimension(4) :: z_units
   7672   character(len=3) , dimension(4) :: t_units
   7673   character(len=32) :: name
   7674   integer :: i
   7675 
   7676   lon_names = (/'lon','x  '/)
   7677   lat_names = (/'lat','y  '/)
   7678   z_names = (/'depth ','height','z     '/)
   7679   t_names = (/'time','t   '/)
   7680   lon_units = (/'degrees_e   ', 'degrees_east'/)
   7681   lat_units = (/'degrees_n    ', 'degrees_north'/)
   7682   z_units = (/'cm ','m  ','pa ','hpa'/)
   7683   t_units = (/'sec', 'min','hou','day'/)
   7684   call mpp_get_atts(axis,cartesian=axis_cart)
   7685   cart = 'N'
   7686   if (axis_cart == 'x' ) cart = 'X'
   7687   if (axis_cart == 'y' ) cart = 'Y'
   7688   if (axis_cart == 'z' ) cart = 'Z'
   7689   if (axis_cart == 't' ) cart = 'T'
   7690   if (cart /= 'X' .and. cart /= 'Y' .and. cart /= 'Z' .and. cart /= 'T') then
   7691      call mpp_get_atts(axis,name=name)
   7692      name = lowercase(name)
   7693      do i=1,size(lon_names(:))
   7694         if (lowercase(name(1:3)) == trim(lon_names(i))) cart = 'X'
   7695      enddo
   7696      do i=1,size(lat_names(:))
   7697         if (name(1:3) == trim(lat_names(i))) cart = 'Y'
   7698      enddo
   7699      do i=1,size(z_names(:))
   7700         if (name == trim(z_names(i))) cart = 'Z'
   7701      enddo
   7702      do i=1,size(t_names(:))
   7703         if (name(1:3) == t_names(i)) cart = 'T'
   7704      enddo
   7705   end if
   7706 
   7707   if (cart /= 'X' .and. cart /= 'Y' .and. cart /= 'Z' .and. cart /= 'T') then
   7708      call mpp_get_atts(axis,units=name)
   7709      name = lowercase(name)
   7710      do i=1,size(lon_units(:))
   7711         if (trim(name) == trim(lon_units(i))) cart = 'X'
   7712      enddo
   7713      do i=1,size(lat_units(:))
   7714         if (trim(name) == trim(lat_units(i))) cart = 'Y'
   7715      enddo
   7716      do i=1,size(z_units(:))

Page 312         Source Listing                  GET_AXIS_CART
2021-06-01 08:54                                 fms_io.F90

   7717         if (trim(name) == trim(z_units(i))) cart = 'Z'
   7718      enddo
   7719      do i=1,size(t_units(:))
   7720         if (name(1:3) == trim(t_units(i))) cart = 'T'
   7721      enddo
   7722   end if
   7723 
   7724   return
   7725 end subroutine get_axis_cart


ENTRY POINTS

  Name                                    
                                          
 fms_io_mod_mp_get_axis_cart_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXIS                       Dummy  7662     AXISTYPE        1424        scalar   ARG,IN           7684,7691,7708                    
 AXIS_CART                  Local  7666     CHAR            1           scalar                    7684,7686,7687,7688,7689          
 CART                       Dummy  7662     CHAR            1           scalar   ARG,OUT          7685,7686,7687,7688,7689,7690,7694
                                                                                                  ,7697,7700,7703,7707,7711,7714,771
                                                                                                  7,7720                            
 GET_AXIS_CART              Subr   7662                                                           5173                              
 I                          Local  7674     I(4)            4           scalar                    7693,7694,7696,7697,7699,7700,7702
                                                                                                  ,7703,7710,7711,7713,7714,7716,771
                                                                                                  7,7719,7720                       
 LAT_NAMES                  Local  7667     CHAR            16    1     2                         7677,7696,7697                    
 LAT_UNITS                  Local  7670     CHAR            16    1     2                         7681,7713,7714                    
 LON_NAMES                  Local  7667     CHAR            16    1     2                         7676,7693,7694                    
 LON_UNITS                  Local  7670     CHAR            16    1     2                         7680,7710,7711                    
 NAME                       Local  7673     CHAR            32          scalar                    7691,7692,7694,7697,7700,7703,7708
                                                                                                  ,7709,7711,7714,7717,7720         
 SIZE                       Func   7693                                 scalar                    7693,7696,7699,7702,7710,7713,7716
                                                                                                  ,7719                             
 TRIM                       Func   7694                                 scalar                    7694,7697,7700,7711,7714,7717,7720
 T_NAMES                    Local  7669     CHAR            16    1     2                         7679,7702,7703                    
 T_UNITS                    Local  7672     CHAR            3     1     4                         7683,7719,7720                    
 Z_NAMES                    Local  7668     CHAR            16    1     3                         7678,7699,7700                    
 Z_UNITS                    Local  7671     CHAR            8     1     4                         7682,7716,7717                    

Page 313         Source Listing                  GET_AXIS_CART
2021-06-01 08:54                                 fms_io.F90

   7726 
   7727 ! The following function is here as a last resort.
   7728 ! This is copied from what was utilities_mod in order that redundant code
   7729 ! could be deleted.
   7730 
   7731 function open_file(file, form, action, access, threading, recl, dist) result(unit)
   7732 
   7733  character(len=*), intent(in) :: file
   7734  character(len=*), intent(in), optional :: form, action, access, threading
   7735  integer         , intent(in), optional :: recl
   7736  logical         , intent(in), optional :: dist  ! Distributed open?
   7737  integer  :: unit
   7738 
   7739  character(len=32) :: form_local, action_local, access_local, thread_local
   7740  character(len=32) :: action_ieee32
   7741  logical :: open, no_headers, do_ieee32
   7742  integer :: mpp_format, mpp_action, mpp_access, mpp_thread
   7743 !-----------------------------------------------------------------------
   7744 
   7745    if ( .not. module_is_initialized ) call fms_io_init ( )
   7746 
   7747    if (present(action)) then    ! must be present
   7748       action_local = action
   7749    else
   7750       call mpp_error (FATAL, 'open_file in fms_mod : argument action not present')
   7751    endif
   7752 
   7753    unit = 0  ! Initialize return value. Note that mpp_open will call mpi_abort on error
   7754    if(PRESENT(dist))then
   7755      if(lowercase(trim(action_local)) /= 'read') &
   7756        call mpp_error(FATAL,'open_file in fms_mod: distributed'//lowercase(trim(action_local))// &
   7757                               ' not currently supported')
   7758 ! If distributed, return if not I/O root
   7759      if(dist) then
   7760        if(.not. mpp_is_dist_ioroot(dr_set_size)) return
   7761      endif
   7762    endif
   7763 
   7764 !   ---- return stdlog if this is the logfile ----
   7765 
   7766     if (trim(file) == 'logfile.out') then
   7767        unit = stdlog()
   7768        return
   7769     endif
   7770 
   7771 !   ---- is this file open and connected to a unit ?? ----
   7772 
   7773    inquire (file=trim(file), opened=open, number=unit)
   7774 
   7775 !  cannot open a file that is already open
   7776 !  except for the log file
   7777 
   7778    if ( open .and. unit >= 0 ) then
   7779       call mpp_error (FATAL, 'open_file in fms_mod : '// &
   7780                        'file '//trim(file)//' is already open')
   7781    endif
   7782 

Page 314         Source Listing                  OPEN_FILE
2021-06-01 08:54                                 fms_io.F90

   7783 !  --- defaults ---
   7784 
   7785    form_local   = 'formatted';  if (present(form))      form_local   = form
   7786    access_local = 'sequential'; if (present(access))    access_local = access
   7787    thread_local = 'single';     if (present(threading)) thread_local = threading
   7788    no_headers   = .true.
   7789    do_ieee32    = .false.
   7790 
   7791 !   --- file format ---
   7792 
   7793     select case (lowercase(trim(form_local)))
   7794        case ('formatted')
   7795            mpp_format = MPP_ASCII
   7796        case ('ascii')
   7797            mpp_format = MPP_ASCII
   7798        case ('unformatted')
   7799            mpp_format = MPP_NATIVE
   7800        case ('native')
   7801            mpp_format = MPP_NATIVE
   7802        case ('ieee32')
   7803            do_ieee32 = .true.
   7804        case ('netcdf')
   7805            mpp_format = MPP_NETCDF
   7806        case default
   7807            call mpp_error (FATAL, 'open_file in fms_mod : '// &
   7808                             'invalid option for argument form')
   7809     end select
   7810 
   7811 !   --- action (read,write,append) ---
   7812 
   7813     select case (lowercase(trim(action_local)))
   7814        case ('read')
   7815            mpp_action = MPP_RDONLY
   7816        case ('write')
   7817            mpp_action = MPP_OVERWR
   7818        case ('append')
   7819            mpp_action = MPP_APPEND
   7820        case default
   7821            call mpp_error (FATAL, 'open_file in fms_mod : '// &
   7822                             'invalid option for argument action')
   7823     end select
   7824 
   7825 !   --- file access (sequential,direct) ---
   7826 
   7827     select case (lowercase(trim(access_local)))
   7828        case ('sequential')
   7829            mpp_access = MPP_SEQUENTIAL
   7830        case ('direct')
   7831            mpp_access = MPP_DIRECT
   7832        case default
   7833            call mpp_error (FATAL, 'open_file in fms_mod : '// &
   7834                             'invalid option for argument access')
   7835     end select
   7836 
   7837 !   --- threading (single,multi) ---
   7838 
   7839     select case (lowercase(trim(thread_local)))

Page 315         Source Listing                  OPEN_FILE
2021-06-01 08:54                                 fms_io.F90

   7840        case ('single')
   7841            mpp_thread = MPP_SINGLE
   7842        case ('multi')
   7843            mpp_thread = MPP_MULTI
   7844        case default
   7845            call mpp_error (FATAL, 'open_file in fms_mod : '// &
   7846                             'invalid option for argument thread')
   7847            if (trim(file) /= '_read_error.nml') no_headers = .false.
   7848     end select
   7849 
   7850 !   ---------------- open file -----------------------
   7851 
   7852     if ( .not.do_ieee32 ) then
   7853        call mpp_open ( unit, file, form=mpp_format, action=mpp_action, &
   7854                        access=mpp_access, threading=mpp_thread,        &
   7855                        fileset=MPP_SINGLE,nohdrs=no_headers, recl=recl )
   7856     else
   7857 ! special open for ieee32 file
   7858 ! pass local action flag to open changing append to write
   7859        action_ieee32 = action_local
   7860        if (lowercase(trim(action_ieee32)) == 'append') action_ieee32 = 'write'
   7861        unit = open_ieee32_file ( file, action_ieee32 )
   7862     endif
   7863 
   7864 !-----------------------------------------------------------------------
   7865 
   7866  end function open_file


ENTRY POINTS

  Name                                
                                      
 fms_io_mod_mp_open_file_             

Page 316         Source Listing                  OPEN_FILE
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACCESS                     Dummy  7731     CHAR                        scalar   ARG,IN           7786                              
 ACCESS_LOCAL               Local  7739     CHAR            32          scalar                    7786,7827                         
 ACTION                     Dummy  7731     CHAR                        scalar   ARG,IN           7747,7748                         
 ACTION_IEEE32              Local  7740     CHAR            32          scalar                    7859,7860,7861                    
 ACTION_LOCAL               Local  7739     CHAR            32          scalar                    7748,7755,7756,7813,7859          
 DIST                       Dummy  7731     L(4)            4           scalar   ARG,IN           7754,7759                         
 DO_IEEE32                  Local  7741     L(4)            4           scalar                    7789,7803,7852                    
 FILE                       Dummy  7731     CHAR                        scalar   ARG,IN           7766,7773,7780,7847,7853,7861     
 FORM                       Dummy  7731     CHAR                        scalar   ARG,IN           7785                              
 FORM_LOCAL                 Local  7739     CHAR            32          scalar                    7785,7793                         
 MPP_ACCESS                 Local  7742     I(4)            4           scalar                    7829,7831,7854                    
 MPP_ACTION                 Local  7742     I(4)            4           scalar                    7815,7817,7819,7853               
 MPP_FORMAT                 Local  7742     I(4)            4           scalar                    7795,7797,7799,7801,7805,7853     
 MPP_THREAD                 Local  7742     I(4)            4           scalar                    7841,7843,7854                    
 NO_HEADERS                 Local  7741     L(4)            4           scalar                    7788,7847,7855                    
 OPEN                       Local  7741     L(4)            4           scalar                    7773,7778                         
 OPEN_FILE                  Func   7731     I(4)            4           scalar                                                      
 OPEN_IEEE32_FILE           Func   7861     I(4)            4           scalar                    593,7861                          
 PRESENT                    Func   7747                                 scalar                    7747,7754,7785,7786,7787          
 RECL                       Dummy  7731     I(4)            4           scalar   ARG,IN           7855                              
 THREADING                  Dummy  7731     CHAR                        scalar   ARG,IN           7787                              
 THREAD_LOCAL               Local  7739     CHAR            32          scalar                    7787,7839                         
 TRIM                       Func   7755                                 scalar                    7755,7756,7766,7773,7780,7793,7813
                                                                                                  ,7827,7839,7847,7860              
 UNIT                       Local  7737     I(4)            4           scalar                    7753,7767,7773,7778,7853,7861     

Page 317         Source Listing                  OPEN_FILE
2021-06-01 08:54                                 fms_io.F90

   7867 
   7868 !#######################################################################
   7869 
   7870   function string_from_integer(n)
   7871     integer, intent(in) :: n
   7872     character(len=16) :: string_from_integer
   7873 
   7874     if (mpp_pe() == mpp_root_pe() .and. warn_string_function ) &
   7875             call mpp_error(WARNING, "The function named string has been moved "// &
   7876             "from fms_io_mod to fms_mod.  Please update your call.")
   7877     warn_string_function = .false.
   7878     if(n<0) then
   7879        call mpp_error(FATAL, 'fms_io_mod: n should be non-negative integer, contact developer')
   7880     else if( n<10 ) then
   7881        write(string_from_integer,'(i1)') n
   7882     else if( n<100 ) then
   7883        write(string_from_integer,'(i2)') n
   7884     else if( n<1000 ) then
   7885        write(string_from_integer,'(i3)') n
   7886     else if( n<10000 ) then
   7887        write(string_from_integer,'(i4)') n
   7888     else if( n<100000 ) then
   7889        write(string_from_integer,'(i5)') n
   7890     else if( n<1000000 ) then
   7891        write(string_from_integer,'(i6)') n
   7892     else if( n<10000000 ) then
   7893        write(string_from_integer,'(i7)') n
   7894     else if( n<100000000 ) then
   7895        write(string_from_integer,'(i8)') n
   7896     else
   7897        call mpp_error(FATAL, 'fms_io_mod: n is too big, contact developer')
   7898     end if
   7899 
   7900     return
   7901 
   7902   end function string_from_integer

Page 318         Source Listing                  STRING_FROM_INTEGER
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_string_from_integer_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 N                          Dummy  7870     I(4)            4           scalar   ARG,IN           7878,7880,7881,7882,7883,7884,7885
                                                                                                  ,7886,7887,7888,7889,7890,7891,789
                                                                                                  2,7893,7894,7895                  
 STRING_FROM_INTEGER        Func   7870     CHAR            16          scalar   PRIV             7881,7883,7885,7887,7889,7891,7893
                                                                                                  ,7895,7986,8024                   
 WARN_STRING_FUNCTION       Local  7874     L(4)            4           scalar   PRIV             270,7874,7877,7908,7911           

Page 319         Source Listing                  STRING_FROM_INTEGER
2021-06-01 08:54                                 fms_io.F90

   7903 
   7904 !#######################################################################
   7905   function string_from_real(a)
   7906     real, intent(in) :: a
   7907     character(len=32) :: string_from_real
   7908     if (mpp_pe() == mpp_root_pe() .and. warn_string_function ) &
   7909             call mpp_error(WARNING, "The function named string has been moved "// &
   7910             "from fms_io_mod to fms_mod.  Please update your call.")
   7911     warn_string_function = .false.
   7912 
   7913     write(string_from_real,*) a
   7914 
   7915     return
   7916 
   7917   end function string_from_real


ENTRY POINTS

  Name                                       
                                             
 fms_io_mod_mp_string_from_real_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Dummy  7905     R(8)            8           scalar   ARG,IN           7913                              
 STRING_FROM_REAL           Func   7905     CHAR            32          scalar   PRIV             7913                              

Page 320         Source Listing                  STRING_FROM_REAL
2021-06-01 08:54                                 fms_io.F90

   7918 
   7919 !#######################################################################
   7920 
   7921  subroutine get_tile_string(str_out, str_in, tile, str2_in)
   7922     character(len=*), intent(inout)        :: str_out
   7923     character(len=*), intent(in)           :: str_in
   7924     integer,          intent(in)           :: tile
   7925     character(len=*), intent(in), optional :: str2_in
   7926 
   7927     if(tile > 0 .AND. tile <= 9) then
   7928        write(str_out,'(a,i1)') trim(str_in), tile
   7929     else if(tile >= 10 .AND. tile <= 99) then
   7930        write(str_out,'(a,i2)') trim(str_in), tile
   7931     else
   7932        call mpp_error(FATAL, "FMS_IO: get_tile_string: tile must be a positive number less than 100")
   7933     end if
   7934 
   7935     if(present(str2_in)) str_out=trim(str_out)//trim(str2_in)
   7936 
   7937  end subroutine get_tile_string


ENTRY POINTS

  Name                                      
                                            
 fms_io_mod_mp_get_tile_string_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_TILE_STRING            Subr   7921                                                                                             
 PRESENT                    Func   7935                                 scalar                    7935                              
 STR2_IN                    Dummy  7921     CHAR                        scalar   ARG,IN           7935                              
 STR_IN                     Dummy  7921     CHAR                        scalar   ARG,IN           7928,7930                         
 STR_OUT                    Dummy  7921     CHAR                        scalar   ARG,INOUT        7928,7930,7935                    
 TILE                       Dummy  7921     I(4)            4           scalar   ARG,IN           7927,7928,7929,7930               
 TRIM                       Func   7928                                 scalar                    7928,7930,7935                    

Page 321         Source Listing                  GET_TILE_STRING
2021-06-01 08:54                                 fms_io.F90

   7938 
   7939 
   7940 !#####################################################################
   7941   subroutine get_mosaic_tile_file_sg(file_in, file_out, is_no_domain, domain, tile_count)
   7942     character(len=*), intent(in)                   :: file_in
   7943     character(len=*), intent(out)                  :: file_out
   7944     logical,          intent(in)                   :: is_no_domain
   7945     type(domain2D),   intent(in), optional, target :: domain
   7946     integer,          intent(in), optional         :: tile_count
   7947     character(len=256)                             :: basefile, tilename
   7948     integer                                        :: lens, ntiles, ntileMe, tile, my_tile_id
   7949     integer, dimension(:), allocatable             :: tile_id
   7950     type(domain2d), pointer, save                  :: d_ptr =>NULL()
   7951     logical                                        :: domain_exist
   7952 
   7953     if(index(file_in, '.nc', back=.true.)==0) then
   7954        basefile = trim(file_in)
   7955     else
   7956        lens = len_trim(file_in)
   7957        if(file_in(lens-2:lens) .NE. '.nc') call mpp_error(FATAL, &
   7958             'fms_io_mod: .nc should be at the end of file '//trim(file_in))
   7959        basefile = file_in(1:lens-3)
   7960     end if
   7961 
   7962 !--- get the tile name
   7963     ntiles = 1
   7964     my_tile_id = 1
   7965     domain_exist = .false.
   7966     if(PRESENT(domain))then
   7967        domain_exist = .true.
   7968        ntiles = mpp_get_ntile_count(domain)
   7969        d_ptr => domain
   7970     elseif (ASSOCIATED(Current_domain) .AND. .NOT. is_no_domain ) then
   7971        domain_exist = .true.
   7972        ntiles = mpp_get_ntile_count(Current_domain)
   7973        d_ptr => Current_domain
   7974     endif
   7975 
   7976     if(domain_exist) then
   7977        ntileMe = mpp_get_current_ntile(d_ptr)
   7978        allocate(tile_id(ntileMe))
   7979        tile_id = mpp_get_tile_id(d_ptr)
   7980        tile = 1
   7981        if(present(tile_count)) tile = tile_count
   7982        my_tile_id = tile_id(tile)
   7983     endif
   7984 
   7985     if(ntiles > 1 .or. my_tile_id > 1 )then
   7986        tilename = 'tile'//string(my_tile_id)
   7987        if(index(basefile,'.'//trim(tilename),back=.true.) == 0)then
   7988           basefile = trim(basefile)//'.'//trim(tilename);
   7989        end if
   7990     end if
   7991     if(allocated(tile_id)) deallocate(tile_id)
   7992 
   7993     file_out = trim(basefile)//'.nc'
   7994 

Page 322         Source Listing                  GET_MOSAIC_TILE_FILE_SG
2021-06-01 08:54                                 fms_io.F90

   7995     d_ptr =>NULL()
   7996 
   7997   end subroutine get_mosaic_tile_file_sg


ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_get_mosaic_tile_file_sg_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   7991                                 scalar                    7991                              
 ASSOCIATED                 Func   7970                                 scalar                    7970                              
 BASEFILE                   Local  7947     CHAR            256         scalar                    7954,7959,7987,7988,7993          
 DOMAIN                     Dummy  7941     DOMAIN2D        752         scalar   ARG,TGT,IN       7966,7968,7969                    
 DOMAIN_EXIST               Local  7951     L(4)            4           scalar                    7965,7967,7971,7976               
 D_PTR                      Local  7950     DOMAIN2D        752         scalar   PTR,SAVE         7950,7969,7973,7977,7979,7995     
 FILE_IN                    Dummy  7941     CHAR                        scalar   ARG,IN           7953,7954,7956,7957,7958,7959     
 FILE_OUT                   Dummy  7941     CHAR                        scalar   ARG,OUT          7993                              
 GET_MOSAIC_TILE_FILE_SG    Subr   7941                                          PRIV             1192,4581,8174,8220               
 INDEX                      Func   7953                                 scalar                    7953,7987                         
 IS_NO_DOMAIN               Dummy  7941     L(4)            4           scalar   ARG,IN           7970                              
 LENS                       Local  7948     I(4)            4           scalar                    7956,7957,7959                    
 LEN_TRIM                   Func   7956                                 scalar                    7956                              
 MPP_GET_CURRENT_NTILE      Func   7977     I(4)            4           scalar   PRIV             215,7977,8046                     
 MPP_GET_NTILE_COUNT        Func   7968     I(4)            4           scalar   PRIV             215,7968,7972                     
 MY_TILE_ID                 Local  7948     I(4)            4           scalar                    7964,7982,7985,7986               
 NTILEME                    Local  7948     I(4)            4           scalar                    7977,7978                         
 NTILES                     Local  7948     I(4)            4           scalar                    7963,7968,7972,7985               
 PRESENT                    Func   7966                                 scalar                    7966,7981                         
 STRING                     Local  7986                                 scalar                    596,7986,8024                     
 TILE                       Local  7948     I(4)            4           scalar                    7980,7981,7982                    
 TILENAME                   Local  7947     CHAR            256         scalar                    7986,7987,7988                    
 TILE_COUNT                 Dummy  7941     I(4)            4           scalar   ARG,IN           7981                              
 TILE_ID                    Local  7949     I(4)            4     1     1        ALC              7978,7979,7982,7991               
 TRIM                       Func   7954                                 scalar                    7954,7958,7987,7988,7993          

Page 323         Source Listing                  GET_MOSAIC_TILE_FILE_SG
2021-06-01 08:54                                 fms_io.F90

   7998 
   7999   subroutine get_mosaic_tile_file_ug(file_in, file_out, domain)
   8000     character(len=*), intent(in)                   :: file_in
   8001     character(len=*), intent(out)                  :: file_out
   8002     type(domainUG),   intent(in), optional         :: domain
   8003     character(len=256)                             :: basefile, tilename
   8004     integer                                        :: lens, ntiles, my_tile_id
   8005 
   8006     if(index(file_in, '.nc', back=.true.)==0) then
   8007        basefile = trim(file_in)
   8008     else
   8009        lens = len_trim(file_in)
   8010        if(file_in(lens-2:lens) .NE. '.nc') call mpp_error(FATAL, &
   8011             'fms_io_mod: .nc should be at the end of file '//trim(file_in))
   8012        basefile = file_in(1:lens-3)
   8013     end if
   8014 
   8015 !--- get the tile name
   8016     ntiles = 1
   8017     my_tile_id = 1
   8018     if(PRESENT(domain))then
   8019        ntiles = mpp_get_UG_domain_ntiles(domain)
   8020        my_tile_id = mpp_get_UG_domain_tile_id(domain)
   8021     endif
   8022 
   8023     if(ntiles > 1 .or. my_tile_id > 1 )then
   8024        tilename = 'tile'//string(my_tile_id)
   8025        if(index(basefile,'.'//trim(tilename),back=.true.) == 0)then
   8026           basefile = trim(basefile)//'.'//trim(tilename);
   8027        end if
   8028     end if
   8029 
   8030     file_out = trim(basefile)//'.nc'
   8031 
   8032   end subroutine get_mosaic_tile_file_ug

Page 324         Source Listing                  GET_MOSAIC_TILE_FILE_UG
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                              
                                                    
 fms_io_mod_mp_get_mosaic_tile_file_ug_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BASEFILE                   Local  8003     CHAR            256         scalar                    8007,8012,8025,8026,8030          
 DOMAIN                     Dummy  7999     DOMAINUG        544         scalar   ARG,IN           8018,8019,8020                    
 FILE_IN                    Dummy  7999     CHAR                        scalar   ARG,IN           8006,8007,8009,8010,8011,8012     
 FILE_OUT                   Dummy  7999     CHAR                        scalar   ARG,OUT          8030                              
 GET_MOSAIC_TILE_FILE_UG    Subr   7999                                                           597,8862,9080,9279,9468,11909,1195
                                                                                                  9                                 
 INDEX                      Func   8006                                 scalar                    8006,8025                         
 LENS                       Local  8004     I(4)            4           scalar                    8009,8010,8012                    
 LEN_TRIM                   Func   8009                                 scalar                    8009                              
 MPP_GET_UG_DOMAIN_NTILES   Func   8019     I(4)            4           scalar   PRIV             217,8019                          
 MPP_GET_UG_DOMAIN_TILE_ID  Func   8020     I(4)            4           scalar   PRIV             217,8020,11924,11973              
 MY_TILE_ID                 Local  8004     I(4)            4           scalar                    8017,8020,8023,8024               
 NTILES                     Local  8004     I(4)            4           scalar                    8016,8019,8023                    
 PRESENT                    Func   8018                                 scalar                    8018                              
 TILENAME                   Local  8003     CHAR            256         scalar                    8024,8025,8026                    
 TRIM                       Func   8007                                 scalar                    8007,8011,8025,8026,8030          

Page 325         Source Listing                  GET_MOSAIC_TILE_FILE_UG
2021-06-01 08:54                                 fms_io.F90

   8033 
   8034 
   8035 !#############################################################################
   8036   subroutine get_mosaic_tile_grid(grid_file, mosaic_file, domain, tile_count)
   8037     character(len=*), intent(out)          :: grid_file
   8038     character(len=*), intent(in)           :: mosaic_file
   8039     type(domain2D),   intent(in)           :: domain
   8040     integer,          intent(in), optional :: tile_count
   8041     integer                                :: tile, ntileMe
   8042     integer, dimension(:), allocatable     :: tile_id
   8043 
   8044     tile = 1
   8045     if(present(tile_count)) tile = tile_count
   8046     ntileMe = mpp_get_current_ntile(domain)
   8047     allocate(tile_id(ntileMe))
   8048     tile_id = mpp_get_tile_id(domain)
   8049     call read_data(mosaic_file, "gridfiles", grid_file, level=tile_id(tile) )
   8050     grid_file = 'INPUT/'//trim(grid_file)
   8051     deallocate(tile_id)
   8052 
   8053   end subroutine get_mosaic_tile_grid


ENTRY POINTS

  Name                                           
                                                 
 fms_io_mod_mp_get_mosaic_tile_grid_             

Page 326         Source Listing                  GET_MOSAIC_TILE_GRID
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOMAIN                     Dummy  8036     DOMAIN2D        752         scalar   ARG,IN           8046,8048                         
 GET_MOSAIC_TILE_GRID       Subr   8036                                                                                             
 GRID_FILE                  Dummy  8036     CHAR                        scalar   ARG,OUT          8049,8050                         
 MOSAIC_FILE                Dummy  8036     CHAR                        scalar   ARG,IN           8049                              
 NTILEME                    Local  8041     I(4)            4           scalar                    8046,8047                         
 PRESENT                    Func   8045                                 scalar                    8045                              
 TILE                       Local  8041     I(4)            4           scalar                    8044,8045,8049                    
 TILE_COUNT                 Dummy  8036     I(4)            4           scalar   ARG,IN           8045                              
 TILE_ID                    Local  8042     I(4)            4     1     1        ALC              8047,8048,8049,8051               
 TRIM                       Func   8050                                 scalar                    8050                              

Page 327         Source Listing                  GET_MOSAIC_TILE_GRID
2021-06-01 08:54                                 fms_io.F90

   8054 
   8055   subroutine get_var_att_value_text(file, varname, attname, attvalue)
   8056     character(len=*), intent(in)    :: file
   8057     character(len=*), intent(in)    :: varname
   8058     character(len=*), intent(in)    :: attname
   8059     character(len=*), intent(inout) :: attvalue
   8060     integer                         :: unit
   8061 
   8062     call mpp_open(unit,trim(file),MPP_RDONLY,MPP_NETCDF,threading=MPP_MULTI,fileset=MPP_SINGLE)
   8063     call mpp_get_att_value(unit, varname, attname, attvalue)
   8064     call mpp_close(unit)
   8065 
   8066     return
   8067 
   8068   end subroutine get_var_att_value_text


ENTRY POINTS

  Name                                             
                                                   
 fms_io_mod_mp_get_var_att_value_text_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATTNAME                    Dummy  8055     CHAR                        scalar   ARG,IN           8063                              
 ATTVALUE                   Dummy  8055     CHAR                        scalar   ARG,INOUT        8063                              
 FILE                       Dummy  8055     CHAR                        scalar   ARG,IN           8062                              
 GET_VAR_ATT_VALUE_TEXT     Subr   8055                                          PRIV                                               
 MPP_GET_ATT_VALUE          Local  8063                                 scalar   PRIV             209,8063                          
 MPP_GET_FIELD_ATT_TEXT     Subr   8063                                          PRIV             8063                              
 TRIM                       Func   8062                                 scalar                    8062                              
 UNIT                       Local  8060     I(4)            4           scalar                    8062,8063,8064                    
 VARNAME                    Dummy  8055     CHAR                        scalar   ARG,IN           8063                              

Page 328         Source Listing                  GET_VAR_ATT_VALUE_TEXT
2021-06-01 08:54                                 fms_io.F90

   8069 
   8070 !#############################################################################
   8071 ! return false if the attribute is not found in the file.
   8072   function get_global_att_value_text(file, att, attvalue)
   8073     character(len=*), intent(in)    :: file
   8074     character(len=*), intent(in)    :: att
   8075     character(len=*), intent(inout) :: attvalue
   8076     logical                         :: get_global_att_value_text
   8077     integer                         :: unit, ndim, nvar, natt, ntime, i
   8078     type(atttype), allocatable      :: global_atts(:)
   8079 
   8080     get_global_att_value_text = .false.
   8081     call mpp_open(unit,trim(file),MPP_RDONLY,MPP_NETCDF,threading=MPP_MULTI,fileset=MPP_SINGLE)
   8082     call mpp_get_info(unit, ndim, nvar, natt, ntime)
   8083     allocate(global_atts(natt))
   8084     call mpp_get_atts(unit,global_atts)
   8085     do i=1,natt
   8086        if( trim(mpp_get_att_name(global_atts(i))) == trim(att) ) then
   8087           attvalue = trim(mpp_get_att_char(global_atts(i)))
   8088           get_global_att_value_text = .true.
   8089           exit
   8090        end if
   8091     end do
   8092     deallocate(global_atts)
   8093 
   8094     return
   8095 
   8096   end function get_global_att_value_text

Page 329         Source Listing                  GET_GLOBAL_ATT_VALUE_TEXT
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                
                                                      
 fms_io_mod_mp_get_global_att_value_text_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATT                        Dummy  8072     CHAR                        scalar   ARG,IN           8086                              
 ATTTYPE                    Type   8078                                 scalar                    206,8078,8106                     
 ATTVALUE                   Dummy  8072     CHAR                        scalar   ARG,INOUT        8087                              
 FILE                       Dummy  8072     CHAR                        scalar   ARG,IN           8081                              
 GET_GLOBAL_ATT_VALUE_TEXT  Func   8072     L(4)            4           scalar   PRIV             825,8080,8088                     
 GLOBAL_ATTS                Local  8078     RECORD          1488  1     1        ALC              8083,8084,8086,8087,8092          
 I                          Local  8077     I(4)            4           scalar                    8085,8086,8087                    
 MPP_GET_ATT_CHAR           Func   8087     CHAR                        scalar   PRIV             204,8087                          
 MPP_GET_ATT_NAME           Func   8086     CHAR            128         scalar   PRIV             204,8086,8114                     
 MPP_GET_GLOBAL_ATTS        Subr   8084                                          PRIV             8084,8112                         
 NATT                       Local  8077     I(4)            4           scalar                    8082,8083,8085                    
 NDIM                       Local  8077     I(4)            4           scalar                    8082                              
 NTIME                      Local  8077     I(4)            4           scalar                    8082                              
 NVAR                       Local  8077     I(4)            4           scalar                    8082                              
 TRIM                       Func   8081                                 scalar                    8081,8086,8087                    
 UNIT                       Local  8077     I(4)            4           scalar                    8081,8082,8084                    

Page 330         Source Listing                  GET_GLOBAL_ATT_VALUE_TEXT
2021-06-01 08:54                                 fms_io.F90

   8097 
   8098 !#############################################################################
   8099 ! return false if the attribute is not found in the file.
   8100   function get_global_att_value_real(file, att, attvalue)
   8101     character(len=*), intent(in)    :: file
   8102     character(len=*), intent(in)    :: att
   8103     real,             intent(inout) :: attvalue
   8104     logical                         :: get_global_att_value_real
   8105     integer                         :: unit, ndim, nvar, natt, ntime, i
   8106     type(atttype), allocatable      :: global_atts(:)
   8107 
   8108     get_global_att_value_real = .false.
   8109     call mpp_open(unit,trim(file),MPP_RDONLY,MPP_NETCDF,threading=MPP_MULTI,fileset=MPP_SINGLE)
   8110     call mpp_get_info(unit, ndim, nvar, natt, ntime)
   8111     allocate(global_atts(natt))
   8112     call mpp_get_atts(unit,global_atts)
   8113     do i=1,natt
   8114        if( trim(mpp_get_att_name(global_atts(i))) == trim(att) ) then
   8115           attvalue = mpp_get_att_real_scalar(global_atts(i))
   8116           get_global_att_value_real = .true.
   8117           exit
   8118        end if
   8119     end do
   8120     deallocate(global_atts)
   8121 
   8122     return
   8123 
   8124   end function get_global_att_value_real

Page 331         Source Listing                  GET_GLOBAL_ATT_VALUE_REAL
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                                
                                                      
 fms_io_mod_mp_get_global_att_value_real_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ATT                        Dummy  8100     CHAR                        scalar   ARG,IN           8114                              
 ATTVALUE                   Dummy  8100     R(8)            8           scalar   ARG,INOUT        8115                              
 FILE                       Dummy  8100     CHAR                        scalar   ARG,IN           8109                              
 GET_GLOBAL_ATT_VALUE_REAL  Func   8100     L(4)            4           scalar   PRIV             8108,8116                         
 GLOBAL_ATTS                Local  8106     RECORD          1488  1     1        ALC              8111,8112,8114,8115,8120          
 I                          Local  8105     I(4)            4           scalar                    8113,8114,8115                    
 MPP_GET_ATT_REAL_SCALAR    Func   8115     R(8)            8           scalar   PRIV             205,8115                          
 NATT                       Local  8105     I(4)            4           scalar                    8110,8111,8113                    
 NDIM                       Local  8105     I(4)            4           scalar                    8110                              
 NTIME                      Local  8105     I(4)            4           scalar                    8110                              
 NVAR                       Local  8105     I(4)            4           scalar                    8110                              
 TRIM                       Func   8109                                 scalar                    8109,8114                         
 UNIT                       Local  8105     I(4)            4           scalar                    8109,8110,8112                    

Page 332         Source Listing                  GET_GLOBAL_ATT_VALUE_REAL
2021-06-01 08:54                                 fms_io.F90

   8125 
   8126 !#############################################################################
   8127 ! This routine will get the actual file name, as well as if read_dist is true or false.
   8128 ! return true if such file exist and return false if not.
   8129   function get_file_name(orig_file, actual_file, read_dist, io_domain_exist, no_domain, domain, &
   8130                            tile_count)
   8131     character(len=*),                 intent(in) :: orig_file
   8132     character(len=*),                intent(out) :: actual_file
   8133     logical,                         intent(out) :: read_dist
   8134     logical,                         intent(out) :: io_domain_exist
   8135     logical,                optional, intent(in) :: no_domain
   8136     type(domain2D), target, optional, intent(in) :: domain
   8137     integer,                optional, intent(in) :: tile_count
   8138     logical                                      :: get_file_name
   8139 
   8140     type(domain2d), pointer, save :: d_ptr, io_domain
   8141     logical                       :: fexist, is_no_domain
   8142     integer                       :: tile_id(1)
   8143     character(len=256)            :: fname
   8144     character(len=512)            :: actual_file_tmp
   8145 
   8146     is_no_domain=.false.
   8147     if(PRESENT(no_domain)) is_no_domain = no_domain
   8148 
   8149 
   8150     fexist          = .false.
   8151     read_dist       = .false.
   8152     get_file_name   = .false.
   8153     io_domain_exist = .false.
   8154 
   8155 !--- The file maybe not netcdf file, we just check the original file.
   8156     if(index(orig_file, '.nc', back=.true.) == 0) then
   8157        inquire (file=trim(orig_file), exist=fexist)
   8158        if(fexist) then
   8159           actual_file = orig_file
   8160           get_file_name = .true.
   8161           return
   8162        endif
   8163     endif
   8164 
   8165     if(present(domain)) then
   8166        d_ptr => domain
   8167     elseif (ASSOCIATED(Current_domain) .AND. .NOT. is_no_domain ) then
   8168        d_ptr => Current_domain
   8169     endif
   8170 
   8171 
   8172 !JWD:  This is likely a temporary fix. Since fms_io needs to know tile_count,
   8173 !JWD:  I just don't see how the physics can remain "tile neutral"
   8174     call get_mosaic_tile_file(orig_file, actual_file, is_no_domain, domain, tile_count)
   8175 
   8176 !--- check if the file is group redistribution.
   8177     if(ASSOCIATED(d_ptr)) then
   8178        io_domain => mpp_get_io_domain(d_ptr)
   8179        if(associated(io_domain)) then
   8180           tile_id = mpp_get_tile_id(io_domain)
   8181           write(fname, '(a,i4.4)' ) trim(actual_file)//'.', tile_id(1)

Page 333         Source Listing                  GET_FILE_NAME
2021-06-01 08:54                                 fms_io.F90

   8182           inquire (file=trim(fname), exist=fexist)
   8183           if(.not. fexist) then
   8184              write(fname, '(a,i6.6)' ) trim(actual_file)//'.', tile_id(1)
   8185              inquire (file=trim(fname), exist=fexist)
   8186           endif
   8187           if(fexist) io_domain_exist = .true.
   8188        endif
   8189        io_domain=>NULL()
   8190     endif
   8191 
   8192     if(fexist) then
   8193        read_dist = .true.
   8194        d_ptr => NULL()
   8195        get_file_name = .true.
   8196        return
   8197     endif
   8198 
   8199     inquire (file=trim(actual_file), exist=fexist)
   8200     if(fexist) then
   8201        d_ptr => NULL()
   8202        get_file_name = .true.
   8203        return
   8204     endif
   8205 
   8206 !Perhaps the file has an ensemble instance appendix
   8207     if(len_trim(filename_appendix) > 0) then
   8208        call get_instance_filename(orig_file, actual_file)
   8209        if(index(orig_file, '.nc', back=.true.) == 0) then
   8210           inquire (file=trim(actual_file), exist=fexist)
   8211           if(fexist) then
   8212              d_ptr => NULL()
   8213              get_file_name = .true.
   8214              return
   8215           endif
   8216        endif
   8217 
   8218 ! Set actual_file to tmp for passing to get_mosaic_tile_file
   8219        actual_file_tmp = actual_file
   8220        call get_mosaic_tile_file(actual_file_tmp, actual_file, is_no_domain, domain, tile_count)
   8221 
   8222 !--- check if the file is group redistribution.
   8223        if(ASSOCIATED(d_ptr)) then
   8224           io_domain => mpp_get_io_domain(d_ptr)
   8225           if(associated(io_domain)) then
   8226              tile_id = mpp_get_tile_id(io_domain)
   8227              if(mpp_npes()>10000) then
   8228                 write(fname, '(a,i6.6)' ) trim(actual_file)//'.', tile_id(1)
   8229              else
   8230                 write(fname, '(a,i4.4)' ) trim(actual_file)//'.', tile_id(1)
   8231              endif
   8232              inquire (file=trim(fname), exist=fexist)
   8233              if(fexist) io_domain_exist = .true.
   8234           endif
   8235           io_domain=>NULL()
   8236        endif
   8237 
   8238        if(fexist) then

Page 334         Source Listing                  GET_FILE_NAME
2021-06-01 08:54                                 fms_io.F90

   8239           read_dist = .true.
   8240           d_ptr => NULL()
   8241           get_file_name = .true.
   8242           return
   8243        endif
   8244 
   8245        inquire (file=trim(actual_file), exist=fexist)
   8246 
   8247        if(fexist) then
   8248           d_ptr => NULL()
   8249           get_file_name = .true.
   8250           return
   8251        endif
   8252     endif
   8253 
   8254   end function get_file_name


ENTRY POINTS

  Name                                    
                                          
 fms_io_mod_mp_get_file_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTUAL_FILE                Dummy  8129     CHAR                        scalar   ARG,OUT          8159,8174,8181,8184,8199,8208,8210
                                                                                                  ,8219,8220,8228,8230,8245         
 ACTUAL_FILE_TMP            Local  8144     CHAR            512         scalar                    8219,8220                         
 ASSOCIATED                 Func   8167                                 scalar                    8167,8177,8179,8223,8225          
 DOMAIN                     Dummy  8129     DOMAIN2D        752         scalar   ARG,TGT,IN       8165,8166,8174,8220               
 D_PTR                      Local  8140     DOMAIN2D        752         scalar   PTR,SAVE         8166,8168,8177,8178,8194,8201,8212
                                                                                                  ,8223,8224,8240,8248              
 FEXIST                     Local  8141     L(4)            4           scalar                    8150,8157,8158,8182,8183,8185,8187
                                                                                                  ,8192,8199,8200,8210,8211,8232,823
                                                                                                  3,8238,8245,8247                  
 FNAME                      Local  8143     CHAR            256         scalar                    8181,8182,8184,8185,8228,8230,8232
 GET_FILE_NAME              Func   8129     L(4)            4           scalar                                                      
 GET_INSTANCE_FILENAME      Subr   8208                                                           607,8208,11946                    
 INDEX                      Func   8156                                 scalar                    8156,8209                         
 IO_DOMAIN                  Local  8140     DOMAIN2D        752         scalar   PTR,SAVE         8178,8179,8180,8189,8224,8225,8226
                                                                                                  ,8235                             
 IO_DOMAIN_EXIST            Dummy  8129     L(4)            4           scalar   ARG,OUT          8153,8187,8233                    
 IS_NO_DOMAIN               Local  8141     L(4)            4           scalar                    8146,8147,8167,8174,8220          
 LEN_TRIM                   Func   8207                                 scalar                    8207                              
 MPP_NPES                   Func   8227     I(4)            4           scalar   PRIV             218,8227,8614,8699,8700           
 NO_DOMAIN                  Dummy  8129     L(4)            4           scalar   ARG,IN           8147                              
 ORIG_FILE                  Dummy  8129     CHAR                        scalar   ARG,IN           8156,8157,8159,8174,8208,8209     
 PRESENT                    Func   8147                                 scalar                    8147,8165                         
 READ_DIST                  Dummy  8129     L(4)            4           scalar   ARG,OUT          8151,8193,8239                    
 TILE_COUNT                 Dummy  8130     I(4)            4           scalar   ARG,IN           8174,8220                         
 TILE_ID                    Local  8142     I(4)            4     1     1                         8180,8181,8184,8226,8228,8230     
 TRIM                       Func   8157                                 scalar                    8157,8181,8182,8184,8185,8199,8210
                                                                                                  ,8228,8230,8232,8245              

Page 335         Source Listing                  GET_FILE_NAME
2021-06-01 08:54                                 fms_io.F90

   8255 
   8256 
   8257 !#############################################################################
   8258   subroutine get_file_unit(filename, unit, index_file, read_dist, io_domain_exist, domain )
   8259     character(len=*),         intent(in) :: filename
   8260     integer,                 intent(out) :: unit, index_file
   8261     logical,                  intent(in) :: read_dist, io_domain_exist
   8262     type(domain2d), optional, intent(in) :: domain
   8263 
   8264     logical  :: file_opened
   8265     integer  :: i
   8266 
   8267 ! Need to check if filename has been opened or not
   8268     file_opened=.false.
   8269     do i=1,num_files_r
   8270        if (files_read(i)%name == trim(filename))  then
   8271           index_file = i
   8272           unit = files_read(index_file)%unit
   8273           return
   8274        endif
   8275     enddo
   8276 
   8277 ! need to open the file now
   8278 ! Increase num_files_r and set file_type
   8279     if(num_files_r == max_files_r) &  ! need to have bigger max_files_r
   8280          call mpp_error(FATAL,'fms_io(get_file_unit): max_files_r exceeded, increase it via fms_io_nml')
   8281     num_files_r=num_files_r + 1
   8282     if(read_dist) then
   8283        if(io_domain_exist) then
   8284           if(present(domain)) then
   8285              call mpp_open(unit,filename,form=form,action=MPP_RDONLY,threading=MPP_MULTI, &
   8286                 fileset=MPP_MULTI, domain=domain)
   8287           else if(ASSOCIATED(current_domain) ) then
   8288              call mpp_open(unit,filename,form=form,action=MPP_RDONLY,threading=MPP_MULTI, &
   8289                 fileset=MPP_MULTI, domain=current_domain)
   8290           else
   8291              call mpp_error(FATAL,'fms_io(get_file_unit): when io_domain_exsit = .true., '// &
   8292                    'either domain is present or current_domain is associated')
   8293           endif
   8294        else
   8295           call mpp_open(unit,trim(filename),form=form,action=MPP_RDONLY,threading=MPP_MULTI, &
   8296             fileset=MPP_MULTI)
   8297        endif
   8298     else
   8299        call mpp_open(unit,trim(filename),form=form,action=MPP_RDONLY,threading=MPP_MULTI, &
   8300             fileset=MPP_SINGLE)
   8301     end if
   8302     files_read(num_files_r)%name = trim(filename)
   8303     allocate(files_read(num_files_r)%var (max_fields) )
   8304     files_read(num_files_r)%nvar = 0
   8305     index_file = num_files_r
   8306     files_read(index_file)%unit = unit
   8307 
   8308   end subroutine get_file_unit

Page 336         Source Listing                  GET_FILE_UNIT
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                    
                                          
 fms_io_mod_mp_get_file_unit_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ASSOCIATED                 Func   8287                                 scalar                    8287                              
 DOMAIN                     Dummy  8258     DOMAIN2D        752         scalar   ARG,IN           8284,8286                         
 FILENAME                   Dummy  8258     CHAR                        scalar   ARG,IN           8270,8285,8288,8295,8299,8302     
 FILE_OPENED                Local  8264     L(4)            4           scalar                    8268                              
 GET_FILE_UNIT              Subr   8258                                                           4935,4942,4984,4988,5034,5041,5343
                                                                                                  ,5490,5533,5660,5708,5751,8505,851
                                                                                                  9                                 
 I                          Local  8265     I(4)            4           scalar                    8269,8270,8271                    
 INDEX_FILE                 Dummy  8258     I(4)            4           scalar   ARG,OUT          8271,8272,8305,8306               
 IO_DOMAIN_EXIST            Dummy  8258     L(4)            4           scalar   ARG,IN           8283                              
 PRESENT                    Func   8284                                 scalar                    8284                              
 READ_DIST                  Dummy  8258     L(4)            4           scalar   ARG,IN           8282                              
 TRIM                       Func   8270                                 scalar                    8270,8295,8299,8302               
 UNIT                       Dummy  8258     I(4)            4           scalar   ARG,OUT          8272,8285,8288,8295,8299,8306     

Page 337         Source Listing                  GET_FILE_UNIT
2021-06-01 08:54                                 fms_io.F90

   8309 
   8310 !#############################################################################
   8311   subroutine get_field_id(unit, index_file, fieldname, index_field, is_no_domain, is_not_dim)
   8312     integer,          intent(in) :: unit
   8313     integer,          intent(in) :: index_file
   8314     character(len=*), intent(in) :: fieldname
   8315     integer,         intent(out) :: index_field
   8316     logical,          intent(in) :: is_no_domain
   8317     logical,          intent(in) :: is_not_dim
   8318 
   8319     character(len=128)                     :: name
   8320     type(axistype),  dimension(max_axes)   :: axes
   8321     type(fieldtype), dimension(max_fields) :: fields
   8322     integer                                :: i, j, ndim, nvar, natt, var_dim
   8323     integer                                :: siz_in(4)
   8324 
   8325     index_field = -1
   8326     do j = 1, files_read(index_file)%nvar
   8327        if (trim(files_read(index_file)%var(j)%name) == trim(fieldname)) then
   8328           index_field = j
   8329           return
   8330        endif
   8331     enddo
   8332 
   8333 !--- fieldname is not read, so need to get fieldname from file
   8334     files_read(index_file)%nvar = files_read(index_file)%nvar + 1
   8335     if(files_read(index_file)%nvar > max_fields) then
   8336        write(error_msg,'(I3,"/",I3)') files_read(index_file)%nvar, max_fields
   8337        call  mpp_error(FATAL,'fms_io(get_field_id): max_fields exceeded, needs increasing, nvar/max_fields=' &
   8338             //trim(error_msg))
   8339     endif
   8340     call mpp_get_info(unit, ndim, nvar, natt, files_read(index_file)%max_ntime)
   8341     if(files_read(index_file)%max_ntime < 1)  files_read(index_file)%max_ntime = 1
   8342     if(nvar > max_fields) then
   8343        write(error_msg,'(I3,"/",I3)') files_read(index_file)%nvar,max_fields
   8344        call mpp_error(FATAL,'fms_io(get_field_id): max_fields too small needs increasing,nvar/max_fields=' &
   8345             //trim(error_msg)//'in file'//trim(files_read(index_file)%name))
   8346     endif
   8347     call mpp_get_fields(unit, fields(1:nvar))
   8348     siz_in = 1
   8349     index_field = files_read(index_file)%nvar
   8350     files_read(index_file)%var(index_field)%is_dimvar = .false.
   8351 
   8352     do i=1, nvar
   8353        call mpp_get_atts(fields(i),name=name,ndim=var_dim,siz=siz_in)
   8354        if(var_dim .GT. 4) call mpp_error(FATAL, 'fms_io(get_field_id): number of dimension of field '// &
   8355                 trim(name)//' in file '//trim(files_read(index_file)%name)//' should not be greater than 4')
   8356        if (lowercase(trim(name)) == lowercase(trim(fieldname))) then ! found the variable
   8357           if(var_dim .lt.3) then
   8358              do j=var_dim+1,3
   8359                 siz_in(j)=1
   8360              enddo
   8361           endif
   8362           files_read(index_file)%var(index_field)%name    = fieldname
   8363           files_read(index_file)%var(index_field)%field   = fields(i)
   8364           files_read(index_file)%var(index_field)%siz(1:4)  = siz_in(1:4)
   8365           files_read(index_file)%var(index_field)%gsiz(1:3) = siz_in(1:3)

Page 338         Source Listing                  GET_FIELD_ID
2021-06-01 08:54                                 fms_io.F90

   8366           return
   8367        endif
   8368     enddo
   8369 
   8370 !--- the fieldname may be a dimension variable.
   8371     if( .not. is_not_dim) then
   8372        if (ndim > max_axes) then
   8373           write(error_msg,'(I3,"/",I3)') ndim, max_axes
   8374           call  mpp_error(FATAL,'fms_io(get_field_id): max_axes exceeded, needs increasing, ndim/max_fields=' &
   8375                //trim(error_msg)//' in file '//trim(files_read(index_file)%name))
   8376        endif
   8377        call mpp_get_axes(unit, axes(1:ndim))
   8378        do i=1,ndim
   8379           call mpp_get_atts(axes(i), name=name, len = siz_in(1))
   8380           if (lowercase(trim(name)) == lowercase(trim(fieldname))) then
   8381 !             if(.not. is_no_domain) call mpp_error(FATAL, &
   8382 !                  'fms_io(get_field_id): the field is a dimension variable, no_domain should be true.')
   8383              files_read(index_file)%var(index_field)%is_dimvar = .true.
   8384              files_read(index_file)%var(index_field)%name      = fieldname
   8385              files_read(index_file)%var(index_field)%axis      = axes(i)
   8386              files_read(index_file)%var(index_field)%siz(1:4)    = siz_in(1:4)
   8387              files_read(index_file)%var(index_field)%gsiz(1:3)   = siz_in(1:3)
   8388              return
   8389           endif
   8390        enddo
   8391     end if
   8392 !--- the field is not in the file when reaching here.
   8393     call mpp_error(FATAL, 'fms_io(get_field_id): field '//trim(fieldname)// &
   8394                    ' NOT found in file '//trim(files_read(index_file)%name))
   8395 
   8396   end subroutine get_field_id

Page 339         Source Listing                  GET_FIELD_ID
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                   
                                         
 fms_io_mod_mp_get_field_id_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 AXES                       Local  8320     RECORD          1424  1     40       TGT              8377,8379,8385                    
 FIELDNAME                  Dummy  8311     CHAR                        scalar   ARG,IN           8327,8356,8362,8380,8384,8393     
 FIELDS                     Local  8321     RECORD          1096  1     400      TGT              8347,8353,8363                    
 GET_FIELD_ID               Subr   8311                                                           5376,5491,5534,5663,5711,5754,1148
                                                                                                  6,11573,11660                     
 I                          Local  8322     I(4)            4           scalar                    8352,8353,8363,8378,8379,8385     
 INDEX_FIELD                Dummy  8311     I(4)            4           scalar   ARG,OUT          8325,8328,8349,8350,8362,8363,8364
                                                                                                  ,8365,8383,8384,8385,8386,8387    
 INDEX_FILE                 Dummy  8311     I(4)            4           scalar   ARG,IN           8326,8327,8334,8335,8336,8340,8341
                                                                                                  ,8343,8345,8349,8350,8355,8362,836
                                                                                                  3,8364,8365,8375,8383,8384,8385,83
                                                                                                  86,8387,8394                      
 IS_NOT_DIM                 Dummy  8311     L(4)            4           scalar   ARG,IN           8371                              
 IS_NO_DOMAIN               Dummy  8311     L(4)            4           scalar   ARG,IN                                             
 J                          Local  8322     I(4)            4           scalar                    8326,8327,8328,8358,8359          
 NAME                       Local  8319     CHAR            128         scalar                    8353,8355,8356,8379,8380          
 NATT                       Local  8322     I(4)            4           scalar                    8340                              
 NDIM                       Local  8322     I(4)            4           scalar                    8340,8372,8373,8377,8378          
 NVAR                       Local  8322     I(4)            4           scalar                    8340,8342,8347,8352               
 SIZ_IN                     Local  8323     I(4)            4     1     4        TGT              8348,8353,8359,8364,8365,8379,8386
                                                                                                  ,8387                             
 TRIM                       Func   8327                                 scalar                    8327,8338,8345,8355,8356,8375,8380
                                                                                                  ,8393,8394                        
 UNIT                       Dummy  8311     I(4)            4           scalar   ARG,IN           8340,8347,8377                    
 VAR_DIM                    Local  8322     I(4)            4           scalar                    8353,8354,8357,8358               

Page 340         Source Listing                  GET_FIELD_ID
2021-06-01 08:54                                 fms_io.F90

   8397 
   8398 !#######################################################################
   8399 ! check the existence of the given file name
   8400 ! if the file_name string has zero length or the
   8401 ! first character is blank return a false result
   8402 ! <FUNCTION NAME="file_exist">
   8403 
   8404 !   <OVERVIEW>
   8405 !     Checks the existence of a given file name.
   8406 !   </OVERVIEW>
   8407 !   <DESCRIPTION>
   8408 !     Checks the existence of the given file name.
   8409 !     If the file_name string has zero length or the
   8410 !     first character is blank return a false result.
   8411 !   </DESCRIPTION>
   8412 !   <TEMPLATE>
   8413 !     file_exist ( file_name )
   8414 !   </TEMPLATE>
   8415 
   8416 !   <IN NAME="file_name"  TYPE="character" >
   8417 !     A file name (or path name) that is checked for existence.
   8418 !   </IN>
   8419 !   <OUT NAME=""  TYPE="logical" >
   8420 !     This function returns a logical result.  If file_name exists the result
   8421 !     is true, otherwise false is returned.
   8422 !     If the length of character string "file_name" is zero or the first
   8423 !     character is blank, then the returned value will be false.
   8424 !     When reading a file, this function is often used in conjunction with
   8425 !     routine open_file.
   8426 !   </OUT>
   8427 !   <ERROR MSG="set_domain not called" STATUS="FATAL">
   8428 !     Before calling write_data you must first call set_domain with domain2d data
   8429 !     type associated with the distributed data you are writing.
   8430 !   </ERROR>
   8431 
   8432  function file_exist (file_name, domain, no_domain)
   8433   character(len=*), intent(in)         :: file_name
   8434   type(domain2d), intent(in), optional :: domain
   8435   logical,        intent(iN), optional :: no_domain
   8436 
   8437   logical                              :: file_exist, is_no_domain
   8438   character(len=256)                   :: fname
   8439   logical                              :: read_dist, io_domain_exist
   8440 
   8441   is_no_domain = .false.
   8442   if(present(no_domain)) is_no_domain = no_domain
   8443 !--- to deal with mosaic file, in this case, the file is assumed to be in netcdf format
   8444    file_exist = get_file_name(file_name, fname, read_dist, io_domain_exist, no_domain=is_no_domain, domain=domain)
   8445    if(is_no_domain) return
   8446    if(.not.file_exist) file_exist=get_file_name(file_name, fname, read_dist, io_domain_exist, no_domain=.true.)
   8447 
   8448    return
   8449 
   8450  end function file_exist

Page 341         Source Listing                  FILE_EXIST
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                 
                                       
 fms_io_mod_mp_file_exist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOMAIN                     Dummy  8432     DOMAIN2D        752         scalar   ARG,IN           8444                              
 FILE_EXIST                 Func   8432     L(4)            4           scalar                                                      
 FILE_NAME                  Dummy  8432     CHAR                        scalar   ARG,IN           8444,8446                         
 FNAME                      Local  8438     CHAR            256         scalar                    8444,8446                         
 IO_DOMAIN_EXIST            Local  8439     L(4)            4           scalar                    8444,8446                         
 IS_NO_DOMAIN               Local  8437     L(4)            4           scalar                    8441,8442,8444,8445               
 NO_DOMAIN                  Dummy  8432     L(4)            4           scalar   ARG,IN           8442                              
 PRESENT                    Func   8442                                 scalar                    8442                              
 READ_DIST                  Local  8439     L(4)            4           scalar                    8444,8446                         

Page 342         Source Listing                  FILE_EXIST
2021-06-01 08:54                                 fms_io.F90

   8451 ! </FUNCTION>
   8452 
   8453 
   8454 !#######################################################################
   8455 ! <FUNCTION NAME="field_exist">
   8456 
   8457 !   <OVERVIEW>
   8458 !     check if a given field name exists in a given file name.
   8459 !   </OVERVIEW>
   8460 !   <DESCRIPTION>
   8461 !     check if a given field name exists in a given file name.
   8462 !     If the field_name string has zero length or the
   8463 !     first character is blank return a false result.
   8464 !     if the file file_name don't exist, return a false result.
   8465 !   </DESCRIPTION>
   8466 !   <TEMPLATE>
   8467 !     field_exist ( file_name, field_name )
   8468 !   </TEMPLATE>
   8469 
   8470 !   <IN NAME="file_name"  TYPE="character" >
   8471 !     A file name (or path name) that is checked for existence.
   8472 !   </IN>
   8473 !   <IN NAME="field_name"  TYPE="character" >
   8474 !     A field name that is checked for existence.
   8475 !   </IN>
   8476 !   <OUT NAME=""  TYPE="logical" >
   8477 !     This function returns a logical result.  If field exists in the
   8478 !     file file_name, the result is true, otherwise false is returned.
   8479 !     If the length of character string "field_name" is zero or the first
   8480 !     character is blank, then the returned value will be false.
   8481 !     if the file file_name don't exist, return a false result.
   8482 !   </OUT>
   8483 
   8484  function field_exist (file_name, field_name, domain, no_domain)
   8485   character(len=*),                 intent(in) :: file_name
   8486   character(len=*),                 intent(in) :: field_name
   8487   type(domain2d), intent(in), optional, target :: domain
   8488   logical,       intent(in),  optional         :: no_domain
   8489   logical                      :: field_exist, is_no_domain
   8490   integer                      :: unit, ndim, nvar, natt, ntime, i, nfile
   8491   character(len=64)            :: name
   8492   type(fieldtype), allocatable :: fields(:)
   8493   logical                      :: file_exist, read_dist, io_domain_exist
   8494   character(len=256)           :: fname
   8495 
   8496    field_exist = .false.
   8497    if (len_trim(field_name) == 0) return
   8498    if (field_name(1:1) == ' ')    return
   8499 
   8500    is_no_domain = .false.
   8501    if(present(no_domain)) is_no_domain = no_domain
   8502 
   8503    file_exist=get_file_name(file_name, fname, read_dist, io_domain_exist, no_domain=is_no_domain, domain=domain)
   8504    if(file_exist) then
   8505       call get_file_unit(fname, unit, nfile, read_dist, io_domain_exist, domain=domain)
   8506       call mpp_get_info(unit, ndim, nvar, natt, ntime)
   8507       allocate(fields(nvar))

Page 343         Source Listing                  FIELD_EXIST
2021-06-01 08:54                                 fms_io.F90

   8508       call mpp_get_fields(unit,fields)
   8509 
   8510       do i=1, nvar
   8511          call mpp_get_atts(fields(i),name=name)
   8512          if(lowercase(trim(name)) == lowercase(trim(field_name))) field_exist = .true.
   8513       enddo
   8514       deallocate(fields)
   8515     endif
   8516     if(field_exist .or. is_no_domain) return
   8517     file_exist =  get_file_name(file_name, fname, read_dist, io_domain_exist, no_domain=.true.)
   8518     if(file_exist) then
   8519        call get_file_unit(fname, unit, nfile, read_dist, io_domain_exist)
   8520        call mpp_get_info(unit, ndim, nvar, natt, ntime)
   8521        allocate(fields(nvar))
   8522        call mpp_get_fields(unit,fields)
   8523        do i=1, nvar
   8524           call mpp_get_atts(fields(i),name=name)
   8525           if(lowercase(trim(name)) == lowercase(trim(field_name))) field_exist = .true.
   8526        enddo
   8527        deallocate(fields)
   8528     endif
   8529 
   8530     return
   8531 
   8532  end function field_exist


ENTRY POINTS

  Name                                  
                                        
 fms_io_mod_mp_field_exist_             

Page 344         Source Listing                  FIELD_EXIST
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOMAIN                     Dummy  8484     DOMAIN2D        752         scalar   ARG,TGT,IN       8503,8505                         
 FIELDS                     Local  8492     RECORD          1096  1     1        ALC              8507,8508,8511,8514,8521,8522,8524
                                                                                                  ,8527                             
 FIELD_EXIST                Func   8484     L(4)            4           scalar                                                      
 FIELD_NAME                 Dummy  8484     CHAR                        scalar   ARG,IN           8497,8498,8512,8525               
 FILE_EXIST                 Local  8493     L(4)            4           scalar                    8503,8504,8517,8518               
 FILE_NAME                  Dummy  8484     CHAR                        scalar   ARG,IN           8503,8517                         
 FNAME                      Local  8494     CHAR            256         scalar                    8503,8505,8517,8519               
 I                          Local  8490     I(4)            4           scalar                    8510,8511,8523,8524               
 IO_DOMAIN_EXIST            Local  8493     L(4)            4           scalar                    8503,8505,8517,8519               
 IS_NO_DOMAIN               Local  8489     L(4)            4           scalar                    8500,8501,8503,8516               
 LEN_TRIM                   Func   8497                                 scalar                    8497                              
 NAME                       Local  8491     CHAR            64          scalar                    8511,8512,8524,8525               
 NATT                       Local  8490     I(4)            4           scalar                    8506,8520                         
 NDIM                       Local  8490     I(4)            4           scalar                    8506,8520                         
 NFILE                      Local  8490     I(4)            4           scalar                    8505,8519                         
 NO_DOMAIN                  Dummy  8484     L(4)            4           scalar   ARG,IN           8501                              
 NTIME                      Local  8490     I(4)            4           scalar                    8506,8520                         
 NVAR                       Local  8490     I(4)            4           scalar                    8506,8507,8510,8520,8521,8523     
 PRESENT                    Func   8501                                 scalar                    8501                              
 READ_DIST                  Local  8493     L(4)            4           scalar                    8503,8505,8517,8519               
 TRIM                       Func   8512                                 scalar                    8512,8525                         
 UNIT                       Local  8490     I(4)            4           scalar                    8505,8506,8508,8519,8520,8522     

Page 345         Source Listing                  FIELD_EXIST
2021-06-01 08:54                                 fms_io.F90

   8533 ! </FUNCTION>
   8534 
   8535 
   8536 subroutine get_filename_appendix(string_out)
   8537   character(len=*) , intent(out) :: string_out
   8538 
   8539   string_out = trim(filename_appendix)
   8540 
   8541 
   8542 end subroutine get_filename_appendix


ENTRY POINTS

  Name                                            
                                                  
 fms_io_mod_mp_get_filename_appendix_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_FILENAME_APPENDIX      Subr   8536                                                                                             
 STRING_OUT                 Dummy  8536     CHAR                        scalar   ARG,OUT          8539                              
 TRIM                       Func   8539                                 scalar                    8539                              

Page 346         Source Listing                  GET_FILENAME_APPENDIX
2021-06-01 08:54                                 fms_io.F90

   8543 
   8544 
   8545 subroutine nullify_filename_appendix()
   8546 
   8547   filename_appendix = ''
   8548 
   8549 end subroutine nullify_filename_appendix


ENTRY POINTS

  Name                                                
                                                      
 fms_io_mod_mp_nullify_filename_appendix_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NULLIFY_FILENAME_APPENDIX  Subr   8545                                                                                             

Page 347         Source Listing                  NULLIFY_FILENAME_APPENDIX
2021-06-01 08:54                                 fms_io.F90

   8550 
   8551 
   8552 subroutine set_filename_appendix(string_in)
   8553   character(len=*) , intent(in) :: string_in
   8554 
   8555   integer :: index_num
   8556 
   8557 ! Check if string has already been added
   8558   index_num = index(filename_appendix, string_in)
   8559   if ( index_num .le. 0 ) then
   8560      filename_appendix = trim(filename_appendix)//trim(string_in)
   8561   end if
   8562 
   8563 end subroutine set_filename_appendix


ENTRY POINTS

  Name                                            
                                                  
 fms_io_mod_mp_set_filename_appendix_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INDEX                      Func   8558                                 scalar                    8558                              
 INDEX_NUM                  Local  8555     I(4)            4           scalar                    8558,8559                         
 SET_FILENAME_APPENDIX      Subr   8552                                                                                             
 STRING_IN                  Dummy  8552     CHAR                        scalar   ARG,IN           8558,8560                         
 TRIM                       Func   8560                                 scalar                    8560                              

Page 348         Source Listing                  SET_FILENAME_APPENDIX
2021-06-01 08:54                                 fms_io.F90

   8564 
   8565 subroutine get_instance_filename(name_in,name_out)
   8566   character(len=*)  , intent(in)  :: name_in
   8567   character(len=*), intent(inout) :: name_out
   8568   integer :: length
   8569 
   8570   length = len_trim(name_in)
   8571   name_out = name_in(1:length)
   8572 
   8573   if(len_trim(filename_appendix) > 0) then
   8574      if(name_in(length-2:length) == '.nc') then
   8575         name_out = name_in(1:length-3)//'.'//trim(filename_appendix)//'.nc'
   8576      else
   8577         name_out = name_in(1:length)  //'.'//trim(filename_appendix)
   8578      end if
   8579   end if
   8580 
   8581 end subroutine get_instance_filename


ENTRY POINTS

  Name                                            
                                                  
 fms_io_mod_mp_get_instance_filename_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_INSTANCE_FILENAME      Subr   8565                                                                                             
 LENGTH                     Local  8568     I(4)            4           scalar                    8570,8571,8574,8575,8577          
 LEN_TRIM                   Func   8570                                 scalar                    8570,8573                         
 NAME_IN                    Dummy  8565     CHAR                        scalar   ARG,IN           8570,8571,8574,8575,8577          
 NAME_OUT                   Dummy  8565     CHAR                        scalar   ARG,INOUT        8571,8575,8577                    
 TRIM                       Func   8575                                 scalar                    8575,8577                         

Page 349         Source Listing                  GET_INSTANCE_FILENAME
2021-06-01 08:54                                 fms_io.F90

   8582 
   8583 !#######################################################################
   8584 subroutine parse_mask_table_2d(mask_table, maskmap, modelname)
   8585 
   8586   character(len=*), intent(in) :: mask_table
   8587   logical,         intent(out) :: maskmap(:,:)
   8588   character(len=*), intent(in) :: modelname
   8589   integer                      :: nmask, layout(2)
   8590   integer, allocatable         :: mask_list(:,:)
   8591   integer                      :: unit, mystat, n, stdoutunit
   8592   character(len=128)           :: record
   8593 
   8594   maskmap = .true.
   8595   nmask = 0
   8596   stdoutunit = stdout()
   8597   if( mpp_pe() == mpp_root_pe() ) then
   8598      call mpp_open(unit, mask_table, action=MPP_RDONLY)
   8599      read(unit, FMT=*, IOSTAT=mystat) nmask
   8600      if( mystat /= 0 ) call mpp_error(FATAL, &
   8601           "fms_io(parse_mask_table_2d): Error reading nmask from file " //trim(mask_table))
   8602      write(stdoutunit,*)"parse_mask_table: Number of domain regions masked in ", trim(modelname), " = ", nmask
   8603      if( nmask > 0 ) then
   8604 !--- read layout from mask_table and confirm it matches the shape of maskmap
   8605         read(unit, FMT=*, IOSTAT=mystat) layout
   8606         if( mystat /= 0 ) call mpp_error(FATAL, &
   8607              "fms_io(parse_mask_talbe_2d): Error reading layout from file " //trim(mask_table))
   8608         if( (layout(1) .NE. size(maskmap,1)) .OR. (layout(2) .NE. size(maskmap,2)) )then
   8609            write(stdoutunit,*)"layout=", layout, ", size(maskmap) = ", size(maskmap,1), size(maskmap,2)
   8610            call mpp_error(FATAL, "fms_io(parse_mask_table_2d): layout in file "//trim(mask_table)// &
   8611                   "does not match size of maskmap for "//trim(modelname))
   8612         endif
   8613 !--- make sure mpp_npes() == layout(1)*layout(2) - nmask
   8614         if( mpp_npes() .NE. layout(1)*layout(2) - nmask ) call mpp_error(FATAL, &
   8615            "fms_io(parse_mask_table_2d): mpp_npes() .NE. layout(1)*layout(2) - nmask for "//trim(modelname))
   8616       endif
   8617    endif
   8618 
   8619    call mpp_broadcast(nmask, mpp_root_pe())
   8620 
   8621    if(nmask==0) then
   8622       if( mpp_pe() == mpp_root_pe() ) call mpp_close(unit)
   8623       return
   8624    endif
   8625 
   8626    allocate(mask_list(nmask,2))
   8627 
   8628    if( mpp_pe() == mpp_root_pe() ) then
   8629      n = 0
   8630      do while( .true. )
   8631         read(unit,'(a)',end=999) record
   8632         if (record(1:1) == '#') cycle
   8633         if (record(1:10) == '          ') cycle
   8634         n = n + 1
   8635         if( n > nmask ) then
   8636            call mpp_error(FATAL, "fms_io(parse_mask_table_2d): number of mask_list entry "// &
   8637                 "is greater than nmask in file "//trim(mask_table) )
   8638         endif

Page 350         Source Listing                  PARSE_MASK_TABLE_2D
2021-06-01 08:54                                 fms_io.F90

   8639         read(record,*,err=888) mask_list(n,1), mask_list(n,2)
   8640      enddo
   8641 888  call mpp_error(FATAL, "fms_io(parse_mask_table_2d):  Error in reading mask_list from file "//trim(mask_table))
   8642 
   8643 999  continue
   8644 !--- make sure the number of entry for mask_list is nmask
   8645      if( n .NE. nmask) call mpp_error(FATAL, &
   8646         "fms_io(parse_mask_table_2d): number of mask_list entry does not match nmask in file "//trim(mask_table))
   8647      call mpp_close(unit)
   8648   endif
   8649 
   8650   call mpp_broadcast(mask_list, 2*nmask, mpp_root_pe())
   8651   do n = 1, nmask
   8652      if(debug_mask_list) then
   8653        write(stdoutunit,*) "==>NOTE from parse_mask_table_2d: ", trim(modelname), " mask_list = ", mask_list(n,1), mask_list
   8653 (n,2)
   8654      endif
   8655      maskmap(mask_list(n,1),mask_list(n,2)) = .false.
   8656   enddo
   8657 
   8658   deallocate(mask_list)
   8659 
   8660 end subroutine parse_mask_table_2d


ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_parse_mask_table_2d_             

Page 351         Source Listing                  PARSE_MASK_TABLE_2D
2021-06-01 08:54 Symbol Table                    fms_io.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 888                        Label  8641                                                           8639                              
 999                        Label  8643                                                           8631                              
 DEBUG_MASK_LIST            Local  8652     L(4)            4           scalar                    632,637,8652,8740                 
 LAYOUT                     Local  8589     I(4)            4     1     2                         8605,8608,8609,8614               
 MASKMAP                    Dummy  8584     L(4)            4     2     1        ARG,OUT          8594,8608,8609,8655               
 MASK_LIST                  Local  8590     I(4)            4     2     1        ALC              8626,8639,8650,8653,8655,8658     
 MASK_TABLE                 Dummy  8584     CHAR                        scalar   ARG,IN           8598,8601,8607,8610,8637,8641,8646
 MODELNAME                  Dummy  8584     CHAR                        scalar   ARG,IN           8602,8611,8615,8653               
 MPP_BROADCAST_INT4_SCALAR  Subr   8619                                          PRIV             8619,8707                         
 MYSTAT                     Local  8591     I(4)            4           scalar                    8599,8600,8605,8606               
 N                          Local  8591     I(4)            4           scalar                    8629,8634,8635,8639,8645,8651,8653
                                                                                                  ,8655                             
 NMASK                      Local  8589     I(4)            4           scalar                    8595,8599,8602,8603,8614,8619,8621
                                                                                                  ,8626,8635,8645,8650,8651         
 PARSE_MASK_TABLE_2D        Subr   8584                                          PRIV                                               
 RECORD                     Local  8592     CHAR            128         scalar                    8631,8632,8633,8639               
 SIZE                       Func   8608                                 scalar                    8608,8609                         
 STDOUTUNIT                 Local  8591     I(4)            4           scalar                    8596,8602,8609,8653               
 TRIM                       Func   8601                                 scalar                    8601,8602,8607,8610,8611,8615,8637
                                                                                                  ,8641,8646,8653                   
 UNIT                       Local  8591     I(4)            4           scalar                    8598,8599,8605,8622,8631,8647     

Page 352         Source Listing                  PARSE_MASK_TABLE_2D
2021-06-01 08:54                                 fms_io.F90

   8661 
   8662 
   8663 !#######################################################################
   8664 subroutine parse_mask_table_3d(mask_table, maskmap, modelname)
   8665 
   8666   character(len=*), intent(in) :: mask_table
   8667   logical,         intent(out) :: maskmap(:,:,:)
   8668   character(len=*), intent(in) :: modelname
   8669   integer                      :: nmask, layout(2)
   8670   integer, allocatable         :: mask_list(:,:)
   8671   integer                      :: unit, mystat, n, stdoutunit, ntiles
   8672   character(len=128)           :: record
   8673 
   8674   maskmap = .true.
   8675   nmask = 0
   8676   stdoutunit = stdout()
   8677   if( mpp_pe() == mpp_root_pe() ) then
   8678      call mpp_open(unit, mask_table, action=MPP_RDONLY)
   8679      read(unit, FMT=*, IOSTAT=mystat) nmask
   8680      if( mystat /= 0 ) call mpp_error(FATAL, &
   8681           "fms_io(parse_mask_table_3d): Error reading nmask from file " //trim(mask_table))
   8682      write(stdoutunit,*)"parse_mask_table: Number of domain regions masked in ", trim(modelname), " = ", nmask
   8683      if( nmask > 0 ) then
   8684 !--- read layout from mask_table and confirm it matches the shape of maskmap
   8685         read(unit, FMT=*, IOSTAT=mystat) layout(1), layout(2), ntiles
   8686         if( mystat /= 0 ) call mpp_error(FATAL, &
   8687              "fms_io(parse_mask_talbe_3d): Error reading layout from file " //trim(mask_table))
   8688         if( (layout(1) .NE. size(maskmap,1)) .OR. (layout(2) .NE. size(maskmap,2)) )then
   8689            write(stdoutunit,*)"layout=", layout, ", size(maskmap) = ", size(maskmap,1), size(maskmap,2)
   8690            call mpp_error(FATAL, "fms_io(parse_mask_table_3d): layout in file "//trim(mask_table)// &
   8691                   "does not match size of maskmap for "//trim(modelname))
   8692         endif
   8693         if( ntiles .NE. size(maskmap,3) ) then
   8694            write(stdoutunit,*)"ntiles=", ntiles, ", size(maskmap,3) = ", size(maskmap,3)
   8695            call mpp_error(FATAL, "fms_io(parse_mask_table_3d): ntiles in file "//trim(mask_table)// &
   8696                   "does not match size of maskmap for "//trim(modelname))
   8697         endif
   8698 !--- make sure mpp_npes() == layout(1)*layout(2) - nmask
   8699         if( mpp_npes() .NE. layout(1)*layout(2)*ntiles - nmask ) then
   8700            print*, "layout=", layout, nmask, mpp_npes()
   8701            call mpp_error(FATAL, &
   8702               "fms_io(parse_mask_table_3d): mpp_npes() .NE. layout(1)*layout(2) - nmask for "//trim(modelname))
   8703         endif
   8704       endif
   8705    endif
   8706 
   8707    call mpp_broadcast(nmask, mpp_root_pe())
   8708 
   8709    if(nmask==0) then
   8710       if( mpp_pe() == mpp_root_pe() ) call mpp_close(unit)
   8711       return
   8712    endif
   8713 
   8714    allocate(mask_list(nmask,3))
   8715 
   8716    if( mpp_pe() == mpp_root_pe() ) then
   8717      n = 0

Page 353         Source Listing                  PARSE_MASK_TABLE_3D
2021-06-01 08:54                                 fms_io.F90

   8718      do while( .true. )
   8719         read(unit,'(a)',end=999) record
   8720         if (record(1:1) == '#') cycle
   8721         if (record(1:10) == '          ') cycle
   8722         n = n + 1
   8723         if( n > nmask ) then
   8724            call mpp_error(FATAL, "fms_io(parse_mask_table_3d): number of mask_list entry "// &
   8725                 "is greater than nmask in file "//trim(mask_table) )
   8726         endif
   8727         read(record,*,err=888) mask_list(n,1), mask_list(n,2), mask_list(n,3)
   8728      enddo
   8729 888  call mpp_error(FATAL, "fms_io(parse_mask_table_3d):  Error in reading mask_list from file "//trim(mask_table))
   8730 
   8731 999  continue
   8732 !--- make sure the number of entry for mask_list is nmask
   8733      if( n .NE. nmask) call mpp_error(FATAL, &
   8734         "fms_io(parse_mask_table_3d): number of mask_list entry does not match nmask in file "//trim(mask_table))
   8735      call mpp_close(unit)
   8736   endif
   8737 
   8738   call mpp_broadcast(mask_list, 3*nmask, mpp_root_pe())
   8739   do n = 1, nmask
   8740      if(debug_mask_list) then
   8741        write(stdoutunit,*) "==>NOTE from parse_mask_table_3d: ", trim(modelname), " mask_list = ", &
   8742                            mask_list(n,1), mask_list(n,2), mask_list(n,3)
   8743      endif
   8744      maskmap(mask_list(n,1),mask_list(n,2),mask_list(n,3)) = .false.
   8745   enddo
   8746 
   8747   deallocate(mask_list)
   8748 
   8749 end subroutine parse_mask_table_3d

Page 354         Source Listing                  PARSE_MASK_TABLE_3D
2021-06-01 08:54 Entry Points                    fms_io.F90



ENTRY POINTS

  Name                                          
                                                
 fms_io_mod_mp_parse_mask_table_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 888                        Label  8729                                                           8727                              
 999                        Label  8731                                                           8719                              
 LAYOUT                     Local  8669     I(4)            4     1     2                         8685,8688,8689,8699,8700          
 MASKMAP                    Dummy  8664     L(4)            4     3     1        ARG,OUT          8674,8688,8689,8693,8694,8744     
 MASK_LIST                  Local  8670     I(4)            4     2     1        ALC              8714,8727,8738,8742,8744,8747     
 MASK_TABLE                 Dummy  8664     CHAR                        scalar   ARG,IN           8678,8681,8687,8690,8695,8725,8729
                                                                                                  ,8734                             
 MODELNAME                  Dummy  8664     CHAR                        scalar   ARG,IN           8682,8691,8696,8702,8741          
 MYSTAT                     Local  8671     I(4)            4           scalar                    8679,8680,8685,8686               
 N                          Local  8671     I(4)            4           scalar                    8717,8722,8723,8727,8733,8739,8742
                                                                                                  ,8744                             
 NMASK                      Local  8669     I(4)            4           scalar                    8675,8679,8682,8683,8699,8700,8707
                                                                                                  ,8709,8714,8723,8733,8738,8739    
 NTILES                     Local  8671     I(4)            4           scalar                    8685,8693,8694,8699               
 PARSE_MASK_TABLE_3D        Subr   8664                                          PRIV                                               
 RECORD                     Local  8672     CHAR            128         scalar                    8719,8720,8721,8727               
 SIZE                       Func   8688                                 scalar                    8688,8689,8693,8694               
 STDOUTUNIT                 Local  8671     I(4)            4           scalar                    8676,8682,8689,8694,8741          
 TRIM                       Func   8681                                 scalar                    8681,8682,8687,8690,8691,8695,8696
                                                                                                  ,8702,8725,8729,8734,8741         
 UNIT                       Local  8671     I(4)            4           scalar                    8678,8679,8685,8710,8719,8735     

Page 355         Source Listing                  PARSE_MASK_TABLE_3D
2021-06-01 08:54                                 fms_io.F90

   8750 
   8751 
   8752 function get_great_circle_algorithm()
   8753    logical :: get_great_circle_algorithm
   8754 
   8755    if(.NOT. module_is_initialized) call mpp_error(FATAL, &
   8756         "fms_io(use_great_circle_algorithm): fms_io_init is not called yet")
   8757 
   8758    get_great_circle_algorithm = great_circle_algorithm
   8759 
   8760 end function get_great_circle_algorithm


ENTRY POINTS

  Name                                                 
                                                       
 fms_io_mod_mp_get_great_circle_algorithm_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_GREAT_CIRCLE_ALGORITHM Func   8752     L(4)            4           scalar                                                      

Page 356         Source Listing                  GET_GREAT_CIRCLE_ALGORITHM
2021-06-01 08:54                                 fms_io.F90

   8761 
   8762 ! </SUBROUTINE>
   8763 
   8764 !----------
   8765 !ug support
   8766 # 1 "./fms_io_unstructured_register_restart_axis.inc" 1 
   8767 !***********************************************************************
   8768 !*                   GNU Lesser General Public License
   8769 !*
   8770 !* This file is part of the GFDL Flexible Modeling System (FMS).
   8771 !*
   8772 !* FMS is free software: you can redistribute it and/or modify it under
   8773 !* the terms of the GNU Lesser General Public License as published by
   8774 !* the Free Software Foundation, either version 3 of the License, or (at
   8775 !* your option) any later version.
   8776 !*
   8777 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   8778 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   8779 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   8780 !* for more details.
   8781 !*
   8782 !* You should have received a copy of the GNU Lesser General Public
   8783 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   8784 !***********************************************************************
   8785 !----------
   8786 !ug support
   8787 
   8788 !------------------------------------------------------------------------------
   8789 !>Store a real axis (x,y,z,...) in a restart object assoicated with an
   8790 !!unstructured mpp domain.
   8791 subroutine fms_io_unstructured_register_restart_axis_r1D(fileObj, &
   8792                                                          filename, &
   8793                                                          fieldname, &
   8794                                                          fdata, &
   8795                                                          cartesian, &
   8796                                                          domain, &
   8797                                                          units, &
   8798                                                          longname, &
   8799                                                          sense, &
   8800                                                          fmin, &
   8801                                                          calendar)
   8802 !Inputs/Outputs
   8803     type(restart_file_type),intent(inout) :: fileObj   !<A restart object.
   8804     character(len=*),intent(in)           :: filename  !<A name of a file.
   8805     character(len=*),intent(in)           :: fieldname !<A name for the axis field.
   8806     real,dimension(:),intent(in),target   :: fdata     !<Data for the axis.
   8807     character(len=*),intent(in)           :: cartesian !<String indicating which cartesian axis this is (i.e. X, Y, Z).
   8808     type(domainUG),intent(in),target      :: domain    !<An unustructured mpp domain.
   8809     character(len=*),intent(in),optional  :: units     !<Units for the axis.
   8810     character(len=*),intent(in),optional  :: longname  !<A more descriptive name for the axis.
   8811     integer(4),intent(in),optional :: sense     !<Positive direction.
   8812     real,intent(in),optional              :: fmin      !<Minimum value for this axis.
   8813     character(len=*),intent(in),optional  :: calendar  !<Type of calendar (only for time axis.)
   8814 
   8815 !Local variables
   8816     integer(4)                          :: input_filename_length !<The length of the trimmed input filename.
   8817     character(len=256)                         :: tmp_filename          !<A character buffer used to store various file name

Page 357         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_R1D
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   8817 s.
   8818     character(len=256)                         :: filename_suffix       !<A string appended to the end of the inputted file 
   8818 name.
   8819     character(len=256)                         :: mosaic_filename       !<The filename returned by the get_mosaic_tile_file_
   8819 ug routine.
   8820     integer(4)                          :: axis_index            !<Index of the inputted axis in the fileObj%axes array.
   8821     type(domainUG),pointer                     :: io_domain             !<Pointer to an unstructured I/O domain.
   8822     integer(4)                          :: io_domain_npes        !<The total number of ranks in an I/O domain pelist.
   8823     integer(4),dimension(:),allocatable :: pelist                !<A pelist.
   8824     integer(4),dimension(:),allocatable :: fdata_sizes           !<Size of the axis data for each rank in the I/O domain pel
   8824 ist.
   8825 
   8826 !Make sure that the module is initialized.
   8827     if (.not. module_is_initialized) then
   8828         call mpp_error(FATAL, &
   8829                        "fms_io_unstructured_register_restart_axis_r1D:" &
   8830                        //" you must first to call fms_io_init.")
   8831     endif
   8832 
   8833 !All axes must be registered before any fields.  Make sure that no
   8834 !fields have been registered to the restart object.
   8835     if (associated(fileObj%var)) then
   8836         call mpp_error(FATAL, &
   8837                        "fms_io_unstructured_register_restart_axis_r1D: " &
   8838                        //" you cannot register any fields before an axis.")
   8839     endif
   8840 
   8841 !Use this code to make the filename consistent with the
   8842 !fms_io_unstructured_setup_one_field routine.
   8843     input_filename_length = len_trim(filename)
   8844     if (input_filename_length .gt. 128) then
   8845         call mpp_error(FATAL, &
   8846                        "fms_io_unstructured_register_restart_axis_r1D:" &
   8847                        //" the inputted file name is longer than 128" &
   8848                        //" characters.")
   8849     endif
   8850     if (filename(input_filename_length-2:input_filename_length) .eq. ".nc") then
   8851         tmp_filename = filename(1:input_filename_length-3)
   8852     else
   8853         tmp_filename = filename(1:input_filename_length)
   8854     endif
   8855     filename_suffix = ""
   8856     if (len_trim(filename_appendix) .gt. 0) then
   8857         filename_suffix = trim(filename_appendix)
   8858     endif
   8859     if (len_trim(filename_suffix) .gt. 0) then
   8860         tmp_filename = trim(tmp_filename)//"."//trim(filename_suffix)
   8861     endif
   8862     call get_mosaic_tile_file_ug(tmp_filename, &
   8863                                  mosaic_filename, &
   8864                                  domain)
   8865 
   8866 !Make sure that the correct file name was passed in, or set the filename
   8867 !if this is the first axis/field registered to the restart object.
   8868     if (.not. allocated(fileObj%axes)) then
   8869         fileObj%name = trim(mosaic_filename)
   8870     else

Page 358         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_R1D
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   8871         if (trim(mosaic_filename) .ne. trim(fileObj%name)) then
   8872             call mpp_error(FATAL, &
   8873                            "fms_io_unstructured_register_restart_axis_r1D:" &
   8874                            //" the inputted file name does not match the" &
   8875                            //" existing file name for this restart object.")
   8876         endif
   8877     endif
   8878 
   8879 !If this is the first axis registered for the restart object, then
   8880 !allocate the fileObj%axes array.  The size of the fileObj%axes array
   8881 !is determined by the NIDX module parameter.
   8882     if (.not. allocated(fileObj%axes)) then
   8883         allocate(fileObj%axes(NIDX))
   8884     endif
   8885 
   8886 !Determine the index of the inputted axis in the fileObj%axes array from
   8887 !the inputted cartesian string.
   8888     select case (trim(cartesian))
   8889         case ("X")
   8890             axis_index = XIDX
   8891         case ("Y")
   8892             axis_index = YIDX
   8893         case ("Z")
   8894             axis_index = ZIDX
   8895         case ("T")
   8896             axis_index = TIDX
   8897         case ("CC")
   8898             axis_index = CCIDX
   8899         case default
   8900             call mpp_error(FATAL, &
   8901                            "fms_io_unstructured_register_restart_axis_r1D:" &
   8902                            //" an invalid cartesian string was passed in.")
   8903     end select
   8904 
   8905 !Make sure that data has not already been registered for the inputted
   8906 !axis.
   8907     if (associated(fileObj%axes(axis_index)%data)) then
   8908         call mpp_error(FATAL, &
   8909                        "fms_io_unstructured_register_restart_axis_r1D:" &
   8910                        //" the "//trim(cartesian)//" axis for this restart" &
   8911                        //" object has already been defined.")
   8912     endif
   8913 
   8914 !Make sure that the axis size is consistent for all ranks on the
   8915 !unstructured I/O domain pelist.
   8916     io_domain => null()
   8917     io_domain => mpp_get_UG_io_domain(domain)
   8918     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   8919     allocate(pelist(io_domain_npes))
   8920     call mpp_get_UG_domain_pelist(io_domain, &
   8921                                   pelist)
   8922     allocate(fdata_sizes(io_domain_npes))
   8923     fdata_sizes = 0
   8924     call mpp_gather((/size(fdata)/), &
   8925                     fdata_sizes, &
   8926                     pelist)
   8927     if (mpp_pe() .eq. pelist(1)) then

Page 359         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_R1D
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   8928         if (maxval(fdata_sizes) .ne. size(fdata) .or. &
   8929             minval(fdata_sizes) .ne. size(fdata)) then
   8930             call mpp_error(FATAL, &
   8931                            "fms_io_unstructured_register_restart_axis_r1D:" &
   8932                            //" the "//trim(cartesian)//" axis must be the" &
   8933                            //" the same size for all ranks in the" &
   8934                            //" unstructured I/O domain pelist.")
   8935         endif
   8936     endif
   8937     io_domain => null()
   8938     deallocate(pelist)
   8939     deallocate(fdata_sizes)
   8940 
   8941 !Set the name of the axis.
   8942     fileObj%axes(axis_index)%name = trim(fieldname)
   8943 
   8944 !Point to the inputted unstructured domain for the axis.
   8945     fileObj%axes(axis_index)%domain_ug => domain
   8946 
   8947 !Point to the inputted axis data.
   8948     fileObj%axes(axis_index)%data => fdata
   8949 
   8950 !Store the inputted cartesian string. (Why?)
   8951     fileObj%axes(axis_index)%cartesian = trim(cartesian)
   8952 
   8953 !Set the dimension length for the axis to -1 to signify that this is
   8954 !not a "compressed" axis.
   8955     fileObj%axes(axis_index)%dimlen = -1
   8956 
   8957 !Store the units for the axis.
   8958     if (present(units)) then
   8959         fileObj%axes(axis_index)%units = trim(units)
   8960     else
   8961         fileObj%axes(axis_index)%units = ""
   8962     endif
   8963 
   8964 !Store the longname for the axis.
   8965     if (present(longname)) then
   8966         fileObj%axes(axis_index)%longname = trim(longname)
   8967     else
   8968         fileObj%axes(axis_index)%longname = ""
   8969     endif
   8970 
   8971 !Store the "sense" for the axis.  Inputs must be for the z-dimension.
   8972     if (present(sense)) then
   8973         if (axis_index .ne. ZIDX) then
   8974             call mpp_error(FATAL, &
   8975                            "fms_io_unstructured_register_restart_axis_r1D:" &
   8976                            //" sense may only be defined for the z-axis.")
   8977         endif
   8978         if (abs(sense) .ne. 1) then
   8979             call mpp_error(FATAL, &
   8980                            "fms_io_unstructured_register_restart_axis_r1D:" &
   8981                            //" sense may only have the values +/- 1")
   8982         endif
   8983         fileObj%axes(axis_index)%sense = sense
   8984     else

Page 360         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_R1D
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   8985         fileObj%axes(axis_index)%sense = 0
   8986     endif
   8987 
   8988 !Store the minimum value allowed for the axis.
   8989     if (present(fmin)) then
   8990         fileObj%axes(axis_index)%min = fmin
   8991     else
   8992         fileObj%axes(axis_index)%min = 0
   8993     endif
   8994 
   8995 !Store the calendar for the axis.  This is only done for the time dimension.
   8996     if (axis_index .eq. TIDX) then
   8997         fileObj%axes(axis_index)%calendar = trim(calendar)
   8998     endif
   8999 
   9000     return
   9001 end subroutine fms_io_unstructured_register_restart_axis_r1D


ENTRY POINTS

  Name                                                                    
                                                                          
 fms_io_mod_mp_fms_io_unstructured_register_restart_axis_r1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ABS                        Func   8978                                 scalar                    8978                              
 ALLOCATED                  Func   8868                                 scalar                    8868,8882                         
 ASSOCIATED                 Func   8835                                 scalar                    8835,8907                         
 AXIS_INDEX                 Local  8820     I(4)            4           scalar                    8890,8892,8894,8896,8898,8907,8942
                                                                                                  ,8945,8948,8951,8955,8959,8961,896
                                                                                                  6,8968,8973,8983,8985,8990,8992,89
                                                                                                  96,8997                           
 CALENDAR                   Dummy  8801     CHAR                        scalar   ARG,IN           8997                              
 CARTESIAN                  Dummy  8795     CHAR                        scalar   ARG,IN           8888,8910,8932,8951               
 DOMAIN                     Dummy  8796     DOMAINUG        544         scalar   ARG,TGT,IN       8864,8917,8945                    
 FDATA                      Dummy  8794     R(8)            8     1     1        ARG,TGT,IN       8924,8928,8929,8948               
 FDATA_SIZES                Local  8824     I(4)            4     1     1        ALC              8922,8923,8925,8928,8929,8939     
 FIELDNAME                  Dummy  8793     CHAR                        scalar   ARG,IN           8942                              
 FILENAME                   Dummy  8792     CHAR                        scalar   ARG,IN           8843,8850,8851,8853               
 FILENAME_SUFFIX            Local  8818     CHAR            256         scalar                    8855,8857,8859,8860               
 FILEOBJ                    Dummy  8791     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        8835,8868,8869,8871,8882,8883,8907
                                                                                                  ,8942,8945,8948,8951,8955,8959,896
                                                                                                  1,8966,8968,8983,8985,8990,8992,89
                                                                                                  97                                
 FMIN                       Dummy  8800     R(8)            8           scalar   ARG,IN           8989,8990                         
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_AXIS_R1D        Subr   8791                                          PRIV                                               
 INPUT_FILENAME_LENGTH      Local  8816     I(4)            4           scalar                    8843,8844,8850,8851,8853          
 IO_DOMAIN                  Local  8821     DOMAINUG        544         scalar   PTR              8916,8917,8918,8920,8937          
 IO_DOMAIN_NPES             Local  8822     I(4)            4           scalar                    8918,8919,8922                    
 LEN_TRIM                   Func   8843                                 scalar                    8843,8856,8859                    

Page 361         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_R1D
2021-06-01 08:54 Symbol Table                    ...s_io_unstructured_register_restart_axis.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LONGNAME                   Dummy  8798     CHAR                        scalar   ARG,IN           8965,8966                         
 MAXVAL                     Func   8928                                 scalar                    8928                              
 MINVAL                     Func   8929                                 scalar                    8929                              
 MOSAIC_FILENAME            Local  8819     CHAR            256         scalar                    8863,8869,8871                    
 MPP_GET_UG_DOMAIN_NPES     Func   8918     I(4)            4           scalar   PRIV             231,8918,9135,9324,9765,10338,1222
                                                                                                  9                                 
 MPP_GET_UG_DOMAIN_PELIST   Subr   8920                                          PRIV             232,8920,9143,9331,9767,10340,1223
                                                                                                  1                                 
 MPP_GET_UG_IO_DOMAIN       Func   8917     RECORD          544         scalar   PTR,PRIV         229,8917,9134,9323,9764,10337,1192
                                                                                                  1,11970,12226                     
 PELIST                     Local  8823     I(4)            4     1     1        ALC              8919,8921,8926,8927,8938          
 PRESENT                    Func   8958                                 scalar                    8958,8965,8972,8989               
 SENSE                      Dummy  8799     I(4)            4           scalar   ARG,IN           8972,8978,8983                    
 SIZE                       Func   8924                                 scalar                    8924,8928,8929                    
 TMP_FILENAME               Local  8817     CHAR            256         scalar                    8851,8853,8860,8862               
 TRIM                       Func   8857                                 scalar                    8857,8860,8869,8871,8888,8910,8932
                                                                                                  ,8942,8951,8959,8966,8997         
 UNITS                      Dummy  8797     CHAR                        scalar   ARG,IN           8958,8959                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AX_TYPE.DOMAIN_UG          DOMAINUG        544   1280           scalar   PTR,TGT,PRIV     8945,9129,9318,10793,10802,10810,1 
                                                                                           0815,10824,10832                   

Page 362         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_R1D
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   9002 
   9003 !------------------------------------------------------------------------------
   9004 !>Store an integer "compressed" axis in a restart object assoicated with an
   9005 !!unstructured mpp domain.
   9006 subroutine fms_io_unstructured_register_restart_axis_i1D(fileObj, &
   9007                                                          filename, &
   9008                                                          fieldname, &
   9009                                                          fdata, &
   9010                                                          compressed, &
   9011                                                          compressed_axis, &
   9012                                                          dimlen, &
   9013                                                          domain, &
   9014                                                          dimlen_name, &
   9015                                                          dimlen_lname, &
   9016                                                          units, &
   9017                                                          longname, &
   9018                                                          imin)
   9019 !Inputs/Outputs
   9020     type(restart_file_type),intent(inout)            :: fileObj         !<A restart object.
   9021     character(len=*),intent(in)                      :: filename        !<A name of a file.
   9022     character(len=*),intent(in)                      :: fieldname       !<A name for the axis field.
   9023     integer(4),dimension(:),intent(in),target :: fdata           !<Data for the axis.
   9024     character(len=*),intent(in)                      :: compressed      !<"Compressed" string (???)
   9025     character(len=*),intent(in)                      :: compressed_axis !<"Compressed" axis string.
   9026     integer(4),intent(in)                     :: dimlen          !<Length of the compressed dimension.
   9027     type(domainUG),intent(in),target                 :: domain          !<An unustructured mpp domain.
   9028     character(len=*),intent(in),optional             :: dimlen_name     !<(???)
   9029     character(len=*),intent(in),optional             :: dimlen_lname    !<(???)
   9030     character(len=*),intent(in),optional             :: units           !<Units for the axis.
   9031     character(len=*),intent(in),optional             :: longname        !<A more descriptive name for the axis.
   9032     integer(4),intent(in),optional            :: imin            !<Minium value for the dimension.
   9033 
   9034 !Local variables
   9035     integer(4)                          :: input_filename_length !<The length of the trimmed input filename.
   9036     character(len=256)                         :: tmp_filename          !<A character buffer used to store various file name
   9036 s.
   9037     character(len=256)                         :: filename_suffix       !<A string appended to the end of the inputted file 
   9037 name.
   9038     character(len=256)                         :: mosaic_filename       !<The filename returned by the get_mosaic_tile_file_
   9038 ug routine.
   9039     integer(4)                          :: axis_index            !<Index of the inputted axis in the fileObj%axes array.
   9040     type(domainUG),pointer                     :: io_domain             !<Pointer to an unstructured I/O domain.
   9041     integer(4)                          :: io_domain_npes        !<The total number of ranks in an I/O domain pelist.
   9042     integer(4),dimension(:),allocatable :: pelist                !<A pelist.
   9043 
   9044 !Make sure that the module is initialized.
   9045     if (.not. module_is_initialized) then
   9046         call mpp_error(FATAL, &
   9047                        "fms_io_unstructured_register_restart_axis_i1D:" &
   9048                        //" you must first to call fms_io_init.")
   9049     endif
   9050 
   9051 !All axes must be registered before any fields.  Make sure that no
   9052 !fields have been registered to the restart object.
   9053     if (associated(fileObj%var)) then
   9054         call mpp_error(FATAL, &
   9055                        "fms_io_unstructured_register_restart_axis_i1D:" &

Page 363         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_I1D
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   9056                        //" you cannot register any fields before an axis.")
   9057     endif
   9058 
   9059 !Use this code to make the filename consistent with the
   9060 !fms_io_unstructured_setup_one_field routine.
   9061     input_filename_length = len_trim(filename)
   9062     if (input_filename_length .gt. 128) then
   9063         call mpp_error(FATAL, &
   9064                        "fms_io_unstructured_register_restart_axis_i1D:" &
   9065                        //" the inputted file name is longer than 128" &
   9066                        //" characters.")
   9067     endif
   9068     if (filename(input_filename_length-2:input_filename_length) .eq. ".nc") then
   9069         tmp_filename = filename(1:input_filename_length-3)
   9070     else
   9071         tmp_filename = filename(1:input_filename_length)
   9072     endif
   9073     filename_suffix = ""
   9074     if (len_trim(filename_appendix) .gt. 0) then
   9075         filename_suffix = trim(filename_appendix)
   9076     endif
   9077     if (len_trim(filename_suffix) .gt. 0) then
   9078         tmp_filename = trim(tmp_filename)//"."//trim(filename_suffix)
   9079     endif
   9080     call get_mosaic_tile_file_ug(tmp_filename, &
   9081                                  mosaic_filename, &
   9082                                  domain)
   9083 
   9084 !Make sure that the correct file name was passed in, or set the filename
   9085 !if this is the first axis/field registered to the restart object.
   9086     if (.not. allocated(fileObj%axes)) then
   9087         fileObj%name = trim(mosaic_filename)
   9088     else
   9089         if (trim(mosaic_filename) .ne. trim(fileObj%name)) then
   9090             call mpp_error(FATAL, &
   9091                            "fms_io_unstructured_register_restart_axis_i1D:" &
   9092                            //" the inputted file name does not match the" &
   9093                            //" existing file name for this restart object.")
   9094         endif
   9095     endif
   9096 
   9097 !If this is the first axis registered for the restart object, then
   9098 !allocate the fileObj%axes array.  The size of the fileObj%axes array
   9099 !is determined by the NIDX module parameter.
   9100     if (.not. allocated(fileObj%axes)) then
   9101         allocate(fileObj%axes(NIDX))
   9102     endif
   9103 
   9104 !Get the index of the inputted axis in the fileObj%axes array from the
   9105 !inputted compressed_axis string.
   9106     select case (trim(compressed_axis))
   9107         case ("C")
   9108             axis_index = CIDX
   9109         case ("H")
   9110             axis_index = HIDX
   9111         case default
   9112             call mpp_error(FATAL, &

Page 364         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_I1D
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   9113                            "fms_io_unstructured_register_restart_axis_i1D:" &
   9114                            //" invalid compressed_axis string was passed in.")
   9115     end select
   9116 
   9117 !Make sure that data has not already been registered for the inputted axis.
   9118     if (allocated(fileObj%axes(axis_index)%idx)) then
   9119         call mpp_error(FATAL, &
   9120                        "fms_io_unstructured_register_restart_axis_i1D:" &
   9121                        //" the "//trim(compressed_axis)//" axis for this" &
   9122                        //" restart object has already been defined.")
   9123     endif
   9124 
   9125 !Set the name of the axis.
   9126     fileObj%axes(axis_index)%name = trim(fieldname)
   9127 
   9128 !Point to the inputted unstructured domain.
   9129     fileObj%axes(axis_index)%domain_ug => domain
   9130 
   9131 !Initialize the number of data elements each rank in an unstructured I/O
   9132 !domain is responsible for.
   9133     io_domain => null()
   9134     io_domain => mpp_get_UG_io_domain(domain)
   9135     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   9136     allocate(fileObj%axes(axis_index)%nelems(io_domain_npes))
   9137     fileObj%axes(axis_index)%nelems = 0
   9138     fileObj%axes(axis_index)%nelems_for_current_rank = size(fdata)
   9139 
   9140 !Gather the sizes of the inputted data arrays for each rank onto the root
   9141 !rank of the I/O domain pelist.
   9142     allocate(pelist(io_domain_npes))
   9143     call mpp_get_UG_domain_pelist(io_domain, &
   9144                                   pelist)
   9145     call mpp_gather((/size(fdata)/), &
   9146                     fileObj%axes(axis_index)%nelems, &
   9147                     pelist)
   9148 
   9149 !Gather the inputted data from each rank onto the root rank of the I/O
   9150 !domain pelist.
   9151     if (mpp_pe() .eq. pelist(1)) then
   9152         allocate(fileObj%axes(axis_index)%idx(sum(fileObj%axes(axis_index)%nelems)))
   9153     else
   9154 !This array for a non-root rank on the I/O domain pelist should never
   9155 !be used, but is allocated to signify that this axis is defined for
   9156 !this restart object.
   9157         allocate(fileObj%axes(axis_index)%idx(1))
   9158         fileObj%axes(axis_index)%idx = 0
   9159     endif
   9160     call mpp_gather(fdata, &
   9161                     size(fdata), &
   9162                     fileObj%axes(axis_index)%idx, &
   9163                     fileObj%axes(axis_index)%nelems, &
   9164                     pelist)
   9165 
   9166 !Nullify local pointers and deallocate local allocatables.
   9167     io_domain => null()
   9168     deallocate(pelist)
   9169 

Page 365         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_I1D
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   9170 !Set the "compressed" string for the axis.
   9171     fileObj%axes(axis_index)%compressed = trim(compressed)
   9172 
   9173 !Set the dimension length for the axis.
   9174     fileObj%axes(axis_index)%dimlen = dimlen
   9175 
   9176 !Set the dimlen_name (???) for the axis.
   9177     if (present(dimlen_name)) then
   9178         fileObj%axes(axis_index)%dimlen_name = trim(dimlen_name)
   9179     else
   9180         fileObj%axes(axis_index)%dimlen_name = ""
   9181     endif
   9182 
   9183 !Set the dimlen_lname (???) for the axis.
   9184     if (present(dimlen_lname)) then
   9185         fileObj%axes(axis_index)%dimlen_lname = trim(dimlen_lname)
   9186     else
   9187         fileObj%axes(axis_index)%dimlen_lname = ""
   9188     endif
   9189 
   9190 !Set the units for the axis.
   9191     if (present(units)) then
   9192         fileObj%axes(axis_index)%units = trim(units)
   9193     else
   9194         fileObj%axes(axis_index)%units = ""
   9195     endif
   9196 
   9197 !Set the longname for the axis.
   9198     if (present(longname)) then
   9199         fileObj%axes(axis_index)%longname = trim(longname)
   9200     else
   9201         fileObj%axes(axis_index)%longname = ""
   9202     endif
   9203 
   9204 !Set the minimum value for the axis.
   9205     if (present(imin)) then
   9206         fileObj%axes(axis_index)%imin = imin
   9207     else
   9208         fileObj%axes(axis_index)%imin = 0
   9209     endif
   9210 
   9211     return
   9212 end subroutine fms_io_unstructured_register_restart_axis_i1D

Page 366         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_I1D
2021-06-01 08:54 Entry Points                    ...s_io_unstructured_register_restart_axis.inc



ENTRY POINTS

  Name                                                                    
                                                                          
 fms_io_mod_mp_fms_io_unstructured_register_restart_axis_i1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   9086                                 scalar                    9086,9100,9118                    
 ASSOCIATED                 Func   9053                                 scalar                    9053                              
 AXIS_INDEX                 Local  9039     I(4)            4           scalar                    9108,9110,9118,9126,9129,9136,9137
                                                                                                  ,9138,9146,9152,9157,9158,9162,916
                                                                                                  3,9171,9174,9178,9180,9185,9187,91
                                                                                                  92,9194,9199,9201,9206,9208       
 COMPRESSED                 Dummy  9010     CHAR                        scalar   ARG,IN           9171                              
 COMPRESSED_AXIS            Dummy  9011     CHAR                        scalar   ARG,IN           9106,9121                         
 DIMLEN                     Dummy  9012     I(4)            4           scalar   ARG,IN           9174                              
 DIMLEN_LNAME               Dummy  9015     CHAR                        scalar   ARG,IN           9184,9185                         
 DIMLEN_NAME                Dummy  9014     CHAR                        scalar   ARG,IN           9177,9178                         
 DOMAIN                     Dummy  9013     DOMAINUG        544         scalar   ARG,TGT,IN       9082,9129,9134                    
 FDATA                      Dummy  9009     I(4)            4     1     1        ARG,TGT,IN       9138,9145,9160,9161               
 FIELDNAME                  Dummy  9008     CHAR                        scalar   ARG,IN           9126                              
 FILENAME                   Dummy  9007     CHAR                        scalar   ARG,IN           9061,9068,9069,9071               
 FILENAME_SUFFIX            Local  9037     CHAR            256         scalar                    9073,9075,9077,9078               
 FILEOBJ                    Dummy  9006     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        9053,9086,9087,9089,9100,9101,9118
                                                                                                  ,9126,9129,9136,9137,9138,9146,915
                                                                                                  2,9157,9158,9162,9163,9171,9174,91
                                                                                                  78,9180,9185,9187,9192,9194,9199,9
                                                                                                  201,9206,9208                     
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_AXIS_I1D        Subr   9006                                          PRIV                                               
 IMIN                       Dummy  9018     I(4)            4           scalar   ARG,IN           9205,9206                         
 INPUT_FILENAME_LENGTH      Local  9035     I(4)            4           scalar                    9061,9062,9068,9069,9071          
 IO_DOMAIN                  Local  9040     DOMAINUG        544         scalar   PTR              9133,9134,9135,9143,9167          
 IO_DOMAIN_NPES             Local  9041     I(4)            4           scalar                    9135,9136,9142                    
 LEN_TRIM                   Func   9061                                 scalar                    9061,9074,9077                    
 LONGNAME                   Dummy  9017     CHAR                        scalar   ARG,IN           9198,9199                         
 MOSAIC_FILENAME            Local  9038     CHAR            256         scalar                    9081,9087,9089                    
 PELIST                     Local  9042     I(4)            4     1     1        ALC              9142,9144,9147,9151,9164,9168     
 PRESENT                    Func   9177                                 scalar                    9177,9184,9191,9198,9205          
 SIZE                       Func   9138                                 scalar                    9138,9145,9161                    
 SUM                        Func   9152                                 scalar                    9152                              
 TMP_FILENAME               Local  9036     CHAR            256         scalar                    9069,9071,9078,9080               
 TRIM                       Func   9075                                 scalar                    9075,9078,9087,9089,9106,9121,9126
                                                                                                  ,9171,9178,9185,9192,9199         
 UNITS                      Dummy  9016     CHAR                        scalar   ARG,IN           9191,9192                         



Page 367         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_I1D
2021-06-01 08:54 Symbol Table                    ...s_io_unstructured_register_restart_axis.inc

TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 AX_TYPE.NELEMS_FOR_CURRENT_RANK                                                                                           ...
                            I(4)            4     1288           scalar   PRIV             9138,9888,9903,10005,10020,10163,1 
                                                                                           0178,10461,10476,10578,10593       

Page 368         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_I1D
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   9213 
   9214 !------------------------------------------------------------------------------
   9215 !>Store an unlimited axis in a restart object assoicated with an unstructured
   9216 !!mpp domain.
   9217 subroutine fms_io_unstructured_register_restart_axis_u(fileObj, &
   9218                                                        filename, &
   9219                                                        fieldname, &
   9220                                                        nelems, &
   9221                                                        domain, &
   9222                                                        units, &
   9223                                                        longname)
   9224 !Inputs/Outputs
   9225     type(restart_file_type),intent(inout) :: fileObj   !<A restart object.
   9226     character(len=*),intent(in)           :: filename  !<A name of a file.
   9227     character(len=*),intent(in)           :: fieldname !<A name for the axis field.
   9228     integer(4),intent(in)          :: nelems    !<Number of elements on the axis for the current rank.
   9229     type(domainUG),intent(in),target      :: domain    !<An unustructured mpp domain.
   9230     character(len=*),intent(in),optional  :: units     !<Units for the axis.
   9231     character(len=*),intent(in),optional  :: longname  !<A more descriptive name for the axis.
   9232 
   9233 !Local variables
   9234     integer(4)                          :: input_filename_length !<The length of the trimmed input filename.
   9235     character(len=256)                         :: tmp_filename          !<A character buffer used to store various file name
   9235 s.
   9236     character(len=256)                         :: filename_suffix       !<A string appended to the end of the inputted file 
   9236 name.
   9237     character(len=256)                         :: mosaic_filename       !<The filename returned by the get_mosaic_tile_file_
   9237 ug routine.
   9238     integer(4)                          :: axis_index            !<Index of the inputted axis in the fileObj%axes array.
   9239     type(domainUG),pointer                     :: io_domain             !<Pointer to an unstructured I/O domain.
   9240     integer(4)                          :: io_domain_npes        !<The total number of ranks in an I/O domain pelist.
   9241     integer(4),dimension(:),allocatable :: pelist                !<A pelist.
   9242 
   9243 !Make sure that the module is initialized.
   9244     if (.not. module_is_initialized) then
   9245         call mpp_error(FATAL, &
   9246                        "fms_io_unstructured_register_restart_axis_u:" &
   9247                        //" you must first to call fms_io_init.")
   9248     endif
   9249 
   9250 !All axes must be registered before any fields.  Make sure that no
   9251 !fields have been registered to the restart object.
   9252     if (associated(fileObj%var)) then
   9253         call mpp_error(FATAL, &
   9254                        "fms_io_unstructured_register_restart_axis_u:" &
   9255                        //" you cannot register any fields before an axis.")
   9256     endif
   9257 
   9258 !Use this code to make the filename consistent with the
   9259 !fms_io_unstructured_setup_one_field routine.
   9260     input_filename_length = len_trim(filename)
   9261     if (input_filename_length .gt. 128) then
   9262         call mpp_error(FATAL, &
   9263                        "fms_io_unstructured_register_restart_axis_u:" &
   9264                        //" the inputted file name is longer than 128" &
   9265                        //" characters.")
   9266     endif

Page 369         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_U
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   9267     if (filename(input_filename_length-2:input_filename_length) .eq. ".nc") then
   9268         tmp_filename = filename(1:input_filename_length-3)
   9269     else
   9270         tmp_filename = filename(1:input_filename_length)
   9271     endif
   9272     filename_suffix = ""
   9273     if (len_trim(filename_appendix) .gt. 0) then
   9274         filename_suffix = trim(filename_appendix)
   9275     endif
   9276     if (len_trim(filename_suffix) .gt. 0) then
   9277         tmp_filename = trim(tmp_filename)//"."//trim(filename_suffix)
   9278     endif
   9279     call get_mosaic_tile_file_ug(tmp_filename, &
   9280                                  mosaic_filename, &
   9281                                  domain)
   9282 
   9283 !Make sure that the correct file name was passed in, or set the filename
   9284 !if this is the first axis/field registered to the restart object.
   9285     if (.not. allocated(fileObj%axes)) then
   9286         fileObj%name = trim(mosaic_filename)
   9287     else
   9288         if (trim(mosaic_filename) .ne. trim(fileObj%name)) then
   9289             call mpp_error(FATAL, &
   9290                            "fms_io_unstructured_register_restart_axis_u:" &
   9291                            //" the inputted file name does not match the" &
   9292                            //" existing file name for this restart object.")
   9293         endif
   9294     endif
   9295 
   9296 !If this is the first axis registered for the restart object, then
   9297 !allocate the fileObj%axes array.  The size of the fileObj%axes array
   9298 !is determined by the NIDX module parameter.
   9299     if (.not. allocated(fileObj%axes)) then
   9300         allocate(fileObj%axes(NIDX))
   9301     endif
   9302 
   9303 !Get the index of the inputted axis in the fileObj%axes array.
   9304     axis_index = UIDX
   9305 
   9306 !Make sure that data has not already been registered for the inputted axis.
   9307     if (allocated(fileObj%axes(axis_index)%idx)) then
   9308         call mpp_error(FATAL, &
   9309                        "fms_io_unstructured_register_restart_axis_u:" &
   9310                        //" the unlimited axis for this restart object" &
   9311                        //" has already been defined.")
   9312     endif
   9313 
   9314 !Set the name of the axis.
   9315     fileObj%axes(axis_index)%name = trim(fieldname)
   9316 
   9317 !Point to the inputted unstructured domain.
   9318     fileObj%axes(axis_index)%domain_ug => domain
   9319 
   9320 !Initialize the number of data elements each rank in an unstructured I/O
   9321 !domain is responsible for.
   9322     io_domain => null()
   9323     io_domain => mpp_get_UG_io_domain(domain)

Page 370         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_U
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   9324     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   9325     allocate(fileObj%axes(axis_index)%nelems(io_domain_npes))
   9326     fileObj%axes(axis_index)%nelems = 0
   9327 
   9328 !Gather the inputted number of elements each rank is responsible for onto
   9329 !the root rank of the I/O domain pelist.
   9330     allocate(pelist(io_domain_npes))
   9331     call mpp_get_UG_domain_pelist(io_domain, &
   9332                                   pelist)
   9333     call mpp_gather((/nelems/), &
   9334                     fileObj%axes(axis_index)%nelems, &
   9335                     pelist)
   9336 
   9337 !Nullify local pointers and deallocate local allocatables.
   9338     io_domain => null()
   9339     deallocate(pelist)
   9340 
   9341 !Set the units for the axis.
   9342     if (present(units)) then
   9343         fileObj%axes(axis_index)%units = trim(units)
   9344     else
   9345         fileObj%axes(axis_index)%units = ""
   9346     endif
   9347 
   9348 !Set the longname for the axis.
   9349     if (present(longname)) then
   9350         fileObj%axes(axis_index)%longname = trim(longname)
   9351     else
   9352         fileObj%axes(axis_index)%longname = ""
   9353     endif
   9354 
   9355     return
   9356 end subroutine fms_io_unstructured_register_restart_axis_u

Page 371         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_U
2021-06-01 08:54 Entry Points                    ...s_io_unstructured_register_restart_axis.inc



ENTRY POINTS

  Name                                                                  
                                                                        
 fms_io_mod_mp_fms_io_unstructured_register_restart_axis_u_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   9285                                 scalar                    9285,9299,9307                    
 ASSOCIATED                 Func   9252                                 scalar                    9252                              
 AXIS_INDEX                 Local  9238     I(4)            4           scalar                    9304,9307,9315,9318,9325,9326,9334
                                                                                                  ,9343,9345,9350,9352              
 DOMAIN                     Dummy  9221     DOMAINUG        544         scalar   ARG,TGT,IN       9281,9318,9323                    
 FIELDNAME                  Dummy  9219     CHAR                        scalar   ARG,IN           9315                              
 FILENAME                   Dummy  9218     CHAR                        scalar   ARG,IN           9260,9267,9268,9270               
 FILENAME_SUFFIX            Local  9236     CHAR            256         scalar                    9272,9274,9276,9277               
 FILEOBJ                    Dummy  9217     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        9252,9285,9286,9288,9299,9300,9307
                                                                                                  ,9315,9318,9325,9326,9334,9343,934
                                                                                                  5,9350,9352                       
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_AXIS_U          Subr   9217                                          PRIV                                               
 INPUT_FILENAME_LENGTH      Local  9234     I(4)            4           scalar                    9260,9261,9267,9268,9270          
 IO_DOMAIN                  Local  9239     DOMAINUG        544         scalar   PTR              9322,9323,9324,9331,9338          
 IO_DOMAIN_NPES             Local  9240     I(4)            4           scalar                    9324,9325,9330                    
 LEN_TRIM                   Func   9260                                 scalar                    9260,9273,9276                    
 LONGNAME                   Dummy  9223     CHAR                        scalar   ARG,IN           9349,9350                         
 MOSAIC_FILENAME            Local  9237     CHAR            256         scalar                    9280,9286,9288                    
 NELEMS                     Dummy  9220     I(4)            4           scalar   ARG,IN           9333                              
 PELIST                     Local  9241     I(4)            4     1     1        ALC              9330,9332,9335,9339               
 PRESENT                    Func   9342                                 scalar                    9342,9349                         
 TMP_FILENAME               Local  9235     CHAR            256         scalar                    9268,9270,9277,9279               
 TRIM                       Func   9274                                 scalar                    9274,9277,9286,9288,9315,9343,9350
 UNITS                      Dummy  9222     CHAR                        scalar   ARG,IN           9342,9343                         

Page 372         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_AXIS_U
2021-06-01 08:54                                 ...s_io_unstructured_register_restart_axis.inc

   9357 
   9358 !------------------------------------------------------------------------------
   9359 
   9360 !----------
   9361 # 8605 "fms_io.F90" 2 
   9362 # 1 "./fms_io_unstructured_setup_one_field.inc" 1 
   9363 !***********************************************************************
   9364 !*                   GNU Lesser General Public License
   9365 !*
   9366 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9367 !*
   9368 !* FMS is free software: you can redistribute it and/or modify it under
   9369 !* the terms of the GNU Lesser General Public License as published by
   9370 !* the Free Software Foundation, either version 3 of the License, or (at
   9371 !* your option) any later version.
   9372 !*
   9373 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9374 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9375 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9376 !* for more details.
   9377 !*
   9378 !* You should have received a copy of the GNU Lesser General Public
   9379 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9380 !***********************************************************************
   9381 !----------
   9382 !ug support
   9383 
   9384 !>Add a field to a restart object (restart_file_type).  Return the index of the
   9385 !!inputted field in the fileObj%var array.
   9386 subroutine fms_io_unstructured_setup_one_field(fileObj, &
   9387                                                filename, &
   9388                                                fieldname, &
   9389                                                field_dimension_order, &
   9390                                                field_dimension_sizes, &
   9391                                                index_field, &
   9392                                                domain, &
   9393                                                mandatory, &
   9394                                                data_default, &
   9395                                                longname, &
   9396                                                units, &
   9397                                                read_only, &
   9398                                                owns_data)
   9399 
   9400 !Inputs/Outputs
   9401     type(restart_file_type),intent(inout)        :: fileObj               !<A restart object.
   9402     character(len=*),intent(in)                  :: filename              !<The name of the restart file.
   9403     character(len=*),intent(in)                  :: fieldname             !<The name of a field.
   9404     integer(4),dimension(:),intent(in)    :: field_dimension_order !<Array telling the ordering of the dimensions for the fi
   9404 eld.
   9405     integer(4),dimension(NIDX),intent(in) :: field_dimension_sizes !<Array of sizes of the dimensions of the inputted field.
   9406     integer(4),intent(out)                :: index_field           !<Index of the inputted field in the fileObj%var array.
   9407     type(domainUG),intent(in),target             :: domain                !<An unstructured mpp domain.
   9408     logical(4),intent(in),optional        :: mandatory             !<Flag telling if the field is mandatory for the restart.
   9409     real,intent(in),optional                     :: data_default          !<A default value for the data.
   9410     character(len=*),intent(in),optional         :: longname              !<A more descriptive name of the field.
   9411     character(len=*),intent(in),optional         :: units                 !<Units for the field.
   9412     logical(4),intent(in),optional        :: read_only             !<Tells whether or not the variable will be written to th

Page 373         Source Listing                  FMS_IO_UNSTRUCTURED_SETUP_ONE_FIELD
2021-06-01 08:54                                 ./fms_io_unstructured_setup_one_field.inc

   9412 e restart file.
   9413     logical(4),intent(in),optional        :: owns_data             !<Tells if the data will be deallocated when the restart 
   9413 object is deallocated.
   9414 
   9415 !Local variables
   9416     real(8)      :: default_data    !<The "default" data value.  This defaults to MPP_FILL_DOUBLE. Shouldn't this be a real(
   9416 8)?
   9417     character(len=256)     :: filename2       !<A string used to manipulate the inputted filename.
   9418     integer(4)      :: length          !<the length of the (trimmed) inputted file name.
   9419     character(len=256)     :: append_string   !<A string used to append the filename_appendix module variable string to the 
   9419 inputted filename.
   9420     character(len=256)     :: fname           !<A string to hold a file name.
   9421     type(var_type),pointer :: cur_var         !<A convenience pointer.
   9422     integer(4)      :: i               !<Loop variable.
   9423     character(len=256)     :: error_msg       !<An error message string.
   9424 
   9425 !Make sure that the field does not have more than five dimensions.
   9426     if (size(field_dimension_order) .gt. 5) then
   9427         call mpp_error(FATAL, &
   9428                        "fms_io_unstructured_setup_one_field:" &
   9429                        //" the inputted field cannot contain more than" &
   9430                        //" five dimensions.")
   9431     endif
   9432 
   9433 !Make sure that each dimension size is greater than zero.
   9434     if (any(field_dimension_sizes .lt. 0)) then
   9435         call mpp_error(FATAL, &
   9436                        "fms_io_unstructured_setup_one_field:" &
   9437                        //" all dimensions must have a size that is a non-" &
   9438                        //" negative integer.")
   9439     endif
   9440 
   9441 !Set the "default" data value for the field.
   9442     if (present(data_default)) then
   9443         default_data = data_default
   9444     else
   9445         default_data = MPP_FILL_DOUBLE
   9446     endif
   9447 
   9448 !Remove the ".nc" from file name.
   9449     length = len_trim(filename)
   9450     if (filename(length-2:length) .eq. ".nc") then
   9451         filename2 = filename(1:length-3)
   9452     else
   9453         filename2 = filename(1:length)
   9454     endif
   9455 
   9456 !Append the filename_appendix string to the file name.
   9457 !filename_appendix is a module variable.
   9458     append_string = ""
   9459     if (len_trim(filename_appendix) .gt. 0) then
   9460         append_string = filename_appendix
   9461     endif
   9462     if (len_trim(append_string) .gt. 0) then
   9463         filename2 = trim(filename2)//'.'//trim(append_string)
   9464     endif
   9465 

Page 374         Source Listing                  FMS_IO_UNSTRUCTURED_SETUP_ONE_FIELD
2021-06-01 08:54                                 ./fms_io_unstructured_setup_one_field.inc

   9466 !If necessary, add the correct domain ".tilexxxx" string to the inputted
   9467 !file name.  For a file named foo.nc, this would become foo.tilexxxx.nc.
   9468     call get_mosaic_tile_file_ug(filename2, &
   9469                                  fname, &
   9470                                  domain)
   9471 
   9472     if (associated(fileObj%var)) then
   9473 
   9474 !Make sure that the filename stored in fileObj matches the filename
   9475 !returned from get_mosaic_tile_file_ug.
   9476         if (trim(fileObj%name) .ne. trim(fname)) then
   9477             call mpp_error(FATAL, &
   9478                            "fms_io_unstructured_setup_one_field:" &
   9479                            //" filename = "//trim(fname)//" is not" &
   9480                            //" consistent with the filename of the" &
   9481                            //" restart object = "//trim(fileObj%name))
   9482         endif
   9483     else
   9484 
   9485 !If any axis has already been registered, then make sure that the
   9486 !filename returned from get_mosaic_tile_file_ug matches the filename
   9487 !stored in the fileObj restart object.  If this is the first axis/
   9488 !field registered to the restart object, then store the filename
   9489 !returned from get_mosaic_tile_file_ug in the restart object.
   9490         if (allocated(fileObj%axes)) then
   9491             if (trim(fileObj%name) .ne. trim(fname)) then
   9492                 call mpp_error(FATAL, &
   9493                                "fms_io_unstructured_setup_one_field:" &
   9494                                //" filename = "//trim(fname)//" is not" &
   9495                                //" consistent with the filename of the" &
   9496                                //" restart object = "//trim(fileObj%name))
   9497             endif
   9498         else
   9499             fileObj%name = trim(fname)
   9500         endif
   9501 
   9502 !Allocate necessary space in hte restart object.
   9503         allocate(fileObj%var(max_fields))
   9504         allocate(fileObj%p0dr(MAX_TIME_LEVEL_REGISTER,max_fields))
   9505         allocate(fileObj%p1dr(MAX_TIME_LEVEL_REGISTER,max_fields))
   9506         allocate(fileObj%p2dr(MAX_TIME_LEVEL_REGISTER,max_fields))
   9507         allocate(fileObj%p3dr(MAX_TIME_LEVEL_REGISTER,max_fields))
   9508         allocate(fileObj%p4dr(MAX_TIME_LEVEL_REGISTER,max_fields))
   9509         allocate(fileObj%p2dr8(MAX_TIME_LEVEL_REGISTER,max_fields))
   9510         allocate(fileObj%p3dr8(MAX_TIME_LEVEL_REGISTER,max_fields))
   9511         allocate(fileObj%p0di(MAX_TIME_LEVEL_REGISTER,max_fields))
   9512         allocate(fileObj%p1di(MAX_TIME_LEVEL_REGISTER,max_fields))
   9513         allocate(fileObj%p2di(MAX_TIME_LEVEL_REGISTER,max_fields))
   9514         allocate(fileObj%p3di(MAX_TIME_LEVEL_REGISTER,max_fields))
   9515 
   9516 !Make sure that the restart file name is not currently being used by
   9517 !an other restart objects.  Shouldn't this be fatal?
   9518 !num_registered files is a module variable.
   9519         do i = 1,num_registered_files
   9520             if (trim(fname) .eq. trim(registered_file(i))) then
   9521                 call mpp_error(FATAL, &
   9522                                "fms_io_unstructured_setup_one_field: " &

Page 375         Source Listing                  FMS_IO_UNSTRUCTURED_SETUP_ONE_FIELD
2021-06-01 08:54                                 ./fms_io_unstructured_setup_one_field.inc

   9523                                //trim(fname)//" is already registered with" &
   9524                                //" another restart_file_type data.")
   9525                 exit
   9526             endif
   9527         enddo
   9528 
   9529 !Iterate the number of registered restart files, and add the inputted
   9530 !file to the array.  Should this be fatal?
   9531 !max_files_w is a module variable.
   9532         num_registered_files = num_registered_files + 1
   9533         if (num_registered_files .gt. max_files_w) then
   9534             call mpp_error(FATAL, &
   9535                            "fms_io_unstructured_setup_one_field:" &
   9536                            //" the number of registered files is greater" &
   9537                            //" than max_files_w.  Please increase" &
   9538                            //" max_files_w in the fms_io_nml namelist.")
   9539         endif
   9540         registered_file(num_registered_files) = trim(fname)
   9541 
   9542 !Set values for the restart object.
   9543 !max_fields is a module variable.
   9544         fileObj%register_id = num_registered_files
   9545         fileObj%max_ntime = field_dimension_sizes(TIDX)
   9546         fileObj%is_root_pe = mpp_domain_UG_is_tile_root_pe(domain)
   9547         fileObj%nvar = 0
   9548         do i = 1,max_fields
   9549             fileObj%var(i)%name = "none"
   9550             fileObj%var(i)%longname = "";
   9551             fileObj%var(i)%units = "none";
   9552             fileObj%var(i)%domain_present = .false.
   9553             fileObj%var(i)%domain_idx = -1
   9554             fileObj%var(i)%is_dimvar = .false.
   9555             fileObj%var(i)%read_only = .false.
   9556             fileObj%var(i)%owns_data = .false.
   9557             fileObj%var(i)%position = CENTER
   9558             fileObj%var(i)%ndim = -1
   9559             fileObj%var(i)%siz(:) = -1
   9560             fileObj%var(i)%gsiz(:) = -1
   9561             fileObj%var(i)%id_axes(:) = -1
   9562             fileObj%var(i)%initialized = .false.
   9563             fileObj%var(i)%mandatory = .true.
   9564             fileObj%var(i)%is = -1
   9565             fileObj%var(i)%ie = -1
   9566             fileObj%var(i)%js = -1
   9567             fileObj%var(i)%je = -1
   9568             fileObj%var(i)%default_data = -1
   9569             fileObj%var(i)%compressed_axis = ""
   9570             fileObj%var(i)%ishift = -1
   9571             fileObj%var(i)%jshift = -1
   9572             fileObj%var(i)%x_halo = -1
   9573             fileObj%var(i)%y_halo = -1
   9574             fileObj%var(i)%field_dimension_order(:) = -1
   9575             fileObj%var(i)%field_dimension_sizes(:) = -1
   9576         enddo
   9577     endif
   9578 
   9579 !Get the index of the field in the fileObj%var array, if it exists.  If

Page 376         Source Listing                  FMS_IO_UNSTRUCTURED_SETUP_ONE_FIELD
2021-06-01 08:54                                 ./fms_io_unstructured_setup_one_field.inc

   9580 !it doesn't exist, set the index to be -1.
   9581     index_field = -1
   9582     do i = 1,fileObj%nvar
   9583         if (trim(fileObj%var(i)%name) .eq. trim(fieldname)) then
   9584             index_field = i
   9585             exit
   9586         endif
   9587     enddo
   9588 
   9589     if (index_field > 0) then
   9590 
   9591 !If the field already exists in the fileObj%var array, then update its
   9592 !time level.
   9593         cur_var => null()
   9594         cur_var => fileObj%var(index_field)
   9595 
   9596 !Make sure tha the inputted array describing the ordering of the
   9597 !dimensions for the field matches the dimension ordering for the
   9598 !found field.
   9599         do i = 1,size(field_dimension_order)
   9600             if (field_dimension_order(i) .ne. cur_var%field_dimension_order(i)) then
   9601                 call mpp_error(FATAL, &
   9602                                "fms_io_unstructured_setup_one_field:" &
   9603                                //" field dimension ordering mismatch for " &
   9604                                //trim(fieldname)//" of file "//trim(filename))
   9605             endif
   9606         enddo
   9607 
   9608 !Make sure that the array of field dimension sizes matches the
   9609 !dimension sizes of the found field for all dimensions except the
   9610 !time level.
   9611         if (cur_var%field_dimension_sizes(XIDX) .ne. field_dimension_sizes(XIDX) .or. &
   9612             cur_var%field_dimension_sizes(YIDX) .ne. field_dimension_sizes(YIDX) .or. &
   9613             cur_var%field_dimension_sizes(CIDX) .ne. field_dimension_sizes(CIDX) .or. &
   9614             cur_var%field_dimension_sizes(ZIDX) .ne. field_dimension_sizes(ZIDX) .or. &
   9615             cur_var%field_dimension_sizes(HIDX) .ne. field_dimension_sizes(HIDX) .or. &
   9616             cur_var%field_dimension_sizes(UIDX) .ne. field_dimension_sizes(UIDX) .or. &
   9617             cur_var%field_dimension_sizes(CCIDX) .ne. field_dimension_sizes(CCIDX)) then
   9618             call mpp_error(FATAL, &
   9619                            "fms_io_unstructured_setup_one_field:" &
   9620                            //" field dimension size mismatch for field " &
   9621                            //trim(fieldname)//" of file "//trim(filename))
   9622         endif
   9623 
   9624 !Update the time level.
   9625         cur_var%siz(4) = cur_var%siz(4) + field_dimension_sizes(TIDX)
   9626         if (fileObj%max_ntime .lt. cur_var%siz(4)) then
   9627             fileObj%max_ntime = cur_var%siz(4)
   9628         endif
   9629         if (cur_var%siz(4) .gt. MAX_TIME_LEVEL_REGISTER) then
   9630             call mpp_error(FATAL, &
   9631                            "fms_io_unstructured_setup_one_field:" &
   9632                            //" the time level of field "//trim(cur_var%name) &
   9633                            //" in file "//trim(fileObj%name)//" is greater" &
   9634                            //" than MAX_TIME_LEVEL_REGISTER(=2), increase" &
   9635                            //" MAX_TIME_LEVEL_REGISTER or check your code.")
   9636         endif

Page 377         Source Listing                  FMS_IO_UNSTRUCTURED_SETUP_ONE_FIELD
2021-06-01 08:54                                 ./fms_io_unstructured_setup_one_field.inc

   9637     else
   9638 
   9639 !If this is a new field, then add it the restart object.
   9640         fileObj%nvar = fileObj%nvar + 1
   9641         if (fileObj%nvar .gt. max_fields) then
   9642             write(error_msg,'(I3,"/",I3)') fileObj%nvar,max_fields
   9643             call mpp_error(FATAL, &
   9644                            "fms_io_unstructured_setup_one_field:" &
   9645                            //" max_fields exceeded, needs increasing," &
   9646                            //" nvar/max_fields = "//trim(error_msg))
   9647         endif
   9648         index_field = fileObj%nvar
   9649         cur_var => null()
   9650         cur_var => fileObj%var(index_field)
   9651 
   9652 !Point to the inputted unstructured domain.
   9653         cur_var%domain_ug => domain
   9654 
   9655 !Copy in the dimension sizes of the data domain (siz, used for
   9656 !writes), and of the global domain (gsiz, used for reads).
   9657         cur_var%field_dimension_sizes = field_dimension_sizes
   9658         do i = 1,size(field_dimension_order)
   9659             cur_var%field_dimension_order(i) = field_dimension_order(i)
   9660         enddo
   9661         cur_var%siz(4) = field_dimension_sizes(TIDX)
   9662 
   9663 !Copy in the rest of the data.
   9664         cur_var%name = fieldname
   9665         cur_var%default_data = real(default_data)
   9666         if (present(mandatory)) then
   9667             cur_var%mandatory = mandatory
   9668         endif
   9669         if (present(read_only)) then
   9670             cur_var%read_only = read_only
   9671         endif
   9672         if (present(owns_data)) then
   9673             cur_var%owns_data = owns_data
   9674         endif
   9675         if (present(longname)) then
   9676             cur_var%longname = longname
   9677         else
   9678             cur_var%longname = fieldname
   9679         endif
   9680         if (present(units)) then
   9681             cur_var%units = units
   9682         endif
   9683     endif
   9684 
   9685 !Nullify local pointer.
   9686     cur_var => null()
   9687 
   9688     return
   9689 end subroutine fms_io_unstructured_setup_one_field

Page 378         Source Listing                  FMS_IO_UNSTRUCTURED_SETUP_ONE_FIELD
2021-06-01 08:54 Entry Points                    ./fms_io_unstructured_setup_one_field.inc



ENTRY POINTS

  Name                                                          
                                                                
 fms_io_mod_mp_fms_io_unstructured_setup_one_field_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   9490                                 scalar                    9490                              
 ANY                        Func   9434                                 scalar                    9434                              
 APPEND_STRING              Local  9419     CHAR            256         scalar                    9458,9460,9462,9463               
 ASSOCIATED                 Func   9472                                 scalar                    9472                              
 CUR_VAR                    Local  9421     VAR_TYPE        3328        scalar   PTR              9593,9594,9600,9611,9612,9613,9614
                                                                                                  ,9615,9616,9617,9625,9626,9627,962
                                                                                                  9,9632,9649,9650,9653,9657,9659,96
                                                                                                  61,9664,9665,9667,9670,9673,9676,9
                                                                                                  678,9681,9686                     
 DATA_DEFAULT               Dummy  9394     R(8)            8           scalar   ARG,IN           9442,9443                         
 DEFAULT_DATA               Local  9416     R(8)            8           scalar                    9443,9445,9665                    
 DOMAIN                     Dummy  9392     DOMAINUG        544         scalar   ARG,TGT,IN       9470,9546,9653                    
 ERROR_MSG                  Local  9423     CHAR            256         scalar                    9642,9646                         
 FIELDNAME                  Dummy  9388     CHAR                        scalar   ARG,IN           9583,9604,9621,9664,9678          
 FIELD_DIMENSION_ORDER      Dummy  9389     I(4)            4     1     1        ARG,IN           9426,9599,9600,9658,9659          
 FIELD_DIMENSION_SIZES      Dummy  9390     I(4)            4     1     8        ARG,IN           9434,9545,9611,9612,9613,9614,9615
                                                                                                  ,9616,9617,9625,9657,9661         
 FILENAME                   Dummy  9387     CHAR                        scalar   ARG,IN           9449,9450,9451,9453,9604,9621     
 FILENAME2                  Local  9417     CHAR            256         scalar                    9451,9453,9463,9468               
 FILEOBJ                    Dummy  9386     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        9472,9476,9481,9490,9491,9496,9499
                                                                                                  ,9503,9504,9505,9506,9507,9508,950
                                                                                                  9,9510,9511,9512,9513,9514,9544,95
                                                                                                  45,9546,9547,9549,9550,9551,9552,9
                                                                                                  553,9554,9555,9556,9557,9558,9559,
                                                                                                  9560,9561,9562,9563,9564,9565,9566
                                                                                                  ,9567,9568,9569,9570,9571,9572,957
                                                                                                  3,9574,9575,9582,9583,9594,9626,96
                                                                                                  27,9633,9640,9641,9642,9648,9650  
 FMS_IO_UNSTRUCTURED_SETUP_                                                                                                         
 ONE_FIELD                  Subr   9386                                                           9803,9919,10076,10263,10376,10492,
                                                                                                  10649                             
 FNAME                      Local  9420     CHAR            256         scalar                    9469,9476,9479,9491,9494,9499,9520
                                                                                                  ,9523,9540                        
 I                          Local  9422     I(4)            4           scalar                    9519,9520,9548,9549,9550,9551,9552
                                                                                                  ,9553,9554,9555,9556,9557,9558,955
                                                                                                  9,9560,9561,9562,9563,9564,9565,95
                                                                                                  66,9567,9568,9569,9570,9571,9572,9
                                                                                                  573,9574,9575,9582,9583,9584,9599,
                                                                                                  9600,9658,9659                    
 INDEX_FIELD                Dummy  9391     I(4)            4           scalar   ARG,OUT          9581,9584,9589,9594,9648,9650     
 LENGTH                     Local  9418     I(4)            4           scalar                    9449,9450,9451,9453               
 LEN_TRIM                   Func   9449                                 scalar                    9449,9459,9462                    
 LONGNAME                   Dummy  9395     CHAR                        scalar   ARG,IN           9675,9676                         

Page 379         Source Listing                  FMS_IO_UNSTRUCTURED_SETUP_ONE_FIELD
2021-06-01 08:54 Symbol Table                    ./fms_io_unstructured_setup_one_field.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MANDATORY                  Dummy  9393     L(4)            4           scalar   ARG,IN           9666,9667                         
 MPP_DOMAIN_UG_IS_TILE_ROOT                                                                                                         
 _PE                        Func   9546     L(8)            8           scalar   PRIV             230,9546                          
 OWNS_DATA                  Dummy  9398     L(4)            4           scalar   ARG,IN           9672,9673                         
 PRESENT                    Func   9442                                 scalar                    9442,9666,9669,9672,9675,9680     
 READ_ONLY                  Dummy  9397     L(4)            4           scalar   ARG,IN           9669,9670                         
 REAL                       Func   9665                                 scalar                    9665                              
 SIZE                       Func   9426                                 scalar                    9426,9599,9658                    
 TRIM                       Func   9463                                 scalar                    9463,9476,9479,9481,9491,9494,9496
                                                                                                  ,9499,9520,9523,9540,9583,9604,962
                                                                                                  1,9632,9633,9646                  
 UNITS                      Dummy  9396     CHAR                        scalar   ARG,IN           9680,9681                         


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 VAR_TYPE.DOMAIN_UG         DOMAINUG        544   3264           scalar   PTR,PRIV         9653,10841,10849                   
 VAR_TYPE.FIELD_DIMENSION_ORDER                                                                                            ...
                            I(4)            4     3272     1     5        PRIV             9574,9600,9659,11110,11277,11285,1 
                                                                                           1293,11309,11320                   
 VAR_TYPE.FIELD_DIMENSION_SIZES                                                                                            ...
                            I(4)            4     3292     1     8        PRIV             9575,9611,9612,9613,9614,9615,9616 
                                                                                           ,9617,9657                         

Page 380         Source Listing                  FMS_IO_UNSTRUCTURED_SETUP_ONE_FIELD
2021-06-01 08:54                                 ./fms_io_unstructured_setup_one_field.inc

   9690 
   9691 !----------
   9692 # 8606 "fms_io.F90" 2 
   9693 # 1 "./fms_io_unstructured_register_restart_field.inc" 1 
   9694 !***********************************************************************
   9695 !*                   GNU Lesser General Public License
   9696 !*
   9697 !* This file is part of the GFDL Flexible Modeling System (FMS).
   9698 !*
   9699 !* FMS is free software: you can redistribute it and/or modify it under
   9700 !* the terms of the GNU Lesser General Public License as published by
   9701 !* the Free Software Foundation, either version 3 of the License, or (at
   9702 !* your option) any later version.
   9703 !*
   9704 !* FMS is distributed in the hope that it will be useful, but WITHOUT
   9705 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   9706 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   9707 !* for more details.
   9708 !*
   9709 !* You should have received a copy of the GNU Lesser General Public
   9710 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
   9711 !***********************************************************************
   9712 !----------
   9713 !ug support
   9714 
   9715 !------------------------------------------------------------------------------
   9716 !>Add a real scalar field to a restart object (restart_file_type).  Return
   9717 !!the index of the inputted field in the fileObj%var array.
   9718 function fms_io_unstructured_register_restart_field_r_0d(fileObj, &
   9719                                                          filename, &
   9720                                                          fieldname, &
   9721                                                          fdata_0d, &
   9722                                                          domain, &
   9723                                                          mandatory, &
   9724                                                          data_default, &
   9725                                                          longname, &
   9726                                                          units, &
   9727                                                          read_only, &
   9728                                                          restart_owns_data) &
   9729                                                          result(restart_index)
   9730 
   9731 !Inputs/Outputs
   9732     type(restart_file_type),intent(inout) :: fileObj           !<A restart object.
   9733     character(len=*),intent(in)           :: filename          !<The name of a file.
   9734     character(len=*),intent(in)           :: fieldname         !<The name of a field.
   9735     real,intent(in),target                :: fdata_0d          !<Some data.
   9736     type(domainUG),intent(in),target      :: domain            !<An unstructured mpp_domain.
   9737     logical,intent(in),optional           :: mandatory         !<Flag telling if the field is mandatory for the restart.
   9738     real,intent(in),optional              :: data_default      !<A default value for the data.
   9739     character(len=*),intent(in),optional  :: longname          !<A more descriptive name of the field.
   9740     character(len=*),intent(in),optional  :: units             !<Units for the field.
   9741     logical(4),intent(in),optional :: read_only         !<Tells whether or not the variable will be written to the restart f
   9741 ile.
   9742     logical(4),intent(in),optional :: restart_owns_data !<Tells if the data will be deallocated when the restart object is d
   9742 eallocated.
   9743     integer(4)                     :: restart_index     !<Index of the inputted field in the fileObj%var array.
   9744 

Page 381         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_0 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

   9745 !Local variables
   9746     type(domainUG),pointer                     :: io_domain             !<Pointer to an unstructured I/O domain.
   9747     integer(4)                          :: io_domain_npes        !<The number of ranks in the unstructured I/O domain pelist
   9747 .
   9748     integer(4),dimension(:),allocatable :: pelist                !<A pelist.
   9749     real,dimension(:),allocatable              :: fdata_per_rank        !<Array used to gather the scalar field values.
   9750     integer(4)                          :: index_field           !<Index of the inputted field in the fileObj%var array.
   9751     integer(4),dimension(NIDX)          :: field_dimension_sizes !<Array of dimension sizes for the field.
   9752     integer(4),dimension(1)             :: field_dimension_order !<Array telling the ordering of the dimensions for the fiel
   9752 d.
   9753 
   9754 !Make sure that the module has been initialized.
   9755     if (.not. module_is_initialized) then
   9756         call mpp_error(FATAL, &
   9757                        "fms_io_unstructured_register_restart_field_r_0d:" &
   9758                        //" you must first call fms_io_init")
   9759     endif
   9760 
   9761 !Make sure that the value of the scalar field is same across all ranks
   9762 !in an I/O domain pelist.
   9763     io_domain => null()
   9764     io_domain => mpp_get_UG_io_domain(domain)
   9765     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
   9766     allocate(pelist(io_domain_npes))
   9767     call mpp_get_UG_domain_pelist(io_domain, &
   9768                                    pelist)
   9769     allocate(fdata_per_rank(io_domain_npes))
   9770     fdata_per_rank = 0.0
   9771     call mpp_gather((/fdata_0d/), &
   9772                     fdata_per_rank, &
   9773                     pelist)
   9774     if (mpp_pe() .eq. pelist(1)) then
   9775         if (maxval(fdata_per_rank) .ne. fdata_0d .or. &
   9776             minval(fdata_per_rank) .ne. fdata_0d) then
   9777             call mpp_error(FATAL, &
   9778                            "fms_io_unstructured_register_restart_field_r_0d:" &
   9779                            //" the scalar field data is not consistent across" &
   9780                            //" all ranks in the I/O domain pelist.")
   9781         endif
   9782     endif
   9783     io_domain => null()
   9784     deallocate(pelist)
   9785     deallocate(fdata_per_rank)
   9786 
   9787 !Set the dimension sizes for the field.  These correspond to:
   9788 !field_dimension_sizes(XIDX) = x-dimension size
   9789 !field_dimension_sizes(YIDX) = y-dimension size
   9790 !field_dimension_sizes(CIDX) = c-dimension size
   9791 !field_dimension_sizes(ZIDX) = z-dimension size
   9792 !field_dimension_sizes(HIDX) = h-dimension size
   9793 !field_dimension_sizes(TIDX) = t-dimension size
   9794 !field_dimension_sizes(UIDX) = u-dimension size
   9795 !field_dimension_sizes(CCIDX) = cc-dimension size
   9796     field_dimension_sizes = 1
   9797 
   9798 !Set the ordering of the dimensions for the field.
   9799     field_dimension_order(1) = TIDX

Page 382         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_0 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

   9800 
   9801 !Add a field to a restart object (restart_file_type).  Get the index of the
   9802 !inputted field in the fileObj%var array.
   9803     call fms_io_unstructured_setup_one_field(fileObj, &
   9804                                              filename, &
   9805                                              fieldname, &
   9806                                              field_dimension_order, &
   9807                                              field_dimension_sizes, &
   9808                                              index_field, &
   9809                                              domain, &
   9810                                              mandatory=mandatory, &
   9811                                              data_default=data_default, &
   9812                                              longname=longname, &
   9813                                              units=units, &
   9814                                              read_only=read_only, &
   9815                                              owns_data=restart_owns_data)
   9816 
   9817 !Point to the inputted data and return the "index_field" for the field.
   9818     fileObj%p0dr(fileObj%var(index_field)%siz(4),index_field)%p => fdata_0d
   9819     fileObj%var(index_field)%ndim = 0
   9820     restart_index = index_field
   9821 
   9822     return
   9823 end function fms_io_unstructured_register_restart_field_r_0d


ENTRY POINTS

  Name                                                                      
                                                                            
 fms_io_mod_mp_fms_io_unstructured_register_restart_field_r_0d_             

Page 383         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_0 
2021-06-01 08:54 Symbol Table                    ..._io_unstructured_register_restart_field.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA_DEFAULT               Dummy  9724     R(8)            8           scalar   ARG,IN           9811                              
 DOMAIN                     Dummy  9722     DOMAINUG        544         scalar   ARG,TGT,IN       9764,9809                         
 FDATA_0D                   Dummy  9721     R(8)            8           scalar   ARG,TGT,IN       9771,9775,9776,9818               
 FDATA_PER_RANK             Local  9749     R(8)            8     1     1        ALC              9769,9770,9772,9775,9776,9785     
 FIELDNAME                  Dummy  9720     CHAR                        scalar   ARG,IN           9805                              
 FIELD_DIMENSION_ORDER      Local  9752     I(4)            4     1     1        TGT              9799,9806                         
 FIELD_DIMENSION_SIZES      Local  9751     I(4)            4     1     8                         9796,9807                         
 FILENAME                   Dummy  9719     CHAR                        scalar   ARG,IN           9804                              
 FILEOBJ                    Dummy  9718     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        9803,9818,9819                    
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_R_0D      Func   9718     I(4)            4           scalar   PRIV                                               
 INDEX_FIELD                Local  9750     I(4)            4           scalar                    9808,9818,9819,9820               
 IO_DOMAIN                  Local  9746     DOMAINUG        544         scalar   PTR              9763,9764,9765,9767,9783          
 IO_DOMAIN_NPES             Local  9747     I(4)            4           scalar                    9765,9766,9769                    
 LONGNAME                   Dummy  9725     CHAR                        scalar   ARG,IN           9812                              
 MANDATORY                  Dummy  9723     L(4)            4           scalar   ARG,IN           9810                              
 MAXVAL                     Func   9775                                 scalar                    9775                              
 MINVAL                     Func   9776                                 scalar                    9776                              
 MPP_GATHER_REAL8_1D        Subr   9771                                          PRIV             9771                              
 PELIST                     Local  9748     I(4)            4     1     1        ALC              9766,9768,9773,9774,9784          
 READ_ONLY                  Dummy  9727     L(4)            4           scalar   ARG,IN           9814                              
 RESTART_INDEX              Local  9743     I(4)            4           scalar                    9820                              
 RESTART_OWNS_DATA          Dummy  9728     L(4)            4           scalar   ARG,IN           9815                              
 UNITS                      Dummy  9726     CHAR                        scalar   ARG,IN           9813                              

Page 384         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_0 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

   9824 
   9825 !------------------------------------------------------------------------------
   9826 !>Add a real 1D field to a restart object (restart_file_type), where the
   9827 !!field is assumed to be along the unstructured axis.  Return
   9828 !!the index of the inputted field in the fileObj%var array.
   9829 function fms_io_unstructured_register_restart_field_r_1d(fileObj, &
   9830                                                          filename, &
   9831                                                          fieldname, &
   9832                                                          fdata_1d, &
   9833                                                          fdata_1d_axes, &
   9834                                                          domain, &
   9835                                                          mandatory, &
   9836                                                          data_default, &
   9837                                                          longname, &
   9838                                                          units, &
   9839                                                          read_only, &
   9840                                                          restart_owns_data) &
   9841                                                          result(restart_index)
   9842 
   9843 !Inputs/Outputs
   9844     type(restart_file_type),intent(inout) :: fileObj           !<A restart object.
   9845     character(len=*),intent(in)           :: filename          !<The name of a file.
   9846     character(len=*),intent(in)           :: fieldname         !<The name of a field.
   9847     real,dimension(:),intent(in),target   :: fdata_1d          !<Some data.
   9848     integer(4),dimension(1)        :: fdata_1d_axes     !<An array describing the axes for the data.
   9849     type(domainUG),intent(in),target      :: domain            !<An unstructured mpp_domain.
   9850     logical,intent(in),optional           :: mandatory         !<Flag telling if the field is mandatory for the restart.
   9851     real,intent(in),optional              :: data_default      !<A default value for the data.
   9852     character(len=*),intent(in),optional  :: longname          !<A more descriptive name of the field.
   9853     character(len=*),intent(in),optional  :: units             !<Units for the field.
   9854     logical(4),intent(in),optional :: read_only         !<Tells whether or not the variable will be written to the restart f
   9854 ile.
   9855     logical(4),intent(in),optional :: restart_owns_data !<Tells if the data will be deallocated when the restart object is d
   9855 eallocated.
   9856     integer(4)                     :: restart_index     !<Index of the inputted field in the fileObj%var array.
   9857 
   9858 !Local variables
   9859     integer(4)                 :: index_field           !<Index of the inputted field in the fileObj%var array.
   9860     integer(4),dimension(NIDX) :: field_dimension_sizes !<Array of dimension sizes for the field.
   9861 
   9862 !Make sure that the module has been initialized.
   9863     if (.not. module_is_initialized) then
   9864         call mpp_error(FATAL, &
   9865                        "fms_io_unstructured_register_restart_field_r_1d:" &
   9866                        //" you must first call fms_io_init")
   9867     endif
   9868 
   9869 !Make sure that at least one axis was registered to the restart object.
   9870     if (.not. allocated(fileObj%axes)) then
   9871         call mpp_error(FATAL, &
   9872                        "fms_io_unstructured_register_restart_field_r_1d:" &
   9873                        //" no axes have been registered for the restart" &
   9874                        //" object.")
   9875     endif
   9876 
   9877 !Make sure that the first dimension of the field is a "compressed" axis,
   9878 !and that it corresponds to an axis that has been registered to the

Page 385         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_1 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

   9879 !restart object.
   9880     field_dimension_sizes = 1
   9881     if (fdata_1d_axes(1) .eq. CIDX) then
   9882         if (.not. allocated(fileObj%axes(CIDX)%idx)) then
   9883             call mpp_error(FATAL, &
   9884                            "fms_io_unstructured_register_restart_field_r_1d:" &
   9885                            //" a compressed c-axis was not registered" &
   9886                            //" to the restart object.")
   9887         endif
   9888         if (size(fdata_1d,1) .ne. fileObj%axes(CIDX)%nelems_for_current_rank) then
   9889             call mpp_error(FATAL, &
   9890                            "fms_io_unstructured_register_restart_field_r_1d:" &
   9891                            //" the size of the input data does not" &
   9892                            //" match the size of the registered" &
   9893                            //" compressed c-axis.")
   9894         endif
   9895         field_dimension_sizes(CIDX) = size(fdata_1d,1)
   9896     elseif (fdata_1d_axes(1) .eq. HIDX) then
   9897         if (.not. allocated(fileObj%axes(HIDX)%idx)) then
   9898             call mpp_error(FATAL, &
   9899                            "fms_io_unstructured_register_restart_field_r_1d:" &
   9900                            //" a compressed h-axis was not registered" &
   9901                            //" to the restart object.")
   9902         endif
   9903         if (size(fdata_1d,1) .ne. fileObj%axes(HIDX)%nelems_for_current_rank) then
   9904             call mpp_error(FATAL, &
   9905                            "fms_io_unstructured_register_restart_field_r_1d:" &
   9906                            //" the size of the input data does not" &
   9907                            //" match the size of the registered" &
   9908                            //" compressed h-axis.")
   9909         endif
   9910         field_dimension_sizes(HIDX) = size(fdata_1d,1)
   9911     else
   9912         call mpp_error(FATAL, &
   9913                        "fms_io_unstructured_register_restart_field_r_1d:" &
   9914                        //" One dimensional fields must be compressed.")
   9915     endif
   9916 
   9917 !Add a field to a restart object (restart_file_type).  Get the index of the
   9918 !inputted field in the fileObj%var array.
   9919     call fms_io_unstructured_setup_one_field(fileObj, &
   9920                                              filename, &
   9921                                              fieldname, &
   9922                                              fdata_1d_axes, &
   9923                                              field_dimension_sizes, &
   9924                                              index_field, &
   9925                                              domain, &
   9926                                              mandatory=mandatory, &
   9927                                              data_default=data_default, &
   9928                                              longname=longname, &
   9929                                              units=units, &
   9930                                              read_only=read_only, &
   9931                                              owns_data=restart_owns_data)
   9932 
   9933 !Point to the inputted data and return the "index_field" for the field.
   9934     fileObj%p1dr(fileObj%var(index_field)%siz(4),index_field)%p => fdata_1d
   9935     fileObj%var(index_field)%ndim = 1

Page 386         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_1 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

   9936     restart_index = index_field
   9937 
   9938     return
   9939 end function fms_io_unstructured_register_restart_field_r_1d


ENTRY POINTS

  Name                                                                      
                                                                            
 fms_io_mod_mp_fms_io_unstructured_register_restart_field_r_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   9870                                 scalar                    9870,9882,9897                    
 DATA_DEFAULT               Dummy  9836     R(8)            8           scalar   ARG,IN           9927                              
 DOMAIN                     Dummy  9834     DOMAINUG        544         scalar   ARG,TGT,IN       9925                              
 FDATA_1D                   Dummy  9832     R(8)            8     1     1        ARG,TGT,IN       9888,9895,9903,9910,9934          
 FDATA_1D_AXES              Dummy  9833     I(4)            4     1     1        ARG,TGT,INOUT    9881,9896,9922                    
 FIELDNAME                  Dummy  9831     CHAR                        scalar   ARG,IN           9921                              
 FIELD_DIMENSION_SIZES      Local  9860     I(4)            4     1     8                         9880,9895,9910,9923               
 FILENAME                   Dummy  9830     CHAR                        scalar   ARG,IN           9920                              
 FILEOBJ                    Dummy  9829     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        9870,9882,9888,9897,9903,9919,9934
                                                                                                  ,9935                             
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_R_1D      Func   9829     I(4)            4           scalar   PRIV                                               
 INDEX_FIELD                Local  9859     I(4)            4           scalar                    9924,9934,9935,9936               
 LONGNAME                   Dummy  9837     CHAR                        scalar   ARG,IN           9928                              
 MANDATORY                  Dummy  9835     L(4)            4           scalar   ARG,IN           9926                              
 READ_ONLY                  Dummy  9839     L(4)            4           scalar   ARG,IN           9930                              
 RESTART_INDEX              Local  9856     I(4)            4           scalar                    9936                              
 RESTART_OWNS_DATA          Dummy  9840     L(4)            4           scalar   ARG,IN           9931                              
 SIZE                       Func   9888                                 scalar                    9888,9895,9903,9910               
 UNITS                      Dummy  9838     CHAR                        scalar   ARG,IN           9929                              

Page 387         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_1 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

   9940 
   9941 !------------------------------------------------------------------------------
   9942 !>Add a real 2D field to a restart object (restart_file_type), where the
   9943 !!field's 1st axis assumed to be along the unstructured axis and the field's
   9944 !!2nd axis is assumed to be along the z-axis.  Return the index of the
   9945 !!inputted field in the fileObj%var array.
   9946 function fms_io_unstructured_register_restart_field_r_2d(fileObj, &
   9947                                                          filename, &
   9948                                                          fieldname, &
   9949                                                          fdata_2d, &
   9950                                                          fdata_2d_axes, &
   9951                                                          domain, &
   9952                                                          mandatory, &
   9953                                                          data_default, &
   9954                                                          longname, &
   9955                                                          units, &
   9956                                                          read_only, &
   9957                                                          restart_owns_data) &
   9958                                                          result(restart_index)
   9959 
   9960 !Inputs/Outputs
   9961     type(restart_file_type),intent(inout) :: fileObj           !<A restart object.
   9962     character(len=*),intent(in)           :: filename          !<The name of a file.
   9963     character(len=*),intent(in)           :: fieldname         !<The name of a field.
   9964     real,dimension(:,:),intent(in),target :: fdata_2d          !<Some data.
   9965     integer(4),dimension(2)        :: fdata_2d_axes     !<An array describing the axes for the data.
   9966     type(domainUG),intent(in),target      :: domain            !<An unstructured mpp_domain.
   9967     logical,intent(in),optional           :: mandatory         !<Flag telling if the field is mandatory for the restart.
   9968     real,intent(in),optional              :: data_default      !<A default value for the data.
   9969     character(len=*),intent(in),optional  :: longname          !<A more descriptive name of the field.
   9970     character(len=*),intent(in),optional  :: units             !<Units for the field.
   9971     logical(4),intent(in),optional :: read_only         !<Tells whether or not the variable will be written to the restart f
   9971 ile.
   9972     logical(4),intent(in),optional :: restart_owns_data !<Tells if the data will be deallocated when the restart object is d
   9972 eallocated.
   9973     integer(4)                     :: restart_index     !<Index of the inputted field in the fileObj%var array.
   9974 
   9975 !Local variables
   9976     integer(4)                 :: index_field           !<Index of the inputted field in the fileObj%var array.
   9977     integer(4),dimension(NIDX) :: field_dimension_sizes !<Array of dimension sizes for the field.
   9978 
   9979 !Make sure that the module has been initialized.
   9980     if (.not. module_is_initialized) then
   9981         call mpp_error(FATAL, &
   9982                        "fms_io_unstructured_register_restart_field_r_2d:" &
   9983                        //" you must first call fms_io_init")
   9984     endif
   9985 
   9986 !Make sure that at least one axis was registered to the restart object.
   9987     if (.not. allocated(fileObj%axes)) then
   9988         call mpp_error(FATAL, &
   9989                        "fms_io_unstructured_register_restart_field_r_2d:" &
   9990                        //" no axes have been registered for the restart" &
   9991                        //" object.")
   9992     endif
   9993 
   9994 !Make sure that the first dimension of the field is a "compressed" axis,

Page 388         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_2 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

   9995 !and that it corresponds to an axis that has been registered to the
   9996 !restart object.
   9997     field_dimension_sizes = 1
   9998     if (fdata_2d_axes(1) .eq. CIDX) then
   9999         if (.not. allocated(fileObj%axes(CIDX)%idx)) then
  10000             call mpp_error(FATAL, &
  10001                            "fms_io_unstructured_register_restart_field_r_2d:" &
  10002                            //" a compressed c-axis was not registered" &
  10003                            //" to the restart object.")
  10004         endif
  10005         if (size(fdata_2d,1) .ne. fileObj%axes(CIDX)%nelems_for_current_rank) then
  10006             call mpp_error(FATAL, &
  10007                            "fms_io_unstructured_register_restart_field_r_2d:" &
  10008                            //" the size of the input data does not" &
  10009                            //" match the size of the registered" &
  10010                            //" compressed c-axis.")
  10011         endif
  10012         field_dimension_sizes(CIDX) = size(fdata_2d,1)
  10013     elseif (fdata_2d_axes(1) .eq. HIDX) then
  10014         if (.not. allocated(fileObj%axes(HIDX)%idx)) then
  10015             call mpp_error(FATAL, &
  10016                            "fms_io_unstructured_register_restart_field_r_2d:" &
  10017                            //" a compressed h-axis was not registered" &
  10018                            //" to the restart object.")
  10019         endif
  10020         if (size(fdata_2d,1) .ne. fileObj%axes(HIDX)%nelems_for_current_rank) then
  10021             call mpp_error(FATAL, &
  10022                            "fms_io_unstructured_register_restart_field_r_2d:" &
  10023                            //" the size of the input data does not" &
  10024                            //" match the size of the registered" &
  10025                            //" compressed h-axis.")
  10026         endif
  10027         field_dimension_sizes(HIDX) = size(fdata_2d,1)
  10028     else
  10029         call mpp_error(FATAL, &
  10030                        "fms_io_unstructured_register_restart_field_r_2d:" &
  10031                        //" The first dimension of the field must be a" &
  10032                        //" compressed dimension.")
  10033     endif
  10034 
  10035 !Make sure that the second dimension of the inputted field corresponds to
  10036 !either a registered z- or cc-axis.
  10037     if (fdata_2d_axes(2) .eq. ZIDX) then
  10038         if (.not. associated(fileObj%axes(ZIDX)%data)) then
  10039             call mpp_error(FATAL, &
  10040                            "fms_io_unstructured_register_restart_field_r_2d:" &
  10041                            //" a z-axis was not registered to the" &
  10042                            //" restart object.")
  10043         endif
  10044         if (size(fdata_2d,2) .ne. size(fileObj%axes(ZIDX)%data)) then
  10045             call mpp_error(FATAL, &
  10046                            "fms_io_unstructured_register_restart_field_r_2d:" &
  10047                            //" the size of the input data does not" &
  10048                            //" match the size of the registered" &
  10049                            //" z-axis.")
  10050         endif
  10051         field_dimension_sizes(ZIDX) = size(fdata_2d,2)

Page 389         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_2 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10052     elseif (fdata_2d_axes(2) .eq. CCIDX) then
  10053         if (.not. associated(fileObj%axes(CCIDX)%data)) then
  10054             call mpp_error(FATAL, &
  10055                            "fms_io_unstructured_register_restart_field_r_2d:" &
  10056                            //" a cc-axis was not registered to the" &
  10057                            //" restart object.")
  10058         endif
  10059         if (size(fdata_2d,2) .ne. size(fileObj%axes(CCIDX)%data)) then
  10060             call mpp_error(FATAL, &
  10061                            "fms_io_unstructured_register_restart_field_r_2d:" &
  10062                            //" the size of the input data does not" &
  10063                            //" match the size of the registered" &
  10064                            //" cc-axis.")
  10065         endif
  10066         field_dimension_sizes(CCIDX) = size(fdata_2d,2)
  10067     else
  10068         call mpp_error(FATAL, &
  10069                        "fms_io_unstructured_register_restart_field_r_2d:" &
  10070                        //" unsupported axis parameter for the second" &
  10071                        //" dimension of the field.")
  10072     endif
  10073 
  10074 !Add a field to a restart object (restart_file_type).  Get the index of the
  10075 !inputted field in the fileObj%var array.
  10076     call fms_io_unstructured_setup_one_field(fileObj, &
  10077                                              filename, &
  10078                                              fieldname, &
  10079                                              fdata_2d_axes, &
  10080                                              field_dimension_sizes, &
  10081                                              index_field, &
  10082                                              domain, &
  10083                                              mandatory=mandatory, &
  10084                                              data_default=data_default, &
  10085                                              longname=longname, &
  10086                                              units=units, &
  10087                                              read_only=read_only, &
  10088                                              owns_data=restart_owns_data)
  10089 
  10090 !Point to the inputted data and return the "index_field" for the field.
  10091     fileObj%p2dr(fileObj%var(index_field)%siz(4),index_field)%p => fdata_2d
  10092     fileObj%var(index_field)%ndim = 2
  10093     restart_index = index_field
  10094 
  10095     return
  10096 end function fms_io_unstructured_register_restart_field_r_2d

Page 390         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_2 
2021-06-01 08:54 Entry Points                    ..._io_unstructured_register_restart_field.inc



ENTRY POINTS

  Name                                                                      
                                                                            
 fms_io_mod_mp_fms_io_unstructured_register_restart_field_r_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   9987                                 scalar                    9987,9999,10014                   
 ASSOCIATED                 Func   10038                                scalar                    10038,10053                       
 DATA_DEFAULT               Dummy  9953     R(8)            8           scalar   ARG,IN           10084                             
 DOMAIN                     Dummy  9951     DOMAINUG        544         scalar   ARG,TGT,IN       10082                             
 FDATA_2D                   Dummy  9949     R(8)            8     2     1        ARG,TGT,IN       10005,10012,10020,10027,10044,1005
                                                                                                  1,10059,10066,10091               
 FDATA_2D_AXES              Dummy  9950     I(4)            4     1     2        ARG,TGT,INOUT    9998,10013,10037,10052,10079      
 FIELDNAME                  Dummy  9948     CHAR                        scalar   ARG,IN           10078                             
 FIELD_DIMENSION_SIZES      Local  9977     I(4)            4     1     8                         9997,10012,10027,10051,10066,10080
 FILENAME                   Dummy  9947     CHAR                        scalar   ARG,IN           10077                             
 FILEOBJ                    Dummy  9946     RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        9987,9999,10005,10014,10020,10038,
                                                                                                  10044,10053,10059,10076,10091,1009
                                                                                                  2                                 
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_R_2D      Func   9946     I(4)            4           scalar   PRIV                                               
 INDEX_FIELD                Local  9976     I(4)            4           scalar                    10081,10091,10092,10093           
 LONGNAME                   Dummy  9954     CHAR                        scalar   ARG,IN           10085                             
 MANDATORY                  Dummy  9952     L(4)            4           scalar   ARG,IN           10083                             
 READ_ONLY                  Dummy  9956     L(4)            4           scalar   ARG,IN           10087                             
 RESTART_INDEX              Local  9973     I(4)            4           scalar                    10093                             
 RESTART_OWNS_DATA          Dummy  9957     L(4)            4           scalar   ARG,IN           10088                             
 SIZE                       Func   10005                                scalar                    10005,10012,10020,10027,10044,1005
                                                                                                  1,10059,10066                     
 UNITS                      Dummy  9955     CHAR                        scalar   ARG,IN           10086                             

Page 391         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_2 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10097 
  10098 !------------------------------------------------------------------------------
  10099 !>Add a real 3D field to a restart object (restart_file_type), where the
  10100 !!field's 1st axis assumed to be along the unstructured axis, the fields's
  10101 !!second axis is assumed to be along the z-axis, and the field's third axis
  10102 !!is assumed to be along the cc-axis (???).  Return the index of the
  10103 !!inputted field in the fileObj%var array.
  10104 function fms_io_unstructured_register_restart_field_r_3d(fileObj, &
  10105                                                          filename, &
  10106                                                          fieldname, &
  10107                                                          fdata_3d, &
  10108                                                          fdata_3d_axes, &
  10109                                                          domain, &
  10110                                                          mandatory, &
  10111                                                          data_default, &
  10112                                                          longname, &
  10113                                                          units, &
  10114                                                          read_only, &
  10115                                                          restart_owns_data) &
  10116                                                          result(restart_index)
  10117 
  10118 !Inputs/Outputs
  10119     type(restart_file_type),intent(inout)   :: fileObj           !<A restart object.
  10120     character(len=*),intent(in)             :: filename          !<The name of a file.
  10121     character(len=*),intent(in)             :: fieldname         !<The name of a field.
  10122     real,dimension(:,:,:),intent(in),target :: fdata_3d          !<Some data.
  10123     integer(4),dimension(3)          :: fdata_3d_axes     !<An array describing the axes for the data.
  10124     type(domainUG),intent(in),target        :: domain            !<An unstructured mpp_domain.
  10125     logical,intent(in),optional             :: mandatory         !<Flag telling if the field is mandatory for the restart.
  10126     real,intent(in),optional                :: data_default      !<A default value for the data.
  10127     character(len=*),intent(in),optional    :: longname          !<A more descriptive name of the field.
  10128     character(len=*),intent(in),optional    :: units             !<Units for the field.
  10129     logical(4),intent(in),optional   :: read_only         !<Tells whether or not the variable will be written to the restart
  10129  file.
  10130     logical(4),intent(in),optional   :: restart_owns_data !<Tells if the data will be deallocated when the restart object is
  10130  deallocated.
  10131     integer(4)                       :: restart_index     !<Index of the inputted field in the fileObj%var array.
  10132 
  10133 !Local variables
  10134     integer(4)                 :: index_field           !<Index of the inputted field in the fileObj%var array.
  10135     integer(4),dimension(NIDX) :: field_dimension_sizes !<Array of dimension sizes for the field.
  10136 
  10137 !Make sure that the module has been initialized.
  10138     if (.not. module_is_initialized) then
  10139         call mpp_error(FATAL, &
  10140                        "fms_io_unstructured_register_restart_field_r_3d:" &
  10141                        //" you must first call fms_io_init")
  10142     endif
  10143 
  10144 !Make sure that at least one axis was registered to the restart object.
  10145     if (.not. allocated(fileObj%axes)) then
  10146         call mpp_error(FATAL, &
  10147                        "fms_io_unstructured_register_restart_field_r_3d:" &
  10148                        //" no axes have been registered for the restart" &
  10149                        //" object.")
  10150     endif
  10151 

Page 392         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_3 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10152 !Make sure that the first dimension of the field is a "compressed" axis,
  10153 !and that it corresponds to an axis that has been registered to the
  10154 !restart object.
  10155     field_dimension_sizes = 1
  10156     if (fdata_3d_axes(1) .eq. CIDX) then
  10157         if (.not. allocated(fileObj%axes(CIDX)%idx)) then
  10158             call mpp_error(FATAL, &
  10159                            "fms_io_unstructured_register_restart_field_r_3d:" &
  10160                            //" a compressed c-axis was not registered" &
  10161                            //" to the restart object.")
  10162         endif
  10163         if (size(fdata_3d,1) .ne. fileObj%axes(CIDX)%nelems_for_current_rank) then
  10164             call mpp_error(FATAL, &
  10165                            "fms_io_unstructured_register_restart_field_r_3d:" &
  10166                            //" the size of the input data does not" &
  10167                            //" match the size of the registered" &
  10168                            //" compressed c-axis.")
  10169         endif
  10170         field_dimension_sizes(CIDX) = size(fdata_3d,1)
  10171     elseif (fdata_3d_axes(1) .eq. HIDX) then
  10172         if (.not. allocated(fileObj%axes(HIDX)%idx)) then
  10173             call mpp_error(FATAL, &
  10174                            "fms_io_unstructured_register_restart_field_r_3d:" &
  10175                            //" a compressed h-axis was not registered" &
  10176                            //" to the restart object.")
  10177         endif
  10178         if (size(fdata_3d,1) .ne. fileObj%axes(HIDX)%nelems_for_current_rank) then
  10179             call mpp_error(FATAL, &
  10180                            "fms_io_unstructured_register_restart_field_r_3d:" &
  10181                            //" the size of the input data does not" &
  10182                            //" match the size of the registered" &
  10183                            //" compressed h-axis.")
  10184         endif
  10185         field_dimension_sizes(HIDX) = size(fdata_3d,1)
  10186     else
  10187         call mpp_error(FATAL, &
  10188                        "fms_io_unstructured_register_restart_field_r_3d:" &
  10189                        //" The first dimension of the field must be a" &
  10190                        //" compressed dimension.")
  10191     endif
  10192 
  10193 !Make sure that the second and third dimensions of the inputted field
  10194 !corresponds to some combination of registered z- and cc-axes.
  10195     if (.not. associated(fileObj%axes(ZIDX)%data)) then
  10196         call mpp_error(FATAL, &
  10197                        "fms_io_unstructured_register_restart_field_r_3d:" &
  10198                        //" a z-axis was not registered to the" &
  10199                        //" restart object.")
  10200     endif
  10201     if (.not. associated(fileObj%axes(CCIDX)%data)) then
  10202         call mpp_error(FATAL, &
  10203                        "fms_io_unstructured_register_restart_field_r_3d:" &
  10204                        //" a cc-axis was not registered to the" &
  10205                        //" restart object.")
  10206     endif
  10207     if (fdata_3d_axes(2) .eq. ZIDX) then
  10208         if (size(fdata_3d,2) .ne. size(fileObj%axes(ZIDX)%data)) then

Page 393         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_3 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10209             call mpp_error(FATAL, &
  10210                            "fms_io_unstructured_register_restart_field_r_3d:" &
  10211                            //" the size of the input data does not" &
  10212                            //" match the size of the registered" &
  10213                            //" z-axis.")
  10214         endif
  10215         field_dimension_sizes(ZIDX) = size(fdata_3d,2)
  10216         if (fdata_3d_axes(3) .ne. CCIDX) then
  10217             call mpp_error(FATAL, &
  10218                            "fms_io_unstructured_register_restart_field_r_3d:" &
  10219                            //" unsupported axis parameter for the third" &
  10220                            //" dimension of the field.")
  10221         elseif (size(fdata_3d,3) .ne. size(fileObj%axes(CCIDX)%data)) then
  10222             call mpp_error(FATAL, &
  10223                            "fms_io_unstructured_register_restart_field_r_3d:" &
  10224                            //" the size of the input data does not" &
  10225                            //" match the size of the registered" &
  10226                            //" cc-axis.")
  10227 
  10228         else
  10229             field_dimension_sizes(CCIDX) = size(fdata_3d,3)
  10230         endif
  10231     elseif (fdata_3d_axes(2) .eq. CCIDX) then
  10232         if (size(fdata_3d,2) .ne. size(fileObj%axes(CCIDX)%data)) then
  10233             call mpp_error(FATAL, &
  10234                            "fms_io_unstructured_register_restart_field_r_3d:" &
  10235                            //" the size of the input data does not" &
  10236                            //" match the size of the registered" &
  10237                            //" cc-axis.")
  10238         endif
  10239         field_dimension_sizes(CCIDX) = size(fdata_3d,2)
  10240         if (fdata_3d_axes(3) .ne. ZIDX) then
  10241             call mpp_error(FATAL, &
  10242                            "fms_io_unstructured_register_restart_field_r_3d:" &
  10243                            //" unsupported axis parameter for the third" &
  10244                            //" dimension of the field.")
  10245         elseif (size(fdata_3d,3) .ne. size(fileObj%axes(ZIDX)%data)) then
  10246             call mpp_error(FATAL, &
  10247                            "fms_io_unstructured_register_restart_field_r_3d:" &
  10248                            //" the size of the input data does not" &
  10249                            //" match the size of the registered" &
  10250                            //" z-axis.")
  10251         else
  10252             field_dimension_sizes(ZIDX) = size(fdata_3d,3)
  10253         endif
  10254     else
  10255         call mpp_error(FATAL, &
  10256                        "fms_io_unstructured_register_restart_field_r_3d:" &
  10257                        //" unsupported axis parameter for the second" &
  10258                        //" dimension of the field.")
  10259     endif
  10260 
  10261 !Add a field to a restart object (restart_file_type).  Get the index of the
  10262 !inputted field in the fileObj%var array.
  10263     call fms_io_unstructured_setup_one_field(fileObj, &
  10264                                              filename, &
  10265                                              fieldname, &

Page 394         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_3 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10266                                              fdata_3d_axes, &
  10267                                              field_dimension_sizes, &
  10268                                              index_field, &
  10269                                              domain, &
  10270                                              mandatory=mandatory, &
  10271                                              data_default=data_default, &
  10272                                              longname=longname, &
  10273                                              units=units, &
  10274                                              read_only=read_only, &
  10275                                              owns_data=restart_owns_data)
  10276 
  10277 !Point to the inputted data and return the "index_field" for the field.
  10278     fileObj%p3dr(fileObj%var(index_field)%siz(4),index_field)%p => fdata_3d
  10279     fileObj%var(index_field)%ndim = 3
  10280     restart_index = index_field
  10281 
  10282     return
  10283 end function fms_io_unstructured_register_restart_field_r_3d


ENTRY POINTS

  Name                                                                      
                                                                            
 fms_io_mod_mp_fms_io_unstructured_register_restart_field_r_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   10145                                scalar                    10145,10157,10172                 
 ASSOCIATED                 Func   10195                                scalar                    10195,10201                       
 DATA_DEFAULT               Dummy  10111    R(8)            8           scalar   ARG,IN           10271                             
 DOMAIN                     Dummy  10109    DOMAINUG        544         scalar   ARG,TGT,IN       10269                             
 FDATA_3D                   Dummy  10107    R(8)            8     3     1        ARG,TGT,IN       10163,10170,10178,10185,10208,1021
                                                                                                  5,10221,10229,10232,10239,10245,10
                                                                                                  252,10278                         
 FDATA_3D_AXES              Dummy  10108    I(4)            4     1     3        ARG,TGT,INOUT    10156,10171,10207,10216,10231,1024
                                                                                                  0,10266                           
 FIELDNAME                  Dummy  10106    CHAR                        scalar   ARG,IN           10265                             
 FIELD_DIMENSION_SIZES      Local  10135    I(4)            4     1     8                         10155,10170,10185,10215,10229,1023
                                                                                                  9,10252,10267                     
 FILENAME                   Dummy  10105    CHAR                        scalar   ARG,IN           10264                             
 FILEOBJ                    Dummy  10104    RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        10145,10157,10163,10172,10178,1019
                                                                                                  5,10201,10208,10221,10232,10245,10
                                                                                                  263,10278,10279                   
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_R_3D      Func   10104    I(4)            4           scalar   PRIV                                               
 INDEX_FIELD                Local  10134    I(4)            4           scalar                    10268,10278,10279,10280           
 LONGNAME                   Dummy  10112    CHAR                        scalar   ARG,IN           10272                             
 MANDATORY                  Dummy  10110    L(4)            4           scalar   ARG,IN           10270                             
 READ_ONLY                  Dummy  10114    L(4)            4           scalar   ARG,IN           10274                             
 RESTART_INDEX              Local  10131    I(4)            4           scalar                    10280                             
 RESTART_OWNS_DATA          Dummy  10115    L(4)            4           scalar   ARG,IN           10275                             
 SIZE                       Func   10163                                scalar                    10163,10170,10178,10185,10208,1021

Page 395         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_3 
2021-06-01 08:54 Symbol Table                    ..._io_unstructured_register_restart_field.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  5,10221,10229,10232,10239,10245,10
                                                                                                  252                               
 UNITS                      Dummy  10113    CHAR                        scalar   ARG,IN           10273                             

Page 396         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_R_3 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10284 
  10285 # 946
  10286 
  10287 
  10288 !------------------------------------------------------------------------------
  10289 !>Add an integer scalar field to a restart object (restart_file_type).  Return
  10290 !!the index of the inputted field in the fileObj%var array.
  10291 function fms_io_unstructured_register_restart_field_i_0d(fileObj, &
  10292                                                          filename, &
  10293                                                          fieldname, &
  10294                                                          fdata_0d, &
  10295                                                          domain, &
  10296                                                          mandatory, &
  10297                                                          data_default, &
  10298                                                          longname, &
  10299                                                          units, &
  10300                                                          read_only, &
  10301                                                          restart_owns_data) &
  10302                                                          result(restart_index)
  10303 
  10304 !Inputs/Outputs
  10305     type(restart_file_type),intent(inout) :: fileObj           !<A restart object.
  10306     character(len=*),intent(in)           :: filename          !<The name of a file.
  10307     character(len=*),intent(in)           :: fieldname         !<The name of a field.
  10308     integer,intent(in),target             :: fdata_0d          !<Some data.
  10309     type(domainUG),intent(in),target      :: domain            !<An unstructured mpp_domain.
  10310     logical,intent(in),optional           :: mandatory         !<Flag telling if the field is mandatory for the restart.
  10311     real,intent(in),optional              :: data_default      !<A default value for the data.
  10312     character(len=*),intent(in),optional  :: longname          !<A more descriptive name of the field.
  10313     character(len=*),intent(in),optional  :: units             !<Units for the field.
  10314     logical(4),intent(in),optional :: read_only         !<Tells whether or not the variable will be written to the restart f
  10314 ile.
  10315     logical(4),intent(in),optional :: restart_owns_data !<Tells if the data will be deallocated when the restart object is d
  10315 eallocated.
  10316     integer(4)                     :: restart_index     !<Index of the inputted field in the fileObj%var array.
  10317 
  10318 !Local variables
  10319     type(domainUG),pointer                     :: io_domain             !<Pointer to an unstructured I/O domain.
  10320     integer(4)                          :: io_domain_npes        !<The number of ranks in the unstructured I/O domain pelist
  10320 .
  10321     integer(4),dimension(:),allocatable :: pelist                !<A pelist.
  10322     integer,dimension(:),allocatable           :: fdata_per_rank        !<Array used to gather the scalar field values.
  10323     integer(4)                          :: index_field           !<Index of the inputted field in the fileObj%var array.
  10324     integer(4),dimension(NIDX)          :: field_dimension_sizes !<Array of dimension sizes for the field.
  10325     integer(4),dimension(1)             :: field_dimension_order !<Array telling the ordering of the dimensions for the fiel
  10325 d.
  10326 
  10327 !Make sure that the module has been initialized.
  10328     if (.not. module_is_initialized) then
  10329         call mpp_error(FATAL, &
  10330                        "fms_io_unstructured_register_restart_field_i_0d:" &
  10331                        //" you must first call fms_io_init")
  10332     endif
  10333 
  10334 !Make sure that the value of the scalar field is same across all ranks
  10335 !in an I/O domain pelist.
  10336     io_domain => null()

Page 397         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_I_0 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10337     io_domain => mpp_get_UG_io_domain(domain)
  10338     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
  10339     allocate(pelist(io_domain_npes))
  10340     call mpp_get_UG_domain_pelist(io_domain, &
  10341                                    pelist)
  10342     allocate(fdata_per_rank(io_domain_npes))
  10343     fdata_per_rank = 0.0
  10344     call mpp_gather((/fdata_0d/), &
  10345                     fdata_per_rank, &
  10346                     pelist)
  10347     if (mpp_pe() .eq. pelist(1)) then
  10348         if (maxval(fdata_per_rank) .ne. fdata_0d .or. &
  10349             minval(fdata_per_rank) .ne. fdata_0d) then
  10350             call mpp_error(FATAL, &
  10351                            "fms_io_unstructured_register_restart_field_i_0d:" &
  10352                            //" the scalar field data is not consistent across" &
  10353                            //" all ranks in the I/O domain pelist.")
  10354         endif
  10355     endif
  10356     io_domain => null()
  10357     deallocate(pelist)
  10358     deallocate(fdata_per_rank)
  10359 
  10360 !Set the dimension sizes for the field.  These correspond to:
  10361 !field_dimension_sizes(XIDX) = x-dimension size
  10362 !field_dimension_sizes(YIDX) = y-dimension size
  10363 !field_dimension_sizes(CIDX) = c-dimension size
  10364 !field_dimension_sizes(ZIDX) = z-dimension size
  10365 !field_dimension_sizes(HIDX) = h-dimension size
  10366 !field_dimension_sizes(TIDX) = t-dimension size
  10367 !field_dimension_sizes(UIDX) = u-dimension size
  10368 !field_dimension_sizes(CCIDX) = cc-dimension size
  10369     field_dimension_sizes = 1
  10370 
  10371 !Set the ordering of the dimensions for the field.
  10372     field_dimension_order(1) = TIDX
  10373 
  10374 !Add a field to a restart object (restart_file_type).  Get the index of the
  10375 !inputted field in the fileObj%var array.
  10376     call fms_io_unstructured_setup_one_field(fileObj, &
  10377                                              filename, &
  10378                                              fieldname, &
  10379                                              field_dimension_order, &
  10380                                              field_dimension_sizes, &
  10381                                              index_field, &
  10382                                              domain, &
  10383                                              mandatory=mandatory, &
  10384                                              data_default=data_default, &
  10385                                              longname=longname, &
  10386                                              units=units, &
  10387                                              read_only=read_only, &
  10388                                              owns_data=restart_owns_data)
  10389 
  10390 !Point to the inputted data and return the "index_field" for the field.
  10391     fileObj%p0di(fileObj%var(index_field)%siz(4),index_field)%p => fdata_0d
  10392     fileObj%var(index_field)%ndim = 0
  10393     restart_index = index_field

Page 398         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_I_0 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10394 
  10395     return
  10396 end function fms_io_unstructured_register_restart_field_i_0d


ENTRY POINTS

  Name                                                                      
                                                                            
 fms_io_mod_mp_fms_io_unstructured_register_restart_field_i_0d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATA_DEFAULT               Dummy  10297    R(8)            8           scalar   ARG,IN           10384                             
 DOMAIN                     Dummy  10295    DOMAINUG        544         scalar   ARG,TGT,IN       10337,10382                       
 FDATA_0D                   Dummy  10294    I(4)            4           scalar   ARG,TGT,IN       10344,10348,10349,10391           
 FDATA_PER_RANK             Local  10322    I(4)            4     1     1        ALC              10342,10343,10345,10348,10349,1035
                                                                                                  8                                 
 FIELDNAME                  Dummy  10293    CHAR                        scalar   ARG,IN           10378                             
 FIELD_DIMENSION_ORDER      Local  10325    I(4)            4     1     1        TGT              10372,10379                       
 FIELD_DIMENSION_SIZES      Local  10324    I(4)            4     1     8                         10369,10380                       
 FILENAME                   Dummy  10292    CHAR                        scalar   ARG,IN           10377                             
 FILEOBJ                    Dummy  10291    RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        10376,10391,10392                 
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_I_0D      Func   10291    I(4)            4           scalar   PRIV                                               
 INDEX_FIELD                Local  10323    I(4)            4           scalar                    10381,10391,10392,10393           
 IO_DOMAIN                  Local  10319    DOMAINUG        544         scalar   PTR              10336,10337,10338,10340,10356     
 IO_DOMAIN_NPES             Local  10320    I(4)            4           scalar                    10338,10339,10342                 
 LONGNAME                   Dummy  10298    CHAR                        scalar   ARG,IN           10385                             
 MANDATORY                  Dummy  10296    L(4)            4           scalar   ARG,IN           10383                             
 MAXVAL                     Func   10348                                scalar                    10348                             
 MINVAL                     Func   10349                                scalar                    10349                             
 PELIST                     Local  10321    I(4)            4     1     1        ALC              10339,10341,10346,10347,10357     
 READ_ONLY                  Dummy  10300    L(4)            4           scalar   ARG,IN           10387                             
 RESTART_INDEX              Local  10316    I(4)            4           scalar                    10393                             
 RESTART_OWNS_DATA          Dummy  10301    L(4)            4           scalar   ARG,IN           10388                             
 UNITS                      Dummy  10299    CHAR                        scalar   ARG,IN           10386                             

Page 399         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_I_0 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10397 
  10398 !------------------------------------------------------------------------------
  10399 !>Add an integer 1D field to a restart object (restart_file_type), where the
  10400 !!field is assumed to be along the unstructured axis.  Return
  10401 !!the index of the inputted field in the fileObj%var array.
  10402 function fms_io_unstructured_register_restart_field_i_1d(fileObj, &
  10403                                                          filename, &
  10404                                                          fieldname, &
  10405                                                          fdata_1d, &
  10406                                                          fdata_1d_axes, &
  10407                                                          domain, &
  10408                                                          mandatory, &
  10409                                                          data_default, &
  10410                                                          longname, &
  10411                                                          units, &
  10412                                                          read_only, &
  10413                                                          restart_owns_data) &
  10414                                                          result(restart_index)
  10415 
  10416 !Inputs/Outputs
  10417     type(restart_file_type),intent(inout)  :: fileObj           !<A restart object.
  10418     character(len=*),intent(in)            :: filename          !<The name of a file.
  10419     character(len=*),intent(in)            :: fieldname         !<The name of a field.
  10420     integer,dimension(:),intent(in),target :: fdata_1d          !<Some data.
  10421     integer(4),dimension(1)         :: fdata_1d_axes     !<An array describing the axes for the data.
  10422     type(domainUG),intent(in),target       :: domain            !<An unstructured mpp_domain.
  10423     logical,intent(in),optional            :: mandatory         !<Flag telling if the field is mandatory for the restart.
  10424     real,intent(in),optional               :: data_default      !<A default value for the data.
  10425     character(len=*),intent(in),optional   :: longname          !<A more descriptive name of the field.
  10426     character(len=*),intent(in),optional   :: units             !<Units for the field.
  10427     logical(4),intent(in),optional  :: read_only         !<Tells whether or not the variable will be written to the restart 
  10427 file.
  10428     logical(4),intent(in),optional  :: restart_owns_data !<Tells if the data will be deallocated when the restart object is 
  10428 deallocated.
  10429     integer(4)                      :: restart_index     !<Index of the inputted field in the fileObj%var array.
  10430 
  10431 !Local variables
  10432     integer(4)                 :: index_field           !<Index of the inputted field in the fileObj%var array.
  10433     integer(4),dimension(NIDX) :: field_dimension_sizes !<Array of dimension sizes for the field.
  10434 
  10435 !Make sure that the module has been initialized.
  10436     if (.not. module_is_initialized) then
  10437         call mpp_error(FATAL, &
  10438                        "fms_io_unstructured_register_restart_field_i_1d:" &
  10439                        //" you must first call fms_io_init")
  10440     endif
  10441 
  10442 !Make sure that at least one axis was registered to the restart object.
  10443     if (.not. allocated(fileObj%axes)) then
  10444         call mpp_error(FATAL, &
  10445                        "fms_io_unstructured_register_restart_field_i_1d:" &
  10446                        //" no axes have been registered for the restart" &
  10447                        //" object.")
  10448     endif
  10449 
  10450 !Make sure that the first dimension of the field is a "compressed" axis,
  10451 !and that it corresponds to an axis that has been registered to the

Page 400         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_I_1 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10452 !restart object.
  10453     field_dimension_sizes = 1
  10454     if (fdata_1d_axes(1) .eq. CIDX) then
  10455         if (.not. allocated(fileObj%axes(CIDX)%idx)) then
  10456             call mpp_error(FATAL, &
  10457                            "fms_io_unstructured_register_restart_field_i_1d:" &
  10458                            //" a compressed c-axis was not registered" &
  10459                            //" to the restart object.")
  10460         endif
  10461         if (size(fdata_1d,1) .ne. fileObj%axes(CIDX)%nelems_for_current_rank) then
  10462             call mpp_error(FATAL, &
  10463                            "fms_io_unstructured_register_restart_field_i_1d:" &
  10464                            //" the size of the input data does not" &
  10465                            //" match the size of the registered" &
  10466                            //" compressed c-axis.")
  10467         endif
  10468         field_dimension_sizes(CIDX) = size(fdata_1d,1)
  10469     elseif (fdata_1d_axes(1) .eq. HIDX) then
  10470         if (.not. allocated(fileObj%axes(HIDX)%idx)) then
  10471             call mpp_error(FATAL, &
  10472                            "fms_io_unstructured_register_restart_field_i_1d:" &
  10473                            //" a compressed h-axis was not registered" &
  10474                            //" to the restart object.")
  10475         endif
  10476         if (size(fdata_1d,1) .ne. fileObj%axes(HIDX)%nelems_for_current_rank) then
  10477             call mpp_error(FATAL, &
  10478                            "fms_io_unstructured_register_restart_field_i_1d:" &
  10479                            //" the size of the input data does not" &
  10480                            //" match the size of the registered" &
  10481                            //" compressed h-axis.")
  10482         endif
  10483         field_dimension_sizes(HIDX) = size(fdata_1d,1)
  10484     else
  10485         call mpp_error(FATAL, &
  10486                        "fms_io_unstructured_register_restart_field_i_1d:" &
  10487                        //" One dimensional fields must be compressed.")
  10488     endif
  10489 
  10490 !Add a field to a restart object (restart_file_type).  Get the index of the
  10491 !inputted field in the fileObj%var array.
  10492     call fms_io_unstructured_setup_one_field(fileObj, &
  10493                                              filename, &
  10494                                              fieldname, &
  10495                                              fdata_1d_axes, &
  10496                                              field_dimension_sizes, &
  10497                                              index_field, &
  10498                                              domain, &
  10499                                              mandatory=mandatory, &
  10500                                              data_default=data_default, &
  10501                                              longname=longname, &
  10502                                              units=units, &
  10503                                              read_only=read_only, &
  10504                                              owns_data=restart_owns_data)
  10505 
  10506 !Point to the inputted data and return the "index_field" for the field.
  10507     fileObj%p1di(fileObj%var(index_field)%siz(4),index_field)%p => fdata_1d
  10508     fileObj%var(index_field)%ndim = 1

Page 401         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_I_1 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10509     restart_index = index_field
  10510 
  10511     return
  10512 end function fms_io_unstructured_register_restart_field_i_1d


ENTRY POINTS

  Name                                                                      
                                                                            
 fms_io_mod_mp_fms_io_unstructured_register_restart_field_i_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   10443                                scalar                    10443,10455,10470                 
 DATA_DEFAULT               Dummy  10409    R(8)            8           scalar   ARG,IN           10500                             
 DOMAIN                     Dummy  10407    DOMAINUG        544         scalar   ARG,TGT,IN       10498                             
 FDATA_1D                   Dummy  10405    I(4)            4     1     1        ARG,TGT,IN       10461,10468,10476,10483,10507     
 FDATA_1D_AXES              Dummy  10406    I(4)            4     1     1        ARG,TGT,INOUT    10454,10469,10495                 
 FIELDNAME                  Dummy  10404    CHAR                        scalar   ARG,IN           10494                             
 FIELD_DIMENSION_SIZES      Local  10433    I(4)            4     1     8                         10453,10468,10483,10496           
 FILENAME                   Dummy  10403    CHAR                        scalar   ARG,IN           10493                             
 FILEOBJ                    Dummy  10402    RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        10443,10455,10461,10470,10476,1049
                                                                                                  2,10507,10508                     
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_I_1D      Func   10402    I(4)            4           scalar   PRIV                                               
 INDEX_FIELD                Local  10432    I(4)            4           scalar                    10497,10507,10508,10509           
 LONGNAME                   Dummy  10410    CHAR                        scalar   ARG,IN           10501                             
 MANDATORY                  Dummy  10408    L(4)            4           scalar   ARG,IN           10499                             
 READ_ONLY                  Dummy  10412    L(4)            4           scalar   ARG,IN           10503                             
 RESTART_INDEX              Local  10429    I(4)            4           scalar                    10509                             
 RESTART_OWNS_DATA          Dummy  10413    L(4)            4           scalar   ARG,IN           10504                             
 SIZE                       Func   10461                                scalar                    10461,10468,10476,10483           
 UNITS                      Dummy  10411    CHAR                        scalar   ARG,IN           10502                             

Page 402         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_I_1 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10513 
  10514 !------------------------------------------------------------------------------
  10515 !>Add an integer 2D field to a restart object (restart_file_type), where the
  10516 !!field's 1st axis assumed to be along the unstructured axis and the field's
  10517 !!2nd axis is assumed to be along the z-axis.  Return the index of the
  10518 !!inputted field in the fileObj%var array.
  10519 function fms_io_unstructured_register_restart_field_i_2d(fileObj, &
  10520                                                          filename, &
  10521                                                          fieldname, &
  10522                                                          fdata_2d, &
  10523                                                          fdata_2d_axes, &
  10524                                                          domain, &
  10525                                                          mandatory, &
  10526                                                          data_default, &
  10527                                                          longname, &
  10528                                                          units, &
  10529                                                          read_only, &
  10530                                                          restart_owns_data) &
  10531                                                          result(restart_index)
  10532 
  10533 !Inputs/Outputs
  10534     type(restart_file_type),intent(inout)    :: fileObj           !<A restart object.
  10535     character(len=*),intent(in)              :: filename          !<The name of a file.
  10536     character(len=*),intent(in)              :: fieldname         !<The name of a field.
  10537     integer,dimension(:,:),intent(in),target :: fdata_2d          !<Some data.
  10538     integer(4),dimension(2)           :: fdata_2d_axes     !<An array describing the axes for the data.
  10539     type(domainUG),intent(in),target         :: domain            !<An unstructured mpp_domain.
  10540     logical,intent(in),optional              :: mandatory         !<Flag telling if the field is mandatory for the restart.
  10541     real,intent(in),optional                 :: data_default      !<A default value for the data.
  10542     character(len=*),intent(in),optional     :: longname          !<A more descriptive name of the field.
  10543     character(len=*),intent(in),optional     :: units             !<Units for the field.
  10544     logical(4),intent(in),optional    :: read_only         !<Tells whether or not the variable will be written to the restar
  10544 t file.
  10545     logical(4),intent(in),optional    :: restart_owns_data !<Tells if the data will be deallocated when the restart object i
  10545 s deallocated.
  10546     integer(4)                        :: restart_index     !<Index of the inputted field in the fileObj%var array.
  10547 
  10548 !Local variables
  10549     integer(4)                 :: index_field           !<Index of the inputted field in the fileObj%var array.
  10550     integer(4),dimension(NIDX) :: field_dimension_sizes !<Array of dimension sizes for the field.
  10551 
  10552 !Make sure that the module has been initialized.
  10553     if (.not. module_is_initialized) then
  10554         call mpp_error(FATAL, &
  10555                        "fms_io_unstructured_register_restart_field_i_2d:" &
  10556                        //" you must first call fms_io_init")
  10557     endif
  10558 
  10559 !Make sure that at least one axis was registered to the restart object.
  10560     if (.not. allocated(fileObj%axes)) then
  10561         call mpp_error(FATAL, &
  10562                        "fms_io_unstructured_register_restart_field_i_2d:" &
  10563                        //" no axes have been registered for the restart" &
  10564                        //" object.")
  10565     endif
  10566 
  10567 !Make sure that the first dimension of the field is a "compressed" axis,

Page 403         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_I_2 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10568 !and that it corresponds to an axis that has been registered to the
  10569 !restart object.
  10570     field_dimension_sizes = 1
  10571     if (fdata_2d_axes(1) .eq. CIDX) then
  10572         if (.not. allocated(fileObj%axes(CIDX)%idx)) then
  10573             call mpp_error(FATAL, &
  10574                            "fms_io_unstructured_register_restart_field_i_2d:" &
  10575                            //" a compressed c-axis was not registered" &
  10576                            //" to the restart object.")
  10577         endif
  10578         if (size(fdata_2d,1) .ne. fileObj%axes(CIDX)%nelems_for_current_rank) then
  10579             call mpp_error(FATAL, &
  10580                            "fms_io_unstructured_register_restart_field_i_2d:" &
  10581                            //" the size of the input data does not" &
  10582                            //" match the size of the registered" &
  10583                            //" compressed c-axis.")
  10584         endif
  10585         field_dimension_sizes(CIDX) = size(fdata_2d,1)
  10586     elseif (fdata_2d_axes(1) .eq. HIDX) then
  10587         if (.not. allocated(fileObj%axes(HIDX)%idx)) then
  10588             call mpp_error(FATAL, &
  10589                            "fms_io_unstructured_register_restart_field_i_2d:" &
  10590                            //" a compressed h-axis was not registered" &
  10591                            //" to the restart object.")
  10592         endif
  10593         if (size(fdata_2d,1) .ne. fileObj%axes(HIDX)%nelems_for_current_rank) then
  10594             call mpp_error(FATAL, &
  10595                            "fms_io_unstructured_register_restart_field_i_2d:" &
  10596                            //" the size of the input data does not" &
  10597                            //" match the size of the registered" &
  10598                            //" compressed h-axis.")
  10599         endif
  10600         field_dimension_sizes(HIDX) = size(fdata_2d,1)
  10601     else
  10602         call mpp_error(FATAL, &
  10603                        "fms_io_unstructured_register_restart_field_i_2d:" &
  10604                        //" The first dimension of the field must be a" &
  10605                        //" compressed dimension.")
  10606     endif
  10607 
  10608 !Make sure that the second dimension of the inputted field corresponds to
  10609 !either a registered z- or cc-axis.
  10610     if (fdata_2d_axes(2) .eq. ZIDX) then
  10611         if (.not. associated(fileObj%axes(ZIDX)%data)) then
  10612             call mpp_error(FATAL, &
  10613                            "fms_io_unstructured_register_restart_field_i_2d:" &
  10614                            //" a z-axis was not registered to the" &
  10615                            //" restart object.")
  10616         endif
  10617         if (size(fdata_2d,2) .ne. size(fileObj%axes(ZIDX)%data)) then
  10618             call mpp_error(FATAL, &
  10619                            "fms_io_unstructured_register_restart_field_i_2d:" &
  10620                            //" the size of the input data does not" &
  10621                            //" match the size of the registered" &
  10622                            //" z-axis.")
  10623         endif
  10624         field_dimension_sizes(ZIDX) = size(fdata_2d,2)

Page 404         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_I_2 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10625     elseif (fdata_2d_axes(2) .eq. CCIDX) then
  10626         if (.not. associated(fileObj%axes(CCIDX)%data)) then
  10627             call mpp_error(FATAL, &
  10628                            "fms_io_unstructured_register_restart_field_i_2d:" &
  10629                            //" a cc-axis was not registered to the" &
  10630                            //" restart object.")
  10631         endif
  10632         if (size(fdata_2d,2) .ne. size(fileObj%axes(CCIDX)%data)) then
  10633             call mpp_error(FATAL, &
  10634                            "fms_io_unstructured_register_restart_field_i_2d:" &
  10635                            //" the size of the input data does not" &
  10636                            //" match the size of the registered" &
  10637                            //" cc-axis.")
  10638         endif
  10639         field_dimension_sizes(CCIDX) = size(fdata_2d,2)
  10640     else
  10641         call mpp_error(FATAL, &
  10642                        "fms_io_unstructured_register_restart_field_i_2d:" &
  10643                        //" unsupported axis parameter for the second" &
  10644                        //" dimension of the field.")
  10645     endif
  10646 
  10647 !Add a field to a restart object (restart_file_type).  Get the index of the
  10648 !inputted field in the fileObj%var array.
  10649     call fms_io_unstructured_setup_one_field(fileObj, &
  10650                                              filename, &
  10651                                              fieldname, &
  10652                                              fdata_2d_axes, &
  10653                                              field_dimension_sizes, &
  10654                                              index_field, &
  10655                                              domain, &
  10656                                              mandatory=mandatory, &
  10657                                              data_default=data_default, &
  10658                                              longname=longname, &
  10659                                              units=units, &
  10660                                              read_only=read_only, &
  10661                                              owns_data=restart_owns_data)
  10662 
  10663 !Point to the inputted data and return the "index_field" for the field.
  10664     fileObj%p2di(fileObj%var(index_field)%siz(4),index_field)%p => fdata_2d
  10665     fileObj%var(index_field)%ndim = 2
  10666     restart_index = index_field
  10667 
  10668     return
  10669 end function fms_io_unstructured_register_restart_field_i_2d

Page 405         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_I_2 
2021-06-01 08:54 Entry Points                    ..._io_unstructured_register_restart_field.inc



ENTRY POINTS

  Name                                                                      
                                                                            
 fms_io_mod_mp_fms_io_unstructured_register_restart_field_i_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   10560                                scalar                    10560,10572,10587                 
 ASSOCIATED                 Func   10611                                scalar                    10611,10626                       
 DATA_DEFAULT               Dummy  10526    R(8)            8           scalar   ARG,IN           10657                             
 DOMAIN                     Dummy  10524    DOMAINUG        544         scalar   ARG,TGT,IN       10655                             
 FDATA_2D                   Dummy  10522    I(4)            4     2     1        ARG,TGT,IN       10578,10585,10593,10600,10617,1062
                                                                                                  4,10632,10639,10664               
 FDATA_2D_AXES              Dummy  10523    I(4)            4     1     2        ARG,TGT,INOUT    10571,10586,10610,10625,10652     
 FIELDNAME                  Dummy  10521    CHAR                        scalar   ARG,IN           10651                             
 FIELD_DIMENSION_SIZES      Local  10550    I(4)            4     1     8                         10570,10585,10600,10624,10639,1065
                                                                                                  3                                 
 FILENAME                   Dummy  10520    CHAR                        scalar   ARG,IN           10650                             
 FILEOBJ                    Dummy  10519    RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,INOUT        10560,10572,10578,10587,10593,1061
                                                                                                  1,10617,10626,10632,10649,10664,10
                                                                                                  665                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_I_2D      Func   10519    I(4)            4           scalar   PRIV                                               
 INDEX_FIELD                Local  10549    I(4)            4           scalar                    10654,10664,10665,10666           
 LONGNAME                   Dummy  10527    CHAR                        scalar   ARG,IN           10658                             
 MANDATORY                  Dummy  10525    L(4)            4           scalar   ARG,IN           10656                             
 READ_ONLY                  Dummy  10529    L(4)            4           scalar   ARG,IN           10660                             
 RESTART_INDEX              Local  10546    I(4)            4           scalar                    10666                             
 RESTART_OWNS_DATA          Dummy  10530    L(4)            4           scalar   ARG,IN           10661                             
 SIZE                       Func   10578                                scalar                    10578,10585,10593,10600,10617,1062
                                                                                                  4,10632,10639                     
 UNITS                      Dummy  10528    CHAR                        scalar   ARG,IN           10659                             

Page 406         Source Listing                  FMS_IO_UNSTRUCTURED_REGISTER_RESTART_FIELD_I_2 
2021-06-01 08:54                                 ..._io_unstructured_register_restart_field.inc

  10670 
  10671 !------------------------------------------------------------------------------
  10672 
  10673 !----------
  10674 # 8607 "fms_io.F90" 2 
  10675 # 1 "./fms_io_unstructured_save_restart.inc" 1 
  10676 !***********************************************************************
  10677 !*                   GNU Lesser General Public License
  10678 !*
  10679 !* This file is part of the GFDL Flexible Modeling System (FMS).
  10680 !*
  10681 !* FMS is free software: you can redistribute it and/or modify it under
  10682 !* the terms of the GNU Lesser General Public License as published by
  10683 !* the Free Software Foundation, either version 3 of the License, or (at
  10684 !* your option) any later version.
  10685 !*
  10686 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  10687 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  10688 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  10689 !* for more details.
  10690 !*
  10691 !* You should have received a copy of the GNU Lesser General Public
  10692 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  10693 !***********************************************************************
  10694 !----------
  10695 !ug support
  10696 
  10697 !>Write out metadata and data for axes and fields to a restart file
  10698 !!associated with an unstructured mpp domain.
  10699 subroutine fms_io_unstructured_save_restart(fileObj, &
  10700                                             time_stamp, &
  10701                                             directory, &
  10702                                             append, &
  10703                                             time_level)
  10704 
  10705 !Inputs/Outputs
  10706     type(restart_file_type),intent(inout),target :: fileObj     !<A restart object.
  10707     character(len=*),intent(in),optional         :: time_stamp  !<A time stamp for the file.
  10708     character(len=*),intent(in),optional         :: directory   !<The directory where the restart file lives.
  10709     logical(4),intent(in),optional        :: append      !<Flag telling whether to append to or overwrite the restart file.
  10710     real,intent(in),optional                     :: time_level  !<A time level value (do not specify a kind value).
  10711 
  10712 !Optional arguments:
  10713 
  10714 !If neither append or time_level is present:
  10715 !  routine writes both meta data and field data.
  10716 
  10717 !If append is present and append=.true.:
  10718 !   Only field data is written.
  10719 !   The field data is appended to a new time level.
  10720 !   time_level must also be present and it must be >= 0.0
  10721 !   The value of time_level is written as a new value of the time axis data.
  10722 
  10723 !If time_level is present and time_level < 0.0:
  10724 !   A new file is opened and only the meta data is written.
  10725 
  10726 !If append is present and append=.false.:

Page 407         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  10727 !   Behaves the same was as if it were not present. That is, meta data is
  10728 !   written and whether or not field data is written is determined by time_level.
  10729 
  10730 !Local variables
  10731     type(domainUG),pointer                      :: domain            !<A pointer to an unstructured mpp domain.
  10732     integer(4)                           :: mpp_action        !<Parameter specifying how the file will be acted on (overwrit
  10732 ten or appended to).
  10733     logical(4)                           :: write_meta_data   !<Flag telling whether or not metadata will be written to the 
  10733 restart file.
  10734     logical(4)                           :: write_field_data  !<Flag telling whether or not field data will be written to th
  10734 e restart file.
  10735     character(len=128)                          :: dir               !<Directory where the restart file lives.
  10736     character(len=80)                           :: restartname       !<The name of the restart file.
  10737     character(len=256)                          :: restartpath       !<The restart file path (dir/file).
  10738     integer(4)                           :: funit             !<The file unit returned by mpp_open.
  10739     type(ax_type),pointer                       :: axis              !<A pointer to an fms_io_axis_type.
  10740     type(axistype)                              :: x_axis            !<An mpp_io_axis_type, used to write the x-axis to the 
  10740 restart file.
  10741     logical(4)                           :: x_axis_defined    !<Flag telling whether or not a x-axis has been define for the
  10741  inputted restart object.
  10742     type(axistype)                              :: y_axis            !<An mpp_io_axis_type, used to write the y-axis to the 
  10742 restart file.
  10743     logical(4)                           :: y_axis_defined    !<Flag telling whether or not a y-axis has been define for the
  10743  inputted restart object.
  10744     type(axistype)                              :: z_axis            !<An mpp_io_axis_type, used to write the z-axis to the 
  10744 restart file.
  10745     logical(4)                           :: z_axis_defined    !<Flag telling whether or not a z-axis has been define for the
  10745  inputted restart object.
  10746     type(axistype)                              :: cc_axis           !<An mpp_io_axis_type, used to write the cc-axis (???) 
  10746 to the restart file.
  10747     logical(4)                           :: cc_axis_defined   !<Flag telling whether or not a cc-axis (???) has been define 
  10747 for the inputted restart object.
  10748     type(axistype)                              :: c_axis            !<An mpp_io_axis_type, used to write the compressed c-a
  10748 xis (???) to the restart file.
  10749     logical(4)                           :: c_axis_defined    !<Flag telling whether or not a compressed c-axis (???) has be
  10749 en define for the inputted restart object.
  10750     type(axistype)                              :: h_axis            !<An mpp_io_axis_type, used to write the compressed h-a
  10750 xis (???) to the restart file.
  10751     logical(4)                           :: h_axis_defined    !<Flag telling whether or not a compressed h-axis (???) has be
  10751 en define for the inputted restart object.
  10752     type(axistype)                              :: t_axis            !<An mpp_io_axis_type, used to write the t-axis to the 
  10752 restart file.
  10753     type(var_type),pointer                      :: cur_var           !<A pointer to an fms_io_field_type.
  10754     integer(4)                           :: num_var_axes      !<Number of dimensions for a field.
  10755     type(axistype),dimension(4)                 :: var_axes          !<Array of axis for each field.
  10756     integer(4)                           :: cpack             !<(Number of bits in a real(8))/(Number of bits in a real)
  10757     integer(8),dimension(:),allocatable :: check_val         !<An array of check-sums of a field at each time level.
  10758     real                                        :: tlev              !<Time value for a time level (do not specify a kind va
  10758 lue).
  10759     real                                        :: r0d               !<Used to convert a scalar integer field into a scalar 
  10759 real field.
  10760     real,dimension(:),allocatable               :: r1d               !<Used to convert a 1D integer field into a 1D real fie
  10760 ld.
  10761     real,dimension(:,:),allocatable             :: r2d               !<Used to convert a 2D integer field into a 2D real fie
  10761 ld.
  10762     integer(4)                           :: i                 !<Loop variable.
  10763     integer(4)                           :: j                 !<Loop variable.

Page 408         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  10764     integer(4)                           :: k                 !<Loop variable.
  10765 
  10766 !Make sure at least one field was registered to the restart object.
  10767     if (.not. associated(fileObj%var)) then
  10768         call mpp_error(FATAL, &
  10769                        "fms_io_unstructured_save_restart:" &
  10770                        //" the restart object does not conatin any fields.")
  10771     endif
  10772 
  10773 !If all fields in the file are read only, then simply return without
  10774 !writing any data to the restart file.  If the restart file does not yet
  10775 !exist, it is not created.
  10776     if (all_field_read_only(fileObj)) then
  10777         return
  10778     endif
  10779 
  10780 !Make sure that at least one axis was registered to the restart object.
  10781     if (.not. allocated(fileObj%axes)) then
  10782         call mpp_error(FATAL, &
  10783                        "fms_io_unstructured_save_restart: there are no" &
  10784                        //" registered axes for the file "//trim(fileObj%name))
  10785     endif
  10786 
  10787 !Make sure that all registered axes are associated with the same
  10788 !unstructured domain.
  10789     domain => null()
  10790     do j = 1,size(fileObj%axes)
  10791         if (j .eq. CIDX .or. j .eq. HIDX .or. j .eq. UIDX) then
  10792             if (allocated(fileObj%axes(j)%idx)) then
  10793                 if (.not. associated(fileObj%axes(j)%domain_ug)) then
  10794                     call mpp_error(FATAL, &
  10795                                    "fms_io_unstructured_save_restart:" &
  10796                                    //" the axis "//trim(fileObj%axes(j)%name) &
  10797                                    //" in the file "//trim(fileObj%name) &
  10798                                    //" was not registered with an unstructured" &
  10799                                    //" mpp domain.")
  10800                 endif
  10801                 if (associated(domain)) then
  10802                     if (.not. (domain .EQ. fileObj%axes(j)%domain_ug)) then
  10803                         call mpp_error(FATAL, &
  10804                                        "fms_io_unstructured_save_restart:" &
  10805                                        //" two axes registered to same" &
  10806                                        //" restart file are associated with" &
  10807                                        //" different unstructured mpp domains.")
  10808                     endif
  10809                 else
  10810                     domain => fileObj%axes(j)%domain_ug
  10811                 endif
  10812             endif
  10813         else
  10814             if (associated(fileObj%axes(j)%data)) then
  10815                 if (.not. associated(fileObj%axes(j)%domain_ug)) then
  10816                     call mpp_error(FATAL, &
  10817                                    "fms_io_unstructured_save_restart:" &
  10818                                    //" the axis "//trim(fileObj%axes(j)%name) &
  10819                                    //" in the file "//trim(fileObj%name) &
  10820                                    //" was not registered with an unstructured" &

Page 409         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  10821                                    //" mpp domain.")
  10822                 endif
  10823                 if (associated(domain)) then
  10824                     if (.not. (domain .EQ. fileObj%axes(j)%domain_ug)) then
  10825                         call mpp_error(FATAL, &
  10826                                        "fms_io_unstructured_save_restart:" &
  10827                                        //" two axes registered to same" &
  10828                                        //" restart file are associated with" &
  10829                                        //" different unstructured mpp domains.")
  10830                     endif
  10831                 else
  10832                     domain => fileObj%axes(j)%domain_ug
  10833                 endif
  10834             endif
  10835         endif
  10836     enddo
  10837 
  10838 !Make sure that all registered fields are associated with the same
  10839 !unstructured domain that all axes were registered with.
  10840     do j = 1,fileObj%nvar
  10841         if (.not. associated(fileObj%var(j)%domain_ug)) then
  10842             call mpp_error(FATAL, &
  10843                            "fms_io_unstructured_save_restart:" &
  10844                            //" the field "//trim(fileObj%var(j)%name) &
  10845                            //" in the file "//trim(fileObj%name) &
  10846                            //" was not registered with an unstructured" &
  10847                            //" mpp domain.")
  10848         endif
  10849         if (.not. (domain .EQ. fileObj%var(j)%domain_ug)) then
  10850             call mpp_error(FATAL, &
  10851                            "fms_io_unstructured_save_restart:" &
  10852                            //" the unstructured domain associated with" &
  10853                            //" field "//trim(fileObj%var(j)%name) &
  10854                            //" in the file "//trim(fileObj%name) &
  10855                            //" does not match the unstructured domain" &
  10856                            //" associated with the registered axes.")
  10857         endif
  10858     enddo
  10859 
  10860 !If necessary, make sure a valid set of optional arguments was provided.
  10861     if (present(append)) then
  10862         if (append .and. .not. present(time_level)) then
  10863             call mpp_error(FATAL, &
  10864                            "fms_io_unstructured_save_compressed_restart:" &
  10865                            //" a time_level must be present when" &
  10866                            //" append=.true. for file "//trim(fileObj%name))
  10867         endif
  10868     endif
  10869 
  10870 !Determine whether or not metadata will be written to the restart file.  If
  10871 !no optional arguments are specified, metadata will be written to the file,
  10872 !with any old data overwritten.  If the optional append flag is true, then
  10873 !it is assumed that the metadata already exists in the file, and thus
  10874 !metadata will not be written to the file.
  10875     mpp_action = MPP_OVERWR
  10876     write_meta_data  = .true.
  10877     if (present(append)) then

Page 410         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  10878         if (append) then
  10879             mpp_action = MPP_APPEND
  10880             write_meta_data = .false.
  10881             if (time_level .lt. 0.0) then
  10882                 call mpp_error(FATAL, &
  10883                                "fms_io_unstructured_save_restart:" &
  10884                                //" the inputted time_level cannot be" &
  10885                                //" negative when append is .true." &
  10886                                //" for file "//trim(fileObj%name))
  10887             endif
  10888         endif
  10889     endif
  10890 
  10891 !Determine whether or not field data will be written to the restart file.
  10892 !Field data will be written to the restart file unless a negative
  10893 !time_level value is passed in.
  10894     write_field_data = .true.
  10895     if (present(time_level)) then
  10896         if (time_level .lt. 0) then
  10897             write_field_data = .false.
  10898         endif
  10899     endif
  10900 
  10901 !Set the directory where the restart file lives.  This defaults to
  10902 !"./RESTART".
  10903     dir = "RESTART"
  10904     if (present(directory)) then
  10905         dir = trim(directory)
  10906     endif
  10907 
  10908 !Set the name of the restart file excluding its path.
  10909 !time_stamp_restart is a module variable.
  10910     restartname = trim(fileObj%name)
  10911     if (time_stamp_restart) then
  10912         if (present(time_stamp)) then
  10913             if (len_trim(restartname) + len_trim(time_stamp) .gt. 79) then
  10914                 call mpp_error(FATAL, &
  10915                                "fms_io_unstructured_save_restart:" &
  10916                                //" length of restart file name including" &
  10917                                //" time stamp is greater than allowed" &
  10918                                //" restart file name length.")
  10919             endif
  10920             restartname = trim(time_stamp)//"."//trim(restartname)
  10921         endif
  10922     endif
  10923 
  10924 !Set the name of the restart file including the path to it.
  10925     if (len_trim(dir) .gt. 0) then
  10926         restartpath = trim(dir)//"/"//trim(restartname)
  10927     else
  10928         restartpath = trim(restartname)
  10929     endif
  10930 
  10931 !Open the restart file.
  10932     call mpp_open(funit, &
  10933                   trim(restartpath), &
  10934                   action=mpp_action, &

Page 411         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  10935                   form=form, &
  10936                   is_root_pe=fileObj%is_root_pe, &
  10937                   domain_ug=domain)
  10938 
  10939 !Write out the metadata for the axes and fields.
  10940     axis => null()
  10941     cur_var => null()
  10942     if (write_meta_data) then
  10943 
  10944 !If it is registered, then write out the metadata for the x-axis
  10945 !to the restart file.
  10946         if (associated(fileObj%axes(XIDX)%data)) then
  10947             axis => fileObj%axes(XIDX)
  10948             call mpp_write_meta(funit, &
  10949                                 x_axis, &
  10950                                 axis%name, &
  10951                                 axis%units, &
  10952                                 axis%longname, &
  10953                                 data=axis%data, &
  10954                                 cartesian="X")
  10955             axis => null()
  10956             x_axis_defined = .true.
  10957         else
  10958             x_axis_defined = .false.
  10959         endif
  10960 
  10961 !If it is registered, then write out the metadata for the y-axis
  10962 !to the restart file.
  10963         if (associated(fileObj%axes(YIDX)%data)) then
  10964             axis => fileObj%axes(YIDX)
  10965             call mpp_write_meta(funit, &
  10966                                 y_axis, &
  10967                                 axis%name, &
  10968                                 axis%units, &
  10969                                 axis%longname, &
  10970                                 data=axis%data, &
  10971                                 cartesian="Y")
  10972             axis => null()
  10973             y_axis_defined = .true.
  10974         else
  10975             y_axis_defined = .false.
  10976         endif
  10977 
  10978 !If it is registered, then write out the metadata for the z-axis
  10979 !to the restart file.
  10980         if (associated(fileObj%axes(ZIDX)%data)) then
  10981             axis => fileObj%axes(ZIDX)
  10982             call mpp_write_meta(funit, &
  10983                                 z_axis, &
  10984                                 axis%name, &
  10985                                 axis%units, &
  10986                                 axis%longname, &
  10987                                 data=axis%data, &
  10988                                 cartesian="Z")
  10989             axis => null()
  10990             z_axis_defined = .true.
  10991         else

Page 412         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  10992             z_axis_defined = .false.
  10993         endif
  10994 
  10995 !If it is registered, then write out the metadata for the cc-axis (???)
  10996 !to the restart file.
  10997         if (associated(fileObj%axes(CCIDX)%data)) then
  10998             axis => fileObj%axes(CCIDX)
  10999             call mpp_write_meta(funit, &
  11000                                 cc_axis, &
  11001                                 axis%name, &
  11002                                 axis%units, &
  11003                                 axis%longname, &
  11004                                 data=axis%data, &
  11005                                 cartesian="CC")
  11006             axis => null()
  11007             cc_axis_defined = .true.
  11008         else
  11009             cc_axis_defined = .false.
  11010         endif
  11011 
  11012 !If it is registered, then write out the metadata for the compressed
  11013 !c-axis to the restart file.
  11014         if (allocated(fileObj%axes(CIDX)%idx)) then
  11015             axis => fileObj%axes(CIDX)
  11016             call mpp_def_dim(funit, &
  11017                              trim(axis%dimlen_name), &
  11018                              axis%dimlen, &
  11019                              trim(axis%dimlen_lname), &
  11020                              (/(i,i=1,axis%dimlen)/))
  11021             call mpp_write_meta(funit, &
  11022                                 c_axis, &
  11023                                 axis%name, &
  11024                                 axis%units, &
  11025                                 axis%longname, &
  11026                                 data=axis%idx, &
  11027                                 compressed=axis%compressed, &
  11028                                 min=axis%imin)
  11029             axis => null()
  11030             c_axis_defined = .true.
  11031         else
  11032             c_axis_defined = .false.
  11033         endif
  11034 
  11035 !If it is registered, then write out the metadata for the compressed
  11036 !h-axis to the restart file.
  11037         if (allocated(fileObj%axes(HIDX)%idx)) then
  11038             axis => fileObj%axes(HIDX)
  11039             call mpp_def_dim(funit, &
  11040                              trim(axis%dimlen_name), &
  11041                              axis%dimlen, &
  11042                              trim(axis%dimlen_lname), &
  11043                              (/(i,i=1,axis%dimlen)/))
  11044             call mpp_write_meta(funit, &
  11045                                 h_axis, &
  11046                                 axis%name, &
  11047                                 axis%units, &
  11048                                 axis%longname, &

Page 413         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  11049                                 data=axis%idx, &
  11050                                 compressed=axis%compressed, &
  11051                                 min=axis%imin)
  11052             axis => null()
  11053             h_axis_defined = .true.
  11054         else
  11055             h_axis_defined = .false.
  11056         endif
  11057 
  11058 !Write out the time axis to the restart file.
  11059         if (associated(fileObj%axes(TIDX)%data)) then
  11060             axis => fileObj%axes(TIDX)
  11061             call mpp_write_meta(funit, &
  11062                                 t_axis, &
  11063                                 axis%name, &
  11064                                 units=axis%units, &
  11065                                 longname=axis%longname, &
  11066                                 cartesian="T", &
  11067                                 calendar=axis%calendar)
  11068             axis => null()
  11069         else
  11070             call mpp_write_meta(funit, &
  11071                                 t_axis, &
  11072                                 "Time", &
  11073                                 "time level", &
  11074                                 "Time", &
  11075                                 cartesian="T")
  11076         endif
  11077 
  11078 !Loop through the fields and write out the metadata.
  11079         do j = 1,fileObj%nvar
  11080 
  11081 !Point to the current field.
  11082             cur_var => fileObj%var(j)
  11083 
  11084 !Cycle to the next field if the current field is read only.
  11085             if (cur_var%read_only) then
  11086                 cur_var => null()
  11087                 cycle
  11088             endif
  11089 
  11090 !Make sure the field has a valid number of time levels.
  11091             if (cur_var%siz(4) .gt. 1 .and. cur_var%siz(4) .ne. &
  11092                 fileObj%max_ntime) then
  11093                 call mpp_error(FATAL, &
  11094                                "fms_io_unstructured_save_restart: " &
  11095                                //trim(cur_var%name)//" in file " &
  11096                                //trim(fileObj%name)//" has more than one" &
  11097                                //" time level, but the number of time levels" &
  11098                                //" is not equal to max_ntime.")
  11099             endif
  11100 
  11101 !Determine the dimensions for the field.  For a scalar field foo,
  11102 !it is assumed that foo = foo(t).  For non-scalar fields, time
  11103 !maybe added as the last dimension.
  11104             if (cur_var%ndim .eq. 0) then
  11105                 num_var_axes = 1

Page 414         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  11106                 var_axes(1) = t_axis
  11107             else
  11108                 num_var_axes = cur_var%ndim
  11109                 do k = 1,cur_var%ndim
  11110                     select case (cur_var%field_dimension_order(k))
  11111                         case (XIDX)
  11112                             var_axes(k) = x_axis
  11113                         case (YIDX)
  11114                             var_axes(k) = y_axis
  11115                         case (ZIDX)
  11116                             var_axes(k) = z_axis
  11117                         case (CCIDX)
  11118                             var_axes(k) = cc_axis
  11119                         case (CIDX)
  11120                             var_axes(k) = c_axis
  11121                         case (HIDX)
  11122                             var_axes(k) = h_axis
  11123                         case default
  11124                             call mpp_error(FATAL, &
  11125                                            "fms_io_unstructured_save_restart:" &
  11126                                            //" unsupported dimension type for" &
  11127                                            //" field "//trim(cur_var%name) &
  11128                                            //" in file "//trim(fileObj%name))
  11129                     end select
  11130                 enddo
  11131                 if (cur_var%siz(4) .eq. fileObj%max_ntime) then
  11132                     num_var_axes = num_var_axes + 1
  11133                     var_axes(num_var_axes) = t_axis
  11134                 endif
  11135             endif
  11136 
  11137 !Get the "pack size" for default real types, where
  11138 !pack_size = (Number of bits in a real(8))/(Number of bits in a real).
  11139             cpack = pack_size
  11140 
  11141 !For each time level, calculate a check-sum of the field data.
  11142 !Fields with integer(4) data are handled differently then real
  11143 !fields.  To signify an integer(4) field, set cpack = 0.
  11144             allocate(check_val(max(1,cur_var%siz(4))))
  11145             do k = 1,cur_var%siz(4)
  11146                 if (associated(fileObj%p0dr(k,j)%p)) then
  11147                     check_val(k) = mpp_chksum(fileObj%p0dr(k,j)%p, &
  11148                                               (/mpp_pe()/), &
  11149                                               mask_val=cur_var%default_data)
  11150                 elseif (associated(fileObj%p1dr(k,j)%p)) then
  11151                     check_val(k) = mpp_chksum(fileObj%p1dr(k,j)%p, &
  11152                                               mask_val=cur_var%default_data)
  11153                 elseif (associated(fileObj%p2dr(k,j)%p)) then
  11154                     check_val(k) = mpp_chksum(fileObj%p2dr(k,j)%p, &
  11155                                               mask_val=cur_var%default_data)
  11156                 elseif (associated(fileObj%p3dr(k,j)%p)) then
  11157                     check_val(k) = mpp_chksum(fileObj%p3dr(k,j)%p, &
  11158                                               mask_val=cur_var%default_data)
  11159                 elseif (associated(fileObj%p0di(k,j)%p)) then
  11160                     check_val(k) = int(fileObj%p0di(k,j)%p,kind=8)
  11161                     cpack = 0
  11162                 elseif (associated(fileObj%p1di(k,j)%p)) then

Page 415         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  11163                     check_val(k) = mpp_chksum(fileObj%p1di(k,j)%p, &
  11164                                               mask_val=cur_var%default_data)
  11165                     cpack = 0
  11166                 elseif (associated(fileObj%p2di(k,j)%p)) then
  11167                     check_val(k) = mpp_chksum(fileObj%p2di(k,j)%p, &
  11168                                               mask_val=cur_var%default_data)
  11169                     cpack = 0
  11170                 elseif (associated(fileObj%p3di(k,j)%p)) then
  11171                     call mpp_error(FATAL, &
  11172                                    "fms_io_unstructured_save_restart:" &
  11173                                    //" 3D integer restart fields are not" &
  11174                                    //" currently supported. (" &
  11175                                    //trim(cur_var%name)//" of file " &
  11176                                    //trim(fileObj%name)//")")
  11177                 else
  11178                     call mpp_error(FATAL, &
  11179                                    "fms_io_unstructured_save_restart:" &
  11180                                    //" there is no pointer associated with " &
  11181                                    //" the data of field " &
  11182                                    //trim(cur_var%name)//" of file " &
  11183                                    //trim(fileObj%name))
  11184                 endif
  11185             enddo
  11186 
  11187 !Write out the metadata from a field.  Check-sums are only written
  11188 !if field data is written to the restart file.
  11189             if (write_field_data) then ! Write checksums only if valid field data exists
  11190                 call mpp_write_meta(funit, &
  11191                                     cur_var%field, &
  11192                                     var_axes(1:num_var_axes), &
  11193                                     cur_var%name, &
  11194                                     cur_var%units, &
  11195                                     cur_var%longname, &
  11196                                     pack=cpack, &
  11197                                     checksum=check_val, &
  11198                                     fill=cur_var%default_data)
  11199             else
  11200                 call mpp_write_meta(funit, &
  11201                                     cur_var%field, &
  11202                                     var_axes(1:num_var_axes), &
  11203                                     cur_var%name, &
  11204                                     cur_var%units, &
  11205                                     cur_var%longname, &
  11206                                     pack=cpack, &
  11207                                     fill=cur_var%default_data)
  11208             endif
  11209             deallocate(check_val)
  11210             cur_var => null()
  11211         enddo
  11212 
  11213 !Write the axis data to the restart file.
  11214         if (x_axis_defined) then
  11215             call mpp_write(funit, &
  11216                            x_axis)
  11217         endif
  11218         if (y_axis_defined) then
  11219             call mpp_write(funit, &

Page 416         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  11220                            y_axis)
  11221         endif
  11222         if (c_axis_defined) then
  11223             call mpp_write(funit, &
  11224                            c_axis)
  11225         endif
  11226         if (h_axis_defined) then
  11227             call mpp_write(funit, &
  11228                            h_axis)
  11229         endif
  11230         if (cc_axis_defined) then
  11231             call mpp_write(funit, &
  11232                            cc_axis)
  11233         endif
  11234         if (z_axis_defined) then
  11235             call mpp_write(funit, &
  11236                            z_axis)
  11237         endif
  11238     endif
  11239 
  11240 !Write out field data to the restart file.
  11241     if (write_field_data) then
  11242 
  11243 !Loop through all time levels.
  11244         do k = 1,fileObj%max_ntime
  11245 
  11246 !Get the time value for the time level.
  11247             if (present(time_level)) then
  11248                 tlev = time_level
  11249             else
  11250                 tlev = real(k)
  11251             endif
  11252 
  11253 !Loop through the fields.
  11254             do j = 1,fileObj%nvar
  11255 
  11256 !Point to the current field.
  11257                 cur_var => fileObj%var(j)
  11258 
  11259 !Cycle to the next field if the current field is read only.
  11260                 if (cur_var%read_only) then
  11261                     cur_var => null()
  11262                     cycle
  11263                 endif
  11264 
  11265 !Write out the field data to the file.
  11266                 if (k .le. cur_var%siz(4)) then
  11267                     if (associated(fileObj%p0dr(k,j)%p)) then
  11268                         call mpp_write(funit, &
  11269                                        cur_var%field, &
  11270                                        fileObj%p0dr(k,j)%p, &
  11271                                        tlev)
  11272                     elseif (associated(fileObj%p1dr(k,j)%p)) then
  11273                         call mpp_io_unstructured_write(funit, &
  11274                                                        cur_var%field, &
  11275                                                        domain, &
  11276                                                        fileObj%p1dr(k,j)%p, &

Page 417         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  11277                                                        fileObj%axes(cur_var%field_dimension_order(1))%nelems, &
  11278                                                        tstamp=tlev, &
  11279                                                        default_data=cur_var%default_data)
  11280                     elseif (associated(fileObj%p2dr(k,j)%p)) then
  11281                         call mpp_io_unstructured_write(funit, &
  11282                                                        cur_var%field, &
  11283                                                        domain, &
  11284                                                        fileObj%p2dr(k,j)%p, &
  11285                                                        fileObj%axes(cur_var%field_dimension_order(1))%nelems, &
  11286                                                        tstamp=tlev, &
  11287                                                        default_data=cur_var%default_data)
  11288                     elseif (associated(fileObj%p3dr(k,j)%p)) then
  11289                         call mpp_io_unstructured_write(funit, &
  11290                                                        cur_var%field, &
  11291                                                        domain, &
  11292                                                        fileObj%p3dr(k,j)%p, &
  11293                                                        fileObj%axes(cur_var%field_dimension_order(1))%nelems, &
  11294                                                        tstamp=tlev, &
  11295                                                        default_data=cur_var%default_data)
  11296                     elseif (associated(fileObj%p0di(k,j)%p)) then
  11297                         r0d = real(fileObj%p0di(k,j)%p)
  11298                         call mpp_write(funit, &
  11299                                        cur_var%field, &
  11300                                        r0d, &
  11301                                        tlev)
  11302                     elseif (associated(fileObj%p1di(k,j)%p)) then
  11303                         allocate(r1d(size(fileObj%p1di(k,j)%p,1)))
  11304                         r1d = real(fileObj%p1di(k,j)%p)
  11305                         call mpp_io_unstructured_write(funit, &
  11306                                                        cur_var%field, &
  11307                                                        domain, &
  11308                                                        r1d, &
  11309                                                        fileObj%axes(cur_var%field_dimension_order(1))%nelems, &
  11310                                                        tstamp=tlev, &
  11311                                                        default_data=cur_var%default_data)
  11312                         deallocate(r1d)
  11313                     elseif (associated(fileObj%p2di(k,j)%p)) then
  11314                         allocate(r2d(size(fileObj%p2di(k,j)%p,1),size(fileObj%p2di(k,j)%p,2)))
  11315                         r2d = real(fileObj%p2di(k,j)%p)
  11316                         call mpp_io_unstructured_write(funit, &
  11317                                                        cur_var%field, &
  11318                                                        domain, &
  11319                                                        r2d, &
  11320                                                        fileObj%axes(cur_var%field_dimension_order(1))%nelems, &
  11321                                                        tstamp=tlev, &
  11322                                                        default_data=cur_var%default_data)
  11323                         deallocate(r2d)
  11324                     else
  11325                         call mpp_error(FATAL, &
  11326                                        "fms_io_unstructured_save_restart:" &
  11327                                        //" there is no pointer associated" &
  11328                                        //" with the data of field " &
  11329                                        //trim(cur_var%name)//" of file " &
  11330                                        //trim(fileObj%name))
  11331                     endif
  11332                 endif
  11333                 cur_var => null()

Page 418         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  11334             enddo
  11335         enddo
  11336     endif
  11337 
  11338 !Close the restart file.
  11339     call mpp_close(funit)
  11340 
  11341 !Nullify local pointers.
  11342     domain => null()
  11343     axis => null()
  11344     cur_var => null()
  11345 
  11346     return
  11347 end subroutine fms_io_unstructured_save_restart


ENTRY POINTS

  Name                                                       
                                                             
 fms_io_mod_mp_fms_io_unstructured_save_restart_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOCATED                  Func   10781                                scalar                    10781,10792,11014,11037           
 APPEND                     Dummy  10702    L(4)            4           scalar   ARG,IN           10861,10862,10877,10878           
 ASSOCIATED                 Func   10767                                scalar                    10767,10793,10801,10814,10815,1082
                                                                                                  3,10841,10946,10963,10980,10997,11
                                                                                                  059,11146,11150,11153,11156,11159,
                                                                                                  11162,11166,11170,11267,11272,1128
                                                                                                  0,11288,11296,11302,11313         
 AXIS                       Local  10739    AX_TYPE         1296        scalar   PTR              10940,10947,10950,10951,10952,1095
                                                                                                  3,10955,10964,10967,10968,10969,10
                                                                                                  970,10972,10981,10984,10985,10986,
                                                                                                  10987,10989,10998,11001,11002,1100
                                                                                                  3,11004,11006,11015,11017,11018,11
                                                                                                  019,11020,11023,11024,11025,11026,
                                                                                                  11027,11028,11029,11038,11040,1104
                                                                                                  1,11042,11043,11046,11047,11048,11
                                                                                                  049,11050,11051,11052,11060,11063,
                                                                                                  11064,11065,11067,11068,11343     
 CC_AXIS                    Local  10746    AXISTYPE        1424        scalar                    11000,11118,11232                 
 CC_AXIS_DEFINED            Local  10747    L(4)            4           scalar                    11007,11009,11230                 
 CHECK_VAL                  Local  10757    I(8)            8     1     1        ALC              11144,11147,11151,11154,11157,1116
                                                                                                  0,11163,11167,11197,11209         
 CPACK                      Local  10756    I(4)            4           scalar                    11139,11161,11165,11169,11196,1120
                                                                                                  6                                 
 CUR_VAR                    Local  10753    VAR_TYPE        3328        scalar   PTR              10941,11082,11085,11086,11091,1109
                                                                                                  5,11104,11108,11109,11110,11127,11
                                                                                                  131,11144,11145,11149,11152,11155,
                                                                                                  11158,11164,11168,11175,11182,1119
                                                                                                  1,11193,11194,11195,11198,11201,11
                                                                                                  203,11204,11205,11207,11210,11257,
                                                                                                  11260,11261,11266,11269,11274,1127

Page 419         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54 Symbol Table                    ./fms_io_unstructured_save_restart.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  7,11279,11282,11285,11287,11290,11
                                                                                                  293,11295,11299,11306,11309,11311,
                                                                                                  11317,11320,11322,11329,11333,1134
                                                                                                  4                                 
 C_AXIS                     Local  10748    AXISTYPE        1424        scalar                    11022,11120,11224                 
 C_AXIS_DEFINED             Local  10749    L(4)            4           scalar                    11030,11032,11222                 
 DIR                        Local  10735    CHAR            128         scalar                    10903,10905,10925,10926           
 DIRECTORY                  Dummy  10701    CHAR                        scalar   ARG,IN           10904,10905                       
 DOMAIN                     Local  10731    DOMAINUG        544         scalar   PTR              10789,10801,10802,10810,10823,1082
                                                                                                  4,10832,10849,10937,11275,11283,11
                                                                                                  291,11307,11318,11342             
 FILEOBJ                    Dummy  10699    RESTART_FILE_TYPE                                                                       
                                                            1376        scalar   ARG,TGT,INOUT    10767,10776,10781,10784,10790,1079
                                                                                                  2,10793,10796,10797,10802,10810,10
                                                                                                  814,10815,10818,10819,10824,10832,
                                                                                                  10840,10841,10844,10845,10849,1085
                                                                                                  3,10854,10866,10886,10910,10936,10
                                                                                                  946,10947,10963,10964,10980,10981,
                                                                                                  10997,10998,11014,11015,11037,1103
                                                                                                  8,11059,11060,11079,11082,11092,11
                                                                                                  096,11128,11131,11146,11147,11150,
                                                                                                  11151,11153,11154,11156,11157,1115
                                                                                                  9,11160,11162,11163,11166,11167,11
                                                                                                  170,11176,11183,11244,11254,11257,
                                                                                                  11267,11270,11272,11276,11277,1128
                                                                                                  0,11284,11285,11288,11292,11293,11
                                                                                                  296,11297,11302,11303,11304,11309,
                                                                                                  11313,11314,11315,11320,11330     
 FMS_IO_UNSTRUCTURED_SAVE_R                                                                                                         
 ESTART                     Subr   10699                                                                                            
 FUNIT                      Local  10738    I(4)            4           scalar                    10932,10948,10965,10982,10999,1101
                                                                                                  6,11021,11039,11044,11061,11070,11
                                                                                                  190,11200,11215,11219,11223,11227,
                                                                                                  11231,11235,11268,11273,11281,1128
                                                                                                  9,11298,11305,11316,11339         
 H_AXIS                     Local  10750    AXISTYPE        1424        scalar                    11045,11122,11228                 
 H_AXIS_DEFINED             Local  10751    L(4)            4           scalar                    11053,11055,11226                 
 I                          Local  10762    I(4)            4           scalar                                                      
 INT                        Func   11160                                scalar                    11160                             
 J                          Local  10763    I(4)            4           scalar                    10790,10791,10792,10793,10796,1080
                                                                                                  2,10810,10814,10815,10818,10824,10
                                                                                                  832,10840,10841,10844,10849,10853,
                                                                                                  11079,11082,11146,11147,11150,1115
                                                                                                  1,11153,11154,11156,11157,11159,11
                                                                                                  160,11162,11163,11166,11167,11170,
                                                                                                  11254,11257,11267,11270,11272,1127
                                                                                                  6,11280,11284,11288,11292,11296,11
                                                                                                  297,11302,11303,11304,11313,11314,
                                                                                                  11315                             
 K                          Local  10764    I(4)            4           scalar                    11109,11110,11112,11114,11116,1111
                                                                                                  8,11120,11122,11145,11146,11147,11
                                                                                                  150,11151,11153,11154,11156,11157,
                                                                                                  11159,11160,11162,11163,11166,1116
                                                                                                  7,11170,11244,11250,11266,11267,11
                                                                                                  270,11272,11276,11280,11284,11288,

Page 420         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54 Symbol Table                    ./fms_io_unstructured_save_restart.inc

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
                                                                                                  11292,11296,11297,11302,11303,1130
                                                                                                  4,11313,11314,11315               
 LEN_TRIM                   Func   10913                                scalar                    10913,10925                       
 MAX                        Func   11144                                scalar                    11144                             
 MPP_ACTION                 Local  10732    I(4)            4           scalar                    10875,10879,10934                 
 MPP_DOMAINUG_EQ            Func   10802    L(4)            4           scalar   PRIV             10802,10824,10849                 
 MPP_IO_UNSTRUCTURED_WRITE  Local  11273                                scalar   PRIV             233,11273,11281,11289,11305,11316 
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_1D                      Subr   11273                                         PRIV             11273,11305                       
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_2D                      Subr   11281                                         PRIV             11281,11316                       
 MPP_IO_UNSTRUCTURED_WRITE_                                                                                                         
 R8_3D                      Subr   11289                                         PRIV             11289                             
 NUM_VAR_AXES               Local  10754    I(4)            4           scalar                    11105,11108,11132,11133,11192,1120
                                                                                                  2                                 
 PRESENT                    Func   10861                                scalar                    10861,10862,10877,10895,10904,1091
                                                                                                  2,11247                           
 R0D                        Local  10759    R(8)            8           scalar                    11297,11300                       
 R1D                        Local  10760    R(8)            8     1     1        ALC              11303,11304,11308,11312           
 R2D                        Local  10761    R(8)            8     2     1        ALC              11314,11315,11319,11323           
 REAL                       Func   11250                                scalar                    11250,11297,11304,11315           
 RESTARTNAME                Local  10736    CHAR            80          scalar                    10910,10913,10920,10926,10928     
 RESTARTPATH                Local  10737    CHAR            256         scalar                    10926,10928,10933                 
 SIZE                       Func   10790                                scalar                    10790,11303,11314                 
 TIME_LEVEL                 Dummy  10703    R(8)            8           scalar   ARG,IN           10862,10881,10895,10896,11247,1124
                                                                                                  8                                 
 TIME_STAMP                 Dummy  10700    CHAR                        scalar   ARG,IN           10912,10913,10920                 
 TLEV                       Local  10758    R(8)            8           scalar                    11248,11250,11271,11278,11286,1129
                                                                                                  4,11301,11310,11321               
 TRIM                       Func   10784                                scalar                    10784,10796,10797,10818,10819,1084
                                                                                                  4,10845,10853,10854,10866,10886,10
                                                                                                  905,10910,10920,10926,10928,10933,
                                                                                                  11017,11019,11040,11042,11095,1109
                                                                                                  6,11127,11128,11175,11176,11182,11
                                                                                                  183,11329,11330                   
 T_AXIS                     Local  10752    AXISTYPE        1424        scalar                    11062,11071,11106,11133           
 VAR_AXES                   Local  10755    RECORD          1424  1     4        TGT              11106,11112,11114,11116,11118,1112
                                                                                                  0,11122,11133,11192,11202         
 WRITE_FIELD_DATA           Local  10734    L(4)            4           scalar                    10894,10897,11189,11241           
 WRITE_META_DATA            Local  10733    L(4)            4           scalar                    10876,10880,10942                 
 X_AXIS                     Local  10740    AXISTYPE        1424        scalar                    10949,11112,11216                 
 X_AXIS_DEFINED             Local  10741    L(4)            4           scalar                    10956,10958,11214                 
 Y_AXIS                     Local  10742    AXISTYPE        1424        scalar                    10966,11114,11220                 
 Y_AXIS_DEFINED             Local  10743    L(4)            4           scalar                    10973,10975,11218                 
 Z_AXIS                     Local  10744    AXISTYPE        1424        scalar                    10983,11116,11236                 
 Z_AXIS_DEFINED             Local  10745    L(4)            4           scalar                    10990,10992,11234                 

Page 421         Source Listing                  FMS_IO_UNSTRUCTURED_SAVE_RESTART
2021-06-01 08:54                                 ./fms_io_unstructured_save_restart.inc

  11348 
  11349 !----------
  11350 # 8608 "fms_io.F90" 2 
  11351 # 1 "./fms_io_unstructured_read.inc" 1 
  11352 !***********************************************************************
  11353 !*                   GNU Lesser General Public License
  11354 !*
  11355 !* This file is part of the GFDL Flexible Modeling System (FMS).
  11356 !*
  11357 !* FMS is free software: you can redistribute it and/or modify it under
  11358 !* the terms of the GNU Lesser General Public License as published by
  11359 !* the Free Software Foundation, either version 3 of the License, or (at
  11360 !* your option) any later version.
  11361 !*
  11362 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  11363 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  11364 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  11365 !* for more details.
  11366 !*
  11367 !* You should have received a copy of the GNU Lesser General Public
  11368 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11369 !***********************************************************************
  11370 !----------
  11371 !ug support
  11372 
  11373 !------------------------------------------------------------------------------
  11374 !>Read in a scalar field from a file associated with an unstructured mpp
  11375 !!domain.
  11376 subroutine fms_io_unstructured_read_r_scalar(filename, &
  11377                                              fieldname, &
  11378                                              fdata, &
  11379                                              domain, &
  11380                                              timelevel, &
  11381                                              start, &
  11382                                              nread, &
  11383                                              threading)
  11384 
  11385 !Inputs/Outputs
  11386     character(len=*),intent(in)              :: filename  !<The name of a file.
  11387     character(len=*),intent(in)              :: fieldname !<The name of field in the input file.
  11388     real,intent(inout)                       :: fdata     !<Data to be read in from the file.
  11389     type(domainUG),intent(in)                :: domain    !<Unstructured mpp domain associated with the input file.
  11390     integer,intent(in),optional              :: timelevel !<Time level at which the data is read in.
  11391     integer,dimension(:),intent(in),optional :: start     !<NetCDF "Corner" indices for the data.
  11392     integer,dimension(:),intent(in),optional :: nread     !<NetCDF "edge lengths" for the data.
  11393     integer,intent(in),optional              :: threading !<Threading flag.
  11394 
  11395 !Local variables
  11396     real,dimension(1) :: tmp    !<Dummy variable.
  11397     integer           :: tlevel !<Dummy variable.
  11398 
  11399 !Use the 1D case.
  11400     if (present(timelevel)) then
  11401         if (tlevel .le. 0) then
  11402             call mpp_error(FATAL, &
  11403                            "fms_io_unstructured_read_r_scalar:" &
  11404                            //" the inputted time level must be at" &

Page 422         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_SCALAR
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11405                            //" least one.")
  11406         endif
  11407         tlevel = timelevel
  11408     else
  11409         tlevel = 1
  11410     endif
  11411     call fms_io_unstructured_read_r_1D(filename, &
  11412                                        fieldname, &
  11413                                        tmp, &
  11414                                        domain, &
  11415                                        tlevel, &
  11416                                        start, &
  11417                                        nread, &
  11418                                        threading)
  11419     fdata = tmp(1)
  11420 
  11421     return
  11422 end subroutine fms_io_unstructured_read_r_scalar


ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_fms_io_unstructured_read_r_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOMAIN                     Dummy  11379    DOMAINUG        544         scalar   ARG,IN           11414                             
 FDATA                      Dummy  11378    R(8)            8           scalar   ARG,INOUT        11419                             
 FIELDNAME                  Dummy  11377    CHAR                        scalar   ARG,IN           11412                             
 FILENAME                   Dummy  11376    CHAR                        scalar   ARG,IN           11411                             
 FMS_IO_UNSTRUCTURED_READ_R                                                                                                         
 _SCALAR                    Subr   11376                                         PRIV                                               
 NREAD                      Dummy  11382    I(4)            4     1     1        ARG,IN           11417                             
 PRESENT                    Func   11400                                scalar                    11400                             
 START                      Dummy  11381    I(4)            4     1     1        ARG,IN           11416                             
 THREADING                  Dummy  11383    I(4)            4           scalar   ARG,IN           11418                             
 TIMELEVEL                  Dummy  11380    I(4)            4           scalar   ARG,IN           11400,11407                       
 TLEVEL                     Local  11397    I(4)            4           scalar                    11401,11407,11409,11415           
 TMP                        Local  11396    R(8)            8     1     1        TGT              11413,11419                       

Page 423         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_SCALAR
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11423 
  11424 !------------------------------------------------------------------------------
  11425 !>Read in a one dimensional "compressed" field from a file associated with
  11426 !!an unstructured mpp domain.
  11427 subroutine fms_io_unstructured_read_r_1D(filename, &
  11428                                          fieldname, &
  11429                                          fdata, &
  11430                                          domain, &
  11431                                          timelevel, &
  11432                                          start, &
  11433                                          nread, &
  11434                                          threading)
  11435 
  11436 !Inputs/Outputs
  11437     character(len=*),intent(in)              :: filename  !<The name of a file.
  11438     character(len=*),intent(in)              :: fieldname !<The name of field in the input file.
  11439     real,dimension(:),intent(inout)          :: fdata     !<Data to be read in from the file.
  11440     type(domainUG),intent(in)                :: domain    !<Unstructured mpp domain associated with the input file.
  11441     integer,intent(in),optional              :: timelevel !<Time level at which the data is read in.
  11442     integer,dimension(:),intent(in),optional :: start     !<NetCDF "Corner" indices for the data.
  11443     integer,dimension(:),intent(in),optional :: nread     !<NetCDF "edge lengths" for the data.
  11444     integer,intent(in),optional              :: threading !<Threading flag.
  11445 
  11446 !Local variables
  11447     logical(4)  :: found_file  !<Flag telling if the input file or any of its variants exist.
  11448     character(len=256) :: fname       !<Name of file that is actually found.
  11449     logical(4)  :: read_dist   !<Flag telling if the file is "distributed" (has I/O domain tile id appended onto the end).
  11450     integer(4)  :: funit       !<File unit for the inputted file.
  11451     integer(4)  :: file_index  !<Index of the inputted file in the "files_read" module array.
  11452     integer(4)  :: index_field !<Index of the inputted field in the files_read(file_index)%var array.
  11453 
  11454 !Make sure that the module has been initialized.
  11455     if (.not. module_is_initialized) then
  11456         call mpp_error(FATAL, &
  11457                        "fms_io_unstructured_read_r_1D:" &
  11458                        //" you must first call fms_io_init.")
  11459     endif
  11460 
  11461 !Get the full name of the input file.
  11462     found_file = fms_io_unstructured_get_file_name(filename, &
  11463                                                    fname, &
  11464                                                    read_dist, &
  11465                                                    domain)
  11466 
  11467 !If the file does not exit, then throw a fatal error.
  11468     if (.not. found_file) then
  11469         call mpp_error(FATAL, &
  11470                        "fms_io_unstructured_read_r_1D:" &
  11471                        //" file "//trim(filename) &
  11472                        //" (with the consideration of the domain tile ids)" &
  11473                        //" was not found.")
  11474     endif
  11475 
  11476 !Get the file unit and in the index of the file in the "files_read" module
  11477 !array.
  11478     call fms_io_unstructured_get_file_unit(fname, &
  11479                                            funit, &

Page 424         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_1D
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11480                                            file_index, &
  11481                                            read_dist, &
  11482                                            domain)
  11483 
  11484 !Get the index of the inputted field in the files_read(file_index)%var
  11485 !array.
  11486     call get_field_id(funit, &
  11487                       file_index, &
  11488                       fieldname, &
  11489                       index_field, &
  11490                       .false., &
  11491                       .false.)
  11492 
  11493 !Read in the field data.
  11494     if (files_read(file_index)%var(index_field)%is_dimvar) then
  11495         call mpp_get_axis_data(files_read(file_index)%var(index_field)%axis, &
  11496                                fdata)
  11497     else
  11498         call mpp_io_unstructured_read(funit, &
  11499                                       files_read(file_index)%var(index_field)%field, &
  11500                                       domain, &
  11501                                       fdata, &
  11502                                       timelevel, &
  11503                                       start, &
  11504                                       nread, &
  11505                                       threading)
  11506     endif
  11507 
  11508     return
  11509 end subroutine fms_io_unstructured_read_r_1D

Page 425         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_1D
2021-06-01 08:54 Entry Points                    ./fms_io_unstructured_read.inc



ENTRY POINTS

  Name                                                    
                                                          
 fms_io_mod_mp_fms_io_unstructured_read_r_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOMAIN                     Dummy  11430    DOMAINUG        544         scalar   ARG,IN           11465,11482,11500                 
 FDATA                      Dummy  11429    R(8)            8     1     1        ARG,INOUT        11496,11501                       
 FIELDNAME                  Dummy  11428    CHAR                        scalar   ARG,IN           11488                             
 FILENAME                   Dummy  11427    CHAR                        scalar   ARG,IN           11462,11471                       
 FILE_INDEX                 Local  11451    I(4)            4           scalar                    11480,11487,11494,11495,11499     
 FMS_IO_UNSTRUCTURED_READ_R                                                                                                         
 _1D                        Subr   11427                                         PRIV             11411,11723,11763                 
 FNAME                      Local  11448    CHAR            256         scalar                    11463,11478                       
 FOUND_FILE                 Local  11447    L(4)            4           scalar                    11462,11468                       
 FUNIT                      Local  11450    I(4)            4           scalar                    11479,11486,11498                 
 INDEX_FIELD                Local  11452    I(4)            4           scalar                    11489,11494,11495,11499           
 MPP_IO_UNSTRUCTURED_READ   Local  11498                                scalar   PRIV             234,11498,11585,11672             
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 8_1D                       Subr   11498                                         PRIV             11498                             
 NREAD                      Dummy  11433    I(4)            4     1     1        ARG,IN           11504                             
 READ_DIST                  Local  11449    L(4)            4           scalar                    11464,11481                       
 START                      Dummy  11432    I(4)            4     1     1        ARG,IN           11503                             
 THREADING                  Dummy  11434    I(4)            4           scalar   ARG,IN           11505                             
 TIMELEVEL                  Dummy  11431    I(4)            4           scalar   ARG,IN           11502                             
 TRIM                       Func   11471                                scalar                    11471                             

Page 426         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_1D
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11510 
  11511 !------------------------------------------------------------------------------
  11512 !>Read in a two dimensional "compressed" field from a file associated with
  11513 !!an unstructured mpp domain.
  11514 subroutine fms_io_unstructured_read_r_2D(filename, &
  11515                                          fieldname, &
  11516                                          fdata, &
  11517                                          domain, &
  11518                                          timelevel, &
  11519                                          start, &
  11520                                          nread, &
  11521                                          threading)
  11522 
  11523 !Inputs/Outputs
  11524     character(len=*),intent(in)              :: filename  !<The name of a file.
  11525     character(len=*),intent(in)              :: fieldname !<The name of field in the input file.
  11526     real,dimension(:,:),intent(inout)        :: fdata     !<Data to be read in from the file.
  11527     type(domainUG),intent(in)                :: domain    !<Unstructured mpp domain associated with the input file.
  11528     integer,intent(in),optional              :: timelevel !<Time level at which the data is read in.
  11529     integer,dimension(:),intent(in),optional :: start     !<NetCDF "Corner" indices for the data.
  11530     integer,dimension(:),intent(in),optional :: nread     !<NetCDF "edge lengths" for the data.
  11531     integer,intent(in),optional              :: threading !<Threading flag.
  11532 
  11533 !Local variables
  11534     logical(4)  :: found_file  !<Flag telling if the input file or any of its variants exist.
  11535     character(len=256) :: fname       !<Name of file that is actually found.
  11536     logical(4)  :: read_dist   !<Flag telling if the file is "distributed" (has I/O domain tile id appended onto the end).
  11537     integer(4)  :: funit       !<File unit for the inputted file.
  11538     integer(4)  :: file_index  !<Index of the inputted file in the "files_read" module array.
  11539     integer(4)  :: index_field !<Index of the inputted field in the files_read(file_index)%var array.
  11540 
  11541 !Make sure that the module has been initialized.
  11542     if (.not. module_is_initialized) then
  11543         call mpp_error(FATAL, &
  11544                        "fms_io_unstructured_read_r_2D:" &
  11545                        //" you must first call fms_io_init.")
  11546     endif
  11547 
  11548 !Get the full name of the input file.
  11549     found_file = fms_io_unstructured_get_file_name(filename, &
  11550                                                    fname, &
  11551                                                    read_dist, &
  11552                                                    domain)
  11553 
  11554 !If the file does not exit, then throw a fatal error.
  11555     if (.not. found_file) then
  11556         call mpp_error(FATAL, &
  11557                        "fms_io_unstructured_read_r_2D:" &
  11558                        //" file "//trim(filename) &
  11559                        //" (with the consideration of the domain tile ids)" &
  11560                        //" was not found.")
  11561     endif
  11562 
  11563 !Get the file unit and in the index of the file in the "files_read" module
  11564 !array.
  11565     call fms_io_unstructured_get_file_unit(fname, &
  11566                                            funit, &

Page 427         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_2D
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11567                                            file_index, &
  11568                                            read_dist, &
  11569                                            domain)
  11570 
  11571 !Get the index of the inputted field in the files_read(file_index)%var
  11572 !array.
  11573     call get_field_id(funit, &
  11574                       file_index, &
  11575                       fieldname, &
  11576                       index_field, &
  11577                       .false., &
  11578                       .false.)
  11579 
  11580 !Read in the field data.
  11581     if (files_read(file_index)%var(index_field)%is_dimvar) then
  11582         call mpp_get_axis_data(files_read(file_index)%var(index_field)%axis, &
  11583                                fdata(:,1))
  11584     else
  11585         call mpp_io_unstructured_read(funit, &
  11586                                       files_read(file_index)%var(index_field)%field, &
  11587                                       domain, &
  11588                                       fdata, &
  11589                                       timelevel, &
  11590                                       start, &
  11591                                       nread, &
  11592                                       threading)
  11593     endif
  11594 
  11595     return
  11596 end subroutine fms_io_unstructured_read_r_2D

Page 428         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_2D
2021-06-01 08:54 Entry Points                    ./fms_io_unstructured_read.inc



ENTRY POINTS

  Name                                                    
                                                          
 fms_io_mod_mp_fms_io_unstructured_read_r_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOMAIN                     Dummy  11517    DOMAINUG        544         scalar   ARG,IN           11552,11569,11587                 
 FDATA                      Dummy  11516    R(8)            8     2     1        ARG,INOUT        11583,11588                       
 FIELDNAME                  Dummy  11515    CHAR                        scalar   ARG,IN           11575                             
 FILENAME                   Dummy  11514    CHAR                        scalar   ARG,IN           11549,11558                       
 FILE_INDEX                 Local  11538    I(4)            4           scalar                    11567,11574,11581,11582,11586     
 FMS_IO_UNSTRUCTURED_READ_R                                                                                                         
 _2D                        Subr   11514                                         PRIV             11806                             
 FNAME                      Local  11535    CHAR            256         scalar                    11550,11565                       
 FOUND_FILE                 Local  11534    L(4)            4           scalar                    11549,11555                       
 FUNIT                      Local  11537    I(4)            4           scalar                    11566,11573,11585                 
 INDEX_FIELD                Local  11539    I(4)            4           scalar                    11576,11581,11582,11586           
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 8_2D                       Subr   11585                                         PRIV             11585                             
 NREAD                      Dummy  11520    I(4)            4     1     1        ARG,IN           11591                             
 READ_DIST                  Local  11536    L(4)            4           scalar                    11551,11568                       
 START                      Dummy  11519    I(4)            4     1     1        ARG,IN           11590                             
 THREADING                  Dummy  11521    I(4)            4           scalar   ARG,IN           11592                             
 TIMELEVEL                  Dummy  11518    I(4)            4           scalar   ARG,IN           11589                             
 TRIM                       Func   11558                                scalar                    11558                             

Page 429         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_2D
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11597 
  11598 !------------------------------------------------------------------------------
  11599 !>Read in a three dimensional "compressed" field from a file associated with
  11600 !!an unstructured mpp domain.
  11601 subroutine fms_io_unstructured_read_r_3D(filename, &
  11602                                          fieldname, &
  11603                                          fdata, &
  11604                                          domain, &
  11605                                          timelevel, &
  11606                                          start, &
  11607                                          nread, &
  11608                                          threading)
  11609 
  11610 !Inputs/Outputs
  11611     character(len=*),intent(in)              :: filename  !<The name of a file.
  11612     character(len=*),intent(in)              :: fieldname !<The name of field in the input file.
  11613     real,dimension(:,:,:),intent(inout)      :: fdata     !<Data to be read in from the file.
  11614     type(domainUG),intent(in)                :: domain    !<Unstructured mpp domain associated with the input file.
  11615     integer,intent(in),optional              :: timelevel !<Time level at which the data is read in.
  11616     integer,dimension(:),intent(in),optional :: start     !<NetCDF "Corner" indices for the data.
  11617     integer,dimension(:),intent(in),optional :: nread     !<NetCDF "edge lengths" for the data.
  11618     integer,intent(in),optional              :: threading !<Threading flag.
  11619 
  11620 !Local variables
  11621     logical(4)  :: found_file  !<Flag telling if the input file or any of its variants exist.
  11622     character(len=256) :: fname       !<Name of file that is actually found.
  11623     logical(4)  :: read_dist   !<Flag telling if the file is "distributed" (has I/O domain tile id appended onto the end).
  11624     integer(4)  :: funit       !<File unit for the inputted file.
  11625     integer(4)  :: file_index  !<Index of the inputted file in the "files_read" module array.
  11626     integer(4)  :: index_field !<Index of the inputted field in the files_read(file_index)%var array.
  11627 
  11628 !Make sure that the module has been initialized.
  11629     if (.not. module_is_initialized) then
  11630         call mpp_error(FATAL, &
  11631                        "fms_io_unstructured_read_r_3D:" &
  11632                        //" you must first call fms_io_init.")
  11633     endif
  11634 
  11635 !Get the full name of the input file.
  11636     found_file = fms_io_unstructured_get_file_name(filename, &
  11637                                                    fname, &
  11638                                                    read_dist, &
  11639                                                    domain)
  11640 
  11641 !If the file does not exit, then throw a fatal error.
  11642     if (.not. found_file) then
  11643         call mpp_error(FATAL, &
  11644                        "fms_io_unstructured_read_r_3D:" &
  11645                        //" file "//trim(filename) &
  11646                        //" (with the consideration of the domain tile ids)" &
  11647                        //" was not found.")
  11648     endif
  11649 
  11650 !Get the file unit and in the index of the file in the "files_read" module
  11651 !array.
  11652     call fms_io_unstructured_get_file_unit(fname, &
  11653                                            funit, &

Page 430         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_3D
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11654                                            file_index, &
  11655                                            read_dist, &
  11656                                            domain)
  11657 
  11658 !Get the index of the inputted field in the files_read(file_index)%var
  11659 !array.
  11660     call get_field_id(funit, &
  11661                       file_index, &
  11662                       fieldname, &
  11663                       index_field, &
  11664                       .false., &
  11665                       .false.)
  11666 
  11667 !Read in the field data.
  11668     if (files_read(file_index)%var(index_field)%is_dimvar) then
  11669         call mpp_get_axis_data(files_read(file_index)%var(index_field)%axis, &
  11670                                fdata(:,1,1))
  11671     else
  11672         call mpp_io_unstructured_read(funit, &
  11673                                       files_read(file_index)%var(index_field)%field, &
  11674                                       domain, &
  11675                                       fdata, &
  11676                                       timelevel, &
  11677                                       start, &
  11678                                       nread, &
  11679                                       threading)
  11680     endif
  11681 
  11682     return
  11683 end subroutine fms_io_unstructured_read_r_3D

Page 431         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_3D
2021-06-01 08:54 Entry Points                    ./fms_io_unstructured_read.inc



ENTRY POINTS

  Name                                                    
                                                          
 fms_io_mod_mp_fms_io_unstructured_read_r_3d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOMAIN                     Dummy  11604    DOMAINUG        544         scalar   ARG,IN           11639,11656,11674                 
 FDATA                      Dummy  11603    R(8)            8     3     1        ARG,INOUT        11670,11675                       
 FIELDNAME                  Dummy  11602    CHAR                        scalar   ARG,IN           11662                             
 FILENAME                   Dummy  11601    CHAR                        scalar   ARG,IN           11636,11645                       
 FILE_INDEX                 Local  11625    I(4)            4           scalar                    11654,11661,11668,11669,11673     
 FMS_IO_UNSTRUCTURED_READ_R                                                                                                         
 _3D                        Subr   11601                                         PRIV                                               
 FNAME                      Local  11622    CHAR            256         scalar                    11637,11652                       
 FOUND_FILE                 Local  11621    L(4)            4           scalar                    11636,11642                       
 FUNIT                      Local  11624    I(4)            4           scalar                    11653,11660,11672                 
 INDEX_FIELD                Local  11626    I(4)            4           scalar                    11663,11668,11669,11673           
 MPP_IO_UNSTRUCTURED_READ_R                                                                                                         
 8_3D                       Subr   11672                                         PRIV             11672                             
 NREAD                      Dummy  11607    I(4)            4     1     1        ARG,IN           11678                             
 READ_DIST                  Local  11623    L(4)            4           scalar                    11638,11655                       
 START                      Dummy  11606    I(4)            4     1     1        ARG,IN           11677                             
 THREADING                  Dummy  11608    I(4)            4           scalar   ARG,IN           11679                             
 TIMELEVEL                  Dummy  11605    I(4)            4           scalar   ARG,IN           11676                             
 TRIM                       Func   11645                                scalar                    11645                             

Page 432         Source Listing                  FMS_IO_UNSTRUCTURED_READ_R_3D
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11684 
  11685 !------------------------------------------------------------------------------
  11686 !>Read in a scalar field from a file associated with an unstructured mpp
  11687 !!domain.
  11688 subroutine fms_io_unstructured_read_i_scalar(filename, &
  11689                                              fieldname, &
  11690                                              fdata, &
  11691                                              domain, &
  11692                                              timelevel, &
  11693                                              start, &
  11694                                              nread, &
  11695                                              threading)
  11696 
  11697 !Inputs/Outputs
  11698     character(len=*),intent(in)              :: filename  !<The name of a file.
  11699     character(len=*),intent(in)              :: fieldname !<The name of field in the input file.
  11700     integer,intent(inout)                    :: fdata     !<Data to be read in from the file.
  11701     type(domainUG),intent(in)                :: domain    !<Unstructured mpp domain associated with the input file.
  11702     integer,intent(in),optional              :: timelevel !<Time level at which the data is read in.
  11703     integer,dimension(:),intent(in),optional :: start     !<NetCDF "Corner" indices for the data.
  11704     integer,dimension(:),intent(in),optional :: nread     !<NetCDF "edge lengths" for the data.
  11705     integer,intent(in),optional              :: threading !<Threading flag.
  11706 
  11707 !Local variables
  11708     real,dimension(1) :: tmp    !<Dummy variable.
  11709     integer           :: tlevel !<Dummy variable.
  11710 
  11711 !Read in the data.
  11712     if (present(timelevel)) then
  11713         if (tlevel .le. 0) then
  11714             call mpp_error(FATAL, &
  11715                            "fms_io_unstructured_read_i_scalar:" &
  11716                            //" the inputted time level must be at" &
  11717                            //" least one.")
  11718         endif
  11719         tlevel = timelevel
  11720     else
  11721         tlevel = 1
  11722     endif
  11723     call fms_io_unstructured_read_r_1D(filename, &
  11724                                        fieldname, &
  11725                                        tmp, &
  11726                                        domain, &
  11727                                        tlevel, &
  11728                                        start, &
  11729                                        nread, &
  11730                                        threading)
  11731     fdata = ceiling(tmp(1))
  11732 
  11733     return
  11734 end subroutine fms_io_unstructured_read_i_scalar

Page 433         Source Listing                  FMS_IO_UNSTRUCTURED_READ_I_SCALAR
2021-06-01 08:54 Entry Points                    ./fms_io_unstructured_read.inc



ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_fms_io_unstructured_read_i_scalar_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CEILING                    Func   11731                                scalar                    11731                             
 DOMAIN                     Dummy  11691    DOMAINUG        544         scalar   ARG,IN           11726                             
 FDATA                      Dummy  11690    I(4)            4           scalar   ARG,INOUT        11731                             
 FIELDNAME                  Dummy  11689    CHAR                        scalar   ARG,IN           11724                             
 FILENAME                   Dummy  11688    CHAR                        scalar   ARG,IN           11723                             
 FMS_IO_UNSTRUCTURED_READ_I                                                                                                         
 _SCALAR                    Subr   11688                                         PRIV                                               
 NREAD                      Dummy  11694    I(4)            4     1     1        ARG,IN           11729                             
 PRESENT                    Func   11712                                scalar                    11712                             
 START                      Dummy  11693    I(4)            4     1     1        ARG,IN           11728                             
 THREADING                  Dummy  11695    I(4)            4           scalar   ARG,IN           11730                             
 TIMELEVEL                  Dummy  11692    I(4)            4           scalar   ARG,IN           11712,11719                       
 TLEVEL                     Local  11709    I(4)            4           scalar                    11713,11719,11721,11727           
 TMP                        Local  11708    R(8)            8     1     1        TGT              11725,11731                       

Page 434         Source Listing                  FMS_IO_UNSTRUCTURED_READ_I_SCALAR
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11735 
  11736 !------------------------------------------------------------------------------
  11737 !>Read in a one dimensional "compressed" field from a file associated with
  11738 !!an unstructured mpp domain.
  11739 subroutine fms_io_unstructured_read_i_1D(filename, &
  11740                                          fieldname, &
  11741                                          fdata, &
  11742                                          domain, &
  11743                                          timelevel, &
  11744                                          start, &
  11745                                          nread, &
  11746                                          threading)
  11747 
  11748 !Inputs/Outputs
  11749     character(len=*),intent(in)              :: filename  !<The name of a file.
  11750     character(len=*),intent(in)              :: fieldname !<The name of field in the input file.
  11751     integer,dimension(:),intent(inout)       :: fdata     !<Data to be read in from the file.
  11752     type(domainUG),intent(in)                :: domain    !<Unstructured mpp domain associated with the input file.
  11753     integer,intent(in),optional              :: timelevel !<Time level at which the data is read in.
  11754     integer,dimension(:),intent(in),optional :: start     !<NetCDF "Corner" indices for the data.
  11755     integer,dimension(:),intent(in),optional :: nread     !<NetCDF "edge lengths" for the data.
  11756     integer,intent(in),optional              :: threading !<Threading flag.
  11757 
  11758 !Local variables
  11759     real,dimension(size(fdata)) :: tmp !<Dummy variable.
  11760     integer(4)           :: i   !<Loop variable.
  11761 
  11762 !Read in the data.
  11763     call fms_io_unstructured_read_r_1D(filename, &
  11764                                        fieldname, &
  11765                                        tmp, &
  11766                                        domain, &
  11767                                        timelevel, &
  11768                                        start, &
  11769                                        nread, &
  11770                                        threading)
  11771     do i = 1,size(fdata)
  11772         fdata(i) = ceiling(tmp(i))
  11773     enddo
  11774 
  11775     return
  11776 end subroutine fms_io_unstructured_read_i_1D

Page 435         Source Listing                  FMS_IO_UNSTRUCTURED_READ_I_1D
2021-06-01 08:54 Entry Points                    ./fms_io_unstructured_read.inc



ENTRY POINTS

  Name                                                    
                                                          
 fms_io_mod_mp_fms_io_unstructured_read_i_1d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CEILING                    Func   11772                                scalar                    11772                             
 DOMAIN                     Dummy  11742    DOMAINUG        544         scalar   ARG,IN           11766                             
 FDATA                      Dummy  11741    I(4)            4     1     1        ARG,INOUT        11759,11771,11772                 
 FIELDNAME                  Dummy  11740    CHAR                        scalar   ARG,IN           11764                             
 FILENAME                   Dummy  11739    CHAR                        scalar   ARG,IN           11763                             
 FMS_IO_UNSTRUCTURED_READ_I                                                                                                         
 _1D                        Subr   11739                                         PRIV                                               
 I                          Local  11760    I(4)            4           scalar                    11771,11772                       
 NREAD                      Dummy  11745    I(4)            4     1     1        ARG,IN           11769                             
 SIZE                       Func   11759                                scalar                    11759,11771                       
 START                      Dummy  11744    I(4)            4     1     1        ARG,IN           11768                             
 THREADING                  Dummy  11746    I(4)            4           scalar   ARG,IN           11770                             
 TIMELEVEL                  Dummy  11743    I(4)            4           scalar   ARG,IN           11767                             
 TMP                        Local  11759    R(8)            8     1     0        TGT              11765,11772                       

Page 436         Source Listing                  FMS_IO_UNSTRUCTURED_READ_I_1D
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11777 
  11778 !------------------------------------------------------------------------------
  11779 !>Read in a two dimensional "compressed" field from a file associated with
  11780 !!an unstructured mpp domain.
  11781 subroutine fms_io_unstructured_read_i_2D(filename, &
  11782                                          fieldname, &
  11783                                          fdata, &
  11784                                          domain, &
  11785                                          timelevel, &
  11786                                          start, &
  11787                                          nread, &
  11788                                          threading)
  11789 
  11790 !Inputs/Outputs
  11791     character(len=*),intent(in)              :: filename  !<The name of a file.
  11792     character(len=*),intent(in)              :: fieldname !<The name of field in the input file.
  11793     integer,dimension(:,:),intent(inout)     :: fdata     !<Data to be read in from the file.
  11794     type(domainUG),intent(in)                :: domain    !<Unstructured mpp domain associated with the input file.
  11795     integer,intent(in),optional              :: timelevel !<Time level at which the data is read in.
  11796     integer,dimension(:),intent(in),optional :: start     !<NetCDF "Corner" indices for the data.
  11797     integer,dimension(:),intent(in),optional :: nread     !<NetCDF "edge lengths" for the data.
  11798     integer,intent(in),optional              :: threading !<Threading flag.
  11799 
  11800 !Local variables
  11801     real,dimension(size(fdata,1),size(fdata,2)) :: tmp !<Dummy variable.
  11802     integer(4)                           :: i   !<Loop variable.
  11803     integer(4)                           :: j   !<Loop variable.
  11804 
  11805 !Read in the data.
  11806     call fms_io_unstructured_read_r_2D(filename, &
  11807                                        fieldname, &
  11808                                        tmp, &
  11809                                        domain, &
  11810                                        timelevel, &
  11811                                        start, &
  11812                                        nread, &
  11813                                        threading)
  11814     do i = 1,size(fdata,2)
  11815         do j = 1,size(fdata,1)
  11816             fdata(j,i) = ceiling(tmp(j,i))
  11817         enddo
  11818     enddo
  11819 
  11820     return
  11821 end subroutine fms_io_unstructured_read_i_2D

Page 437         Source Listing                  FMS_IO_UNSTRUCTURED_READ_I_2D
2021-06-01 08:54 Entry Points                    ./fms_io_unstructured_read.inc



ENTRY POINTS

  Name                                                    
                                                          
 fms_io_mod_mp_fms_io_unstructured_read_i_2d_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CEILING                    Func   11816                                scalar                    11816                             
 DOMAIN                     Dummy  11784    DOMAINUG        544         scalar   ARG,IN           11809                             
 FDATA                      Dummy  11783    I(4)            4     2     1        ARG,INOUT        11801,11814,11815,11816           
 FIELDNAME                  Dummy  11782    CHAR                        scalar   ARG,IN           11807                             
 FILENAME                   Dummy  11781    CHAR                        scalar   ARG,IN           11806                             
 FMS_IO_UNSTRUCTURED_READ_I                                                                                                         
 _2D                        Subr   11781                                         PRIV                                               
 I                          Local  11802    I(4)            4           scalar                    11814,11816                       
 J                          Local  11803    I(4)            4           scalar                    11815,11816                       
 NREAD                      Dummy  11787    I(4)            4     1     1        ARG,IN           11812                             
 SIZE                       Func   11801                                scalar                    11801,11814,11815                 
 START                      Dummy  11786    I(4)            4     1     1        ARG,IN           11811                             
 THREADING                  Dummy  11788    I(4)            4           scalar   ARG,IN           11813                             
 TIMELEVEL                  Dummy  11785    I(4)            4           scalar   ARG,IN           11810                             
 TMP                        Local  11801    R(8)            8     2     0        TGT              11808,11816                       

Page 438         Source Listing                  FMS_IO_UNSTRUCTURED_READ_I_2D
2021-06-01 08:54                                 ./fms_io_unstructured_read.inc

  11822 
  11823 !------------------------------------------------------------------------------
  11824 
  11825 !----------
  11826 # 8609 "fms_io.F90" 2 
  11827 # 1 "./fms_io_unstructured_get_file_name.inc" 1 
  11828 !***********************************************************************
  11829 !*                   GNU Lesser General Public License
  11830 !*
  11831 !* This file is part of the GFDL Flexible Modeling System (FMS).
  11832 !*
  11833 !* FMS is free software: you can redistribute it and/or modify it under
  11834 !* the terms of the GNU Lesser General Public License as published by
  11835 !* the Free Software Foundation, either version 3 of the License, or (at
  11836 !* your option) any later version.
  11837 !*
  11838 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  11839 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  11840 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  11841 !* for more details.
  11842 !*
  11843 !* You should have received a copy of the GNU Lesser General Public
  11844 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  11845 !***********************************************************************
  11846 !----------
  11847 !ug support
  11848 
  11849 !>For an inputted file name, check if it or any of its variants exist.
  11850 !!For a file named "foo", variants checked (in order) include:
  11851 !!
  11852 !!    foo
  11853 !!    foo.nc
  11854 !!    foo.<domain_tile_id_string>.nc
  11855 !!    foo.nc.<IO_domain_tile_id_string>
  11856 !!    foo.<domain_tile_id_string>.nc.<IO_domain_tile_id_string>
  11857 !!    foo.<ensemble_id>
  11858 !!    foo.<ensemble_id>.nc
  11859 !!    foo.<ensemble_id>.<domain_tile_id_string>.nc
  11860 !!    foo.<ensemble_id>.nc.<IO_domain_tile_id_string>
  11861 !!    foo.<ensemble_id>.<domain_tile_id_string>.nc.<IO_domain_tile_id_string>
  11862 !!
  11863 !!If a match is found, the value true is returned for the "does_file_exist"
  11864 !!flag.  In addition, the actual file name is returned and the "read_dist"
  11865 !!flag, which tells whether or not the filename contains the
  11866 !!IO_domain_tile_id_string appended.
  11867 !!
  11868 !!Should this be a subroutine instead of a funtion for clarity since it
  11869 !!returns more than one value?
  11870 function fms_io_unstructured_get_file_name(orig_file, &
  11871                                            actual_file, &
  11872                                            read_dist, &
  11873                                            domain) &
  11874                                            result(does_file_exist)
  11875 
  11876 !Inputs/Outputs
  11877     character(len=*),intent(in)   :: orig_file       !<The name of file we're looking for.
  11878     character(len=*),intent(out)  :: actual_file     !<Name of the file we found.

Page 439         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FILE_NAME
2021-06-01 08:54                                 ./fms_io_unstructured_get_file_name.inc

  11879     logical(4),intent(out) :: read_dist       !<Flag telling if the file is "distributed" (has IO domain tile id appended on
  11879 to the end).
  11880     type(domainUG),intent(in)     :: domain          !<Unstructured mpp domain.
  11881     logical(4)             :: does_file_exist !<Flag telling if the inputted file exists or one its variants.
  11882 
  11883 !Local variables
  11884     logical(4)      :: fexist          !<Flag that tells if a file exists.
  11885     type(domainUG),pointer :: io_domain       !<Pointer to an unstructured I/O domain.
  11886     integer(4)      :: io_tile_id      !<Tile id for the I/O domain.
  11887     character(len=256)     :: fname           !<A character buffer used to test different file names.
  11888     character(len=512)     :: actual_file_tmp !<A character buffer used to test different file names.
  11889 
  11890 !Set the default return values for the function.
  11891     actual_file = ""
  11892     does_file_exist = .false.
  11893     read_dist = .false.
  11894 
  11895 !Check if the file name does not contain ".nc".
  11896     fexist = .false.
  11897     if (index(orig_file,".nc",back=.true.) .eq. 0) then
  11898         inquire(file=trim(orig_file),exist=fexist)
  11899         if (fexist) then
  11900             actual_file = orig_file
  11901             does_file_exist = .true.
  11902             return
  11903         endif
  11904     endif
  11905 
  11906 !If necessary, add the correct domain ".tilexxxx" string to the inputted
  11907 !file name.  For a file named foo.nc, this would become foo.tilexxxx.nc.
  11908 !Check if the new file name exists.
  11909     call get_mosaic_tile_file_ug(orig_file, &
  11910                                  actual_file, &
  11911                                  domain)
  11912     inquire(file=trim(actual_file),exist=fexist)
  11913     if (fexist) then
  11914         does_file_exist = .true.
  11915         return
  11916     endif
  11917 
  11918 !Point to the I/O domain for the unstructured grid.  This function call
  11919 !will throw a fatal error if the I/O domain does not exist.
  11920     io_domain => null()
  11921     io_domain => mpp_get_UG_io_domain(domain)
  11922 
  11923 !Get the tile id for the I/O domain.
  11924     io_tile_id = mpp_get_UG_domain_tile_id(io_domain)
  11925     io_domain => null()
  11926 
  11927 !Check if the file has the I/O domain's tile id appended to the end of its
  11928 !name.  For a file named foo.nc, this would become foo.nc.yyyy, where
  11929 !"yyyy" would in reality be the I/O domain's tile id.  If the file exists,
  11930 !then set the read_dist and does_file_exist flags to true and return.
  11931     write(fname,'(a,i4.4)') trim(actual_file)//'.',io_tile_id
  11932     inquire(file=trim(fname),exist=fexist)
  11933     if (.not. fexist) then
  11934         write(fname,'(a,i6.6)') trim(actual_file)//'.',io_tile_id

Page 440         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FILE_NAME
2021-06-01 08:54                                 ./fms_io_unstructured_get_file_name.inc

  11935         inquire(file=trim(fname),exist=fexist)
  11936     endif
  11937     if (fexist) then
  11938         read_dist = .true.
  11939         does_file_exist = .true.
  11940         return
  11941     endif
  11942 
  11943 !Check if the file is part of an ensemble.
  11944 !filename_appendix is a module variable.
  11945     if (len_trim(filename_appendix) .gt. 0) then
  11946         call get_instance_filename(orig_file, &
  11947                                    actual_file)
  11948         if (index(orig_file,'.nc',back=.true.) .eq. 0) then
  11949             inquire(file=trim(actual_file),exist=fexist)
  11950             if (fexist) then
  11951                 does_file_exist = .true.
  11952                 return
  11953             endif
  11954         endif
  11955 
  11956 !Make a local copy of "actual_file", and the use the local copy to
  11957 !add the domain ".tilexxxx" string to "actual_file".
  11958         actual_file_tmp = actual_file
  11959         call get_mosaic_tile_file_ug(actual_file_tmp, &
  11960                                      actual_file, &
  11961                                      domain)
  11962         inquire(file=trim(actual_file),exist=fexist)
  11963         if (fexist) then
  11964             does_file_exist = .true.
  11965             return
  11966         endif
  11967 
  11968 !Point to the I/O domain for the unstructured grid.  This function call
  11969 !will throw a fatal error if the I/O domain does not exist.
  11970         io_domain => mpp_get_UG_io_domain(domain)
  11971 
  11972 !Get the tile id for the I/O domain.
  11973         io_tile_id = mpp_get_UG_domain_tile_id(io_domain)
  11974         io_domain => null()
  11975 
  11976 !Check if the file has the I/O domain's tile id appended to the end of
  11977 !its name.  If it does then set the read_dist and does_file_exist flags
  11978 !to true and return.
  11979         write(fname,'(a,i4.4)') trim(actual_file)//'.',io_tile_id
  11980         inquire(file=trim(fname),exist=fexist)
  11981         if (.not. fexist) then
  11982             write(fname,'(a,i6.6)') trim(actual_file)//'.',io_tile_id
  11983             inquire(file=trim(fname),exist=fexist)
  11984         endif
  11985         if (fexist) then
  11986             read_dist = .true.
  11987             does_file_exist = .true.
  11988             return
  11989         endif
  11990     endif
  11991 

Page 441         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FILE_NAME
2021-06-01 08:54                                 ./fms_io_unstructured_get_file_name.inc

  11992     return
  11993 end function fms_io_unstructured_get_file_name


ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_fms_io_unstructured_get_file_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTUAL_FILE                Dummy  11871    CHAR                        scalar   ARG,OUT          11891,11900,11910,11912,11931,1193
                                                                                                  4,11947,11949,11958,11960,11962,11
                                                                                                  979,11982                         
 ACTUAL_FILE_TMP            Local  11888    CHAR            512         scalar                    11958,11959                       
 DOES_FILE_EXIST            Local  11881    L(4)            4           scalar                    11892,11901,11914,11939,11951,1196
                                                                                                  4,11987                           
 DOMAIN                     Dummy  11873    DOMAINUG        544         scalar   ARG,IN           11911,11921,11961,11970           
 FEXIST                     Local  11884    L(4)            4           scalar                    11896,11898,11899,11912,11913,1193
                                                                                                  2,11933,11935,11937,11949,11950,11
                                                                                                  962,11963,11980,11981,11983,11985 
 FMS_IO_UNSTRUCTURED_GET_FI                                                                                                         
 LE_NAME                    Func   11870    L(4)            4           scalar                    11462,11549,11636,12144,12417     
 FNAME                      Local  11887    CHAR            256         scalar                    11931,11932,11934,11935,11979,1198
                                                                                                  0,11982,11983                     
 INDEX                      Func   11897                                scalar                    11897,11948                       
 IO_DOMAIN                  Local  11885    DOMAINUG        544         scalar   PTR              11920,11921,11924,11925,11970,1197
                                                                                                  3,11974                           
 IO_TILE_ID                 Local  11886    I(4)            4           scalar                    11924,11931,11934,11973,11979,1198
                                                                                                  2                                 
 LEN_TRIM                   Func   11945                                scalar                    11945                             
 ORIG_FILE                  Dummy  11870    CHAR                        scalar   ARG,IN           11897,11898,11900,11909,11946,1194
                                                                                                  8                                 
 READ_DIST                  Dummy  11872    L(4)            4           scalar   ARG,OUT          11893,11938,11986                 
 TRIM                       Func   11898                                scalar                    11898,11912,11931,11932,11934,1193
                                                                                                  5,11949,11962,11979,11980,11982,11
                                                                                                  983                               

Page 442         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FILE_NAME
2021-06-01 08:54                                 ./fms_io_unstructured_get_file_name.inc

  11994 
  11995 !------------------------------------------------------------------------------
  11996 # 8610 "fms_io.F90" 2 
  11997 # 1 "./fms_io_unstructured_get_file_unit.inc" 1 
  11998 !***********************************************************************
  11999 !*                   GNU Lesser General Public License
  12000 !*
  12001 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12002 !*
  12003 !* FMS is free software: you can redistribute it and/or modify it under
  12004 !* the terms of the GNU Lesser General Public License as published by
  12005 !* the Free Software Foundation, either version 3 of the License, or (at
  12006 !* your option) any later version.
  12007 !*
  12008 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12009 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12010 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12011 !* for more details.
  12012 !*
  12013 !* You should have received a copy of the GNU Lesser General Public
  12014 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12015 !***********************************************************************
  12016 !----------
  12017 !ug support
  12018 
  12019 !>Return the file unit and index in the "files_read" module array for the
  12020 !!inputted file.  If the file does not currently exist in the "files_read"
  12021 !!array (i.e., it is not currenly open), then open it.
  12022 subroutine fms_io_unstructured_get_file_unit(filename, &
  12023                                              funit, &
  12024                                              index_file, &
  12025                                              read_dist, &
  12026                                              domain)
  12027 
  12028 !Inputs/Outputs
  12029     character(len=*),intent(in)   :: filename   !<Name of the file to be read from.
  12030     integer(4),intent(out) :: funit      !<File unit for the inputted file.
  12031     integer(4),intent(out) :: index_file !<Index of the inputted file in the "files_read" module array.
  12032     logical(4),intent(in)  :: read_dist  !<Flag telling if the IO domain tile id string exists at the end of the inputted fi
  12032 le name.
  12033     type(domainUG),intent(in)     :: domain     !<An unstructured mpp domain.
  12034 
  12035 !Local variables
  12036     integer(4) :: i !<Loop variable.
  12037 
  12038 !Check if the file exists in the "files_read" module array.  If the file
  12039 !is found in the array, this implies that the file was opened at some
  12040 !point.  If the file is still open, then return.  If not, then throw a
  12041 !fatal error.
  12042 !num_files_r is a module variable.
  12043 !files_read is a module variable.
  12044     do i = 1,num_files_r
  12045         if (trim(files_read(i)%name) .eq. trim(filename)) then
  12046             index_file = i
  12047             funit = files_read(index_file)%unit
  12048             if (.not. mpp_file_is_opened(funit)) then
  12049                 call mpp_error(FATAL, &

Page 443         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FILE_UNIT
2021-06-01 08:54                                 ./fms_io_unstructured_get_file_unit.inc

  12050                                "fms_io_unstructured_get_file_unit:" &
  12051                                //" the file "//trim(filename) &
  12052                                //" was previously opened, but is not" &
  12053                                //" currently open.")
  12054             endif
  12055             return
  12056         endif
  12057     enddo
  12058 
  12059 !Make sure that the number of files open for reading will not exceed the
  12060 !maximum number allowed.
  12061 !max_files_r is a module variable.
  12062     if (num_files_r .eq. max_files_r) then
  12063         call mpp_error(FATAL, &
  12064                        "fms_io_unstructured_get_file_unit: the number of" &
  12065                        //" files currently open for reading exceeds" &
  12066                        //" max_files_r.  Pleaes increase this value via" &
  12067                        //" the fms_io_nml namelist.")
  12068     endif
  12069 
  12070 !Store the filename and initialize an array for the file fields.
  12071     num_files_r = num_files_r + 1
  12072     files_read(num_files_r)%name = trim(filename)
  12073     allocate(files_read(num_files_r)%var(max_fields))
  12074     files_read(num_files_r)%nvar = 0
  12075     index_file = num_files_r
  12076 
  12077 !Open the file.
  12078     if (read_dist) then
  12079         call mpp_open(funit, &
  12080                       trim(filename), &
  12081                       form=form, &
  12082                       action=MPP_RDONLY, &
  12083                       threading=MPP_MULTI, &
  12084                       fileset=MPP_MULTI, &
  12085                       domain_ug=domain)
  12086     else
  12087         call mpp_open(funit, &
  12088                       trim(filename), &
  12089                       form=form, &
  12090                       action=MPP_RDONLY, &
  12091                       threading=MPP_MULTI, &
  12092                       fileset=MPP_SINGLE)
  12093     endif
  12094 
  12095 !Store the file unit returned by mpp_open.
  12096     files_read(index_file)%unit = funit
  12097 
  12098     return
  12099 end subroutine fms_io_unstructured_get_file_unit

Page 444         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FILE_UNIT
2021-06-01 08:54 Entry Points                    ./fms_io_unstructured_get_file_unit.inc



ENTRY POINTS

  Name                                                        
                                                              
 fms_io_mod_mp_fms_io_unstructured_get_file_unit_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOMAIN                     Dummy  12026    DOMAINUG        544         scalar   ARG,IN           12085                             
 FILENAME                   Dummy  12022    CHAR                        scalar   ARG,IN           12045,12051,12072,12080,12088     
 FMS_IO_UNSTRUCTURED_GET_FI                                                                                                         
 LE_UNIT                    Subr   12022                                                          11478,11565,11652,12156,12425     
 FUNIT                      Dummy  12023    I(4)            4           scalar   ARG,OUT          12047,12048,12079,12087,12096     
 I                          Local  12036    I(4)            4           scalar                    12044,12045,12046                 
 INDEX_FILE                 Dummy  12024    I(4)            4           scalar   ARG,OUT          12046,12047,12075,12096           
 MPP_FILE_IS_OPENED         Func   12048    L(4)            4           scalar   PRIV             235,12048                         
 READ_DIST                  Dummy  12025    L(4)            4           scalar   ARG,IN           12078                             
 TRIM                       Func   12045                                scalar                    12045,12051,12072,12080,12088     

Page 445         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FILE_UNIT
2021-06-01 08:54                                 ./fms_io_unstructured_get_file_unit.inc

  12100 
  12101 !----------
  12102 # 8611 "fms_io.F90" 2 
  12103 # 1 "./fms_io_unstructured_file_unit.inc" 1 
  12104 !***********************************************************************
  12105 !*                   GNU Lesser General Public License
  12106 !*
  12107 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12108 !*
  12109 !* FMS is free software: you can redistribute it and/or modify it under
  12110 !* the terms of the GNU Lesser General Public License as published by
  12111 !* the Free Software Foundation, either version 3 of the License, or (at
  12112 !* your option) any later version.
  12113 !*
  12114 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12115 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12116 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12117 !* for more details.
  12118 !*
  12119 !* You should have received a copy of the GNU Lesser General Public
  12120 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12121 !***********************************************************************
  12122 !----------
  12123 !ug support
  12124 
  12125 !>Find the file unit for an inputted file, searching for its variants.  If the
  12126 !!file is not found, then throw a fatal error.
  12127 subroutine fms_io_unstructured_file_unit(filename, &
  12128                                          funit, &
  12129                                          domain)
  12130 
  12131 !Inputs/Outputs
  12132     character(len=*),intent(in)   :: filename   !<The name of a file.
  12133     integer(4),intent(out) :: funit      !<The file unit for the input file.
  12134     type(domainUG),intent(in)     :: domain     !<An unstructured mpp domain.
  12135 
  12136 !Local variables
  12137     logical(4)  :: found_file  !<Flag telling if the file exists.
  12138     character(len=256) :: actual_file !<Name of the found file.
  12139     logical(4)  :: read_dist   !<Flag telling if the file is "distributed" (has IO domain tile id appended to the end).
  12140     integer(4)  :: nfile       !<Index of the inputted file in the "files_read" module array.
  12141 
  12142 !Get the actual name of the file, searching for all possible variants. If
  12143 !the file is not found, then throw a fatal error.
  12144     found_file = fms_io_unstructured_get_file_name(filename, &
  12145                                                    actual_file, &
  12146                                                    read_dist, &
  12147                                                    domain)
  12148     if (.not. found_file) then
  12149         call mpp_error(FATAL, &
  12150                        "fms_io_unstructured_file_unit: file " &
  12151                        //trim(filename)//" and corresponding variants are" &
  12152                        //" not found.")
  12153     endif
  12154 
  12155 !Get the file unit for the input file.
  12156     call fms_io_unstructured_get_file_unit(actual_file, &

Page 446         Source Listing                  FMS_IO_UNSTRUCTURED_FILE_UNIT
2021-06-01 08:54                                 ./fms_io_unstructured_file_unit.inc

  12157                                            funit, &
  12158                                            nfile, &
  12159                                            read_dist, &
  12160                                            domain)
  12161 
  12162     return
  12163 end subroutine fms_io_unstructured_file_unit


ENTRY POINTS

  Name                                                    
                                                          
 fms_io_mod_mp_fms_io_unstructured_file_unit_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ACTUAL_FILE                Local  12138    CHAR            256         scalar                    12145,12156                       
 DOMAIN                     Dummy  12129    DOMAINUG        544         scalar   ARG,IN           12147,12160                       
 FILENAME                   Dummy  12127    CHAR                        scalar   ARG,IN           12144,12151                       
 FMS_IO_UNSTRUCTURED_FILE_U                                                                                                         
 NIT                        Subr   12127                                                                                            
 FOUND_FILE                 Local  12137    L(4)            4           scalar                    12144,12148                       
 FUNIT                      Dummy  12128    I(4)            4           scalar   ARG,OUT          12157                             
 NFILE                      Local  12140    I(4)            4           scalar                    12158                             
 READ_DIST                  Local  12139    L(4)            4           scalar                    12146,12159                       
 TRIM                       Func   12151                                scalar                    12151                             

Page 447         Source Listing                  FMS_IO_UNSTRUCTURED_FILE_UNIT
2021-06-01 08:54                                 ./fms_io_unstructured_file_unit.inc

  12164 
  12165 !----------
  12166 # 8612 "fms_io.F90" 2 
  12167 # 1 "./fms_io_unstructured_get_field_size.inc" 1 
  12168 !***********************************************************************
  12169 !*                   GNU Lesser General Public License
  12170 !*
  12171 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12172 !*
  12173 !* FMS is free software: you can redistribute it and/or modify it under
  12174 !* the terms of the GNU Lesser General Public License as published by
  12175 !* the Free Software Foundation, either version 3 of the License, or (at
  12176 !* your option) any later version.
  12177 !*
  12178 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12179 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12180 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12181 !* for more details.
  12182 !*
  12183 !* You should have received a copy of the GNU Lesser General Public
  12184 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12185 !***********************************************************************
  12186 !----------
  12187 !ug support
  12188 
  12189 !>Get the size of the dimensions of a field from a file associated with an
  12190 !!unstructured mpp domain.
  12191 subroutine fms_io_unstructured_get_field_size(filename, &
  12192                                               fieldname, &
  12193                                               field_dimension_sizes, &
  12194                                               domain, &
  12195                                               field_found)
  12196 
  12197 !Inputs/Outputs
  12198     character(len=*),intent(in)        :: filename              !<The name of a file.
  12199     character(len=*),intent(in)        :: fieldname             !<The name of a field in the input file.
  12200     integer,dimension(:),intent(inout) :: field_dimension_sizes !<Array of dimension sizes for the inputted field.
  12201     type(domainUG),intent(in)          :: domain                !<An unstructured mpp domain associated with the input file.
  12202     logical,intent(out),optional       :: field_found           !<Flag telling if the inputted field was found in the inputt
  12202 ed file.
  12203 
  12204 !Local variables
  12205     type(domainUG),pointer                     :: io_domain       !<Pointer to the unstructured I/O domain.
  12206     integer(4)                          :: io_domain_npes  !<The total number of ranks in an I/O domain pelist.
  12207     integer(4),dimension(:),allocatable :: pelist          !<A pelist.
  12208     integer(4)                          :: funit           !<File unit for the inputted file.
  12209     integer(4)                          :: num_axes        !<The total number of axes contained in the inputted file.
  12210     integer(4)                          :: num_fields      !<The total number of fields contained in the inputted file.
  12211     integer(4)                          :: num_atts        !<The total number of global attributes contained in the inputted
  12211  file.
  12212     integer(4)                          :: num_time_levels !<The total number of time levels contained in the inputted file.
  12213     type(fieldtype),dimension(max_fields)      :: file_fields     !<An array of all fields contained in the inputted file (m
  12213 ax_fields is a module variable).
  12214     logical(4)                          :: found           !<Flag telling if the field was found in the file.
  12215     character(len=128)                         :: file_field_name !<Name of a field from the inputted file.
  12216     integer(4)                          :: file_field_ndim !<Number of dimensions of a field from the inputted file.
  12217     type(axistype),dimension(max_fields)       :: file_field_axes !<An array of all axes of a field contained in the inputte

Page 448         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FIELD_SIZE
2021-06-01 08:54                                 ./fms_io_unstructured_get_field_size.inc

  12217 d file (max_fields is a module variable).
  12218     character(len=128)                         :: file_axis_name  !<Name of an axis from the inputted file.
  12219     integer(4)                          :: file_axis_size  !<Size of an axis from the inputted file.
  12220     integer(4)                          :: i               !<Loop variable.
  12221     integer(4)                          :: j               !<Loop variable.
  12222 
  12223 !Point to the I/O domain associated with the inputted unstructured mpp
  12224 !domain.
  12225     io_domain => null()
  12226     io_domain => mpp_get_UG_io_domain(domain)
  12227 
  12228 !Get the pelist associated with the I/O domain.
  12229     io_domain_npes = mpp_get_UG_domain_npes(io_domain)
  12230     allocate(pelist(io_domain_npes))
  12231     call mpp_get_UG_domain_pelist(io_domain, &
  12232                                   pelist)
  12233     io_domain => null()
  12234 
  12235 !Get the file unit for the inputted file.
  12236     call fms_io_unstructured_file_unit(filename, &
  12237                                        funit, &
  12238                                        domain)
  12239 
  12240 !Have the root rank of the I/O domain pelist get the size of the dimensions
  12241 !of the inputted fields from the inputted file.
  12242     if (mpp_pe() .eq. pelist(1)) then
  12243 
  12244 !Get the number of fields and axes contained in the inputted file.
  12245         call mpp_get_info(funit, &
  12246                           num_axes, &
  12247                           num_fields, &
  12248                           num_atts, &
  12249                           num_time_levels)
  12250 
  12251 !Make sure that the number of fields in the file does not exceed the
  12252 !maximum number allowed per file.
  12253 !max_fields is a module variable.
  12254         if (num_fields .gt. max_fields) then
  12255             call mpp_error(FATAL, &
  12256                            "fms_io_unstructured_get_field_size:" &
  12257                            //" the number of fields in the file " &
  12258                            //trim(filename)//" exceeds the maximum number" &
  12259                            //" of fields allowed per file (max_fields)")
  12260         endif
  12261 
  12262 !Read in all fields contained in the inputted file.
  12263         call mpp_get_fields(funit, &
  12264                             file_fields(1:num_fields))
  12265 
  12266 !Check if the inputted field matches one the fields contained in
  12267 !the inputted file.  If it matches, get the size of the field
  12268 !dimensions.
  12269         found = .false.
  12270         field_dimension_sizes = -1
  12271         do i = 1,num_fields
  12272             call mpp_get_atts(file_fields(i), &
  12273                               name=file_field_name)

Page 449         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FIELD_SIZE
2021-06-01 08:54                                 ./fms_io_unstructured_get_field_size.inc

  12274             if (lowercase(trim(file_field_name)) .eq. &
  12275                 lowercase(trim(fieldname))) then
  12276                 call mpp_get_atts(file_fields(i), &
  12277                                   ndim=file_field_ndim)
  12278                 call mpp_get_atts(file_fields(i), &
  12279                                   axes=file_field_axes(1:file_field_ndim))
  12280                 do j = 1,file_field_ndim
  12281                     call mpp_get_atts(file_field_axes(j), &
  12282                                       len=field_dimension_sizes(j))
  12283                 enddo
  12284                 found = .true.
  12285                 exit
  12286             endif
  12287         enddo
  12288 
  12289 !If the inputted field does not match any of the fields contained
  12290 !in the inputted file, then check if it matches any of the axes
  12291 !contained in the file.
  12292         if (.not. found) then
  12293             call mpp_get_axes(funit, &
  12294                               file_field_axes(1:num_axes))
  12295             do i = 1,num_axes
  12296                 call mpp_get_atts(file_field_axes(i), &
  12297                                   name=file_axis_name, &
  12298                                   len=file_axis_size)
  12299                 if (lowercase(trim(file_axis_name)) .eq. &
  12300                     lowercase(trim(fieldname))) then
  12301                     field_dimension_sizes(1) = file_axis_size
  12302                     found = .true.
  12303                     exit
  12304                 endif
  12305             enddo
  12306         endif
  12307     endif
  12308 
  12309 !Broadcast the flag telling if the inputted field was found in the inputted
  12310 !file and the field dimension sizes array to all non-root ranks on the
  12311 !I/O domain pelist.
  12312     if (mpp_pe() .eq. pelist(1)) then
  12313         do i = 2,io_domain_npes
  12314             call mpp_send(found, &
  12315                           pelist(i), &
  12316                           tag=COMM_TAG_1)
  12317             call mpp_send(field_dimension_sizes, &
  12318                           size(field_dimension_sizes), &
  12319                           pelist(i), &
  12320                           tag=COMM_TAG_2)
  12321         enddo
  12322         call mpp_sync_self()
  12323     else
  12324         call mpp_recv(found, &
  12325                       pelist(1), &
  12326                       block = .false., &
  12327                       tag=COMM_TAG_1)
  12328         call mpp_recv(field_dimension_sizes, &
  12329                       size(field_dimension_sizes), &
  12330                       pelist(1), &

Page 450         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FIELD_SIZE
2021-06-01 08:54                                 ./fms_io_unstructured_get_field_size.inc

  12331                       block = .false., &
  12332                       tag=COMM_TAG_2)
  12333         call mpp_sync_self(check=EVENT_RECV)
  12334     endif
  12335 
  12336 !If the field_found flag is present, then return the value of the found
  12337 !flag.  It is assumed that this value will be checked by the calling
  12338 !routine.  If the field_found flag is not present and the field was not
  12339 !found in the file, then throw a fatal error.
  12340     if (present(field_found)) then
  12341         field_found = found
  12342     elseif (.not. found) then
  12343         call mpp_error(FATAL, &
  12344                        "fms_io_unstructured_get_field_size:" &
  12345                        //" the inputted field "//trim(fieldname) &
  12346                        //" was not found in the file "//trim(filename))
  12347     endif
  12348 
  12349 !Deallocate local allocatables.
  12350     deallocate(pelist)
  12351 
  12352     return
  12353 end subroutine fms_io_unstructured_get_field_size


ENTRY POINTS

  Name                                                         
                                                               
 fms_io_mod_mp_fms_io_unstructured_get_field_size_             

Page 451         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FIELD_SIZE
2021-06-01 08:54 Symbol Table                    ./fms_io_unstructured_get_field_size.inc



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 COMM_TAG_2                 Param  12320    I(4)            4           scalar   PRIV             228,12320,12332                   
 DOMAIN                     Dummy  12194    DOMAINUG        544         scalar   ARG,IN           12226,12238                       
 FIELDNAME                  Dummy  12192    CHAR                        scalar   ARG,IN           12275,12300,12345                 
 FIELD_DIMENSION_SIZES      Dummy  12193    I(4)            4     1     1        ARG,INOUT        12270,12282,12301,12317,12318,1232
                                                                                                  8,12329                           
 FIELD_FOUND                Dummy  12195    L(4)            4           scalar   ARG,OUT          12340,12341                       
 FILENAME                   Dummy  12191    CHAR                        scalar   ARG,IN           12236,12258,12346                 
 FILE_AXIS_NAME             Local  12218    CHAR            128         scalar                    12297,12299                       
 FILE_AXIS_SIZE             Local  12219    I(4)            4           scalar                    12298,12301                       
 FILE_FIELDS                Local  12213    RECORD          1096  1     400      TGT              12264,12272,12276,12278           
 FILE_FIELD_AXES            Local  12217    RECORD          1424  1     400      TGT              12279,12281,12294,12296           
 FILE_FIELD_NAME            Local  12215    CHAR            128         scalar                    12273,12274                       
 FILE_FIELD_NDIM            Local  12216    I(4)            4           scalar                    12277,12279,12280                 
 FMS_IO_UNSTRUCTURED_FILE_U                                                                                                         
 NIT                        Subr   12236                                                          679,12236                         
 FMS_IO_UNSTRUCTURED_GET_FI                                                                                                         
 ELD_SIZE                   Subr   12191                                                                                            
 FOUND                      Local  12214    L(4)            4           scalar                    12269,12284,12292,12302,12314,1232
                                                                                                  4,12341,12342                     
 FUNIT                      Local  12208    I(4)            4           scalar                    12237,12245,12263,12293           
 I                          Local  12220    I(4)            4           scalar                    12271,12272,12276,12278,12295,1229
                                                                                                  6,12313,12315,12319               
 IO_DOMAIN                  Local  12205    DOMAINUG        544         scalar   PTR              12225,12226,12229,12231,12233     
 IO_DOMAIN_NPES             Local  12206    I(4)            4           scalar                    12229,12230,12313                 
 J                          Local  12221    I(4)            4           scalar                    12280,12281,12282                 
 MPP_RECV_INT4              Subr   12328                                         PRIV             12328                             
 MPP_RECV_LOGICAL4_SCALAR   Subr   12324                                         PRIV             12324                             
 MPP_SEND_INT4              Subr   12317                                         PRIV             12317                             
 MPP_SEND_LOGICAL4_SCALAR   Subr   12314                                         PRIV             12314                             
 NUM_ATTS                   Local  12211    I(4)            4           scalar                    12248                             
 NUM_AXES                   Local  12209    I(4)            4           scalar                    12246,12294,12295                 
 NUM_FIELDS                 Local  12210    I(4)            4           scalar                    12247,12254,12264,12271           
 NUM_TIME_LEVELS            Local  12212    I(4)            4           scalar                    12249                             
 PELIST                     Local  12207    I(4)            4     1     1        ALC              12230,12232,12242,12312,12315,1231
                                                                                                  9,12325,12330,12350               
 PRESENT                    Func   12340                                scalar                    12340                             
 SIZE                       Func   12318                                scalar                    12318,12329                       
 TRIM                       Func   12258                                scalar                    12258,12274,12275,12299,12300,1234
                                                                                                  5,12346                           

Page 452         Source Listing                  FMS_IO_UNSTRUCTURED_GET_FIELD_SIZE
2021-06-01 08:54                                 ./fms_io_unstructured_get_field_size.inc

  12354 # 8613 "fms_io.F90" 2 
  12355 # 1 "./fms_io_unstructured_field_exist.inc" 1 
  12356 !***********************************************************************
  12357 !*                   GNU Lesser General Public License
  12358 !*
  12359 !* This file is part of the GFDL Flexible Modeling System (FMS).
  12360 !*
  12361 !* FMS is free software: you can redistribute it and/or modify it under
  12362 !* the terms of the GNU Lesser General Public License as published by
  12363 !* the Free Software Foundation, either version 3 of the License, or (at
  12364 !* your option) any later version.
  12365 !*
  12366 !* FMS is distributed in the hope that it will be useful, but WITHOUT
  12367 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  12368 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  12369 !* for more details.
  12370 !*
  12371 !* You should have received a copy of the GNU Lesser General Public
  12372 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
  12373 !***********************************************************************
  12374 !----------
  12375 !ug support
  12376 
  12377 !>Return a flag indicating whether the inputted field exists in the inputted
  12378 !!file, where the file is associated with an unstructured mpp domain.
  12379 function fms_io_unstructured_field_exist(file_name, &
  12380                                          field_name, &
  12381                                          domain) &
  12382                                          result(does_field_exist)
  12383 
  12384 !Inputs/Outputs
  12385     character(len=*),intent(in) :: file_name        !<Name of a file.
  12386     character(len=*),intent(in) :: field_name       !<Name of a field.
  12387     type(domainUG),intent(in)   :: domain           !<An unstructured mpp domain.
  12388     logical(4)           :: does_field_exist !<Flag telling if the inputted field exists in the inputted file.
  12389 
  12390 !Local variables
  12391     logical(4)                        :: file_exist !<Flag telling if the inputted file or one of its variants exists.
  12392     character(len=256)                       :: fname      !<Actual name of the found file.
  12393     logical(4)                        :: read_dist  !<Flag telling if the file is "distributed" (has IO domain tile id appen
  12393 ded onto the end).
  12394     integer(4)                        :: funit      !<A file unit.
  12395     integer(4)                        :: nfile      !<Index of the inputted file in the "files_read" module array.
  12396     integer(4)                        :: i          !<Loop variable.
  12397     integer(4)                        :: ndim       !<Number of dimensions in a file.
  12398     integer(4)                        :: nvar       !<Number of fields in a file.
  12399     integer(4)                        :: natt       !<Number of attributes in a file.
  12400     integer(4)                        :: ntime      !<Number of time levels in a file.
  12401     character(len=64)                        :: tmp_name   !<Name of a field.
  12402     type(fieldtype),dimension(:),allocatable :: fields     !<An array of fields found in the input file.
  12403 
  12404 
  12405 !Set default return value for the function.
  12406     does_field_exist = .false.
  12407 
  12408 !Return if the inputted field name is in valid.
  12409     if (len_trim(field_name) .eq. 0) then

Page 453         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54                                 ./fms_io_unstructured_field_exist.inc

  12410         return
  12411     endif
  12412     if (field_name(1:1) .eq. ' ') then
  12413         return
  12414     endif
  12415 
  12416 !Check if the file exists.
  12417     file_exist = fms_io_unstructured_get_file_name(file_name, &
  12418                                                    fname, &
  12419                                                    read_dist, &
  12420                                                    domain)
  12421 
  12422     if (file_exist) then
  12423 
  12424 !Get the file unit for the input file.
  12425         call fms_io_unstructured_get_file_unit(fname, &
  12426                                                funit, &
  12427                                                nfile, &
  12428                                                read_dist, &
  12429                                                domain)
  12430 
  12431 !Get the number of dimensions, fields, attributes and time levels
  12432 !for the file.
  12433         call mpp_get_info(funit, &
  12434                           ndim, &
  12435                           nvar, &
  12436                           natt, &
  12437                           ntime)
  12438 
  12439 !Create an array of all fields contained in the file.
  12440         allocate(fields(nvar))
  12441         call mpp_get_fields(funit, &
  12442                             fields)
  12443 
  12444 !Loop through the fields to see if the inputted field name matches
  12445 !any of the fields from the file.
  12446         do i = 1,nvar
  12447             call mpp_get_atts(fields(i), &
  12448                               name=tmp_name)
  12449             if (lowercase(trim(tmp_name)) .eq. lowercase(trim(field_name))) then
  12450                 does_field_exist = .true.
  12451             endif
  12452         enddo
  12453 
  12454 !Deallocate local allocatable.
  12455         deallocate(fields)
  12456     endif
  12457 
  12458     return
  12459 end function fms_io_unstructured_field_exist

Page 454         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54 Entry Points                    ./fms_io_unstructured_field_exist.inc



ENTRY POINTS

  Name                                                      
                                                            
 fms_io_mod_mp_fms_io_unstructured_field_exist_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DOES_FIELD_EXIST           Local  12388    L(4)            4           scalar                    12406,12450                       
 DOMAIN                     Dummy  12381    DOMAINUG        544         scalar   ARG,IN           12420,12429                       
 FIELDS                     Local  12402    RECORD          1096  1     1        ALC              12440,12442,12447,12455           
 FIELD_NAME                 Dummy  12380    CHAR                        scalar   ARG,IN           12409,12412,12449                 
 FILE_EXIST                 Local  12391    L(4)            4           scalar                    12417,12422                       
 FILE_NAME                  Dummy  12379    CHAR                        scalar   ARG,IN           12417                             
 FMS_IO_UNSTRUCTURED_FIELD_                                                                                                         
 EXIST                      Func   12379    L(4)            4           scalar                                                      
 FNAME                      Local  12392    CHAR            256         scalar                    12418,12425                       
 FUNIT                      Local  12394    I(4)            4           scalar                    12426,12433,12441                 
 I                          Local  12396    I(4)            4           scalar                    12446,12447                       
 LEN_TRIM                   Func   12409                                scalar                    12409                             
 NATT                       Local  12399    I(4)            4           scalar                    12436                             
 NDIM                       Local  12397    I(4)            4           scalar                    12434                             
 NFILE                      Local  12395    I(4)            4           scalar                    12427                             
 NTIME                      Local  12400    I(4)            4           scalar                    12437                             
 NVAR                       Local  12398    I(4)            4           scalar                    12435,12440,12446                 
 READ_DIST                  Local  12393    L(4)            4           scalar                    12419,12428                       
 TMP_NAME                   Local  12401    CHAR            64          scalar                    12448,12449                       
 TRIM                       Func   12449                                scalar                    12449                             

Page 455         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54                                 ./fms_io_unstructured_field_exist.inc

  12460 
  12461 !----------
  12462 # 8614 "fms_io.F90" 2 
  12463 !----------
  12464 
  12465 end module fms_io_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALL_FIELD_READ_ONLY@0      Local  2484     L(4)            4           scalar                                                      
 ALL_PES                    Param  219      I(4)            4           scalar   PRIV             219                               
 CORNER                     Param  212      I(4)            4           scalar   PRIV             212                               
 DEFAULT_ATT                Local  206      ATTTYPE         1488        scalar   PRIV,SAVE        206                               
 DEFAULT_AXIS               Local  206      AXISTYPE        1424        scalar   PRIV,SAVE        206                               
 DEFAULT_FIELD              Local  206      FIELDTYPE       1096        scalar   PRIV,SAVE        206                               
 DIMENSION_SIZE@0           Local  5010     I(4)            4           scalar                                                      
 EAST                       Param  212      I(4)            4           scalar   PRIV             212                               
 FIELD_SIZE                 Subr   592                                                            592                               
 FMS_IO_EXIT                Subr   592                                                            592                               
 FMS_IO_MOD                 Module 21                                                                                               
 FMS_IO_UNSTRUCTURED_GET_FI                                                                                                         
 ELD_SIZE                   Subr   678                                                            678                               
 FMS_IO_UNSTRUCTURED_READ   Local  700                                  scalar                    677                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_AXIS            Local  682                                  scalar                    674                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD           Local  688                                  scalar                    675                               
 FMS_IO_UNSTRUCTURED_SAVE_R                                                                                                         
 ESTART                     Subr   676                                                            676                               
 FMS_IO_VERSION             Param  670      CHAR            7           scalar                    670                               
 FREE_RESTART_TYPE          Subr   603                                                            603                               
 GET_DOMAIN_DECOMP          Subr   594                                                            594                               
 GET_FIELD_SIZE             Subr   592                                                            592                               
 GET_FILENAME_APPENDIX      Subr   608                                                            608                               
 GET_GLOBAL_ATT_VALUE_REAL@                                                                                                         
 0                          Local  8100     L(4)            4           scalar                                                      
 GET_GREAT_CIRCLE_ALGORITHM                                                                                                         
 @0                         Local  8752     L(4)            4           scalar                                                      
 GET_MOSAIC_TILE_GRID       Subr   597                                                            597                               
 GET_RESTART_IO_MODE        Subr   596                                                            596                               
 GET_TILE_STRING            Subr   596                                                            596                               
 GET_VAR_ATT_VALUE          Local  553                                  scalar                    598                               
 LOOKUP_AXIS@0              Local  4857     I(4)            4           scalar                                                      
 LOOKUP_FIELD_R@0           Local  4822     I(4)            4           scalar                                                      
 MAX_ATTS                   Param  245      I(4)            4           scalar   PRIV             245                               
 MAX_FILE_SIZE              Param  209      I(8)            8           scalar   PRIV             209                               
 MPP_DOMAINS_MOD            Module 211                                                            211,212,213,214,215,216,217,229,23
                                                                                                  0,231,232                         
 MPP_GET_CURRENT_PELIST     Subr   219                                           PRIV             219                               
 MPP_IO_EXIT                Subr   200                                           PRIV             200                               
 MPP_IO_MOD                 Module 200                                                            200,201,202,203,204,205,206,207,20
                                                                                                  8,209,210,233,234,235             
 MPP_MOD                    Module 218                                                            218,219,220,221,222               
 MPP_PARAMETER_MOD          Module 228                                                            228                               

Page 456         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 NORTH                      Param  212      I(4)            4           scalar   PRIV             212                               
 NULLIFY_DOMAIN             Subr   594                                                            594                               
 NULLIFY_FILENAME_APPENDIX  Subr   608                                                            608                               
 NULL_DOMAIN1D              Local  211      DOMAIN1D        176         scalar   PRIV,SAVE        211                               
 Operator (==)                     211                                                                                              
 PARSE_MASK_TABLE           Local  557                                  scalar                    609                               
 PLATFORM_MOD               Module 224                                                            224                               
 PTR0DI                     Type   376                      8           scalar   PRIV             378,414                           
 PTR0DR                     Type   348                      8           scalar   PRIV             350,407                           
 PTR1DI                     Type   380                      72          scalar   PRIV             382,415                           
 PTR1DR                     Type   352                      72          scalar   PRIV             354,408                           
 PTR2DI                     Type   384                      96          scalar   PRIV             386,416                           
 PTR2DR                     Type   356                      96          scalar   PRIV             358,409                           
 PTR2DR8                    Type   364                      96          scalar   PRIV             366,411                           
 PTR3DI                     Type   388                      120         scalar   PRIV             390,417                           
 PTR3DR                     Type   360                      120         scalar   PRIV             362,410                           
 PTR3DR8                    Type   368                      120         scalar   PRIV             370,412                           
 PTR4DR                     Type   372                      144         scalar   PRIV             374,413                           
 QUERY_INITIALIZED          Local  532                                  scalar                    603                               
 QUERY_INITIALIZED_ID@0     Local  6977     L(4)            4           scalar                                                      
 QUERY_INITIALIZED_NAME@0   Local  7002     L(4)            4           scalar                                                      
 QUERY_INITIALIZED_R2D@0    Local  7039     L(4)            4           scalar                                                      
 QUERY_INITIALIZED_R3D@0    Local  7081     L(4)            4           scalar                                                      
 QUERY_INITIALIZED_R4D@0    Local  7124     L(4)            4           scalar                                                      
 R8_KIND                    Param  224      I(4)            4           scalar   PRIV             224                               
 READ_COMPRESSED            Local  453                                  scalar                    591                               
 REGISTER_RESTART_AXIS      Local  501                                  scalar                    600                               
 REGISTER_RESTART_FIELD     Local  477                                  scalar                    600                               
 REGISTER_RESTART_FIELD_I0D                                                                                                         
 @0                         Local  1851     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_I0D                                                                                                         
 _2LEVEL@0                  Local  2150     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_I1D                                                                                                         
 @0                         Local  1891     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_I1D                                                                                                         
 _2LEVEL@0                  Local  2191     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_I2D                                                                                                         
 @0                         Local  1931     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_I2D                                                                                                         
 _2LEVEL@0                  Local  2232     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_I3D                                                                                                         
 @0                         Local  1974     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_I3D                                                                                                         
 _2LEVEL@0                  Local  2273     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_R0D                                                                                                         
 @0                         Local  1669     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_R0D                                                                                                         
 _2LEVEL@0                  Local  2013     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_R1D                                                                                                         
 @0                         Local  1702     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_R1D                                                                                                         
 _2LEVEL@0                  Local  2045     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_R2D                                                                                                         
 @0                         Local  1736     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_R2D                                                                                                         

Page 457         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54 Symbol Table                    fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 _2LEVEL@0                  Local  2079     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_R3D                                                                                                         
 @0                         Local  1774     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_R3D                                                                                                         
 _2LEVEL@0                  Local  2113     I(4)            4           scalar                                                      
 REGISTER_RESTART_FIELD_R4D                                                                                                         
 @0                         Local  1817     I(4)            4           scalar                                                      
 REGISTER_RESTART_REGION_R2                                                                                                         
 D@0                        Local  2315     I(4)            4           scalar                                                      
 REGISTER_RESTART_REGION_R3                                                                                                         
 D@0                        Local  2370     I(4)            4           scalar                                                      
 RESET_FIELD_NAME           Subr   604                                                            604                               
 RESET_FIELD_POINTER        Local  507                                  scalar                    604                               
 RESTORE_STATE              Local  527                                  scalar                    600                               
 RESTORE_STATE_BORDER       Subr   602                                                            602                               
 RETURN_DOMAIN              Subr   594                                                            594                               
 SAVE_RESTART               Subr   600                                                            600                               
 SAVE_RESTART_BORDER        Subr   602                                                            602                               
 SET_DOMAIN                 Subr   594                                                            594                               
 SET_FILENAME_APPENDIX      Subr   607                                                            607                               
 SET_INITIALIZED            Local  540                                  scalar                    603                               
 SET_META_GLOBAL            Subr   601                                                            601                               
 SOUTH                      Param  212      I(4)            4           scalar   PRIV             212                               
 STRING_FROM_INTEGER@0      Local  7870     CHAR            16          scalar                                                      
 STRING_FROM_REAL@0         Local  7905     CHAR            32          scalar                                                      
 VERSION                    Param  665      CHAR            7           scalar                    670                               
 WEST                       Param  212      I(4)            4           scalar   PRIV             212                               
 WRITE_DATA                 Local  461                                  scalar                    591                               

Page 458         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54 Subprograms/Common Blocks       fms_io.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALL_FIELD_READ_ONLY        Func   2484     L(4)            4           scalar                    2489,2492,2553,2968,3356,10776    
 CLOSE_FILE                 Subr   7543                                                                                             
 DIMENSION_SIZE             Func   5010     I(4)            4           scalar                                                      
 DO_READ                    Func   6581     L(4)            4           scalar                    6065,6134,6202,6274,6349,6583     
 FIELD_EXIST                Func   8484     L(4)            4           scalar                                                      
 FIELD_SIZE                 Subr   4907                                                                                             
 FILE_EXIST                 Func   8432     L(4)            4           scalar                                                      
 FILE_UNIT                  Subr   4958                                                           5108                              
 FMS_IO_EXIT                Subr   853                                                                                              
 FMS_IO_INIT                Subr   750                                                                                              
 FMS_IO_MOD                 Module 21                                                                                               
 FMS_IO_UNSTRUCTURED_FIELD_                                                                                                         
 EXIST                      Func   12379    L(4)            4           scalar                                                      
 FMS_IO_UNSTRUCTURED_FILE_U                                                                                                         
 NIT                        Subr   12127                                                                                            
 FMS_IO_UNSTRUCTURED_GET_FI                                                                                                         
 ELD_SIZE                   Subr   12191                                                                                            
 FMS_IO_UNSTRUCTURED_GET_FI                                                                                                         
 LE_NAME                    Func   11870    L(4)            4           scalar                    11462,11549,11636,12144,12417     
 FMS_IO_UNSTRUCTURED_GET_FI                                                                                                         
 LE_UNIT                    Subr   12022                                                          11478,11565,11652,12156,12425     
 FMS_IO_UNSTRUCTURED_READ_I                                                                                                         
 _1D                        Subr   11739                                         PRIV                                               
 FMS_IO_UNSTRUCTURED_READ_I                                                                                                         
 _2D                        Subr   11781                                         PRIV                                               
 FMS_IO_UNSTRUCTURED_READ_I                                                                                                         
 _SCALAR                    Subr   11688                                         PRIV                                               
 FMS_IO_UNSTRUCTURED_READ_R                                                                                                         
 _1D                        Subr   11427                                         PRIV             11411,11723,11763                 
 FMS_IO_UNSTRUCTURED_READ_R                                                                                                         
 _2D                        Subr   11514                                         PRIV             11806                             
 FMS_IO_UNSTRUCTURED_READ_R                                                                                                         
 _3D                        Subr   11601                                         PRIV                                               
 FMS_IO_UNSTRUCTURED_READ_R                                                                                                         
 _SCALAR                    Subr   11376                                         PRIV                                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_AXIS_I1D        Subr   9006                                          PRIV                                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_AXIS_R1D        Subr   8791                                          PRIV                                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_AXIS_U          Subr   9217                                          PRIV                                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_I_0D      Func   10291    I(4)            4           scalar   PRIV                                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_I_1D      Func   10402    I(4)            4           scalar   PRIV                                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_I_2D      Func   10519    I(4)            4           scalar   PRIV                                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_R_0D      Func   9718     I(4)            4           scalar   PRIV                                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_R_1D      Func   9829     I(4)            4           scalar   PRIV                                               

Page 459         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54 Subprograms/Common Blocks       fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_R_2D      Func   9946     I(4)            4           scalar   PRIV                                               
 FMS_IO_UNSTRUCTURED_REGIST                                                                                                         
 ER_RESTART_FIELD_R_3D      Func   10104    I(4)            4           scalar   PRIV                                               
 FMS_IO_UNSTRUCTURED_SAVE_R                                                                                                         
 ESTART                     Subr   10699                                                                                            
 FMS_IO_UNSTRUCTURED_SETUP_                                                                                                         
 ONE_FIELD                  Subr   9386                                                           9803,9919,10076,10263,10376,10492,
                                                                                                  10649                             
 FREE_RESTART_TYPE          Subr   1516                                                                                             
 GET_AXIS_CART              Subr   7662                                                           5173                              
 GET_DOMAIN_DECOMP          Subr   7650                                                                                             
 GET_FIELD_ID               Subr   8311                                                           5376,5491,5534,5663,5711,5754,1148
                                                                                                  6,11573,11660                     
 GET_FIELD_SIZE             Subr   5078                                                                                             
 GET_FILENAME_APPENDIX      Subr   8536                                                                                             
 GET_FILE_NAME              Func   8129     L(4)            4           scalar                                                      
 GET_FILE_UNIT              Subr   8258                                                           4935,4942,4984,4988,5034,5041,5343
                                                                                                  ,5490,5533,5660,5708,5751,8505,851
                                                                                                  9                                 
 GET_GLOBAL_ATT_VALUE_REAL  Func   8100     L(4)            4           scalar   PRIV             8108,8116                         
 GET_GLOBAL_ATT_VALUE_TEXT  Func   8072     L(4)            4           scalar   PRIV             825,8080,8088                     
 GET_GREAT_CIRCLE_ALGORITHM Func   8752     L(4)            4           scalar                                                      
 GET_INSTANCE_FILENAME      Subr   8565                                                                                             
 GET_MOSAIC_TILE_FILE_SG    Subr   7941                                          PRIV             1192,4581,8174,8220               
 GET_MOSAIC_TILE_FILE_UG    Subr   7999                                                           597,8862,9080,9279,9468,11909,1195
                                                                                                  9                                 
 GET_MOSAIC_TILE_GRID       Subr   8036                                                                                             
 GET_RESTART_IO_MODE        Subr   735                                                                                              
 GET_SIZE                   Subr   5141                                                           4936,4943,5112                    
 GET_TILE_STRING            Subr   7921                                                                                             
 GET_VAR_ATT_VALUE_TEXT     Subr   8055                                          PRIV                                               
 LOOKUP_AXIS                Func   4857     I(4)            4           scalar                                                      
 LOOKUP_DOMAIN              Func   4843     I(4)            4           scalar                    1274,4695,4848,4851               
 LOOKUP_FIELD_R             Func   4822     I(4)            4           scalar                                                      
 NULLIFY_DOMAIN             Subr   7600                                                                                             
 NULLIFY_FILENAME_APPENDIX  Subr   8545                                                                                             
 OPEN_DIRECT_FILE           Func   7466     I(4)            4           scalar                                                      
 OPEN_FILE                  Func   7731     I(4)            4           scalar                                                      
 OPEN_IEEE32_FILE           Func   7507     I(4)            4           scalar                                                      
 OPEN_NAMELIST_FILE         Func   7390     I(4)            4           scalar                                                      
 OPEN_RESTART_FILE          Func   7434     I(4)            4           scalar                                                      
 PARSE_MASK_TABLE_2D        Subr   8584                                          PRIV                                               
 PARSE_MASK_TABLE_3D        Subr   8664                                          PRIV                                               
 QUERY_INITIALIZED_ID       Func   6977     L(4)            4           scalar   PRIV             6989                              
 QUERY_INITIALIZED_NAME     Func   7002     L(4)            4           scalar   PRIV             7013,7016,7062,7104,7147          
 QUERY_INITIALIZED_R2D      Func   7039     L(4)            4           scalar   PRIV             7050,7053,7062,7063               
 QUERY_INITIALIZED_R3D      Func   7081     L(4)            4           scalar   PRIV             7092,7095,7104,7105               
 QUERY_INITIALIZED_R4D      Func   7124     L(4)            4           scalar   PRIV             7135,7138,7147,7148               
 READ_COMPRESSED_1D         Subr   5442                                          PRIV             5424                              
 READ_COMPRESSED_2D         Subr   5457                                          PRIV             5438,5454                         
 READ_COMPRESSED_3D         Subr   5502                                          PRIV                                               
 READ_COMPRESSED_I1D        Subr   5414                                          PRIV                                               
 READ_COMPRESSED_I2D        Subr   5428                                          PRIV                                               
 READ_DATA_1D_NEW           Subr   5891                                          PRIV             5271                              

Page 460         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54 Subprograms/Common Blocks       fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 READ_DATA_2D               Subr   6018                                          PRIV                                               
 READ_DATA_2D_NEW           Subr   5846                                          PRIV             5255,5840                         
 READ_DATA_2D_REGION        Subr   5627                                          PRIV                                               
 READ_DATA_2D_UG            Subr   5829                                          PRIV                                               
 READ_DATA_3D               Subr   6229                                          PRIV                                               
 READ_DATA_3D_NEW           Subr   5291                                          PRIV             5239,5789,5867,5905,5928          
 READ_DATA_3D_REGION        Subr   5675                                          PRIV                                               
 READ_DATA_4D               Subr   6303                                          PRIV                                               
 READ_DATA_4D_NEW           Subr   5768                                          PRIV                                               
 READ_DATA_I1D_NEW          Subr   5260                                          PRIV                                               
 READ_DATA_I2D_NEW          Subr   5244                                          PRIV                                               
 READ_DATA_I3D_NEW          Subr   5228                                          PRIV                                               
 READ_DATA_ISCALAR_NEW      Subr   5276                                          PRIV                                               
 READ_DATA_SCALAR_NEW       Subr   5911                                          PRIV             5286                              
 READ_DATA_TEXT             Subr   5729                                          PRIV             818,8049                          
 READ_DISTRIBUTED_A1D       Subr   5545                                          PRIV                                               
 READ_DISTRIBUTED_I1D       Subr   5556                                          PRIV             5582                              
 READ_DISTRIBUTED_ISCALAR   Subr   5571                                          PRIV                                               
 READ_DISTRIBUTED_R1D       Subr   5616                                          PRIV             5597,5612                         
 READ_DISTRIBUTED_R3D       Subr   5586                                          PRIV                                               
 READ_DISTRIBUTED_R5D       Subr   5601                                          PRIV                                               
 READ_EOF                   Subr   6567                                                           6082,6151,6219,6293,6367          
 READ_IDATA_2D              Subr   6155                                          PRIV                                               
 READ_LDATA_2D              Subr   6087                                          PRIV                                               
 REGISTER_RESTART_AXIS_I1D  Subr   1398                                          PRIV                                               
 REGISTER_RESTART_AXIS_R1D  Subr   1338                                          PRIV                                               
 REGISTER_RESTART_AXIS_UNLI                                                                                                         
 MITED                      Subr   1469                                          PRIV                                               
 REGISTER_RESTART_FIELD_I0D Func   1851     I(4)            4           scalar   PRIV             1882                              
 REGISTER_RESTART_FIELD_I0D                                                                                                         
 _2LEVEL                    Func   2150     I(4)            4           scalar   PRIV             2180                              
 REGISTER_RESTART_FIELD_I1D Func   1891     I(4)            4           scalar   PRIV             1921                              
 REGISTER_RESTART_FIELD_I1D                                                                                                         
 _2LEVEL                    Func   2191     I(4)            4           scalar   PRIV             2221                              
 REGISTER_RESTART_FIELD_I2D Func   1931     I(4)            4           scalar   PRIV             1965                              
 REGISTER_RESTART_FIELD_I2D                                                                                                         
 _2LEVEL                    Func   2232     I(4)            4           scalar   PRIV             2262                              
 REGISTER_RESTART_FIELD_I3D Func   1974     I(4)            4           scalar   PRIV             2004                              
 REGISTER_RESTART_FIELD_I3D                                                                                                         
 _2LEVEL                    Func   2273     I(4)            4           scalar   PRIV             2303                              
 REGISTER_RESTART_FIELD_R0D Func   1669     I(4)            4           scalar   PRIV             1693                              
 REGISTER_RESTART_FIELD_R0D                                                                                                         
 _2LEVEL                    Func   2013     I(4)            4           scalar   PRIV             2036                              
 REGISTER_RESTART_FIELD_R1D Func   1702     I(4)            4           scalar   PRIV             1727                              
 REGISTER_RESTART_FIELD_R1D                                                                                                         
 _2LEVEL                    Func   2045     I(4)            4           scalar   PRIV             2068                              
 REGISTER_RESTART_FIELD_R2D Func   1736     I(4)            4           scalar   PRIV             1764                              
 REGISTER_RESTART_FIELD_R2D                                                                                                         
 _2LEVEL                    Func   2079     I(4)            4           scalar   PRIV             2102                              
 REGISTER_RESTART_FIELD_R3D Func   1774     I(4)            4           scalar   PRIV             1805                              
 REGISTER_RESTART_FIELD_R3D                                                                                                         
 _2LEVEL                    Func   2113     I(4)            4           scalar   PRIV             2136                              
 REGISTER_RESTART_FIELD_R4D Func   1817     I(4)            4           scalar   PRIV             1841                              
 REGISTER_RESTART_REGION_R2                                                                                                         
 D                          Func   2315     I(4)            4           scalar   PRIV             2359                              

Page 461         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54 Subprograms/Common Blocks       fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 REGISTER_RESTART_REGION_R3                                                                                                         
 D                          Func   2370     I(4)            4           scalar   PRIV             2414                              
 RESET_FIELD_NAME           Subr   6588                                                                                             
 RESET_FIELD_POINTER_I0D    Subr   6712                                          PRIV                                               
 RESET_FIELD_POINTER_I0D_2L                                                                                                         
 EVEL                       Subr   6884                                          PRIV                                               
 RESET_FIELD_POINTER_I1D    Subr   6733                                          PRIV                                               
 RESET_FIELD_POINTER_I1D_2L                                                                                                         
 EVEL                       Subr   6906                                          PRIV                                               
 RESET_FIELD_POINTER_I2D    Subr   6754                                          PRIV                                               
 RESET_FIELD_POINTER_I2D_2L                                                                                                         
 EVEL                       Subr   6928                                          PRIV                                               
 RESET_FIELD_POINTER_I3D    Subr   6775                                          PRIV                                               
 RESET_FIELD_POINTER_I3D_2L                                                                                                         
 EVEL                       Subr   6950                                          PRIV                                               
 RESET_FIELD_POINTER_R0D    Subr   6606                                          PRIV                                               
 RESET_FIELD_POINTER_R0D_2L                                                                                                         
 EVEL                       Subr   6796                                          PRIV                                               
 RESET_FIELD_POINTER_R1D    Subr   6627                                          PRIV                                               
 RESET_FIELD_POINTER_R1D_2L                                                                                                         
 EVEL                       Subr   6818                                          PRIV                                               
 RESET_FIELD_POINTER_R2D    Subr   6648                                          PRIV                                               
 RESET_FIELD_POINTER_R2D_2L                                                                                                         
 EVEL                       Subr   6840                                          PRIV                                               
 RESET_FIELD_POINTER_R3D    Subr   6669                                          PRIV                                               
 RESET_FIELD_POINTER_R3D_2L                                                                                                         
 EVEL                       Subr   6862                                          PRIV                                               
 RESET_FIELD_POINTER_R4D    Subr   6690                                          PRIV                                               
 RESTORE_STATE_ALL          Subr   3856                                          PRIV                                               
 RESTORE_STATE_BORDER       Subr   3610                                                                                             
 RESTORE_STATE_ONE_FIELD    Subr   4191                                          PRIV                                               
 RETURN_DOMAIN              Subr   7623                                                                                             
 SAVE_COMPRESSED_RESTART    Subr   2508                                                           2473                              
 SAVE_DEFAULT_RESTART       Subr   2924                                                           2477                              
 SAVE_RESTART               Subr   2425                                                                                             
 SAVE_RESTART_BORDER        Subr   3320                                                                                             
 SAVE_UNLIMITED_AXIS_RESTAR                                                                                                         
 T                          Subr   2837                                                           2475                              
 SETUP_ONE_FIELD            Subr   4502                                                           1687,1720,1758,1799,1835,1875,1915
                                                                                                  ,1959,1998,2030,2062,2096,2130,217
                                                                                                  4,2215,2256,2297,2335,2390        
 SET_DOMAIN                 Subr   7581                                                                                             
 SET_FILENAME_APPENDIX      Subr   8552                                                                                             
 SET_INITIALIZED_ID         Subr   7162                                          PRIV                                               
 SET_INITIALIZED_NAME       Subr   7190                                          PRIV                                               
 SET_INITIALIZED_R2D        Subr   7224                                          PRIV                                               
 SET_INITIALIZED_R3D        Subr   7271                                          PRIV                                               
 SET_INITIALIZED_R4D        Subr   7319                                          PRIV                                               
 SET_META_GLOBAL            Subr   1601                                                                                             
 STRING_FROM_INTEGER        Func   7870     CHAR            16          scalar   PRIV             7881,7883,7885,7887,7889,7891,7893
                                                                                                  ,7895,7986,8024                   
 STRING_FROM_REAL           Func   7905     CHAR            32          scalar   PRIV             7913                              
 UNIQUE_AXES                Func   5936     I(4)            4           scalar                                                      
 WRITE_CHKSUM               Subr   3770                                                           2480,3598,3762,4181               
 WRITE_DATA_1D_NEW          Subr   4784                                          PRIV             1091                              

Page 462         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54 Subprograms/Common Blocks       fms_io.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 WRITE_DATA_2D              Subr   6380                                          PRIV                                               
 WRITE_DATA_2D_NEW          Subr   4764                                          PRIV             1075                              
 WRITE_DATA_3D              Subr   6497                                          PRIV                                               
 WRITE_DATA_3D_NEW          Subr   1111                                          PRIV             1059,4758,4778,4797,4816          
 WRITE_DATA_4D              Subr   6539                                          PRIV                                               
 WRITE_DATA_4D_NEW          Subr   4739                                          PRIV                                               
 WRITE_DATA_I1D_NEW         Subr   1080                                          PRIV                                               
 WRITE_DATA_I2D_NEW         Subr   1063                                          PRIV                                               
 WRITE_DATA_I3D_NEW         Subr   1046                                          PRIV                                               
 WRITE_DATA_ISCALAR_NEW     Subr   1095                                          PRIV                                               
 WRITE_DATA_SCALAR_NEW      Subr   4802                                          PRIV             1106                              
 WRITE_IDATA_2D             Subr   6454                                          PRIV                                               
 WRITE_LDATA_2D             Subr   6417                                          PRIV                                               
 WRITE_META_GLOBAL          Subr   1642                                                           2865                              

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file

Page 463         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54                                 fms_io.F90

       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1
       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free

Page 464         Source Listing                  FMS_IO_UNSTRUCTURED_FIELD_EXIST
2021-06-01 08:54                                 fms_io.F90

       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations
       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : fms_io.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
