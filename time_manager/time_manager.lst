Page 1           Source Listing                  SET_TIME_PRIVATE
2021-06-01 08:54                                 /tmp/ifortXU7IF0.i90

      1 # 1 "time_manager.F90"
      2 !***********************************************************************
      3 !*                   GNU Lesser General Public License
      4 !*
      5 !* This file is part of the GFDL Flexible Modeling System (FMS).
      6 !*
      7 !* FMS is free software: you can redistribute it and/or modify it under
      8 !* the terms of the GNU Lesser General Public License as published by
      9 !* the Free Software Foundation, either version 3 of the License, or (at
     10 !* your option) any later version.
     11 !*
     12 !* FMS is distributed in the hope that it will be useful, but WITHOUT
     13 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     14 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
     15 !* for more details.
     16 !*
     17 !* You should have received a copy of the GNU Lesser General Public
     18 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
     19 !***********************************************************************
     20 module time_manager_mod
     21 
     22 ! <CONTACT EMAIL="fms@gfdl.noaa.gov">
     23 !   fms
     24 ! </CONTACT>
     25 
     26 ! <HISTORY SRC="http://www.gfdl.noaa.gov/fms-cgi-bin/cvsweb.cgi/FMS/"/>
     27 
     28 ! <OVERVIEW>
     29 !   A software package that provides a set of simple interfaces for
     30 !   modelers to perform computations related to time and dates.
     31 ! </OVERVIEW>
     32 
     33 ! <DESCRIPTION>
     34 !    The changes between the lima revision and this revision are more
     35 !    extensive that all those between antwerp and lima.
     36 !    A brief description of these changes follows.
     37 !
     38 !    1) Added option to set the smallest time increment to something less than one second.
     39 !       This is controlled by calling the pubic subroutine set_ticks_per_second.
     40 !
     41 !    2) Gregorian calendar fixed.
     42 !
     43 !    3) Optional error flag added to calling arguments of public routines.
     44 !       This allows the using routine to terminate the program. It is likely that more
     45 !       diagnostic information is available from the user than from time_manager alone.
     46 !       If the error flag is present then it is the responsibility of the using
     47 !       routine to test it and add additional information to the error message.
     48 !
     49 !    4) Removed the restriction that time increments be positive in routines that increment or decrement
     50 !       time and date. The option to prohibit negative increments can be turned on via optional argument.
     51 !
     52 !    5) subroutine set_date_c modified to handle strings that include only hours or only hours and minutes.
     53 !       This complies with CF convensions.
     54 !
     55 !    6) Made calendar specific routines private.
     56 !       They are not used, and should not be used, by any using code.
     57 !

Page 2           Source Listing                  SET_TIME_PRIVATE
2021-06-01 08:54                                 time_manager.F90

     58 !    7) Error messages made more informative.
     59 !
     60 !    The module defines a type that can be used to represent discrete
     61 !    times (accurate to one second) and to map these times into dates
     62 !    using a variety of calendars. A time is mapped to a date by
     63 !    representing the time with respect to an arbitrary base date (refer
     64 !    to <B>NOTES</B> section for the <LINK SRC="#base date">base date</LINK> setting).
     65 !
     66 !    The time_manager provides a single defined type, time_type, which is
     67 !    used to store time and date quantities. A time_type is a positive
     68 !    definite quantity that represents an interval of time. It can be
     69 !    most easily thought of as representing the number of seconds in some
     70 !    time interval. A time interval can be mapped to a date under a given
     71 !    calendar definition by using it to represent the time that has passed
     72 !    since some base date. A number of interfaces are provided to operate
     73 !    on time_type variables and their associated calendars. Time intervals
     74 !    can be as large as n days where n is the largest number represented by
     75 !    the default integer type on a compiler. This is typically considerably
     76 !    greater than 10 million years (assuming 32 bit integer representation)
     77 !    which is likely to be adequate for most applications. The description
     78 !    of the interfaces is separated into two sections. The first deals with
     79 !    operations on time intervals while the second deals with operations
     80 !    that convert time intervals to dates for a given calendar.
     81 
     82 !    The smallest increment of time is referred to as a tick.
     83 !    A tick cannot be larger than 1 second, which also is the default.
     84 !    The number of ticks per second is set via pubic subroutine set_ticks_per_second.
     85 !    For example, ticks_per_second = 1000  will set the tick to one millisecond.
     86 ! </DESCRIPTION>
     87 
     88 ! <DATA NAME="time_type" TYPE="derived type">
     89 !    Derived-type data variable used to store time and date quantities. It
     90 !    contains three PRIVATE variables: days, seconds and ticks.
     91 ! </DATA>
     92 
     93 use platform_mod, only: r8_kind
     94 use constants_mod, only: rseconds_per_day=>seconds_per_day
     95 use fms_mod, only: error_mesg, FATAL, WARNING, write_version_number, stdout
     96 
     97 implicit none
     98 private
     99 
    100 ! Module defines a single type
    101 public time_type
    102 
    103 ! Operators defined on time_type
    104 public operator(+),  operator(-),   operator(*),   operator(/),  &
    105        operator(>),  operator(>=),  operator(==),  operator(/=), &
    106        operator(<),  operator(<=),  operator(//),  assignment(=)
    107 
    108 ! Subroutines and functions operating on time_type
    109 public set_time, increment_time, decrement_time, get_time, interval_alarm
    110 public repeat_alarm, time_type_to_real, real_to_time_type
    111 public time_list_error
    112 
    113 ! List of available calendar types
    114 public    THIRTY_DAY_MONTHS,    JULIAN,    GREGORIAN,  NOLEAP,   NO_CALENDAR, INVALID_CALENDAR

Page 3           Source Listing                  SET_TIME_PRIVATE
2021-06-01 08:54                                 time_manager.F90

    115 
    116 ! Subroutines and functions involving relations between time and calendar
    117 public set_calendar_type
    118 public get_calendar_type
    119 public set_ticks_per_second
    120 public get_ticks_per_second
    121 public set_date
    122 public get_date
    123 public increment_date
    124 public decrement_date
    125 public days_in_month
    126 public leap_year
    127 public length_of_year
    128 public days_in_year
    129 public day_of_year
    130 public month_name
    131 
    132 public valid_calendar_types
    133 
    134 ! Subroutines for printing version number and time type
    135 public :: time_manager_init, print_time, print_date
    136 
    137 ! The following exist only for interpolator.F90
    138 ! interpolator.F90 uses them to do a calendar conversion,
    139 ! which is also done by get_cal_time. interpolator.F90
    140 ! should be modified to use get_cal_time instead.
    141 ! After interpolator.F90 is fixed, these can be removed
    142 ! and the corresponding private routines can be renamed.
    143 ! (e.g., rename set_date_julian_private to be just set_date_julian)
    144 public :: set_date_julian, set_date_no_leap, get_date_julian, get_date_no_leap
    145 
    146 public :: date_to_string
    147 
    148 !====================================================================
    149 
    150 ! Global data to define calendar type
    151 integer, parameter :: THIRTY_DAY_MONTHS = 1,      JULIAN = 2, &
    152                       GREGORIAN = 3,              NOLEAP = 4, &
    153                       NO_CALENDAR = 0,  INVALID_CALENDAR =-1
    154 integer, private :: calendar_type = NO_CALENDAR
    155 integer, parameter :: max_type = 4
    156 
    157 ! Define number of days per month
    158 integer, private :: days_per_month(12) = (/31,28,31,30,31,30,31,31,30,31,30,31/)
    159 integer, parameter :: seconds_per_day = rseconds_per_day  ! This should automatically cast real to integer
    160 integer, parameter :: days_in_400_year_period = 146097    ! Used only for gregorian
    161 integer, dimension(days_in_400_year_period) :: coded_date ! Used only for gregorian
    162 integer, dimension(400,12,31) :: date_to_day              ! Used only for gregorian
    163 integer, parameter :: invalid_date=-1                     ! Used only for gregorian
    164 integer,parameter :: do_floor = 0
    165 integer,parameter :: do_nearest = 1
    166 
    167 
    168 ! time_type is implemented as seconds and days to allow for larger intervals
    169 type time_type
    170    private
    171    integer:: seconds

Page 4           Source Listing                  SET_TIME_PRIVATE
2021-06-01 08:54                                 time_manager.F90

    172    integer:: days
    173    integer:: ticks
    174    integer:: dummy ! added as a workaround bug on IRIX64 (AP)
    175 end type time_type
    176 
    177 !======================================================================
    178 
    179 interface operator (+);   module procedure time_plus;        end interface
    180 interface operator (-);   module procedure time_minus;       end interface
    181 interface operator (*);   module procedure time_scalar_mult
    182                           module procedure scalar_time_mult; end interface
    183 interface operator (/);   module procedure time_scalar_divide
    184                           module procedure time_divide;      end interface
    185 interface operator (>);   module procedure time_gt;          end interface
    186 interface operator (>=);  module procedure time_ge;          end interface
    187 interface operator (<);   module procedure time_lt;          end interface
    188 interface operator (<=);  module procedure time_le;          end interface
    189 interface operator (==);  module procedure time_eq;          end interface
    190 interface operator (/=);  module procedure time_ne;          end interface
    191 interface operator (//);  module procedure time_real_divide; end interface
    192 interface assignment(=);  module procedure time_assignment;  end interface
    193 
    194 !======================================================================
    195 
    196 interface set_time
    197   module procedure set_time_i, set_time_c
    198 end interface
    199 
    200 interface set_date
    201   module procedure set_date_i, set_date_c
    202 end interface
    203 
    204 !======================================================================
    205 
    206 ! Include variable "version" to be written to log file.
    207 # 1 "../include/file_version.h" 1 
    208 ! -*-f90-*-
    209 !***********************************************************************
    210 !*                   GNU Lesser General Public License
    211 !*
    212 !* This file is part of the GFDL Flexible Modeling System (FMS).
    213 !*
    214 !* FMS is free software: you can redistribute it and/or modify it under
    215 !* the terms of the GNU Lesser General Public License as published by
    216 !* the Free Software Foundation, either version 3 of the License, or (at
    217 !* your option) any later version.
    218 !*
    219 !* FMS is distributed in the hope that it will be useful, but WITHOUT
    220 !* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    221 !* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    222 !* for more details.
    223 !*
    224 !* You should have received a copy of the GNU Lesser General Public
    225 !* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
    226 !***********************************************************************
    227 
    228 # 23

Page 5           Source Listing                  SET_TIME_PRIVATE
2021-06-01 08:54                                 ../include/file_version.h

    229 
    230   character(len=*), parameter :: version = 'unknown'
    231 
    232 # 207 "time_manager.F90" 2 
    233 logical :: module_is_initialized = .false.
    234 
    235 !======================================================================
    236 
    237 !  A tick is the smallest increment of time.
    238 !  That is, smallest increment of time = (1/ticks_per_second) seconds
    239 
    240 integer :: ticks_per_second = 1
    241 
    242 !======================================================================
    243 contains
    244 
    245 ! First define all operations on time intervals independent of calendar
    246 
    247 !=========================================================================
    248 ! <FUNCTION NAME="set_time">
    249 
    250 !   <OVERVIEW>
    251 !     Given some number of seconds and days, returns the
    252 !     corresponding time_type.
    253 !   </OVERVIEW>
    254 !   <DESCRIPTION>
    255 !     Given some number of seconds and days, returns the
    256 !     corresponding time_type. set_time has two forms;
    257 !     one accepts integer input, the other a character string.
    258 !     For the first form, there are no restrictions on the range of the inputs,
    259 !     except that the result must be positive time.
    260 !     e.g. days=-1, seconds=86401 is acceptable.
    261 !     For the second form, days and seconds must both be positive.
    262 !   </DESCRIPTION>
    263 !   <TEMPLATE>
    264 !     1. set_time(seconds, days, ticks, err_msg)
    265 !   </TEMPLATE>
    266 !   <TEMPLATE>
    267 !     2. set_time(time_string, err_msg, allow_rounding)
    268 !   </TEMPLATE>
    269 
    270 !   <IN NAME="seconds" UNITS="" TYPE="integer" DIM="(scalar)">
    271 !     A number of seconds.
    272 !   </IN>
    273 !   <IN NAME="days" UNITS="" TYPE="integer" DIM="(scalar)">
    274 !     A number of days.
    275 !   </IN>
    276 !   <IN NAME="ticks" UNITS="" TYPE="integer, optional" DIM="(scalar)">
    277 !     A number of ticks.
    278 !   </IN>
    279 !   <OUT NAME="err_msg" TYPE="character, optional" DIM="(scalar)">
    280 !     When present, and when non-blank, a fatal error condition as been detected.
    281 !     The string itself is an error message.
    282 !     It is recommended that, when err_msg is present in the call
    283 !     to this routine, the next line of code should be something
    284 !     similar to this:
    285 !     if(err_msg /= '') call error_mesg('my_routine','additional info: '//trim(err_msg),FATAL)

Page 6           Source Listing                  SET_TIME_PRIVATE
2021-06-01 08:54                                 time_manager.F90

    286 !   </OUT>
    287 !   <IN NAME="time_string" TYPE="character">
    288 !     Contains days and seconds separated by a single blank.
    289 !     days must be integer, seconds may be integer or real.
    290 !     Examples: '100 43200'  '100 43200.50'
    291 !   </IN>
    292 !   <IN NAME="allow_rounding"   TYPE="logical, optional" DEFAULT=".true.">
    293 !     When .true., any fractions of a second will be rounded off to the nearest tick.
    294 !     When .false., it is a fatal error if the second fraction cannot be exactly
    295 !     represented by a number of ticks.
    296 !   </IN>
    297 !   <OUT NAME="set_time" UNITS="" TYPE="" DIM="" DEFAULT="">
    298 !     A time interval corresponding to this number of days and seconds.
    299 !   </OUT>
    300 
    301  function set_time_private(seconds, days, ticks, Time_out, err_msg)
    302 
    303 ! Returns a time interval corresponding to this number of days, seconds, and ticks.
    304 ! days, seconds and ticks may be negative, but resulting time must be positive.
    305 
    306 ! -- pjp --
    307 ! To understand why inputs may be negative,
    308 ! one needs to understand the intrinsic function "modulo".
    309 ! The expanation below is copied from a web page on fortran 90
    310 
    311 ! In addition, CEILING, FLOOR  and MODULO  have been added to Fortran 90.
    312 ! Only the last one is difficult to explain, which is most easily done with the examples from ISO (1991)
    313 
    314 ! MOD (8,5)    gives  3     MODULO (8,5)    gives  3
    315 ! MOD (-8,5)   gives -3     MODULO (-8,5)   gives  2
    316 ! MOD (8,-5)   gives  3     MODULO (8,-5)   gives -2
    317 ! MOD (-8,-5)  gives -3     MODULO (-8,-5)  gives -3
    318 
    319 ! I don't think it is difficult to explain.
    320 ! I think that is it sufficient to say this:
    321 ! "The result of modulo(n,m) has the sign of m"
    322 ! -- pjp --
    323 
    324  logical                       :: set_time_private
    325  integer, intent(in)           :: seconds, days, ticks
    326  type(time_type),  intent(out) :: Time_out
    327  character(len=*), intent(out) :: err_msg
    328  integer            :: seconds_new, days_new, ticks_new
    329 
    330  seconds_new = seconds + floor(ticks/real(ticks_per_second))
    331  ticks_new = modulo(ticks,ticks_per_second)
    332  days_new = days + floor(seconds_new/real(seconds_per_day))
    333  seconds_new = modulo(seconds_new,seconds_per_day)
    334 
    335  if ( seconds_new < 0 .or. ticks_new < 0) then
    336    call error_mesg('function set_time_i','Bad result for time. Contact those responsible for maintaining time_manager',FATAL
    336 )
    337  endif
    338 
    339  if(days_new < 0) then
    340    write(err_msg,'(a,i6,a,i6,a,i6)') 'time is negative. days=',days_new,' seconds=',seconds_new,' ticks=',ticks_new
    341    set_time_private = .false.

Page 7           Source Listing                  SET_TIME_PRIVATE
2021-06-01 08:54                                 time_manager.F90

    342  else
    343    Time_out%days = days_new
    344    Time_out%seconds = seconds_new
    345    Time_out%ticks = ticks_new
    346    err_msg = ''
    347    set_time_private = .true.
    348  endif
    349 
    350  end function set_time_private


ENTRY POINTS

  Name                                             
                                                   
 time_manager_mod_mp_set_time_private_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS                       Dummy  301      I(4)            4           scalar   ARG,IN           332                               
 DAYS_NEW                   Local  328      I(4)            4           scalar                    332,339,340,343                   
 ERROR_MESG                 Subr   336                                           PRIV             95,336,1099,1187,1336,1340,1783,18
                                                                                                  57,2240,2481,2561,3143,3247,3340,3
                                                                                                  365                               
 ERR_MSG                    Dummy  301      CHAR                        scalar   ARG,OUT          340,346                           
 FATAL                      Param  336      I(4)            4           scalar   PRIV             95,336,1100,1187,1337,1341,1783,18
                                                                                                  57,2481,2561,3143,3247,3340,3365  
 FLOOR                      Func   330                                  scalar                    330,332                           
 MODULO                     Func   331                                  scalar                    331,333                           
 REAL                       Func   330                                  scalar                    330,332                           
 SECONDS                    Dummy  301      I(4)            4           scalar   ARG,IN           330                               
 SECONDS_NEW                Local  328      I(4)            4           scalar                    330,332,333,335,340,344           
 SECONDS_PER_DAY            Param  332      I(4)            4           scalar                    332,333,547,551,1103,1104,1179,118
                                                                                                  0,1227,1228,1382,1575,1578        
 SET_TIME_PRIVATE           Func   301      L(4)            4           scalar                    341,347,367,438,659,1314          
 TICKS                      Dummy  301      I(4)            4           scalar   ARG,IN           330,331                           
 TICKS_NEW                  Local  328      I(4)            4           scalar                    331,335,340,345                   
 TICKS_PER_SECOND           Local  330      I(4)            4           scalar                    240,330,331,432,470,478,1089,1091,
                                                                                                  1179,1180,1227,1228,1289,1307,1383
                                                                                                  ,1645,1667,2283,2584              
 TIME_OUT                   Dummy  301      TIME_TYPE       16          scalar   ARG,OUT          343,344,345                       
 TIME_TYPE                  Type   326                      16          scalar                    101,175,326,354,376,524,606,607,64
                                                                                                  2,644,710,711,767,809,844,885,920,
                                                                                                  958,992,993,1034,1035,1075,1076,11
                                                                                                  35,1136,1173,1221,1258,1259,1284,1
                                                                                                  299,1372,1373,1377,1454,1455,1507,
                                                                                                  1508,1713,1768,1851,1899,1947,1962
                                                                                                  ,1989,2021,2094,2138,2192,2308,239
                                                                                                  4,2428,2476,2493,2523,2556,2666,26
                                                                                                  67,2724,2726,2850,2851,2915,2946,2
                                                                                                  961,2977,2989,3022,3050,3077,3092,
                                                                                                  3105,3129,3152,3162,3175,3185,3200
                                                                                                  ,3203,3233,3257,3268,3282,3297,341
                                                                                                  2,3464,3545,3566                  

Page 8           Source Listing                  SET_TIME_PRIVATE
2021-06-01 08:54 Symbol Table                    time_manager.F90



TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 TIME_TYPE.DAYS             I(4)            4     4              scalar   PRIV             343,545,547,551,648,659,769,770,84 
                                                                                           6,847,924,997,1040,1042,1106,1179, 
                                                                                           1180,1227,1228,1261,1288,1384,1786 
                                                                                           ,1807,1860,1867,1906,1907,1967,199 
                                                                                           5,1996,2361,2414,2463,2507,3207,35 
                                                                                           71                                 
 TIME_TYPE.SECONDS          I(4)            4     0              scalar   PRIV             344,533,653,659,771,774,848,851,92 
                                                                                           4,997,1040,1042,1090,1179,1180,122 
                                                                                           7,1228,1260,1288,1384,1782,1835,18 
                                                                                           36,1856,1869,1870,1933,1975,2006,2 
                                                                                           334,2403,2462,2508                 
 TIME_TYPE.TICKS            I(4)            4     8              scalar   PRIV             345,536,538,659,772,849,925,997,10 
                                                                                           40,1042,1088,1179,1180,1227,1228,1 
                                                                                           262,1289,1384,1839,1873,1938,1980, 
                                                                                           2011,2362,2415,2464,2509           

Page 9           Source Listing                  SET_TIME_PRIVATE
2021-06-01 08:54                                 time_manager.F90

    351 !---------------------------------------------------------------------------
    352 
    353  function set_time_i(seconds, days, ticks, err_msg)
    354  type(time_type)               :: set_time_i
    355  integer, intent(in)           :: seconds
    356  integer, intent(in), optional :: days, ticks
    357  character(len=*), intent(out), optional :: err_msg
    358  character(len=128) :: err_msg_local
    359  integer            :: odays, oticks
    360 
    361  if(.not.module_is_initialized) call time_manager_init
    362 
    363  odays  = 0; if(present(days))  odays  = days
    364  oticks = 0; if(present(ticks)) oticks = ticks
    365  if(present(err_msg)) err_msg = ''
    366 
    367  if(.not.set_time_private(seconds, odays, oticks, set_time_i, err_msg_local)) then
    368    if(error_handler('function set_time_i', trim(err_msg_local), err_msg)) return
    369  endif
    370 
    371  end function set_time_i


ENTRY POINTS

  Name                                       
                                             
 time_manager_mod_mp_set_time_i_             

Page 10          Source Listing                  SET_TIME_I
2021-06-01 08:54 Symbol Table                    time_manager.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS                       Dummy  353      I(4)            4           scalar   ARG,IN           363                               
 ERROR_HANDLER@0            Local  368      L(4)            4           scalar                                                      
 ERR_MSG                    Dummy  353      CHAR                        scalar   ARG,OUT          365,368                           
 ERR_MSG_LOCAL              Local  358      CHAR            128         scalar                    367,368                           
 MODULE_IS_INITIALIZED      Local  361      L(4)            4           scalar                    233,361,387,530,922,995,1037,1081,
                                                                                                  1176,1224,1286,1566,1725,2102,2150
                                                                                                  ,2209,2676,2918,3025,3131,3235,333
                                                                                                  8,3385,3388,3520                  
 ODAYS                      Local  359      I(4)            4           scalar                    363,367                           
 OTICKS                     Local  359      I(4)            4           scalar                    364,367                           
 PRESENT                    Func   363                                  scalar                    363,364,365                       
 SECONDS                    Dummy  353      I(4)            4           scalar   ARG,IN           367                               
 SET_TIME_I                 Func   353      RECORD          16          scalar   PRIV             367,1106,1390,2544,3154,3167,3177,
                                                                                                  3187                              
 TICKS                      Dummy  353      I(4)            4           scalar   ARG,IN           364                               
 TIME_MANAGER_INIT          Subr   361                                                            135,361,387,530,922,995,1037,1081,
                                                                                                  1176,1224,1286,1566,1725,2102,2150
                                                                                                  ,2209,2676,2918,3025,3131,3235,333
                                                                                                  8,3520                            
 TRIM                       Func   368                                  scalar                    368                               

Page 11          Source Listing                  SET_TIME_I
2021-06-01 08:54                                 time_manager.F90

    372 !---------------------------------------------------------------------------
    373 
    374  function set_time_c(string, err_msg, allow_rounding)
    375 
    376  type(time_type) :: set_time_c
    377  character(len=*), intent(in) :: string
    378  character(len=*), intent(out), optional :: err_msg
    379  logical, intent(in), optional :: allow_rounding
    380 
    381  character(len=4) :: formt='(i )'
    382  integer :: i1, i2, i3, day, second, tick, nsps
    383  character(len=32) :: string_sifted_left
    384  character(len=128) :: err_msg_local
    385  logical :: allow_rounding_local
    386 
    387  if(.not.module_is_initialized) call time_manager_init
    388  if(present(err_msg)) err_msg = ''
    389  allow_rounding_local=.true.; if(present(allow_rounding)) allow_rounding_local=allow_rounding
    390 
    391  err_msg_local = 'Form of character time stamp is incorrect. The character time stamp is: '//trim(string)
    392 
    393  string_sifted_left = adjustl(string)
    394  i1 = index(trim(string_sifted_left),' ')
    395  if(i1 == 0) then
    396    if(error_handler('function set_time_c', err_msg_local, err_msg)) return
    397  endif
    398  if(index(string,'-') /= 0 .or. index(string,':') /= 0) then
    399    if(error_handler('function set_time_c', err_msg_local, err_msg)) return
    400  endif
    401 
    402  i2 = index(trim(string_sifted_left),'.')
    403  i3 = len_trim(cut0(string_sifted_left))
    404 
    405  if(i2 /= 0) then ! There is no decimal point
    406 ! Check that decimal is on seconds (not days)
    407    if(i2 < i1) then
    408      if(error_handler('function set_time_c', err_msg_local, err_msg)) return
    409    endif
    410  endif
    411  write(formt(3:3),'(i1)') i1-1
    412  read(string_sifted_left(1:i1-1),formt) day
    413 
    414  if(i2 == 0) then ! There is no decimal point
    415    write(formt(3:3),'(i1)') i3-i1
    416    read(string_sifted_left(i1+1:i3),formt) second
    417    tick = 0
    418  else ! There is a decimal point
    419 ! nsps = spaces occupied by whole number of seconds
    420    nsps = i2-i1-1
    421    if(nsps == 0) then
    422      second = 0
    423    else
    424      write(formt(3:3),'(i1)') nsps
    425      read(string_sifted_left(i1+1:i2-1),formt) second
    426    endif
    427 
    428    if(.not.get_tick_from_string(string_sifted_left(i2:i3), err_msg_local, allow_rounding_local, tick)) then

Page 12          Source Listing                  SET_TIME_C
2021-06-01 08:54                                 time_manager.F90

    429      if(error_handler('function set_time_c', err_msg_local, err_msg)) return
    430    endif
    431 ! If tick has been rounded up to ticks_per_second, then bump up second.
    432    if(tick == ticks_per_second) then
    433      second = second + 1
    434      tick = 0
    435    endif
    436  endif
    437 
    438  if(.not.set_time_private(second, day, tick, set_time_c, err_msg_local)) then
    439    if(error_handler('function set_time_c', err_msg_local, err_msg)) return
    440  endif
    441 
    442  end function set_time_c


ENTRY POINTS

  Name                                       
                                             
 time_manager_mod_mp_set_time_c_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   393                                  scalar                    393                               
 ALLOW_ROUNDING             Dummy  374      L(4)            4           scalar   ARG,IN           389                               
 ALLOW_ROUNDING_LOCAL       Local  385      L(4)            4           scalar                    389,428                           
 CUT0@0                     Local  403      CHAR            256         scalar                                                      
 DAY                        Local  382      I(4)            4           scalar                    412,438                           
 ERR_MSG                    Dummy  374      CHAR                        scalar   ARG,OUT          388,396,399,408,429,439           
 ERR_MSG_LOCAL              Local  384      CHAR            128         scalar                    391,396,399,408,428,429,438,439   
 FORMT                      Local  381      CHAR            4           scalar                    381,411,412,415,416,424,425       
 GET_TICK_FROM_STRING@0     Local  428      L(4)            4           scalar                                                      
 I1                         Local  382      I(4)            4           scalar                    394,395,407,411,412,415,416,420,42
                                                                                                  5                                 
 I2                         Local  382      I(4)            4           scalar                    402,405,407,414,420,425,428       
 I3                         Local  382      I(4)            4           scalar                    403,415,416,428                   
 INDEX                      Func   394                                  scalar                    394,398,402                       
 LEN_TRIM                   Func   403                                  scalar                    403                               
 NSPS                       Local  382      I(4)            4           scalar                    420,421,424                       
 PRESENT                    Func   388                                  scalar                    388,389                           
 SECOND                     Local  382      I(4)            4           scalar                    416,422,425,433,438               
 SET_TIME_C                 Func   374      RECORD          16          scalar   PRIV             438                               
 STRING                     Dummy  374      CHAR                        scalar   ARG,IN           391,393,398                       
 STRING_SIFTED_LEFT         Local  383      CHAR            32          scalar                    393,394,402,403,412,416,425,428   
 TICK                       Local  382      I(4)            4           scalar                    417,428,432,434,438               
 TRIM                       Func   391                                  scalar                    391,394,402                       

Page 13          Source Listing                  SET_TIME_C
2021-06-01 08:54                                 time_manager.F90

    443 !---------------------------------------------------------------------------
    444 ! </FUNCTION>
    445 
    446  function get_tick_from_string(string, err_msg, allow_rounding, tick)
    447 
    448  logical :: get_tick_from_string
    449  character(len=*), intent(in) :: string
    450  character(len=*), intent(out) :: err_msg
    451  logical, intent(in) :: allow_rounding
    452  integer, intent(out) :: tick
    453 
    454  character(len=4) :: formt='(i )'
    455  integer :: i3, nspf, fraction, magnitude, tpsfrac
    456 
    457  err_msg = ''
    458  get_tick_from_string = .true.
    459  i3 = len_trim(string)
    460  nspf = i3 - 1 ! nspf = spaces occupied by fractional seconds, excluding decimal point
    461  if(nspf == 0) then
    462    tick = 0 ! Nothing to the right of the decimal point
    463  else
    464    write(formt(3:3),'(i1)') nspf
    465    read(string(2:i3),formt) fraction
    466    if(fraction == 0) then
    467      tick = 0 ! All zeros to the right of the decimal point
    468    else
    469      magnitude = 10**nspf
    470      tpsfrac = ticks_per_second*fraction
    471      if(allow_rounding) then
    472        tick = nint((real(tpsfrac)/magnitude))
    473      else
    474        if(modulo(tpsfrac,magnitude) == 0) then
    475          tick = tpsfrac/magnitude
    476        else
    477          write(err_msg,'(a,i6)') 'Second fraction cannot be exactly represented with ticks.  '// &
    478                                  'fraction='//trim(string)//'  ticks_per_second=',ticks_per_second
    479          get_tick_from_string = .false.
    480        endif
    481      endif
    482    endif
    483  endif
    484 
    485  end function get_tick_from_string

Page 14          Source Listing                  GET_TICK_FROM_STRING
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                                 
                                                       
 time_manager_mod_mp_get_tick_from_string_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALLOW_ROUNDING             Dummy  446      L(4)            4           scalar   ARG,IN           471                               
 ERR_MSG                    Dummy  446      CHAR                        scalar   ARG,OUT          457,477                           
 FORMT                      Local  454      CHAR            4           scalar                    454,464,465                       
 FRACTION                   Local  455      I(4)            4           scalar                    465,466,470                       
 GET_TICK_FROM_STRING       Func   446      L(4)            4           scalar                    428,458,479,2279                  
 I3                         Local  455      I(4)            4           scalar                    459,460,465                       
 LEN_TRIM                   Func   459                                  scalar                    459                               
 MAGNITUDE                  Local  455      I(4)            4           scalar                    469,472,474,475                   
 MODULO                     Func   474                                  scalar                    474                               
 NINT                       Func   472                                  scalar                    472                               
 NSPF                       Local  455      I(4)            4           scalar                    460,461,464,469                   
 REAL                       Func   472                                  scalar                    472                               
 STRING                     Dummy  446      CHAR                        scalar   ARG,IN           459,465,478                       
 TICK                       Dummy  446      I(4)            4           scalar   ARG,OUT          462,467,472,475                   
 TPSFRAC                    Local  455      I(4)            4           scalar                    470,472,474,475                   
 TRIM                       Func   478                                  scalar                    478                               

Page 15          Source Listing                  GET_TICK_FROM_STRING
2021-06-01 08:54                                 time_manager.F90

    486 !---------------------------------------------------------------------------
    487 ! <SUBROUTINE NAME="get_time">
    488 
    489 !   <OVERVIEW>
    490 !     Given a time interval, returns the corresponding seconds and days.
    491 !   </OVERVIEW>
    492 !   <DESCRIPTION>
    493 !     Given a time interval, returns the corresponding seconds and days.
    494 !   </DESCRIPTION>
    495 !   <TEMPLATE>
    496 !     get_time(time, seconds, days, ticks, err_msg)
    497 !   </TEMPLATE>
    498 
    499 !   <IN NAME="time" TYPE="time_type">
    500 !     A time interval.
    501 !   </IN>
    502 !   <OUT NAME="seconds" UNITS="" TYPE="integer" DIM="(scalar)">
    503 !     A number of seconds.
    504 !   </OUT>
    505 !   <OUT NAME="days" UNITS="" TYPE="integer" DIM="(scalar)">
    506 !     A number of days.
    507 !   </OUT>
    508 !   <OUT NAME="ticks" UNITS="" TYPE="integer, optional" DIM="(scalar)">
    509 !     A number of ticks.
    510 !   </OUT>
    511 !   <OUT NAME="err_msg" TYPE="character, optional" DIM="(scalar)">
    512 !     When present, and when non-blank, a fatal error condition as been detected.
    513 !     The string itself is an error message.
    514 !     It is recommended that, when err_msg is present in the call
    515 !     to this routine, the next line of code should be something
    516 !     similar to this:
    517 !     if(err_msg /= '') call error_mesg('my_routine','additional info: '//trim(err_msg),FATAL)
    518 !   </OUT>
    519 
    520 subroutine get_time(Time, seconds, days, ticks, err_msg)
    521 
    522 ! Returns days and seconds ( < 86400 ) corresponding to a time.
    523 
    524 type(time_type), intent(in) :: Time
    525 integer, intent(out) :: seconds
    526 integer, intent(out), optional :: days, ticks
    527 character(len=*), intent(out), optional :: err_msg
    528 character(len=128) :: err_msg_local
    529 
    530 if(.not.module_is_initialized) call time_manager_init
    531 if(present(err_msg)) err_msg = ''
    532 
    533 seconds = Time%seconds
    534 
    535 if(present(ticks)) then
    536   ticks = Time%ticks
    537 else
    538   if(Time%ticks /= 0) then
    539     err_msg_local = 'subroutine get_time: ticks must be present when time has a second fraction'
    540     if(error_handler('subroutine get_time', err_msg_local, err_msg)) return
    541   endif
    542 endif

Page 16          Source Listing                  GET_TIME
2021-06-01 08:54                                 time_manager.F90

    543 
    544 if (present(days)) then
    545   days = Time%days
    546 else
    547   if (Time%days > (huge(seconds) - seconds)/seconds_per_day) then
    548     err_msg_local = 'Integer overflow in seconds. Optional argument days must be present.'
    549     if(error_handler('subroutine get_time', err_msg_local, err_msg)) return
    550   endif
    551   seconds = seconds + Time%days * seconds_per_day
    552 endif
    553 
    554 end subroutine get_time


ENTRY POINTS

  Name                                     
                                           
 time_manager_mod_mp_get_time_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS                       Dummy  520      I(4)            4           scalar   ARG,OUT          544,545                           
 ERR_MSG                    Dummy  520      CHAR                        scalar   ARG,OUT          531,540,549                       
 ERR_MSG_LOCAL              Local  528      CHAR            128         scalar                    539,540,548,549                   
 GET_TIME                   Subr   520                                                                                              
 HUGE                       Func   547                                  scalar                    547                               
 PRESENT                    Func   531                                  scalar                    531,535,544                       
 SECONDS                    Dummy  520      I(4)            4           scalar   ARG,OUT          533,547,551                       
 TICKS                      Dummy  520      I(4)            4           scalar   ARG,OUT          535,536                           
 TIME                       Dummy  520      TIME_TYPE       16          scalar   ARG,IN           533,536,538,545,547,551           

Page 17          Source Listing                  GET_TIME
2021-06-01 08:54                                 time_manager.F90

    555 ! </SUBROUTINE>
    556 
    557 !-------------------------------------------------------------------------
    558 ! <FUNCTION NAME="increment_time">
    559 
    560 !   <OVERVIEW>
    561 !      Given a time and an increment of days and seconds, returns
    562 !      a time that adds this increment to an input time.
    563 !   </OVERVIEW>
    564 !   <DESCRIPTION>
    565 !      Given a time and an increment of days and seconds, returns
    566 !      a time that adds this increment to an input time.
    567 !      Increments a time by seconds and days.
    568 !   </DESCRIPTION>
    569 !   <TEMPLATE>
    570 !     increment_time(time, seconds, days, ticks, err_msg, allow_neg_inc)
    571 !   </TEMPLATE>
    572 
    573 !   <IN NAME="time"  TYPE="time_type" DIM="(scalar)">
    574 !      A time interval.
    575 !   </IN>
    576 !   <IN NAME="seconds"  TYPE="integer" DIM="(scalar)">
    577 !     Increment of seconds.
    578 !   </IN>
    579 !   <IN NAME="days" UNITS="" TYPE="integer, optional" DIM="(scalar)">
    580 !     Increment of days.
    581 !   </IN>
    582 !   <IN NAME="ticks"  TYPE="integer, optional" DIM="(scalar)">
    583 !     Increment of ticks.
    584 !   </IN>
    585 !   <OUT NAME="increment_time"  TYPE="time_type" DIM="(scalar)">
    586 !     A time that adds this increment to the input time.
    587 !     A negative result is a fatal error.
    588 !   </OUT>
    589 !   <OUT NAME="err_msg" TYPE="character, optional" DIM="(scalar)">
    590 !     When present, and when non-blank, a fatal error condition as been detected.
    591 !     The string itself is an error message.
    592 !     It is recommended that, when err_msg is present in the call
    593 !     to this routine, the next line of code should be something
    594 !     similar to this:
    595 !     if(err_msg /= '') call error_mesg('my_routine','additional info: '//trim(err_msg),FATAL)
    596 !   </OUT>
    597 !   <IN NAME="allow_neg_inc" TYPE="logical, optional" DIM="(scalar)" DEFAULT=".true.">
    598 !     When .false., it is a fatal error if any of the input time increments are negative.
    599 !     This mimics the behavior of lima and earlier revisions.
    600 !   </IN>
    601 
    602  function increment_time(Time, seconds, days, ticks, err_msg, allow_neg_inc)
    603 
    604 ! Increments a time by seconds, days and ticks.
    605 
    606  type(time_type)               :: increment_time
    607  type(time_type), intent(in)   :: Time
    608  integer, intent(in)           :: seconds
    609  integer, intent(in), optional :: days, ticks
    610  character(len=*), intent(out), optional :: err_msg
    611  logical, intent(in), optional :: allow_neg_inc

Page 18          Source Listing                  INCREMENT_TIME
2021-06-01 08:54                                 time_manager.F90

    612 
    613  integer :: odays, oticks
    614  character(len=128) :: err_msg_local
    615  logical :: allow_neg_inc_local
    616 
    617  odays  = 0; if(present(days))  odays  = days
    618  oticks = 0; if(present(ticks)) oticks = ticks
    619  allow_neg_inc_local=.true.; if(present(allow_neg_inc)) allow_neg_inc_local=allow_neg_inc
    620 
    621  if(.not.allow_neg_inc_local) then
    622    if(seconds < 0 .or. odays < 0 .or. oticks < 0) then
    623      write(err_msg_local,10) seconds, odays, oticks
    624      10 format('One or more time increments are negative: seconds=',i6,'  days=',i6,'  ticks=',i6)
    625      if(error_handler('function increment_time', err_msg_local, err_msg)) return
    626    endif
    627  endif
    628 
    629  if(.not.increment_time_private(Time, seconds, odays, oticks, increment_time, err_msg_local)) then
    630    if(error_handler('function increment_time', err_msg_local, err_msg)) return
    631  endif
    632 
    633  end function increment_time


ENTRY POINTS

  Name                                           
                                                 
 time_manager_mod_mp_increment_time_             

Page 19          Source Listing                  INCREMENT_TIME
2021-06-01 08:54 Symbol Table                    time_manager.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  624                                                            623                               
 ALLOW_NEG_INC              Dummy  602      L(4)            4           scalar   ARG,IN           619                               
 ALLOW_NEG_INC_LOCAL        Local  615      L(4)            4           scalar                    619,621                           
 DAYS                       Dummy  602      I(4)            4           scalar   ARG,IN           617                               
 ERR_MSG                    Dummy  602      CHAR                        scalar   ARG,OUT          625,630                           
 ERR_MSG_LOCAL              Local  614      CHAR            128         scalar                    623,625,629,630                   
 INCREMENT_TIME             Func   602      TIME_TYPE       16          scalar                                                      
 INCREMENT_TIME_PRIVATE@0   Local  629      L(4)            4           scalar                                                      
 ODAYS                      Local  613      I(4)            4           scalar                    617,622,623,629                   
 OTICKS                     Local  613      I(4)            4           scalar                    618,622,623,629                   
 PRESENT                    Func   617                                  scalar                    617,618,619                       
 SECONDS                    Dummy  602      I(4)            4           scalar   ARG,IN           622,623,629                       
 TICKS                      Dummy  602      I(4)            4           scalar   ARG,IN           618                               
 TIME                       Dummy  602      TIME_TYPE       16          scalar   ARG,IN           629                               

Page 20          Source Listing                  INCREMENT_TIME
2021-06-01 08:54                                 time_manager.F90

    634 ! </FUNCTION>
    635 !--------------------------------------------------------------------------
    636 
    637  function increment_time_private(Time_in, seconds, days, ticks, Time_out, err_msg)
    638 
    639 ! Increments a time by seconds, days and ticks.
    640 
    641  logical                       :: increment_time_private
    642  type(time_type),  intent(in)  :: Time_in
    643  integer,          intent(in)  :: seconds, days, ticks
    644  type(time_type),  intent(out) :: Time_out
    645  character(len=*), intent(out) :: err_msg
    646 
    647 ! Watch for immediate overflow on days or seconds
    648  if(days >= huge(days) - Time_in%days)  then
    649    err_msg = 'Integer overflow in days in increment_time'
    650    increment_time_private = .false.
    651    return
    652  endif
    653  if(seconds >= huge(seconds) - Time_in%seconds) then
    654    err_msg = 'Integer overflow in seconds in increment_time'
    655    increment_time_private = .false.
    656    return
    657  endif
    658 
    659  increment_time_private = set_time_private(Time_in%seconds+seconds, Time_in%days+days, Time_in%ticks+ticks, Time_out, err_ms
    659 g)
    660 
    661  end function increment_time_private

Page 21          Source Listing                  INCREMENT_TIME_PRIVATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                                   
                                                         
 time_manager_mod_mp_increment_time_private_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS                       Dummy  637      I(4)            4           scalar   ARG,IN           648,659                           
 ERR_MSG                    Dummy  637      CHAR                        scalar   ARG,OUT          649,654,659                       
 HUGE                       Func   648                                  scalar                    648,653                           
 INCREMENT_TIME_PRIVATE     Func   637      L(4)            4           scalar                    629,650,655,659,733,2751          
 SECONDS                    Dummy  637      I(4)            4           scalar   ARG,IN           653,659                           
 TICKS                      Dummy  637      I(4)            4           scalar   ARG,IN           659                               
 TIME_IN                    Dummy  637      TIME_TYPE       16          scalar   ARG,IN           648,653,659                       
 TIME_OUT                   Dummy  637      TIME_TYPE       16          scalar   ARG,OUT          659                               

Page 22          Source Listing                  INCREMENT_TIME_PRIVATE
2021-06-01 08:54                                 time_manager.F90

    662 
    663 !--------------------------------------------------------------------------
    664 ! <FUNCTION NAME="decrement_time">
    665 
    666 !   <OVERVIEW>
    667 !      Given a time and a decrement of days and seconds, returns
    668 !      a time that subtracts this decrement from an input time.
    669 !   </OVERVIEW>
    670 !   <DESCRIPTION>
    671 !      Decrements a time by seconds and days.
    672 !   </DESCRIPTION>
    673 !   <TEMPLATE>
    674 !     Decrement_time(time, seconds, days, ticks, err_msg, allow_neg_inc)
    675 !   </TEMPLATE>
    676 
    677 !   <IN NAME="time"  TYPE="time_type" DIM="(scalar)">
    678 !      A time interval.
    679 !   </IN>
    680 !   <IN NAME="seconds"  TYPE="integer" DIM="(scalar)">
    681 !     Decrement of seconds.
    682 !   </IN>
    683 !   <IN NAME="days"  TYPE="integer, optional" DIM="(scalar)">
    684 !     Decrement of days.
    685 !   </IN>
    686 !   <IN NAME="ticks"  TYPE="integer, optional" DIM="(scalar)">
    687 !     Decrement of ticks.
    688 !   </IN>
    689 !   <OUT NAME="decrement_time"  TYPE="time_type">
    690 !      A time that subtracts this decrement from an input time.
    691 !      A negative result is a fatal error.
    692 !   </OUT>
    693 !   <OUT NAME="err_msg" TYPE="character, optional" DIM="(scalar)">
    694 !     When present, and when non-blank, a fatal error condition as been detected.
    695 !     The string itself is an error message.
    696 !     It is recommended that, when err_msg is present in the call
    697 !     to this routine, the next line of code should be something
    698 !     similar to this:
    699 !     if(err_msg /= '') call error_mesg('my_routine','additional info: '//trim(err_msg),FATAL)
    700 !   </OUT>
    701 !   <IN NAME="allow_neg_inc" TYPE="logical, optional" DIM="(scalar)" DEFAULT=".true.">
    702 !     When .false., it is a fatal error if any of the input time increments are negative.
    703 !     This mimics the behavior of lima and earlier revisions.
    704 !   </IN>
    705 
    706 function decrement_time(Time, seconds, days, ticks, err_msg, allow_neg_inc)
    707 
    708 ! Decrements a time by seconds, days and ticks.
    709 
    710 type(time_type)               :: decrement_time
    711 type(time_type), intent(in)   :: Time
    712 integer, intent(in)           :: seconds
    713 integer, intent(in), optional :: days, ticks
    714 character(len=*), intent(out), optional :: err_msg
    715 logical, intent(in), optional :: allow_neg_inc
    716 
    717 integer            :: odays, oticks
    718 character(len=128) :: err_msg_local

Page 23          Source Listing                  DECREMENT_TIME
2021-06-01 08:54                                 time_manager.F90

    719 logical :: allow_neg_inc_local
    720 
    721 odays  = 0;  if (present(days))   odays = days
    722 oticks = 0;  if (present(ticks)) oticks = ticks
    723 allow_neg_inc_local=.true.; if(present(allow_neg_inc)) allow_neg_inc_local=allow_neg_inc
    724 
    725 if(.not.allow_neg_inc_local) then
    726   if(seconds < 0 .or. odays < 0 .or. oticks < 0) then
    727     write(err_msg_local,10) seconds,odays,oticks
    728     10 format('One or more time increments are negative: seconds=',i6,'  days=',i6,'  ticks=',i6)
    729     if(error_handler('function decrement_time', err_msg_local, err_msg)) return
    730   endif
    731 endif
    732 
    733  if(.not.increment_time_private(Time, -seconds, -odays, -oticks, decrement_time, err_msg_local)) then
    734    if(error_handler('function decrement_time', err_msg_local, err_msg)) return
    735  endif
    736 
    737 end function decrement_time


ENTRY POINTS

  Name                                           
                                                 
 time_manager_mod_mp_decrement_time_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  728                                                            727                               
 ALLOW_NEG_INC              Dummy  706      L(4)            4           scalar   ARG,IN           723                               
 ALLOW_NEG_INC_LOCAL        Local  719      L(4)            4           scalar                    723,725                           
 DAYS                       Dummy  706      I(4)            4           scalar   ARG,IN           721                               
 DECREMENT_TIME             Func   706      TIME_TYPE       16          scalar                                                      
 ERR_MSG                    Dummy  706      CHAR                        scalar   ARG,OUT          729,734                           
 ERR_MSG_LOCAL              Local  718      CHAR            128         scalar                    727,729,733,734                   
 ODAYS                      Local  717      I(4)            4           scalar                    721,726,727,733                   
 OTICKS                     Local  717      I(4)            4           scalar                    722,726,727,733                   
 PRESENT                    Func   721                                  scalar                    721,722,723                       
 SECONDS                    Dummy  706      I(4)            4           scalar   ARG,IN           726,727,733                       
 TICKS                      Dummy  706      I(4)            4           scalar   ARG,IN           722                               
 TIME                       Dummy  706      TIME_TYPE       16          scalar   ARG,IN           733                               

Page 24          Source Listing                  DECREMENT_TIME
2021-06-01 08:54                                 time_manager.F90

    738 ! </FUNCTION>
    739 
    740 !--------------------------------------------------------------------------
    741 ! <FUNCTION NAME="time_gt  operator(>)">
    742 
    743 !   <OVERVIEW>
    744 !      Returns true if time1 > time2.
    745 !   </OVERVIEW>
    746 !   <DESCRIPTION>
    747 !      Returns true if time1 > time2.
    748 !   </DESCRIPTION>
    749 !   <IN NAME="time1" UNITS="" TYPE="time_type" DIM="">
    750 !      A time interval.
    751 !   </IN>
    752 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
    753 !      A time interval.
    754 !   </IN>
    755 !   <OUT NAME="" UNITS="" TYPE="logical" DIM="" DEFAULT="">
    756 !       Returns true if time1 > time2
    757 !   </OUT>
    758 !   <TEMPLATE>
    759 !     time_gt(time1, time2)
    760 !   </TEMPLATE>
    761 
    762 function time_gt(time1, time2)
    763 
    764 ! Returns true if time1 > time2
    765 
    766 logical :: time_gt
    767 type(time_type), intent(in) :: time1, time2
    768 
    769 time_gt = (time1%days > time2%days)
    770 if(time1%days == time2%days) then
    771    if(time1%seconds == time2%seconds) then
    772       time_gt = (time1%ticks > time2%ticks)
    773    else
    774       time_gt = (time1%seconds > time2%seconds)
    775    endif
    776 endif
    777 
    778 end function time_gt

Page 25          Source Listing                  TIME_GT
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                    
                                          
 time_manager_mod_mp_time_gt_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME1                      Dummy  762      TIME_TYPE       16          scalar   ARG,IN           769,770,771,772,774               
 TIME2                      Dummy  762      TIME_TYPE       16          scalar   ARG,IN           769,770,771,772,774               
 TIME_GT                    Func   762      L(4)            4           scalar   PRIV             769,772,774,811,1039,1186,1395    

Page 26          Source Listing                  TIME_GT
2021-06-01 08:54                                 time_manager.F90

    779 ! </FUNCTION>
    780 
    781 !--------------------------------------------------------------------------
    782 ! <FUNCTION NAME="time_ge; operator(>=)">
    783 
    784 !   <OVERVIEW>
    785 !      Returns true if time1 >= time2.
    786 !   </OVERVIEW>
    787 !   <DESCRIPTION>
    788 !      Returns true if time1 >= time2.
    789 !   </DESCRIPTION>
    790 !   <TEMPLATE>
    791 !     time_ge(time1, time2)
    792 !   </TEMPLATE>
    793 
    794 !   <IN NAME="time1" UNITS="" TYPE="time_type" DIM="">
    795 !      A time interval.
    796 !   </IN>
    797 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
    798 !      A time interval.
    799 !   </IN>
    800 !   <OUT NAME="" UNITS="" TYPE="logical" DIM="" DEFAULT="">
    801 !       Returns true if time1 >= time2
    802 !   </OUT>
    803 
    804 function time_ge(time1, time2)
    805 
    806 ! Returns true if time1 >= time2
    807 
    808 logical :: time_ge
    809 type(time_type), intent(in) :: time1, time2
    810 
    811 time_ge = (time_gt(time1, time2) .or. time_eq(time1, time2))
    812 
    813 end function time_ge

Page 27          Source Listing                  TIME_GE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                    
                                          
 time_manager_mod_mp_time_ge_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME1                      Dummy  804      TIME_TYPE       16          scalar   ARG,IN           811                               
 TIME2                      Dummy  804      TIME_TYPE       16          scalar   ARG,IN           811                               
 TIME_EQ@0                  Local  811      L(4)            4           scalar                                                      
 TIME_GE                    Func   804      L(4)            4           scalar   PRIV             811                               

Page 28          Source Listing                  TIME_GE
2021-06-01 08:54                                 time_manager.F90

    814 ! </FUNCTION>
    815 
    816 !--------------------------------------------------------------------------
    817 ! <FUNCTION NAME="time_lt; operator(<)">
    818 
    819 !   <OVERVIEW>
    820 !      Returns true if time1 < time2.
    821 !   </OVERVIEW>
    822 !   <DESCRIPTION>
    823 !      Returns true if time1 < time2.
    824 !   </DESCRIPTION>
    825 !   <TEMPLATE>
    826 !     time_lt(time1, time2)
    827 !   </TEMPLATE>
    828 
    829 !   <IN NAME="time1" UNITS="" TYPE="time_type" DIM="">
    830 !      A time interval.
    831 !   </IN>
    832 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
    833 !      A time interval.
    834 !   </IN>
    835 !   <OUT NAME="" UNITS="" TYPE="logical" DIM="" DEFAULT="">
    836 !       Returns true if time1 < time2
    837 !   </OUT>
    838 
    839 function time_lt(time1, time2)
    840 
    841 ! Returns true if time1 < time2
    842 
    843 logical :: time_lt
    844 type(time_type), intent(in) :: time1, time2
    845 
    846 time_lt = (time1%days < time2%days)
    847 if(time1%days == time2%days)then
    848    if(time1%seconds == time2%seconds) then
    849       time_lt = (time1%ticks < time2%ticks)
    850    else
    851       time_lt = (time1%seconds < time2%seconds)
    852    endif
    853 endif
    854 end function time_lt

Page 29          Source Listing                  TIME_LT
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                    
                                          
 time_manager_mod_mp_time_lt_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME1                      Dummy  839      TIME_TYPE       16          scalar   ARG,IN           846,847,848,849,851               
 TIME2                      Dummy  839      TIME_TYPE       16          scalar   ARG,IN           846,847,848,849,851               
 TIME_LT                    Func   839      L(4)            4           scalar   PRIV             846,849,851,887                   

Page 30          Source Listing                  TIME_LT
2021-06-01 08:54                                 time_manager.F90

    855 ! </FUNCTION>
    856 
    857 !--------------------------------------------------------------------------
    858 ! <FUNCTION NAME="time_le; operator(<=)">
    859 
    860 !   <OVERVIEW>
    861 !      Returns true if time1 <= time2.
    862 !   </OVERVIEW>
    863 !   <DESCRIPTION>
    864 !      Returns true if time1 <= time2.
    865 !   </DESCRIPTION>
    866 !   <TEMPLATE>
    867 !     time_le(time1, time2)
    868 !   </TEMPLATE>
    869 
    870 !   <IN NAME="time1" UNITS="" TYPE="time_type" DIM="">
    871 !      A time interval.
    872 !   </IN>
    873 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
    874 !      A time interval.
    875 !   </IN>
    876 !   <OUT NAME="" UNITS="" TYPE="logical" DIM="" DEFAULT="">
    877 !       Returns true if time1 <= time2
    878 !   </OUT>
    879 
    880 function time_le(time1, time2)
    881 
    882 ! Returns true if time1 <= time2
    883 
    884 logical :: time_le
    885 type(time_type), intent(in) :: time1, time2
    886 
    887 time_le = (time_lt(time1, time2) .or. time_eq(time1, time2))
    888 
    889 end function time_le

Page 31          Source Listing                  TIME_LE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                    
                                          
 time_manager_mod_mp_time_le_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME1                      Dummy  880      TIME_TYPE       16          scalar   ARG,IN           887                               
 TIME2                      Dummy  880      TIME_TYPE       16          scalar   ARG,IN           887                               
 TIME_LE                    Func   880      L(4)            4           scalar   PRIV             887,1186,1395,1457,1512           

Page 32          Source Listing                  TIME_LE
2021-06-01 08:54                                 time_manager.F90

    890 ! </FUNCTION>
    891 
    892 !--------------------------------------------------------------------------
    893 ! <FUNCTION NAME="time_eq; operator(==)">
    894 
    895 !   <OVERVIEW>
    896 !      Returns true if time1 == time2.
    897 !   </OVERVIEW>
    898 !   <DESCRIPTION>
    899 !      Returns true if time1 == time2.
    900 !   </DESCRIPTION>
    901 !   <TEMPLATE>
    902 !     time_eq(time1, time2)
    903 !   </TEMPLATE>
    904 
    905 !   <IN NAME="time1" UNITS="" TYPE="time_type" DIM="">
    906 !      A time interval.
    907 !   </IN>
    908 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
    909 !      A time interval.
    910 !   </IN>
    911 !   <OUT NAME="" UNITS="" TYPE="logical" DIM="" DEFAULT="">
    912 !       Returns true if time1 == time2
    913 !   </OUT>
    914 
    915 function time_eq(time1, time2)
    916 
    917 ! Returns true if time1 == time2
    918 
    919 logical :: time_eq
    920 type(time_type), intent(in) :: time1, time2
    921 
    922 if(.not.module_is_initialized) call time_manager_init
    923 
    924 time_eq = (time1%seconds == time2%seconds .and. time1%days == time2%days &
    925      .and. time1%ticks == time2%ticks)
    926 
    927 end function time_eq

Page 33          Source Listing                  TIME_EQ
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                    
                                          
 time_manager_mod_mp_time_eq_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME1                      Dummy  915      TIME_TYPE       16          scalar   ARG,IN           924,925                           
 TIME2                      Dummy  915      TIME_TYPE       16          scalar   ARG,IN           924,925                           
 TIME_EQ                    Func   915      L(4)            4           scalar   PRIV             811,887,924,960                   

Page 34          Source Listing                  TIME_EQ
2021-06-01 08:54                                 time_manager.F90

    928 ! </FUNCTION>
    929 
    930 !--------------------------------------------------------------------------
    931 ! <FUNCTION NAME="time_ne; operator(/=)">
    932 
    933 !   <OVERVIEW>
    934 !      Returns true if time1 /= time2.
    935 !   </OVERVIEW>
    936 !   <DESCRIPTION>
    937 !      Returns true if time1 /= time2.
    938 !   </DESCRIPTION>
    939 !   <TEMPLATE>
    940 !     time_ne(time1, time2)
    941 !   </TEMPLATE>
    942 
    943 !   <IN NAME="time1" UNITS="" TYPE="time_type" DIM="">
    944 !      A time interval.
    945 !   </IN>
    946 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
    947 !      A time interval.
    948 !   </IN>
    949 !   <OUT NAME="" UNITS="" TYPE="logical" DIM="" DEFAULT="">
    950 !       Returns true if time1 /= time2
    951 !   </OUT>
    952 
    953 function time_ne(time1, time2)
    954 
    955 ! Returns true if time1 /= time2
    956 
    957 logical :: time_ne
    958 type(time_type), intent(in) :: time1, time2
    959 
    960 time_ne = (.not. time_eq(time1, time2))
    961 
    962 end function time_ne

Page 35          Source Listing                  TIME_NE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                    
                                          
 time_manager_mod_mp_time_ne_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME1                      Dummy  953      TIME_TYPE       16          scalar   ARG,IN           960                               
 TIME2                      Dummy  953      TIME_TYPE       16          scalar   ARG,IN           960                               
 TIME_NE                    Func   953      L(4)            4           scalar   PRIV             960                               

Page 36          Source Listing                  TIME_NE
2021-06-01 08:54                                 time_manager.F90

    963 ! </FUNCTION>
    964 
    965 !-------------------------------------------------------------------------
    966 ! <FUNCTION NAME="time_plus; operator(+)">
    967 
    968 !   <OVERVIEW>
    969 !       Returns sum of two time_types.
    970 !   </OVERVIEW>
    971 !   <TEMPLATE>
    972 !     time1 + time2
    973 !   </TEMPLATE>
    974 !   <DESCRIPTION>
    975 !       Returns sum of two time_types.
    976 !   </DESCRIPTION>
    977 
    978 !   <IN NAME="time1" UNITS="" TYPE="time_type" DIM="">
    979 !      A time interval.
    980 !   </IN>
    981 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
    982 !      A time interval.
    983 !   </IN>
    984 !   <OUT NAME="" UNITS="" TYPE="time_type" DIM="" DEFAULT="">
    985 !       Returns sum of two time_types.
    986 !   </OUT>
    987 
    988 function time_plus(time1, time2)
    989 
    990 ! Returns sum of two time_types
    991 
    992 type(time_type) :: time_plus
    993 type(time_type), intent(in) :: time1, time2
    994 
    995 if(.not.module_is_initialized) call time_manager_init
    996 
    997 time_plus = increment_time(time1, time2%seconds, time2%days, time2%ticks)
    998 
    999 end function time_plus

Page 37          Source Listing                  TIME_PLUS
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                      
                                            
 time_manager_mod_mp_time_plus_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 INCREMENT_TIME             Func   997      RECORD          16          scalar                    109,629,997,1394                  
 TIME1                      Dummy  988      TIME_TYPE       16          scalar   ARG,IN           997                               
 TIME2                      Dummy  988      TIME_TYPE       16          scalar   ARG,IN           997                               
 TIME_PLUS                  Func   988      RECORD          16          scalar   PRIV             997,1459,1511                     

Page 38          Source Listing                  TIME_PLUS
2021-06-01 08:54                                 time_manager.F90

   1000 ! </FUNCTION>
   1001 
   1002 !-------------------------------------------------------------------------
   1003 ! <FUNCTION NAME="time_minus; operator(-)">
   1004 
   1005 !   <OVERVIEW>
   1006 !       Returns difference of two time_types.
   1007 !   </OVERVIEW>
   1008 !   <DESCRIPTION>
   1009 !       Returns difference of two time_types. WARNING: a time type is positive
   1010 !       so by definition time1 - time2  is the same as time2 - time1.
   1011 !   </DESCRIPTION>
   1012 !   <TEMPLATE>
   1013 !     time_minus(time1, time2)
   1014 !   </TEMPLATE>
   1015 !   <TEMPLATE>
   1016 !     time1 - time2
   1017 !   </TEMPLATE>
   1018 
   1019 !   <IN NAME="time1" UNITS="" TYPE="time_type" DIM="">
   1020 !      A time interval.
   1021 !   </IN>
   1022 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
   1023 !      A time interval.
   1024 !   </IN>
   1025 !   <OUT NAME="" UNITS="" TYPE="time_type" DIM="" DEFAULT="">
   1026 !       Returns difference of two time_types.
   1027 !   </OUT>
   1028 
   1029 function time_minus(time1, time2)
   1030 
   1031 ! Returns difference of two time_types. WARNING: a time type is positive
   1032 ! so by definition time1 - time2  is the same as time2 - time1.
   1033 
   1034 type(time_type) :: time_minus
   1035 type(time_type), intent(in) :: time1, time2
   1036 
   1037 if(.not.module_is_initialized) call time_manager_init
   1038 
   1039 if(time1 > time2) then
   1040    time_minus = decrement_time(time1, time2%seconds, time2%days, time2%ticks)
   1041 else
   1042    time_minus = decrement_time(time2, time1%seconds, time1%days, time1%ticks)
   1043 endif
   1044 
   1045 end function time_minus

Page 39          Source Listing                  TIME_MINUS
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                       
                                             
 time_manager_mod_mp_time_minus_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DECREMENT_TIME             Func   1040     RECORD          16          scalar                    109,733,1040,1042                 
 TIME1                      Dummy  1029     TIME_TYPE       16          scalar   ARG,IN           1039,1040,1042                    
 TIME2                      Dummy  1029     TIME_TYPE       16          scalar   ARG,IN           1039,1040,1042                    
 TIME_MINUS                 Func   1029     RECORD          16          scalar   PRIV             1040,1042,1457,1512,3206          

Page 40          Source Listing                  TIME_MINUS
2021-06-01 08:54                                 time_manager.F90

   1046 ! </FUNCTION>
   1047 
   1048 !--------------------------------------------------------------------------
   1049 ! <FUNCTION NAME="time_scalar_mult; operator(*)">
   1050 
   1051 !   <OVERVIEW>
   1052 !       Returns time multiplied by integer factor n.
   1053 !   </OVERVIEW>
   1054 !   <DESCRIPTION>
   1055 !       Returns time multiplied by integer factor n.
   1056 !   </DESCRIPTION>
   1057 !   <TEMPLATE>
   1058 !     time_scalar_mult(time, n)
   1059 !   </TEMPLATE>
   1060 
   1061 !   <IN NAME="time" UNITS="" TYPE="time_type" DIM="">
   1062 !      A time interval.
   1063 !   </IN>
   1064 !   <IN NAME="n" UNITS="" TYPE="integer" DIM="">
   1065 !      A time interval.
   1066 !   </IN>
   1067 !   <OUT NAME="" UNITS="" TYPE="time_type" DIM="" DEFAULT="">
   1068 !       Returns time multiplied by integer factor n.
   1069 !   </OUT>
   1070 
   1071 function time_scalar_mult(time, n)
   1072 
   1073 ! Returns time multiplied by integer factor n
   1074 
   1075 type(time_type)             :: time_scalar_mult
   1076 type(time_type), intent(in) :: time
   1077 integer, intent(in)         :: n
   1078 integer                     :: days, seconds, ticks, num_sec
   1079 double precision            :: sec_prod, tick_prod
   1080 
   1081 if(.not.module_is_initialized) call time_manager_init
   1082 
   1083 ! Multiplying here in a reasonable fashion to avoid overflow is tricky
   1084 ! Could multiply by some large factor n, and seconds could be up to 86399
   1085 ! Need to avoid overflowing integers and wrapping around to negatives
   1086 ! ticks could be up to ticks_per_second-1
   1087 
   1088 tick_prod = dble(time%ticks) * dble(n)
   1089 num_sec   = tick_prod/dble(ticks_per_second)
   1090 sec_prod  = dble(time%seconds) * dble(n) + num_sec
   1091 ticks     = tick_prod - num_sec * ticks_per_second
   1092 
   1093 ! If sec_prod is large compared to precision of double precision, things
   1094 ! can go bad.  Need to warn and abort on this.
   1095 ! The same is true of tick_prod but is is more likely to happen to sec_prod,
   1096 ! so let's just test sec_prod. (A test of tick_prod would be necessary only
   1097 ! if ticks_per_second were greater than seconds_per_day)
   1098 if(sec_prod /= 0.0) then
   1099    if(log10(sec_prod) > precision(sec_prod) - 3) call error_mesg('time_scalar_mult', &
   1100       'Insufficient precision to handle scalar product in time_scalar_mult; contact developer',FATAL)
   1101 end if
   1102 

Page 41          Source Listing                  TIME_SCALAR_MULT
2021-06-01 08:54                                 time_manager.F90

   1103 days = sec_prod / dble(seconds_per_day)
   1104 seconds = sec_prod - dble(days) * dble(seconds_per_day)
   1105 
   1106 time_scalar_mult = set_time(seconds, time%days * n + days, ticks)
   1107 
   1108 end function time_scalar_mult


ENTRY POINTS

  Name                                             
                                                   
 time_manager_mod_mp_time_scalar_mult_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS                       Local  1078     I(4)            4           scalar                    1103,1104,1106                    
 DBLE                       Func   1088                                 scalar                    1088,1089,1090,1103,1104          
 LOG10                      Func   1099                                 scalar                    1099                              
 N                          Dummy  1071     I(4)            4           scalar   ARG,IN           1088,1090,1106                    
 NUM_SEC                    Local  1078     I(4)            4           scalar                    1089,1090,1091                    
 PRECISION                  Func   1099                                 scalar                    1099                              
 SECONDS                    Local  1078     I(4)            4           scalar                    1104,1106                         
 SEC_PROD                   Local  1079     R(8)            8           scalar                    1090,1098,1099,1103,1104          
 SET_TIME                   Local  1106                                 scalar                    109,1106,1390,2544,3154,3167,3177,
                                                                                                  3187                              
 TICKS                      Local  1078     I(4)            4           scalar                    1091,1106                         
 TICK_PROD                  Local  1079     R(8)            8           scalar                    1088,1089,1091                    
 TIME                       Dummy  1071     TIME_TYPE       16          scalar   ARG,IN           1088,1090,1106                    
 TIME_SCALAR_MULT           Func   1071     RECORD          16          scalar   PRIV             1106,1139                         

Page 42          Source Listing                  TIME_SCALAR_MULT
2021-06-01 08:54                                 time_manager.F90

   1109 ! </FUNCTION>
   1110 
   1111 !-------------------------------------------------------------------------
   1112 ! <FUNCTION NAME="scalar_time_mult; operator(*)">
   1113 
   1114 !   <OVERVIEW>
   1115 !       Returns time multiplied by integer factor n.
   1116 !   </OVERVIEW>
   1117 !   <DESCRIPTION>
   1118 !       Returns time multiplied by integer factor n.
   1119 !   </DESCRIPTION>
   1120 !   <TEMPLATE>
   1121 !     n * time
   1122 !     scalar_time_mult(n, time)
   1123 !   </TEMPLATE>
   1124 
   1125 !   <IN NAME="time" UNITS="" TYPE="time_type" DIM="">A time interval.</IN>
   1126 !   <IN NAME="n" UNITS="" TYPE="integer" DIM=""> An integer. </IN>
   1127 !   <OUT NAME="" UNITS="" TYPE="time_type" DIM="" DEFAULT="">
   1128 !       Returns time multiplied by integer factor n.
   1129 !   </OUT>
   1130 
   1131 function scalar_time_mult(n, time)
   1132 
   1133 ! Returns time multipled by integer factor n
   1134 
   1135 type(time_type) :: scalar_time_mult
   1136 type(time_type), intent(in) :: time
   1137 integer, intent(in) :: n
   1138 
   1139 scalar_time_mult = time_scalar_mult(time, n)
   1140 
   1141 end function scalar_time_mult

Page 43          Source Listing                  SCALAR_TIME_MULT
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                             
                                                   
 time_manager_mod_mp_scalar_time_mult_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 N                          Dummy  1131     I(4)            4           scalar   ARG,IN           1139                              
 SCALAR_TIME_MULT           Func   1131     RECORD          16          scalar   PRIV             1139,1186,1393,1394,1510          
 TIME                       Dummy  1131     TIME_TYPE       16          scalar   ARG,IN           1139                              

Page 44          Source Listing                  SCALAR_TIME_MULT
2021-06-01 08:54                                 time_manager.F90

   1142 ! </FUNCTION>
   1143 
   1144 !-------------------------------------------------------------------------
   1145 ! <FUNCTION NAME="time_divide; operator(/)">
   1146 
   1147 !   <OVERVIEW>
   1148 !       Returns the largest integer, n, for which time1 >= time2 * n.
   1149 !   </OVERVIEW>
   1150 !   <DESCRIPTION>
   1151 !       Returns the largest integer, n, for which time1 >= time2 * n.
   1152 !   </DESCRIPTION>
   1153 !   <TEMPLATE>
   1154 !     n = time1 / time2
   1155 !     time_divide(time1, time2)
   1156 !   </TEMPLATE>
   1157 
   1158 !   <IN NAME="time1" UNITS="" TYPE="time_type" DIM="">
   1159 !      A time interval.
   1160 !   </IN>
   1161 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
   1162 !      A time interval.
   1163 !   </IN>
   1164 !   <OUT NAME="" UNITS="" TYPE="integer" DIM="" DEFAULT="">
   1165 !       Returns the largest integer, n, for which time1 >= time2 * n.
   1166 !   </OUT>
   1167 
   1168 function time_divide(time1, time2)
   1169 
   1170 ! Returns the largest integer, n, for which time1 >= time2 * n.
   1171 
   1172 integer                     :: time_divide
   1173 type(time_type), intent(in) :: time1, time2
   1174 double precision            :: d1, d2
   1175 
   1176 if(.not.module_is_initialized) call time_manager_init
   1177 
   1178 ! Convert time intervals to floating point days; risky for general performance?
   1179 d1 = time1%days * dble(seconds_per_day) + dble(time1%seconds) + time1%ticks/dble(ticks_per_second)
   1180 d2 = time2%days * dble(seconds_per_day) + dble(time2%seconds) + time2%ticks/dble(ticks_per_second)
   1181 
   1182 ! Get integer quotient of this, check carefully to avoid round-off problems.
   1183 time_divide = d1 / d2
   1184 
   1185 ! Verify time_divide*time2 is <= time1 and (time_divide + 1)*time2 is > time1
   1186 if(time_divide * time2 > time1 .or. (time_divide + 1) * time2 <= time1) &
   1187    call error_mesg('time_divide',' quotient error :: notify developer',FATAL)
   1188 
   1189 end function time_divide

Page 45          Source Listing                  TIME_DIVIDE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                        
                                              
 time_manager_mod_mp_time_divide_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D1                         Local  1174     R(8)            8           scalar                    1179,1183                         
 D2                         Local  1174     R(8)            8           scalar                    1180,1183                         
 DBLE                       Func   1179                                 scalar                    1179,1180                         
 TIME1                      Dummy  1168     TIME_TYPE       16          scalar   ARG,IN           1179,1186                         
 TIME2                      Dummy  1168     TIME_TYPE       16          scalar   ARG,IN           1180,1186                         
 TIME_DIVIDE                Func   1168     I(4)            4           scalar   PRIV             1183,1186,1510                    

Page 46          Source Listing                  TIME_DIVIDE
2021-06-01 08:54                                 time_manager.F90

   1190 ! </FUNCTION>
   1191 
   1192 !-------------------------------------------------------------------------
   1193 ! <FUNCTION NAME="time_real_divide; operator(//)">
   1194 
   1195 !   <OVERVIEW>
   1196 !       Returns the double precision quotient of two times.
   1197 !   </OVERVIEW>
   1198 !   <DESCRIPTION>
   1199 !       Returns the double precision quotient of two times.
   1200 !   </DESCRIPTION>
   1201 !   <TEMPLATE>
   1202 !     time1 // time2
   1203 !     time_real_divide(time1, time2)
   1204 !   </TEMPLATE>
   1205 
   1206 !   <IN NAME="time1" UNITS="" TYPE="time_type" DIM="">
   1207 !      A time interval.
   1208 !   </IN>
   1209 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
   1210 !      A time interval.
   1211 !   </IN>
   1212 !   <OUT NAME="" UNITS="" TYPE="integer" DIM="double precision" DEFAULT="">
   1213 !       Returns the double precision quotient of two times
   1214 !   </OUT>
   1215 
   1216 function time_real_divide(time1, time2)
   1217 
   1218 ! Returns the double precision quotient of two times
   1219 
   1220 double precision :: time_real_divide
   1221 type(time_type), intent(in) :: time1, time2
   1222 double precision :: d1, d2
   1223 
   1224 if(.not.module_is_initialized) call time_manager_init
   1225 
   1226 ! Convert time intervals to floating point seconds; risky for general performance?
   1227 d1 = time1%days * dble(seconds_per_day) + dble(time1%seconds) + dble(time1%ticks)/dble(ticks_per_second)
   1228 d2 = time2%days * dble(seconds_per_day) + dble(time2%seconds) + dble(time2%ticks)/dble(ticks_per_second)
   1229 
   1230 time_real_divide = d1 / d2
   1231 
   1232 end function time_real_divide

Page 47          Source Listing                  TIME_REAL_DIVIDE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                             
                                                   
 time_manager_mod_mp_time_real_divide_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 D1                         Local  1222     R(8)            8           scalar                    1227,1230                         
 D2                         Local  1222     R(8)            8           scalar                    1228,1230                         
 DBLE                       Func   1227                                 scalar                    1227,1228                         
 TIME1                      Dummy  1216     TIME_TYPE       16          scalar   ARG,IN           1227                              
 TIME2                      Dummy  1216     TIME_TYPE       16          scalar   ARG,IN           1228                              
 TIME_REAL_DIVIDE           Func   1216     R(8)            8           scalar   PRIV             1230                              

Page 48          Source Listing                  TIME_REAL_DIVIDE
2021-06-01 08:54                                 time_manager.F90

   1233 ! </FUNCTION>
   1234 
   1235 !-------------------------------------------------------------------------
   1236 ! <SUBROUTINE NAME="time_assignment; assignment(=)">
   1237 
   1238 !   <OVERVIEW>
   1239 !       Assigns all components of the time_type variable on
   1240 !       RHS to same components of time_type variable on LHS.
   1241 !   </OVERVIEW>
   1242 !   <DESCRIPTION>
   1243 !       Assigns all components of the time_type variable on
   1244 !       RHS to same components of time_type variable on LHS.
   1245 !   </DESCRIPTION>
   1246 !   <TEMPLATE>
   1247 !     time1 = time2
   1248 !   </TEMPLATE>
   1249 
   1250 !   <OUT NAME="time1" UNITS="" TYPE="time_type" DIM="">
   1251 !      A time type variable.
   1252 !   </OUT>
   1253 !   <IN NAME="time2" UNITS="" TYPE="time_type" DIM="">
   1254 !      A time type variable.
   1255 !   </IN>
   1256 
   1257 subroutine time_assignment(time1, time2)
   1258 type(time_type), intent(out) :: time1
   1259 type(time_type), intent(in)  :: time2
   1260    time1%seconds = time2%seconds
   1261    time1%days    = time2%days
   1262    time1%ticks   = time2%ticks
   1263 end subroutine time_assignment

Page 49          Source Listing                  TIME_ASSIGNMENT
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                            
                                                  
 time_manager_mod_mp_time_assignment_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME1                      Dummy  1257     TIME_TYPE       16          scalar   ARG,OUT          1260,1261,1262                    
 TIME2                      Dummy  1257     TIME_TYPE       16          scalar   ARG,IN           1260,1261,1262                    
 TIME_ASSIGNMENT            Subr   1257                                          PRIV             997,1040,1042,1106,1139,1390,1393,
                                                                                                  1394,1459,1510,1511,2544,2739,3135
                                                                                                  ,3137,3139,3141,3154,3167,3177,318
                                                                                                  7,3206                            

Page 50          Source Listing                  TIME_ASSIGNMENT
2021-06-01 08:54                                 time_manager.F90

   1264 ! </SUBROUTINE>
   1265 
   1266 !-------------------------------------------------------------------------
   1267 ! <FUNCTION NAME="time_type_to_real">
   1268 !   <OVERVIEW>
   1269 !       Converts time to seconds and returns it as a real number
   1270 !   </OVERVIEW>
   1271 !   <DESCRIPTION>
   1272 !       Converts time to seconds and returns it as a real number
   1273 !   </DESCRIPTION>
   1274 !   <TEMPLATE>
   1275 !     time_type_to_real(time)
   1276 !   </TEMPLATE>
   1277 !   <IN NAME="time" UNITS="" TYPE="time_type" DIM="">
   1278 !      A time interval.
   1279 !   </IN>
   1280 
   1281 function time_type_to_real(time)
   1282 
   1283 real(kind=r8_kind)           :: time_type_to_real
   1284 type(time_type), intent(in) :: time
   1285 
   1286 if(.not.module_is_initialized) call time_manager_init
   1287 
   1288 time_type_to_real = dble(time%days) * 86400.d0 + dble(time%seconds) + &
   1289      dble(time%ticks)/dble(ticks_per_second)
   1290 
   1291 end function time_type_to_real

Page 51          Source Listing                  TIME_TYPE_TO_REAL
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                              
                                                    
 time_manager_mod_mp_time_type_to_real_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DBLE                       Func   1288                                 scalar                    1288,1289                         
 R8_KIND                    Param  1283     I(4)            4           scalar   PRIV             93,1283                           
 TIME                       Dummy  1281     TIME_TYPE       16          scalar   ARG,IN           1288,1289                         
 TIME_TYPE_TO_REAL          Func   1281     R(8)            8           scalar                                                      

Page 52          Source Listing                  TIME_TYPE_TO_REAL
2021-06-01 08:54                                 time_manager.F90

   1292 
   1293 !> @brief Convert a real number of seconds into a time_type variable.
   1294 !! @return A filled time type variable, and an error message if an
   1295 !!         error occurs.
   1296 function real_to_time_type(x,err_msg) result(t)
   1297   real,intent(in) :: x !< Number of seconds.
   1298   character(len=*),intent(out),optional :: err_msg !< Error message.
   1299   type(time_type) :: t
   1300   integer :: days
   1301   integer :: seconds
   1302   integer :: ticks
   1303   character(len=128) :: err_msg_local
   1304   real,parameter :: spd = real(86400)
   1305   real :: tps
   1306   real :: a
   1307   tps = real(ticks_per_second)
   1308   a = x/spd
   1309   days = safe_rtoi(a,do_floor)
   1310   a = x - real(days)*spd
   1311   seconds = safe_rtoi(a,do_floor)
   1312   a = (a - real(seconds))*tps
   1313   ticks = safe_rtoi(a,do_nearest)
   1314   if (.not. set_time_private(seconds,days,ticks,t,err_msg_local)) then
   1315     if (error_handler('function real_to_time_type',err_msg_local,err_msg)) then
   1316       return
   1317     endif
   1318   endif
   1319 end function real_to_time_type

Page 53          Source Listing                  REAL_TO_TIME_TYPE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                              
                                                    
 time_manager_mod_mp_real_to_time_type_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 A                          Local  1306     R(8)            8           scalar                    1308,1309,1310,1311,1312,1313     
 DAYS                       Local  1300     I(4)            4           scalar                    1309,1310,1314                    
 DO_FLOOR                   Param  1309     I(4)            4           scalar                    1309,1311,1331                    
 DO_NEAREST                 Param  1313     I(4)            4           scalar                    1313,1333                         
 ERR_MSG                    Dummy  1296     CHAR                        scalar   ARG,OUT          1315                              
 ERR_MSG_LOCAL              Local  1303     CHAR            128         scalar                    1314,1315                         
 REAL                       Func   1304                                 scalar                    1304,1307,1310,1312               
 REAL_TO_TIME_TYPE          Func   1296     TIME_TYPE       16          scalar                                                      
 SECONDS                    Local  1301     I(4)            4           scalar                    1311,1312,1314                    
 SPD                        Param  1304     R(8)            8           scalar                    1308,1310                         
 T                          Local  1299     TIME_TYPE       16          scalar                    1314                              
 TICKS                      Local  1302     I(4)            4           scalar                    1313,1314                         
 TPS                        Local  1305     R(8)            8           scalar                    1307,1312                         
 X                          Dummy  1296     R(8)            8           scalar   ARG,IN           1308,1310                         

Page 54          Source Listing                  REAL_TO_TIME_TYPE
2021-06-01 08:54                                 time_manager.F90

   1320 
   1321 !> @brief Convert a floating point value to an integer value.
   1322 !! @return The integer value, using the input rounding mode.
   1323 function safe_rtoi(rval,mode) result(ival)
   1324   real,intent(in) :: rval !< A floating point value.
   1325   integer,intent(in) :: mode !< A rouding mode (either "do_floor" or
   1326 !! "do_nearest")
   1327   integer :: ival
   1328   real :: big
   1329   big = real(huge(ival))
   1330   if (rval .le. big .and. -1.*rval .ge. -1.*big) then
   1331     if (mode .eq. do_floor) then
   1332       ival = floor(rval)
   1333     elseif (mode .eq. do_nearest) then
   1334       ival = nint(rval)
   1335     else
   1336       call error_mesg("safe_rtoi","mode must be either do_floor" &
   1337                       //" or do_nearest.",FATAL)
   1338     endif
   1339   else
   1340     call error_mesg("safe_rtoi","input value cannot be safely" &
   1341                    //" converted to a 32-bit integer.",FATAL)
   1342   endif
   1343 end function safe_rtoi


ENTRY POINTS

  Name                                      
                                            
 time_manager_mod_mp_safe_rtoi_             

Page 55          Source Listing                  SAFE_RTOI
2021-06-01 08:54 Symbol Table                    time_manager.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 BIG                        Local  1328     R(8)            8           scalar                    1329,1330                         
 FLOOR                      Func   1332                                 scalar                    1332                              
 HUGE                       Func   1329                                 scalar                    1329                              
 IVAL                       Local  1327     I(4)            4           scalar                    1329,1332,1334                    
 MODE                       Dummy  1323     I(4)            4           scalar   ARG,IN           1331,1333                         
 NINT                       Func   1334                                 scalar                    1334                              
 REAL                       Func   1329                                 scalar                    1329                              
 RVAL                       Dummy  1323     R(8)            8           scalar   ARG,IN           1330,1332,1334                    
 SAFE_RTOI                  Func   1323     I(4)            4           scalar                    1309,1311,1313                    

Page 56          Source Listing                  SAFE_RTOI
2021-06-01 08:54                                 time_manager.F90

   1344 
   1345 !-------------------------------------------------------------------------
   1346 ! <FUNCTION NAME="time_scalar_divide; operator(/)">
   1347 
   1348 !   <OVERVIEW>
   1349 !       Returns the largest time, t, for which n * t <= time.
   1350 !   </OVERVIEW>
   1351 !   <DESCRIPTION>
   1352 !       Returns the largest time, t, for which n * t <= time.
   1353 !   </DESCRIPTION>
   1354 !   <TEMPLATE>
   1355 !     time_scalar_divide(time, n)
   1356 !   </TEMPLATE>
   1357 
   1358 !   <IN NAME="time" UNITS="" TYPE="time_type" DIM="">
   1359 !      A time interval.
   1360 !   </IN>
   1361 !   <IN NAME="n" UNITS="" TYPE="integer" DIM="">
   1362 !      An integer factor.
   1363 !   </IN>
   1364 !   <OUT NAME="" UNITS="" TYPE="integer" DIM="double precision" DEFAULT="">
   1365 !       Returns the largest time, t, for which n * t <= time.
   1366 !   </OUT>
   1367 
   1368 function time_scalar_divide(time, n)
   1369 
   1370 ! Returns the largest time, t, for which n * t <= time
   1371 
   1372 type(time_type) :: time_scalar_divide
   1373 type(time_type), intent(in) :: time
   1374 integer, intent(in) :: n
   1375 double precision :: d, div, dseconds_per_day, dticks_per_second
   1376 integer :: days, seconds, ticks
   1377 type(time_type) :: prod1, prod2
   1378 character(len=128) tmp1,tmp2
   1379 logical :: ltmp
   1380 
   1381 ! Convert time interval to floating point days; risky for general performance?
   1382 dseconds_per_day  = dble(seconds_per_day)
   1383 dticks_per_second = dble(ticks_per_second)
   1384 d = time%days*dseconds_per_day*dticks_per_second + dble(time%seconds)*dticks_per_second + dble(time%ticks)
   1385 div = d/dble(n)
   1386 
   1387 days = div/(dseconds_per_day*dticks_per_second)
   1388 seconds = div/dticks_per_second - days*dseconds_per_day
   1389 ticks = div - (days*dseconds_per_day + dble(seconds))*dticks_per_second
   1390 time_scalar_divide = set_time(seconds, days, ticks)
   1391 
   1392 ! Need to make sure that roundoff isn't killing this
   1393 prod1 = n * time_scalar_divide
   1394 prod2 = n * (increment_time(time_scalar_divide, days=0, seconds=0, ticks=1))
   1395 if(prod1 > time .or. prod2 <= time) then
   1396    call get_time(time, seconds, days, ticks)
   1397    write(tmp1,20) days,seconds,ticks
   1398    call get_time(time_scalar_divide, seconds, days, ticks)
   1399    write(tmp2,30) n,days,seconds,ticks
   1400    ltmp = error_handler('time_scalar_divide',' quotient error:'//trim(tmp1)//trim(tmp2))

Page 57          Source Listing                  TIME_SCALAR_DIVIDE
2021-06-01 08:54                                 time_manager.F90

   1401  20 format('time=',i7,' days, ',i6,' seconds, ',i6,' ticks')
   1402  30 format('   time divided by',i6,'=',i7,' days, ',i6,' seconds, ',i6,' ticks')
   1403 endif
   1404 
   1405 end function time_scalar_divide


ENTRY POINTS

  Name                                               
                                                     
 time_manager_mod_mp_time_scalar_divide_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 20                         Label  1401                                                           1397                              
 30                         Label  1402                                                           1399                              
 D                          Local  1375     R(8)            8           scalar                    1384,1385                         
 DAYS                       Local  1376     I(4)            4           scalar                    1387,1388,1389,1390,1396,1397,1398
                                                                                                  ,1399                             
 DBLE                       Func   1382                                 scalar                    1382,1383,1384,1385,1389          
 DIV                        Local  1375     R(8)            8           scalar                    1385,1387,1388,1389               
 DSECONDS_PER_DAY           Local  1375     R(8)            8           scalar                    1382,1384,1387,1388,1389          
 DTICKS_PER_SECOND          Local  1375     R(8)            8           scalar                    1383,1384,1387,1388,1389          
 GET_TIME                   Subr   1396                                                           109,1396,1398,3424                
 LTMP                       Local  1379     L(4)            4           scalar                    1400                              
 N                          Dummy  1368     I(4)            4           scalar   ARG,IN           1385,1393,1394,1399               
 PROD1                      Local  1377     TIME_TYPE       16          scalar                    1393,1395                         
 PROD2                      Local  1377     TIME_TYPE       16          scalar                    1394,1395                         
 SECONDS                    Local  1376     I(4)            4           scalar                    1388,1389,1390,1396,1397,1398,1399
 TICKS                      Local  1376     I(4)            4           scalar                    1389,1390,1396,1397,1398,1399     
 TIME                       Dummy  1368     TIME_TYPE       16          scalar   ARG,IN           1384,1395,1396                    
 TIME_SCALAR_DIVIDE         Func   1368     RECORD          16          scalar   PRIV             1390,1393,1394,1398,1457,1512     
 TMP1                       Local  1378     CHAR            128         scalar                    1397,1400                         
 TMP2                       Local  1378     CHAR            128         scalar                    1399,1400                         
 TRIM                       Func   1400                                 scalar                    1400                              

Page 58          Source Listing                  TIME_SCALAR_DIVIDE
2021-06-01 08:54                                 time_manager.F90

   1406 ! </FUNCTION>
   1407 
   1408 !-------------------------------------------------------------------------
   1409 ! <FUNCTION NAME="interval_alarm">
   1410 
   1411 !   <OVERVIEW>
   1412 !     Given a time, and a time interval, this function returns true
   1413 !     if this is the closest time step to the alarm time.
   1414 !   </OVERVIEW>
   1415 !   <DESCRIPTION>
   1416 !      This is a specialized operation that is frequently performed in models.
   1417 !      Given a time, and a time interval, this function is true if this is the
   1418 !      closest time step to the alarm time. The actual computation is:
   1419 !
   1420 !             if((alarm_time - time) &#60;&#61; (time_interval / 2))
   1421 !
   1422 !      If the function is true, the alarm time is incremented by the
   1423 !      alarm_interval; WARNING, this is a featured side effect. Otherwise, the
   1424 !      function is false and there are no other effects. CAUTION: if the
   1425 !      alarm_interval is smaller than the time_interval, the alarm may fail to
   1426 !      return true ever again.  Watch
   1427 !      for problems if the new alarm time is less than time + time_interval
   1428 !   </DESCRIPTION>
   1429 !   <TEMPLATE>
   1430 !      interval_alarm(time, time_interval, alarm, alarm_interval)
   1431 !   </TEMPLATE>
   1432 
   1433 !   <IN NAME="time" TYPE="time_type"> Current time.  </IN>
   1434 !   <IN NAME="time_interval" TYPE="time_type"> A time interval.  </IN>
   1435 !   <IN NAME="alarm_interval" TYPE="time_type"> A time interval. </IN>
   1436 !   <OUT NAME="interval_alarm" TYPE="logical">
   1437 !     Returns either True or false.
   1438 !   </OUT>
   1439 !   <INOUT NAME="alarm" TYPE="time_type">
   1440 !     An alarm time, which is incremented by the alarm_interval
   1441 !                   if the function is true.
   1442 !   </INOUT>
   1443 
   1444 function interval_alarm(time, time_interval, alarm, alarm_interval)
   1445 
   1446 ! Supports a commonly used type of test on times for models.  Given the
   1447 ! current time, and a time for an alarm, determines if this is the closest
   1448 ! time to the alarm time given a time step of time_interval.  If this
   1449 ! is the closest time (alarm - time <= time_interval/2), the function
   1450 ! returns true and the alarm is incremented by the alarm_interval.  Watch
   1451 ! for problems if the new alarm time is less than time + time_interval
   1452 
   1453 logical :: interval_alarm
   1454 type(time_type), intent(in) :: time, time_interval, alarm_interval
   1455 type(time_type), intent(inout) :: alarm
   1456 
   1457 if((alarm - time) <= (time_interval / 2)) then
   1458    interval_alarm = .TRUE.
   1459    alarm = alarm + alarm_interval
   1460 else
   1461    interval_alarm = .FALSE.
   1462 end if

Page 59          Source Listing                  INTERVAL_ALARM
2021-06-01 08:54                                 time_manager.F90

   1463 
   1464 end function interval_alarm


ENTRY POINTS

  Name                                           
                                                 
 time_manager_mod_mp_interval_alarm_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALARM                      Dummy  1444     TIME_TYPE       16          scalar   ARG,INOUT        1457,1459                         
 ALARM_INTERVAL             Dummy  1444     TIME_TYPE       16          scalar   ARG,IN           1459                              
 INTERVAL_ALARM             Func   1444     L(4)            4           scalar                                                      
 TIME                       Dummy  1444     TIME_TYPE       16          scalar   ARG,IN           1457                              
 TIME_INTERVAL              Dummy  1444     TIME_TYPE       16          scalar   ARG,IN           1457                              

Page 60          Source Listing                  INTERVAL_ALARM
2021-06-01 08:54                                 time_manager.F90

   1465 ! </FUNCTION>
   1466 
   1467 !--------------------------------------------------------------------------
   1468 ! <FUNCTION NAME="repeat_alarm">
   1469 
   1470 !   <OVERVIEW>
   1471 !      Repeat_alarm supports an alarm that goes off with
   1472 !      alarm_frequency and lasts for alarm_length.
   1473 !   </OVERVIEW>
   1474 !   <DESCRIPTION>
   1475 !      Repeat_alarm supports an alarm that goes off with alarm_frequency and
   1476 !      lasts for alarm_length.  If the nearest occurence of an alarm time
   1477 !      is less than half an alarm_length from the input time, repeat_alarm
   1478 !      is true.  For instance, if the alarm_frequency is 1 day, and the
   1479 !      alarm_length is 2 hours, then repeat_alarm is true from time 2300 on
   1480 !      day n to time 0100 on day n + 1 for all n.
   1481 !   </DESCRIPTION>
   1482 !   <TEMPLATE>
   1483 !      repeat_alarm(time, alarm_frequency, alarm_length)
   1484 !   </TEMPLATE>
   1485 
   1486 !   <IN NAME="time" TYPE="time_type"> Current time.  </IN>
   1487 !   <IN NAME="alarm_frequency" TYPE="time_type">
   1488 !     A time interval for alarm_frequency.
   1489 !   </IN>
   1490 !   <IN NAME="alarm_length" TYPE="time_type">
   1491 !     A time interval for alarm_length.
   1492 !   </IN>
   1493 !   <OUT NAME="repeat_alarm" TYPE="logical">
   1494 !     Returns either True or false.
   1495 !   </OUT>
   1496 
   1497 function repeat_alarm(time, alarm_frequency, alarm_length)
   1498 
   1499 ! Repeat_alarm supports an alarm that goes off with alarm_frequency and
   1500 ! lasts for alarm_length.  If the nearest occurence of an alarm time
   1501 ! is less than half an alarm_length from the input time, repeat_alarm
   1502 ! is true.  For instance, if the alarm_frequency is 1 day, and the
   1503 ! alarm_length is 2 hours, then repeat_alarm is true from time 2300 on
   1504 ! day n to time 0100 on day n + 1 for all n.
   1505 
   1506 logical :: repeat_alarm
   1507 type(time_type), intent(in) :: time, alarm_frequency, alarm_length
   1508 type(time_type) :: prev, next
   1509 
   1510 prev = (time / alarm_frequency) * alarm_frequency
   1511 next = prev + alarm_frequency
   1512 if(time - prev <= alarm_length / 2 .or. next - time <= alarm_length / 2) then
   1513    repeat_alarm = .TRUE.
   1514 else
   1515    repeat_alarm = .FALSE.
   1516 endif
   1517 
   1518 end function repeat_alarm

Page 61          Source Listing                  REPEAT_ALARM
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                         
                                               
 time_manager_mod_mp_repeat_alarm_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ALARM_FREQUENCY            Dummy  1497     TIME_TYPE       16          scalar   ARG,IN           1510,1511                         
 ALARM_LENGTH               Dummy  1497     TIME_TYPE       16          scalar   ARG,IN           1512                              
 NEXT                       Local  1508     TIME_TYPE       16          scalar                    1511,1512                         
 PREV                       Local  1508     TIME_TYPE       16          scalar                    1510,1511,1512                    
 REPEAT_ALARM               Func   1497     L(4)            4           scalar                                                      
 TIME                       Dummy  1497     TIME_TYPE       16          scalar   ARG,IN           1510,1512                         

Page 62          Source Listing                  REPEAT_ALARM
2021-06-01 08:54                                 time_manager.F90

   1519 ! </FUNCTION>
   1520 
   1521 !--------------------------------------------------------------------------
   1522 
   1523 !=========================================================================
   1524 ! CALENDAR OPERATIONS BEGIN HERE
   1525 !=========================================================================
   1526 
   1527 ! <SUBROUTINE NAME="set_calendar_type">
   1528 
   1529 !   <OVERVIEW>
   1530 !     Sets the default calendar type for mapping time intervals to dates.
   1531 !   </OVERVIEW>
   1532 !   <DESCRIPTION>
   1533 !     A constant number for setting the calendar type.
   1534 !   </DESCRIPTION>
   1535 !   <TEMPLATE> set_calendar_type(type, err_msg) </TEMPLATE>
   1536 
   1537 !   <IN NAME="type" TYPE="integer" DIM="(scalar)" DEFAULT="NO_CALENDAR">
   1538 !     A constant number for setting the calendar type.
   1539 !   </IN>
   1540 !   <OUT NAME="err_msg" TYPE="character, optional" DIM="(scalar)">
   1541 !     When present, and when non-blank, a fatal error condition as been detected.
   1542 !     The string itself is an error message.
   1543 !     It is recommended that, when err_msg is present in the call
   1544 !     to this routine, the next line of code should be something
   1545 !     similar to this:
   1546 !     if(err_msg /= '') call error_mesg('my_routine','additional info: '//trim(err_msg),FATAL)
   1547 !   </OUT>
   1548 
   1549 !> @brief Sets calendar_type. The arrays coded_date and days_this_month used for the Gregorian calendar
   1550 !! are assigned in this subroutine.  The arrays and this component of the subroutine has been kept in order to be used by th
   1550 e original/old
   1551 !! get_date_gregorian and set_date_gregorian which are now called get_date_gregorian_old and set_date_gregorian_old.  The
   1552 !! get/set_date_gregorian_old subroutines have been kept in order to test the new get/set_date_gregorian. The new get/set_da
   1552 te_gregorian
   1553 !! do not utilize the coded_date and days_this_month arrays.  As done in the get/set_date_gregorian_old, in the new routines
   1553 ,
   1554 !! negative years and the proleptic Gregorian calendar are not used; and the discontinuity of days in October 1582
   1555 !! (when the Gregorian calendar was adopted by select groups in Europe) is not taken into account.
   1556 subroutine set_calendar_type(type, err_msg)
   1557 
   1558 ! Selects calendar for default mapping from time to date.
   1559 
   1560 integer, intent(in) :: type
   1561 character(len=*), intent(out), optional :: err_msg
   1562 integer :: iday, days_this_month, year, month, day
   1563 logical :: leap
   1564 character(len=256) :: err_msg_local
   1565 
   1566 if(.not.module_is_initialized) call time_manager_init()
   1567 
   1568 if(present(err_msg)) err_msg = ''
   1569 
   1570 if(type <  0 .or. type > max_type) then
   1571   err_msg_local = 'Illegal calendar type'
   1572   if(error_handler('subroutine set_calendar_type', err_msg_local, err_msg)) return

Page 63          Source Listing                  SET_CALENDAR_TYPE
2021-06-01 08:54                                 time_manager.F90

   1573 endif
   1574 
   1575 if(seconds_per_day /= 86400 .and. type /= NO_CALENDAR ) then
   1576   err_msg_local = 'Only calendar type NO_CALENDAR is allowed when seconds_per_day is not 86400.'// &
   1577                   ' You are using '//trim(valid_calendar_types(type))//' and seconds_per_day='
   1578   write(err_msg_local(len_trim(err_msg_local)+1:len_trim(err_msg_local)+8),'(i8)') seconds_per_day
   1579   if(error_handler('subroutine set_calendar_type', err_msg_local, err_msg)) return
   1580 endif
   1581 
   1582 calendar_type = type
   1583 
   1584 if(type == GREGORIAN) then
   1585   date_to_day = invalid_date
   1586   iday = 0
   1587   do year=1,400
   1588     leap = leap_year_gregorian_int(year)
   1589     do month=1,12
   1590       days_this_month = days_per_month(month)
   1591       if(leap .and. month ==2) days_this_month = 29
   1592       do day=1,days_this_month
   1593         date_to_day(year,month,day) = iday
   1594         iday = iday+1
   1595         coded_date(iday) = day + 32*(month + 16*year)
   1596       enddo ! do day
   1597     enddo ! do month
   1598   enddo ! do year
   1599 endif
   1600 
   1601 end subroutine set_calendar_type

Page 64          Source Listing                  SET_CALENDAR_TYPE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                              
                                                    
 time_manager_mod_mp_set_calendar_type_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CALENDAR_TYPE              Local  1582     I(4)            4           scalar   PRIV             154,1582,1625,1728,2106,2756,2786,
                                                                                                  2921,3028,3133,3237               
 CODED_DATE                 Local  1595     I(4)            4     1     146097                    1595,1863,1864,1865               
 DATE_TO_DAY                Local  1585     I(4)            4     3     148800                    1585,1593,2407                    
 DAY                        Local  1562     I(4)            4           scalar                    1592,1593,1595                    
 DAYS_PER_MONTH             Local  1590     I(4)            4     1     12       PRIV             158,1590,1818,1823,1830,1926,2001,
                                                                                                  2002,2321,2327,2375,2376,2438,2458
                                                                                                  ,2532,2540,2950,2965,2993         
 DAYS_THIS_MONTH            Local  1562     I(4)            4           scalar                    1590,1591,1592                    
 ERR_MSG                    Dummy  1556     CHAR                        scalar   ARG,OUT          1568,1572,1579                    
 ERR_MSG_LOCAL              Local  1564     CHAR            256         scalar                    1571,1572,1576,1578,1579          
 GREGORIAN                  Param  1584     I(4)            4           scalar                    114,1584,1731,2109,2763,2793,2924,
                                                                                                  3031,3136,3240,3530               
 IDAY                       Local  1562     I(4)            4           scalar                    1586,1593,1594,1595               
 INVALID_DATE               Param  1585     I(4)            4           scalar                    1585,2408                         
 LEAP                       Local  1563     L(4)            4           scalar                    1588,1591                         
 LEAP_YEAR_GREGORIAN_INT@0  Local  1588     L(4)            4           scalar                                                      
 LEN_TRIM                   Func   1578                                 scalar                    1578                              
 MAX_TYPE                   Param  1570     I(4)            4           scalar                    1570                              
 MONTH                      Local  1562     I(4)            4           scalar                    1589,1590,1591,1593,1595          
 NO_CALENDAR                Param  1575     I(4)            4           scalar                    114,154,1575,1743,2121,2765,2930,3
                                                                                                  524                               
 PRESENT                    Func   1568                                 scalar                    1568                              
 SET_CALENDAR_TYPE          Subr   1556                                                                                             
 TRIM                       Func   1577                                 scalar                    1577                              
 TYPE                       Dummy  1556     I(4)            4           scalar   ARG,IN           1570,1575,1577,1582,1584          
 VALID_CALENDAR_TYPES       Func   1577     CHAR            24          scalar                    132,1577,3525,3527,3529,3531,3533 
 VALID_CALENDAR_TYPES@0     Local  1577     CHAR            24          scalar                                                      
 YEAR                       Local  1562     I(4)            4           scalar                    1587,1588,1593,1595               

Page 65          Source Listing                  SET_CALENDAR_TYPE
2021-06-01 08:54                                 time_manager.F90

   1602 ! </SUBROUTINE>
   1603 
   1604 !------------------------------------------------------------------------
   1605 ! <FUNCTION NAME="get_calendar_type">
   1606 
   1607 !   <OVERVIEW>
   1608 !      Returns the value of the default calendar type for mapping
   1609 !      from time to date.
   1610 !   </OVERVIEW>
   1611 !   <DESCRIPTION>
   1612 !     There are no arguments in this function. It returns the value of
   1613 !     the default calendar type for mapping from time to date.
   1614 !   </DESCRIPTION>
   1615 !   <TEMPLATE>
   1616 !     get_calendar_type()
   1617 !   </TEMPLATE>
   1618 
   1619 function get_calendar_type()
   1620 
   1621 ! Returns default calendar type for mapping from time to date.
   1622 
   1623 integer :: get_calendar_type
   1624 
   1625 get_calendar_type = calendar_type
   1626 
   1627 end function get_calendar_type


ENTRY POINTS

  Name                                              
                                                    
 time_manager_mod_mp_get_calendar_type_             

Page 66          Source Listing                  GET_CALENDAR_TYPE
2021-06-01 08:54 Symbol Table                    time_manager.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_CALENDAR_TYPE          Func   1619     I(4)            4           scalar                                                      

Page 67          Source Listing                  GET_CALENDAR_TYPE
2021-06-01 08:54                                 time_manager.F90

   1628 ! </FUNCTION>
   1629 
   1630 !------------------------------------------------------------------------
   1631 ! <SUBROUTINE NAME="set_ticks_per_second">
   1632 
   1633 !   <OVERVIEW>
   1634 !     Sets the number of ticks per second.
   1635 !   </OVERVIEW>
   1636 !   <DESCRIPTION>
   1637 !     Sets the number of ticks per second.
   1638 !   </DESCRIPTION>
   1639 !   <TEMPLATE> call set_ticks_per_second(ticks_per_second) </TEMPLATE>
   1640 !   <IN NAME="type" TYPE="integer" DIM="(scalar)" DEFAULT="1"> </IN>
   1641 
   1642 subroutine set_ticks_per_second(tps)
   1643 integer, intent(in) :: tps
   1644 
   1645 ticks_per_second = tps
   1646 
   1647 end subroutine set_ticks_per_second


ENTRY POINTS

  Name                                                 
                                                       
 time_manager_mod_mp_set_ticks_per_second_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 SET_TICKS_PER_SECOND       Subr   1642                                                                                             
 TPS                        Dummy  1642     I(4)            4           scalar   ARG,IN           1645                              

Page 68          Source Listing                  SET_TICKS_PER_SECOND
2021-06-01 08:54                                 time_manager.F90

   1648 
   1649 ! </SUBROUTINE>
   1650 
   1651 !------------------------------------------------------------------------
   1652 ! <FUNCTION NAME="get_ticks_per_second">
   1653 
   1654 !   <OVERVIEW>
   1655 !      Returns the number of ticks per second.
   1656 !   </OVERVIEW>
   1657 !   <DESCRIPTION>
   1658 !      Returns the number of ticks per second.
   1659 !   </DESCRIPTION>
   1660 !   <TEMPLATE>
   1661 !     ticks_per_second = get_ticks_per_second()
   1662 !   </TEMPLATE>
   1663 
   1664 function get_ticks_per_second()
   1665 integer :: get_ticks_per_second
   1666 
   1667 get_ticks_per_second = ticks_per_second
   1668 
   1669 end function get_ticks_per_second


ENTRY POINTS

  Name                                                 
                                                       
 time_manager_mod_mp_get_ticks_per_second_             

Page 69          Source Listing                  GET_TICKS_PER_SECOND
2021-06-01 08:54 Symbol Table                    time_manager.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 GET_TICKS_PER_SECOND       Func   1664     I(4)            4           scalar                                                      

Page 70          Source Listing                  GET_TICKS_PER_SECOND
2021-06-01 08:54                                 time_manager.F90

   1670 
   1671 ! </FUNCTION>
   1672 !------------------------------------------------------------------------
   1673 
   1674 !========================================================================
   1675 ! START OF get_date BLOCK
   1676 ! <SUBROUTINE NAME="get_date">
   1677 
   1678 !   <OVERVIEW>
   1679 !      Given a time_interval, returns the corresponding date under
   1680 !      the selected calendar.
   1681 !   </OVERVIEW>
   1682 !   <DESCRIPTION>
   1683 !      Given a time_interval, returns the corresponding date under
   1684 !      the selected calendar.
   1685 !   </DESCRIPTION>
   1686 !   <TEMPLATE>
   1687 !     get_date(time, year, month, day, hour, minute, second, tick, err_msg)
   1688 !   </TEMPLATE>
   1689 !   <IN NAME="time"    TYPE="time_type"> A time interval.</IN>
   1690 !   <OUT NAME="year"   TYPE="integer"></OUT>
   1691 !   <OUT NAME="month"  TYPE="integer"></OUT>
   1692 !   <OUT NAME="day"    TYPE="integer"></OUT>
   1693 !   <OUT NAME="hour"   TYPE="integer"></OUT>
   1694 !   <OUT NAME="minute" TYPE="integer"></OUT>
   1695 !   <OUT NAME="second" TYPE="integer"></OUT>
   1696 !   <OUT NAME="tick"   TYPE="integer, optional"></OUT>
   1697 !   <OUT NAME="err_msg" TYPE="character, optional" DIM="(scalar)">
   1698 !     When present, and when non-blank, a fatal error condition as been detected.
   1699 !     The string itself is an error message.
   1700 !     It is recommended that, when err_msg is present in the call
   1701 !     to this routine, the next line of code should be something
   1702 !     similar to this:
   1703 !     if(err_msg /= '') call error_mesg('my_routine','additional info: '//trim(err_msg),FATAL)
   1704 !   </OUT>
   1705 
   1706 !> @brief Gets the date for different calendar types.
   1707 !! The added optional argument old_method allows user to choose either the new or old version
   1708 !! of get_date_gregorian.  The variable old_method is only useful if the calendar type is Gregorian
   1709  subroutine get_date(time, year, month, day, hour, minute, second, tick, err_msg, old_method)
   1710 
   1711 ! Given a time, computes the corresponding date given the selected calendar
   1712 
   1713  type(time_type), intent(in)    :: time
   1714  integer, intent(out)           :: second, minute, hour, day, month, year
   1715  integer, intent(out), optional :: tick
   1716  character(len=*), intent(out), optional :: err_msg
   1717  logical, intent(in), optional  :: old_method !< option to choose betw the new and old ver of get_date_gregorian subroutine.
   1718 !! When .true., call get_date_gregorian_old to retrieve the date
   1719 !! from the array coded_date.  When .false., call get_date_gregorian to
   1720 !! compute the date on the fly.
   1721  character(len=128) :: err_msg_local
   1722  integer :: tick1
   1723  logical :: old_method_local !< set as .false..  Takes on the value of old_method if old_method is present.
   1724 
   1725  if(.not.module_is_initialized) call time_manager_init
   1726  if(present(err_msg)) err_msg = ''

Page 71          Source Listing                  GET_DATE
2021-06-01 08:54                                 time_manager.F90

   1727 
   1728  select case(calendar_type)
   1729  case(THIRTY_DAY_MONTHS)
   1730    call get_date_thirty   (time, year, month, day, hour, minute, second, tick1)
   1731  case(GREGORIAN)
   1732    old_method_local=.false.
   1733    if(present(old_method)) old_method_local=old_method
   1734    if(old_method_local) then
   1735      call get_date_gregorian_old(time, year, month, day, hour, minute, second, tick1)
   1736    else
   1737      call get_date_gregorian(time, year, month, day, hour, minute, second, tick1)
   1738    end if
   1739  case(JULIAN)
   1740    call get_date_julian_private   (time, year, month, day, hour, minute, second, tick1)
   1741  case(NOLEAP)
   1742    call get_date_no_leap_private  (time, year, month, day, hour, minute, second, tick1)
   1743  case(NO_CALENDAR)
   1744    err_msg_local = 'Cannot produce a date when the calendar type is NO_CALENDAR'
   1745    if(error_handler('subroutine get_date', err_msg_local, err_msg)) return
   1746  case default
   1747    err_msg_local = 'Invalid calendar type'
   1748    if(error_handler('subroutine get_date', err_msg_local, err_msg)) return
   1749  end select
   1750 
   1751  if(present(tick)) then
   1752    tick = tick1
   1753  else
   1754    if(tick1 /= 0) then
   1755      err_msg_local = 'tick must be present when time has a second fraction'
   1756      if(error_handler('subroutine get_date', err_msg_local, err_msg)) return
   1757    endif
   1758  endif
   1759 
   1760  end subroutine get_date

Page 72          Source Listing                  GET_DATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                     
                                           
 time_manager_mod_mp_get_date_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  1709     I(4)            4           scalar   ARG,OUT          1730,1735,1737,1740,1742          
 ERR_MSG                    Dummy  1709     CHAR                        scalar   ARG,OUT          1726,1745,1748,1756               
 ERR_MSG_LOCAL              Local  1721     CHAR            128         scalar                    1744,1745,1747,1748,1755,1756     
 GET_DATE                   Subr   1709                                                                                             
 HOUR                       Dummy  1709     I(4)            4           scalar   ARG,OUT          1730,1735,1737,1740,1742          
 JULIAN                     Param  1739     I(4)            4           scalar                    114,1739,2117,2761,2791,2926,3033,
                                                                                                  3138,3242,3528                    
 MINUTE                     Dummy  1709     I(4)            4           scalar   ARG,OUT          1730,1735,1737,1740,1742          
 MONTH                      Dummy  1709     I(4)            4           scalar   ARG,OUT          1730,1735,1737,1740,1742          
 NOLEAP                     Param  1741     I(4)            4           scalar                    114,1741,2119,2759,2789,2928,3035,
                                                                                                  3140,3244,3532                    
 OLD_METHOD                 Dummy  1709     L(4)            4           scalar   ARG,IN           1733                              
 OLD_METHOD_LOCAL           Local  1723     L(4)            4           scalar                    1732,1733,1734                    
 PRESENT                    Func   1726                                 scalar                    1726,1733,1751                    
 SECOND                     Dummy  1709     I(4)            4           scalar   ARG,OUT          1730,1735,1737,1740,1742          
 THIRTY_DAY_MONTHS          Param  1729     I(4)            4           scalar                    114,1729,2107,2757,2787,2922,3029,
                                                                                                  3134,3238,3526                    
 TICK                       Dummy  1709     I(4)            4           scalar   ARG,OUT          1751,1752                         
 TICK1                      Local  1722     I(4)            4           scalar                    1730,1735,1737,1740,1742,1752,1754
 TIME                       Dummy  1709     TIME_TYPE       16          scalar   ARG,IN           1730,1735,1737,1740,1742          
 YEAR                       Dummy  1709     I(4)            4           scalar   ARG,OUT          1730,1735,1737,1740,1742          

Page 73          Source Listing                  GET_DATE
2021-06-01 08:54                                 time_manager.F90

   1761 ! </SUBROUTINE>
   1762 !------------------------------------------------------------------------
   1763 
   1764 !> @brief Gets the date on a Gregorian calendar.
   1765 !! Computes the year, month, day on the fly from the quantity time%days
   1766  subroutine get_date_gregorian(time, year, month, day, hour, minute, second, tick)
   1767 
   1768  type(time_type), intent(in) :: time
   1769  integer, intent(out) :: year, month, day, hour, minute, second
   1770  integer, intent(out) :: tick
   1771  integer :: iday, isec
   1772 
   1773  integer :: l                          !< value of 1 if leap year; value of 0 otherwise
   1774  integer :: ncenturies                 !< number of centuries passed in the current 400 year period
   1775  integer :: nlpyrs                     !< number of leap years in the current century
   1776  integer :: yearx, monthx, dayx, idayx !< temporary values for year, month, day
   1777  integer :: i                          !< counter, dummy variable
   1778 
   1779 ! Computes date corresponding to time for gregorian calendar
   1780 
   1781 !Carried over from the old subroutine
   1782  if(Time%seconds >= 86400) then ! This check appears to be unecessary.
   1783    call error_mesg('get_date','Time%seconds .ge. 86400 in subroutine get_date_gregorian',FATAL)
   1784  endif
   1785 
   1786  iday = mod(Time%days+1,days_in_400_year_period)
   1787 
   1788  yearx = 1
   1789  idayx = 0
   1790  if( iday.eq.0 ) then !year 400
   1791    yearx = 0
   1792    idayx = -366
   1793  else if( iday.gt.365 ) then
   1794    yearx      = int(iday/365) - 1 !approximation off by -1 year at most
   1795    ncenturies = int(yearx/100)
   1796    nlpyrs     = int((yearx-ncenturies*100)/4)
   1797    idayx      = ncenturies*36524 + (yearx-ncenturies*100)*365 + nlpyrs !36524 days in a century
   1798    if( ncenturies.eq.4 ) idayx = idayx + 1                             !year 400 is a leap year
   1799    l = 0 ; if ( leap_year_gregorian_int(yearx+1) ) l = 1
   1800    if ( (iday-idayx).gt.365+l ) then !off by -1 year
   1801      yearx = yearx + 1
   1802      idayx = idayx + 365 + l
   1803    end if
   1804    yearx = yearx + 1
   1805  end if
   1806 
   1807  year = 400*int((Time%days+1)/days_in_400_year_period) + yearx
   1808 
   1809  l = 0 ; if( leap_year_gregorian_int(year) ) l = 1
   1810  dayx = iday - idayx
   1811  if( dayx.le.31 ) then
   1812    month = 1
   1813    day   = dayx
   1814  else
   1815    monthx = int(dayx/30)
   1816    if( l.eq.1 ) then
   1817      do i=1, monthx

Page 74          Source Listing                  GET_DATE_GREGORIAN
2021-06-01 08:54                                 time_manager.F90

   1818        dayx = dayx - days_per_month(i)
   1819        if(i.eq.2) dayx = dayx - l
   1820      end do
   1821    else
   1822      do i=1, monthx
   1823        dayx = dayx - days_per_month(i)
   1824      end do
   1825    end if
   1826    month = monthx + 1
   1827    day   = dayx
   1828    if( dayx.le.0 ) then
   1829      month = monthx
   1830      day = dayx + days_per_month(monthx)
   1831      if(monthx.eq.2) day = day + l
   1832    end if
   1833  end if
   1834 
   1835  hour   = Time%seconds / 3600
   1836  isec   = Time%seconds - 3600*hour
   1837  minute = isec / 60
   1838  second = isec - 60*minute
   1839  tick   = time%ticks
   1840 
   1841  end subroutine get_date_gregorian


ENTRY POINTS

  Name                                               
                                                     
 time_manager_mod_mp_get_date_gregorian_             

Page 75          Source Listing                  GET_DATE_GREGORIAN
2021-06-01 08:54 Symbol Table                    time_manager.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  1766     I(4)            4           scalar   ARG,OUT          1813,1827,1830,1831               
 DAYS_IN_400_YEAR_PERIOD    Param  1786     I(4)            4           scalar                    161,1786,1807,1860,1861,1867,2360,
                                                                                                  2414,3165,3166                    
 DAYX                       Local  1776     I(4)            4           scalar                    1810,1811,1813,1815,1818,1819,1823
                                                                                                  ,1827,1828,1830                   
 GET_DATE_GREGORIAN         Subr   1766                                                           1737,2370,2764,2949               
 HOUR                       Dummy  1766     I(4)            4           scalar   ARG,OUT          1835,1836                         
 I                          Local  1777     I(4)            4           scalar                    1817,1818,1819,1822,1823          
 IDAY                       Local  1771     I(4)            4           scalar                    1786,1790,1793,1794,1800,1810     
 IDAYX                      Local  1776     I(4)            4           scalar                    1789,1792,1797,1798,1800,1802,1810
 INT                        Func   1794                                 scalar                    1794,1795,1796,1807,1815          
 ISEC                       Local  1771     I(4)            4           scalar                    1836,1837,1838                    
 L                          Local  1773     I(4)            4           scalar                    1799,1800,1802,1809,1816,1819,1831
 MINUTE                     Dummy  1766     I(4)            4           scalar   ARG,OUT          1837,1838                         
 MOD                        Func   1786                                 scalar                    1786                              
 MONTH                      Dummy  1766     I(4)            4           scalar   ARG,OUT          1812,1826,1829                    
 MONTHX                     Local  1776     I(4)            4           scalar                    1815,1817,1822,1826,1829,1830,1831
 NCENTURIES                 Local  1774     I(4)            4           scalar                    1795,1796,1797,1798               
 NLPYRS                     Local  1775     I(4)            4           scalar                    1796,1797                         
 SECOND                     Dummy  1766     I(4)            4           scalar   ARG,OUT          1838                              
 TICK                       Dummy  1766     I(4)            4           scalar   ARG,OUT          1839                              
 TIME                       Dummy  1766     TIME_TYPE       16          scalar   ARG,IN           1782,1786,1807,1835,1836,1839     
 YEAR                       Dummy  1766     I(4)            4           scalar   ARG,OUT          1807,1809                         
 YEARX                      Local  1776     I(4)            4           scalar                    1788,1791,1794,1795,1796,1797,1799
                                                                                                  ,1801,1804,1807                   

Page 76          Source Listing                  GET_DATE_GREGORIAN
2021-06-01 08:54                                 time_manager.F90

   1842 !------------------------------------------------------------------------
   1843 
   1844 !> @brief Gets the date on a Gregorian calendar.  This is the original/old subroutine.
   1845 !! Looks up the year, month, day from the coded_date array
   1846 !! This subroutine is kept in order to test the new get_date_gregorian
   1847  subroutine get_date_gregorian_old(time, year, month, day, hour, minute, second, tick)
   1848 
   1849 ! Computes date corresponding to time for gregorian calendar
   1850 
   1851  type(time_type), intent(in) :: time
   1852  integer, intent(out) :: year, month, day, hour, minute, second
   1853  integer, intent(out) :: tick
   1854  integer :: iday, isec
   1855 
   1856  if(Time%seconds >= 86400) then ! This check appears to be unecessary.
   1857    call error_mesg('get_date','Time%seconds .ge. 86400 in subroutine get_date_gregorian_old',FATAL)
   1858  endif
   1859 
   1860  iday = mod(Time%days+1,days_in_400_year_period)
   1861  if(iday == 0) iday = days_in_400_year_period
   1862 
   1863  year = coded_date(iday)/512
   1864  day = mod(coded_date(iday),32)
   1865  month = coded_date(iday)/32 - 16*year
   1866 
   1867  year = year + 400*((Time%days)/days_in_400_year_period)
   1868 
   1869  hour = Time%seconds / 3600
   1870  isec  = Time%seconds - 3600*hour
   1871  minute = isec / 60
   1872  second = isec - 60*minute
   1873  tick = time%ticks
   1874 
   1875  end subroutine get_date_gregorian_old

Page 77          Source Listing                  GET_DATE_GREGORIAN_OLD
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                                   
                                                         
 time_manager_mod_mp_get_date_gregorian_old_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  1847     I(4)            4           scalar   ARG,OUT          1864                              
 GET_DATE_GREGORIAN_OLD     Subr   1847                                                           1735                              
 HOUR                       Dummy  1847     I(4)            4           scalar   ARG,OUT          1869,1870                         
 IDAY                       Local  1854     I(4)            4           scalar                    1860,1861,1863,1864,1865          
 ISEC                       Local  1854     I(4)            4           scalar                    1870,1871,1872                    
 MINUTE                     Dummy  1847     I(4)            4           scalar   ARG,OUT          1871,1872                         
 MOD                        Func   1860                                 scalar                    1860,1864                         
 MONTH                      Dummy  1847     I(4)            4           scalar   ARG,OUT          1865                              
 SECOND                     Dummy  1847     I(4)            4           scalar   ARG,OUT          1872                              
 TICK                       Dummy  1847     I(4)            4           scalar   ARG,OUT          1873                              
 TIME                       Dummy  1847     TIME_TYPE       16          scalar   ARG,IN           1856,1860,1867,1869,1870,1873     
 YEAR                       Dummy  1847     I(4)            4           scalar   ARG,OUT          1863,1865,1867                    

Page 78          Source Listing                  GET_DATE_GREGORIAN_OLD
2021-06-01 08:54                                 time_manager.F90

   1876 !------------------------------------------------------------------------
   1877  function cut0(string)
   1878  character(len=256) :: cut0
   1879  character(len=*), intent(in) :: string
   1880  integer :: i
   1881 
   1882  cut0 = string
   1883 
   1884  do i=1,len(string)
   1885    if(ichar(string(i:i)) == 0 ) then
   1886      cut0(i:i) = ' '
   1887    endif
   1888  enddo
   1889 
   1890  return
   1891  end function cut0


ENTRY POINTS

  Name                                 
                                       
 time_manager_mod_mp_cut0_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CUT0                       Func   1877     CHAR            256         scalar                    403,1882,1886,2227                
 I                          Local  1880     I(4)            4           scalar                    1884,1885,1886                    
 ICHAR                      Func   1885                                 scalar                    1885                              
 LEN                        Func   1884                                 scalar                    1884                              
 STRING                     Dummy  1877     CHAR                        scalar   ARG,IN           1882,1884,1885                    

Page 79          Source Listing                  CUT0
2021-06-01 08:54                                 time_manager.F90

   1892 !------------------------------------------------------------------------
   1893 
   1894  subroutine get_date_julian_private(time, year, month, day, hour, minute, second, tick)
   1895 
   1896 ! Base date for Julian calendar is year 1 with all multiples of 4
   1897 ! years being leap years.
   1898 
   1899  type(time_type), intent(in) :: time
   1900  integer, intent(out) :: second, minute, hour, day, month, year
   1901  integer, intent(out) :: tick
   1902  integer :: m, t, nfour, nex, days_this_month
   1903  logical :: leap
   1904 
   1905 ! find number of four year periods; also get modulo number of days
   1906  nfour = time%days / (4 * 365 + 1)
   1907  day = modulo(time%days, (4 * 365 + 1))
   1908 
   1909 ! Find out what year in four year chunk
   1910  nex = day / 365
   1911  if(nex == 4) then
   1912     nex = 3
   1913     day = 366
   1914  else
   1915     day=modulo(day, 365) + 1
   1916  endif
   1917 
   1918 ! Is this a leap year?
   1919  leap = (nex == 3)
   1920 
   1921  year = 1 + 4 * nfour + nex
   1922 
   1923 ! find month and day
   1924  do m = 1, 12
   1925    month = m
   1926    days_this_month = days_per_month(m)
   1927    if(leap .and. m == 2) days_this_month = 29
   1928    if(day <= days_this_month) exit
   1929    day = day - days_this_month
   1930  end do
   1931 
   1932 ! find hour,minute and second
   1933  t = time%seconds
   1934  hour = t / (60 * 60)
   1935  t = t - hour * (60 * 60)
   1936  minute = t / 60
   1937  second = t - 60 * minute
   1938  tick = time%ticks
   1939  end subroutine get_date_julian_private

Page 80          Source Listing                  GET_DATE_JULIAN_PRIVATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                                    
                                                          
 time_manager_mod_mp_get_date_julian_private_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  1894     I(4)            4           scalar   ARG,OUT          1907,1910,1913,1915,1928,1929     
 DAYS_THIS_MONTH            Local  1902     I(4)            4           scalar                    1926,1927,1928,1929               
 GET_DATE_JULIAN_PRIVATE    Subr   1894                                                           1740,1951,2762,2964               
 HOUR                       Dummy  1894     I(4)            4           scalar   ARG,OUT          1934,1935                         
 LEAP                       Local  1903     L(4)            4           scalar                    1919,1927                         
 M                          Local  1902     I(4)            4           scalar                    1924,1925,1926,1927               
 MINUTE                     Dummy  1894     I(4)            4           scalar   ARG,OUT          1936,1937                         
 MODULO                     Func   1907                                 scalar                    1907,1915                         
 MONTH                      Dummy  1894     I(4)            4           scalar   ARG,OUT          1925                              
 NEX                        Local  1902     I(4)            4           scalar                    1910,1911,1912,1919,1921          
 NFOUR                      Local  1902     I(4)            4           scalar                    1906,1921                         
 SECOND                     Dummy  1894     I(4)            4           scalar   ARG,OUT          1937                              
 T                          Local  1902     I(4)            4           scalar                    1933,1934,1935,1936,1937          
 TICK                       Dummy  1894     I(4)            4           scalar   ARG,OUT          1938                              
 TIME                       Dummy  1894     TIME_TYPE       16          scalar   ARG,IN           1906,1907,1933,1938               
 YEAR                       Dummy  1894     I(4)            4           scalar   ARG,OUT          1921                              

Page 81          Source Listing                  GET_DATE_JULIAN_PRIVATE
2021-06-01 08:54                                 time_manager.F90

   1940 
   1941 !------------------------------------------------------------------------
   1942  subroutine get_date_julian(time, year, month, day, hour, minute, second)
   1943 
   1944 ! No need to include tick in argument list because this routine
   1945 ! exists only for interpolator.F90, which does not need it.
   1946 
   1947  type(time_type), intent(in) :: time
   1948  integer, intent(out) :: second, minute, hour, day, month, year
   1949  integer :: tick
   1950 
   1951  call get_date_julian_private(time, year, month, day, hour, minute, second, tick)
   1952 
   1953  end subroutine get_date_julian


ENTRY POINTS

  Name                                            
                                                  
 time_manager_mod_mp_get_date_julian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  1942     I(4)            4           scalar   ARG,OUT          1951                              
 GET_DATE_JULIAN            Subr   1942                                                                                             
 HOUR                       Dummy  1942     I(4)            4           scalar   ARG,OUT          1951                              
 MINUTE                     Dummy  1942     I(4)            4           scalar   ARG,OUT          1951                              
 MONTH                      Dummy  1942     I(4)            4           scalar   ARG,OUT          1951                              
 SECOND                     Dummy  1942     I(4)            4           scalar   ARG,OUT          1951                              
 TICK                       Local  1949     I(4)            4           scalar                    1951                              
 TIME                       Dummy  1942     TIME_TYPE       16          scalar   ARG,IN           1951                              
 YEAR                       Dummy  1942     I(4)            4           scalar   ARG,OUT          1951                              

Page 82          Source Listing                  GET_DATE_JULIAN
2021-06-01 08:54                                 time_manager.F90

   1954 
   1955 !------------------------------------------------------------------------
   1956 
   1957  subroutine get_date_thirty(time, year, month, day, hour, minute, second, tick)
   1958 
   1959 ! Computes date corresponding to time interval for 30 day months, 12
   1960 ! month years.
   1961 
   1962  type(time_type), intent(in) :: time
   1963  integer, intent(out) :: second, minute, hour, day, month, year
   1964  integer, intent(out) :: tick
   1965  integer :: t, dmonth, dyear
   1966 
   1967  t = time%days
   1968  dyear = t / (30 * 12)
   1969  year = dyear + 1
   1970  t = t - dyear * (30 * 12)
   1971  dmonth = t / 30
   1972  month = 1 + dmonth
   1973  day = t -dmonth * 30 + 1
   1974 
   1975  t = time%seconds
   1976  hour = t / (60 * 60)
   1977  t = t - hour * (60 * 60)
   1978  minute = t / 60
   1979  second = t - 60 * minute
   1980  tick = time%ticks
   1981 
   1982  end subroutine get_date_thirty

Page 83          Source Listing                  GET_DATE_THIRTY
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                            
                                                  
 time_manager_mod_mp_get_date_thirty_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  1957     I(4)            4           scalar   ARG,OUT          1973                              
 DMONTH                     Local  1965     I(4)            4           scalar                    1971,1972,1973                    
 DYEAR                      Local  1965     I(4)            4           scalar                    1968,1969,1970                    
 GET_DATE_THIRTY            Subr   1957                                                           1730,2758                         
 HOUR                       Dummy  1957     I(4)            4           scalar   ARG,OUT          1976,1977                         
 MINUTE                     Dummy  1957     I(4)            4           scalar   ARG,OUT          1978,1979                         
 MONTH                      Dummy  1957     I(4)            4           scalar   ARG,OUT          1972                              
 SECOND                     Dummy  1957     I(4)            4           scalar   ARG,OUT          1979                              
 T                          Local  1965     I(4)            4           scalar                    1967,1968,1970,1971,1973,1975,1976
                                                                                                  ,1977,1978,1979                   
 TICK                       Dummy  1957     I(4)            4           scalar   ARG,OUT          1980                              
 TIME                       Dummy  1957     TIME_TYPE       16          scalar   ARG,IN           1967,1975,1980                    
 YEAR                       Dummy  1957     I(4)            4           scalar   ARG,OUT          1969                              

Page 84          Source Listing                  GET_DATE_THIRTY
2021-06-01 08:54                                 time_manager.F90

   1983 !------------------------------------------------------------------------
   1984 
   1985  subroutine get_date_no_leap_private(time, year, month, day, hour, minute, second, tick)
   1986 
   1987 ! Base date for NOLEAP calendar is year 1.
   1988 
   1989  type(time_type), intent(in) :: time
   1990  integer, intent(out) :: second, minute, hour, day, month, year
   1991  integer, intent(out) :: tick
   1992  integer :: m, t
   1993 
   1994 ! get modulo number of days
   1995  year = time%days / 365 + 1
   1996  day = modulo(time%days, 365) + 1
   1997 
   1998 ! find month and day
   1999  do m = 1, 12
   2000    month = m
   2001    if(day <= days_per_month(m)) exit
   2002    day = day - days_per_month(m)
   2003  end do
   2004 
   2005 ! find hour,minute and second
   2006  t = time%seconds
   2007  hour = t / (60 * 60)
   2008  t = t - hour * (60 * 60)
   2009  minute = t / 60
   2010  second = t - 60 * minute
   2011  tick = time%ticks
   2012 
   2013  end subroutine get_date_no_leap_private

Page 85          Source Listing                  GET_DATE_NO_LEAP_PRIVATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                                     
                                                           
 time_manager_mod_mp_get_date_no_leap_private_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  1985     I(4)            4           scalar   ARG,OUT          1996,2001,2002                    
 GET_DATE_NO_LEAP_PRIVATE   Subr   1985                                                           1742,2025,2760,2992               
 HOUR                       Dummy  1985     I(4)            4           scalar   ARG,OUT          2007,2008                         
 M                          Local  1992     I(4)            4           scalar                    1999,2000,2001,2002               
 MINUTE                     Dummy  1985     I(4)            4           scalar   ARG,OUT          2009,2010                         
 MODULO                     Func   1996                                 scalar                    1996                              
 MONTH                      Dummy  1985     I(4)            4           scalar   ARG,OUT          2000                              
 SECOND                     Dummy  1985     I(4)            4           scalar   ARG,OUT          2010                              
 T                          Local  1992     I(4)            4           scalar                    2006,2007,2008,2009,2010          
 TICK                       Dummy  1985     I(4)            4           scalar   ARG,OUT          2011                              
 TIME                       Dummy  1985     TIME_TYPE       16          scalar   ARG,IN           1995,1996,2006,2011               
 YEAR                       Dummy  1985     I(4)            4           scalar   ARG,OUT          1995                              

Page 86          Source Listing                  GET_DATE_NO_LEAP_PRIVATE
2021-06-01 08:54                                 time_manager.F90

   2014 
   2015 !------------------------------------------------------------------------
   2016  subroutine get_date_no_leap(time, year, month, day, hour, minute, second)
   2017 
   2018 ! No need to include tick in argument list because this routine
   2019 ! exists only for interpolator.F90, which does not need it.
   2020 
   2021  type(time_type), intent(in) :: time
   2022  integer, intent(out) :: second, minute, hour, day, month, year
   2023  integer :: tick
   2024 
   2025  call get_date_no_leap_private(time, year, month, day, hour, minute, second, tick)
   2026 
   2027  end subroutine get_date_no_leap


ENTRY POINTS

  Name                                             
                                                   
 time_manager_mod_mp_get_date_no_leap_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  2016     I(4)            4           scalar   ARG,OUT          2025                              
 GET_DATE_NO_LEAP           Subr   2016                                                                                             
 HOUR                       Dummy  2016     I(4)            4           scalar   ARG,OUT          2025                              
 MINUTE                     Dummy  2016     I(4)            4           scalar   ARG,OUT          2025                              
 MONTH                      Dummy  2016     I(4)            4           scalar   ARG,OUT          2025                              
 SECOND                     Dummy  2016     I(4)            4           scalar   ARG,OUT          2025                              
 TICK                       Local  2023     I(4)            4           scalar                    2025                              
 TIME                       Dummy  2016     TIME_TYPE       16          scalar   ARG,IN           2025                              
 YEAR                       Dummy  2016     I(4)            4           scalar   ARG,OUT          2025                              

Page 87          Source Listing                  GET_DATE_NO_LEAP
2021-06-01 08:54                                 time_manager.F90

   2028 !------------------------------------------------------------------------
   2029 
   2030 ! END OF get_date BLOCK
   2031 !========================================================================
   2032 ! START OF set_date BLOCK
   2033 ! <FUNCTION NAME="set_date">
   2034 
   2035 !   <OVERVIEW>
   2036 !      Given an input date in year, month, days, etc., creates a
   2037 !      time_type that represents this time interval from the
   2038 !      internally defined base date.
   2039 !   </OVERVIEW>
   2040 !   <DESCRIPTION>
   2041 !      Given a date, computes the corresponding time given the selected
   2042 !      date time mapping algorithm. Note that it is possible to specify
   2043 !      any number of illegal dates; these should be checked for and generate
   2044 !      errors as appropriate.
   2045 !   </DESCRIPTION>
   2046 !   <TEMPLATE>
   2047 !     1. set_date(year, month, day, hours, minute, second, tick, err_msg)
   2048 !   </TEMPLATE>
   2049 !   <TEMPLATE>
   2050 !     2. set_date_c(time_string, zero_year_warning, err_msg, allow_rounding)
   2051 !      time_string is a character string containing a date formatted
   2052 !      according to CF conventions. e.g. '1980-12-31 23:59:59.9'
   2053 !   </TEMPLATE>
   2054 !   <IN NAME="time"   TYPE="time_type"> A time interval.</IN>
   2055 !   <IN NAME="year"   TYPE="integer"></IN>
   2056 !   <IN NAME="month"  TYPE="integer"></IN>
   2057 !   <IN NAME="day"    TYPE="integer"></IN>
   2058 !   <IN NAME="hour"   TYPE="integer"></IN>
   2059 !   <IN NAME="minute" TYPE="integer"></IN>
   2060 !   <IN NAME="second" TYPE="integer"></IN>
   2061 !   <IN NAME="tick"   TYPE="integer"></IN>
   2062 !   <IN NAME="zero_year_warning"   TYPE="logical">
   2063 !     If the year number is zero, it will be silently changed to one,
   2064 !     unless zero_year_warning=.true., in which case a WARNING message
   2065 !     will also be issued.
   2066 !   </IN>
   2067 !   <IN NAME="allow_rounding"   TYPE="logical, optional" DEFAULT=".true.">
   2068 !     When .true., any fractions of a second will be rounded off to the nearest tick.
   2069 !     When .false., it is a fatal error if the second fraction cannot be exactly
   2070 !     represented by a number of ticks.
   2071 !   </IN>
   2072 !   <OUT NAME="err_msg" TYPE="character, optional" DIM="(scalar)">
   2073 !     When present, and when non-blank, a fatal error condition as been detected.
   2074 !     The string itself is an error message.
   2075 !     It is recommended that, when err_msg is present in the call
   2076 !     to this routine, the next line of code should be something
   2077 !     similar to this:
   2078 !     if(err_msg /= '') call error_mesg('my_routine','additional info: '//trim(err_msg),FATAL)
   2079 !   </OUT>
   2080 !   <OUT NAME="set_date" TYPE="time_type"> A time interval.</OUT>
   2081 
   2082 !> @brief Sets days for different calendar types.
   2083 !! The added optional argument old_method allows user to choose either the new or old version
   2084 !! of set_date_gregorian.  The variable old_method is only useful if the calendar type is Gregorian

Page 88          Source Listing                  SET_DATE_PRIVATE
2021-06-01 08:54                                 time_manager.F90

   2085  function set_date_private(year, month, day, hour, minute, second, tick, Time_out, err_msg, old_method)
   2086 
   2087 ! Given a date, computes the corresponding time given the selected
   2088 ! date time mapping algorithm.  Note that it is possible to specify
   2089 ! any number of illegal dates; these are checked for and generate
   2090 ! errors as appropriate.
   2091 
   2092  logical :: set_date_private
   2093  integer, intent(in) :: year, month, day, hour, minute, second, tick
   2094  type(time_type) :: Time_out
   2095  character(len=*), intent(out) :: err_msg
   2096  logical, intent(in), optional ::old_method !< option to choose betw the new and old ver of get_date_gregorian subroutine.
   2097 !! When .true., call set_date_gregorian_old to retrieve the time%days
   2098 !! from the array date_to_day.  When .false., call set_date_gregorian to
   2099 !! compute the time%days on the fly.
   2100  logical :: old_method_local !< set as .false..  Takes on the value of old_method if old_method is present.
   2101 
   2102  if(.not.module_is_initialized) call time_manager_init
   2103 
   2104  err_msg = ''
   2105 
   2106  select case(calendar_type)
   2107  case(THIRTY_DAY_MONTHS)
   2108    set_date_private = set_date_thirty   (year, month, day, hour, minute, second, tick, Time_out, err_msg)
   2109  case(GREGORIAN)
   2110    old_method_local = .false.
   2111    if( present(old_method) ) old_method_local=old_method
   2112    if( old_method_local ) then
   2113      set_date_private = set_date_gregorian_old(year, month, day, hour, minute, second, tick, Time_out, err_msg)
   2114    else
   2115      set_date_private = set_date_gregorian(year, month, day, hour, minute, second, tick, Time_out, err_msg)
   2116    end if
   2117  case(JULIAN)
   2118    set_date_private = set_date_julian_private   (year, month, day, hour, minute, second, tick, Time_out, err_msg)
   2119  case(NOLEAP)
   2120    set_date_private = set_date_no_leap_private  (year, month, day, hour, minute, second, tick, Time_out, err_msg)
   2121  case (NO_CALENDAR)
   2122    err_msg = 'Cannot produce a date when calendar type is NO_CALENDAR'
   2123    set_date_private = .false.
   2124  case default
   2125    err_msg = 'Invalid calendar type'
   2126    set_date_private = .false.
   2127  end select
   2128 
   2129  end function set_date_private

Page 89          Source Listing                  SET_DATE_PRIVATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                             
                                                   
 time_manager_mod_mp_set_date_private_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  2085     I(4)            4           scalar   ARG,IN           2108,2113,2115,2118,2120          
 ERR_MSG                    Dummy  2085     CHAR                        scalar   ARG,OUT          2104,2108,2113,2115,2118,2120,2122
                                                                                                  ,2125                             
 HOUR                       Dummy  2085     I(4)            4           scalar   ARG,IN           2108,2113,2115,2118,2120          
 MINUTE                     Dummy  2085     I(4)            4           scalar   ARG,IN           2108,2113,2115,2118,2120          
 MONTH                      Dummy  2085     I(4)            4           scalar   ARG,IN           2108,2113,2115,2118,2120          
 OLD_METHOD                 Dummy  2085     L(4)            4           scalar   ARG,IN           2111                              
 OLD_METHOD_LOCAL           Local  2100     L(4)            4           scalar                    2110,2111,2112                    
 PRESENT                    Func   2111                                 scalar                    2111                              
 SECOND                     Dummy  2085     I(4)            4           scalar   ARG,IN           2108,2113,2115,2118,2120          
 SET_DATE_GREGORIAN@0       Local  2115     L(4)            4           scalar                                                      
 SET_DATE_GREGORIAN_OLD@0   Local  2113     L(4)            4           scalar                                                      
 SET_DATE_JULIAN_PRIVATE@0  Local  2118     L(4)            4           scalar                                                      
 SET_DATE_NO_LEAP_PRIVATE@0 Local  2120     L(4)            4           scalar                                                      
 SET_DATE_PRIVATE           Func   2085     L(4)            4           scalar                    2108,2113,2115,2118,2120,2123,2126
                                                                                                  ,2161,2292                        
 SET_DATE_THIRTY@0          Local  2108     L(4)            4           scalar                                                      
 TICK                       Dummy  2085     I(4)            4           scalar   ARG,IN           2108,2113,2115,2118,2120          
 TIME_OUT                   Dummy  2085     TIME_TYPE       16          scalar   ARG,INOUT        2108,2113,2115,2118,2120          
 YEAR                       Dummy  2085     I(4)            4           scalar   ARG,IN           2108,2113,2115,2118,2120          

Page 90          Source Listing                  SET_DATE_PRIVATE
2021-06-01 08:54                                 time_manager.F90

   2130 ! </FUNCTION>
   2131 
   2132 !------------------------------------------------------------------------
   2133 
   2134 !> @brief Calls set_date_private to set days for different calendar types.
   2135 !! The added optional argument old_method allows user to choose either the new or old version
   2136 !! of set_date_gregorian. The variable old_method is only useful if the calendar type is Gregorian
   2137  function set_date_i(year, month, day, hour, minute, second, tick, err_msg, old_method)
   2138  type(time_type) :: set_date_i
   2139  integer, intent(in) :: day, month, year
   2140  integer, intent(in), optional :: second, minute, hour, tick
   2141  logical, intent(in), optional :: old_method !< option to choose betw the new and old ver of get_date_gregorian subroutine.
   2142 !! When .true., call set_date_gregorian_old to retrieve the time%days
   2143 !! from the array date_to_day.  When .false., call set_date_gregorian to
   2144 !! compute the time%days on the fly.
   2145  character(len=*), intent(out), optional :: err_msg
   2146  integer :: osecond, ominute, ohour, otick
   2147  character(len=128) :: err_msg_local
   2148  logical :: old_method_local !< set as .false..  Takes on the value of old_method if old_method is present.
   2149 
   2150  if(.not.module_is_initialized) call time_manager_init
   2151  if(present(err_msg)) err_msg = ''
   2152 
   2153 ! Missing optionals are set to 0
   2154  osecond = 0; if(present(second)) osecond = second
   2155  ominute = 0; if(present(minute)) ominute = minute
   2156  ohour   = 0; if(present(hour))   ohour   = hour
   2157  otick   = 0; if(present(tick))   otick   = tick
   2158 
   2159  old_method_local = .false.
   2160  if( present(old_method) ) old_method_local=old_method
   2161  if(.not.set_date_private(year, month, day, ohour, ominute, osecond, otick, set_date_i, err_msg_local, old_method=old_method
   2161 _local)) then
   2162    if(error_handler('function set_date_i', err_msg_local, err_msg)) return
   2163  end if
   2164 
   2165  end function set_date_i

Page 91          Source Listing                  SET_DATE_I
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                       
                                             
 time_manager_mod_mp_set_date_i_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  2137     I(4)            4           scalar   ARG,IN           2161                              
 ERR_MSG                    Dummy  2137     CHAR                        scalar   ARG,OUT          2151,2162                         
 ERR_MSG_LOCAL              Local  2147     CHAR            128         scalar                    2161,2162                         
 HOUR                       Dummy  2137     I(4)            4           scalar   ARG,IN           2156                              
 MINUTE                     Dummy  2137     I(4)            4           scalar   ARG,IN           2155                              
 MONTH                      Dummy  2137     I(4)            4           scalar   ARG,IN           2161                              
 OHOUR                      Local  2146     I(4)            4           scalar                    2156,2161                         
 OLD_METHOD                 Dummy  2137     L(4)            4           scalar   ARG,IN           2160                              
 OLD_METHOD_LOCAL           Local  2148     L(4)            4           scalar                    2159,2160,2161                    
 OMINUTE                    Local  2146     I(4)            4           scalar                    2155,2161                         
 OSECOND                    Local  2146     I(4)            4           scalar                    2154,2161                         
 OTICK                      Local  2146     I(4)            4           scalar                    2157,2161                         
 PRESENT                    Func   2151                                 scalar                    2151,2154,2155,2156,2157,2160     
 SECOND                     Dummy  2137     I(4)            4           scalar   ARG,IN           2154                              
 SET_DATE_I                 Func   2137     RECORD          16          scalar   PRIV             2161,3206                         
 TICK                       Dummy  2137     I(4)            4           scalar   ARG,IN           2157                              
 YEAR                       Dummy  2137     I(4)            4           scalar   ARG,IN           2161                              

Page 92          Source Listing                  SET_DATE_I
2021-06-01 08:54                                 time_manager.F90

   2166 !------------------------------------------------------------------------
   2167 
   2168 !> @brief Calls set_date_private for different calendar types when given a string input.
   2169 !! The added optional argument old_method allows user to choose either the new or old version
   2170 !! of set_date_gregorian. The variable old_method is only useful if the calendar type is Gregorian
   2171  function set_date_c(string, zero_year_warning, err_msg, allow_rounding, old_method)
   2172 
   2173 ! Examples of acceptable forms of string:
   2174 
   2175 ! 1980-01-01 00:00:00
   2176 ! 1980-01-01 00:00:00.50
   2177 ! 1980-1-1 0:0:0
   2178 ! 1980-1-1
   2179 
   2180 ! year number must occupy 4 spaces.
   2181 ! months, days, hours, minutes, seconds may occupy 1 or 2 spaces
   2182 ! year, month and day must be separated by a '-'
   2183 ! hour, minute, second must be separated by a ':'
   2184 ! hour, minute, second are optional. If not present then zero is assumed.
   2185 ! second may be a real number.
   2186 
   2187 ! zero_year_warning:
   2188 ! If the year number is zero, it will be silently changed to one,
   2189 ! unless zero_year_warning=.true., in which case a WARNING message
   2190 ! will also be issued
   2191 
   2192  type(time_type) :: set_date_c
   2193  character(len=*), intent(in) :: string
   2194  logical,          intent(in),  optional :: zero_year_warning
   2195  character(len=*), intent(out), optional :: err_msg
   2196  logical,          intent(in),  optional :: allow_rounding
   2197  logical,          intent(in),  optional :: old_method  !< option to choose betw the new and old ver of set_date_gregorian.
   2198 !! When .true., call set_date_gregorian_old to retrieve the days
   2199 !! from the array date_to_day.  When .false., call set_date_gregorian to
   2200 !! compute the days on the fly.
   2201  character(len=4) :: formt='(i )'
   2202  logical :: correct_form, zero_year_warning_local, allow_rounding_local
   2203  logical :: old_method_local !< set as .false..  Takes on the value of old_method if old_method is present.
   2204  integer :: i1, i2, i3, i4, i5, i6, i7
   2205  character(len=32) :: string_sifted_left
   2206  integer :: year, month, day, hour, minute, second, tick
   2207  character(len=128) :: err_msg_local
   2208 
   2209  if(.not.module_is_initialized) call time_manager_init()
   2210  if(present(err_msg)) err_msg = ''
   2211  if(present(zero_year_warning)) then
   2212    zero_year_warning_local = zero_year_warning
   2213  else
   2214    zero_year_warning_local = .true.
   2215  endif
   2216  if(present(allow_rounding)) then
   2217    allow_rounding_local = allow_rounding
   2218  else
   2219    allow_rounding_local = .true.
   2220  endif
   2221 
   2222  string_sifted_left = adjustl(string)

Page 93          Source Listing                  SET_DATE_C
2021-06-01 08:54                                 time_manager.F90

   2223  i1 = index(string_sifted_left,'-')
   2224  i2 = index(string_sifted_left,'-',back=.true.)
   2225  i3 = index(string_sifted_left,':')
   2226  i4 = index(string_sifted_left,':',back=.true.)
   2227  i5 = len_trim(cut0(string_sifted_left))
   2228  i6 = index(string_sifted_left,'.',back=.true.)
   2229  correct_form = (i1 > 1) ! year number must occupy at least 1 space
   2230  correct_form = correct_form .and. (i2-i1 == 2 .or. i2-i1 == 3) ! month number must occupy 1 or 2 spaces
   2231  if(.not.correct_form) then
   2232    err_msg_local = 'Form of character time stamp is incorrect. The character time stamp is: '//trim(string)
   2233    if(error_handler('function set_date_c', err_msg_local, err_msg)) return
   2234  endif
   2235  write(formt(3:3),'(i1)') i1-1
   2236  read(string_sifted_left(1:i1-1),formt) year
   2237  if(year == 0) then
   2238    year = 1
   2239    if(zero_year_warning_local) then
   2240      call error_mesg('set_date_c','Year zero is invalid. Resetting year to 1', WARNING)
   2241    endif
   2242  endif
   2243  write(formt(3:3),'(i1)') i2-i1-1
   2244  read(string_sifted_left(i1+1:i2-1),formt) month
   2245  i7 = min(i2+2,i5)
   2246  read(string_sifted_left(i2+1:i7),'(i2)') day
   2247 
   2248  if(i3 == 0) then
   2249 ! There are no minutes or seconds in the string
   2250    minute = 0
   2251    second = 0
   2252    tick   = 0
   2253    if(i5 <= i2+2) then
   2254 !   There is no clocktime in the string at all
   2255      hour = 0
   2256    else
   2257 !   The clocktime includes only hours
   2258      read(string_sifted_left(i5-1:i5),'(i2)') hour
   2259    endif
   2260  else if(i3 == i4) then
   2261 ! The string includes hours and minutes, but no seconds
   2262    read(string_sifted_left(i3-2:i3-1),'(i2)') hour
   2263    write(formt(3:3),'(i1)') i5-i3
   2264    read(string_sifted_left(i3+1:i5),formt) minute
   2265    second = 0
   2266    tick = 0
   2267  else
   2268 ! The string includes hours, minutes, and seconds
   2269    read(string_sifted_left(i3-2:i3-1),'(i2)') hour
   2270    write(formt(3:3),'(i1)') i4-i3-1
   2271    read(string_sifted_left(i3+1:i4-1),formt) minute
   2272    write(formt(3:3),'(i1)') i5-i4
   2273    if(i6 == 0) then
   2274 ! There are no fractional seconds
   2275      read(string_sifted_left(i4+1:i5),formt) second
   2276      tick = 0
   2277    else
   2278      read(string_sifted_left(i4+1:i6-1),formt) second
   2279      if(.not.get_tick_from_string(string_sifted_left(i6:i5), err_msg_local, allow_rounding_local, tick)) then

Page 94          Source Listing                  SET_DATE_C
2021-06-01 08:54                                 time_manager.F90

   2280        if(error_handler('function set_date_c', err_msg_local, err_msg)) return
   2281      endif
   2282 !   If tick has been rounded up to ticks_per_second, then bump up second.
   2283      if(tick == ticks_per_second) then
   2284        second = second + 1
   2285        tick = 0
   2286      endif
   2287    endif
   2288  endif
   2289 
   2290  old_method_local = .false.
   2291  if( present(old_method) ) old_method_local = old_method
   2292  if(.not.set_date_private(year, month, day, hour, minute, second, tick, set_date_c, err_msg_local,old_method=old_method_loca
   2292 l)) then
   2293    if(error_handler('function set_date_c', err_msg_local, err_msg)) return
   2294  end if
   2295 
   2296  end function set_date_c


ENTRY POINTS

  Name                                       
                                             
 time_manager_mod_mp_set_date_c_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ADJUSTL                    Func   2222                                 scalar                    2222                              
 ALLOW_ROUNDING             Dummy  2171     L(4)            4           scalar   ARG,IN           2216,2217                         
 ALLOW_ROUNDING_LOCAL       Local  2202     L(4)            4           scalar                    2217,2219,2279                    
 CORRECT_FORM               Local  2202     L(4)            4           scalar                    2229,2230,2231                    
 DAY                        Local  2206     I(4)            4           scalar                    2246,2292                         
 ERR_MSG                    Dummy  2171     CHAR                        scalar   ARG,OUT          2210,2233,2280,2293               
 ERR_MSG_LOCAL              Local  2207     CHAR            128         scalar                    2232,2233,2279,2280,2292,2293     
 FORMT                      Local  2201     CHAR            4           scalar                    2201,2235,2236,2243,2244,2263,2264
                                                                                                  ,2270,2271,2272,2275,2278         
 HOUR                       Local  2206     I(4)            4           scalar                    2255,2258,2262,2269,2292          
 I1                         Local  2204     I(4)            4           scalar                    2223,2229,2230,2235,2236,2243,2244
 I2                         Local  2204     I(4)            4           scalar                    2224,2230,2243,2244,2245,2246,2253
 I3                         Local  2204     I(4)            4           scalar                    2225,2248,2260,2262,2263,2264,2269
                                                                                                  ,2270,2271                        
 I4                         Local  2204     I(4)            4           scalar                    2226,2260,2270,2271,2272,2275,2278
 I5                         Local  2204     I(4)            4           scalar                    2227,2245,2253,2258,2263,2264,2272
                                                                                                  ,2275,2279                        
 I6                         Local  2204     I(4)            4           scalar                    2228,2273,2278,2279               
 I7                         Local  2204     I(4)            4           scalar                    2245,2246                         
 INDEX                      Func   2223                                 scalar                    2223,2224,2225,2226,2228          
 LEN_TRIM                   Func   2227                                 scalar                    2227                              
 MIN                        Func   2245                                 scalar                    2245                              
 MINUTE                     Local  2206     I(4)            4           scalar                    2250,2264,2271,2292               
 MONTH                      Local  2206     I(4)            4           scalar                    2244,2292                         
 OLD_METHOD                 Dummy  2171     L(4)            4           scalar   ARG,IN           2291                              
 OLD_METHOD_LOCAL           Local  2203     L(4)            4           scalar                    2290,2291,2292                    

Page 95          Source Listing                  SET_DATE_C
2021-06-01 08:54 Symbol Table                    time_manager.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 PRESENT                    Func   2210                                 scalar                    2210,2211,2216,2291               
 SECOND                     Local  2206     I(4)            4           scalar                    2251,2265,2275,2278,2284,2292     
 SET_DATE_C                 Func   2171     RECORD          16          scalar   PRIV             2292                              
 STRING                     Dummy  2171     CHAR                        scalar   ARG,IN           2222,2232                         
 STRING_SIFTED_LEFT         Local  2205     CHAR            32          scalar                    2222,2223,2224,2225,2226,2227,2228
                                                                                                  ,2236,2244,2246,2258,2262,2264,226
                                                                                                  9,2271,2275,2278,2279             
 TICK                       Local  2206     I(4)            4           scalar                    2252,2266,2276,2279,2283,2285,2292
 TRIM                       Func   2232                                 scalar                    2232                              
 WARNING                    Param  2240     I(4)            4           scalar   PRIV             95,2240                           
 YEAR                       Local  2206     I(4)            4           scalar                    2236,2237,2238,2292               
 ZERO_YEAR_WARNING          Dummy  2171     L(4)            4           scalar   ARG,IN           2211,2212                         
 ZERO_YEAR_WARNING_LOCAL    Local  2202     L(4)            4           scalar                    2212,2214,2239                    

Page 96          Source Listing                  SET_DATE_C
2021-06-01 08:54                                 time_manager.F90

   2297 
   2298 !------------------------------------------------------------------------
   2299 
   2300 !> @brief Sets Time_out%days on a Gregorian calendar
   2301 !! Computes the total number of days between 1/1/0001 to the current month/day/year
   2302  function set_date_gregorian(year, month, day, hour, minute, second, tick, Time_out, err_msg)
   2303  logical :: set_date_gregorian
   2304 
   2305 ! Computes time corresponding to date for gregorian calendar.
   2306 
   2307  integer,          intent(in)  :: year, month, day, hour, minute, second, tick
   2308  type(time_type),  intent(out) :: Time_out
   2309  character(len=*), intent(out) :: err_msg
   2310  integer :: yearx, monthx, dayx, hrx, minx, secx, tickx, ncenturies, nlpyrs, l
   2311 
   2312  if( .not.valid_increments(year,month,day,hour,minute,second,tick,err_msg) ) then
   2313    set_date_gregorian = .false.
   2314    return
   2315  endif
   2316 
   2317  l = 0 ; if( leap_year_gregorian_int(year) ) l = 1
   2318 
   2319 ! Check if date is invalid
   2320  if(month.eq.2) then
   2321    if(day.gt.days_per_month(month)+l .or. day.lt.1) then
   2322      err_msg = 'Invalid_date. Date='//convert_integer_date_to_char(year,month,day,hour,minute,second)
   2323      set_date_gregorian = .false.
   2324      return
   2325    end if
   2326  else
   2327    if(day.gt.days_per_month(month) .or. day.lt.1) then
   2328      err_msg = 'Invalid_date. Date='//convert_integer_date_to_char(year,month,day,hour,minute,second)
   2329      set_date_gregorian = .false.
   2330      return
   2331    end if
   2332  end if
   2333 
   2334  Time_out%seconds = second + 60*(minute + 60*hour)
   2335 
   2336  yearx = mod(year-1,400)
   2337  dayx  = 0
   2338  if(yearx.gt.0) then
   2339    ncenturies = int( yearx/100 )
   2340    nlpyrs     = int( (yearx-ncenturies*100)/4 )
   2341    dayx       = ncenturies*36524 + (yearx-ncenturies*100)*365 + nlpyrs ! 36524 days in 100 years, year 100 not leap year
   2342    if(ncenturies.eq.4) dayx = dayx + 1 ! year 400 is a leap year
   2343  end if
   2344 
   2345  select case( month )
   2346  case(1)  ; dayx = dayx
   2347  case(2)  ; dayx = dayx + 31
   2348  case(3)  ; dayx = dayx + 59 + l
   2349  case(4)  ; dayx = dayx + 90 + l
   2350  case(5)  ; dayx = dayx + 120 + l
   2351  case(6)  ; dayx = dayx + 151 + l
   2352  case(7)  ; dayx = dayx + 181 + l
   2353  case(8)  ; dayx = dayx + 212 + l

Page 97          Source Listing                  SET_DATE_GREGORIAN
2021-06-01 08:54                                 time_manager.F90

   2354  case(9)  ; dayx = dayx + 243 + l
   2355  case(10) ; dayx = dayx + 273 + l
   2356  case(11) ; dayx = dayx + 304 + l
   2357  case(12) ; dayx = dayx + 334 + l
   2358  end select
   2359 
   2360  dayx = int((year-1)/400)*days_in_400_year_period + dayx + day - 1
   2361  Time_out%days  = dayx
   2362  Time_out%ticks = tick
   2363 
   2364  err_msg = ''
   2365  set_date_gregorian = .true.
   2366 
   2367 ! check
   2368  yearx = year ; monthx = month ; dayx = day
   2369  hrx = hour ; minx = minute ; secx = second ; tickx = tick
   2370  call get_date_gregorian(Time_out, yearx, monthx, dayx, hrx, minx, secx, tickx)
   2371  l = 0 ; if( leap_year_gregorian_int(yearx) ) l = 1
   2372  if( monthx.lt.1 .or. monthx.gt.12 ) then
   2373    err_msg = 'Invalid_date. Date='//convert_integer_date_to_char(yearx,monthx,dayx,hour,minute,second)
   2374    set_date_gregorian = .false.
   2375  else if( dayx.lt.1 .or. dayx.gt.days_per_month(monthx) ) then
   2376    if( monthx.eq.2 .and. dayx.le.days_per_month(monthx)+l ) return
   2377    err_msg = 'Invalid_date. Date='//convert_integer_date_to_char(yearx,monthx,dayx,hour,minute,second)
   2378    set_date_gregorian = .false.
   2379  end if
   2380 
   2381  end function set_date_gregorian

Page 98          Source Listing                  SET_DATE_GREGORIAN
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                               
                                                     
 time_manager_mod_mp_set_date_gregorian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONVERT_INTEGER_DATE_TO_CH                                                                                                         
 AR@0                       Local  2322     CHAR            19          scalar                                                      
 DAY                        Dummy  2302     I(4)            4           scalar   ARG,IN           2312,2321,2322,2327,2328,2360,2368
 DAYX                       Local  2310     I(4)            4           scalar                    2337,2341,2342,2346,2347,2348,2349
                                                                                                  ,2350,2351,2352,2353,2354,2355,235
                                                                                                  6,2357,2360,2361,2368,2370,2373,23
                                                                                                  75,2376,2377                      
 ERR_MSG                    Dummy  2302     CHAR                        scalar   ARG,OUT          2312,2322,2328,2364,2373,2377     
 HOUR                       Dummy  2302     I(4)            4           scalar   ARG,IN           2312,2322,2328,2334,2369,2373,2377
 HRX                        Local  2310     I(4)            4           scalar                    2369,2370                         
 INT                        Func   2339                                 scalar                    2339,2340,2360                    
 L                          Local  2310     I(4)            4           scalar                    2317,2321,2348,2349,2350,2351,2352
                                                                                                  ,2353,2354,2355,2356,2357,2371,237
                                                                                                  6                                 
 MINUTE                     Dummy  2302     I(4)            4           scalar   ARG,IN           2312,2322,2328,2334,2369,2373,2377
 MINX                       Local  2310     I(4)            4           scalar                    2369,2370                         
 MOD                        Func   2336                                 scalar                    2336                              
 MONTH                      Dummy  2302     I(4)            4           scalar   ARG,IN           2312,2320,2321,2322,2327,2328,2345
                                                                                                  ,2368                             
 MONTHX                     Local  2310     I(4)            4           scalar                    2368,2370,2372,2373,2375,2376,2377
 NCENTURIES                 Local  2310     I(4)            4           scalar                    2339,2340,2341,2342               
 NLPYRS                     Local  2310     I(4)            4           scalar                    2340,2341                         
 SECOND                     Dummy  2302     I(4)            4           scalar   ARG,IN           2312,2322,2328,2334,2369,2373,2377
 SECX                       Local  2310     I(4)            4           scalar                    2369,2370                         
 SET_DATE_GREGORIAN         Func   2302     L(4)            4           scalar                    2115,2313,2323,2329,2365,2374,2378
                                                                                                  ,2794                             
 TICK                       Dummy  2302     I(4)            4           scalar   ARG,IN           2312,2362,2369                    
 TICKX                      Local  2310     I(4)            4           scalar                    2369,2370                         
 TIME_OUT                   Dummy  2302     TIME_TYPE       16          scalar   ARG,OUT          2334,2361,2362,2370               
 VALID_INCREMENTS@0         Local  2312     L(4)            4           scalar                                                      
 YEAR                       Dummy  2302     I(4)            4           scalar   ARG,IN           2312,2317,2322,2328,2336,2360,2368
 YEARX                      Local  2310     I(4)            4           scalar                    2336,2338,2339,2340,2341,2368,2370
                                                                                                  ,2371,2373,2377                   

Page 99          Source Listing                  SET_DATE_GREGORIAN
2021-06-01 08:54                                 time_manager.F90

   2382 
   2383 !------------------------------------------------------------------------
   2384 
   2385 !> @brief Sets Time_out%days on a Gregorian calendar.  This is the original/old subroutine.
   2386 !! Look up the total number of days between 1/1/0001 to the current month/day/year in the array date_to_day
   2387 !! This function is kept in order to test the new set_date_gregorian
   2388  function set_date_gregorian_old(year, month, day, hour, minute, second, tick, Time_out, err_msg)
   2389  logical :: set_date_gregorian_old
   2390 
   2391 ! Computes time corresponding to date for gregorian calendar.
   2392 
   2393  integer,          intent(in)  :: year, month, day, hour, minute, second, tick
   2394  type(time_type),  intent(out) :: Time_out
   2395  character(len=*), intent(out) :: err_msg
   2396  integer :: yr1, day1
   2397 
   2398  if( .not.valid_increments(year,month,day,hour,minute,second,tick,err_msg) ) then
   2399    set_date_gregorian_old = .false.
   2400    return
   2401  endif
   2402 
   2403  Time_out%seconds = second + 60*(minute + 60*hour)
   2404 
   2405  yr1 = mod(year,400)
   2406  if(yr1 == 0) yr1 = 400
   2407  day1 = date_to_day(yr1,month,day)
   2408   if(day1 == invalid_date) then
   2409    err_msg = 'Invalid_date. Date='//convert_integer_date_to_char(year,month,day,hour,minute,second)
   2410    set_date_gregorian_old = .false.
   2411    return
   2412  endif
   2413 
   2414  Time_out%days = day1 + days_in_400_year_period*((year-1)/400)
   2415  Time_out%ticks = tick
   2416  err_msg = ''
   2417  set_date_gregorian_old = .true.
   2418 
   2419  end function set_date_gregorian_old

Page 100         Source Listing                  SET_DATE_GREGORIAN_OLD
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                                   
                                                         
 time_manager_mod_mp_set_date_gregorian_old_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  2388     I(4)            4           scalar   ARG,IN           2398,2407,2409                    
 DAY1                       Local  2396     I(4)            4           scalar                    2407,2408,2414                    
 ERR_MSG                    Dummy  2388     CHAR                        scalar   ARG,OUT          2398,2409,2416                    
 HOUR                       Dummy  2388     I(4)            4           scalar   ARG,IN           2398,2403,2409                    
 MINUTE                     Dummy  2388     I(4)            4           scalar   ARG,IN           2398,2403,2409                    
 MOD                        Func   2405                                 scalar                    2405                              
 MONTH                      Dummy  2388     I(4)            4           scalar   ARG,IN           2398,2407,2409                    
 SECOND                     Dummy  2388     I(4)            4           scalar   ARG,IN           2398,2403,2409                    
 SET_DATE_GREGORIAN_OLD     Func   2388     L(4)            4           scalar                    2113,2399,2410,2417               
 TICK                       Dummy  2388     I(4)            4           scalar   ARG,IN           2398,2415                         
 TIME_OUT                   Dummy  2388     TIME_TYPE       16          scalar   ARG,OUT          2403,2414,2415                    
 YEAR                       Dummy  2388     I(4)            4           scalar   ARG,IN           2398,2405,2409,2414               
 YR1                        Local  2396     I(4)            4           scalar                    2405,2406,2407                    

Page 101         Source Listing                  SET_DATE_GREGORIAN_OLD
2021-06-01 08:54                                 time_manager.F90

   2420 
   2421 !------------------------------------------------------------------------
   2422  function set_date_julian_private(year, month, day, hour, minute, second, tick, Time_out, err_msg)
   2423  logical :: set_date_julian_private
   2424 
   2425 ! Returns time corresponding to date for julian calendar.
   2426 
   2427  integer,          intent(in)  :: year, month, day, hour, minute, second, tick
   2428  type(time_type),  intent(out) :: Time_out
   2429  character(len=*), intent(out) :: err_msg
   2430  integer :: ndays, m, nleapyr
   2431  logical :: leap
   2432 
   2433  if( .not.valid_increments(year,month,day,hour,minute,second,tick,err_msg) ) then
   2434    set_date_julian_private = .false.
   2435    return
   2436  endif
   2437 
   2438  if(month /= 2 .and. day > days_per_month(month)) then
   2439    err_msg = 'Invalid date. Date='//convert_integer_date_to_char(year,month,day,hour,minute,second)
   2440    set_date_julian_private = .false.
   2441    return
   2442  endif
   2443 
   2444 ! Is this a leap year?
   2445  leap = (modulo(year,4) == 0)
   2446 ! compute number of complete leap years from year 1
   2447  nleapyr = (year - 1) / 4
   2448 
   2449 ! Finish checking for day specication errors
   2450  if(month == 2 .and. (day > 29 .or. ((.not. leap) .and. day > 28))) then
   2451    err_msg = 'Invalid date. Date='//convert_integer_date_to_char(year,month,day,hour,minute,second)
   2452    set_date_julian_private = .false.
   2453    return
   2454  endif
   2455 
   2456  ndays = 0
   2457  do m = 1, month - 1
   2458    ndays = ndays + days_per_month(m)
   2459    if(leap .and. m == 2) ndays = ndays + 1
   2460  enddo
   2461 
   2462  Time_out%seconds = second + 60 * (minute + 60 * hour)
   2463  Time_out%days    = day -1 + ndays + 365*(year - nleapyr - 1) + 366*(nleapyr)
   2464  Time_out%ticks   = tick
   2465  err_msg = ''
   2466  set_date_julian_private = .true.
   2467 
   2468  end function set_date_julian_private

Page 102         Source Listing                  SET_DATE_JULIAN_PRIVATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                                    
                                                          
 time_manager_mod_mp_set_date_julian_private_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  2422     I(4)            4           scalar   ARG,IN           2433,2438,2439,2450,2451,2463     
 ERR_MSG                    Dummy  2422     CHAR                        scalar   ARG,OUT          2433,2439,2451,2465               
 HOUR                       Dummy  2422     I(4)            4           scalar   ARG,IN           2433,2439,2451,2462               
 LEAP                       Local  2431     L(4)            4           scalar                    2445,2450,2459                    
 M                          Local  2430     I(4)            4           scalar                    2457,2458,2459                    
 MINUTE                     Dummy  2422     I(4)            4           scalar   ARG,IN           2433,2439,2451,2462               
 MODULO                     Func   2445                                 scalar                    2445                              
 MONTH                      Dummy  2422     I(4)            4           scalar   ARG,IN           2433,2438,2439,2450,2451,2457     
 NDAYS                      Local  2430     I(4)            4           scalar                    2456,2458,2459,2463               
 NLEAPYR                    Local  2430     I(4)            4           scalar                    2447,2463                         
 SECOND                     Dummy  2422     I(4)            4           scalar   ARG,IN           2433,2439,2451,2462               
 SET_DATE_JULIAN_PRIVATE    Func   2422     L(4)            4           scalar                    2118,2434,2440,2452,2466,2480,2792
 TICK                       Dummy  2422     I(4)            4           scalar   ARG,IN           2433,2464                         
 TIME_OUT                   Dummy  2422     TIME_TYPE       16          scalar   ARG,OUT          2462,2463,2464                    
 YEAR                       Dummy  2422     I(4)            4           scalar   ARG,IN           2433,2439,2445,2447,2451,2463     

Page 103         Source Listing                  SET_DATE_JULIAN_PRIVATE
2021-06-01 08:54                                 time_manager.F90

   2469 
   2470 !------------------------------------------------------------------------
   2471  function set_date_julian(year, month, day, hour, minute, second)
   2472 
   2473 ! No need to include tick or err_msg in argument list because this
   2474 ! routine exists only for interpolator.F90, which does not need them.
   2475 
   2476  type(time_type) :: set_date_julian
   2477  integer, intent(in) :: year, month, day, hour, minute, second
   2478  character(len=128) :: err_msg
   2479 
   2480  if(.not.set_date_julian_private(year, month, day, hour, minute, second, 0, set_date_julian, err_msg)) then
   2481    call error_mesg('set_date_julian',trim(err_msg),FATAL)
   2482  endif
   2483 
   2484  end function set_date_julian


ENTRY POINTS

  Name                                            
                                                  
 time_manager_mod_mp_set_date_julian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  2471     I(4)            4           scalar   ARG,IN           2480                              
 ERR_MSG                    Local  2478     CHAR            128         scalar                    2480,2481                         
 HOUR                       Dummy  2471     I(4)            4           scalar   ARG,IN           2480                              
 MINUTE                     Dummy  2471     I(4)            4           scalar   ARG,IN           2480                              
 MONTH                      Dummy  2471     I(4)            4           scalar   ARG,IN           2480                              
 SECOND                     Dummy  2471     I(4)            4           scalar   ARG,IN           2480                              
 SET_DATE_JULIAN            Func   2471     TIME_TYPE       16          scalar                                                      
 TRIM                       Func   2481                                 scalar                    2481                              
 YEAR                       Dummy  2471     I(4)            4           scalar   ARG,IN           2480                              

Page 104         Source Listing                  SET_DATE_JULIAN
2021-06-01 08:54                                 time_manager.F90

   2485 !------------------------------------------------------------------------
   2486 
   2487  function set_date_thirty(year, month, day, hour, minute, second, tick, Time_out, err_msg)
   2488  logical :: set_date_thirty
   2489 
   2490 ! Computes time corresponding to date for thirty day months.
   2491 
   2492  integer,          intent(in)  :: year, month, day, hour, minute, second, tick
   2493  type(time_type),  intent(out) :: Time_out
   2494  character(len=*), intent(out) :: err_msg
   2495 
   2496  if( .not.valid_increments(year,month,day,hour,minute,second,tick,err_msg) ) then
   2497    set_date_thirty = .false.
   2498    return
   2499  endif
   2500 
   2501  if(day > 30) then
   2502    err_msg = 'Invalid date. Date='//convert_integer_date_to_char(year,month,day,hour,minute,second)
   2503    set_date_thirty = .false.
   2504    return
   2505  endif
   2506 
   2507  Time_out%days    = (day - 1) + 30 * ((month - 1) + 12 * (year - 1))
   2508  Time_out%seconds = second + 60 * (minute + 60 * hour)
   2509  Time_out%ticks   = tick
   2510  err_msg = ''
   2511  set_date_thirty = .true.
   2512 
   2513  end function set_date_thirty

Page 105         Source Listing                  SET_DATE_THIRTY
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                            
                                                  
 time_manager_mod_mp_set_date_thirty_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  2487     I(4)            4           scalar   ARG,IN           2496,2501,2502,2507               
 ERR_MSG                    Dummy  2487     CHAR                        scalar   ARG,OUT          2496,2502,2510                    
 HOUR                       Dummy  2487     I(4)            4           scalar   ARG,IN           2496,2502,2508                    
 MINUTE                     Dummy  2487     I(4)            4           scalar   ARG,IN           2496,2502,2508                    
 MONTH                      Dummy  2487     I(4)            4           scalar   ARG,IN           2496,2502,2507                    
 SECOND                     Dummy  2487     I(4)            4           scalar   ARG,IN           2496,2502,2508                    
 SET_DATE_THIRTY            Func   2487     L(4)            4           scalar                    2108,2497,2503,2511,2788          
 TICK                       Dummy  2487     I(4)            4           scalar   ARG,IN           2496,2509                         
 TIME_OUT                   Dummy  2487     TIME_TYPE       16          scalar   ARG,OUT          2507,2508,2509                    
 YEAR                       Dummy  2487     I(4)            4           scalar   ARG,IN           2496,2502,2507                    

Page 106         Source Listing                  SET_DATE_THIRTY
2021-06-01 08:54                                 time_manager.F90

   2514 
   2515 !------------------------------------------------------------------------
   2516 
   2517  function set_date_no_leap_private(year, month, day, hour, minute, second, tick, Time_out, err_msg)
   2518  logical :: set_date_no_leap_private
   2519 
   2520 ! Computes time corresponding to date for fixed 365 day year calendar.
   2521 
   2522  integer,          intent(in)  :: year, month, day, hour, minute, second, tick
   2523  type(time_type),  intent(out) :: Time_out
   2524  character(len=*), intent(out) :: err_msg
   2525  integer :: ndays, m
   2526 
   2527  if( .not.valid_increments(year,month,day,hour,minute,second,tick,err_msg) ) then
   2528    set_date_no_leap_private = .false.
   2529    return
   2530  endif
   2531 
   2532  if(day > days_per_month(month)) then
   2533    err_msg = 'Invalid date. Date='//convert_integer_date_to_char(year,month,day,hour,minute,second)
   2534    set_date_no_leap_private = .false.
   2535    return
   2536  endif
   2537 
   2538  ndays = 0
   2539  do m = 1, month - 1
   2540    ndays = ndays + days_per_month(m)
   2541  enddo
   2542 
   2543 ! No need for err_msg in call to set_time because previous checks ensure positive value of time.
   2544  Time_out = set_time(second + 60 * (minute + 60 * hour), day -1 + ndays + 365 * (year - 1), tick)
   2545  err_msg = ''
   2546  set_date_no_leap_private = .true.
   2547 
   2548  end function set_date_no_leap_private

Page 107         Source Listing                  SET_DATE_NO_LEAP_PRIVATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                                     
                                                           
 time_manager_mod_mp_set_date_no_leap_private_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  2517     I(4)            4           scalar   ARG,IN           2527,2532,2533,2544               
 ERR_MSG                    Dummy  2517     CHAR                        scalar   ARG,OUT          2527,2533,2545                    
 HOUR                       Dummy  2517     I(4)            4           scalar   ARG,IN           2527,2533,2544                    
 M                          Local  2525     I(4)            4           scalar                    2539,2540                         
 MINUTE                     Dummy  2517     I(4)            4           scalar   ARG,IN           2527,2533,2544                    
 MONTH                      Dummy  2517     I(4)            4           scalar   ARG,IN           2527,2532,2533,2539               
 NDAYS                      Local  2525     I(4)            4           scalar                    2538,2540,2544                    
 SECOND                     Dummy  2517     I(4)            4           scalar   ARG,IN           2527,2533,2544                    
 SET_DATE_NO_LEAP_PRIVATE   Func   2517     L(4)            4           scalar                    2120,2528,2534,2546,2560,2790     
 TICK                       Dummy  2517     I(4)            4           scalar   ARG,IN           2527,2544                         
 TIME_OUT                   Dummy  2517     TIME_TYPE       16          scalar   ARG,OUT          2544                              
 YEAR                       Dummy  2517     I(4)            4           scalar   ARG,IN           2527,2533,2544                    

Page 108         Source Listing                  SET_DATE_NO_LEAP_PRIVATE
2021-06-01 08:54                                 time_manager.F90

   2549 !------------------------------------------------------------------------
   2550 
   2551  function set_date_no_leap(year, month, day, hour, minute, second)
   2552 
   2553 ! No need to include tick or err_msg in argument list because this
   2554 ! routine exists only for interpolator.F90, which does not need them.
   2555 
   2556  type(time_type) :: set_date_no_leap
   2557  integer, intent(in) :: year, month, day, hour, minute, second
   2558  character(len=128) :: err_msg
   2559 
   2560  if(.not.set_date_no_leap_private(year, month, day, hour, minute, second, 0, set_date_no_leap, err_msg)) then
   2561    call error_mesg('set_date_no_leap',trim(err_msg),FATAL)
   2562  endif
   2563 
   2564  end function set_date_no_leap


ENTRY POINTS

  Name                                             
                                                   
 time_manager_mod_mp_set_date_no_leap_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  2551     I(4)            4           scalar   ARG,IN           2560                              
 ERR_MSG                    Local  2558     CHAR            128         scalar                    2560,2561                         
 HOUR                       Dummy  2551     I(4)            4           scalar   ARG,IN           2560                              
 MINUTE                     Dummy  2551     I(4)            4           scalar   ARG,IN           2560                              
 MONTH                      Dummy  2551     I(4)            4           scalar   ARG,IN           2560                              
 SECOND                     Dummy  2551     I(4)            4           scalar   ARG,IN           2560                              
 SET_DATE_NO_LEAP           Func   2551     TIME_TYPE       16          scalar                                                      
 TRIM                       Func   2561                                 scalar                    2561                              
 YEAR                       Dummy  2551     I(4)            4           scalar   ARG,IN           2560                              

Page 109         Source Listing                  SET_DATE_NO_LEAP
2021-06-01 08:54                                 time_manager.F90

   2565 
   2566 !=========================================================================
   2567 
   2568  function valid_increments(year, month, day, hour, minute, second, tick, err_msg)
   2569  logical :: valid_increments
   2570  integer, intent(in) :: year, month, day, hour, minute, second, tick
   2571  character(len=128), intent(out) :: err_msg
   2572 
   2573 !  Check for invalid values
   2574 
   2575  err_msg = ''
   2576  valid_increments = .true.
   2577  if(second > 59 .or. second < 0 .or. minute > 59 .or. minute < 0 &
   2578    .or. hour > 23 .or. hour < 0 .or. day > 31 .or. day < 1 &
   2579    .or. month > 12 .or. month < 1 .or. year < 1) then
   2580      err_msg = 'Invalid date. Date='//convert_integer_date_to_char(year,month,day,hour,minute,second)
   2581      valid_increments = .false.
   2582      return
   2583  endif
   2584  if(tick < 0 .or. tick >= ticks_per_second) then
   2585    write(err_msg,'(a,i6)') 'Invalid number of ticks. tick=',tick
   2586    valid_increments = .false.
   2587  endif
   2588 
   2589  end function valid_increments


ENTRY POINTS

  Name                                             
                                                   
 time_manager_mod_mp_valid_increments_             

Page 110         Source Listing                  VALID_INCREMENTS
2021-06-01 08:54 Symbol Table                    time_manager.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Dummy  2568     I(4)            4           scalar   ARG,IN           2578,2580                         
 ERR_MSG                    Dummy  2568     CHAR            128         scalar   ARG,OUT          2575,2580,2585                    
 HOUR                       Dummy  2568     I(4)            4           scalar   ARG,IN           2578,2580                         
 MINUTE                     Dummy  2568     I(4)            4           scalar   ARG,IN           2577,2580                         
 MONTH                      Dummy  2568     I(4)            4           scalar   ARG,IN           2579,2580                         
 SECOND                     Dummy  2568     I(4)            4           scalar   ARG,IN           2577,2580                         
 TICK                       Dummy  2568     I(4)            4           scalar   ARG,IN           2584,2585                         
 VALID_INCREMENTS           Func   2568     L(4)            4           scalar                    2312,2398,2433,2496,2527,2576,2581
                                                                                                  ,2586                             
 YEAR                       Dummy  2568     I(4)            4           scalar   ARG,IN           2579,2580                         

Page 111         Source Listing                  VALID_INCREMENTS
2021-06-01 08:54                                 time_manager.F90

   2590 
   2591 !=========================================================================
   2592 
   2593  function convert_integer_date_to_char(year, month, day, hour, minute, second)
   2594  character(len=19) :: convert_integer_date_to_char
   2595  integer, intent(in) :: year, month, day
   2596  integer, intent(in) :: hour, minute, second
   2597 
   2598  write(convert_integer_date_to_char,10) year,month,day,hour,minute,second
   2599  10 format(i4.4, '-', i2.2, '-', i2.2, ' ', i2.2, ':', i2.2, ':', i2.2)
   2600 
   2601  end function convert_integer_date_to_char


ENTRY POINTS

  Name                                                         
                                                               
 time_manager_mod_mp_convert_integer_date_to_char_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  2599                                                           2598                              
 CONVERT_INTEGER_DATE_TO_CH                                                                                                         
 AR                         Func   2593     CHAR            19          scalar                    2322,2328,2373,2377,2409,2439,2451
                                                                                                  ,2502,2533,2580,2598              
 DAY                        Dummy  2593     I(4)            4           scalar   ARG,IN           2598                              
 HOUR                       Dummy  2593     I(4)            4           scalar   ARG,IN           2598                              
 MINUTE                     Dummy  2593     I(4)            4           scalar   ARG,IN           2598                              
 MONTH                      Dummy  2593     I(4)            4           scalar   ARG,IN           2598                              
 SECOND                     Dummy  2593     I(4)            4           scalar   ARG,IN           2598                              
 YEAR                       Dummy  2593     I(4)            4           scalar   ARG,IN           2598                              

Page 112         Source Listing                  CONVERT_INTEGER_DATE_TO_CHAR
2021-06-01 08:54                                 time_manager.F90

   2602 
   2603 !=========================================================================
   2604 ! END OF set_date BLOCK
   2605 !=========================================================================
   2606 
   2607 ! <FUNCTION NAME="increment_date">
   2608 
   2609 !   <OVERVIEW>
   2610 !      Increments the date represented by a time interval and the
   2611 !      default calendar type by a number of seconds, etc.
   2612 !   </OVERVIEW>
   2613 !   <DESCRIPTION>
   2614 !      Given a time and some date increment, computes a new time.  Depending
   2615 !      on the mapping algorithm from date to time, it may be possible to specify
   2616 !      undefined increments (i.e. if one increments by 68 days and 3 months in
   2617 !      a Julian calendar, it matters which order these operations are done and
   2618 !      we don't want to deal with stuff like that, make it an error).
   2619 !   </DESCRIPTION>
   2620 !   <TEMPLATE>
   2621 !      increment_date(time, years, months, days, hours, minutes, seconds, ticks, err_msg)
   2622 !   </TEMPLATE>
   2623 !   <IN NAME="time"    TYPE="time_type"> A time interval.</IN>
   2624 !   <IN NAME="years"   TYPE="integer">An increment of years.</IN>
   2625 !   <IN NAME="months"  TYPE="integer">An increment of months.</IN>
   2626 !   <IN NAME="days"    TYPE="integer">An increment of days.</IN>
   2627 !   <IN NAME="hours"   TYPE="integer">An increment of hours.</IN>
   2628 !   <IN NAME="minutes" TYPE="integer">An increment of minutes.</IN>
   2629 !   <IN NAME="seconds" TYPE="integer">An increment of seconds.</IN>
   2630 !   <IN NAME="ticks"   TYPE="integer">An increment of ticks.</IN>
   2631 !   <OUT NAME="err_msg" TYPE="character, optional" DIM="(scalar)">
   2632 !     When present, and when non-blank, a fatal error condition as been detected.
   2633 !     The string itself is an error message.
   2634 !     It is recommended that, when err_msg is present in the call
   2635 !     to this routine, the next line of code should be something
   2636 !     similar to this:
   2637 !     if(err_msg /= '') call error_mesg('my_routine','additional info: '//trim(err_msg),FATAL)
   2638 !   </OUT>
   2639 !   <OUT NAME="increment_date" TYPE="time_type"> A new time based on the input
   2640 !         time interval and the calendar type.
   2641 !   </OUT>
   2642 !   <IN NAME="allow_neg_inc" TYPE="logical, optional" DIM="(scalar)" DEFAULT=".true.">
   2643 !     When .false., it is a fatal error if any of the input time increments are negative.
   2644 !     This mimics the behavior of lima and earlier revisions.
   2645 !   </IN>
   2646 !   <NOTE>
   2647 !     For all but the thirty_day_months calendar, increments to months
   2648 !     and years must be made separately from other units because of the
   2649 !     non-associative nature of addition.
   2650 !     If the result is a negative time (i.e. date before the base date)
   2651 !     it is considered a fatal error.
   2652 !   </NOTE>
   2653 
   2654  function increment_date(Time, years, months, days, hours, minutes, seconds, ticks, err_msg, allow_neg_inc)
   2655 
   2656 ! Given a time and some date increment, computes a new time.  Depending
   2657 ! on the mapping algorithm from date to time, it may be possible to specify
   2658 ! undefined increments (i.e. if one increments by 68 days and 3 months in

Page 113         Source Listing                  INCREMENT_DATE
2021-06-01 08:54                                 time_manager.F90

   2659 ! a Julian calendar, it matters which order these operations are done and
   2660 ! we don't want to deal with stuff like that, make it an error).
   2661 
   2662 ! This routine operates in one of two modes.
   2663 ! 1. days, hours, minutes, seconds, ticks are incremented, years and months must be zero or absent arguments.
   2664 ! 2. years and/or months are incremented, other time increments must be zero or absent arguments.
   2665 
   2666  type(time_type) :: increment_date
   2667  type(time_type), intent(in) :: Time
   2668  integer, intent(in), optional :: years, months, days, hours, minutes, seconds, ticks
   2669  character(len=*), intent(out), optional :: err_msg
   2670  logical, intent(in), optional :: allow_neg_inc
   2671 
   2672  integer :: oyears, omonths, odays, ohours, ominutes, oseconds, oticks
   2673  character(len=128) :: err_msg_local
   2674  logical :: allow_neg_inc_local
   2675 
   2676  if(.not.module_is_initialized) call time_manager_init
   2677  if(present(err_msg)) err_msg = ''
   2678 
   2679 ! Missing optionals are set to 0
   2680  oseconds = 0; if(present(seconds)) oseconds = seconds
   2681  ominutes = 0; if(present(minutes)) ominutes = minutes
   2682  ohours   = 0; if(present(hours))   ohours   = hours
   2683  odays    = 0; if(present(days))    odays    = days
   2684  omonths  = 0; if(present(months))  omonths  = months
   2685  oyears   = 0; if(present(years))   oyears   = years
   2686  oticks   = 0; if(present(ticks))   oticks   = ticks
   2687  allow_neg_inc_local=.true.; if(present(allow_neg_inc)) allow_neg_inc_local=allow_neg_inc
   2688 
   2689  if(.not.allow_neg_inc_local) then
   2690    if(oyears < 0 .or. omonths < 0 .or. odays < 0 .or. ohours < 0 .or. ominutes < 0 .or. oseconds < 0 .or. oticks < 0) then
   2691      write(err_msg_local,10) oyears, omonths, odays, ohours, ominutes, oseconds, oticks
   2692      if(error_handler('function increment_time', err_msg_local, err_msg)) return
   2693    endif
   2694  endif
   2695  10 format('One or more time increments are negative: '// &
   2696    'years=',i6,' months=',i6,' days=',i6,' hours=',i6,' minutes=',i6,' seconds=',i6,' ticks=',i6)
   2697 
   2698  if(.not.increment_date_private( &
   2699      Time, oyears, omonths, odays, ohours, ominutes, oseconds, oticks, increment_date, err_msg_local)) then
   2700    if(error_handler('function increment_date', err_msg_local, err_msg)) return
   2701  endif
   2702 
   2703  end function increment_date

Page 114         Source Listing                  INCREMENT_DATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                           
                                                 
 time_manager_mod_mp_increment_date_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  2695                                                           2691                              
 ALLOW_NEG_INC              Dummy  2654     L(4)            4           scalar   ARG,IN           2687                              
 ALLOW_NEG_INC_LOCAL        Local  2674     L(4)            4           scalar                    2687,2689                         
 DAYS                       Dummy  2654     I(4)            4           scalar   ARG,IN           2683                              
 ERR_MSG                    Dummy  2654     CHAR                        scalar   ARG,OUT          2677,2692,2700                    
 ERR_MSG_LOCAL              Local  2673     CHAR            128         scalar                    2691,2692,2699,2700               
 HOURS                      Dummy  2654     I(4)            4           scalar   ARG,IN           2682                              
 INCREMENT_DATE             Func   2654     TIME_TYPE       16          scalar                                                      
 INCREMENT_DATE_PRIVATE@0   Local  2698     L(4)            4           scalar                                                      
 MINUTES                    Dummy  2654     I(4)            4           scalar   ARG,IN           2681                              
 MONTHS                     Dummy  2654     I(4)            4           scalar   ARG,IN           2684                              
 ODAYS                      Local  2672     I(4)            4           scalar                    2683,2690,2691,2699               
 OHOURS                     Local  2672     I(4)            4           scalar                    2682,2690,2691,2699               
 OMINUTES                   Local  2672     I(4)            4           scalar                    2681,2690,2691,2699               
 OMONTHS                    Local  2672     I(4)            4           scalar                    2684,2690,2691,2699               
 OSECONDS                   Local  2672     I(4)            4           scalar                    2680,2690,2691,2699               
 OTICKS                     Local  2672     I(4)            4           scalar                    2686,2690,2691,2699               
 OYEARS                     Local  2672     I(4)            4           scalar                    2685,2690,2691,2699               
 PRESENT                    Func   2677                                 scalar                    2677,2680,2681,2682,2683,2684,2685
                                                                                                  ,2686,2687                        
 SECONDS                    Dummy  2654     I(4)            4           scalar   ARG,IN           2680                              
 TICKS                      Dummy  2654     I(4)            4           scalar   ARG,IN           2686                              
 TIME                       Dummy  2654     TIME_TYPE       16          scalar   ARG,IN           2699                              
 YEARS                      Dummy  2654     I(4)            4           scalar   ARG,IN           2685                              

Page 115         Source Listing                  INCREMENT_DATE
2021-06-01 08:54                                 time_manager.F90

   2704 
   2705 ! </FUNCTION>
   2706 
   2707 !=======================================================================
   2708 
   2709  function increment_date_private(Time, years, months, days, hours, minutes, seconds, ticks, Time_out, err_msg)
   2710 
   2711 ! Given a time and some date increment, computes a new time.  Depending
   2712 ! on the mapping algorithm from date to time, it may be possible to specify
   2713 ! undefined increments (i.e. if one increments by 68 days and 3 months in
   2714 ! a Julian calendar, it matters which order these operations are done and
   2715 ! we don't want to deal with stuff like that, make it an error).
   2716 
   2717 ! This routine operates in one of two modes.
   2718 ! 1. days, hours, minutes, seconds, ticks are incremented, years and months must be zero or absent arguments.
   2719 ! 2. years and/or months are incremented, other time increments must be zero or absent arguments.
   2720 
   2721 ! Negative increments are always allowed in the private version of this routine.
   2722 
   2723  logical :: increment_date_private
   2724  type(time_type),  intent(in)  :: Time
   2725  integer,          intent(in)  :: years, months, days, hours, minutes, seconds, ticks
   2726  type(time_type),  intent(out) :: Time_out
   2727  character(len=*), intent(out) :: err_msg
   2728  integer :: cyear , cmonth , cday , chour , cminute , csecond , ctick
   2729  logical :: mode_1, mode_2
   2730 
   2731  err_msg = ''
   2732  increment_date_private = .true.
   2733 
   2734  mode_1 = days /= 0 .or. hours /= 0 .or. minutes /= 0 .or. seconds /= 0 .or. ticks /= 0
   2735  mode_2 = years /= 0 .or. months /= 0
   2736 
   2737  if(.not.mode_1 .and. .not.mode_2) then
   2738 ! All time increments are zero
   2739    Time_out = Time
   2740    return
   2741  endif
   2742 
   2743  if(mode_1 .and. mode_2) then
   2744    err_msg = 'years and/or months must not be incremented with other time units'
   2745    increment_date_private = .false.
   2746    return
   2747  endif
   2748 
   2749  if(mode_1) then
   2750    csecond = seconds + 60 * (minutes + 60 * hours)
   2751    increment_date_private = increment_time_private(Time, csecond, days, ticks, Time_out, err_msg)
   2752  endif
   2753 
   2754  if(mode_2) then
   2755 ! Convert Time to a date
   2756    select case(calendar_type)
   2757    case(THIRTY_DAY_MONTHS)
   2758      call get_date_thirty   (Time, cyear, cmonth, cday, chour, cminute, csecond, ctick)
   2759    case(NOLEAP)
   2760      call get_date_no_leap_private  (Time, cyear, cmonth, cday, chour, cminute, csecond, ctick)

Page 116         Source Listing                  INCREMENT_DATE_PRIVATE
2021-06-01 08:54                                 time_manager.F90

   2761    case(JULIAN)
   2762      call get_date_julian_private   (Time, cyear, cmonth, cday, chour, cminute, csecond, ctick)
   2763    case(GREGORIAN)
   2764      call get_date_gregorian(Time, cyear, cmonth, cday, chour, cminute, csecond, ctick)
   2765    case(NO_CALENDAR)
   2766      err_msg = 'Cannot increment a date when the calendar type is NO_CALENDAR'
   2767      increment_date_private = .false.
   2768      return
   2769    case default
   2770      err_msg = 'Invalid calendar type'
   2771      increment_date_private = .false.
   2772      return
   2773    end select
   2774 
   2775 ! Add month increment
   2776    cmonth = cmonth + months
   2777 
   2778 ! Adjust year and month number when cmonth falls outside the range 1 to 12
   2779    cyear = cyear + floor((cmonth-1)/12.)
   2780    cmonth = modulo((cmonth-1),12) + 1
   2781 
   2782 ! Add year increment
   2783    cyear = cyear + years
   2784 
   2785 ! Convert this back into a time.
   2786    select case(calendar_type)
   2787    case(THIRTY_DAY_MONTHS)
   2788      increment_date_private = set_date_thirty   (cyear, cmonth, cday, chour, cminute, csecond, ctick, Time_out, err_msg)
   2789    case(NOLEAP)
   2790      increment_date_private = set_date_no_leap_private  (cyear, cmonth, cday, chour, cminute, csecond, ctick, Time_out, err_
   2790 msg)
   2791    case(JULIAN)
   2792      increment_date_private = set_date_julian_private   (cyear, cmonth, cday, chour, cminute, csecond, ctick, Time_out, err_
   2792 msg)
   2793    case(GREGORIAN)
   2794      increment_date_private = set_date_gregorian(cyear, cmonth, cday, chour, cminute, csecond, ctick, Time_out, err_msg)
   2795    end select
   2796  endif ! if(mode_2)
   2797 
   2798  end function increment_date_private

Page 117         Source Listing                  INCREMENT_DATE_PRIVATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                                   
                                                         
 time_manager_mod_mp_increment_date_private_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CDAY                       Local  2728     I(4)            4           scalar                    2758,2760,2762,2764,2788,2790,2792
                                                                                                  ,2794                             
 CHOUR                      Local  2728     I(4)            4           scalar                    2758,2760,2762,2764,2788,2790,2792
                                                                                                  ,2794                             
 CMINUTE                    Local  2728     I(4)            4           scalar                    2758,2760,2762,2764,2788,2790,2792
                                                                                                  ,2794                             
 CMONTH                     Local  2728     I(4)            4           scalar                    2758,2760,2762,2764,2776,2779,2780
                                                                                                  ,2788,2790,2792,2794              
 CSECOND                    Local  2728     I(4)            4           scalar                    2750,2751,2758,2760,2762,2764,2788
                                                                                                  ,2790,2792,2794                   
 CTICK                      Local  2728     I(4)            4           scalar                    2758,2760,2762,2764,2788,2790,2792
                                                                                                  ,2794                             
 CYEAR                      Local  2728     I(4)            4           scalar                    2758,2760,2762,2764,2779,2783,2788
                                                                                                  ,2790,2792,2794                   
 DAYS                       Dummy  2709     I(4)            4           scalar   ARG,IN           2734,2751                         
 ERR_MSG                    Dummy  2709     CHAR                        scalar   ARG,OUT          2731,2744,2751,2766,2770,2788,2790
                                                                                                  ,2792,2794                        
 FLOOR                      Func   2779                                 scalar                    2779                              
 HOURS                      Dummy  2709     I(4)            4           scalar   ARG,IN           2734,2750                         
 INCREMENT_DATE_PRIVATE     Func   2709     L(4)            4           scalar                    2698,2732,2745,2751,2767,2771,2788
                                                                                                  ,2790,2792,2794,2881              
 MINUTES                    Dummy  2709     I(4)            4           scalar   ARG,IN           2734,2750                         
 MODE_1                     Local  2729     L(4)            4           scalar                    2734,2737,2743,2749               
 MODE_2                     Local  2729     L(4)            4           scalar                    2735,2737,2743,2754               
 MODULO                     Func   2780                                 scalar                    2780                              
 MONTHS                     Dummy  2709     I(4)            4           scalar   ARG,IN           2735,2776                         
 SECONDS                    Dummy  2709     I(4)            4           scalar   ARG,IN           2734,2750                         
 TICKS                      Dummy  2709     I(4)            4           scalar   ARG,IN           2734,2751                         
 TIME                       Dummy  2709     TIME_TYPE       16          scalar   ARG,IN           2739,2751,2758,2760,2762,2764     
 TIME_OUT                   Dummy  2709     TIME_TYPE       16          scalar   ARG,OUT          2739,2751,2788,2790,2792,2794     
 YEARS                      Dummy  2709     I(4)            4           scalar   ARG,IN           2735,2783                         

Page 118         Source Listing                  INCREMENT_DATE_PRIVATE
2021-06-01 08:54                                 time_manager.F90

   2799 
   2800 !=========================================================================
   2801 ! <FUNCTION NAME="decrement_date">
   2802 
   2803 !   <OVERVIEW>
   2804 !      Decrements the date represented by a time interval and the
   2805 !      default calendar type by a number of seconds, etc.
   2806 !   </OVERVIEW>
   2807 !   <DESCRIPTION>
   2808 !      Given a time and some date decrement, computes a new time.  Depending
   2809 !      on the mapping algorithm from date to time, it may be possible to specify
   2810 !      undefined decrements (i.e. if one decrements by 68 days and 3 months in
   2811 !      a Julian calendar, it matters which order these operations are done and
   2812 !      we don't want to deal with stuff like that, make it an error).
   2813 !   </DESCRIPTION>
   2814 !   <TEMPLATE>
   2815 !      decrement_date(time, years, months, days, hours, minutes, seconds, ticks, err_msg))
   2816 !   </TEMPLATE>
   2817 !   <IN NAME="time"    TYPE="time_type"> A time interval.</IN>
   2818 !   <IN NAME="years"   TYPE="integer">An decrement of years.</IN>
   2819 !   <IN NAME="months"  TYPE="integer">An decrement of months.</IN>
   2820 !   <IN NAME="days"    TYPE="integer">An decrement of days.</IN>
   2821 !   <IN NAME="hours"   TYPE="integer">An decrement of hours.</IN>
   2822 !   <IN NAME="minutes" TYPE="integer">An decrement of minutes.</IN>
   2823 !   <IN NAME="seconds" TYPE="integer">An decrement of seconds.</IN>
   2824 !   <IN NAME="ticks"   TYPE="integer">An decrement of ticks.</IN>
   2825 !   <OUT NAME="err_msg" TYPE="character, optional" DIM="(scalar)">
   2826 !     When present, and when non-blank, a fatal error condition as been detected.
   2827 !     The string itself is an error message.
   2828 !     It is recommended that, when err_msg is present in the call
   2829 !     to this routine, the next line of code should be something
   2830 !     similar to this:
   2831 !     if(err_msg /= '') call error_mesg('my_routine','additional info: '//trim(err_msg),FATAL)
   2832 !   </OUT>
   2833 !   <OUT NAME="decrement_date" TYPE="time_type"> A new time based on the input
   2834 !         time interval and the calendar type.
   2835 !   </OUT>
   2836 !   <IN NAME="allow_neg_inc" TYPE="logical, optional" DIM="(scalar)" DEFAULT=".true.">
   2837 !     When .false., it is a fatal error if any of the input time increments are negative.
   2838 !     This mimics the behavior of lima and earlier revisions.
   2839 !   </IN>
   2840 !   <NOTE>
   2841 !     For all but the thirty_day_months calendar, decrements to months
   2842 !     and years must be made separately from other units because of the
   2843 !     non-associative nature of addition.
   2844 !     If the result is a negative time (i.e. date before the base date)
   2845 !     it is considered a fatal error.
   2846 !   </NOTE>
   2847 
   2848  function decrement_date(Time, years, months, days, hours, minutes, seconds, ticks, err_msg, allow_neg_inc)
   2849 
   2850  type(time_type) :: decrement_date
   2851  type(time_type), intent(in) :: Time
   2852  integer, intent(in), optional :: seconds, minutes, hours, days, months, years, ticks
   2853  character(len=*), intent(out), optional :: err_msg
   2854  logical, intent(in), optional :: allow_neg_inc
   2855 

Page 119         Source Listing                  DECREMENT_DATE
2021-06-01 08:54                                 time_manager.F90

   2856  integer :: oseconds, ominutes, ohours, odays, omonths, oyears, oticks
   2857  character(len=128) :: err_msg_local
   2858  logical :: allow_neg_inc_local
   2859 
   2860  if(present(err_msg)) err_msg = ''
   2861 
   2862 ! Missing optionals are set to 0
   2863  oseconds = 0; if(present(seconds)) oseconds = seconds
   2864  ominutes = 0; if(present(minutes)) ominutes = minutes
   2865  ohours   = 0; if(present(hours))   ohours   = hours
   2866  odays    = 0; if(present(days))    odays    = days
   2867  omonths  = 0; if(present(months))  omonths  = months
   2868  oyears   = 0; if(present(years))   oyears   = years
   2869  oticks   = 0; if(present(ticks))   oticks   = ticks
   2870  allow_neg_inc_local=.true.; if(present(allow_neg_inc)) allow_neg_inc_local=allow_neg_inc
   2871 
   2872  if(.not.allow_neg_inc_local) then
   2873    if(oyears < 0 .or. omonths < 0 .or. odays < 0 .or. ohours < 0 .or. ominutes < 0 .or. oseconds < 0 .or. oticks < 0) then
   2874      write(err_msg_local,10) oyears, omonths, odays, ohours, ominutes, oseconds, oticks
   2875      if(error_handler('function decrement_date', err_msg_local, err_msg)) return
   2876    endif
   2877  endif
   2878  10 format('One or more time increments are negative: '// &
   2879    'years=',i6,' months=',i6,' days=',i6,' hours=',i6,' minutes=',i6,' seconds=',i6,' ticks=',i6)
   2880 
   2881  if(.not.increment_date_private( &
   2882      Time, -oyears, -omonths, -odays, -ohours, -ominutes, -oseconds, -oticks, decrement_date, err_msg_local)) then
   2883    if(error_handler('function decrement_date', err_msg_local, err_msg)) return
   2884  endif
   2885 
   2886  end function decrement_date

Page 120         Source Listing                  DECREMENT_DATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                           
                                                 
 time_manager_mod_mp_decrement_date_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  2878                                                           2874                              
 ALLOW_NEG_INC              Dummy  2848     L(4)            4           scalar   ARG,IN           2870                              
 ALLOW_NEG_INC_LOCAL        Local  2858     L(4)            4           scalar                    2870,2872                         
 DAYS                       Dummy  2848     I(4)            4           scalar   ARG,IN           2866                              
 DECREMENT_DATE             Func   2848     TIME_TYPE       16          scalar                                                      
 ERR_MSG                    Dummy  2848     CHAR                        scalar   ARG,OUT          2860,2875,2883                    
 ERR_MSG_LOCAL              Local  2857     CHAR            128         scalar                    2874,2875,2882,2883               
 HOURS                      Dummy  2848     I(4)            4           scalar   ARG,IN           2865                              
 MINUTES                    Dummy  2848     I(4)            4           scalar   ARG,IN           2864                              
 MONTHS                     Dummy  2848     I(4)            4           scalar   ARG,IN           2867                              
 ODAYS                      Local  2856     I(4)            4           scalar                    2866,2873,2874,2882               
 OHOURS                     Local  2856     I(4)            4           scalar                    2865,2873,2874,2882               
 OMINUTES                   Local  2856     I(4)            4           scalar                    2864,2873,2874,2882               
 OMONTHS                    Local  2856     I(4)            4           scalar                    2867,2873,2874,2882               
 OSECONDS                   Local  2856     I(4)            4           scalar                    2863,2873,2874,2882               
 OTICKS                     Local  2856     I(4)            4           scalar                    2869,2873,2874,2882               
 OYEARS                     Local  2856     I(4)            4           scalar                    2868,2873,2874,2882               
 PRESENT                    Func   2860                                 scalar                    2860,2863,2864,2865,2866,2867,2868
                                                                                                  ,2869,2870                        
 SECONDS                    Dummy  2848     I(4)            4           scalar   ARG,IN           2863                              
 TICKS                      Dummy  2848     I(4)            4           scalar   ARG,IN           2869                              
 TIME                       Dummy  2848     TIME_TYPE       16          scalar   ARG,IN           2882                              
 YEARS                      Dummy  2848     I(4)            4           scalar   ARG,IN           2868                              

Page 121         Source Listing                  DECREMENT_DATE
2021-06-01 08:54                                 time_manager.F90

   2887 ! </FUNCTION>
   2888 
   2889 !=========================================================================
   2890 ! START days_in_month BLOCK
   2891 ! <FUNCTION NAME="days_in_month">
   2892 
   2893 !   <OVERVIEW>
   2894 !       Given a time interval, gives the number of days in the
   2895 !       month corresponding to the default calendar.
   2896 !   </OVERVIEW>
   2897 !   <DESCRIPTION>
   2898 !       Given a time, computes the corresponding date given the selected
   2899 !       date time mapping algorithm.
   2900 !   </DESCRIPTION>
   2901 !   <TEMPLATE> days_in_month(time) </TEMPLATE>
   2902 
   2903 !   <IN NAME="time" UNITS="" TYPE="time_type" DIM="">A time interval.</IN>
   2904 !   <OUT NAME="days_in_month" UNITS="" TYPE="integer" DIM="" DEFAULT="">
   2905 !       The number of days in the month given the selected time
   2906 !       mapping algorithm.
   2907 !   </OUT>
   2908 
   2909 function days_in_month(Time, err_msg)
   2910 
   2911 ! Given a time, computes the corresponding date given the selected
   2912 ! date time mapping algorithm
   2913 
   2914 integer :: days_in_month
   2915 type(time_type), intent(in) :: Time
   2916 character(len=*), intent(out), optional :: err_msg
   2917 
   2918 if(.not.module_is_initialized) call time_manager_init
   2919 if(present(err_msg)) err_msg = ''
   2920 
   2921 select case(calendar_type)
   2922 case(THIRTY_DAY_MONTHS)
   2923    days_in_month = days_in_month_thirty(Time)
   2924 case(GREGORIAN)
   2925    days_in_month = days_in_month_gregorian(Time)
   2926 case(JULIAN)
   2927    days_in_month = days_in_month_julian(Time)
   2928 case(NOLEAP)
   2929    days_in_month = days_in_month_no_leap(Time)
   2930 case(NO_CALENDAR)
   2931    if(error_handler('function days_in_month', &
   2932          'days_in_month makes no sense when the calendar type is NO_CALENDAR', err_msg)) return
   2933 case default
   2934    if(error_handler('function days_in_month', 'Invalid calendar type', err_msg)) return
   2935 end select
   2936 end function days_in_month

Page 122         Source Listing                  DAYS_IN_MONTH
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                          
                                                
 time_manager_mod_mp_days_in_month_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS_IN_MONTH              Func   2909     I(4)            4           scalar                                                      
 DAYS_IN_MONTH_GREGORIAN@0  Local  2925     I(4)            4           scalar                                                      
 DAYS_IN_MONTH_JULIAN@0     Local  2927     I(4)            4           scalar                                                      
 DAYS_IN_MONTH_NO_LEAP@0    Local  2929     I(4)            4           scalar                                                      
 DAYS_IN_MONTH_THIRTY@0     Local  2923     I(4)            4           scalar                                                      
 ERR_MSG                    Dummy  2909     CHAR                        scalar   ARG,OUT          2919,2932,2934                    
 PRESENT                    Func   2919                                 scalar                    2919                              
 TIME                       Dummy  2909     TIME_TYPE       16          scalar   ARG,IN           2923,2925,2927,2929               

Page 123         Source Listing                  DAYS_IN_MONTH
2021-06-01 08:54                                 time_manager.F90

   2937 ! </FUNCTION>
   2938 
   2939 !--------------------------------------------------------------------------
   2940 
   2941 function days_in_month_gregorian(Time)
   2942 
   2943 ! Returns the number of days in a gregorian month.
   2944 
   2945 integer :: days_in_month_gregorian
   2946 type(time_type), intent(in) :: Time
   2947 integer :: year, month, day, hour, minute, second, ticks
   2948 
   2949 call get_date_gregorian(Time, year, month, day, hour, minute, second, ticks)
   2950 days_in_month_gregorian = days_per_month(month)
   2951 if(leap_year_gregorian_int(year) .and. month == 2) days_in_month_gregorian = 29
   2952 
   2953 end function days_in_month_gregorian


ENTRY POINTS

  Name                                                    
                                                          
 time_manager_mod_mp_days_in_month_gregorian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Local  2947     I(4)            4           scalar                    2949                              
 DAYS_IN_MONTH_GREGORIAN    Func   2941     I(4)            4           scalar                    2925,2950,2951                    
 HOUR                       Local  2947     I(4)            4           scalar                    2949                              
 MINUTE                     Local  2947     I(4)            4           scalar                    2949                              
 MONTH                      Local  2947     I(4)            4           scalar                    2949,2950,2951                    
 SECOND                     Local  2947     I(4)            4           scalar                    2949                              
 TICKS                      Local  2947     I(4)            4           scalar                    2949                              
 TIME                       Dummy  2941     TIME_TYPE       16          scalar   ARG,IN           2949                              
 YEAR                       Local  2947     I(4)            4           scalar                    2949,2951                         

Page 124         Source Listing                  DAYS_IN_MONTH_GREGORIAN
2021-06-01 08:54                                 time_manager.F90

   2954 
   2955 !--------------------------------------------------------------------------
   2956 function days_in_month_julian(Time)
   2957 
   2958 ! Returns the number of days in a julian month.
   2959 
   2960 integer :: days_in_month_julian
   2961 type(time_type), intent(in) :: Time
   2962 integer :: year, month, day, hour, minute, second, ticks
   2963 
   2964 call get_date_julian_private(Time, year, month, day, hour, minute, second, ticks)
   2965 days_in_month_julian = days_per_month(month)
   2966 if(leap_year_julian(Time) .and. month == 2) days_in_month_julian = 29
   2967 
   2968 end function days_in_month_julian


ENTRY POINTS

  Name                                                 
                                                       
 time_manager_mod_mp_days_in_month_julian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Local  2962     I(4)            4           scalar                    2964                              
 DAYS_IN_MONTH_JULIAN       Func   2956     I(4)            4           scalar                    2927,2965,2966                    
 HOUR                       Local  2962     I(4)            4           scalar                    2964                              
 LEAP_YEAR_JULIAN@0         Local  2966     L(4)            4           scalar                                                      
 MINUTE                     Local  2962     I(4)            4           scalar                    2964                              
 MONTH                      Local  2962     I(4)            4           scalar                    2964,2965,2966                    
 SECOND                     Local  2962     I(4)            4           scalar                    2964                              
 TICKS                      Local  2962     I(4)            4           scalar                    2964                              
 TIME                       Dummy  2956     TIME_TYPE       16          scalar   ARG,IN           2964,2966                         
 YEAR                       Local  2962     I(4)            4           scalar                    2964                              

Page 125         Source Listing                  DAYS_IN_MONTH_JULIAN
2021-06-01 08:54                                 time_manager.F90

   2969 
   2970 !--------------------------------------------------------------------------
   2971 function days_in_month_thirty(Time)
   2972 
   2973 ! Returns the number of days in a thirty day month (needed for transparent
   2974 ! changes to calendar type).
   2975 
   2976 integer :: days_in_month_thirty
   2977 type(time_type), intent(in) :: Time
   2978 
   2979 days_in_month_thirty = 30
   2980 
   2981 end function days_in_month_thirty


ENTRY POINTS

  Name                                                 
                                                       
 time_manager_mod_mp_days_in_month_thirty_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS_IN_MONTH_THIRTY       Func   2971     I(4)            4           scalar                    2923,2979                         
 TIME                       Dummy  2971     TIME_TYPE       16          scalar   ARG,IN                                             

Page 126         Source Listing                  DAYS_IN_MONTH_THIRTY
2021-06-01 08:54                                 time_manager.F90

   2982 
   2983 !--------------------------------------------------------------------------
   2984 function days_in_month_no_leap(Time)
   2985 
   2986 ! Returns the number of days in a 365 day year month.
   2987 
   2988 integer :: days_in_month_no_leap
   2989 type(time_type), intent(in) :: Time
   2990 integer :: year, month, day, hour, minute, second, ticks
   2991 
   2992 call get_date_no_leap_private(Time, year, month, day, hour, minute, second, ticks)
   2993 days_in_month_no_leap= days_per_month(month)
   2994 
   2995 end function days_in_month_no_leap


ENTRY POINTS

  Name                                                  
                                                        
 time_manager_mod_mp_days_in_month_no_leap_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Local  2990     I(4)            4           scalar                    2992                              
 DAYS_IN_MONTH_NO_LEAP      Func   2984     I(4)            4           scalar                    2929,2993                         
 HOUR                       Local  2990     I(4)            4           scalar                    2992                              
 MINUTE                     Local  2990     I(4)            4           scalar                    2992                              
 MONTH                      Local  2990     I(4)            4           scalar                    2992,2993                         
 SECOND                     Local  2990     I(4)            4           scalar                    2992                              
 TICKS                      Local  2990     I(4)            4           scalar                    2992                              
 TIME                       Dummy  2984     TIME_TYPE       16          scalar   ARG,IN           2992                              
 YEAR                       Local  2990     I(4)            4           scalar                    2992                              

Page 127         Source Listing                  DAYS_IN_MONTH_NO_LEAP
2021-06-01 08:54                                 time_manager.F90

   2996 
   2997 ! END OF days_in_month BLOCK
   2998 !==========================================================================
   2999 ! START OF leap_year BLOCK
   3000 ! <FUNCTION NAME="leap_year">
   3001 
   3002 !   <OVERVIEW>
   3003 !      Returns true if the year corresponding to the input time is
   3004 !      a leap year. Always returns false for THIRTY_DAY_MONTHS and NOLEAP.
   3005 !   </OVERVIEW>
   3006 !   <DESCRIPTION>
   3007 !      Returns true if the year corresponding to the input time is
   3008 !      a leap year. Always returns false for THIRTY_DAY_MONTHS and NOLEAP.
   3009 !   </DESCRIPTION>
   3010 !   <TEMPLATE> leap_year(time) </TEMPLATE>
   3011 
   3012 !   <IN NAME="time" UNITS="" TYPE="time_type" DIM="">A time interval.</IN>
   3013 !   <OUT NAME="leap_year" UNITS="" TYPE="calendar_type" DIM="" DEFAULT="">
   3014 !      true if the year corresponding to the input time is a leap year.
   3015 !   </OUT>
   3016 
   3017 function leap_year(Time, err_msg)
   3018 
   3019 ! Is this date in a leap year for default calendar?
   3020 
   3021 logical :: leap_year
   3022 type(time_type), intent(in) :: Time
   3023 character(len=*), intent(out), optional :: err_msg
   3024 
   3025 if(.not.module_is_initialized) call time_manager_init
   3026 if(present(err_msg)) err_msg=''
   3027 
   3028 select case(calendar_type)
   3029 case(THIRTY_DAY_MONTHS)
   3030    leap_year = leap_year_thirty(Time)
   3031 case(GREGORIAN)
   3032    leap_year = leap_year_gregorian(Time)
   3033 case(JULIAN)
   3034    leap_year = leap_year_julian(Time)
   3035 case(NOLEAP)
   3036    leap_year = leap_year_no_leap(Time)
   3037 case default
   3038    if(error_handler('function leap_year', 'Invalid calendar type in leap_year', err_msg)) return
   3039 end select
   3040 end function leap_year

Page 128         Source Listing                  LEAP_YEAR
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                      
                                            
 time_manager_mod_mp_leap_year_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERR_MSG                    Dummy  3017     CHAR                        scalar   ARG,OUT          3026,3038                         
 LEAP_YEAR                  Func   3017     L(4)            4           scalar                                                      
 LEAP_YEAR_GREGORIAN@0      Local  3032     L(4)            4           scalar                                                      
 LEAP_YEAR_NO_LEAP@0        Local  3036     L(4)            4           scalar                                                      
 LEAP_YEAR_THIRTY@0         Local  3030     L(4)            4           scalar                                                      
 PRESENT                    Func   3026                                 scalar                    3026                              
 TIME                       Dummy  3017     TIME_TYPE       16          scalar   ARG,IN           3030,3032,3034,3036               

Page 129         Source Listing                  LEAP_YEAR
2021-06-01 08:54                                 time_manager.F90

   3041 ! </FUNCTION>
   3042 
   3043 !--------------------------------------------------------------------------
   3044 
   3045 function leap_year_gregorian(Time)
   3046 
   3047 ! Is this a leap year for gregorian calendar?
   3048 
   3049 logical :: leap_year_gregorian
   3050 type(time_type), intent(in) :: Time
   3051 integer :: seconds, minutes, hours, day, month, year
   3052 
   3053 call get_date(Time, year, month, day, hours, minutes, seconds)
   3054 leap_year_gregorian = leap_year_gregorian_int(year)
   3055 
   3056 end function leap_year_gregorian


ENTRY POINTS

  Name                                                
                                                      
 time_manager_mod_mp_leap_year_gregorian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Local  3051     I(4)            4           scalar                    3053                              
 GET_DATE                   Subr   3053                                                           122,3053,3080,3205,3476,3552      
 HOURS                      Local  3051     I(4)            4           scalar                    3053                              
 LEAP_YEAR_GREGORIAN        Func   3045     L(4)            4           scalar                    3032,3054,3270                    
 MINUTES                    Local  3051     I(4)            4           scalar                    3053                              
 MONTH                      Local  3051     I(4)            4           scalar                    3053                              
 SECONDS                    Local  3051     I(4)            4           scalar                    3053                              
 TIME                       Dummy  3045     TIME_TYPE       16          scalar   ARG,IN           3053                              
 YEAR                       Local  3051     I(4)            4           scalar                    3053,3054                         

Page 130         Source Listing                  LEAP_YEAR_GREGORIAN
2021-06-01 08:54                                 time_manager.F90

   3057 
   3058 !--------------------------------------------------------------------------
   3059 
   3060 function leap_year_gregorian_int(year)
   3061 logical :: leap_year_gregorian_int
   3062 integer, intent(in) :: year
   3063 
   3064 leap_year_gregorian_int = mod(year,4) == 0
   3065 leap_year_gregorian_int = leap_year_gregorian_int .and. .not.mod(year,100) == 0
   3066 leap_year_gregorian_int = leap_year_gregorian_int .or. mod(year,400) == 0
   3067 
   3068 end function leap_year_gregorian_int


ENTRY POINTS

  Name                                                    
                                                          
 time_manager_mod_mp_leap_year_gregorian_int_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LEAP_YEAR_GREGORIAN_INT    Func   3060     L(4)            4           scalar                    1588,1799,1809,2317,2371,2951,3054
                                                                                                  ,3064,3065,3066                   
 MOD                        Func   3064                                 scalar                    3064,3065,3066                    
 YEAR                       Dummy  3060     I(4)            4           scalar   ARG,IN           3064,3065,3066                    

Page 131         Source Listing                  LEAP_YEAR_GREGORIAN_INT
2021-06-01 08:54                                 time_manager.F90

   3069 
   3070 !--------------------------------------------------------------------------
   3071 
   3072 function leap_year_julian(Time)
   3073 
   3074 ! Returns the number of days in a julian month.
   3075 
   3076 logical :: leap_year_julian
   3077 type(time_type), intent(in) :: Time
   3078 integer :: seconds, minutes, hours, day, month, year
   3079 
   3080 call get_date(Time, year, month, day, hours, minutes, seconds)
   3081 leap_year_julian = ((year / 4 * 4) == year)
   3082 
   3083 end function leap_year_julian


ENTRY POINTS

  Name                                             
                                                   
 time_manager_mod_mp_leap_year_julian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Local  3078     I(4)            4           scalar                    3080                              
 HOURS                      Local  3078     I(4)            4           scalar                    3080                              
 LEAP_YEAR_JULIAN           Func   3072     L(4)            4           scalar                    2966,3034,3081,3284               
 MINUTES                    Local  3078     I(4)            4           scalar                    3080                              
 MONTH                      Local  3078     I(4)            4           scalar                    3080                              
 SECONDS                    Local  3078     I(4)            4           scalar                    3080                              
 TIME                       Dummy  3072     TIME_TYPE       16          scalar   ARG,IN           3080                              
 YEAR                       Local  3078     I(4)            4           scalar                    3080,3081                         

Page 132         Source Listing                  LEAP_YEAR_JULIAN
2021-06-01 08:54                                 time_manager.F90

   3084 
   3085 !--------------------------------------------------------------------------
   3086 
   3087 function leap_year_thirty(Time)
   3088 
   3089 ! No leap years in thirty day months, included for transparency.
   3090 
   3091 logical :: leap_year_thirty
   3092 type(time_type), intent(in) :: Time
   3093 
   3094 leap_year_thirty = .FALSE.
   3095 
   3096 end function leap_year_thirty


ENTRY POINTS

  Name                                             
                                                   
 time_manager_mod_mp_leap_year_thirty_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LEAP_YEAR_THIRTY           Func   3087     L(4)            4           scalar                    3030,3094                         
 TIME                       Dummy  3087     TIME_TYPE       16          scalar   ARG,IN                                             

Page 133         Source Listing                  LEAP_YEAR_THIRTY
2021-06-01 08:54                                 time_manager.F90

   3097 
   3098 !--------------------------------------------------------------------------
   3099 
   3100 function leap_year_no_leap(Time)
   3101 
   3102 ! Another tough one; no leap year returns false for leap year inquiry.
   3103 
   3104 logical :: leap_year_no_leap
   3105 type(time_type), intent(in) :: Time
   3106 
   3107 leap_year_no_leap = .FALSE.
   3108 
   3109 end function leap_year_no_leap


ENTRY POINTS

  Name                                              
                                                    
 time_manager_mod_mp_leap_year_no_leap_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LEAP_YEAR_NO_LEAP          Func   3100     L(4)            4           scalar                    3036,3107                         
 TIME                       Dummy  3100     TIME_TYPE       16          scalar   ARG,IN                                             

Page 134         Source Listing                  LEAP_YEAR_NO_LEAP
2021-06-01 08:54                                 time_manager.F90

   3110 
   3111 !END OF leap_year BLOCK
   3112 !==========================================================================
   3113 ! START OF length_of_year BLOCK
   3114 ! <FUNCTION NAME="length_of_year">
   3115 
   3116 !   <OVERVIEW>
   3117 !      Returns the mean length of the year in the default calendar setting.
   3118 !   </OVERVIEW>
   3119 !   <DESCRIPTION>
   3120 !      There are no arguments in this function. It returns the mean
   3121 !      length of the year in the default calendar setting.
   3122 !   </DESCRIPTION>
   3123 !   <TEMPLATE> length_of_year() </TEMPLATE>
   3124 
   3125 function length_of_year()
   3126 
   3127 ! What is the length of the year for the default calendar type
   3128 
   3129 type(time_type) :: length_of_year
   3130 
   3131 if(.not.module_is_initialized) call time_manager_init
   3132 
   3133 select case(calendar_type)
   3134 case(THIRTY_DAY_MONTHS)
   3135    length_of_year = length_of_year_thirty()
   3136 case(GREGORIAN)
   3137    length_of_year = length_of_year_gregorian()
   3138 case(JULIAN)
   3139    length_of_year = length_of_year_julian()
   3140 case(NOLEAP)
   3141    length_of_year = length_of_year_no_leap()
   3142 case default
   3143    call error_mesg('length_of_year','Invalid calendar type in length_of_year',FATAL)
   3144 end select
   3145 end function length_of_year

Page 135         Source Listing                  LENGTH_OF_YEAR
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                           
                                                 
 time_manager_mod_mp_length_of_year_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LENGTH_OF_YEAR             Func   3125     TIME_TYPE       16          scalar                                                      
 LENGTH_OF_YEAR_GREGORIAN@0 Local  3137     TIME_TYPE       16          scalar                                                      
 LENGTH_OF_YEAR_JULIAN@0    Local  3139     TIME_TYPE       16          scalar                                                      
 LENGTH_OF_YEAR_NO_LEAP@0   Local  3141     TIME_TYPE       16          scalar                                                      
 LENGTH_OF_YEAR_THIRTY@0    Local  3135     TIME_TYPE       16          scalar                                                      

Page 136         Source Listing                  LENGTH_OF_YEAR
2021-06-01 08:54                                 time_manager.F90

   3146 ! </FUNCTION>
   3147 
   3148 !--------------------------------------------------------------------------
   3149 
   3150 function length_of_year_thirty()
   3151 
   3152 type(time_type) :: length_of_year_thirty
   3153 
   3154 length_of_year_thirty = set_time(0, 360)
   3155 
   3156 end function length_of_year_thirty


ENTRY POINTS

  Name                                                  
                                                        
 time_manager_mod_mp_length_of_year_thirty_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LENGTH_OF_YEAR_THIRTY      Func   3150     RECORD          16          scalar                    3135,3154                         

Page 137         Source Listing                  LENGTH_OF_YEAR_THIRTY
2021-06-01 08:54                                 time_manager.F90

   3157 
   3158 !---------------------------------------------------------------------------
   3159 
   3160 function length_of_year_gregorian()
   3161 
   3162 type(time_type) :: length_of_year_gregorian
   3163 integer :: days, seconds
   3164 
   3165 days = days_in_400_year_period / 400
   3166 seconds = 86400*(days_in_400_year_period/400. - days)
   3167 length_of_year_gregorian = set_time(seconds, days)
   3168 
   3169 end function length_of_year_gregorian


ENTRY POINTS

  Name                                                     
                                                           
 time_manager_mod_mp_length_of_year_gregorian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS                       Local  3163     I(4)            4           scalar                    3165,3166,3167                    
 LENGTH_OF_YEAR_GREGORIAN   Func   3160     RECORD          16          scalar                    3137,3167                         
 SECONDS                    Local  3163     I(4)            4           scalar                    3166,3167                         

Page 138         Source Listing                  LENGTH_OF_YEAR_GREGORIAN
2021-06-01 08:54                                 time_manager.F90

   3170 
   3171 !--------------------------------------------------------------------------
   3172 
   3173 function length_of_year_julian()
   3174 
   3175 type(time_type) :: length_of_year_julian
   3176 
   3177 length_of_year_julian = set_time((24 / 4) * 60 * 60, 365)
   3178 
   3179 end function length_of_year_julian


ENTRY POINTS

  Name                                                  
                                                        
 time_manager_mod_mp_length_of_year_julian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LENGTH_OF_YEAR_JULIAN      Func   3173     RECORD          16          scalar                    3139,3177                         

Page 139         Source Listing                  LENGTH_OF_YEAR_JULIAN
2021-06-01 08:54                                 time_manager.F90

   3180 
   3181 !--------------------------------------------------------------------------
   3182 
   3183 function length_of_year_no_leap()
   3184 
   3185 type(time_type) :: length_of_year_no_leap
   3186 
   3187 length_of_year_no_leap = set_time(0, 365)
   3188 
   3189 end function length_of_year_no_leap


ENTRY POINTS

  Name                                                   
                                                         
 time_manager_mod_mp_length_of_year_no_leap_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LENGTH_OF_YEAR_NO_LEAP     Func   3183     RECORD          16          scalar                    3141,3187                         

Page 140         Source Listing                  LENGTH_OF_YEAR_NO_LEAP
2021-06-01 08:54                                 time_manager.F90

   3190 
   3191 !--------------------------------------------------------------------------
   3192 
   3193 ! END OF length_of_year BLOCK
   3194 !==========================================================================
   3195 
   3196 !==========================================================================
   3197 ! return number of day in year; Jan 1st is day 1, not zero!
   3198 function day_of_year(time)
   3199   integer :: day_of_year
   3200   type(time_type), intent(in) :: Time
   3201 
   3202   integer :: second, minute, hour, day, month, year
   3203   type(time_type) :: t
   3204 
   3205   call get_date(time,year,month,day,hour,minute,second)
   3206   t = time-set_date(year,1,1,0,0,0)
   3207   day_of_year = t%days + 1
   3208 end


ENTRY POINTS

  Name                                        
                                              
 time_manager_mod_mp_day_of_year_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAY                        Local  3202     I(4)            4           scalar                    3205                              
 DAY_OF_YEAR                Func   3198     I(4)            4           scalar                                                      
 HOUR                       Local  3202     I(4)            4           scalar                    3205                              
 MINUTE                     Local  3202     I(4)            4           scalar                    3205                              
 MONTH                      Local  3202     I(4)            4           scalar                    3205                              
 SECOND                     Local  3202     I(4)            4           scalar                    3205                              
 SET_DATE                   Local  3206                                 scalar                    121,3206                          
 T                          Local  3203     TIME_TYPE       16          scalar                    3206,3207                         
 TIME                       Dummy  3198     TIME_TYPE       16          scalar   ARG,IN           3205,3206                         
 YEAR                       Local  3202     I(4)            4           scalar                    3205,3206                         

Page 141         Source Listing                  DAY_OF_YEAR
2021-06-01 08:54                                 time_manager.F90

   3209 
   3210 ! START OF days_in_year BLOCK
   3211 ! <FUNCTION NAME="days_in_year">
   3212 
   3213 !   <OVERVIEW>
   3214 !      Returns the number of days in the calendar year corresponding to
   3215 !      the date represented by time for the default calendar.
   3216 !   </OVERVIEW>
   3217 !   <DESCRIPTION>
   3218 !      Returns the number of days in the calendar year corresponding to
   3219 !      the date represented by time for the default calendar.
   3220 !   </DESCRIPTION>
   3221 !   <TEMPLATE> days_in_year(Time) </TEMPLATE>
   3222 !   <IN NAME="Time" TYPE="time_type">A time interval.</IN>
   3223 !   <OUT>
   3224 !      The number of days in this year for the default calendar type.
   3225 !   </OUT>
   3226 
   3227 
   3228 function days_in_year(Time)
   3229 
   3230 ! What is the number of days in this year for the default calendar type
   3231 
   3232 integer :: days_in_year
   3233 type(time_type), intent(in) :: Time
   3234 
   3235 if(.not.module_is_initialized) call time_manager_init
   3236 
   3237 select case(calendar_type)
   3238 case(THIRTY_DAY_MONTHS)
   3239    days_in_year = days_in_year_thirty(Time)
   3240 case(GREGORIAN)
   3241    days_in_year = days_in_year_gregorian(Time)
   3242 case(JULIAN)
   3243    days_in_year = days_in_year_julian(Time)
   3244 case(NOLEAP)
   3245    days_in_year = days_in_year_no_leap(Time)
   3246 case default
   3247    call error_mesg('days_in_year','Invalid calendar type in days_in_year',FATAL)
   3248 end select
   3249 end function days_in_year

Page 142         Source Listing                  DAYS_IN_YEAR
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                         
                                               
 time_manager_mod_mp_days_in_year_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS_IN_YEAR               Func   3228     I(4)            4           scalar                                                      
 DAYS_IN_YEAR_GREGORIAN@0   Local  3241     I(4)            4           scalar                                                      
 DAYS_IN_YEAR_JULIAN@0      Local  3243     I(4)            4           scalar                                                      
 DAYS_IN_YEAR_NO_LEAP@0     Local  3245     I(4)            4           scalar                                                      
 DAYS_IN_YEAR_THIRTY@0      Local  3239     I(4)            4           scalar                                                      
 TIME                       Dummy  3228     TIME_TYPE       16          scalar   ARG,IN           3239,3241,3243,3245               

Page 143         Source Listing                  DAYS_IN_YEAR
2021-06-01 08:54                                 time_manager.F90

   3250 ! </FUNCTION>
   3251 
   3252 !--------------------------------------------------------------------------
   3253 
   3254 function days_in_year_thirty(Time)
   3255 
   3256 integer :: days_in_year_thirty
   3257 type(time_type), intent(in) :: Time
   3258 
   3259 days_in_year_thirty = 360
   3260 
   3261 end function days_in_year_thirty


ENTRY POINTS

  Name                                                
                                                      
 time_manager_mod_mp_days_in_year_thirty_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS_IN_YEAR_THIRTY        Func   3254     I(4)            4           scalar                    3239,3259                         
 TIME                       Dummy  3254     TIME_TYPE       16          scalar   ARG,IN                                             

Page 144         Source Listing                  DAYS_IN_YEAR_THIRTY
2021-06-01 08:54                                 time_manager.F90

   3262 
   3263 !---------------------------------------------------------------------------
   3264 
   3265 function days_in_year_gregorian(Time)
   3266 
   3267 integer :: days_in_year_gregorian
   3268 type(time_type), intent(in) :: Time
   3269 
   3270 if(leap_year_gregorian(Time)) then
   3271   days_in_year_gregorian = 366
   3272 else
   3273   days_in_year_gregorian = 365
   3274 endif
   3275 
   3276 end function days_in_year_gregorian


ENTRY POINTS

  Name                                                   
                                                         
 time_manager_mod_mp_days_in_year_gregorian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS_IN_YEAR_GREGORIAN     Func   3265     I(4)            4           scalar                    3241,3271,3273                    
 TIME                       Dummy  3265     TIME_TYPE       16          scalar   ARG,IN           3270                              

Page 145         Source Listing                  DAYS_IN_YEAR_GREGORIAN
2021-06-01 08:54                                 time_manager.F90

   3277 
   3278 !--------------------------------------------------------------------------
   3279 function days_in_year_julian(Time)
   3280 
   3281 integer :: days_in_year_julian
   3282 type(time_type), intent(in) :: Time
   3283 
   3284 if(leap_year_julian(Time)) then
   3285    days_in_year_julian = 366
   3286 else
   3287    days_in_year_julian = 365
   3288 endif
   3289 
   3290 end function days_in_year_julian


ENTRY POINTS

  Name                                                
                                                      
 time_manager_mod_mp_days_in_year_julian_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS_IN_YEAR_JULIAN        Func   3279     I(4)            4           scalar                    3243,3285,3287                    
 TIME                       Dummy  3279     TIME_TYPE       16          scalar   ARG,IN           3284                              

Page 146         Source Listing                  DAYS_IN_YEAR_JULIAN
2021-06-01 08:54                                 time_manager.F90

   3291 
   3292 !--------------------------------------------------------------------------
   3293 
   3294 function days_in_year_no_leap(Time)
   3295 
   3296 integer :: days_in_year_no_leap
   3297 type(time_type), intent(in) :: Time
   3298 
   3299 days_in_year_no_leap = 365
   3300 
   3301 end function days_in_year_no_leap


ENTRY POINTS

  Name                                                 
                                                       
 time_manager_mod_mp_days_in_year_no_leap_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DAYS_IN_YEAR_NO_LEAP       Func   3294     I(4)            4           scalar                    3245,3299                         
 TIME                       Dummy  3294     TIME_TYPE       16          scalar   ARG,IN                                             

Page 147         Source Listing                  DAYS_IN_YEAR_NO_LEAP
2021-06-01 08:54                                 time_manager.F90

   3302 
   3303 !--------------------------------------------------------------------------
   3304 
   3305 ! END OF days_in_year BLOCK
   3306 
   3307 !==========================================================================
   3308 ! <FUNCTION NAME="month_name">
   3309 
   3310 !   <OVERVIEW>
   3311 !      Returns a character string containing the name of the
   3312 !      month corresponding to month number n.
   3313 !   </OVERVIEW>
   3314 !   <DESCRIPTION>
   3315 !      Returns a character string containing the name of the
   3316 !      month corresponding to month number n. Definition is the
   3317 !      same for all calendar types.
   3318 !   </DESCRIPTION>
   3319 !   <TEMPLATE> month_name(n) </TEMPLATE>
   3320 !   <IN NAME="n" TYPE="integer">Month number.</IN>
   3321 !   <OUT NAME="month_name" TYPE="character(len=9)">
   3322 !      The character string associated with a month.
   3323 !      All calendars have 12 months and return full
   3324 !      month names, not abreviations.
   3325 !   </OUT>
   3326 
   3327 function month_name(n)
   3328 
   3329 ! Returns character string associated with a month, for now, all calendars
   3330 ! have 12 months and will return standard names.
   3331 
   3332 character (len=9) :: month_name
   3333 integer, intent(in) :: n
   3334 character (len = 9), dimension(12) :: months = (/'January  ', 'February ', &
   3335           'March    ', 'April    ', 'May      ', 'June     ', 'July     ', &
   3336           'August   ', 'September', 'October  ', 'November ', 'December '/)
   3337 
   3338 if(.not.module_is_initialized) call time_manager_init
   3339 
   3340 if(n < 1 .or. n > 12) call error_mesg('month_name','Illegal month index',FATAL)
   3341 
   3342 month_name = months(n)
   3343 
   3344 end function month_name

Page 148         Source Listing                  MONTH_NAME
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                       
                                             
 time_manager_mod_mp_month_name_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 MONTHS                     Local  3334     CHAR            9     1     12                        3334,3342                         
 MONTH_NAME                 Func   3327     CHAR            9           scalar                                                      
 N                          Dummy  3327     I(4)            4           scalar   ARG,IN           3340,3342                         

Page 149         Source Listing                  MONTH_NAME
2021-06-01 08:54                                 time_manager.F90

   3345 ! </FUNCTION>
   3346 
   3347 !==========================================================================
   3348 
   3349  function error_handler(routine, err_msg_local, err_msg)
   3350 
   3351 ! The purpose of this routine is to prevent the addition of an excessive amount of code in order to implement
   3352 ! the error handling scheme involving an optional error flag of type character.
   3353 ! It allows one line of code to accomplish what would otherwise require 6 lines.
   3354 ! A value of .true. for this function is a flag to the caller that it should immediately return to it's caller.
   3355 
   3356  logical :: error_handler
   3357  character(len=*), intent(in) :: routine, err_msg_local
   3358  character(len=*), intent(out), optional :: err_msg
   3359 
   3360  error_handler = .false.
   3361  if(present(err_msg)) then
   3362    err_msg = err_msg_local
   3363    error_handler = .true.
   3364  else
   3365    call error_mesg(trim(routine),trim(err_msg_local),FATAL)
   3366  endif
   3367 
   3368  end function error_handler


ENTRY POINTS

  Name                                          
                                                
 time_manager_mod_mp_error_handler_             

Page 150         Source Listing                  ERROR_HANDLER
2021-06-01 08:54 Symbol Table                    time_manager.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERROR_HANDLER              Func   3349     L(4)            4           scalar                    368,396,399,408,429,439,540,549,62
                                                                                                  5,630,729,734,1315,1400,1572,1579,
                                                                                                  1745,1748,1756,2162,2233,2280,2293
                                                                                                  ,2692,2700,2875,2883,2931,2934,303
                                                                                                  8,3360,3363,3536,3557             
 ERR_MSG                    Dummy  3349     CHAR                        scalar   ARG,OUT          3361,3362                         
 ERR_MSG_LOCAL              Dummy  3349     CHAR                        scalar   ARG,IN           3362,3365                         
 PRESENT                    Func   3361                                 scalar                    3361                              
 ROUTINE                    Dummy  3349     CHAR                        scalar   ARG,IN           3365                              
 TRIM                       Func   3365                                 scalar                    3365                              

Page 151         Source Listing                  ERROR_HANDLER
2021-06-01 08:54                                 time_manager.F90

   3369 
   3370 !==========================================================================
   3371 !------------------------------------------------------------------------
   3372 ! <SUBROUTINE NAME="time_manager_init">
   3373 
   3374 !   <OVERVIEW>
   3375 !      Writes the version information to the log file
   3376 !   </OVERVIEW>
   3377 !   <DESCRIPTION>
   3378 !      Initialization routine.
   3379 !      Writes the version information to the log file
   3380 !   </DESCRIPTION>
   3381 !   <TEMPLATE>time_manager_init()</TEMPLATE>
   3382 
   3383 subroutine time_manager_init ( )
   3384 
   3385   if (module_is_initialized) return  ! silent return if already called
   3386 
   3387   call write_version_number("TIME_MANAGER_MOD", version)
   3388   module_is_initialized = .true.
   3389 
   3390 end subroutine time_manager_init


ENTRY POINTS

  Name                                              
                                                    
 time_manager_mod_mp_time_manager_init_             

Page 152         Source Listing                  TIME_MANAGER_INIT
2021-06-01 08:54 Symbol Table                    time_manager.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME_MANAGER_INIT          Subr   3383                                                                                             
 VERSION                    Param  3387     CHAR            7           scalar                    3387                              
 WRITE_VERSION_NUMBER       Subr   3387                                          PRIV             95,3387                           

Page 153         Source Listing                  TIME_MANAGER_INIT
2021-06-01 08:54                                 time_manager.F90

   3391 ! </SUBROUTINE>
   3392 
   3393 !------------------------------------------------------------------------
   3394 ! <SUBROUTINE NAME="print_time">
   3395 
   3396 !   <OVERVIEW>
   3397 !      Prints the given time_type argument as a time (using days, seconds and ticks)
   3398 !   </OVERVIEW>
   3399 !   <DESCRIPTION>
   3400 !      Prints the given time_type argument as a time (using days, seconds and ticks)
   3401 !      NOTE: there is no check for PE number.
   3402 !   </DESCRIPTION>
   3403 !   <TEMPLATE>print_time (time,str,unit)</TEMPLATE>
   3404 !   <IN NAME="time" TYPE="time_type"> Time that will be printed. </IN>
   3405 !   <IN NAME="str" TYPE="character (len=*)" DEFAULT="TIME: or DATE:">
   3406 !      Character string that precedes the printed time or date.
   3407 !   </IN>
   3408 !   <IN NAME="unit" TYPE="integer">
   3409 !      Unit number for printed output. The default unit is stdout.
   3410 !   </IN>
   3411 subroutine print_time (Time,str,unit)
   3412 type(time_type)  , intent(in) :: Time
   3413 character (len=*), intent(in), optional :: str
   3414 integer          , intent(in), optional :: unit
   3415 integer :: s,d,ticks, ns,nd,nt, unit_in
   3416 character(len=19) :: fmt
   3417 
   3418 ! prints the time to standard output (or optional unit) as days and seconds
   3419 ! NOTE: there is no check for PE number
   3420 
   3421   unit_in = stdout()
   3422   if (present(unit)) unit_in = unit
   3423 
   3424   call get_time (Time,s,d,ticks)
   3425 
   3426 ! format output
   3427 ! get number of digits for days and seconds strings
   3428    nd = int(log10(real(max(1,d))))+1
   3429    ns = int(log10(real(max(1,s))))+1
   3430    nt = int(log10(real(max(1,ticks))))+1
   3431    write (fmt,10) nd, ns, nt
   3432 10 format ('(a,i',i2.2,',a,i',i2.2,',a,i',i2.2,')')
   3433 
   3434   if (present(str)) then
   3435      write (unit_in,fmt) trim(str)//' day=', d, ', sec=', s, ', ticks=', ticks
   3436   else
   3437      write (unit_in,fmt)       'TIME: day=', d, ', sec=', s, ', ticks=', ticks
   3438   endif
   3439 
   3440 end subroutine print_time

Page 154         Source Listing                  PRINT_TIME
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                       
                                             
 time_manager_mod_mp_print_time_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  3432                                                           3431                              
 D                          Local  3415     I(4)            4           scalar                    3424,3428,3435,3437               
 FMT                        Local  3416     CHAR            19          scalar                    3431,3435,3437                    
 INT                        Func   3428                                 scalar                    3428,3429,3430                    
 LOG10                      Func   3428                                 scalar                    3428,3429,3430                    
 MAX                        Func   3428                                 scalar                    3428,3429,3430                    
 ND                         Local  3415     I(4)            4           scalar                    3428,3431                         
 NS                         Local  3415     I(4)            4           scalar                    3429,3431                         
 NT                         Local  3415     I(4)            4           scalar                    3430,3431                         
 PRESENT                    Func   3422                                 scalar                    3422,3434                         
 PRINT_TIME                 Subr   3411                                                                                             
 REAL                       Func   3428                                 scalar                    3428,3429,3430                    
 S                          Local  3415     I(4)            4           scalar                    3424,3429,3435,3437               
 STDOUT                     Func   3421     I(4)            4           scalar   PRIV             95,3421,3473                      
 STR                        Dummy  3411     CHAR                        scalar   ARG,IN           3434,3435                         
 TICKS                      Local  3415     I(4)            4           scalar                    3424,3430,3435,3437               
 TIME                       Dummy  3411     TIME_TYPE       16          scalar   ARG,IN           3424                              
 TRIM                       Func   3435                                 scalar                    3435                              
 UNIT                       Dummy  3411     I(4)            4           scalar   ARG,IN           3422                              
 UNIT_IN                    Local  3415     I(4)            4           scalar                    3421,3422,3435,3437               

Page 155         Source Listing                  PRINT_TIME
2021-06-01 08:54                                 time_manager.F90

   3441 ! </SUBROUTINE>
   3442 
   3443 !------------------------------------------------------------------------
   3444 ! <SUBROUTINE NAME="print_date">
   3445 
   3446 !   <OVERVIEW>
   3447 !      prints the time to standard output (or optional unit) as a date.
   3448 !   </OVERVIEW>
   3449 !   <DESCRIPTION>
   3450 !      Prints the given time_type argument as a date (using year, month, day,
   3451 !      hour, minutes, seconds and ticks). NOTE: there is no check for PE number.
   3452 !   </DESCRIPTION>
   3453 !   <TEMPLATE> print_date (time,str,unit)
   3454 !   </TEMPLATE>
   3455 !   <IN NAME="time" TYPE="time_type"> Time that will be printed. </IN>
   3456 !   <IN NAME="str" TYPE="character (len=*)" DEFAULT="TIME: or DATE:">
   3457 !      Character string that precedes the printed time or date.
   3458 !   </IN>
   3459 !   <IN NAME="unit" TYPE="integer">
   3460 !      Unit number for printed output. The default unit is stdout.
   3461 !   </IN>
   3462 
   3463 subroutine print_date (Time,str,unit)
   3464 type(time_type)  , intent(in) :: Time
   3465 character (len=*), intent(in), optional :: str
   3466 integer          , intent(in), optional :: unit
   3467 integer :: y,mo,d,h,m,s, unit_in
   3468 character(len=9) :: mon
   3469 
   3470 ! prints the time to standard output (or optional unit) as a date
   3471 ! NOTE: there is no check for PE number
   3472 
   3473   unit_in = stdout()
   3474   if (present(unit)) unit_in = unit
   3475 
   3476   call get_date (Time,y,mo,d,h,m,s)
   3477   mon = month_name(mo)
   3478   if (present(str)) then
   3479      write (unit_in,10) trim(str)//' ', y,mon(1:3),' ',d,' ',h,':',m,':',s
   3480   else
   3481      write (unit_in,10)       'DATE: ', y,mon(1:3),' ',d,' ',h,':',m,':',s
   3482   endif
   3483 10 format (a,i4,1x,a3,4(a1,i2.2))
   3484 
   3485 end subroutine print_date

Page 156         Source Listing                  PRINT_DATE
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                       
                                             
 time_manager_mod_mp_print_date_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 10                         Label  3483                                                           3479,3481                         
 D                          Local  3467     I(4)            4           scalar                    3476,3479,3481                    
 H                          Local  3467     I(4)            4           scalar                    3476,3479,3481                    
 M                          Local  3467     I(4)            4           scalar                    3476,3479,3481                    
 MO                         Local  3467     I(4)            4           scalar                    3476,3477                         
 MON                        Local  3468     CHAR            9           scalar                    3477,3479,3481                    
 MONTH_NAME                 Func   3477     CHAR            9           scalar                    130,3342,3477                     
 PRESENT                    Func   3474                                 scalar                    3474,3478                         
 PRINT_DATE                 Subr   3463                                                                                             
 S                          Local  3467     I(4)            4           scalar                    3476,3479,3481                    
 STR                        Dummy  3463     CHAR                        scalar   ARG,IN           3478,3479                         
 TIME                       Dummy  3463     TIME_TYPE       16          scalar   ARG,IN           3476                              
 TRIM                       Func   3479                                 scalar                    3479                              
 UNIT                       Dummy  3463     I(4)            4           scalar   ARG,IN           3474                              
 UNIT_IN                    Local  3467     I(4)            4           scalar                    3473,3474,3479,3481               
 Y                          Local  3467     I(4)            4           scalar                    3476,3479,3481                    

Page 157         Source Listing                  PRINT_DATE
2021-06-01 08:54                                 time_manager.F90

   3486 ! </SUBROUTINE>
   3487 
   3488 !------------------------------------------------------------------------
   3489 ! <FUNCTION NAME="valid_calendar_types">
   3490 
   3491 !   <OVERVIEW>
   3492 !     Returns a character string that describes the
   3493 !     calendar type corresponding to the input integer.
   3494 !   </OVERVIEW>
   3495 !   <DESCRIPTION>
   3496 !     Returns a character string that describes the
   3497 !     calendar type corresponding to the input integer.
   3498 !   </DESCRIPTION>
   3499 !   <IN NAME="ncal" TYPE="integer">
   3500 !     An integer corresponding to a valid calendar type.
   3501 !   </IN>
   3502 !   <OUT NAME="err_msg" TYPE="character, optional" DIM="(scalar)">
   3503 !     When present, and when non-blank, a fatal error condition as been detected.
   3504 !     The string itself is an error message.
   3505 !     It is recommended that, when err_msg is present in the call
   3506 !     to this routine, the next line of code should be something
   3507 !     similar to this:
   3508 !     if(err_msg /= '') call error_mesg('my_routine','additional info: '//trim(err_msg),FATAL)
   3509 !   </OUT>
   3510 !   <OUT NAME="valid_calendar_types" TYPE="character(len=24)">
   3511 !     A character string describing the calendar type.
   3512 !   </OUT>
   3513 
   3514 function valid_calendar_types(ncal, err_msg)
   3515 integer, intent(in) :: ncal
   3516 character(len=*), intent(out), optional :: err_msg
   3517 character(len=24) :: valid_calendar_types
   3518 character(len=128) :: err_msg_local
   3519 
   3520 if(.not.module_is_initialized) call time_manager_init
   3521 
   3522 if(present(err_msg)) err_msg = ''
   3523 
   3524 if(ncal == NO_CALENDAR) then
   3525   valid_calendar_types = 'NO_CALENDAR             '
   3526 else if(ncal == THIRTY_DAY_MONTHS) then
   3527   valid_calendar_types = '360_DAY                 '
   3528 else if(ncal == JULIAN) then
   3529   valid_calendar_types = 'JULIAN                  '
   3530 else if(ncal == GREGORIAN) then
   3531   valid_calendar_types = 'GREGORIAN               '
   3532 else if(ncal == NOLEAP) then
   3533   valid_calendar_types = 'NOLEAP                  '
   3534 else
   3535   write(err_msg_local,'(a,i4,a)') 'calendar type=',ncal,' is invalid.'
   3536   if(error_handler('function valid_calendar_types', err_msg_local, err_msg)) return
   3537 endif
   3538 end function valid_calendar_types

Page 158         Source Listing                  VALID_CALENDAR_TYPES
2021-06-01 08:54 Entry Points                    time_manager.F90



ENTRY POINTS

  Name                                                 
                                                       
 time_manager_mod_mp_valid_calendar_types_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 ERR_MSG                    Dummy  3514     CHAR                        scalar   ARG,OUT          3522,3536                         
 ERR_MSG_LOCAL              Local  3518     CHAR            128         scalar                    3535,3536                         
 NCAL                       Dummy  3514     I(4)            4           scalar   ARG,IN           3524,3526,3528,3530,3532,3535     
 PRESENT                    Func   3522                                 scalar                    3522                              
 VALID_CALENDAR_TYPES       Func   3514     CHAR            24          scalar                                                      

Page 159         Source Listing                  VALID_CALENDAR_TYPES
2021-06-01 08:54                                 time_manager.F90

   3539 ! </FUNCTION>
   3540 !------------------------------------------------------------------------
   3541 
   3542 !--- get the a character string that represents the time. The format will be
   3543 !--- yyyymmdd.hhmmss
   3544 function date_to_string(time, err_msg)
   3545   type(time_type),  intent(in)            :: time
   3546   character(len=*), intent(out), optional :: err_msg
   3547   character(len=128)                      :: err_msg_local
   3548   character(len=15)                       :: date_to_string
   3549   integer                                 :: yr,mon,day,hr,min,sec
   3550 
   3551   if(present(err_msg)) err_msg = ''
   3552   call get_date(time,yr,mon,day,hr,min,sec)
   3553   if (yr <= 9999) then
   3554      write(date_to_string,'(I4.4,I2.2,I2.2,".",I2.2,I2.2,I2.2)') yr, mon, day, hr, min, sec
   3555   else
   3556      write(err_msg_local, '(a,i4.4,a)') 'year = ', yr, ' should be less than 10000'
   3557      if(error_handler('function date_to_string', err_msg_local, err_msg)) return
   3558   endif
   3559 
   3560 end function date_to_string


ENTRY POINTS

  Name                                           
                                                 
 time_manager_mod_mp_date_to_string_             

Page 160         Source Listing                  DATE_TO_STRING
2021-06-01 08:54 Symbol Table                    time_manager.F90



SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 DATE_TO_STRING             Func   3544     CHAR            15          scalar                                                      
 DAY                        Local  3549     I(4)            4           scalar                    3552,3554                         
 ERR_MSG                    Dummy  3544     CHAR                        scalar   ARG,OUT          3551,3557                         
 ERR_MSG_LOCAL              Local  3547     CHAR            128         scalar                    3556,3557                         
 HR                         Local  3549     I(4)            4           scalar                    3552,3554                         
 MIN                        Local  3549     I(4)            4           scalar                    3552,3554                         
 MON                        Local  3549     I(4)            4           scalar                    3552,3554                         
 PRESENT                    Func   3551                                 scalar                    3551                              
 SEC                        Local  3549     I(4)            4           scalar                    3552,3554                         
 TIME                       Dummy  3544     TIME_TYPE       16          scalar   ARG,IN           3552                              
 YR                         Local  3549     I(4)            4           scalar                    3552,3553,3554,3556               

Page 161         Source Listing                  DATE_TO_STRING
2021-06-01 08:54                                 time_manager.F90

   3561 
   3562 !> \author Tom Robinson
   3563 !! \email thomas.robinson@noaa.gov
   3564 !! \brief This routine converts the integer t%days to a string
   3565 subroutine time_list_error (T,Terr)
   3566   type(time_type),  intent(in)            :: t     !< time_type input
   3567   character(len=:),   allocatable         :: terr  !< String holding the t%days
   3568 !> Allocate the string
   3569   allocate (character(len=10) :: terr)
   3570 !> Write the integer to the string
   3571   write (terr,'(I0)') t%days
   3572 end subroutine time_list_error


ENTRY POINTS

  Name                                            
                                                  
 time_manager_mod_mp_time_list_error_             


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 T                          Dummy  3565     TIME_TYPE       16          scalar   ARG,IN           3571                              
 TERR                       Dummy  3565     CHAR                        scalar   ARG,ALC,INOUT    3569,3571                         
 TIME_LIST_ERROR            Subr   3565                                                                                             

Page 162         Source Listing                  TIME_LIST_ERROR
2021-06-01 08:54                                 time_manager.F90

   3573 
   3574 
   3575 end module time_manager_mod


SYMBOL CROSS REFERENCE

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONSTANTS_MOD              Module 94                                                             94                                
 DATE_TO_STRING@0           Local  3544     CHAR            15          scalar                                                      
 DAYS_IN_MONTH@0            Local  2909     I(4)            4           scalar                                                      
 DAYS_IN_YEAR@0             Local  3228     I(4)            4           scalar                                                      
 DAY_OF_YEAR@0              Local  3198     I(4)            4           scalar                                                      
 DECREMENT_DATE@0           Local  2848     TIME_TYPE       16          scalar                                                      
 DECREMENT_TIME@0           Local  706      TIME_TYPE       16          scalar                                                      
 FMS_MOD                    Module 95                                                             95                                
 GET_CALENDAR_TYPE@0        Local  1619     I(4)            4           scalar                                                      
 GET_DATE_JULIAN            Subr   144                                                            144                               
 GET_DATE_NO_LEAP           Subr   144                                                            144                               
 GET_TICKS_PER_SECOND@0     Local  1664     I(4)            4           scalar                                                      
 INCREMENT_DATE@0           Local  2654     TIME_TYPE       16          scalar                                                      
 INCREMENT_TIME@0           Local  602      TIME_TYPE       16          scalar                                                      
 INTERVAL_ALARM@0           Local  1444     L(4)            4           scalar                                                      
 INVALID_CALENDAR           Param  153      I(4)            4           scalar                    114                               
 LEAP_YEAR@0                Local  3017     L(4)            4           scalar                                                      
 LENGTH_OF_YEAR@0           Local  3125     TIME_TYPE       16          scalar                                                      
 MONTH_NAME@0               Local  3327     CHAR            9           scalar                                                      
 Operator (+)                      104                                                                                              
 PLATFORM_MOD               Module 93                                                             93                                
 PRINT_DATE                 Subr   135                                                            135                               
 PRINT_TIME                 Subr   135                                                            135                               
 REPEAT_ALARM@0             Local  1497     L(4)            4           scalar                                                      
 RSECONDS_PER_DAY           Param  94       R(8)            8           scalar   PRIV             159                               
 SCALAR_TIME_MULT@0         Local  1131     TIME_TYPE       16          scalar                                                      
 SET_CALENDAR_TYPE          Subr   117                                                            117                               
 SET_DATE_C@0               Local  2171     TIME_TYPE       16          scalar                                                      
 SET_DATE_I@0               Local  2137     TIME_TYPE       16          scalar                                                      
 SET_DATE_JULIAN@0          Local  2471     TIME_TYPE       16          scalar                                                      
 SET_DATE_NO_LEAP@0         Local  2551     TIME_TYPE       16          scalar                                                      
 SET_DATE_PRIVATE@0         Local  2085     L(4)            4           scalar                                                      
 SET_TICKS_PER_SECOND       Subr   119                                                            119                               
 SET_TIME_C@0               Local  374      TIME_TYPE       16          scalar                                                      
 SET_TIME_I@0               Local  353      TIME_TYPE       16          scalar                                                      
 SET_TIME_PRIVATE@0         Local  301      L(4)            4           scalar                                                      
 TIME_DIVIDE@0              Local  1168     I(4)            4           scalar                                                      
 TIME_GE@0                  Local  804      L(4)            4           scalar                                                      
 TIME_GT@0                  Local  762      L(4)            4           scalar                                                      
 TIME_LE@0                  Local  880      L(4)            4           scalar                                                      
 TIME_LIST_ERROR            Subr   111                                                            111                               
 TIME_LT@0                  Local  839      L(4)            4           scalar                                                      
 TIME_MANAGER_MOD           Module 20                                                                                               
 TIME_MINUS@0               Local  1029     TIME_TYPE       16          scalar                                                      
 TIME_NE@0                  Local  953      L(4)            4           scalar                                                      
 TIME_PLUS@0                Local  988      TIME_TYPE       16          scalar                                                      
 TIME_REAL_DIVIDE@0         Local  1216     R(8)            8           scalar                                                      
 TIME_SCALAR_DIVIDE@0       Local  1368     TIME_TYPE       16          scalar                                                      

Page 163         Source Listing                  TIME_LIST_ERROR
2021-06-01 08:54 Symbol Table                    time_manager.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 TIME_SCALAR_MULT@0         Local  1071     TIME_TYPE       16          scalar                                                      
 TIME_TYPE_TO_REAL@0        Local  1281     R(8)            8           scalar                                                      


TYPE COMPONENTS/COMMON VARIABLES

 Name                       Type            Bytes Offset   Dimen Elements Attributes       References                         
                                                                                                                              
 TIME_TYPE.DUMMY            I(4)            4     12             scalar   PRIV                                                

Page 164         Source Listing                  TIME_LIST_ERROR
2021-06-01 08:54                                 time_manager.F90

   3576 
   3577 ! <INFO>
   3578 
   3579 !   <TESTPROGRAM NAME="time_main2">
   3580 !    <PRE>
   3581 !        use time_manager_mod
   3582 !        implicit none
   3583 !        type(time_type) :: dt, init_date, astro_base_date, time, final_date
   3584 !        type(time_type) :: next_rad_time, mid_date
   3585 !        type(time_type) :: repeat_alarm_freq, repeat_alarm_length
   3586 !        integer :: num_steps, i, days, months, years, seconds, minutes, hours
   3587 !        integer :: months2, length
   3588 !        real :: astro_days
   3589 !
   3590 !   !Set calendar type
   3591 !   !    call set_calendar_type(THIRTY_DAY_MONTHS)
   3592 !        call set_calendar_type(JULIAN)
   3593 !   !    call set_calendar_type(NOLEAP)
   3594 !
   3595 !   ! Set timestep
   3596 !        dt = set_time(1100, 0)
   3597 !
   3598 !   ! Set initial date
   3599 !        init_date = set_date(1992, 1, 1)
   3600 !
   3601 !   ! Set date for astronomy delta calculation
   3602 !        astro_base_date = set_date(1970, 1, 1, 12, 0, 0)
   3603 !
   3604 !   ! Copy initial time to model current time
   3605 !        time = init_date
   3606 !
   3607 !   ! Determine how many steps to do to run one year
   3608 !        final_date = increment_date(init_date, years = 1)
   3609 !        num_steps = (final_date - init_date) / dt
   3610 !        write(*, *) 'Number of steps is' , num_steps
   3611 !
   3612 !   ! Want to compute radiation at initial step, then every two hours
   3613 !        next_rad_time = time + set_time(7200, 0)
   3614 !
   3615 !   ! Test repeat alarm
   3616 !        repeat_alarm_freq = set_time(0, 1)
   3617 !        repeat_alarm_length = set_time(7200, 0)
   3618 !
   3619 !   ! Loop through a year
   3620 !        do i = 1, num_steps
   3621 !
   3622 !   ! Increment time
   3623 !        time = time + dt
   3624 !
   3625 !   ! Test repeat alarm
   3626 !        if(repeat_alarm(time, repeat_alarm_freq, repeat_alarm_length)) &
   3627 !        write(*, *) 'REPEAT ALARM IS TRUE'
   3628 !
   3629 !   ! Should radiation be computed? Three possible tests.
   3630 !   ! First test assumes exact interval; just ask if times are equal
   3631 !   !     if(time == next_rad_time) then
   3632 !   ! Second test computes rad on last time step that is <= radiation time

Page 165         Source Listing                  TIME_LIST_ERROR
2021-06-01 08:54                                 time_manager.F90

   3633 !   !     if((next_rad_time - time) < dt .and. time < next_rad) then
   3634 !   ! Third test computes rad on time step closest to radiation time
   3635 !         if(interval_alarm(time, dt, next_rad_time, set_time(7200, 0))) then
   3636 !           call get_date(time, years, months, days, hours, minutes, seconds)
   3637 !           write(*, *) days, month_name(months), years, hours, minutes, seconds
   3638 !
   3639 !   ! Need to compute real number of days between current time and astro_base
   3640 !           call get_time(time - astro_base_date, seconds, days)
   3641 !           astro_days = days + seconds / 86400.
   3642 !   !       write(*, *) 'astro offset ', astro_days
   3643 !        end if
   3644 !
   3645 !   ! Can compute daily, monthly, yearly, hourly, etc. diagnostics as for rad
   3646 !
   3647 !   ! Example: do diagnostics on last time step of this month
   3648 !        call get_date(time + dt, years, months2, days, hours, minutes, seconds)
   3649 !        call get_date(time, years, months, days, hours, minutes, seconds)
   3650 !        if(months /= months2) then
   3651 !           write(*, *) 'last timestep of month'
   3652 !           write(*, *) days, months, years, hours, minutes, seconds
   3653 !        endif
   3654 !
   3655 !   ! Example: mid-month diagnostics; inefficient to make things clear
   3656 !        length = days_in_month(time)
   3657 !        call get_date(time, years, months, days, hours, minutes, seconds)
   3658 !        mid_date = set_date(years, months, 1) + set_time(0, length) / 2
   3659 !
   3660 !        if(time < mid_date .and. (mid_date - time) < dt) then
   3661 !           write(*, *) 'mid-month time'
   3662 !           write(*, *) days, months, years, hours, minutes, seconds
   3663 !        endif
   3664 !
   3665 !        end do
   3666 !
   3667 !    </PRE>
   3668 !   end program time_main2
   3669 
   3670 !   </TESTPROGRAM>
   3671 !   <NOTE>
   3672 !     The <a name="base date">base date</a> is implicitly defined so users don't
   3673 !     need to be concerned with it. For the curious, the base date is defined as
   3674 !     0 seconds, 0 minutes, 0 hours, day 1, month 1, year 1
   3675 !   </NOTE>
   3676 !   <NOTE>
   3677 !     Please note that a time is a positive definite quantity.
   3678 !   </NOTE>
   3679 !   <NOTE>
   3680 !     See the <LINK SRC="TEST PROGRAM">Test Program </LINK> for a simple program
   3681 !     that shows some of the capabilities of the time manager.
   3682 !   </NOTE>
   3683 ! </INFO>

Page 166         Source Listing                  TIME_LIST_ERROR
2021-06-01 08:54 Subprograms/Common Blocks       time_manager.F90



SUBPROGRAMS/COMMON BLOCKS

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 CONVERT_INTEGER_DATE_TO_CH                                                                                                         
 AR                         Func   2593     CHAR            19          scalar                    2322,2328,2373,2377,2409,2439,2451
                                                                                                  ,2502,2533,2580,2598              
 CUT0                       Func   1877     CHAR            256         scalar                    403,1882,1886,2227                
 DATE_TO_STRING             Func   3544     CHAR            15          scalar                                                      
 DAYS_IN_MONTH              Func   2909     I(4)            4           scalar                                                      
 DAYS_IN_MONTH_GREGORIAN    Func   2941     I(4)            4           scalar                    2925,2950,2951                    
 DAYS_IN_MONTH_JULIAN       Func   2956     I(4)            4           scalar                    2927,2965,2966                    
 DAYS_IN_MONTH_NO_LEAP      Func   2984     I(4)            4           scalar                    2929,2993                         
 DAYS_IN_MONTH_THIRTY       Func   2971     I(4)            4           scalar                    2923,2979                         
 DAYS_IN_YEAR               Func   3228     I(4)            4           scalar                                                      
 DAYS_IN_YEAR_GREGORIAN     Func   3265     I(4)            4           scalar                    3241,3271,3273                    
 DAYS_IN_YEAR_JULIAN        Func   3279     I(4)            4           scalar                    3243,3285,3287                    
 DAYS_IN_YEAR_NO_LEAP       Func   3294     I(4)            4           scalar                    3245,3299                         
 DAYS_IN_YEAR_THIRTY        Func   3254     I(4)            4           scalar                    3239,3259                         
 DAY_OF_YEAR                Func   3198     I(4)            4           scalar                                                      
 DECREMENT_DATE             Func   2848     TIME_TYPE       16          scalar                                                      
 DECREMENT_TIME             Func   706      TIME_TYPE       16          scalar                                                      
 ERROR_HANDLER              Func   3349     L(4)            4           scalar                    368,396,399,408,429,439,540,549,62
                                                                                                  5,630,729,734,1315,1400,1572,1579,
                                                                                                  1745,1748,1756,2162,2233,2280,2293
                                                                                                  ,2692,2700,2875,2883,2931,2934,303
                                                                                                  8,3360,3363,3536,3557             
 GET_CALENDAR_TYPE          Func   1619     I(4)            4           scalar                                                      
 GET_DATE                   Subr   1709                                                                                             
 GET_DATE_GREGORIAN         Subr   1766                                                           1737,2370,2764,2949               
 GET_DATE_GREGORIAN_OLD     Subr   1847                                                           1735                              
 GET_DATE_JULIAN            Subr   1942                                                                                             
 GET_DATE_JULIAN_PRIVATE    Subr   1894                                                           1740,1951,2762,2964               
 GET_DATE_NO_LEAP           Subr   2016                                                                                             
 GET_DATE_NO_LEAP_PRIVATE   Subr   1985                                                           1742,2025,2760,2992               
 GET_DATE_THIRTY            Subr   1957                                                           1730,2758                         
 GET_TICKS_PER_SECOND       Func   1664     I(4)            4           scalar                                                      
 GET_TICK_FROM_STRING       Func   446      L(4)            4           scalar                    428,458,479,2279                  
 GET_TIME                   Subr   520                                                                                              
 INCREMENT_DATE             Func   2654     TIME_TYPE       16          scalar                                                      
 INCREMENT_DATE_PRIVATE     Func   2709     L(4)            4           scalar                    2698,2732,2745,2751,2767,2771,2788
                                                                                                  ,2790,2792,2794,2881              
 INCREMENT_TIME             Func   602      TIME_TYPE       16          scalar                                                      
 INCREMENT_TIME_PRIVATE     Func   637      L(4)            4           scalar                    629,650,655,659,733,2751          
 INTERVAL_ALARM             Func   1444     L(4)            4           scalar                                                      
 LEAP_YEAR                  Func   3017     L(4)            4           scalar                                                      
 LEAP_YEAR_GREGORIAN        Func   3045     L(4)            4           scalar                    3032,3054,3270                    
 LEAP_YEAR_GREGORIAN_INT    Func   3060     L(4)            4           scalar                    1588,1799,1809,2317,2371,2951,3054
                                                                                                  ,3064,3065,3066                   
 LEAP_YEAR_JULIAN           Func   3072     L(4)            4           scalar                    2966,3034,3081,3284               
 LEAP_YEAR_NO_LEAP          Func   3100     L(4)            4           scalar                    3036,3107                         
 LEAP_YEAR_THIRTY           Func   3087     L(4)            4           scalar                    3030,3094                         
 LENGTH_OF_YEAR             Func   3125     TIME_TYPE       16          scalar                                                      
 LENGTH_OF_YEAR_GREGORIAN   Func   3160     RECORD          16          scalar                    3137,3167                         
 LENGTH_OF_YEAR_JULIAN      Func   3173     RECORD          16          scalar                    3139,3177                         

Page 167         Source Listing                  TIME_LIST_ERROR
2021-06-01 08:54 Subprograms/Common Blocks       time_manager.F90

 Name                       Object Declared Type            Bytes Dimen Elements Attributes       References                        
                                                                                                                                    
 LENGTH_OF_YEAR_NO_LEAP     Func   3183     RECORD          16          scalar                    3141,3187                         
 LENGTH_OF_YEAR_THIRTY      Func   3150     RECORD          16          scalar                    3135,3154                         
 MONTH_NAME                 Func   3327     CHAR            9           scalar                                                      
 PRINT_DATE                 Subr   3463                                                                                             
 PRINT_TIME                 Subr   3411                                                                                             
 REAL_TO_TIME_TYPE          Func   1296     TIME_TYPE       16          scalar                                                      
 REPEAT_ALARM               Func   1497     L(4)            4           scalar                                                      
 SAFE_RTOI                  Func   1323     I(4)            4           scalar                    1309,1311,1313                    
 SCALAR_TIME_MULT           Func   1131     RECORD          16          scalar   PRIV             1139,1186,1393,1394,1510          
 SET_CALENDAR_TYPE          Subr   1556                                                                                             
 SET_DATE_C                 Func   2171     RECORD          16          scalar   PRIV             2292                              
 SET_DATE_GREGORIAN         Func   2302     L(4)            4           scalar                    2115,2313,2323,2329,2365,2374,2378
                                                                                                  ,2794                             
 SET_DATE_GREGORIAN_OLD     Func   2388     L(4)            4           scalar                    2113,2399,2410,2417               
 SET_DATE_I                 Func   2137     RECORD          16          scalar   PRIV             2161,3206                         
 SET_DATE_JULIAN            Func   2471     TIME_TYPE       16          scalar                                                      
 SET_DATE_JULIAN_PRIVATE    Func   2422     L(4)            4           scalar                    2118,2434,2440,2452,2466,2480,2792
 SET_DATE_NO_LEAP           Func   2551     TIME_TYPE       16          scalar                                                      
 SET_DATE_NO_LEAP_PRIVATE   Func   2517     L(4)            4           scalar                    2120,2528,2534,2546,2560,2790     
 SET_DATE_PRIVATE           Func   2085     L(4)            4           scalar                    2108,2113,2115,2118,2120,2123,2126
                                                                                                  ,2161,2292                        
 SET_DATE_THIRTY            Func   2487     L(4)            4           scalar                    2108,2497,2503,2511,2788          
 SET_TICKS_PER_SECOND       Subr   1642                                                                                             
 SET_TIME_C                 Func   374      RECORD          16          scalar   PRIV             438                               
 SET_TIME_I                 Func   353      RECORD          16          scalar   PRIV             367,1106,1390,2544,3154,3167,3177,
                                                                                                  3187                              
 SET_TIME_PRIVATE           Func   301      L(4)            4           scalar                    341,347,367,438,659,1314          
 TIME_ASSIGNMENT            Subr   1257                                          PRIV             997,1040,1042,1106,1139,1390,1393,
                                                                                                  1394,1459,1510,1511,2544,2739,3135
                                                                                                  ,3137,3139,3141,3154,3167,3177,318
                                                                                                  7,3206                            
 TIME_DIVIDE                Func   1168     I(4)            4           scalar   PRIV             1183,1186,1510                    
 TIME_EQ                    Func   915      L(4)            4           scalar   PRIV             811,887,924,960                   
 TIME_GE                    Func   804      L(4)            4           scalar   PRIV             811                               
 TIME_GT                    Func   762      L(4)            4           scalar   PRIV             769,772,774,811,1039,1186,1395    
 TIME_LE                    Func   880      L(4)            4           scalar   PRIV             887,1186,1395,1457,1512           
 TIME_LIST_ERROR            Subr   3565                                                                                             
 TIME_LT                    Func   839      L(4)            4           scalar   PRIV             846,849,851,887                   
 TIME_MANAGER_INIT          Subr   3383                                                                                             
 TIME_MANAGER_MOD           Module 20                                                                                               
 TIME_MINUS                 Func   1029     RECORD          16          scalar   PRIV             1040,1042,1457,1512,3206          
 TIME_NE                    Func   953      L(4)            4           scalar   PRIV             960                               
 TIME_PLUS                  Func   988      RECORD          16          scalar   PRIV             997,1459,1511                     
 TIME_REAL_DIVIDE           Func   1216     R(8)            8           scalar   PRIV             1230                              
 TIME_SCALAR_DIVIDE         Func   1368     RECORD          16          scalar   PRIV             1390,1393,1394,1398,1457,1512     
 TIME_SCALAR_MULT           Func   1071     RECORD          16          scalar   PRIV             1106,1139                         
 TIME_TYPE_TO_REAL          Func   1281     R(8)            8           scalar                                                      
 VALID_CALENDAR_TYPES       Func   3514     CHAR            24          scalar                                                      
 VALID_INCREMENTS           Func   2568     L(4)            4           scalar                    2312,2398,2433,2496,2527,2576,2581
                                                                                                  ,2586                             

COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons

Page 168         Source Listing                  TIME_LIST_ERROR
2021-06-01 08:54                                 time_manager.F90

       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align noarray64byte                  -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume nocontiguous_assumed_shape
       -assume nocontiguous_pointer          -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_inquire_recl              -assume old_ldout_format
       -assume old_ldout_zero                -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -assume norecursion
       -auto                            no   -auto_scalar
  no   -bintext                              -ccdefault default
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check nocontiguous
       -check noformat                       -check nooutput_conversion
       -check nooverflow                     -check nopointers
       -check noshape                        -check nostack
       -check nouninitialized                -check noudio_iostat
       -coarray-num-procs 0             no   -coarray-config-file
       -convert native                       -cross_reference
       -D __INTEL_COMPILER=1910              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20191121       -D _OPENMP=201611
       -D __INTEL_OFFLOAD                    -D __MMX__
       -D __SSE__                            -D __SSE_MATH__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __pentium4                         -D __pentium4__
       -D __tune_pentium4__                  -D PACKAGE_NAME='"GFDL FMS Library"'
       -D PACKAGE_TARNAME='"FMS"'            -D PACKAGE_VERSION='"2021.02.0"'
       -D PACKAGE_STRING='"GFDL FMS Library 2021.02.0"'       -D PACKAGE_BUGREPORT='"gfdl.climate.model.info@noaa.gov"'
       -D PACKAGE_URL='"https://www.gfdl.noaa.gov/fms"'       -D PACKAGE='"FMS"'
       -D VERSION='"2021.02.0"'              -D STDC_HEADERS=1
       -D HAVE_SYS_TYPES_H=1                 -D HAVE_SYS_STAT_H=1
       -D HAVE_STDLIB_H=1                    -D HAVE_STRING_H=1
       -D HAVE_MEMORY_H=1                    -D HAVE_STRINGS_H=1

Page 169         Source Listing                  TIME_LIST_ERROR
2021-06-01 08:54                                 time_manager.F90

       -D HAVE_INTTYPES_H=1                  -D HAVE_STDINT_H=1
       -D HAVE_UNISTD_H=1                    -D HAVE_DLFCN_H=1
       -D LT_OBJDIR='".libs/"'               -D HAVE_MPI_H=1
       -D HAVE_NETCDF_H=1                    -D HAVE_SCHED_GETAFFINITY=1
       -D HAVE_MOD_MPI=1                     -D HAVE_MOD_NETCDF=1
       -D HAVE_CRAY_POINTER=1                -D HAVE_QUAD_PRECISION=1
       -D HAVE_INTERNAL_NML=1                -D use_netCDF=1
       -D use_libMPI=1                       -D INTERNAL_FILE_NML
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model fast
       -fp_model nostrict                    -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits honor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits honor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
  no   -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init nohuge                          -init noinfinity
       -init nominus_huge                    -init nominus_infinity
       -init nominus_tiny                    -init nonan
       -init nosnan                          -init notiny
       -init nozero                     no   -intconstant
       -integer_size 32                 no   -mixed_str_len_arg
       -module ../.mods                      -names lowercase
  no   -noinclude                       no   -o
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O0                              no   -pad_source
       -real_size 64                    no   -recursive
       -reentrancy threaded                  -vec=simd
       -show nofullpath                      -show noinclude
       -show map                             -show options
  no   -syntax_only                     no   -threadcom
  no   -U                               no   -vms
       -w noall                              -w nonone
       -w noalignments                       -w nodeclarations

Page 170         Source Listing                  TIME_LIST_ERROR
2021-06-01 08:54                                 time_manager.F90

       -w noexternals                        -w nogeneral
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w noshape
       -w notruncated_source                 -w nouncalled
       -w nouninitialized                    -w nounused
       -w nousage                       no   -wrap-margins

       -includepath : /opt/netcdf/4.6.1/INTEL/include/,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/,.f90,./.f90,./.f90,../include/.f90,
           ./.f90,/opt/netcdf/4.6.1/INTEL/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mpi/intel64/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/ipp/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/mkl/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/pstl/include/.f90,
           /opt/intel/2020/compilers_and_libraries/linux/tbb/include/.f90,/opt/intel/2020/compilers_and_libraries/linux/daal/include/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/intel64/.f90,/opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/icc/.f90,
           /opt/intel/2020/compilers_and_libraries_2020.0.166/linux/compiler/include/.f90,/usr/local/include/.f90,
           /usr/lib/gcc/x86_64-redhat-linux/4.8.5/include/.f90,/usr/include/.f90,/usr/include/.f90,/usr/include/.f90
       -list filename : time_manager.lst
  no   -o

COMPILER: Intel(R) Fortran 19.1-1555
